name: HumanEval_20_find_closest_elements
language: pl
prompt: "# From a supplied array of numbers (of length at least two) select and return\
  \ two that are the closest to each\n# other and return them in order (smaller number,\
  \ larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
  # [2.0, 2.2]\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n# [2.0,\
  \ 2.0]\nsub find_closest_elements {\n    my($numbers) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_closest_elements;\n\
  \        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
  \ 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0,\
  \ 2.2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0])) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2,\
  \ 3.1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $min_diff = 100;\n    my @result = (0,0);\n    foreach my $i\
    \ (0..(scalar(@$numbers)-2)) {\n        my $diff = $numbers->[$i+1] - $numbers->[$i];\n\
    \        if ($diff < $min_diff) {\n            $min_diff = $diff;\n          \
    \  @result = ($numbers->[$i], $numbers->[$i+1]);\n        }\n    }\n    return\
    \ @result;\n}", "    my $first_number = $numbers->[0];\n    my $second_number\
    \ = $numbers->[1];\n    my $smallest_difference = abs($first_number - $second_number);\n\
    \    for (my $i = 0; $i < scalar(@$numbers); $i++) {\n        for (my $j = $i\
    \ + 1; $j < scalar(@$numbers); $j++) {\n            my $difference = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($difference < $smallest_difference) {\n\
    \                $smallest_difference = $difference;\n                $first_number\
    \ = $numbers->[$i];\n                $second_number = $numbers->[$j];\n      \
    \      }\n        }\n    }\n    return [$first_number, $second_number];\n}", " \
    \   my($min,$max);\n    my(@pairs);\n    my($i,$j);\n    foreach my $i (@$numbers)\
    \ {\n        foreach my $j (@$numbers) {\n            my($distance) = abs($i -\
    \ $j);\n            push(@pairs,{number1 => $i, number2 => $j, distance => $distance});\n\
    \        }\n    }\n    @pairs = sort {$a->{distance} <=> $b->{distance}} @pairs;\n\
    \    return ($pairs[0]->{number1},$pairs[0]->{number2});\n}", "    my $closest_min\
    \ = 100000000;\n    my $closest_max = -100000000;\n    my $closest_min_idx = -1;\n\
    \    my $closest_max_idx = -1;\n    for (my $i = 0; $i < scalar(@$numbers) - 1;\
    \ $i++) {\n        my $number1 = $numbers->[$i];\n        my $number2 = $numbers->[$i\
    \ + 1];\n        my $diff = abs($number1 - $number2);\n        if ($diff < $closest_min)\
    \ {\n            $closest_min = $diff;\n            $closest_min_idx = $i;\n \
    \       }\n        if ($diff > $closest_max) {\n            $closest_max = $diff;\n\
    \            $closest_max_idx = $i;\n        }\n    }\n    if ($closest_min_idx\
    \ == $closest_max_idx) {\n        return [$numbers->[$closest_min_idx], $numbers->[$closest_min_idx\
    \ + 1]];\n    } else {\n        return [$numbers->[$closest_min_idx], $numbers->[$closest_min_idx\
    \ + 1]];\n    }\n}", "    my @numbers = @$numbers;\n    my $result = [ $numbers[0],\
    \ $numbers[1] ];\n    my $smaller_number = $numbers[0];\n    my $larger_number\
    \ = $numbers[1];\n    if ($smaller_number > $larger_number) {\n        $smaller_number\
    \ = $numbers[1];\n        $larger_number = $numbers[0];\n    }\n    for (my $i\
    \ = 2; $i < @numbers; $i++) {\n        my $smaller_number_diff = abs($smaller_number\
    \ - $numbers[$i]);\n        my $larger_number_diff = abs($larger_number - $numbers[$i]);\n\
    \        if ($smaller_number_diff < $larger_number_diff) {\n            $smaller_number\
    \ = $numbers[$i];\n        } else {\n            $larger_number = $numbers[$i];\n\
    \        }\n        if ($smaller_number > $larger_number) {\n            $smaller_number\
    \ = $larger_number;\n            $larger_number = $numbers[$i];\n        }\n \
    \       if ($smaller_number_diff < abs($result->[0] - $result->[1])) {\n     \
    \       $result = [ $smaller_number, $larger_number ];\n        }\n    }\n   \
    \ return $result;\n}", "    my($diff) = 1.0e37;\n    my($result) = [];\n    foreach\
    \ my $i (0..$#{$numbers}) {\n        foreach my $j ($i+1..$#{$numbers}) {\n  \
    \          my($d) = abs($numbers->[$i] - $numbers->[$j]);\n            if ($d\
    \ < $diff) {\n                $diff = $d;\n                $result = [sort {$a\
    \ <=> $b} ($numbers->[$i], $numbers->[$j])];\n            }\n        }\n    }\n\
    \    return $result;\n}", "    my($closest_difference) = 0;\n    my($closest_pair);\n\
    \    my($difference);\n    my($i);\n    my($j);\n    for($i = 0; $i < @$numbers\
    \ - 1; $i++) {\n        for($j = $i + 1; $j < @$numbers; $j++) {\n           \
    \ $difference = abs($numbers->[$i] - $numbers->[$j]);\n            if($difference\
    \ < $closest_difference || !$closest_difference) {\n                $closest_difference\
    \ = $difference;\n                $closest_pair = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return($closest_pair);\n}", "    my($result)\
    \ = [];\n    my($min) = 100000000;\n    for(my($i) = 0; $i < scalar(@$numbers)\
    \ - 1; $i++){\n        for(my($j) = $i + 1; $j < scalar(@$numbers); $j++){\n \
    \           my($distance) = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if($distance < $min){\n                $min = $distance;\n                $result\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $result;\n}\nprint join(\" \", find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])), \"\\n\";\nprint join(\" \", find_closest_elements([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0])), \"\\n\";", "    my $l = @$numbers;\n    my $r = 0;\n    my $first;\n\
    \    my $second;\n    if ($l < 2) {\n        return;\n    }\n    while ($r < $l)\
    \ {\n        if ($first) {\n            my $diff = abs($first - $numbers->[$r]);\n\
    \            if ($diff < $second) {\n                $second = $diff;\n      \
    \      }\n        } else {\n            $first = $numbers->[$r];\n           \
    \ $second = $numbers->[$r+1];\n        }\n        $r++;\n    }\n    return [$first,\
    \ $second];\n}", "    my($closest, $num1, $num2) = (1000000, 0, 0);\n    my(@closest_pair);\n\
    \    for (my $i = 0; $i < scalar(@$numbers) - 1; $i++) {\n        for (my $j =\
    \ $i + 1; $j < scalar(@$numbers); $j++) {\n            if(abs($numbers->[$i] -\
    \ $numbers->[$j]) < $closest) {\n                $closest = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n                @closest_pair = ( $numbers->[$i], $numbers->[$j]\
    \ );\n            }\n        }\n    }\n    return @closest_pair;\n}", "    my($min_idx,\
    \ $next_idx, $min_diff, $next_diff, $diff);\n    $min_idx = 0;\n    $next_idx\
    \ = 1;\n    $min_diff = abs($numbers->[$min_idx] - $numbers->[$next_idx]);\n \
    \   $next_diff = $min_diff;\n    for(my $i = 1; $i < scalar(@$numbers) - 1; $i++)\
    \ {\n        $diff = abs($numbers->[$i] - $numbers->[$i + 1]);\n        if($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_idx = $i;\n\
    \            $next_idx = $i + 1;\n        }\n    }\n    return ($numbers->[$min_idx],\
    \ $numbers->[$next_idx]);\n}", '    my @numbers = @$numbers;', "    my @numbers\
    \ = @$numbers;\n    my $min_dist = abs($numbers[0] - $numbers[1]);\n    my @result\
    \ = ($numbers[0], $numbers[1]);\n    for (my $i = 0; $i < @numbers; $i++) {\n\
    \        for (my $j = $i + 1; $j < @numbers; $j++) {\n            my $dist = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($dist < $min_dist) {\n                $min_dist\
    \ = $dist;\n                @result = ($numbers[$i], $numbers[$j]);\n        \
    \    }\n        }\n    }\n    return @result;\n}", "    my($min_diff) = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my($min_left, $min_right) = ($numbers->[0], $numbers->[1]);\n\
    \    for(my($i) = 0; $i < @$numbers; $i++) {\n        for(my($j) = $i + 1; $j\
    \ < @$numbers; $j++) {\n            my($diff) = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if($diff < $min_diff) {\n                $min_diff = $diff;\n   \
    \             $min_left = $numbers->[$i];\n                $min_right = $numbers->[$j];\n\
    \            }\n        }\n    }\n    return [$min_left, $min_right];\n}", " \
    \   my($smaller, $larger) = @$numbers[0,1];\n    my($dist) = abs($smaller - $larger);\n\
    \    for(my $i = 0; $i < @$numbers; $i++) {\n        for(my $j = $i + 1; $j <\
    \ @$numbers; $j++) {\n            my($new_dist) = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if($new_dist < $dist) {\n                $dist = $new_dist;\n   \
    \             ($smaller, $larger) = @$numbers[$i, $j];\n            }\n      \
    \  }\n    }\n    return [$smaller, $larger];\n}", "    my @array = sort @$numbers;\n\
    \    my $diff = abs($array[0] - $array[1]);\n    my $pair = [];\n    for (my $i\
    \ = 0; $i < scalar @array; $i++) {\n        for (my $j = $i + 1; $j < scalar @array;\
    \ $j++) {\n            if (abs($array[$i] - $array[$j]) < $diff) {\n         \
    \       $diff = abs($array[$i] - $array[$j]);\n                $pair = [$array[$i],\
    \ $array[$j]];\n            }\n        }\n    }\n    return $pair;\n}", "    my\
    \ $diff;\n    my ($diff_min, $i_min, $j_min);\n    for (my $i = 0; $i < scalar(@$numbers);\
    \ $i++) {\n        for (my $j = $i + 1; $j < scalar(@$numbers); $j++) {\n    \
    \        $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if (not defined\
    \ $diff_min or $diff < $diff_min) {\n                $diff_min = $diff;\n    \
    \            $i_min = $i;\n                $j_min = $j;\n            }\n     \
    \   }\n    }\n    return [$numbers->[$i_min], $numbers->[$j_min]];\n}", "    die\
    \ \"Missing numbers\" unless defined $numbers;\n    die \"Non-array given to find_closest_elements\"\
    \ unless ref($numbers) eq 'ARRAY';\n    my $count = scalar(@$numbers);\n    die\
    \ \"Insufficient numbers ($count)\" unless $count >= 2;\n    my $x = $numbers->[0];\n\
    \    my $y = $numbers->[1];\n    my $z = abs($x - $y);\n    for(my $i = 1; $i\
    \ < $count - 1; $i++) {\n        my $x = $numbers->[$i];\n        my $y = $numbers->[$i\
    \ + 1];\n        my $diff = abs($x - $y);\n        if($diff < $z) {\n        \
    \    $z = $diff;\n            $x = $x;\n            $y = $y;\n        }\n    }\n\
    \    return($x, $y);\n}", "    my $min_diff;\n    my $min_pair;\n    for (my $i\
    \ = 0; $i < scalar(@$numbers) - 1; $i++) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if (!defined($min_diff) || $diff < $min_diff)\
    \ {\n            $min_diff = $diff;\n            $min_pair = [$numbers->[$i],\
    \ $numbers->[$i + 1]];\n        }\n    }\n    return $min_pair;\n}", "    my($min,$first,$second);\n\
    \    for(my $i=0;$i<@$numbers;$i++) {\n        my $f = $numbers->[$i];\n     \
    \   for(my $j=$i+1;$j<@$numbers;$j++) {\n            my $s = $numbers->[$j];\n\
    \            my $diff = abs($f-$s);\n            if(!defined($min) || $diff <\
    \ $min) {\n                $min = $diff;\n                $first = $f;\n     \
    \           $second = $s;\n            }\n        }\n    }\n    return [$first,$second];\n\
    }", "    my $result = undef;\n    my $min_distance = 0;\n    for my $i (0 .. $#$numbers\
    \ - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $distance\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if (!defined($result) ||\
    \ $distance < $min_distance) {\n                $result = [$numbers->[$i], $numbers->[$j]];\n\
    \                $min_distance = $distance;\n            }\n        }\n    }\n\
    \    return $result;\n}", "    my $n = scalar(@$numbers);\n    my @numbers = sort\
    \ {$a <=> $b} @$numbers;\n    my $closest_difference = $numbers[1] - $numbers[0];\n\
    \    my $closest_pair = [$numbers[0], $numbers[1]];\n    for (my $i = 2; $i <\
    \ $n; $i++) {\n        my $difference = $numbers[$i] - $numbers[$i - 1];\n   \
    \     if ($difference < $closest_difference) {\n            $closest_difference\
    \ = $difference;\n            $closest_pair = [$numbers[$i - 1], $numbers[$i]];\n\
    \        }\n    }\n    return $closest_pair;\n}", "    my($a, $b, $min_diff);\n\
    \    for my $i (0 .. $#$numbers) {\n        for my $j ($i+1 .. $#$numbers) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ (!defined($min_diff) || $diff < $min_diff) {\n                $min_diff = $diff;\n\
    \                $a = $numbers->[$i];\n                $b = $numbers->[$j];\n\
    \            }\n        }\n    }\n    return ($a, $b);\n}", "    my $closest_dist\
    \ = 10;\n    my @closest_elements;\n    for my $i (0 .. $#{$numbers} - 1) {\n\
    \        my $first = $numbers->[$i];\n        for my $j ($i + 1 .. $#{$numbers})\
    \ {\n            my $second = $numbers->[$j];\n            my $dist = abs($first\
    \ - $second);\n            if ($dist < $closest_dist) {\n                $closest_dist\
    \ = $dist;\n                @closest_elements = sort { $a <=> $b } ($first, $second);\n\
    \            }\n        }\n    }\n    return @closest_elements;\n}", "    my($c1,\
    \ $c2);\n    foreach my $item (@$numbers) {\n        $c1 = $item;\n        foreach\
    \ my $other (@$numbers) {\n            if($c1 != $other && abs($c1 - $other) <\
    \ abs($c1 - $c2)) {\n                $c2 = $other;\n            }\n        }\n\
    \    }\n    if($c1 < $c2) {\n        return [$c1, $c2];\n    } else {\n      \
    \  return [$c2, $c1];\n    }\n}", "    my($short_distance) = 9999999999;\n   \
    \ my($short_distance_array);\n    for(my($i) = 0; $i <= $#{$numbers}; $i++) {\n\
    \        for(my($j) = 0; $j <= $#{$numbers}; $j++) {\n            my($distance)\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if($distance < $short_distance)\
    \ {\n                $short_distance = $distance;\n                $short_distance_array\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $short_distance_array;\n}", "    my $smallest_number = -1;\n    my $smallest_number_index\
    \ = -1;\n    my $smallest_difference = -1;\n    my $delta = -1;\n    my $i = 0;\n\
    \    foreach my $number (@$numbers) {\n        if ($i < scalar(@$numbers) - 1)\
    \ {\n            $delta = $numbers->[$i+1] - $number;\n            if ($smallest_difference\
    \ == -1 || $delta < $smallest_difference) {\n                $smallest_difference\
    \ = $delta;\n                $smallest_number = $number;\n                $smallest_number_index\
    \ = $i;\n            }\n        }\n        $i++;\n    }\n    return [$smallest_number,\
    \ $numbers->[$smallest_number_index+1]];\n}", "    my $i;\n    my $j;\n    my\
    \ $temp;\n    my $distance;\n    my $min;\n    my $result;\n    # Ensure the supplied\
    \ array contains at least two numbers\n    if (scalar(@$numbers) < 2) {\n    \
    \    croak \"Error: Array must contain at least two numbers\";\n    }\n    # Sort\
    \ the array so we can step through it easily.\n    for ($i = 1; $i < scalar(@$numbers);\
    \ $i++) {\n        $j = $i;\n        while ($j > 0 && $numbers->[$j] < $numbers->[$j\
    \ - 1]) {\n            $temp = $numbers->[$j];\n            $numbers->[$j] = $numbers->[$j\
    \ - 1];\n            $numbers->[$j - 1] = $temp;\n            $j--;\n        }\n\
    \    }\n    # Set the initial minimum distance to the largest possible.\n    $min\
    \ = $numbers->[scalar(@$numbers) - 1] - $numbers->[0];\n    # Step through the\
    \ numbers.\n    for ($i = 0; $i < scalar(@$numbers) - 1; $i++) {\n        # Calculate\
    \ the distance between the two numbers\n        $distance = $numbers->[$i + 1]\
    \ - $numbers->[$i];\n        # If the distance is smaller than the current minimum,\
    \ set\n        # the minimum and store the two numbers.\n        if ($distance\
    \ < $min) {\n            $min = $distance;\n            $result = [$numbers->[$i],\
    \ $numbers->[$i + 1]];\n        }\n    }\n    return $result;\n}", "    my($difference,\
    \ $prev, $curr, $min_difference, $min_prev, $min_curr) = 0;\n    foreach my $number\
    \ (sort {$a <=> $b} @$numbers) {\n        if ($prev) {\n            $difference\
    \ = $number - $prev;\n            if (!defined($min_difference) || $difference\
    \ < $min_difference) {\n                $min_difference = $difference;\n     \
    \           $min_prev = $prev;\n                $min_curr = $number;\n       \
    \     }\n        }\n        $prev = $number;\n    }\n    return [$min_prev, $min_curr];\n\
    }", "    my $min = $numbers->[0];\n    my $max = $numbers->[1];\n    my $minDiff\
    \ = abs($min - $max);\n    my $minPair = [$min, $max];\n    for(my $i = 0; $i\
    \ < @$numbers; $i++) {\n        for(my $j = $i + 1; $j < @$numbers; $j++) {\n\
    \            my $currDiff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if($currDiff < $minDiff) {\n                $minDiff = $currDiff;\n       \
    \         $minPair = [$numbers->[$i], $numbers->[$j]];\n            }\n      \
    \  }\n    }\n    return $minPair;\n}", '    return $numbers if scalar(@$numbers)
    == 2;', "    my $min_distance = abs($numbers->[0] - $numbers->[1]);\n    my($closest_a,\
    \ $closest_b) = ($numbers->[0], $numbers->[1]);\n    for (my $i = 0; $i < @$numbers\
    \ - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n       \
    \     my $distance = abs($numbers->[$i] - $numbers->[$j]);\n            if ($distance\
    \ < $min_distance) {\n                $min_distance = $distance;\n           \
    \     ($closest_a, $closest_b) = ($numbers->[$i], $numbers->[$j]);\n         \
    \   }\n        }\n    }\n    return [ sort { $a <=> $b } ($closest_a, $closest_b)\
    \ ];\n}", "    my(@ordered) = sort @$numbers;\n    my($difference) = abs($ordered[0]\
    \ - $ordered[1]);\n    my($closest) = [ $ordered[0], $ordered[1] ];\n    for (my\
    \ $i = 1; $i < scalar(@ordered) - 1; $i++) {\n        my($tmp_difference) = abs($ordered[$i]\
    \ - $ordered[$i + 1]);\n        if ($tmp_difference < $difference) {\n       \
    \     $difference = $tmp_difference;\n            $closest = [ $ordered[$i], $ordered[$i\
    \ + 1] ];\n        }\n    }\n    return @$closest;\n}", "    my @numbers = @$numbers;\n\
    \    my $n = scalar @numbers;\n    my $min = abs($numbers[0] - $numbers[1]);\n\
    \    my @result = ($numbers[0], $numbers[1]);\n    for (my $i = 0; $i < $n - 1;\
    \ $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            my $diff\
    \ = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $min) {\n     \
    \           $min = $diff;\n                @result = ($numbers[$i], $numbers[$j]);\n\
    \            }\n        }\n    }\n    return @result;\n}", '    my @numbers =
    @$numbers;', "    my $min = abs($numbers->[0] - $numbers->[1]);\n    my $result\
    \ = [$numbers->[0], $numbers->[1]];\n    my $size = scalar @$numbers;\n    for\
    \ (my $i = 0; $i < $size - 1; $i++) {\n        for (my $j = $i + 1; $j < $size;\
    \ $j++) {\n            my $abs = abs($numbers->[$i] - $numbers->[$j]);\n     \
    \       if ($abs < $min) {\n                $min = $abs;\n                $result\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $result;\n}", "    my($min, $min_array);\n    for my $i (0 .. scalar(@$numbers)\
    \ - 2) {\n        for my $j ($i + 1 .. scalar(@$numbers) - 1) {\n            my\
    \ $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if (!defined($min)\
    \ || $diff < $min) {\n                $min = $diff;\n                $min_array\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_array;\n}", "    my $smallest = 0;\n    my $element1 = $numbers->[0];\n\
    \    my $element2 = $numbers->[1];\n    for(my $i = 0; $i < scalar(@$numbers);\
    \ $i++) {\n        for(my $j = $i+1; $j < scalar(@$numbers); $j++) {\n       \
    \     my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if(!$smallest\
    \ || $diff < $smallest) {\n                $smallest = $diff;\n              \
    \  $element1 = $numbers->[$i];\n                $element2 = $numbers->[$j];\n\
    \            }\n        }\n    }\n    return ($element1, $element2);\n}", "  \
    \  my @list = @$numbers;\n    @list = sort {$a <=> $b} @list;\n    my $min_diff\
    \ = ($list[0] < 0) ? -$list[0] : $list[0];\n    my $min_pair = [$list[0], $list[1]];\n\
    \    my $length = scalar @list;\n    for(my $i = 0; $i < $length - 1; $i++) {\n\
    \        my $diff = $list[$i + 1] - $list[$i];\n        if($diff < $min_diff)\
    \ {\n            $min_diff = $diff;\n            $min_pair = [$list[$i], $list[$i\
    \ + 1]];\n        }\n    }\n    return $min_pair;\n}", "    my @sorted = sort\
    \ {$a <=> $b} @$numbers;\n    my $smallest = $sorted[1] - $sorted[0];\n    my\
    \ $big_small = $sorted[0];\n    my $big_big = $sorted[1];\n    for(my $i = 0;\
    \ $i < @sorted; $i++) {\n        for(my $j = 0; $j < @sorted; $j++) {\n      \
    \      my $diff = $sorted[$i] - $sorted[$j];\n            if ($diff < $smallest\
    \ && $diff != 0) {\n                $smallest = $diff;\n                $big_small\
    \ = $sorted[$j];\n                $big_big = $sorted[$i];\n            }\n   \
    \     }\n    }\n    return [$big_small, $big_big];\n}", "    my $first = $numbers->[0];\n\
    \    my $second = $numbers->[1];\n    my $closest = abs($first - $second);\n \
    \   for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my $distance = abs($numbers->[$i] - $numbers->[$j]);\n      \
    \      if ($distance < $closest) {\n                $closest = $distance;\n  \
    \              $first = $numbers->[$i];\n                $second = $numbers->[$j];\n\
    \            }\n        }\n    }\n    return [sort { $a <=> $b } ($first, $second)];\n\
    }", "    my($min_diff, $smaller, $larger) = (2, 0, 1);\n    my($diff);\n    my($i,\
    \ $j);\n    for ($i = 0; $i < $#$numbers; $i++) {\n        for ($j = $i + 1; $j\
    \ <= $#$numbers; $j++) {\n            $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $smaller = $i;\n                $larger = $j;\n            }\n\
    \        }\n    }\n    return [$numbers->[$smaller], $numbers->[$larger]];\n}",
  "    my($min, $min_numbers);\n    my($a, $b);\n    foreach my $i (0 .. $#$numbers\
    \ - 1) {\n        $a = $numbers->[$i];\n        $b = $numbers->[$i + 1];\n   \
    \     if(!defined($min) || abs($a - $b) < $min) {\n            $min = abs($a -\
    \ $b);\n            $min_numbers = [$a, $b];\n        }\n    }\n    return $min_numbers;\n\
    }", "    my $min = $numbers->[0];\n    my $min2 = $numbers->[1];\n    foreach\
    \ my $a (@$numbers) {\n        foreach my $b (@$numbers) {\n            if ($a\
    \ != $b && abs($a - $b) < abs($min - $min2)) {\n                $min = $a;\n \
    \               $min2 = $b;\n            }\n        }\n    }\n    my @answer =\
    \ ($min, $min2);\n    if ($min > $min2) {\n        @answer = ($min2, $min);\n\
    \    }\n    return @answer;\n}", "    my $i = 0;\n    my $j = $i + 1;\n    my\
    \ $close_num1 = $numbers->[$i];\n    my $close_num2 = $numbers->[$j];\n    my\
    \ $close_distance = abs($close_num1 - $close_num2);\n    for ($i = 0; $i < scalar(@$numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < scalar(@$numbers); $j++) {\n       \
    \     my $distance = abs($numbers->[$i] - $numbers->[$j]);\n            if ($distance\
    \ < $close_distance) {\n                $close_distance = $distance;\n       \
    \         $close_num1 = $numbers->[$i];\n                $close_num2 = $numbers->[$j];\n\
    \            }\n        }\n    }\n    return [sort {$a <=> $b} ($close_num1, $close_num2)];\n\
    }", "    my($result) = [];\n    my($current_smaller_number) = 0;\n    my($current_larger_number)\
    \ = 0;\n    my($current_difference) = 100;\n    for (my($i) = 0; $i < scalar(@{$numbers});\
    \ $i++) {\n        for (my($j) = $i + 1; $j < scalar(@{$numbers}); $j++) {\n \
    \           my($new_difference) = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($new_difference < $current_difference) {\n                $current_difference\
    \ = $new_difference;\n                $current_smaller_number = $numbers->[$i];\n\
    \                $current_larger_number = $numbers->[$j];\n            }\n   \
    \     }\n    }\n    push(@{$result}, $current_smaller_number);\n    push(@{$result},\
    \ $current_larger_number);\n    return $result;\n}", "    my @numbers = @$numbers;\n\
    \    my ($smaller, $larger) = (0, 1);\n    my $min_distance = abs($numbers[$smaller]\
    \ - $numbers[$larger]);\n    for my $i (0 .. $#numbers) {\n        for my $j (($i\
    \ + 1) .. $#numbers) {\n            my $distance = abs($numbers[$i] - $numbers[$j]);\n\
    \            if ($distance < $min_distance) {\n                $min_distance =\
    \ $distance;\n                ($smaller, $larger) = ($i, $j);\n            }\n\
    \        }\n    }\n    return (sort { $a <=> $b } ($numbers[$smaller], $numbers[$larger]));\n\
    }", "    die \"First argument to find_closest_elements must be a reference to\
    \ an array\" unless ref($numbers) eq 'ARRAY';\n    die \"First argument to find_closest_elements\
    \ must contain at least two numbers\" unless @$numbers >= 2;\n    die \"All elements\
    \ of first argument to find_closest_elements must be numeric\" if grep {$_ !~\
    \ /^[+-]?\\d+(\\.\\d+)?$/} @$numbers;", "    return [$numbers->[0], $numbers->[1]]\
    \ if @$numbers == 2;\n    my $diff = abs($numbers->[0] - $numbers->[1]);\n   \
    \ my($small, $large) = sort({$a <=> $b} @$numbers[0, 1]);\n    for my $i (0 ..\
    \ @$numbers - 2) {\n        my $candidate_diff = abs($numbers->[$i] - $numbers->[$i\
    \ + 1]);\n        if ($candidate_diff < $diff) {\n            $diff = $candidate_diff;\n\
    \            ($small, $large) = sort({$a <=> $b} @$numbers[$i, $i + 1]);\n   \
    \     }\n    }\n    return [$small, $large];\n}", "    my @order_numbers = sort\
    \ {$a <=> $b} @$numbers;\n    my $closest_difference = abs($order_numbers[0] -\
    \ $order_numbers[1]);\n    my @closest_elements = ($order_numbers[0], $order_numbers[1]);\n\
    \    for (my $i = 1; $i < @order_numbers - 1; $i++) {\n        my $current_difference\
    \ = abs($order_numbers[$i] - $order_numbers[$i + 1]);\n        if ($current_difference\
    \ < $closest_difference) {\n            $closest_difference = $current_difference;\n\
    \            @closest_elements = ($order_numbers[$i], $order_numbers[$i + 1]);\n\
    \        }\n    }\n    return @closest_elements;\n}", "    my @closest;\n    my\
    \ $distance = abs($numbers->[0] - $numbers->[1]);\n    my $lo = $numbers->[0];\n\
    \    my $hi = $numbers->[1];\n    for (my $i = 0; $i < @$numbers; $i++) {\n  \
    \      for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $d = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($d < $distance) {\n                $distance\
    \ = $d;\n                $lo = $numbers->[$i];\n                $hi = $numbers->[$j];\n\
    \            }\n        }\n    }\n    return [$lo, $hi];\n}", "    my $dist =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my $closest = [$numbers->[0], $numbers->[1]];\n\
    \    for my $i (0..(@$numbers - 2)) {\n        for my $j (($i + 1)..(@$numbers\
    \ - 1)) {\n            my $new_dist = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($new_dist < $dist) {\n                $dist = $new_dist;\n  \
    \              $closest = [$numbers->[$i], $numbers->[$j]];\n            }\n \
    \       }\n    }\n    return sort {$a <=> $b} @$closest;\n}", "    my @array =\
    \ @$numbers;\n    my $sum = 1e10;\n    my @ret = ();\n    for (my $i = 0; $i <\
    \ @array - 1; $i++) {\n        for (my $j = $i + 1; $j < @array; $j++) {\n   \
    \         my $delta = abs($array[$i] - $array[$j]);\n            if ($delta <\
    \ $sum) {\n                $sum = $delta;\n                @ret = ($array[$i],\
    \ $array[$j]);\n            }\n        }\n    }\n    return @ret;\n}", "    my\
    \ @numbers = @$numbers;\n    my $closest_diff = abs($numbers[0] - $numbers[1]);\n\
    \    my @closest_pair = ($numbers[0], $numbers[1]);\n    for my $i (0..@numbers-2)\
    \ {\n        for my $j ($i+1..@numbers-1) {\n            my $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($diff < $closest_diff) {\n               \
    \ $closest_diff = $diff;\n                @closest_pair = ($numbers[$i], $numbers[$j]);\n\
    \            }\n        }\n    }\n    return @closest_pair;\n}", "    my($min_diff,\
    \ $min_num_0, $min_num_1) = (abs($numbers->[0] - $numbers->[1]), @$numbers[0,1]);\n\
    \    for my $i (0..@$numbers-2) {\n        for my $j ($i+1..@$numbers-1) {\n \
    \           my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff\
    \ < $min_diff) {\n                ($min_diff, $min_num_0, $min_num_1) = ($diff,\
    \ $numbers->[$i], $numbers->[$j]);\n            }\n        }\n    }\n    return\
    \ ($min_num_0, $min_num_1);\n}", "    my $closest = [$numbers->[0], $numbers->[1]];\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            if (abs($numbers->[$i] - $numbers->[$j]) < abs($closest->[0]\
    \ - $closest->[1])) {\n                $closest = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return $closest;\n}", "    my $closest_distance\
    \ = $numbers->[1] - $numbers->[0];\n    my @closest_numbers = ($numbers->[0],\
    \ $numbers->[1]);\n    for (my $i = 0; $i < scalar(@$numbers); $i++) {\n     \
    \   for (my $j = $i + 1; $j < scalar(@$numbers); $j++) {\n            my $distance\
    \ = $numbers->[$j] - $numbers->[$i];\n            if ($distance < $closest_distance)\
    \ {\n                $closest_distance = $distance;\n                @closest_numbers\
    \ = ($numbers->[$i], $numbers->[$j]);\n            }\n        }\n    }\n    return\
    \ \\@closest_numbers;\n}", "    my $min_distance = abs($numbers->[0] - $numbers->[1]);\n\
    \    my @closest_elements = ($numbers->[0], $numbers->[1]);\n    for (my $i =\
    \ 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++)\
    \ {\n            my $distance = abs($numbers->[$i] - $numbers->[$j]);\n      \
    \      if ($distance < $min_distance) {\n                $min_distance = $distance;\n\
    \                @closest_elements = ($numbers->[$i], $numbers->[$j]);\n     \
    \       }\n        }\n    }\n    return @closest_elements;\n}", "    my($last_distance)\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my($result) = [$numbers->[0], $numbers->[1]];\n\
    \    for my $i (2 .. @$numbers - 1) {\n        my($distance) = abs($numbers->[$i\
    \ - 1] - $numbers->[$i]);\n        if ($distance < $last_distance) {\n       \
    \     $last_distance = $distance;\n            $result = [$numbers->[$i - 1],\
    \ $numbers->[$i]];\n        }\n    }\n    return $result;\n}", "    my $min =\
    \ 2 ** 32;\n    my @return = ();\n    for my $i (0 .. $#{$numbers} - 1) {\n  \
    \      for my $j ($i + 1 .. $#{$numbers}) {\n            my $tmp = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($tmp < $min) {\n                $min = $tmp;\n\
    \                @return = ($numbers->[$i], $numbers->[$j]);\n            }\n\
    \        }\n    }\n    return @return;\n}", "    # sorting the numbers in the\
    \ array\n    my @sorted = sort {$a <=> $b} @$numbers;\n    # declaring an array\
    \ of possible answers\n    my @answers;\n    # comparing the sorted numbers\n\
    \    for (my $i = 0; $i < scalar @sorted; $i++) {\n        if ($i != scalar @sorted\
    \ - 1) {\n            my $diff = abs($sorted[$i] - $sorted[$i + 1]);\n       \
    \     # pushing the possible answers\n            push @answers, [$sorted[$i],\
    \ $sorted[$i + 1], $diff];\n        }\n    }\n    # sorting the possible answers\n\
    \    my @sorted_answers = sort {$a->[2] <=> $b->[2]} @answers;\n    # returning\
    \ the sorted numbers\n    return [$sorted_answers[0][0], $sorted_answers[0][1]];\n\
    }", "    my($min, $num1, $num2);\n    foreach my $num1 (@$numbers) {\n       \
    \ foreach my $num2 (@$numbers) {\n            my $delta = abs($num1 - $num2);\n\
    \            if (!defined($min) || $delta < $min) {\n                $min = $delta;\n\
    \                @closest = ($num1, $num2);\n            }\n        }\n    }\n\
    \    return \\@closest;\n}", "    # Find closest numbers and return them as a\
    \ sorted array\n    return sort { $a <=> $b } @{$numbers}[0, 1];\n}", "    my\
    \ $min_distance = undef;\n    my $first_number = undef;\n    my $second_number\
    \ = undef;\n    my $numbers_count = scalar(@$numbers);\n    if ($numbers_count\
    \ > 1) {\n        my $last_number = undef;\n        foreach my $number (@$numbers)\
    \ {\n            if (defined($last_number)) {\n                my $distance =\
    \ abs($number - $last_number);\n                if (!defined($min_distance) ||\
    \ $distance < $min_distance) {\n                    $min_distance = $distance;\n\
    \                    $first_number = $last_number;\n                    $second_number\
    \ = $number;\n                }\n            }\n            $last_number = $number;\n\
    \        }\n    }\n    return [$first_number, $second_number];\n}", "    my(@numbers)\
    \ = @$numbers;\n    my($distance, $smaller, $larger);\n    my($minimum_distance)\
    \ = $numbers[1] - $numbers[0];\n    my($smaller_number) = $numbers[0];\n    my($larger_number)\
    \ = $numbers[1];\n    my($index);\n    for($index = 1; $index < scalar(@numbers);\
    \ $index++) {\n        $distance = $numbers[$index] - $numbers[$index - 1];\n\
    \        if($distance < $minimum_distance) {\n            $minimum_distance =\
    \ $distance;\n            $smaller_number = $numbers[$index - 1];\n          \
    \  $larger_number = $numbers[$index];\n        }\n    }\n    return($smaller_number,\
    \ $larger_number);\n}", "    my($idx, $min_idx, $min_distance);\n    my($curr_dist);\n\
    \    $min_distance = undef;\n    foreach $idx (1..($#{$numbers})) {\n        $curr_dist\
    \ = $numbers->[$idx] - $numbers->[$idx-1];\n        if(!defined($min_distance)\
    \ || ($curr_dist < $min_distance)) {\n            $min_distance = $curr_dist;\n\
    \            $min_idx = $idx;\n        }\n    }\n    return([$numbers->[$min_idx-1],\
    \ $numbers->[$min_idx]]);\n}", "    die \"not enough numbers\" unless @$numbers\
    \ >= 2;\n    my($smaller, $larger) = @$numbers[0,1];\n    for (my $i = 0; $i <\
    \ @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n \
    \           if (abs($numbers->[$i] - $numbers->[$j]) < abs($smaller - $larger))\
    \ {\n                ($smaller, $larger) = @$numbers[$i, $j];\n            }\n\
    \        }\n    }\n    ($smaller, $larger);\n}", "    my($closest, $delta) = (undef,\
    \ undef);\n    for my $i (0 .. $#$numbers - 1) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if (not defined $delta or $diff < $delta) {\n\
    \            $delta = $diff;\n            $closest = [$numbers->[$i], $numbers->[$i\
    \ + 1]];\n        }\n    }\n    @$closest = sort { $a <=> $b } @$closest;\n  \
    \  return $closest;\n}\nmy $numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.2];\nsay '[',\
    \ join(', ', @$numbers), ']', ' -> ', '[', join(', ', @{find_closest_elements($numbers)}),\
    \ ']';\n$numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0];\nsay '[', join(', ', @$numbers),\
    \ ']', ' -> ', '[', join(', ', @{find_closest_elements($numbers)}), ']';", " \
    \   return () unless defined $numbers and @$numbers > 1;\n    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my @closest_elements = ($numbers->[0], $numbers->[1]);\n\
    \    for (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j\
    \ < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              @closest_elements = ($numbers->[$i], $numbers->[$j]);\n       \
    \     }\n        }\n    }\n    return @closest_elements;\n}", "    my $closest\
    \   = [$numbers->[0], $numbers->[1]];\n    my $min_diff  = abs($numbers->[0] -\
    \ $numbers->[1]);\n    foreach my $i (0..$#$numbers-1) {\n        foreach my $j\
    \ ($i+1..$#$numbers) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $closest  = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return $closest;\n}", "    die \"I expected an array ref\"\
    \ unless ref($numbers) eq 'ARRAY';\n    die \"I expected at least two elements\"\
    \ unless scalar(@$numbers) >= 2;\n    my @sorted = sort { $a <=> $b } @$numbers;\n\
    \    my $min_diff = $sorted[1] - $sorted[0];\n    my @min_pair = ($sorted[0],\
    \ $sorted[1]);\n    for my $i (0 .. scalar(@sorted) - 2) {\n        my $diff =\
    \ $sorted[$i + 1] - $sorted[$i];\n        if ($diff < $min_diff) {\n         \
    \   $min_diff = $diff;\n            @min_pair = ($sorted[$i], $sorted[$i + 1]);\n\
    \        }\n    }\n    return @min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my @ret = ($numbers->[0], $numbers->[1]);\n    for (my\
    \ $i = 0; $i < scalar(@$numbers) - 1; $i++) {\n        my $current_diff = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($current_diff < $min_diff) {\n         \
    \   $min_diff = $current_diff;\n            @ret = ($numbers->[$i], $numbers->[$i\
    \ + 1]);\n        }\n    }\n    return \\@ret;\n}", "    my @result = @$numbers[0,1];\n\
    \    my $min = abs($result[0] - $result[1]);\n    for (my $i = 0; $i < @$numbers;\
    \ $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my\
    \ $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min)\
    \ {\n                $min = $diff;\n                @result = @$numbers[$i,$j];\n\
    \            }\n        }\n    }\n    @result;\n}", "    die \"Need an array ref\"\
    \ unless ref $numbers eq 'ARRAY';\n    die \"Array must have at least two values\"\
    \ unless @$numbers >= 2;\n    my $min_diff = abs( $numbers->[0] - $numbers->[1]\
    \ );\n    my $closest_pair = [@$numbers[0,1]];\n    for my $i (0 .. $#$numbers-1)\
    \ {\n        for my $j ($i+1 .. $#$numbers) {\n            my $diff = abs( $numbers->[$i]\
    \ - $numbers->[$j] );\n            if( $diff < $min_diff ) {\n               \
    \ $min_diff = $diff;\n                $closest_pair = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return [sort {$a <=> $b} @$closest_pair];\n\
    }", "    my $size = scalar @$numbers;\n    my @small_numbers = ();\n    my @larger_numbers\
    \ = ();\n    my %number_hash = ();\n    foreach my $number(@$numbers) {\n    \
    \    $number_hash{$number} = $number;\n    }\n    @small_numbers = sort {$a <=>\
    \ $b} keys %number_hash;\n    @larger_numbers = sort {$b <=> $a} keys %number_hash;\n\
    \    my @current_result = ($small_numbers[0], $larger_numbers[0]);\n    my $current_diff\
    \ = abs($current_result[0] - $current_result[1]);\n    for(my $i = 0; $i < $size;\
    \ $i++) {\n        for(my $j = 0; $j < $size; $j++) {\n            if ($i != $j)\
    \ {\n                my $temp_diff = abs($small_numbers[$i] - $larger_numbers[$j]);\n\
    \                if ($temp_diff < $current_diff) {\n                    $current_diff\
    \ = $temp_diff;\n                    @current_result = ($small_numbers[$i], $larger_numbers[$j]);\n\
    \                }\n            }\n        }\n    }\n    return @current_result;\n\
    }", "    my($diff, $min);\n    for (my $i = 0; $i < @$numbers; $i++) {\n     \
    \   for (my $j = $i + 1; $j < @$numbers; $j++) {\n            $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if (!defined($min) || $diff < $min) {\n    \
    \            $min = $diff;\n                @$numbers[$i, $j] = sort {$a <=> $b}\
    \ @$numbers[$i, $j];\n            }\n        }\n    }\n    return @$numbers[0,\
    \ 1];\n}", "    my(@array) = @$numbers;\n    my(@result);\n    my($closest);\n\
    \    my($dist);\n    my($mindist);\n    for my $i (0..$#array-1) {\n        for\
    \ my $j ($i+1..$#array) {\n            $dist = abs($array[$i] - $array[$j]);\n\
    \            if (not defined $mindist or $dist < $mindist) {\n               \
    \ $mindist = $dist;\n                $closest = [$array[$i], $array[$j]];\n  \
    \          }\n        }\n    }\n    return $closest;\n}", "    my $minimum = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my @closest = ($numbers->[0], $numbers->[1]);\n    my\
    \ $pair = 0;\n    for my $i (0 .. $#{$numbers} - 1) {\n        for my $j ($i +\
    \ 1 .. $#{$numbers}) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $minimum) {\n                $minimum = $diff;\n    \
    \            @closest = ($numbers->[$i], $numbers->[$j]);\n            }\n   \
    \     }\n    }\n    return @closest;\n}", "    my $x = $numbers->[0];\n    my\
    \ $y = $numbers->[1];\n    my $min_diff = abs($x - $y);\n    for (my $i = 0; $i\
    \ < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $x\
    \ = $numbers->[$i];\n                $y = $numbers->[$j];\n            }\n   \
    \     }\n    }\n    return [$x, $y];\n}", "    my $n = scalar(@$numbers);\n  \
    \  my $closest = 0;\n    my $close_idx = 0;\n    for (my $i = 0; $i < $n; $i++)\
    \ {\n        my $diff = abs($numbers->[$i] - $numbers->[$i + 1]);\n        if\
    \ ($diff < $closest) {\n            $closest = $diff;\n            $close_idx\
    \ = $i;\n        }\n    }\n    return [$numbers->[$close_idx], $numbers->[$close_idx\
    \ + 1]];\n}", "    my $smaller = 0;\n    my $larger = 0;\n    my $min_distance\
    \ = 9999999;\n    for (my $i = 0; $i < scalar(@$numbers); $i++) {\n        for\
    \ (my $j = $i + 1; $j < scalar(@$numbers); $j++) {\n            my $tmp_distance\
    \ = $numbers->[$j] - $numbers->[$i];\n            if ($tmp_distance < $min_distance)\
    \ {\n                $min_distance = $tmp_distance;\n                $smaller\
    \ = $numbers->[$i];\n                $larger = $numbers->[$j];\n            }\n\
    \        }\n    }\n    return [$smaller, $larger];\n}", "    my @sorted = sort\
    \ {$a <=> $b} @$numbers;\n    my @ret;\n    my $min_diff;\n    my $diff;\n   \
    \ for (my $i = 0; $i < @sorted; $i++) {\n        if ($i != @sorted - 1) {\n  \
    \          $diff = $sorted[$i + 1] - $sorted[$i];\n            if ($min_diff ==\
    \ undef || $diff < $min_diff) {\n                $min_diff = $diff;\n        \
    \        @ret = ($sorted[$i], $sorted[$i + 1]);\n            }\n        }\n  \
    \  }\n    return @ret;\n}", "    my $i = 1;\n    my @closest = ();\n    my $minDiff\
    \ = $numbers->[1] - $numbers->[0];\n    while($i < scalar(@$numbers)) {\n    \
    \    if($numbers->[$i] - $numbers->[$i-1] < $minDiff) {\n            $minDiff\
    \ = $numbers->[$i] - $numbers->[$i-1];\n            @closest = ($numbers->[$i-1],\
    \ $numbers->[$i]);\n        }\n        $i++;\n    }\n    return \\@closest;\n}",
  "    my @returns = ();\n    my @sorted = sort {$a <=> $b} @$numbers;\n    for(my\
    \ $i = 0; $i < @sorted - 1; $i++) {\n        my $temp_diff = $sorted[$i+1] - $sorted[$i];\n\
    \        $returns[$i] = $temp_diff;\n    }\n    my $min = min @returns;\n    my\
    \ $return_num1 = 0;\n    my $return_num2 = 0;\n    for(my $i = 0; $i < @sorted\
    \ - 1; $i++) {\n        if(($sorted[$i+1] - $sorted[$i]) == $min) {\n        \
    \    $return_num1 = $sorted[$i];\n            $return_num2 = $sorted[$i+1];\n\
    \        }\n    }\n    return ($return_num1, $return_num2);\n}", "    my $diff\
    \ = 100000;\n    my $first;\n    my $second;\n    for(my $i = 0; $i < $#$numbers;\
    \ $i++) {\n        if(abs($numbers->[$i] - $numbers->[$i+1]) < $diff) {\n    \
    \        $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n            $first =\
    \ $numbers->[$i];\n            $second = $numbers->[$i+1];\n        }\n    }\n\
    \    return ($first, $second);\n}", "    my @sorted_numbers = sort {$a <=> $b}\
    \ @$numbers;\n    my $smallest_difference = $sorted_numbers[1] - $sorted_numbers[0];\n\
    \    my $smallest_difference_index = 0;\n    for my $i (1..$#sorted_numbers -\
    \ 1) {\n        my $difference = $sorted_numbers[$i + 1] - $sorted_numbers[$i];\n\
    \        if ($difference < $smallest_difference) {\n            $smallest_difference\
    \ = $difference;\n            $smallest_difference_index = $i;\n        }\n  \
    \  }\n    return [$sorted_numbers[$smallest_difference_index], $sorted_numbers[$smallest_difference_index\
    \ + 1]];\n}", "    my @output;\n    my $length = @$numbers;\n    # Iterate through\
    \ each possible number pair.\n    for (my $i = 0; $i < $length - 1; $i++) {\n\
    \        for (my $j = $i + 1; $j < $length; $j++) {\n            # If this is\
    \ the first iteration, use the first pair.\n            if ($i == 0 && $j == 1)\
    \ {\n                push @output, $numbers->[$i], $numbers->[$j];\n         \
    \   }\n            # Calculate the difference between the current pair.\n    \
    \        my $difference = $numbers->[$j] - $numbers->[$i];\n            my $current_difference\
    \ = $output[1] - $output[0];\n            # Overwrite the output if the difference\
    \ is less.\n            if ($difference < $current_difference) {\n           \
    \     $output[0] = $numbers->[$i];\n                $output[1] = $numbers->[$j];\n\
    \            }\n        }\n    }\n    return @output;\n}", "    my @data;\n  \
    \  for my $number (@$numbers) {\n        my $num_ref = \\$number;\n        push\
    \ @data, $num_ref;\n    }\n    my @closest_numbers;\n    my $smallest_diff = 0;\n\
    \    for my $i (0..(scalar @data-2)) {\n        for my $j (($i+1)..(scalar @data-1))\
    \ {\n            my $diff = abs($data[$i] - $data[$j]);\n            if ($smallest_diff\
    \ == 0 || $diff < $smallest_diff) {\n                $smallest_diff = $diff;\n\
    \                @closest_numbers = ($data[$i], $data[$j]);\n            }\n \
    \       }\n    }\n    @closest_numbers = sort {$a <=> $b} @closest_numbers;\n\
    \    return @closest_numbers;\n}", "    my @result = ();\n    my $tmp = 0;\n \
    \   my $tmp_index = 0;\n    my $diff = 0;\n    my $diff_min = 10000000;\n    my\
    \ $length = @$numbers;\n    for (my $i = 0; $i < $length; $i++) {\n        for\
    \ (my $j = $i + 1; $j < $length; $j++) {\n            $tmp = ($numbers->[$i] -\
    \ $numbers->[$j]) ** 2;\n            if ($tmp < $diff_min) {\n               \
    \ $diff_min = $tmp;\n                $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \                $tmp_index = $i;\n            }\n        }\n    }\n    if ($numbers->[$tmp_index]\
    \ > $numbers->[$tmp_index + 1]) {\n        @result = ($numbers->[$tmp_index +\
    \ 1], $numbers->[$tmp_index]);\n    } else {\n        @result = ($numbers->[$tmp_index],\
    \ $numbers->[$tmp_index + 1]);\n    }\n    return @result;\n}\nmy @array = (1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2);\nmy @result = find_closest_elements(\\@array);\nprint\
    \ \"The two elements closest to each other in array are: $result[0] and $result[1]\\\
    n\";", "    my($diff);\n    my($diff_min) = 1e20;\n    my($idx_min_1);\n    my($idx_min_2);\n\
    \    my($i);\n    my($j);\n    my($n);\n    my($numbers_ordered);", "    my @numbers\
    \ = @$numbers;\n    my $diff = abs($numbers[0] - $numbers[1]);\n    my ($first,\
    \ $second) = ($numbers[0], $numbers[1]);\n    for my $i (0..$#numbers) {\n   \
    \     for my $j ($i+1..$#numbers) {\n            my $new_diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($new_diff < $diff) {\n                $diff\
    \ = $new_diff;\n                ($first, $second) = ($numbers[$i], $numbers[$j]);\n\
    \            }\n        }\n    }\n    return [$first, $second];\n}", "    my @numbers\
    \ = @$numbers;\n    my $result = [];\n    my $closest = 1;\n    for (my $i = 0;\
    \ $i < @numbers; $i++) {\n        my $num = $numbers[$i];\n        my $diff =\
    \ abs(@numbers[$i+1] - $num);\n        if ($diff < $closest) {\n            $closest\
    \ = $diff;\n            $result = [$num, @numbers[$i+1]];\n        }\n    }\n\
    \    return $result;\n}", "    my @numbers = @$numbers;\n    my $min_gap = abs($numbers[0]\
    \ - $numbers[1]);\n    my $result = [$numbers[0], $numbers[1]];\n    for (my $i\
    \ = 0; $i < $#numbers; $i++) {\n        for (my $j = $i + 1; $j <= $#numbers;\
    \ $j++) {\n            my $gap = abs($numbers[$i] - $numbers[$j]);\n         \
    \   if ($gap < $min_gap) {\n                $min_gap = $gap;\n               \
    \ $result = [$numbers[$i], $numbers[$j]];\n            }\n        }\n    }\n \
    \   return $result;\n}", "    my @numbers = @$numbers;\n    my $size = @numbers;\n\
    \    my $diff;\n    my $smallest_diff = $numbers[1] - $numbers[0];\n    my @closest_elements\
    \ = ($numbers[0], $numbers[1]);\n    for (my $i = 1; $i < $size - 1; $i++) {\n\
    \        $diff = $numbers[$i + 1] - $numbers[$i];\n        if ($diff < $smallest_diff)\
    \ {\n            $smallest_diff = $diff;\n            @closest_elements = ($numbers[$i],\
    \ $numbers[$i + 1]);\n        }\n    }\n    return @closest_elements;\n}", " \
    \   my $smallest_diff = $numbers->[1] - $numbers->[0];\n    my $smallest_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers-1) {\n   \
    \     my $diff = $numbers->[$i+1] - $numbers->[$i];\n        if ($diff < $smallest_diff)\
    \ {\n            $smallest_diff = $diff;\n            $smallest_pair = [$numbers->[$i],\
    \ $numbers->[$i+1]];\n        }\n    }\n    return $smallest_pair;\n}", "    my\
    \ $closest_diff = undef;\n    my @closest_elements = ();\n    for my $i (0 ..\
    \ @$numbers - 2) {\n        for my $j ($i + 1 .. @$numbers - 1) {\n          \
    \  my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if (!defined($closest_diff)\
    \ || $diff < $closest_diff) {\n                $closest_diff = $diff;\n      \
    \          @closest_elements = ($numbers->[$i], $numbers->[$j]);\n           \
    \ }\n        }\n    }\n    return \\@closest_elements;\n}", "    my $best_num1\
    \ = -1;\n    my $best_num2 = -1;\n    my $best_diff = -1;\n    for (my $i = 0;\
    \ $i < scalar(@$numbers) - 1; $i++) {\n        for (my $j = $i + 1; $j < scalar(@$numbers);\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($best_diff == -1 || $diff < $best_diff) {\n                $best_num1\
    \ = $numbers->[$i];\n                $best_num2 = $numbers->[$j];\n          \
    \      $best_diff = $diff;\n            }\n        }\n    }\n    return $best_num1\
    \ < $best_num2 ? [$best_num1, $best_num2] : [$best_num2, $best_num1];\n}", " \
    \   my @num_array = @$numbers;\n    my $min = 1;\n    my @pairs;\n    for (my\
    \ $i = 0; $i < @num_array - 1; $i++) {\n        my $abs = abs $num_array[$i] -\
    \ $num_array[$i + 1];\n        if ($abs < $min) {\n            $min = $abs;\n\
    \            @pairs = ();\n            push @pairs, $num_array[$i];\n        \
    \    push @pairs, $num_array[$i + 1];\n        }\n        elsif ($abs == $min)\
    \ {\n            push @pairs, $num_array[$i];\n            push @pairs, $num_array[$i\
    \ + 1];\n        }\n    }\n    return @pairs;\n}", "    my @diff_list = ();\n\
    \    my @num_list = ();\n    my @return_list = ();\n    foreach my $i (0..$#{$numbers}-1)\
    \ {\n        push(@diff_list, abs($numbers->[$i] - $numbers->[$i+1]));\n     \
    \   push(@num_list, $numbers->[$i]);\n    }\n    my $sorted_diff_list = $diff_list[0];\n\
    \    my $sorted_num_list = $num_list[0];\n    foreach my $j (1..$#diff_list) {\n\
    \        if ($diff_list[$j] <= $sorted_diff_list) {\n            $sorted_diff_list\
    \ = $diff_list[$j];\n            $sorted_num_list = $num_list[$j];\n        }\n\
    \    }\n    my $num_in_list = 0;\n    foreach my $k (0..$#{$numbers}) {\n    \
    \    if ($numbers->[$k] == $sorted_num_list) {\n            $num_in_list = $numbers->[$k+1];\n\
    \        }\n    }\n    push(@return_list, $sorted_num_list, $num_in_list);\n \
    \   return \\@return_list;\n}", "    my($smallest, $biggest);\n    $smallest =\
    \ shift @$numbers;\n    $biggest = $smallest;\n    foreach my $n (@$numbers) {\n\
    \        if ($n < $smallest) {\n            $smallest = $n;\n        }\n     \
    \   if ($n > $biggest) {\n            $biggest = $n;\n        }\n    }\n    my($dist,\
    \ $best_small, $best_big) = ($biggest - $smallest, $smallest, $biggest);\n   \
    \ foreach my $n (@$numbers) {\n        if ($n == $smallest || $n == $biggest)\
    \ {\n            next;\n        }\n        my($d, $s, $b);\n        if ($n > $smallest)\
    \ {\n            $s = $smallest;\n            $b = $n;\n        } else {\n   \
    \         $s = $n;\n            $b = $biggest;\n        }\n        $d = $b - $s;\n\
    \        if ($d < $dist) {\n            $dist = $d;\n            $best_small =\
    \ $s;\n            $best_big = $b;\n        }\n    }\n    return ($best_small,\
    \ $best_big);\n}", "    my @values = @$numbers;\n    my @sorted = sort {$a <=>\
    \ $b} @values;\n    my $size = scalar @sorted;\n    my $closest = ($sorted[1]\
    \ - $sorted[0]);\n    my @ans = ($sorted[0], $sorted[1]);\n    for (my $i = 1;\
    \ $i < $size; $i++) {\n        my $temp = $sorted[$i+1] - $sorted[$i];\n     \
    \   if ($temp < $closest) {\n            $closest = $temp;\n            @ans =\
    \ ($sorted[$i], $sorted[$i+1]);\n        }\n    }\n    return @ans;\n}", "   \
    \ my(@a, $min, $el, $l, $h);\n    my($n1, $n2);\n    foreach $el (@$numbers) {\n\
    \        $min = 1e10;\n        foreach $n (@$numbers) {\n            $min = abs($el\
    \ - $n) if abs($el - $n) < $min;\n        }\n        push @a, [$el, $min];\n \
    \   }\n    $n1 = $n2 = $$a[0][0];\n    $min = $$a[0][1];\n    foreach $el (@a)\
    \ {\n        if ($$el[1] < $min) {\n            $min = $$el[1];\n            $n1\
    \ = $$el[0];\n            $n2 = $el;\n        }\n    }\n    return [$n1, $n2];\n\
    }", "    my @numbers = @$numbers;\n    # your code goes here", "    my $smallest\
    \ = 1e32;\n    my @result;\n    for my $i (0 .. $#$numbers) {\n        for my\
    \ $j ($i + 1 .. $#$numbers) {\n            my $d = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($d < $smallest) {\n                $smallest = $d;\n        \
    \        @result = ($numbers->[$i], $numbers->[$j]);\n            }\n        }\n\
    \    }\n    if ($result[0] > $result[1]) {\n        @result = reverse @result;\n\
    \    }\n    return @result;\n}", "    my $result = [1.0, 2.0];\n    my $diff =\
    \ abs($result->[0] - $result->[1]);\n    for (my $i = 0; $i < @$numbers; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $current_diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($current_diff < $diff)\
    \ {\n                $diff = $current_diff;\n                $result = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $result;\n}",
  "    # my $numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.2];\n    my $closest;\n    my $sorted\
    \ = sort_numbers_ascending($numbers);\n    my $first = shift @$sorted;\n    my\
    \ $second = shift @$sorted;\n    $closest = find_closest_number($first, $second);\n\
    \    while (@$sorted > 0) {\n        $first = $second;\n        $second = shift\
    \ @$sorted;\n        my $current = find_closest_number($first, $second);\n   \
    \     if ($current->[0] < $closest->[0]) {\n            $closest = $current;\n\
    \        }\n    }\n    return $closest;\n}", "    my $number = @$numbers;\n  \
    \  my @closest;\n    for ( my $i = 0; $i < $number; $i++ ) {\n        for ( my\
    \ $j = $i + 1; $j < $number; $j++ ) {\n            push( @closest, $numbers->[$i],\
    \ $numbers->[$j] ) if( abs( $numbers->[$i] - $numbers->[$j] ) < abs( $closest[0]\
    \ - $closest[1] ) );\n        }\n    }\n    @closest;\n}", "    my $closest =\
    \ [$numbers->[0], $numbers->[1]];\n    my $diff = $closest->[1] - $closest->[0];\n\
    \    foreach my $i (0..$#$numbers-1) {\n        foreach my $j ($i+1..$#$numbers)\
    \ {\n            my $curr_diff = $numbers->[$j] - $numbers->[$i];\n          \
    \  if ($curr_diff < $diff) {\n                $diff = $curr_diff;\n          \
    \      $closest = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n\
    \    }\n    return $closest;\n}", "    my $min_diff = 0;\n    my $smaller;\n \
    \   my $larger;\n    my $x = 0;\n    my $y = 1;\n    while ($y < scalar @$numbers)\
    \ {\n        my $diff = abs $numbers->[$x] - $numbers->[$y];\n        if ($min_diff\
    \ == 0 || $diff < $min_diff) {\n            $min_diff = $diff;\n            $smaller\
    \ = $numbers->[$x];\n            $larger = $numbers->[$y];\n        }\n      \
    \  $x++;\n        $y++;\n    }\n    return [$smaller, $larger];\n}", "    my $min_difference\
    \ = 0;\n    my @output = ();\n    for(my $i = 0; $i < scalar(@$numbers); $i++)\
    \ {\n        for(my $j = 0; $j < scalar(@$numbers); $j++) {\n            if ($i\
    \ != $j) {\n                my $difference = abs($numbers->[$i] - $numbers->[$j]);\n\
    \                if (!$min_difference || $difference < $min_difference) {\n  \
    \                  $min_difference = $difference;\n                    @output\
    \ = ();\n                    push(@output, $numbers->[$i]);\n                \
    \    push(@output, $numbers->[$j]);\n                }\n            }\n      \
    \  }\n    }\n    return $min_difference;\n}", "    my($first, $second, $difference);\n\
    \    # Calculate the difference between each pair of numbers and store the result\
    \ in a hash with the number pairs as keys\n    my %differences;\n    foreach my\
    \ $i (0 .. $#{$numbers}) {\n        foreach my $j ($i + 1 .. $#{$numbers}) {\n\
    \            $differences{$numbers->[$i] . \",\" . $numbers->[$j]} = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n        }\n    }\n    # Get the number pair with the minimum\
    \ difference\n    my @keys = sort {$differences{$a} <=> $differences{$b}} keys\
    \ %differences;\n    my @numbers = split(/,/, $keys[0]);\n    return @numbers;\n\
    }", "    my $min = 99999;\n    my $smaller = 0;\n    my $larger = 0;\n    for(my\
    \ $i = 0; $i < scalar(@$numbers) - 1; $i++) {\n        my $n1 = $numbers->[$i];\n\
    \        my $n2 = $numbers->[$i + 1];\n        my $dist = abs($n1 - $n2);\n  \
    \      if($dist < $min) {\n            $min = $dist;\n            $smaller = $n1;\n\
    \            $larger = $n2;\n        }\n    }\n    return ($smaller, $larger);\n\
    }", "    my($min_diff) = 0;\n    my($smaller_number, $larger_number) = @$numbers[0,\
    \ 0];\n    for (my $i = 0; $i < scalar(@$numbers) - 1; $i++) {\n        my($num1)\
    \ = @$numbers[$i];\n        my($num2) = @$numbers[$i + 1];\n        my($diff)\
    \ = abs($num1 - $num2);\n        if ($diff < $min_diff || $min_diff == 0) {\n\
    \            $min_diff = $diff;\n            $smaller_number = $num1;\n      \
    \      $larger_number = $num2;\n        }\n    }\n    return [$smaller_number,\
    \ $larger_number];\n}", "    my $min_difference = $numbers->[0] - $numbers->[1];\n\
    \    my $min_difference_index = 1;\n    my $size = scalar @$numbers;\n    for\
    \ (my $i = 1; $i < $size - 1; $i++) {\n        my $current_difference = $numbers->[$i]\
    \ - $numbers->[$i + 1];\n        if ($current_difference < $min_difference) {\n\
    \            $min_difference = $current_difference;\n            $min_difference_index\
    \ = $i;\n        }\n    }\n    return [$numbers->[$min_difference_index], $numbers->[$min_difference_index\
    \ + 1]];\n}", "    my $i;\n    my $j;\n    my $closest_distance = $numbers->[1]\
    \ - $numbers->[0];\n    my $number_of_numbers = scalar @$numbers;\n    my @two_closest_numbers;\n\
    \    for ($i = 0; $i < $number_of_numbers - 1; $i++) {\n        for ($j = $i +\
    \ 1; $j < $number_of_numbers; $j++) {\n            my $distance = $numbers->[$j]\
    \ - $numbers->[$i];\n            if ($distance < $closest_distance) {\n      \
    \          $closest_distance = $distance;\n                @two_closest_numbers\
    \ = ($numbers->[$i], $numbers->[$j]);\n            }\n        }\n    }\n    return\
    \ @two_closest_numbers;\n}", "    my $minDistance = 0;\n    my $index1 = 0;\n\
    \    my $index2 = 0;\n    for (my $i = 0; $i < scalar(@$numbers); $i++) {\n  \
    \      for (my $j = $i + 1; $j < scalar(@$numbers); $j++) {\n            my $distance\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($minDistance == 0 or\
    \ $distance < $minDistance) {\n                $minDistance = $distance;\n   \
    \             $index1 = $i;\n                $index2 = $j;\n            }\n  \
    \      }\n    }\n    my @output = ($numbers->[$index1], $numbers->[$index2]);\n\
    \    @output = sort {$a <=> $b} @output;\n    return \\@output;\n}", "    die\
    \ if !defined $numbers;\n    my $n = @$numbers;\n    die if $n < 2;\n    my($min_diff,\
    \ $min_i, $min_j) = (0.0, 0, 1);\n    for (my $i = 0; $i < $n; $i++) {\n     \
    \   for (my $j = $i + 1; $j < $n; $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if (($i == 0 && $j == 1) || $diff < $min_diff)\
    \ {\n                ($min_diff, $min_i, $min_j) = ($diff, $i, $j);\n        \
    \    }\n        }\n    }\n    return [$numbers->[$min_i], $numbers->[$min_j]];\n\
    }", "    my $closest_diff = 1.0e100;\n    my $closest_i = 0;\n    my $closest_j\
    \ = 0;\n    for my $i (0..$#$numbers-1) {\n        for my $j ($i+1..$#$numbers)\
    \ {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if ($diff < $closest_diff) {\n                $closest_diff = $diff;\n    \
    \            $closest_i = $i;\n                $closest_j = $j;\n            }\n\
    \        }\n    }\n    return [$numbers->[$closest_i], $numbers->[$closest_j]];\n\
    }", "    my($result) = [@$numbers[0, 1]];\n    my($closest_distance) = abs($result->[0]\
    \ - $result->[1]);\n    for my $i (0 .. @$numbers - 2) {\n        for my $j ($i\
    \ + 1 .. @$numbers - 1) {\n            my($distance) = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($distance < $closest_distance) {\n                $closest_distance\
    \ = $distance;\n                $result = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return $result;\n}", '    my $closest_diff
    = (max(@$numbers) - min(@$numbers)) / 2;', "    my($smaller, $larger);\n    my\
    \ $diff = 999999;\n    for (my $i = 0; $i < @$numbers - 1; $i++) {\n        for\
    \ (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $new_diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($new_diff < $diff) {\n                $diff\
    \ = $new_diff;\n                $smaller = $numbers->[$i];\n                $larger\
    \ = $numbers->[$j];\n            }\n        }\n    }\n    return ($smaller, $larger);\n\
    }", "    my $lowest_difference = $numbers->[1] - $numbers->[0];\n    my @best_pair\
    \ = ($numbers->[0], $numbers->[1]);\n    for my $i (0 .. scalar(@$numbers) - 2)\
    \ {\n        for my $j ($i + 1 .. scalar(@$numbers) - 1) {\n            my $difference\
    \ = $numbers->[$j] - $numbers->[$i];\n            if ($difference < $lowest_difference)\
    \ {\n                $lowest_difference = $difference;\n                @best_pair\
    \ = ($numbers->[$i], $numbers->[$j]);\n            }\n        }\n    }\n    return\
    \ \\@best_pair;\n}", '    my @numbers = @$numbers;', "    my($l_idx) = 0;\n  \
    \  my($l_n) = $numbers->[$l_idx];\n    my($r_idx) = 1;\n    my($r_n) = $numbers->[$r_idx];\n\
    \    my($min_diff) = $r_n - $l_n;\n    my($min_idx) = $l_idx;\n    my($min_r_idx)\
    \ = $r_idx;\n    while($r_idx < @$numbers) {\n        my($diff) = $numbers->[$r_idx]\
    \ - $numbers->[$l_idx];\n        if($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_idx = $l_idx;\n            $min_r_idx = $r_idx;\n\
    \        }\n        $l_idx++;\n        $r_idx++;\n    }\n    return [$numbers->[$min_idx],\
    \ $numbers->[$min_r_idx]];\n}", "    my @numbers = @$numbers;\n    my $closest\
    \ = [$numbers[0], $numbers[1]];\n    my $distance = abs($numbers[0] - $numbers[1]);\n\
    \    for (my $i = 0; $i < scalar(@numbers) - 1; $i++) {\n        for (my $j =\
    \ $i + 1; $j < scalar(@numbers); $j++) {\n            my $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($diff < $distance) {\n                $distance\
    \ = $diff;\n                $closest = [$numbers[$i], $numbers[$j]];\n       \
    \     }\n        }\n    }\n    return $closest;\n}", "    my $first_index = 0;\n\
    \    my $second_index = 0;\n    my $min_distance = 1.7976931348623157E+308;\n\
    \    my $distance = 0;\n    my $current_distance = 0;\n    my $number_of_values\
    \ = @$numbers;\n    for (my $i = 0; $i < $number_of_values; $i++) {\n        for\
    \ (my $j = 0; $j < $number_of_values; $j++) {\n            if ($i != $j) {\n \
    \               $current_distance = abs($$numbers[$i] - $$numbers[$j]);\n    \
    \            if ($current_distance < $min_distance) {\n                    $first_index\
    \ = $i;\n                    $second_index = $j;\n                    $min_distance\
    \ = $current_distance;\n                }\n            }\n        }\n    }\n \
    \   return sort {$a <=> $b} $$numbers[$first_index], $$numbers[$second_index];\n\
    }", "    my @reordered = sort {$a <=> $b} @$numbers;\n    my ($first, $second);\n\
    \    my $min_distance = 0;\n    for (my $i = 0; $i < $#reordered; $i++) {\n  \
    \      my $distance = $reordered[$i+1] - $reordered[$i];\n        if ($distance\
    \ < $min_distance || $min_distance == 0) {\n            $min_distance = $distance;\n\
    \            $first = $reordered[$i];\n            $second = $reordered[$i+1];\n\
    \        }\n    }\n    return [$first, $second];\n}", "    return $numbers if\
    \ (scalar(@$numbers) == 2);\n    my $closest = [$numbers->[0], $numbers->[1]];\n\
    \    my $distance = abs($closest->[0] - $closest->[1]);\n    for my $outer_index\
    \ (0..(scalar(@$numbers) - 2)) {\n        for my $inner_index ($outer_index+1..(scalar(@$numbers)\
    \ - 1)) {\n            my $new_distance = abs($numbers->[$outer_index] - $numbers->[$inner_index]);\n\
    \            if ($new_distance < $distance) {\n                $closest = [$numbers->[$outer_index],\
    \ $numbers->[$inner_index]];\n                $distance = $new_distance;\n   \
    \         }\n        }\n    }\n    return $closest;\n}", "    my $min_diff = 999999;\n\
    \    my @min_pair;\n    for (my $i = 0; $i < @$numbers; $i++) {\n        for (my\
    \ $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                @min_pair = ($numbers->[$i], $numbers->[$j]);\n  \
    \          }\n        }\n    }\n    @min_pair;\n}", "    my $min_difference =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my($left, $right) = ($numbers->[0],\
    \ $numbers->[1]);\n    for my $i (0 .. @$numbers - 2) {\n        my $difference\
    \ = abs($numbers->[$i] - $numbers->[$i + 1]);\n        if ($difference < $min_difference)\
    \ {\n            $min_difference = $difference;\n            ($left, $right) =\
    \ ($numbers->[$i], $numbers->[$i + 1]);\n        }\n    }\n    return ($left,\
    \ $right);\n}", "    my @elems = sort {$a <=> $b} @$numbers;\n    my $min_diff\
    \ = abs($elems[0] - $elems[1]);\n    my @res = ($elems[0], $elems[1]);\n    my\
    \ $i = 0;\n    while ($i < $#elems - 1) {\n        if (abs($elems[$i] - $elems[$i\
    \ + 1]) < $min_diff) {\n            $min_diff = abs($elems[$i] - $elems[$i + 1]);\n\
    \            @res = ($elems[$i], $elems[$i + 1]);\n        }\n        $i++;\n\
    \    }\n    return @res;\n}", "    die 'an array reference is required' if not\
    \ ref $numbers;\n    die 'the array must have at least two elements' if not @$numbers\
    \ >= 2;\n    my $minimum = $numbers->[0] - $numbers->[1];\n    $minimum = abs($minimum);\n\
    \    my $result = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers;\
    \ $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my\
    \ $delta = $numbers->[$i] - $numbers->[$j];\n            $delta = abs($delta);\n\
    \            if ($delta < $minimum) {\n                $minimum = $delta;\n  \
    \              $result = [$numbers->[$i], $numbers->[$j]];\n            }\n  \
    \      }\n    }\n    return $result;\n}", "    my($closest_distance, $closest_numbers)\
    \ = (10**10, []);\n    for (my $i = 0; $i < scalar(@$numbers); $i++) {\n     \
    \   for (my $j = $i + 1; $j < scalar(@$numbers); $j++) {\n            my($distance)\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($distance < $closest_distance)\
    \ {\n                $closest_distance = $distance;\n                $closest_numbers\
    \ = [sort {$a <=> $b} ($numbers->[$i], $numbers->[$j])];\n            }\n    \
    \    }\n    }\n    return $closest_numbers;\n}", "    my(@sorted_numbers) = sort\
    \ {$a <=> $b} @$numbers;\n    my(@sorted_numbers_copy) = @sorted_numbers;\n  \
    \  shift @sorted_numbers_copy;\n    my(@return) = (0.0, 0.0);\n    my($closest_difference)\
    \ = abs($sorted_numbers[0] - $sorted_numbers_copy[0]);\n    for (my($i) = 0; $i\
    \ < scalar(@sorted_numbers) - 1; $i++) {\n        my($new_difference) = abs($sorted_numbers[$i]\
    \ - $sorted_numbers_copy[$i]);\n        if ($new_difference < $closest_difference)\
    \ {\n            $closest_difference = $new_difference;\n            @return =\
    \ ($sorted_numbers[$i], $sorted_numbers_copy[$i]);\n        }\n    }\n    return\
    \ [@return];\n}", "    my(@closest) = @{$numbers}[0,1];\n    my($min_diff) = abs($closest[0]\
    \ - $closest[1]);\n    for (my $i = 0; $i < @{$numbers} - 1; $i++) {\n       \
    \ for (my $j = $i + 1; $j < @{$numbers}; $j++) {\n            my($diff) = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                @closest = ($numbers->[$i], $numbers->[$j]);\n   \
    \         }\n        }\n    }\n    return \\@closest;\n}", "    my($prev, $curr);\n\
    \    my($prev_diff, $curr_diff);\n    my($min) = 2;\n    my($result);\n    for\
    \ my $i (0 .. $#$numbers) {\n        $curr = $numbers->[$i];\n        if (defined\
    \ $prev) {\n            $curr_diff = abs($curr - $prev);\n            if ($curr_diff\
    \ < $min) {\n                $min = $curr_diff;\n                $result = [$prev,\
    \ $curr];\n            }\n        }\n        $prev = $curr;\n    }\n    return\
    \ $result;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my\
    \ $min_index = [0, 1];\n    my $min_elements = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1;\
    \ $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_index = [$i, $j];\n                $min_elements = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $min_elements;\n\
    }", "    my $min = $numbers->[0];\n    my $min1 = $numbers->[1];\n    my $diff\
    \ = abs($min - $min1);\n    for (my $i = 0; $i < @$numbers; $i++) {\n        for\
    \ (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $tmp = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($tmp < $diff) {\n                $diff =\
    \ $tmp;\n                $min = $numbers->[$i];\n                $min1 = $numbers->[$j];\n\
    \            }\n        }\n    }\n    return ($min, $min1);\n}", "    my($diff)\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my($closest_elements) = [$numbers->[0],\
    \ $numbers->[1]];\n    my($i, $j);\n    for ($i = 0; $i < $#$numbers; $i++) {\n\
    \        for ($j = $i + 1; $j <= $#$numbers; $j++) {\n            my($new_diff)\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($new_diff < $diff)\
    \ {\n                $diff = $new_diff;\n                $closest_elements = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $closest_elements;\n\
    }", "    my @numbers = @$numbers;\n    my $diff;\n    my $diff_abs;\n    my $closest_diff\
    \ = $numbers[1] - $numbers[0];\n    my $closest_diff_abs = abs($closest_diff);\n\
    \    my @closest_elements = ($numbers[0], $numbers[1]);\n    for my $i (0..$#numbers-1)\
    \ {\n        $diff = $numbers[$i+1] - $numbers[$i];\n        $diff_abs = abs($diff);\n\
    \        if ($diff_abs < $closest_diff_abs) {\n            $closest_diff = $diff;\n\
    \            $closest_diff_abs = $diff_abs;\n            @closest_elements = ($numbers[$i],\
    \ $numbers[$i+1]);\n        }\n    }\n    @closest_elements;\n}", "    my($i);\n\
    \    my($one) = ${@$numbers}[0];\n    my($two) = ${@$numbers}[1];\n    my($min_delta)\
    \ = abs($one - $two);\n    for ($i = 1; $i < $#$numbers; $i++) {\n        my($new_min_delta)\
    \ = abs(${@$numbers}[$i] - ${@$numbers}[$i + 1]);\n        if ($new_min_delta\
    \ < $min_delta) {\n            $min_delta = $new_min_delta;\n            $one\
    \ = ${@$numbers}[$i];\n            $two = ${@$numbers}[$i + 1];\n        }\n \
    \   }\n    if ($one < $two) {\n        return [$one, $two];\n    } else {\n  \
    \      return [$two, $one];\n    }\n}", "    my $min_distance = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $output = [$numbers->[0], $numbers->[1]];\n    for\
    \ my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n\
    \            my $distance = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if ($distance < $min_distance) {\n                $min_distance = $distance;\n\
    \                $output = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return $output;\n}", "    my(@numbers) = @$numbers;\n \
    \   my($min_difference, $pair);\n    for (my $i = 0; $i < @numbers; $i++) {\n\
    \        for (my $j = $i + 1; $j < @numbers; $j++) {\n            my($difference)\
    \ = abs($numbers[$i] - $numbers[$j]);\n            if ($i == 0 && $j == 1) {\n\
    \                $min_difference = $difference;\n                $pair = [$numbers[$i],\
    \ $numbers[$j]];\n            }\n            elsif ($difference < $min_difference)\
    \ {\n                $min_difference = $difference;\n                $pair = [$numbers[$i],\
    \ $numbers[$j]];\n            }\n        }\n    }\n    return $pair;\n}", "  \
    \  my $current_pair;\n    my $best_pair;\n    my $current_distance;\n    my $best_distance;\n\
    \    my $current_a;\n    my $current_b;\n    my $best_a;\n    my $best_b;\n  \
    \  my $current_number;\n    my $next_number;\n    my $next_number_index;\n   \
    \ my $i;\n    $current_pair = [];\n    $best_pair = [];\n    $best_distance =\
    \ 5.0;\n    for ($i = 0; $i < scalar(@$numbers); $i++) {\n        $current_number\
    \ = $numbers->[$i];\n        $next_number_index = $i + 1;\n        if ($next_number_index\
    \ >= scalar(@$numbers)) {\n            last;\n        }\n        $next_number\
    \ = $numbers->[$next_number_index];\n        $current_distance = abs($current_number\
    \ - $next_number);\n        if ($current_distance < $best_distance) {\n      \
    \      $best_distance = $current_distance;\n            $best_a = $current_number;\n\
    \            $best_b = $next_number;\n        }\n    }\n    $best_pair = [$best_a,\
    \ $best_b];\n    return $best_pair;\n}", "    my @result = (0, 0);\n    my $distance\
    \ = abs($numbers->[0] - $numbers->[1]);\n    for (my $i = 0; $i < @$numbers -\
    \ 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n         \
    \   my $tmp = abs($numbers->[$i] - $numbers->[$j]);\n            if ($tmp < $distance)\
    \ {\n                $distance = $tmp;\n                @result = ($numbers->[$i],\
    \ $numbers->[$j]);\n            }\n        }\n    }\n    return @result;\n}",
  "    my($difference) = abs($numbers->[0] - $numbers->[1]);\n    my(@retval) = ($numbers->[0],\
    \ $numbers->[1]);\n    for (my($i) = 0; $i < @$numbers; $i++) {\n        for (my($j)\
    \ = $i + 1; $j < @$numbers; $j++) {\n            my($this_difference) = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($this_difference < $difference) {\n    \
    \            $difference = $this_difference;\n                @retval = ($numbers->[$i],\
    \ $numbers->[$j]);\n            }\n        }\n    }\n    return(\\@retval);\n}",
  "    my @copy = @$numbers;\n    my $diff = 2.2 - 2.0;\n    my @results;\n    for\
    \ (my $i = 0; $i < scalar @copy; $i++) {\n        my $number1 = $copy[$i];\n \
    \       for (my $j = $i + 1; $j < scalar @copy; $j++) {\n            my $number2\
    \ = $copy[$j];\n            my $temp = abs($number1 - $number2);\n           \
    \ if ($temp < $diff) {\n                $diff = $temp;\n                @results\
    \ = ($number1, $number2);\n            }\n        }\n    }\n    return @results;\n\
    }", "    my @sorted = sort @$numbers;\n    my @closest;\n    my $min_distance\
    \ = 0;\n    for my $i (0 .. $#sorted - 1) {\n        if(!@closest || abs($sorted[$i+1]\
    \ - $sorted[$i]) < $min_distance) {\n            @closest = ($sorted[$i], $sorted[$i+1]);\n\
    \            $min_distance = abs($sorted[$i+1] - $sorted[$i]);\n        }\n  \
    \  }\n    return @closest;\n}", "    my $best = 9999;\n    my($best_small, $best_large);\n\
    \    my $x;\n    my $i;\n    my $j;\n    foreach $x (@$numbers) {\n        foreach\
    \ $i (@$numbers) {\n            foreach $j (@$numbers) {\n                if ($i\
    \ ne $j && abs($i - $j) < $best) {\n                    $best = abs($i - $j);\n\
    \                    $best_small = $i < $j ? $i : $j;\n                    $best_large\
    \ = $i < $j ? $j : $i;\n                }\n            }\n        }\n    }\n \
    \   return($best_small, $best_large);\n}", "    my @result = (0, 0);\n    my $min_diff\
    \ = 999999999;\n    my $length = scalar @$numbers;\n    for (my $i = 0; $i < $length\
    \ - 1; $i++) {\n        for (my $j = $i + 1; $j < $length; $j++) {\n         \
    \   my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff <\
    \ $min_diff) {\n                $min_diff = $diff;\n                @result =\
    \ ($numbers->[$i], $numbers->[$j]);\n            }\n        }\n    }\n    @result;\n\
    }", "    my $min_distance = abs($numbers->[0] - $numbers->[1]);\n    my($min_a,\
    \ $min_b) = ($numbers->[0], $numbers->[1]);\n    for my $i (0 .. @$numbers - 2)\
    \ {\n        for my $j ($i + 1 .. @$numbers - 1) {\n            my $distance =\
    \ abs($numbers->[$i] - $numbers->[$j]);\n            if ($distance < $min_distance)\
    \ {\n                $min_distance = $distance;\n                ($min_a, $min_b)\
    \ = ($numbers->[$i], $numbers->[$j]);\n            }\n        }\n    }\n    return\
    \ [ $min_a, $min_b ];\n}", '    my @numbers = @$numbers;', "    my @numbers =\
    \ @$numbers;\n    my($closest_small, $closest_large);\n    my $small_diff = $large_diff\
    \ = 999999;\n    for (my $i = 0; $i < @numbers; $i++) {\n        my $small_number\
    \ = $numbers[$i];\n        for (my $j = $i + 1; $j < @numbers; $j++) {\n     \
    \       my $large_number = $numbers[$j];\n            my $diff = $large_number\
    \ - $small_number;\n            if ($diff < $small_diff) {\n                $small_diff\
    \ = $diff;\n                $closest_small = $small_number;\n                $closest_large\
    \ = $large_number;\n            }\n        }\n    }\n    return [$closest_small,\
    \ $closest_large];\n}", "    my @sorted = sort {$a <=> $b} @$numbers;\n    my\
    \ $distance = $sorted[1] - $sorted[0];\n    my @closest;\n    for (my $i = 1;\
    \ $i < scalar @sorted; $i++) {\n        my $temp = $sorted[$i] - $sorted[$i -\
    \ 1];\n        if ($temp < $distance) {\n            $distance = $temp;\n    \
    \        @closest = ($sorted[$i - 1], $sorted[$i]);\n        }\n    }\n    return\
    \ @closest;\n}", "    my @numbers = @$numbers;\n    my($last_diff, @numbers_to_return);\n\
    \    for (my $i = 0; $i < @numbers; $i++) {\n        my $diff = $numbers[$i +\
    \ 1] - $numbers[$i];\n        if ($last_diff == undef or $diff < $last_diff) {\n\
    \            $last_diff = $diff;\n            @numbers_to_return = ($numbers[$i],\
    \ $numbers[$i + 1]);\n        }\n    }\n    return \\@numbers_to_return;\n}",
  "    my $closest = 999999;\n    my @closest_pair;\n    foreach my $i (0..$#{$numbers})\
    \ {\n        foreach my $j ($i+1..$#{$numbers}) {\n            my $gap = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($gap < $closest) {\n                $closest\
    \ = $gap;\n                @closest_pair = ($numbers->[$i], $numbers->[$j]);\n\
    \            }\n        }\n    }\n    # return sorted pair\n    return sort {$a\
    \ <=> $b} @closest_pair;\n}", "    my($a, $b, $diff, $smallest_diff);\n    my($first,\
    \ $second);\n    $first = $second = $numbers->[0];\n    $smallest_diff = 1e10;\n\
    \    for($a = 0; $a < $#$numbers; $a++) {\n        for($b = $a + 1; $b <= $#$numbers;\
    \ $b++) {\n            $diff = abs($numbers->[$a] - $numbers->[$b]);\n       \
    \     if($diff < $smallest_diff) {\n                $smallest_diff = $diff;\n\
    \                $first = $numbers->[$a];\n                $second = $numbers->[$b];\n\
    \            }\n        }\n    }\n    return($first, $second);\n}", "    if (scalar(@$numbers)\
    \ < 2) {\n        return [];\n    }\n    my @sort_numbers = sort @$numbers;\n\
    \    my $least_diff = abs($sort_numbers[0] - $sort_numbers[1]);\n    my @closest_numbers\
    \ = ($sort_numbers[0], $sort_numbers[1]);\n    for my $i (0..$#sort_numbers-1)\
    \ {\n        my $diff = abs($sort_numbers[$i] - $sort_numbers[$i+1]);\n      \
    \  if ($diff < $least_diff) {\n            $least_diff = $diff;\n            @closest_numbers\
    \ = ($sort_numbers[$i], $sort_numbers[$i+1]);\n        }\n    }\n    return \\\
    @closest_numbers;\n}", "    my @numbers = @$numbers;\n    my @closest_elements;\n\
    \    my $distance = sqrt(2); # Max distance\n    foreach my $i (0..$#numbers-1)\
    \ {\n        foreach my $j ($i+1..$#numbers) {\n            my $d = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($d < $distance) {\n                $distance\
    \ = $d;\n                @closest_elements = ($numbers[$i], $numbers[$j]);\n \
    \           }\n        }\n    }\n    return @closest_elements;\n}", "    my($i);\n\
    \    my($diff);\n    my($smallest_diff);\n    my($smallest_i);\n    my($smallest_j);\n\
    \    my($min);\n    my($max);", "    my $min = undef;\n    my $closest_numbers\
    \ = [0, 1];\n    foreach my $index (0 .. @$numbers - 2) {\n        my $diff =\
    \ abs($numbers->[$index] - $numbers->[$index + 1]);\n        if (!defined($min)\
    \ || $diff < $min) {\n            $min = $diff;\n            $closest_numbers\
    \ = [$index, $index + 1];\n        }\n    }\n    return [ $numbers->[$closest_numbers->[0]],\
    \ $numbers->[$closest_numbers->[1]] ];\n}", "    my $smaller = $numbers->[0];\n\
    \    my $larger = $numbers->[1];\n    my $diff = abs($larger - $smaller);\n  \
    \  for my $i (1..$#$numbers) {\n        for my $j ($i+1..$#$numbers) {\n     \
    \       my $temp_diff = abs($numbers->[$j] - $numbers->[$i]);\n            if\
    \ ($temp_diff < $diff) {\n                $diff = $temp_diff;\n              \
    \  $smaller = $numbers->[$i];\n                $larger = $numbers->[$j];\n   \
    \         }\n        }\n    }\n    return [$smaller, $larger];\n}", "    my(@numbers)\
    \ = @$numbers;\n    my($idx, $idx_min, $diff, $diff_min);\n    $diff_min = abs($numbers[0]\
    \ - $numbers[1]);\n    for ($idx = 0; $idx < scalar(@numbers); $idx++) {\n   \
    \     if ($idx == scalar(@numbers) - 1) {\n            last;\n        }\n    \
    \    $diff = abs($numbers[$idx] - $numbers[$idx + 1]);\n        if ($diff < $diff_min)\
    \ {\n            $diff_min = $diff;\n            $idx_min = $idx;\n        }\n\
    \    }\n    return [$numbers[$idx_min], $numbers[$idx_min + 1]];\n}", "    if\
    \ (scalar(@$numbers) < 2) {\n        die \"The supplied list of numbers must contain\
    \ at least two numbers\";\n    }\n    my $smallest_diff = abs($numbers->[0] -\
    \ $numbers->[1]);\n    my $first_number = $numbers->[0];\n    my $second_number\
    \ = $numbers->[1];\n    for(my $i = 0; $i < scalar(@$numbers) - 1; $i++) {\n \
    \       for(my $j = $i + 1; $j < scalar(@$numbers); $j++) {\n            my $current_diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($current_diff < $smallest_diff)\
    \ {\n                $smallest_diff = $current_diff;\n                $first_number\
    \ = $numbers->[$i];\n                $second_number = $numbers->[$j];\n      \
    \      }\n        }\n    }\n    return $first_number < $second_number ? [$first_number,\
    \ $second_number] : [$second_number, $first_number];\n}", "    my($first, $second,\
    \ $diff);\n    my($last_diff);\n    my(@result);\n    my($i);\n    my($first_found)\
    \ = 0;", "    my $min_diff;\n    my $res;\n    for my $i (0..$#$numbers-1) {\n\
    \        for my $j ($i+1..$#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if (!defined $min_diff || $diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $res = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $res;\n}", " \
    \   my(@returnArray);\n    my(@numbers) = @$numbers;\n    my(@numbers);\n    my($diff);\n\
    \    my($smallestDiff);\n    my($smallestIndex);\n    my($largestIndex);\n   \
    \ my($i);\n    my($j);\n    for($i = 0; $i < $#numbers; $i++){\n        for($j\
    \ = $i + 1; $j < $#numbers; $j++){\n            $diff = $numbers[$j] - $numbers[$i];\n\
    \            if($smallestDiff == undef || $diff < $smallestDiff){\n          \
    \      $smallestDiff = $diff;\n                $smallestIndex = $i;\n        \
    \        $largestIndex = $j;\n            }\n        }\n    }\n    $returnArray[0]\
    \ = $numbers[$smallestIndex];\n    $returnArray[1] = $numbers[$largestIndex];\n\
    \    return @returnArray;\n}", "    my $closest_numbers = [$numbers->[0], $numbers->[1]];\n\
    \    my $closest_difference = abs($numbers->[0] - $numbers->[1]);\n    my $length\
    \ = scalar @$numbers;\n    for (my $i = 0; $i < $length - 1; $i++) {\n       \
    \ for (my $j = $i + 1; $j < $length; $j++) {\n            my $difference = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($difference < $closest_difference) {\n \
    \               $closest_difference = $difference;\n                $closest_numbers\
    \ = [sort {$a <=> $b} ($numbers->[$i], $numbers->[$j])];\n            }\n    \
    \    }\n    }\n    return $closest_numbers;\n}", "    my($num_elements) = @$numbers;\n\
    \    my $closest_delta = abs($numbers->[0] - $numbers->[1]);\n    my $closest_index_1\
    \ = 0;\n    my $closest_index_2 = 1;\n    for (my $index = 0; $index < $num_elements;\
    \ $index++) {\n        for (my $comp_index = $index + 1; $comp_index < $num_elements;\
    \ $comp_index++) {\n            my $delta = abs($numbers->[$index] - $numbers->[$comp_index]);\n\
    \            if ($delta < $closest_delta) {\n                $closest_delta =\
    \ $delta;\n                $closest_index_1 = $index;\n                $closest_index_2\
    \ = $comp_index;\n            }\n        }\n    }\n    return [$numbers->[$closest_index_1],\
    \ $numbers->[$closest_index_2]];\n}", "    my $min_diff = abs($numbers->[0] -\
    \ $numbers->[1]);\n    my $min_a    = $numbers->[0];\n    my $min_b    = $numbers->[1];\n\
    \    for (my $i = 0; $i < scalar(@$numbers); $i++) {\n        for (my $j = $i\
    \ + 1; $j < scalar(@$numbers); $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_a    = $numbers->[$i];\n                $min_b\
    \    = $numbers->[$j];\n            }\n        }\n    }\n    return [$min_a, $min_b];\n\
    }", "    my @sorted = sort @$numbers;\n    my @min_distance = (1, 0, 0);\n   \
    \ for my $i (0 .. $#sorted-1) {\n        if (abs($sorted[$i] - $sorted[$i+1])\
    \ < $min_distance[0]) {\n            @min_distance = (abs($sorted[$i] - $sorted[$i+1]),\
    \ $sorted[$i], $sorted[$i+1]);\n        }\n    }\n    return \\@min_distance[1..2];\n\
    }", "    my $small = $numbers->[0];\n    my $big = $numbers->[1];\n    my $diff\
    \ = abs($small - $big);\n    for (my $i = 0; $i < scalar(@$numbers) - 1; $i++)\
    \ {\n        my $a = $numbers->[$i];\n        my $b = $numbers->[$i + 1];\n  \
    \      my $new_diff = abs($a - $b);\n        if ($new_diff < $diff) {\n      \
    \      $small = $a;\n            $big = $b;\n            $diff = $new_diff;\n\
    \        }\n    }\n    return $small < $big ? [$small, $big] : [$big, $small];\n\
    }", "    my @numbers = @$numbers;\n    my $diff = abs($numbers[0] - $numbers[1]);\n\
    \    my @result = ($numbers[0], $numbers[1]);\n    for (my $i = 0; $i < @numbers;\
    \ $i++) {\n        for (my $j = $i + 1; $j < @numbers; $j++) {\n            my\
    \ $d = abs($numbers[$i] - $numbers[$j]);\n            if ($d < $diff) {\n    \
    \            $diff = $d;\n                @result = ($numbers[$i], $numbers[$j]);\n\
    \            }\n        }\n    }\n    return @result;\n}", "    my($smaller, $larger);\n\
    \    my($min) = abs($numbers->[0] - $numbers->[1]);\n    for (my $index = 1; $index\
    \ < @$numbers - 1; $index++) {\n        my($diff) = abs($numbers->[$index] - $numbers->[$index\
    \ + 1]);\n        if ($diff < $min) {\n            $min = $diff;\n           \
    \ $smaller = $numbers->[$index];\n            $larger = $numbers->[$index + 1];\n\
    \        }\n    }\n    return [$smaller, $larger];\n}", "    my $n = scalar(@$numbers);\n\
    \    my($smallest, $second_smallest);\n    my($smallest_index, $second_smallest_index);\n\
    \    for (my $i = 0; $i < $n; $i++) {\n        if (not defined($smallest) or $numbers->[$i]\
    \ < $smallest) {\n            $second_smallest = $smallest;\n            $second_smallest_index\
    \ = $smallest_index;\n            $smallest = $numbers->[$i];\n            $smallest_index\
    \ = $i;\n        } elsif (not defined($second_smallest) or $numbers->[$i] < $second_smallest)\
    \ {\n            $second_smallest = $numbers->[$i];\n            $second_smallest_index\
    \ = $i;\n        }\n    }\n    return [$smallest, $second_smallest];\n}", "  \
    \  my $sorted = [sort @$numbers];\n    my $best_diff = $sorted->[1] - $sorted->[0];\n\
    \    my $best_diff_idx = 0;\n    for my $i (2 .. @$sorted - 1) {\n        my $diff\
    \ = $sorted->[$i] - $sorted->[$i - 1];\n        if ($diff < $best_diff) {\n  \
    \          $best_diff = $diff;\n            $best_diff_idx = $i - 1;\n       \
    \ }\n    }\n    return [$sorted->[$best_diff_idx], $sorted->[$best_diff_idx +\
    \ 1]];\n}", "    my($minimum, $first, $second);\n    for my $index (0 .. $#{$numbers})\
    \ {\n        for my $index_2 ($index+1 .. $#{$numbers}) {\n            my $difference\
    \ = abs($numbers->[$index] - $numbers->[$index_2]);\n            if (!defined($minimum)\
    \ || $difference < $minimum) {\n                $minimum = $difference;\n    \
    \            $first = $numbers->[$index];\n                $second = $numbers->[$index_2];\n\
    \            }\n        }\n    }\n    if ($first > $second) {\n        return\
    \ ($second, $first);\n    }\n    else {\n        return ($first, $second);\n \
    \   }\n}\nmy @numbers = (1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\nprint 'The two closest\
    \ elements in the list ', join(', ', @numbers), \" are @{[find_closest_elements(\\\
    @numbers)]}\\n\";", "    my $i;\n    my $j;\n    my $minDiff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $minElements = [$numbers->[0], $numbers->[1]];\n \
    \   for ($i = 0; $i < scalar(@$numbers) - 1; $i++) {\n        for ($j = $i + 1;\
    \ $j < scalar(@$numbers); $j++) {\n            my $diff = abs($numbers->[$i] -\
    \ $numbers->[$j]);\n            if ($diff < $minDiff) {\n                $minDiff\
    \ = $diff;\n                $minElements = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return $minElements;\n}", "    my(@closest_elements);\n\
    \    my($minimum_distance) = abs($numbers->[0] - $numbers->[1]);\n    for (my($i)\
    \ = 0; $i < scalar(@{$numbers}) - 1; $i++) {\n        for (my($j) = $i + 1; $j\
    \ < scalar(@{$numbers}); $j++) {\n            my($distance) = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if($distance < $minimum_distance) {\n      \
    \          $minimum_distance = $distance;\n                @closest_elements =\
    \ ($numbers->[$i], $numbers->[$j]);\n            }\n        }\n    }\n    return\
    \ \\@closest_elements;\n}", "    my @numbers = @$numbers;\n    my $minDiff = abs($numbers[0]\
    \ - $numbers[1]);\n    my ($i, $j) = (0, 1);\n    for (my $x = 0; $x < @numbers\
    \ - 1; $x++) {\n        for (my $y = $x + 1; $y < @numbers; $y++) {\n        \
    \    my $diff = abs($numbers[$x] - $numbers[$y]);\n            if ($diff < $minDiff)\
    \ {\n                $minDiff = $diff;\n                ($i, $j) = ($x, $y);\n\
    \            }\n        }\n    }\n    if ($numbers[$i] > $numbers[$j]) {\n   \
    \     ($i, $j) = ($j, $i);\n    }\n    return ($numbers[$i], $numbers[$j]);\n}",
  "    my($min_distance) = abs($numbers->[0] - $numbers->[1]);\n    my($pair) = [$numbers->[0],\
    \ $numbers->[1]];\n    my($i);\n    for($i = 1; $i < $#$numbers; $i++) {\n   \
    \     my($d) = abs($numbers->[$i] - $numbers->[$i + 1]);\n        if($d < $min_distance)\
    \ {\n            $min_distance = $d;\n            $pair = [$numbers->[$i], $numbers->[$i\
    \ + 1]];\n        }\n    }\n    return $pair;\n}", "    my $min_dist = -1;\n \
    \   my $first_index = -1;\n    my $second_index = -1;\n    for(my $first = 0;\
    \ $first < scalar(@$numbers); $first++) {\n        for(my $second = $first + 1;\
    \ $second < scalar(@$numbers); $second++) {\n            my $dist = abs($numbers->[$first]\
    \ - $numbers->[$second]);\n            if($dist < $min_dist || $min_dist == -1)\
    \ {\n                $min_dist = $dist;\n                $first_index = $first;\n\
    \                $second_index = $second;\n            }\n        }\n    }\n \
    \   my @return = ($numbers->[$first_index], $numbers->[$second_index]);\n    return\
    \ @return;\n}", "    my $i;\n    my $j;\n    my $distance;\n    my $min_distance\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for ($i = 0; $i < @$numbers - 1; $i++) {\n        for ($j = $i + 1; $j <\
    \ @$numbers; $j++) {\n            $distance = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($distance < $min_distance) {\n                $min_distance =\
    \ $distance;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return $min_pair;\n}", "    my @ordered_numbers\
    \ = sort @$numbers;\n    my $closest_distance = $ordered_numbers[1] - $ordered_numbers[0];\n\
    \    my ($first, $second) = ($ordered_numbers[0], $ordered_numbers[1]);\n    for\
    \ my $idx (0 .. $#ordered_numbers - 1) {\n        my $distance = $ordered_numbers[$idx\
    \ + 1] - $ordered_numbers[$idx];\n        if ($distance < $closest_distance) {\n\
    \            $closest_distance = $distance;\n            ($first, $second) = ($ordered_numbers[$idx],\
    \ $ordered_numbers[$idx + 1]);\n        }\n    }\n    return ($first, $second);\n\
    }", "    my @distance;\n    my $min;\n    foreach my $i (0..@$numbers-2) {\n \
    \       $distance[$i] = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($i\
    \ == 0) {\n            $min = $distance[$i];\n        } else {\n            $min\
    \ = $distance[$i] if $distance[$i] < $min;\n        }\n    }\n    foreach my $i\
    \ (0..@$numbers-2) {\n        if ($distance[$i] == $min) {\n            return\
    \ [$numbers->[$i], $numbers->[$i+1]];\n        }\n    }\n}", "    my @list = sort\
    \ {$a <=> $b} @$numbers;\n    my $i = 0;\n    my $min_diff = abs($list[0] - $list[1]);\n\
    \    my ($min_i, $min_j) = (0, 1);\n    for ( ; $i < $#list; $i++) {\n       \
    \ my $j = $i + 1;\n        my $diff = abs($list[$i] - $list[$j]);\n        if\
    \ ($diff < $min_diff) {\n            $min_diff = $diff;\n            ($min_i,\
    \ $min_j) = ($i, $j);\n        }\n    }\n    return [$list[$min_i], $list[$min_j]];\n\
    }", "    my @numbers = @$numbers;\n    my $smallest = $numbers[0];\n    my $smallest_index\
    \ = 0;\n    my $largest = $numbers[0];\n    my $largest_index = 0;\n    my $difference\
    \ = $numbers[1] - $numbers[0];\n    for (my $i = 1; $i < scalar @numbers; $i++)\
    \ {\n        if ($numbers[$i] < $smallest) {\n            $smallest = $numbers[$i];\n\
    \            $smallest_index = $i;\n        }\n        if ($numbers[$i] > $largest)\
    \ {\n            $largest = $numbers[$i];\n            $largest_index = $i;\n\
    \        }\n        if (abs($numbers[$i] - $numbers[$i - 1]) < $difference) {\n\
    \            $difference = abs($numbers[$i] - $numbers[$i - 1]);\n           \
    \ $smallest = $numbers[$i - 1];\n            $smallest_index = $i - 1;\n     \
    \       $largest = $numbers[$i];\n            $largest_index = $i;\n        }\n\
    \    }\n    if ($smallest_index > $largest_index) {\n        my $temp = $smallest;\n\
    \        $smallest = $largest;\n        $largest = $temp;\n    }\n    return [$smallest,\
    \ $largest];\n}", "    my $first = shift @$numbers;\n    my $diff = $first - $numbers->[0];\n\
    \    my $min = $diff;\n    my $pair = [$first, $numbers->[0]];\n    for my $number\
    \ (@$numbers) {\n        my $this_diff = $first - $number;\n        if ($this_diff\
    \ < $min) {\n            $min = $this_diff;\n            $pair = [$first, $number];\n\
    \        }\n    }\n    return @$pair;\n}", "    die \"Not an array\" unless ref($numbers)\
    \ eq 'ARRAY';\n    die \"Not enough numbers\" unless @$numbers >= 2;\n    my $first\
    \ = undef;\n    my $second = undef;\n    my $diff = 999;\n    for(my $i = 0; $i\
    \ < @$numbers; $i++) {\n        for(my $j = $i + 1; $j < @$numbers; $j++) {\n\
    \            if (abs($numbers->[$i] - $numbers->[$j]) < $diff) {\n           \
    \     $first = $numbers->[$i];\n                $second = $numbers->[$j];\n  \
    \              $diff = abs($numbers->[$i] - $numbers->[$j]);\n            }\n\
    \        }\n    }\n    return [$first, $second];\n}", "    my $closest = [];\n\
    \    my $diff;\n    foreach my $i (0..$#{$numbers}) {\n        foreach my $j ($i+1..$#{$numbers})\
    \ {\n            my $d = abs($numbers->[$i] - $numbers->[$j]);\n            if(!$diff\
    \ || $d < $diff) {\n                $diff = $d;\n                $closest = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $closest;\n}",
  "    my @closest_numbers = ();\n    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    for(my $i = 0; $i < scalar(@$numbers); $i++) {\n        for(my $j = $i +\
    \ 1; $j < scalar(@$numbers); $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                @closest_numbers = ($numbers->[$i], $numbers->[$j]);\n\
    \            }\n        }\n    }\n    return \\@closest_numbers;\n}", "    my\
    \ $smallest = $numbers->[0];\n    my $largest = $numbers->[0];\n    my $smallest_diff\
    \ = $numbers->[1] - $numbers->[0];\n    foreach my $i (0..$#$numbers-1) {\n  \
    \      my $diff = $numbers->[$i+1] - $numbers->[$i];\n        if ($diff < $smallest_diff)\
    \ {\n            $smallest_diff = $diff;\n            $smallest = $numbers->[$i];\n\
    \            $largest = $numbers->[$i+1];\n        }\n    }\n    return [$smallest,\
    \ $largest];\n}", "    my $min_diff = 0;\n    my @result;\n    for my $index (0\
    \ .. $#{$numbers}-1) {\n        my $diff = abs($numbers->[$index] - $numbers->[$index+1]);\n\
    \        if (!defined $min_diff || $diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            @result = ($numbers->[$index], $numbers->[$index+1]);\n\
    \        }\n    }\n    return wantarray ? @result : \\@result;\n}", "    my $min_diff\
    \ = $numbers->[1] - $numbers->[0];\n    my @closest = ($numbers->[0], $numbers->[1]);\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my $diff = $numbers->[$j] - $numbers->[$i];\n            if ($diff\
    \ < $min_diff) {\n                $min_diff = $diff;\n                @closest\
    \ = ($numbers->[$i], $numbers->[$j]);\n            }\n        }\n    }\n    return\
    \ \\@closest;\n}", "    my @result = (undef, undef);\n    my $smallest_difference\
    \ = undef;\n    for my $i (0 .. $#{$numbers}) {\n        my $current_number =\
    \ $numbers->[$i];\n        for my $j ($i + 1 .. $#{$numbers}) {\n            my\
    \ $current_difference = abs($current_number - $numbers->[$j]);\n            if\
    \ (not defined $smallest_difference or $current_difference < $smallest_difference)\
    \ {\n                $smallest_difference = $current_difference;\n           \
    \     @result = ($current_number, $numbers->[$j]);\n            }\n        }\n\
    \    }\n    return \\@result;\n}", "    my($a, $b);\n    my($distance) = 999999;\n\
    \    for my $i (0 .. @$numbers - 2) {\n        my($diff) = $numbers->[$i+1] -\
    \ $numbers->[$i];\n        if ($diff < $distance) {\n            $a = $numbers->[$i];\n\
    \            $b = $numbers->[$i+1];\n            $distance = $diff;\n        }\n\
    \    }\n    return($a, $b);\n}", '    my @numbers = @$numbers;', "    my($min_diff)\
    \ = 10_000_000;\n    my($min_pair) = [];\n    my($i);\n    my($number_one);\n\
    \    my($number_two);\n    my($diff);\n    for($i = 0; $i < $#$numbers; $i++)\
    \ {\n        $number_one = $numbers->[$i];\n        $number_two = $numbers->[$i\
    \ + 1];\n        $diff = abs($number_one - $number_two);\n        if($diff < $min_diff)\
    \ {\n            $min_diff = $diff;\n            $min_pair = [$number_one, $number_two];\n\
    \        }\n    }\n    return($min_pair);\n}", "    my $min_diff;\n    my @ret;\n\
    \    foreach my $i (0..@$numbers-2) {\n        my $diff = abs($numbers->[$i] -\
    \ $numbers->[$i+1]);\n        if (not defined $min_diff or $diff < $min_diff)\
    \ {\n            $min_diff = $diff;\n            @ret = ($numbers->[$i], $numbers->[$i+1]);\n\
    \        }\n    }\n    return @ret;\n}", "    my $min = +2**32;\n    my $el1 =\
    \ 0;\n    my $el2 = 0;\n    for (my $i = 0; $i < @$numbers - 1; $i++) {\n    \
    \    for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min) {\n                $min =\
    \ $diff;\n                $el1 = $numbers->[$i];\n                $el2 = $numbers->[$j];\n\
    \            }\n        }\n    }\n    return [$el1, $el2];\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
