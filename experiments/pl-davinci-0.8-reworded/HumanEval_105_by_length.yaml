name: HumanEval_105_by_length
language: pl
prompt: "# Given an array of integers, sort the integers that are between 1 and 9\
  \ inclusive,\n# reverse the resulting array, and then replace each digit by its\
  \ corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
  Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n# >>> by_length([2, 1, 1,\
  \ 4, 5, 8, 2, 3])\n# [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
  , \"One\", \"One\"]\n# If the array is empty, return an empty array:\n# >>> by_length([])\n\
  # []\n# If the array has any strange number ignore it:\n# >>> by_length([1, -1,\
  \ 55])\n# [\"One\"]\nsub by_length {\n    my($arr) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&by_length;\n\
  \        if(eq_deeply($candidate->([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\"\
  , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ -1, 55]),[\"One\"])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n        if(eq_deeply($candidate->([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"\
  ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
  \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"])) {\n        print \"ok!\" }else{\n   \
  \     exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @res;\n    my @arr_tmp = sort { $a <=> $b } grep {$_ > 0 &&\
    \ $_ < 10} @$arr;\n    my @arr_sort = reverse @arr_tmp;\n    foreach my $item\
    \ (@arr_sort) {\n        my $name = num2word($item);\n        push @res, $name;\n\
    \    }\n    return \\@res;\n}", "    my @arr = sort { length($a) <=> length($b)\
    \ } grep /^[1-9]$/, @$arr;\n    my %arr = reverse qw(One Two Three Four Five Six\
    \ Seven Eight Nine);\n    return [ map { $arr{$_} } @arr ];\n}", "    my @t =\
    \ sort { $a <=> $b } grep { $_ >= 1 && $_ <= 9 } @$arr;\n    my %h = (\n     \
    \   1 => \"One\",\n        2 => \"Two\",\n        3 => \"Three\",\n        4 =>\
    \ \"Four\",\n        5 => \"Five\",\n        6 => \"Six\",\n        7 => \"Seven\"\
    ,\n        8 => \"Eight\",\n        9 => \"Nine\",\n    );\n    my @ret = map\
    \ { $h{$_} } reverse @t;\n    return \\@ret;\n}", "    return [] unless @$arr;\n\
    \    my @sorted = grep { $_ >= 1 && $_ <= 9 } sort { $a <=> $b } @$arr;\n    my\
    \ @word = ('One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine');\n\
    \    @sorted = reverse @sorted;\n    return [map { $word[$_ - 1] } @sorted];\n\
    }", "    return [] unless $arr && @$arr;\n    my $hash = {1 => \"One\", 2 => \"\
    Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\"\
    , 8 => \"Eight\", 9 => \"Nine\"};\n    my @filtered = grep {$_ > 0 && $_ < 10}\
    \ @$arr;\n    my @sorted = sort {$a <=> $b} @filtered;\n    my @reversed = reverse\
    \ @sorted;\n    return [map {$hash->{$_}} @reversed];\n}", "    return [] unless\
    \ $arr;\n    my @sorted = sort { $a <=> $b } grep {$_ <= 9 && $_ >= 1} @$arr;\n\
    \    return reverse map {$_ = [1 => \"One\", 2 => \"Two\", 3 => \"Three\", 4 =>\
    \ \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9 =>\
    \ \"Nine\"]->[$_]} @sorted;\n}", "    $arr = [ sort { $a <=> $b } grep { $_ >=\
    \ 1 && $_ <= 9 } @$arr ];\n    return [ map { $digits[$_] } reverse @$arr ];\n\
    }", "    my %hash = (\n        1 => \"One\",\n        2 => \"Two\",\n        3\
    \ => \"Three\",\n        4 => \"Four\",\n        5 => \"Five\",\n        6 =>\
    \ \"Six\",\n        7 => \"Seven\",\n        8 => \"Eight\",\n        9 => \"\
    Nine\",\n    );\n    my @new = grep $_ >= 1 && $_ <= 9, @$arr;\n    my @new2 =\
    \ sort {$a <=> $b} @new;\n    my @new3 = reverse @new2;\n    return map {$hash{$_}}\
    \ @new3;\n}", "    my @result = map { $_ = $number_dict{$_} } \n             \
    \    sort { $a <=> $b } \n                 grep { $_ > 0 && $_ < 10 } \n     \
    \            @$arr;\n    reverse @result;\n}", "    my %hash = (1 => \"One\",\n\
    \                2 => \"Two\",\n                3 => \"Three\",\n            \
    \    4 => \"Four\",\n                5 => \"Five\",\n                6 => \"Six\"\
    ,\n                7 => \"Seven\",\n                8 => \"Eight\",\n        \
    \        9 => \"Nine\");\n    my @ret = ();\n    foreach my $i (@$arr) {\n   \
    \     if ($i >= 1 && $i <= 9) {\n            push @ret, $hash{$i};\n        }\n\
    \    }\n    @ret = reverse sort @ret;\n    return \\@ret;\n}", "    my @result\
    \ = ();\n    my %digits = (1 => \"One\", 2 => \"Two\", 3 => \"Three\", 4 => \"\
    Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9 => \"Nine\"\
    );\n    foreach my $val (@$arr) {\n        if ($val <= 9 and $val >= 1) {\n  \
    \          push(@result, $val);\n        }\n    }\n    @result = sort {$a <=>\
    \ $b} @result;\n    @result = reverse @result;\n    foreach my $num (@result)\
    \ {\n        $num = $digits{$num};\n    }\n    return @result;\n}", "    my @sorted\
    \ = sort(@$arr);\n    @sorted = reverse(@sorted);\n    my @mapped = map { $map{$_}\
    \ } @sorted;\n    return \\@mapped;\n}", "    my @result = ();\n    if (scalar(@$arr)\
    \ > 0) {\n        foreach (@$arr) {\n            if ($_ > 0 && $_ < 10) {\n  \
    \              push @result, $_;\n            }\n        }\n        @result =\
    \ sort {$a <=> $b} @result;\n        @result = reverse @result;\n        my @names\
    \ = ('One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine');\n\
    \        for (my $i = 0; $i < scalar(@result); $i++) {\n            $result[$i]\
    \ = $names[$result[$i] - 1];\n        }\n    }\n    return @result;\n}", "   \
    \ $arr = sort { $a <=> $b } @$arr;\n    $arr = reverse @$arr;\n    my @numbers\
    \ = map {\n        if    ($_ == 1) { 'One' }\n        elsif ($_ == 2) { 'Two'\
    \ }\n        elsif ($_ == 3) { 'Three' }\n        elsif ($_ == 4) { 'Four' }\n\
    \        elsif ($_ == 5) { 'Five' }\n        elsif ($_ == 6) { 'Six' }\n     \
    \   elsif ($_ == 7) { 'Seven' }\n        elsif ($_ == 8) { 'Eight' }\n       \
    \ elsif ($_ == 9) { 'Nine' }\n        else            { () }\n    } @$arr;\n \
    \   return @numbers;\n}", "    my @nums = sort {$a <=> $b} grep {$_ >= 1 && $_\
    \ <= 9} @$arr;\n    my @words = reverse map {\"One Two Three Four Five Six Seven\
    \ Eight Nine\"[$_ - 1]} @nums;\n    return \\@words;\n}", "    # TODO - validate\
    \ the array to make sure it's an array and contains only numbers\n    my $debug\
    \ = 0;", "    my @names = qw/Nine Eight Seven Six Five Four Three Two One/;\n\
    \    my %map = ();\n    for my $i (0..$#names) {\n        $map{$i+1} = $names[$i];\n\
    \    }\n    my @sorted = sort { $a <=> $b } grep { $_ > 0 && $_ < 10 } @$arr;\n\
    \    return [map { $map{$_} } reverse @sorted];\n}", "    my @tmp_arr = ();\n\
    \    for my $elm (@$arr) {\n        push @tmp_arr, $elm if ($elm >= 1 && $elm\
    \ <= 9);\n    }\n    @tmp_arr = sort @tmp_arr;\n    my @reverse_arr = reverse\
    \ @tmp_arr;\n    @tmp_arr = ();\n    for my $elm (@reverse_arr) {\n        push\
    \ @tmp_arr, num_to_name($elm);\n    }\n    return \\@tmp_arr;\n}", "    my @result\
    \ = ();\n    foreach my $number (@$arr) {\n        if ($number >= 1 && $number\
    \ <= 9) {\n            push @result, $number;\n        }\n    }\n    my @numbers\
    \ = sort { $a <=> $b } @result;\n    my @reversed = reverse @numbers;\n    my\
    \ @final = map { $numbers[$_] } @reversed;\n    return @final;\n}", "    my $res;\n\
    \    my @res;\n    if(@$arr) {\n        foreach (@$arr) {\n            if($_ <\
    \ 10 && $_ > 0) {\n                $res .= $_;\n            }\n        }\n   \
    \     $res = join('', sort split('', $res));\n        foreach (reverse split('',\
    \ $res)) {\n            push @res, $num_to_name{$_};\n        }\n    }\n    return\
    \ \\@res;\n}", "    my $number_arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    my @sorted_arr\
    \ = sort {$a <=> $b} grep {my $y = $_; grep {$_ == $y} @$number_arr} @$arr;\n\
    \    my @result = ();\n    for my $i (@sorted_arr) {\n        if ($i == 1) {\n\
    \            push @result, \"One\";\n        } elsif ($i == 2) {\n           \
    \ push @result, \"Two\";\n        } elsif ($i == 3) {\n            push @result,\
    \ \"Three\";\n        } elsif ($i == 4) {\n            push @result, \"Four\"\
    ;\n        } elsif ($i == 5) {\n            push @result, \"Five\";\n        }\
    \ elsif ($i == 6) {\n            push @result, \"Six\";\n        } elsif ($i ==\
    \ 7) {\n            push @result, \"Seven\";\n        } elsif ($i == 8) {\n  \
    \          push @result, \"Eight\";\n        } elsif ($i == 9) {\n           \
    \ push @result, \"Nine\";\n        }\n    }\n    return \\@result;\n}", "    my\
    \ @names = map{[\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]->[$_ - 1]} sort {$a <=> $b} grep{1 <= $_ && $_ <= 9} @$arr;\n\
    \    return [reverse @names];\n}", "    my @sorted = sort { $a <=> $b } grep {\
    \ $_ >= 1 && $_ <= 9 } @$arr;\n    return [ map {$_[$_]} reverse @sorted ];\n}",
  "    $arr = [sort grep {$_ > 0 && $_ < 10} @$arr];\n    $arr = [reverse @$arr];\n\
    \    $arr = [map {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"} @$arr];\n    return $arr;\n}", "    my @result =\
    \ ();\n    if (@$arr) {\n        @result = sort { length($a) <=> length($b) }\
    \ @$arr;\n        @result = reverse @result;\n        my %dict = (\n         \
    \   \"1\" => \"One\",\n            \"2\" => \"Two\",\n            \"3\" => \"\
    Three\",\n            \"4\" => \"Four\",\n            \"5\" => \"Five\",\n   \
    \         \"6\" => \"Six\",\n            \"7\" => \"Seven\",\n            \"8\"\
    \ => \"Eight\",\n            \"9\" => \"Nine\"\n        );\n        my @ret =\
    \ ();\n        foreach my $i (@result) {\n            if ($i >= 1 && $i <= 9)\
    \ {\n                push @ret, $dict{$i};\n            }\n        }\n       \
    \ @result = @ret;\n    }\n    return @result;\n}", "    return [] unless scalar\
    \ @$arr;\n    my $strings = [qw(Zero One Two Three Four Five Six Seven Eight Nine)];\n\
    \    return [\n        @{ by_length_helper(\n            [ reverse sort grep {\
    \ $_ < 10 && $_ > 0 } @$arr ],\n            $strings,\n        ) },\n    ];\n}",
  "    my @result = ();\n    foreach my $x (@$arr) {\n        if ($x >= 1 && $x <=\
    \ 9) {\n            $result[@result] = $x;\n        }\n    }\n    @result = sort\
    \ {$a <=> $b} @result;\n    @result = reverse @result;\n    my %numbers = (1 =>\
    \ \"One\", 2 => \"Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"\
    Six\", 7 => \"Seven\", 8 => \"Eight\", 9 => \"Nine\");\n    foreach my $i (0..@result-1)\
    \ {\n        $result[$i] = $numbers{$result[$i]};\n    }\n    return \\@result;\n\
    }", "    @$arr = sort @$arr;\n    @$arr = reverse @$arr;\n    my @tmp = ();\n\
    \    foreach my $x (@$arr) {\n        if ($x > 9 || $x < 1) {\n            next;\n\
    \        }\n        if ($x == 1) {\n            push @tmp, \"One\";\n        }\n\
    \        if ($x == 2) {\n            push @tmp, \"Two\";\n        }\n        if\
    \ ($x == 3) {\n            push @tmp, \"Three\";\n        }\n        if ($x ==\
    \ 4) {\n            push @tmp, \"Four\";\n        }\n        if ($x == 5) {\n\
    \            push @tmp, \"Five\";\n        }\n        if ($x == 6) {\n       \
    \     push @tmp, \"Six\";\n        }\n        if ($x == 7) {\n            push\
    \ @tmp, \"Seven\";\n        }\n        if ($x == 8) {\n            push @tmp,\
    \ \"Eight\";\n        }\n        if ($x == 9) {\n            push @tmp, \"Nine\"\
    ;\n        }\n    }\n    @$arr = @tmp;\n    return $arr;\n}", "    return [] unless\
    \ $arr;\n    return [keys %{{ map { $_ => 1 } grep { $NUMS{$_} } @$arr }}];\n}",
  "    my @res;\n    my @nums = sort { $a <=> $b } map { $_ > 0 && $_ < 10 ? $_ :\
    \ () } @$arr;\n    @res = map { $num2word{$_} } reverse @nums;\n    return \\\
    @res;\n}", "    my $ret = [];\n    my $hash = {\n        1 => \"One\",\n     \
    \   2 => \"Two\",\n        3 => \"Three\",\n        4 => \"Four\",\n        5\
    \ => \"Five\",\n        6 => \"Six\",\n        7 => \"Seven\",\n        8 => \"\
    Eight\",\n        9 => \"Nine\",\n    };\n    for my $i (@$arr) {\n        next\
    \ if $i < 1 or $i > 9;\n        push @$ret, $hash->{$i};\n    }\n    return $ret;\n\
    }", "    my %numbers = (\n        1 => \"One\",\n        2 => \"Two\",\n     \
    \   3 => \"Three\",\n        4 => \"Four\",\n        5 => \"Five\",\n        6\
    \ => \"Six\",\n        7 => \"Seven\",\n        8 => \"Eight\",\n        9 =>\
    \ \"Nine\",\n    );\n    my @new_arr = ();\n    foreach my $digit(@$arr) {\n \
    \       push @new_arr, $numbers{$digit} if(exists $numbers{$digit});\n    }\n\
    \    return reverse @new_arr;\n}", "    my @sorted_arr = sort @$arr;\n    my @result\
    \ = ();\n    my @replacements = (\"Zero\", \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n    for(my $i = 0; $i <\
    \ @sorted_arr; $i++) {\n        my $current_element = $sorted_arr[$i];\n     \
    \   if($current_element >= 1 && $current_element <= 9) {\n            push @result,\
    \ $replacements[$current_element];\n        }\n    }\n    return @result;\n}",
  "    my @nums = grep /^[1-9]$/, @$arr;\n    @nums = sort {$a <=> $b} @nums;\n  \
    \  my @names = map {$num_name{$_}} @nums;\n    return reverse @names;\n}", " \
    \   my @out = ();\n    foreach my $i (0..(@$arr-1)) {\n        my $number = $arr->[$i];\n\
    \        if ($number == 1) {\n            push @out, \"One\";\n        } elsif\
    \ ($number == 2) {\n            push @out, \"Two\";\n        } elsif ($number\
    \ == 3) {\n            push @out, \"Three\";\n        } elsif ($number == 4) {\n\
    \            push @out, \"Four\";\n        } elsif ($number == 5) {\n        \
    \    push @out, \"Five\";\n        } elsif ($number == 6) {\n            push\
    \ @out, \"Six\";\n        } elsif ($number == 7) {\n            push @out, \"\
    Seven\";\n        } elsif ($number == 8) {\n            push @out, \"Eight\";\n\
    \        } elsif ($number == 9) {\n            push @out, \"Nine\";\n        }\n\
    \    }\n    return reverse @out;\n}", "    my @result = ();\n    my %mapping =\
    \ (1 => \"One\", 2 => \"Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"Five\", 6\
    \ => \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9 => \"Nine\");\n    foreach my\
    \ $el(@$arr) {\n        if ($el > 0 && $el < 10) {\n            push @result,\
    \ $el;\n        }\n    }\n    @result = sort {$a <=> $b} @result;\n    @result\
    \ = reverse @result;\n    foreach my $i(0..scalar(@result)-1) {\n        $result[$i]\
    \ = $mapping{$result[$i]};\n    }\n    return \\@result;\n}", "    my %digits\
    \ = (1 => \"One\", 2 => \"Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"Five\"\
    , 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9 => \"Nine\");\n    my @res =\
    \ sort {$a <=> $b} grep {$_ <= 9 && $_ >= 1} @$arr;\n    my @res1 = reverse @res;\n\
    \    return map {$digits{$_}} @res1;\n}", "    my %digit_name = (\n        1 =>\
    \ \"One\",\n        2 => \"Two\",\n        3 => \"Three\",\n        4 => \"Four\"\
    ,\n        5 => \"Five\",\n        6 => \"Six\",\n        7 => \"Seven\",\n  \
    \      8 => \"Eight\",\n        9 => \"Nine\",\n    );\n    my @sorted = sort\
    \ { $a <=> $b } grep $_ > 0 && $_ < 10, @$arr;\n    return [ reverse @digit_name{@sorted}\
    \ ];\n}", "    if (scalar(@$arr) == 0) {\n        return [];\n    }\n    my $tmp\
    \ = [];\n    foreach my $item (@$arr) {\n        if ($item >= 1 && $item <= 9)\
    \ {\n            push($tmp, $item);\n        }\n    }\n    my @tmp_array = sort\
    \ {$a <=> $b} @$tmp;\n    $tmp = [];\n    foreach my $item (@tmp_array) {\n  \
    \      if ($item == 1) {\n            push($tmp, \"One\");\n        } elsif ($item\
    \ == 2) {\n            push($tmp, \"Two\");\n        } elsif ($item == 3) {\n\
    \            push($tmp, \"Three\");\n        } elsif ($item == 4) {\n        \
    \    push($tmp, \"Four\");\n        } elsif ($item == 5) {\n            push($tmp,\
    \ \"Five\");\n        } elsif ($item == 6) {\n            push($tmp, \"Six\");\n\
    \        } elsif ($item == 7) {\n            push($tmp, \"Seven\");\n        }\
    \ elsif ($item == 8) {\n            push($tmp, \"Eight\");\n        } elsif ($item\
    \ == 9) {\n            push($tmp, \"Nine\");\n        }\n    }\n    return \\\
    @tmp_array;\n}", "    my @one_to_nine = (1, 2, 3, 4, 5, 6, 7, 8, 9);\n    my @indices;\n\
    \    for (my $i = 0; $i < scalar @$arr; $i++) {\n        if (grep { $arr->[$i]\
    \ == $_ } @one_to_nine) {\n            push @indices, $i;\n        }\n    }\n\
    \    @$arr[@indices] = sort { $a <=> $b } @$arr[@indices];\n    @$arr[@indices]\
    \ = reverse @$arr[@indices];\n    my %numbers = (1 => \"One\", 2 => \"Two\", 3\
    \ => \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8\
    \ => \"Eight\", 9 => \"Nine\");\n    my @result;\n    for (my $i = 0; $i < scalar\
    \ @$arr; $i++) {\n        if (grep { $arr->[$i] == $_ } @one_to_nine) {\n    \
    \        push @result, $numbers{$arr->[$i]};\n        } else {\n            push\
    \ @result, $arr->[$i];\n        }\n    }\n    return @result;\n}", "    my %numbers\
    \ = (\n        1 => \"One\",\n        2 => \"Two\",\n        3 => \"Three\",\n\
    \        4 => \"Four\",\n        5 => \"Five\",\n        6 => \"Six\",\n     \
    \   7 => \"Seven\",\n        8 => \"Eight\",\n        9 => \"Nine\",\n    );\n\
    \    my $res = [];\n    foreach my $el (@$arr) {\n        if (defined $numbers{$el})\
    \ {\n            push @$res, $numbers{$el};\n        }\n    }\n    @$res = reverse\
    \ sort @$res;\n    return $res;\n}", "    my @words = (\n        \"\", \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ,\n    );\n    my @arr = sort { $a <=> $b }\n        grep { $_ > 0 && $_ < 10\
    \ }\n        @$arr;\n    reverse map { $words[$_] } @arr;\n}", "    my @result\
    \ = ();\n    my %map = (1 => \"One\", 2 => \"Two\", 3 => \"Three\", 4 => \"Four\"\
    , 5 => \"Five\",\n               6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\"\
    , 9 => \"Nine\");\n    my @sorted = sort { $a <=> $b } grep { $_ >= 1 && $_ <=\
    \ 9 } @$arr;\n    foreach my $number (@sorted) {\n        push @result, $map{$number};\n\
    \    }\n    @result = reverse @result;\n    return \\@result;\n}", "    my @res;\n\
    \    my %hash;\n    @hash{(1..9)} = (\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n    foreach(@$arr){\n     \
    \   if(exists $hash{$_}){\n            push @res, $hash{$_};\n        }\n    }\n\
    \    return reverse sort @res;\n}", "    my @a = map { $_->[0] } sort {$a->[1]\
    \ <=> $b->[1]} map { [$_, length $_] } @$arr;\n    return \\@a;\n}", "    my $res\
    \ = [];\n    foreach my $v (@$arr) {\n        if ($v > 0 && $v < 10) {\n     \
    \       push @$res, $v;\n        }\n    }\n    my $dic = {1 => \"One\", 2 => \"\
    Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\"\
    , 8 => \"Eight\", 9 => \"Nine\"};\n    $res = [sort {$a <=> $b} @$res];\n    @$res\
    \ = reverse @$res;\n    for (my $i = 0; $i < @$res; $i++) {\n        $res->[$i]\
    \ = $dic->{$res->[$i]};\n    }\n    return $res;\n}", "    my @int_list = grep\
    \ {$_ >= 1 && $_ <= 9} @$arr;\n    my @sorted_list = sort {$a <=> $b} @int_list;\n\
    \    my @reversed_list = reverse @sorted_list;\n    my %hash = (\n        1 =>\
    \ \"One\",\n        2 => \"Two\",\n        3 => \"Three\",\n        4 => \"Four\"\
    ,\n        5 => \"Five\",\n        6 => \"Six\",\n        7 => \"Seven\",\n  \
    \      8 => \"Eight\",\n        9 => \"Nine\",\n    );\n    my @result = ();\n\
    \    for my $i (@reversed_list) {\n        my $i_name = $hash{$i};\n        push\
    \ @result, $i_name;\n    }\n    return @result;\n}", "    my @arr = @$arr;\n \
    \   my @rtn = ();\n    foreach my $val (@arr) {\n        if ($val >= 1 && $val\
    \ <= 9) {\n            push @rtn, $val;\n        }\n    }\n    @rtn = sort {$a\
    \ <=> $b} @rtn;\n    @rtn = reverse @rtn;\n    @rtn = map { _to_string($_) } @rtn;\n\
    \    return \\@rtn;\n}", "    return [] unless defined $arr;\n    my $result =\
    \ sort { $a <=> $b } grep { defined $_ && $_ > 0 && $_ < 10 } @$arr;\n    $result\
    \ = [ map { $numbers[$_] } @$result ];\n    $result = [ reverse @$result ];\n\
    \    return $result;\n}", "    my %n = (\n        1 => \"One\",\n        2 =>\
    \ \"Two\",\n        3 => \"Three\",\n        4 => \"Four\",\n        5 => \"Five\"\
    ,\n        6 => \"Six\",\n        7 => \"Seven\",\n        8 => \"Eight\",\n \
    \       9 => \"Nine\",\n    );\n    return unless $arr;\n    return [] unless\
    \ @$arr;\n    return [map { $n{$_} } sort { $b <=> $a } grep { /\\d/ && $_ > 0\
    \ && $_ < 10 } @$arr];\n}", "    my @sorted = sort {$a <=> $b} grep {$_ < 10}\
    \ @$arr;\n    my %h = (1 => \"One\", 2 => \"Two\", 3 => \"Three\", 4 => \"Four\"\
    , 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9 => \"Nine\");\n\
    \    my @r = map {$h{$_}} @sorted;\n    return \\@r;\n}", "    # YOUR CODE HERE\n\
    \    my @sorted_arr = sort { $a <=> $b } grep { $_ >= 1 && $_ <= 9 } @$arr;\n\
    \    my @result = ();\n    foreach my $num (@sorted_arr) {\n        push @result,\
    \ number_to_name($num);\n    }\n    return reverse @result;\n}", "    $#_ = -1;\n\
    \    foreach my $v (sort { $a <=> $b } @$arr) {\n        if($v >= 1 && $v <= 9)\
    \ {\n            my @names = qw(Zero One Two Three Four Five Six Seven Eight Nine);\n\
    \            push @_, $names[$v];\n        }\n    }\n    return [reverse @_];\n\
    }", "    my @ret = ();\n    my @map = (\n        \"One\", \"Two\", \"Three\",\
    \ \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\",\n    );\n    foreach\
    \ my $num (@$arr) {\n        push @ret, $map[$num-1] if $num >= 1 && $num <= 9;\n\
    \    }\n    return [reverse @ret];\n}", "    my @sorted = sort {$a <=> $b} grep\
    \ {$_ >= 1 && $_ <= 9} @$arr;\n    my %name = map {($_, \"One\" x $_)} (1..9);\n\
    \    return [reverse @name{@sorted}];\n}", "    my @sorted_arr = sort {length($a)\
    \ <=> length($b)} @$arr;\n    my @reversed_arr = reverse @sorted_arr;\n    my\
    \ @number_names = ('One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine');\n    my @final_arr = ();\n    foreach my $num (@reversed_arr) {\n \
    \       my $number_name = $number_names[$num - 1];\n        push @final_arr, $number_name;\n\
    \    }\n    return @final_arr;\n}", "    my @result = ();\n    foreach my $i (@$arr)\
    \ {\n        if ($i =~ /^[1-9]$/) {\n            push @result, $i;\n        }\n\
    \    }\n    @result = sort @result;\n    @result = reverse @result;\n    foreach\
    \ my $i (@result) {\n        $i = $NUMBERS{$i};\n    }\n    return \\@result;\n\
    }", "    my @sorted = sort {$a <=> $b} grep {$_ >= 1 && $_ <= 9} @$arr;\n    @sorted\
    \ = reverse @sorted;\n    return map {[qw(One Two Three Four Five Six Seven Eight\
    \ Nine)]->[$_ - 1]} @sorted;\n}", "    my @result = ();\n    my %order = (\n \
    \       1 => \"One\",\n        2 => \"Two\",\n        3 => \"Three\",\n      \
    \  4 => \"Four\",\n        5 => \"Five\",\n        6 => \"Six\",\n        7 =>\
    \ \"Seven\",\n        8 => \"Eight\",\n        9 => \"Nine\",\n    );\n    foreach\
    \ my $elem (@$arr) {\n        if($elem >= 1 && $elem <= 9) {\n            push\
    \ @result, $order{$elem};\n        }\n    }\n    return reverse @result;\n}",
  "    my %numbers = (\n        1 => \"One\",\n        2 => \"Two\",\n        3 =>\
    \ \"Three\",\n        4 => \"Four\",\n        5 => \"Five\",\n        6 => \"\
    Six\",\n        7 => \"Seven\",\n        8 => \"Eight\",\n        9 => \"Nine\"\
    ,\n    );\n    my @r;\n    for my $i (@$arr) {\n        if ($i > 0 && $i < 10)\
    \ {\n            push @r, $numbers{$i};\n        }\n    }\n    return reverse\
    \ sort @r;\n}", "    my @new_arr = ();\n    my @test_arr = @$arr;\n    if(scalar\
    \ @test_arr == 0){\n        return @new_arr;\n    }\n    my @one_to_nine = (1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9);\n    foreach(@test_arr){\n        if(defined $_ &&\
    \ exists $one_to_nine[$_ - 1]){\n            push @new_arr, $_;\n        }\n \
    \   }\n    my @sorted_arr = sort {$a <=> $b} @new_arr;\n    my @reversed_arr =\
    \ reverse @sorted_arr;\n    my @names_arr = ();\n    my %list = (\n        1 =>\
    \ \"One\",\n        2 => \"Two\",\n        3 => \"Three\",\n        4 => \"Four\"\
    ,\n        5 => \"Five\",\n        6 => \"Six\",\n        7 => \"Seven\",\n  \
    \      8 => \"Eight\",\n        9 => \"Nine\"\n    );\n    foreach(@reversed_arr){\n\
    \        push @names_arr, $list{$_};\n    }\n    return @names_arr;\n}", "   \
    \ my @sorted = sort{$a <=> $b} grep {$_ >= 1 && $_ <= 9} @$arr;\n    my @names\
    \ = map {$_ = substr $word_numbers[$_ - 1], 0, -2;} @sorted;\n    my @reverse\
    \ = reverse @names;\n    return @reverse;\n}", "    my @res;\n    my @out;\n \
    \   my @num = ('One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine');\n    foreach (@$arr) {\n        if ($_ >= 1 && $_ <= 9) {\n       \
    \     push @res, $_;\n        }\n    }\n    @res = sort {$a <=> $b} @res;\n  \
    \  foreach (@res) {\n        push @out, $num[$_-1];\n    }\n    return \\@out;\n\
    }", "    my @nums = grep {$_ > 0 && $_ < 10} @$arr;\n    my @sorted = sort {$a\
    \ <=> $b} @nums;\n    my @sorted_reversed = reverse @sorted;\n    my @digits =\
    \ map {get_digit($_)} @sorted_reversed;\n    return @digits;\n}", "    my @sort\
    \ = sort { $a <=> $b } grep(/^[1-9]$/, @$arr);\n    my %hash = (1 => \"One\",\
    \ 2 => \"Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7\
    \ => \"Seven\", 8 => \"Eight\", 9 => \"Nine\");\n    my @solve = map { $hash{$_}\
    \ } @sort;\n    return \\@solve;\n}", "    my @arr = @$arr;\n    @arr = sort(@arr);\n\
    \    @arr = grep {$_ >= 1 && $_ <= 9} @arr;\n    @arr = reverse(@arr);\n    @arr\
    \ = map {\n        if($_ == 1) {\n            $_ = \"One\";\n        }\n     \
    \   elsif($_ == 2) {\n            $_ = \"Two\";\n        }\n        elsif($_ ==\
    \ 3) {\n            $_ = \"Three\";\n        }\n        elsif($_ == 4) {\n   \
    \         $_ = \"Four\";\n        }\n        elsif($_ == 5) {\n            $_\
    \ = \"Five\";\n        }\n        elsif($_ == 6) {\n            $_ = \"Six\";\n\
    \        }\n        elsif($_ == 7) {\n            $_ = \"Seven\";\n        }\n\
    \        elsif($_ == 8) {\n            $_ = \"Eight\";\n        }\n        elsif($_\
    \ == 9) {\n            $_ = \"Nine\";\n        }\n    } @arr;\n    return @arr;\n\
    }", "    my %num = qw(\n        1 One\n        2 Two\n        3 Three\n      \
    \  4 Four\n        5 Five\n        6 Six\n        7 Seven\n        8 Eight\n \
    \       9 Nine\n    );\n    return [\n        map { $num{$_} }\n        reverse\n\
    \        sort { $a <=> $b }\n        grep { $_ < 10 }\n        @$arr\n    ];\n\
    }", "    my $dict = {\n        1 => \"One\",\n        2 => \"Two\",\n        3\
    \ => \"Three\",\n        4 => \"Four\",\n        5 => \"Five\",\n        6 =>\
    \ \"Six\",\n        7 => \"Seven\",\n        8 => \"Eight\",\n        9 => \"\
    Nine\",\n    };\n    my @arr2 = sort {$a <=> $b} grep {$_ > 0 && $_ < 10} @$arr;\n\
    \    my @arr3 = reverse @arr2;\n    my @arr4 = map {$dict->{$_}} @arr3;\n    return\
    \ \\@arr4;\n}", "    my @ans;\n    my %one_to_nine = (\n        1 => \"One\",\n\
    \        2 => \"Two\",\n        3 => \"Three\",\n        4 => \"Four\",\n    \
    \    5 => \"Five\",\n        6 => \"Six\",\n        7 => \"Seven\",\n        8\
    \ => \"Eight\",\n        9 => \"Nine\",\n    );\n    foreach my $num (@$arr) {\n\
    \        push @ans, $one_to_nine{$num} if $num > 0 && $num < 10;\n    }\n    return\
    \ scalar reverse @ans;\n}", "    return $arr;\n}", "    my @ret;\n    my %hash;\n\
    \    if (scalar @$arr) {\n        @ret = sort { $a <=> $b } grep { $_ >= 1 &&\
    \ $_ <= 9 } @$arr;\n        my @out = map { $hash{$_} = $_ } reverse @ret;\n \
    \       my @names = map { $hash{$_} = $_ } qw(One Two Three Four Five Six Seven\
    \ Eight Nine);\n        @ret = map { $hash{$_} } @out;\n    }\n    @ret;\n}",
  "    my @sorted = sort {$a <=> $b} grep {($_ >= 1 && $_ <= 9)} @$arr;\n    my @reversed\
    \ = reverse @sorted;\n    my @replacement = @reversed;\n    $replacement[$_] =~\
    \ s/1/One/  for 0..$#replacement;\n    $replacement[$_] =~ s/2/Two/  for 0..$#replacement;\n\
    \    $replacement[$_] =~ s/3/Three/  for 0..$#replacement;\n    $replacement[$_]\
    \ =~ s/4/Four/  for 0..$#replacement;\n    $replacement[$_] =~ s/5/Five/  for\
    \ 0..$#replacement;\n    $replacement[$_] =~ s/6/Six/  for 0..$#replacement;\n\
    \    $replacement[$_] =~ s/7/Seven/  for 0..$#replacement;\n    $replacement[$_]\
    \ =~ s/8/Eight/  for 0..$#replacement;\n    $replacement[$_] =~ s/9/Nine/  for\
    \ 0..$#replacement;\n    return @replacement;\n}", "    my @result = ();\n   \
    \ for my $i (@$arr) {\n        if ($i > 0 && $i < 10) {\n            push @result,\
    \ $i;\n        }\n    }\n    @result = sort {$a <=> $b} @result;\n    @result\
    \ = reverse @result;\n    @result = map { $NAMES{$_} } @result;\n    return \\\
    @result;\n}", "    my %nums;\n    for my $e (@$arr) {\n        next if $e < 1\
    \ || $e > 9;\n        $nums{$e}++;\n    }\n    my @ret = map { qw(One Two Three\
    \ Four Five Six Seven Eight Nine)[$_ - 1] } sort { $b <=> $a } keys %nums;\n \
    \   return \\@ret;\n}", "    my @new_arr = ();\n    for my $elem (@$arr) {\n \
    \       if ($elem > 0 && $elem < 10) {\n            push @new_arr, $elem;\n  \
    \      }\n    }\n    @new_arr = sort {$a <=> $b} @new_arr;\n    @new_arr = reverse\
    \ @new_arr;\n    my @ret_arr = ();\n    for my $elem (@new_arr) {\n        push\
    \ @ret_arr, $NUM_NAMES[$elem - 1];\n    }\n    return \\@ret_arr;\n}", "    my\
    \ @sorted_arr = sort { $a <=> $b } grep { $_ > 0 && $_ < 10 } @$arr;\n    my @result\
    \ = map { NAME_FOR_NUMBER->{$_} } reverse @sorted_arr;\n    return \\@result;\n\
    }", "    my @sorted = sort @$arr;\n    my @res = ();\n    foreach my $s (@sorted)\
    \ {\n        if ($s > 0 && $s < 10) {\n            push @res, $s;\n        }\n\
    \    }\n    @res = reverse @res;\n    my @res_word = ();\n    foreach my $r (@res)\
    \ {\n        if ($r == 1) {\n            push @res_word, \"One\";\n        } elsif\
    \ ($r == 2) {\n            push @res_word, \"Two\";\n        } elsif ($r == 3)\
    \ {\n            push @res_word, \"Three\";\n        } elsif ($r == 4) {\n   \
    \         push @res_word, \"Four\";\n        } elsif ($r == 5) {\n           \
    \ push @res_word, \"Five\";\n        } elsif ($r == 6) {\n            push @res_word,\
    \ \"Six\";\n        } elsif ($r == 7) {\n            push @res_word, \"Seven\"\
    ;\n        } elsif ($r == 8) {\n            push @res_word, \"Eight\";\n     \
    \   } elsif ($r == 9) {\n            push @res_word, \"Nine\";\n        }\n  \
    \  }\n    return @res_word;\n}", "    my @numbers = sort { $a <=> $b } grep {\
    \ $_ >= 1 && $_ <= 9 } @$arr;\n    my @digits = qw(One Two Three Four Five Six\
    \ Seven Eight Nine);\n    return reverse map { $digits[$_ - 1] } @numbers;\n}",
  "    my %num_hash = (1 => \"One\", 2 => \"Two\", 3 => \"Three\", 4 => \"Four\",\
    \ 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9 => \"Nine\");\n\
    \    my @new_arr = ();\n    my @sorted_arr = ();\n    foreach my $i (@$arr) {\n\
    \        if ($i < 10 && $i > 0) {\n            push @new_arr, $i;\n        }\n\
    \    }\n    @sorted_arr = sort @new_arr;\n    foreach my $i (@sorted_arr) {\n\
    \        $i = $num_hash{$i};\n    }\n    return reverse @sorted_arr;\n}", "  \
    \  my $tmp = [@$arr];\n    my $res = [];\n    my $map = {1 => \"One\", 2 => \"\
    Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\"\
    , 8 => \"Eight\", 9 => \"Nine\"};\n    my @not_in_range = ();\n    foreach my\
    \ $el (@$tmp) {\n        push @not_in_range, $el if ($el < 1 || $el > 9);\n  \
    \  }\n    my $index = 0;\n    while ($index < @$tmp) {\n        if (grep { $_\
    \ == $tmp->[$index] } @not_in_range) {\n            splice @$tmp, $index, 1;\n\
    \        } else {\n            $index++;\n        }\n    }\n    foreach my $el\
    \ (sort { $a <=> $b } @$tmp) {\n        push @$res, $map->{$el};\n    }\n    return\
    \ $res;\n}", "    my %nums = (1 => \"One\", 2 => \"Two\", 3 => \"Three\", 4 =>\
    \ \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9 =>\
    \ \"Nine\");\n    my @sorted = sort @$arr;\n    my @result;\n    foreach my $num\
    \ (@sorted) {\n      if ($num > 0 && $num < 10) {\n        push @result, $nums{$num};\n\
    \      }\n    }\n    return [reverse @result];\n}", "    return map {\n      \
    \  if($_ == 1) {\n            \"One\";\n        } elsif($_ == 2) {\n         \
    \   \"Two\";\n        } elsif($_ == 3) {\n            \"Three\";\n        } elsif($_\
    \ == 4) {\n            \"Four\";\n        } elsif($_ == 5) {\n            \"Five\"\
    ;\n        } elsif($_ == 6) {\n            \"Six\";\n        } elsif($_ == 7)\
    \ {\n            \"Seven\";\n        } elsif($_ == 8) {\n            \"Eight\"\
    ;\n        } elsif($_ == 9) {\n            \"Nine\";\n        }\n    } reverse\
    \ sort grep { $_ >= 1 && $_ <= 9 } @$arr;\n}", "    # TODO\n}", "    my @words\
    \ = ();\n    my @numbers = ();\n    my %h = (\n        1 => \"One\",\n       \
    \ 2 => \"Two\",\n        3 => \"Three\",\n        4 => \"Four\",\n        5 =>\
    \ \"Five\",\n        6 => \"Six\",\n        7 => \"Seven\",\n        8 => \"Eight\"\
    ,\n        9 => \"Nine\",\n    );\n    for my $i (@$arr) {\n        if ($i < 1\
    \ || $i > 9) {\n            next;\n        }\n        push @numbers, $i;\n   \
    \ }\n    @numbers = sort { $a <=> $b } @numbers;\n    @numbers = reverse @numbers;\n\
    \    for my $i (@numbers) {\n        my $word = $h{$i};\n        push @words,\
    \ $word;\n    }\n    return \\@words;\n}", "    my %num_map = (\n        1 =>\
    \ \"One\",\n        2 => \"Two\",\n        3 => \"Three\",\n        4 => \"Four\"\
    ,\n        5 => \"Five\",\n        6 => \"Six\",\n        7 => \"Seven\",\n  \
    \      8 => \"Eight\",\n        9 => \"Nine\",\n    );\n    my @ret;\n    foreach\
    \ my $num (@$arr) {\n        if($num <= 9 && $num >= 1) {\n            push @ret,\
    \ $num_map{$num};\n        }\n    }\n    @ret = reverse sort @ret;\n    return\
    \ \\@ret;\n}", "    # your code here\n}", "    my $out = [];\n    foreach my $num\
    \ (@$arr) {\n        if ($num >= 1 && $num <= 9) {\n            push(@$out, $num);\n\
    \        }\n    }\n    $out = [sort {$a <=> $b} @$out];\n    $out = [reverse @$out];\n\
    \    foreach my $i (0..scalar(@$out)-1) {\n        my $num = $out->[$i];\n   \
    \     if ($num == 1) {\n            $out->[$i] = \"One\";\n        } elsif ($num\
    \ == 2) {\n            $out->[$i] = \"Two\";\n        } elsif ($num == 3) {\n\
    \            $out->[$i] = \"Three\";\n        } elsif ($num == 4) {\n        \
    \    $out->[$i] = \"Four\";\n        } elsif ($num == 5) {\n            $out->[$i]\
    \ = \"Five\";\n        } elsif ($num == 6) {\n            $out->[$i] = \"Six\"\
    ;\n        } elsif ($num == 7) {\n            $out->[$i] = \"Seven\";\n      \
    \  } elsif ($num == 8) {\n            $out->[$i] = \"Eight\";\n        } elsif\
    \ ($num == 9) {\n            $out->[$i] = \"Nine\";\n        }\n    }\n    return\
    \ $out;\n}", "    return () unless defined $arr;\n    my @result = \n        sort\
    \ { $a <=> $b } \n        grep { $_ >= 1 && $_ <= 9 } \n        @$arr;\n    @result\
    \ = reverse @result;\n    return map { _number_to_name($_) } @result;\n}", " \
    \   my @result = ();\n    my %hash = qw/ 1 One 2 Two 3 Three 4 Four 5 Five 6 Six\
    \ 7 Seven 8 Eight 9 Nine /;\n    my @res = sort {$a <=> $b} grep { $_ >= 1 &&\
    \ $_ <= 9 } @$arr;\n    return [map { $hash{$_} } reverse @res];\n}", "    my\
    \ @sorted = sort { length($a) <=> length($b) } @$arr;\n    my @reversed = reverse\
    \ @sorted;\n    my @result = map { $numbers{$_} } @reversed;\n    return \\@result;\n\
    }", "    return $arr if !$arr;\n    my $dict = {\n        1 => \"One\",\n    \
    \    2 => \"Two\",\n        3 => \"Three\",\n        4 => \"Four\",\n        5\
    \ => \"Five\",\n        6 => \"Six\",\n        7 => \"Seven\",\n        8 => \"\
    Eight\",\n        9 => \"Nine\",\n    };\n    my $result = [];\n    for my $i\
    \ (sort {$a <=> $b} @$arr) {\n        if ($i >= 1 && $i <= 9) {\n            push\
    \ @$result, $dict->{$i};\n        }\n    }\n    return [reverse @$result];\n}",
  "    my @sorted = sort { length($a) <=> length($b) } grep { $_ > 0 && $_ < 10 }\
    \ @$arr;\n    my %numbers = (1 => \"One\", 2 => \"Two\", 3 => \"Three\", 4 =>\
    \ \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9 =>\
    \ \"Nine\");\n    return [ map { $numbers{$_} } reverse @sorted ];\n}", "    my\
    \ @result = sort { $a <=> $b } @$arr;\n    my @result = reverse @result;\n   \
    \ my @result = grep { $a >= 1 && $a <= 9 } @result;\n    @result = map { _number_to_name($_)\
    \ } @result;\n    return @result;\n}", "    # your code here\n}", "    my @a =\
    \ sort {$a <=> $b} grep {$_ >= 1 && $_ <= 9} @$arr;\n    my %m = (\n        1\
    \ => \"One\",\n        2 => \"Two\",\n        3 => \"Three\",\n        4 => \"\
    Four\",\n        5 => \"Five\",\n        6 => \"Six\",\n        7 => \"Seven\"\
    ,\n        8 => \"Eight\",\n        9 => \"Nine\",\n    );\n    my @b = map {$m{$_}}\
    \ reverse @a;\n    return \\@b;\n}", "    my @sorted =  sort @$arr;\n    my @rev_sorted\
    \ = reverse @sorted;\n    my @result;\n    my %num_hash = (\n\t1 => \"One\",\n\
    \t2 => \"Two\",\n\t3 => \"Three\",\n\t4 => \"Four\",\n\t5 => \"Five\",\n\t6 =>\
    \ \"Six\",\n\t7 => \"Seven\",\n\t8 => \"Eight\",\n\t9 => \"Nine\"\n    );\n  \
    \  foreach my $num (@rev_sorted) {\n\tif ($num > 0 && $num < 10) {\n\t    push\
    \ @result, $num_hash{$num};\n\t}\n    }\n    return @result;\n}", "    my @reversed\
    \ = reverse sort grep { $_ > 0 && $_ < 10 } @$arr;\n    return map { $map{$_}\
    \ } @reversed;\n}", "    my @number_names = map { $numbers{$_} } @$arr;\n    return\
    \ @number_names;\n}", "    my $digits = {\n        1 => \"One\",\n        2 =>\
    \ \"Two\",\n        3 => \"Three\",\n        4 => \"Four\",\n        5 => \"Five\"\
    ,\n        6 => \"Six\",\n        7 => \"Seven\",\n        8 => \"Eight\",\n \
    \       9 => \"Nine\",\n    };\n    my @a = grep { defined $_ && $_ >= 1 && $_\
    \ <= 9 } @$arr;\n    my @aa = map { $digits->{$_} } sort { $a <=> $b } @a;\n \
    \   return [reverse @aa];\n}", "    my @a = sort { $a <=> $b } grep { $_ > 0 &&\
    \ $_ < 10 } @$arr;\n    my %map = (1 => \"One\", 2 => \"Two\", 3 => \"Three\"\
    , 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\",\
    \ 9 => \"Nine\");\n    return [ reverse map { $map{$_} } @a ];\n}", "    my @sorted\
    \ = sort { $a <=> $b } grep { $_ <= 9 } @$arr;\n    my @names = ('One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine');\n    my @named =\
    \ map { $names[$_ - 1] } @sorted;\n    @named;\n}", "    my @sorted_arr = sort(@$arr);\n\
    \    my @reversed_arr = reverse(@sorted_arr);\n    my @digits = ();\n    foreach\
    \ my $item (@reversed_arr) {\n        if ($item == 1) {\n            push @digits,\
    \ \"One\";\n        } elsif ($item == 2) {\n            push @digits, \"Two\"\
    ;\n        } elsif ($item == 3) {\n            push @digits, \"Three\";\n    \
    \    } elsif ($item == 4) {\n            push @digits, \"Four\";\n        } elsif\
    \ ($item == 5) {\n            push @digits, \"Five\";\n        } elsif ($item\
    \ == 6) {\n            push @digits, \"Six\";\n        } elsif ($item == 7) {\n\
    \            push @digits, \"Seven\";\n        } elsif ($item == 8) {\n      \
    \      push @digits, \"Eight\";\n        } elsif ($item == 9) {\n            push\
    \ @digits, \"Nine\";\n        }\n    }\n    return @digits;\n}", "    my @words\
    \ = qw(One Two Three Four Five Six Seven Eight Nine);\n    my @valid = ();\n \
    \   for(@$arr) {\n        push @valid, $_ if $_ >= 1 && $_ <= 9;\n    }\n    map\
    \ { $words[$_-1] } reverse sort @valid;\n}", "    $arr = sort_by_len($arr);\n\
    \    my %hsh = (1 => \"One\", 2 => \"Two\", 3 => \"Three\", 4 => \"Four\", 5 =>\
    \ \"Five\",\n               6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9 =>\
    \ \"Nine\");\n    my @ret;\n    foreach my $elm (@$arr) {\n        if ($elm <=\
    \ 9 and $elm >= 1) {\n            push @ret, $hsh{$elm};\n        }\n    }\n \
    \   return reverse @ret;\n}", "    my @sorted = sort { length($a) <=> length($b)\
    \ } @$arr;\n    my @num_mapping = qw(Zero One Two Three Four Five Six Seven Eight\
    \ Nine);\n    my @reversed = reverse @sorted;\n    my @names = map { $num_mapping[$_]\
    \ } @reversed;\n    return \\@names;\n}", "    my @new_arr = grep {$_<=9 && $_>=1}\
    \ @$arr;\n    my %hash = (1=>\"One\", 2=>\"Two\", 3=>\"Three\", 4=>\"Four\", 5=>\"\
    Five\", 6=>\"Six\", 7=>\"Seven\", 8=>\"Eight\", 9=>\"Nine\");\n    my @result\
    \ = ();\n    @new_arr = sort {$a <=> $b} @new_arr;\n    for my $n (@new_arr) {\n\
    \        push @result, $hash{$n};\n    }\n    return [reverse @result];\n}", " \
    \   my $result = [];\n    foreach my $val (@$arr) {\n        if($val >= 1 && $val\
    \ <= 9) {\n            $result->[$val - 1] = $val;\n        }\n    }\n    $result\
    \ = reverse(@$result);\n    for my $i (0 .. scalar(@$result) - 1) {\n        my\
    \ $val = $result->[$i];\n        if(defined($val)) {\n            my $new_val\
    \ = lookup_name($val);\n            $result->[$i] = $new_val;\n        }\n   \
    \ }\n    return $result;\n}", "    my @sort_arr = sort @$arr;\n    my @reverse_arr\
    \ = reverse @sort_arr;\n    my @return_arr;\n    my %numbers = (\n        1 =>\
    \ \"One\",\n        2 => \"Two\",\n        3 => \"Three\",\n        4 => \"Four\"\
    ,\n        5 => \"Five\",\n        6 => \"Six\",\n        7 => \"Seven\",\n  \
    \      8 => \"Eight\",\n        9 => \"Nine\",\n    );\n    foreach my $item (@reverse_arr)\
    \ {\n        if($item > 0 && $item < 10) {\n            push @return_arr, $numbers{$item};\n\
    \        }\n    }\n    return @return_arr;\n}", "    my @sorted = sort { $a <=>\
    \ $b } grep { $_ >= 1 && $_ <= 9 } @$arr;\n    return [map { $dict{$_} } reverse\
    \ @sorted];\n}", "    my $res = [];\n    foreach my $num (@$arr) {\n        if\
    \ ($num >= 1 && $num <= 9) {\n            push(@$res, &num_to_word($num));\n \
    \       }\n    }\n    $res = reverse(sort @$res);\n    return $res;\n}", "   \
    \ my $nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    my @result = ();\n    foreach my\
    \ $val (@$arr) {\n        if (defined $val && $val =~ /^\\d+$/ && $val > 0 &&\
    \ $val < 10) {\n            push @result, $val;\n        }\n    }\n    @result\
    \ = sort {$a <=> $b} @result;\n    @result = reverse @result;\n    foreach my\
    \ $val (@result) {\n        my $key = $val - 1;\n        $val = $nums->[$key];\n\
    \    }\n    return \\@result;\n}", "    my @ints = grep { $_ >= 1 && $_ <= 9 }\
    \ @$arr;\n    my @ret;\n    for my $i (reverse @ints) {\n        push @ret, to_number($i);\n\
    \    }\n    return \\@ret;\n}", "    my @result = ();\n    my @sorted_arr = sort\
    \ { $a <=> $b } grep { $_ >= 1 && $_ <= 9 } @$arr;\n    my %name_map = (\n   \
    \     1 => \"One\",\n        2 => \"Two\",\n        3 => \"Three\",\n        4\
    \ => \"Four\",\n        5 => \"Five\",\n        6 => \"Six\",\n        7 => \"\
    Seven\",\n        8 => \"Eight\",\n        9 => \"Nine\",\n    );\n    for my\
    \ $num (reverse @sorted_arr) {\n        push @result, $name_map{$num};\n    }\n\
    \    return \\@result;\n}", "    my $result = [];\n    return $result unless scalar\
    \ @$arr;\n    my $tmp = [sort @$arr];\n    $tmp = [reverse @$tmp];\n    foreach\
    \ my $i (@$tmp) {\n        if ($i >= 1 && $i <= 9) {\n            push @$result,\
    \ to_number($i);\n        }\n    }\n    return $result;\n}", "    return [] unless\
    \ $arr && scalar @$arr;\n    my @a = sort { $a <=> $b } grep {$_ >= 1 && $_ <=\
    \ 9} @$arr;\n    my @b = ();\n    while (my $v = pop @a) {\n        push @b, $digit_name{$v};\n\
    \    }\n    return \\@b;\n}", "    my @nums = grep {$_ > 0 && $_ < 10} @$arr;\n\
    \    my @result = sort {$a <=> $b} @nums;\n    @result = reverse @result;\n  \
    \  @result = map {$_ == 1 ? \"One\" : $_ == 2 ? \"Two\" : $_ == 3 ? \"Three\"\
    \ : $_ == 4 ? \"Four\" : $_ == 5 ? \"Five\" : $_ == 6 ? \"Six\" : $_ == 7 ? \"\
    Seven\" : $_ == 8 ? \"Eight\" : $_ == 9 ? \"Nine\" : $_} @result;\n    return\
    \ \\@result;\n}", "    my %name_of = (\n        1 => \"One\",\n        2 => \"\
    Two\",\n        3 => \"Three\",\n        4 => \"Four\",\n        5 => \"Five\"\
    ,\n        6 => \"Six\",\n        7 => \"Seven\",\n        8 => \"Eight\",\n \
    \       9 => \"Nine\",\n    );\n    my $digits = [ grep { $_ >= 1 && $_ <= 9 }\
    \ @$arr ];\n    $digits = [ sort { $a <=> $b } @$digits ];\n    $digits = [ reverse\
    \ @$digits ];\n    [ map { $name_of{$_} } @$digits ];\n}", "    my $sorted_arr\
    \ = [sort {$a <=> $b} (grep {$_ > 0 && $_ < 10} @$arr)];\n    my $reversed_arr\
    \ = [reverse @$sorted_arr];\n    my @words = qw(One Two Three Four Five Six Seven\
    \ Eight Nine);\n    my $res = [];\n    foreach my $elem (@$reversed_arr) {\n \
    \       push @$res, $words[$elem - 1];\n    }\n    return $res;\n}", "    my @result\
    \ = map {digits_to_text($_)} reverse(sort grep {$_ <= 9 && $_ >= 1} @$arr);\n\
    \    return \\@result;\n}", "    # your code here\n    my @sorted = sort { $a\
    \ <=> $b } grep { $_ >= 1 && $_ <= 9 } @$arr;\n    my @reversed = reverse @sorted;\n\
    \    my @result = map { convert_to_string($_) } @reversed;\n    return \\@result;\n\
    }", "    my @sorted =\n        sort { length($a) <=> length($b) }\n        grep\
    \ { $_ >= 1 && $_ <= 9 }\n        @$arr;\n    my @letters = qw(One Two Three Four\
    \ Five Six Seven Eight Nine);\n    return [\n        map { $letters[$_ - 1] }\n\
    \        reverse @sorted\n    ];\n}", "    my %num = (\n        1 => \"One\",\n\
    \        2 => \"Two\",\n        3 => \"Three\",\n        4 => \"Four\",\n    \
    \    5 => \"Five\",\n        6 => \"Six\",\n        7 => \"Seven\",\n        8\
    \ => \"Eight\",\n        9 => \"Nine\",\n    );\n    return [] unless scalar @$arr;\n\
    \    my @sorted = sort {$a <=> $b} grep {$_ > 0 && $_ < 10} @$arr;\n    @sorted\
    \ = reverse @sorted;\n    return [ map {$num{$_}} @sorted ];\n}", "    my @nums\
    \ = (1..9);\n    my @nums_str = (\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\");\n    my %nums_to_str;\n    @nums_to_str{@nums}\
    \ = @nums_str;\n    my @sorted_nums = sort grep { grep $_ ~~ @nums, $_ } @$arr;\n\
    \    my @sorted_nums_str = @nums_to_str{@sorted_nums};\n    my @reversed_nums_str\
    \ = reverse @sorted_nums_str;\n    return \\@reversed_nums_str;\n}", "    my @result\
    \ = ();\n    my @sorted = sort {$a <=> $b} grep(/^\\d$/, @$arr);\n    for my $num\
    \ (@sorted) {\n        push @result, $numbers[$num - 1];\n    }\n    return \\\
    @result;\n}", "    my @arr = @$arr;\n    my @results;\n    my %strange = (\n \
    \       1 => \"One\",\n        2 => \"Two\",\n        3 => \"Three\",\n      \
    \  4 => \"Four\",\n        5 => \"Five\",\n        6 => \"Six\",\n        7 =>\
    \ \"Seven\",\n        8 => \"Eight\",\n        9 => \"Nine\",\n    );\n    for\
    \ my $num (@arr) {\n        if(exists $strange{$num}) {\n            push @results,\
    \ $strange{$num};\n        }\n    }\n    return reverse sort @results;\n}", " \
    \   my @result = ();\n    my %nums = (\n        1 => \"One\",\n        2 => \"\
    Two\",\n        3 => \"Three\",\n        4 => \"Four\",\n        5 => \"Five\"\
    ,\n        6 => \"Six\",\n        7 => \"Seven\",\n        8 => \"Eight\",\n \
    \       9 => \"Nine\",\n    );\n    my @res = ();\n    foreach my $item (@$arr)\
    \ {\n        push @res, $item if exists $nums{$item};\n    }\n    @res = sort\
    \ {$a <=> $b} @res;\n    @res = reverse @res;\n    foreach my $item (@res) {\n\
    \        push @result, $nums{$item};\n    }\n    return \\@result;\n}", "    my\
    \ @filtered_arr = grep { $_ >= 1 && $_ <= 9 } @$arr;\n    my @result = map { num_to_name($_)\
    \ } sort { $b <=> $a } @filtered_arr;\n    return \\@result;\n}", "    my @sorted_arr\
    \ = sort @$arr;\n    my @result = ();\n    foreach my $item (@sorted_arr) {\n\
    \        if ($item == 1) {\n            push @result, \"One\";\n        } elsif\
    \ ($item == 2) {\n            push @result, \"Two\";\n        } elsif ($item ==\
    \ 3) {\n            push @result, \"Three\";\n        } elsif ($item == 4) {\n\
    \            push @result, \"Four\";\n        } elsif ($item == 5) {\n       \
    \     push @result, \"Five\";\n        } elsif ($item == 6) {\n            push\
    \ @result, \"Six\";\n        } elsif ($item == 7) {\n            push @result,\
    \ \"Seven\";\n        } elsif ($item == 8) {\n            push @result, \"Eight\"\
    ;\n        } elsif ($item == 9) {\n            push @result, \"Nine\";\n     \
    \   }\n    }\n    return reverse @result;\n}", "    my %names = (\n        1 =>\
    \ \"One\",\n        2 => \"Two\",\n        3 => \"Three\",\n        4 => \"Four\"\
    ,\n        5 => \"Five\",\n        6 => \"Six\",\n        7 => \"Seven\",\n  \
    \      8 => \"Eight\",\n        9 => \"Nine\",\n    );\n    my @names;\n    for\
    \ (@$arr) {\n        if ($_ >= 1 && $_ <= 9) {\n            push @names, $names{$_};\n\
    \        }\n    }\n    @names = reverse sort @names;\n    return \\@names;\n}",
  "    # TODO - write by_length\n    my @digits = grep { $_ < 10 } @$arr;\n    my\
    \ @sorted = sort { $a <=> $b } @digits;\n    my @result = reverse @sorted;\n \
    \   my @names = qw(One Two Three Four Five Six Seven Eight Nine);\n    my @mapped\
    \ = map { $names[$_ - 1] } @result;\n    return \\@mapped;\n}", "    my @result\
    \ = ();\n    my @sorted = ();\n    my @nums = ();\n    for my $num (@$arr) {\n\
    \        if ($num > 0 && $num < 10) {\n            push @nums, $num;\n       \
    \ }\n    }\n    @sorted = sort {$a <=> $b} @nums;\n    for my $num (@sorted) {\n\
    \        push @result, num_to_word($num);\n    }\n    return reverse @result;\n\
    }", "    my @result = ();\n    for my $n (@$arr) {\n        push @result, $n if\
    \ $n >= 1 && $n <= 9;\n    }\n    @result = sort { $a <=> $b } @result;\n    @result\
    \ = reverse @result;\n    for my $i (0 .. $#result) {\n        if ($result[$i]\
    \ == 1) {\n            $result[$i] = \"One\";\n        } elsif ($result[$i] ==\
    \ 2) {\n            $result[$i] = \"Two\";\n        } elsif ($result[$i] == 3)\
    \ {\n            $result[$i] = \"Three\";\n        } elsif ($result[$i] == 4)\
    \ {\n            $result[$i] = \"Four\";\n        } elsif ($result[$i] == 5) {\n\
    \            $result[$i] = \"Five\";\n        } elsif ($result[$i] == 6) {\n \
    \           $result[$i] = \"Six\";\n        } elsif ($result[$i] == 7) {\n   \
    \         $result[$i] = \"Seven\";\n        } elsif ($result[$i] == 8) {\n   \
    \         $result[$i] = \"Eight\";\n        } elsif ($result[$i] == 9) {\n   \
    \         $result[$i] = \"Nine\";\n        }\n    }\n    return \\@result;\n}",
  "    my @res;\n    my %mapping = (\n        1 => \"One\",\n        2 => \"Two\"\
    ,\n        3 => \"Three\",\n        4 => \"Four\",\n        5 => \"Five\",\n \
    \       6 => \"Six\",\n        7 => \"Seven\",\n        8 => \"Eight\",\n    \
    \    9 => \"Nine\",\n    );\n    return $arr if !@$arr;\n    for my $item (@$arr)\
    \ {\n        push @res, $mapping{$item} if $item >= 1 && $item <= 9;\n    }\n\
    \    return [ reverse @res ];\n}", "    my %one_to_nine = (1 => \"One\", 2 =>\
    \ \"Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"\
    Seven\", 8 => \"Eight\", 9 => \"Nine\");\n    my @result;\n    my @sorted_result;\n\
    \    my @sorted_result_reverse;\n    foreach(@$arr){\n        if($_ >= 1 && $_\
    \ <= 9){\n            push @result, $one_to_nine{$_};\n        }\n    }\n    @sorted_result\
    \ = sort {$a <=> $b} @result;\n    @sorted_result_reverse = reverse @sorted_result;\n\
    \    return @sorted_result_reverse;\n}", "    my @sorted = sort {length($a) <=>\
    \ length($b)} @$arr;\n    my @lengths = reverse @sorted;\n    my @output;\n  \
    \  my %num2name = (\n        1 => \"One\",\n        2 => \"Two\",\n        3 =>\
    \ \"Three\",\n        4 => \"Four\",\n        5 => \"Five\",\n        6 => \"\
    Six\",\n        7 => \"Seven\",\n        8 => \"Eight\",\n        9 => \"Nine\"\
    ,\n    );\n    foreach my $num (@lengths) {\n        if ($num < 1 or $num > 9)\
    \ {\n            next;\n        }\n        push @output, $num2name{$num};\n  \
    \  }\n    return \\@output;\n}", "    return sort { scalar($a) <=> scalar($b)\
    \ } grep { $_ == 1 or $_ == 2 or $_ == 3 or $_ == 4 or $_ == 5 or $_ == 6 or $_\
    \ == 7 or $_ == 8 or $_ == 9 } @$arr;\n}", "    my @res;\n    my %corresp = (\n\
    \        1 => \"One\",\n        2 => \"Two\",\n        3 => \"Three\",\n     \
    \   4 => \"Four\",\n        5 => \"Five\",\n        6 => \"Six\",\n        7 =>\
    \ \"Seven\",\n        8 => \"Eight\",\n        9 => \"Nine\"\n    );\n    foreach\
    \ (@$arr) {\n        if ($_ >= 1 && $_ <= 9) {\n            push @res, $_;\n \
    \       }\n    }\n    @res = reverse sort {$a <=> $b} @res;\n    foreach (@res)\
    \ {\n        $_ = $corresp{$_};\n    }\n    return \\@res;\n}", "    #TODO\n}",
  "    return $arr;\n}", "    $arr = [sort { length($a) <=> length($b) } grep { /^[1-9]$/\
    \ } @$arr];\n    my %numbers = (\n        1 => \"One\",\n        2 => \"Two\"\
    ,\n        3 => \"Three\",\n        4 => \"Four\",\n        5 => \"Five\",\n \
    \       6 => \"Six\",\n        7 => \"Seven\",\n        8 => \"Eight\",\n    \
    \    9 => \"Nine\",\n    );\n    return [map { $numbers{$_} } reverse @$arr];\n\
    }", "    return [] unless scalar @$arr;\n    my $hash = {\n        1 => \"One\"\
    ,\n        2 => \"Two\",\n        3 => \"Three\",\n        4 => \"Four\",\n  \
    \      5 => \"Five\",\n        6 => \"Six\",\n        7 => \"Seven\",\n      \
    \  8 => \"Eight\",\n        9 => \"Nine\",\n    };\n    my @out;\n    foreach\
    \ my $i (sort {$a <=> $b} @$arr) {\n        if ($i >= 1 && $i <= 9) {\n      \
    \      push @out, $hash->{$i};\n        }\n    }\n    return [ reverse @out ];\n\
    }", "    return [] unless $arr;\n    $arr = [grep {$_ > 0 && $_ < 10} @$arr];\n\
    \    @$arr = reverse sort @$arr;\n    $arr = [map {({1 => \"One\", 2 => \"Two\"\
    , 3 => \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\",\
    \ 8 => \"Eight\", 9 => \"Nine\"}->{$_})} @$arr];\n    return $arr;\n}", "    my\
    \ @sorted = ();\n    if (@$arr < 1) {\n        return $arr;\n    } else {\n  \
    \      @sorted = sort { $a <=> $b } @$arr;\n        my $i = 0;\n        while\
    \ ($i < @sorted) {\n            if (($sorted[$i] > 9) || ($sorted[$i] < 1)) {\n\
    \                splice(@sorted, $i, 1);\n            } else {\n             \
    \   $i++;\n            }\n        }\n        my $temp;\n        for ($i = 0; $i\
    \ < @sorted/2; $i++) {\n            $temp = $sorted[$i];\n            $sorted[$i]\
    \ = $sorted[@sorted - 1 - $i];\n            $sorted[@sorted - 1 - $i] = $temp;\n\
    \        }\n        for ($i = 0; $i < @sorted; $i++) {\n            $sorted[$i]\
    \ = number_to_name($sorted[$i]);\n        }\n        return \\@sorted;\n    }\n\
    }", "    my $str = join(' ', @$arr);\n    my $out = '';\n    my $pat = qr/[1-9]+/;\n\
    \    while ($str =~ /($pat)/g) {\n        my $len = length($1);\n        $out\
    \ .= \" \".join(' ',('One')x$len) if $len == 1;\n        $out .= \" \".join('\
    \ ',('Two')x$len) if $len == 2;\n        $out .= \" \".join(' ',('Three')x$len)\
    \ if $len == 3;\n        $out .= \" \".join(' ',('Four')x$len) if $len == 4;\n\
    \        $out .= \" \".join(' ',('Five')x$len) if $len == 5;\n        $out .=\
    \ \" \".join(' ',('Six')x$len) if $len == 6;\n        $out .= \" \".join(' ',('Seven')x$len)\
    \ if $len == 7;\n        $out .= \" \".join(' ',('Eight')x$len) if $len == 8;\n\
    \        $out .= \" \".join(' ',('Nine')x$len) if $len == 9;\n    }\n    return\
    \ join(' ', reverse(split(' ', $out)));\n}", "    return [] unless @$arr;\n  \
    \  my @sorted = sort {$a <=> $b} grep {$_ >= 1 && $_ <= 9} @$arr;\n    my @word\
    \ = qw(One Two Three Four Five Six Seven Eight Nine);\n    return [map {$word[$_\
    \ - 1]} reverse @sorted];\n}", "    if (scalar(@$arr) > 0) {\n        my @mapped\
    \ = map { $_ =~ /^[1-9]$/ ? $_ : () } @$arr;\n        my @sorted = sort { $a <=>\
    \ $b } @mapped;\n        my @reversed = reverse @sorted;\n        my @result =\
    \ map { (\"One\"..\"Nine\")[$_ - 1] } @reversed;\n        return \\@result;\n\
    \    } else {\n        return [];\n    }\n}", "    my $out = [];\n    for my $i\
    \ (@$arr) {\n        next if $i !~ /^[1-9]$/;\n        push @$out, $i;\n    }\n\
    \    return [] if @$out == 0;\n    @$out = sort { $a <=> $b } @$out;\n    @$out\
    \ = reverse @$out;\n    for my $i (@$out) {\n        my $num = $i % 10;\n    \
    \    $i = $num_map[$num];\n    }\n    return $out;\n}", "    my $res = [];\n \
    \   my $str = {\n        1 => \"One\",\n        2 => \"Two\",\n        3 => \"\
    Three\",\n        4 => \"Four\",\n        5 => \"Five\",\n        6 => \"Six\"\
    ,\n        7 => \"Seven\",\n        8 => \"Eight\",\n        9 => \"Nine\",\n\
    \    };\n    foreach my $i (reverse sort @$arr) {\n        next if $i < 1 || $i\
    \ > 9;\n        push @$res, $str->{$i};\n    }\n    return $res;\n}", "    my\
    \ @sorted_numbers = sort(grep {$_ >= 1 && $_ <= 9} @$arr);\n    my @reversed_numbers\
    \ = reverse(@sorted_numbers);\n    my @result = map {\n        if($_ == 1) {\n\
    \            return \"One\";\n        } elsif($_ == 2) {\n            return \"\
    Two\";\n        } elsif($_ == 3) {\n            return \"Three\";\n        } elsif($_\
    \ == 4) {\n            return \"Four\";\n        } elsif($_ == 5) {\n        \
    \    return \"Five\";\n        } elsif($_ == 6) {\n            return \"Six\"\
    ;\n        } elsif($_ == 7) {\n            return \"Seven\";\n        } elsif($_\
    \ == 8) {\n            return \"Eight\";\n        } elsif($_ == 9) {\n       \
    \     return \"Nine\";\n        }\n    } @reversed_numbers;\n    return @result;\n\
    }", "    my @result = ();\n    my @keys = (1, 2, 3, 4, 5, 6, 7, 8, 9);\n    my\
    \ %hash = (1 => \"One\", 2 => \"Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"\
    Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9 => \"Nine\");\n    my\
    \ %filterHash = map { $_ => 1 } @$arr;\n    my @filteredKeys = grep { exists $filterHash{$_}\
    \ } @keys;\n    my @sortedArray = sort { $a <=> $b } @filteredKeys;\n    my @reversedArray\
    \ = reverse @sortedArray;\n    foreach my $key (@reversedArray) {\n      push(@result,\
    \ $hash{$key});\n    }\n    return @result;\n}", "    my $output = [];\n    foreach\
    \ my $num (@$arr) {\n        if ($num >= 1 && $num <= 9) {\n            push @$output,\
    \ $num;\n        }\n    }\n    @$output = sort { $a <=> $b } @$output;\n    my\
    \ @reversed = reverse @$output;\n    @$output = ();\n    foreach my $num (@reversed)\
    \ {\n        push @$output, $dictionary{$num};\n    }\n    return $output;\n}",
  "    my $hash = {\n        1 => \"One\",\n        2 => \"Two\",\n        3 => \"\
    Three\",\n        4 => \"Four\",\n        5 => \"Five\",\n        6 => \"Six\"\
    ,\n        7 => \"Seven\",\n        8 => \"Eight\",\n        9 => \"Nine\",\n\
    \    };\n    my @array;\n    for my $n (@$arr) {\n        if (exists $hash->{$n})\
    \ {\n            push @array, $hash->{$n};\n        }\n    }\n    return [reverse\
    \ sort @array];\n}", "    my $result = [];\n    my $digit_name = {\n        1\
    \ => \"One\",\n        2 => \"Two\",\n        3 => \"Three\",\n        4 => \"\
    Four\",\n        5 => \"Five\",\n        6 => \"Six\",\n        7 => \"Seven\"\
    ,\n        8 => \"Eight\",\n        9 => \"Nine\",\n    };\n    my @sorted = sort\
    \ { $a <=> $b } grep { $_ > 0 && $_ < 10 } @$arr;\n    for my $i (reverse @sorted)\
    \ {\n        push @$result, $digit_name->{$i};\n    }\n    return $result;\n}",
  "    my @result = ();\n    my %reverse = reverse %{$lookup};\n    my @real_numbers\
    \ = grep { $_ >= 1 && $_ <= 9 } @{$arr};\n    my @sorted = sort { $a <=> $b }\
    \ @real_numbers;\n    my @reversed = reverse @sorted;\n    foreach (@reversed)\
    \ {\n        push @result, $reverse{$_};\n    }\n    return \\@result;\n}", " \
    \   my @result = ();\n    # return @result;\n}", "    return if !$arr;\n    #\
    \ if not array\n    return if ref $arr ne 'ARRAY';\n    # if empty array\n   \
    \ return if scalar @$arr == 0;\n    my @filtered_array = ();\n    my @sorted_array\
    \ = ();\n    my @hash;\n    my @reverse_array = ();\n    my $index = 0;\n    #\
    \ create hash\n    foreach my $number(1..9) {\n        $hash[$number] = $num_to_word{$number};\n\
    \    }\n    # loop through array and get numbers only, if number is not in between\
    \ 1-9 then ignore\n    foreach my $value(@$arr) {\n        if ($value >= 1 &&\
    \ $value <= 9) {\n            $filtered_array[$index] = $value;\n            $index++;\n\
    \        }\n    }\n    # sort the array\n    @sorted_array = sort {$a <=> $b}\
    \ @filtered_array;\n    # reverse the array\n    @reverse_array = reverse @sorted_array;\n\
    \    # loop through array, and return words from hash\n    foreach my $number(@reverse_array)\
    \ {\n        $number = $hash[$number];\n    }\n    return @reverse_array;\n}",
  "    my @numbers = @$arr;\n    my @special = qw(Eight Five Four Nine One Seven Six\
    \ Three Two);\n    my %names = ();\n    my $i = 0;\n    while ($i < @special)\
    \ {\n        $names{$i + 1} = $special[$i];\n        $i++;\n    }\n    my @res\
    \ = ();\n    for (@numbers) {\n        next if ($_ > 9 || $_ < 1);\n        push\
    \ @res, $_;\n    }\n    @res = sort {$a <=> $b} @res;\n    @res = reverse @res;\n\
    \    for (@res) {\n        $_ = $names{$_};\n    }\n    return \\@res;\n}", " \
    \   return [] unless @$arr;\n    my @result = map {substr('OneTwoThreeFourFiveSixSevenEightNine',\
    \ $_ * 4, 4)}\n        sort {$a <=> $b} grep {$_ > 0 && $_ < 10} @$arr;\n    return\
    \ [@result];\n}", "    my @result = ();\n    if(scalar(@$arr) > 0) {\n       \
    \ my @sorted = sort { $a <=> $b } @$arr;\n        foreach my $el (@sorted) {\n\
    \            if ($el >= 1 && $el <= 9) {\n                unshift(@result, $digits[$el\
    \ - 1]);\n            }\n        }\n    }\n    return @result;\n}", "    $arr\
    \ = [grep {$_ >= 1 && $_ <= 9} @$arr];\n    @$arr = sort {$a <=> $b} @$arr;\n\
    \    @$arr = reverse @$arr;\n    my %nums = (1 => \"One\", 2 => \"Two\", 3 =>\
    \ \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 =>\
    \ \"Eight\", 9 => \"Nine\");\n    for my $i (0..scalar(@$arr) - 1) {\n       \
    \ $arr->[$i] = $nums{$arr->[$i]};\n    }\n    return $arr;\n}", "    my @invalid_array\
    \ = grep { $_ > 9 or $_ < 1 } @$arr;\n    my @valid_array = grep { $_ <= 9 and\
    \ $_ >= 1 } @$arr;\n    my @result_array = ();\n    foreach my $num (@valid_array)\
    \ {\n        push @result_array, $num;\n    }\n    @result_array = sort { $a <=>\
    \ $b } @result_array;\n    @result_array = reverse @result_array;\n    my %num_mapping\
    \ = (\n        1 => \"One\",\n        2 => \"Two\",\n        3 => \"Three\",\n\
    \        4 => \"Four\",\n        5 => \"Five\",\n        6 => \"Six\",\n     \
    \   7 => \"Seven\",\n        8 => \"Eight\",\n        9 => \"Nine\",\n    );\n\
    \    @result_array = map { $num_mapping{$_} } @result_array;\n    return @result_array;\n\
    }", "    # your code here\n}", "    return [] unless @$arr;\n    my %num_to_word\
    \ = (\n        1 => \"One\",\n        2 => \"Two\",\n        3 => \"Three\",\n\
    \        4 => \"Four\",\n        5 => \"Five\",\n        6 => \"Six\",\n     \
    \   7 => \"Seven\",\n        8 => \"Eight\",\n        9 => \"Nine\",\n    );\n\
    \    my @sorted = sort grep { $_ >= 1 && $_ <= 9 } @$arr;\n    return [ map {\
    \ $num_to_word{$_} } reverse @sorted ];\n}", "    my @arr = sort {length($a) <=>\
    \ length($b)} grep {$_ <= 9 && $_ >= 1} @$arr;\n    my @arr = reverse @arr;\n\
    \    my @arr = map { $English[$_] } @arr;\n    return \\@arr;\n}", "    my @new_arr\
    \ = ();\n    my @nums_arr = @$arr;\n    foreach my $n (@nums_arr) {\n        if\
    \ ($n <= 9 && $n >= 1) {\n            my $x = \"\";\n            switch ($n) {\n\
    \                case 1 { $x = \"One\" }\n                case 2 { $x = \"Two\"\
    \ }\n                case 3 { $x = \"Three\" }\n                case 4 { $x =\
    \ \"Four\" }\n                case 5 { $x = \"Five\" }\n                case 6\
    \ { $x = \"Six\" }\n                case 7 { $x = \"Seven\" }\n              \
    \  case 8 { $x = \"Eight\" }\n                case 9 { $x = \"Nine\" }\n     \
    \       }\n            push(@new_arr, $x);\n        }\n    }\n    return \\@new_arr;\n\
    }", "    my @r = ();\n    my %numbers = (1=>\"One\", 2=>\"Two\", 3=>\"Three\"\
    , 4=>\"Four\", 5=>\"Five\", 6=>\"Six\", 7=>\"Seven\", 8=>\"Eight\", 9=>\"Nine\"\
    );\n    foreach my $e (@$arr) {\n        if (exists $numbers{$e}) {\n        \
    \    push @r, $numbers{$e};\n        }\n    }\n    return scalar(@r) > 0 ? [reverse(sort(@r))]\
    \ : [];\n}", "    my @by_length;\n    my @sorted_arr = sort {$a <=> $b} @$arr;\n\
    \    @sorted_arr = reverse @sorted_arr;\n    for (my $i = 0; $i < scalar @sorted_arr;\
    \ $i++) {\n        push(@by_length, $numbers[$sorted_arr[$i] - 1]) if ($sorted_arr[$i]\
    \ >= 1 && $sorted_arr[$i] <= 9);\n    }\n    return @by_length;\n}", "    my $names\
    \ = {\n        1 => \"One\",\n        2 => \"Two\",\n        3 => \"Three\",\n\
    \        4 => \"Four\",\n        5 => \"Five\",\n        6 => \"Six\",\n     \
    \   7 => \"Seven\",\n        8 => \"Eight\",\n        9 => \"Nine\",\n    };\n\
    \    return [] unless(@$arr);\n    my @ret;\n    foreach my $number (@$arr) {\n\
    \        if(defined($names->{$number})) {\n            push(@ret, $names->{$number});\n\
    \        }\n    }\n    return [reverse sort @ret];\n}", "    my @words = (\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    );\n    my $i = 0;\n    my @new = ();\n    foreach my $item (@$arr) {\n      \
    \  if (($item >= 1) && ($item <= 9)) {\n            $new[$i] = $item;\n      \
    \      $i++;\n        }\n    }\n    @new = sort {$a <=> $b} @new;\n    my @new1\
    \ = reverse @new;\n    for (my $j = 0; $j < scalar @new1; $j++) {\n        @new1[$j]\
    \ = $words[@new1[$j] - 1];\n    }\n    return @new1;\n}", "    my $result = [];\n\
    \    my $numbers = [\n        {'number' => 1, 'name' => 'One'},\n        {'number'\
    \ => 2, 'name' => 'Two'},\n        {'number' => 3, 'name' => 'Three'},\n     \
    \   {'number' => 4, 'name' => 'Four'},\n        {'number' => 5, 'name' => 'Five'},\n\
    \        {'number' => 6, 'name' => 'Six'},\n        {'number' => 7, 'name' =>\
    \ 'Seven'},\n        {'number' => 8, 'name' => 'Eight'},\n        {'number' =>\
    \ 9, 'name' => 'Nine'},\n    ];\n    my $lengths = {};\n    for my $n (@$numbers)\
    \ {\n        push @{$lengths->{$n->{'number'}}}, $n->{'name'};\n    }\n    for\
    \ my $len (sort keys %$lengths) {\n        for my $n (@$arr) {\n            if\
    \ ($n == $len) {\n                push @$result, @{$lengths->{$len}};\n      \
    \      }\n        }\n    }\n    return $result;\n}", "    my @result = ();\n \
    \   # your code goes here\n    return @result;\n}", "    my @result = ();\n  \
    \  my @names = qw/One Two Three Four Five Six Seven Eight Nine/;\n    foreach\
    \ my $item (@$arr) {\n        if($item >= 1 && $item <= 9) {\n            push\
    \ @result, $item;\n        }\n    }\n    @result = sort {$a <=> $b} @result;\n\
    \    @result = reverse @result;\n    @result = map {$names[$_ - 1]} @result;\n\
    \    return \\@result;\n}", "    my @nums = grep { $_ >= 1 && $_ <= 9 } @$arr;\n\
    \    @nums = reverse sort @nums;\n    return [] unless @nums;\n    return [map\
    \ { $num_to_word{$_} } @nums];\n}", "    my @new_arr = ();\n    my %dict = (\n\
    \        1 => \"One\",\n        2 => \"Two\",\n        3 => \"Three\",\n     \
    \   4 => \"Four\",\n        5 => \"Five\",\n        6 => \"Six\",\n        7 =>\
    \ \"Seven\",\n        8 => \"Eight\",\n        9 => \"Nine\",\n    );\n    for\
    \ my $item (@$arr) {\n        if($item > 0 && $item < 10) {\n            push\
    \ @new_arr, $item;\n        }\n    }\n    @new_arr = reverse sort {$a <=> $b}\
    \ @new_arr;\n    for my $item (@new_arr) {\n        $item = $dict{$item};\n  \
    \  }\n    return \\@new_arr;\n}", "    my @ret;\n    for my $num (@$arr) {\n \
    \       my $name = name_for($num);\n        if (defined $name) {\n           \
    \ push @ret, $name;\n        }\n    }\n    return [reverse sort @ret];\n}", " \
    \   if (!@$arr) {\n        return [];\n    }\n    my @words = qw(One Two Three\
    \ Four Five Six Seven Eight Nine);\n    my @sorted = sort {$a <=> $b} grep {$_\
    \ >= 1 && $_ <= 9} @$arr;\n    my @result = reverse @words[@sorted];\n    return\
    \ \\@result;\n}", "    my @res;\n    foreach my $d (1..9) {\n        push @res,\
    \ $d if grep $_ == $d, @$arr;\n    }\n    @res = reverse map { $str[$_] } @res;\n\
    \    return \\@res;\n}", "    my @strs = map {\n        my $n = $_;\n        my\
    \ $str = '';\n        while ($n) {\n            $str = $length_map{$n % 10} .\
    \ $str;\n            $n /= 10;\n        }\n        $str;\n    } sort grep { $_\
    \ > 0 && $_ < 10 } @$arr;\n    my @chars = map { [ split(//, $_) ] } @strs;\n\
    \    my @sorted = sort {\n        my $a_len = scalar @$a;\n        my $b_len =\
    \ scalar @$b;\n        for (my $i = 0; $i < $a_len && $i < $b_len; $i++) {\n \
    \           return $a->[$i] cmp $b->[$i] if $a->[$i] ne $b->[$i];\n        }\n\
    \        return $a_len <=> $b_len;\n    } @chars;\n    my @ret = map { join('',\
    \ @$_) } reverse @sorted;\n    return \\@ret;\n}", "    my $f = [qw(One Two Three\
    \ Four Five Six Seven Eight Nine)];\n    return [sort {length($a) <=> length($b)}\
    \ grep {$_ > 0 && $_ < 10} @$arr];\n}", "    my %h = qw( 1 One 2 Two 3 Three 4\
    \ Four 5 Five 6 Six 7 Seven 8 Eight 9 Nine );\n    return map { $h{$_} } @$arr\
    \ = sort @$arr = grep $_ < 10, @$arr;\n}", "    my @result = ();\n    for my $e\
    \ (@$arr) {\n        if ($e >= 1 && $e <= 9) {\n            push @result, $e;\n\
    \        }\n    }\n    @result = sort {$a <=> $b} @result;\n    @result = reverse\
    \ @result;\n    @result = map {$digit2word{$_}} @result;\n    return \\@result;\n\
    }", "    my @list = sort {$a <=> $b} grep {$_ < 10 && $_ > 0} @$arr;\n    for\
    \ my $i (0..$#list) {\n        $list[$i] = { 1 => \"One\", 2 => \"Two\", 3 =>\
    \ \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 =>\
    \ \"Eight\", 9 => \"Nine\" }->{$list[$i]};\n    }\n    return scalar reverse @list;\n\
    }", "    my %name = (\n        1 => \"One\",\n        2 => \"Two\",\n        3\
    \ => \"Three\",\n        4 => \"Four\",\n        5 => \"Five\",\n        6 =>\
    \ \"Six\",\n        7 => \"Seven\",\n        8 => \"Eight\",\n        9 => \"\
    Nine\",\n    );\n    return [] unless scalar @$arr;\n    my @sorted = sort @$arr;\n\
    \    my @filtered = grep { $_ >= 1 && $_ <= 9 } @sorted;\n    my @reversed = reverse\
    \ @filtered;\n    my @mapped = map { $name{$_} } @reversed;\n    return \\@mapped;\n\
    }", "    return [] unless @$arr;\n    my @ret = map { $NUM_TO_NAME[$_] } \n  \
    \      reverse \n        sort { $a <=> $b } \n        grep { $NUM_TO_NAME[$_]\
    \ } \n        @$arr;\n    return \\@ret;\n}", "    my @sorted_arr = sort { $a\
    \ <=> $b } grep { $_ > 0 && $_ < 10 } @$arr;\n    return [] if scalar @sorted_arr\
    \ == 0;\n    my @num_to_word = qw(One Two Three Four Five Six Seven Eight Nine);\n\
    \    return map { $num_to_word[$_ - 1] } reverse @sorted_arr;\n}", "    my @sorted\
    \ = sort {$a <=> $b}\n                 grep {$_ >= 1 && $_ <= 9}\n           \
    \      @$arr;\n    my @result = reverse map {\n        qw(One Two Three Four Five\
    \ Six Seven Eight Nine)[$_ - 1]\n    } @sorted;\n    return \\@result;\n}", " \
    \   my @one_to_nine = grep {$_ >= 1 && $_ <= 9} @$arr;\n    return [] unless @one_to_nine;\n\
    \    my @result = map {$_ eq '1' ? 'One' :\n                      $_ eq '2' ?\
    \ 'Two' :\n                      $_ eq '3' ? 'Three' :\n                     \
    \ $_ eq '4' ? 'Four' :\n                      $_ eq '5' ? 'Five' :\n         \
    \             $_ eq '6' ? 'Six' :\n                      $_ eq '7' ? 'Seven' :\n\
    \                      $_ eq '8' ? 'Eight' :\n                      $_ eq '9'\
    \ ? 'Nine' :\n                      undef} reverse @one_to_nine;\n    return \\\
    @result;\n}", "    my @output = ();\n    my %num_map = (1 => \"One\", 2 => \"\
    Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\"\
    , 8 => \"Eight\", 9 => \"Nine\");\n    for(my $i = 0; $i < scalar(@$arr); $i++)\
    \ {\n        if ($arr->[$i] > 0 && $arr->[$i] < 10) {\n            push(@output,\
    \ $num_map{$arr->[$i]});\n        }\n    }\n    return reverse(@output);\n}",
  "    my @ans = ();\n    my @sort_result = sort {$a <=> $b} grep(/[1-9]/, @$arr);\n\
    \    my %hash = (1 => \"One\", 2 => \"Two\", 3 => \"Three\", 4 => \"Four\", 5\
    \ => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9 => \"Nine\");\n\
    \    for my $i (reverse @sort_result) {\n        push @ans, $hash{$i};\n    }\n\
    \    return \\@ans;\n}", "    my @result = ();\n    foreach (@$arr) {\n      \
    \  if ($_ > 0 && $_ < 10) {\n            push @result, $_;\n        }\n    }\n\
    \    return [] if @result == 0;\n    @result = reverse sort {$a <=> $b} @result;\n\
    \    my @result2 = ();\n    my %digits = (\n            \"1\" => \"One\",\n  \
    \          \"2\" => \"Two\",\n            \"3\" => \"Three\",\n            \"\
    4\" => \"Four\",\n            \"5\" => \"Five\",\n            \"6\" => \"Six\"\
    ,\n            \"7\" => \"Seven\",\n            \"8\" => \"Eight\",\n        \
    \    \"9\" => \"Nine\",\n    );\n    foreach (@result) {\n        push @result2,\
    \ $digits{$_};\n    }\n    return \\@result2;\n}", "    my @numbers = ();\n  \
    \  my @result = ();\n    foreach my $i (@$arr) {\n        next if $i < 1 || $i\
    \ > 9;\n        push @numbers, $i;\n    }\n    @numbers = sort @numbers;\n   \
    \ @numbers = reverse @numbers;\n    foreach my $i (@numbers) {\n        my $name\
    \ = \"\";\n        if ($i == 1) {\n            $name = \"One\";\n        } elsif\
    \ ($i == 2) {\n            $name = \"Two\";\n        } elsif ($i == 3) {\n   \
    \         $name = \"Three\";\n        } elsif ($i == 4) {\n            $name =\
    \ \"Four\";\n        } elsif ($i == 5) {\n            $name = \"Five\";\n    \
    \    } elsif ($i == 6) {\n            $name = \"Six\";\n        } elsif ($i ==\
    \ 7) {\n            $name = \"Seven\";\n        } elsif ($i == 8) {\n        \
    \    $name = \"Eight\";\n        } elsif ($i == 9) {\n            $name = \"Nine\"\
    ;\n        }\n        push @result, $name;\n    }\n    return @result;\n}", " \
    \   my @numbers;\n    foreach my $x (@$arr) {\n        if ($x > 0 && $x < 10)\
    \ {\n            push @numbers, $x;\n        }\n    }\n    return @numbers;\n}",
  "    my @arr_result = ();\n    if (scalar(@$arr) == 0) {\n        return [];\n \
    \   }\n    my @arr_temp = ();\n    foreach my $num (@$arr) {\n        if ($num\
    \ >= 1 && $num <= 9) {\n            push @arr_temp, $num;\n        }\n    }\n\
    \    @arr_temp = sort {$a <=> $b} @arr_temp;\n    @arr_temp = reverse @arr_temp;\n\
    \    my %map = (\n        1 => \"One\",\n        2 => \"Two\",\n        3 => \"\
    Three\",\n        4 => \"Four\",\n        5 => \"Five\",\n        6 => \"Six\"\
    ,\n        7 => \"Seven\",\n        8 => \"Eight\",\n        9 => \"Nine\"\n \
    \   );\n    foreach my $num (@arr_temp) {\n        push @arr_result, $map{$num};\n\
    \    }\n    return \\@arr_result;\n}", "    my @result = ();\n    my @strange_arr\
    \ = grep { $_ > 9 || $_ < 1 } @$arr;\n    @$arr = grep { $_ <= 9 && $_ >= 1 }\
    \ @$arr;\n    @$arr = sort { $a <=> $b } @$arr;\n    @$arr = reverse @$arr;\n\
    \    for(@$arr) {\n        if($_ == 1) {\n            push @result, \"One\";\n\
    \        }\n        elsif($_ == 2) {\n            push @result, \"Two\";\n   \
    \     }\n        elsif($_ == 3) {\n            push @result, \"Three\";\n    \
    \    }\n        elsif($_ == 4) {\n            push @result, \"Four\";\n      \
    \  }\n        elsif($_ == 5) {\n            push @result, \"Five\";\n        }\n\
    \        elsif($_ == 6) {\n            push @result, \"Six\";\n        }\n   \
    \     elsif($_ == 7) {\n            push @result, \"Seven\";\n        }\n    \
    \    elsif($_ == 8) {\n            push @result, \"Eight\";\n        }\n     \
    \   elsif($_ == 9) {\n            push @result, \"Nine\";\n        }\n    }\n\
    \    if(scalar @strange_arr > 0) {\n        push @result, @strange_arr;\n    }\n\
    \    return @result;\n}", "    my @newarr = ();\n    my @onearr = ();\n    my\
    \ @twoarr = ();\n    my @threearr = ();\n    my @fourarr = ();\n    my @fivearr\
    \ = ();\n    my @sixarr = ();\n    my @sevenarr = ();\n    my @eightarr = ();\n\
    \    my @ninearr = ();\n    foreach my $elem (@$arr) {\n        if ($elem == 1)\
    \ {\n            push @onearr, $elem;\n        } elsif ($elem == 2) {\n      \
    \      push @twoarr, $elem;\n        } elsif ($elem == 3) {\n            push\
    \ @threearr, $elem;\n        } elsif ($elem == 4) {\n            push @fourarr,\
    \ $elem;\n        } elsif ($elem == 5) {\n            push @fivearr, $elem;\n\
    \        } elsif ($elem == 6) {\n            push @sixarr, $elem;\n        } elsif\
    \ ($elem == 7) {\n            push @sevenarr, $elem;\n        } elsif ($elem ==\
    \ 8) {\n            push @eightarr, $elem;\n        } elsif ($elem == 9) {\n \
    \           push @ninearr, $elem;\n        }\n    }\n    @newarr = (@onearr, @twoarr,\
    \ @threearr, @fourarr, @fivearr, @sixarr, @sevenarr, @eightarr, @ninearr);\n \
    \   my @reversed_arr = reverse @newarr;\n    foreach my $elem (@reversed_arr)\
    \ {\n        if ($elem == 1) {\n            $elem = \"One\";\n        } elsif\
    \ ($elem == 2) {\n            $elem = \"Two\";\n        } elsif ($elem == 3) {\n\
    \            $elem = \"Three\";\n        } elsif ($elem == 4) {\n            $elem\
    \ = \"Four\";\n        } elsif ($elem == 5) {\n            $elem = \"Five\";\n\
    \        } elsif ($e", "    my $result = [];\n    return $result if $#$arr < 0;\n\
    \    my $hash = {\n        \"1\" => \"One\",\n        \"2\" => \"Two\",\n    \
    \    \"3\" => \"Three\",\n        \"4\" => \"Four\",\n        \"5\" => \"Five\"\
    ,\n        \"6\" => \"Six\",\n        \"7\" => \"Seven\",\n        \"8\" => \"\
    Eight\",\n        \"9\" => \"Nine\",\n    };\n    $result = [sort { $a <=> $b\
    \ } grep { $_ >= 1 && $_ <= 9 } @$arr];\n    $result = [map { $hash->{$_} } @$result];\n\
    \    return [reverse @$result];\n}", "    my @sorted = sort { $a <=> $b } grep\
    \ { $_ >= 1 && $_ <= 9 } @$arr;\n    my @reverse = reverse @sorted;\n    my @names\
    \ = (\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\");\n    my @result = map { $names[$_ - 1] } @reverse;\n    return \\\
    @result;\n}", "    my $nums = $arr;\n    $nums = grep { $_ >=1 && $_ <= 9 } @$nums;\n\
    \    $nums = sort { $a <=> $b } @$nums;\n    $nums = reverse @$nums;\n    $nums\
    \ = $nums->[map{ $_ } @$nums];\n    return $nums;\n}", "    my @result = ();\n\
    \    my @nums = ('One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine');\n    if (!@$arr) {\n        return [];\n    }\n    foreach my $num\
    \ (@$arr) {\n        if ($num >= 1 && $num <= 9) {\n            my $index = $num\
    \ - 1;\n            push @result, $nums[$index];\n        }\n    }\n    return\
    \ [reverse @result];\n}", "    my @arr_ = sort(@$arr);\n    my @res = ();\n  \
    \  for my $i (@arr_) {\n        next if $i < 1 || $i > 9;\n        my $s = \"\"\
    ;\n        given($i) {\n            when(1) {$s = \"One\";}\n            when(2)\
    \ {$s = \"Two\";}\n            when(3) {$s = \"Three\";}\n            when(4)\
    \ {$s = \"Four\";}\n            when(5) {$s = \"Five\";}\n            when(6)\
    \ {$s = \"Six\";}\n            when(7) {$s = \"Seven\";}\n            when(8)\
    \ {$s = \"Eight\";}\n            when(9) {$s = \"Nine\";}\n        }\n       \
    \ push @res, $s;\n    }\n    return reverse(@res);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
