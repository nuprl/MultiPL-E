name: HumanEval_139_special_factorial
language: pl
prompt: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n! *\
  \ (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
  # 288\n# The function will receive an integer as input and should return the special\n\
  # factorial of this integer.\nsub special_factorial {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&special_factorial;\n\
  \        if(eq_deeply($candidate->(4),288)) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560)) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $factorial = 1;\n    for(my $i = $n; $i > 0; $i--) {\n     \
    \   $factorial *= $i;\n    }\n    my $special_factorial = $factorial;\n    for(my\
    \ $i = $n - 1; $i > 0; $i--) {\n        $special_factorial *= $i;\n    }\n   \
    \ return $special_factorial;\n}", "    $n = 1 if ($n < 1);\n    return factorial($n)\
    \ * factorial($n-1);\n}", "    my $result = 1;\n    for(my $i = $n; $i > 0; $i--)\
    \ {\n        $result *= $i;\n    }\n    return $result;\n}", "    if ($n == 0)\
    \ {\n        return 1;\n    }\n    my $result = 1;\n    for (my $i = $n; $i >\
    \ 0; $i--) {\n        $result *= $i;\n    }\n    return $result;\n}", "    my\
    \ $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    for (my $i = $n - 1; $i > 0; $i--) {\n        $result *= $i;\n   \
    \ }\n    return $result;\n}", "    my $fact = 1;\n    for(my $i=2; $i<=$n; $i++)\
    \ {\n        $fact *= factorial($i);\n    }\n    return $fact;\n}", "    # your\
    \ code here\n}", "    \n    return 1 if ($n == 0);\n    return $n * special_factorial($n\
    \ - 1);\n}", "    my $fac = 1;\n    my $fac2 = 1;\n    while ($n > 0) {\n    \
    \    $fac *= $n;\n        $fac2 *= $fac;\n        $n--;\n    }\n    return $fac2;\n\
    }", '    $n > 0 or return 0;', "    my $result = 1;\n    while ($n > 0) {\n  \
    \      $result *= factorial($n);\n        $n--;\n    }\n    return $result;\n}",
  "    if ($n > 0) {\n        return brazilian_factorial($n);\n    } else {\n    \
    \    return 1;\n    }\n}", "    return 1 if $n <= 1;\n    return $n * special_factorial($n\
    \ - 1);\n}", "    return 1 if $n == 0;\n    return $n * special_factorial($n -\
    \ 1);\n}", "    if ($n == 0) {\n        return 1;\n    } else {\n        my $fact\
    \ = 1;\n        for (my $i = $n; $i > 0; $i--) {\n            $fact *= $i;\n \
    \       }\n        return $fact * special_factorial($n - 1);\n    }\n}", "   \
    \ my $fact = 1;\n    return (1) if ($n == 0);\n    for (my $i = 1; $i <= $n; $i++)\
    \ {\n        $fact *= $i;\n    }\n    return $fact;\n}", "    my $product = 1;\n\
    \    foreach my $i (reverse 1..$n) {\n        $product *= factorial($i);\n   \
    \ }\n    return $product;\n}", "    # your code here\n    my $fact = 1;\n    my\
    \ $fact_aux = 1;\n    while($n > 0){\n        $fact = $fact * $n;\n        $fact_aux\
    \ = $fact_aux * $fact;\n        $n = $n - 1;\n    }\n    return $fact_aux;\n}",
  "    my $sum = 1;\n    my $sum1 = 1;\n    while ($n > 0) {\n        $sum = $sum\
    \ * $n;\n        $sum1 = $sum1 * $sum;\n        $n--;\n    }\n    return $sum1;\n\
    }", "    my $factorial = 1;\n    return 1 if $n == 0;\n    while ($n > 0) {\n\
    \        $factorial *= $n;\n        $n--;\n    }\n    return $factorial;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
