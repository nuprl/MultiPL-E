name: HumanEval_82_prime_length
language: pl
prompt: "# Write a function that takes a string and returns 1 if the string\n# length\
  \ is a prime number or  otherwise\n# Examples\n# >>> prime_length(\"Hello\")\n#\
  \ 1\n# >>> prime_length(\"abcdcba\")\n# 1\n# >>> prime_length(\"kittens\")\n# 1\n\
  # >>> prime_length(\"orange\")\n# \"\"\nsub prime_length {\n    my($string) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prime_length;\n\
  \        if(eq_deeply($candidate->(\"Hello\"),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdcba\"),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  kittens\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\"orange\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"wow\"),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  world\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->(\"MadaM\"),1)) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"Wow\"),1)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(\"HI\"),1)) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"go\"),1)) {\n       \
  \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  gogo\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\"aaaaaaaaaaaaaaa\"),\"\")) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Madam\"\
  ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  M\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(\"0\"),\"\")) {\n        print \"ok!\" }else{\n   \
  \     exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $length = length($string);\n    for (my $i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"\";\n      \
    \  }\n    }\n    return 1;\n}", "    if (is_prime(length($string))) {\n      \
    \  return 1;\n    }\n    return \"\";\n}", "    my $length = length($string);\n\
    \    return is_prime($length);\n}", "    return 1 if is_prime(length($string));\n\
    \    return \"\";\n}", "    my $length = length($string);\n    my $test   = 0;\n\
    \    for my $i (2 .. sqrt($length)) {\n        if ($length % $i == 0) {\n    \
    \        $test = 1;\n            last;\n        }\n    }\n    if ($test) {\n \
    \       return '';\n    }\n    else {\n        return 1;\n    }\n}", "    return\
    \ 1 if ($string =~ /^.{3}$/);\n    return 1 if ($string =~ /^.{5}$/);\n    return\
    \ 1 if ($string =~ /^.{7}$/);\n    return 1 if ($string =~ /^.{11}$/);\n    return\
    \ 1 if ($string =~ /^.{13}$/);\n    return 1 if ($string =~ /^.{17}$/);\n    return\
    \ 1 if ($string =~ /^.{19}$/);\n    return 1 if ($string =~ /^.{23}$/);\n    return\
    \ 1 if ($string =~ /^.{29}$/);\n    return 1 if ($string =~ /^.{31}$/);\n    return\
    \ 1 if ($string =~ /^.{37}$/);\n    return 1 if ($string =~ /^.{41}$/);\n    return\
    \ 1 if ($string =~ /^.{43}$/);\n    return 1 if ($string =~ /^.{47}$/);\n    return\
    \ 1 if ($string =~ /^.{53}$/);\n    return 1 if ($string =~ /^.{59}$/);\n    return\
    \ 1 if ($string =~ /^.{61}$/);\n    return 1 if ($string =~ /^.{67}$/);\n    return\
    \ 1 if ($string =~ /^.{71}$/);\n    return 1 if ($string =~ /^.{73}$/);\n    return\
    \ 1 if ($string =~ /^.{79}$/);\n    return 1 if ($string =~ /^.{83}$/);\n    return\
    \ 1 if ($string =~ /^.{89}$/);\n    return 1 if ($string =~ /^.{97}$/);\n    return\
    \ \"\";\n}", "    my @numbers = 1..length($string);\n    my $prime = 0;\n    for\
    \ my $i (@numbers) {\n        if ($i == 1) {\n            next;\n        }\n \
    \       if (length($string) % $i == 0) {\n            $prime = 1;\n          \
    \  last;\n        }\n    }\n    if ($prime == 1) {\n        return \"\";\n   \
    \ }\n    else {\n        return 1;\n    }\n}", "    my $length = length($string);\n\
    \    if($length == 2 || $length == 3 || $length == 5 || $length == 7) {\n    \
    \    return 1;\n    }\n    return \"\";\n}", "    my $len = length($string);\n\
    \    return 1 if is_prime($len);\n    return 0;\n}", "    my $len = length($string);\n\
    \    return 1 if $len == 2;\n    foreach my $i (2..($len/2)) {\n        return\
    \ \"\" if $len % $i == 0;\n    }\n    return 1;\n}", "    my $length = length($string);\n\
    \    my $prime = 1;\n    for (my $i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            $prime = 0;\n            last;\n        }\n    }\n\
    \    if ($prime == 1) {\n        return 1;\n    }\n    else {\n        return\
    \ \"\";\n    }\n}", "    my $string_length = length($string);\n    my $divisor\
    \ = 2;\n    while ($divisor < $string_length) {\n        if ($string_length %\
    \ $divisor == 0) {\n            return \"\";\n        }\n        $divisor++;\n\
    \    }\n    return 1;\n}", "    if (length($string) == 1 || length($string) ==\
    \ 2 || length($string) == 3 || length($string) == 5 || length($string) == 7){\n\
    \        return 1;\n    }\n    else {\n        return \"\";\n    }\n}", "    return\
    \ 1 if is_prime(length($string));\n    return 0;\n}", "    my @string_letters\
    \ = split //, $string;\n    my $string_length = @string_letters;\n    if ($string_length\
    \ == 2 || $string_length == 3 || $string_length == 5 || $string_length == 7) {\n\
    \        return 1;\n    }\n    else {\n        return \"\";\n    }\n}", "    if\
    \ (prime(length($string))) {\n\treturn 1;\n    } else {\n\treturn \"\";\n    }\n\
    }", "    if (check_prime(length($string))) {\n        return 1;\n    }\n    return\
    \ \"\";\n}", "    my $length = length($string);\n    my $is_prime = 1;\n    for\
    \ (my $i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n      \
    \      $is_prime = 0;\n            last;\n        }\n    }\n    return $is_prime;\n\
    }", "    return 1 if is_prime(length($string));\n    return \"\";\n}", "    my\
    \ $length = length($string);\n    return check_prime($length);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
