name: HumanEval_91_is_bored
language: pl
prompt: "# You'll be given a string of words, and your task is to count the number\n\
  # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
  \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
  )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
  )\n# 1\nsub is_bored {\n    my($S) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_bored;\n\
  \        if(eq_deeply($candidate->(\"Hello world\"),0)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Is the\
  \ sky blue?\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"I love It !\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"bIt\"\
  ),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  I feel good today. I will be productive. will kill It\"),2)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"You\
  \ and I are going for a walk\"),0)) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @A = split(/[\\?\\!\\.]/, $S);\n    my $c = 0;\n    map { $c++\
    \ if($_ =~ /^\\s*I/) } @A;\n    return $c;\n}", "    my $n = 0;\n    $n++ while\
    \ $S =~ /I /gi;\n    return $n;\n}", "    return scalar(grep { /^I/ } split(/[.?!]/,\
    \ $S));\n}", "    return 0;\n}", "    return 0 if $S eq '';\n    my $boredoms\
    \ = 0;\n    my @sentences = split /[.?!]/, $S;\n    foreach (@sentences) {\n \
    \       $boredoms++ if (/^I( |\\w)*/);\n    }\n    return $boredoms;\n}", "  \
    \  my $count = 0;\n    my @parts = split(/[.?!]/, $S);\n    foreach my $part (@parts)\
    \ {\n        $count++ if ($part =~ /^I/);\n    }\n    return $count;\n}", "  \
    \  my $count = 0;\n    my @words = split(/[.?!]/, $S);\n    for my $word (@words)\
    \ {\n        if ($word =~ /I/) {\n            $count++;\n        }\n    }\n  \
    \  return $count;\n}", "    my @S = split(/[.?!]/, $S);\n    my $boredom_count\
    \ = 0;\n    for my $s (@S) {\n        if ($s =~ /I/ && $s =~ /^\\s*I/) {\n   \
    \         $boredom_count++;\n        }\n    }\n    return $boredom_count;\n}",
  "    my $t = 0;\n    for(split(/[\\.?!]/, $S)) {\n        $t++ if(/^I\\s/);\n  \
    \  }\n    return $t;\n}", "    my $bored = 0;\n    my @sentences = split(/[\\\
    .?!]/, $S);\n    foreach my $s (@sentences) {\n        if ($s =~ /^\\s*I\\s*\\\
    w+/) {\n            $bored += 1;\n        }\n    }\n    return $bored;\n}", " \
    \   my @a = split(/[.?!]/, $S);\n    my $c = 0;\n    foreach my $s (@a) {\n  \
    \      if ($s =~ /^\\s*I/) {\n            $c++;\n        }\n    }\n    return\
    \ $c;\n}", "    my @T = split(/[?!.]+/, $S);\n    my $N = 0;\n    for my $T (@T)\
    \ {\n        if ($T =~ /^\\s*I/) {\n            $N++;\n        }\n    }\n    return\
    \ $N;\n}", "    my $boredoms = 0;\n    my @split = split(/\\.|\\?|\\!/ , $S);\n\
    \    for my $element (@split) {\n        if ($element =~ /I[\\w\\s\\d]+[\\.|\\\
    ?|\\!]*/) {\n            $boredoms++;\n        }\n    }\n    return $boredoms;\n\
    }", "    $S =~ s/\\?/\\./g;\n    $S =~ s/\\!/\\./g;\n    my @S = split /\\./,\
    \ $S;\n    my $boredoms = 0;\n    for my $s (@S) {\n        $boredoms++ if $s\
    \ =~ /^\\s*I\\s/;\n    }\n    return $boredoms;\n}", "    my @S = split(/[\\.\\\
    ?!]/, $S);\n    my $boredoms = 0;\n    foreach (@S) {\n        $boredoms++ if\
    \ /^\\s*I/;\n    }\n    return $boredoms;\n}", "    my $boredoms = 0;\n    my\
    \ @sentences = split /[.?!]/, $S;\n    foreach my $sentence (@sentences) {\n \
    \       my @words = split /\\s+/, $sentence;\n        if ($words[0] =~ /I/i) {\n\
    \            $boredoms++;\n        }\n    }\n    return $boredoms;\n}", "    my\
    \ @words = split(/[\\.\\?!]\\s+/, $S);\n    my $count = 0;\n    foreach my $word\
    \ (@words) {\n        if (index($word, \"I\") == 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    my @tmp = split(/[\\.\\?\\!]/,\
    \ $S);\n    my $cnt = 0;\n    for (@tmp) {\n        $cnt++ if /^\\s*I/;\n    }\n\
    \    return $cnt;\n}", "    my $N = 0;\n    while ($S =~ /I\\s+/g) {\n       \
    \ $N++;\n    }\n    return $N;\n}", "    return length(join(\"\", split(\"\\s*[\\\
    .!\\?]\\s*\", $S)) =~ /\\bI\\b/g);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
