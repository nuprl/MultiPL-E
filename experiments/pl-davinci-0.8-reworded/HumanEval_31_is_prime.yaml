name: HumanEval_31_is_prime
language: pl
prompt: "# Return true if a given number is prime, and false otherwise.\n# >>> is_prime(6)\n\
  # \"\"\n# >>> is_prime(101)\n# 1\n# >>> is_prime(11)\n# 1\n# >>> is_prime(13441)\n\
  # 1\n# >>> is_prime(61)\n# 1\n# >>> is_prime(4)\n# \"\"\n# >>> is_prime(1)\n# \"\
  \"\nsub is_prime {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_prime;\n\
  \        if(eq_deeply($candidate->(6),\"\")) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(101),1)) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13441),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(61),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(17),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(85),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(77),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(255379),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my($p) = 0;\n    if ($n == 1 || $n == 2) {\n        $p = 1;\n \
    \   } else {\n        my($i) = 2;\n        while ($i < $n) {\n            if ($n\
    \ % $i == 0) {\n                $p = 0;\n                $i = $n;\n          \
    \  } else {\n                $p = 1;\n            }\n            $i++;\n     \
    \   }\n    }\n    return $p;\n}", '    if($n == 1) { return "" }', "    return\
    \ if $n < 2;\n    return if $n > 1 && $n % 2 == 0;\n    my $i = 3;\n    my $sqrt\
    \ = sqrt($n);\n    while ($i <= $sqrt) {\n        return if $n % $i == 0;\n  \
    \      $i += 2;\n    }\n    return 1;\n}", "    if ($n == 2) {\n        return\
    \ 1;\n    }\n    if ($n % 2 == 0) {\n        return 0;\n    }\n    for (my $i\
    \ = 3; $i * $i <= $n; $i += 2) {\n        if ($n % $i == 0) {\n            return\
    \ 0;\n        }\n    }\n    return 1;\n}", "    return '' if $n == 1;\n    for\
    \ my $i (2..sqrt($n)) {\n        return '' if $n % $i == 0;\n    }\n    return\
    \ 1;\n}", "    return 0 if $n < 2;\n    for (my $i = 2; $i <= sqrt($n); $i++)\
    \ {\n        return 0 if $n % $i == 0;\n    }\n    return 1;\n}", "    return\
    \ 1 if $n == 2;\n    return 1 if $n == 3;\n    return 0 if $n == 1;\n    return\
    \ 0 if $n % 2 == 0;\n    return 0 if $n % 3 == 0;\n    return 0 if substr($n,\
    \ -1) eq \"0\";\n    return 0 if substr($n, -1) eq \"5\";\n    my $i = 5;\n  \
    \  my $w = 2;\n    while ($i * $i <= $n) {\n        return 0 if $n % $i == 0;\n\
    \        $i += $w;\n        $w = 6 - $w;\n    }\n    return 1;\n}", "    my $i;\n\
    \    for ($i = 2; $i <= int(sqrt($n)); $i++) {\n        if (($n % $i) == 0) {\n\
    \            return 0;\n        }\n    }\n    return 1;\n}", "    if ($n < 2)\
    \ {\n        return;\n    }\n    if ($n == 2) {\n        return 1;\n    }\n  \
    \  return unless $n % 2;\n    my $max = sqrt($n);\n    for (my $i = 3; $i <= $max;\
    \ $i += 2) {\n        return unless $n % $i;\n    }\n    return 1;\n}", "    if($n==1)\
    \ {\n        return;\n    }\n    if($n==2) {\n        return 1;\n    }\n    if($n%2==0)\
    \ {\n        return;\n    }\n    for(my $i=3; $i<=$n/2; $i+=2) {\n        if($n%$i==0)\
    \ {\n            return;\n        }\n    }\n    return 1;\n}", "    return 0 if\
    \ $n < 2;\n    return 1 if $n == 2;\n    return 0 if $n % 2 == 0;\n    for(my\
    \ $i = 3; $i < sqrt($n); $i += 2) {\n        return 0 if $n % $i == 0;\n    }\n\
    \    return 1;\n}", "    return 1 if $n == 2;\n    return 0 if $n < 2 || !($n\
    \ & 1);\n    for(my $i = 3; $i * $i <= $n; $i += 2) {\n        return 0 if $n\
    \ % $i == 0;\n    }\n    return 1;\n}", "    if ($n < 2) { return ''; }\n    foreach\
    \ my $i (2 .. sqrt($n)) {\n        if ($n % $i == 0) { return ''; }\n    }\n \
    \   return 1;\n}", "    return '' if $n == 1;\n    foreach my $d (2 .. $n-1) {\n\
    \        return '' if $n % $d == 0;\n    }\n    return 1;\n}", "    return is_precomputed_prime($n)\
    \ if ($n <= $PRECOMPUTED_PRIMES[-1]);\n    return if ($n == 1 || ( $n != 2 &&\
    \ !($n % 2) ) );\n    for (my $i = 3; $i * $i <= $n; $i += 2) {\n        return\
    \ if ( $n % $i == 0 );\n    }\n    return 1;\n}", "    return \"\" if $n < 2;\n\
    \    return 1 if $n == 2;\n    for my $i (2..sqrt($n)) {\n        return \"\"\
    \ if $n % $i == 0;\n    }\n    return 1;\n}", "    my $i = 2;\n    my $root =\
    \ sqrt($n);\n    while ( $i <= $root ) {\n        if ($n % $i == 0) {\n      \
    \      return;\n        }\n        $i++;\n    }\n    return 1;\n}", "    if($n\
    \ < 2) { return \"\" }\n    if($n == 2) { return 1 }\n    if($n == 3) { return\
    \ 1 }\n    if($n == 5) { return 1 }\n    if($n == 7) { return 1 }\n    if($n %\
    \ 2 == 0) { return \"\" }\n    if($n % 3 == 0) { return \"\" }\n    if($n % 5\
    \ == 0) { return \"\" }\n    if($n % 7 == 0) { return \"\" }\n    my $limit =\
    \ 1+int(sqrt($n));\n    for my $divisor (11..$limit) {\n        if($n % $divisor\
    \ == 0) { return \"\" }\n    }\n    return 1;\n}", "    return 0 if $n <= 1;\n\
    \    my $root_n = int sqrt $n;\n    for ( my $i = 2; $i <= $root_n; $i++ ) {\n\
    \        return 0 if $n % $i == 0;\n    }\n    return 1;\n}", "    return 0 if\
    \ $n <= 1;\n    my $max = int(sqrt($n));\n    for (my $i = 2; $i <= $max; $i++)\
    \ {\n        return 0 if $n % $i == 0;\n    }\n    return 1;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
