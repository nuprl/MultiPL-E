name: HumanEval_143_words_in_sentence
language: pl
prompt: "# You are given a string representing a sentence,\n# the sentence contains\
  \ some words separated by a space,\n# and you have to return a string that contains\
  \ the words from the original sentence,\n# whose lengths are prime numbers,\n# the\
  \ order of the words in the new string should be the same as the original one.\n\
  # Example 1:\n# >>> words_in_sentence(\"This is a test\")\n# \"is\"\n# Example 2:\n\
  # >>> words_in_sentence(\"lets go for swimming\")\n# \"go for\"\n# Constraints:\n\
  # * 1 <= len(sentence) <= 100\n# * sentence contains only letters\nsub words_in_sentence\
  \ {\n    my($sentence) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&words_in_sentence;\n\
  \        if(eq_deeply($candidate->(\"This is a test\"),\"is\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  lets go for swimming\"),\"go for\")) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(\"there is no place available\
  \ here\"),\"there is no place\")) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(\"Hi I am Hussein\"),\"Hi am\
  \ Hussein\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->(\"go for it\"),\"go for it\")) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"here\"\
  ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  here is\"),\"is\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  }\n\ntesthumaneval();"
completions: ["    my @words = split / /, $sentence;\n    my @primes = prime_generator(100);\n\
    \    my $result = join \" \", grep { exists $primes{length $_} } @words;\n   \
    \ return $result;\n}", "    my $out_str = \"\";\n    my @words = split(' ', $sentence);\n\
    \    foreach my $word (@words) {\n        my $str_length = length($word);\n  \
    \      if (($str_length == 2) ||\n            ($str_length == 3) ||\n        \
    \    ($str_length == 5) ||\n            ($str_length == 7)) {\n            $out_str\
    \ .= $word . \" \";\n        }\n    }\n    $out_str =~ s/\\s$//;\n    return $out_str;\n\
    }", "    my @words = split(' ', $sentence);\n    my @prime_words;\n    foreach\
    \ (@words) {\n        if (is_prime(length($_))) {\n            push @prime_words,\
    \ $_;\n        }\n    }\n    return join(' ', @prime_words);\n}", "    my $prime_length_words\
    \ = q{};\n    foreach my $word (split /\\s+/, $sentence) {\n        $prime_length_words\
    \ .= $word . q{ } if is_prime(length $word);\n    }\n    return $prime_length_words;\n\
    }", "    my @words = split(/ /, $sentence);\n    my @primes = grep { is_prime($_)\
    \ } map { length($_) } @words;\n    my $result = \"\";\n    foreach my $w (@words)\
    \ {\n        if (grep { $_ == length($w) } @primes) {\n            $result .=\
    \ \"$w \";\n        }\n    }\n    return $result;\n}", "    return join(\" \"\
    ,grep{is_prime($_)}$sentence =~ /\\w+/g);\n}", "    my $prime = {\n        map\
    \ { $_ => 1 } qw/1 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73\
    \ 79 83 89 97/\n    };\n    return join ' ', grep {\n        $prime->{ length\
    \ $_ }\n    } split ' ', $sentence;\n}", "    my $result = '';\n    my @words\
    \ = split(/ /, $sentence);\n    for my $word (@words) {\n        $result .= $word.'\
    \ ' if is_prime(length($word));\n    }\n    $result =~ s/\\s+$//;\n    return\
    \ $result;\n}", "    my @arr = split(/ /, $sentence);\n    my @prime;\n    foreach\
    \ (@arr) {\n        my $len = length($_);\n        if (is_prime($len)) {\n   \
    \         push(@prime, $_);\n        }\n    }\n    return join(' ', @prime);\n\
    }", "    my @primes = grep {is_prime($_)} length_of_words($sentence);\n    my\
    \ @words = split(' ', $sentence);\n    my @prime_words = grep {index($sentence,\
    \ $_) != -1} map {\"\\Q$_\\E\"} words_at_lengths($sentence, @primes);\n    return\
    \ join(' ', @prime_words);\n}", "    my @words = split(/ /, $sentence);\n    my\
    \ @result = ();\n    for my $word (@words) {\n        if (is_prime(length($word)))\
    \ {\n            push(@result, $word);\n        }\n    }\n    return join(\" \"\
    , @result);\n}", "    my @words = split / /, $sentence;\n    my $ret = '';\n \
    \   for my $word (@words) {\n        my $len = length $word;\n        if (is_prime($len))\
    \ {\n            $ret .= $word . ' ';\n        }\n    }\n    return $ret;\n}",
  "    # YOUR CODE HERE\n}", "    my $count;\n    my $flag;\n    my $output;\n   \
    \ my @sentence=split(/ /,$sentence);\n    foreach my $word (@sentence) {\n   \
    \     $count = 0;\n        for(my $i=1;$i<=length($word);$i++) {\n           \
    \ if(length($word)%$i==0) {\n                $count++;\n            }\n      \
    \  }\n        if($count==2) {\n            $output .= $word.\" \";\n        }\n\
    \    }\n    return $output;\n}", "    my @words = split / /, $sentence;\n    my\
    \ @prime_words;\n    my $limit = sqrt(scalar @words);\n    foreach my $i (0..$#words)\
    \ {\n        my $is_prime = 1;\n        for my $j (2..$limit) {\n            if\
    \ ($i % $j == 0) {\n                $is_prime = 0;\n                last;\n  \
    \          }\n        }\n        if ($is_prime) {\n            push @prime_words,\
    \ $words[$i];\n        }\n    }\n    return join(\" \", @prime_words);\n}", " \
    \   my @words = split / /, $sentence;\n    my @good_words;\n    for (@words) {\n\
    \        next unless is_prime(length);\n        push @good_words, $_;\n    }\n\
    \    return join ' ', @good_words;\n}", '}', "    my @words = split(/ /, $sentence);\n\
    \    my @result;\n    for (@words) {\n        my $prime = 1;\n        my $chars\
    \ = length($_);\n        for (my $x = 2; $x < $chars; $x++) {\n            if\
    \ ($chars % $x == 0) {\n                $prime = 0;\n                last;\n \
    \           }\n        }\n        if ($prime) {\n            push(@result, $_);\n\
    \        }\n    }\n    return join(\" \", @result);\n}", "    my @sentence = split(/\
    \ /, $sentence);\n    my $sentence_length = scalar @sentence;\n    my @prime_words;\n\
    \    foreach my $word (@sentence) {\n        my $word_length = length($word);\n\
    \        if (is_prime($word_length)) {\n            push(@prime_words, $word);\n\
    \        }\n    }\n    my $new_sentence = join(\" \", @prime_words);\n    return\
    \ $new_sentence;\n}", "    my @words = split / /, $sentence;\n    my @primes =\
    \ grep { is_prime($_) } map { length $_ } @words;\n    my $index = 0;\n    my\
    \ @array = map { $primes[$index++] == length $_ ? $_ : '' } @words;\n    join\
    \ ' ', @array;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
