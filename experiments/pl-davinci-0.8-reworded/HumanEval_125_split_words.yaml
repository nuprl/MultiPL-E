name: HumanEval_125_split_words
language: pl
prompt: "# Given a string of words, return an array of words split on whitespace,\
  \ if no whitespaces exists in the text you\n# should split on commas ',' if no commas\
  \ exists you should return the number of lower-case letters with odd order in the\n\
  # alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n# Examples\n# >>> split_words(\"\
  Hello world!\")\n# [\"Hello\", \"world!\"]\n# >>> split_words(\"Hello,world!\")\n\
  # [\"Hello\", \"world!\"]\n# >>> split_words(\"abcdef\")\n# 3\nsub split_words {\n\
  \    my($txt) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&split_words;\n\
  \        if(eq_deeply($candidate->(\"Hello world!\"),[\"Hello\", \"world!\"])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Hello,world!\"),[\"Hello\", \"world!\"])) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello world,!\"),[\"\
  Hello\", \"world,!\"])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n        if(eq_deeply($candidate->(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
  , \"!\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(\"abcdef\"),3)) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaabb\"),2)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  aaaBb\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->(\"\"),0)) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    if ($txt =~ /\\s+/) {\n        my @words = split(/\\s+/, $txt);\n\
    \        return \\@words;\n    }\n    if ($txt =~ /,/) {\n        my @words =\
    \ split(/,/, $txt);\n        return \\@words;\n    }\n    my $count = 0;\n   \
    \ my @chars = split(//, $txt);\n    for my $char (@chars) {\n        my $ord =\
    \ ord($char);\n        if ($ord % 2 == 1) {\n            $count += 1;\n      \
    \  }\n    }\n    return $count;\n}", "    return split(' ', $txt) if $txt =~ /\\\
    s/;\n    return split(',', $txt) if $txt =~ /,/;\n    return grep {\n        my\
    \ $o = $_;\n        my $i = ord($o) - ord('a');\n        $i % 2 == 1;\n    } split(//,\
    \ $txt);\n}", "    my @t = split /\\s/, $txt;\n    if(@t == 1) {\n        @t =\
    \ split /,/, $txt;\n        if(@t == 1) {\n            my $i = 0;\n          \
    \  for my $ch(split //, $txt) {\n                $i++ if(ord($ch) & 1);\n    \
    \        }\n            return $i;\n        }\n    }\n    return @t;\n}", "  \
    \  my @w = ();\n    my $sp = $txt =~ /\\s/;\n    my $cm = $txt =~ /,/;\n    my\
    \ $nl = 0;\n    my $i;\n    if( $sp == 1 ) {\n        @w = split(/\\s/, $txt);\n\
    \    } elsif( $cm == 1 ) {\n        @w = split(/,/, $txt);\n    } else {\n   \
    \     for($i = 0; $i < length($txt); $i++) {\n            my $t = ord(substr($txt,\
    \ $i, 1));\n            if( ($t % 2) == 1 ) {\n                $nl++;\n      \
    \      }\n        }\n    }\n    return ( @w != 0 ) ? \\@w : $nl;\n}", "    if\
    \ ($txt =~ /\\s/) {\n        return split(/\\s/, $txt);\n    }\n    elsif ($txt\
    \ =~ /,/) {\n        return split(/,/, $txt);\n    }\n    else {\n        my $result\
    \ = 0;\n        my @chars = split(//, $txt);\n        foreach my $char (@chars)\
    \ {\n            my $ord = ord($char);\n            $result++ if ($ord % 2 ==\
    \ 1);\n        }\n        return $result;\n    }\n}", "    my $words = [];\n \
    \   if ($txt =~ / /) {\n        $words = [split(/ /, $txt)];\n    } elsif ($txt\
    \ =~ /,/) {\n        $words = [split(/,/, $txt)];\n    } else {\n        $words\
    \ = [$txt =~ tr/[a-z]// % 2];\n    }\n    return $words;\n}", "    if ($txt =~\
    \ /\\s/) {\n        my @words = split(/\\s/, $txt);\n        return @words;\n\
    \    } elsif ($txt =~ /,/) {\n        my @words = split(/,/, $txt);\n        return\
    \ @words;\n    } else {\n        my $cnt = 0;\n        my @letters = split(//,\
    \ $txt);\n        foreach my $let (@letters) {\n            if (ord($let) % 2\
    \ == 1) {\n                $cnt++;\n            }\n        }\n        return $cnt;\n\
    \    }\n}", "    if ($txt =~ m/\\s+/) {\n        return split(/\\s+/, $txt);\n\
    \    } elsif ($txt =~ m/,/) {\n        return split(/,/, $txt);\n    } else {\n\
    \        return scalar(grep { ord($_) % 2 } split(//, $txt));\n    }\n}", "  \
    \  my $retval = [];\n    if ($txt =~ m/\\s/) {\n        $retval = [split(' ',\
    \ $txt)];\n    } elsif ($txt =~ m/,/) {\n        $retval = [split(',', $txt)];\n\
    \    } else {\n        my $letter = chr(97);\n        $retval = 0;\n        for\
    \ (my $i = 0; $i < 26; $i++) {\n            if (index($txt, $letter) >= 0) {\n\
    \                $retval++;\n            }\n            $letter = chr(ord($letter)\
    \ + 1);\n        }\n    }\n    return $retval;\n}", "    if (index($txt, ' ')\
    \ >= 0) {\n        return split(/ /, $txt);\n    } elsif (index($txt, ',') >=\
    \ 0) {\n        return split(/,/, $txt);\n    } else {\n        my $sum = 0;\n\
    \        for my $ch (split(//, $txt)) {\n            $sum += ord($ch) % 2;\n \
    \       }\n        return $sum;\n    }\n}", "    my @out = ();\n    my @words\
    \ = ();\n    @words = split(/\\s+/, $txt);\n    if (scalar(@words) > 1) {\n  \
    \      @out = @words;\n    } else {\n        @words = split(/\\,/, $txt);\n  \
    \      if (scalar(@words) > 1) {\n            @out = @words;\n        } else {\n\
    \            my $count = 0;\n            for (my $i = 0; $i < length($txt); $i++)\
    \ {\n                my $ch = substr($txt, $i, 1);\n                my $ord =\
    \ ord($ch);\n                if ($ord >= 97 && $ord <= 122) {\n              \
    \      if ($ord % 2 != 0) {\n                        $count++;\n             \
    \       }\n                }\n            }\n            @out = ($count);\n  \
    \      }\n    }\n    return @out;\n}", "    if ($txt =~ /\\s/) {\n        return\
    \ split(/\\s/, $txt);\n    } elsif ($txt =~ /,/) {\n        return split(/,/,\
    \ $txt);\n    } else {\n        my $odd = 0;\n        foreach my $ch (split(//,\
    \ $txt)) {\n            my $ch_ord = ord($ch);\n            if ($ch_ord % 2 ==\
    \ 1) {\n                $odd++;\n            }\n        }\n        return $odd;\n\
    \    }\n}", "    my $trimmed = trim($txt);\n    if (contains_whitespace($trimmed))\
    \ {\n        return split /\\s+/, $trimmed;\n    }\n    elsif (contains_comma($trimmed))\
    \ {\n        return split /,/, $trimmed;\n    }\n    else {\n        return count_odd_lower_case_characters($trimmed);\n\
    \    }\n}", "    if ($txt =~ /,/) {\n        return split(\",\", $txt);\n    }\
    \ else {\n        my $word = $txt;\n        $word =~ s/\\s+//g;\n        my $cnt\
    \ = 0;\n        for (my $i = 0; $i < length($word); $i++) {\n            my $ch\
    \ = substr($word, $i, 1);\n            my $ord = ord($ch);\n            if ($ord\
    \ % 2 != 0) {\n                $cnt += 1;\n            }\n        }\n        return\
    \ $cnt;\n    }\n}", "    if ($txt =~ /\\s/) {\n        my @words = split(/\\s/,\
    \ $txt);\n        return @words;\n    } elsif ($txt =~ /,/) {\n        my @words\
    \ = split(/,/, $txt);\n        return @words;\n    } else {\n        my $count\
    \ = 0;\n        my @chars = split(//, $txt);\n        foreach my $char (@chars)\
    \ {\n            my $ord = ord($char);\n            if ($ord % 2 == 1) {\n   \
    \             $count++;\n            }\n        }\n        return $count;\n  \
    \  }\n}", "    if ($txt =~ / /) {\n        return split / /, $txt;\n    } elsif\
    \ ($txt =~ /,/) {\n        return split /,/, $txt;\n    } else {\n        return\
    \ grep { ord($_) % 2 } split //, $txt;\n    }\n}", "    my @words = split(/\\\
    s+/, $txt);\n    my $n = @words;\n    if ($n == 1) {\n        @words = split(/,/,\
    \ $txt);\n        $n = @words;\n        if ($n == 1) {\n            $n = 0;\n\
    \            foreach my $c (split(//, $txt)) {\n                my $b = ord($c)\
    \ - ord('a');\n                if ($b >= 0 && $b <= 25) {\n                  \
    \  if ($b % 2) {\n                        $n += 1;\n                    }\n  \
    \              }\n            }\n            return $n;\n        }\n    }\n  \
    \  return @words;\n}", "    my $nspaces = () = $txt =~ /\\s/g;\n    my $ncommas\
    \ = () = $txt =~ /,/g;\n    if($nspaces) {\n        # We have spaces, return a\
    \ split on whitespace.\n        return split(/\\s+/, $txt);\n    }\n    if($ncommas)\
    \ {\n        # We have commas, return a split on commas.\n        return split(/,/,\
    \ $txt);\n    }\n    # We have neither, return number of letters with odd order.\n\
    \    my $nodd = 0;\n    for my $ch (split(//, $txt)) {\n        my $ord = ord($ch)\
    \ - ord('a');\n        if($ord % 2) {\n            $nodd++;\n        }\n    }\n\
    \    return $nodd;\n}", "    my @text=split(/ /,$txt);\n    if(@text>1){\n   \
    \     return @text;\n    }else{\n        @text=split(/,/,$txt);\n        if(@text>1){\n\
    \            return @text;\n        }else{\n            my $count=0;\n       \
    \     for(my $i=0;$i<length($txt);$i++){\n                my $char=ord(substr($txt,$i,1));\n\
    \                if($char%2!=0){\n                    $count=$count+1;\n     \
    \           }\n            }\n            return $count;\n        }\n    }\n}",
  "    my $txt_0 = $txt;\n    my $txt_1 = $txt;\n    my $txt_2 = $txt;\n    my $txt_3\
    \ = $txt;\n    if ($txt =~ /\\s/){\n        $txt_0 =~ s/\\s/,/g;\n        return\
    \ split(/,/, $txt_0);\n    }\n    if ($txt =~ /,/){\n        $txt_1 =~ s/,/ /g;\n\
    \        return split(/ /, $txt_1);\n    }\n    return ord($txt_2) % 2;\n}", " \
    \   my @result;\n    my $whitespace_exist = index($txt, ' ');\n    my $comma_exist\
    \ = index($txt, ',');\n    my $count_lower_case_odd = 0;\n    if ($whitespace_exist\
    \ > -1) {\n        @result = split(/\\s+/, $txt);\n    }\n    elsif ($comma_exist\
    \ > -1) {\n        @result = split(/,/, $txt);\n    }\n    else {\n        my\
    \ @characters = split(\"\", $txt);\n        foreach my $character (@characters)\
    \ {\n            my $position = ord($character) - ord('a');\n            if ($position\
    \ % 2 == 1) {\n                $count_lower_case_odd += 1;\n            }\n  \
    \      }\n        @result = $count_lower_case_odd;\n    }\n    return @result;\n\
    }", "    if($txt =~ /\\s/){\n        my @words = split(/\\s/, $txt);\n       \
    \ return \\@words;\n    }elsif($txt =~ /,/){\n        my @words = split(/,/, $txt);\n\
    \        return \\@words;\n    }else{\n        my $num_of_letters = 0;\n     \
    \   my @letters = split(//, $txt);\n        foreach my $letter (@letters){\n \
    \           if(ord($letter) % 2 == 1){\n                $num_of_letters++;\n \
    \           }\n        }\n        return $num_of_letters;\n    }\n}", "    $txt\
    \ =~ s/[^\\w,]//g;\n    if ($txt =~ /,/) {\n        return [split(/,/, $txt)];\n\
    \    } elsif ($txt =~ /[\\w]/) {\n        my @odds = ();\n        foreach my $c\
    \ (split(//, $txt)) {\n            my $ord = ord($c) - ord('a');\n           \
    \ if ($ord % 2) {\n                push(@odds, $c);\n            }\n        }\n\
    \        return scalar(@odds);\n    }\n}", "    return map {$_} split(/[\\s,]/,\
    \ $txt) if ($txt =~ /[\\s,]/);\n    return scalar(grep {$_ % 2 == 1} map {ord(lc\
    \ $_) - ord('a')} split(//, $txt));\n}", "    my $splitter;\n    if ($txt =~ /\\\
    s/) {\n        $splitter = qr/\\s+/;\n    }\n    elsif ($txt =~ /,/) {\n     \
    \   $splitter = qr/,/;\n    }\n    else {\n        return scalar grep { ($_ &\
    \ 1) == 1 } unpack(\"C*\", $txt);\n    }\n    return [split($splitter, $txt)];\n\
    }", "    my(@c, $i, $ch);\n    @c = split(//, $txt);\n    for ($i = 0; $i < @c;\
    \ $i++) {\n        $ch = $c[$i];\n        if (ord($ch) >= ord('a') && ord($ch)\
    \ <= ord('z')) {\n            if ($i % 2 == 0) {\n                return(@c);\n\
    \            }\n        }\n    }\n    return(0);\n}", "    my @words = split(/\\\
    s+/, $txt);\n    if (@words == 1) {\n        my @words2 = split(',', $txt);\n\
    \        if (@words2 == 1) {\n            return length(join('', grep { $_ % 2\
    \ == 1 } split(//, $txt)));\n        }\n        return \\@words2;\n    }\n   \
    \ return \\@words;\n}", "    my(@words) = split(/[ ,]/, $txt);\n    if( scalar(@words)\
    \ > 1 ) {\n        return \\@words;\n    } elsif( $txt =~ /,/ ) {\n        return\
    \ \\@words;\n    } else {\n        my($count) = grep { $txt =~ m/\\b(?<!a)$_(?!b)\\\
    b/ } ( 0 .. 25 );\n        return $count;\n    }\n}", "    my $char1 = chr(97);\n\
    \    my $char2 = chr(122);\n    my $order = 0;\n    my $count = 0;\n    my @array;\n\
    \    if (index($txt, ' ') != -1) {\n        @array = split(' ', $txt);\n    }\
    \ elsif (index($txt, ',') != -1) {\n        @array = split(',', $txt);\n    }\
    \ else {\n        my @text = split('', $txt);\n        for my $ch (@text) {\n\
    \            $order = ord($ch) - ord($char1);\n            if ($order % 2 == 1)\
    \ {\n                $count++;\n            }\n        }\n        @array = ($count);\n\
    \    }\n    return @array;\n}", "    my @char = split //, $txt;\n    my @words;\n\
    \    my $odd = 0;\n    if (grep(/\\s/, @char)) {\n        @words = split /\\s/,\
    \ $txt;\n    } elsif (grep(/,/, @char)) {\n        @words = split /,/, $txt;\n\
    \    } else {\n        for (my $i = 0; $i < scalar @char; $i++) {\n          \
    \  if (ord($char[$i]) % 2 != 0) {\n                $odd++;\n            }\n  \
    \      }\n        return $odd;\n    }\n    return @words;\n}", "    if (my $i\
    \ = index($txt, ' ')) {\n        return split /\\s+/, $txt;\n    } elsif (my $i\
    \ = index($txt, ',')) {\n        return split /,/, $txt;\n    } else {\n     \
    \   return grep { $txt =~ /\\b$_\\b/ } grep { $txt =~ /\\b$_\\b/i && length($_)%2\
    \ } keys %{{ map {$_=>1} 'a'..'z' }};\n    }\n}", "    my $n = 0;\n    for my\
    \ $i (0..length($txt) - 1) {\n        my $c = ord(substr($txt, $i, 1));\n    \
    \    next if ($c == 32); # skip space\n        next if ($c == 44); # skip comma\n\
    \        $n++ if ($c % 2 == 1);\n    }\n    return $n;\n}", "    if (my @result\
    \ = $txt =~ /[a-z]/g) {\n        return scalar @result;\n    } elsif (my @result\
    \ = $txt =~ /,/g) {\n        return $txt =~ s/,/ /gr;\n    } else {\n        return\
    \ $txt =~ s/\\s/ /gr;\n    }\n}", "    return ($txt =~ tr/a-z/a-z/);\n}", "  \
    \  $txt =~ s/\\n//g;\n    $txt =~ s/\\r//g;\n    $txt =~ s/\\s//g;\n    if ($txt\
    \ =~ m/,/) {\n        return split(/,/, $txt);\n    }\n    else {\n        my\
    \ $cnt = 0;\n        my @chars = split(//, $txt);\n        foreach (@chars) {\n\
    \            if (ord($_) % 2 == 1) {\n                $cnt++;\n            }\n\
    \        }\n        return $cnt;\n    }\n}", "    return length(($txt =~ s/([a-z])//g))\
    \ if $txt !~ /[ ,]/;\n    $txt =~ s/[, ]+/ /g;\n    return [split ' ', $txt];\n\
    }", "    my @result;\n    if ($txt =~ /\\s/) {\n        @result = split /\\s/,\
    \ $txt;\n    } elsif ($txt =~ /,/) {\n        @result = split /,/, $txt;\n   \
    \ } else {\n        my $i = 0;\n        foreach my $ch (split //, $txt) {\n  \
    \          $i++ if ord($ch) % 2 == 1;\n        }\n        @result = ($i);\n  \
    \  }\n    return @result;\n}", "    my @words = split(/\\s+/, $txt);\n    if (@words\
    \ == 1) {\n        @words = split(/\\,/, $txt);\n        if (@words == 1) {\n\
    \            my $count = 0;\n            my $length = length($txt);\n        \
    \    for (my $i = 0; $i < $length; $i++) {\n                my $c = substr($txt,\
    \ $i, 1);\n                my $ord = ord($c);\n                if ($ord % 2 ==\
    \ 1) {\n                    $count++;\n                }\n            }\n    \
    \        return $count;\n        }\n    }\n    return @words;\n}", "    my @arr\
    \ = split(/\\s+/, $txt);\n    if (scalar(@arr) == 1) {\n        @arr = split(/\\\
    ,/, $txt);\n        if (scalar(@arr) == 1) {\n            @arr = split(//, $txt);\n\
    \            my $ind = 0;\n            my $res = 0;\n            while($ind <\
    \ scalar(@arr)) {\n                if (ord($arr[$ind]) % 2 == 1) {\n         \
    \           $res++;\n                }\n                $ind++;\n            }\n\
    \            return $res;\n        }\n    }\n    return @arr;\n}", "    my $i\
    \ = 0;\n    my @letters = split //, $txt;\n    foreach my $letter (@letters) {\n\
    \        my $ord = ord($letter);\n        if ($ord >= ord('a') && $ord <= ord('z'))\
    \ {\n            $i++ if ($ord % 2 == 1);\n        }\n    }\n    if ($i == 0)\
    \ {\n        my @split = split /\\s/, $txt;\n        return @split if scalar @split\
    \ > 1;\n        my @split_comma = split /,/, $txt;\n        return @split_comma\
    \ if scalar @split_comma > 1;\n        return $i;\n    }\n    return $i;\n}",
  "    # my code\n    my @arr;\n    if (index($txt, \" \") != -1) {\n        @arr\
    \ = split(\" \", $txt);\n    } elsif (index($txt, \",\") != -1) {\n        @arr\
    \ = split(\",\", $txt);\n    } else {\n        my $ct = 0;\n        my @word =\
    \ split(\"\", $txt);\n        foreach my $char (@word) {\n            my $n =\
    \ ord($char);\n            if ($n % 2 != 0) {\n                $ct++;\n      \
    \      }\n        }\n        push @arr, $ct;\n    }\n    return @arr;\n}", " \
    \   my @words = split(/\\s+/, $txt);\n    return @words if(scalar(@words) > 1);\n\
    \    @words = split(/\\,/, $txt);\n    return @words if(scalar(@words) > 1);\n\
    \    my $result = 0;\n    for(my $i = 0; $i < length($txt); $i++) {\n        my\
    \ $ord = ord(substr($txt, $i, 1));\n        $result++ if($ord % 2 == 1);\n   \
    \ }\n    return $result;\n}", "    my @chars = split(//, $txt);\n    my $white_space\
    \ = 0;\n    my $comma = 0;\n    foreach my $c (@chars) {\n        if ($c eq '\
    \ ') {\n            $white_space = 1;\n        }\n        if ($c eq ',') {\n \
    \           $comma = 1;\n        }\n    }\n    if ($white_space) {\n        my\
    \ @words = split(/ /, $txt);\n        return @words;\n    }\n    if ($comma) {\n\
    \        my @words = split(/,/, $txt);\n        return @words;\n    }\n    my\
    \ $counter = 0;\n    foreach my $c (@chars) {\n        if (ord($c) % 2 != 0) {\n\
    \            $counter++;\n        }\n    }\n    return $counter;\n}", "    my\
    \ @txts = $txt =~ /,/ ? split(/,/, $txt) : $txt =~ /\\s/ ? split(/\\s/, $txt)\
    \ : ();\n    if(scalar @txts){\n        return @txts;\n    }else{\n        my\
    \ $count = 0;\n        for(my $i = 0; $i < length($txt); $i++){\n            if($i\
    \ % 2 == 0){\n                $count += 1 if substr($txt, $i, 1) =~ /[a-z]/;\n\
    \            }\n        }\n        return $count;\n    }\n}", "    if($txt =~\
    \ m/\\s/){\n        return split(/\\s/, $txt);\n    }elsif($txt =~ m/,/){\n  \
    \      return split(/,/, $txt);\n    }else{\n        my $ans = 0;\n        my\
    \ @list = split(//, $txt);\n        foreach my $l (@list){\n            my $ord\
    \ = ord($l);\n            if($ord % 2 == 1){\n                $ans++;\n      \
    \      }\n        }\n        return $ans;\n    }\n}", "    my @tokens = split\
    \ /[ ,]/, $txt;\n    return @tokens if @tokens > 1;\n    my $i = 0;\n    my $k\
    \ = 1;\n    foreach my $c (split //, $txt) {\n        $i += $k if ord(lc($c))\
    \ % 2;\n        $k *= -1;\n    }\n    return $i;\n}", "    if (index($txt, ' ')\
    \ >= 0) {\n        return split(/\\s+/, $txt);\n    }\n    if (index($txt, ',')\
    \ >= 0) {\n        return split(/,/, $txt);\n    }\n    return $txt =~ tr/[a-z]//;\n\
    }", "    my @res;\n    if ($txt =~ /\\s/) {\n        @res = split /\\s/, $txt;\n\
    \    }\n    elsif ($txt =~ /,/) {\n        @res = split /,/, $txt;\n    }\n  \
    \  else {\n        my $t = 0;\n        my $l = length($txt);\n        for (my\
    \ $i = 0; $i < $l; $i++) {\n            my $o = ord(substr($txt, $i, 1));\n  \
    \          if ($o % 2) {\n                $t++;\n            }\n        }\n  \
    \      @res = ($t);\n    }\n    return @res;\n}", "    my(@parts) = split(/\\\
    s+/, $txt);\n    if (@parts == 1) {\n        @parts = split(/\\,/, $txt);\n  \
    \      if (@parts == 1) {\n            @parts = grep { $txt =~ /$_/ } @odd_order_letter;\n\
    \            @parts = scalar(@parts);\n        }\n    }\n    return @parts;\n}",
  "    if ($txt =~ /\\s/) {\n        return split(/\\s/, $txt);\n    } elsif ($txt\
    \ =~ /,/) {\n        return split(/,/, $txt);\n    } else {\n        return grep\
    \ { ord($_) % 2 == 1 } (split(//, $txt));\n    }\n}", "    my $result = -1;\n\
    \    if ($txt =~ /,/) {\n        $result = [split /,/, $txt];\n    } elsif ($txt\
    \ =~ /\\s/) {\n        $result = [split /\\s/, $txt];\n    } else {\n        my\
    \ $odd_count = 0;\n        foreach my $c (split //, $txt) {\n            my $ord\
    \ = ord($c);\n            $odd_count++ if ($ord % 2 == 1);\n        }\n      \
    \  $result = $odd_count;\n    }\n    return $result;\n}", "    my $rv;\n    if\
    \ ($txt =~ / /) {\n        $rv = [split / /, $txt];\n    } elsif ($txt =~ /,/)\
    \ {\n        $rv = [split /,/, $txt];\n    } else {\n        my $i = 0;\n    \
    \    $i++ while ord($txt) > ord('a') + $i;\n        $rv = ($i % 2) ? $i : $i +\
    \ 1;\n    }\n    return $rv;\n}", "    # TODO\n}", "    my @ret;\n    # Your code\
    \ goes here\n    return @ret;\n}", "    # your code here\n    if ($txt =~ /\\\
    s/){\n        return split(/\\s/, $txt);\n    }elsif ($txt =~ /,/){\n        return\
    \ split(/,/, $txt);\n    }else{\n        return scalar (grep{$_ % 2 == 0} map{ord($_)\
    \ - ord('a')} split(//, $txt));\n    }\n}", "    if ($txt =~ m/\\s+/) {\n    \
    \    return(split(/\\s+/, $txt));\n    }\n    if ($txt =~ m/,/) {\n        return(split(/,/,\
    \ $txt));\n    }\n    return(map { ord($_) } grep { ord($_) % 2 } split(//, $txt));\n\
    }", "    return () if $txt =~ /\\s/;\n    my @split = split(\",\", $txt);\n  \
    \  return @split if @split > 1;\n    my $alpha = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my $count = 0;\n    foreach my $c (split(\"\", $txt)) {\n        my $idx\
    \ = index($alpha, $c);\n        $count++ if $idx > -1 && $idx % 2;\n    }\n  \
    \  return $count;\n}", "    my @words = split(/ /, $txt);\n    if ( scalar(@words)\
    \ > 1 ) {\n        return @words;\n    }\n    @words = split(/,/, $txt);\n   \
    \ if ( scalar(@words) > 1 ) {\n        return @words;\n    }\n    my $odds = 0;\n\
    \    for (my $i = 0; $i < length($txt); $i++) {\n        if (ord(substr($txt,\
    \ $i, 1)) % 2) {\n            $odds++;\n        }\n    }\n    return $odds;\n}",
  "    my $a = 0;\n    $a = $txt =~ tr/[a-z]// if $txt =~ tr/a-z//c;\n    $a = $txt\
    \ =~ tr/,// if $txt =~ tr/[a-z]//c;\n    return $a ? $a : [ split /\\s+/, $txt\
    \ ];\n}", "    my $result = [];\n    my $count = 0;\n    my $chars = [];\n   \
    \ my $char;\n    my $idx;\n    my $c;\n    my $i;\n    my $l;\n    $txt =~ s/\\\
    s+/ /g;\n    if($txt =~ m/\\s/){\n        $result = [split(/\\s/, $txt)];\n  \
    \  }\n    elsif($txt =~ m/,/){\n        $result = [split(/,/, $txt)];\n    }\n\
    \    else{\n        $chars = [split(//, $txt)];\n        $idx = 0;\n        $c\
    \ = scalar(@$chars);\n        while($idx < $c){\n            $char = $chars->[$idx];\n\
    \            $i = ord($char);\n            if($i % 2 == 1){\n                $count++;\n\
    \            }\n            $idx++;\n        }\n        $result = $count;\n  \
    \  }\n    return $result;\n}", "    if ($txt =~ m/\\s+/) {\n        return split(/\\\
    s+/, $txt);\n    }\n    elsif ($txt =~ m/,/) {\n        return split(/,/, $txt);\n\
    \    }\n    else {\n        my $odd;\n        for (my $i = 0; $i < length($txt);\
    \ $i++) {\n            my $ch = substr($txt, $i, 1);\n            if ((ord($ch)\
    \ - ord('a')) % 2 == 1) {\n                $odd++;\n            }\n        }\n\
    \        return $odd;\n    }\n}", "    if ($txt =~ /\\s/) {\n        return split(/\\\
    s/, $txt);\n    } elsif ($txt =~ /,/) {\n        return split(/,/, $txt);\n  \
    \  } else {\n        return scalar(grep { ((ord($_) % 2) != 0) } split(//, $txt));\n\
    \    }\n}", "    # TODO: your solution here\n}", "    # Your code here\n    #\
    \ .....\n    if (index($txt, ' ') >= 0) {\n        return split(' ', $txt);\n\
    \    }\n    elsif (index($txt, ',') >= 0) {\n        return split(',', $txt);\n\
    \    }\n    else {\n        my $n = 0;\n        foreach (split('', $txt)) {\n\
    \            if (ord($_) % 2 != 0) {\n                $n++;\n            }\n \
    \       }\n        return $n;\n    }\n}", "    my @words = split /\\s/, $txt;\n\
    \    if (@words == 1) {\n        @words = split /,/, $txt;\n        if (@words\
    \ == 1) {\n            return scalar (grep { ord($_) % 2 == 1 } split //, $txt);\n\
    \        }\n    }\n    return @words;\n}", "    # TODO: return the correct result\n\
    \    return 0;\n}", "    if ($txt =~ /[\\s,]/) {\n        return split /[\\s,]/,\
    \ $txt;\n    } else {\n        my $result = 0;\n        for (my $i = 0; $i < length($txt);\
    \ $i++) {\n            my $c = substr($txt, $i, 1);\n            if (ord($c) %\
    \ 2 == 1) {\n                $result++;\n            }\n        }\n        return\
    \ $result;\n    }\n}", "    my @txt;\n    if ( $txt =~ /\\s/ ) {\n        @txt\
    \ = split(/\\s/, $txt);\n    } elsif ( $txt =~ /,/ ) {\n        @txt = split(/,/,\
    \ $txt);\n    } else {\n        my $odd_count = 0;\n        for (my $i = 0; $i\
    \ < length($txt); $i++) {\n            my $ascii = ord(substr($txt, $i, 1));\n\
    \            if ($ascii % 2 == 1) {\n                $odd_count++;\n         \
    \   }\n        }\n        @txt = ($odd_count);\n    }\n    return @txt;\n}", " \
    \   my $split = index($txt, ' ');\n    if($split == -1) {\n        $split = index($txt,\
    \ ',');\n        if($split == -1) {\n            my $odd = 0;\n            my\
    \ $len = length($txt);\n            for(my $i = 0; $i < $len; $i++) {\n      \
    \          if($i % 2 == 0 && ord(substr($txt, $i, 1)) % 2 == 1) {\n          \
    \          $odd++;\n                }\n            }\n            return $odd;\n\
    \        }\n    }\n    return split /[\\s,]/, $txt;\n}", "    if($txt =~ /\\s/)\
    \ {\n        return [split(/\\s/, $txt)];\n    }\n    if($txt =~ /,/) {\n    \
    \    return [split(/,/, $txt)];\n    }\n    return $txt =~ tr/[a-z]//;\n}", " \
    \   return [] if $txt eq \"\";\n    my @ret = split /,|\\s+/, $txt;\n    return\
    \ @ret if @ret > 1;\n    return grep { $_ % 2 } 0..25;\n}", "    if($txt =~ m/\\\
    s/) {\n        return split(/\\s/, $txt);\n    } else {\n        if($txt =~ m/,/)\
    \ {\n            return split(/,/, $txt);\n        } else {\n            my $count\
    \ = 0;\n            my @chars = split(//, $txt);\n            foreach my $ch (@chars)\
    \ {\n                if(ord($ch)%2 == 1) {\n                    $count++;\n  \
    \              }\n            }\n            return $count;\n        }\n    }\n\
    }", "    my @words = split /\\s+/, $txt;\n    if(@words > 1) {\n        return\
    \ @words;\n    }\n    @words = split /,/, $txt;\n    if(@words > 1) {\n      \
    \  return @words;\n    }\n    my $odd_count = 0;\n    $odd_count++ if $txt =~\
    \ /\\w/;\n    $odd_count++ if $txt =~ /\\A[A-Z]/;\n    $odd_count++ if $txt =~\
    \ /\\w/;\n    $odd_count++ if $txt =~ /[^0-9]/;\n    $odd_count++ if $txt =~ /a/;\n\
    \    $odd_count++ if $txt =~ /[b-z]/;\n    return $odd_count;\n}", "    my $p\
    \ = 0;\n    my @a;\n    if ($txt =~ /\\s/) {\n        @a = split(/\\s/, $txt);\n\
    \    } elsif ($txt =~ /,/) {\n        @a = split(/,/, $txt);\n    } else {\n \
    \       for my $i (0..length($txt)-1) {\n            my $odd = ord(substr($txt,\
    \ $i, 1)) % 2;\n            $p += $odd;\n        }\n        return $p;\n    }\n\
    \    return \\@a;\n}", "    return [split(/\\s+/, $txt)] if $txt =~ /\\s+/;\n\
    \    return [split(/,/, $txt)] if $txt =~ /,/;\n    return scalar(grep { ord($_)\
    \ % 2 == 1 } split(//, $txt));\n}", "    my @words = split(' ', $txt);\n    my\
    \ $num_words = scalar @words;\n    my $num_words_comma = 0;\n    my $num_word_no_space_or_comma\
    \ = 0;\n    for (my $i = 0; $i < $num_words; $i++) {\n        my @words_comma\
    \ = split(',', $words[$i]);\n        my $num_words_comma_in_one_word = scalar\
    \ @words_comma;\n        if ($num_words_comma_in_one_word > 1) {\n           \
    \ $num_words_comma++;\n        }\n        if ($num_words_comma_in_one_word ==\
    \ 1) {\n            $num_word_no_space_or_comma++;\n        }\n    }\n    if ($num_words_comma\
    \ > 0) {\n        @words = split(',', $txt);\n    }\n    if ($num_word_no_space_or_comma\
    \ == $num_words) {\n        my $num_chars = 0;\n        for (my $i = 0; $i < length($txt);\
    \ $i++) {\n            my $c = substr($txt, $i, 1);\n            my $n = ord($c);\n\
    \            if ($n % 2 != 0) {\n                $num_chars++;\n            }\n\
    \        }\n        return $num_chars;\n    }\n    return @words;\n}", "    $txt\
    \ =~ /\\s/ ? split(/\\s/, $txt) : /,/ ? split(/,/, $txt) : lc($txt) =~ s/(.)/$1/g;\n\
    }", "    my @r;\n    if ($txt =~ /\\s/) {\n        @r = split /\\s/, $txt;\n \
    \   } elsif ($txt =~ /,/) {\n        @r = split /,/, $txt;\n    } else {\n   \
    \     my $r = 0;\n        for (0..25) {\n            $r++ if $_ % 2;\n       \
    \ }\n        return $r;\n    }\n    return @r;\n}", "    return @{[split(/ /,\
    \ $txt)]} if $txt =~ / /;\n    return @{[split(/,/, $txt)]} if $txt =~ /,/;\n\
    \    my $odd_count = 0;\n    my @chars = split(\"\", $txt);\n    foreach my $i\
    \ (0..$#chars) {\n        my $char = lc($chars[$i]);\n        if ($char ge 'a'\
    \ && $char le 'z') {\n            $odd_count++ if $i % 2 == 1;\n        }\n  \
    \  }\n    return $odd_count;\n}", "    if ($txt =~ /\\s/) {\n        return split('\
    \ ', $txt);\n    } elsif ($txt =~ /,/) {\n        return split(',', $txt);\n \
    \   } else {\n        return grep { ord($_) % 2 } split('', $txt);\n    }\n}",
  "    # your solution here\n}", "    my @words = split /[\\s,]/, $txt;\n    return\
    \ @words if @words > 1;\n    my $x = 0;\n    for my $c (split //, $txt) {\n  \
    \      $x++ if ord($c) % 2 == 1;\n    }\n    return $x;\n}", "    if($txt =~ m/\
    \ /) {\n        my @split = split(/\\s+/, $txt);\n        return \\@split;\n \
    \   }\n    elsif($txt =~ m/,/) {\n        my @split = split(/,/, $txt);\n    \
    \    return \\@split;\n    }\n    else {\n        my $x = 0;\n        my @split\
    \ = split(//, $txt);\n        foreach my $i (@split) {\n            if(ord($i)\
    \ % 2 != 0) {\n                $x++;\n            }\n        }\n        return\
    \ $x;\n    }\n}", "    my(@r);\n    my($ord) = $txt =~ s/[a-z]//g;\n    if($txt\
    \ =~ /\\s/){\n        @r = split(/\\s/, $txt);\n    }\n    elsif($txt =~ /,/){\n\
    \        @r = split(/,/, $txt);\n    }\n    else{\n        return $ord;\n    }\n\
    \    return \\@r;\n}", "    my $ret;\n    my @list;\n    if($txt =~ m/\\s/){\n\
    \        @list = split /\\s/, $txt;\n        $ret = \\@list;\n    }\n    elsif($txt\
    \ =~ m/,/){\n        @list = split /,/, $txt;\n        $ret = \\@list;\n    }\n\
    \    else{\n        my $cnt = 0;\n        for my $c (split //, $txt){\n      \
    \      if(ord($c)%2){\n                $cnt++;\n            }\n        }\n   \
    \     $ret = $cnt;\n    }\n    return $ret;\n}", "    # TODO: implement code here.\n\
    \    if($txt=~ /\\s/){\n        return split(/\\s/,$txt);\n    }\n    elsif($txt=~\
    \ /,/){\n        return split(/,/,$txt);\n    }\n    else{\n        my $count\
    \ = 0;\n        my @chars = split(//,$txt);\n        foreach my $c (@chars){\n\
    \            if(ord($c)%2 == 1){\n                $count ++;\n            }\n\
    \        }\n        return $count;\n    }\n}", "    if($txt =~ /\\s/){\n     \
    \   return split(/\\s/, $txt);\n    }\n    elsif($txt =~ /,/){\n        return\
    \ split(/,/, $txt);\n    }\n    else{\n        my $count = 0;\n        my @str\
    \ = split(//, $txt);\n        foreach my $i(@str){\n            my $ord = ord($i);\n\
    \            if($ord % 2 != 0){\n                $count++;\n            }\n  \
    \      }\n        return $count;\n    }\n}", "    if($txt =~ / /) {\n        return\
    \ split(/ /, $txt);\n    }\n    if($txt =~ /,/) {\n        return split(/,/, $txt);\n\
    \    }\n    if($txt =~ /^[a-z]+$/) {\n        my $cnt = 0;\n        for(my $i\
    \ = 0; $i < length($txt); $i++) {\n            if($i % 2 == 1) {\n           \
    \     $cnt++ if(ord(substr($txt, $i, 1)) % 2 == 1);\n            }\n        }\n\
    \        return $cnt;\n    }\n    return $txt;\n}", "    my @values = split(/\\\
    s+/, $txt);\n    my $size = scalar @values;\n    if ($size == 1) {\n        @values\
    \ = split(',', $txt);\n        $size = scalar @values;\n        if ($size == 1)\
    \ {\n            my $word = $txt;\n            $word =~ s/[^a-z]//g;\n       \
    \     my $odd = 0;\n            for (my $i = 0; $i < length($word); $i++) {\n\
    \                my $char = substr($word, $i, 1);\n                my $idx = ord($char)\
    \ - ord('a');\n                if ($idx % 2 == 1) {\n                    $odd++;\n\
    \                }\n            }\n            return $odd;\n        }\n    }\n\
    \    return @values;\n}", "    my $result = [];\n    my $position = 0;\n    my\
    \ $length = length($txt);\n    my $letter_count = 0;\n    my $delimiter = ' ';\n\
    \    my $delimiter_count = 0;\n    for ($position = 0; $position < $length; $position++)\
    \ {\n        my $char = substr($txt, $position, 1);\n        if ($char eq $delimiter)\
    \ {\n            $delimiter_count += 1;\n        }\n    }\n    if ($delimiter_count\
    \ == 0) {\n        $delimiter = ',';\n        for ($position = 0; $position <\
    \ $length; $position++) {\n            my $char = substr($txt, $position, 1);\n\
    \            if ($char eq $delimiter) {\n                $delimiter_count += 1;\n\
    \            }\n        }\n    }\n    if ($delimiter_count == 0) {\n        for\
    \ ($position = 0; $position < $length; $position++) {\n            my $char =\
    \ substr($txt, $position, 1);\n            if ($char =~ /[a-z]/) {\n         \
    \       if (ord($char) % 2 == 1) {\n                    $letter_count += 1;\n\
    \                }\n            }\n        }\n        return $letter_count;\n\
    \    }\n    my $current_word = '';\n    for ($position = 0; $position < $length;\
    \ $position++) {\n        my $char = substr($txt, $position, 1);\n        if ($char\
    \ eq $delimiter) {\n            push @$result, $current_word;\n            $current_word\
    \ = '';\n        } else {\n            $current_word .= $char;\n        }\n  \
    \  }\n    push @$result, $current_word;\n    return $result;\n}", "    if ($txt\
    \ =~ /\\s+/) {\n        return split /\\s+/, $txt;\n    } elsif ($txt =~ /,/)\
    \ {\n        return split /,/, $txt;\n    } else {\n        my $cnt = 0;\n   \
    \     for (split //, $txt) {\n            my $ord = ord($_) - ord('a');\n    \
    \        $cnt++ if $ord % 2 == 1;\n        }\n        return $cnt;\n    }\n}",
  "    my @words = ();\n    if ($txt =~ m/\\s/) {\n        @words = split /\\s/, $txt;\n\
    \    } elsif ($txt =~ m/,/) {\n        @words = split /,/, $txt;\n    } else {\n\
    \        my $i;\n        for (0..length($txt)-1) {\n            $i++ if (substr($txt,\
    \ $_, 1) eq chr(97+$_));\n        }\n        return $i;\n    }\n    return @words;\n\
    }", "    # Your code here\n}", "    if ($txt =~ /\\s/) {\n        return split('\
    \ ', $txt);\n    } elsif ($txt =~ /,/) {\n        return split(',', $txt);\n \
    \   } else {\n        my $count = 0;\n        for my $char (split('', $txt)) {\n\
    \            my $ord = ord($char);\n            if ($ord % 2) {\n            \
    \    $count++;\n            }\n        }\n        return $count;\n    }\n}", " \
    \   if (index($txt, ' ') != -1) {\n        return split(/ /, $txt);\n    }\n \
    \   elsif (index($txt, ',') != -1) {\n        return split(/,/, $txt);\n    }\n\
    \    else {\n        my @chars = split('', $txt);\n        my $odd = 0;\n    \
    \    for my $c (@chars) {\n            if (ord($c) % 2 == 1) {\n             \
    \   $odd++;\n            }\n        }\n        return $odd;\n    }\n}", "    if\
    \ ($txt =~ /\\s/) {\n        return split /\\s/, $txt;\n    } elsif ($txt =~ /,/)\
    \ {\n        return split /,/, $txt;\n    } else {\n        my $num = 0;\n   \
    \     for (my $i = 0; $i < length($txt); $i++) {\n            if ($i % 2 == 0)\
    \ {\n                $num++;\n            }\n        }\n        return $num;\n\
    \    }\n}", "    if ($txt =~ /\\s/) {\n        return [split(/\\s/, $txt)];\n\
    \    }\n    elsif ($txt =~ /,/) {\n        return [split(/\\,/, $txt)];\n    }\n\
    \    else {\n        my @letters = split(//, $txt);\n        my $count = 0;\n\
    \        for (my $i = 0; $i < scalar(@letters); $i++) {\n            my $val =\
    \ ord($letters[$i]) - ord('a');\n            if ($val % 2 == 1) {\n          \
    \      $count++;\n            }\n        }\n        return $count;\n    }\n}",
  "    my @words = split /[\\s,]/, $txt;\n    return \\@words if scalar @words > 1;\n\
    \    return scalar grep { ord(lc $_) % 2 } split //, $txt;\n}", "    my @chars\
    \ = split //, $txt;\n    my @ret;\n    my $run = 0;\n    my $i = 0;\n    my $odds\
    \ = 0;\n    foreach my $char (@chars) {\n        if ($char eq ' ' || $char eq\
    \ ',') {\n            if ($run > 0) {\n                push @ret, substr($txt,\
    \ $i - $run, $run);\n                $run = 0;\n            }\n        } else\
    \ {\n            $run++;\n            if (ord($char) % 2 == 1) {\n           \
    \     $odds++;\n            }\n        }\n        $i++;\n    }\n    if ($run >\
    \ 0) {\n        push @ret, substr($txt, $i - $run, $run);\n    }\n    if (@ret\
    \ == 0) {\n        return $odds;\n    }\n    return @ret;\n}", "    if ($txt =~\
    \ m/\\s/) {\n        return (split /\\s/, $txt);\n    } elsif ($txt =~ m/,/) {\n\
    \        return (split /,/, $txt);\n    } else {\n        return scalar(grep $_\
    \ % 2, map ord($_) - ord('a'), split //, $txt);\n    }\n}", "    my @result;\n\
    \    if ($txt =~ /[\\s]+/) {\n        @result = split(\"[\\s]+\", $txt);\n   \
    \ } elsif ($txt =~ /[,]+/) {\n        @result = split(\"[,]+\", $txt);\n    }\
    \ else {\n        my $text_size = length($txt);\n        my $size = 0;\n     \
    \   for (my $i = 0; $i < $text_size; $i++) {\n            if (ord(substr($txt,\
    \ $i, 1)) % 2 != 0) {\n                $size++;\n            }\n        }\n  \
    \      @result = $size;\n    }\n    return @result;\n}", "    my @words = $txt\
    \ =~ /[^\\s]+/g;\n    if (scalar @words == 1) {\n        @words = $txt =~ /[^,]+/g;\n\
    \        if (scalar @words == 1) {\n            return scalar grep {$_ % 2} map\
    \ {ord($_) - ord('a')} split(//, $txt);\n        }\n    }\n    return @words;\n\
    }", "    if ($txt =~ /\\s/) {\n        return [split(' ', $txt)];\n    } elsif\
    \ ($txt =~ /,/) {\n        return [split(',', $txt)];\n    } else {\n        my\
    \ @c = split('', $txt);\n        my $n = 0;\n        foreach my $c (@c) {\n  \
    \          my $ord = ord($c) - ord('a');\n            $n++ if ($ord % 2) == 1;\n\
    \        }\n        return $n;\n    }\n}", "    my @p;\n    if ($txt =~ /\\s/)\
    \ {\n        @p = split /\\s/, $txt;\n    } elsif ($txt =~ /,/) {\n        @p\
    \ = split /,/, $txt;\n    } else {\n        my $cnt = 0;\n        my @p = split\
    \ //, $txt;\n        foreach my $c (@p) {\n            if (ord($c) % 2) {\n  \
    \              $cnt++;\n            }\n        }\n        return $cnt;\n    }\n\
    \    return @p;\n}", "    if ( $txt =~ /\\s/ ) {\n        return split( /\\s/,\
    \ $txt );\n    }\n    elsif ( $txt =~ /,/ ) {\n        return split( /,/, $txt\
    \ );\n    }\n    else {\n        my $count = 0;\n        my @chars = split( //,\
    \ $txt );\n        foreach my $c (@chars) {\n            if ( ord($c) % 2 ) {\n\
    \                $count++;\n            }\n        }\n        return $count;\n\
    \    }\n}", "    if ($txt =~ m/[\\s]/) {\n        return split(/\\s/, $txt);\n\
    \    } elsif ($txt =~ m/[,]/) {\n        return split(/,/, $txt);\n    } else\
    \ {\n        return grep {ord($_) % 2} split(//, $txt);\n    }\n}", "    if ($txt\
    \ =~ m/\\s/) {\n        return [split /\\s/, $txt];\n    }\n    elsif ($txt =~\
    \ m/,/) {\n        return [split /,/, $txt];\n    }\n    else {\n        my @letters\
    \ = split //, $txt;\n        my $result = 0;\n        foreach my $letter (@letters)\
    \ {\n            if (ord($letter) % 2 == 1) {\n                $result++;\n  \
    \          }\n        }\n        return $result;\n    }\n}", "    my @ret;\n \
    \   if ($txt =~ m/ /) {\n        @ret = split / /, $txt;\n    }\n    elsif ($txt\
    \ =~ m/,/) {\n        @ret = split /,/, $txt;\n    }\n    else {\n        my $sum\
    \ = 0;\n        foreach my $c (split //, $txt) {\n            $sum += ord($c)\
    \ if (ord($c) % 2 != 0);\n        }\n        @ret = ($sum);\n    }\n    return\
    \ @ret;\n}", "    $txt =~ s/\\s//g;\n    if ($txt =~ /,/) {\n        return [split\
    \ /,/, $txt];\n    } else {\n        my $count = 0;\n        for my $i (0..length($txt)-1)\
    \ {\n            my $char = substr($txt, $i, 1);\n            $count++ if (ord($char)\
    \ % 2 == 1);\n        }\n        return $count;\n    }\n}", "    if ( $txt =~\
    \ m/\\s/ ) {\n        return split(/\\s/, $txt);\n    }\n    elsif ( $txt =~ m/,/\
    \ ) {\n        return split(/,/, $txt);\n    }\n    else {\n        my $sum =\
    \ 0;\n        foreach my $c (split //, $txt) {\n            my $ord = ord($c)\
    \ - ord('a');\n            if ( $ord % 2 == 1 ) {\n                $sum++;\n \
    \           }\n        }\n        return $sum;\n    }\n}", "    my @a;\n    my\
    \ $c;\n    if ($txt =~ /\\s/) {\n        @a = split(\" \", $txt);\n    } elsif\
    \ ($txt =~ /,/) {\n        @a = split(\",\", $txt);\n    } else {\n        for\
    \ my $c (split(\"\", $txt)) {\n            my $n = ord($c) - ord('a');\n     \
    \       if ($n % 2) {\n                $c++;\n            }\n        }\n     \
    \   $a[0] = $c;\n    }\n    return @a;\n}", "    my @split;\n    if($txt =~ m/[\\\
    s,]/){\n        if($txt =~ m/[\\s]/){\n            @split = split /\\s/, $txt;\n\
    \        }\n        else{\n            @split = split /,/, $txt;\n        }\n\
    \    }\n    else{\n        my $count = 0;\n        foreach my $letter (split //,\
    \ $txt){\n            if(ord($letter) % 2 != 0){\n                $count++;\n\
    \            }\n        }\n        return $count;\n    }\n    return @split;\n\
    }", "    my $spaces = index($txt, ' ');\n    my $commas = index($txt, ',');\n\
    \    if ($spaces == -1 && $commas == -1) {\n        my $i = 0;\n        $i++ while\
    \ ($txt =~ s/([a-z])[a-z]*\\1//g);\n        return $i;\n    }\n    if ($spaces\
    \ > -1 && $commas > -1) {\n        return split(/\\s|,/, $txt);\n    }\n    if\
    \ ($spaces > -1) {\n        return split(/\\s/, $txt);\n    }\n    return split(/,/,\
    \ $txt);\n}", "    # I'll assume the whitespace characters are space and tab,\
    \ to keep things simple.\n    my @words = split(/[ \\t]+/, $txt);\n    if ( @words\
    \ > 1 ) {\n        return \\@words;\n    }\n    # If there's only one word, split\
    \ on commas.\n    @words = split(/,/, $txt);\n    if ( @words > 1 ) {\n      \
    \  return \\@words;\n    }\n    # If there's no commas, split on letters.\n  \
    \  my $count = 0;\n    for ( my $i = 0; $i < length($txt); $i++ ) {\n        my\
    \ $c = substr($txt, $i, 1);\n        my $ord = ord($c);\n        if ( $ord >=\
    \ ord('a') && $ord <= ord('z') && $ord % 2 == 1 ) {\n            $count++;\n \
    \       }\n    }\n    return $count;\n}", "    my @ans;\n    if ($txt =~ m/[,\\\
    s]/) {\n        if ($txt =~ m/[,]/) {\n            @ans = split(/,/, $txt);\n\
    \        } else {\n            @ans = split(/\\s/, $txt);\n        }\n    } else\
    \ {\n        my $num_letters = $txt =~ tr/[a-z]//;\n        my $sum = 0;\n   \
    \     for (my $i = 0; $i < $num_letters; $i += 2) {\n            $sum += ord(substr($txt,\
    \ $i, 1)) - ord('a');\n        }\n        @ans = ($sum);\n    }\n    return @ans;\n\
    }", "    my @words = split /\\s+/, $txt;\n    if (@words == 1) {\n        @words\
    \ = split /,/, $txt;\n        if (@words == 1) {\n            return scalar(grep\
    \ {$_ % 2 == 1} map {ord($_) - ord('a')} split //, $txt);\n        }\n    }\n\
    \    return @words;\n}", "    my $t = \"\";\n    my @t = ();\n    my $u = 0;\n\
    \    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $A = 0;\n    $A = length($txt);\n    $u = index($txt, \" \");\n    $v\
    \ = index($txt, \",\");\n    if ($u != -1) {\n        $t = substr($txt, 0, $u);\n\
    \        push(@t, $t);\n        $t = substr($txt, $u+1, $A-$u-1);\n        push(@t,\
    \ $t);\n        return @t;\n    }\n    if ($v != -1) {\n        $t = substr($txt,\
    \ 0, $v);\n        push(@t, $t);\n        $t = substr($txt, $v+1, $A-$v-1);\n\
    \        push(@t, $t);\n        return @t;\n    }\n    $w = 0;\n    $x = 0;\n\
    \    while ($x < $A) {\n        $y = ord(substr($txt, $x, 1));\n        if ($y\
    \ > 96 && $y < 123) {\n            $z = $y - 97;\n            if ($z % 2 == 1)\
    \ {\n                $w++;\n            }\n        }\n        $x++;\n    }\n \
    \   return $w;\n}", "    my @result;\n    if ($txt =~ m{\\s}) {\n        @result\
    \ = split(/\\s/, $txt);\n    } elsif ($txt =~ m{,}) {\n        @result = split(/,/,\
    \ $txt);\n    } else {\n        my $count = 0;\n        foreach my $c (split(//,\
    \ $txt)) {\n            if (ord($c) % 2) {\n                $count++;\n      \
    \      }\n        }\n        return $count;\n    }\n    return @result;\n}", " \
    \   if ($txt =~ /\\s+/) {\n        my @result = split(/\\s+/, $txt);\n       \
    \ return @result;\n    }\n    elsif ($txt =~ /,/) {\n        my @result = split(/,/,\
    \ $txt);\n        return @result;\n    }\n    else {\n        my $result = 0;\n\
    \        my @alpha = ('a'..'z');\n        my $i = 0;\n        foreach my $alpha\
    \ (@alpha) {\n            if ($txt =~ /$alpha/) {\n                if ($i % 2\
    \ == 0) {\n                    $result++;\n                }\n            }\n\
    \            $i++;\n        }\n        return $result;\n    }\n}", "    my @result;\n\
    \    if($txt =~ m/\\s+/){\n        @result = split(/\\s+/, $txt);\n    }elsif($txt\
    \ =~ m/,/){\n        @result = split(/,/, $txt);\n    }else{\n        my $odd_count\
    \ = 0;\n        my @char_ascii = map {ord($_)} split(//, $txt);\n        for my\
    \ $char_ascii (@char_ascii){\n            if($char_ascii % 2 == 1){\n        \
    \        $odd_count += 1;\n            }\n        }\n        @result = $odd_count;\n\
    \    }\n    return @result;\n}", "    my @words = ();\n    my $is_ok = 0;\n  \
    \  my $q = \"\";\n    my $w = \"\";\n    my $c = \"\";\n    my $idx = 0;\n   \
    \ my $char_count = 0;\n    my $odd_count = 0;\n    while(1) {\n        $idx++;\n\
    \        $c = substr($txt, $idx, 1);\n        if (length($c) == 0) {\n       \
    \     if (length($w) > 0) {\n                push(@words, $w);\n            }\n\
    \            last;\n        }\n        if (($c eq \",\") || ($c eq \" \")) {\n\
    \            if ($q eq \"\") {\n                if (length($w) > 0) {\n      \
    \              push(@words, $w);\n                }\n                $w = \"\"\
    ;\n            } else {\n                $w .= $c;\n            }\n        } else\
    \ {\n            if (($c eq \"'\") || ($c eq '\"')) {\n                if ($q\
    \ eq \"\") {\n                    $q = $c;\n                } elsif ($q eq $c)\
    \ {\n                    $q = \"\";\n                }\n                $w .=\
    \ $c;\n            } else {\n                $w .= $c;\n            }\n      \
    \  }\n    }\n    if (($char_count > 0) && ($char_count == $odd_count)) {\n   \
    \     return $odd_count;\n    } else {\n        return @words;\n    }\n}", " \
    \   my @words = split(/\\s+/, $txt);\n    return @words if @words;\n    @words\
    \ = split(/,/, $txt);\n    return @words if @words;\n    my $num = 0;\n    foreach\
    \ my $char (split //, $txt) {\n        my $ord = ord($char);\n        $num++ if\
    \ $ord & 1;\n    }\n    return $num;\n}", "    my @split_words = split( /\\s/,\
    \ $txt );\n    if ( @split_words > 1 ) {\n        return \\@split_words;\n   \
    \ }\n    else {\n        my @comma_split = split( /,/, $txt );\n        if ( @comma_split\
    \ > 1 ) {\n            return \\@comma_split;\n        }\n        else {\n   \
    \         my $count = 0;\n            foreach my $letter ( split( //, $txt ) )\
    \ {\n                my $num = ord($letter);\n                if ( $num % 2 !=\
    \ 0 ) {\n                    $count++;\n                }\n            }\n   \
    \         return $count;\n        }\n    }\n}", "    my @result;\n    #your code\
    \ here\n    if($txt =~ / /) {\n        @result = split(/ /, $txt);\n    }\n  \
    \  elsif($txt =~ /,/) {\n        @result = split(/,/, $txt);\n    }\n    else\
    \ {\n        my $i = 0;\n        my $a = ord('a');\n        my $z = ord('z');\n\
    \        while($a <= $z) {\n            if($a % 2 == 1) {\n                $i++;\n\
    \            }\n            $a++;\n        }\n        return $i;\n    }\n    return\
    \ @result;\n}", "    # Return the result\n}", "    return [split(\" \", $txt)]\
    \ if $txt =~ /\\s/;\n    return [split(\",\", $txt)] if $txt =~ /,/;\n    return\
    \ $txt =~ tr/[a-z]// % 2;\n}", "    if ($txt =~ /\\s/) {\n        my @out = split(/\\\
    s/, $txt);\n        return \\@out;\n    } elsif ($txt =~ /,/) {\n        my @out\
    \ = split(/,/, $txt);\n        return \\@out;\n    } else {\n        my $odd_cnt\
    \ = 0;\n        foreach my $ch (split(//, $txt)) {\n            if (ord($ch) %\
    \ 2 == 1) {\n                $odd_cnt++;\n            }\n        }\n        return\
    \ $odd_cnt;\n    }\n}", "    if (index($txt, ' ') >= 0) {\n        return [split\
    \ / /, $txt];\n    } elsif (index($txt, ',') >= 0) {\n        return [split /,/,\
    \ $txt];\n    } else {\n        my $count = 0;\n        my @chars = split //,\
    \ $txt;\n        for (@chars) {\n            my $val = ord($_) - ord('a');\n \
    \           if ($val % 2 == 1) {\n                $count++;\n            }\n \
    \       }\n        return $count;\n    }\n}", "    if (my @ws = $txt =~ /\\s/g)\
    \ {\n        return [ split(/\\s/, $txt) ];\n    }\n    elsif (my @cs = $txt =~\
    \ /,/g) {\n        return [ split(/,/, $txt) ];\n    }\n    else {\n        return\
    \ scalar(grep { ord(lc $_) % 2 == 1 } split(//, $txt));\n    }\n}", "    if (index($txt,\
    \ ' ') != -1) {\n        return [split(' ', $txt)];\n    }\n    if (index($txt,\
    \ ',') != -1) {\n        return [split(',', $txt)];\n    }\n    my $cnt = 0;\n\
    \    for my $l (split('', $txt)) {\n        $cnt++ if (ord($l) % 2 == 1);\n  \
    \  }\n    return $cnt;\n}", "    my @array = split(/\\s+/, $txt);\n    if (@array\
    \ > 1) {\n        return @array;\n    }\n    @array = split(/,/, $txt);\n    if\
    \ (@array > 1) {\n        return @array;\n    }\n    return length($txt) - (ord(substr($txt,\
    \ -1)) % 2);\n}", "    my @a;\n    if($txt =~ /\\s+/){\n        @a = split(/\\\
    s+/, $txt);\n    }elsif($txt =~ /,/){\n        @a = split(/,/, $txt);\n    }else{\n\
    \        my $i = 1;\n        for my $c (split(\"\", $txt)){\n            if($i\
    \ % 2 == 1 && ord($c) >= 97 && ord($c) <= 122){\n                push(@a, ord($c));\n\
    \            }\n            $i++;\n        }\n    }\n    return @a;\n}", "   \
    \ my @res;\n    if ($txt =~ m/[\\s]/) {\n        @res = split(/[\\s]/, $txt);\n\
    \    } elsif ($txt =~ m/[,]/) {\n        @res = split(/[,]/, $txt);\n    } else\
    \ {\n        my $cnt = 0;\n        my @letters = split(\"\", $txt);\n        foreach\
    \ my $i (@letters) {\n            my $num = ord($i);\n            if ($num % 2\
    \ != 0) {\n                $cnt++;\n            }\n        }\n        @res = ($cnt);\n\
    \    }\n    return @res;\n}", "    # your code goes here\n}", "    my $cnt = 0;\n\
    \    if($txt =~ /\\s/) {\n        my @ans = split(/\\s/, $txt);\n        return\
    \ \\@ans;\n    }\n    elsif($txt =~ /,/) {\n        my @ans = split(/,/, $txt);\n\
    \        return \\@ans;\n    }\n    else {\n        for(my $i = 0; $i < length($txt);\
    \ $i++) {\n            my $ord = ord(substr($txt, $i, 1));\n            if($ord\
    \ % 2 == 1) {\n                $cnt++;\n            }\n        }\n        return\
    \ $cnt;\n    }\n}", "    if ($txt =~ /\\s/) {\n        return split ' ', $txt;\n\
    \    }\n    if ($txt =~ /,/) {\n        return split ',', $txt;\n    }\n    return\
    \ grep {ord($_)%2} split '', $txt;\n}", "    if($txt =~ / /) {\n        return\
    \ split(/ /, $txt);\n    }\n    elsif($txt =~ /,/) {\n        return split(/,/,\
    \ $txt);\n    }\n    else {\n        my $count = 0;\n        for(my $i = 0; $i\
    \ < length($txt); $i++) {\n            my $c = substr($txt, $i, 1);\n        \
    \    my $ascii = ord($c);\n            if($ascii % 2 == 1) {\n               \
    \ $count++;\n            }\n        }\n        return $count;\n    }\n}", "  \
    \  # Place your code here\n    my @result;\n    if ($txt =~ /\\s/){\n        @result\
    \ = split(\" \", $txt);\n    } elsif ($txt =~ /,/){\n        @result = split(\"\
    ,\", $txt);\n    } else {\n        @result = grep { ord(substr($_,0,1))%2 != 0\
    \ } (split(\"\", $txt));\n    }\n    return @result;\n}", "    return [split('\
    \ ', $txt)] if ($txt =~ /\\s/);\n    return [split(',', $txt)] if ($txt =~ /,/);\n\
    \    return scalar(grep {$_ % 2 == 1} map {ord($_) - ord('a')} split(//, $txt));\n\
    }", "    if ( $txt =~ m/[^a-zA-Z0-9\\s,]/ ) { return $txt }\n    if ( $txt =~\
    \ m/\\s/ ) { return split(/\\s/, $txt) }\n    if ( $txt =~ m/,/ ) { return split(/,/,\
    \ $txt) }\n    if ( $txt =~ m/^[a-z]*$/ ) { return $txt =~ tr/a-z//%2 }\n    return;\n\
    }", "    my @res;\n    my $count = 0;\n    if($txt =~ /\\s/){\n        @res =\
    \ split /\\s/, $txt;\n    }elsif($txt =~ /,/){\n        @res = split /,/, $txt;\n\
    \    }else{\n        for(my $i = 0; $i < length($txt); $i++){\n            if(($i\
    \ % 2) != 0){\n                if($txt =~ /[a-z]/){\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return @res ? \\@res\
    \ : $count;\n}", "    if ($txt =~ /\\s/) {\n        return split(' ', $txt);\n\
    \    }\n    elsif ($txt =~ /,/) {\n        return split(',', $txt);\n    }\n \
    \   else {\n        my @chars = split('', $txt);\n        my $count = 0;\n   \
    \     for my $ch (@chars) {\n            if (ord($ch) % 2 == 1) {\n          \
    \      $count++;\n            }\n        }\n        return $count;\n    }\n}",
  "    my $w = index($txt, ' ');\n    if ($w == -1) {\n        $w = index($txt, ',');\n\
    \        if ($w == -1) {\n            return scalar(grep { $_ % 2 } map { ord($_)\
    \ - ord('a') } split(//, $txt));\n        }\n    }\n    return [ split(/[, ]/,\
    \ $txt) ];\n}", "    if ($txt =~ /\\s/) {\n        my @arr = split /\\s/, $txt;\n\
    \        return \\@arr;\n    } elsif ($txt =~ /,/) {\n        my @arr = split\
    \ /,/, $txt;\n        return \\@arr;\n    } else {\n        my $res = () = $txt\
    \ =~ /[a-z]/g;\n        return $res;\n    }\n}", "    #  0       1\n    # /\\\
    S+\\s+/g\n    my @words = split /\\s+/, $txt;\n    if(scalar @words > 1) {\n \
    \       return \\@words;\n    }\n    #  0        1\n    # /,\\s+/g\n    @words\
    \ = split /,\\s+/, $txt;\n    if(scalar @words > 1) {\n        return \\@words;\n\
    \    }\n    #  0          1\n    # /[a-z]/g\n    my @chars = split //, $txt;\n\
    \    my $i = 0;\n    my $odds = 0;\n    foreach my $char (@chars) {\n        if($i\
    \ % 2 == 1) {\n            $odds++;\n        }\n        $i++;\n    }\n    return\
    \ $odds;\n}", "    if($txt =~ /\\s/){\n        $txt =~ s/\\s+/ /g;\n        return\
    \ split(/ /, $txt);\n    }else{\n        if($txt =~ /,/){\n            $txt =~\
    \ s/,+/,/g;\n            return split(/,/, $txt);\n        }else{\n          \
    \  my $odd = 0;\n            for(my $i = 0; $i < length($txt); $i++){\n      \
    \          my $ord = ord(substr($txt, $i, 1));\n                if($ord % 2 ==\
    \ 1){\n                    $odd++;\n                }\n            }\n       \
    \     return $odd;\n        }\n    }\n}", "    my $result = \"\";\n    my @results\
    \ = ();\n    my @chars = split(\"\", $txt);\n    my $count = 0;\n    foreach my\
    \ $char (@chars) {\n        if ($char eq \" \") {\n            if ($result ne\
    \ \"\") {\n                push(@results, $result);\n                $result =\
    \ \"\";\n            }\n        } elsif ($char eq \",\") {\n            if ($result\
    \ ne \"\") {\n                push(@results, $result);\n                $result\
    \ = \"\";\n            }\n            push(@results, $char);\n        } else {\n\
    \            $result .= $char;\n        }\n    }\n    if ($result ne \"\") {\n\
    \        push(@results, $result);\n    }\n    $count = scalar(@results);\n   \
    \ if ($count eq 0) {\n        $count = $txt =~ tr/a-z// % 2;\n    }\n    return\
    \ $count;\n}", "    # your solution here\n    my @result;\n    if ($txt =~ /\\\
    s/) {\n        @result = split(/\\s/, $txt);\n    } elsif ($txt =~ /,/) {\n  \
    \      @result = split(/,/, $txt);\n    } else {\n        my $count = 0;\n   \
    \     my @s = split(//, $txt);\n        for (my $i = 0; $i < @s; $i++) {\n   \
    \         if (ord($s[$i]) % 2 != 0) {\n                $count++;\n           \
    \ }\n        }\n        return $count;\n    }\n    return @result;\n}", "    my\
    \ @r = split /[\\s,]/, $txt;\n    return @r if @r > 1;\n    return grep { $r[0]\
    \ =~ /(?=\\w)\\w{$_}/ } (0 .. 25);\n}", "    if($txt !~ /\\s/){\n        if($txt\
    \ !~ /,/){\n            return length(grep { $txt =~ /$_/ } ('a'..'z'))\n    \
    \    }else{\n            return [split(\",\",$txt)];\n        }\n    }else{\n\
    \        return [split(\" \",$txt)];\n    }\n}", "    $txt =~ s/^\\s+|\\s+$//g;\n\
    \    $txt =~ s/^\\s+|\\s+$//g;\n    my $comma_index = index($txt, \",\");\n  \
    \  my $space_index = index($txt, \" \");\n    my $txt_length = length($txt);\n\
    \    if ($comma_index >= 0 && $space_index >= 0) {\n        my $lesser_index =\
    \ $comma_index < $space_index ? $comma_index : $space_index;\n        my $word1\
    \ = substr($txt, 0, $lesser_index);\n        my $word2 = substr($txt, $lesser_index\
    \ + 1, $txt_length - $lesser_index);\n        return [$word1, $word2];\n    }\n\
    \    elsif ($comma_index >= 0) {\n        my $word1 = substr($txt, 0, $comma_index);\n\
    \        my $word2 = substr($txt, $comma_index + 1, $txt_length - $comma_index);\n\
    \        return [$word1, $word2];\n    }\n    elsif ($space_index >= 0) {\n  \
    \      my $word1 = substr($txt, 0, $space_index);\n        my $word2 = substr($txt,\
    \ $space_index + 1, $txt_length - $space_index);\n        return [$word1, $word2];\n\
    \    }\n    else {\n        my $count = 0;\n        my @chars = split //, $txt;\n\
    \        foreach my $c (@chars) {\n            my $ord = ord($c);\n          \
    \  if ($ord % 2 == 1) {\n                $count++;\n            }\n        }\n\
    \        return $count;\n    }\n}", "    # your code here\n}", "    if ($txt =~\
    \ m/\\s+/) {\n        return [split(/\\s+/, $txt)];\n    }\n    if ($txt =~ m/,/)\
    \ {\n        return [split(/,/, $txt)];\n    }\n    return [scalar(grep($_ % 2,\
    \ map(ord($_) - ord('a'), split(//, $txt))))];\n}", "    my @result;\n    if ($txt\
    \ =~ /\\s/) {\n        @result = split(' ', $txt);\n    }\n    elsif ($txt =~\
    \ /,/) {\n        @result = split(',', $txt);\n    }\n    else {\n        my $odd\
    \ = 0;\n        foreach (split('', $txt)) {\n            my $c = ord(lc($_));\n\
    \            $odd++ if $c % 2;\n        }\n        @result = ($odd);\n    }\n\
    \    return \\@result;\n}", "    my(@ws) = split(/\\s+/, $txt);\n    if (@ws >\
    \ 1) {\n        return @ws;\n    }\n    my(@cs) = split(/,/, $txt);\n    if (@cs\
    \ > 1) {\n        return @cs;\n    }\n    my($n) = 0;\n    for (my($i) = 0; $i\
    \ < length($txt); $i++) {\n        my($c) = substr($txt, $i, 1);\n        if ((ord($c)\
    \ & 1) != 0) {\n            $n++;\n        }\n    }\n    return $n;\n}", "   \
    \ my @splitted = ();\n    $txt =~ s/[\\s,]/ /g;\n    my @splitted = split / /,\
    \ $txt;\n    if ($#splitted == 0) {\n        return length $txt;\n    } else {\n\
    \        return @splitted;\n    }\n}", "    my @l = split(/\\s+/, $txt);\n   \
    \ my $size = @l;\n    if($size == 1) {\n        @l = split(/\\,/, $txt);\n   \
    \     $size = @l;\n        if($size == 1) {\n            my $count = 0;\n    \
    \        for(my $i = 0; $i < length($txt); $i++) {\n                if(ord(substr($txt,\
    \ $i, 1)) % 2 == 1) {\n                    $count += 1;\n                }\n \
    \           }\n            return $count;\n        }\n    }\n    return @l;\n}",
  "    return split(/\\s/, $txt) if $txt =~ /\\s/;\n    return split(/\\,/, $txt)\
    \ if $txt =~ /\\,/;\n    my @ret;\n    while($txt =~ /(.)/g) {\n        push @ret,\
    \ $1 if ord($1) % 2 == 1;\n    }\n    return @ret;\n}", "    my $words = $txt;\n\
    \    if ($words =~ s/\\s+//g) {\n        return [ split(/\\s+/, $txt) ];\n   \
    \ } elsif ($words =~ s/,//g) {\n        return [ split(/,/, $txt) ];\n    }\n\
    \    my $cnt = 0;\n    for my $c (split(//, $words)) {\n        my $n = ord($c)\
    \ - ord('a');\n        if ($n & 1) {\n            $cnt++;\n        }\n    }\n\
    \    return $cnt;\n}", "    my $whitespace = qr/\\s+/;\n    my $letter = qr/[a-z]/;\n\
    \    my $letter_odd = sub { ord($_[0]) % 2 == 1 };\n    my $words = split_text($txt,\
    \ $whitespace, sub {\n        my($txt) = @_;\n        my @words = split_text($txt,\
    \ qr/,/, sub {\n            my($txt) = @_;\n            my $result = 0;\n    \
    \        while ($txt =~ /($letter)/g) {\n                $result++ if $letter_odd->($1);\n\
    \            }\n            return $result;\n        });\n        return @words\
    \ if @words;\n        return $letter_odd->($txt);\n    });\n    return @words;\n\
    }", "    # write me, don't forget to return a value!\n    my @a = split(/\\s/,\
    \ $txt);\n    if(@a == 1){\n        @a = split(/,/, $txt);\n        if(@a == 1){\n\
    \            my $count = 0;\n            for (my $i = 0; $i < length($txt); $i++){\n\
    \                my $ch = ord(substr($txt, $i, 1));\n                if($ch >=\
    \ 0 && $ch < 26 && $ch % 2 == 1){\n                    $count++;\n           \
    \     }\n            }\n            return $count;\n        }\n    }\n    return\
    \ @a;\n}", "    if ($txt =~ /[,\\s]/) {\n        return [split /[,\\s]/, $txt];\n\
    \    }\n    if ($txt =~ /[a-z]/) {\n        return ord(\"a\") + length($txt) %\
    \ 2;\n    }\n    return 0;\n}", "    my $whitespace = ' ';\n    my $comma = ',';\n\
    \    my $len = length($txt);\n    my $i = 0;\n    my $odd = 0;\n    my @arr =\
    \ ();\n    for ($i = 0; $i < $len; $i++) {\n        my $c = substr($txt, $i, 1);\n\
    \        if ($c eq $whitespace) {\n            # split on whitespace\n       \
    \     $odd = 0;\n            return @arr;\n        }\n        elsif ($c eq $comma)\
    \ {\n            # split on comma\n            $odd = 0;\n            return @arr;\n\
    \        }\n        else {\n            if (ord($c) % 2 == 1) {\n            \
    \    $odd++;\n            }\n            push(@arr, $c);\n        }\n    }\n \
    \   return $odd;\n}", "    # Write your code here and return the result\n    my\
    \ @ary = split(/[ ,]/, $txt);\n    my @result;\n    my $sum = 0;\n    for my $str\
    \ (@ary) {\n        if (ord(lc $str) >= ord('a') && ord(lc $str) <= ord('z'))\
    \ {\n            $sum += ord(lc $str) % 2;\n        } else {\n            push\
    \ @result, $str;\n        }\n    }\n    return $sum if $sum > 0;\n    return @result;\n\
    }", "    my @words = $txt =~ /(\\S+)/g;\n    return scalar @words if scalar @words\
    \ == 1;\n    return @words;\n}", "    my $tmp = $txt;\n    my @words = ();\n \
    \   my $has_odd_char = 0;\n    if($tmp =~ /^[a-z]+$/) {\n        while($tmp) {\n\
    \            $has_odd_char++ if(ord(substr($tmp, 0, 1)) % 2);\n            $tmp\
    \ = substr($tmp, 1);\n        }\n        return $has_odd_char;\n    }\n    $tmp\
    \ =~ s/\\s+/,/g;\n    $tmp =~ s/^,//;\n    $tmp =~ s/,$//;\n    while($tmp) {\n\
    \        if($tmp =~ /^[a-z]*,/) {\n            push @words, substr($tmp, 0, 1);\n\
    \            $tmp = substr($tmp, 2);\n        }\n        else {\n            my\
    \ $idx = index($tmp, ',');\n            push @words, substr($tmp, 0, $idx);\n\
    \            $tmp = substr($tmp, $idx + 1);\n        }\n    }\n    return \\@words;\n\
    }", "    if($txt =~ /\\s/) {\n        return split(' ', $txt);\n    } elsif($txt\
    \ =~ /,/) {\n        return split(',', $txt);\n    } else {\n        my $odds\
    \ = 0;\n        my @chars = split('', $txt);\n        foreach my $c (@chars) {\n\
    \            my $char_idx = ord($c) - ord('a');\n            if($char_idx % 2\
    \ == 1) {\n                $odds++;\n            }\n        }\n        return\
    \ $odds;\n    }\n}", "    my(@words);\n    if ($txt =~ /\\s+/) {\n        @words\
    \ = split /\\s+/, $txt;\n    } elsif ($txt =~ /,/) {\n        @words = split /,/,\
    \ $txt;\n    } else {\n        $txt =~ tr/[A-Z]/[a-z]/;\n        @words = split\
    \ //, $txt;\n        return grep {(ord($_) % 2) == 1} @words;\n    }\n    return\
    \ @words;\n}", "    # Your code here\n}", "    # your code here\n    return(undef);\n\
    }", "    # TODO: your code goes here\n}", "    my @words = split(/[ ,]/, $txt);\n\
    \    #if (!scalar(@words)){\n    #    return(lc($txt) =~ tr/[a-z]//);\n    #}\n\
    \    #else{\n    #    return @words;\n    #}\n    return @words if scalar(@words);\n\
    \    return lc($txt) =~ tr/[a-z]//;\n}", "    my @w;\n    if ( ($txt =~ /[, ]/)\
    \ == 0 ) { # if no whitespace or commas\n\tmy $i = 0;\n\tforeach my $char (split\
    \ //, $txt) {\n\t    my $o = ord($char) - ord('a');\n\t    $i++ if ($o % 2);\n\
    \t}\n\treturn $i;\n    }\n    if ( ($txt =~ / /) == 0 ) { # if no whitespace\n\
    \t@w = split(',', $txt);\n    } else {\n\t@w = split(' ', $txt);\n    }\n    return\
    \ @w;\n}", "    if ($txt =~ / /) {\n        return split(/ /, $txt);\n    } elsif\
    \ ($txt =~ /,/) {\n        return split(/,/, $txt);\n    } else {\n        return\
    \ scalar(grep { (($_ + 1) % 2) } map { ord($_) - ord('a') } split(//, $txt));\n\
    \    }\n}", "    if (index($txt, ' ') != -1) {\n        return [split / /, $txt];\n\
    \    }\n    elsif (index($txt, ',') != -1) {\n        return [split /,/, $txt];\n\
    \    }\n    else {\n        return grep { ord($_) % 2 == 0 } split //, $txt;\n\
    \    }\n}", "    my @result;\n    my @characters = split(//, $txt);\n    my $count;\n\
    \    foreach my $letter (@characters) {\n        if ($letter =~ /[a-z]/) {\n \
    \           $count++;\n        }\n    }\n    if ($txt =~ / /) {\n        @result\
    \ = split(/ /, $txt);\n    } elsif ($txt =~ /,/) {\n        @result = split(/,/,\
    \ $txt);\n    } else {\n        return $count;\n    }\n    return @result;\n}",
  "    if ($txt =~ /\\s/) {\n        return split(/\\s/, $txt);\n    }\n    elsif\
    \ ($txt =~ /,/) {\n        return split(/,/, $txt);\n    }\n    else {\n     \
    \   my @arr = split(\"\", $txt);\n        my $cnt = 0;\n        foreach my $char\
    \ (@arr) {\n            my $ord = ord($char);\n            if ($ord % 2 == 1)\
    \ {\n                $cnt++;\n            }\n        }\n        return $cnt;\n\
    \    }\n}", "    # implement me\n    # return an array of one number if no words\
    \ found\n    return [ ord('a') ];\n}", "    if ($txt =~ /\\s/) {\n        return\
    \ [split(/\\s/, $txt)];\n    } elsif ($txt =~ /,/) {\n        return [split(/,/,\
    \ $txt)];\n    } else {\n        my $result = 0;\n        my @letters = split(//,\
    \ $txt);\n        foreach my $letter (@letters) {\n            my $ord = ord($letter);\n\
    \            if ($ord % 2 == 1) {\n                $result += 1;\n           \
    \ }\n        }\n        return $result;\n    }\n}", "    my @txt = split(\" \"\
    , $txt);\n    my $num = 0;\n    if ($#txt == 0) {\n        @txt = split(\",\"\
    , $txt);\n        if ($#txt == 0) {\n            for (my $i = 0; $i < length($txt);\
    \ $i++) {\n                if (ord(substr($txt, $i, 1)) % 2 != 0) {\n        \
    \            $num++;\n                }\n            }\n            @txt = ($num);\n\
    \        }\n    }\n    return @txt;\n}", "    my @words = split(/[\\s,]/, $txt);\n\
    \    return \\@words if @words != 1;\n    return @words[0] =~ tr/a-z// % 2 if\
    \ @words[0] =~ /^[a-z]+$/;\n    return \\@words;\n}", "    if($txt =~ /\\s/){\n\
    \        return split(/\\s/, $txt);\n    }\n    elsif($txt =~ /,/){\n        return\
    \ split(/,/, $txt);\n    }\n    else{\n        my $count = 0;\n        my @letters\
    \ = split(//, $txt);\n        for(my $i = 0; $i < length($txt); $i++){\n     \
    \       if(ord($letters[$i]) % 2 == 1){\n                $count++;\n         \
    \   }\n        }\n        return $count;\n    }\n}", "    my $ret = [];\n    if\
    \ (index($txt, ' ') >= 0) {\n        $ret = [split(/\\s+/, $txt)];\n    } elsif\
    \ (index($txt, ',') >= 0) {\n        $ret = [split(/,/, $txt)];\n    } else {\n\
    \        $ret = 0;\n        for my $i (0..length($txt)-1) {\n            if (ord(substr($txt,\
    \ $i, 1)) % 2 == 0) {\n                $ret++;\n            }\n        }\n   \
    \ }\n    return $ret;\n}", "    if ($txt =~ /[\\s,]/) {\n        if ($txt =~ /\\\
    s/) {\n            return split(/\\s/, $txt);\n        }\n        return split(/,/,\
    \ $txt);\n    }\n    my $len = length($txt);\n    my $count = 0;\n    for (my\
    \ $i = 0; $i < $len; $i++) {\n        if ($i % 2 == 0) {\n            if (ord(substr($txt,\
    \ $i, 1)) % 2 == 1) {\n                $count++;\n            }\n        }\n \
    \   }\n    return $count;\n}", "    my(@ret);\n    return(@ret) if !defined($txt);\n\
    \    if ($txt =~ /\\s/) {\n\t@ret = split(/\\s+/, $txt);\n    } elsif ($txt =~\
    \ /,/) {\n\t@ret = split(/,/, $txt);\n    } else {\n\t# There are only lower-case\
    \ letters in txt\n\tmy($i, $j, $c);\n\t$j = 0;\n\tfor ($i = 0; $i < length($txt);\
    \ $i++) {\n\t    $c = substr($txt, $i, 1);\n\t    $j += 1 if ord($c) % 2;\n\t\
    }\n\treturn($j);\n    }\n    return(@ret);\n}", "    my @words = split /\\s+/,\
    \ $txt;\n    return @words if @words > 1;\n    @words = split /,/, $txt;\n   \
    \ return @words if @words > 1;\n    my $odds = $txt =~ tr/[a-z]/[a-z]/;\n    return\
    \ $odds;\n}", "    my $result = \"\";\n    my @words = split(/\\s+/, $txt);\n\
    \    my $count = 0;\n    my $odd = 0;\n    my $even = 0;\n    my $odd_num = 0;\n\
    \    my $even_num = 0;\n    my $ch = \"\";\n    my $ord = 0;\n    my $ord_even\
    \ = 0;\n    my $ord_odd = 0;\n    my $str = \"\";\n    my $str_odd = \"\";\n \
    \   my $str_even = \"\";\n    if (scalar(@words) > 1) {\n        return @words;\n\
    \    }\n    else {\n        foreach $ch (split(//,$txt)) {\n            $ord =\
    \ ord($ch);\n            if ($ord >= 97 && $ord <= 122) {\n                $count++;\n\
    \                if ($count % 2 == 0) {\n                    $even++;\n      \
    \              $ord_even = $ord;\n                    $str_even = chr($ord_even);\n\
    \                }\n                else {\n                    $odd++;\n    \
    \                $ord_odd = $ord;\n                    $str_odd = chr($ord_odd);\n\
    \                }\n            }\n        }\n        if ($odd > 0) {\n      \
    \      return $odd;\n        }\n        else {\n            return $even;\n  \
    \      }\n    }\n}", "    my @return;\n    my $num_spaces = () = $txt =~ /\\s/g;\n\
    \    my $num_commas = () = $txt =~ /,/g;\n    if($num_spaces > 0){\n        @return\
    \ = split(\" \", $txt);\n    }elsif($num_commas > 0){\n        @return = split(\"\
    ,\", $txt);\n    }else{\n        @return =  scalar(grep {$_ % 2 == 1} (map { ord(lc($_))\
    \ - ord('a') } (split(\"\", $txt))))\n    }\n    return @return;\n}", "    my\
    \ @words = split(/\\s+/, $txt);\n    if (scalar(@words) < 2) {\n        @words\
    \ = split(/,/, $txt);\n        if (scalar(@words) < 2) {\n            my $count\
    \ = 0;\n            foreach my $char (split(//, $txt)) {\n                if (ord($char)\
    \ % 2 == 1) {\n                    $count++;\n                }\n            }\n\
    \            return $count;\n        }\n    }\n    return @words;\n}", "    my\
    \ @array;\n    my $count = 0;\n    my $count1 = 0;\n    my $count2 = 0;\n    my\
    \ $num;\n    for my $i (0 .. length($txt) - 1) {\n        if (chr(ord(substr($txt,\
    \ $i, 1))) eq \" \") {\n            $count1++;\n        }\n        if (chr(ord(substr($txt,\
    \ $i, 1))) eq \",\") {\n            $count2++;\n        }\n    }\n    if ($count1\
    \ eq 0 && $count2 eq 0) {\n        for my $i (0 .. length($txt) - 1) {\n     \
    \       if (ord(substr($txt, $i, 1)) % 2 == 1) {\n                $count++;\n\
    \            }\n        }\n        return $count;\n    }\n    if ($count1 eq 0\
    \ && $count2 > 0) {\n        $txt =~ s/,/ /g;\n        @array = split / /, $txt;\n\
    \        return @array;\n    }\n    if ($count1 > 0 && $count2 eq 0) {\n     \
    \   @array = split / /, $txt;\n        return @array;\n    }\n}", "    if($txt\
    \ =~ m/\\s/){\n        my @result = split(/\\s/, $txt);\n        return @result;\n\
    \    }\n    elsif($txt =~ m/,/){\n        my @result = split(/,/, $txt);\n   \
    \     return @result;\n    }\n    else{\n        my $result = 0;\n        for(my\
    \ $i = 0; $i < length($txt); $i++){\n            my $ascii = ord(substr($txt,\
    \ $i, 1));\n            if($ascii % 2 == 1){\n                $result++;\n   \
    \         }\n        }\n        return $result;\n    }\n}", "    my @tmp = split(/\\\
    s+/, $txt);\n    return @tmp if @tmp > 1;\n    @tmp = split(/,/, $txt);\n    return\
    \ @tmp if @tmp > 1;\n    my $n = 0;\n    $n++ while $txt =~ /[a-z](?:.*[a-z])?/g;\n\
    \    return $n;\n}", "    if($txt =~ /[^a-z\\s,]/){return -1;}\n    my @array\
    \ = split(/\\s+/, $txt);\n    if(scalar(@array) > 1){return @array;}\n    @array\
    \ = split(/,/, $txt);\n    if(scalar(@array) > 1){return @array;}\n    if($txt\
    \ =~ /[^a-z]/){return -1;}\n    $txt =~ tr/a-z/A-Z/;\n    return $txt =~ tr/A-Z/A-Z/\
    \ % 2;\n}", "    my @words = ();\n    if ($txt =~ /\\s/) {\n        @words = split('\
    \ ', $txt);\n    } elsif ($txt =~ /,/) {\n        @words = split(',', $txt);\n\
    \    } else {\n        my $i = 0;\n        for (my $j = 0; $j < length($txt);\
    \ $j++) {\n            if (ord(substr($txt, $j, 1)) % 2 == 1) {\n            \
    \    $i++;\n            }\n        }\n        @words = ($i);\n    }\n    return\
    \ @words;\n}", "    # put your code here\n}", "    my @ret;\n    if($txt =~ m/\\\
    s/) {\n        @ret = split(\" \", $txt);\n    }\n    elsif($txt =~ m/,/) {\n\
    \        @ret = split(\",\", $txt);\n    }\n    else {\n        my $count = 0;\n\
    \        foreach my $c (split(\"\", $txt)) {\n            if(ord($c) % 2 == 1)\
    \ {\n                $count++;\n            }\n        }\n        @ret = ($count);\n\
    \    }\n    return @ret;\n}", "    my @list = ();\n    if (index($txt, ' ') !=\
    \ -1) {\n        @list = split(/\\s+/, $txt);\n    } elsif (index($txt, ',') !=\
    \ -1) {\n        @list = split(/,/, $txt);\n    } else {\n        my $cnt = 0;\n\
    \        my @chars = split(//, $txt);\n        foreach my $c (@chars) {\n    \
    \        my $ord = ord($c);\n            if ($ord > ord('a') && $ord < ord('z'))\
    \ {\n                $cnt++;\n            }\n        }\n        return $cnt;\n\
    \    }\n    return @list;\n}", "    return [split(/\\s+/, $txt)] if $txt =~ /\\\
    s+/;\n    return [split(/,/, $txt)] if $txt =~ /,/;\n    return length(grep {\
    \ ord($_) % 2 } split(//, $txt));\n}", "    my @arr;\n    if (index($txt, ' ')\
    \ != -1) {\n        @arr = split / /, $txt;\n    } elsif (index($txt, ',') !=\
    \ -1) {\n        @arr = split /,/, $txt;\n    } else {\n        my $i = 0;\n \
    \       my $count = 0;\n        while ($i < length($txt)) {\n            my $char\
    \ = substr($txt, $i, 1);\n            if (ord($char) % 2 != 0) {\n           \
    \     $count++;\n            }\n            $i++;\n        }\n        return $count;\n\
    \    }\n    return @arr;\n}", "    if($txt =~ m/[\\s,]/) {\n        if($txt =~\
    \ m/[\\s]/) {\n            return split(/\\s+/, $txt);\n        } else {\n   \
    \         return split(/\\,/, $txt);\n        }\n    } else {\n        return\
    \ scalar(grep {substr($_, -1, 1) =~ m/[13579]/} split(//, $txt));\n    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
