name: HumanEval_125_split_words
language: pl
prompt: "# Given a string of words, return an array of words split on whitespace,\
  \ if no whitespaces exists in the text you\n# should split on commas ',' if no commas\
  \ exists you should return the number of lower-case letters with odd order in the\n\
  # alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n# Examples\n# >>> split_words(\"\
  Hello world!\")\n# [\"Hello\", \"world!\"]\n# >>> split_words(\"Hello,world!\")\n\
  # [\"Hello\", \"world!\"]\n# >>> split_words(\"abcdef\")\n# 3\nsub split_words {\n\
  \    my($txt) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&split_words;\n\
  \        if(eq_deeply($candidate->(\"Hello world!\"),[\"Hello\", \"world!\"])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Hello,world!\"),[\"Hello\", \"world!\"])) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello world,!\"),[\"\
  Hello\", \"world,!\"])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n        if(eq_deeply($candidate->(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
  , \"!\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(\"abcdef\"),3)) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaabb\"),2)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  aaaBb\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->(\"\"),0)) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    if ($txt =~ /\\s+/) {\n        my @words = split(/\\s+/, $txt);\n\
    \        return \\@words;\n    }\n    if ($txt =~ /,/) {\n        my @words =\
    \ split(/,/, $txt);\n        return \\@words;\n    }\n    my $count = 0;\n   \
    \ my @chars = split(//, $txt);\n    for my $char (@chars) {\n        my $ord =\
    \ ord($char);\n        if ($ord % 2 == 1) {\n            $count += 1;\n      \
    \  }\n    }\n    return $count;\n}", "    return split(' ', $txt) if $txt =~ /\\\
    s/;\n    return split(',', $txt) if $txt =~ /,/;\n    return grep {\n        my\
    \ $o = $_;\n        my $i = ord($o) - ord('a');\n        $i % 2 == 1;\n    } split(//,\
    \ $txt);\n}", "    my @t = split /\\s/, $txt;\n    if(@t == 1) {\n        @t =\
    \ split /,/, $txt;\n        if(@t == 1) {\n            my $i = 0;\n          \
    \  for my $ch(split //, $txt) {\n                $i++ if(ord($ch) & 1);\n    \
    \        }\n            return $i;\n        }\n    }\n    return @t;\n}", "  \
    \  my @w = ();\n    my $sp = $txt =~ /\\s/;\n    my $cm = $txt =~ /,/;\n    my\
    \ $nl = 0;\n    my $i;\n    if( $sp == 1 ) {\n        @w = split(/\\s/, $txt);\n\
    \    } elsif( $cm == 1 ) {\n        @w = split(/,/, $txt);\n    } else {\n   \
    \     for($i = 0; $i < length($txt); $i++) {\n            my $t = ord(substr($txt,\
    \ $i, 1));\n            if( ($t % 2) == 1 ) {\n                $nl++;\n      \
    \      }\n        }\n    }\n    return ( @w != 0 ) ? \\@w : $nl;\n}", "    if\
    \ ($txt =~ /\\s/) {\n        return split(/\\s/, $txt);\n    }\n    elsif ($txt\
    \ =~ /,/) {\n        return split(/,/, $txt);\n    }\n    else {\n        my $result\
    \ = 0;\n        my @chars = split(//, $txt);\n        foreach my $char (@chars)\
    \ {\n            my $ord = ord($char);\n            $result++ if ($ord % 2 ==\
    \ 1);\n        }\n        return $result;\n    }\n}", "    my $words = [];\n \
    \   if ($txt =~ / /) {\n        $words = [split(/ /, $txt)];\n    } elsif ($txt\
    \ =~ /,/) {\n        $words = [split(/,/, $txt)];\n    } else {\n        $words\
    \ = [$txt =~ tr/[a-z]// % 2];\n    }\n    return $words;\n}", "    if ($txt =~\
    \ /\\s/) {\n        my @words = split(/\\s/, $txt);\n        return @words;\n\
    \    } elsif ($txt =~ /,/) {\n        my @words = split(/,/, $txt);\n        return\
    \ @words;\n    } else {\n        my $cnt = 0;\n        my @letters = split(//,\
    \ $txt);\n        foreach my $let (@letters) {\n            if (ord($let) % 2\
    \ == 1) {\n                $cnt++;\n            }\n        }\n        return $cnt;\n\
    \    }\n}", "    if ($txt =~ m/\\s+/) {\n        return split(/\\s+/, $txt);\n\
    \    } elsif ($txt =~ m/,/) {\n        return split(/,/, $txt);\n    } else {\n\
    \        return scalar(grep { ord($_) % 2 } split(//, $txt));\n    }\n}", "  \
    \  my $retval = [];\n    if ($txt =~ m/\\s/) {\n        $retval = [split(' ',\
    \ $txt)];\n    } elsif ($txt =~ m/,/) {\n        $retval = [split(',', $txt)];\n\
    \    } else {\n        my $letter = chr(97);\n        $retval = 0;\n        for\
    \ (my $i = 0; $i < 26; $i++) {\n            if (index($txt, $letter) >= 0) {\n\
    \                $retval++;\n            }\n            $letter = chr(ord($letter)\
    \ + 1);\n        }\n    }\n    return $retval;\n}", "    if (index($txt, ' ')\
    \ >= 0) {\n        return split(/ /, $txt);\n    } elsif (index($txt, ',') >=\
    \ 0) {\n        return split(/,/, $txt);\n    } else {\n        my $sum = 0;\n\
    \        for my $ch (split(//, $txt)) {\n            $sum += ord($ch) % 2;\n \
    \       }\n        return $sum;\n    }\n}", "    my @out = ();\n    my @words\
    \ = ();\n    @words = split(/\\s+/, $txt);\n    if (scalar(@words) > 1) {\n  \
    \      @out = @words;\n    } else {\n        @words = split(/\\,/, $txt);\n  \
    \      if (scalar(@words) > 1) {\n            @out = @words;\n        } else {\n\
    \            my $count = 0;\n            for (my $i = 0; $i < length($txt); $i++)\
    \ {\n                my $ch = substr($txt, $i, 1);\n                my $ord =\
    \ ord($ch);\n                if ($ord >= 97 && $ord <= 122) {\n              \
    \      if ($ord % 2 != 0) {\n                        $count++;\n             \
    \       }\n                }\n            }\n            @out = ($count);\n  \
    \      }\n    }\n    return @out;\n}", "    if ($txt =~ /\\s/) {\n        return\
    \ split(/\\s/, $txt);\n    } elsif ($txt =~ /,/) {\n        return split(/,/,\
    \ $txt);\n    } else {\n        my $odd = 0;\n        foreach my $ch (split(//,\
    \ $txt)) {\n            my $ch_ord = ord($ch);\n            if ($ch_ord % 2 ==\
    \ 1) {\n                $odd++;\n            }\n        }\n        return $odd;\n\
    \    }\n}", "    my $trimmed = trim($txt);\n    if (contains_whitespace($trimmed))\
    \ {\n        return split /\\s+/, $trimmed;\n    }\n    elsif (contains_comma($trimmed))\
    \ {\n        return split /,/, $trimmed;\n    }\n    else {\n        return count_odd_lower_case_characters($trimmed);\n\
    \    }\n}", "    if ($txt =~ /,/) {\n        return split(\",\", $txt);\n    }\
    \ else {\n        my $word = $txt;\n        $word =~ s/\\s+//g;\n        my $cnt\
    \ = 0;\n        for (my $i = 0; $i < length($word); $i++) {\n            my $ch\
    \ = substr($word, $i, 1);\n            my $ord = ord($ch);\n            if ($ord\
    \ % 2 != 0) {\n                $cnt += 1;\n            }\n        }\n        return\
    \ $cnt;\n    }\n}", "    if ($txt =~ /\\s/) {\n        my @words = split(/\\s/,\
    \ $txt);\n        return @words;\n    } elsif ($txt =~ /,/) {\n        my @words\
    \ = split(/,/, $txt);\n        return @words;\n    } else {\n        my $count\
    \ = 0;\n        my @chars = split(//, $txt);\n        foreach my $char (@chars)\
    \ {\n            my $ord = ord($char);\n            if ($ord % 2 == 1) {\n   \
    \             $count++;\n            }\n        }\n        return $count;\n  \
    \  }\n}", "    if ($txt =~ / /) {\n        return split / /, $txt;\n    } elsif\
    \ ($txt =~ /,/) {\n        return split /,/, $txt;\n    } else {\n        return\
    \ grep { ord($_) % 2 } split //, $txt;\n    }\n}", "    my @words = split(/\\\
    s+/, $txt);\n    my $n = @words;\n    if ($n == 1) {\n        @words = split(/,/,\
    \ $txt);\n        $n = @words;\n        if ($n == 1) {\n            $n = 0;\n\
    \            foreach my $c (split(//, $txt)) {\n                my $b = ord($c)\
    \ - ord('a');\n                if ($b >= 0 && $b <= 25) {\n                  \
    \  if ($b % 2) {\n                        $n += 1;\n                    }\n  \
    \              }\n            }\n            return $n;\n        }\n    }\n  \
    \  return @words;\n}", "    my $nspaces = () = $txt =~ /\\s/g;\n    my $ncommas\
    \ = () = $txt =~ /,/g;\n    if($nspaces) {\n        # We have spaces, return a\
    \ split on whitespace.\n        return split(/\\s+/, $txt);\n    }\n    if($ncommas)\
    \ {\n        # We have commas, return a split on commas.\n        return split(/,/,\
    \ $txt);\n    }\n    # We have neither, return number of letters with odd order.\n\
    \    my $nodd = 0;\n    for my $ch (split(//, $txt)) {\n        my $ord = ord($ch)\
    \ - ord('a');\n        if($ord % 2) {\n            $nodd++;\n        }\n    }\n\
    \    return $nodd;\n}", "    my @text=split(/ /,$txt);\n    if(@text>1){\n   \
    \     return @text;\n    }else{\n        @text=split(/,/,$txt);\n        if(@text>1){\n\
    \            return @text;\n        }else{\n            my $count=0;\n       \
    \     for(my $i=0;$i<length($txt);$i++){\n                my $char=ord(substr($txt,$i,1));\n\
    \                if($char%2!=0){\n                    $count=$count+1;\n     \
    \           }\n            }\n            return $count;\n        }\n    }\n}",
  "    my $txt_0 = $txt;\n    my $txt_1 = $txt;\n    my $txt_2 = $txt;\n    my $txt_3\
    \ = $txt;\n    if ($txt =~ /\\s/){\n        $txt_0 =~ s/\\s/,/g;\n        return\
    \ split(/,/, $txt_0);\n    }\n    if ($txt =~ /,/){\n        $txt_1 =~ s/,/ /g;\n\
    \        return split(/ /, $txt_1);\n    }\n    return ord($txt_2) % 2;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
