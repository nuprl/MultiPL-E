name: HumanEval_68_pluck
language: pl
prompt: "# \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
  \ plucked node should be the node with the smallest even value.\n# If multiple nodes\
  \ with the same smallest even value are found return the node that has smallest\
  \ index.\n# The plucked node should be returned in an array, [ smalest_value, its\
  \ index ],\n# If there are no even values or the given array is empty, return [].\n\
  # Example 1:\n# >>> pluck([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n# Example 2:\n# >>> pluck([1, 2, 3])\n\
  # [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
  # Example 3:\n# >>> pluck([])\n# []\n# Example 4:\n# >>> pluck([5, 0, 3, 0, 4, 2])\n\
  # [0, 1]\n# Explanation: 0 is the smallest value, but  there are two zeros,\n# so\
  \ we will choose the first zero, which has the smallest index.\n# Constraints:\n\
  # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\nsub pluck {\n    my($arr) =\
  \ @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pluck;\n\
  \        if(eq_deeply($candidate->([4, 2, 3]),[2, 1])) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3]),[2,\
  \ 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 0, 3, 0, 4, 2]),[0, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n        if(eq_deeply($candidate->([1, 2, 3, 0, 5, 3]),[0, 3])) {\n   \
  \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 4, 8, 4, 8]),[4, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n        if(eq_deeply($candidate->([7, 6, 7, 1]),[6, 1])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7,\
  \ 9, 7, 1]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: ["    my $min_even = undef;\n    my $min_even_idx = undef;\n    for my\
    \ $i (0 .. scalar(@$arr) - 1) {\n        my $e = $arr->[$i];\n        if ($e %\
    \ 2 == 0) {\n            if (defined($min_even)) {\n                if ($e < $min_even)\
    \ {\n                    $min_even = $e;\n                    $min_even_idx =\
    \ $i;\n                }\n            } else {\n                $min_even = $e;\n\
    \                $min_even_idx = $i;\n            }\n        }\n    }\n    if\
    \ (defined($min_even)) {\n        return [$min_even, $min_even_idx];\n    } else\
    \ {\n        return [];\n    }\n}", "    my $smallest = -1;\n    my $best_idx\
    \ = -1;\n    for my $i (0..$#$arr) {\n        my $num = $arr->[$i];\n        next\
    \ if $num % 2;\n        if ($smallest == -1 or $num < $smallest) {\n         \
    \   $smallest = $num;\n            $best_idx = $i;\n        }\n    }\n    return\
    \ [$smallest, $best_idx];\n}", "    my @result = ();\n    my @even = grep { $_\
    \ % 2 == 0 } @$arr;\n    if (@even) {\n        my $min = min @even;\n        my\
    \ @index = grep { $arr->[$_] == $min } 0..$#$arr;\n        @result = ($min, min\
    \ @index);\n    }\n    return \\@result;\n}", "    # TODO\n}", "    my @sorted\
    \ = sort {$a <=> $b} grep {$_ % 2 == 0} @$arr;\n    return [] unless @sorted;\n\
    \    my $target = $sorted[0];\n    my $index = -1;\n    for (my $i = 0; $i < @$arr;\
    \ $i++) {\n        if ($arr->[$i] == $target) {\n            $index = $i;\n  \
    \          last;\n        }\n    }\n    return [$target, $index];\n}", "    my\
    \ $min = 100000000;\n    my $idx = -1;\n    for my $i (0..scalar(@$arr)-1) {\n\
    \        if($arr->[$i] % 2 == 0) {\n            if($arr->[$i] < $min) {\n    \
    \            $min = $arr->[$i];\n                $idx = $i;\n            }\n \
    \       }\n    }\n    if($idx != -1) {\n        return [$min, $idx];\n    } else\
    \ {\n        return [];\n    }\n}\n1;", "    my $minval = 999999999;\n    my $minidx\
    \ = -1;\n    for (my $i = 0; $i < scalar(@$arr); $i++) {\n        if ($arr->[$i]\
    \ % 2 == 0 && $arr->[$i] < $minval) {\n            $minval = $arr->[$i];\n   \
    \         $minidx = $i;\n        }\n    }\n    if ($minidx == -1) {\n        return\
    \ [];\n    } else {\n        return [$minval, $minidx];\n    }\n}", "    # Your\
    \ code here\n}", "    return unless defined $arr;\n    my ($min_index, $min_value)\
    \ = (-1, -1);\n    for my $index (0 .. $#$arr) {\n        next unless $arr->[$index]\
    \ % 2 == 0;\n        if ($min_value == -1 || $arr->[$index] < $min_value) {\n\
    \            $min_value = $arr->[$index];\n            $min_index = $index;\n\
    \        }\n    }\n    return [$min_value, $min_index];\n}", "    my($min, $result);\n\
    \    for (my $i = 0; $i < @$arr; $i++) {\n        if ($arr->[$i] % 2 == 0) {\n\
    \            if (not defined $min) {\n                $min = $arr->[$i];\n   \
    \             $result = [$min, $i];\n            } elsif ($arr->[$i] < $min) {\n\
    \                $min = $arr->[$i];\n                $result = [$min, $i];\n \
    \           }\n        }\n    }\n    return $result;\n}", "    my $even_value;\n\
    \    my $even_value_pos;\n    my $i = 0;\n    while ($i < scalar @$arr) {\n  \
    \      if (defined $even_value) {\n            if ($even_value > $arr->[$i] &&\
    \ $arr->[$i] % 2 == 0) {\n                $even_value = $arr->[$i];\n        \
    \        $even_value_pos = $i;\n            }\n        } else {\n            if\
    \ ($arr->[$i] % 2 == 0) {\n                $even_value = $arr->[$i];\n       \
    \         $even_value_pos = $i;\n            }\n        }\n        $i++;\n   \
    \ }\n    if (defined $even_value_pos) {\n        return [$even_value, $even_value_pos];\n\
    \    } else {\n        return [];\n    }\n}", "    my $min = $arr->[0];\n    my\
    \ $idx = 0;\n    my $i = 0;\n    foreach (@$arr) {\n        if ($_ % 2 == 0) {\n\
    \            if ($_ < $min) {\n                $min = $_;\n                $idx\
    \ = $i;\n            }\n        }\n        $i++;\n    }\n    return [$min, $idx];\n\
    }", "    my $smallest_even_value;\n    my $smallest_even_value_index;\n    for\
    \ my $i (0 .. scalar(@$arr) - 1) {\n        if (defined $smallest_even_value &&\
    \ $arr->[$i] < $smallest_even_value && $arr->[$i] % 2 == 0) {\n            $smallest_even_value\
    \ = $arr->[$i];\n            $smallest_even_value_index = $i;\n        } elsif\
    \ (!defined $smallest_even_value && $arr->[$i] % 2 == 0) {\n            $smallest_even_value\
    \ = $arr->[$i];\n            $smallest_even_value_index = $i;\n        }\n   \
    \ }\n    if (!defined $smallest_even_value) {\n        return [];\n    }\n   \
    \ return [$smallest_even_value, $smallest_even_value_index];\n}", "    my($smallest_even,\
    \ $index);\n    for (my $i = 0; $i < @$arr; $i++) {\n        if (defined $smallest_even)\
    \ {\n            if ($arr->[$i] % 2 == 0 && $arr->[$i] < $smallest_even) {\n \
    \               $smallest_even = $arr->[$i];\n                $index = $i;\n \
    \           }\n        }\n        else {\n            if ($arr->[$i] % 2 == 0)\
    \ {\n                $smallest_even = $arr->[$i];\n                $index = $i;\n\
    \            }\n        }\n    }\n    return defined $smallest_even ? [$smallest_even,\
    \ $index] : [];\n}", "    my $min = -1;\n    my $index = -1;\n    for (my $i =\
    \ 0; $i < scalar @$arr; $i++) {\n        my $value = $arr->[$i];\n        if ($value\
    \ % 2 == 0 && ($min == -1 || $value < $min)) {\n            $min = $value;\n \
    \           $index = $i;\n        }\n    }\n    return [$min, $index];\n}", " \
    \   my $even_min = 9999999;\n    my $idx = -1;\n    foreach my $i (0..$#$arr)\
    \ {\n        my $val = $arr->[$i];\n        if ($val % 2 == 0) {\n           \
    \ if ($val < $even_min) {\n                $even_min = $val;\n               \
    \ $idx = $i;\n            }\n        }\n    }\n    return ($idx >= 0) ? [$even_min,\
    \ $idx] : [];\n}", "    my $result = [];\n    my $smallest_even_val = undef;\n\
    \    my $smallest_even_val_idx = undef;\n    for (my $i = 0; $i < scalar(@$arr);\
    \ $i++) {\n        if (defined($smallest_even_val)) {\n            if ($arr->[$i]\
    \ % 2 == 0 && $arr->[$i] < $smallest_even_val) {\n                $smallest_even_val\
    \ = $arr->[$i];\n                $smallest_even_val_idx = $i;\n            }\n\
    \        } else {\n            if ($arr->[$i] % 2 == 0) {\n                $smallest_even_val\
    \ = $arr->[$i];\n                $smallest_even_val_idx = $i;\n            }\n\
    \        }\n    }\n    if (defined($smallest_even_val) && defined($smallest_even_val_idx))\
    \ {\n        push(@$result, $smallest_even_val);\n        push(@$result, $smallest_even_val_idx);\n\
    \    }\n    return $result;\n}", "    my($i,$min,$imin) = (0,$arr->[0],0);\n \
    \   while ($i < scalar(@$arr)) {\n        my($v) = $arr->[$i];\n        next if\
    \ $v % 2;\n        $min = $v if $min % 2;\n        if ($v <= $min) {\n       \
    \     $min = $v;\n            $imin = $i;\n        }\n        $i++;\n    }\n \
    \   [$min,$imin];\n}", "    my $smallest_idx = -1;\n    my $smallest_val = -1;\n\
    \    for (my $i = 0; $i < scalar(@$arr); $i++) {\n        if ($arr->[$i] % 2 ==\
    \ 0) {\n            if ($smallest_idx == -1) {\n                $smallest_idx\
    \ = $i;\n                $smallest_val = $arr->[$i];\n            } elsif ($arr->[$i]\
    \ < $smallest_val) {\n                $smallest_idx = $i;\n                $smallest_val\
    \ = $arr->[$i];\n            }\n        }\n    }\n    return ($smallest_idx ==\
    \ -1) ? [] : [$smallest_val, $smallest_idx];\n}", "    my $res = [undef, undef];\n\
    \    foreach my $i (0..$#$arr) {\n        if($arr->[$i] % 2 == 0) {\n        \
    \    if(!defined $res->[0] || $arr->[$i] < $res->[0]) {\n                $res\
    \ = [$arr->[$i], $i];\n            }\n        }\n    }\n    return $res;\n}",
  "    my($i, $m, $n);\n    $m = $n = 99999999999;\n    for $i (0 .. $#$arr) {\n \
    \       if(($arr->[$i] & 1) == 0) {\n            if($arr->[$i] < $m) {\n     \
    \           $m = $arr->[$i];\n                $n = $i;\n            }\n      \
    \  }\n    }\n    return $m > 99999999998 ? [] : [$m, $n];\n}\nmy($res);\n$res\
    \ = pluck([4, 2, 3]);\nprint \"$res->[0], $res->[1]\\n\";\n$res = pluck([1, 2,\
    \ 3]);\nprint \"$res->[0], $res->[1]\\n\";\n$res = pluck([]);\nprint \"$res->[0],\
    \ $res->[1]\\n\";\n$res = pluck([5, 0, 3, 0, 4, 2]);\nprint \"$res->[0], $res->[1]\\\
    n\";", "    my $min;\n    my $index;\n    foreach my $i (0 .. $#$arr) {\n    \
    \    next if $arr->[$i] % 2 == 1;\n        if (defined $min && $arr->[$i] < $min)\
    \ {\n            $min = $arr->[$i];\n            $index = $i;\n        }\n   \
    \     elsif (!defined $min) {\n            $min = $arr->[$i];\n            $index\
    \ = $i;\n        }\n    }\n    return [] unless defined $min;\n    return [$min,\
    \ $index];\n}", "    my ($min, $ind) = (9999, 0);\n    foreach my $i (0..$#$arr)\
    \ {\n        if ($arr->[$i] % 2 == 0 && $arr->[$i] < $min) {\n            $min\
    \ = $arr->[$i];\n            $ind = $i;\n        }\n    }\n    return ($min ==\
    \ 9999) ? [] : [$min, $ind];\n}", "    my $idx = 0;\n    my $min = $idx;\n   \
    \ for my $idx (1 .. $#$arr) {\n        if ($arr->[$idx] % 2 == 0 && $arr->[$idx]\
    \ < $arr->[$min]) {\n            $min = $idx;\n        }\n    }\n    return $arr->[$min]\
    \ % 2 == 0 ? [$arr->[$min], $min] : [];\n}", "    my($smallest, $ix) = (undef,\
    \ -1);\n    for my $i (0..$#$arr) {\n        next if $arr->[$i] % 2;\n       \
    \ $smallest = $arr->[$i] and $ix = $i if $smallest > $arr->[$i];\n    }\n    return\
    \ [] unless defined $smallest;\n    return [$smallest, $ix];\n}", "    # Your\
    \ code here\n    my @arr = @$arr;\n    my $smallest_index = 0;\n    my $smallest_value\
    \ = 2 ** 32;\n    for my $i (0 .. $#arr) {\n        my $value = $arr[$i];\n  \
    \      if ($value % 2 == 0) {\n            if ($value < $smallest_value) {\n \
    \               $smallest_value = $value;\n                $smallest_index = $i;\n\
    \            }\n        }\n    }\n    if ($smallest_value == 2 ** 32) {\n    \
    \    return [];\n    }\n    return [$smallest_value, $smallest_index];\n}", " \
    \   my $smallest = 99999;\n    my $index = 0;\n    my $first = 0;\n    foreach\
    \ my $i (0 .. $#$arr) {\n        if ($arr->[$i] > 0 && $arr->[$i] % 2 == 0) {\n\
    \            if ($arr->[$i] <= $smallest) {\n                $smallest = $arr->[$i];\n\
    \                $index = $i;\n                $first = 1;\n            }\n  \
    \      }\n    }\n    if ($first == 0) {\n        return [];\n    }\n    return\
    \ [$smallest, $index];\n}", "    my @evens = map { $arr->[$_] } grep { $_ % 2\
    \ == 0 } 0 .. $#$arr;\n    my $smallest_even = List::Util::min @evens;\n    return\
    \ [ $smallest_even, List::Util::first { $arr->[$_] == $smallest_even } 0 .. $#$arr\
    \ ];\n}", "    my $smallest_index = -1;\n    my $smallest_value = -1;\n    for\
    \ my $index (0 .. $#$arr) {\n        my $current_value = $arr->[$index];\n   \
    \     if (0 == $current_value % 2) {\n            if ($smallest_index == -1 ||\
    \ $current_value < $smallest_value) {\n                $smallest_index = $index;\n\
    \                $smallest_value = $current_value;\n            }\n        }\n\
    \    }\n    return $smallest_index == -1 ? [] : [$smallest_value, $smallest_index];\n\
    }", "    my $min_val;\n    my $min_idx;\n    for my $i (0 .. @$arr - 1) {\n  \
    \      if($arr->[$i] % 2 == 0) {\n            if(!defined $min_val) {\n      \
    \          $min_val = $arr->[$i];\n                $min_idx = $i;\n          \
    \  } elsif($arr->[$i] < $min_val) {\n                $min_val = $arr->[$i];\n\
    \                $min_idx = $i;\n            }\n        }\n    }\n    return [$min_val,\
    \ $min_idx];\n}", "    # Your code here\n}", "    my($min, $index);\n    for my\
    \ $i (0 .. $#$arr) {\n        if (!$min && $arr->[$i] % 2 == 0) {\n          \
    \  $min = $arr->[$i];\n            $index = $i;\n        }\n        elsif ($arr->[$i]\
    \ % 2 == 0 && $arr->[$i] < $min) {\n            $min = $arr->[$i];\n         \
    \   $index = $i;\n        }\n    }\n    return [] unless $min;\n    return [$min,\
    \ $index];\n}", "    my $min_idx = -1;\n    my $min_val = -1;\n    for my $i (0..$#$arr)\
    \ {\n        my $val = $arr->[$i];\n        next if $val & 1;\n        if ($min_idx\
    \ == -1 || $val < $min_val) {\n            $min_idx = $i;\n            $min_val\
    \ = $val;\n        }\n    }\n    return ($min_idx == -1) ? [] : [$min_val, $min_idx];\n\
    }", "    my($smallest, $smallest_index) = (undef, undef);\n    for my $i (0 ..\
    \ $#$arr) {\n        next if $arr->[$i] % 2;\n        next if defined $smallest\
    \ && $arr->[$i] > $smallest;\n        $smallest = $arr->[$i];\n        $smallest_index\
    \ = $i;\n    }\n    defined $smallest ? [$smallest, $smallest_index] : [];\n}",
  "    my @ret = ();\n    my $smallest = -1;\n    my $smallestIndex = -1;\n    foreach\
    \ my $i (0 .. $#{$arr}) {\n        if ($arr->[$i] % 2 == 0) {\n            if\
    \ ($smallest == -1 || $arr->[$i] < $smallest) {\n                $smallest = $arr->[$i];\n\
    \                $smallestIndex = $i;\n            }\n        }\n    }\n    if\
    \ ($smallest != -1) {\n        push @ret, $smallest;\n        push @ret, $smallestIndex;\n\
    \    }\n    return \\@ret;\n}", "    my $m = $arr->[0];\n    my $idx = 0;\n  \
    \  foreach my $i (0..$#$arr) {\n        if ($arr->[$i] < $m) {\n            $m\
    \ = $arr->[$i];\n            $idx = $i;\n        }\n    }\n    return ($m % 2\
    \ == 0) ? [$m, $idx] : [];\n}", "    return [] if !scalar @$arr;\n    my($idx)\
    \ = undef;\n    my($value) = undef;\n    for my $i (0 .. $#$arr) {\n        if($arr->[$i]\
    \ & 1) {\n            next;\n        }\n        if(!defined $value || $arr->[$i]\
    \ < $value) {\n            $value = $arr->[$i];\n            $idx = $i;\n    \
    \    }\n    }\n    return [] if !defined $value;\n    return [$value, $idx];\n\
    }", "    my $smallest = [];\n    for (my $i = 0; $i < scalar @$arr; $i++) {\n\
    \        my $element = $arr->[$i];\n        if (is_even($element)) {\n       \
    \     if (!@$smallest) {\n                @$smallest = ($element, $i);\n     \
    \       }\n            else {\n                my $oldSmallest = $smallest->[0];\n\
    \                if ($element < $oldSmallest) {\n                    @$smallest\
    \ = ($element, $i);\n                }\n            }\n        }\n    }\n    return\
    \ $smallest;\n}", "    my $i;\n    my $min_e = -1;\n    my $min_i = -1;\n    for\
    \ $i (0 .. $#$arr) {\n        if ($arr->[$i] % 2 == 0) {\n            if ($min_e\
    \ == -1 || $arr->[$i] < $min_e) {\n                $min_e = $arr->[$i];\n    \
    \            $min_i = $i;\n            }\n        }\n    }\n    return [$min_e,\
    \ $min_i];\n}", "    my $smallest_value = -1;\n    my $smallest_index = -1;\n\
    \    for (my $i = 0; $i < scalar @$arr; $i++) {\n        my $current_value = $arr->[$i];\n\
    \        if ($current_value % 2 == 0) {\n            if ($smallest_value == -1)\
    \ {\n                $smallest_value = $current_value;\n                $smallest_index\
    \ = $i;\n            } elsif ($current_value < $smallest_value) {\n          \
    \      $smallest_value = $current_value;\n                $smallest_index = $i;\n\
    \            }\n        }\n    }\n    return $smallest_value == -1 ? [] : [$smallest_value,\
    \ $smallest_index];\n}", "    my $min;\n    my $minidx;\n    for (my $i = 0; $i\
    \ < @$arr; $i++) {\n        my $node = $arr->[$i];\n        if ($node % 2 == 0)\
    \ {\n            if (!defined($min) || $node < $min) {\n                $min =\
    \ $node;\n                $minidx = $i;\n            }\n        }\n    }\n   \
    \ if (defined($min)) {\n        return [$min, $minidx];\n    } else {\n      \
    \  return [];\n    }\n}", "    my @sorted = grep { $_ % 2 == 0 } sort { $a <=>\
    \ $b } @$arr;\n    my $elem = shift @sorted;\n    if (defined $elem) {\n     \
    \   my $i = 0;\n        $i++ while $arr->[$i] != $elem;\n        return [$elem,\
    \ $i];\n    }\n    else {\n        return [];\n    }\n}", "    #return @{$arr}[0,0]\
    \ if @{$arr} == 1 && $arr->[0] % 2 == 0;\n    my $min = 2147483647; # 2**31 -\
    \ 1\n    my $i = -1;\n    my $j = -1;\n    while ($i++ < $#{$arr}) {\n       \
    \ if (($arr->[$i] % 2 == 0) && ($arr->[$i] < $min)) {\n            $min = $arr->[$i];\n\
    \            $j = $i;\n        }\n    }\n    return [$min, $j] if $j >= 0;\n \
    \   return [];\n}", "    my $min = -1;\n    my $idx = -1;\n    foreach my $i (0..@$arr-1)\
    \ {\n        my $val = $arr->[$i];\n        if ($val % 2 == 0 && ($min == -1 ||\
    \ $val < $min)) {\n            $min = $val;\n            $idx = $i;\n        }\n\
    \    }\n    if ($min == -1) {\n        return [];\n    } else {\n        return\
    \ [$min, $idx];\n    }\n}", "    return [] if !@$arr;\n    my $min = -1;\n   \
    \ my $idx = -1;\n    for my $i (0..$#$arr) {\n        if ($arr->[$i] % 2 == 0)\
    \ {\n            if ($min == -1 || $arr->[$i] < $min) {\n                $min\
    \ = $arr->[$i];\n                $idx = $i;\n            }\n        }\n    }\n\
    \    return [$min, $idx];\n}", "    return [] if scalar @$arr == 0;\n    my $smallest_even\
    \ = MAX_ARRAY_LENGTH;\n    my $smallest_even_index = MAX_ARRAY_LENGTH;\n    for\
    \ (my $i = 0; $i < scalar @$arr; $i++) {\n        next if $arr->[$i] % 2 != 0;\n\
    \        if ($arr->[$i] < $smallest_even) {\n            $smallest_even = $arr->[$i];\n\
    \            $smallest_even_index = $i;\n        }\n    }\n    if ($smallest_even_index\
    \ < MAX_ARRAY_LENGTH) {\n        return [$smallest_even, $smallest_even_index];\n\
    \    }\n    return [];\n}", "    my @idx = grep { $_ % 2 == 0 } @$arr;\n    return\
    \ [] unless @idx;\n    my($val, $idx) = (sort { $a <=> $b } @idx)[0];\n    return\
    \ [$val, $idx];\n}", "    my $min = -1;\n    my $min_i = -1;\n    for (my $i =\
    \ 0; $i < scalar @$arr; $i++) {\n        if (defined $arr->[$i] && $arr->[$i]\
    \ % 2 == 0) {\n            if ($min == -1 || $arr->[$i] < $min) {\n          \
    \      $min = $arr->[$i];\n                $min_i = $i;\n            }\n     \
    \   }\n    }\n    if ($min == -1) {\n        return [];\n    } else {\n      \
    \  return [$min, $min_i];\n    }\n}", "    my $evens = [map {$_ % 2 == 0 ? $_\
    \ : ()} @$arr];\n    return [sort {$a <=> $b} @$evens]->[0] ? [$evens->[0], firstidx\
    \ {$_ == $evens->[0]} @$arr] : [];\n}", "    my($r, $min, $min_index) = ([], undef,\
    \ undef);\n    for my $i (0 .. $#$arr) {\n        next if ($arr->[$i] % 2);\n\
    \        if ( !defined($min) or $arr->[$i] < $min ) {\n            $min = $arr->[$i];\n\
    \            $min_index = $i;\n        }\n    }\n    return $r if ( !defined($min)\
    \ );\n    $r = [ $min, $min_index ];\n    return $r;\n}", "    my @ret;\n    my\
    \ $min;\n    my $min_idx;\n    for (my $i = 0; $i < scalar(@$arr); $i++) {\n \
    \       if ($arr->[$i] % 2 == 0) {\n            if (defined($min)) {\n       \
    \         if ($arr->[$i] < $min) {\n                    $min = $arr->[$i];\n \
    \                   $min_idx = $i;\n                }\n            } else {\n\
    \                $min = $arr->[$i];\n                $min_idx = $i;\n        \
    \    }\n        }\n    }\n    if (defined($min)) {\n        @ret = ($min, $min_idx);\n\
    \    }\n    return @ret;\n}", "    my @ret = ();\n    my $min = undef;\n    my\
    \ $mini = undef;\n    for (my $i = 0; $i < scalar(@$arr); $i++) {\n        my\
    \ $val = $arr->[$i];\n        next if $val % 2;\n        if (!defined($min) ||\
    \ $val < $min) {\n            $min = $val;\n            $mini = $i;\n        }\n\
    \    }\n    return [] if !defined($min);\n    return [$min, $mini];\n}", "   \
    \ my $even_val = undef;\n    my $index = undef;\n    my $i = 0;\n    foreach (@$arr)\
    \ {\n        if ($_ % 2 == 0) {\n            if (!defined $even_val) {\n     \
    \           $even_val = $_;\n                $index = $i;\n            }\n   \
    \         elsif ($_ < $even_val) {\n                $even_val = $_;\n        \
    \        $index = $i;\n            }\n        }\n        $i++;\n    }\n    return\
    \ [] if (!defined $even_val);\n    return [$even_val, $index];\n}", "    return\
    \ [] if scalar @$arr == 0;\n    my @res;\n    my $minIndex = 0;\n    my $minValue\
    \ = 10_000;\n    for my $i (0 .. scalar @$arr - 1) {\n        my $current = $arr->[$i];\n\
    \        if ($current % 2 == 0 && $current < $minValue) {\n            $minValue\
    \ = $current;\n            $minIndex = $i;\n        }\n    }\n    return [$minValue,\
    \ $minIndex] if $minValue < 10_000;\n    return [];\n}", "    my $result = [];\n\
    \    my $min_even_val = undef;\n    my $min_index = -1;\n    for my $index (0\
    \ .. $#$arr) {\n        if (($arr->[$index] % 2) == 0) {\n            if ((not\
    \ defined $min_even_val) or ($arr->[$index] < $min_even_val)) {\n            \
    \    $min_even_val = $arr->[$index];\n                $min_index = $index;\n \
    \           }\n        }\n    }\n    if (defined $min_even_val) {\n        push\
    \ @$result, $min_even_val;\n        push @$result, $min_index;\n    }\n    return\
    \ $result;\n}", "    return [] if scalar @$arr == 0;\n    my $min = -1;\n    my\
    \ $min_idx = -1;\n    for (my $i = 0; $i < scalar @$arr; $i++) {\n        if ($arr->[$i]\
    \ % 2 == 0) {\n            if ($min == -1 || $arr->[$i] < $min) {\n          \
    \      $min = $arr->[$i];\n                $min_idx = $i;\n            }\n   \
    \     }\n    }\n    return [] if $min == -1;\n    return [$min, $min_idx];\n}",
  "    my $smallest_even = $arr->[0];\n    my $smallest_even_index = 0;\n    for my\
    \ $i (0 .. $#$arr) {\n        if ($arr->[$i] % 2 == 0) {\n            if ($smallest_even\
    \ % 2 == 0) {\n                if ($arr->[$i] < $smallest_even) {\n          \
    \          $smallest_even = $arr->[$i];\n                    $smallest_even_index\
    \ = $i;\n                }\n            } else {\n                $smallest_even\
    \ = $arr->[$i];\n                $smallest_even_index = $i;\n            }\n \
    \       }\n    }\n    return [] if $smallest_even % 2 != 0;\n    return [$smallest_even,\
    \ $smallest_even_index];\n}", "    return [] if not @$arr;\n    my ($idx, $even);\n\
    \    for my $i (0..$#$arr) {\n        if($arr->[$i] % 2 == 0) {\n            if(not\
    \ defined $even or $arr->[$i] < $even) {\n                $even = $arr->[$i];\n\
    \                $idx = $i;\n            }\n        }\n    }\n    if(defined $even)\
    \ {\n        return [$even, $idx];\n    } else {\n        return [];\n    }\n}",
  "    if (@$arr == 0) {\n        return [];\n    }\n    my $evens = [];\n    for\
    \ my $i (0 .. $#$arr) {\n        if ($arr->[$i] % 2 == 0) {\n            push\
    \ @$evens, [$arr->[$i], $i];\n        }\n    }\n    if (@$evens == 0) {\n    \
    \    return [];\n    }\n    @$evens = sort { $a->[0] <=> $b->[0] || $a->[1] <=>\
    \ $b->[1] } @$evens;\n    return $evens->[0];\n}", "    return [] if !$arr;\n\
    \    my @evens = grep { $_ % 2 == 0 } @$arr;\n    return [] if !@evens;\n    my\
    \ $min = min @evens;\n    my($index) = grep { $arr->[$_] == $min } 0..$#$arr;\n\
    \    return [$min, $index];\n}", "    return [0, 0] if $arr->[0] == 0;\n    my\
    \ $even = undef;\n    my $index = 0;\n    foreach my $value (@$arr) {\n      \
    \  if ($value % 2 == 0) {\n            $even = $value;\n            last;\n  \
    \      }\n        $index++;\n    }\n    return [$even, $index] if defined $even;\n\
    \    return [];\n}", "    #@_[0] =~ s/[^0-9]//g;\n    #say $arr;\n    my $min\
    \ = 9999999999999;\n    my $index = 9999999999999;\n    my $flag = 1;\n    my\
    \ $retVal = [];\n    my $i = 0;\n    foreach my $val (@$arr) {\n        if($val\
    \ % 2 == 0 && $val < $min) {\n            $min = $val;\n            $index = $i;\n\
    \            $flag = 0;\n        }\n        $i++;\n    }\n    if($flag == 0) {\n\
    \        push @$retVal, $min;\n        push @$retVal, $index;\n    }\n    return\
    \ $retVal;\n}", "    my $idx_min = 0;\n    my $min_even = -1;\n    for (my $i\
    \ = 0; $i < scalar(@$arr); $i++) {\n        next if ($arr->[$i] % 2 == 1);\n \
    \       if ($min_even == -1) {\n            $min_even = $arr->[$i];\n        \
    \    $idx_min = $i;\n        }\n        elsif ($arr->[$i] < $min_even) {\n   \
    \         $min_even = $arr->[$i];\n            $idx_min = $i;\n        }\n   \
    \ }\n    return [] if ($min_even == -1);\n    return [$min_even, $idx_min];\n\
    }\nmy $arr1 = [4, 2, 3];\nmy $arr2 = [1, 2, 3];\nmy $arr3 = [];\nmy $arr4 = [5,\
    \ 0, 3, 0, 4, 2];\nprint Dumper(pluck($arr1));\nprint Dumper(pluck($arr2));\n\
    print Dumper(pluck($arr3));\nprint Dumper(pluck($arr4));", "    # Your code here\n\
    }", "    my @evens = grep { $_ % 2 == 0 } @$arr;\n    return [] unless @evens;\n\
    \    my $min = min(@evens);\n    my $i = 0;\n    while ($i < @$arr) {\n      \
    \  return [$min, $i] if $arr->[$i] == $min;\n        $i++;\n    }\n}", "    return\
    \ [] if (!@$arr);\n    my ($min, $index) = (999999, -1);\n    for (my $i = 0;\
    \ $i < @$arr; $i++) {\n        next if ($arr->[$i] % 2 != 0);\n        if ($arr->[$i]\
    \ < $min) {\n            $min = $arr->[$i];\n            $index = $i;\n      \
    \  }\n    }\n    return [] if ($index == -1);\n    return [$min, $index];\n}",
  "    my $min = 1000;\n    my $index = -1;\n    for my $i (0..scalar(@$arr)-1) {\n\
    \        if ($arr->[$i] % 2 == 0) {\n            if ($arr->[$i] < $min) {\n  \
    \              $min = $arr->[$i];\n                $index = $i;\n            }\n\
    \        }\n    }\n    if ($index == -1) {\n        return [];\n    }\n    return\
    \ [$min, $index];\n}", "    my $min = $arr->[0];\n    my $ind = 0;\n    foreach\
    \ my $i (0..$#$arr) {\n        my $e = $arr->[$i];\n        if ($e % 2 == 0 &&\
    \ $e < $min) {\n            $min = $e;\n            $ind = $i;\n        }\n  \
    \  }\n    return $min % 2 == 0 ? [$min, $ind] : [];\n}", "    if(scalar(@$arr)\
    \ == 0) {\n        return [];\n    }", "    # your code here\n}", "    my @res\
    \ = grep { $_ % 2 == 0 } @$arr;\n    my $min = $res[0];\n    foreach (@res) {\n\
    \        if ($_ < $min) {\n            $min = $_;\n        }\n    }\n    my $idx\
    \ = 0;\n    foreach (@$arr) {\n        last if $_ == $min;\n        $idx++;\n\
    \    }\n    if ($min == 0) {\n        return [ $min, $idx ]\n    } else {\n  \
    \      return [ $min, $idx ]\n    }\n}", "    my $len = scalar @$arr;\n    my\
    \ $min_even = undef;\n    my $min_even_index = -1;\n    for my $i (0..$len-1)\
    \ {\n        if (defined $min_even && $arr->[$i] % 2 == 0 && $arr->[$i] < $min_even)\
    \ {\n            $min_even = $arr->[$i];\n            $min_even_index = $i;\n\
    \        } elsif (!defined $min_even && $arr->[$i] % 2 == 0) {\n            $min_even\
    \ = $arr->[$i];\n            $min_even_index = $i;\n        }\n    }\n    if (defined\
    \ $min_even) {\n        return [$min_even, $min_even_index];\n    } else {\n \
    \       return [];\n    }\n}", "    my $smallest_even_index = -1;\n    my $smallest_even_value\
    \ = -1;\n    my $size = scalar @$arr;\n    foreach my $i (0..$size - 1) {\n  \
    \      my $node = $arr->[$i];\n        if ($node % 2 == 0 && ($smallest_even_value\
    \ == -1 || $node < $smallest_even_value)) {\n            $smallest_even_value\
    \ = $node;\n            $smallest_even_index = $i;\n        }\n    }\n    return\
    \ $smallest_even_index == -1 ? [] : [$smallest_even_value, $smallest_even_index];\n\
    }", "    my $min_val = $arr->[0];\n    my $min_idx = 0;\n    for my $i (0 .. $#$arr)\
    \ {\n        my $num = $arr->[$i];\n        if ($num % 2 == 0 && ($num < $min_val\
    \ || $min_val % 2 != 0)) {\n            $min_val = $num;\n            $min_idx\
    \ = $i;\n        }\n    }\n    return $min_val % 2 == 0 ? [$min_val, $min_idx]\
    \ : [];\n}", "    my @evens = grep {! ($_ % 2)} @$arr;\n    return [] unless @evens;\n\
    \    my @min_evens = grep {$_ == $evens[0]} @evens;\n    my @indices = map {$_\
    \ - 1} grep {$arr->[$_ - 1] == $min_evens[0]} 1..@$arr;\n    return [$min_evens[0],\
    \ $indices[0]];\n}", "    my $even_val = $arr->[0];\n    my $even_idx = 0;\n \
    \   my $is_even = 0;\n    my $idx = 0;\n    for my $val (@$arr) {\n        $idx++;\n\
    \        $is_even = $val % 2 == 0;\n        if($is_even && $val < $even_val) {\n\
    \            $even_val = $val;\n            $even_idx = $idx;\n        }\n   \
    \ }\n    return $is_even ? [$even_val, $even_idx] : [];\n}", "    my($min, $min_i);\n\
    \    my $i = 0;\n    foreach my $value (@$arr) {\n        if ($value % 2 == 0)\
    \ {\n            if (!defined($min) || $value < $min) {\n                $min\
    \ = $value;\n                $min_i = $i;\n            }\n        }\n        $i++;\n\
    \    }\n    if (defined($min)) {\n        return [$min, $min_i];\n    } else {\n\
    \        return [];\n    }\n}", "    return [] if !@$arr;\n    my $idx = -1;\n\
    \    my $min = $arr->[0];\n    for my $i (0..$#$arr) {\n        if ($arr->[$i]\
    \ < $min) {\n            $min = $arr->[$i];\n            $idx = $i;\n        }\n\
    \    }\n    return [$min, $idx] if $min == 0;\n    $idx = -1;\n    $min = $arr->[0];\n\
    \    for my $i (0..$#$arr) {\n        if ($arr->[$i] < $min && $arr->[$i] % 2\
    \ == 0) {\n            $min = $arr->[$i];\n            $idx = $i;\n        }\n\
    \    }\n    return [$min, $idx] if $idx >= 0;\n    return [];\n}", "    my @res\
    \ = ();\n    for my $i (0 .. $#$arr) {\n        if ($arr->[$i] % 2 == 0) {\n \
    \           if (scalar @res == 0 || $arr->[$i] < $res[0]) {\n                @res\
    \ = ($arr->[$i], $i);\n            }\n        }\n    }\n    return @res;\n}",
  "    my $i = 0;\n    my $smallest;\n    my $smallest_i;\n    while ($i < scalar\
    \ @$arr) {\n        if ($arr->[$i] % 2 == 0) {\n            if (! defined $smallest)\
    \ {\n                $smallest = $arr->[$i];\n                $smallest_i = $i;\n\
    \            } elsif ($arr->[$i] < $smallest) {\n                $smallest = $arr->[$i];\n\
    \                $smallest_i = $i;\n            }\n        }\n        $i++;\n\
    \    }\n    if (! defined $smallest) {\n        return [];\n    } else {\n   \
    \     return [$smallest, $smallest_i];\n    }\n}", "    my $min_even = -1;\n \
    \   my $min_even_idx = -1;\n    for my $i (0..$#$arr) {\n        if ($arr->[$i]\
    \ % 2 == 0) {\n            if ($min_even == -1) {\n                $min_even =\
    \ $arr->[$i];\n                $min_even_idx = $i;\n            }\n          \
    \  elsif ($arr->[$i] < $min_even) {\n                $min_even = $arr->[$i];\n\
    \                $min_even_idx = $i;\n            }\n        }\n    }\n    if\
    \ ($min_even == -1) {\n        return [];\n    }\n    else {\n        return [$min_even,\
    \ $min_even_idx];\n    }\n}", "    return [] if !@$arr;\n    my $min = 2 ** 63\
    \ - 1;\n    my $res = [];\n    for (my $i = 0; $i < @$arr; $i++) {\n        if\
    \ (($arr->[$i] < $min) && ($arr->[$i] % 2 == 0)) {\n            $min = $arr->[$i];\n\
    \            $res = [$min, $i];\n        }\n    }\n    return $res;\n}", "   \
    \ my $min = undef;\n    my $min_i = undef;\n    for my $i (0..@$arr-1) {\n   \
    \     if (defined $arr->[$i] && $arr->[$i] % 2 == 0) {\n            if (!defined\
    \ $min || $arr->[$i] < $min) {\n                $min = $arr->[$i];\n         \
    \       $min_i = $i;\n            }\n        }\n    }\n    if (defined $min) {\n\
    \        return [$min, $min_i];\n    } else {\n        return [];\n    }\n}",
  "    return [] if !@$arr;\n    my $res = [0xFFFF, 0xFFFF];\n    for my $i (0..$#$arr)\
    \ {\n        if( !($arr->[$i]&1) && $arr->[$i]<$res->[0] ) {\n            $res\
    \ = [$arr->[$i], $i];\n        }\n    }\n    return [0,0] if $res->[0]==0xFFFF;\n\
    \    return $res;\n}", "    my $ret = [];\n    for my $i (0 .. $#$arr) {\n   \
    \     next if $arr->[$i] % 2 == 1;\n        push @$ret, [$arr->[$i], $i] if @$ret\
    \ == 0;\n        if ($arr->[$i] < $ret->[0][0]) {\n            $ret = [[$arr->[$i],\
    \ $i]];\n        } elsif ($arr->[$i] == $ret->[0][0]) {\n            push @$ret,\
    \ [$arr->[$i], $i];\n        }\n    }\n    @$ret ? $ret->[0] : [];\n}", "    my\
    \ $res = [];\n    my $min_even = 0;\n    my $min_idx = 0;\n    my $cur_idx = 0;\n\
    \    foreach(@$arr) {\n        if( !($_ % 2) && ($_ < $min_even || !$min_even)\
    \ ) {\n            $min_even = $_;\n            $min_idx = $cur_idx;\n       \
    \ }\n        $cur_idx++;\n    }\n    if( $min_even ) {\n        push @$res, $min_even;\n\
    \        push @$res, $min_idx;\n    }\n    return $res;\n}", "    my $min;\n \
    \   my $index;\n    for my $i (0 .. $#$arr) {\n        if ($arr->[$i] % 2 == 0)\
    \ {\n            if (!defined $min || $arr->[$i] < $min) {\n                $min\
    \ = $arr->[$i];\n                $index = $i;\n            }\n        }\n    }\n\
    \    if (defined $min) {\n        return [$min, $index];\n    } else {\n     \
    \   return [];\n    }\n}", "    my @ar = @$arr;\n    if(@ar == 0){return [];}\n\
    \    my $v = min even => @ar;\n    if($v == undef){return [];}\n    my $i = firstidx\
    \ { $_ == $v } @ar;\n    return [$v, $i];\n}", "    my $size = scalar @$arr;\n\
    \    my $even_arr = [];\n    my $i = 0;\n    while($i < $size) {\n        if($arr->[$i]\
    \ % 2 == 0) {\n            push @$even_arr, $arr->[$i];\n        }\n        $i++;\n\
    \    }\n    my $size_even = scalar @$even_arr;\n    if($size_even) {\n       \
    \ my $min = $even_arr->[0];\n        $i = 1;\n        while($i < $size_even) {\n\
    \            if($even_arr->[$i] < $min) {\n                $min = $even_arr->[$i];\n\
    \            }\n            $i++;\n        }\n        return [$min, find_index($arr,\
    \ $min)];\n    }\n    return [];\n}", "    my $min = 2 ** 64;\n    my $pos = -1;\n\
    \    for my $i (0 .. $#$arr) {\n        if (($arr->[$i] % 2 == 0) && ($arr->[$i]\
    \ < $min)) {\n            $min = $arr->[$i];\n            $pos = $i;\n       \
    \ }\n    }\n    return [$min, $pos];\n}", '    # TODO', "    $arr = [sort {$a\
    \ <=> $b} @$arr];\n    for (my $i = 0; $i < @$arr; $i++) {\n        return [$arr->[$i],\
    \ $i] if $arr->[$i] % 2 == 0;\n    }\n    return [];\n}", "    my($min) = 1000;\n\
    \    my($min_idx) = -1;\n    for(my($i) = 0; $i < scalar(@$arr); $i++) {\n   \
    \     if($arr->[$i] != 0 && $arr->[$i] < $min && $arr->[$i] % 2 == 0) {\n    \
    \        $min = $arr->[$i];\n            $min_idx = $i;\n        }\n    }\n  \
    \  return [$min, $min_idx];\n}", "    my $min = +1000000;\n    my $idx = -1;\n\
    \    for my $i (0..$#$arr) {\n        if ($arr->[$i] % 2 == 0 && $arr->[$i] <\
    \ $min) {\n            $min = $arr->[$i];\n            $idx = $i;\n        }\n\
    \    }\n    if ($idx == -1) {\n        return [];\n    } else {\n        return\
    \ [$min, $idx];\n    }\n}", "    my @return = ();\n    my $value = -1;\n    my\
    \ $index = -1;\n    for (my $i = 0; $i < scalar @$arr; $i++) {\n        if ($$arr[$i]\
    \ % 2 == 0 && ($value == -1 || $$arr[$i] < $value)) {\n            $value = $$arr[$i];\n\
    \            $index = $i;\n        }\n    }\n    return $value == -1 ? [] : [$value,\
    \ $index];\n}", "    my $min = $arr->[0];\n    my $idx = 0;\n    foreach my $item\
    \ (@$arr) {\n        if ($item != 0 && $item % 2 == 0 && $item < $min) {\n   \
    \         $min = $item;\n            $idx = $item - $arr->[0];\n        }\n  \
    \  }\n    return $min == $arr->[0] ? [] : [$min, $idx];\n}", "    my $len = scalar\
    \ @$arr;\n    my $smallest = -1;\n    my $index = -1;\n    for (my $i = 0; $i\
    \ < $len; $i++){\n        my $val = $arr->[$i];\n        if ($val % 2 == 0){\n\
    \            if ($smallest == -1){\n                $smallest = $val;\n      \
    \          $index = $i;\n            } else {\n                if ($val < $smallest){\n\
    \                    $smallest = $val;\n                    $index = $i;\n   \
    \             }\n            }\n        }\n    }\n    if ($smallest == -1){\n\
    \        return [];\n    } else {\n        return [$smallest, $index];\n    }\n\
    }", "    my $even = [];\n    for my $i (0 .. $#$arr) {\n        next if $arr->[$i]\
    \ % 2;\n        if (@$even) {\n            if ($arr->[$i] < $even->[0]) {\n  \
    \              $even = [$arr->[$i], $i];\n            }\n        } else {\n  \
    \          $even = [$arr->[$i], $i];\n        }\n    }\n    return $even;\n}",
  "    my $min = ~0;\n    my $i = -1;\n    for my $x (@$arr) {\n        $i++;\n  \
    \      next if $x % 2;\n        next if $x > $min;\n        $min = $x;\n    }\n\
    \    return ($min < ~0) ? [$min, $i] : [];\n}", "    return [] if !@$arr;\n  \
    \  my $index = 0;\n    my $min = $arr->[0];\n    while($index < @$arr) {\n   \
    \     my $val = $arr->[$index];\n        if ($val < $min && $val % 2 == 0) {\n\
    \            $min = $val;\n        }\n        $index++;\n    }\n    return $min\
    \ % 2 ? [] : [$min, $index-1];\n}", "    return [] if !$arr or !@$arr;\n    my\
    \ $sm = 9**9**9;\n    my $idx = -1;\n    for my $i (0..$#$arr) {\n        if ($arr->[$i]\
    \ > 0 and $arr->[$i] % 2 == 0 and $arr->[$i] < $sm) {\n            $sm = $arr->[$i];\n\
    \            $idx = $i;\n        }\n    }\n    if ($idx == -1) {\n        return\
    \ [];\n    }\n    return [$sm, $idx];\n}", "    my $min_value = $arr->[0];\n \
    \   my $min_idx = 0;\n    my $found = 0;\n    foreach my $idx (1..$#$arr) {\n\
    \        my $curr_value = $arr->[$idx];\n        if ($curr_value % 2 == 0 && $curr_value\
    \ < $min_value) {\n            $min_value = $curr_value;\n            $min_idx\
    \ = $idx;\n            $found = 1;\n        }\n    }\n    return $found ? [$min_value,\
    \ $min_idx] : [];\n}", "    my $smallest_idx = -1;\n    my $smallest_val = -1;\n\
    \    my $idx = 0;\n    foreach my $val (@$arr) {\n        if($val % 2 == 0) {\n\
    \            if($smallest_idx == -1 || $val < $smallest_val) {\n             \
    \   $smallest_idx = $idx;\n                $smallest_val = $val;\n           \
    \ }\n        }\n        $idx += 1;\n    }\n    return [$smallest_val, $smallest_idx];\n\
    }", "    my @ret;\n    my $min_even;\n    my $min_even_i;\n    my $i = 0;\n  \
    \  foreach (@$arr) {\n        #print \"i = $i, elem = \", $_, \"\\n\";\n     \
    \   if ($_ % 2 == 0) {\n            if (! defined $min_even || $_ < $min_even)\
    \ {\n                $min_even = $_;\n                $min_even_i = $i;\n    \
    \        }\n        }\n        $i++;\n    }\n    if (defined $min_even) {\n  \
    \      @ret = ($min_even, $min_even_i);\n    }\n    #print \"returning \", Dumper(\\\
    @ret);\n    return \\@ret;\n}", "    my($smallest_even_value, $smallest_even_value_index)\
    \ = (undef, undef);\n    for my $i (0 .. $#$arr) {\n        my $val = $arr->[$i];\n\
    \        if (defined $smallest_even_value) {\n            if ($val < $smallest_even_value)\
    \ {\n                if ($val % 2 == 0) {\n                    $smallest_even_value\
    \ = $val;\n                    $smallest_even_value_index = $i;\n            \
    \    }\n            }\n        }\n        else {\n            if ($val % 2 ==\
    \ 0) {\n                $smallest_even_value = $val;\n                $smallest_even_value_index\
    \ = $i;\n            }\n        }\n    }\n    if (defined $smallest_even_value_index)\
    \ {\n        return [$smallest_even_value, $smallest_even_value_index];\n    }\n\
    \    else {\n        return [];\n    }\n}", "    my $min = -1;\n    my $index\
    \ = -1;\n    for my $i (0 .. $#$arr) {\n        if ($arr->[$i] % 2 == 0) {\n \
    \           if ($min == -1 || $arr->[$i] < $min) {\n                $min = $arr->[$i];\n\
    \                $index = $i;\n            }\n        }\n    }\n    return []\
    \ if $min == -1;\n    return [$min, $index];\n}", "    return [] if !@$arr;\n\
    \    my $min = $arr->[0];\n    my $minidx = 0;\n    my $found = 0;\n    for my\
    \ $i (1..$#$arr) {\n        if ($arr->[$i] % 2 == 0 && $arr->[$i] < $min) {\n\
    \            $min = $arr->[$i];\n            $minidx = $i;\n            $found\
    \ = 1;\n        }\n    }\n    return [] if !$found;\n    return [$min, $minidx];\n\
    }", "    my $m = shift @$arr;\n    for my $i (1..$#$arr) {\n        if ($arr->[$i]\
    \ && $arr->[$i] < $m) {\n            $m = $arr->[$i];\n        }\n    }\n    my\
    \ @ret = grep { $_ % 2 == 0 } @$arr;\n    return [ 0, 0 ] if !@ret;\n    return\
    \ [ $m, 0 ] if !(grep { $_ == $m } @ret);\n    my @ind = grep { $arr->[$_] ==\
    \ $m } (0..$#$arr);\n    return [ $m, $ind[0] ];\n}", "    return [] if @$arr\
    \ == 0;\n    my @z = grep {$_ % 2 == 0} @$arr;\n    return [] if @z == 0;\n  \
    \  my $min = min @z;\n    my $i = first_index {$_ == $min} @$arr;\n    return\
    \ [$min, $i];\n}", "    my $min = $arr->[0];\n    my $i = 0;\n    for my $n (\
    \ @$arr ) {\n        $min = $n if( $n < $min && $n % 2 == 0);\n        $i++ if(\
    \ $n == $min && $n % 2 == 0);\n    }\n    return [] if( !$min );\n    return [$min,\
    \ $i];\n}", "    return [] if (!scalar(@$arr));\n    my @even = grep {!($_ % 2)}\
    \ @$arr;\n    my $min = $even[0];\n    my $idx = 0;\n    for my $i (1..$#even)\
    \ {\n        if ($even[$i] < $min) {\n            $min = $even[$i];\n        \
    \    $idx = $i;\n        }\n    }\n    return [$min, $idx];\n}", "    my $min_even\
    \ = undef;\n    my $min_even_idx = undef;\n    for my $i (0 .. $#$arr) {\n   \
    \     my $n = $arr->[$i];\n        if (defined $n) {\n            $n = int($n);\n\
    \            if ($n % 2 == 0) {\n                if (!defined $min_even || $n\
    \ < $min_even) {\n                    $min_even = $n;\n                    $min_even_idx\
    \ = $i;\n                }\n            }\n        }\n    }\n    if (defined $min_even)\
    \ {\n        return [$min_even, $min_even_idx];\n    } else {\n        return\
    \ [];\n    }\n}", "    my $even = $arr->[0];\n    my $index = 0;\n    for (my\
    \ $i = 0; $i < @$arr; $i++) {\n        my $val = $arr->[$i];\n        if ($val\
    \ % 2 == 0) {\n            if ($even > $val) {\n                $even = $val;\n\
    \                $index = $i;\n            }\n        }\n    }\n    if ($even\
    \ % 2 == 0) {\n        return [$even, $index];\n    }\n    return [];\n}", " \
    \   my $min_even_index = -1;\n    my $min_even = 10000;\n    foreach my $i (0..$#$arr)\
    \ {\n        my $n = $arr->[$i];\n        if ($n % 2 == 0 && $n < $min_even) {\n\
    \            $min_even = $n;\n            $min_even_index = $i;\n        }\n \
    \   }\n    if ($min_even_index >= 0) {\n        return [$min_even, $min_even_index];\n\
    \    } else {\n        return [];\n    }\n}", "    my @even = grep {$_%2==0} @$arr;\n\
    \    if(@even){\n        my @even_index = map {$_%2==0 ?1:0} @$arr;\n        my\
    \ $min_even_index = first_index {$_==1} @even_index;\n        return [$arr->[$min_even_index],\
    \ $min_even_index];\n    }\n    return [];\n}", "    my @arr = sort {$a <=> $b}\
    \ grep {$_ % 2 == 0} @$arr;\n    if (scalar @arr == 0) {\n        return [];\n\
    \    }\n    my $val = $arr[0];\n    my @idx = first_index {$_ == $val} @$arr;\n\
    \    return [$val, $idx[0]];\n}", "    my @ret;\n    for my $i (0..$#$arr) {\n\
    \        if($arr->[$i] % 2 == 0) {\n            if(!@ret || $arr->[$i] < $ret[0])\
    \ {\n                @ret = ($arr->[$i], $i);\n            }\n        }\n    }\n\
    \    return @ret;\n}", "    #your code here\n    $#arr = -1 if (!$arr);\n    my\
    \ @evens = grep {$_ % 2 == 0} @$arr;\n    return [] if ($#evens == -1);\n    my\
    \ @sorted = sort {$a <=> $b} @evens;\n    my $val = $sorted[0];\n    my $idx =\
    \ 0;\n    $idx++ while ($idx <= $#evens && $evens[$idx] != $val);\n    return\
    \ [$val, $idx];\n}", "    my $i = 1;\n    my $n = $#$arr + 1;\n    my $min = 0;\n\
    \    my $min_i = 0;\n    for my $i (0 .. $#$arr) {\n        if ($arr->[$i] % 2\
    \ == 0 && ($min == 0 || $arr->[$i] < $min)) {\n            $min = $arr->[$i];\n\
    \            $min_i = $i;\n        }\n    }\n    return $min > 0 ? [$min, $min_i]\
    \ : [];\n}", "    my $min_value = 10001; #min_value > max_value, so it will be\
    \ smaller then any value in the array\n    my $min_index = 0;\n    my $counter\
    \ = 0;\n    my $found = 0;", "    my @evens = grep { !($_ % 2) } @$arr;\n    return\
    \ [] unless @evens;\n    my $min = min(@evens);\n    my $i = 0;\n    for (@$arr)\
    \ {\n        return [$min, $i] if $min == $_;\n        $i++;\n    }\n}", "   \
    \ my($res) = [];\n    my($min) = undef;\n    my($i) = 0;\n    while($i < scalar(@$arr))\
    \ {\n        if ($arr->[$i] % 2 == 0) {\n            $min = $arr->[$i] unless\
    \ defined($min);\n            if ($arr->[$i] < $min) {\n                $min =\
    \ $arr->[$i];\n                $res = [$min, $i];\n            }\n        }\n\
    \        $i++;\n    }\n    return $res;\n}", "    # select even values and compare\n\
    \    # select lowest even value in the array\n    my $min = 99999;\n    my $idx\
    \ = 0;\n    my $val = 0;\n    foreach my $i (0 .. $#{$arr}) {\n        my $val\
    \ = $arr->[$i];\n        if ($val % 2 == 0 && $val < $min) {\n            $min\
    \ = $val;\n            $idx = $i;\n        }\n    }\n    if ($min != 99999) {\n\
    \        return [$min, $idx];\n    }\n    return [];\n}", "    my $minEven = $arr->[0];\n\
    \    my $minEvenIndex = 0;\n    my $evenFound = 0;\n    foreach my $i (0 .. scalar(@$arr)\
    \ - 1) {\n        if (($arr->[$i] % 2) == 0) {\n            if (!$evenFound) {\n\
    \                $evenFound = 1;\n                $minEven = $arr->[$i];\n   \
    \             $minEvenIndex = $i;\n            }\n            elsif ($arr->[$i]\
    \ < $minEven) {\n                $minEven = $arr->[$i];\n                $minEvenIndex\
    \ = $i;\n            }\n        }\n    }\n    if ($evenFound) {\n        return\
    \ [$minEven, $minEvenIndex];\n    }\n    else {\n        return [];\n    }\n}",
  "    my $min = 10001;\n    my $smallest = -1;\n    for my $e (@$arr) {\n       \
    \ if($e % 2 == 0) {\n            if($e < $min) {\n                $min = $e;\n\
    \                $smallest = $e;\n            }\n        }\n    }\n    if($smallest\
    \ < 0) {\n        return [];\n    } else {\n        return [$smallest, $min];\n\
    \    }\n}", "    my $result = [];\n    my $index = 0;\n    my $lowest = 10001;",
  "    my $smallest = 9999;\n    my $index = 9999;\n    my $max = scalar @$arr;\n\
    \    for (my $i = 0; $i < $max; $i++) {\n        my $n = $$arr[$i];\n        if\
    \ ($n < $smallest && $n % 2 == 0) {\n            $smallest = $n;\n           \
    \ $index = $i;\n        }\n    }\n    return $smallest == 9999 ? [] : [$smallest,\
    \ $index];\n}", "    my $i = 0;\n    my @result = ();\n    my $min = -1;\n   \
    \ while ($i < scalar(@$arr)) {\n        if (defined $arr->[$i] && $arr->[$i] >\
    \ 0 && $arr->[$i] % 2 == 0) {\n            if ($min == -1 || $arr->[$i] < $min)\
    \ {\n                $min = $arr->[$i];\n                @result = ($min, $i);\n\
    \            }\n        }\n        $i++;\n    }\n    return @result;\n}", "  \
    \  my $res = [];\n    foreach my $k (0..$#$arr) {\n        my $v = $arr->[$k];\n\
    \        next if $v%2;\n        if (scalar @$res) {\n            my $resV = $res->[0];\n\
    \            if ($v < $resV) {\n                $res = [$v, $k];\n           \
    \ }\n        } else {\n            $res = [$v, $k];\n        }\n    }\n    return\
    \ $res;\n}", "    my $min = 2**32;\n    my $min_i = 2**32;\n    for my $i (0..$#$arr)\
    \ {\n        my $n = $arr->[$i];\n        if ($n && $n % 2 == 0 && $n < $min)\
    \ {\n            $min = $n;\n            $min_i = $i;\n        }\n    }\n    return\
    \ [$min, $min_i] if $min != 2**32;\n    return [];\n}", "    my $sorted = [grep{!($_\
    \ & 1)} sort{$a <=> $b} @$arr];\n    return [] unless scalar @$sorted;\n    my\
    \ $idx = index $arr, $sorted->[0];\n    return [$sorted->[0], $idx];\n}", "  \
    \  my ($even, $index) = (undef, undef);\n    for my $i (0 .. $#$arr) {\n     \
    \   my $n = $arr->[$i];\n        if ($n > 0 && $n % 2 == 0) {\n            if\
    \ (!defined $even || $n < $even) {\n                $even = $n;\n            \
    \    $index = $i;\n            }\n        }\n    }\n    return undef if !defined\
    \ $even;\n    return [$even, $index];\n}", "    # Your code here\n    my $min_value\
    \ = 2_000_000_000;\n    my $min_index = 2_000_000_000;\n    for (my $i = 0; $i\
    \ < scalar @$arr; $i++) {\n        if ($arr->[$i] % 2 == 0 && $arr->[$i] < $min_value)\
    \ {\n            $min_value = $arr->[$i];\n            $min_index = $i;\n    \
    \    }\n    }\n    if ($min_value == 2_000_000_000) {\n        return [];\n  \
    \  }\n    return [$min_value, $min_index];\n}", "    my $min = 999999999;\n  \
    \  my $index = -1;\n    for my $i (0 .. $#$arr) {\n        if ($arr->[$i] > 0\
    \ && $arr->[$i] % 2 == 0 && $arr->[$i] < $min) {\n            $min = $arr->[$i];\n\
    \            $index = $i;\n        }\n    }\n    return $index == -1 ? [] : [$min,\
    \ $index];\n}", "    my $index = -1;\n    my $min = -1;\n    for my $i (0..$#$arr)\
    \ {\n        if ($arr->[$i] % 2 == 0 && $arr->[$i] >= 0) {\n            if ($min\
    \ == -1 || $arr->[$i] < $min) {\n                $min = $arr->[$i];\n        \
    \        $index = $i;\n            }\n        }\n    }\n    return [] if $index\
    \ == -1;\n    return [$min, $index];\n}", "    my($ev_idx, $min_even, $min_idx)\
    \ = (-1, -1, -1);\n    for (my $i = 0; $i < scalar(@$arr); $i++) {\n        if\
    \ (0 == $arr->[$i] % 2) {\n            if ($ev_idx < 0 || $arr->[$i] < $min_even)\
    \ {\n                $ev_idx = $i;\n                $min_even = $arr->[$i];\n\
    \                $min_idx = $i;\n            } elsif ($arr->[$i] == $min_even)\
    \ {\n                $min_idx = $i if $i < $min_idx;\n            }\n        }\n\
    \    }\n    return $ev_idx < 0 ? [] : [$min_even, $min_idx];\n}\n1;", "    my\
    \ @r = ();\n    my $min_val = 999999999;\n    my $min_idx = -1;\n    my $i = 0;\n\
    \    foreach (@$arr) {\n        if (($_ % 2 == 0) && ($_ < $min_val)) {\n    \
    \        $min_val = $_;\n            $min_idx = $i;\n        }\n        $i +=\
    \ 1;\n    }\n    if ($min_idx >= 0) {\n        @r = ($min_val, $min_idx);\n  \
    \  }\n    return \\@r;\n}", "    # TODO:\n    return [];\n}", "    my @res = ();\n\
    \    my @sorted = sort { $a <=> $b } @$arr;\n    my $index = 0;\n    my $even\
    \ = 0;\n    my $done = 0;\n    while (!$done) {\n        if ($sorted[$index] %\
    \ 2 == 0) {\n            $even = $sorted[$index];\n            last;\n       \
    \ }\n        else {\n            $index++;\n        }\n        $done = 1 if $index\
    \ >= @sorted;\n    }\n    if ($even) {\n        my @rev = reverse @$arr;\n   \
    \     for (my $i = 0; $i < @rev; $i++) {\n            if ($rev[$i] == $even) {\n\
    \                push @res, $even, @$arr - $i - 1;\n                last;\n  \
    \          }\n        }\n    }\n    return @res;\n}", "    my @res = ();\n   \
    \ my %map = ();\n    for my $item(@$arr) {\n        if ($item % 2 == 0) {\n  \
    \          push @res, $item;\n            $map{$item} = 1;\n        }\n    }\n\
    \    if (@res == 0) {\n        return [];\n    } else {\n        my @sort_res\
    \ = sort {$a <=> $b} @res;\n        my $index = 0;\n        for my $i(0..$#sort_res)\
    \ {\n            if ($sort_res[$i] == $arr->[$i]) {\n                $index =\
    \ $i;\n                last;\n            }\n        }\n        return [$sort_res[0],\
    \ $index];\n    }\n}", "    my $min = -1;\n    my $i = -1;\n    my $min_i = -1;\n\
    \    foreach my $elem (@$arr) {\n        $i++;\n        if ($elem % 2 == 0) {\n\
    \            if ($min < 0) {\n                $min = $elem;\n                $min_i\
    \ = $i;\n            }\n            elsif ($elem < $min) {\n                $min\
    \ = $elem;\n                $min_i = $i;\n            }\n        }\n    }\n  \
    \  if ($min < 0) {\n        return [];\n    }\n    else {\n        return [$min,\
    \ $min_i];\n    }\n}", "    my @sorted = sort {$a <=> $b} grep {$_ % 2 == 0} @$arr;\n\
    \    my $m = shift @sorted;\n    return $m == undef ? []: [$m, first_index {$_\
    \ == $m} @$arr];\n}", "    return [] if $#$arr == -1;\n    my @evens = grep {\
    \ $_ % 2 == 0 } @$arr;\n    return [] if $#evens == -1;\n    my($smallest) = sort\
    \ { $a <=> $b } @evens;\n    my $idx = 0;\n    for my $node (@$arr) {\n      \
    \  if($node == $smallest) {\n            return [$smallest, $idx];\n        }\n\
    \        $idx++;\n    }\n    return [];\n}", "    my $min;\n    my $index;\n \
    \   for my $i (0 .. $#$arr) {\n        if(!$arr->[$i]) {\n            next;\n\
    \        }\n        if($arr->[$i] % 2 == 0) {\n            if(!defined $min) {\n\
    \                $min = $arr->[$i];\n                $index = $i;\n          \
    \  } elsif($arr->[$i] < $min) {\n                $min = $arr->[$i];\n        \
    \        $index = $i;\n            }\n        }\n    }\n    return defined $min\
    \ ? [$min, $index] : [];\n}", "    my @candidate = (10000);\n    for my $i (0..@$arr-1)\
    \ {\n        if ($arr->[$i] > 0 and $arr->[$i] % 2 == 0) {\n            @candidate\
    \ = ($arr->[$i], $i) if $arr->[$i] < $candidate[0];\n        }\n    }\n    $candidate[0]\
    \ == 10000 ? [] : \\@candidate;\n}", "    my @arr = @$arr;\n    my($min_value,\
    \ $min_index) = (2**31, 2**31);\n    for my $i (0..$#arr) {\n        if ($arr[$i]\
    \ % 2 == 0) {\n            if ($arr[$i] < $min_value) {\n                $min_value\
    \ = $arr[$i];\n                $min_index = $i;\n            }\n        }\n  \
    \  }\n    return ($min_value == 2**31) ? [] : [$min_value, $min_index];\n}", " \
    \   my($found, $index) = (10 ** 8, -1);\n    for my $i (0 .. $#$arr) {\n     \
    \   next if $arr->[$i] % 2;\n        if ($arr->[$i] < $found) {\n            $found\
    \ = $arr->[$i];\n            $index = $i;\n        }\n    }\n    return [] if\
    \ $index == -1;\n    return [$found, $index];\n}", "    my $smallest = -1;\n \
    \   my $idx = -1;\n    my $i = 0;\n    while($i < scalar(@$arr)) {\n        if($arr->[$i]\
    \ % 2 == 0) {\n            if($smallest == -1 || $arr->[$i] < $smallest) {\n \
    \               $smallest = $arr->[$i];\n                $idx = $i;\n        \
    \    }\n        }\n        $i++;\n    }\n    return $smallest == -1 ? [] : [$smallest,\
    \ $idx];\n}", "    if (scalar(@$arr) == 0) {\n        return [];\n    }\n    my\
    \ $min = 1e99;\n    my $index = -1;\n    for (my $i = 0; $i < scalar(@$arr); $i++)\
    \ {\n        if ($arr->[$i] % 2 == 0 && $arr->[$i] < $min) {\n            $min\
    \ = $arr->[$i];\n            $index = $i;\n        }\n    }\n    if ($index ==\
    \ -1) {\n        return [];\n    }\n    return [$min, $index];\n}", "    my $res\
    \ = [];\n    if (!@$arr) {\n        return $res;\n    }\n    my $min;\n    my\
    \ $index;\n    for (my $i = 0; $i < @$arr; $i++) {\n        if ($arr->[$i] % 2\
    \ == 0) {\n            if (!defined $min) {\n                $min = $arr->[$i];\n\
    \                $index = $i;\n            } elsif ($arr->[$i] < $min) {\n   \
    \             $min = $arr->[$i];\n                $index = $i;\n            }\n\
    \        }\n    }\n    if (defined $min) {\n        $res = [$min, $index];\n \
    \   }\n    return $res;\n}", "    my $n = scalar @$arr;\n    my @even;\n    my\
    \ $min_even;\n    my $min_even_i;\n    for my $i (0..$n-1) {\n        next if\
    \ $arr->[$i] % 2;\n        push @even, $arr->[$i];\n        if ( !defined $min_even\
    \ or $min_even > $arr->[$i] ) {\n            $min_even = $arr->[$i];\n       \
    \     $min_even_i = $i;\n        }\n    }\n    if ( !@even ) {\n        return\
    \ [];\n    } else {\n        return [ $min_even, $min_even_i ];\n    }\n}", " \
    \   if(0 == scalar(@$arr)) {\n        return [];\n    }", "    my $minIdx = -1;\n\
    \    my $minVal = -1;\n    my $len = scalar @$arr;\n    if ($len == 0) {\n   \
    \     return [];\n    }\n    for (my $i = 0; $i < $len; $i++) {\n        my $val\
    \ = $arr->[$i];\n        if ($val % 2 == 0) {\n            if ($minIdx == -1 ||\
    \ $val < $minVal) {\n                $minIdx = $i;\n                $minVal =\
    \ $val;\n            }\n        }\n    }\n    if ($minIdx == -1) {\n        return\
    \ [];\n    }\n    return [$minVal, $minIdx];\n}", "    my $res = [];\n    if (scalar\
    \ @$arr == 0) {\n        return $res;\n    }\n    foreach my $i (0 .. $#$arr)\
    \ {\n        my $val = $arr->[$i];\n        if ($val % 2 == 0) {\n           \
    \ if (scalar @$res == 0) {\n                $res = [$val, $i];\n            }\
    \ elsif ($val < $res->[0]) {\n                $res = [$val, $i];\n           \
    \ }\n        }\n    }\n    return $res;\n}", "    my $min;\n    my $idx;\n   \
    \ for my $i (0 .. $#$arr) {\n        my $v = $arr->[$i];\n        if ($v % 2 ==\
    \ 0) {\n            if (!defined($min) || $v < $min) {\n                $min =\
    \ $v;\n                $idx = $i;\n            }\n        }\n    }\n    if (defined($min))\
    \ {\n        return [$min, $idx];\n    } else {\n        return [];\n    }\n}",
  "    my $i = 0;\n    my @return;\n    #print \"Array passed is : @$arr \\n\";\n\
    \    foreach my $element(@$arr) {\n        if(!($element % 2)) {\n           \
    \ push(@return, $element);\n            push(@return, $i);\n            last;\n\
    \        }\n        $i++;\n    }\n    #print \"Array returned is : @return \\\
    n\";\n    if(scalar(@return) == 0) {\n        return [];\n    }\n    return \\\
    @return;\n}", "    my @even = ();\n    for my $i (0 .. $#{$arr}) {\n        if(($arr->[$i]\
    \ & 1) == 0) {\n            push @even, [$arr->[$i], $i];\n        }\n    }\n\
    \    if(@even == 0) {\n        return [];\n    }\n    my $min = @even[0];\n  \
    \  for my $e (@even) {\n        if($e->[0] < $min->[0]) {\n            $min =\
    \ $e;\n        }\n    }\n    return $min;\n}", "    my $ind = 0;\n    my $min\
    \ = 10000;\n    foreach my $k (0..$#{$arr}) {\n        if ($arr->[$k] % 2 == 0\
    \ && $arr->[$k] < $min) {\n            $min = $arr->[$k];\n            $ind =\
    \ $k;\n        }\n    }\n    return [] if $min == 10000;\n    return [$min, $ind];\n\
    }", "    my $result = [undef, undef];\n    for my $i (0 .. @$arr - 1) {\n    \
    \    if (!defined $result->[0] && $arr->[$i] % 2 == 0) {\n            $result\
    \ = [$arr->[$i], $i];\n        }\n        elsif (defined $result->[0] && $arr->[$i]\
    \ % 2 == 0 && $arr->[$i] < $result->[0]) {\n            $result = [$arr->[$i],\
    \ $i];\n        }\n    }\n    return $result;\n}", "    my $mini = -1;\n    my\
    \ $result = [];\n    for my $idx (0..$#$arr) {\n        if ($arr->[$idx] % 2 ==\
    \ 0 && $mini == -1) {\n            $mini = $idx;\n        } elsif ($arr->[$idx]\
    \ % 2 == 0 && $arr->[$idx] < $arr->[$mini]) {\n            $mini = $idx;\n   \
    \     }\n    }\n    return [] if $mini == -1;\n    return [$arr->[$mini], $mini];\n\
    }", "    my @e = grep {$_ % 2 == 0} @$arr;\n    @e = sort {$a <=> $b} @e;\n  \
    \  my @result = ();\n    if(@e) {\n        my $value = $e[0];\n        @result\
    \ = ($value, first_index {$_ == $value} @$arr);\n    }\n    return @result;\n}",
  "    my $smallest = undef;\n    my $smallest_index = undef;\n    my $i = 0;\n  \
    \  while ($i < scalar(@$arr)) {\n        my $value = $arr->[$i];\n        if (!defined($smallest)\
    \ && !($value % 2)) {\n            $smallest = $value;\n            $smallest_index\
    \ = $i;\n        } elsif (!($value % 2) && $value < $smallest) {\n           \
    \ $smallest = $value;\n            $smallest_index = $i;\n        }\n        $i++;\n\
    \    }\n    if (defined($smallest) && defined($smallest_index)) {\n        return\
    \ [$smallest, $smallest_index];\n    } else {\n        return [];\n    }\n}",
  "    my $len = scalar @$arr;\n    my $res = -1;\n    my $min = undef;\n    my $min_idx\
    \ = undef;\n    for (my $i = 0; $i < $len; $i++) {\n        my $current = $arr->[$i];\n\
    \        if ($current % 2 == 0) {\n            $res = $current;\n            if\
    \ (defined $min) {\n                if ($current < $min) {\n                 \
    \   $min = $current;\n                    $min_idx = $i;\n                }\n\
    \            } else {\n                $min = $current;\n                $min_idx\
    \ = $i;\n            }\n        }\n    }\n    if ($res == -1) {\n        return\
    \ [];\n    } else {\n        return [$min, $min_idx];\n    }\n}", "    my @sorted\
    \ = sort { $a->[0] <=> $b->[0] } map { [ $_, $i++ ] } @$arr;\n    for (@sorted)\
    \ {\n        return $_ if $_->[0] % 2 == 0;\n    }\n    return [];\n}", "    return\
    \ [] if @$arr == 0;\n    my @ret = [];\n    for my $i (0..$#$arr) {\n        my\
    \ $num = $arr->[$i];\n        if ($num % 2 == 0) {\n            if (@ret == 0)\
    \ {\n                @ret = ($num, $i);\n            } else {\n              \
    \  if ($num < $ret[0]) {\n                    @ret = ($num, $i);\n           \
    \     }\n            }\n        }\n    }\n    return @ret;\n}", "    my $smallest_even\
    \ = -1;\n    my $smallest_even_idx = -1;\n    for (my $i = 0; $i < scalar(@$arr);\
    \ $i++) {\n        my $elem = $arr->[$i];\n        if ($elem % 2 == 0) {\n   \
    \         if ($smallest_even == -1) {\n                $smallest_even = $elem;\n\
    \                $smallest_even_idx = $i;\n            } elsif ($elem < $smallest_even)\
    \ {\n                $smallest_even = $elem;\n                $smallest_even_idx\
    \ = $i;\n            }\n        }\n    }\n    if ($smallest_even == -1) {\n  \
    \      return [];\n    } else {\n        return [$smallest_even, $smallest_even_idx];\n\
    \    }\n}", "    $arr = [] unless defined $arr;\n    my($min_even, $idx) = (undef,\
    \ undef);\n    for my $i (0 .. $#$arr) {\n        next unless defined $arr->[$i];\n\
    \        next unless $arr->[$i] % 2 == 0;\n        if(!defined $min_even || $arr->[$i]\
    \ < $min_even) {\n            $min_even = $arr->[$i];\n            $idx = $i;\n\
    \        }\n    }\n    return [] unless defined $min_even;\n    return [$min_even,\
    \ $idx];\n}", "    my $min = 1e9;\n    my $idx = -1;\n    for my $i (0..$#$arr)\
    \ {\n        my $v = $arr->[$i];\n        next if $v % 2;\n        if ($v < $min)\
    \ {\n            $min = $v;\n            $idx = $i;\n        }\n    }\n    return\
    \ [$min, $idx] if $idx >= 0;\n    return [];\n}", "    return [] if !@$arr;\n\
    \    my $min_ix = List::Util::first { !($arr->[$_] & 1) } 0 .. $#$arr;\n    return\
    \ [] if !defined $min_ix;\n    my $min = $arr->[$min_ix];\n    for my $i (0 ..\
    \ $#$arr) {\n        next if $arr->[$i] & 1;\n        $min_ix = $i, $min = $arr->[$i]\
    \ if $arr->[$i] < $min;\n    }\n    return [$min, $min_ix];\n}", "    my $index;\n\
    \    my $min = -1;\n    foreach my $i (0 .. $#$arr) {\n        if ($arr->[$i]\
    \ % 2 == 0) {\n            if ($min == -1) {\n                $min = $arr->[$i];\n\
    \                $index = $i;\n            } elsif ($arr->[$i] < $min) {\n   \
    \             $min = $arr->[$i];\n                $index = $i;\n            }\n\
    \        }\n    }\n    if ($min == -1) {\n        return [];\n    } else {\n \
    \       return [$min, $index];\n    }\n}", "    my $len = scalar @$arr;\n    #\
    \ your code goes here\n    return [] if $len == 0;\n    my @even = map { $_ %\
    \ 2 == 0 ? [$_, $arr->[$_]] : () } 0..$len-1;\n    my @ans = sort { $a->[1] <=>\
    \ $b->[1] } @even;\n    return $ans[0];\n}", "    my @evens = grep {$_ % 2 ==\
    \ 0} @$arr;\n    return [] unless @evens;\n    my $min_even = min @evens;\n  \
    \  my $min_idx = first_index {$_ eq $min_even} @$arr;\n    return [$min_even,\
    \ $min_idx];\n}", "    my $idx = 0;\n    my $min = -1;\n    for my $i (0..$#$arr)\
    \ {\n        if ($arr->[$i] % 2 == 0) {\n            if ($min == -1 || $arr->[$i]\
    \ < $min) {\n                $min = $arr->[$i];\n                $idx = $i;\n\
    \            }\n        }\n    }\n    if ($min == -1) {\n        [];\n    } else\
    \ {\n        [$min, $idx];\n    }\n}", "    my $even_num;\n    my $even_idx;\n\
    \    foreach my $i (0..$#$arr) {\n        my $num = $arr->[$i];\n        if (\
    \ defined $even_num ) {\n            next if $num % 2;\n            if ( $num\
    \ < $even_num ) {\n                $even_num = $num;\n                $even_idx\
    \ = $i;\n            }\n        }\n        else {\n            if ( $num % 2 ==\
    \ 0 ) {\n                $even_num = $num;\n                $even_idx = $i;\n\
    \            }\n        }\n    }\n    defined $even_num ? [ $even_num, $even_idx\
    \ ] : [];\n}", "    my $smallest_value;\n    my $smallest_value_index;\n    for\
    \ ( my $i = 0; $i < scalar @$arr; $i++ ) {\n        if ( $arr->[$i] % 2 == 0 )\
    \ {\n            if ( !defined $smallest_value ||\n                 $arr->[$i]\
    \ < $smallest_value ) {\n                $smallest_value = $arr->[$i];\n     \
    \           $smallest_value_index = $i;\n            }\n        }\n    }\n   \
    \ return [] unless defined $smallest_value;\n    return [ $smallest_value, $smallest_value_index\
    \ ];\n}\nuse Test::More;\nuse Test::LMU;", "    my $idx = 0;\n    my $even_val\
    \ = 10000000;\n    my $tmp_idx = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num % 2 == 0 && $num < $even_val) {\n            $even_val = $num;\n     \
    \       $idx = $tmp_idx;\n        }\n        $tmp_idx++;\n    }\n    if ($even_val\
    \ == 10000000) {\n        return [];\n    }\n    return [$even_val, $idx];\n}",
  "    my $i = 0;\n    my $result;\n    my $min_val = -1;\n    my $min_idx = -1;\n\
    \    for my $item (@$arr) {\n        if ($item % 2 == 0) {\n            if ($min_val\
    \ == -1 || $item < $min_val) {\n                $min_val = $item;\n          \
    \      $min_idx = $i;\n            }\n        }\n        $i++;\n    }\n    if\
    \ ($min_val != -1) {\n        $result = [$min_val, $min_idx];\n    } else {\n\
    \        $result = [];\n    }\n    return $result;\n}", "    my $min_index = 0;\n\
    \    my $min_value = -1;\n    for (my $i = 0; $i < scalar @$arr; $i++) {\n   \
    \     my $num = $arr->[$i];\n        next if ($num % 2 == 1);\n        next if\
    \ ($min_value != -1 && $num > $min_value);\n        $min_value = $num;\n     \
    \   $min_index = $i;\n    }\n    return $min_value == -1 ? [] : [$min_value, $min_index];\n\
    }", "    my $min_even_val = -1;\n    my $min_even_idx = -1;\n    for my $i (0\
    \ .. $#$arr) {\n        if ($arr->[$i] % 2 == 0 && $arr->[$i] < $min_even_val)\
    \ {\n            $min_even_val = $arr->[$i];\n            $min_even_idx = $i;\n\
    \        }\n    }\n    return $min_even_val == -1 ? [] : [$min_even_val, $min_even_idx];\n\
    }", "    my @odds = grep {$_ % 2 == 1} @$arr;\n    my @evens = grep {$_ % 2 ==\
    \ 0} @$arr;\n    my $min;\n    my $min_idx;\n    if (@evens) {\n        $min =\
    \ $evens[0];\n        $min_idx = firstidx {$_ == $min} @$arr;\n        for my\
    \ $i (1..$#evens) {\n            if ($evens[$i] < $min) {\n                $min\
    \ = $evens[$i];\n                $min_idx = firstidx {$_ == $min} @$arr;\n   \
    \         }\n        }\n    }\n    else {\n        $min = $odds[0];\n        $min_idx\
    \ = firstidx {$_ == $min} @$arr;\n        for my $i (1..$#odds) {\n          \
    \  if ($odds[$i] < $min) {\n                $min = $odds[$i];\n              \
    \  $min_idx = firstidx {$_ == $min} @$arr;\n            }\n        }\n    }\n\
    \    return [$min, $min_idx];\n}", "    my $min_even_value = undef;\n    my $min_even_value_index\
    \ = undef;\n    my $index = 0;\n    foreach my $value (@$arr) {\n        if ($value\
    \ % 2 == 0) {\n            if (not defined $min_even_value) {\n              \
    \  $min_even_value = $value;\n                $min_even_value_index = $index;\n\
    \            }\n            elsif ($value < $min_even_value) {\n             \
    \   $min_even_value = $value;\n                $min_even_value_index = $index;\n\
    \            }\n        }\n        $index++;\n    }\n    return defined $min_even_value\
    \ ? [$min_even_value, $min_even_value_index] : [];\n}\nmy $result = pluck([5,\
    \ 0, 3, 0, 4, 2]);\nprint \"[$result->[0], $result->[1]]\\n\";", "    # your code\
    \ here\n    my $min = undef;\n    my $index = undef;\n    for my $i (0..$#$arr)\
    \ {\n        my $el = $arr->[$i];\n        if ($el % 2 == 0) {\n            if\
    \ (!defined $min) {\n                $min = $el;\n                $index = $i;\n\
    \            } else {\n                if ($el < $min) {\n                   \
    \ $min = $el;\n                    $index = $i;\n                }\n         \
    \   }\n        }\n    }\n    if (!defined $min) {\n        return [];\n    }\n\
    \    return [$min, $index];\n}", "    my $min_i;\n    my $min_v;\n    my $i =\
    \ 0;\n    for my $v (@$arr) {\n        if ($v % 2 == 0) {\n            if (!defined\
    \ $min_v) {\n                $min_v = $v;\n                $min_i = $i;\n    \
    \        } elsif ($v < $min_v) {\n                $min_v = $v;\n             \
    \   $min_i = $i;\n            }\n        }\n        $i++;\n    }\n    defined\
    \ $min_v ? [$min_v, $min_i] : [];\n}", "    if (scalar(@$arr) == 0) {\n      \
    \  return [];\n    }\n    my $min = -1;\n    my $min_idx = -1;\n    for (my $i\
    \ = 0; $i < scalar(@$arr); $i++) {\n        if ($arr->[$i] % 2 == 0 && ($min ==\
    \ -1 || $arr->[$i] < $min)) {\n            $min = $arr->[$i];\n            $min_idx\
    \ = $i;\n        }\n    }\n    if ($min == -1) {\n        return [];\n    }\n\
    \    return [$min, $min_idx];\n}", "    my $min = 1e9999;\n    my $index = -1;\n\
    \    for my $i (0 .. $#$arr) {\n        if ($arr->[$i] % 2 == 0) {\n         \
    \   if ($arr->[$i] < $min) {\n                $min = $arr->[$i];\n           \
    \     $index = $i;\n            }\n        }\n    }\n    if ($index == -1) {\n\
    \        return [];\n    }\n    return [$min, $index];\n}", "    my $idx = -1;\n\
    \    my $min = -1;\n    for my $i (0..@$arr-1) {\n        if ($arr->[$i] % 2 ==\
    \ 0) {\n            if ($idx == -1 || $arr->[$i] < $min) {\n                $idx\
    \ = $i;\n                $min = $arr->[$i];\n            }\n        }\n    }\n\
    \    return $idx == -1 ? [] : [$min, $idx];\n}", "    my $min_even = -1;\n   \
    \ my $min_even_idx = -1;\n    for my $i (0..$#$arr) {\n        my $val = $arr->[$i];\n\
    \        if ($val % 2 == 0) {\n            if ($min_even == -1 || $val < $min_even)\
    \ {\n                $min_even = $val;\n                $min_even_idx = $i;\n\
    \            }\n        }\n    }\n    return $min_even == -1 ? [] : [$min_even,\
    \ $min_even_idx];\n}", "    my @even = grep { !($_ & 1) } @$arr;\n    return []\
    \ unless @even;\n    my $i = firstidx { $_ == $even[0] } @$arr;\n    return [$even[0],\
    \ $i];\n}", "    my($found, $idx) = (undef, 0);\n    for my $i (0 .. $#$arr) {\n\
    \        my $val = $arr->[$i];\n        next if $val % 2;\n        if(!defined($found)\
    \ || $val < $found) {\n            $found = $val;\n            $idx = $i;\n  \
    \      }\n    }\n    return $found ? [$found, $idx] : [];\n}", "    my($ret, $min)\
    \ = ([], 1e9999);\n    for my $i (0 .. $#$arr) {\n        next if $arr->[$i] %\
    \ 2;\n        if ($arr->[$i] < $min) {\n            $min = $arr->[$i];\n     \
    \       $ret = [$min, $i];\n        }\n    }\n    return $ret;\n}", "    my $min\
    \ = 10001;\n    my @plucked;\n    foreach my $i (0..$#{$arr}) {\n        if ($arr->[$i]\
    \ % 2 == 0) {\n            if ($arr->[$i] < $min) {\n                $min = $arr->[$i];\n\
    \                @plucked = ($arr->[$i], $i);\n            }\n        }\n    }\n\
    \    return \\@plucked;\n}", "    my $min = -1;\n    my $min_idx = 0;\n    for\
    \ my $idx (0 .. $#$arr) {\n        if ($arr->[$idx] % 2 == 0 &&\n            ($min\
    \ == -1 || $arr->[$idx] < $min)) {\n            $min = $arr->[$idx];\n       \
    \     $min_idx = $idx;\n        }\n    }\n    return $min == -1 ? [] : [$min,\
    \ $min_idx];\n}", "    my $res_ref = [];\n    my $min = undef;\n    my $idx =\
    \ undef;\n    foreach my $idx (0 .. scalar(@$arr) - 1) {\n        my $val = $arr->[$idx];\n\
    \        next if ($val & 1);\n        if (defined($min)) {\n            if ($val\
    \ < $min) {\n                $min = $val;\n                $idx = $idx;\n    \
    \        }\n        } else {\n            $min = $val;\n            $idx = $idx;\n\
    \        }\n    }\n    if (defined($min)) {\n        push(@$res_ref, $min);\n\
    \        push(@$res_ref, $idx);\n    }\n    return $res_ref;\n}", "    # your\
    \ code goes here\n    my $even_node = undef;\n    for (my $i = 0; $i < scalar\
    \ @$arr; $i++) {\n        if ($arr->[$i] % 2 == 0) {\n            if (!defined\
    \ $even_node) {\n                $even_node = [$arr->[$i], $i];\n            }\
    \ else {\n                if ($arr->[$i] < $even_node->[0]) {\n              \
    \      $even_node = [$arr->[$i], $i];\n                }\n            }\n    \
    \    }\n    }\n    if (defined $even_node) {\n        return $even_node;\n   \
    \ } else {\n        return [];\n    }\n}", "    my $min_value = $arr->[0];\n \
    \   my $min_index = 0;\n    foreach my $i (0 .. $#$arr) {\n        if ($arr->[$i]\
    \ % 2 == 0) {\n            if ($arr->[$i] < $min_value) {\n                $min_value\
    \ = $arr->[$i];\n                $min_index = $i;\n            }\n        }\n\
    \    }\n    return [$min_value, $min_index];\n}", "    my @arr = @$arr;\n    my\
    \ ($index, $min_even) = (-1, undef);\n    for my $i (0..$#arr) {\n        my $n\
    \ = $arr[$i];\n        next if $n % 2;\n        if (!defined $min_even or $n <\
    \ $min_even) {\n            $min_even = $n;\n            $index = $i;\n      \
    \  }\n    }\n    return $index < 0 ? [] : [$min_even, $index];\n}", "    # sort\
    \ the array, even values first,\n    # keep the index and return the first one\n\
    \    my @sorted =\n        sort {\n            if($a < $b) {\n               \
    \ if(($a % 2) > ($b % 2)) {\n                    return 1;\n                }\n\
    \                return -1;\n            }\n            if(($a % 2) < ($b % 2))\
    \ {\n                return -1;\n            }\n            return 1;\n      \
    \  } @$arr;\n    foreach my $x (@sorted) {\n        if($x % 2 == 0) {\n      \
    \      my $idx = $idx_of{$x};\n            return [$x, $idx];\n        }\n   \
    \ }\n    return [];\n}", "    my $min = -1;\n    my $i = -1;\n    my $j = -1;\n\
    \    for(my $k = 0; $k < scalar(@$arr); $k++) {\n        if ($arr->[$k] % 2 ==\
    \ 0) {\n            if ($min == -1) {\n                $min = $arr->[$k];\n  \
    \              $i = $k;\n            } else {\n                if ($arr->[$k]\
    \ < $min) {\n                    $min = $arr->[$k];\n                    $i =\
    \ $k;\n                }\n            }\n        }\n    }\n    return [$min, $i];\n\
    }", "    my $idx = first_index { not $_ % 2 } @$arr;\n    if ($idx < 0) {\n  \
    \      return [];\n    }\n    my $v = $arr->[$idx];\n    for my $i (0 .. $#$arr)\
    \ {\n        if ($arr->[$i] < $v and not $arr->[$i] % 2) {\n            $v = $arr->[$i];\n\
    \            $idx = $i;\n        }\n    }\n    return [$v, $idx];\n}\n1;", " \
    \   my $smallest_even = undef;\n    my $smallest_even_idx = undef;\n    for my\
    \ $i (0 .. $#$arr) {\n        my $v = $arr->[$i];\n        if (defined $smallest_even)\
    \ {\n            if ($v == $smallest_even) {\n                $smallest_even_idx\
    \ = $i;\n            } elsif (($v < $smallest_even) && ($v % 2 == 0)) {\n    \
    \            $smallest_even = $v;\n                $smallest_even_idx = $i;\n\
    \            }\n        } elsif ($v % 2 == 0) {\n            $smallest_even =\
    \ $v;\n            $smallest_even_idx = $i;\n        }\n    }\n    if (defined\
    \ $smallest_even) {\n        return [$smallest_even, $smallest_even_idx];\n  \
    \  } else {\n        return [];\n    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
