language: pl
name: HumanEval_55_fib
results:
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n == 0) {\n   \
    \     return 0;\n    } elsif ($n == 1) {\n        return 1;\n    } else {\n  \
    \      return fib($n-1) + fib($n-2);\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n <= 2) {\n   \
    \     return 1;\n    } else {\n        return fib($n-1) + fib($n-2);\n    }\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n   \
    \     if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return $n < 2 ? $n :\
    \ fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821059
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($f0, $f1, $f2);\n\
    \    return 0 if $n == 0;\n    return 1 if $n == 1;\n    $f0 = 0;\n    $f1 = 1;\n\
    \    for(2..$n) {\n\t$f2 = $f0 + $f1;\n\t$f0 = $f1;\n\t$f1 = $f2;\n    }\n   \
    \ return $f2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821059
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my @memo = (1, 1);\n\
    \    for my $i (2..$n) {\n        push @memo, $memo[$i-1] + $memo[$i-2];\n   \
    \ }\n    return $memo[$n-1];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821059
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 1 if $n <= 2;\n\
    \    fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($fib, $a, $b);\n\
    \    if ($n == 1 || $n == 2) {\n\treturn 1;\n    }\n    $a = 1;\n    $b = 1;\n\
    \    while ($n-- > 2) {\n\t$fib = $a + $b;\n\t$a = $b;\n\t$b = $fib;\n    }\n\
    \    return $fib;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821059
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return $n if $n < 2;\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return $n if $n < 2;\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($f0, $f1) = (0, 1);\n\
    \    while ($n-- > 0) {\n        ($f0, $f1) = ($f1, $f0 + $f1);\n    }\n    return\
    \ $f0;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n\
    \        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821059
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n <= 2) {\n   \
    \     return 1;\n    }\n    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821059
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($a, $b);\n    return\
    \ 0 if $n < 1;\n    $a = 0;\n    $b = 1;\n    while ($n-- > 1) {\n        ($a,\
    \ $b) = ($b, $a + $b);\n    }\n    return $b;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821059
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n < 2) {\n    \
    \    return $n;\n    } else {\n        return fib($n-1) + fib($n-2);\n    }\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n   \
    \     if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if($n == 0){\n     \
    \   return 0;\n    }\n    if($n == 1){\n        return 1;\n    }\n    return fib($n-1)\
    \ + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821059
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    $fibs[$n] ||= $n < 2\
    \ ? $n : fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821059
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($a, $b) = (0, 1);\n\
    \    for (my $i = 0; $i < $n; $i++) {\n        ($a, $b) = ($b, $a + $b);\n   \
    \ }\n    return $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821059
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n < 3) {\n    \
    \    return 1;\n    }\n    else {\n        return fib($n-1) + fib($n-2);\n   \
    \ }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n\
    \        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821059
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ( $n < 2 ) {\n  \
    \      return $n;\n    } else {\n        return fib($n-1) + fib($n-2);\n    }\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n   \
    \     if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821059
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($i, $x, $y);\n  \
    \  return 1 if $n == 1 || $n == 2;\n    $x = $y = 1;\n    for ($i = 3; $i <= $n;\
    \ $i++) {\n        $x = $x + $y;\n        $y = $x - $y;\n    }\n    return $x;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n   \
    \     if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821059
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n == 0) {\n   \
    \     return 0;\n    } elsif ($n == 1) {\n        return 1;\n    } else {\n  \
    \      return fib($n-1) + fib($n-2);\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($a, $b) = (0, 1);\n\
    \    for (1..$n) {\n        ($a, $b) = ($b, $a + $b);\n    }\n    return $a;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n   \
    \     if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n < 2) {\n    \
    \    return $n;\n    } else {\n        return fib($n-1) + fib($n-2);\n    }\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n   \
    \     if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($a, $b) = (0, 1);\n\
    \    for (1..$n) {\n        ($a, $b) = ($b, $a + $b);\n    }\n    return $a;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n   \
    \     if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 1 if $n == 1\
    \ || $n == 2;\n    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n == 0) {\n   \
    \     return 0;\n    } elsif ($n == 1) {\n        return 1;\n    } else {\n  \
    \      return fib($n-1) + fib($n-2);\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my $i = 0;\n    my $f1\
    \ = 0;\n    my $f2 = 1;\n    my $f3 = 0;\n    while ($i < $n) {\n        $f3 =\
    \ $f1 + $f2;\n        $f1 = $f2;\n        $f2 = $f3;\n        $i++;\n    }\n \
    \   return $f1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n < 3) {\n    \
    \    return 1;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if($n < 2) { return\
    \ $n; }\n    else { return fib($n-1) + fib($n-2); }\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my @list = (0, 1);\n\
    \    return $list[$n] if $n < 2;\n    for (my $i = 2; $i <= $n; $i++) {\n    \
    \    push @list, $list[$i-1] + $list[$i-2];\n    }\n    $list[$n];\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n < 2) {\n    \
    \    return $n;\n    } else {\n        return fib($n-1) + fib($n-2);\n    }\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n   \
    \     if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 0 if $n == 0;\n\
    \    return 1 if $n == 1;\n    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n < 2) {\n    \
    \    return $n;\n    } else {\n        return fib($n-1) + fib($n-2);\n    }\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n   \
    \     if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($m, $r);\n    if\
    \ ($n < 2) {\n        return $n;\n    }\n    $r = 1;\n    $m = 1;\n    while ($n\
    \ > 2) {\n        $r += $m;\n        $m = $r - $m;\n        $n--;\n    }\n   \
    \ return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 1
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($i, $f1, $f2) = (0,\
    \ 1, 1);\n    while ($i < $n) {\n        ($f1, $f2) = ($f2, $f1 + $f2);\n    \
    \    $i++;\n    }\n    return $f1;\n}\n1;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my @fib = (0, 1);\n\
    \    for my $i (2..$n) {\n        push @fib, $fib[$i-1] + $fib[$i-2];\n    }\n\
    \    return $fib[$n];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my $fib;\n    if ($n\
    \ == 0) {\n        $fib = 0;\n    } elsif ($n == 1) {\n        $fib = 1;\n   \
    \ } else {\n        $fib = fib($n-1) + fib($n-2);\n    }\n    return $fib;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n      \
    \  if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return $n if ($n < 2);\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    $n < 2 ? $n : fib($n-1)\
    \ + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($i, $x, $y);\n  \
    \  $x = 1;\n    $y = 1;\n    $i = 2;\n    while ($i < $n) {\n        $x = $x +\
    \ $y;\n        $y = $x - $y;\n        $i = $i + 1;\n    }\n    return $x;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n      \
    \  if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 0 if $n == 0;\n\
    \    return 1 if $n == 1;\n    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return $n if $n < 2;\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 0 if $n == 0;\n\
    \    return 1 if $n == 1;\n    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return $n if $n <= 1;\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return $n if $n < 2;\n\
    \    fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n < 2) {\n    \
    \    return $n;\n    } else {\n        return fib($n-1) + fib($n-2);\n    }\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n   \
    \     if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($a, $b);\n    return\
    \ $n if ($n <= 1);\n    $a = fib($n - 1);\n    $b = fib($n - 2);\n    return $a\
    \ + $b;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n\
    \        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return $n if $n < 2;\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    die \"Can't compute\
    \ the $n-th Fibonacci number\" if $n < 1;\n    my($a, $b) = (0, 1);\n    while\
    \ ($n > 1) {\n        ($a, $b) = ($b, $a + $b);\n        $n--;\n    }\n    return\
    \ $b;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n\
    \        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return $n if ($n <=\
    \ 1);\n    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n < 2) {\n    \
    \    return $n;\n    } else {\n        return fib($n-1) + fib($n-2);\n    }\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n   \
    \     if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 1 if $n <= 2;\n\
    \    fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($a, $b) = (0, 1);\n\
    \    while($n--) {\n        ($a, $b) = ($b, $a + $b);\n    }\n    return $a;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n   \
    \     if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    $n < 2 ? $n : fib($n-1)\
    \ + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 0 if $n == 0;\n\
    \    return 1 if $n == 1;\n    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 1 if $n <= 2;\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my $a = 0;\n    my $b\
    \ = 1;\n    while ($n > 0) {\n        $b = $a + $b;\n        $a = $b - $a;\n \
    \       $n = $n - 1;\n    }\n    return $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return $n if $n < 2;\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 1
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    die \"N is not an integer\"\
    \ unless $n =~ /^\\d+$/;\n    my($f, $f1, $f2) = (0, 1, 1);\n    while ($n-- >\
    \ 0) {\n        $f = $f1 + $f2;\n        ($f1, $f2) = ($f2, $f);\n    }\n    return\
    \ $f;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n\
    \        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($a, $b) = (0, 1);\n\
    \    for (1..$n) {\n        ($a, $b) = ($b, $a + $b);\n    }\n    return $a;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n   \
    \     if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ( $n < 3 ) {\n  \
    \      return 1;\n    } else {\n        return fib($n-1) + fib($n-2);\n    }\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n   \
    \     if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 1 if $n == 1\
    \ or $n == 2;\n    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return $n if $n <= 1;\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return ($n <= 2) ? 1\
    \ : fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($prev, $curr) = (0,\
    \ 1);\n    foreach my $i (1..$n) {\n        ($prev, $curr) = ($curr, $prev + $curr);\n\
    \    }\n    return $prev;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 1 if $n <= 2;\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    $n < 2 ? $n : fib($n-1)\
    \ + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 1 if $n <= 2;\n\
    \    fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 1 if $n <= 2;\n\
    \    fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 0 if $n == 0;\n\
    \    return 1 if $n == 1;\n    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n == 0 || $n ==\
    \ 1) {\n        return $n;\n    } else {\n        return fib($n-1) + fib($n-2);\n\
    \    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n\
    \        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 1 if $n <= 2;\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 1 if $n <= 2;\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return $n if $n < 2;\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 1
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return (1, 1, 2, 3,\
    \ 5, 8, 13, 21, 34, 55)[$n - 1];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($a, $b);\n    return\
    \ $n if $n <= 1;\n    ($a, $b) = (0, 1);\n    while (--$n) {\n\t($a, $b) = ($b,\
    \ $a + $b);\n    }\n    $b;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 255
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return fib_helper($n,\
    \ 0, 1);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &fib;\n        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::fib_helper called at /tmp/tmp8fzon37u.pl line
    10.

    '
  stdout: ''
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($i, $a, $b);\n  \
    \  $a = 0;\n    $b = 1;\n    for($i = 1; $i < $n; $i++) {\n        $b = $a + $b;\n\
    \        $a = $b - $a;\n    }\n    return $b;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 1 if $n <= 2;\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return $n if $n <= 1;\n\
    \    fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 1 if $n <= 2;\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n <= 1) {\n   \
    \     return $n;\n    } else {\n        return fib($n-1) + fib($n-2);\n    }\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n   \
    \     if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return $n if ($n <=\
    \ 1);\n    fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if($n < 2) {\n     \
    \   return $n;\n    }\n    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($a, $b) = (0, 1);\n\
    \    for (my $i = 0; $i < $n; $i++) {\n        ($a, $b) = ($b, $a + $b);\n   \
    \ }\n    return $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821059
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return $n if $n < 2;\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 0 if $n == 0;\n\
    \    return 1 if $n == 1;\n    fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my $n_2 = 0;\n    my\
    \ $n_1 = 1;\n    for (my $i = 0; $i < $n; $i++) {\n        my $fib = $n_2 + $n_1;\n\
    \        $n_2 = $n_1;\n        $n_1 = $fib;\n    }\n    return $n_2;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($fib, $prev, $temp);\n\
    \    $fib = 1;\n    $prev = 0;\n    for (my $i = 2; $i <= $n; $i++) {\n      \
    \  $temp = $fib;\n        $fib += $prev;\n        $prev = $temp;\n    }\n    return\
    \ $fib;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n\
    \        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my @fib = (0, 1);\n\
    \    return $fib[$n] if $n < @fib;\n    foreach my $i (@fib .. $n) {\n       \
    \ push @fib, $fib[$i-1] + $fib[$i-2];\n    }\n    return $fib[$n];\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 1 if $n == 1\
    \ or $n == 2;\n    fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my $f = [1,1];\n   \
    \ for (my $i = 2; $i < $n; $i++) {\n        push @$f, $f->[$i-1] + $f->[$i-2];\n\
    \    }\n    return $f->[$n-1];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    # TODO\n    return 1\
    \ if $n == 1 or $n == 2;\n    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return $n < 2 ? $n :\
    \ fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821059
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return ($n < 2) ? $n\
    \ : fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($a, $b) = (0, 1);\n\
    \    for (my $i = 0; $i < $n; $i++) {\n        ($a, $b) = ($b, $a + $b);\n   \
    \ }\n    return $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821059
- exit_code: 1
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my @fib = (0, 1);\n\
    \    while (@fib < $n) {\n        push @fib, $fib[-1] + $fib[-2];\n    }\n   \
    \ return $fib[$n - 1];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    $n <= 2 ? 1 : fib($n-1)\
    \ + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 0 if $n == 0;\n\
    \    return 1 if $n == 1;\n    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my @fib;\n    $fib[0]\
    \ = 0;\n    $fib[1] = 1;\n    for (my $i = 2; $i <= $n; $i++) {\n        $fib[$i]\
    \ = $fib[$i-1] + $fib[$i-2];\n    }\n    return $fib[$n];\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n < 2) {\n    \
    \    return $n;\n    } else {\n        return fib($n-1) + fib($n-2);\n    }\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n   \
    \     if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    ($n < 2) ? $n : fib($n-1)\
    \ + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 0 if $n == 0;\n\
    \    return 1 if $n == 1;\n    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($a, $b) = (0, 1);\n\
    \    for (my $i = 0; $i < $n; $i++) {\n        ($a, $b) = ($b, $a + $b);\n   \
    \ }\n    return $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821059
- exit_code: 255
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($i, $f1, $f2);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n      \
    \  if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp7zrowtqf.pl line 38, at
    end of line

    syntax error at /tmp/tmp7zrowtqf.pl line 38, at EOF

    Execution of /tmp/tmp7zrowtqf.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return $n if $n < 2;\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if($n < 2) {\n     \
    \   return $n;\n    }\n    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 1 if $n <= 2;\n\
    \    fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    $n < 2 ? $n : fib($n-1)\
    \ + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n < 2) {\n    \
    \    return $n;\n    } else {\n        return fib($n-1) + fib($n-2);\n    }\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n   \
    \     if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 1 if $n <= 2;\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my $a = 0;\n    my $b\
    \ = 1;\n    my $c;\n    for (my $i = 0; $i < $n; $i++) {\n        $c = $a + $b;\n\
    \        $a = $b;\n        $b = $c;\n    }\n    return $a;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n <= 2) {\n   \
    \     return 1;\n    }\n    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821059
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if($n < 2) {\n     \
    \   return $n;\n    } else {\n        return fib($n-1) + fib($n-2);\n    }\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n      \
    \  if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return $n if $n < 2;\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if($n <= 1) {\n    \
    \    return $n;\n    }\n    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 1 if $n <= 2;\n\
    \    fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821017
- exit_code: 1
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return (1, 1, 2, 3,\
    \ 5, 8, 13, 21, 34, 55)[$n] if $n < 10;\n    ($_[0] < 0) ? (warn('fib() is undefined\
    \ for negative values'), return) :\n    ($_[0] == int($_[0])) ? (return fib($n-1)\
    \ + fib($n-2)) :\n    (warn('fib() is only defined for integers'), return);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n   \
    \     if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if($n <= 1) {\n    \
    \    return $n;\n    } else {\n        return fib($n-1) + fib($n-2);\n    }\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n   \
    \     if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n > 1) {\n    \
    \    return fib($n-1) + fib($n-2);\n    }\n    return $n;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my $a = 0;\n    my $b\
    \ = 1;\n    while ($n-->1) {\n        ($a, $b) = ($b, $a+$b);\n    }\n    return\
    \ $b;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n\
    \        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ( $n < 3 ) {\n  \
    \      return 1;\n    }\n    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 1 if $n <= 2;\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    die \"n must be > 0\"\
    \ if($n < 1);\n    my $ret = 0;\n    my $prev = 0;\n    my $prev_prev = 0;\n \
    \   for(my $i = 1; $i <= $n; $i++) {\n        if($i == 1) {\n            $ret\
    \ = 1;\n        } else {\n            $ret = $prev + $prev_prev;\n        }\n\
    \        $prev_prev = $prev;\n        $prev = $ret;\n    }\n    return $ret;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n   \
    \     if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 1 if $n == 1\
    \ || $n == 2;\n    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return $n if ($n <=\
    \ 1);\n    return fib($n-1) + fib($n-2);\n}\n1;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 1
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    $n == 0 or return $n\
    \ == 1 ? 1 : fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n < 3) {\n    \
    \    return 1;\n    } else {\n        return fib($n-1) + fib($n-2);\n    }\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n      \
    \  if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 1
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($i, $a, $b) = (0,\
    \ 1, 1);\n    while ($i < $n) {\n        ($a, $b) = ($b, $a + $b);\n        $i++;\n\
    \    }\n    return $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return $n if $n < 2;\n\
    \    return fib($n-1) + fib($n-2);\n}\n1;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 1 if $n <= 2;\n\
    \    fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n < 2) {\n    \
    \    return $n;\n    } else {\n        return fib($n-1) + fib($n-2);\n    }\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n   \
    \     if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    $n < 2 ? $n : fib($n-1)\
    \ + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return $n if ($n < 2);\n\
    \    return (fib($n-1) + fib($n-2));\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($i, $fib);\n    if\
    \ ($n <= 1) {\n        return 1;\n    }\n    $fib = [ 1, 1 ];\n    for ($i = 2;\
    \ $i < $n; $i++) {\n        push(@$fib, $fib->[-1] + $fib->[-2]);\n    }\n   \
    \ return $fib->[-1];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n == 0) {\n   \
    \     return 0;\n    } elsif ($n == 1) {\n        return 1;\n    } else {\n  \
    \      return fib($n-1) + fib($n-2);\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n < 0) {\n    \
    \    return undef;\n    } elsif ($n == 0) {\n        return 0;\n    } elsif ($n\
    \ == 1) {\n        return 1;\n    } else {\n        return fib($n-1) + fib($n-2);\n\
    \    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n\
    \        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n == 0) {\n   \
    \     return 0;\n    } elsif ($n == 1) {\n        return 1;\n    } else {\n  \
    \      return fib($n-1) + fib($n-2);\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return ($n <= 2) ? 1\
    \ : fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    $n < 3 ? 1 : fib($n-1)\
    \ + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 1
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return ($n == 0 or $n\
    \ == 1) ? 1 : fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return $n if $n < 2;\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 1 if $n == 1\
    \ || $n == 2;\n    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return $n if ($n < 2);\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 0 if $n < 1;\n\
    \    return 1 if $n < 3;\n    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 1
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    die 'Fibonacci numbers\
    \ not supported for n < 1' if $n < 1;\n    my $fib_n = 1;\n    my $fib_n_1 = 1;\n\
    \    while ($n-- > 1) {\n        my $fib_n_2 = $fib_n_1;\n        $fib_n_1 = $fib_n;\n\
    \        $fib_n += $fib_n_2;\n    }\n    return $fib_n;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n <= 2) {\n   \
    \     return 1;\n    } else {\n        return fib($n-1) + fib($n-2);\n    }\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n   \
    \     if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821017
- exit_code: 255
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    $n < 2 ? $n : fib($n-1)\
    \ + fib($n-2);\n}\nsay fib($ARGV[0]);\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmprcgukoym.pl line 12,\
    \ near \"say fib\"\n\t(Do you need to predeclare say?)\nsyntax error at /tmp/tmprcgukoym.pl\
    \ line 12, near \"say fib\"\nBEGIN not safe after errors--compilation aborted\
    \ at /tmp/tmprcgukoym.pl line 13.\n"
  stdout: ''
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($x, $y) = (0, 1);\n\
    \    while ($n-- > 0) {\n        ($x, $y) = ($y, $x + $y);\n    }\n    return\
    \ $x;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n\
    \        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return $n if $n < 2;\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my $i;\n    my $a =\
    \ 0;\n    my $b = 1;\n    for ($i = 1; $i < $n; $i++) {\n        my $temp = $a;\n\
    \        $a = $b;\n        $b = $temp + $b;\n    }\n    return $b;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return($n<2) ? $n :\
    \ fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n <= 1) {\n   \
    \     return $n;\n    }\n    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return $n if $n < 2;\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n <= 1) {\n   \
    \     return $n;\n    }\n    else {\n        return fib($n-1) + fib($n-2);\n \
    \   }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n\
    \        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 1 if $n <= 2;\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 1 if $n == 1\
    \ || $n == 2;\n    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 1
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return (1,1)[$n] if\
    \ $n < 2;\n    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    $n < 2 ? $n : fib($n-1)\
    \ + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 1 if $n <= 2;\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return $n if $n < 2;\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 0 if $n == 0;\n\
    \    return 1 if $n == 1;\n    return fib($n-1) + fib($n-2);\n}\nprint \"Fib of\
    \ 10: \", fib(10), \"\\n\";\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: 'Fib of 10: 55

    ok!ok!ok!ok!ok!'
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if($n < 3) {\n     \
    \   return 1;\n    } else {\n        return fib($n-1) + fib($n-2);\n    }\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n      \
    \  if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n == 0) {\n   \
    \     return 0;\n    } elsif ($n == 1) {\n        return 1;\n    } else {\n  \
    \      return fib($n-1) + fib($n-2);\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n < 2) {\n    \
    \    return $n;\n    } else {\n        return fib($n-1) + fib($n-2);\n    }\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n   \
    \     if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 0 if ($n == 0);\n\
    \    return 1 if ($n == 1);\n    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($val, $a, $b);\n\
    \    if ($n == 1) {\n\treturn 1;\n    } elsif ($n == 2) {\n\treturn 1;\n    }\
    \ else {\n\t$a = 1;\n\t$b = 1;\n\tfor (my $i = 3; $i <= $n; $i++) {\n\t    $val\
    \ = $a + $b;\n\t    $a = $b;\n\t    $b = $val;\n\t}\n\treturn $val;\n    }\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n      \
    \  if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if($n < 0) {\n     \
    \   die(\"Invalid fibonacci index: $n\");\n    }\n    my($last, $now) = (0, 1);\n\
    \    while(--$n > 0) {\n        ($last, $now) = ($now, $last + $now);\n    }\n\
    \    return $now;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if($n == 0) {\n    \
    \    return 0;\n    } elsif($n == 1) {\n        return 1;\n    } else {\n    \
    \    return fib($n-1) + fib($n-2);\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n == 0) {\n   \
    \     return 0;\n    } elsif ($n == 1) {\n        return 1;\n    } else {\n  \
    \      return fib($n-1) + fib($n-2);\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($a, $b) = (0, 1);\n\
    \    foreach (1..$n) {\n        ($a, $b) = ($b, $a + $b);\n    }\n    return $a;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n   \
    \     if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my $i;\n    my $v;\n\
    \    my @vector;\n    $v = 1;\n    for($i = 0; $i < $n; $i++) {\n        $vector[$i]\
    \ = $v;\n        $v += $vector[$i - 1] if $i >= 1;\n    }\n    return $vector[$n\
    \ - 1];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n\
    \        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n < 2) {\n    \
    \    return $n;\n    } else {\n        return fib($n-1) + fib($n-2);\n    }\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n   \
    \     if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return $n if $n < 2;\n\
    \    fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 1
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my $i;\n    my $val\
    \ = 1;\n    my $prev = 0;\n    for ($i = 0; $i < $n; $i++) {\n        ($val, $prev)\
    \ = ($val + $prev, $val);\n    }\n    return $val;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n < 2) {\n    \
    \    return $n;\n    } else {\n        return fib($n-1) + fib($n-2);\n    }\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n   \
    \     if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n < 3) {\n    \
    \    return 1;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($f1, $f2) = (1, 1);\n\
    \    for (2..$n) {\n        ($f1, $f2) = ($f2, $f1 + $f2);\n    }\n    return\
    \ $f1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n\
    \        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n <= 2) {\n   \
    \     return 1;\n    }\n    else {\n        return fib($n-1) + fib($n-2);\n  \
    \  }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n\
    \        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 1 if $n == 1\
    \ || $n == 2;\n    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if($n < 3) {\n     \
    \   return 1;\n    }\n    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    $n <= 1 ? $n : fib($n-1)\
    \ + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n <= 2) {\n   \
    \     return 1;\n    }\n    else {\n        return fib($n-1) + fib($n-2);\n  \
    \  }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n\
    \        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 1 if $n <= 2;\n\
    \    fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($n1, $n2) = (0, 1);\n\
    \    for (1..$n) {\n        ($n1, $n2) = ($n2, $n1 + $n2);\n    }\n    return\
    \ $n1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n\
    \        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    $n < 2 ? $n : fib($n-1)\
    \ + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($a, $b) = (0, 1);\n\
    \    while ($n-- > 0) {\n        ($a, $b) = ($b, $a + $b);\n    }\n    return\
    \ $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n\
    \        if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return $n if $n < 2;\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n == 0) {\n   \
    \     return 0;\n    } elsif ($n == 1) {\n        return 1;\n    } else {\n  \
    \      return fib($n-1) + fib($n-2);\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 255
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    croak \"fib: negative\
    \ argument\" if $n < 0;\n    return 1 if $n <= 1;\n    return fib($n-1) + fib($n-2);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n   \
    \     if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "String found where operator expected at /tmp/tmpgt0e2gp8.pl line 10, near\
    \ \"croak \"fib: negative argument\"\"\n\t(Do you need to predeclare croak?)\n\
    syntax error at /tmp/tmpgt0e2gp8.pl line 10, near \"croak \"fib: negative argument\"\
    \"\nBEGIN not safe after errors--compilation aborted at /tmp/tmpgt0e2gp8.pl line\
    \ 14.\n"
  stdout: ''
  timestamp: 1660013017
- exit_code: 255
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($result);\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpgkrlzddd.pl line 38, at
    end of line

    syntax error at /tmp/tmpgkrlzddd.pl line 38, at EOF

    Execution of /tmp/tmpgkrlzddd.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    die \"Illegal argument\
    \ to fib\" unless $n > 0;\n    return ($n == 1 || $n == 2) ? 1 : fib($n-1) + fib($n-2);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n   \
    \     if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if($n == 0){\n     \
    \   return 0;\n    }\n    elsif($n == 1){\n        return 1;\n    }\n    else{\n\
    \        return fib($n-1) + fib($n-2);\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return ($n < 2) ? $n\
    \ : fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 1
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($a, $b) = (0, 1);\n\
    \    for(0..$n) {\n        ($a, $b) = ($b, $a + $b);\n    }\n    return $a;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n   \
    \     if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return $n if $n < 2;\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 1 if $n <= 2;\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my @cache = (1, 1);\n\
    \    for (my $i = 2; $i < $n; $i++) {\n        $cache[$i] = $cache[$i - 1] + $cache[$i\
    \ - 2];\n    }\n    return $cache[$n - 1];\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return ($n < 2) ? $n\
    \ : fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660013017
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return $n if $n < 2;\n\
    \    return fib($n-1) + fib($n-2);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    if ($n == 0) {\n   \
    \     return 0;\n    } elsif ($n == 1) {\n        return 1;\n    } else {\n  \
    \      return fib($n-1) + fib($n-2);\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659820995
