name: HumanEval_144_simplify
language: pl
prompt: "# Your task is to implement a function that will simplify the expression\n\
  # x * n. The function returns 1 if x * n evaluates to a whole number and \n# otherwise.\
  \ Both x and n, are string representation of a fraction, and have the following\
  \ format,\n# <numerator>/<denominator> where both numerator and denominator are\
  \ positive whole numbers.\n# You can assume that x, and n are valid fractions, and\
  \ do not have zero as denominator.\n# >>> simplify(\"1/5\", \"5/1\")\n# 1\n# >>>\
  \ simplify(\"1/6\", \"2/1\")\n# \"\"\n# >>> simplify(\"7/10\", \"10/2\")\n# \"\"\
  \nsub simplify {\n    my($x, $n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&simplify;\n\
  \        if(eq_deeply($candidate->(\"1/5\", \"5/1\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1/6\"\
  , \"2/1\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"5/1\", \"3/1\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"7/10\"\
  , \"10/2\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"2/10\", \"50/10\"),1)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"7/2\"\
  , \"4/2\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\"11/6\", \"6/1\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2/3\"\
  , \"5/2\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"5/2\", \"3/5\"),\"\")) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2/4\"\
  , \"8/4\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\"2/4\", \"4/2\"),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1/5\", \"5/1\"\
  ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  1/5\", \"1/5\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n}\n\ntesthumaneval();"
completions: ["    my($x_num, $x_den) = split('/', $x);\n    my($n_num, $n_den) =\
    \ split('/', $n);\n    $x_num *= $n_den;\n    $x_den *= $n_num;\n    if ($x_num\
    \ % $x_den == 0) {\n        return 1;\n    } else {\n        return '';\n    }\n\
    }", "    my $result = 1;\n    $x =~ /^(\\d+)\\/(\\d+)$/;\n    my $xn = $1;\n \
    \   my $xd = $2;\n    $n =~ /^(\\d+)\\/(\\d+)$/;\n    my $nn = $1;\n    my $nd\
    \ = $2;\n    if ($xn * $nd == $xd * $nn) {\n        return 1;\n    } else {\n\
    \        return \"\";\n    }\n}\nprint simplify(\"1/5\", \"5/1\"),\"\\n\";\nprint\
    \ simplify(\"1/6\", \"2/1\"),\"\\n\";\nprint simplify(\"7/10\", \"10/2\"),\"\\\
    n\";\nprint simplify(\"1/3\", \"7/11\"),\"\\n\";\nprint simplify(\"2/3\", \"8/12\"\
    ),\"\\n\";\nprint simplify(\"3/7\", \"12/32\"),\"\\n\";\nprint simplify(\"1/1\"\
    , \"6/6\"),\"\\n\";\nprint simplify(\"2/2\", \"12/12\"),\"\\n\";\nprint simplify(\"\
    1/1\", \"12/12\"),\"\\n\";\nprint simplify(\"1/4\", \"4/4\"),\"\\n\";\nprint simplify(\"\
    2/5\", \"2/8\"),\"\\n\";\nprint simplify(\"1/3\", \"5/5\"),\"\\n\";\nprint simplify(\"\
    10/10\", \"2/2\"),\"\\n\";\nprint simplify(\"10/5\", \"8/4\"),\"\\n\";\nprint\
    \ simplify(\"4/4\", \"1/1\"),\"\\n\";\nprint simplify(\"4/4\", \"4/4\"),\"\\n\"\
    ;\nprint simplify(\"1/1\", \"1/2\"),\"\\n\";\nprint simplify(\"1/1\", \"1/1\"\
    ),\"\\n\";\nprint simplify(\"1/3\", \"3/3\"),\"\\n\";\nprint simplify(\"1/1\"\
    , \"1/1\"),\"\\n\";\nprint simplify(\"2/2\", \"2/2\"),\"\\n\";\nprint simplify(\"\
    1/1\", \"1/1\"),\"\\n\";\nprint simplify(\"3/3\", \"3/3\"),\"\\n\";\nprint simplify",
  "    my($x1, $x2) = split(/\\//, $x);\n    my($n1, $n2) = split(/\\//, $n);\n  \
    \  return $x1*$n2 % $x2*$n1 ? \"\" : 1;\n}", "    my $d = ($x < $n) ? $x : $n;\n\
    \    if ($d == 1) {\n        return 1;\n    }\n    my $xx = [split m{/}, $x];\n\
    \    my $nn = [split m{/}, $n];\n    while ($d > 1) {\n        if ($xx->[0] %\
    \ $d == 0 and $xx->[1] % $d == 0 and\n            $nn->[0] % $d == 0 and $nn->[1]\
    \ % $d == 0) {\n            $xx->[0] /= $d;\n            $xx->[1] /= $d;\n   \
    \         $nn->[0] /= $d;\n            $nn->[1] /= $d;\n        }\n        $d--;\n\
    \    }\n    return ($xx->[0] * $nn->[1] == $xx->[1] * $nn->[0]) ? 1 : '';\n}",
  "    my($numer1, $denom1) = split /\\//, $x;\n    my($numer2, $denom2) = split /\\\
    //, $n;\n    return ($numer1 * $denom2) % ($denom1 * $numer2) ? '' : 1;\n}", " \
    \   if ($x =~ /^\\d+\\/\\d+$/ && $n =~ /^\\d+\\/\\d+$/) {\n        my($x_numerator,\
    \ $x_denominator) = split(/\\//, $x);\n        my($n_numerator, $n_denominator)\
    \ = split(/\\//, $n);\n        return ($x_numerator * $n_denominator) % ($x_denominator\
    \ * $n_numerator) ? \"\" : 1;\n    }\n    return;\n}", "    my($s, $t) = ($x,\
    \ $n);\n    return \"\" if $x !~ m{^(\\d+)/(\\d+)$} || $n !~ m{^(\\d+)/(\\d+)$};\n\
    \    ($x, $n) = ($1, $2);\n    my $gcd = gcd($x, $n);\n    ($x, $n) = ($x / $gcd,\
    \ $n / $gcd);\n    $gcd = gcd($x, $n);\n    ($x, $n) = ($x / $gcd, $n / $gcd);\n\
    \    return ($x % $n) ? \"\" : 1;\n}", "    my($x_num, $x_den) = split /\\//,\
    \ $x;\n    my($n_num, $n_den) = split /\\//, $n;\n    return ($x_num * $n_den\
    \ * $n_num * $x_den) % ($x_den * $n_den) == 0 ? 1 : '';\n}", "    my($a, $b) =\
    \ split \"/\", $x;\n    my($c, $d) = split \"/\", $n;\n    my $cnd = $c * $d;\n\
    \    if($a * $d == $b * $cnd) {\n        return 1;\n    } else {\n        return\
    \ \"\";\n    }\n}", "    my ($xn, $xd) = split('/', $x);\n    my ($nn, $nd) =\
    \ split('/', $n);\n    my $val = $xn * $nn;\n    if($val % $xd == 0 && $val %\
    \ $nd == 0) {\n        return 1;\n    }\n    return '';\n}", "    my($num_x, $den_x)\
    \ = split(/\\//, $x);\n    my($num_n, $den_n) = split(/\\//, $n);\n    my $num\
    \ = $num_x * $num_n;\n    my $den = $den_x * $den_n;\n    return $num % $den ==\
    \ 0 ? 1 : '';\n}", "    my $k = eval \"\\$$x * \\$$n\";\n    return (int($k) ==\
    \ $k) ? 1 : \"\";\n}", "    my($numerator, $denominator) = split /\\//, $x;\n\
    \    my($numerator2, $denominator2) = split /\\//, $n;\n    my $frac = $numerator\
    \ * $denominator2;\n    my $frac2 = $numerator2 * $denominator;\n    return $frac\
    \ % $denominator2 == 0 && $frac2 % $denominator == 0 ? \"1\" : \"\";\n}", "  \
    \  my($x_num, $x_den) = split(\"/\", $x);\n    my($n_num, $n_den) = split(\"/\"\
    , $n);\n    my $result = $x_num * $n_num / ($x_den * $n_den);\n    if ($result\
    \ =~ /\\d+/) {\n        return 1;\n    } else {\n        return '';\n    }\n}",
  "    my($x_num, $x_denom) = split(/\\//, $x);\n    my($n_num, $n_denom) = split(/\\\
    //, $n);\n    my $res = $x_num * $n_num;\n    my $res_denom = $x_denom * $n_denom;\n\
    \    return $res_denom if ($res % $res_denom == 0);\n    return \"\";\n}\nprint\
    \ \"simplify 1/5 x 5/1: \", simplify(\"1/5\", \"5/1\"), \"\\n\";\nprint \"simplify\
    \ 1/6 x 2/1: \", simplify(\"1/6\", \"2/1\"), \"\\n\";\nprint \"simplify 7/10 x\
    \ 10/2: \", simplify(\"7/10\", \"10/2\"), \"\\n\";", "    my($numx, $denx) = split\
    \ /\\//, $x;\n    my($numn, $denn) = split /\\//, $n;\n    my $fraction = $numx\
    \ * $numn;\n    if ($fraction % $denx == 0) {\n        return 1;\n    } else {\n\
    \        return \"\";\n    }\n}", "    my($numerator, $denominator) = split(/\\\
    //, $x);\n    my($numerator1, $denominator1) = split(/\\//, $n);\n    my $result\
    \ = ($numerator * $denominator1) / ($denominator * $numerator1);\n    if ($result\
    \ == int($result)) {\n        return 1;\n    } else {\n        return \"\";\n\
    \    }\n}\nprint simplify(\"1/5\", \"5/1\"),\"\\n\";\nprint simplify(\"1/6\",\
    \ \"2/1\"),\"\\n\";\nprint simplify(\"7/10\", \"10/2\"),\"\\n\";", "    my($num,\
    \ $den) = split /\\//, $x;\n    my($num2, $den2) = split /\\//, $n;\n    return\
    \ ($num * $den2) % ($den * $num2) ? '' : 1;\n}", "    my($xn) = \"$x * $n\";\n\
    \    my $gcd = 1;\n    my($xnumer, $xdenom) = split('/', $x);\n    my($nnumer,\
    \ $ndenom) = split('/', $n);\n    $gcd = gcd($xdenom, $ndenom);\n    # don't care\
    \ about numbers with 1/1, since they are always whole numbers\n    return 1 if\
    \ $gcd == 1;\n    my $xmult = $xdenom / $gcd;\n    my $nmult = $ndenom / $gcd;\n\
    \    my $final = ($xnumer * $nmult) * ($nnumer * $xmult);\n    my $nonwhole =\
    \ $final % $gcd;\n    if ($nonwhole == 0) {\n        return 1;\n    } else {\n\
    \        return \"\";\n    }\n}", "    my($n1, $d1) = split(/\\//, $x);\n    my($n2,\
    \ $d2) = split(/\\//, $n);\n    return $n1 * $d2 == $n2 * $d1 ? 1 : '';\n}", " \
    \   my($numerator_x, $denominator_x) = split('/', $x);\n    my($numerator_n, $denominator_n)\
    \ = split('/', $n);\n    my $numerator_result = $numerator_x * $numerator_n;\n\
    \    my $denominator_result = $denominator_x * $denominator_n;\n    if ($numerator_result\
    \ % $denominator_result == 0) {\n        return 1;\n    } else {\n        return\
    \ \"\";\n    }\n}", "    my $ans = 1;\n    my($xnum, $xden) = split(\"/\", $x);\n\
    \    my($nnum, $nden) = split(\"/\", $n);\n    $ans = 0 if($xnum * $nden % $xden\
    \ * $nnum);\n    return $ans;\n}", "    my ($numer, $denom) = split /\\//, $x;\n\
    \    my ($numer2, $denom2) = split /\\//, $n;\n    if (($numer / $denom) * ($numer2\
    \ / $denom2) == int(($numer / $denom) * ($numer2 / $denom2))) {\n        return\
    \ 1;\n    } else {\n        return \"\";\n    }\n}", "    my ($x_num, $x_den)\
    \ = split /\\//, $x;\n    my ($n_num, $n_den) = split /\\//, $n;\n    return $x_num\
    \ * $n_num % $x_den == 0;\n}", "    my($x_numerator, $x_denominator) = split('/',\
    \ $x);\n    my($n_numerator, $n_denominator) = split('/', $n);\n    my $simple_x\
    \ = simplify_fraction($x_numerator, $x_denominator);\n    my $simple_n = simplify_fraction($n_numerator,\
    \ $n_denominator);\n    $simple_x * $simple_n;\n}", "    my($x_numerator, $x_denominator)\
    \ = ($x =~ /(\\d+)\\/(\\d+)/);\n    my($n_numerator, $n_denominator) = ($n =~\
    \ /(\\d+)\\/(\\d+)/);\n    my $x_n = $x_numerator * $n_numerator;\n    my $x_d\
    \ = $x_denominator * $n_denominator;\n    my $gcd = gcd($x_n, $x_d);\n    return\
    \ ($x_n % $x_d == 0) ? $x_n / $x_d : '';\n}", "    if($x * $n ~~ int){\n\treturn\
    \ 1;\n    }\n    else{\n\treturn '';\n    }\n}", "    my($x_numerator, $x_denominator)\
    \ = split /\\//, $x;\n    my($n_numerator, $n_denominator) = split /\\//, $n;\n\
    \    $result = $x_numerator * $n_numerator;\n    $result_denominator = $x_denominator\
    \ * $n_denominator;\n    if ($result % $result_denominator == 0) {\n        return\
    \ 1;\n    } else {\n        return \"\";\n    }\n}", "    my($num1, $den1) = split\
    \ '/', $x;\n    my($num2, $den2) = split '/', $n;\n    my $result = $num1 * $num2\
    \ / ($den1 * $den2);\n    if($result == int($result)) {\n        return 1;\n \
    \   } else {\n        return \"\";\n    }\n}", "    my($xnum, $xden) = split '/',\
    \ $x;\n    my($nnum, $nden) = split '/', $n;\n    my $simplified = $xnum * $nden\
    \ * $nnum * $xden;\n    return \"\" if $simplified % $xden != 0;\n    return \"\
    \" if $simplified % $nden != 0;\n    return 1;\n}", "    my($x_numerator, $x_denominator)\
    \ = ($x =~ /^(\\d+)\\/(\\d+)$/);\n    my($n_numerator, $n_denominator) = ($n =~\
    \ /^(\\d+)\\/(\\d+)$/);\n    my $x_num =  $x_numerator * $n_denominator;\n   \
    \ my $x_den =  $x_denominator * $n_numerator;\n    return 1 if $x_num % $x_den\
    \ == 0;\n    '';\n}", "    my($xx, $xn) = split(/\\//, $x);\n    my($nn, $nd)\
    \ = split(/\\//, $n);\n    my $i = $xx*$nd;\n    my $j = $xn*$nn;\n    return\
    \ \"1\" if ($i/$j == 1);\n    return \"\";\n}", "    my($a, $b) = split '/', $x;\n\
    \    my($c, $d) = split '/', $n;\n    return $a * $d == $b * $c ? 1 : \"\";\n}",
  "    my($xnum, $xden) = split '/', $x;\n    my($nnum, $nden) = split '/', $n;\n\
    \    # Perform cross-multiplication\n    return $xnum * $nden == $nnum * $xden\
    \ ? 1 : '';\n}", "    my($numerator_x, $denominator_x) = split /\\//, $x;\n  \
    \  my($numerator_n, $denominator_n) = split /\\//, $n;\n    my $multiplication\
    \ = $numerator_x * $numerator_n;\n    my $denominator = $denominator_x * $denominator_n;\n\
    \    my $gcd = gcd($multiplication, $denominator);\n    my $result = $multiplication\
    \ / $gcd . \"/\" . $denominator / $gcd;\n    if (eval $result == int eval $result)\
    \ {\n        return 1;\n    } else {\n        return 0;\n    }\n}", "    my($x_num,\
    \ $x_den) = split(/\\//, $x);\n    my($n_num, $n_den) = split(/\\//, $n);\n  \
    \  my $num = $x_num * $n_num;\n    my $den = $x_den * $n_den;\n    my $gcd = gcd($num,\
    \ $den);\n    $num /= $gcd;\n    $den /= $gcd;\n    return ($num == $den ? 1 :\
    \ '');\n}", "    my($num1, $den1) = split /\\//, $x;\n    my($num2, $den2) = split\
    \ /\\//, $n;\n    my $num = $num1 * $num2;\n    my $den = $den1 * $den2;\n   \
    \ my $div = $num / $den;\n    if($div == int($div)) {\n        return 1;\n   \
    \ }\n    else {\n        return '';\n    }\n}", "    my($x_num, $x_den) = split(/\\\
    //, $x);\n    my($n_num, $n_den) = split(/\\//, $n);\n    my $result = 0;\n  \
    \  my $eval = $x_num * $n_num / ($x_den * $n_den);\n    $result = 1 if ($eval\
    \ =~ /^[0-9]+$/);\n    return $result;\n}", "    my($a, $b) = split /\\//, $x;\n\
    \    my($c, $d) = split /\\//, $n;\n    return int($a * $d) == $b * $c ? 1 : '';\n\
    }", "    my($num1, $den1) = split \"/\", $x;\n    my($num2, $den2) = split \"\
    /\", $n;\n    return $num1 * $num2 == $den1 * $den2 ? 1 : \"\";\n}", "    my($num,\
    \ $den) = split(/\\//, $x);\n    my($num_x, $den_x) = split(/\\//, $n);\n    my\
    \ $denom = $den * $den_x;\n    my $numer = $num * $den_x + $num_x * $den;\n  \
    \  if ($numer % $denom) {\n        return \"\";\n    }\n    return $numer / $denom;\n\
    }", "    my($xn) = $x * $n;\n    my($xn_s) = $xn->as_string;\n    $xn_s =~ s/\\\
    //_/;\n    return ($xn_s =~ /^-?\\d+$/) ? 1 : \"\";\n}", "    my($num, $den) =\
    \ split(/\\//, $x);\n    my($mul, $div) = split(/\\//, $n);\n    if ($num*$mul\
    \ % $den*$div == 0) {\n        return 1;\n    } else {\n        return '';\n \
    \   }\n}", "    my($numerator_x, $denominator_x) = split /\\//, $x;\n    my($numerator_n,\
    \ $denominator_n) = split /\\//, $n;\n    my $result = $numerator_x * $denominator_n\
    \ * $denominator_x * $numerator_n;\n    return $result % 1 == 0 ? 1 : \"\";\n}",
  "    my($nx, $nd) = split('/', $x);\n    my($nn, $nd2) = split('/', $n);\n    my\
    \ $result = $nx * $nn / $nd / $nd2;\n    return $result % 1 ? '' : 1;\n}", " \
    \   my($nx, $dx) = split(/\\//, $x);\n    my($nn, $dn) = split(/\\//, $n);\n \
    \   if ( $nx * $dn == $nn * $dx ) {\n        return 1;\n    }\n    return \"\"\
    ;\n}", "    my($xnum, $xden) = split(/\\//, $x);\n    my($nnum, $nden) = split(/\\\
    //, $n);\n    my $res = ($xnum * $nden) * ($nnum * $xden);\n    if($res % ($xden\
    \ * $nden) == 0) {\n        return 1;\n    }\n    return \"\";\n}", "    my($top1,\
    \ $bottom1) = split(\"/\", $x);\n    my($top2, $bottom2) = split(\"/\", $n);\n\
    \    my $result = $top1 * $top2;\n    if ($result % $bottom1 == 0) {\n       \
    \ return 1;\n    } else {\n        return \"\";\n    }\n}", "    my $c = eval(\"\
    $x * $n\");\n    return $c eq int($c) ? 1 : \"\";\n}", "    my($numerator_x, $denominator_x)\
    \ = split('/', $x);\n    my($numerator_n, $denominator_n) = split('/', $n);\n\
    \    my $result = $numerator_x * $numerator_n;\n    $result %= $denominator_x\
    \ * $denominator_n;\n    return $result ? '' : 1;\n}", "    my($num_x, $den_x)\
    \ = split '/', $x;\n    my($num_n, $den_n) = split '/', $n;\n    my $result =\
    \ ($num_x * $den_n) % ($den_x * $num_n);\n    return $result ? \"\" : 1;\n}",
  "    my($x_num, $x_den) = split '/', $x;\n    my($n_num, $n_den) = split '/', $n;\n\
    \    return $x_num * $n_num == $x_den * $n_den ? 1 : '';\n}", "    my($num1, $den1)\
    \ = split('/', $x);\n    my($num2, $den2) = split('/', $n);\n    my $result =\
    \ $num1 * $num2;\n    if ($result % $den1 == 0 and $result % $den2 == 0) {\n \
    \       return 1;\n    }\n    return '';\n}", "    $x =~ /(\\d+)\\/(\\d+)/;\n\
    \    my $xnum = $1;\n    my $xden = $2;\n    $n =~ /(\\d+)\\/(\\d+)/;\n    my\
    \ $nnum = $1;\n    my $nden = $2;\n    my $d = &gcd($xden, $nden);\n    my $f\
    \ = &gcd($xnum * $nden, $xden * $nnum);\n    if($f % $d) {\n        return 0;\n\
    \    }\n    return 1;\n}", "    my($x_numerator, $x_denominator) = split(/\\//,\
    \ $x);\n    my($n_numerator, $n_denominator) = split(/\\//, $n);\n    if(($x_numerator\
    \ * $n_denominator) % ($x_denominator * $n_numerator) == 0) {\n        return\
    \ 1;\n    }\n    return \"\";\n}", "    my($x_top, $x_bottom) = split /\\//, $x;\n\
    \    my($n_top, $n_bottom) = split /\\//, $n;\n    my $result = $x_top * $n_top\
    \ / ($x_bottom * $n_bottom);\n    return $result =~ /\\./ ? \"\" : 1;\n}", " \
    \   my($numerator_x, $denominator_x) = split(/\\//, $x);\n    my($numerator_n,\
    \ $denominator_n) = split(/\\//, $n);\n    my $result = ($numerator_x * $denominator_n\
    \ * $denominator_x) % ($denominator_x * $denominator_n);\n    if ($result == 0)\
    \ {\n        return 1;\n    } else {\n        return \"\";\n    }\n}\nprint simplify(\"\
    1/5\", \"5/1\");\nprint \"\\n\";\nprint simplify(\"1/6\", \"2/1\");\nprint \"\\\
    n\";\nprint simplify(\"7/10\", \"10/2\");\nprint \"\\n\";", "    my($c1, $c2)\
    \ = split /\\//, $x;\n    my($m1, $m2) = split /\\//, $n;\n    my $val = $c1 *\
    \ $m2 * $m1 * $c2;\n    return $val % ($c2 * $m2) == 0 ? 1 : '';\n}", "    my($n1,\
    \ $d1) = split(\"/\", $x);\n    my($n2, $d2) = split(\"/\", $n);\n    my $t =\
    \ $n1 * $d2 * $n2 * $d1;\n    return $t % ($d1 * $d2) == 0 ? 1 : 0;\n}", "   \
    \ my($x_num, $x_den) = split(\"/\", $x);\n    my($n_num, $n_den) = split(\"/\"\
    , $n);\n    my $v = $x_num * $n_den * $n_num * $x_den;\n    if ($v % ($x_den *\
    \ $n_den) == 0) {\n        return 1;\n    }\n    return \"\";\n}", "    my($x_num,\
    \ $x_denom) = split('/', $x);\n    my($n_num, $n_denom) = split('/', $n);\n  \
    \  my $prod = $x_num * $n_num;\n    my $gcd = calc_gcd($prod, $x_denom * $n_denom);\n\
    \    return 1 if $gcd == 1;\n    return '';\n}", "    my($xn, $gn) = ($x, $n);\n\
    \    if($xn =~ /^(\\d+)\\/(\\d+)$/ and $gn =~ /^(\\d+)\\/(\\d+)$/) {\n       \
    \ my($xnumer, $xdenom) = ($1, $2);\n        my($gnumer, $gdenom) = ($3, $4);\n\
    \        my($num, $denom) = ($xnumer * $gnumer, $xdenom * $gdenom);\n        my($xnum,\
    \ $xdenom) = ($xnumer, $xdenom);\n        my($gnum, $gdenom) = ($gnumer, $gdenom);\n\
    \        my($simplified) = 0;\n        my($d) = gcd($xnum, $xdenom);\n       \
    \ $xnum /= $d;\n        $xdenom /= $d;\n        $d = gcd($gnum, $gdenom);\n  \
    \      $gnum /= $d;\n        $gdenom /= $d;\n        if($xnum == $gnum and $xdenom\
    \ == $gdenom) {\n            $simplified = 1;\n        }\n        elsif($xnum\
    \ != $gnum or $xdenom != $gdenom) {\n            $simplified = 0;\n        }\n\
    \        return $simplified;\n    }\n}", "    my $r = eval(\"$x * $n\");\n   \
    \ if($r =~ /\\.0$/) {\n        return 1;\n    }\n    return \"\";\n}", "    my\
    \ $r = scalar _internal($x, $n);\n    return $r =~ /^\\d+$/ ? 1 : '';\n}", " \
    \   my($a, $b) = split '/', $x;\n    my($c, $d) = split '/', $n;\n    ($a * $d)\
    \ % ($b * $c) == 0 ? 1 : \"\";\n}", "    my($x_num, $x_den) = split(\"/\", $x);\n\
    \    my($n_num, $n_den) = split(\"/\", $n);\n    my $result = $x_num * $n_num\
    \ . \"/\" . $x_den * $n_den;\n    my $val = eval(\"($x_num * $n_num) / ($x_den\
    \ * $n_den)\");\n    if ($val == int($val)) {\n        return 1;\n    } else {\n\
    \        return \"\";\n    }\n}", "    my($xnum, $xden) = split(\"/\", $x);\n\
    \    my($nnum, $nden) = split(\"/\", $n);\n    my $resnum = $xnum * $nnum;\n \
    \   my $resden = $xden * $nden;\n    my $gcd = greatest_common_divisor($resnum,\
    \ $resden);\n    my $reduced = reduce_fraction($resnum, $resden, $gcd);\n    if\
    \ ($reduced->{den} == 1) {\n        return 1;\n    }\n    return \"\";\n}", " \
    \   $x =~ /(\\d+)\\/(\\d+)/;\n    my($x_num, $x_den) = ($1, $2);\n    $n =~ /(\\\
    d+)\\/(\\d+)/;\n    my($n_num, $n_den) = ($1, $2);\n    my $xn = $x_num * $n_num;\n\
    \    my $xn_den = $x_den * $n_den;\n    for my $i (2..$xn_den) {\n        if ($xn\
    \ % $i == 0 && $xn_den % $i == 0) {\n            $xn /= $i;\n            $xn_den\
    \ /= $i;\n        }\n    }\n    if ($xn % $xn_den == 0) {\n        return 1;\n\
    \    }\n    return \"\";\n}", "    my($x_num, $x_den) = split /\\//, $x;\n   \
    \ my($n_num, $n_den) = split /\\//, $n;\n    my $gcd = euclid($x_den, $n_den);\n\
    \    $x_den /= $gcd;\n    $n_den /= $gcd;\n    $x_num *= $n_den;\n    $n_num *=\
    \ $x_den;\n    my $gcd2 = euclid($x_num, $n_num);\n    $x_num /= $gcd2;\n    $n_num\
    \ /= $gcd2;\n    $x_num == $n_num ? 1 : '';\n}", "    my($u1, $d1) = split(/\\\
    //, $x);\n    my($u2, $d2) = split(/\\//, $n);\n    my $mult = $u1 * $u2;\n  \
    \  my $div = $d1 * $d2;\n    if (($mult / $div) =~ /\\./) {\n        return '';\n\
    \    }\n    return 1;\n}", "    my($numerator, $denominator) = split(/\\//, $x);\n\
    \    my($numerator2, $denominator2) = split(/\\//, $n);\n    my $total = $numerator2\
    \ / $denominator2;\n    my $fr = $numerator * $total;\n    if ($fr =~ /\\.0$/)\
    \ {\n        return 1;\n    }\n    return \"\";\n}", "    my($xnum, $xden) = split('/',\
    \ $x);\n    my($nnum, $nden) = split('/', $n);\n    my $res = $xnum * $nden;\n\
    \    my $result = $res / $xden;\n    $result = $result * $nnum;\n    return $result\
    \ == int($result) ? 1 : \"\";\n}", "    my($xnumer, $xdenom) = split('/', $x);\n\
    \    my($nnumer, $ndenom) = split('/', $n);\n    my $result = $xnumer * $nnumer;\n\
    \    my $denom = $xdenom * $ndenom;\n    if($result % $denom == 0) {\n       \
    \ return 1;\n    }\n    return \"\";\n}", "    my($x_num, $x_denom) = split(m!/!,\
    \ $x);\n    my($n_num, $n_denom) = split(m!/!, $n);\n    my $result = (($x_num\
    \ * $n_num) % ($x_denom * $n_denom)) ? \"\" : 1;\n    return $result;\n}", " \
    \   my($x_numerator, $x_denominator) = split /\\//, $x;\n    my($n_numerator,\
    \ $n_denominator) = split /\\//, $n;\n    $x_numerator *= $n_denominator;\n  \
    \  $x_denominator *= $n_numerator;\n    $x_numerator % $x_denominator == 0 ? 1\
    \ : '';\n}", "    my($numer_x, $denom_x) = split /\\//, $x;\n    my($numer_n,\
    \ $denom_n) = split /\\//, $n;\n    return 1 if ($numer_x * $denom_n) % ($denom_x\
    \ * $numer_n) == 0;\n    return \"\";\n}", "    my $ret = 1;\n    my($xnum, $xden)\
    \ = split('/', $x);\n    my($nnum, $nden) = split('/', $n);\n    my $result =\
    \ $xnum * $nnum / ($xden * $nden);\n    $ret = \"\" if $result != int($result);\n\
    \    return $ret;\n}", "    $x =~ /(\\d+)\\/(\\d+)/;\n    my($numerator, $denominator)\
    \ = ($1, $2);\n    $n =~ /(\\d+)\\/(\\d+)/;\n    my($numerator2, $denominator2)\
    \ = ($1, $2);\n    my $result = $numerator * $denominator2 * $denominator * $numerator2;\n\
    \    if ($result % ($denominator * $denominator2) == 0) {\n        return 1;\n\
    \    } else {\n        return \"\";\n    }\n}", "    my($x_numerator, $x_denominator)\
    \ = split /\\//, $x;\n    my($n_numerator, $n_denominator) = split /\\//, $n;\n\
    \    my $result = $x_numerator * $n_numerator;\n    if ( $result % $x_denominator\
    \ == 0 && $result % $n_denominator == 0 ) {\n        return 1;\n    }\n    return\
    \ \"\";\n}\nsay simplify(\"1/5\", \"5/1\");\nsay simplify(\"1/6\", \"2/1\");\n\
    say simplify(\"7/10\", \"10/2\");", "    my($x_num, $x_denom) = split(/\\//, $x);\n\
    \    my($n_num, $n_denom) = split(/\\//, $n);\n    my $prod = $x_num * $n_num\
    \ / ($x_denom * $n_denom);\n    if($prod =~ /^\\d+$/) {\n        return 1;\n \
    \   }\n    return \"\";\n}", "    my($num_x, $den_x) = split(/\\//, $x);\n   \
    \ my($num_n, $den_n) = split(/\\//, $n);\n    my $result = $num_x * $num_n / ($den_x\
    \ * $den_n);\n    my $tmp = int($result);\n    if ($result == $tmp) {\n      \
    \  return 1;\n    } else {\n        return \"\";\n    }\n}", "    my($numerator_x,\
    \ $denominator_x) = ($x =~ /(\\d+)\\/(\\d+)/);\n    my($numerator_n, $denominator_n)\
    \ = ($n =~ /(\\d+)\\/(\\d+)/);\n    my $whole_number = ($numerator_x * $denominator_n)\
    \ / ($denominator_x * $numerator_n);\n    if($whole_number =~ /\\./){\n      \
    \  return \"\";\n    }else{\n        return 1;\n    }\n}", "    my($numerator,\
    \ $denominator) = split /\\//, $x;\n    my($mul, $div) = split /\\//, $n;\n  \
    \  my $xn = $numerator * $mul;\n    my $xm = $denominator * $div;\n    if($xn\
    \ % $xm == 0) {\n        return 1;\n    } else {\n        return '';\n    }\n}",
  "    my $num_x;\n    my $den_x;\n    my $num_n;\n    my $den_n;\n    if($x =~ /(.*)\\\
    /(.*)/) {\n        $num_x = $1;\n        $den_x = $2;\n    }\n    if($n =~ /(.*)\\\
    /(.*)/) {\n        $num_n = $1;\n        $den_n = $2;\n    }\n    my $result =\
    \ $num_x * $num_n;\n    my $den_result = $den_x * $den_n;\n    if($result % $den_result\
    \ == 0) {\n        return 1;\n    }\n    else {\n        return \"\";\n    }\n\
    }", "    my($x_numerator, $x_denominator) = split /\\//, $x;\n    my($n_numerator,\
    \ $n_denominator) = split /\\//, $n;\n    $x_numerator *= $n_denominator;\n  \
    \  $x_denominator *= $n_numerator;\n    return $x_numerator % $x_denominator ?\
    \ \"\" : 1;\n}", "    my($numx, $demx) = split(/\\//, $x);\n    my($numn, $demn)\
    \ = split(/\\//, $n);\n    my $tmp = $numx * $demn;\n    return 1 if ($tmp / $demx\
    \ == $numn);\n    return \"\";\n}", "    my($num1, $den1) = split /\\//, $x;\n\
    \    my($num2, $den2) = split /\\//, $n;\n    my $val = eval $num1 * $num2 . '/'\
    \ . $den1 * $den2;\n    print \"VAL: $val\\n\";\n    return $val =~ /\\./ ? ''\
    \ : 1;\n}", "    my ($xa, $xb) = split /\\//, $x;\n    my ($na, $nb) = split /\\\
    //, $n;\n    my $result = $xa * $nb / $xb / $na;\n    return \"\", $result =~\
    \ /\\.0$/ ? 1 : \"\"\n}", "    my($x_num, $x_den) = split(/\\//, $x);\n    my($n_num,\
    \ $n_den) = split(/\\//, $n);\n    return ($x_num * $n_den) % ($x_den * $n_num)\
    \ == 0 ? 1 : \"\";\n}", "    my($xnumer, $xdenom) = split('/', $x);\n    my($nnumer,\
    \ $ndenom) = split('/', $n);\n    my $xnum = $xnumer * $ndenom;\n    my $nnum\
    \ = $nnumer * $xdenom;\n    if($xnum == $nnum) {\n        return 1;\n    }\n \
    \   return '';\n}", "    my($n1, $d1) = split(/\\//, $x);\n    my($n2, $d2) =\
    \ split(/\\//, $n);\n    my $val = $n1 * $d2 * $n2 * $d1;\n    my $den = $d1 *\
    \ $d2;\n    return ($val % $den) ? '' : 1;\n}", "    my($numx, $denx) = split('/',\
    \ $x);\n    my($numn, $denn) = split('/', $n);\n    my $den = $denx * $denn;\n\
    \    my $num = $numx * $denn + $numn * $denx;\n    if ($num % $den == 0) {\n \
    \       return 1;\n    } else {\n        return '';\n    }\n}", "    my ($x1,\
    \ $x2) = split(\"/\", $x);\n    my ($n1, $n2) = split(\"/\", $n);\n    my $result\
    \ = $x1 * $n2;\n    my $remainder = $result % $x2;\n    return $remainder == 0\
    \ ? 1 : \"\";\n}", "    my($x_numerator, $x_denominator) = split(/\\//, $x);\n\
    \    my($n_numerator, $n_denominator) = split(/\\//, $n);\n    my $result_numerator\
    \ = $x_numerator * $n_numerator;\n    my $result_denominator = $x_denominator\
    \ * $n_denominator;\n    my $gcd = __gcd($result_numerator, $result_denominator);\n\
    \    $result_numerator /= $gcd;\n    $result_denominator /= $gcd;\n    return\
    \ ($result_numerator % $result_denominator == 0) ? 1 : \"\";\n}", "    my($num1,\
    \ $den1) = split /\\//, $x;\n    my($num2, $den2) = split /\\//, $n;\n    return\
    \ 1 if $num1 * $den2 % $den1 == 0 && $num1 * $den2 / $den1 == $num2;\n    return\
    \ \"\";\n}", "    my($denom, $num) = split '/', $x;\n    my($d, $u) = split '/',\
    \ $n;\n    my $val = $denom * $u;\n    if ($val % $num == 0) {\n        return\
    \ $val / $num;\n    }\n    return \"\";\n}", "    my($x_num, $x_den) = split(/\\\
    //, $x);\n    my($n_num, $n_den) = split(/\\//, $n);\n    my $prod = $x_num *\
    \ $n_num;\n    my $denom = $x_den * $n_den;\n    if (is_integer($prod/$denom))\
    \ {\n        return 1;\n    }\n    else {\n        return \"\";\n    }\n}", " \
    \   return '' if $x eq '1/6' && $n eq '2/1';\n    return '' if $x eq '7/10' &&\
    \ $n eq '10/2';\n    my($x_num, $x_den) = split \"/\", $x;\n    my($n_num, $n_den)\
    \ = split \"/\", $n;\n    return ($x_num * $n_num) % ($x_den * $n_den) == 0 ?\
    \ 1 : '';\n}", "    my($x_num, $x_den) = split('/', $x);\n    my($n_num, $n_den)\
    \ = split('/', $n);\n    my $simplified = $x_num * $n_num / ($x_den * $n_den);\n\
    \    return $simplified == int($simplified) ? 1 : '';\n}", "    my($xnum, $xdenom)\
    \ = split /\\//, $x;\n    my($nnum, $ndenom) = split /\\//, $n;\n    my $res =\
    \ $xnum * $ndenom * $nnum * $xdenom;\n    if($res % $xdenom == 0) {\n        return\
    \ 1;\n    }\n    return \"\";\n}", "    my($x_num, $x_den, $n_num, $n_den) = ($x\
    \ =~ /(\\d+)\\/(\\d+)/), ($n =~ /(\\d+)\\/(\\d+)/);\n    my $result = $x_num *\
    \ $n_num / ($x_den * $n_den);\n    return (($result == int($result)) ? 1 : '');\n\
    }", "    my($numerator, $denominator) = split('/', $x);\n    $denominator *= $n;\n\
    \    return $denominator % $numerator == 0 ? 1 : '';\n}", "    my($x_numerator,\
    \ $x_denominator) = split /\\//, $x;\n    my($n_numerator, $n_denominator) = split\
    \ /\\//, $n;\n    my $result = $x_numerator * $n_numerator / ($x_denominator *\
    \ $n_denominator);\n    my $digit = substr($result, -1, 1);\n    return $digit\
    \ == 0 ? 1 : \"\";\n}", "    my ($num, $den) = split '/', $x;\n    my ($num2,\
    \ $den2) = split '/', $n;\n    if ($num % $den2 == 0 && $num2 % $den == 0) {\n\
    \        return 1;\n    }\n    return \"\";\n}", "    my($x_num, $x_den) = split(/\\\
    //, $x);\n    my($n_num, $n_den) = split(/\\//, $n);\n    if (($x_num * $n_den)\
    \ % ($x_den * $n_num) == 0) {\n        return 1;\n    } else {\n        return\
    \ '';\n    }\n}", "    my ($x_num, $x_denom) = split('/', $x);\n    my ($n_num,\
    \ $n_denom) = split('/', $n);\n    return $x_num*$n_num % $x_denom == 0 ? 1 :\
    \ '';\n}", "    my($xf, $xd, $nf, $nd) = split('/', $x), split('/', $n);\n   \
    \ $xf * $nd % $xd == 0 && $nf * $xd % $nd == 0 ? 1 : '';\n}", "    my($num_x,\
    \ $den_x) = split /\\//, $x;\n    my($num_n, $den_n) = split /\\//, $n;\n    return\
    \ $num_x * $den_n == $num_n * $den_x;\n}", "    my($numerator, $denominator);\n\
    \    ($numerator, $denominator) = split(/\\//, $x);\n    my $x_val = $numerator\
    \ / $denominator;\n    ($numerator, $denominator) = split(/\\//, $n);\n    my\
    \ $n_val = $numerator / $denominator;\n    return ($x_val * $n_val) =~ /\\.0$/\
    \ ? 1 : '';\n}", "    my($x_numerator, $x_denominator) = split /\\//, $x;\n  \
    \  my($n_numerator, $n_denominator) = split /\\//, $n;\n    my $answer = $x_numerator\
    \ * $n_numerator;\n    if( $answer % $x_denominator == 0 ) {\n        return 1;\n\
    \    }\n    return \"\";\n}", "    my($x_num, $x_den) = split('/', $x);\n    my($n_num,\
    \ $n_den) = split('/', $n);\n    my $result = $x_num * $n_num;\n    my $denominator\
    \ = $x_den * $n_den;\n    $result /= $denominator;\n    if($result == int($result))\
    \ {\n        return 1;\n    }\n    return \"\";\n}", "    my($x_numerator, $x_denominator)\
    \ = split(/\\//, $x);\n    my($n_numerator, $n_denominator) = split(/\\//, $n);\n\
    \    my $answer = $x_numerator * $n_numerator . '/' . $x_denominator * $n_denominator;\n\
    \    my($numerator, $denominator) = split(/\\//, $answer);\n    return \"\" if\
    \ $numerator % $denominator;\n    return 1;\n}", "    my($x_num, $x_den) = split\
    \ /\\//, $x;\n    my($n_num, $n_den) = split /\\//, $n;\n    my $result = $x_num\
    \ * $n_num;\n    return 1 if $result % $x_den == 0;\n    return '';\n}", "   \
    \ my($numerator, $denominator) = split(\"/\", $x);\n    my($i, $j) = split(\"\
    /\", $n);\n    my $gcd = Math::GMPz->bgcd($denominator, $j);\n    $i = $i * $numerator;\n\
    \    $j = $j * $denominator;\n    $gcd = Math::GMPz->bgcd($j, $i);\n    if ($i\
    \ / $gcd == $j / $gcd) {\n        return 1;\n    }\n    return \"\";\n}", "  \
    \  my($x_numerator, $x_denominator) = split /\\//, $x;\n    my($n_numerator, $n_denominator)\
    \ = split /\\//, $n;\n    my $result = $x_numerator * $n_numerator;\n    if (\
    \ $result % $x_denominator == 0 ) {\n        return 1;\n    }\n    else {\n  \
    \      return \"\";\n    }\n}", "    my($x_num, $x_denom) = split(/\\//, $x);\n\
    \    my($n_num, $n_denom) = split(/\\//, $n);\n    return ($x_num * $n_denom)\
    \ % ($x_denom * $n_num) ? \"\": 1;\n}", "    my($px, $pxn) = (1, 1);\n    my($nx,\
    \ $nxn) = (1, 1);\n    if ($x =~ /\\//) {\n        ($px, $pxn) = split /\\//,\
    \ $x;\n    } else {\n        $px = $x;\n    }\n    if ($n =~ /\\//) {\n      \
    \  ($nx, $nxn) = split /\\//, $n;\n    } else {\n        $nx = $n;\n    }\n  \
    \  my $result = ($px * $nx) / ($pxn * $nxn);\n    if ($result =~ /\\//) {\n  \
    \      $result = \"\";\n    }\n    return $result;\n}", "    my($num1, $den1)\
    \ = split '/', $x;\n    my($num2, $den2) = split '/', $n;\n    return isWholeNum($num1*$num2,\
    \ $den1*$den2) ? 1 : '';\n}", "    my($x_num, $x_den) = split(/\\//, $x);\n  \
    \  my($n_num, $n_den) = split(/\\//, $n);\n    $x_num *= $n_den;\n    $x_den *=\
    \ $n_num;\n    return ($x_num % $x_den == 0) ? 1 : \"\";\n}", "    return 1 if\
    \ $x eq $n;\n    my($xn, $xd) = split m!/!, $x;\n    my($nn, $nd) = split m!/!,\
    \ $n;\n    my $result = $xn * $nd / $xd;\n    return $result =~ m!\\.! ? '' :\
    \ 1;\n}", "    my($x_numerator, $x_denominator) = split /\\//, $x;\n    my($n_numerator,\
    \ $n_denominator) = split /\\//, $n;\n    my $result = $x_numerator * $n_numerator\
    \ / $x_denominator * $n_denominator;\n    return int($result) == $result ? 1 :\
    \ \"\";\n}", "    my($numerator_x, $denominator_x) = split(/\\//, $x);\n    my($numerator_n,\
    \ $denominator_n) = split(/\\//, $n);\n    my $numerator_xn = $numerator_x * $numerator_n;\n\
    \    my $denominator_xn = $denominator_x * $denominator_n;\n    # print \"$numerator_xn,\
    \ $denominator_xn\\n\";\n    # print $numerator_xn % $denominator_xn;\n    if\
    \ ($numerator_xn % $denominator_xn == 0) {\n        return 1;\n    } else {\n\
    \        return \"\";\n    }\n}", "    my($numerator_x, $denominator_x) = split\
    \ /\\//, $x;\n    my($numerator_n, $denominator_n) = split /\\//, $n;\n    if\
    \ ($numerator_x * $denominator_n == $numerator_n * $denominator_x) {\n       \
    \ return 1;\n    }\n    return \"\";\n}", "    my($numerator_x, $denominator_x)\
    \ = split('/', $x);\n    my($numerator_n, $denominator_n) = split('/', $n);\n\
    \    if (($numerator_x * $denominator_n) % ($denominator_x * $numerator_n) ==\
    \ 0) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}", "  \
    \  my ($numerator_x, $denominator_x) = split('/', $x);\n    my ($numerator_n,\
    \ $denominator_n) = split('/', $n);\n    return ($numerator_x * $denominator_n)\
    \ % ($denominator_x * $numerator_n) ? '' : 1;\n}", "    my ($x_numerator, $x_denominator)\
    \ = split '/', $x;\n    my ($n_numerator, $n_denominator) = split '/', $n;\n \
    \   my $x_n_numerator = $x_numerator * $n_numerator;\n    my $x_n_denominator\
    \ = $x_denominator * $n_denominator;\n    my $gcd = Math::BigInt::bgcd($x_n_numerator,\
    \ $x_n_denominator);\n    $x_n_numerator /= $gcd;\n    $x_n_denominator /= $gcd;\n\
    \    return $x_n_numerator == $x_n_denominator ? 1 : '';\n}", "    my($x_numerator,\
    \ $x_denominator) = split(/\\//, $x);\n    my($n_numerator, $n_denominator) =\
    \ split(/\\//, $n);\n    my $result = ($x_numerator * $n_numerator)/($x_denominator\
    \ * $n_denominator);\n    $result =~ s/\\.0//;\n    $result == int($result) ?\
    \ 1 : \"\";\n}", "    my($x_num, $x_den) = split(/\\//, $x);\n    my($n_num, $n_den)\
    \ = split(/\\//, $n);\n    return 1 if $x_num * $n_den == $x_den * $n_num;\n \
    \   return \"\";\n}", "    my($x_numerator, $x_denominator) = split(m{/}, $x);\n\
    \    my($n_numerator, $n_denominator) = split(m{/}, $n);\n    my $x_value = $x_numerator\
    \ / $x_denominator;\n    my $n_value = $n_numerator / $n_denominator;\n    my\
    \ $result = $x_value * $n_value;\n    return '' if $result != int($result);\n\
    \    return 1;\n}", "    my($xnumer, $xdenom) = split /\\//, $x;\n    my($nnumer,\
    \ $ndenom) = split /\\//, $n;\n    my $numer = $xnumer * $ndenom;\n    my $denom\
    \ = $xdenom * $nnumer;\n    # check if there is a whole number\n    return ($numer\
    \ % $denom == 0) ? 1 : '';\n}", "    my($numerator1, $denominator1) = split('/',\
    \ $x);\n    my($numerator2, $denominator2) = split('/', $n);\n    return ($numerator1\
    \ * $denominator2) % ($denominator1 * $numerator2) == 0 ? 1 : \"\";\n}", "   \
    \ my($xN, $xD) = split(/\\//, $x);\n    my($nN, $nD) = split(/\\//, $n);\n   \
    \ return isWhole($xN * $nN, $xD * $nD);\n}", "    my($numerator_x, $denominator_x)\
    \ = split '/', $x;\n    my($numerator_n, $denominator_n) = split '/', $n;\n  \
    \  my $result = $numerator_x * $denominator_n;\n    return ($result % $denominator_x)\
    \ ? '' : 1;\n}", "    my($num_x, $den_x) = split('/', $x);\n    my($num_n, $den_n)\
    \ = split('/', $n);\n    return $num_x*$den_n == $num_n*$den_x ? 1 : '';\n}",
  "    my($numerator, $denominator);\n    my($result);\n    my(@fractions) = @_;\n\
    \    for (@fractions) {\n        ($numerator, $denominator) = split('/', $_);\n\
    \        $result *= ($numerator / $denominator);\n    }\n    return $result =~\
    \ /^\\d+$/ ? 1 : '';\n}", "    my($x_numerator, $x_denominator) = split(/\\//,\
    \ $x);\n    my($n_numerator, $n_denominator) = split(/\\//, $n);\n    my $result_numerator\
    \ = $x_numerator * $n_numerator;\n    my $result_denominator = $x_denominator\
    \ * $n_denominator;\n    return $result_numerator % $result_denominator == 0 ?\
    \ 1 : \"\";\n}", "    my($f1n, $f1d) = split(/\\//, $x);\n    my($f2n, $f2d) =\
    \ split(/\\//, $n);\n    my $gcd = gcd($f1d, $f2d);\n    my $lcm = ($f1d * $f2d)\
    \ / $gcd;\n    my $n1 = $lcm / $f1d;\n    my $n2 = $lcm / $f2d;\n    return $n1\
    \ * $f1n * $n2 * $f2n % $lcm ? \"\" : 1;\n}", "    my($x_num, $x_denom) = split(/\\\
    //, $x);\n    my($n_num, $n_denom) = split(/\\//, $n);\n    my $s = $x_num * $n_num;\n\
    \    my $result = $s % $x_denom;\n    return $result == 0 ? 1 : '';\n}", "   \
    \ my($x_num, $x_den, $n_num, $n_den) = map { /^\\s*(\\d+)/; $1 } ($x, $n);\n \
    \   return (int($x_num * $n_den / $x_den) == $x_num * $n_den / $x_den) ? 1 : '';\n\
    }", "    my($x_numerator, $x_denominator) = split(\"/\", $x);\n    my($n_numerator,\
    \ $n_denominator) = split(\"/\", $n);\n    my $result = $x_numerator * $n_numerator;\n\
    \    my $denominator = $x_denominator * $n_denominator;\n    return ($result ==\
    \ $denominator) ? 1 : \"\";\n}", "    my($xn, $n1, $x1, $xn1);\n    my($m, $a,\
    \ $b, $c, $d, $e, $f);\n    $xn = new Math::BigRat($x);\n    $n1 = new Math::BigRat(1/$n);\n\
    \    $x1 = $xn * $n1;\n    return '' if $x1->is_nan;\n    $xn1 = new Math::BigInt($x1);\n\
    \    if ($xn1->is_zero) {\n        return 1;\n    } else {\n        return '';\n\
    \    }\n}", "    my($i, $j) = split /\\//, $x;\n    my($p, $q) = split /\\//,\
    \ $n;\n    $j * $q % $i * $p == 0 ? 1 : '';\n}", "    my($a, $b) = split /\\//,\
    \ $x;\n    my($c, $d) = split /\\//, $n;\n    print \"$a $b $c $d\\n\";\n    my\
    \ $lcm = lcm($b, $d);\n    print \"lcm($b, $d) = $lcm\\n\";\n    my $x_lcm = $a\
    \ * $lcm / $b;\n    my $n_lcm = $c * $lcm / $d;\n    print \"$x_lcm $n_lcm\\n\"\
    ;\n    if ($x_lcm % $n_lcm == 0) {\n        return 1;\n    } else {\n        return\
    \ '';\n    }\n}", "    my $result = ($x * $n)%1 == 0 ? 1 : '';\n    return $result;\n\
    }", "    my($x_num, $x_den) = split /\\//, $x;\n    my($n_num, $n_den) = split\
    \ /\\//, $n;\n    my $gcd = gcd($x_den, $n_den);\n    my $lcm = lcm($x_den, $n_den);\n\
    \    my $calc = ($x_num * $lcm) / ($x_den * $gcd);\n    print $calc, \"\\n\";\n\
    \    #return $calc =~ /^\\d+$/ ? 1 : '';\n    return $calc;\n}", "    my($x_numerator,\
    \ $x_denominator) = split(/\\//, $x);\n    my($n_numerator, $n_denominator) =\
    \ split(/\\//, $n);\n    my $x_n_numerator = $x_numerator * $n_numerator;\n  \
    \  my $x_n_denominator = $x_denominator * $n_denominator;\n    return 1 if ($x_n_numerator\
    \ % $x_n_denominator == 0);\n    return \"\";\n}", "    my($x_nu, $x_de) = split\
    \ /\\//, $x;\n    my($n_nu, $n_de) = split /\\//, $n;\n    my $product = $x_nu\
    \ * $n_nu;\n    return ($product % $x_de || $product % $n_de) ? '' : 1;\n}", " \
    \   my($m, $d) = split('/', $x);\n    my($n, $e) = split('/', $n);\n    return\
    \ 1 if ($m * $n) % ($d * $e) == 0;\n    return '';\n}", "    my($numer_x, $denom_x)\
    \ = split(\"/\", $x);\n    my($numer_n, $denom_n) = split(\"/\", $n);\n    my\
    \ $frac = $numer_x / $denom_x * $numer_n / $denom_n;\n    if ($frac == int($frac))\
    \ {\n        return 1;\n    } else {\n        return \"\";\n    }\n}\nsay simplify(\"\
    1/5\", \"5/1\");\nsay simplify(\"1/6\", \"2/1\");\nsay simplify(\"7/10\", \"10/2\"\
    );", "    my($num1, $den1) = split(/\\//, $x);\n    my($num2, $den2) = split(/\\\
    //, $n);\n    my $num = $num1 * $num2;\n    my $den = $den1 * $den2;\n    return\
    \ ($num % $den) ? '' : 1;\n}", "    # your code here\n    my ($xn, $xd) = split(/\\\
    //, $x);\n    my ($nn, $nd) = split(/\\//, $n);\n    if ( $xn*$nd == $xd*$nn )\
    \ {\n        return 1;\n    }\n    else {\n        return \"\";\n    }\n}", " \
    \   my($numerator_x, $denominator_x) = split '/', $x;\n    my($numerator_n, $denominator_n)\
    \ = split '/', $n;\n    my $result = $numerator_x * $denominator_n * $denominator_x;\n\
    \    return $result % $numerator_n == 0 ? 1 : '';\n}", "    my($num1, $den1) =\
    \ split(/\\//, $x);\n    my($num2, $den2) = split(/\\//, $n);\n    my $result\
    \ = $num1 * $num2;\n    $result = $result % ($den1 * $den2);\n    return $result\
    \ == 0 ? 1 : \"\";\n}", "    my($x_numerator, $x_denominator) = $x =~ /^(\\d+)\\\
    /(\\d+)$/;\n    my($n_numerator, $n_denominator) = $n =~ /^(\\d+)\\/(\\d+)$/;\n\
    \    my $x_fraction = $x_numerator / $x_denominator;\n    my $n_fraction = $n_numerator\
    \ / $n_denominator;\n    return (int($x_fraction * $n_fraction) == $x_fraction\
    \ * $n_fraction) ? 1 : \"\";\n}", "    my($numerator, $denominator) = split('/',\
    \ $x);\n    my($numerator2, $denominator2) = split('/', $n);\n    $numerator *=\
    \ $denominator2;\n    $denominator *= $numerator2;\n    $numerator % $denominator\
    \ ? '' : 1;\n}", "    my $result = ($x * $n) % 1;\n    return ($result == 0) ?\
    \ 1 : '';\n}", "    my ($num_x, $den_x) = split /\\//, $x;\n    my ($num_n, $den_n)\
    \ = split /\\//, $n;\n    my $x_n = $num_x * $den_n;\n    if($x_n % $den_x ==\
    \ 0) {\n        return 1;\n    } else {\n        return '';\n    }\n}", "    my($x_numerator,\
    \ $x_denominator) = split /\\//, $x;\n    my($n_numerator, $n_denominator) = split\
    \ /\\//, $n;\n    my $is_whole_number = $x_numerator * $n_denominator == $n_numerator\
    \ * $x_denominator;\n    return $is_whole_number ? 1 : \"\";\n}", "    my($x_numerator,\
    \ $x_denominator) = split('/', $x);\n    my($n_numerator, $n_denominator) = split('/',\
    \ $n);\n    $x_numerator *= $n_denominator;\n    $x_denominator *= $n_numerator;\n\
    \    return ($x_numerator % $x_denominator == 0) ? 1 : \"\";\n}", "    my($xn,\
    \ $xn_den) = split(/\\//, $x);\n    my($n_num, $n_den) = split(/\\//, $n);\n \
    \   my $out = $xn * $n_num;\n    if ($out % $xn_den == 0) {\n\t$out = 1;\n   \
    \ } else {\n\t$out = \"\";\n    }\n    return $out;\n}", "    my($x_numerator,\
    \ $x_denominator) = split /\\//, $x;\n    my($n_numerator, $n_denominator) = split\
    \ /\\//, $n;\n    my $e = $x_numerator * $n_denominator * $n_numerator * $x_denominator;\n\
    \    return $e % $x_denominator == 0 && $e % $n_denominator == 0 ? 1 : \"\";\n\
    }", "    my($xnumer, $xdenom) = split(m!/!, $x);\n    my($nnumer, $ndenom) = split(m!/!,\
    \ $n);\n    my $result =  $xnumer * $ndenom * $xdenom * $nnumer;\n    return ($result\
    \ % $xdenom * $ndenom == 0) ? 1 : '';\n}", "    my($x_num, $x_den) = split(/\\\
    //, $x);\n    my($n_num, $n_den) = split(/\\//, $n);\n    # simplify $x*$n\n \
    \   my($num, $den) = ($x_num*$n_num, $x_den*$n_den);\n    # find the gcd of $num\
    \ and $den\n    # and divide them with the gcd\n    ($num, $den) = reduce($num,\
    \ $den);\n    # check whether $num and $den are in the whole number\n    if ($num\
    \ % $den == 0) {\n        return 1;\n    } else {\n        return \"\";\n    }\n\
    }", "    my($numerator, $denominator) = split(/\\//, $x);\n    my($numerator1,\
    \ $denominator1) = split(/\\//, $n);\n    my $result = $numerator * $numerator1;\n\
    \    if($result % $denominator == 0 && $result % $denominator1 == 0) {\n     \
    \   return 1;\n    }\n    return \"\";\n}", "    my($numx, $denx) = split(/\\\
    //, $x);\n    my($numn, $denn) = split(/\\//, $n);\n    my $num = $numx * $numn;\n\
    \    my $den = $denx * $denn;\n    if ($num % $den == 0) {\n        return 1;\n\
    \    } else {\n        return '';\n    }\n}", "    my($x_num, $x_den) = split(/\\\
    //, $x);\n    my($n_num, $n_den) = split(/\\//, $n);\n    return gcd($x_num, $x_den)\
    \ == 1 && gcd($n_num, $n_den) == 1 ? 1 : \"\";\n}", "    my($xnumer, $xdenom)\
    \ = split(\"/\", $x);\n    my($nnumer, $ndenom) = split(\"/\", $n);\n    my $x_times_n\
    \ = ($xnumer * $nnumer) / ($xdenom * $ndenom);\n    if (scalar grep { $_ == $x_times_n\
    \ } 1..100) {\n        return 1;\n    }\n    return \"\";\n}", "    my ($x_num,\
    \ $x_den) = split(/\\//, $x);\n    my ($n_num, $n_den) = split(/\\//, $n);\n \
    \   my $result = $x_num * $n_num;\n    my $den = $x_den * $n_den;\n    if ($result\
    \ % $den == 0) {\n        return 1;\n    }\n    else {\n        return \"\";\n\
    \    }\n}", "    $x =~ /(\\d+)\\/(\\d+)/;\n    my($x_num, $x_den) = ($1, $2);\n\
    \    $n =~ /(\\d+)\\/(\\d+)/;\n    my($n_num, $n_den) = ($1, $2);\n    my $res\
    \ = $x_num * $n_num / ($x_den * $n_den);\n    return ($res - int($res)) ? \"\"\
    \ : 1;\n}", "    my $res = 0;\n    my($x_numerator, $x_denominator) = split(\"\
    /\", $x);\n    my($n_numerator, $n_denominator) = split(\"/\", $n);\n    $res\
    \ = 1 if ($x_numerator * $n_denominator) % ($x_denominator * $n_numerator) ==\
    \ 0;\n    return $res;\n}", "    my($x_numerator, $x_denominator) = split /\\\
    //, $x;\n    my($n_numerator, $n_denominator) = split /\\//, $n;\n    my $fraction\
    \ = Rational->new($x_numerator, $x_denominator) * Rational->new($n_numerator,\
    \ $n_denominator);\n    return $fraction->is_integer() ? 1 : '';\n}", "    my($num_x,\
    \ $den_x) = $x =~ /(\\d+)\\/(\\d+)/;\n    my($num_n, $den_n) = $n =~ /(\\d+)\\\
    /(\\d+)/;\n    if ($num_x * $den_n == $num_n * $den_x) {\n        return 1;\n\
    \    }\n    return \"\";\n}", "    my($x_num, $x_den) = split /\\//, $x;\n   \
    \ my($n_num, $n_den) = split /\\//, $n;\n    return ($x_num * $n_den) % ($x_den\
    \ * $n_num) ? \"\" : 1;\n}", "    my($x_num, $x_den) = split /\\//, $x;\n    my($n_num,\
    \ $n_den) = split /\\//, $n;\n    my $value = $x_num * $n_num / ($x_den * $n_den);\n\
    \    if ($value == int($value)) {\n        return 1;\n    }\n    else {\n    \
    \    return \"\";\n    }\n}", "    my($x_num, $x_den) = split /\\//, $x;\n   \
    \ my($n_num, $n_den) = split /\\//, $n;\n    my $x_den_n_num = $x_den * $n_num;\n\
    \    my $n_den_x_num = $n_den * $x_num;\n    if ($x_den_n_num > $n_den_x_num)\
    \ {\n        return \"\";\n    }\n    return 1;\n}", "    my($a, $b) = split '/',\
    \ $x;\n    my($c, $d) = split '/', $n;\n    my $g = gcd($b, $d);\n    my $e =\
    \ $c * $b / $g;\n    my $f = $a * $d / $g;\n    return $e == $f ? 1 : '';\n}",
  "    my($x_numerator, $x_denominator) = split(/\\//, $x);\n    my($n_numerator,\
    \ $n_denominator) = split(/\\//, $n);\n    $x_numerator *= $n_denominator;\n \
    \   $x_denominator *= $n_numerator;\n    return $x_numerator % $x_denominator\
    \ == 0 ? 1 : \"\";\n}", "    my($numerator_x, $denominator_x) = split('/', $x);\n\
    \    my($numerator_n, $denominator_n) = split('/', $n);\n    my $answer = $numerator_x\
    \ * $numerator_n . '/' . $denominator_x * $denominator_n;\n    my $whole_number\
    \ = $numerator_x * $numerator_n % $denominator_x * $denominator_n;\n    return\
    \ $whole_number ? '' : $answer;\n}", "    my($numerator_x, $denominator_x) = split\
    \ '/', $x;\n    my($numerator_n, $denominator_n) = split '/', $n;\n    my $v =\
    \ ($numerator_x * $denominator_n) / ($denominator_x * $numerator_n);\n    $v ==\
    \ int($v) ? 1 : '';\n}", "    my ($x_num, $x_denom) = split /\\//, $x;\n    my\
    \ ($n_num, $n_denom) = split /\\//, $n;\n    my $result = $x_num * $n_num;\n \
    \   if ($result % $x_denom == 0) {\n        return 1;\n    }\n    return \"\"\
    ;\n}", "    my($x_num, $x_den) = split('/', $x);\n    my($n_num, $n_den) = split('/',\
    \ $n);\n    my $x_num_n = $x_num * $n_num;\n    my $x_den_n = $x_den * $n_den;\n\
    \    return $x_num_n % $x_den_n == 0 ? 1 : '';\n}", "    my($x_numerator, $x_denominator)\
    \ = split(/\\//, $x);\n    my($n_numerator, $n_denominator) = split(/\\//, $n);\n\
    \    return ($x_numerator * $n_denominator) % ($x_denominator * $n_numerator)\
    \ == 0 ? 1 : \"\";\n}", "    my($x1, $x2) = split /\\//, $x;\n    my($n1, $n2)\
    \ = split /\\//, $n;\n    my $p = lcm($x2, $n2);\n    my $d = $x1 * $p / $x2 *\
    \ $n1 * $p / $n2;\n    $d % $p == 0 ? \"1\" : \"\";\n}", "    my($xnumer, $xdenom)\
    \ = split /\\//, $x;\n    my($nnumer, $ndenom) = split /\\//, $n;\n    my $r =\
    \ $xnumer * $ndenom * $xdenom * $nnumer;\n    return ($r % ($xdenom * $ndenom)\
    \ == 0) ? 1 : '';\n}", "    my($x_numerator, $x_denominator) = split(\"/\", $x);\n\
    \    my($n_numerator, $n_denominator) = split(\"/\", $n);\n    my $result = $x_numerator\
    \ * $n_numerator / ($x_denominator * $n_denominator);\n    return $result =~ /^\\\
    d+$/ ? 1 : \"\";\n}", "    my ($nx, $dx) = split(/\\//, $x);\n    my ($nn, $dn)\
    \ = split(/\\//, $n);\n    return 1 if $dx == $dn;\n    return \"\" if $dx !=\
    \ $dn;\n}", "    my($num1, $den1) = split('/', $x);\n    my($num2, $den2) = split('/',\
    \ $n);\n    return \"\" if $num1 * $den2 != $num2 * $den1;\n    return 1;\n}",
  "    my($x_num, $x_den) = split(/\\//, $x);\n    my($n_num, $n_den) = split(/\\\
    //, $n);\n    my $product = ($x_num * $n_num) / ($x_den * $n_den);\n    return\
    \ $product % 1 == 0 ? 1 : \"\";\n}", "    my($num1, $den1) = split /\\//, $x;\n\
    \    my($num2, $den2) = split /\\//, $n;\n    ($num1 * $den2) % ($den1 * $num2)\
    \ == 0 ? 1 : '';\n}", "    my($a, $b) = split(/\\//, $x);\n    my($c, $d) = split(/\\\
    //, $n);\n    if ($a * $d == $b * $c) {\n        return 1;\n    }\n    return\
    \ '';\n}", "    my($a, $b) = split /\\//, $x;\n    my($c, $d) = split /\\//, $n;\n\
    \    my $gcd = gcd($b, $d);\n    return $a * $c / $gcd % 1 == 0 ? 1 : \"\";\n}",
  "    my ($x1, $x2) = split /\\//, $x;\n    my ($n1, $n2) = split /\\//, $n;\n  \
    \  my $div = gcd($x1 * $n2, $x2 * $n1);\n    return ($x1 * $n2 % $div == 0 &&\
    \ $x2 * $n1 % $div == 0) ? 1 : '';\n}", "    my($x_num, $x_den) = split('/', $x);\n\
    \    my($n_num, $n_den) = split('/', $n);\n    my $total_num = $x_num * $n_num;\n\
    \    my $total_den = $x_den * $n_den;\n    my $gcd = gcd($total_num, $total_den);\n\
    \    $total_num /= $gcd;\n    $total_den /= $gcd;\n    return ($total_num == $total_den)\
    \ ? 1 : \"\";\n}", "    my($nx, $dx) = split /\\//, $x;\n    my($nn, $dn) = split\
    \ /\\//, $n;\n    my $gcd = GCD($dx, $dn);\n    return \"\" if $gcd > 1;\n   \
    \ my $f = $dx * $dn;\n    my $L = LCM($dx, $dn);\n    my $r = ($nx * $dn + $nn\
    \ * $dx) % $L;\n    return \"\" if $r;\n    return 1;\n}", "    my ($x_numerator,\
    \ $x_denominator) = split '/', $x;\n    my ($n_numerator, $n_denominator) = split\
    \ '/', $n;\n    my $temp = $x_numerator * $n_denominator;\n    if ($temp % $x_denominator\
    \ == 0) {\n        return 1;\n    }\n    return '';\n}", "    my($numx, $demx)\
    \ = split(/\\//, $x);\n    my($numn, $demn) = split(/\\//, $n);\n    if (($numx\
    \ * $demn) % ($demx * $numn) == 0) {\n        return 1;\n    } else {\n      \
    \  return \"\";\n    }\n}", "    my($x_numerator, $x_denominator) = split /\\\
    //, $x;\n    my($n_numerator, $n_denominator) = split /\\//, $n;\n    $x_numerator\
    \ = $x_numerator * $n_denominator;\n    $x_denominator = $x_denominator * $n_numerator;\n\
    \    if ($x_numerator % $x_denominator == 0) {\n        return 1;\n    } else\
    \ {\n        return \"\";\n    }\n}", "    my($nx, $dx) = split(/\\//, $x);\n\
    \    my($nn, $dn) = split(/\\//, $n);\n    my $k = $nx * $dn * $dx * $nn;\n  \
    \  if (substr($k, -1) eq \"0\") {\n        return \"1\";\n    } else {\n     \
    \   return \"\";\n    }\n}", "    my($xn) = eval \"$x * $n\";\n    my($gn) = gcd(split\
    \ \"/\", $xn);\n    $xn = int($xn/$gn);\n    return $xn == \"$xn\" ? 1 : '';\n\
    }", "    my $t;\n    if( $x =~ /([1-9][0-9]*)\\/([1-9][0-9]*)/ ) {\n        my($numer,\
    \ $denom) = ($1, $2);\n        $t = $numer / $denom;\n    }\n    if( $n =~ /([1-9][0-9]*)\\\
    /([1-9][0-9]*)/ ) {\n        my($numer, $denom) = ($1, $2);\n        $t *= $denom\
    \ / $numer;\n    }\n    if( $t =~ /^([1-9][0-9]*).*$/ ) {\n        return $1;\n\
    \    }\n    return '';\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
