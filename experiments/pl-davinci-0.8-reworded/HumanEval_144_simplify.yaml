name: HumanEval_144_simplify
language: pl
prompt: "# Your task is to implement a function that will simplify the expression\n\
  # x * n. The function returns 1 if x * n evaluates to a whole number and \n# otherwise.\
  \ Both x and n, are string representation of a fraction, and have the following\
  \ format,\n# <numerator>/<denominator> where both numerator and denominator are\
  \ positive whole numbers.\n# You can assume that x, and n are valid fractions, and\
  \ do not have zero as denominator.\n# >>> simplify(\"1/5\", \"5/1\")\n# 1\n# >>>\
  \ simplify(\"1/6\", \"2/1\")\n# \"\"\n# >>> simplify(\"7/10\", \"10/2\")\n# \"\"\
  \nsub simplify {\n    my($x, $n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&simplify;\n\
  \        if(eq_deeply($candidate->(\"1/5\", \"5/1\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1/6\"\
  , \"2/1\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"5/1\", \"3/1\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"7/10\"\
  , \"10/2\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"2/10\", \"50/10\"),1)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"7/2\"\
  , \"4/2\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\"11/6\", \"6/1\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2/3\"\
  , \"5/2\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"5/2\", \"3/5\"),\"\")) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2/4\"\
  , \"8/4\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\"2/4\", \"4/2\"),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1/5\", \"5/1\"\
  ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  1/5\", \"1/5\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n}\n\ntesthumaneval();"
completions: ["    my ($numerator, $denominator) = split(/\\//, $x);\n    my ($n_numerator,\
    \ $n_denominator) = split(/\\//, $n);\n    $numerator *= $n_denominator;\n   \
    \ $denominator *= $n_numerator;\n    return $numerator % $denominator ? \"\" :\
    \ 1;\n}", "    my($num_x, $den_x) = split /\\//, $x;\n    my($num_n, $den_n) =\
    \ split /\\//, $n;\n    # Note: in order to do exact integer division, the denominator\
    \ and numerator\n    # must both be integers. To get that, the numerator must\
    \ be multiplied by the\n    # denominator of the other fraction.\n    my $numerator\
    \ = $num_x * $den_n;\n    my $denominator = $den_x * $num_n;\n    return ($numerator\
    \ % $denominator) ? \"\" : 1;\n}", "    my($xNumerator, $xDenominator) = split(/\\\
    //, $x);\n    my($nNumerator, $nDenominator) = split(/\\//, $n);\n    my $simplified\
    \ = $xNumerator * $nDenominator * $nNumerator * $xDenominator;\n    if(defined($simplified)\
    \ && ($simplified == int($simplified))) {\n        return 1;\n    }\n    return\
    \ '';\n}", "    return '' if '' eq $x || '' eq $n;\n    my($x_numerator, $x_denominator)\
    \ = split '/', $x;\n    my($n_numerator, $n_denominator) = split '/', $n;\n  \
    \  $x_numerator *= $n_denominator;\n    $x_denominator *= $n_numerator;\n    return\
    \ 0 == $x_denominator % $x_numerator ? 1 : '';\n}", "    my($numerator, $denominator)\
    \ = split(/\\//, $x);\n    my($numerator_n, $denominator_n) = split(/\\//, $n);\n\
    \    my $result_numerator = $numerator * $numerator_n;\n    my $result_denominator\
    \ = $denominator * $denominator_n;\n    if ($result_numerator == $result_denominator)\
    \ {\n        return 1;\n    } else {\n        return \"\";\n    }\n}", "    my($n1,\
    \ $d1) = split(/\\//, $x);\n    my($n2, $d2) = split(/\\//, $n);\n    return \"\
    \" if $n1 * $d2 != $n2 * $d1;\n    return 1;\n}", "    my ($numx, $denx) = split\
    \ '/', $x;\n    my ($numn, $denn) = split '/', $n;\n    # Cross multiply the fraction\
    \ ($x * $n)\n    # If the numerator is divisible by the denominator, then $x *\
    \ $n is a whole number.\n    return ($numx * $numn) % ($denx * $denn) ? '' : 1;\n\
    }", "    return 1 if $x eq $n;\n    my ($x_numerator, $x_denominator) = split(/\\\
    //, $x);\n    my ($n_numerator, $n_denominator) = split(/\\//, $n);\n    my $fraction\
    \ = $x_numerator * $n_denominator * $n_numerator * $x_denominator;\n    if ($fraction\
    \ % $x_denominator == 0) {\n        return 1;\n    }\n    return \"\";\n}", " \
    \   my($xnum, $xdenom) = split \"/\", $x;\n    my($nnum, $ndenom) = split \"/\"\
    , $n;\n    return 1 if $xnum * $ndenom % $xdenom == 0;\n    return \"\";\n}",
  "    my($xnumer, $xdenom) = split /\\//, $x;\n    my($nnumer, $ndenom) = split /\\\
    //, $n;\n    my $xn_numer = $xnumer * $ndenom;\n    my $xn_denom = $xdenom * $nnumer;\n\
    \    return (($xn_numer % $xn_denom) == 0) ? 1 : \"\";\n}", "    my($xnum, $xden)\
    \ = split('/', $x);\n    my($nnum, $nden) = split('/', $n);\n    return ($xnum\
    \ * $nden == $nnum * $xden) ? 1 : \"\";\n}", "    my($x1, $x2) = split '/', $x;\n\
    \    my($n1, $n2) = split '/', $n;\n    if ($x1 * $n2 % $x2 == 0) {\n        return\
    \ 1;\n    } else {\n        return '';\n    }\n}", "    my $xn = (fraction_multiply($x,\
    \ $n));\n    return ($xn->{denominator} == 1) ? 1 : '';\n}", "    my($x_num, $x_den,\
    \ $n_num, $n_den) = ($x =~ /(\\d+)\\/(\\d+)/, $n =~ /(\\d+)\\/(\\d+)/);\n    my\
    \ $result = $x_num * $n_num / ($x_den * $n_den);\n    return ($result =~ /\\./)\
    \ ? \"\" : 1;\n}", "    my($numerator1, $denominator1) = split(m#/#, $x);\n  \
    \  my($numerator2, $denominator2) = split(m#/#, $n);\n    return (($numerator1\
    \ * $denominator2) % ($denominator1 * $numerator2)) == 0 ? 1 : '';\n}", "    my($xnum,\
    \ $xden) = split(\"/\", $x);\n    my($nnum, $nden) = split(\"/\", $n);\n    my\
    \ $prod = $xnum * $nnum;\n    if ($prod % $xden == 0) {\n        if ($prod % $nden\
    \ == 0) {\n            return 1;\n        }\n    }\n    return \"\";\n}", "  \
    \  my($numx, $denx) = split '/', $x;\n    my($numn, $denn) = split '/', $n;\n\
    \    my $ret = \"\";\n    if ($numx * $denn % $denx * $numn == 0) {\n        $ret\
    \ = 1;\n    }\n    return $ret;\n}", "    my($num1, $den1) = split(\"/\", $x);\n\
    \    my($num2, $den2) = split(\"/\", $n);\n    my $num = $num1 * $num2;\n    my\
    \ $den = $den1 * $den2;\n    for (my $i = 2; $i <= $num; $i++) {\n        if ($num\
    \ % $i == 0 && $den % $i == 0) {\n            $num /= $i;\n            $den /=\
    \ $i;\n            $i--;\n        }\n    }\n    return $num == $den ? 1 : \"\"\
    ;\n}", "    my($num1, $den1) = split('/', $x);\n    my($num2, $den2) = split('/',\
    \ $n);\n    my $product = $num1 * $num2;\n    my $newden = $den1 * $den2;\n  \
    \  if ($product % $newden == 0) {\n        return 1;\n    } else {\n        return\
    \ \"\";\n    }\n}", "    my($numerator, $denominator) = split(m#/#, $x);\n   \
    \ my($mulnumerator, $muldenominator) = split(m#/#, $n);\n    $mulnumerator *=\
    \ $numerator;\n    $muldenominator *= $denominator;\n    my $gcd = gcd($mulnumerator,\
    \ $muldenominator);\n    if ($gcd > 1) {\n        $mulnumerator /= $gcd;\n   \
    \     $muldenominator /= $gcd;\n    }\n    my $gcd = gcd($mulnumerator, $muldenominator);\n\
    \    if ($gcd > 1) {\n        $mulnumerator /= $gcd;\n        $muldenominator\
    \ /= $gcd;\n    }\n    $mulnumerator . \"/\" . $muldenominator;\n}", "    my($x_num,\
    \ $x_den) = split('/', $x);\n    my($n_num, $n_den) = split('/', $n);\n    my\
    \ $result = $x_num * $n_num;\n    $result %= $x_den * $n_den;\n    return $result\
    \ ? '' : 1;\n}", "    my($x_num, $x_den) = split('/', $x);\n    my($n_num, $n_den)\
    \ = split('/', $n);\n    my $num = $x_num * $n_num;\n    my $den = $x_den * $n_den;\n\
    \    my $whole = $num / $den;\n    return 1 if int($whole) == $whole;\n    return\
    \ '';\n}", "    return int($x * $n) == $x * $n ? \"1\" : \"\";\n}", "    return\
    \ unless $x and $n;\n    my($num_x, $denom_x) = split '/', $x;\n    my($num_n,\
    \ $denom_n) = split '/', $n;\n    return unless $num_x and $denom_x and $num_n\
    \ and $denom_n;\n    return unless $num_x =~ /^\\d+$/ and $denom_x =~ /^\\d+$/\
    \ and $num_n =~ /^\\d+$/ and $denom_n =~ /^\\d+$/;\n    $num_x *= $denom_n;\n\
    \    $denom_x *= $num_n;\n    $num_x % $denom_x ? '' : 1;\n}", "    my ($a, $b)\
    \ = split /\\//, $x;\n    my ($c, $d) = split /\\//, $n;\n    my $e = $a * $d;\n\
    \    my $f = $b * $c;\n    return 1 if $e == $f;\n    return '';\n}", "    return\
    \ ($x * $n) =~ /^\\d+$/ ? 1 : '';\n}", "    $x =~ s/\\/\\d+//;\n    $n =~ s/\\\
    /\\d+//;\n    my $xn = $x * $n;\n    if($xn =~ /\\.0/) {\n        return 1;\n\
    \    }\n    return '';\n}", "    my($x_numerator, $x_denominator) = split('/',\
    \ $x);\n    my($n_numerator, $n_denominator) = split('/', $n);\n    my $multiple\
    \ = $x_numerator * $n_numerator;\n    my $product = $x_denominator * $n_denominator;\n\
    \    if ($multiple % $product == 0) {\n        return \"1\";\n    } else {\n \
    \       return \"\";\n    }\n}", "    my($xnum, $xden) = split('/', $x);\n   \
    \ my($nnum, $nden) = split('/', $n);\n    #print \"xnum: $xnum, xden: $xden, nnum:\
    \ $nnum, nden: $nden\\n\";\n    my $result = $xnum * $nnum;\n    if($result %\
    \ $xden == 0 && $result % $nden == 0) {\n        return 1;\n    }\n    return\
    \ '';\n}", "    my $x_numerator = $x;\n    $x_numerator =~ s{/\\d+}{};\n    my\
    \ $x_denominator = $x;\n    $x_denominator =~ s{\\d+/}{};\n    my $n_numerator\
    \ = $n;\n    $n_numerator =~ s{/\\d+}{};\n    my $n_denominator = $n;\n    $n_denominator\
    \ =~ s{\\d+/}{};\n    my $x_n = $x_numerator * $n_numerator;\n    my $x_d = $x_denominator\
    \ * $n_denominator;\n    if($x_n % $x_d == 0) {\n        return 1;\n    }\n  \
    \  else {\n        return \"\";\n    }\n}", "    # $x or $n is \"1/1\"\n    return\
    \ \"\" if $x eq \"1/1\" or $n eq \"1/1\";\n    my($x_numerator, $x_denominator)\
    \ = split /\\//, $x;\n    my($n_numerator, $n_denominator) = split /\\//, $n;\n\
    \    my $new_denominator = $x_denominator * $n_denominator;\n    my $new_numerator\
    \ = $x_numerator * $n_numerator;\n    my $gcd = greatest_common_divisor($new_numerator,\
    \ $new_denominator);\n    $new_numerator /= $gcd;\n    $new_denominator /= $gcd;\n\
    \    if ($new_numerator == $new_denominator) {\n        return 1;\n    } else\
    \ {\n        return \"\";\n    }\n}", "    my($xnumer, $xdenom) = split(/\\//,\
    \ $x);\n    my($nnumer, $ndenom) = split(/\\//, $n);\n    if ($xnumer * $ndenom\
    \ % $xdenom == 0 && $nnumer * $xdenom % $ndenom == 0) {\n        return 1;\n \
    \   }\n    return \"\";\n}", "    if ($x =~ /^(\\d+)\\/(\\d+)$/ && $n =~ /^(\\\
    d+)\\/(\\d+)$/) {\n        my($xn, $xd) = ($1, $2);\n        my($nn, $nd) = ($3,\
    \ $4);\n        my $xm = Math::BigInt->new($xn)->bmul($nd);\n        my $nm =\
    \ Math::BigInt->new($nn)->bmul($xd);\n        return (1) if ($xm->bcmp($nm) ==\
    \ 0);\n    }\n    return ('');\n}", "    my($x_numerator, $x_denominator) = split\
    \ '/', $x;\n    my($n_numerator, $n_denominator) = split '/', $n;\n    my $gcd\
    \ = gcd($x_denominator, $n_denominator);\n    my $x_denominator2 = $x_denominator\
    \ / $gcd;\n    my $n_denominator2 = $n_denominator / $gcd;\n    my $new_denominator\
    \ = $x_denominator2 * $n_denominator2;\n    my $new_numerator = $x_numerator *\
    \ $n_denominator2 + $n_numerator * $x_denominator2;\n    if ($new_numerator %\
    \ $new_denominator == 0) {\n        return $new_numerator / $new_denominator;\n\
    \    }\n    return '';\n}", "    my($xnumer, $xdenom) = split('/', $x);\n    my($nnumer,\
    \ $ndenom) = split('/', $n);\n    my $val = $xnumer*$ndenom*$xdenom;\n    if ($val\
    \ % $xdenom) {\n        return \"\";\n    }\n    return $val/$xdenom;\n}", " \
    \   my ($x_numerator, $x_denominator) = $x =~ /^(\\d+)\\/(\\d+)$/;\n    my ($n_numerator,\
    \ $n_denominator) = $n =~ /^(\\d+)\\/(\\d+)$/;\n    my $result = $x_numerator\
    \ * $n_numerator;\n    if ($result % $x_denominator == 0) {\n        return 1;\n\
    \    }\n    return \"\";\n}", "    my($xn) = simplify_fraction_product($x, $n);\n\
    \    $xn =~ s!^(\\d+)/1$!$1! or $xn = \"\";\n    return $xn;\n}", "    my($num,\
    \ $denom) = split '/', $x;\n    my($n_num, $n_denom) = split '/', $n;\n    return\
    \ 1 if $num * $n_denom == $denom * $n_num;\n    return '';\n}", "    # The two\
    \ fractions can be simplified to a common denominator\n    # to make the division.\n\
    \    my($a1, $b1) = split(/\\//, $x);\n    my($a2, $b2) = split(/\\//, $n);\n\
    \    my $x = $a1 / $b1;\n    my $n = $a2 / $b2;\n    return 1 if ($x * $n == int($x\
    \ * $n));\n    return 0;\n}", "    my ($x_numerator, $x_denominator) = split('/',\
    \ $x);\n    my ($n_numerator, $n_denominator) = split('/', $n);\n    return ($x_numerator\
    \ * $n_denominator == $x_denominator * $n_numerator)\n         ? 1\n         :\
    \ '';\n}", "    my($x_num, $x_den) = split /\\//, $x;\n    my($n_num, $n_den)\
    \ = split /\\//, $n;\n    $x_num *= $n_den;\n    $x_den *= $n_num;\n    my $simplified\
    \ = simplify_fraction($x_num, $x_den);\n    return $simplified;\n}", "    my($nx,\
    \ $nd) = split(/\\//, $x);\n    my($nn, $nd) = split(/\\//, $n);\n    return ($nx\
    \ * $nn) % $nd ? '' : 1;\n}", "    my($numer_x, $denom_x) = split /\\//, $x;\n\
    \    my($numer_n, $denom_n) = split /\\//, $n;\n    $denom_x *= $denom_n;\n  \
    \  $numer_x *= $numer_n;\n    if($numer_x % $denom_x == 0) {\n        return 1;\n\
    \    }\n    else {\n        return \"\";\n    }\n}", "    my($nx, $dx) = split\
    \ /\\//, $x;\n    my($nn, $dn) = split /\\//, $n;\n    my $res = $nx * $dn * $dx\
    \ * $nn;\n    if ($res == int($res)) {\n        return 1;\n    }\n    return '';\n\
    }", "    my($numerator_x, $denominator_x) = split(\"/\", $x);\n    my($numerator_n,\
    \ $denominator_n) = split(\"/\", $n);\n    my $numerator = $numerator_x * $numerator_n;\n\
    \    my $denominator = $denominator_x * $denominator_n;\n    return ($numerator\
    \ / $denominator) == int($numerator / $denominator) ? 1 : '';\n}", "    my($x_numerator,\
    \ $x_denominator) = split(/\\//, $x);\n    my($n_numerator, $n_denominator) =\
    \ split(/\\//, $n);\n    my $result = $x_numerator * $n_numerator / ($x_denominator\
    \ * $n_denominator);\n    print $result;\n    if ($result == int($result)) {\n\
    \        return 1;\n    } else {\n        return \"\";\n    }\n}", "    my($x_num,\
    \ $x_den) = split '/', $x;\n    my($n_num, $n_den) = split '/', $n;\n    my $result\
    \ = $x_num * $n_num / ($x_den * $n_den);\n    return $result =~ /^\\d+$/ ? 1 :\
    \ '';\n}", "    my ($xN, $xD) = split(/\\//, $x);\n    my ($nN, $nD) = split(/\\\
    //, $n);\n    my $result = $xN * $nN;\n    my $xND = $xD * $nD;\n    return \"\
    \" if $result % $xND != 0;\n    return 1;\n}", "    # Find common factors\n  \
    \  my($lcm, $gcd) = lcm($x, $n);\n    # Simplify numerator, if not whole, return\
    \ \"\"\n    if($lcm % $gcd == 0) {\n        return 1;\n    } else {\n        return\
    \ \"\";\n    }\n}", "    my ($numerator_x, $denominator_x) = split('/', $x);\n\
    \    my ($numerator_n, $denominator_n) = split('/', $n);\n    my $a = $numerator_x\
    \ * $denominator_n;\n    my $b = $denominator_x * $numerator_n;\n    if ($a %\
    \ $b == 0) {\n        return 1;\n    } else {\n        return '';\n    }\n}",
  "    my($xnum, $xden) = split(/\\//, $x);\n    my($nnum, $nden) = split(/\\//, $n);\n\
    \    my $prod = $xnum * $nnum;\n    my $den = $xden * $nden;\n    $prod % $den\
    \ ? '' : 1;\n}", "    my($x1, $x2) = split '/', $x;\n    my($n1, $n2) = split\
    \ '/', $n;\n    my $a = $x1 * $n2;\n    my $b = $x2 * $n1;\n    $a == $b ? 1 :\
    \ '';\n}", "    my ($x_num, $x_denom) = split('/', $x);\n    my ($n_num, $n_denom)\
    \ = split('/', $n);\n    my $num = $x_num * $n_num;\n    my $denom = $x_denom\
    \ * $n_denom;\n    my $res = $num / $denom;\n    $res =~ s/\\.0+$//;\n    my $ret\
    \ = $res =~ /^\\d+$/ ? 1 : '';\n    return $ret;\n}", "    my($xp, $xq) = ($x\
    \ =~ /(\\d+)\\/(\\d+)/);\n    my($np, $nq) = ($n =~ /(\\d+)\\/(\\d+)/);\n    my\
    \ $value = ($xp * $nq) * ($nq * $xq);\n    $value =~ /\\./ ? '' : '1';\n}", " \
    \   my($nx, $dnx) = split '/', $x;\n    my($nn, $dnn) = split '/', $n;\n    return\
    \ 1 if $nx * $dnn == $nn * $dnx;\n    return '';\n}", "    my($x_numerator, $x_denominator)\
    \ = split \"/\", $x;\n    my($n_numerator, $n_denominator) = split \"/\", $n;\n\
    \    my $result = $x_numerator * $n_numerator;\n    my $result_denominator = $x_denominator\
    \ * $n_denominator;\n    my $gcd = _gcd($result, $result_denominator);\n    $result\
    \ /= $gcd;\n    $result_denominator /= $gcd;\n    return $result_denominator ==\
    \ 1 ? 1 : \"\";\n}", "    my ($numerator1, $denominator1) = split('/', $x);\n\
    \    my ($numerator2, $denominator2) = split('/', $n);\n    my $mul = $numerator1\
    \ * $numerator2 / $denominator1 / $denominator2;\n    if ($mul =~ /^\\d+$/) {\n\
    \        return 1;\n    } else {\n        return \"\";\n    }\n}", "    my($nx,\
    \ $dx) = split('/', $x);\n    my($nn, $dn) = split('/', $n);\n    my $r = $nn\
    \ * $dx;\n    return ($r % $dn == 0) ? 1 : '';\n}", "    my ($numerator, $denominator)\
    \ = split(/\\//, $x);\n    my ($numerator_, $denominator_) = split(/\\//, $n);\n\
    \    my $answer = $numerator * $numerator_;\n    $answer =~ s/\\.0//;\n    $answer\
    \ =~ s/\\d$//;\n    return $answer;\n}", "    $x =~ /(\\d+)\\/(\\d+)/;\n    my\
    \ $numer = $1;\n    my $denom = $2;\n    my $numx = $numer * ($n =~ /(\\d+)\\\
    /(\\d+)/ ? $2 : $n);\n    my $denx = $denom * ($n =~ /(\\d+)\\/(\\d+)/ ? $1 :\
    \ 1);\n    return $numx % $denx == 0 ? 1 : \"\";\n}", "    my($numerator, $denominator)\
    \ = split(\"/\", $x);\n    my($numerator_n, $denominator_n) = split(\"/\", $n);\n\
    \    my $value = $numerator * $denominator_n;\n    my $value_n = $numerator_n\
    \ * $denominator;\n    if ($value % $denominator == 0) {\n\treturn 1;\n    }\n\
    \    else {\n\treturn \"\";\n    }\n}", "    my($a, $b) = split '/', $x;\n   \
    \ my($c, $d) = split '/', $n;\n    return $b * $c % $d ? '' : 1;\n}", "    my($a,\
    \ $b) = split(/\\//, $x);\n    my($c, $d) = split(/\\//, $n);\n    $a = eval($a);\n\
    \    $b = eval($b);\n    $c = eval($c);\n    $d = eval($d);\n    my $num = $a\
    \ * $d;\n    my $den = $b * $c;\n    my $val = $num / $den;\n    my $int = int($val);\n\
    \    return $val == $int ? 1 : \"\";\n}", "    my ($n1, $d1) = split /\\//, $x;\n\
    \    my ($n2, $d2) = split /\\//, $n;\n    my $num = $n1 * $n2;\n    my $den =\
    \ $d1 * $d2;\n    my $gcd = gcd($num, $den);\n    $num /= $gcd;\n    $den /= $gcd;\n\
    \    $num % $den == 0 ? 1 : '';\n}", "    my($xn) = multiply($x, $n);\n    my($f)\
    \ = $xn =~ /(?<=^\\d+)\\/(?=\\d+$)/;\n    return $f ? \"\" : 1;\n}", "    my($x_num,\
    \ $x_den) = $x =~ /(\\d+)\\/(\\d+)/;\n    my($n_num, $n_den) = $n =~ /(\\d+)\\\
    /(\\d+)/;\n    my $result = $x_num * $n_num / ($x_den * $n_den);\n    return $result\
    \ == int($result) ? 1 : '';\n}", "    my($numerator_x, $denominator_x) = $x =~\
    \ /(\\d+)\\/(\\d+)/;\n    my($numerator_n, $denominator_n) = $n =~ /(\\d+)\\/(\\\
    d+)/;\n    return 1 if($numerator_x * $denominator_n % $denominator_x == 0 &&\n\
    \                $numerator_n * $denominator_x % $denominator_n == 0);\n    return\
    \ '';\n}", "    return \"\" if($x =~ /^\\d+$/ || $n =~ /^\\d+$/);\n    my($a,\
    \ $b) = split('/', $x);\n    my($c, $d) = split('/', $n);\n    my $k = $a * $d\
    \ * $c;\n    return $k % $b ? \"\" : 1;\n}", "    my ($a, $b) = split(/\\//, $x);\n\
    \    my ($c, $d) = split(/\\//, $n);\n    my $result = $a*$d - $b*$c;\n    return\
    \ ($result == 0) ? 1 : '';\n}", "    my($x_num, $x_den) = split('/', $x);\n  \
    \  my($n_num, $n_den) = split('/', $n);\n    return 1 if $x_num * $n_den == $x_den\
    \ * $n_num;\n    return '';\n}", "    # Your code goes here...\n    my($xn_num,\
    \ $xn_denom) = simplify_mul($x, $n);\n    return $xn_num % $xn_denom == 0 ? 1\
    \ : '';\n}", "    my($numerator, $denominator) = split /\\//, $x;\n    my($multiplier,\
    \ $multiplicand) = split /\\//, $n;\n    my $result = $numerator * $multiplier;\n\
    \    return 1 if $result % $denominator == 0 && $result % $multiplicand == 0;\n\
    \    return \"\";\n}", "    my ($xn, $xd) = split(m!/!, $x);\n    my ($nn, $nd)\
    \ = split(m!/!, $n);\n    my $remainder = $xn * $nd % $xd;\n    $remainder and\
    \ return '';\n    $xn * $nd / $xd;\n}", "    my($xN, $xD) = split(\"/\", $x);\n\
    \    my($nN, $nD) = split(\"/\", $n);\n    my $divide = 1;\n    my $multiply =\
    \ 1;\n    while($divide != 0 || $multiply != 0) {\n\t$divide = $xN % $nN;\n\t\
    $multiply = $xD % $nD;\n\t$xN = $xN / $nN;\n\t$xD = $xD / $nD;\n    }\n    if($xN\
    \ == $xD) {\n\treturn 1;\n    }\n    else {\n\treturn '';\n    }\n}", "    my\
    \ ($x_numerator, $x_denominator) = split /\\//, $x;\n    my ($n_numerator, $n_denominator)\
    \ = split /\\//, $n;\n    return 1 if $x_numerator * $n_denominator * $x_denominator\
    \ * $n_numerator == 1;\n    return \"\";\n}", "    my ($x_num, $x_den) = split(/\\\
    //, $x);\n    my ($n_num, $n_den) = split(/\\//, $n);\n    my $num = $x_num *\
    \ $n_num;\n    my $den = $x_den * $n_den;\n    my $gcd = gcd($num, $den);\n  \
    \  my $simplified = \"$num/$den\";\n    return ($num/$gcd eq $den/$gcd)? 1 : \"\
    \";\n}", "    my($xnumer, $xdenom) = split '/', $x;\n    my($nnumer, $ndenom)\
    \ = split '/', $n;\n    my $xnval = $xnumer * $ndenom;\n    return 1 if $xnval\
    \ % $xdenom == 0;\n    return '';\n}", "    my($x1, $x2) = split('/', $x);\n \
    \   my($n1, $n2) = split('/', $n);\n    my $i = $x1 * $n2;\n    my $j = $x2 *\
    \ $n1;\n    if ($i == $j) {\n        return 1;\n    } else {\n        return \"\
    \";\n    }\n}", "    return \"\" if $x eq '0/1';", "    my($a, $b) = split(/\\\
    //, $x);\n    my($c, $d) = split(/\\//, $n);\n    if (($a * $d) % ($b * $c) ==\
    \ 0) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}", "  \
    \  my($numerator, $denominator) = split(/\\//, $x);\n    my($n_numerator, $n_denominator)\
    \ = split(/\\//, $n);\n    if($numerator * $n_denominator % $denominator * $n_numerator\
    \ == 0) {\n        return \"1\";\n    }\n    return \"\";\n}", "    my($xnum,\
    \ $xden) = split(/\\//, $x);\n    my($nnum, $nden) = split(/\\//, $n);\n    my\
    \ $result = $xnum * $nnum;\n    $result = $result % $xden;\n    return $result\
    \ == 0 ? 1 : '';\n}", "    my($num1, $den1) = split \"/\", $x;\n    my($num2,\
    \ $den2) = split \"/\", $n;\n    my $result = $num1 * $num2 / $den1 / $den2;\n\
    \    if ($result =~ /(\\d+)\\.0/) {\n        return 1;\n    } else {\n       \
    \ return \"\";\n    }\n}", "    my($x_numerator, $x_denominator) = split(m#/#,\
    \ $x);\n    my($n_numerator, $n_denominator) = split(m#/#, $n);\n    return ''\
    \ if ($x_numerator * $n_denominator) % ($x_denominator * $n_numerator);\n    return\
    \ 1;\n}", "    return '' if $x eq $n;\n    my($x_num, $x_den) = split(/\\//, $x);\n\
    \    my($n_num, $n_den) = split(/\\//, $n);\n    return 1 if $x_num * $n_den ==\
    \ $x_den * $n_num;\n    return '';\n}", "    my($x_num, $x_denom) = split('/',\
    \ $x);\n    my($n_num, $n_denom) = split('/', $n);\n    return 1 if ! $x_denom\
    \ && $n_denom;\n    return 1 if ! $x_num && $n_num;\n    return 1 if ! $x_num\
    \ && ! $n_num;\n    return 1 if $x_num == $n_num && $x_denom == $n_denom;\n  \
    \  return 1 if $x_num == $n_denom && $x_denom == $n_num;\n    return 1 if $x_num\
    \ * $n_denom == $x_denom * $n_num;\n    return '';\n}", "    my $m = multiply($x,\
    \ $n);\n    return is_integer($m) ? 1 : \"\";\n}", "    my($xnum, $xden) = split\
    \ /\\//, $x;\n    my($nnum, $nden) = split /\\//, $n;\n    my $ans = $xnum * $nden\
    \ * $xden * $nnum;\n    $ans =~ /\\D/ ? \"\" : 1;\n}", "    my ($xd, $xn) = split\
    \ /\\//, $x;\n    my ($nd, $nn) = split /\\//, $n;\n    return $xd*$nn == $xn*$nd\
    \ ? 1 : '';\n}", "    my $val = \"\";\n    my ($numerator, $denominator) = split(/\\\
    //, $x);\n    my ($inumerator, $idenominator) = split(/\\//, $n);\n    if($denominator\
    \ == $idenominator) {\n        $val = $numerator * $inumerator;\n    } else {\n\
    \        $val = $numerator * $idenominator;\n        $val = $val / $denominator;\n\
    \    }\n    if($val != int($val)) {\n        return \"\";\n    } else {\n    \
    \    return 1;\n    }\n}", "    my $a = eval($x);\n    my $b = eval($n);\n   \
    \ my $c = $a * $b;\n    $c == int($c) ? 1 : '';\n}", "    my($x_num, $x_denom)\
    \ = split(/\\//, $x);\n    my($n_num, $n_denom) = split(/\\//, $n);\n    my $res\
    \ = ($x_num * $n_num) / ($x_denom * $n_denom);\n    ($res == int($res)) ? 1 :\
    \ \"\";\n}", "    my($x_num, $x_denom) = split('/', $x);\n    my($n_num, $n_denom)\
    \ = split('/', $n);\n    my $result = ($x_num * $n_num) / ($x_denom * $n_denom);\n\
    \    return ($result == int($result)) ? 1 : \"\";\n}", "    my($x_num, $x_den)\
    \ = split('/', $x);\n    my($n_num, $n_den) = split('/', $n);\n    return '' if\
    \ $x_num * $n_den != $n_num * $x_den;\n    return 1;\n}", "    my($x_num, $x_denom)\
    \ = split /\\//, $x;\n    my($n_num, $n_denom) = split /\\//, $n;\n    $x_num\
    \ *= $n_denom;\n    $x_denom *= $n_num;\n    if ($x_num % $x_denom == 0) {\n \
    \       return 1;\n    } else {\n        return \"\";\n    }\n}", "    my($numerator_x,\
    \ $denominator_x) = split(/\\//, $x);\n    my($numerator_n, $denominator_n) =\
    \ split(/\\//, $n);\n    $denominator_x *= $denominator_n;\n    $numerator_x *=\
    \ $numerator_n;\n    if(($numerator_x % $denominator_x) == 0) {\n        return\
    \ 1;\n    }\n    return \"\";\n}", "    my($x_numerator, $x_denominator) = split\
    \ /\\//, $x;\n    my($n_numerator, $n_denominator) = split /\\//, $n;\n    my\
    \ $numerator = $x_numerator * $n_numerator;\n    my $denominator = $x_denominator\
    \ * $n_denominator;\n    if ($numerator % $denominator == 0) {\n        return\
    \ 1;\n    }\n    else {\n        return \"\";\n    }\n}", "    if ($x =~ /^(\\\
    d+)\\/(\\d+)$/ && $n =~ /^(\\d+)\\/(\\d+)$/) {\n        my $dx = $1;\n       \
    \ my $dy = $2;\n        my $nx = $3;\n        my $ny = $4;\n        if (($dx *\
    \ $ny) % ($dy * $nx) == 0) {\n            return 1;\n        }\n    }\n    return\
    \ \"\";\n}", "    my($numerator_x, $denominator_x) = split /\\//, $x;\n    my($numerator_n,\
    \ $denominator_n) = split /\\//, $n;\n    return ($numerator_x * $denominator_n)\
    \ % ($denominator_x * $numerator_n) == 0 ? 1 : \"\";\n}", "    my($x_num, $x_denom)\
    \ = split '/', $x;\n    my($n_num, $n_denom) = split '/', $n;\n    my $x_num_n\
    \ = $x_num * $n_num;\n    my $x_denom_n = $x_denom * $n_denom;\n    if ($x_num_n\
    \ % $x_denom_n == 0) {\n        return 1;\n    }\n    else {\n        return '';\n\
    \    }\n}", "    my ($num1, $den1) = split(m{/}, $x);\n    my ($num2, $den2) =\
    \ split(m{/}, $n);\n    my $result = $num1 * $num2;\n    my $over = $den1 * $den2;\n\
    \    my $is_int = $result % $over == 0;\n    return $is_int ? 1 : \"\";\n}", " \
    \   my($a, $b) = split('/', $x);\n    my($c, $d) = split('/', $n);\n    return\
    \ ($a*$d) % ($b*$c) == 0 ? 1 : '';\n}", "    my($x_numerator, $x_denominator)\
    \ = split('/', $x);\n    my($n_numerator, $n_denominator) = split('/', $n);\n\
    \    $x_numerator *= $n_denominator;\n    $x_denominator *= $n_numerator;\n  \
    \  my $gcd = &gcd($x_numerator, $x_denominator);\n    $x_numerator /= $gcd;\n\
    \    $x_denominator /= $gcd;\n    if ($x_numerator % $x_denominator == 0) {\n\
    \        return 1;\n    } else {\n        return '';\n    }\n}", "    # Simplify\
    \ x and n\n    return 1 if eval{ $x * $n } == int eval{ $x * $n };\n    return;\n\
    }", "    my($x_num, $x_denom) = split /\\//, $x;\n    my($n_num, $n_denom) = split\
    \ /\\//, $n;\n    my $num = $x_num * $n_num;\n    my $denom = $x_denom * $n_denom;\n\
    \    my $gcd = gcd($num, $denom);\n    if ($gcd == 1) {\n        return '';\n\
    \    }\n    return 1;\n}", "    my($fx, $fy) = split('/', $x);\n    my($nx, $ny)\
    \ = split('/', $n);\n    my $rx = $fx / $fy;\n    my $rn = $nx / $ny;\n    if($rx\
    \ * $rn == int($rx * $rn)) {\n        return 1;\n    }\n    return '';\n}", " \
    \   my($numerator, $denominator) = split /\\//, $x;\n    my($factor) = $numerator\
    \ * $n;\n    my($res) = $factor % $denominator;\n    $res == 0 ? 1 : '';\n}",
  "    my($numerator, $denominator) = split('/', $x);\n    my($Numerator, $Denominator)\
    \ = split('/', $n);\n    my $numerator2 = $numerator * $Denominator;\n    my $denominator2\
    \ = $denominator * $Numerator;\n    return $numerator2 % $denominator2 == 0 ?\
    \ 1 : '';\n}", "    my($num1, $den1) = split(/\\//, $x);\n    my($num2, $den2)\
    \ = split(/\\//, $n);\n    my $res = $num1 * $num2;\n    if ($res % $den1 == 0)\
    \ {\n        return 1;\n    }\n    return \"\";\n}", "    my($xn) = multiply($x,\
    \ $n);\n    my($lcm) = lcm(denominator($x), denominator($n));\n    my($xln) =\
    \ multiply($xn, \"$lcm/1\");\n    if ($xln eq \"$xn\" * $lcm) {\n        return\
    \ 1;\n    } else {\n        return \"\";\n    }\n}", "    my $numerator = reduce($x)\
    \ * reduce($n);\n    my $denominator = reduce($x);\n    return \"\" if $numerator%$denominator;\n\
    \    1;\n}", "    my($x_num, $x_den) = split(/\\//, $x);\n    my($n_num, $n_den)\
    \ = split(/\\//, $n);\n    my $i = $x_num * $n_den;\n    my $j = $x_den * $n_num;\n\
    \    ($i == $j) ? 1 : '';\n}", "    my($numerator1, $denominator1) = split \"\
    /\", $x;\n    my($numerator2, $denominator2) = split \"/\", $n;\n    my $result\
    \ = $numerator1 * $numerator2 / $denominator1 / $denominator2;\n    return \"\
    1\" if ($result == int($result));\n    return \"\";\n}", "    my($x_num, $x_den)\
    \ = $x =~ /(\\d+)\\/(\\d+)/;\n    my($n_num, $n_den) = $n =~ /(\\d+)\\/(\\d+)/;\n\
    \    my $res = $x_num * $n_num;\n    if ($res % $x_den == 0) {\n        return\
    \ 1;\n    }\n    return '';\n}", "    my($xn, $xnn) = split(m!/!, $x);\n    my($nn,\
    \ $nnn) = split(m!/!, $n);\n    return $xn * $nnn == $xnn * $nn;\n}", "    my($x_num,\
    \ $x_den) = split '/', $x;\n    my($n_num, $n_den) = split '/', $n;\n    my $num\
    \ = $x_num * $n_num;\n    my $den = $x_den * $n_den;\n    for my $i (2..$den)\
    \ {\n        if ($num % $i == 0 && $den % $i == 0) {\n            $num /= $i;\n\
    \            $den /= $i;\n            $i = 2;\n        }\n    }\n    $num == $den\
    \ ? 1 : '';\n}", "    my ($xnum, $xden) = split /\\//, $x;\n    my ($nnum, $nden)\
    \ = split /\\//, $n;\n    my $value = $xnum * $nden * $nnum * $xden;\n    return\
    \ $value % $xden == 0 ? 1 : \"\";\n}", "    $x =~ s!^(\\d+)/(\\d+)$!$1/$2! or\
    \ die \"x not a fraction\";\n    $n =~ s!^(\\d+)/(\\d+)$!$1/$2! or die \"n not\
    \ a fraction\";\n    my $result = $x * $n;\n    $result =~ s!^(\\d+)/(\\d+)$!$1/$2!\
    \ or die \"x*n not a fraction\";\n    return 1 if $result =~ m!^(\\d+)/1$!;\n\
    \    return '';\n}", "    my ($xn, $xd) = split \"/\", $x;\n    my ($nn, $nd)\
    \ = split \"/\", $n;\n    return is_integer($xn*$nn, $xd*$nd) ? 1 : \"\";\n}",
  "    my($x_numerator, $x_denominator) = split \"/\", $x;\n    my($n_numerator, $n_denominator)\
    \ = split \"/\", $n;\n    my $fraction = \"$x_numerator * $n_denominator\";\n\
    \    my $product = eval($fraction);\n    return $product % $x_denominator == 0\
    \ ? 1 : \"\";\n}", "    my($x_num, $x_denom) = split('/', $x);\n    my($n_num,\
    \ $n_denom) = split('/', $n);\n    return eval $x_num * $n_num / $x_denom / $n_denom\
    \ == int($x_num * $n_num / $x_denom / $n_denom) ? 1 : '';\n}", "    my($xN, $xD)\
    \ = split(/\\//, $x);\n    my($nN, $nD) = split(/\\//, $n);\n    return ($xN *\
    \ $nD) % ($xD * $nN) == 0 ? 1 : '';\n}", "    my $val = \"$x\" * \"$n\";\n   \
    \ $val =~ s/[+\\-]//;\n    my($num, $den) = split '/', $val;\n    my $gcd = gcd($num,\
    \ $den);\n    $num /= $gcd;\n    $den /= $gcd;\n    return $num == $den ? 1 :\
    \ \"\";\n}", "    my ($num_x, $den_x) = split('/', $x);\n    my ($num_n, $den_n)\
    \ = split('/', $n);\n    my $result = $num_x * $num_n;\n    my $den_result = $den_x\
    \ * $den_n;\n    if ($result % $den_result == 0) {\n        return 1;\n    } else\
    \ {\n        return \"\";\n    }\n}", "    my($numerator_x, $denominator_x) =\
    \ split /\\//, $x;\n    my($numerator_n, $denominator_n) = split /\\//, $n;\n\
    \    my $lcm = get_lcm($denominator_x, $denominator_n);\n    my $x_result = $lcm\
    \ / $denominator_x * $numerator_x;\n    my $n_result = $lcm / $denominator_n *\
    \ $numerator_n;\n    if ($x_result == $n_result) {\n        return 1;\n    } else\
    \ {\n        return \"\";\n    }\n}", "    my $exp = multiply($x, $n);\n    my($top,\
    \ $bottom) = split('/', $exp);\n    #debug \"exp=$exp\";\n    #debug \"top=$top\"\
    ;\n    #debug \"bottom=$bottom\";\n    return isWholeNumber($top, $bottom) ? 1\
    \ : \"\";\n}", "    my($x_num, $x_den) = split(\"/\", $x);\n    my($n_num, $n_den)\
    \ = split(\"/\", $n);\n    my $x_simplified = $x_num * $n_den;\n    my $n_simplified\
    \ = $n_num * $x_den;\n    return $x_simplified == $n_simplified ? 1 : \"\";\n}",
  "    my($x_num, $x_denom) = split(/\\//, $x);\n    my($n_num, $n_denom) = split(/\\\
    //, $n);\n    if ($x_num * $n_denom % $x_denom == 0 && $x_num * $n_denom / $x_denom\
    \ == $n_num) {\n        return 1;\n    }\n    return '';\n}", "    my($nx, $dx)\
    \ = split '/', $x;\n    my($nn, $dn) = split '/', $n;\n    my $result = $nx *\
    \ $dn * $dx * $nn;\n    $result % ($dn * $dx) == 0 ? 1 : '';\n}", "    my($x_numerator,\
    \ $x_denominator) = split(/\\//, $x);\n    my($n_numerator, $n_denominator) =\
    \ split(/\\//, $n);\n    my $result = $x_numerator * $n_numerator;\n    if ($result\
    \ % $x_denominator == 0) {\n        return 1;\n    }\n    return \"\";\n}", " \
    \   my($numerator_x, $denominator_x) = split(/\\//, $x);\n    my($numerator_n,\
    \ $denominator_n) = split(/\\//, $n);\n    my $num = $numerator_x * $denominator_n;\n\
    \    my $den = $denominator_x * $numerator_n;\n    if ($num % $den == 0) {\n \
    \       return 1;\n    } else {\n        return \"\";\n    }\n}", "    my($a,\
    \ $b) = split /\\//, $x;\n    my($c, $d) = split /\\//, $n;\n    my $f = $a *\
    \ $d;\n    my $g = $b * $c;\n    return $f % $g ? \"\" : 1;\n}\nsay simplify(\"\
    1/5\", \"5/1\");\nsay simplify(\"1/6\", \"2/1\");\nsay simplify(\"7/10\", \"10/2\"\
    );\nsay simplify(\"7/10\", \"1/10\");", "    my($num1, $den1) = split(/\\//, $x);\n\
    \    my($num2, $den2) = split(/\\//, $n);\n    return ($num1 * $den2) % ($den1\
    \ * $num2) == 0 ? 1 : \"\";\n}", "    my $n1 = Math::BigFloat->new($x);\n    my\
    \ $n2 = Math::BigFloat->new($n);\n    my $n3 = $n1->bmul($n2);\n    return $n3->is_int()\
    \ ? 1 : '';\n}", "    my($numerator1, $denominator1) = split(/\\//, $x);\n   \
    \ my($numerator2, $denominator2) = split(/\\//, $n);\n    my $result = $numerator1\
    \ * $numerator2;\n    my $denominator = $denominator1 * $denominator2;\n    if\
    \ ($result % $denominator == 0) {\n        return 1;\n    } else {\n        return\
    \ \"\";\n    }\n}", "    my($x_num, $x_denom) = split('/', $x);\n    my($n_num,\
    \ $n_denom) = split('/', $n);\n    # print \"$x_num $x_denom $n_num $n_denom\\\
    n\";\n    my $result = $x_num * $n_num;\n    my $result2 = $x_denom * $n_denom;\n\
    \    # print \"$result $result2\\n\";\n    return ($result % $result2) ? '' :\
    \ 1;\n}", "    my($xn, $numer, $denom) = split(/\\//, $x);\n    my($nn, $numer2,\
    \ $denom2) = split(/\\//, $n);\n    $xn = $xn * $nn;\n    $denom = $denom * $denom2;\n\
    \    my $result = $xn/$denom;\n    if($result =~ /\\d+\\.0+/) {\n        return\
    \ 1;\n    }\n    else {\n        return \"\";\n    }\n}", "    my $result = 1;\n\
    \    my ($frac1, $frac2) = (split(\"/\", $x), split(\"/\", $n));\n    my $product\
    \ = $frac1 * $frac2;\n    foreach my $x (split(\"/\", $product)) {\n        $result\
    \ *= $x;\n    }\n    $result % 2 == 0 ? \"\" : 1;\n}", "    my($numerator, $denominator)\
    \ = $x =~ /(\\d+)\\/(\\d+)/;\n    my($numerator1, $denominator1) = $n =~ /(\\\
    d+)\\/(\\d+)/;\n    my $res = ($numerator * $denominator1);\n    return ($res\
    \ % $denominator == 0) ? 1 : '';\n}", "    my($nx, $dx) = split /\\//, $x;\n \
    \   my($nn, $dn) = split /\\//, $n;\n    ($nx * $dn) % ($dx * $nn) ? \"\" : 1;\n\
    }", "    my($a, $b) = split /\\//, $x;\n    my($c, $d) = split /\\//, $n;\n  \
    \  my $gcd = gcd($b, $d);\n    if ($a * $d / $gcd == $c * $b / $gcd) {\n     \
    \   return 1;\n    }\n    return \"\";\n}", "    #convert them to integers\n \
    \   my ($xnum, $xdenom) = split /\\//, $x;\n    my ($nnum, $ndenom) = split /\\\
    //, $n;\n    my $result = $xnum * $nnum;\n    return $result % $xdenom ? \"\"\
    \ : 1;\n}", "    my $ret;\n    my($nx, $dx) = split('/', $x);\n    my($nn, $dn)\
    \ = split('/', $n);\n    my $result = ($nx*$dn*$nn*$dx) % $dx;\n    if($result\
    \ == 0) {\n        $ret = 1;\n    } else {\n        $ret = '';\n    }\n    return\
    \ $ret;\n}", "    my($x_num, $x_den) = split('/', $x);\n    my($n_num, $n_den)\
    \ = split('/', $n);\n    my $result = $x_num * $n_num . \"/\" . $x_den * $n_den;\n\
    \    return 1 if (($x_num * $n_num) % ($x_den * $n_den) == 0);\n    return \"\"\
    ;\n}", "    my $result = eval {\n        local $SIG{__WARN__} = sub { die @_ };\n\
    \        # Here we use the Fraction module to perform the calculation.\n     \
    \   # This is a Perl tool that transforms strings into rational numbers\n    \
    \    # before performing the actual math.  This way we can avoid\n        # evaluating\
    \ something like \"1/3\" * \"4/3\" as \"1/4\" * \"4/3\"\n        # and getting\
    \ the incorrect answer \"1/6\".\n        my $product = Math::Fraction->new($x)\
    \ * Math::Fraction->new($n);\n        $product->is_integer() ? 1 : '';\n    };\n\
    \    # In the case of a warning, return the empty string.\n    $result = '' if\
    \ $@;\n    return $result;\n}", "    my($xnumer, $xdenom) = split '/', $x;\n \
    \   my($nnumer, $ndenom) = split '/', $n;\n    my $xmult = $xnumer * $ndenom;\n\
    \    my $nmult = $nnumer * $xdenom;\n    if ($xmult == $nmult) {\n        return\
    \ 1;\n    } else {\n        return \"\";\n    }\n}", "    my($x_num, $x_den) =\
    \ split(\"/\", $x);\n    my($n_num, $n_den) = split(\"/\", $n);\n    my $temp\
    \ = $x_num * $n_den;\n    return $temp % $x_den == 0 ? 1 : \"\";\n}", "    my($x1,\
    \ $x2) = split /\\//, $x;\n    my($n1, $n2) = split /\\//, $n;\n    my $xn = $x1\
    \ * $n2;\n    my $nx = $n1 * $x2;\n    return ($xn % $x2) == 0 ? 1 : \"\";\n}",
  "    my($num1, $den1) = split \"/\", $x;\n    my($num2, $den2) = split \"/\", $n;\n\
    \    my $result_num = $num1 * $num2;\n    my $result_den = $den1 * $den2;\n  \
    \  if ($result_num % $result_den == 0) {\n        return 1;\n    } else {\n  \
    \      return \"\";\n    }\n}", "    my($x_num, $x_den) = split('/', $x);\n  \
    \  my($n_num, $n_den) = split('/', $n);\n    return \"\" if $x_num == 0 || $n_num\
    \ == 0;\n    return 1 if ($x_num * $n_den) % ($x_den * $n_num) == 0;\n    return\
    \ \"\";\n}", "    my($numerator, $denominator) = split('/', $x);\n    my($mul,\
    \ $unit) = split('/', $n);\n    my $val = $numerator * $mul;\n    return $val\
    \ % $denominator == 0 ? 1 : '';\n}", "    my($xnumer, $xdenom) = split /\\//,\
    \ $x;\n    my($nnumer, $ndenom) = split /\\//, $n;\n    $xnumer *= $ndenom;\n\
    \    $xdenom *= $nnumer;\n    $xnumer * $xdenom < 0 ? $xnumer *= -1, $xdenom *=\
    \ -1 : 0;\n    return $xnumer % $xdenom ? \"\" : 1;\n}", "    my($x_numerator,\
    \ $x_denominator) = split \"/\", $x;\n    my($n_numerator, $n_denominator) = split\
    \ \"/\", $n;\n    my $simplified_numerator = $x_numerator * $n_numerator;\n  \
    \  my $simplified_denominator = $x_denominator * $n_denominator;\n    return ($simplified_numerator\
    \ % $simplified_denominator) ? \"\" : 1;\n}", "    my ($Xn, $Xd) = split(m|/|,\
    \ $x);\n    my ($Nn, $Nd) = split(m|/|, $n);\n    return \"\" if ($Xn * $Nd ==\
    \ $Xd * $Nn) ? \"\" : 1;\n}", "    return 1 if $x * $n =~ /^\\d+$/;\n    return;\n\
    }", "    my ($x1, $x2) = split('/', $x);\n    my ($n1, $n2) = split('/', $n);\n\
    \    if (($x1 * $n2) % ($x2 * $n1) == 0) {\n        return 1;\n    } else {\n\
    \        return \"\";\n    }\n}", "    if (not (($x =~ /^\\d+\\/\\d+$/) and ($n\
    \ =~ /^\\d+\\/\\d+$/))) {\n        return \"\";\n    }\n    my @x = split '/',\
    \ $x;\n    my @n = split '/', $n;\n    return ($x[0] * $n[1]) % ($x[1] * $n[0])\
    \ == 0 ? 1 : \"\";\n}", "    my($nx, $dx) = split(/\\//, $x);\n    my($nn, $dn)\
    \ = split(/\\//, $n);\n    my $r = $nx * $dn * $nn;\n    return $r % $dx == 0\
    \ ? 1 : 0;\n}", "    my($x_num, $x_den) = split('/', $x);\n    my($n_num, $n_den)\
    \ = split('/', $n);\n    return ($x_num * $n_den) % ($x_den * $n_num) ? '' : 1;\n\
    }", "    my($xnum, $xden) = split '/', $x;\n    my($nnum, $nden) = split '/',\
    \ $n;\n    my $tmp = $xnum * $nden;\n    return $tmp % $xden == 0;\n}", "    my($x_numerator,\
    \ $x_denominator) = split '/', $x;\n    my($n_numerator, $n_denominator) = split\
    \ '/', $n;\n    my $result = $x_numerator * $n_numerator;\n    my $left_over =\
    \ $result % $x_denominator;\n    return 1 if $left_over == 0;\n    return '';\n\
    }", "    my($a, $b) = split(/\\//, $x);\n    my($c, $d) = split(/\\//, $n);\n\
    \    my $s = $a * $d;\n    my $t = $b * $c;\n    my $q = $s - $t;\n    if ($q\
    \ % $b == 0) {\n        return 1;\n    } else {\n        return '';\n    }\n}",
  "    my($x_numerator, $x_denominator) = split '/', $x;\n    my($n_numerator, $n_denominator)\
    \ = split '/', $n;\n    if ($x_numerator * $n_denominator == $x_denominator *\
    \ $n_numerator) {\n        return 1;\n    }\n    return '';\n}", "    my ($numerator,\
    \ $denominator) = split(/\\//, $x);\n    my ($numerator_n, $denominator_n) = split(/\\\
    //, $n);\n    my $gcd = gcd($denominator, $denominator_n);\n    $gcd = gcd($gcd,\
    \ $numerator_n);\n    $gcd = gcd($gcd, $numerator);\n    my $remainder = $numerator\
    \ * $denominator_n * $denominator * $denominator_n;\n    return ($remainder %\
    \ $gcd) ? '' : 1;\n}", "    my($x_denominator, $x_numerator) = split(/\\//, $x);\n\
    \    my($n_denominator, $n_numerator) = split(/\\//, $n);\n    my $gcd = gcd($x_denominator,\
    \ $n_denominator);\n    return gcd($x_numerator * $n_denominator, $n_numerator\
    \ * $x_denominator) == 1 ? 1 : '';\n}", "    my($num, $denom) = split('/', $x);\n\
    \    my($numer, $denomer) = split('/', $n);\n    my $pr1 = $num * $denomer;\n\
    \    my $pr2 = $numer * $denom;\n    return $pr1 % $pr2 == 0 ? 1 : \"\";\n}",
  "    my($x_num, $x_den) = $x =~ /^(\\d+)\\/(\\d+)$/;\n    my($n_num, $n_den) = $n\
    \ =~ /^(\\d+)\\/(\\d+)$/;\n    my $result = $x_num * $n_num;\n    my $denom =\
    \ $x_den * $n_den;\n    return 1 if ($result % $denom == 0);\n    return \"\"\
    ;\n}", "    my($numerator, $denominator) = split '/', $x;\n    my($n_numerator,\
    \ $n_denominator) = split '/', $n;\n    return !(($numerator * $n_denominator)\
    \ % ($denominator * $n_numerator));\n}", "    my($numerator, $denominator) = split('/',\
    \ $x);\n    my($n_numerator, $n_denominator) = split('/', $n);\n    return 1 if\
    \ $numerator * $n_denominator % $denominator * $n_numerator == 0;\n    return\
    \ '';\n}", "    my($fraction, $denominator) = split(/\\//, $x);\n    my($fraction_n,\
    \ $denominator_n) = split(/\\//, $n);\n    my $result = $fraction * $fraction_n;\n\
    \    if ($result % $denominator == 0 && $result % $denominator_n == 0) {\n   \
    \     return 1;\n    }\n    return \"\";\n}", "    if (is_int(to_decimal($x) *\
    \ to_decimal($n))) {\n        return 1;\n    }\n    return \"\";\n}", "    my($x_numerator,\
    \ $x_denominator) = split('/', $x);\n    my($n_numerator, $n_denominator) = split('/',\
    \ $n);\n    my $result = $x_numerator * $n_numerator;\n    $result =~ s/\\.0//;\n\
    \    return $result;\n}", "    my($x_numerator, $x_denominator) = split(/\\//,\
    \ $x);\n    my($n_numerator, $n_denominator) = split(/\\//, $n);\n    my $x_n\
    \ = $x_numerator / $x_denominator;\n    my $n_n = $n_numerator / $n_denominator;\n\
    \    return $x_n * $n_n =~ /\\.0$/ ? 1 : \"\";\n}", "    my($xNumerator, $xDenominator)\
    \ = split(/\\//, $x);\n    my($nNumerator, $nDenominator) = split(/\\//, $n);\n\
    \    return unless $xNumerator && $xDenominator && $nNumerator && $nDenominator;\n\
    \    my $target = ($xNumerator * $nNumerator) / ($xDenominator * $nDenominator);\n\
    \    $target == int($target) ? 1 : '';\n}", "    my($a, $b) = split '/', $x;\n\
    \    my($c, $d) = split '/', $n;\n    return $a * $d == $b * $c ? 1 : '';\n}",
  "    my($xn, $n_denom, $x_denom) = ((split('/', $x))[0] * (split('/', $n))[0], (split('/',\
    \ $n))[1], (split('/', $x))[1]);\n    return $xn % $n_denom == 0 && $xn % $x_denom\
    \ == 0 ? 1 : '';\n}", "    my($numerator_x, $denominator_x) = split(/\\//, $x);\n\
    \    my($numerator_n, $denominator_n) = split(/\\//, $n);\n    if(($numerator_x\
    \ * $denominator_n) % ($denominator_x * $numerator_n) == 0) {\n        return\
    \ 1;\n    }\n    else {\n        return \"\";\n    }\n}", "    my($num, $denom)\
    \ = split /\\//, $x;\n    my($num2, $denom2) = split /\\//, $n;\n    my $numerator\
    \ = $num * $denom2;\n    my $denominator = $denom * $num2;\n    ($numerator %\
    \ $denominator) ? '' : 1;\n}", "    my($x_numerator, $x_denominator) = split('/',\
    \ $x);\n    my($n_numerator, $n_denominator) = split('/', $n);\n    my $prod =\
    \ $x_numerator * $n_numerator;\n    my $denom = $x_denominator * $n_denominator;\n\
    \    return $prod % $denom ? '' : 1;\n}", "    my($nx, $dx) = split /\\//, $x;\n\
    \    my($nn, $dn) = split /\\//, $n;\n    return ($dx * $dn) % ($nx * $nn) ? \"\
    \" : 1;\n}", "    my($numerator, $denominator) = $x =~ /(\\d+)\\/(\\d+)/;\n  \
    \  return is_whole($numerator * ($numerator/$denominator));\n}", "    my($num_x,\
    \ $den_x) = $x =~ /(\\d+)\\/(\\d+)/;\n    my($num_n, $den_n) = $n =~ /(\\d+)\\\
    /(\\d+)/;\n    my $result = $num_x * $num_n;\n    $result %= $den_x * $den_n;\n\
    \    return $result ? '' : 1;\n}", "    my($x_num, $x_den) = split '/', $x;\n\
    \    my($n_num, $n_den) = split '/', $n;\n    if ($x_num * $n_den % $x_den ==\
    \ 0) {\n        return 1;\n    }\n    return \"\";\n}", "    return \"\" if not\
    \ $x =~ /^(\\d+)\\/(\\d+)$/;\n    my($nx, $dx) = ($1, $2);\n    return \"\" if\
    \ not $n =~ /^(\\d+)\\/(\\d+)$/;\n    my($nn, $dn) = ($1, $2);\n    my $pn = $nx\
    \ * $dn;\n    my $px = $nn * $dx;\n    my $p = $pn * $px;\n    return \"\" if\
    \ $p % $dx != 0;\n    return \"\" if $p % $dn != 0;\n    return 1;\n}", "    my($a,\
    \ $b) = split(\"/\", $x);\n    my($c, $d) = split(\"/\", $n);\n    my $e = $a\
    \ * $d;\n    my $f = $b * $c;\n    if ($e % $f == 0) {\n        return 1;\n  \
    \  } else {\n        return '';\n    }\n}", "    my $d = 0;\n    my @n = split(m#/#,\
    \ $n);\n    $d = $n[1];\n    my @x = split(m#/#, $x);\n    $d *= $x[1];\n    my\
    \ $num = $x[0] * $n[0];\n    if ($num == $d) {\n        return 1;\n    }\n   \
    \ return \"\";\n}", "    my($xN, $xD) = split /\\//, $x;\n    my($nN, $nD) = split\
    \ /\\//, $n;\n    my $prod = $xN * $nN;\n    if ( $prod % $xD == 0 && $prod %\
    \ $nD == 0 ) {\n        return 1;\n    }\n    return \"\";\n}", "    my($xNumerator,\
    \ $xDenominator) = split(/\\//, $x);\n    my($nNumerator, $nDenominator) = split(/\\\
    //, $n);\n    my $productNumerator = $xNumerator * $nNumerator;\n    my $productDenominator\
    \ = $xDenominator * $nDenominator;\n    my $gcd = greatestCommonDivisor($productNumerator,\
    \ $productDenominator);\n    if ($gcd == 1) {\n        return 1;\n    } else {\n\
    \        return \"\";\n    }\n}", "    my($numerator_x, $denominator_x) = split(/\\\
    //, $x);\n    my($numerator_n, $denominator_n) = split(/\\//, $n);\n    return\
    \ ($numerator_x * $denominator_n) % ($denominator_x * $numerator_n) ? \"\" : 1;\n\
    }", "    my($x_numerator, $x_denominator) = split /\\//, $x;\n    my($n_numerator,\
    \ $n_denominator) = split /\\//, $n;\n    return \"\" if ($x_numerator == 0);\n\
    \    return \"\" if ($n_numerator == 0);\n    return 1 if ($x_numerator == $n_numerator\
    \ && $x_denominator == $n_denominator);\n    my $gcd = gcd($x_numerator, $x_denominator);\n\
    \    $x_numerator /= $gcd;\n    $x_denominator /= $gcd;\n    $gcd = gcd($n_numerator,\
    \ $n_denominator);\n    $n_numerator /= $gcd;\n    $n_denominator /= $gcd;\n \
    \   return \"\" if ($x_numerator * $n_denominator != $n_numerator * $x_denominator);\n\
    \    return 1;\n}", "    my($x_num, $x_denom) = split(/\\//, $x);\n    my($n_num,\
    \ $n_denom) = split(/\\//, $n);\n    my $eval = $x_num*$n_num/$x_denom/$n_denom;\n\
    \    if ($eval =~ /^[0-9]+$/) {\n        return 1;\n    } else {\n        return\
    \ '';\n    }\n}", "    my ($x_num, $x_den) = split(\"/\", $x);\n    my ($n_num,\
    \ $n_den) = split(\"/\", $n);\n    my $num = $x_num * $n_num;\n    my $den = $x_den\
    \ * $n_den;\n    if($num % $den == 0) {\n        return 1;\n    }\n    else {\n\
    \        return \"\";\n    }\n}\n1;", "    my($numerator, $denominator) = split('/',\
    \ $x);\n    my($numerator2, $denominator2) = split('/', $n);\n    if ($numerator2\
    \ % $denominator == 0) {\n        if ($numerator * $denominator2 == $numerator2\
    \ * $denominator) {\n            return 1;\n        }\n    }\n    return '';\n\
    }", "    my($num_x, $den_x) = split '/', $x;\n    my($num_n, $den_n) = split '/',\
    \ $n;\n    if (($num_x * $den_n) % ($den_x * $num_n) == 0) {\n        return 1;\n\
    \    } else {\n        return '';\n    }\n}", "    my($nx, $dx) = split(/\\//,\
    \ $x);\n    my($nn, $dn) = split(/\\//, $n);\n    my $f = $nx * $dn * $nn;\n \
    \   my $c = $dx * $dn * $nn;\n    $f =~ s/^0+//;\n    $c =~ s/^0+//;\n    $f <=>\
    \ $c == 0 ? 1 : \"\";\n}", "    my($x_numerator, $x_denominator) = split(/\\//,\
    \ $x);\n    my($n_numerator, $n_denominator) = split(/\\//, $n);\n    my $result\
    \ = ($x_numerator * $n_numerator) / ($x_denominator * $n_denominator);\n    if\
    \ ($result == int($result)) {\n        return 1;\n    } else {\n        return\
    \ \"\";\n    }\n}\nsay \"simplify('1/5', '5/1') = \", simplify(\"1/5\", \"5/1\"\
    );\nsay \"simplify('1/6', '2/1') = \", simplify(\"1/6\", \"2/1\");\nsay \"simplify('7/10',\
    \ '10/2') = \", simplify(\"7/10\", \"10/2\");", "    my($x_num, $x_den) = $x =~\
    \ /(\\d+)\\/(\\d+)/;\n    my($n_num, $n_den) = $n =~ /(\\d+)\\/(\\d+)/;\n    my\
    \ $result = Math::BigRat->new(\"$x_num/$x_den\") * \n                 Math::BigRat->new(\"\
    $n_num/$n_den\");\n    if ($result->is_int()) {\n        return 1;\n    } else\
    \ {\n        return \"\";\n    }\n}", "    my($xn) = multiply($x, $n);\n    return\
    \ $xn == int($xn) ? \"1\" : \"\";\n}", "    my($numerator_x, $denominator_x) =\
    \ split \"/\", $x;\n    my($numerator_n, $denominator_n) = split \"/\", $n;\n\
    \    my $product = $numerator_x * $numerator_n;\n    return $product % $denominator_x\
    \ == 0 ? 1 : \"\";\n}", "    if (simplify_1($x, $n) =~ m/\\// || simplify_1($x,\
    \ $n) =~ m/\\s+/ || simplify_1($x, $n) =~ m/\\./) {\n        return '';\n    }\n\
    \    else {\n        return 1;\n    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
