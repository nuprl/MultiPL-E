name: HumanEval_144_simplify
language: pl
prompt: "# Your task is to implement a function that will simplify the expression\n\
  # x * n. The function returns 1 if x * n evaluates to a whole number and ''\n# otherwise.\
  \ Both x and n, are string representation of a fraction, and have the following\
  \ format,\n# <numerator>/<denominator> where both numerator and denominator are\
  \ positive whole numbers.\n# You can assume that x, and n are valid fractions, and\
  \ do not have zero as denominator.\n# >>> simplify(\"1/5\", \"5/1\")\n# 1\n# >>>\
  \ simplify(\"1/6\", \"2/1\")\n# \"\"\n# >>> simplify(\"7/10\", \"10/2\")\n# \"\"\
  \nsub simplify {\n    my($x, $n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&simplify;\n\
  \        if(eq_deeply($candidate->(\"1/5\", \"5/1\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1/6\"\
  , \"2/1\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"5/1\", \"3/1\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"7/10\"\
  , \"10/2\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"2/10\", \"50/10\"),1)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"7/2\"\
  , \"4/2\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\"11/6\", \"6/1\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2/3\"\
  , \"5/2\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"5/2\", \"3/5\"),\"\")) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2/4\"\
  , \"8/4\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\"2/4\", \"4/2\"),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1/5\", \"5/1\"\
  ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  1/5\", \"1/5\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n}\n\ntesthumaneval();"
completions: ["    my($xnum, $xdenom) = split('/', $x);\n    my($nnum, $ndenom) =\
    \ split('/', $n);\n    my $divs = \"\";\n    for my $i (1..($xdenom-1)) {\n  \
    \      my $div = $xdenom / $i;\n        $divs .= \"$div|\";\n    }\n    $divs\
    \ =~ s/\\|$//;\n    if ($ndenom =~ /^($divs)$/) {\n        $xnum *= $nnum;\n \
    \       $xdenom *= $ndenom;\n        my $gcd = 0;\n        for my $i (1..($xdenom-1))\
    \ {\n            if ($xnum % $i == 0 && $xdenom % $i == 0) {\n               \
    \ $gcd = $i;\n            }\n        }\n        $xnum /= $gcd;\n        $xdenom\
    \ /= $gcd;\n        if ($xnum % $xdenom == 0) {\n            return $xnum / $xdenom;\n\
    \        }\n    }\n    return \"\";\n}", "    my($x_num, $x_denom) = split /\\\
    //, $x;\n    my($n_num, $n_denom) = split /\\//, $n;\n    my $result = $x_num\
    \ * $n_num;\n    my $result_denom = $x_denom * $n_denom;\n    ($result_denom >\
    \ 0) ? ($result % $result_denom == 0) ? 1 : '' : '';\n}", "    my($a, $b) = split\
    \ \"/\", $x;\n    my($c, $d) = split \"/\", $n;\n    return abs($b*$c)%abs($a*$d)\
    \ == 0 ? 1 : '';\n}", "    my ($xn, $xd) = split '/', $x;\n    my ($nn, $nd) =\
    \ split '/', $n;\n    my $result = $xn * $nn / $xd / $nd;\n    return $result\
    \ =~ /\\./ ? '' : 1;\n}", "    my ($nx, $dx) = split '/', $x;\n    my ($nn, $dn)\
    \ = split '/', $n;\n    return '' if $nx * $dn % $dx * $nn;\n    return 1;\n}",
  "    my($xnumer, $xdenom) = split /\\//, $x;\n    my($nnumer, $ndenom) = split /\\\
    //, $n;\n    return ($xnumer * $ndenom) % ($xdenom * $nnumer) ? '' : 1;\n}", " \
    \   my($x_numerator, $x_denominator) = split /\\//, $x;\n    my($n_numerator,\
    \ $n_denominator) = split /\\//, $n;\n    my $result = $x_numerator * $n_numerator\
    \ / $x_denominator / $n_denominator;\n    if ($result == int($result)) {\n   \
    \     return 1;\n    } else {\n        return '';\n    }\n}", "    my($a, $b)\
    \ = split /\\//, $x;\n    my($p, $q) = split /\\//, $n;\n    return (($a * $q)\
    \ % ($b * $p)) ? '' : 1;\n}", "    my($x_num, $x_denom) = split /\\//, $x;\n \
    \   my($n_num, $n_denom) = split /\\//, $n;\n    my $product = $x_num * $n_num;\n\
    \    my $gcd = gcd($product, $x_denom * $n_denom);\n    return $product / $gcd\
    \ == $x_denom * $n_denom / $gcd ? 1 : '';\n}", "    my ($x_numerator, $x_denominator)\
    \ = split /\\//, $x;\n    my ($n_numerator, $n_denominator) = split /\\//, $n;\n\
    \    my $result = $x_numerator * $n_numerator;\n    $result % $x_denominator ==\
    \ 0 ? 1 : '';\n}", "    my($xx, $nn) = map { $x =~ /^(\\d+)\\/(\\d+)$/; ($1, $2)\
    \ } $x, $n;\n    $xx * $nn % $nn ? '' : 1;\n}", "    my($xnum, $xdenom) = split\
    \ m|/|, $x;\n    my($nnum, $ndenom) = split m|/|, $n;\n    my $simplified = $xnum\
    \ * $ndenom * $ndenom;\n    if ($simplified % $xdenom) {\n        return '';\n\
    \    }\n    return 1;\n}", "    my($nx, $dx) = split '/', $x;\n    my($nn, $dn)\
    \ = split '/', $n;\n    return 1 if $nx * $dn == $dx * $nn;\n    return '';\n}",
  "    my($xnum, $xdenom) = split(/\\//, $x);\n    my($nnum, $ndenom) = split(/\\\
    //, $n);\n    my $result = $xnum * $ndenom * $nnum * $xdenom;\n    if($result\
    \ % $xdenom == 0) {\n        return 1;\n    }\n    return '';\n}", "    my($xn)\
    \ = $x * $n;\n    my(@xn) = split('/', $xn);\n    my($whole) = @xn[0] / @xn[1];\n\
    \    my($remainder) = @xn[0] % @xn[1];\n    return ($remainder == 0) ? $whole\
    \ : '';\n}", "    my($x_num, $x_denom) = split /\\//, $x;\n    my($n_num, $n_denom)\
    \ = split /\\//, $n;\n    $x_num * $n_denom * $n_num * $x_denom % $x_denom * $n_denom\
    \ ? '' : 1;\n}", "    my ($x_num, $x_den) = split \"/\", $x;\n    my ($n_num,\
    \ $n_den) = split \"/\", $n;\n    my $result = $x_num * $n_num;\n    my $divisor\
    \ = $x_den * $n_den;\n    if ($result % $divisor) {\n        return \"\";\n  \
    \  }\n    return 1;\n}", "    my($a, $b) = split(/\\//, $x);\n    my($c, $d) =\
    \ split(/\\//, $n);\n    my $v = $a * $d;\n    my $u = $b * $c;\n    if ($v ==\
    \ $u) {\n        return 1;\n    }\n    return '';\n}", "    my($x1, $x2) = split\
    \ /\\//, $x;\n    my($n1, $n2) = split /\\//, $n;\n    my $result = $x1 * $n2\
    \ * $n1 * $x2;\n    return $result % ($x2 * $n2) == 0 ? 1 : '';\n}", "    my($xnum,\
    \ $xden) = split(/\\//, $x);\n    my($nnum, $nden) = split(/\\//, $n);\n    return\
    \ '' if 0 == $xnum * $nden * $nnum * $xden;\n    return '' if ($xnum * $nden)\
    \ % ($nnum * $xden);\n    return 1;\n}", "    my ($a, $b) = split /\\//, $x;\n\
    \    my ($c, $d) = split /\\//, $n;\n    if ($b*$d % $a*$c == 0) {\n        return\
    \ 1;\n    } else {\n        return '';\n    }\n}", "    my ($x_num, $x_den) =\
    \ split /\\//, $x;\n    my ($n_num, $n_den) = split /\\//, $n;\n    $x_num *=\
    \ $n_den;\n    $x_den *= $n_num;\n    return $x_num % $x_den ? '' : 1;\n}", " \
    \   my $result = $x * $n;\n    if($result =~ /^(\\d+)\\/(\\d+)$/) {\n        if($1\
    \ % $2 == 0) {\n            return $1 / $2;\n        }\n    }\n    return '';\n\
    }", "    my($a, $b) = split /\\//, $x;\n    my($c, $d) = split /\\//, $n;\n  \
    \  ($a * $d) % ($b * $c) ? '' : 1;\n}", "    my($n1, $d1) = split '/', $x;\n \
    \   my($n2, $d2) = split '/', $n;\n    my $c = $n1 * $d2 * $n2 * $d1;\n    return\
    \ $c % $d1 * $d2 == 0 ? 1 : '';\n}", "    my ($x_num, $x_den) = split(/\\//, $x);\n\
    \    my ($n_num, $n_den) = split(/\\//, $n);\n    my $result = $x_num * $n_num\
    \ / ($x_den * $n_den);\n    if ($result == int($result)) {\n        return 1;\n\
    \    } else {\n        return '';\n    }\n}", "    my($x_numerator, $x_denominator)\
    \ = split('/', $x);\n    my($n_numerator, $n_denominator) = split('/', $n);\n\
    \    my $res = $x_numerator * $n_numerator;\n    my $res2 = $x_denominator * $n_denominator;\n\
    \    return ($res % $res2) ? '' : 1;\n}", "    my($num_x, $den_x) = split('/',\
    \ $x);\n    my($num_n, $den_n) = split('/', $n);\n    return ($num_x * $den_n)\
    \ % ($den_x * $num_n) ? '' : 1;\n}", "    my($x_num, $x_den) = split '/', $x;\n\
    \    my($n_num, $n_den) = split '/', $n;\n    $x_num * $n_den * $n_num * $x_den\
    \ % ($x_den * $n_den) ? '' : 1;\n}", "    my($fx, $fn) = map {[split /\\//, $_]}\
    \ ($x, $n);\n    my($s, $f) = (1, 1);\n    for (@$fx, @$fn) {\n        $s *= $_;\n\
    \        $f *= $_ if $_ > 1;\n    }\n    $s % $f == 0 ? 1 : '';\n}", "    my($x_num,\
    \ $x_den) = split(/\\//, $x);\n    my($n_num, $n_den) = split(/\\//, $n);\n  \
    \  my $div = $x_num * $n_den * $n_num * $x_den;\n    $div % $n_den == 0 ? 1 :\
    \ '';\n}", "    my($xnum, $xden) = split /\\//, $x;\n    my($nnum, $nden) = split\
    \ /\\//, $n;\n    my $num = $xnum * $nden;\n    my $den = $xden * $nnum;\n   \
    \ my $result = $num / $den;\n    return $result == int($result) ? 1 : '';\n}",
  "    my($xn, $xn_dec) = eval(\"$x * $n\") =~ /(^[\\d.]+)(.*)/;\n    $xn_dec && $xn_dec\
    \ != 0 ? \"\" : 1;\n}", "    # Your code here\n    my ($a, $b) = split '/', $x;\n\
    \    my ($c, $d) = split '/', $n;\n    my $X = Fraction->new($a, $b);\n    my\
    \ $N = Fraction->new($c, $d);\n    $X *= $N;\n    return '' unless $X->is_whole();\n\
    \    return 1;\n}", "    my($xnum, $xden) = split(/\\//, $x);\n    my($nnum, $nden)\
    \ = split(/\\//, $n);\n    my $prod = $xnum * $nnum;\n    if (($prod % $xden)\
    \ == 0) {\n        return 1;\n    } else {\n        return '';\n    }\n}", " \
    \   my($x_num, $x_denom) = split /\\//, $x;\n    my($n_num, $n_denom) = split\
    \ /\\//, $n;\n    my $multiplier = $x_num * $n_denom;\n    $multiplier =~ s/^0+//;\
    \ # trim leading zeros\n    return $multiplier % $x_denom == 0 ? 1 : '';\n}",
  "    my($x_num, $x_den) = split '/', $x;\n    my($n_num, $n_den) = split '/', $n;\n\
    \    my $d = lcm($x_den, $n_den);\n    my $x_mult = $d / $x_den;\n    my $n_mult\
    \ = $d / $n_den;\n    return 0 if $x_mult * $x_num * $n_mult * $n_num % $d;\n\
    \    return 1;\n}\nuse Test::More;\nok(simplify(\"1/5\", \"5/1\"));\nok(!simplify(\"\
    1/6\", \"2/1\"));\nok(!simplify(\"7/10\", \"10/2\"));\ndone_testing();", "   \
    \ my($x_nu, $x_de) = split '/', $x;\n    my($n_nu, $n_de) = split '/', $n;\n \
    \   ($x_nu * $n_de) % ($x_de * $n_nu) == 0 ? '1' : '';\n}", "    my($a, $b) =\
    \ split '/', $x;\n    my($c, $d) = split '/', $n;\n    $a * $d == $b * $c ? 1\
    \ : '';\n}", "    my($num, $den) = split '/', $x;\n    my($N, $D) = split '/',\
    \ $n;\n    return $num * $N % $den == 0 ? 1 : '';\n}", "    my($xnum, $xden) =\
    \ split /\\//, $x;\n    my($nnum, $nden) = split /\\//, $n;\n    my $result =\
    \ $xnum * $nden;\n    my $mult = $xden * $nnum;\n    if ($result % $mult == 0)\
    \ {\n        return 1;\n    } else {\n        return '';\n    }\n}", "    $x =~\
    \ /(\\d+)\\/(\\d+)/;\n    my($x1, $x2) = ($1, $2);\n    $n =~ /(\\d+)\\/(\\d+)/;\n\
    \    my($n1, $n2) = ($1, $2);\n    return ($x1 * $n2 * $n2 * $x2 == $n1 * $x2\
    \ * $x2 * $n2 ? 1 : '');\n}", "    my($x_num, $x_den) = split /\\//, $x;\n   \
    \ my($n_num, $n_den) = split /\\//, $n;\n    return $x_num * $n_den == $x_den\
    \ * $n_num ? 1 : '';\n}", "    my($x_num, $x_den) = split '/', $x;\n    my($n_num,\
    \ $n_den) = split '/', $n;\n    my $z_num = $x_num * $n_num;\n    my $z_den =\
    \ $x_den * $n_den;\n    my $gcd = get_gcd($z_num, $z_den);\n    return $gcd ==\
    \ 1 ? '' : 1;\n}", "    my($numerator_x, $denominator_x) = split(/\\//, $x);\n\
    \    my($numerator_n, $denominator_n) = split(/\\//, $n);\n    my $result_numerator\
    \ = $numerator_x * $numerator_n;\n    my $result_denominator = $denominator_x\
    \ * $denominator_n;\n    $result_numerator % $result_denominator == 0 ? 1 : '';\n\
    }", "    my ($x_numerator, $x_denominator) = split /\\//, $x;\n    my ($n_numerator,\
    \ $n_denominator) = split /\\//, $n;\n    my $x_n = $x_numerator * $n_denominator;\n\
    \    my $n_x = $n_numerator * $x_denominator;\n    $x_n % $x_denominator == 0\
    \ && $n_x % $n_denominator == 0 ? 1 : '';\n}", "    my($x_numerator, $x_denominator)\
    \ = split /\\//, $x;\n    my($n_numerator, $n_denominator) = split /\\//, $n;\n\
    \    my $result = $x_numerator * $n_numerator;\n    if ($result % $x_denominator\
    \ == 0 && $result % $n_denominator == 0) {\n        return 1;\n    }\n    return\
    \ '';\n}", "    my($xn, $x_denominator, $n_numerator, $n_denominator) = split('/',\
    \ $x);\n    ($n_numerator, $n_denominator) = split('/', $n);\n    $xn = $xn *\
    \ $n_numerator;\n    return ($xn % $x_denominator == 0 ? 1 : '');\n}", "    my\
    \ ($xn, $xd) = split(/\\//, $x);\n    my ($nn, $nd) = split(/\\//, $n);\n    return\
    \ ($xn * $nd) % ($xd * $nn) ? '' : 1;\n}", "    my($xn, $mod) = mul($x, $n);\n\
    \    return $mod == 0 ? 1 : '';\n}", "    my($x_numerator, $x_denominator) = split\
    \ '/', $x;\n    my($n_numerator, $n_denominator) = split '/', $n;\n    my $product\
    \ = ($x_numerator * $n_numerator) / ($x_denominator * $n_denominator);\n    if\
    \ ($product == int($product)) {\n        return 1;\n    }\n    else {\n      \
    \  return '';\n    }\n}", "    my($xnumer, $xdenom) = split(/\\//, $x);\n    my($nnumer,\
    \ $ndenom) = split(/\\//, $n);\n    return $xnumer * $ndenom == $nnumer * $xdenom\
    \ ? 1 : '';\n}", "    my($x_numerator, $x_denominator) = split /\\//, $x;\n  \
    \  my($n_numerator, $n_denominator) = split /\\//, $n;\n    my $product = $x_numerator\
    \ * $n_numerator / ($x_denominator * $n_denominator);\n    ($product == int($product))\
    \ ? '1' : '';\n}", "    my($xnumer, $xdenom) = split(/\\//, $x);\n    my($nnumer,\
    \ $ndenom) = split(/\\//, $n);\n    $xnumer *= $ndenom;\n    $xdenom *= $nnumer;\n\
    \    return ($xnumer % $xdenom) ? '' : 1;\n}", "    my($x_num, $x_denom) = split\
    \ /\\//, $x;\n    my($n_num, $n_denom) = split /\\//, $n;\n    my $result = $x_num\
    \ * $n_num / ($x_denom * $n_denom);\n    return ($result == int($result)) ? 1\
    \ : '';\n}", "    my($xn) = ($x * $n);\n    my($res) = ($xn =~ /^(\\d+)\\/1$/);\n\
    \    return(($res)? 1 : '');\n}", "    my($x_num, $x_den) = split(\"/\", $x);\n\
    \    my($n_num, $n_den) = split(\"/\", $n);\n    my $x_num_n = $x_num * $n_num;\n\
    \    my $x_den_n = $x_den * $n_den;\n    my $gcd = gcd($x_num_n, $x_den_n);\n\
    \    my $n_num_x = $n_num * $x_den;\n    my $n_den_x = $n_den * $x_num;\n    my\
    \ $gcd2 = gcd($n_num_x, $n_den_x);\n    if ($gcd == 1) {\n        return 1;\n\
    \    }\n    elsif ($gcd2 == 1) {\n        return 1;\n    }\n    else {\n     \
    \   return \"\";\n    }\n}", "    my($x_num, $x_den) = split(\"/\", $x);\n   \
    \ my($n_num, $n_den) = split(\"/\", $n);\n    my $result = ($x_num * $n_num) .\
    \ \"/\" . ($x_den * $n_den);\n    if ($result =~ /^\\d+\\/1$/) {\n        return\
    \ 1;\n    }\n    return \"\";\n}", "    my ($n1, $d1) = split \"/\", $x;\n   \
    \ my ($n2, $d2) = split \"/\", $n;\n    my $numerator = $n1 * $n2;\n    my $denominator\
    \ = $d1 * $d2;\n    $numerator % $denominator ? \"\" : 1;\n}", "    # if x * n\
    \ has a whole part, return 1, else return \"\".\n    # your code here\n    my\
    \ ($num1, $den1) = split(/\\//, $x);\n    my ($num2, $den2) = split(/\\//, $n);\n\
    \    my $num3 = $num1 * $num2;\n    my $den3 = $den1 * $den2;\n    if($num3 %\
    \ $den3 == 0) {\n      return 1;\n    } else {\n      return \"\";\n    }\n}",
  "    my($num_x, $den_x) = split(/\\//, $x);\n    my($num_n, $den_n) = split(/\\\
    //, $n);\n    my $r = 1;\n    while ($num_x > 1 && $den_x > 1) {\n        ($num_x,\
    \ $den_x) = ($num_x-1, $den_x-1);\n        $r *= -1;\n    }\n    while ($num_n\
    \ > 1 && $den_n > 1) {\n        ($num_n, $den_n) = ($num_n-1, $den_n-1);\n   \
    \     $r *= -1;\n    }\n    my $ret = $r == 1 ? 1 : '';\n    #print \"X=$x, N=$n,\
    \ R=$r, RET=$ret\\n\";\n    return $ret;\n}", "    my($numerator_x, $denominator_x)\
    \ = split(/\\//, $x);\n    my($numerator_n, $denominator_n) = split(/\\//, $n);\n\
    \    return $numerator_x * $denominator_n == $numerator_n * $denominator_x;\n}",
  "    my($x1, $x2) = split('/', $x);\n    my($n1, $n2) = split('/', $n);\n    my\
    \ $ret = $x1 * $n2 * $n1 * $x2;\n    $ret % ($x2 * $n2) == 0 ? 1 : '';\n}", " \
    \   my ($numerator, $denominator) = split '/', $x;\n    my ($other_numerator,\
    \ $other_denominator) = split '/', $n;\n    if (($numerator * $other_denominator)\
    \ % ($denominator * $other_numerator) == 0) {\n        return 1;\n    }\n    return\
    \ '';\n}", "    my ($x_numerator, $x_denominator) = split(/\\//, $x);\n    my\
    \ ($n_numerator, $n_denominator) = split(/\\//, $n);\n    my $ans = $x_numerator\
    \ * $n_numerator / ($x_denominator * $n_denominator);\n    return $ans =~ /\\\
    d+$/ ? 1 : '';\n}", "    my($x1, $x2) = split \"/\", $x;\n    my($n1, $n2) = split\
    \ \"/\", $n;\n    return $x1 * $n2 % $x2 == 0 ? 1 : '';\n}", "    my ($x_num,\
    \ $x_denom) = split('/', $x);\n    my ($n_num, $n_denom) = split('/', $n);\n \
    \   if ($x_num * $n_denom * $n_num * $x_denom % ($x_denom * $n_denom) == 0) {\n\
    \        return 1;\n    }\n    return '';\n}", "    my($numerator1, $denominator1)\
    \ = split \"/\", $x;\n    my($numerator2, $denominator2) = split \"/\", $n;\n\
    \    return 1 if $numerator1 * $denominator2 % $denominator1 == 0;\n    return\
    \ \"\";\n}", "    my($x_numerator, $x_denominator) = split(/\\//, $x);\n    my($n_numerator,\
    \ $n_denominator) = split(/\\//, $n);\n    if (($x_numerator * $n_denominator)\
    \ % ($x_denominator * $n_numerator) == 0) {\n        return 1;\n    }\n    else\
    \ {\n        return '';\n    }\n}", "    my($x_num, $x_den) = split '/', $x;\n\
    \    my($n_num, $n_den) = split '/', $n;\n    my $frac = eval(\"$x_num * $n_num\
    \ / $x_den / $n_den\");\n    if ($frac % 1 == 0) {\n        return 1;\n    } else\
    \ {\n        return '';\n    }\n}", "    my($x_numerator, $x_denominator) = split\
    \ /\\//, $x;\n    my($n_numerator, $n_denominator) = split /\\//, $n;\n    my\
    \ $result = $x_numerator * $n_numerator / ($x_denominator * $n_denominator);\n\
    \    return $result =~ /^\\d+$/ ? 1 : '';\n}", "    my($x_num, $x_den) = split\
    \ \"/\", $x;\n    my($n_num, $n_den) = split \"/\", $n;\n    return ($x_num *\
    \ $n_den) % ($x_den * $n_num) == 0 ? 1 : '';\n}", "    my($x_numerator, $x_denominator)\
    \ = split /\\//, $x;\n    my($n_numerator, $n_denominator) = split /\\//, $n;\n\
    \    my $result = $x_numerator * $n_numerator;\n    return $result % $x_denominator\
    \ ? '' : 1;\n}", "    my($x_numerator, $x_denominator) = split '/', $x;\n    my($n_numerator,\
    \ $n_denominator) = split '/', $n;\n    return unless $x_numerator * $n_denominator\
    \ % $x_denominator == 0;\n    return unless $x_denominator * $n_numerator % $n_denominator\
    \ == 0;\n    return 1;\n}", "    my ($num_x, $den_x) = split '/', $x;\n    my\
    \ ($num_n, $den_n) = split '/', $n;\n    return ($num_x * $den_n * $den_x) % ($num_n\
    \ * $den_x) ? '' : 1;\n}", "    my($xnumer, $xdenom) = split(/\\//, $x);\n   \
    \ my($nnumer, $ndenom) = split(/\\//, $n);\n    return ($xnumer * $ndenom) % ($xdenom\
    \ * $nnumer) ? \"\" : 1;\n}", "    my($numerator_x, $denominator_x) = split(\"\
    /\", $x);\n    my($numerator_n, $denominator_n) = split(\"/\", $n);\n    my $result_num\
    \ = $numerator_x * $numerator_n;\n    my $result_den = $denominator_x * $denominator_n;\n\
    \    for(my $i = 2; $i <= $result_num; $i++) {\n        if($result_num % $i ==\
    \ 0 && $result_den % $i == 0) {\n            $result_num /= $i;\n            $result_den\
    \ /= $i;\n            $i--;\n        }\n    }\n    return $result_den == 1 ? 1\
    \ : '';\n}", "    my($x_num, $x_denom) = split \"/\", $x;\n    my($n_num, $n_denom)\
    \ = split \"/\", $n;\n    my $result = $x_num * $n_num;\n    if($result % $x_denom\
    \ == 0) {\n        return 1;\n    }\n    return \"\";\n}", "    my($x_numerator,\
    \ $x_denominator) = split(/\\//, $x);\n    my($n_numerator, $n_denominator) =\
    \ split(/\\//, $n);\n    return '' if $x_numerator * $n_denominator * $n_numerator\
    \ * $x_denominator % ($x_denominator * $n_denominator) != 0;\n    return 1;\n}",
  "    my($xn, $xd) = split(/\\//, $x);\n    my($nn, $nd) = split(/\\//, $n);\n  \
    \  ($xn * $nd) % ($xd * $nn) == 0 ? 1 : '';\n}", "    my($x_num, $x_denom) = split\
    \ /\\//, $x;\n    my($n_num, $n_denom) = split /\\//, $n;\n    my $xn_num = $x_num\
    \ * $n_num;\n    my $xn_denom = $x_denom * $n_denom;\n    my $result = $xn_num\
    \ / $xn_denom;\n    if ($result == int($result)) {\n        return 1;\n    } else\
    \ {\n        return '';\n    }\n}", "    my($x_numerator, $x_denominator) = split\
    \ '/', $x;\n    my($n_numerator, $n_denominator) = split '/', $n;\n    my $x_n\
    \ = ($x_numerator * $n_numerator) / ($x_denominator * $n_denominator);\n    return\
    \ $x_n == int($x_n) ? 1 : '';\n}", "    my($xn) = fraction_multiply($x, $n);\n\
    \    return (int($xn->[0] / $xn->[1]) == $xn->[0] / $xn->[1]) ? 1 : '';\n}", " \
    \   my($x_numerator, $x_denominator) = split(/\\//, $x);\n    my($n_numerator,\
    \ $n_denominator) = split(/\\//, $n);\n    my $multiplication = ($x_numerator\
    \ * $n_numerator) / ($x_denominator * $n_denominator);\n    $multiplication =~\
    \ /\\d+/ ? $multiplication : '';\n}", "    return '' if $x eq '0/1';", "    my($xn,\
    \ $nn) = reduce(\"$x * $n\");\n    $xn == $nn ? 1 : '';\n}", "    my($x_num, $x_den)\
    \ = split(/\\//, $x);\n    my($n_num, $n_den) = split(/\\//, $n);\n    my $result\
    \ = 1;\n    $result = \"\" if $x_num * $n_den * $n_num * $x_den % ($x_den * $n_den)\
    \ != 0;\n    return $result;\n}", "    my $g = gcd(split '/', $x);\n    $x = simplify_frac($x,\
    \ $g);\n    $g = gcd(split '/', $n);\n    $n = simplify_frac($n, $g);\n    my($xx,\
    \ $xn) = split '/', $x;\n    my($nn, $nd) = split '/', $n;\n    my $nx = $xx *\
    \ $nd;\n    my $dx = $xn * $nn;\n    if ($nx % $dx == 0) {\n        return 1;\n\
    \    }\n    return '';\n}", "    my($x1, $x2) = split m'/', $x;\n    my($n1, $n2)\
    \ = split m'/', $n;\n    if (gcd($x1 * $n2, $x2 * $n1) == $x2 * $n1) {\n     \
    \   return 1;\n    }\n    return '';\n}", "    my($a, $b) = split('/', $x);\n\
    \    my($c, $d) = split('/', $n);\n    my $gcd = GCD($a, $b);\n    return '' if\
    \ ($gcd != 1);\n    my $mult = $a * $d;\n    return '' if ($mult % $b != 0);\n\
    \    return '' if ($mult % $c != 0);\n    return 1;\n}", "    my($x_numerator,\
    \ $x_denominator) = split(/\\//, $x);\n    my($n_numerator, $n_denominator) =\
    \ split(/\\//, $n);\n    my $product = $x_numerator * $n_numerator;\n    my $denominator\
    \ = $x_denominator * $n_denominator;\n    if ($product % $denominator == 0) {\n\
    \        return 1;\n    }\n    else {\n        return '';\n    }\n}", "    my($numerator,\
    \ $denominator) = split('/', $x);\n    my($multiplier, $mdenominator) = split('/',\
    \ $n);\n    $multiplier = 1 if $multiplier eq '';\n    $mdenominator = 1 if $mdenominator\
    \ eq '';\n    return ($numerator * $multiplier % $denominator * $mdenominator)\
    \ ? '' : 1;\n}", "    my($x_num, $x_denom) = split /\\//, $x;\n    my($n_num,\
    \ $n_denom) = split /\\//, $n;\n    my $r_num = $x_num * $n_num;\n    my $r_denom\
    \ = $x_denom * $n_denom;\n    if ($r_num % $r_denom == 0) {\n        return $r_num\
    \ / $r_denom;\n    }\n    return '';\n}", "    my($xn, $nn) = map { ($_->[0] *\
    \ $_->[2], $_->[1] * $_->[2]) } map { [ /(\\d+)\\/(\\d+)/ ] } ($x, $n);\n    my($gcd)\
    \ = gcd($xn, $nn);\n    ($xn / $gcd) % ($nn / $gcd) ? '' : 1;\n}", "    my($numer_x,\
    \ $denom_x) = split '/', $x;\n    my($numer_n, $denom_n) = split '/', $n;\n  \
    \  my $total_numer = $numer_x * $numer_n;\n    my $total_denom = $denom_x * $denom_n;\n\
    \    if ($total_numer % $total_denom == 0) {\n        return 1;\n    } else {\n\
    \        return '';\n    }\n}", "    my($x1, $x2) = split '/', $x;\n    my($n1,\
    \ $n2) = split '/', $n;\n    return ($x1 * $n2) % ($x2 * $n1) ? '' : 1;\n}", " \
    \   my($x_num, $x_den) = $x =~ /(\\d+)\\/(\\d+)/;\n    my($n_num, $n_den) = $n\
    \ =~ /(\\d+)\\/(\\d+)/;\n    my $num = $x_num * $n_num;\n    my $den = $x_den\
    \ * $n_den;\n    while($num > 1 && $den > 1) {\n        if($num % $den == 0) {\n\
    \            return 1;\n        }\n        if($den % $num == 0) {\n          \
    \  return 1;\n        }\n        $num = $num % $den;\n        $den = $den % $num;\n\
    \    }\n    return '';\n}", "    my ($x_num, $x_den) = split('/', $x);\n    my\
    \ ($n_num, $n_den) = split('/', $n);\n    return $x_num * $n_num % $x_den * $n_den\
    \ ? '' : 1;\n}", "    my($x_num, $x_denom) = split(/\\//, $x);\n    my($n_num,\
    \ $n_denom) = split(/\\//, $n);\n    my $val = $x_num * $n_num;\n    my $denom\
    \ = $x_denom * $n_denom;\n    if ($val % $denom == 0) {\n        return 1;\n \
    \   }\n    return '';\n}", "    my($num, $den) = split('/', $x);\n    $num *=\
    \ $n;\n    if ($num % $den == 0) {\n        return $num / $den;\n    }\n    return\
    \ '';\n}", "    my ($numerator1, $denominator1) = split(/\\//, $x);\n    my ($numerator2,\
    \ $denominator2) = split(/\\//, $n);\n    if ($numerator1 * $denominator2 * $denominator1\
    \ * $numerator2 % ($denominator1 * $denominator2) == 0) {\n        return 1;\n\
    \    } else {\n        return '';\n    }\n}", "    my($xNumerator, $xDenominator)\
    \ = split(/\\//, $x);\n    my($nNumerator, $nDenominator) = split(/\\//, $n);\n\
    \    my $simplifiedNumerator = $xNumerator * $nDenominator;\n    my $simplifiedDenominator\
    \ = $xDenominator * $nNumerator;\n    my $gcd = gcd($simplifiedNumerator, $simplifiedDenominator);\n\
    \    my $result = $simplifiedNumerator / $gcd;\n    return $result == $simplifiedDenominator\
    \ ? $result : '';\n}", "    my $result = \"$x * $n\";\n    # Write your code here\n\
    \    return $result;\n}", "    my($num, $den) = split(/\\//, $x);\n    my($num2,\
    \ $den2) = split(/\\//, $n);\n    my $fr = $num * $num2;\n    my $se = $den *\
    \ $den2;\n    ($fr % $se) ? \"\" : 1;\n}", "    # your code here\n}", "    my($xnum,\
    \ $xden) = split /\\//, $x;\n    my($nnum, $nden) = split /\\//, $n;\n    my $gcd\
    \ = gcd($xden, $nden);\n    my $ldm = lcm($xden, $nden);\n    my $left = $xnum\
    \ * $ldm / $xden;\n    my $right = $nnum * $ldm / $nden;\n    if ($left % $gcd\
    \ == 0 && $right % $gcd == 0) {\n        return 1;\n    }\n    return '';\n}",
  "    my ($x_numerator, $x_denominator) = split /\\//, $x;\n    my ($n_numerator,\
    \ $n_denominator) = split /\\//, $n;\n    my $result = ($x_numerator * $n_numerator)\
    \ / ($x_denominator * $n_denominator);\n    return $result % 1 == 0 ? 1 : '';\n\
    }", "    my($xn, $xd) = split('/', $x);\n    my($nn, $nd) = split('/', $n);\n\
    \    if ($xd == $nd) {\n        return $xn * $nn;\n    }\n    return '';\n}\n\
    print simplify('1/5', '5/1') . \"\\n\";\nprint simplify('1/6', '2/1') . \"\\n\"\
    ;\nprint simplify('7/10', '10/2') . \"\\n\";", "    my($x_num, $x_denom) = split(/\\\
    //, $x);\n    my($n_num, $n_denom) = split(/\\//, $n);\n    my $gcd = gcd($x_denom,\
    \ $n_denom);\n    return 1 if $gcd == 1;\n    return \"\" unless $x_num % $gcd\
    \ == 0 and $n_num % $gcd == 0;\n    return 1;\n}", "    my ($numerator_x, $denominator_x)\
    \ = split(/\\//, $x);\n    my ($numerator_n, $denominator_n) = split(/\\//, $n);\n\
    \    my $result = ( $numerator_x * $denominator_n ) / ( $denominator_x * $numerator_n\
    \ );\n    return $result == int($result) ? 1 : '';\n}", "    my($num_x, $den_x)\
    \ = split('/', $x);\n    my($num_n, $den_n) = split('/', $n);\n    if ($num_x\
    \ * $den_n == $num_n * $den_x) {\n        return 1;\n    }\n    return '';\n}",
  "    my($num_x, $den_x) = split(/\\//, $x);\n    my($num_n, $den_n) = split(/\\\
    //, $n);\n    my $result = $num_x * $num_n;\n    return ($result % $den_x) ==\
    \ 0 ? 1 : '';\n}", "    my($x_num, $x_den) = split(/\\//, $x);\n    my($n_num,\
    \ $n_den) = split(/\\//, $n);\n    my $res = $x_num * $n_num / ($x_den * $n_den);\n\
    \    return($res == int($res)) ? 1 : '';\n}", "    my($numx, $denx) = split /\\\
    //, $x;\n    my($numn, $denn) = split /\\//, $n;\n    my $a = $numx * $denn;\n\
    \    my $b = $numn * $denx;\n    $a == $b ? 1 : '';\n}", "    my($x_numerator,\
    \ $x_denominator) = $x =~ /(\\d+)\\/(\\d+)/;\n    my($n_numerator, $n_denominator)\
    \ = $n =~ /(\\d+)\\/(\\d+)/;\n    my $num = $x_numerator * $n_numerator;\n   \
    \ my $den = $x_denominator * $n_denominator;\n    $num % $den == 0 ? return 1\
    \ : return '';\n}", "    my($xn, $dn) = split('/', $n);\n    my($xx, $dx) = split('/',\
    \ $x);\n    return 1 if $xx * $xn % $dx == 0;\n    return '';\n}", "    my($xnumer,\
    \ $xdenom) = split('/', $x);\n    my($nnumer, $ndenom) = split('/', $n);\n   \
    \ return (($xnumer * $ndenom) % ($xdenom * $nnumer) == 0 ? 1 : '');\n}", "   \
    \ my($x_num, $x_den) = $x =~ /(\\d+)\\/(\\d+)/;\n    my($n_num, $n_den) = $n =~\
    \ /(\\d+)\\/(\\d+)/;\n    my $num = $x_num * $n_num;\n    my $den = $x_den * $n_den;\n\
    \    return $num % $den == 0 ? 1 : '';\n}", "    my ($x_numerator, $x_denominator)\
    \ = split('/', $x);\n    my ($n_numerator, $n_denominator) = split('/', $n);\n\
    \    my $numerator = $x_numerator * $n_numerator;\n    my $denominator = $x_denominator\
    \ * $n_denominator;\n    if ($numerator % $denominator == 0) {\n        return\
    \ 1;\n    }\n    return '';\n}", "    my ($x_num, $x_den) = split /\\//, $x;\n\
    \    my ($n_num, $n_den) = split /\\//, $n;\n    my $result = $x_num * $n_num;\n\
    \    return $result % $x_den == 0 ? 1 : '';\n}", "    my($num1, $den1) = split('/',\
    \ $x);\n    my($num2, $den2) = split('/', $n);\n    return '' if ($num1 * $den2)\
    \ % ($den1 * $num2);\n    return 1;\n}", "    my($num1, $den1) = split(/\\//,\
    \ $x);\n    my($num2, $den2) = split(/\\//, $n);\n    my $factor = gcd($num1,\
    \ $den2);\n    my $factor2 = gcd($num2, $den1);\n    if (($num1 * $den2) % ($factor\
    \ * $factor2) == 0) {\n        return 1;\n    }\n    return '';\n}", "    my($x1,\
    \ $x2) = split '/', $x;\n    my($n1, $n2) = split '/', $n;\n    my $result = $x1\
    \ * $n2 * $n1 * $x2;\n    return $result % $x2 == 0 ? 1 : '';\n}", "    my($num1,\
    \ $den1) = split '/', $x;\n    my($num2, $den2) = split '/', $n;\n    my $res\
    \ = int($num1 * $num2 / $den1 / $den2);\n    return ($res == $num1 * $num2 / $den1\
    \ / $den2) ? 1 : '';\n}", "    my($x_num, $x_denom) = split('/', $x);\n    my($n_num,\
    \ $n_denom) = split('/', $n);\n    my $total_num = $x_num * $n_num;\n    my $total_denom\
    \ = $x_denom * $n_denom;\n    my $simplified = $total_num / $total_denom;\n  \
    \  if ($simplified =~ /\\d+$/) {\n        return 1;\n    }\n    else {\n     \
    \   return '';\n    }\n}", "    my($numerator_x, $denominator_x) = split /\\//,\
    \ $x;\n    my($numerator_n, $denominator_n) = split /\\//, $n;\n    return \"\"\
    \ if (($numerator_x * $denominator_n) % ($denominator_x * $numerator_n));\n  \
    \  return 1;\n}", "    my ($x_numerator, $x_denominator) = split \"/\", $x;\n\
    \    my ($n_numerator, $n_denominator) = split \"/\", $n;\n    my $product = $x_numerator\
    \ * $n_numerator;\n    return $product % $x_denominator ? \"\" : 1;\n}", "   \
    \ my $product = (substr($x, 0, 1) * substr($n, 0, 1)) / (substr($x, 2, 1) * substr($n,\
    \ 2, 1));\n    return $product == int($product) ? 1 : '';\n}", "    my($xnum,\
    \ $xden) = split '/', $x;\n    my($nnum, $nden) = split '/', $n;\n    my $rslt\
    \ = $xnum * $nden * $nnum * $xden;\n    return $rslt % $xden == 0 ? 1 : '';\n}",
  "    my ($xnum, $xden) = split m{/}, $x;\n    my ($nnum, $nden) = split m{/}, $n;\n\
    \    my $ans = $xnum * $nnum;\n    my $den = $xden * $nden;\n    $ans % $den ==\
    \ 0 ? return 1 : return '';\n}", "    my($top1, $bottom1) = split(/\\//, $x);\n\
    \    my($top2, $bottom2) = split(/\\//, $n);\n    my $top3 = $top1 * $top2;\n\
    \    my $bottom3 = $bottom1 * $bottom2;\n    # print \"$top3 $bottom3\\n\";\n\
    \    if ($top3 % $bottom3 == 0) {\n        return 1;\n    } else {\n        return\
    \ '';\n    }\n}", "    my($x_numerator, $x_denominator) = split /\\//, $x;\n \
    \   my($n_numerator, $n_denominator) = split /\\//, $n;\n    my $num = $x_numerator\
    \ * $n_numerator;\n    my $den = $x_denominator * $n_denominator;\n    $num %\
    \ $den == 0 ? 1 : '';\n}", "    my($x_num, $x_den) = split('/', $x);\n    my($n_num,\
    \ $n_den) = split('/', $n);\n    return (($x_num * $n_den) % ($x_den * $n_num))\
    \ ? '' : 1;\n}", "    my($num_x, $den_x) = $x =~ /(\\d+)\\/(\\d+)/;\n    my($num_n,\
    \ $den_n) = $n =~ /(\\d+)\\/(\\d+)/;\n    my $result = $num_x * $num_n;\n    $result\
    \ % ($den_x * $den_n) == 0 ? 1 : '';\n}", "    my($n1, $d1) = split \"/\", $x;\n\
    \    my($n2, $d2) = split \"/\", $n;\n    my $gcd = gcd($d1, $d2);\n    my $denom\
    \ = $d1 * $d2 / $gcd;\n    my $num = $n1 * $d2 / $gcd + $n2 * $d1 / $gcd;\n  \
    \  return $num % $denom == 0 ? 1 : '';\n}", "    my($numerator1, $denominator1)\
    \ = split(/\\//, $x);\n    my($numerator2, $denominator2) = split(/\\//, $n);\n\
    \    return 1 if ($numerator1 * $denominator2) % ($denominator1 * $numerator2)\
    \ == 0;\n    return '';\n}", "    my($xnum, $xden) = split(/\\//, $x);\n    my($nnum,\
    \ $nden) = split(/\\//, $n);\n    return(($xnum * $nden) % ($xden * $nnum) ==\
    \ 0 ? 1 : '');\n}", "    my ($a, $b) = split /\\//, $x;\n    my ($c, $d) = split\
    \ /\\//, $n;\n    return ($a * $d) % ($b * $c) ? '' : 1;\n}", "    my($num_x,\
    \ $den_x) = split /\\//, $x;\n    my($num_n, $den_n) = split /\\//, $n;\n    my\
    \ $com = $den_x * $den_n;\n    my $rem = abs($num_x * $den_n - $num_n * $den_x)\
    \ % $com;\n    $rem ? \"\" : 1;\n}", "    my($xnum, $xden) = split /\\//, $x;\n\
    \    my($nnum, $nden) = split /\\//, $n;\n    my $num = $xnum * $nden;\n    my\
    \ $den = $xden * $nnum;\n    return ($num % $den == 0) ? 1 : '';\n}", "    my($x_num,\
    \ $x_den) = split /\\//, $x;\n    my($n_num, $n_den) = split /\\//, $n;\n    if\
    \ ($x_num * $n_den * $n_num * $x_den == 1) {\n        return 1;\n    }\n    return\
    \ '';\n}", "    my($numerator_x, $denominator_x) = split(/\\//, $x);\n    my($numerator_n,\
    \ $denominator_n) = split(/\\//, $n);\n    my $result = 1;\n    my $numerator\
    \ = $numerator_x * $numerator_n;\n    my $denominator = $denominator_x * $denominator_n;\n\
    \    if ($numerator % $denominator == 0) {\n        $result = 1;\n    } else {\n\
    \        $result = '';\n    }\n    return $result;\n}", "    my($xn, $dx, $dn);\n\
    \    my $xdx;", "    my($xa, $xb) = split(/\\//, $x);\n    my($na, $nb) = split(/\\\
    //, $n);\n    my $ret = 1;\n    for my $i (2..($xa > $nb ? $xa : $nb)) {\n   \
    \     if ($xa % $i == 0 && $nb % $i == 0) {\n            $xa /= $i;\n        \
    \    $nb /= $i;\n            $ret = 0;\n        }\n        elsif ($xa % $i ==\
    \ 0 && $na % $i == 0) {\n            $xa /= $i;\n            $na /= $i;\n    \
    \        $ret = 0;\n        }\n        elsif ($xb % $i == 0 && $nb % $i == 0)\
    \ {\n            $xb /= $i;\n            $nb /= $i;\n            $ret = 0;\n \
    \       }\n        elsif ($xb % $i == 0 && $na % $i == 0) {\n            $xb /=\
    \ $i;\n            $na /= $i;\n            $ret = 0;\n        }\n    }\n    return\
    \ $ret == 1 ? $xa * $na == $xb * $nb ? 1 : '' : simplify($xa . '/' . $xb, $na\
    \ . '/' . $nb);\n}", "    my($x_num, $x_denom) = split /\\//, $x;\n    my($n_num,\
    \ $n_denom) = split /\\//, $n;\n    my $product = $x_num * $n_num;\n    if($product\
    \ % $x_denom == 0) {\n        return 1;\n    }\n    return '';\n}", "    my($num_x,\
    \ $den_x) = split(\"/\", $x);\n    my($num_n, $den_n) = split(\"/\", $n);\n  \
    \  my $gcd_x = gcd($num_x, $den_x);\n    my $gcd_n = gcd($num_n, $den_n);\n  \
    \  $num_x /= $gcd_x;\n    $den_x /= $gcd_x;\n    $num_n /= $gcd_n;\n    $den_n\
    \ /= $gcd_n;\n    my $num = $num_x * $num_n;\n    my $den = $den_x * $den_n;\n\
    \    if ($num % $den == 0) {\n        return $num / $den;\n    } else {\n    \
    \    return \"\";\n    }\n}", "    my $numerator;\n    my $denominator;\n    ($numerator,\
    \ $denominator) = split /\\//, $x;\n    my $intermediate_numerator = $numerator\
    \ * $n;\n    ($numerator, $denominator) = split /\\//, $n;\n    my $intermediate_denominator\
    \ = $denominator * $x;\n    if ($intermediate_numerator / $intermediate_denominator)\
    \ {\n        return 1;\n    } else {\n        return '';\n    }\n}", "    return\
    \ '' if $x eq '0/1';\n    return 1 if $n eq '1/1';\n    my($num, $den) = split\
    \ /\\//, $x;\n    my($mul, $m) = split /\\//, $n;\n    return '' if $mul % $den\
    \ != 0;\n    return 1 if $mul % $m == 0;\n    return '';\n}", "    my($xn, $d)\
    \ = split /\\//, $x;\n    my($nn, $nn1) = split /\\//, $n;\n    my $r = $xn *\
    \ $nn;\n    my $r1 = $d * $nn1;\n    return $r == $r1 ? 1 : '';\n}", "    my($x_denominator,\
    \ $x_numerator) = split(/\\//, $x);\n    my($n_denominator, $n_numerator) = split(/\\\
    //, $n);\n    my $lcm = lcm($x_denominator, $n_denominator);\n    if($lcm % ($x_numerator\
    \ * $n_numerator) == 0) {\n        return 1;\n    }\n    return '';\n}", "   \
    \ my($numerator, $denominator) = map { get_vector($_) } ($x, $n);\n    $numerator->[0]\
    \ *= $denominator->[1];\n    $numerator->[1] *= $denominator->[0];\n    return\
    \ ($numerator->[0] % $numerator->[1] == 0) ? 1 : '';\n}", "    my($x_numerator,\
    \ $x_denominator) = split(/\\//, $x);\n    my($n_numerator, $n_denominator) =\
    \ split(/\\//, $n);\n    if (($x_numerator * $n_denominator) % ($x_denominator\
    \ * $n_numerator) == 0) {\n        return 1;\n    }\n    else {\n        return\
    \ '';\n    }\n}", "    my($x_num, $x_den) = split '/', $x;\n    my($n_num, $n_den)\
    \ = split '/', $n;\n    my $result = $x_num * $n_num / ($x_den * $n_den);\n  \
    \  if ($result == int($result)) {\n        return 1;\n    } else {\n        return\
    \ '';\n    }\n}", "    my($x_num, $x_den) = split '/', $x;\n    my($n_num, $n_den)\
    \ = split '/', $n;\n    my $total_num = $x_num * $n_num;\n    my $total_den =\
    \ $x_den * $n_den;\n    while ($total_num % 2 == 0 && $total_den % 2 == 0) {\n\
    \        $total_num /= 2;\n        $total_den /= 2;\n    }\n    while ($total_num\
    \ % 3 == 0 && $total_den % 3 == 0) {\n        $total_num /= 3;\n        $total_den\
    \ /= 3;\n    }\n    return $total_num == $total_den ? 1 : '';\n}", "    my($numerator_x,\
    \ $denominator_x) = split /\\//, $x;\n    my($numerator_n, $denominator_n) = split\
    \ /\\//, $n;\n    my $product = ($numerator_x * $numerator_n) / ($denominator_x\
    \ * $denominator_n);\n    return $product =~ /^\\d+$/ ? 1 : '';\n}", "    my ($x_numerator,\
    \ $x_denominator) = split('/', $x);\n    my ($n_numerator, $n_denominator) = split('/',\
    \ $n);\n    if (($x_numerator * $n_denominator) % ($x_denominator * $n_numerator)\
    \ == 0) {\n        return 1;\n    }\n    return '';\n}", "    my($nx, $dx) = split\
    \ '/', $x;\n    my($nn, $dn) = split '/', $n;\n    $nx * $dn == $nn * $dx;\n}",
  "    my ($a, $b) = split '/', $x;\n    my ($c, $d) = split '/', $n;\n    my $r =\
    \ $a * $d * $c;\n    ($r % $b == 0) ? \"1\" : \"\";\n}", "    my($x_num, $x_den)\
    \ = split '/', $x;\n    my($n_num, $n_den) = split '/', $n;\n    my $num = $x_num\
    \ * $n_num;\n    my $den = $x_den * $n_den;\n    #print \"num: $num\\n\";\n  \
    \  #print \"den: $den\\n\";\n    while ($num % 2 == 0 && $den % 2 == 0) {\n  \
    \      $num /= 2;\n        $den /= 2;\n    }\n    while ($num % 3 == 0 && $den\
    \ % 3 == 0) {\n        $num /= 3;\n        $den /= 3;\n    }\n    while ($num\
    \ % 5 == 0 && $den % 5 == 0) {\n        $num /= 5;\n        $den /= 5;\n    }\n\
    \    while ($num % 7 == 0 && $den % 7 == 0) {\n        $num /= 7;\n        $den\
    \ /= 7;\n    }\n    #print \"num: $num\\n\";\n    #print \"den: $den\\n\";\n \
    \   if ($num == $den) {\n        return 1;\n    } else {\n        return '';\n\
    \    }\n}", "    my($x1, $x2) = split '/', $x;\n    my($n1, $n2) = split '/',\
    \ $n;\n    my $y = $x1 * $n2 * $n1 * $x2;\n    return $y % $x2 == 0 ? 1 : '';\n\
    }", "    my($x1, $x2) = split '/', $x;\n    my($n1, $n2) = split '/', $n;\n  \
    \  return ($x1 * $n2) % ($x2 * $n1) ? '' : 1;\n}", "    my($a, $b) = split '/',\
    \ $x;\n    my($c, $d) = split '/', $n;\n    return !($a * $d - $b * $c) % $b ?\
    \ 1 : '';\n}", "    my($x_numerator, $x_denominator) = split(/\\//, $x);\n   \
    \ my($n_numerator, $n_denominator) = split(/\\//, $n);\n    my $result = ($x_numerator\
    \ * $n_numerator) % ($x_denominator * $n_denominator);\n    if ($result == 0)\
    \ {\n        return 1;\n    } else {\n        return '';\n    }\n}", "    my ($x_num,\
    \ $x_denom) = split '/', $x;\n    my ($n_num, $n_denom) = split '/', $n;\n   \
    \ my $res = ($x_num * $n_num) / ($x_denom * $n_denom);\n    $res = int($res);\n\
    \    return $res == $res ? 1 : '';\n}", "    my($xn, $nn) = map { +[map { int\
    \ } split /\\//] } ($x, $n);\n    my $gcd = gcd(@$xn) * gcd(@$nn);\n    my $result\
    \ = (($xn->[0] * $nn->[0]) / $gcd) * ($xn->[1] * $nn->[1]);\n    return $result\
    \ == int($result) ? 1 : '';\n}", "    my $a = parse_fraction($x);\n    my $b =\
    \ parse_fraction($n);\n    my $r = multiply_fraction($a, $b);\n    return $r->{num}\
    \ % $r->{den} == 0 ? 1 : '';\n}", "    my($x_numerator, $x_denominator) = split\
    \ '/', $x;\n    my($n_numerator, $n_denominator) = split '/', $n;\n    my $result\
    \ = $x_numerator * $n_numerator / ($x_denominator * $n_denominator);\n    return\
    \ '' if ($result =~ /\\./);\n    return 1;\n}", "    my($top, $bot) = map { split\
    \ /\\// } $x, $n;\n    if($top * $bot % $top == 0) {\n        return 1;\n    }\n\
    \    return '';\n}", "    my($xn, $numerator, $denominator) = (1, 0, 1);\n   \
    \ if ($x =~ /^(\\d+)\\/(\\d+)$/) {\n        $numerator += $1;\n        $denominator\
    \ *= $2;\n    }\n    if ($n =~ /^(\\d+)\\/(\\d+)$/) {\n        $numerator *= $1;\n\
    \        $denominator *= $2;\n    }\n    $xn = $numerator / $denominator;\n  \
    \  return (int($xn) == $xn) ? 1 : '';\n}", "    my($numerator_x, $denominator_x)\
    \ = split /\\//, $x;\n    my($numerator_n, $denominator_n) = split /\\//, $n;\n\
    \    my $result = $numerator_x * $denominator_n;\n    if ($result % $denominator_x)\
    \ {\n        return '';\n    }\n    return 1;\n}", "    my $result = eval { $x\
    \ * $n };\n    return $result =~ /\\.0\\z/ ? 1 : '';\n}", "    my($xN, $xD) =\
    \ split '/', $x;\n    my($nN, $nD) = split '/', $n;\n    my $GCD = gcd($xD, $nD);\n\
    \    my $Lcm = ($xD * $nD) / $GCD;\n    if ( $xN * $nN * $Lcm % ($nD * $xD) ==\
    \ 0 ) {\n        return 1;\n    }\n    else {\n        return '';\n    }\n}",
  "    my($x_numerator, $x_denominator) = split /\\//, $x;\n    my($n_numerator, $n_denominator)\
    \ = split /\\//, $n;\n    if ($x_numerator * $n_denominator * $n_numerator * $x_denominator\n\
    \            % ($x_denominator * $n_denominator) == 0) {\n        return 1;\n\
    \    }\n    return '';\n}", "    my($x_numerator, $x_denominator) = split(/\\\
    //, $x);\n    my($n_numerator, $n_denominator) = split(/\\//, $n);\n    my $product\
    \ = $x_numerator * $n_numerator;\n    my $product_denominator = $x_denominator\
    \ * $n_denominator;\n    return ($product % $product_denominator == 0) ? 1 : '';\n\
    }", "    my($x_numerator, $x_denominator) = split \"/\", $x;\n    my($n_numerator,\
    \ $n_denominator) = split \"/\", $n;\n    if ( ( $x_numerator * $n_denominator\
    \ ) % ( $x_denominator * $n_numerator ) == 0 ) {\n        return 1;\n    }\n \
    \   else {\n        return \"\";\n    }\n}", "    my($num_x, $den_x) = split('/',\
    \ $x);\n    my($num_n, $den_n) = split('/', $n);\n    return ($num_x * $den_n)\
    \ % ($den_x * $num_n) ? '' : 1;\n}", "    my($x_num, $x_den) = split '/', $x;\n\
    \    my($n_num, $n_den) = split '/', $n;\n    my $r = $x_num * $n_num / ($x_den\
    \ * $n_den);\n    if ($r =~ /^[+-]?\\d+$/) {\n        return 1;\n    } else {\n\
    \        return '';\n    }\n}", "    my($x1, $x2) = split(/\\//, $x);\n    my($n1,\
    \ $n2) = split(/\\//, $n);\n    my $val = $x1 * $n2 * $n1 * $x2;\n    my $is_whole\
    \ = 0;\n    for(my $i = 1; $i <= $val; $i++) {\n        if($val % $i == 0) {\n\
    \            $is_whole = 1;\n        }\n    }\n    if($is_whole) {\n        return\
    \ 1;\n    } else {\n        return '';\n    }\n}", "    my $numx = fraction($x);\n\
    \    my $numy = fraction($n);\n    $numx * $numy;\n    return $numx * $numy ==\
    \ int($numx * $numy) ? 1 : '';\n}", "    my($num_x, $den_x) = split \"/\", $x;\n\
    \    my($num_n, $den_n) = split \"/\", $n;\n    $num_x *= $den_n;\n    $den_x\
    \ *= $num_n;\n    return ($num_x % $den_x == 0) ? 1 : '';\n}", "    my($xNumerator,\
    \ $xDenominator) = split('/', $x);\n    my($nNumerator, $nDenominator) = split('/',\
    \ $n);\n    my $result = $xNumerator * $nDenominator * $nNumerator * $xDenominator;\n\
    \    if($result % 1 == 0) {\n        return 1;\n    } else {\n        return '';\n\
    \    }\n}", "    my($x1, $x2) = split(/\\//, $x);\n    my($n1, $n2) = split(/\\\
    //, $n);\n    my $result = $x1 * $n2 * $n1 * $x2;\n    if($result == int($result))\
    \ {\n        return 1;\n    }\n    return '';\n}", "    my($num, $denom) = split(/\\\
    //, $x);\n    my($numer, $deno) = split(/\\//, $n);\n    if($num * $deno % $denom\
    \ == 0 && $num * $deno / $denom % $numer == 0) {\n        return 1;\n    }\n \
    \   return '';\n}", "    $x =~ /^(\\d+)\\/(\\d+)$/;\n    my $xn = $1 * $2;\n \
    \   $n =~ /^(\\d+)\\/(\\d+)$/;\n    my $dn = $1 * $2;\n    ($xn * $dn) % 1 ==\
    \ 0 ? return 1 : return '';\n}", "    my($x_numerator, $x_denominator) = split\
    \ /\\//, $x;\n    my($n_numerator, $n_denominator) = split /\\//, $n;\n    my\
    \ $x_multiplied_by_n = $x_numerator * $n_numerator / $x_denominator / $n_denominator;\n\
    \    return ($x_multiplied_by_n =~ /\\.0$/) ? 1 : '';\n}", "    my($numerator,\
    \ $denominator) = $x =~ /(\\d+)\\/(\\d+)/;\n    my($s_numerator, $s_denominator)\
    \ = $n =~ /(\\d+)\\/(\\d+)/;\n    return $numerator * $s_denominator == $denominator\
    \ * $s_numerator;\n}", "    my($x_num, $x_den) = split /\\//, $x;\n    my($n_num,\
    \ $n_den) = split /\\//, $n;\n    if($x_num * $n_den == $x_den * $n_num) {\n \
    \       return 1;\n    }\n    return '';\n}", "    my($x_numerator, $x_denominator)\
    \ = split('/', $x);\n    my($n_numerator, $n_denominator) = split('/', $n);\n\
    \    my $result = $x_numerator * $n_numerator;\n    my $result_denominator = $x_denominator\
    \ * $n_denominator;\n    return $result % $result_denominator == 0 ? 1 : '';\n\
    }", "    my($xa, $xb) = split('/', $x);\n    my($na, $nb) = split('/', $n);\n\
    \    # return \"\" if $xa / $xb * $na / $nb != int($xa / $xb * $na / $nb);\n \
    \   # return \"\" if sprintf('%.0f', $xa / $xb * $na / $nb) != sprintf('%.0f',\
    \ $xa / $xb * $na / $nb);\n    return sprintf('%.0f', $xa / $xb * $na / $nb) ==\
    \ $xa / $xb * $na / $nb ? 1 : '';\n}", "    my($x_numerator, $x_denominator) =\
    \ split(\"/\", $x);\n    my($n_numerator, $n_denominator) = split(\"/\", $n);\n\
    \    my $result = $x_numerator * $n_numerator / ($x_denominator * $n_denominator);\n\
    \    return ($result == int($result)) ? 1 : '';\n}", "    return '' if is_zero($n);\n\
    \    my $y = divide($x, $n);\n    return '' if is_zero($y) || is_zero(left_side($y));\n\
    \    my $num = left_side($y);\n    my $den = right_side($y);\n    #print \"$num/$den\\\
    n\";\n    return 1 if $num % $den == 0;\n    return '';\n}", "    my($x_num, $x_den)\
    \ = split /\\//, $x;\n    my($n_num, $n_den) = split /\\//, $n;\n    if ($x_num\
    \ % $n_den == 0 and $n_num % $x_den == 0 and\n       $x_num / $n_den == $n_num\
    \ / $x_den) {\n        return 1;\n    }\n    return '';\n}", "    my($numerator_x,\
    \ $denominator_x) = split /\\//, $x;\n    my($numerator_n, $denominator_n) = split\
    \ /\\//, $n;\n    my $numerator = $numerator_x * $denominator_n;\n    my $denominator\
    \ = $denominator_x * $numerator_n;\n    return $numerator % $denominator == 0\
    \ ? 1 : '';\n}", "    my($xn) = $x * $n;\n    return $xn == int($xn) ? 1 : '';\n\
    }", "    my($x_num, $x_denom) = split '/', $x;\n    my($n_num, $n_denom) = split\
    \ '/', $n;\n    return (($x_num * $n_denom) % ($x_denom * $n_num)) ? '' : 1;\n\
    }", "    my $f1 = to_fraction($x);\n    my $f2 = to_fraction($n);\n    return\
    \ \"\";\n}", "    my($a, $b) = split '/', $x;\n    my($c, $d) = split '/', $n;\n\
    \    $a * $d == $b * $c ? 1 : '';\n}", "    my($xn, $xd) = split('/', $x);\n \
    \   my($nn, $nd) = split('/', $n);\n    # print \"xx=$xn, xd=$xd, nn=$nn, nd=$nd\\\
    n\";\n    if ($xn * $nd % $xd == 0) {\n        return 1;\n    } else {\n     \
    \   return '';\n    }\n}", "    my($nx, $dx) = split /\\//, $x;\n    my($nn, $dn)\
    \ = split /\\//, $n;\n    my $y = $nx * $dn;\n    $y % ($nn * $dx) ? '' : 1;\n\
    }", "    my $xnum = (split /\\//, $x)[0];\n    my $xden = (split /\\//, $x)[1];\n\
    \    my $nnum = (split /\\//, $n)[0];\n    my $nden = (split /\\//, $n)[1];\n\
    \    return $nnum * $xden * $xnum * $nden;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
