name: HumanEval_51_remove_vowels
language: pl
prompt: "# remove_vowels is a function that takes string and returns string without\
  \ vowels.\n# >>> remove_vowels(\"\")\n# \"\"\n# >>> remove_vowels(\"abcdef\")\n\
  # \"bcdf\"\n# >>> remove_vowels(\"aaaaa\")\n# \"\"\n# >>> remove_vowels(\"aaBAA\"\
  )\n# \"B\"\n# >>> remove_vowels(\"zbcd\")\n# \"zbcd\"\nsub remove_vowels {\n   \
  \ my($text) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_vowels;\n\
  \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdef\nghijklm\"\
  ),\"bcdf\nghjklm\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"fedcba\"),\"fdcb\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eeeee\"\
  ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  acBAA\"),\"cB\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"EcBOO\"),\"cB\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ybcd\"\
  ),\"ybcd\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
  testhumaneval();"
completions: ["    $text =~ s/[aeiou]//g;\n    return $text;\n}", "    $text =~ s/[aeiou]//gi;\n\
    \    return $text;\n}", "    $text =~ s/[a|e|i|o|u]//g;\n    return $text;\n}",
  "    $text =~ s/[aeiou]//g;\n    return $text;\n}", "    return \"\" if $text eq\
    \ \"\";\n    my @letter = split \"\", $text;\n    if ($letter[0] eq \"a\" or $letter[0]\
    \ eq \"e\" or $letter[0] eq \"i\" or $letter[0] eq \"o\" or $letter[0] eq \"u\"\
    ) {\n        $text = substr($text, 1);\n        return remove_vowels($text);\n\
    \    } else {\n        $text = substr($text, 1);\n        return $letter[0] .\
    \ remove_vowels($text);\n    }\n}", "    my $tmp = '';\n    foreach my $c (split\
    \ //, $text) {\n        $tmp .= $c if $c !~ /[aeiou]/i;\n    }\n    return $tmp;\n\
    }", "    my $newtext = \"\";\n    foreach my $char (split //, $text) {\n     \
    \   if (index(\"aeiouAEIOU\", $char) == -1) {\n            $newtext .= $char;\n\
    \        }\n    }\n    return $newtext;\n}", "    return $text =~ s/[aeiouAEIOU]//g;\n\
    }", "    $text =~ s/[aeiouAEIOU]//g;\n    return $text;\n}", "    $text =~ s/[aeiouAEIOU]//g;\n\
    \    return $text;\n}", "    return $text =~ s/[aeiou]//ig;\n}", "    return $text\
    \ =~ s/[aeiou]//gi;\n}", "    $text =~ s/[aeiou]//g;\n    return $text;\n}", " \
    \   $text =~ s/[aeiou]//g;\n    return $text;\n}", "    #return $text;\n    #\
    \ remove vowels from $text\n    $text =~ s/[aeiouAEIOU]//g;\n    return $text;\n\
    }", "    return join '', grep { $_ !~ /[aeiou]/i } split '', $text;\n}", "   \
    \ $text =~ s/[aeiou]//g;\n    return $text;\n}", "    return '' if $text eq '';\n\
    \    my $is_vowel = {\n        'a' => 1,\n        'e' => 1,\n        'i' => 1,\n\
    \        'o' => 1,\n        'u' => 1,\n        'A' => 1,\n        'E' => 1,\n\
    \        'I' => 1,\n        'O' => 1,\n        'U' => 1,\n    };\n    my $new_text\
    \ = '';\n    for my $ch (split(//, $text)) {\n        $new_text .= $ch unless\
    \ $is_vowel->{$ch};\n    }\n    return $new_text;\n}", "    $text =~ s/[aeiouAEIOU]//g;\n\
    \    return $text;\n}", "    $text =~ s/[aeiouAEIOU]//g;\n    return $text;\n}",
  "    my $vowels = \"aeiouAEIOU\";\n    my $length = length($text);\n    my $i =\
    \ 0;\n    my $result = \"\";\n    for($i = 0; $i < $length; $i++){\n        my\
    \ $ch = substr($text, $i, 1);\n        if(index($vowels, $ch) < 0){\n        \
    \    $result = $result . $ch;\n        }\n    }\n    return $result;\n}", "  \
    \  my $result = \"\";\n    my $i = 0;\n    while ($i < length($text)) {\n    \
    \    my $ch = substr($text, $i, 1);\n        if ($ch !~ /[aeiou]/i) {\n      \
    \      $result .= $ch;\n        }\n        $i += 1;\n    }\n    return $result;\n\
    }", "    $text =~ s/[aeiouAEIOU]//g;\n    return $text;\n}", "    return \"\"\
    \ if $text eq \"\";\n    $text =~ s/a|e|i|o|u//g;\n    return $text;\n}", "  \
    \  return substr($text, 0, 1).remove_vowels(substr($text, 1)) if length($text)\
    \ > 0;\n    return '';\n}", "    $text =~ s/[aeiou]//g;\n    return $text;\n}",
  "    $text =~ s/[aeiou]//g;\n    return $text;\n}", "    my @chars = split(//, $text);\n\
    \    for my $char (@chars) {\n        $char = '' if ($char =~ /[aeiou]/i);\n \
    \   }\n    return join('', @chars);\n}", "    $text =~ s/[aeiouAEIOU]//g;\n  \
    \  return $text;\n}", "    $text =~ s/[aeiouAEIOU]//g;\n    return $text;\n}",
  "    my($i);\n    my($result) = \"\";\n    my($character);\n    my($character_ascii);\n\
    \    my($vowels) = \"aeiouAEIOU\";\n    my($vowel_index);\n    for($i = 0; $i\
    \ < length($text); $i++) {\n        $character = substr($text, $i, 1);\n     \
    \   $character_ascii = ord($character);\n        $vowel_index = index($vowels,\
    \ $character);\n        if($vowel_index < 0) {\n            $result = $result\
    \ . $character;\n        }\n    }\n    return $result;\n}", "    return $text\
    \ =~ s/[aeiou]//g;\n}", "    $text =~ s/[aeiouAEIOU]//g;\n    return $text;\n}",
  "    my $vowels = \"a|e|i|o|u|A|E|I|O|U\";\n    $text =~ s/[$vowels]//g;\n    return\
    \ $text;\n}", "    my $result = $text;\n    $result =~ s/[aeiouAEIOU]//g;\n  \
    \  return $result;\n}", "    # remove vowels from input text\n    $text =~ s/[aeiou]//g;\n\
    \    return $text;\n}", "    $text =~ s/[aeiou]//g;\n    return $text;\n}", " \
    \   $text =~ s/[aeiouAEIOU]//g;\n    return $text;\n}", "    my $result = \"\"\
    ;\n    my $ch;\n    foreach $ch(split //, $text) {\n        $result .= $ch if\
    \ ($ch !~ /[aeiou]/i);\n    }\n    return $result;\n}", "    return substr($text,1)\
    \ if $text =~ /^(a|e|i|o|u)/i;\n    $text =~ s/[aeiou]//ig;\n    return $text;\n\
    }", "    my $vowels = qr/[aeiou]/i;\n    $text =~ s/$vowels//g;\n    return $text;\n\
    }", "    $text =~ s/[aeiou]//g;\n    return $text;\n}", "    my $result = \"\"\
    ;\n    my @vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U');\n    my\
    \ @text_array = split('', $text);\n    foreach my $letter (@text_array) {\n  \
    \      if (!(grep(/^$letter$/, @vowels))) {\n            $result .= $letter;\n\
    \        }\n    }\n    return $result;\n}", "    return $text =~ s/[aeiou]//gir;\n\
    }", "    return $text if ($text eq \"\");\n    my $result = \"\";\n    $result\
    \ .= $_ foreach (split //, $text);\n    return $result;\n}", "    $text =~ s/[aeiou]//g;\n\
    \    return $text;\n}", "    my $vowels = \"aAeEiIoOuU\";\n    return $text if\
    \ $text eq \"\";\n    # if first character is a vowel\n    if (index($vowels,\
    \ substr($text, 0, 1)) > -1) {\n        return remove_vowels(substr($text, 1));\n\
    \    }\n    else {\n        return substr($text, 0, 1) . remove_vowels(substr($text,\
    \ 1));\n    }\n}", "    return $text =~ s/[aeiou]//gi;\n}", "    my $pattern =\
    \ \"[aeiou]\";\n    $text =~ s/$pattern//g;\n    return $text;\n}", "    $text\
    \ =~ s/[aAeEiIoOuU]//g;\n    return $text;\n}", "    $text =~ s/[aeiouAEIOU]//g;\n\
    \    return $text;\n}", "    $text =~ s/[aeiouAEIOU]//g;\n    return $text;\n}",
  "    $text =~ s/[aeiou]//g;\n    return $text;\n}", "    $text =~ s/[aeiouAEIOU]//g;\n\
    \    return $text;\n}", "    return $text if $text eq \"\";\n    my($c) = substr($text,\
    \ 0, 1);\n    my($vowels) = \"aeiouAEIOU\";\n    if (index($vowels, $c) != -1)\
    \ {\n        return remove_vowels(substr($text, 1));\n    } else {\n        return\
    \ $c . remove_vowels(substr($text, 1));\n    }\n}", "    $text =~ s/[aeiouAEIOU]//g;\n\
    \    return $text;\n}", "    $text =~ s/[aeiouAEIOU]//g;\n    return $text;\n}",
  "    $text =~ s/[aeiouAEIOU]//g;\n    return $text;\n}", "    $text =~ s/[aeiou]//gi;\n\
    \    return $text;\n}", "    $text =~ s/[aeiouAEIOU]//g;\n    return $text;\n}",
  "    $text =~ s/[aeiou]//g;\n    return $text;\n}", "    my $result = \"\";\n  \
    \  my @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\"\
    , \"U\");\n    foreach my $letter (@vowels) {\n\t$text =~ s/$letter//g;\n    }\n\
    \    return $text;\n}", "    my $vowels = \"aeiou\";\n    $text =~ s/[$vowels]//g;\n\
    \    return $text;\n}", "    $text =~ s/[aeiou]//g;\n    return $text;\n}", " \
    \   my $vowels = qr/[aeiou]/i;\n    return $text =~ s/$vowels//gr;\n}", "    $text\
    \ =~ s/[aeiou]//g;\n    return $text;\n}", "    $text =~ s/[aeiouAEIOU]//g;\n\
    \    return $text;\n}", "    $text =~ s/[aeiou]//g;\n    return $text;\n}", " \
    \   $text =~ s/[aeiouAEIOU]//g;\n    return $text;\n}", "    return \"\" if ($text\
    \ eq \"\");\n    return $text if ($text !~ /[aeiouAEIOU]/);\n    return remove_vowels(substr($text,\
    \ 1)) if (substr($text, 0, 1) =~ /[aeiouAEIOU]/);\n    return substr($text, 0,\
    \ 1) . remove_vowels(substr($text, 1));\n}", "    $text =~ s/[aeiou]//gi;\n  \
    \  return $text;\n}", "    return $text =~ s/[aeiou]//gi;\n}", "    $text =~ s/[aeiouAEIOU]//g;\n\
    \    return $text;\n}", "    my $vowels = 'aeiouAEIOU';\n    $text =~ s/[$vowels]//g;\n\
    \    return $text;\n}", "    $text =~ s/[aeiou]//g;\n    return $text;\n}", " \
    \   return $text =~ s/[aeiou]//gir;\n}", "    $text =~ s/[aeiou]//g;\n    return\
    \ $text;\n}", "    $text =~ s/[aeiouAEIOU]//g;\n    return $text;\n}", "    $text\
    \ =~ s/[aeiou]//g;\n    return $text;\n}", "    # remove every vowel from $text\n\
    \    # remove every lowercase vowel from $text\n    $text =~ s/[aeiou]//g;\n \
    \   # remove every uppercase vowel from $text\n    $text =~ s/[AEIOU]//g;\n  \
    \  return $text;\n}", "    $text =~ s/[aeiouAEIOU]//g;\n    return $text;\n}",
  "    my($vowels) = '[aeiou]';", "    $text =~ s/[aeiou]//g;\n    return $text;\n\
    }", "    $text =~ s/[aeiou]//g;\n    return $text;\n}", "    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\");\n    my $regex\
    \ = join \"|\", @vowels;\n    $text =~ s/($regex)//g;\n    return $text;\n}",
  "    # Writing out a fully-qualified regex (i.e. qr//)\n    # makes it much easier\
    \ to read and understand.\n    my $vowels = qr/a|e|i|o|u/i;\n    # Using a s///\
    \ statement with a simple regex substitution\n    # is more flexible than using\
    \ a translation table.\n    $text =~ s/$vowels//g;\n    return $text;\n}", " \
    \   my($string) = $text;\n    $string =~ s/a|e|i|o|u//g;\n    return $string;\n\
    }", "    my @chars = split //, $text;\n    my @new_chars = ();\n    foreach my\
    \ $char (@chars) {\n        if ($char =~ /[^aeiou]/i) {\n            push @new_chars,\
    \ $char;\n        }\n    }\n    return join \"\", @new_chars;\n}", "    # remove\
    \ vowels from $text\n    # if there are no vowels in $text, just return $text\n\
    \    # if there are vowels in $text, remove them and return\n    if ($text =~\
    \ /[aeiou]/){\n        $text =~ s/[aeiou]//g;\n        return $text;\n    }\n\
    \    else {\n        return $text;\n    }\n}", "    $text =~ s/[aeiou]//g;\n \
    \   return $text;\n}", "    $text =~ s/[aeiou]//gi;\n    return $text;\n}", " \
    \   $text =~ s/[aeiou]//gi;\n    return $text;\n}", "    return $text =~ s/[aeiou]//gir;\n\
    }", "    return $text =~ s/[aeiou]//gr;\n}", "    return $text if $text eq \"\"\
    ;\n    $text =~ s/[aeiou]//gi;\n    return $text;\n}", "    $text =~ s/[aeiou]//g;\n\
    \    return $text;\n}", "    $text =~ s/[aeiouAEIOU]//g;\n    return $text;\n}",
  '    return $text if $text eq "";', "    $text =~ s/[aeiouAEIOU]//g;\n    return\
    \ $text;\n}", "    $text =~ s/[aeiou]//gi;\n    return $text;\n}", "    $text\
    \ =~ s/[aeiou]//g;\n    return $text;\n}", "    $text =~ s/[aeiou]//gi;\n    return\
    \ $text;\n}", "    my $to_return = \"\";\n    for my $character (split //, $text)\
    \ {\n        if ($character !~ /[aeiouAEIOU]/) {\n            $to_return .= $character;\n\
    \        }\n    }\n    return $to_return;\n}", "    $text =~ s/[aeiou]//g;\n \
    \   return $text;\n}", "    $text =~ s/[aeiou]//g;\n    return $text;\n}", " \
    \   my $result = '';\n    foreach my $char (split //, $text) {\n        $result\
    \ .= $char if $char !~ /[aeiou]/i;\n    }\n    return $result;\n}", "    return\
    \ \"\" if $text eq \"\";\n    my @vowels = ('a','e','i','o','u','A','E','I','O','U');\n\
    \    my $filtered_text = \"\";\n    for my $i (0..length($text)-1) {\n       \
    \ if (not (grep $_ eq substr($text, $i, 1), @vowels)) {\n            $filtered_text\
    \ .= substr($text, $i, 1);\n        }\n    }\n    return $filtered_text;\n}",
  "    return \"\" if !$text;\n    my @chars = split(//, $text);\n    my @result =\
    \ ();\n    foreach my $char (@chars) {\n        if ( $char =~ /[aeiou]/i ) {\n\
    \            next;\n        }\n        push(@result, $char);\n    }\n    return\
    \ join(\"\", @result);\n}", "    $text =~ s/[aeiou]//g;\n    return $text;\n}",
  "    my $vowels = { map { $_ => 1 } split(\"\", \"aeiouAEIOU\") };\n    my $res\
    \ = \"\";\n    for my $ch (split(\"\", $text)) {\n        if(!exists($vowels->{$ch}))\
    \ {\n            $res .= $ch;\n        }\n    }\n    return $res;\n}", "    $text\
    \ =~ s/[aeiou]//g;\n    return $text;\n}", "    $text =~ s/[aeiou]//gi;\n    return\
    \ $text;\n}", "    return $text unless $text;\n    my $result = '';\n    my $vowels\
    \ = 'aouieAOUIE';\n    my $i = 0;\n    while($i < length($text)) {\n        if(index($vowels,\
    \ substr($text, $i, 1)) == -1) {\n            $result .= substr($text, $i, 1);\n\
    \        }\n        $i++;\n    }\n    return $result;\n}", "    $text =~ s/[aeiou]//g;\n\
    \    return $text;\n}", "    return $text if ($text eq \"\");\n    my $vowels\
    \ = \"aeiouAEIOU\";\n    $text =~ s/[$vowels]//g;\n    return $text;\n}", "  \
    \  $text =~ s/[aeiou]//g;\n    return $text;\n}", "    return $text if $text eq\
    \ \"\";\n    my $first_letter = substr($text, 0, 1);\n    my $rest_of_text = substr($text,\
    \ 1);\n    if($first_letter eq \"a\" || $first_letter eq \"e\" || $first_letter\
    \ eq \"i\" || $first_letter eq \"o\" || $first_letter eq \"u\"){\n        return\
    \ remove_vowels($rest_of_text);\n    }\n    else{\n        return $first_letter\
    \ . remove_vowels($rest_of_text);\n    }\n}", "    return $text =~ s/[aeiou]//gr;\n\
    }", "    my @char = split(//, $text);\n    my @res;\n    foreach my $c (@char)\
    \ {\n        if ($c =~ /[^aeiou]/i) {\n            push(@res, $c);\n        }\n\
    \    }\n    my $res = join(\"\", @res);\n    return $res;\n}", "    my $vowels\
    \ = \"aeiou\";\n    my $new_text = \"\";\n    for (my $i = 0; $i < length($text);\
    \ $i++) {\n        my $ch = substr($text, $i, 1);\n        if (index($vowels,\
    \ $ch) < 0) {\n            $new_text .= $ch;\n        }\n    }\n    return $new_text;\n\
    }", "    $text =~ s/[aeiou]//g;\n    return $text;\n}", "    $text =~ s/[aeiou]//gi;\n\
    \    return $text;\n}", "    $text =~ s/[aeiou]//gi;\n    return $text;\n}", " \
    \   my $new_text = \"\";\n    my $index = 0;\n    while ($index < length($text))\
    \ {\n        if (substr($text, $index, 1) !~ /[aeiou]/i) {\n            $new_text\
    \ .= substr($text, $index, 1);\n        }\n        $index++;\n    }\n    return\
    \ $new_text;\n}", "    $text =~ s/[aeiou]//g;\n    return $text;\n}", "    return\
    \ $text =~ s/[aeiou]//gri;\n}", "    my @text_array = split //, $text;\n    my\
    \ @new_text_array = ();\n    foreach my $letter (@text_array) {\n        unless\
    \ ($letter =~ /a|e|i|o|u|A|E|I|O|U/) {\n            push @new_text_array, $letter;\n\
    \        }\n    }\n    my $new_text = join '', @new_text_array;\n    return $new_text;\n\
    }", "    my $result = \"\";\n    for (my $i = 0; $i < length($text); $i++) {\n\
    \        my $c = substr($text, $i, 1);\n        if (index(\"aeiouAEIOU\", $c)\
    \ == -1) {\n            $result .= $c;\n        }\n    }\n    return $result;\n\
    }", "    my $re = qr/[aeiouAEIOU]/;\n    $text =~ s/$re//g;\n    return $text;\n\
    }", "    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\"\
    , \"O\", \"U\");\n    my @characters = split(//, $text);\n    my @newtext = ();\n\
    \    for (my $i = 0; $i < scalar(@characters); $i++) {\n        my $char = $characters[$i];\n\
    \        if (grep {$_ eq $char} @vowels) {\n            next;\n        }\n   \
    \     push(@newtext, $char);\n    }\n    my $result = join(\"\", @newtext);\n\
    \    return $result;\n}", "    $text =~ s/[aeiou]//g;\n    return $text;\n}",
  "    $text =~ s/[aeiou]//g;\n    return $text;\n}", "    $text =~ s/[aeiouAEIOU]//g;\n\
    \    return $text;\n}", "    $text =~ s/[aeiou]//g;\n    return $text;\n}", " \
    \   $text =~ s/[aeiou]//g;\n    return $text;\n}", "    my $vowels = \"aeiouAEIOU\"\
    ;\n    my $new_text = \"\";\n    for (my $i = 0; $i < length($text); $i++) {\n\
    \        if (index($vowels, substr($text, $i, 1)) == -1) {\n            $new_text\
    \ .= substr($text, $i, 1);\n        }\n    }\n    return $new_text;\n}", "   \
    \ $text =~ s/[aeiouAEIOU]//g;\n    return $text;\n}", "    $text =~ s/[aeiouAEIOU]//g;\n\
    \    return $text;\n}", "    $text =~ s/[aeiou]//g;\n    return $text;\n}", " \
    \   my($answer);\n    my($vowels) = \"aeiouAEIOU\";\n    for my $i (0..length($text)-1)\
    \ {\n        my($c) = substr($text, $i, 1);\n        $answer .= $c if(index($vowels,\
    \ $c) == -1);\n    }\n    return $answer;\n}", "    my $vowels = \"AEIOUaeiou\"\
    ;\n    my $filtered_text = \"\";\n    for my $char (split //, $text) {\n     \
    \   if (index($vowels, $char) == -1) {\n            $filtered_text .= $char;\n\
    \        }\n    }\n    return $filtered_text;\n}", "    $text =~ s/[aeiouAEIOU]//g;\n\
    \    return $text;\n}", "    return $text =~ s/[aeiouAEIOU]//gr;\n}", "    $text\
    \ =~ s/[aeiou]//g;\n    return $text;\n}", "    $text =~ s/[aeiou]//g;\n    return\
    \ $text;\n}", "    $text =~ s/[aeiouAEIOU]//g;\n    return $text;\n}", "    $text\
    \ =~ s/[aeiou]//gi;\n    return $text;\n}", "    $text =~ s/[aeiou]//gi;\n   \
    \ return $text;\n}", "    $text =~ s/[aAeEiIoOuU]//g;\n    return $text;\n}",
  "    return $text =~ s/[aeiou]//gr;\n}", "    return $text =~ s/[aeiouAEIOU]//gr;\n\
    }", "    $text =~ s/[aeiouAEIOU]//g;\n    return $text;\n}", "    $text =~ s/[aeiou]//g;\n\
    \    return $text;\n}", "    return $text =~ s/[aeiou]//gi;\n}", "    $text =~\
    \ s/[aeiou]//g;\n    return $text;\n}", "    $text =~ s/[aeiou]//g;\n    return\
    \ $text;\n}", "    $text =~ s/[aeiou]//gi;\n    return $text;\n}", "    $text\
    \ =~ s/[aeiou]//gi;\n    return $text;\n}", "    $text =~ s/[aeiouAEIOU]//g;\n\
    \    return $text;\n}", "    my $pattern = qr/[aeiouAEIOU]/;\n    $text =~ s/$pattern//g;\n\
    \    return $text;\n}", "    $text =~ s/[aeiou]//g;\n    return $text;\n}", " \
    \   $text =~ s/[aeiou]//g;\n    return $text;\n}", "    $text =~ s/[aeiou]//gi;\n\
    \    return $text;\n}", "    $text =~ s/[aeiou]//g;\n    return $text;\n}", " \
    \   $text =~ s/[aeiou]//g;\n    return $text;\n}", "    my $result = \"\";\n \
    \   for (my $i = 0; $i < length($text); $i++) {\n        my $ch = substr($text,\
    \ $i, 1);\n        if (index(\"aeiouAEIOU\", $ch) == -1) {\n            $result\
    \ .= $ch;\n        }\n    }\n    return $result;\n}", "    return $text if $text\
    \ eq \"\";\n    if (substr($text, 0, 1) =~ /[aeiouAEIOU]/) {\n        return remove_vowels(substr($text,\
    \ 1));\n    } else {\n        return substr($text, 0, 1) . remove_vowels(substr($text,\
    \ 1));\n    }\n}", "    my $removed_vowels = $text;\n    $removed_vowels =~ s/[aeiou]//g;\n\
    \    return $removed_vowels;\n}", "    return $text =~ s/[aeiou]//g;\n}", "  \
    \  $text =~ s/[aeiou]//g;\n    return $text;\n}", "    return $text =~ s/[aeiou]//gi;\n\
    }", "    my $new_text = \"\";\n    for (my $i = 0; $i < length($text); $i++) {\n\
    \        my $char = substr($text, $i, 1);\n        if ($char !~ /[aeiou]/i) {\n\
    \            $new_text .= $char;\n        }\n    }\n    return $new_text;\n}",
  "    $text =~ s/[aeiou]//g;\n    return $text;\n}", "    $text =~ s/[aeiou]//g;\n\
    \    return $text;\n}", "    my $ret;\n    $ret = $text;\n    $ret =~ s/a//g;\n\
    \    $ret =~ s/e//g;\n    $ret =~ s/i//g;\n    $ret =~ s/o//g;\n    $ret =~ s/u//g;\n\
    \    return $ret;\n}", "    return \"\" if not defined $text;\n    $text =~ s/[aeiouAEIOU]//g;\n\
    \    return $text;\n}", "    return $text =~ s/[aeiou]//g;\n}", "    $text =~\
    \ s/[aeiou]//g;\n    return $text;\n}", "    $text =~ s/[aeiouAEIOU]//g;\n   \
    \ return $text;\n}", "    my($result) = \"\";\n    for (my($i) = 0; $i < length($text);\
    \ $i++) {\n        if (index(\"aeiouAEIOU\", substr($text, $i, 1)) < 0) {\n  \
    \          $result .= substr($text, $i, 1);\n        }\n    }\n    return $result;\n\
    }", "    my $result = \"\";\n    my $l = length($text);\n    for(my $i = 0; $i\
    \ < $l; $i++) {\n        my $c = lc(substr($text, $i, 1));\n        if (not($c\
    \ eq \"a\" or $c eq \"e\" or $c eq \"i\" or $c eq \"o\" or $c eq \"u\")) {\n \
    \           $result .= substr($text, $i, 1);\n        }\n    }\n    return $result;\n\
    }", "    $text =~ s/[aeiou]//g;\n    return $text;\n}", "    $text =~ s/[aeiou]//gi;\n\
    \    return $text;\n}", "    $text =~ s/[aeiou]//g;\n    return $text;\n}", " \
    \   $text =~ s/[aeiou]//gi;\n    return $text;\n}", "    my $result = \"\";\n\
    \    for (my $i = 0; $i < length($text); $i++) {\n        my $char = substr($text,\
    \ $i, 1);\n        $result .= $char if ($char !~ /^[aeiou]$/i);\n    }\n    return\
    \ $result;\n}", "    $text =~ s/[aeiou]//g;\n    return $text;\n}", "    my($result)\
    \ = \"\";\n    for (my($i) = 0; $i < length($text); $i++) {\n        if (index(\"\
    aeiouAEIOU\", substr($text, $i, 1)) == -1) {\n            $result .= substr($text,\
    \ $i, 1);\n        }\n    }\n    return $result;\n}", "    $text =~ s/[aeiou]//gi;\n\
    \    return $text;\n}", "    $text =~ s/[aeiou]//g;\n    return $text;\n}", " \
    \   $text =~ s/[aeiou]//g;\n    return $text;\n}", "    return join '', grep !/[aeiou]/i,\
    \ split //, $text;\n}", "    return '' if $text eq '';\n    $text =~ s/[aeiou]//g;\n\
    \    return $text;\n}", "    $text =~ s/[aeiou]//g;\n    return $text;\n}", " \
    \   return $text =~ s/[aeiou]//g;\n}", "    my $result = '';\n    my $vowels =\
    \ 'aeiouAEIOU';\n    my $vowels_len = length($vowels);\n    my $text_len = length($text);\n\
    \    for (my $i = 0; $i < $text_len; $i++) {\n        my $char = substr($text,\
    \ $i, 1);\n        my $is_vowel = 0;\n        for (my $j = 0; $j < $vowels_len;\
    \ $j++) {\n            if ($char eq substr($vowels, $j, 1)) {\n              \
    \  $is_vowel = 1;\n                last;\n            }\n        }\n        if\
    \ (!$is_vowel) {\n            $result .= $char;\n        }\n    }\n    return\
    \ $result;\n}", "    return $text =~ s/[aeiou]//ig;\n}", "    my @text = split\
    \ \"\", $text;\n    my @vowels = split \"\", \"aeiouAEIOU\";\n    my @output;\n\
    \    for my $word (@text) {\n        my $vowel_match = 0;\n        for my $vowel\
    \ (@vowels) {\n            if ($word eq $vowel) {\n                $vowel_match\
    \ = 1;\n            }\n        }\n        if ($vowel_match == 0) {\n         \
    \   push @output, $word;\n        }\n    }\n    my $output = join \"\", @output;\n\
    \    return $output;\n}", "    $text =~ s/[aeiouAEIOU]//g;\n    return $text;\n\
    }", "    $text =~ s/[aeiou]//g;\n    return $text;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
