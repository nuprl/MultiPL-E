name: HumanEval_57_monotonic
language: pl
prompt: "# Return 1 is array elements are monotonically increasing or decreasing.\n\
  # >>> monotonic([1, 2, 4, 20])\n# 1\n# >>> monotonic([1, 20, 4, 10])\n# \"\"\n#\
  \ >>> monotonic([4, 1, 0, -10])\n# 1\nsub monotonic {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&monotonic;\n\
  \        if(eq_deeply($candidate->([1, 2, 4, 10]),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 4, 20]),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 20, 4, 10]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([4, 1, 0, -10]),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1, 1,\
  \ 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 2, 5, 60]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
  \ 9, 9, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: ["    my($x, $d, $i);\n    $d = 0;\n    for ($i = 1; $i < @$l; $i++)\
    \ {\n\t$x = $l->[$i-1] <=> $l->[$i];\n\treturn \"\" if !$x;\n\treturn \"\" if\
    \ $d && $d != $x;\n\t$d = $x;\n    }\n    return 1;\n}", "    return unless @$l\
    \ >= 2;\n    my $dir = $l->[1] > $l->[0] ? 1 : -1;\n    for (my $i = 2; $i < @$l;\
    \ $i++) {\n        return if $dir == 1 && $l->[$i] < $l->[$i-1];\n        return\
    \ if $dir == -1 && $l->[$i] > $l->[$i-1];\n    }\n    return 1;\n}", "    my($d);\n\
    \    return 0 if $#$l < 1;\n    $d = $l->[1] <=> $l->[0];\n    return 0 if $d\
    \ == 0;\n    foreach my $i (1 .. $#$l - 1) {\n        my($d2) = $l->[$i + 1] <=>\
    \ $l->[$i];\n        return 0 if $d2 * $d < 0;\n    }\n    return 1;\n}", "  \
    \  my($i, $m, $mm);\n    for $i (1 .. $#$l) {\n\tif (defined($m)) {\n\t    $mm\
    \ = ${$l}[$i] - ${$l}[$i-1];\n\t    if ($mm != 0) {\n\t\treturn if $mm * $m <\
    \ 0;\n\t    }\n\t} else {\n\t    $m = ${$l}[$i] - ${$l}[$i-1];\n\t}\n    }\n \
    \   return 1;\n}", "    my($a, $b);\n    my($decreasing) = 0;\n    my($increasing)\
    \ = 0;\n    for (my $i = 0; $i < $#$l; $i++) {\n        $a = $l->[$i];\n     \
    \   $b = $l->[$i+1];\n        if ($a > $b) {\n            if ($increasing) {\n\
    \                return \"\";\n            }\n            $decreasing = 1;\n \
    \       } elsif ($a < $b) {\n            if ($decreasing) {\n                return\
    \ \"\";\n            }\n            $increasing = 1;\n        }\n    }\n    return\
    \ 1;\n}", "    my($a, $b);\n    for $a ( @$l ) {\n        for $b ( @$l ) {\n \
    \           if ($a < $b) {\n                return 0;\n            }\n       \
    \ }\n    }\n    return 1;\n}", "    my $step;\n    for (my $i = 1; $i < @$l; $i++)\
    \ {\n        my $d = $l->[$i] - $l->[$i-1];\n        if (defined $step) {\n  \
    \          return \"\" if $d * $step < 0;\n        } else {\n            $step\
    \ = $d;\n        }\n    }\n    return 1;\n}", "    my $c = 0;\n    for(my $i =\
    \ 1; $i < @$l; $i++) {\n        if(($l->[$i] - $l->[$i-1]) * $c < 0) {\n     \
    \       return \"\";\n        }\n        $c = $l->[$i] - $l->[$i-1];\n    }\n\
    \    return 1;\n}", "    my($i, $n);\n    return 0 if @$l < 2;\n    $n = $l->[0];\n\
    \    for ($i = 1; $i < @$l; $i++) {\n\tif ($n != $l->[$i]) {\n\t    return 0 if\
    \ $i != 1;\n\t    return 0 if $n < $l->[$i];\n\t    $n = $l->[$i];\n\t}\n    }\n\
    \    return 1;\n}", "    my($i, $f);\n    for $i (1 .. $#$l) {\n\treturn \"\"\
    \ if abs($l->[$i] - $l->[$i-1]) != 1;\n    }\n    return 1;\n}", "    my $state\
    \ = undef;\n    foreach my $i (1..$#$l) {\n        my $s = $l->[$i-1] <=> $l->[$i];\n\
    \        if(defined($state)) {\n            if($state != $s) {\n             \
    \   return undef;\n            }\n        } else {\n            $state = $s;\n\
    \        }\n    }\n    return defined($state) ? $state : 1;\n}", "    my($a) =\
    \ $l->[0];\n    my($i);\n    my($isinc);\n    my($isdec);\n    for($i = 1; $i\
    \ < @$l; $i++) {\n\tif ($l->[$i] > $a) {\n\t    $isinc = 1;\n\t} elsif ($l->[$i]\
    \ < $a) {\n\t    $isdec = 1;\n\t}\n\tif ($isinc && $isdec) {\n\t    return \"\"\
    ;\n\t}\n\t$a = $l->[$i];\n    }\n    return 1;\n}", "    my $d;\n    my $i;\n\
    \    my $m;\n    my $ret = 1;\n    my $n = @$l;\n    for ($i = 1; $i < $n; $i++)\
    \ {\n\t$m = $l->[$i] - $l->[$i - 1];\n\tif ($d) {\n\t    if ($m * $d < 0) {\n\t\
    \t$ret = \"\";\n\t\tlast;\n\t    }\n\t}\n\telse {\n\t    $d = $m;\n\t}\n    }\n\
    \    return $ret;\n}", "    if (@$l == 0) { return 0; }\n    if (@$l == 1) { return\
    \ 1; }\n    my($b) = $l->[0];\n    my($c) = $l->[1];\n    my($state) = 0;\n  \
    \  if ($b > $c) { $state = -1; }\n    if ($b < $c) { $state = 1; }\n    for (my($i)\
    \ = 2; $i < @$l; $i++) {\n\tmy($d) = $l->[$i];\n\tif ($state == -1 && $c < $d)\
    \ { return 0; }\n\tif ($state == 1 && $c > $d) { return 0; }\n\t$c = $d;\n   \
    \ }\n    return 1;\n}", "    my $monotonic = 1;\n    if ( @$l ) {\n        my\
    \ $prev = $l->[0];\n        for my $i ( 1 .. $#$l ) {\n            my $elt = $l->[$i];\n\
    \            if ( $elt < $prev ) {\n                $monotonic = 0;\n        \
    \        last;\n            }\n            $prev = $elt;\n        }\n    }\n \
    \   return $monotonic;\n}", "    my($last, $comparator);\n    foreach my $i (@$l)\
    \ {\n        if (defined $last) {\n            if (defined $comparator) {\n  \
    \              return 0 if $comparator * ($i - $last) < 0;\n            } else\
    \ {\n                $comparator = ($i - $last);\n            }\n        }\n \
    \       $last = $i;\n    }\n    return 1;\n}", "    return $#{$l} < 1 ? 1 : $l->[0]\
    \ == $l->[1] ? 1 :\n        $l->[0] < $l->[1] ?\n            monotonic([@{$l}[1..$#{$l}]])\
    \ &&\n            all([@{$l}[1..$#{$l}]], sub { shift < shift }) :\n         \
    \   monotonic([@{$l}[1..$#{$l}]]) &&\n            all([@{$l}[1..$#{$l}]], sub\
    \ { shift > shift });\n}", "    my $d = 0;\n    foreach my $i (1 .. scalar(@$l)\
    \ - 1) {\n        my $diff = $l->[$i] - $l->[$i - 1];\n        if($diff != 0)\
    \ {\n            if($d == 0) {\n                $d = $diff;\n            }\n \
    \           else {\n                if($d * $diff < 0) {\n                   \
    \ return 0;\n                }\n            }\n        }\n    }\n    return 1;\n\
    }", "    my($last);\n    return 1 if (! @$l);\n    $last = $l->[0];\n    for (@$l)\
    \ {\n\treturn if ($last < $_);\n\t$last = $_;\n    }\n    return 1;\n}", "   \
    \ return 1 if @$l < 2;\n    if ($l->[0] < $l->[1]) {\n        return 1 if all\
    \ { $_[0] < $_[1] } @$l;\n    } else {\n        return 1 if all { $_[0] > $_[1]\
    \ } @$l;\n    }\n    return \"\";\n}", "    my $n = @$l;\n    my $t = 0;\n   \
    \ my $i;\n    my $d = 0;", "    my($i, $m);\n    for ($i = 1; $i < @$l; $i++)\
    \ {\n\t$m = $l->[$i] - $l->[$i-1];\n\tif ($m < 0) {\n\t    return 0 if $m > 0;\n\
    \t} else {\n\t    return 0 if $m < 0;\n\t}\n    }\n    return 1;\n}", "    my($dir);\n\
    \    my($last);\n    $dir = \"\";\n    $last = 0;\n    foreach my $element (@$l)\
    \ {\n        if ($last) {\n            if ($element > $last) {\n             \
    \   if ($dir eq \"dec\") {\n                    return 0;\n                }\n\
    \                $dir = \"inc\";\n            }\n            elsif ($element <\
    \ $last) {\n                if ($dir eq \"inc\") {\n                    return\
    \ 0;\n                }\n                $dir = \"dec\";\n            }\n    \
    \    }\n        $last = $element;\n    }\n    return 1;\n}", "    if (all_same($l))\
    \ {\n        return 0;\n    }\n    for (my $i = 1; $i < @$l; $i++) {\n       \
    \ if ($l->[$i] - $l->[$i-1] == 0) {\n            return 0;\n        }\n    }\n\
    \    return 1;\n}", "    my $i = 0;\n    my $test = 0;\n    my $counter = 0;\n\
    \    while($i < @$l - 1){\n\tif($l->[$i] < $l->[$i+1]){\n\t    $test = 1;\n\t\
    }elsif($l->[$i] > $l->[$i+1]){\n\t    $test = -1;\n\t}\n\t$i++;\n\tif($test !=\
    \ 0){\n\t    $counter++;\n\t}\n    }\n    if($counter == 1){\n\treturn $test;\n\
    \    }else{\n\treturn 0;\n    }\n}", "    my($d, $p);\n    foreach $p (@$l) {\n\
    \        if (defined $d) {\n            if ($d == 0) {\n                return\
    \ '' if $p != $d;\n            } else {\n                return '' if ($p - $d)\
    \ / $d < 0;\n            }\n        }\n        $d = $p;\n    }\n    return 1;\n\
    }", "    my($i, $j);\n    my($rev) = 0;\n    my($const) = 1;\n    for($i = 1;\
    \ $i < @$l; $i++) {\n\t$j = $i - 1;\n\tif ($l->[$i] > $l->[$j]) {\n\t    $rev\
    \ = 0;\n\t} elsif ($l->[$i] < $l->[$j]) {\n\t    $rev = 1;\n\t} else {\n\t   \
    \ $const = 0;\n\t}\n\tif ($rev) {\n\t    return \"\" if ($l->[$i] > $l->[$j]);\n\
    \t} else {\n\t    return \"\" if ($l->[$i] < $l->[$j]);\n\t}\n    }\n    return\
    \ $const;\n}", "    return 0 if @$l < 2;\n    my $s = $l->[0] <=> $l->[1];\n \
    \   for (1..$#$l-1) {\n        my $prev = $l->[$_-1];\n        my $curr = $l->[$_];\n\
    \        my $next = $l->[$_+1];\n        if ($s) {\n            return 0 if $s\
    \ * ($curr <=> $next) < 0;\n        } else {\n            $s = $curr <=> $next;\n\
    \        }\n    }\n    return 1;\n}", "    return 0 if @$l < 2;\n    my $i = 1;\n\
    \    my $v = $l->[0];\n    while ($i < @$l) {\n        if ($l->[$i] > $v) {\n\
    \            return 0 if $i < @$l - 1 && $l->[$i+1] < $l->[$i];\n        } elsif\
    \ ($l->[$i] < $v) {\n            return 0 if $i < @$l - 1 && $l->[$i+1] > $l->[$i];\n\
    \        }\n        $v = $l->[$i];\n        $i++;\n    }\n    return 1;\n}", " \
    \   return 0 if @$l < 2;\n    if ($l->[0] < $l->[1]) {\n        for my $i (1..$#$l-1)\
    \ {\n            return 0 if $l->[$i] > $l->[$i+1];\n        }\n    } else {\n\
    \        for my $i (1..$#$l-1) {\n            return 0 if $l->[$i] < $l->[$i+1];\n\
    \        }\n    }\n    return 1;\n}", "    my $last = $l->[0];\n    my $monotonic\
    \ = 1;\n    my $sense = 1;\n    foreach my $val (@$l) {\n        if ($last ==\
    \ $val) {\n            # do nothing\n        } elsif ($last < $val) {\n      \
    \      if ($sense == -1) {\n                return \"\";\n            }\n    \
    \        $sense = 1;\n        } else {\n            if ($sense == 1) {\n     \
    \           return \"\";\n            }\n            $sense = -1;\n        }\n\
    \        $last = $val;\n    }\n    return $monotonic;\n}", "    my($r) = 0;\n\
    \    my($n) = -1;\n    foreach my $i (@$l) {\n        if($n > -1) {\n        \
    \    if($n < $i) {\n                if($r && $r != 1) {\n                    return\
    \ \"\";\n                }\n                $r = 1;\n            }\n         \
    \   elsif($n > $i) {\n                if($r && $r != -1) {\n                 \
    \   return \"\";\n                }\n                $r = -1;\n            }\n\
    \        }\n        $n = $i;\n    }\n    return $r;\n}", "    return -1 if @$l\
    \ < 2;\n    my $last = $l->[0];\n    for my $i (1..$#$l) {\n        my $next =\
    \ $l->[$i];\n        if ($last < $next) {\n            if ($monotonic == -1) {\n\
    \                return 0;\n            }\n            $monotonic = 1;\n     \
    \   } elsif ($last > $next) {\n            if ($monotonic == 1) {\n          \
    \      return 0;\n            }\n            $monotonic = -1;\n        }\n   \
    \     $last = $next;\n    }\n    return $monotonic;\n}", "    my($m);\n    for\
    \ my $i (1 .. @$l - 1) {\n        if (not $m) {\n            $m = $l->[$i - 1]\
    \ <=> $l->[$i];\n        }\n        elsif ($m * ($l->[$i - 1] <=> $l->[$i]) <\
    \ 0) {\n            return 0;\n        }\n    }\n    return 1;\n}", "    my($status)\
    \ = 1;\n    my($prev) = undef;\n    my($increasing) = undef;\n    for my $i (@$l)\
    \ {\n\tif (!defined($prev)) {\n\t    $prev = $i;\n\t    next;\n\t}\n\tif ($prev\
    \ == $i) {\n\t    next;\n\t}\n\tmy($new_increasing) = $prev < $i;\n\tif (!defined($increasing))\
    \ {\n\t    $increasing = $new_increasing;\n\t} elsif ($increasing != $new_increasing)\
    \ {\n\t    $status = \"\";\n\t    last;\n\t}\n\t$prev = $i;\n    }\n    return\
    \ $status;\n}", "    my($t, $i, $j);\n    my($n) = scalar(@$l);\n    my($last)\
    \ = $l->[0];\n    for ($i = 1; $i < $n; $i++) {\n\tif ($l->[$i] < $last) {\n\t\
    \    for ($j = $i+1; $j < $n; $j++) {\n\t\tif ($l->[$j] >= $last) {\n\t\t    return\
    \ \"\";\n\t\t}\n\t    }\n\t    return 1;\n\t} elsif ($l->[$i] > $last) {\n\t \
    \   for ($j = $i+1; $j < $n; $j++) {\n\t\tif ($l->[$j] <= $last) {\n\t\t    return\
    \ \"\";\n\t\t}\n\t    }\n\t    return 1;\n\t}\n\t$last = $l->[$i];\n    }\n  \
    \  return 1;\n}", "    my $u = $#{$l};\n    return 0 if $u < 1;\n    my $i = 0;\n\
    \    my $s = $$l[0] <=> $$l[1];\n    return 0 if $s == 0;\n    for ($i = 1; $i\
    \ < $u; $i++) {\n\tif ($s * ($$l[$i] <=> $$l[$i+1]) < 0) {\n\t    return 0;\n\t\
    }\n    }\n    return 1;\n}", "    my($inc, $dec) = (1, 1);\n    for (my $i = 1;\
    \ $i < @$l; $i++) {\n        $inc = 0 if $l->[$i] < $l->[$i-1];\n        $dec\
    \ = 0 if $l->[$i] > $l->[$i-1];\n    }\n    return ($inc or $dec);\n}", "    my($e1,\
    \ $e2, $p);\n    $e1 = $l->[0];\n    for ($p = 1; $p < scalar(@$l); $p++) {\n\t\
    $e2 = $l->[$p];\n\treturn \"\" if ($e1 < $e2 && $e2 < $l->[$p+1]);\n\treturn \"\
    \" if ($e1 > $e2 && $e2 > $l->[$p+1]);\n\t$e1 = $e2;\n    }\n    return 1;\n}",
  "    my($accum) = 0;\n    my($i);\n    my($prev) = $l->[0];\n    my($in_range) =\
    \ 1;\n    for ($i = 1; $i < @$l; $i++) {\n\tmy($delta) = $l->[$i] - $prev;\n\t\
    if (!$delta) { # same as previous\n\t    $accum += 0;\n\t} elsif ($accum == 0)\
    \ { # first time, when accum == 0\n\t    $accum = $delta;\n\t} elsif (($accum\
    \ > 0 && $delta > 0) ||\n\t\t ($accum < 0 && $delta < 0)) { # same sign\n\t  \
    \  $accum += $delta;\n\t} else { # sign changed\n\t    $in_range = 0;\n\t    last;\n\
    \t}\n\t$prev = $l->[$i];\n    }\n    return $in_range;\n}", "    my($i, $mono,\
    \ $inc);\n    $mono = 1;\n    $inc = ($l->[1] >= $l->[0]);\n    for ($i = 1; $i\
    \ < @$l-1; $i++) {\n\tif ($inc && $l->[$i+1] < $l->[$i]) {\n\t    $mono = 0;\n\
    \t    last;\n\t}\n\tif (!$inc && $l->[$i+1] > $l->[$i]) {\n\t    $mono = 0;\n\t\
    \    last;\n\t}\n    }\n    return $mono;\n}", "    my($t) = $l->[0];\n    for\
    \ (my $i = 1; $i < @$l; $i++) {\n        return if $t == $l->[$i];\n        $t\
    \ = $l->[$i];\n    }\n    return 1;\n}", "    my($inc, $dec) = (1, 1);\n    my($i,\
    \ $j);\n    for($i = 1; $i < @$l; $i++) {\n\t$inc = 0 if $l->[$i] < $l->[$i-1];\n\
    \t$dec = 0 if $l->[$i] > $l->[$i-1];\n    }\n    return ($inc + $dec);\n}", " \
    \   my($flag) = 1;\n    my($mono) = 0;\n    for (my($i) = 1; $i < @$l; $i++) {\n\
    \tmy($ltemp) = @$l[$i] - @$l[$i-1];\n\tif ($ltemp == 0) {\n\t    $flag = 0;\n\t\
    \    return \"\";\n\t} elsif ($flag == 1) {\n\t    if ($ltemp > 0) {\n\t\t$mono\
    \ = 1;\n\t    } else {\n\t\t$mono = 2;\n\t    }\n\t    $flag = 0;\n\t} elsif ($mono\
    \ == 1 && $ltemp < 0) {\n\t    return \"\";\n\t} elsif ($mono == 2 && $ltemp >\
    \ 0) {\n\t    return \"\";\n\t}\n    }\n    return $mono;\n}", "    return 0 if\
    \ @$l < 2;\n    my $c;\n    for(my $i = 1; $i < @$l; $i++) {\n\tif($l->[$i-1]\
    \ > $l->[$i]) {\n\t    return 0 if defined $c && $c == 1;\n\t    $c = -1;\n\t\
    } elsif($l->[$i-1] < $l->[$i]) {\n\t    return 0 if defined $c && $c == -1;\n\t\
    \    $c = 1;\n\t}\n    }\n    return 1;\n}", "    my $i;\n    my $sign = 0;\n\
    \    for ($i = 1; $i < @$l; $i++) {\n\tmy $diff = $l->[$i] - $l->[$i-1];\n\tif\
    \ ($diff) {\n\t    if ($sign) {\n\t\treturn \"\" if $sign * $diff < 0;\n\t   \
    \ } else {\n\t\t$sign = $diff;\n\t    }\n\t}\n    }\n    return 1;\n}", "    my($r)\
    \ = 1;\n    my($l1, $l2);\n    if (!defined($l) || @$l == 0) {\n        return\
    \ $r;\n    }", "    my $last = @$l[0];\n    my $ascending = 0;\n    my $descending\
    \ = 0;\n    foreach my $val (@$l) {\n        if($val > $last) {\n            $ascending\
    \ = 1;\n        }\n        if($val < $last) {\n            $descending = 1;\n\
    \        }\n        $last = $val;\n    }\n    if($ascending && $descending) {\n\
    \        return \"\";\n    } else {\n        return 1;\n    }\n}", "    my($n)\
    \ = scalar(@$l);\n    return(0) if $n <= 1;\n    my($sgn) = 1;\n    for(my($i)\
    \ = 1; $i < $n; $i++) {\n\tmy($test) = $l->[$i - 1] <=> $l->[$i];\n\tif($test\
    \ != 0) {\n\t    $sgn = $test;\n\t    last;\n\t}\n    }\n    for(my($i) = 1; $i\
    \ < $n; $i++) {\n\tmy($test) = $l->[$i - 1] <=> $l->[$i];\n\treturn(0) if $test\
    \ != 0 && $test != $sgn;\n    }\n    return(1);\n}", "    my($last) = @$l[0];\n\
    \    my($dir) = undef;\n    for my $n (@$l[1..$#$l]) {\n        my($d) = $n <=>\
    \ $last;\n        if ($dir && $d != $dir) {\n            return undef;\n     \
    \   }\n        $dir = $d;\n        $last = $n;\n    }\n    return $dir;\n}", " \
    \   my($sign) = 0;\n    foreach my $i (1 .. $#$l) {\n        my($s) = ($l->[$i]\
    \ - $l->[$i-1]) <=> 0;\n        if($sign == 0) {\n            $sign = $s;\n  \
    \      } elsif($sign * $s <= 0) {\n            return 0;\n        }\n    }\n \
    \   return 1;\n}", "    my $n = scalar(@$l);\n    my $mono = 1;\n    if($n > 0)\
    \ {\n        my $i = 0;\n        while($i < $n-1 && $mono) {\n            if($l->[$i]\
    \ <= $l->[$i+1]) {\n                $i++;\n            } else {\n            \
    \    $mono = 0;\n            }\n        }\n        if($mono) {\n            $i\
    \ = 0;\n            while($i < $n-1 && $mono) {\n                if($l->[$i] >=\
    \ $l->[$i+1]) {\n                    $i++;\n                } else {\n       \
    \             $mono = 0;\n                }\n            }\n        }\n    }\n\
    \    return $mono;\n}", "    my(@inc) = (1);\n    my(@dec) = (1);\n    for(my\
    \ $i = 1; $i < @$l; $i++) {\n        $inc[$i] = $inc[$i-1] && $l->[$i] >= $l->[$i-1];\n\
    \        $dec[$i] = $dec[$i-1] && $l->[$i] <= $l->[$i-1];\n    }\n    my $mi =\
    \ $inc[-1];\n    my $md = $dec[-1];\n    return $mi && $md ? 1 : $mi ? 1 : $md\
    \ ? -1 : \"\";\n}", "    if(@$l > 1){\n        my($x, $y) = @$l[0, 1];\n     \
    \   my($s) = $x <=> $y;\n        my($i);\n        for($i = 2; $i < @$l; $i++){\n\
    \            my($n) = $l->[$i];\n            my($t) = $y <=> $n;\n           \
    \ if($t){\n                return if($s * $t < 0);\n                $s = $t;\n\
    \            }\n            $y = $n;\n        }\n        return 1;\n    }\n  \
    \  return;\n}", "    my($x, $dx, $i);\n    $dx = 0;\n    foreach $x (@$l) {\n\t\
    $i = ($dx > 0) ? $x - $dx : $dx - $x;\n\tif ($i != 0) {\n\t    if ($dx == 0) {\n\
    \t\t$dx = $i;\n\t    }\n\t    elsif ($dx > 0) {\n\t\treturn 0 if ($i < 0);\n\t\
    \    }\n\t    else {\n\t\treturn 0 if ($i > 0);\n\t    }\n\t}\n    }\n    return\
    \ 1;\n}", "    my($n) = @$l;\n    my($i);\n    my($t);\n    my($s);\n    $s =\
    \ 0;\n    for($i = 1; $i < $n; $i++) {\n\t$t = $$l[$i-1] <=> $$l[$i];\n\tif($t\
    \ == 0) {\n\t    # If elements are equal then ignore them.\n\t    next;\n\t}\n\
    \tif($s == 0) {\n\t    $s = $t;\n\t} else {\n\t    if($s != $t) {\n\t\treturn\
    \ '';\n\t    }\n\t}\n    }\n    return $s;\n}", "    my $i = 1;\n    while (defined($l->[$i])\
    \ && ($l->[$i] - $l->[$i-1]) * ($l->[1] - $l->[0]) > 0) {\n        $i++;\n   \
    \ }\n    $i == @$l;\n}", "    my $previous = shift @$l;\n    foreach my $i (@$l)\
    \ {\n        if ($i > $previous) {\n            return 1;\n        } elsif ($i\
    \ < $previous) {\n            return 1;\n        }\n        $previous = $i;\n\
    \    }\n    return 1;\n}\nprint \"monotonic\\n\" if monotonic([1, 2, 4, 20]);\n\
    print \"monotonic\\n\" if monotonic([1, 20, 4, 10]);\nprint \"monotonic\\n\" if\
    \ monotonic([4, 1, 0, -10]);\nprint \"monotonic\\n\" if monotonic([4, 0, 0, -10]);\n\
    print \"monotonic\\n\" if monotonic([4, 0, 0, 10]);\nprint \"monotonic\\n\" if\
    \ monotonic([4, 20, 0, 10]);\nprint \"monotonic\\n\" if monotonic([4, 20, 20,\
    \ 20]);\nprint \"monotonic\\n\" if monotonic([4, 20, 20, 21]);\nprint \"monotonic\\\
    n\" if monotonic([4, 20, 20, -21]);\nprint \"monotonic\\n\" if monotonic([4, 20,\
    \ 20, -21]);\nprint \"monotonic\\n\" if monotonic([4, 20, 20, -21]);\nprint \"\
    monotonic\\n\" if monotonic([4, 20, 20, 21]);\nprint \"monotonic\\n\" if monotonic([4,\
    \ 20, 20, 22]);\nprint \"monotonic\\n\" if monotonic([4, 20, 20, 23]);\nprint\
    \ \"monotonic\\n\" if monotonic([4, 20, 20, 24]);\nprint \"monotonic\\n\" if monotonic([4,\
    \ 20, 20, 25]);\nprint \"monotonic\\n\" if monotonic([4, 20, 20, 26]);\nprint\
    \ \"monotonic\\n\" if monotonic([4, 20, 20, 27]);\nprint \"monotonic\\n\" if monotonic([4,\
    \ 20, 20, 28]);\nprint \"monotonic\\n", "    my $dir = 0;\n    my $last = undef;\n\
    \    for (@$l) {\n        if (defined $last) {\n            return 0 if ($dir\
    \ == 0);\n            return 0 if ($dir > 0 && $_ < $last);\n            return\
    \ 0 if ($dir < 0 && $_ > $last);\n        }\n        $dir = 1 if ($_ > $last);\n\
    \        $dir = -1 if ($_ < $last);\n        $last = $_;\n    }\n    return 1;\n\
    }", "    my($dir) = $l->[1] > $l->[0] ? 1 : -1;\n    for (my $i = 2; $i < @$l;\
    \ $i++) {\n        return \"\" if ($dir * ($l->[$i] - $l->[$i-1]) < 0);\n    }\n\
    \    return 1;\n}", "    my($c);\n    my($i);\n    return 1 if($#$l <= 0);\n \
    \   $c = $l->[0] <=> $l->[1];\n    for ($i = 2; $i <= $#$l; $i++) {\n        if\
    \ ($c * ($l->[$i-1] <=> $l->[$i]) <= 0) {\n            return \"\";\n        }\n\
    \    }\n    return 1;\n}", "    my($last) = undef;\n    my($prev) = undef;\n \
    \   my($going_up) = undef;\n    my($going_down) = undef;\n    foreach my $i (@$l)\
    \ {\n        if(!defined($last)) {\n            $last = $i;\n            next;\n\
    \        }\n        if(!defined($prev)) {\n            $prev = $i;\n         \
    \   if($i > $last) {\n                $going_up = 1;\n            } elsif($i <\
    \ $last) {\n                $going_down = 1;\n            }\n            next;\n\
    \        }\n        if($going_up) {\n            if($i < $prev) {\n          \
    \      return undef;\n            }\n        } elsif($going_down) {\n        \
    \    if($i > $prev) {\n                return undef;\n            }\n        }\n\
    \        $prev = $i;\n    }\n    return 1;\n}", "    my $flag = 0;\n    my $i\
    \ = 0;\n    while ($i < scalar(@$l)-1) {\n        if ($l->[$i] == $l->[$i+1])\
    \ {\n            $i++;\n            next;\n        }\n        elsif ($l->[$i]\
    \ < $l->[$i+1]) {\n            $flag = 1;\n            $i++;\n            next;\n\
    \        }\n        elsif ($l->[$i] > $l->[$i+1]) {\n            $flag = -1;\n\
    \            $i++;\n            next;\n        }\n    }\n    if ($flag == 0) {\n\
    \        return;\n    }\n    if ($flag == 1) {\n        return 1;\n    }\n   \
    \ if ($flag == -1) {\n        return 1;\n    }\n}", "    return 1 if scalar(@$l)\
    \ < 2;\n    my $diff = $l->[1] - $l->[0];\n    foreach my $i (2..scalar(@$l)-1)\
    \ {\n        my $next_diff = $l->[$i] - $l->[$i-1];\n        if ($diff * $next_diff\
    \ < 0) {\n            return \"\";\n        }\n        $diff = $next_diff;\n \
    \   }\n    return 1;\n}", "    my $n = @$l;\n    return 0 if $n < 2;\n    my $t\
    \ = $l->[0] - $l->[1];\n    for my $i (1 .. $n-2) {\n\tmy $p = $l->[$i] - $l->[$i+1];\n\
    \treturn 0 if $p*$t < 0;\n    }\n    return 1;\n}", "    my($d) = (\n        ($l->[1]\
    \ > $l->[0]) -\n        ($l->[1] < $l->[0])\n    );\n    for my $i (1 .. $#$l)\
    \ {\n        if (($l->[$i] > $l->[$i-1]) - ($l->[$i] < $l->[$i-1]) != $d) {\n\
    \            return '';\n        }\n    }\n    return 1;\n}", "    my($i, $j,\
    \ $k);\n    my($len) = @$l;\n    $i = 0;\n    while ($i < $len-1) {\n\t$j = $i+1;\n\
    \t$k = $l->[$i] <=> $l->[$j];\n\treturn \"\" if $k == 0;\n\twhile ($j < $len-1)\
    \ {\n\t    $j++;\n\t    return \"\" if $k != ($l->[$j-1] <=> $l->[$j]);\n\t}\n\
    \t$i = $j;\n    }\n    return 1;\n}", "    my($s);\n    for ( $s = $$l[0], 0 ..\
    \ $#{$l}-1 ) {\n        if ( $$l[$_] < $$l[$_+1] ) {\n            return \"\"\
    ;\n        }\n    }\n    return 1;\n}", "    my($i);\n    my($pd);\n    my($d);\n\
    \    for ($i = 1; $i < @$l; $i++) {\n\tif (! defined($pd)) {\n\t    $pd = $l->[$i]\
    \ - $l->[$i-1];\n\t} else {\n\t    $d = $l->[$i] - $l->[$i-1];\n\t    if ($d &&\
    \ $d != $pd) {\n\t\treturn undef;\n\t    }\n\t}\n    }\n    return $pd;\n}", " \
    \   my(@l) = @$l;\n    my($sign) = 0;\n    foreach $l (@l) {\n\tif ($sign) {\n\
    \t    if ($sign * ($l - $last) < 0) {\n\t\treturn 0;\n\t    }\n\t} else {\n\t\
    \    $sign = $l - $last;\n\t}\n\t$last = $l;\n    }\n    return 1;\n}", "    my\
    \ $i;\n    for($i = 1; $i < scalar(@$l) && ($l->[$i] == $l->[$i-1] || abs($l->[$i]\
    \ - $l->[$i-1]) == 1); $i++) {\n        ;\n    }\n    return $i == scalar(@$l);\n\
    }", "    return 1 if ( (is_increasing($l) == 1) || (is_decreasing($l) == 1) );\n\
    \    return \"\";\n}", "    my $c = $l->[0];\n    my $prev_c = $c;\n    for my\
    \ $i (1 .. $#$l) {\n        my $x = $l->[$i];\n        if ($c < 0) {\n       \
    \     return \"\" if $prev_c > $x;\n        } else {\n            return \"\"\
    \ if $prev_c < $x;\n        }\n        $prev_c = $x;\n    }\n    return 1;\n}",
  "    my($e1, $e2, $inc, $dec, $i);\n    $e1 = $l->[0];\n    for ($i = 1; $i < scalar(@$l);\
    \ $i++) {\n\t$e2 = $l->[$i];\n\treturn \"\" if ($e1 == $e2);\n\t$inc = ($e1 <\
    \ $e2) if (!defined($inc));\n\t$dec = ($e1 > $e2) if (!defined($dec));\n\treturn\
    \ \"\" if ($inc != ($e1 < $e2) || $dec != ($e1 > $e2));\n\t$e1 = $e2;\n    }\n\
    \    return 1;\n}", "    my($i);\n    my($a) = $l->[0];\n    my($b) = $l->[1];\n\
    \    for ($i = 2; $i < @$l; $i++) {\n\treturn \"\" if (($a - $b) * ($b - $l->[$i])\
    \ < 0);\n\t$a = $b;\n\t$b = $l->[$i];\n    }\n    return 1;\n}", "    my $r =\
    \ (shift @$l) <=> (shift @$l);\n    my $p = 0;\n    for(@$l) {\n        my $c\
    \ = $_ <=> $p;\n        return '' if $c != $r && $c != 0;\n        $p = $_;\n\
    \    }\n    return 1;\n}", "    my($i);\n    my($prev);\n    my($incr);\n    my($decr);",
  "    my($n) = scalar(@$l);\n    my($i, $sign);\n    return 1 if $n < 2;\n    $sign\
    \ = $l->[1] <=> $l->[0];\n    if ($sign != 0) {\n\tfor ($i = 2; $i < $n; $i++)\
    \ {\n\t    return '' if $sign * ($l->[$i] <=> $l->[$i-1]) < 0;\n\t}\n    }\n \
    \   return 1;\n}", "    my $prev = $l->[0];\n    my $increasing = 0;\n    my $decreasing\
    \ = 0;\n    for my $cur(@$l) {\n        if($cur >= $prev) {\n            $increasing\
    \ = 1;\n        }\n        if($cur <= $prev) {\n            $decreasing = 1;\n\
    \        }\n        return '' if($increasing && $decreasing);\n        $prev =\
    \ $cur;\n    }\n    return 1;\n}", "    my($x);\n    my($d);\n    my($i);\n  \
    \  $x = @$l[0];\n    $d = 0;\n    for($i = 1; $i < @$l; $i++) {\n\tif(@$l[$i]\
    \ > $x) {\n\t    if($d > 0) {\n\t\treturn 0;\n\t    }\n\t    $d = 1;\n\t} elsif(@$l[$i]\
    \ < $x) {\n\t    if($d < 0) {\n\t\treturn 0;\n\t    }\n\t    $d = -1;\n\t}\n\t\
    $x = @$l[$i];\n    }\n    return 1;\n}", "    return 0 if @$l < 2;\n    if ($l->[0]\
    \ < $l->[1]) {\n        for my $i (1..$#$l - 1) {\n            return 0 if $l->[$i]\
    \ > $l->[$i + 1];\n        }\n    } else {\n        for my $i (1..$#$l - 1) {\n\
    \            return 0 if $l->[$i] < $l->[$i + 1];\n        }\n    }\n    return\
    \ 1;\n}", "    my $n = scalar(@$l);\n    my $direction = 0;\n    for (my $i =\
    \ 1; $i < $n; $i++) {\n        if ($l->[$i] > $l->[$i-1]) {\n            return\
    \ '' if $direction < 0;\n            $direction = 1;\n        }\n        elsif\
    \ ($l->[$i] < $l->[$i-1]) {\n            return '' if $direction > 0;\n      \
    \      $direction = -1;\n        }\n    }\n    return 1;\n}", "    my($i);\n \
    \   for ($i = 1; $i < @$l; $i++) {\n\tif (($$l[$i-1] > $$l[$i]) && !($$l[$i-1]\
    \ == 255 && $$l[$i] == 0)) {\n\t    return \"\";\n\t}\n    }\n    return 1;\n}",
  "    my($ret) = -1;\n    my($k);\n    my($v);\n    my($i);\n    my($e);\n    my($d);\n\
    \    my($len);", "    my($tmp);\n    if(!@$l) {\n        return '';\n    }\n \
    \   for(my $i = 1; $i < @$l; $i++) {\n        if($l->[$i] > $l->[$i-1]) {\n  \
    \          if(defined($tmp) && $tmp == -1) {\n                return '';\n   \
    \         }\n            $tmp = 1;\n        }\n        elsif($l->[$i] < $l->[$i-1])\
    \ {\n            if(defined($tmp) && $tmp == 1) {\n                return '';\n\
    \            }\n            $tmp = -1;\n        }\n    }\n    return $tmp;\n}",
  "    return 0 if $#{$l} < 1;\n    my $c;\n    my $sign = 0;\n    my $prev = $l->[0];\n\
    \    for $c (@{$l}[1..$#{$l}]) {\n        if ($prev < $c) {\n            if ($sign\
    \ == -1) {\n                return 0;\n            }\n            $sign = 1;\n\
    \        } elsif ($prev > $c) {\n            if ($sign == 1) {\n             \
    \   return 0;\n            }\n            $sign = -1;\n        }\n        $prev\
    \ = $c;\n    }\n    return 1;\n}", "    return 0 if scalar(@$l) < 2;\n    if($l->[0]\
    \ > $l->[1]) {\n        for(my $i = 2; $i < scalar(@$l); $i++) {\n           \
    \ return 0 if $l->[$i-1] <= $l->[$i];\n        }\n    }\n    else {\n        for(my\
    \ $i = 2; $i < scalar(@$l); $i++) {\n            return 0 if $l->[$i-1] >= $l->[$i];\n\
    \        }\n    }\n    return 1;\n}", "    my($prev) = shift @$l;\n    my($direction)\
    \ = undef;\n    my($d);\n    for my $e (@$l) {\n        $d = $e <=> $prev;\n \
    \       if (defined $direction) {\n            if ($d != $direction) {\n     \
    \           return \"\";\n            }\n        } else {\n            $direction\
    \ = $d;\n        }\n        $prev = $e;\n    }\n    return $direction;\n}", " \
    \   my($a, $b);\n    while (($a, $b) = splice(@$l, 0, 2)) {\n        last if $a\
    \ != $b && $a < $b != $b < $a;\n    }\n    return defined($b) ? '' : 1;\n}", " \
    \   my($i);\n    my($op, $op1);\n    my($op0) = ($l->[0] <=> $l->[1]);\n    for\
    \ ($i = 2; $i < @$l; $i++) {\n\t$op1 = ($l->[$i-1] <=> $l->[$i]);\n\tif ($op1\
    \ && $op1 != $op0) {\n\t    return '';\n\t}\n\t$op0 = $op1;\n    }\n    return\
    \ 1;\n}", "    my($prev) = $l->[0];\n    my($trend) = undef;\n    foreach my $i\
    \ (@$l) {\n\tif(defined($trend)) {\n\t    if($trend eq 'up') {\n\t\treturn \"\"\
    \ if $i < $prev;\n\t    }\n\t    elsif($trend eq 'down') {\n\t\treturn \"\" if\
    \ $i > $prev;\n\t    }\n\t}\n\telse {\n\t    if($i > $prev) {\n\t\t$trend = 'up';\n\
    \t    }\n\t    elsif($i < $prev) {\n\t\t$trend = 'down';\n\t    }\n\t}\n\t$prev\
    \ = $i;\n    }\n    return 1;\n}", "    my($ok) = 1;\n    my($t) = $l->[0];\n\
    \    my($i);\n    for($i = 1; $i < @$l; $i++) {\n\tif ($t * $l->[$i] < 0) {\n\t\
    \    $ok = 0;\n\t    last;\n\t}\n\t$t = $l->[$i];\n    }\n    return $ok;\n}",
  "    my($i, $m);\n    if (@$l <= 1) {\n\treturn 1;\n    }\n    $m = $l->[0] <=>\
    \ $l->[1];\n    for ($i = 1; $i < @$l - 1; $i++) {\n\tif (($l->[$i] <=> $l->[$i\
    \ + 1]) != $m) {\n\t    return \"\";\n\t}\n    }\n    return 1;\n}", "    my $length\
    \ = scalar(@$l);\n    for (my $i = 1; $i < $length; $i++) {\n        my $diff\
    \ = $$l[$i] - $$l[$i - 1];\n        if ($diff * $diff < 0) {\n            return\
    \ \"\";\n        }\n    }\n    return 1;\n}", "    my $direction = shift @$l;\n\
    \    foreach my $e (@$l) {\n        if ($direction == 1 && $e < $last) {\n   \
    \         return \"\";\n        }\n        if ($direction == -1 && $e > $last)\
    \ {\n            return \"\";\n        }\n        $last = $e;\n    }\n    return\
    \ $direction;\n}", "    my $i;\n    my $j;\n    my $c;\n    $c = $l->[0];\n  \
    \  for ($i = 1; $i < scalar(@$l); $i++) {\n\tif ($c <= $l->[$i]) {\n\t    $c =\
    \ $l->[$i];\n\t} else {\n\t    return \"\";\n\t}\n    }\n    return 1;\n}", " \
    \   my($i);\n    my($d);\n    my($ret);", "    my($o) = 0;\n    foreach(1..@$l\
    \ - 1) {\n        my($d) = $l->[$_] - $l->[$_ - 1];\n        return '' if $d ==\
    \ 0;\n        if($o == 0) {\n            $o = ($d > 0) ? 1 : -1;\n        } else\
    \ {\n            return '' if $o != (($d > 0) ? 1 : -1);\n        }\n    }\n \
    \   return 1;\n}", "    my($non_zero_count, $increasing, $decreasing) = (0, 0,\
    \ 0);\n    for (my $i = 1; $i < @$l; $i++) {\n        if($l->[$i - 1] == 0 &&\
    \ $l->[$i] == 0) {\n            next;\n        }\n        $non_zero_count++;\n\
    \        if($l->[$i - 1] == 0) {\n            $increasing = 1;\n        } elsif($l->[$i]\
    \ == 0) {\n            $decreasing = 1;\n        } elsif($l->[$i - 1] < $l->[$i])\
    \ {\n            $increasing = 1;\n        } elsif($l->[$i - 1] > $l->[$i]) {\n\
    \            $decreasing = 1;\n        }\n    }\n    if($non_zero_count == 0)\
    \ {\n        return 1;\n    }\n    if($increasing && $decreasing) {\n        return\
    \ \"\";\n    }\n    return 1;\n}", "    for(my $i = 1; $i < scalar(@$l); $i++)\
    \ {\n        if($l->[$i] <= $l->[$i-1]) {\n            return \"\";\n        }\n\
    \    }\n    return 1;\n}", "    my($prev) = shift @$l;\n    my($delta) = 0;\n\
    \    for my $v (@$l) {\n\t$delta += ($v - $prev) if !$delta;\n\t$delta *= ($v\
    \ - $prev) > 0 ? 1 : -1;\n\t$prev = $v;\n    }\n    return $delta == 1 || $delta\
    \ == -1;\n}", "    my($lx) = $l->[0];\n    my($sgn);\n    my($i);\n    for($i\
    \ = 1; $i < scalar(@$l); $i++) {\n\tmy($x) = $l->[$i];\n\tmy($xm) = $x - $lx;\n\
    \tif($xm != 0) {\n\t    my($sgnx) = $xm/abs($xm);\n\t    if(!defined($sgn)) {\n\
    \t\t$sgn = $sgnx;\n\t    } elsif($sgn != $sgnx) {\n\t\treturn \"\";\n\t    }\n\
    \t}\n\t$lx = $x;\n    }\n    return 1;\n}", "    my $n = @$l;\n    my $i;\n  \
    \  for ($i = 1; $i < $n; $i++) {\n\treturn \"\" if ($l->[$i] < $l->[$i-1]);\n\
    \    }\n    return 1;\n}", "    my $i = 0;\n    my $direction = 0;\n    for my\
    \ $e (@$l) {\n        if ($i) {\n            if ($direction == 0) {\n        \
    \        if ($e > $l->[$i-1]) {\n                    $direction = 1;\n       \
    \         } elsif ($e < $l->[$i-1]) {\n                    $direction = -1;\n\
    \                }\n            } else {\n                if ($direction == 1\
    \ && $e < $l->[$i-1]) {\n                    return \"\";\n                } elsif\
    \ ($direction == -1 && $e > $l->[$i-1]) {\n                    return \"\";\n\
    \                }\n            }\n        }\n        $i++;\n    }\n    return\
    \ 1;\n}", "    my(@ar) = @$l;\n    my($res) = 0;\n    my($i);\n    my($dec) =\
    \ 1;\n    my($inc) = 1;\n    my($len) = @ar;\n    for ($i = 1; $i < $len; $i++)\
    \ {\n\tif ($ar[$i - 1] > $ar[$i]) {\n\t    $inc = 0;\n\t}\n\tif ($ar[$i - 1] <\
    \ $ar[$i]) {\n\t    $dec = 0;\n\t}\n    }\n    if ($inc || $dec) {\n\t$res = 1;\n\
    \    }\n    return $res;\n}", "    my($cmp) = '';\n    my($r);\n    foreach $r\
    \ (@$l) {\n        if ($cmp eq '') {\n            $cmp = $r;\n        } elsif\
    \ ($cmp < $r) {\n            $cmp = $r;\n        } elsif ($cmp > $r) {\n     \
    \       return '';\n        }\n    }\n    return 1;\n}", "    my($r, $i, $n);\n\
    \    $r = -1;\n    $n = scalar(@$l);\n    for($i = 1; $i < $n; $i++){\n\tif($l->[$i]\
    \ > $l->[$i-1]){\n\t    return 0 if($r == -1);\n\t    return 0 if($r == 1);\n\t\
    \    $r = 0;\n\t}elsif($l->[$i] < $l->[$i-1]){\n\t    return 0 if($r == -1);\n\
    \t    return 0 if($r == 0);\n\t    $r = 1;\n\t}\n    }\n    return 1;\n}", " \
    \   my $l_m1 = @$l - 1;\n    my $inc = 0;\n    my $dec = 0;\n    for my $i (1\
    \ .. $l_m1) {\n        if ($l->[$i - 1] < $l->[$i]) {\n            $inc = 1;\n\
    \        }\n        if ($l->[$i - 1] > $l->[$i]) {\n            $dec = 1;\n  \
    \      }\n    }\n    return $inc + $dec == 1 ? 1 : \"\";\n}", "    my($i);\n \
    \   my($last);\n    my($diff);\n    my($last_diff);\n    my($direction);\n   \
    \ $direction = 0;\n    $last = $l->[0];\n    $last_diff = $last;\n    for ($i\
    \ = 1; $i < @$l; $i++) {\n\t$diff = $l->[$i] - $last;\n\tif ($direction == 0)\
    \ {\n\t    $direction = $diff;\n\t} elsif ($direction != $diff) {\n\t    return\
    \ \"\";\n\t}\n\t$last = $l->[$i];\n    }\n    return 1;\n}", "    return 1 if\
    \ !@$l;\n    my $inc = $l->[0] < $l->[1];\n    my $inc_or_dec = $inc || $l->[0]\
    \ > $l->[1];\n    my $result = 1;\n    my $prev = $l->[0];\n    for my $x (@$l[1..$#$l])\
    \ {\n        my $x_inc = $prev < $x;\n        if ($inc_or_dec) {\n           \
    \ if ($inc) {\n                $result = 0 if $x_inc == 0 || $x_inc == -1;\n \
    \           } else {\n                $result = 0 if $x_inc == 0 || $x_inc ==\
    \ 1;\n            }\n        } else {\n            $inc_or_dec = 1;\n        \
    \    $inc = $x_inc;\n        }\n        $prev = $x;\n    }\n    $result;\n}",
  "    my $m1 = 1;\n    my $m2 = 1;\n    for (my $i = 1; $i < @$l; $i++) {\n     \
    \   $m1 *= (($l->[$i] - $l->[$i-1]) > 0);\n        $m2 *= (($l->[$i] - $l->[$i-1])\
    \ < 0);\n    }\n    return $m1 || $m2;\n}", "    my $i;\n    for $i (1 .. $#$l)\
    \ {\n\tif ($l->[$i-1] > $l->[$i]) {\n\t    return 0;\n\t}\n    }\n    return 1;\n\
    }", "    return 1 if @$l == 1;\n    return 0 if $l->[0] == $l->[1];\n    return\
    \ 1 if @$l == 2;\n    my $inc = $l->[0] < $l->[1];\n    my $i = 2;\n    while\
    \ ($i < @$l) {\n        return 0 if $inc xor $l->[$i-1] < $l->[$i];\n        $i++;\n\
    \    }\n    return 1;\n}", "    my($a, $b, $c, $t);\n    for($a = $b = shift(@$l);\
    \ (@$l); $a = $b, $b = $c, $c = shift(@$l)) {\n\t$t = $a <=> $b;\n\treturn \"\"\
    \ if($t * ($b <=> $c) < 0);\n    }\n    return 1;\n}", "    return '' unless @$l\
    \ >= 2;\n    my($first, $last) = ($l->[0], $l->[1]);\n    my($inc) = $first <\
    \ $last;\n    my($i);\n    for ($i = 2; $i < @$l; $i++) {\n\tmy($next) = $l->[$i];\n\
    \treturn '' if $inc && $last > $next || !$inc && $last < $next;\n\t$last = $next;\n\
    \    }\n    return 1;\n}", "    my($s) = $l->[0];\n    my($i);\n    for ($i =\
    \ 1; $i < @$l; $i++) {\n\tif ($s < $l->[$i]) {\n\t    return if ($s == $l->[$i-1]);\n\
    \t    last;\n\t}\n\tif ($s > $l->[$i]) {\n\t    return if ($s == $l->[$i-1]);\n\
    \t    $s = -1;\n\t    last;\n\t}\n    }\n    for (; $i < @$l; $i++) {\n\treturn\
    \ if (($s < 0 && $l->[$i] > $l->[$i-1]) ||\n\t\t   ($s > 0 && $l->[$i] < $l->[$i-1]));\n\
    \    }\n    return 1;\n}", "    my $fl = [@$l];\n    if (is_ascending($fl)) {\n\
    \        return 1;\n    } elsif (is_descending($fl)) {\n        return 1;\n  \
    \  } else {\n        return \"\";\n    }\n}", "    my $inc = 0;\n    my $dec =\
    \ 0;\n    my $n = scalar(@$l);\n    for (my $i = 1; $i < $n; $i++) {\n       \
    \ my $d = $l->[$i] - $l->[$i-1];\n        $inc++ if $d > 0;\n        $dec++ if\
    \ $d < 0;\n    }\n    return 1 if $inc == $n-1;\n    return 1 if $dec == $n-1;\n\
    \    return \"\";\n}", "    my $incr = 1;\n    my $decr = 1;\n    my $diff;\n\
    \    my $i;\n    for($i = 1; $i < @$l; $i++) {\n        $diff = $$l[$i] - $$l[$i-1];\n\
    \        $incr = 0 if($diff < 0);\n        $decr = 0 if($diff > 0);\n    }\n \
    \   return $incr || $decr;\n}", "    my($t) = 'a'; # a or d\n    for(my $i = 1;\
    \ $i < @$l; $i++) {\n        return '' if $l->[$i] < $l->[$i-1] && $t eq 'a';\n\
    \        return '' if $l->[$i] > $l->[$i-1] && $t eq 'd';\n        $t = $l->[$i]\
    \ > $l->[$i-1] ? 'a' : 'd';\n    }\n    return 1;\n}", "    my($i, $inc, $n);\n\
    \    $inc = 0;\n    $n = scalar(@$l);\n    for($i = 1; $i < $n; $i++) {\n\tif($$l[$i-1]\
    \ < $$l[$i]) {\n\t    if($inc == -1) {\n\t\treturn \"\";\n\t    }\n\t    $inc\
    \ = 1;\n\t} elsif($$l[$i-1] > $$l[$i]) {\n\t    if($inc == 1) {\n\t\treturn \"\
    \";\n\t    }\n\t    $inc = -1;\n\t}\n    }\n    if($inc == 1) {\n\treturn \"Increasing\"\
    ;\n    } elsif($inc == -1) {\n\treturn \"Decreasing\";\n    } else {\n\treturn\
    \ \"\";\n    }\n}", "    my($r) = monotonic_r($l);\n    return ($r == 1 || $r\
    \ == -1) ? 1 : \"\";\n}", "    my($increase) = undef;\n    foreach my $i (1 ..\
    \ $#$l) {\n        my($d) = $l->[$i - 1] <=> $l->[$i];\n        next if $d ==\
    \ 0;\n        if (defined $increase) {\n            return undef if $d != $increase;\n\
    \        } else {\n            $increase = $d;\n        }\n    }\n    return $increase;\n\
    }", "    my($monotonic) = 0;\n    my($inc) = 1;\n    for my $i (1 .. $#$l) {\n\
    \        if ($l->[$i] == $l->[$i-1]) {\n            next;\n        }\n       \
    \ elsif ($l->[$i] > $l->[$i-1]) {\n            if ($monotonic == 0) {\n      \
    \          $monotonic = 1;\n            }\n            elsif ($monotonic == 2)\
    \ {\n                return \"\";\n            }\n        }\n        elsif ($l->[$i]\
    \ < $l->[$i-1]) {\n            if ($monotonic == 0) {\n                $monotonic\
    \ = 2;\n            }\n            elsif ($monotonic == 1) {\n               \
    \ return \"\";\n            }\n        }\n    }\n    return $monotonic;\n}", " \
    \   return 1 if @$l <= 1;\n    my $increasing = $l->[0] < $l->[1];\n    for (my\
    \ $i = 1; $i < @$l - 1; $i++) {\n        my $increasing_now = $l->[$i] < $l->[$i+1];\n\
    \        return \"\" if $increasing != $increasing_now;\n    }\n    return 1;\n\
    }", "    my($prev, $m, $n);\n    $m = $n = 0;\n    for(@$l) {\n        if(defined\
    \ $prev) {\n            if($_ > $prev) {\n                $m = 1 if !$m;\n   \
    \             return if $n;\n            }\n            if($_ < $prev) {\n   \
    \             $n = 1 if !$n;\n                return if $m;\n            }\n \
    \       }\n        $prev = $_;\n    }\n    return 1;\n}", "    my(@a) = @$l;\n\
    \    my($diff);\n    return 1 if scalar(@a) < 2;\n    $diff = $a[1] - $a[0];\n\
    \    foreach $i (1..$#a) {\n\tmy($d) = $a[$i] - $a[$i-1];\n\tif ($d * $diff <\
    \ 0) {\n\t    return \"\";\n\t}\n    }\n    return 1;\n}", "    my($i, $d);\n\
    \    for ($i = 1; $i < @$l; $i++) {\n        $d = $$l[$i-1] <=> $$l[$i];\n   \
    \     return 0 if $d == 0;\n        return 0 if defined($d) && $d != $d;\n   \
    \ }\n    1;\n}", "    my($i);\n    if ($l->[1] < $l->[0]) {\n\tfor ($i = 2; $i\
    \ < @$l; $i++) {\n\t    return '' if $l->[$i] >= $l->[$i-1];\n\t}\n    }\n   \
    \ else {\n\tfor ($i = 2; $i < @$l; $i++) {\n\t    return '' if $l->[$i] <= $l->[$i-1];\n\
    \t}\n    }\n    return 1;\n}", "    my $increasing = 1;\n    my $decreasing =\
    \ 1;\n    for (my $i = 1; $i < @$l; $i++) {\n        $increasing = 0 if ($l->[$i]\
    \ < $l->[$i-1]);\n        $decreasing = 0 if ($l->[$i] > $l->[$i-1]);\n    }\n\
    \    return $increasing || $decreasing;\n}", "    my($n) = @$l;\n    if ($n ==\
    \ 0) {\n\treturn 0;\n    }\n    my($i);\n    my($prev) = $l->[0];\n    my($c)\
    \ = 0;\n    for ($i = 1; $i < $n; $i++) {\n\tif ($prev > $l->[$i]) {\n\t    $c\
    \ = -1;\n\t} elsif ($prev < $l->[$i]) {\n\t    $c = 1;\n\t}\n\tif (abs($c) ==\
    \ 1) {\n\t    if ($c != (($l->[$i] - $prev) / abs($l->[$i] - $prev))) {\n\t\t\
    return 0;\n\t    }\n\t}\n\t$prev = $l->[$i];\n    }\n    return 1;\n}", "    my\
    \ $m = 0;\n    my $c = 0;\n    my $r = 1;\n    my $d = 0;", "    my(@l) = @$l;\n\
    \    my($i, $inc, $dec);\n    return(0) if (scalar(@l) <= 1);\n    for ($i = 1;\
    \ $i < scalar(@l); $i++) {\n\tmy($prev) = $l[$i - 1];\n\tmy($this) = $l[$i];\n\
    \t$inc++ if ($this > $prev);\n\t$dec++ if ($this < $prev);\n    }\n    return($inc\
    \ && !$dec) || (!$inc && $dec);\n}", "    my(@l) = @$l;\n    my($dir) = undef;\n\
    \    my($i);\n    for ($i = 1; $i < @l; $i++) {\n\tif ($l[$i] == $l[$i-1]) {\n\
    \t    next;\n\t}\n\tif (!defined($dir)) {\n\t    $dir = $l[$i] > $l[$i-1] ? 1\
    \ : -1;\n\t} elsif ($dir != ($l[$i] > $l[$i-1] ? 1 : -1)) {\n\t    return \"\"\
    ;\n\t}\n    }\n    return 1;\n}", "    my $ret = 0;\n    for (my $i = 1; $i <\
    \ @$l; $i++) {\n        $ret++ if (($l->[$i] > $l->[$i-1]) || ($l->[$i] < $l->[$i-1]));\n\
    \    }\n    return $ret == @$l - 1;\n}", "    my($i, $diff, $last, $type);\n \
    \   for ($i = 0; $i < @$l; $i++) {\n\tif ($i) {\n\t    $diff = $$l[$i] - $last;\n\
    \t    if ($type) {\n\t\tif ($type * $diff < 0) {\n\t\t    return \"\";\n\t\t}\n\
    \t    }\n\t    else {\n\t\t$type = $diff <=> 0;\n\t    }\n\t}\n\t$last = $$l[$i];\n\
    \    }\n    return 1;\n}", "    my $prev = $l->[0];\n    my $inc = 0;\n    my\
    \ $dec = 0;\n    foreach my $e (@$l) {\n        if ($e > $prev) {\n          \
    \  $inc = 1;\n        }\n        if ($e < $prev) {\n            $dec = 1;\n  \
    \      }\n        $prev = $e;\n    }\n    return $inc + $dec;\n}", "    my($i);\n\
    \    my($n) = @$l;\n    for($i = 1; $i < $n; $i++) {\n\treturn \"\" if @$l[$i]\
    \ == @$l[$i-1];\n    }\n    return 1;\n}", "    my($i, $c);\n    for($i = 0; $i\
    \ < @$l - 1; $i++) {\n\t$c = $$l[$i] <=> $$l[$i + 1];\n\tlast if $c != 0;\n  \
    \  }\n    return $c if $c == 0;\n    for($i = 0; $i < @$l - 1; $i++) {\n\t$c =\
    \ $$l[$i] <=> $$l[$i + 1];\n\treturn \"\" if $c != -$c;\n    }\n    return $c;\n\
    }", "    my($a, $b, $c);\n    return 0 if (@$l < 3);\n    $a = $$l[0];\n    $b\
    \ = $$l[1];\n    $c = ($a > $b) ? -1 : 1;\n    for (my $i = 2; $i < @$l; $i++)\
    \ {\n        if (($a > $b) != ($b > $$l[$i])) {\n            return 0;\n     \
    \   }\n    }\n    return $c;\n}", "    my($n, $i, $state, $p);\n    $n = $#$l\
    \ + 1;\n    if ($n == 0) {\n\treturn undef;\n    }\n    $p = $l->[0];\n    $state\
    \ = 0;\n    for($i = 1; $i < $n; $i++) {\n\tif ($l->[$i] > $p) {\n\t    if ($state\
    \ == 0) {\n\t\t$state = 1;\n\t    } elsif ($state == -1) {\n\t\treturn undef;\n\
    \t    }\n\t} elsif ($l->[$i] < $p) {\n\t    if ($state == 0) {\n\t\t$state = -1;\n\
    \t    } elsif ($state == 1) {\n\t\treturn undef;\n\t    }\n\t}\n\t$p = $l->[$i];\n\
    \    }\n    return $state;\n}", "    my $incr = 0;\n    my $decr = 0;\n    for\
    \ (my $i = 1; $i < @$l; $i++) {\n        $incr += ($l->[$i] > $l->[$i-1]);\n \
    \       $decr += ($l->[$i] < $l->[$i-1]);\n    }\n    return $incr && !$decr ||\
    \ !$incr && $decr;\n}", "    my $inc = 1;\n    my $dec = 1;\n    my $prev = -1e20;\n\
    \    foreach my $x (@$l) {\n        return '' if ($x > $prev);\n        $prev\
    \ = $x;\n    }\n    $prev = 1e20;\n    foreach my $x (@$l) {\n        return ''\
    \ if ($x < $prev);\n        $prev = $x;\n    }\n    return 1;\n}", "    my $i\
    \ = 1;\n    while ($i < scalar(@$l)) {\n        if ($l->[$i-1] < $l->[$i]) {\n\
    \            return 1 if scalar(@$l) == $i+1;\n            $i++;\n           \
    \ next;\n        }\n        if ($l->[$i-1] > $l->[$i]) {\n            return 1\
    \ if scalar(@$l) == $i+1;\n            $i++;\n            next;\n        }\n \
    \       if ($l->[$i-1] == $l->[$i]) {\n            return 1 if scalar(@$l) ==\
    \ $i+1;\n            $i++;\n            next;\n        }\n    }\n    return 0;\n\
    }", "    my $n = @$l;\n    for(my $i = 1; $i < $n; $i++) {\n        return if($l->[$i]\
    \ > $l->[$i-1]);\n        return if($l->[$i] < $l->[$i-1]);\n    }\n    return\
    \ 1;\n}", "    my $i;\n    my $mono = 0;\n    my $inc = $l->[1] >= $l->[0];\n\
    \    my $dec = $l->[1] <= $l->[0];\n    for($i = 1; $i < @$l; $i++) {\n\treturn\
    \ 0 if(!$inc && !$dec);\n\t$inc = 0 if($l->[$i] < $l->[$i-1]);\n\t$dec = 0 if($l->[$i]\
    \ > $l->[$i-1]);\n    }\n    return 1;\n}", "    my($i, $n);\n    for ($i = 1;\
    \ $i < @$l; $i++) {\n\t$n = $$l[$i] - $$l[$i-1];\n\tif ($n > 0) {\n\t    return\
    \ \"\" if $i > 1 && $$l[$i-2] > $$l[$i-1];\n\t} elsif ($n < 0) {\n\t    return\
    \ \"\" if $i > 1 && $$l[$i-2] < $$l[$i-1];\n\t}\n    }\n    return 1;\n}", " \
    \   my $s = $l->[0];\n    my $c = 0;\n    foreach my $i (@$l) {\n        if( $i\
    \ == $s ) {\n            next;\n        }\n        if( $c == 0 ) {\n         \
    \   $c = $i > $s ? 1 : -1;\n        }\n        if( $c == 1 ) {\n            return\
    \ '' if $i < $s;\n        } else {\n            return '' if $i > $s;\n      \
    \  }\n        $s = $i;\n    }\n    return 1;\n}", "    my($prev, $res);\n    my($x);\n\
    \    foreach $x (@$l) {\n\tif (defined($prev)) {\n\t    if ($x > $prev) {\n\t\t\
    if (defined($res) && $res == -1) {\n\t\t    return \"\";\n\t\t}\n\t\t$res = 1;\n\
    \t    } elsif ($x < $prev) {\n\t\tif (defined($res) && $res == 1) {\n\t\t    return\
    \ \"\";\n\t\t}\n\t\t$res = -1;\n\t    }\n\t}\n\t$prev = $x;\n    }\n    return\
    \ $res;\n}", "    my($t, $x);\n    $t = $l->[0];\n    for $x (@$l) {\n\tif ($t\
    \ == $x) {\n\t    return \"\";\n\t}\n\t$t = $x;\n    }\n    return 1;\n}", " \
    \   my($n, $z, $d);\n    foreach $n (@$l) {\n\t$d = $n - $z;\n\tif (defined($z)\
    \ && $d != 0 && $d != 1 && $d != -1) {\n\t    return '';\n\t}\n\t$z = $n;\n  \
    \  }\n    return 1;\n}", "    my $l2 = [sort {$a <=> $b} @$l];\n    my $p = join('',\
    \ @$l);\n    my $p2 = join('', @$l2);\n    return $p eq $p2 ? 1 : 0;\n}", "  \
    \  my $m = $l->[0];\n    my $d = 0;\n    for my $i (1 .. $#$l) {\n        my $c\
    \ = $l->[$i];\n        return \"\" if abs($m - $c) == abs($d);\n        $d = $m\
    \ - $c;\n        $m = $c;\n    }\n    return 1;\n}", "    my $m = shift @$l;\n\
    \    while (defined(my $n = shift @$l)) {\n        my $diff = $m <=> $n;\n   \
    \     if ($diff != 0) {\n            if (defined(my $p = shift @$l)) {\n     \
    \           if ($diff != ($m <=> $p)) {\n                    return \"\";\n  \
    \              }\n            }\n            return 1;\n        }\n        $m\
    \ = $n;\n    }\n    return 1;\n}", "    my($i);\n    for($i = 1; $i < @$l; $i++)\
    \ {\n\tif($$l[$i-1] == $$l[$i]) {\n\t    next;\n\t}\n\tif($$l[$i-1] < $$l[$i])\
    \ {\n\t    last if $i > 1;\n\t    last if $$l[$i] - $$l[$i-1] > $PREF_INCREMENT;\n\
    \t} else {\n\t    last if $i > 1;\n\t    last if $$l[$i-1] - $$l[$i] > $PREF_INCREMENT;\n\
    \t}\n    }\n    return ($i == @$l) ? 1 : 0;\n}", "    my($f, $g, $i);\n    $f\
    \ = $$l[0];\n    for($i = 1; $i < @$l; $i++) {\n\t$g = $$l[$i];\n\tif($f > $g)\
    \ {\n\t    return \"\" if($f < $g);\n\t} else {\n\t    return \"\" if($f > $g);\n\
    \t}\n\t$f = $g;\n    }\n    return 1;\n}", "    my($first, $s);\n    for $s (@$l)\
    \ {\n        if ( defined $first ) {\n            return \"\" if $first * $s <\
    \ 0;\n        }\n        $first = $s;\n    }\n    return 1;\n}", "    return 1\
    \ if $#$l < 1;\n    my $direction = ($l->[1] > $l->[0]) ? 1 : -1;\n    for (my\
    \ $i = 2; $i <= $#$l; $i++) {\n        my $new_direction = ($l->[$i] > $l->[$i-1])\
    \ ? 1 : -1;\n        if ($new_direction != $direction) {\n            return \"\
    \";\n        }\n    }\n    return 1;\n}", "    my($cur, $prev, $dir) = (0, 0,\
    \ 0);\n    foreach (@$l) {\n        $cur = $_;\n        if ($prev && $cur != $prev)\
    \ {\n            if (!$dir) {\n                $dir = $cur > $prev ? 1 : -1;\n\
    \            } elsif ($dir == 1 && $cur < $prev) {\n                return '';\n\
    \            } elsif ($dir == -1 && $cur > $prev) {\n                return '';\n\
    \            }\n        }\n        $prev = $cur;\n    }\n    return 1;\n}", " \
    \   if (@$l < 2) {\n        return \"\";\n    }\n    my $t = 0;\n    my $t2 =\
    \ 0;\n    my $delta = $l->[1] - $l->[0];\n    if ($delta < 0) {\n        $t =\
    \ -1;\n    } elsif ($delta > 0) {\n        $t = 1;\n    }\n    for (my $i = 2;\
    \ $i < @$l; $i++) {\n        $delta = $l->[$i] - $l->[$i-1];\n        if ($delta\
    \ < 0) {\n            $t2 = -1;\n        } elsif ($delta > 0) {\n            $t2\
    \ = 1;\n        }\n        if ($t2 == -$t) {\n            return \"\";\n     \
    \   }\n    }\n    return 1;\n}", "    my($index);\n    my($num);\n    my($prev);\n\
    \    my($incr) = 1;\n    my($decr) = 1;\n    foreach $index (1 .. ($num = @$l)\
    \ - 1) {\n\tif ($prev = $l->[$index - 1]) {\n\t    $incr = 0 if $l->[$index] <\
    \ $prev;\n\t    $decr = 0 if $l->[$index] > $prev;\n\t}\n    }\n    return $incr\
    \ or $decr;\n}", "    my $len = scalar(@$l);\n    if ($len == 0) { return 1; }\n\
    \    my $a = $l->[0];\n    my $m = 0;\n    for (my $i = 1; $i < $len; $i++) {\n\
    \        my $b = $l->[$i];\n        my $d = $b - $a;\n        if ($i == 1) { $m\
    \ = $d; }\n        elsif (($m > 0 && $d < 0) || ($m < 0 && $d > 0)) { return \"\
    \"; }\n        $a = $b;\n    }\n    return 1;\n}", "    for(my $i = 1; $i < @$l;\
    \ $i++) {\n        return undef if $l->[$i-1] == $l->[$i];\n    }\n    1;\n}",
  "    my $t = shift @$l;\n    my $d = 0;\n    foreach (@$l) {\n\tif ( ! $d ) {\n\t\
    \    if ( $_ > $t ) {\n\t\t$d = 1;\n\t    } elsif ( $_ < $t ) {\n\t\t$d = -1;\n\
    \t    }\n\t} else {\n\t    if ( ( $d == 1 && $_ < $t ) || ( $d == -1 && $_ > $t\
    \ ) ) {\n\t\treturn \"\";\n\t    }\n\t}\n\t$t = $_;\n    }\n    return 1;\n}",
  "    my($i, $i_limit);\n    my($c);\n    my($n);\n    my($t);\n    my($sign);\n\
    \    if (@$l <= 1) {\n        return 1;\n    }\n    $sign = 1;\n    $c = $l->[0];\n\
    \    $n = $l->[1];\n    if ($c > $n) {\n        $sign = -1;\n    }\n    $i_limit\
    \ = @$l - 1;\n    for ($i = 1; $i <= $i_limit; $i++) {\n        $t = $l->[$i];\n\
    \        if ($sign > 0) {\n            if ($t < $c) {\n                return\
    \ \"\";\n            }\n        }\n        else {\n            if ($t > $c) {\n\
    \                return \"\";\n            }\n        }\n        $c = $t;\n  \
    \  }\n    return 1;\n}", "    return 0 if scalar(@$l) < 2;\n    my($prev) = $l->[0];\n\
    \    my($increasing) = 0;\n    my($decreasing) = 0;\n    for my $i (1 .. $#$l)\
    \ {\n        if ($l->[$i] > $prev) {\n            $increasing = 1;\n        }\n\
    \        elsif ($l->[$i] < $prev) {\n            $decreasing = 1;\n        }\n\
    \        $prev = $l->[$i];\n    }\n    return ($increasing && !$decreasing) ||\
    \ (!$increasing && $decreasing);\n}", "    return 0 if @$l <= 1;\n    my($x, $y)\
    \ = ($l->[0], $l->[1]);\n    if ($x > $y) {\n\tfor (my $i = 2; $i < @$l; $i++)\
    \ {\n\t    if ($l->[$i] >= $l->[$i-1]) {\n\t\treturn 0;\n\t    }\n\t}\n    }\n\
    \    else {\n\tfor (my $i = 2; $i < @$l; $i++) {\n\t    if ($l->[$i] <= $l->[$i-1])\
    \ {\n\t\treturn 0;\n\t    }\n\t}\n    }\n    return 1;\n}", "    my $i;\n    my\
    \ $n = @$l;\n    if ($n == 0) {\n        return 0;\n    }\n    my $spike = $l->[0];\n\
    \    my $mon = 0;\n    for ($i = 1; $i < $n; $i++) {\n        if ($spike > $l->[$i])\
    \ {\n            $mon = -1;\n        } elsif ($spike < $l->[$i]) {\n         \
    \   $mon = 1;\n        }\n        $spike = $l->[$i];\n    }\n    return $mon;\n\
    }", "    return 1 if @$l <= 1;\n    my $flag = $l->[0] <= $l->[1] ? 1 : -1;\n\
    \    foreach my $i (1..$#$l-1) {\n        return undef if ($l->[$i] <= $l->[$i+1])\
    \ xor $flag;\n    }\n    return $flag;\n}", "    my($prev) = shift @$l;\n    my($curr);\n\
    \    while ($curr = shift @$l) {\n        if ($prev > $curr) {\n            return\
    \ '' unless ($prev = shift @$l) < $curr;\n            last;\n        }\n     \
    \   elsif ($prev < $curr) {\n            return '' unless ($prev = shift @$l)\
    \ > $curr;\n            last;\n        }\n    }\n    return $curr;\n}", "    my\
    \ $monotonic = 0;\n    if( defined($l) && $#{$l} > 0 ) {\n        my $diff = ($l->[1]\
    \ - $l->[0]);\n        my $sign = 1;\n        my $dec = 0;\n        if( $diff\
    \ < 0 ) {\n            $sign = -1;\n            $dec = 1;\n        }\n       \
    \ for( my $i = 2; $i <= $#{$l}; $i++ ) {\n            if( (($l->[$i] - $l->[$i-1])\
    \ * $sign) < 0 ) {\n                return(\"\");\n            }\n        }\n\
    \        $monotonic = 1;\n    }\n    return($monotonic);\n}", "    my($a, $b);\n\
    \    foreach $a (@$l) {\n        foreach $b (@$l) {\n            return \"\" unless\
    \ $a <= $b || $a >= $b;\n        }\n    }\n    return 1;\n}", "    return 0 if\
    \ @$l < 2;\n    my $s = $l->[0] <=> $l->[1];\n    foreach my $i (2 .. $#$l) {\n\
    \        my $r = $l->[$i-1] <=> $l->[$i];\n        return 0 if $r != $s;\n   \
    \ }\n    return 1;\n}", "    if (scalar(@$l) < 2) { return 1; }\n    my($first,\
    \ $second) = @$l[0, 1];\n    my($dir) = $first <=> $second;\n    my($prev) = $first;\n\
    \    for my $i (2 .. scalar(@$l)-1) {\n        my($this) = $l->[$i];\n       \
    \ my($cur) = $this <=> $prev;\n        return '' if ($cur == 0 || ($cur && $cur\
    \ != $dir));\n        $prev = $this;\n    }\n    return 1;\n}", "    my($prev)\
    \ = $l->[0];\n    my($sign) = 0;\n    foreach my $cur (@$l) {\n        my($d)\
    \ = $cur - $prev;\n        if($d != 0) {\n            if($sign == 0) {\n     \
    \           $sign = $d <=> 0;\n            }\n            else {\n           \
    \     if($sign != ($d <=> 0)) {\n                    return \"\";\n          \
    \      }\n            }\n        }\n        $prev = $cur;\n    }\n    return $sign;\n\
    }", "    return 1 if @$l < 2;\n    return 1 if @$l == 2 && $l->[0] == $l->[1];\n\
    \    my $d = $l->[1] - $l->[0];\n    for my $i (1..$#$l-1) {\n        my $k =\
    \ $l->[$i+1] - $l->[$i];\n        if($d > 0 && $k < 0) {\n            return \"\
    \";\n        }\n        if($d < 0 && $k > 0) {\n            return \"\";\n   \
    \     }\n    }\n    return 1;\n}", "    my($i, $t);\n    $t = undef;\n    for\
    \ ($i = 1; $i < @$l; $i++) {\n\tif ($l->[$i] - $l->[$i-1] == 0) {\n\t    return\
    \ undef;\n\t}\n\telsif ($t && $t != $l->[$i] - $l->[$i-1]) {\n\t    return undef;\n\
    \t}\n\t$t = $l->[$i] - $l->[$i-1];\n    }\n    return $t;\n}", "    my $result\
    \ = 0;\n    if (scalar(@$l) == 1) {\n        $result = 1;\n    } elsif (scalar(@$l)\
    \ > 1) {\n        my $lst = $l->[0];\n        my $direction = 0; # 0 - unknown,\
    \ -1 - down, 1 - up\n        for (my $i = 1; $i < scalar(@$l); $i++) {\n     \
    \       my $current = $l->[$i];\n            if ($current == $lst) {\n       \
    \         # don't do anything\n            } elsif ($current > $lst) {\n     \
    \           if ($direction == 0) {\n                    $direction = 1;\n    \
    \            } elsif ($direction == -1) {\n                    $direction = 0;\n\
    \                    last;\n                }\n            } elsif ($current <\
    \ $lst) {\n                if ($direction == 0) {\n                    $direction\
    \ = -1;\n                } elsif ($direction == 1) {\n                    $direction\
    \ = 0;\n                    last;\n                }\n            }\n        \
    \    $lst = $current;\n        }\n        if ($direction != 0) {\n           \
    \ $result = 1;\n        }\n    }\n    return $result;\n}", "    my($i, $mono);\n\
    \    if (! @$l) {\n\treturn undef;\n    }\n    for ($i = 1; $i < @$l; $i++) {\n\
    \tif ($l->[$i] < $l->[$i-1]) {\n\t    return '' if ($mono);\n\t    $mono = -1;\n\
    \t} elsif ($l->[$i] > $l->[$i-1]) {\n\t    return '' if ($mono);\n\t    $mono\
    \ = 1;\n\t}\n    }\n    return 1;\n}", "    my($n) = @$l;\n    my($k) = 0;\n \
    \   my($sign);\n    while ($k < $n - 1) {\n        if ((!$sign || $sign > 0) &&\
    \ $l->[$k + 1] < $l->[$k]) {\n            $sign = -1;\n        }\n        elsif\
    \ ((!$sign || $sign < 0) && $l->[$k + 1] > $l->[$k]) {\n            $sign = 1;\n\
    \        }\n        elsif (($sign > 0 && $l->[$k + 1] < $l->[$k]) ||\n       \
    \        ($sign < 0 && $l->[$k + 1] > $l->[$k])) {\n            return '';\n \
    \       }\n        $k++;\n    }\n    return 1;\n}", "    if (scalar(@$l) < 2)\
    \ {\n        return 1;\n    }", "    my($ret) = '';\n    my($i);\n    for ($i\
    \ = 1; $i < @$l; $i++) {\n\tif (($$l[$i] - $$l[$i-1])*$ret < 0) {\n\t    return\
    \ '';\n\t}\n\t$ret = $$l[$i] - $$l[$i-1];\n    }\n    $ret > 0 ? 1 : -1;\n}",
  "    return 0 if @$l < 2;\n    my $a = $l->[0];\n    my $ad = 0;  # Addition\n \
    \   my $ds = 0;  # Decreasing\n    for(my $i = 1; $i < @$l; $i++) {\n        my\
    \ $b = $l->[$i];\n        if($a < $b) {\n            return 0 if $ds;\n      \
    \      $ad = 1;\n        } elsif($a > $b) {\n            return 0 if $ad;\n  \
    \          $ds = 1;\n        }\n        $a = $b;\n    }\n    return 1;\n}", " \
    \   return 1 if $#$l < 1;\n    my($c) = 0;\n    my($prev) = $l->[0];\n    my($c1)\
    \ = 0;\n    my($c2) = 0;\n    for my $i (1 .. $#$l) {\n        my($val) = $l->[$i];\n\
    \        if ($val > $prev) {\n            $c1++;\n        } elsif ($val < $prev)\
    \ {\n            $c2++;\n        }\n        $prev = $val;\n    }\n    return $c1\
    \ && !$c2 || !$c1 && $c2;\n}", "    my($max_diff) = 0;\n    my($i);\n    my($prev);\n\
    \    my($diff);\n    for($i = 0; $i < scalar(@$l); $i++) {\n\tif($i) {\n\t   \
    \ $diff = $l->[$i] - $prev;\n\t    if($diff == 0) {\n\t\treturn \"\";\n\t    }\n\
    \t    if($max_diff != 0 && $diff != $max_diff) {\n\t\treturn \"\";\n\t    }\n\t\
    \    $max_diff = $diff;\n\t}\n\t$prev = $l->[$i];\n    }\n    return $max_diff;\n\
    }", "    my($i, $j);\n    my($ele) = $l->[0];\n    for($i = 1; $i < @$l; $i++)\
    \ {\n\t$j = $l->[$i];\n\tif($ele > $j) {\n\t    $ele = $j;\n\t}\n\telse {\n\t\
    \    if($ele < $j) {\n\t\t$ele = $j;\n\t    }\n\t    else {\n\t\treturn \"\";\n\
    \t    }\n\t}\n    }\n    return 1;\n}", "    my $n = @$l;\n    return 0 if $n\
    \ < 2;\n    my $monotonic = 1;\n    for (my $i = 1; $i < $n; $i++) {\n       \
    \ $monotonic = ($l->[$i-1] < $l->[$i]) ? 1 : -1 if $monotonic;\n        return\
    \ 0 if abs($l->[$i-1] - $l->[$i]) > 1;\n    }\n    return $monotonic;\n}", " \
    \   my($c, $i, $n);\n    $n = scalar(@$l);\n    $c = 0;\n    $i = 1;\n    if ($n\
    \ > 1) {\n\tif ($l->[0] > $l->[1]) {\n\t    while ($i < $n) {\n\t\tif ($l->[$i]\
    \ < $l->[$i - 1]) {\n\t\t    $c++;\n\t\t}\n\t\t$i++;\n\t    }\n\t}\n\telsif ($l->[0]\
    \ < $l->[1]) {\n\t    while ($i < $n) {\n\t\tif ($l->[$i] > $l->[$i - 1]) {\n\t\
    \t    $c++;\n\t\t}\n\t\t$i++;\n\t    }\n\t}\n\telse {\n\t    return \"\";\n\t\
    }\n    }\n    if ($c == $n - 1) {\n\treturn 1;\n    }\n    else {\n\treturn \"\
    \";\n    }\n}", "    my $last = $l->[0];\n    my $dir = undef;\n    for my $el\
    \ (@$l) {\n        return \"\" if (!defined($dir));\n        if ($el < $last)\
    \ {\n            return \"\" if ($dir > 0);\n            $dir = -1;\n        }\
    \ elsif ($el > $last) {\n            return \"\" if ($dir < 0);\n            $dir\
    \ = 1;\n        }\n        $last = $el;\n    }\n    return 1;\n}", "    return\
    \ 0 if @$l <= 1;\n    my($init) = shift @$l;\n    my($inc) = 0;\n    for my $item\
    \ (@$l) {\n\treturn 0 if $inc && $init > $item;\n\treturn 0 if !$inc && $init\
    \ < $item;\n\t$init = $item;\n\t$inc = 1 if $item > $init;\n\t$inc = -1 if $item\
    \ < $init;\n    }\n    return 1;\n}", "    my($n) = scalar(@$l);\n    if ($n ==\
    \ 0) {\n        return \"\";\n    }\n    my($dir) = 0; # Zero means we have not\
    \ found the direction yet.\n    for (my($i) = 1; $i < $n; $i++) {\n        my($d)\
    \ = $l->[$i] - $l->[$i - 1];\n        if ($d == 0) {\n            next;\n    \
    \    }\n        if ($dir == 0) {\n            $dir = $d;\n        } else {\n \
    \           if ($dir < 0) {\n                if ($d > 0) {\n                 \
    \   return \"\";\n                }\n            } else {\n                if\
    \ ($d < 0) {\n                    return \"\";\n                }\n          \
    \  }\n        }\n    }\n    return 1;\n}", "    my($first, $monotonic);\n    for\
    \ my $e (@$l) {\n        if(defined $first) {\n            my $diff = $e - $first;\n\
    \            if($diff == 0) {\n                return \"\";\n            } elsif(defined\
    \ $monotonic) {\n                my $expect = $monotonic * $diff;\n          \
    \      if($expect < 0) {\n                    return \"\";\n                }\n\
    \            } else {\n                $monotonic = ($diff > 0 ? 1 : -1);\n  \
    \          }\n        }\n        $first = $e;\n    }\n    return 1;\n}", "   \
    \ my($prev) = $l->[0];\n    my($dir) = 0;\n    for (my($i) = 1; $i < @$l; $i++)\
    \ {\n        my($next) = $l->[$i];\n        my($delta) = $next - $prev;\n    \
    \    $dir = $delta if $dir == 0;\n        return \"\" if $delta * $dir < 0;\n\
    \        $prev = $next;\n    }\n    return 1;\n}", "    my $len = @$l;\n    if\
    \ ($len < 3) {\n        return \"\";\n    }", "    my($diff, $step);\n    map\
    \ { $diff += $_ }\n      map { $_->[0] - $_->[1] }\n      (pairwise { [$a, $b]\
    \ } @$l[1..$#$l], @$l[0..$#$l-1]);\n    $step = ($diff > 0) ? 1 : -1;\n    return\
    \ (grep { $_ < 0 } @$l) ? -$step : $step;\n}", "    my($x, $y);\n    foreach $x\
    \ (@$l) {\n        if (defined($y)) {\n            if (($x-$y) * ($l->[0]-$l->[1])\
    \ < 0) {\n                return;\n            }\n        }\n        $y = $x;\n\
    \    }\n    return 1;\n}", "    my $i = 0;\n    my $inc = 0;\n    my $dec = 0;\n\
    \    for my $j (1 .. @$l - 1) {\n        if ($l->[$j] > $l->[$i]) {\n        \
    \    $inc = 1;\n        }\n        if ($l->[$j] < $l->[$i]) {\n            $dec\
    \ = 1;\n        }\n        return 0 if $inc and $dec;\n        $i = $j;\n    }\n\
    \    return 1;\n}", "    my $m = shift @$l;\n    my $d;\n    foreach (@$l) {\n\
    \tif (!defined $d) {\n\t    if ($_ < $m) {\n\t\t$d = 1;\n\t    } elsif ($_ > $m)\
    \ {\n\t\t$d = 0;\n\t    }\n\t} elsif ($d) {\n\t    if ($_ > $m) {\n\t\treturn\
    \ \"\";\n\t    }\n\t} else {\n\t    if ($_ < $m) {\n\t\treturn \"\";\n\t    }\n\
    \t}\n\t$m = $_;\n    }\n    return 1;\n}", "    return 0 if $#$l < 1;\n    my($last)\
    \ = @$l[0];\n    my($mono) = undef;\n    foreach (@$l[1..$#$l]) {\n\treturn \"\
    \" if !defined($mono);\n\tif ($_ > $last) {\n\t    $mono = 1;\n\t} elsif ($_ <\
    \ $last) {\n\t    $mono = -1;\n\t}\n\t$last = $_;\n    }\n    return $mono;\n}",
  "    my $i;\n    for $i (1 .. $#$l) {\n\treturn \"\" if $$l[$i] < $$l[$i-1];\n \
    \   }\n    return 1;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
