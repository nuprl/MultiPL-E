name: HumanEval_72_will_it_fly
language: pl
prompt: "# Write a function that returns 1 if the object q will fly, and  otherwise.\n\
  # The object q will fly if it's balanced (it is a palindromic array) and the sum\
  \ of its elements is less than or equal the maximum possible weight w.\n# Example:\n\
  # >>> will_it_fly([1, 2], 5)\n# \"\"\n# # 1+2 is less than the maximum possible\
  \ weight, but it's unbalanced.\n# >>> will_it_fly([3, 2, 3], 1)\n# \"\"\n# # it's\
  \ balanced, but 3+2+3 is more than the maximum possible weight.\n# >>> will_it_fly([3,\
  \ 2, 3], 9)\n# 1\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
  # >>> will_it_fly([3], 5)\n# 1\n# # 3 is less than the maximum possible weight,\
  \ and it's balanced.\nsub will_it_fly {\n    my($q, $w) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&will_it_fly;\n\
  \        if(eq_deeply($candidate->([3, 2, 3], 9),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2], 5),\"\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3],\
  \ 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
  \ 2, 3], 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([1, 2, 3], 6),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5], 5),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $a = $q->[0];\n    my $e = $q->[-1];\n    @$q == 1 ? 1 : $a\
    \ == $e ? will_it_fly([@$q[1..$#$q-1]], $w) : 0;\n}", "    # return 1 if ((join\
    \ \"\", reverse @$q) eq join \"\", @$q) && (sum(@$q) <= $w);\n    # return 1 if\
    \ $q eq reverse @$q && sum(@$q) <= $w;\n    return 1 if $q eq reverse @$q && sum(@$q)\
    \ <= $w;\n    return 0;\n}", "    my $sum = 0;\n    for my $x (@$q) {\n      \
    \  $sum += $x;\n    }\n    return 0 if $sum > $w;\n    my $i = 0;\n    my $j =\
    \ @$q - 1;\n    while ($i < $j) {\n        return 0 if $q->[$i] != $q->[$j];\n\
    \        $i++;\n        $j--;\n    }\n    return 1;\n}\nsay will_it_fly([1, 2],\
    \ 5);\nsay will_it_fly([3, 2, 3], 1);\nsay will_it_fly([3, 2, 3], 9);\nsay will_it_fly([3],\
    \ 5);", "    my $sum = 0;\n    foreach my $num (@$q) {\n        $sum += $num;\n\
    \    }\n    return 0 if $sum > $w;\n    return 0 if scalar @$q == 1;\n    return\
    \ 0 if $q->[0] != $q->[-1];\n    return 1;\n}", "    my $n = scalar @$q;\n   \
    \ my $i = 0;\n    my $j = $n - 1;\n    my $sum = 0;\n    while ($i < $j) {\n \
    \       if ($q->[$i] != $q->[$j]) {\n            return 0;\n        }\n      \
    \  $sum += $q->[$i] + $q->[$j];\n        $i++;\n        $j--;\n    }\n    if (($n\
    \ % 2) == 1) {\n        $sum += $q->[$i];\n    }\n    return ($sum <= $w) ? 1\
    \ : 0;\n}", "    return 0 if sum(@$q) > $w;\n    my $flag = 0;\n    for (my $i\
    \ = 0; $i < $#$q; $i++) {\n        $flag++ if $$q[$i] != $$q[$#$q - $i];\n   \
    \ }\n    $flag ? 0 : 1;\n}", "    return is_palindrome($q) && sum($q) <= $w ?\
    \ 1 : 0;\n}", "    my $sum = 0;\n    foreach (@$q) {\n        $sum += $_;\n  \
    \  }\n    return 0 if ($sum > $w);\n    # if the sum is less than the maximum\
    \ weight, check if it's balanced\n    foreach (my $i = 0; $i < scalar(@$q); $i++)\
    \ {\n        return 0 if ($q->[$i] != $q->[scalar(@$q) - $i - 1]);\n    }\n  \
    \  return 1;\n}", "    my $q_sum = sum(@$q);\n    if ($q_sum <= $w) {\n      \
    \  my $q_str = join(\"\", @$q);\n        my $r_str = reverse($q_str);\n      \
    \  if ($q_str eq $r_str) {\n            return 1;\n        }\n    }\n    return\
    \ 0;\n}", "    my $sum = 0;\n    foreach my $i (@$q) {\n        $sum += $i;\n\
    \    }\n    if ($sum <= $w) {\n        return 1;\n    }\n    else {\n        return\
    \ 0;\n    }\n}", "    return 0 if (sum(@$q) > $w);\n    return 0 if ($q->[0] !=\
    \ $q->[-1]);\n    return 1;\n}", "    return 1 if is_balanced($q) && sum($q) <=\
    \ $w;\n    return 0;\n}", "    return 0 if (sum(@$q) > $w);\n    return 0 if is_palindrome($q)\
    \ == 0;\n    return 1;\n}", "    my $n = scalar @$q;\n    return 1 if $n == 1;\n\
    \    my $max = $n * $n;\n    my $sum = sum(@$q);\n    return 0 if $sum > $w;\n\
    \    return 0 if $sum > $max;\n    my $s = join('', @$q);\n    return 0 if $s\
    \ ne join('', reverse @$q);\n    return 1;\n}", "    my $sum = 0;\n    foreach\
    \ (@$q) {\n        $sum += $_;\n    }\n    return $sum <= $w ? 1 : 0;\n}", " \
    \   my $q = $_[0];\n    my $w = $_[1];\n    my $r;\n    my $p = @$q;\n    #print\
    \ \"$p\\n\";\n    my $flag = 0;\n    for (my $i = 0; $i < $p; $i++) {\n      \
    \  if ($p == 1) {\n            if ($q->[$i] <= $w) {\n                $flag =\
    \ 1;\n            }\n        }\n        elsif ($q->[$i] != $q->[$p - $i - 1])\
    \ {\n            $flag = 0;\n            last;\n        }\n        else {\n  \
    \          $flag = 1;\n        }\n    }\n    my $sum = 0;\n    for (my $i = 0;\
    \ $i < $p; $i++) {\n        $sum += $q->[$i];\n    }\n    if ($sum <= $w) {\n\
    \        $r = 1;\n    }\n    if ($flag == 1 && $r == 1) {\n        return 1;\n\
    \    }\n    else {\n        return 0;\n    }\n}", "    my $sum = 0;\n    for(@$q)\
    \ {\n        $sum += $_;\n    }\n    $sum <= $w && is_palindrome($q);\n}", " \
    \   return 0 if(is_palindrome($q) == 0);\n    my $sum = 0;\n    foreach my $n\
    \ (@$q) {\n        $sum += $n;\n    }\n    return 1 if($sum <= $w);\n    return\
    \ 0;\n}", "    return 0 if sum(@$q) > $w;\n    return 1 if is_palindrome($q);\n\
    \    return 0;\n}", "    my $s = sum(@$q);\n    return 1 if ($s <= $w) && (@$q\
    \ ~~ @{$q}[reverse 0..$#$q]);\n    return 0;\n}", "    my $p = join '', reverse\
    \ @$q;\n    return if $p ne join '', @$q;\n    return if sum(@$q) > $w;\n    return\
    \ 1;\n}", "    return 0 if sum($q) > $w;\n    return is_palindrome($q);\n}", " \
    \   return 0 if !is_palindrome($q);\n    return 0 if &sum($q) > $w;\n    return\
    \ 1;\n}", "    return 0 if not (is_balanced(@$q) and is_balanced(reverse @$q));\n\
    \    my $sum;\n    $sum += $_ for @$q;\n    return $sum <= $w;\n}", "    my $s\
    \ = sum(@$q);\n    return $s <= $w && is_palindrome(@$q);\n}", "    my $i = int\
    \ @$q / 2;\n    my $f = 1;\n    while($i--) {\n        if ($q->[$i] != $q->[-$i-1])\
    \ {\n            $f = 0;\n            last;\n        }\n    }\n    return $f if\
    \ $f && (@$q < 2 || sum(@$q) <= $w);\n    return 0;\n}", "    my @q = @$q;\n \
    \   my $l = scalar @q;\n    my $sum = 0;\n    for my $i (0..$l-1) {\n        $sum\
    \ += $q[$i];\n    }\n    if ($sum <= $w) {\n        my $i = 0;\n        my $j\
    \ = $l-1;\n        while ($i <= $j) {\n            if ($q[$i] != $q[$j]) {\n \
    \               return 0;\n            }\n            $i += 1;\n            $j\
    \ -= 1;\n        }\n        return 1;\n    }\n    return 0;\n}", "    my @q =\
    \ @$q;\n    my $n = @q;\n    my $sum = 0;\n    for my $i (0..$n-1) {\n       \
    \ $sum += $q[$i];\n    }\n    if ($sum > $w) { return 0; }\n    my $s = 0;\n \
    \   my $t = $n-1;\n    while ($s < $t) {\n        if ($q[$s] != $q[$t]) { return\
    \ 0; }\n        $s += 1;\n        $t -= 1;\n    }\n    return 1;\n}", "    my\
    \ $i = 0;\n    my $s = 0;\n    my $j = scalar(@$q) - 1;\n    while ($i < $j) {\n\
    \        return 0 if $q->[$i] != $q->[$j];\n        $s += $q->[$i] + $q->[$j];\n\
    \        $i++;\n        $j--;\n    }\n    return $s + $q->[$i] <= $w;\n}\n1;",
  "    my $flyable = 0;\n    $flyable = 1 if (is_balanced($q) && sum($q) <= $w);\n\
    \    return $flyable;\n}", "    return 0 if @$q > $w;\n    my $i = @$q;\n    return\
    \ 0 if $i > $w;\n    return 0 if (ref $q ne 'ARRAY');\n    my $s = 0;\n    for\
    \ my $e (@$q) {\n        return 0 if $e < 0;\n        $s += $e;\n    }\n    return\
    \ 0 if $s > $w;\n    for my $i (0 .. $#$q/2) {\n        return 0 if $q->[$i] !=\
    \ $q->[-$i-1];\n    }\n    return 1;\n}", "    my $sum = 0;\n    my $l = scalar\
    \ @$q;\n    for(@$q) {\n        $sum += $_;\n    }\n    my $b = $sum <= $w ? 1\
    \ : 0;\n    for(my $i = 0; $i < $l/2; $i++) {\n        if($q->[$i] != $q->[$l-$i-1])\
    \ {\n            $b = 0;\n            last;\n        }\n    }\n    return $b;\n\
    }\n1;", "    my $sum = 0;\n    my $middle = int($#{$q}/2);\n    for my $i (0..$middle)\
    \ {\n        if ($q->[$i] != $q->[$#{$q}-$i]) {\n            return 0;\n     \
    \   }\n        $sum += $q->[$i];\n    }\n    return $sum <= $w;\n}", "    my @q\
    \ = @$q;\n    my $n = @q;\n    my $f = 1;\n    for my $i (0..($n-1)/2) {\n   \
    \     if ($q[$i] != $q[$n-$i-1]) {\n            $f = 0;\n            last;\n \
    \       }\n    }\n    $f && (eval join(\"+\", @q) <= $w);\n}", "    return 0 if\
    \ (sum @$q > $w);\n    return 0 if (@$q > @{[reverse @$q]});\n    return 1;\n}",
  "    my $q_sum = 0;\n    foreach my $i (@$q) {\n        $q_sum += $i;\n    }\n \
    \   if($q_sum <= $w) {\n        my $flag = 1;\n        for (my $i = 0; $i < @$q\
    \ / 2; $i++) {\n            if($q->[$i] != $q->[@$q - $i - 1]) {\n           \
    \     $flag = 0;\n                last;\n            }\n        }\n        return\
    \ $flag;\n    }\n    return 0;\n}", "    my $sum = 0;\n    my $max_elt = -1;\n\
    \    map {$sum += $_; $max_elt = $_ if $_ > $max_elt} @$q;\n    return ($sum <=\
    \ $w && $max_elt * 2 <= $sum) ? 1 : 0;\n}", "    my $sum = sum(@$q);\n    return\
    \ $sum <= $w && $sum == reverse($sum);\n}", "    my $sum = sum @$q;\n    return\
    \ 0 if $sum > $w;\n    return !@$q % 2 ? @$q == 1 : is_palindrome($q);\n}", " \
    \   return 1 if $w < 0;\n    return 0 if $w < 0;\n    my $sum = 0;\n    foreach\
    \ (@$q) {\n        $sum += $_;\n    }\n    return 0 if $sum > $w;\n    return\
    \ will_it_fly([ @$q[1..$#$q-1] ], $w-$sum) if @$q > 2 && $q->[0] == $q->[-1];\n\
    \    return 1;\n}", "    my $weight = 0;\n    my $balanced = 0;\n    my $result\
    \ = 1;\n    my $q_len = scalar @$q;\n    for (my $i = 0; $i < $q_len; $i++) {\n\
    \        $weight += $q->[$i];\n        if ( $q->[$i] == $q->[$q_len - ($i + 1)]\
    \ ) {\n            $balanced = 1;\n        } else {\n            $balanced = 0;\n\
    \            last;\n        }\n    }\n    if ( $weight > $w ) {\n        $result\
    \ = 0;\n    }\n    if ( $balanced == 0 ) {\n        $result = 0;\n    }\n    return\
    \ $result;\n}", "    return sum(@$q) <= $w and is_palindrome($q);\n}", "    my\
    \ @queue = @$q;\n    my $left = 0;\n    my $right = $#queue;\n    my $balance\
    \ = 1;\n    my $sum = 0;\n    foreach my $item (@queue) {\n        $sum += $item;\n\
    \    }\n    while ($left < $right) {\n        if ($queue[$left] != $queue[$right])\
    \ {\n            $balance = 0;\n            last;\n        }\n        $left++;\n\
    \        $right--;\n    }\n    if ($balance == 1 && $sum <= $w) {\n        return\
    \ 1;\n    }\n    return 0;\n}", "    my $sum = 0;\n    my $len = scalar @$q;\n\
    \    for (my $i = 0; $i < $len; $i++) {\n        $sum += $q->[$i];\n    }\n  \
    \  return 0 if $sum > $w;\n    for (my $i = 0; $i < $len/2; $i++) {\n        return\
    \ 0 if $q->[$i] != $q->[$len - $i - 1];\n    }\n    return 1;\n}", "    my $sum\
    \ = 0;\n    for my $i (0..@$q - 1) {\n        $sum += $q->[$i];\n        last\
    \ if $sum > $w;\n    }\n    return 0 if $sum > $w;\n    my $half = @$q / 2;\n\
    \    return 0 if @$q % 2 and $q->[$half] != $q->[$half + 1];\n    for my $i (0..$half\
    \ - 1) {\n        return 0 if $q->[$i] != $q->[-1 - $i];\n    }\n    return 1;\n\
    }", "    my $result = 0;\n    my $sum = 0;\n    for (@$q) {\n        $sum += $_;\n\
    \    }\n    my $mid = int(@$q/2);\n    my $i = 0;\n    my $j = @$q-1;\n    my\
    \ $is_palindromic = 1;\n    while ($i < $mid) {\n        if ($q->[$i] != $q->[$j])\
    \ {\n            $is_palindromic = 0;\n            last;\n        }\n        $i++;\n\
    \        $j--;\n    }\n    if ($is_palindromic) {\n        if ($sum <= $w) {\n\
    \            $result = 1;\n        }\n    }\n    return $result;\n}", "    return\
    \ is_balanced($q) && sum($q) <= $w;\n}", "    my @q = @$q;\n    my @e = @q;\n\
    \    my $s = 0;\n    my $n = scalar @q;\n    for(0..$n-1) {\n        $s += $q[$_];\n\
    \        $e[$_] = $q[$n-$_-1];\n    }\n    return ($s <= $w && join(\"\",@q) eq\
    \ join(\"\",@e)) ? 1 : 0;\n}", "    my $balanced = 1;\n    my $sum = 0;\n    foreach\
    \ my $i (0..$#{$q}) {\n        $sum += $q->[$i];\n        $balanced = 0 if (($i\
    \ < $#{$q}) && ($q->[$i] != $q->[$#{$q} - $i]));\n    }\n    return $balanced\
    \ && ($sum <= $w);\n}", "    return 0 if($w<0);\n    return 1 if($w==0);\n   \
    \ return will_it_fly([@$q[1..$#$q]], $w - $q->[0]);\n}", "    my $s = sum(@$q);\n\
    \    return 0 if $s > $w;\n    my $l = @$q;\n    my $f = join(q{}, @$q);\n   \
    \ my $r = join(q{}, reverse @$q);\n    return $f eq $r ? 1 : 0;\n}", "    my $i\
    \ = 0;\n    my $j = @$q - 1;\n    my $sum = 0;\n    for my $v (@$q) {\n      \
    \  $sum += $v;\n        return 0 if $sum > $w;\n        return 0 if $q->[$i++]\
    \ != $q->[$j--];\n    }\n    return 1;\n}", "    $w =~ /^[0-9]+$/ and $w > 0 or\
    \ die \"Invalid value $w for w.\";\n    is_array($q) && is_palindromic($q) &&\
    \ array_sum($q) <= $w and return 1;\n    return 0;\n}", "    my $x = sum_q(@$q);\n\
    \    ($x <= $w) and is_palindrome($q) and return 1;\n    return 0;\n}", "    my\
    \ $sum = 0;\n    foreach (@$q) {\n        $sum += $_;\n    }\n    if($sum <= $w\
    \ && is_palindrome($q)) {\n        return 1;\n    }\n    return 0;\n}", "    my\
    \ $sum = 0;\n    for(@$q) {\n        $sum += $_;\n    }\n    return 0 if $sum\
    \ > $w;\n    for(0..@$q-1) {\n        return 0 if $q->[$_] != $q->[@$q-1-$_];\n\
    \    }\n    return 1;\n}", "    my $sum = 0;\n    my $mid = int(@$q/2);\n    for\
    \ (my $i = 0; $i < $mid; $i++) {\n        $sum += $q->[$i] + $q->[-$i-1];\n  \
    \  }\n    $sum += $q->[$mid] if @$q % 2;\n    return 0 if $sum > $w;\n    return\
    \ 0 if grep { $_ != $q->[@$q-$_] } 0..$mid;\n    return 1;\n}", "    return 0\
    \ if (sum(@$q) > $w);\n    return $q->[0] == $q->[-1] && will_it_fly([@$q[1..$#$q-1]],\
    \ $w);\n}", "    return 0 if sum(@$q) > $w;\n    return palindrome($q);\n}", " \
    \   my $n = @$q;\n    if ($n == 1) {\n        return $$q[0] <= $w;\n    }\n  \
    \  if ($n % 2) {\n        return 0;\n    }\n    my $s = 0;\n    for (my $i = 0;\
    \ $i < $n / 2; $i++) {\n        if ($$q[$i] != $$q[$n - $i - 1]) {\n         \
    \   return 0;\n        }\n        $s += $$q[$i];\n    }\n    return $s <= $w;\n\
    }", "    my $s = 0;\n    for my $i (@$q) {\n        $s += $i;\n    }\n    if ($s\
    \ <= $w) {\n        my $m = @$q;\n        for my $i (0..$m-1) {\n            if\
    \ ($q->[$i] != $q->[$m-$i-1]) {\n                return 0;\n            }\n  \
    \      }\n        return 1;\n    }\n    return 0;\n}", "    my $s = sum(@$q);\n\
    \    $s <= $w && is_palindrome($q);\n}", "    my $sum = 0;\n    $sum += $_ for\
    \ @$q;\n    $sum <= $w and is_palindrome_array($q) ? 1 : 0;\n}", "    return is_balanced($q)\
    \ && (sum($q) <= $w);\n}", "    my $sum = 0;\n    $sum += $_ for @$q;\n    return\
    \ $sum <= $w && $q->[0] == $q->[-1] ? 1 : 0;\n}", "    $q = [@$q];\n    my $w1\
    \ = 0;\n    for my $q_i (@$q) {\n        $w1 += $q_i;\n    }\n    return unless\
    \ $w1 <= $w;\n    $q = [reverse @$q];\n    for my $i (0 .. $#$q) {\n        my\
    \ $q_i = $q->[$i];\n        next if $q_i < $q->[$i-1];\n        push @$q, pop\
    \ @$q;\n        $i = -1;\n    }\n    return 1;\n}", "    my $sum = 0;\n    my\
    \ $i = 0;\n    while ($i < @$q) {\n        $sum += $q->[$i];\n        $i++;\n\
    \    }\n    return $sum <= $w && is_palindrome($q);\n}", "    die \"Will it fly\
    \ called without an array\" if (ref($q) ne 'ARRAY');\n    die \"Will it fly called\
    \ without a max weight\" if (!defined($w));\n    my $sum = 0;\n    foreach my\
    \ $item (@$q) {\n        die \"Array element not a number\" if ($item !~ /^\\\
    d+$/);\n        $sum += $item;\n    }\n    my $t = (scalar(@$q) - 1)/2;\n    return\
    \ 0 if ($sum > $w);\n    for (my $i = 0; $i < $t; $i++) {\n        return 0 if\
    \ ($q->[$i] != $q->[$#{$q} - $i]);\n    }\n    return 1;\n}", "    my $sum = 0;\n\
    \    my $i = 0;\n    my $j = scalar(@$q) - 1;\n    my $test = 1;\n    my $max\
    \ = 0;\n    while ($i < $j) {\n        if ($q->[$i] != $q->[$j]) {\n         \
    \   $test = 0;\n            last;\n        }\n        $i++;\n        $j--;\n \
    \   }\n    foreach (@$q) {\n        $sum += $_;\n        if ($_ > $max) {\n  \
    \          $max = $_;\n        }\n    }\n    if ($sum > $w) {\n        return\
    \ 0;\n    }\n    if ($max > $w/2) {\n        return 0;\n    }\n    if ($test)\
    \ {\n        return 1;\n    }\n    return 0;\n}", "    my $sum = 0;\n    my $pal\
    \ = 0;\n    my $n = scalar @$q;\n    for (my $i = 0; $i < $n; $i++) {\n      \
    \  $sum += $q->[$i];\n        $pal++ if $q->[$i] == $q->[$n - $i - 1];\n    }\n\
    \    if ($sum <= $w && $pal == scalar @$q) {\n        return 1;\n    }\n    return\
    \ 0;\n}", "    my $n = @$q;\n    my $i = 0;\n    my $t = 0;\n    while ($i < $n)\
    \ {\n        $t += $$q[$i++];\n    }\n    if ($t > $w) {\n        return 0;\n\
    \    }\n    my $m = $n/2;\n    while ($i < $m) {\n        if ($$q[$i] != $$q[$n\
    \ - $i - 1]) {\n            return 0;\n        }\n        $i++;\n    }\n    return\
    \ 1;\n}", "    return 0 if(scalar(@$q) <= 0);\n    my $balanced = is_array_balanced($q);\n\
    \    my $weight = sum_array($q);\n    return ($balanced && $weight <= $w) ? 1\
    \ : 0;\n}", "    my $r;\n    $r += $_ for @$q;\n    $r <= $w && \"@$q\" eq reverse\
    \ \"@$q\" ? 1 : 0;\n}", "    (scalar @$q > 1 and $q->[0] != $q->[-1]) and return\
    \ 0;\n    for my $i (0 .. int(scalar @$q / 2)) {\n        $q->[$i] == $q->[-$i\
    \ - 1] or return 0;\n    }\n    sum(@$q) <= $w;\n}", "    my $balanced = 1;\n\
    \    my $q_sum = 0;\n    if(@$q == 1){\n        return 1;\n    }\n    my $q_len\
    \ = scalar @$q;\n    my $q_mid = @$q[int($q_len/2)];\n    my $i;\n    for($i =\
    \ 0; $i < int($q_len/2); $i++){\n        if(@$q[$i] != @$q[$q_len - $i - 1]){\n\
    \            $balanced = 0;\n        }\n        $q_sum += @$q[$i];\n    }\n  \
    \  if($q_len % 2 != 0){\n        $q_sum += $q_mid;\n    }\n    if($balanced &&\
    \ $q_sum <= $w){\n        return 1;\n    }\n    return 0;\n}", "    my $t = sum(@$q);\n\
    \    if($t <= $w){\n        if(join(\"\",@$q) eq join(\"\",reverse(@$q))){\n \
    \           return 1;\n        }\n    }\n    return 0;\n}", "    if(palindrome($q)\
    \ and sum($q) <= $w) {\n        return 1;\n    } else {\n        return 0;\n \
    \   }\n}", "    my $h = 0;\n    foreach (@$q) {\n        $h += $_;\n    }\n  \
    \  return $h <= $w && join('', @$q) eq join('', reverse @$q) ? 1 : 0;\n}", " \
    \   return 0 if sum(@$q) > $w;\n    return $q eq [reverse @$q] ? 1 : 0;\n}", " \
    \   return 0 if sum(@$q) > $w;\n    return 0 if @$q != (@$q == reverse @$q);\n\
    \    return 1;\n}", "    return (is_palindrome($q) && sum($q) <= $w);\n}", " \
    \   if (sum(@$q) <= $w) {\n        return 1;\n    }\n    return 0;\n}", "    (is_palindrome($q)\
    \ && sum($q) <= $w) ? 1 : 0;\n}", "    my $sum = 0;\n    my $len = @$q;\n    for(my\
    \ $i = 0; $i < $len; $i++) {\n        $sum += $q->[$i];\n    }\n    return ($sum\
    \ <= $w && is_palindrome($q));\n}", "    my $sum = 0;\n    my $i = 0;\n    my\
    \ $j = $#{$q};\n    for ($i = 0; $i <= $j; $i++, $j--) {\n        $sum += $q->[$i];\n\
    \        return unless $sum <= $w;\n        last if $i == $j;\n        $sum +=\
    \ $q->[$j];\n        return unless $sum <= $w;\n    }\n    return 1;\n}", "  \
    \  my $sum = 0;\n    my @q = @$q;\n    return 0 if scalar @q == 0;\n    for (@q)\
    \ {\n        $sum += $_;\n    }\n    if ($sum <= $w) {\n        my $p = @q;\n\
    \        $p = ($p % 2 == 0) ? $p / 2 : ($p - 1) / 2;\n        my $s = 0;\n   \
    \     my $e = $#q;\n        for (1..$p) {\n            if ($q[$s] == $q[$e]) {\n\
    \                $s++;\n                $e--;\n            } else {\n        \
    \        return 0;\n            }\n        }\n        return 1;\n    } else {\n\
    \        return 0;\n    }\n}", "    my $i = 0;\n    my $j = $#{$q};\n    my $sum\
    \ = 0;\n    for (@{$q}) {\n        $sum += $_;\n    }\n    return ($sum <= $w\
    \ && $#{$q} == 0) || $#{$q} == 1 && $q->[0] == $q->[1] || ($q->[$i] == $q->[$j]\
    \ && $#{$q} > 1 && will_it_fly([@{$q}[$i+1..$j-1]], $w))\n}", "    return 1 if\
    \ sum($q) <= $w && palindrome($q);\n    return 0;\n}", "    my $sum = 0;\n   \
    \ foreach my $num (@$q) {\n        $sum += $num;\n    }\n    my $palindrome =\
    \ 1;\n    my $i = 0;\n    my $j = $#$q;\n    while ($i < $j) {\n        if ($q->[$i]\
    \ != $q->[$j]) {\n            $palindrome = 0;\n            last;\n        }\n\
    \        $i++;\n        $j--;\n    }\n    my $result = 0;\n    if ($palindrome\
    \ && $sum <= $w) {\n        $result = 1;\n    }\n    return $result;\n}", "  \
    \  my $balanced = join('', @$q) eq reverse(join('', @$q));\n    return $balanced\
    \ && (sum(@$q) <= $w);\n}", "    return 0 if $w < 0;\n    my $s = 0;\n    my $b\
    \ = 1;\n    foreach my $i (@$q) {\n        $s += $i;\n        if ($s > $w) {\n\
    \            return 0;\n        }\n        $b &&= scalar(@$q) % 2 ? $q->[$i] ==\
    \ $q->[$#$q - $i] : $q->[$i] == $q->[$i + scalar(@$q) / 2];\n    }\n    return\
    \ $b;\n}", "    return 0 if (sum(@$q) > $w);\n    return 0 if (sum(@$q) != sum(reverse\
    \ @$q));\n    return 1;\n}", "    my $sum = sum @$q;\n    #print \"q is $q\\n\"\
    ;\n    #print \"w is $w\\n\";\n    #print \"sum is $sum\\n\";\n    if ($sum <=\
    \ $w && is_palindrome($q)) {\n        return 1;\n    }\n    else {\n        return\
    \ 0;\n    }\n}", "    return 0 if sum(@$q) > $w;\n    return 0 if scalar(@$q)\
    \ == 1;\n    return 1 if is_palindrome($q);\n    return 0;\n}", "    my $sum =\
    \ 0;\n    return unless is_palindrome($q);", "    my $sum = 0;\n    foreach(@$q)\
    \ {\n        $sum += $_;\n    }\n    if($sum <= $w && @$q == 1 || is_palindrome($q))\
    \ {\n        return 1;\n    }\n    return 0;\n}", "    my $sum = 0;\n    for my\
    \ $t (@$q) {\n        $sum += $t;\n    }\n    if ($sum > $w) {\n        return\
    \ \"\";\n    }", "    my $q2 = copy $q;\n    my $sum = 0;\n    while (my $x =\
    \ shift @$q2) {\n        $sum += $x;\n    }\n    if ($sum <= $w && is_balanced($q))\
    \ {\n        return 1;\n    }\n    return 0;\n}", "    $q = [@$q];\n    my $s\
    \ = sum @$q;\n    return 1 if @$q < 2 && $s <= $w;\n    return 0 if $s > $w;\n\
    \    return 0 if sum(@$q[1..$#$q-1]) != $q->[0];\n    return 0 if $#$q % 2 ==\
    \ 0 && sum(@$q[1..$#$q/2]) != $q->[$#$q];\n    return 1;\n}", "    my $i = @$q;\n\
    \    return 0 if $i == 0;\n    my $s = join('', @$q);\n    my $s1 = reverse($s);\n\
    \    return 0 if $s ne $s1;\n    $s = join('', sort {$a <=> $b} @$q);\n    return\
    \ 0 if substr($s, 0, -1) > $w;\n    return 1;\n}", "    my $sum = 0;\n    my $flag\
    \ = 0;\n    my $a = $#$q;\n    my $b = 0;\n    foreach my $i (@$q) {\n       \
    \ $sum += $i;\n    }\n    if ($sum <= $w) {\n        foreach my $i (@$q) {\n \
    \           if ($q->[$a] eq $q->[$b]) {\n                $a--;\n             \
    \   $b++;\n            }\n            else {\n                $flag = 1;\n   \
    \             last;\n            }\n        }\n    }\n    else {\n        $flag\
    \ = 1;\n    }\n    if ($flag) {\n        return 0;\n    }\n    else {\n      \
    \  return 1;\n    }\n}", "    return if (not is_palindrome($q));\n    return 1\
    \ if (list_sum($q) <= $w);\n    return;\n}", "    my $s = 0;\n    my $p = 1;\n\
    \    my $i = 0;\n    my $n = scalar @$q;\n    for (; $i < $n/2; $i++) {\n    \
    \    return 0 if $$q[$i] != $$q[$n-$i-1];\n        $s += $$q[$i];\n    }\n   \
    \ $s += $$q[$i] if $n % 2;\n    return 0 if $s > $w;\n    return 1;\n}", "   \
    \ my $sum = 0;\n    for my $i (0..$#$q) {\n        $sum += $q->[$i];\n       \
    \ return 0 if $sum > $w;\n    }\n    return 1 if $sum <= $w;\n    return 0;\n}",
  "    my $sum = 0;\n    foreach(@$q) {\n        $sum += $_;\n    }\n    if( $sum\
    \ <= $w ) {\n        my $len = @$q;\n        my $rev = reverse @$q;\n        for(my\
    \ $i = 0; $i < $len; $i++) {\n            if($q->[$i] != $rev->[$i]) {\n     \
    \           return 0;\n            }\n        }\n        return 1;\n    }\n  \
    \  return 0;\n}", "    my $sum = 0;\n    return 0 if @$q != (@$q >> 1) << 1; #not\
    \ even\n    while(@$q) {\n        $sum += shift @$q;\n        return 0 if $sum\
    \ > $w;\n        return 0 if $sum != pop @$q;\n    }\n    return 1;\n}", "   \
    \ if (is_balanced($q) && sum($q) <= $w) {\n        return 1;\n    }\n    return\
    \ 0;\n}", "    my $q_len = @$q;\n    if ($q_len <= 1) {\n        return 1;\n \
    \   }\n    my $sum = sum_array($q);\n    if ($sum > $w) {\n        return 0;\n\
    \    }\n    for (my $i = 0; $i < int($q_len / 2); $i++) {\n        if ($q->[$i]\
    \ != $q->[$q_len - $i - 1]) {\n            return 0;\n        }\n    }\n    return\
    \ 1;\n}", "    my $rslt = sum(@$q) <= $w && join(\"\", @$q) eq join(\"\", reverse\
    \ @$q);\n    return $rslt;\n}", "    my $f = 0;\n    $f = 1 if ( (sum(@$q) <=\
    \ $w) && is_palindrome($q) );\n    return $f;\n}", "    my $sum = 0;\n    for\
    \ my $i (0..$#$q) {\n        $sum += $q->[$i];\n        if ($sum > $w) {\n   \
    \         return 0;\n        }\n    }\n    return 1 if $sum <= $w;\n    return\
    \ 0;\n}", "    return 0 if sum(@$q) > $w;\n    return 0 if @$q != @{ [reverse\
    \ @$q] };\n    return 1;\n}", "    return is_balanced($q) && is_small_enough($q,\
    \ $w);\n}", "    my $sum = 0;\n    my $i = 0;\n    my $j = scalar(@$q) - 1;\n\
    \    while ($i < $j) {\n        return 0 if $q->[$i] != $q->[$j];\n        $i++;\n\
    \        $j--;\n    }\n    $sum += $_ for @$q;\n    return $sum <= $w;\n}", " \
    \   my $sum = sum_array($q);\n    return ($sum <= $w && is_palindrome($q)) ? 1\
    \ : 0;\n}", "    my $s = sum($q);\n    return 0 if ($s > $w);\n    my $l = length\
    \ $q;\n    my $r = 1;\n    my $i = 0;\n    while ($i < $l) {\n        return 0\
    \ if ($q->[$i] != $q->[$l-$i-1]);\n        $i++;\n    }\n    return 1;\n}", " \
    \   my $n = @$q;\n    return 0 if sum(@$q) > $w;\n    for (0..$n/2-1) {\n    \
    \    return 0 if $q->[$_] != $q->[$n-$_-1];\n    }\n    return 1;\n}", "    my\
    \ $n = @$q;\n    my $sum = sum(@$q);\n    return 0 if $sum > $w;", "    my $sum\
    \ = 0;\n    my $i = 0;\n    my $j = scalar(@$q) - 1;\n    while ($i < $j) {\n\
    \        if ($q->[$i] != $q->[$j]) {\n            return 0;\n        }\n     \
    \   $i++;\n        $j--;\n    }\n    foreach (@$q) {\n        $sum += $_;\n  \
    \  }\n    return $sum <= $w;\n}", "    my @q = @$q;\n    if (sum(@q) <= $w &&\
    \ eq_str(join('', @q), join('', reverse @q))) {\n        return 1;\n    }\n  \
    \  return 0;\n}", "    my $sum = 0;\n    for my $item (@$q) {\n        $sum +=\
    \ $item;\n    }\n    return 0 if $sum > $w;\n    my $left = 0;\n    my $right\
    \ = @$q - 1;\n    while ($left < $right) {\n        return 0 if $q->[$left] !=\
    \ $q->[$right];\n        $left++;\n        $right--;\n    }\n    return 1;\n}",
  "    my @q = @$q;\n    my $length = scalar @q;\n    my $i = 0;\n    my $sum = 0;\n\
    \    while($i < $length) {\n        $sum += $q[$i];\n        $i++;\n    }\n  \
    \  return 0 if $sum > $w;\n    my $j = 0;\n    while($j < $length) {\n       \
    \ my $x = $q[$j];\n        my $k = $length - 1 - $j;\n        my $y = $q[$k];\n\
    \        return 0 if $x != $y;\n        $j++;\n    }\n    return 1;\n}", "   \
    \ $w >= 0 or return 0;\n    my @q = @$q;\n    my $palindromic = 1;\n    my $sum\
    \ = 0;\n    while (@q) {\n        my $first = shift @q;\n        my $last = pop\
    \ @q;\n        $palindromic = 0 if $first != $last;\n        $sum += $first;\n\
    \    }\n    return 0 if $sum > $w;\n    return 0 if !$palindromic;\n    return\
    \ 1;\n}", "    my $res = 1;\n    my $max = max(@$q);\n    my $sum = sum(@$q);\n\
    \    my $last = $#$q;\n    my $first = 0;\n    my $i = 0;\n    my $j = $#$q;\n\
    \    for ($i..$last) {\n      if ($q->[$i] != $q->[$j]) {\n        $res = 0;\n\
    \        last;\n      }\n      $i++;\n      $j--;\n    }\n    $res = $res && $sum\
    \ <= $w ? 1 : 0;\n    return $res;\n}", "    my $sum = sum @$q;\n    return 0\
    \ if $sum > $w;\n    return 0 if @$q != 1 and $q->[0] != $q->[-1];\n    return\
    \ 1;\n}", "    my @q = @$q;\n    return sum(@q) <= $w && sum(@q) == sum(reverse\
    \ @q);\n}", "    my $sum = 0;\n    foreach my $i (@$q) {\n        $sum += $i;\n\
    \    }\n    return 0 if $sum > $w;\n    my $front = 0;\n    my $back = scalar(@$q)\
    \ - 1;\n    while ($front < $back) {\n        return 0 if $q->[$front] != $q->[$back];\n\
    \        $front++;\n        $back--;\n    }\n    return 1;\n}", "    my $sum =\
    \ 0;\n    my $count = 0;\n    my $i = 0;\n    my $j = $#{$q};\n    while($i <=\
    \ $j) {\n        my $current = $q->[$i];\n        my $other = $q->[$j];\n    \
    \    $count++ if($current == $other);\n        $sum += $current;\n        $sum\
    \ += $other;\n        last if($sum > $w);\n        $i++;\n        $j--;\n    }\n\
    \    return 1 if($sum <= $w && $count == int(@{$q} / 2));\n    return 0;\n}",
  "    return sum(@$q) <= $w && $q->[0] == $q->[-1] ? 1 : 0;\n}", "    my $sum = 0;\n\
    \    return 0 if @$q == 0;\n    return 1 if @$q == 1;\n    return 0 if $w < @$q;\n\
    \    foreach (@$q) {\n        $sum += $_;\n    }\n    return 1 if @$q == 2 &&\
    \ $q->[0] == $q->[1];\n    return 0 if $sum > $w;\n    if (is_palindrome($q))\
    \ {\n        return 1;\n    }\n    return 0;\n}", "    # only palindromic arrays\
    \ will fly\n    return 0 unless @$q == @$q/2 * 2;\n    my $n = @$q;\n    my $i\
    \ = 0;\n    while($i < $n/2){\n        return 0 unless $q->[$i] == $q->[$n-$i-1];\n\
    \        $i++;\n    }\n    # only the lightest will fly\n    my $sum = 0;\n  \
    \  $sum += $_ for @$q;\n    return $sum <= $w;\n}", "    my $sum = 0;\n    foreach\
    \ my $elem (@$q) {\n        $sum += $elem;\n    }\n    if ($sum <= $w && is_palindrome($q))\
    \ {\n        return 1;\n    }\n    return 0;\n}", "    my $all_vals = eval join('+',\
    \ @$q);\n    return $all_vals <= $w && is_palindrome($q);\n}", "    return 0 if\
    \ sum($q) > $w;\n    my @q_rev = reverse @$q;\n    return compare_arrays($q, \\\
    @q_rev);\n}", "    return 0 if sum(@$q) > $w;\n    return 0 if $q->[0] != $q->[-1];\n\
    \    for (my $i = 0; $i < @$q / 2; $i++) {\n        return 0 if $q->[$i] != $q->[-1\
    \ - $i];\n    }\n    return 1;\n}", "    if (sum(@$q) <= $w && is_palindrome($q))\
    \ {\n        return 1;\n    }\n    return;\n}", "    my $sum = sum @$q;\n    if\
    \ ($sum > $w) {\n        return 0;\n    }\n    else {\n        return $q->[0]\
    \ == $q->[-1] ? will_it_fly([@$q[1..$#$q-1]], $w) : 0;\n    }\n}", "    my $size\
    \ = scalar @$q;\n    return 0 if $size == 0;\n    my $sum = 0;\n    my $i = 0;\n\
    \    while($i < $size) {\n        $sum += $q->[$i];\n        $i++;\n    }\n  \
    \  return 0 if $sum > $w;\n    return 0 if $size % 2 == 0;\n    my $half = $size/2;\n\
    \    my $left = $half - 1;\n    my $right = $half + 1;\n    while($left >= 0 &&\
    \ $right < $size) {\n        return 0 if $q->[$left] != $q->[$right];\n      \
    \  $left--;\n        $right++;\n    }\n    return 1;\n}", "    return 1 if (is_balanced($q)\
    \ && array_sum($q) <= $w);\n    return 0;\n}", "    if ((sum(@$q) <= $w) && check_if_palindrome(@$q))\
    \ {\n        return 1;\n    }\n    return;\n}", "    my $sum = 0;\n    my @q =\
    \ @$q;\n    return 0 if (($#q+1) % 2 != 0);\n    my $mid = (($#q+1) / 2) - 1;\n\
    \    for (my $i = 0; $i <= $mid; $i++) {\n        $sum += $q[$i];\n        $sum\
    \ += $q[$#q-$i];\n    }\n    return 1 if ($sum <= $w && $q[$mid] == $q[$#q-$mid]);\n\
    \    return 0;\n}", "    die \"pass an array reference!\" unless ref $q eq 'ARRAY';\n\
    \    die \"pass a weight!\" unless defined $w;\n    my $sum = 0;\n    for (@$q)\
    \ {\n        die \"pass numbers!\" unless /^\\d+$/;\n        $sum += $_;\n   \
    \ }\n    return 0 if $sum > $w;\n    return 0 if join('', @$q) ne join('', reverse\
    \ @$q);\n    return 1;\n}", "    return 0 if sum($q) > $w;\n    return 1 if is_palindrome($q);\n\
    \    return 0;\n}", "    if (  (sum($q) <= $w)  and  (is_palindrome($q))  ) {\
    \ return 1; }\n    else { return 0; }\n}", "    return 1 unless ( $w < sum(@$q)\
    \ );\n    for ( my $i = 0; $i < @$q; $i++ ) {\n        return 0 unless ($q->[$i]\
    \ == $q->[@$q - $i - 1]);\n    }\n    return 1;\n}", "    my $n = scalar @$q;\n\
    \    my $b = is_balanced($q);\n    my $s = sum($q);\n    return 1 if $b && $s\
    \ <= $w;\n    return 0;\n}", "    return 0 if $w < 0;\n    return 0 if not is_balanced($q);\n\
    \    my $sum = 0;\n    $sum += $_ for @$q;\n    return $sum <= $w;\n}", "    return\
    \ 1 if sum(@$q) <= $w && is_palindrome(@$q);\n    return 0;\n}", "    my $sum\
    \ = 0;\n    return 0 if(scalar(@$q) == 0 || scalar(@$q) % 2 == 0);\n    for(my\
    \ $i = 0; $i < int(scalar(@$q) / 2); $i++) {\n        return 0 if($q->[$i] !=\
    \ $q->[scalar(@$q) - 1 - $i]);\n        $sum += $q->[$i];\n    }\n    $sum +=\
    \ $q->[int(scalar(@$q) / 2)];\n    return $sum <= $w;\n}", "    my $sum = sum\
    \ @$q;\n    return 0 if $sum > $w;\n    return 0 if $sum != @$q && $sum + @$q\
    \ - 2 <= $w;\n    return 1;\n}", "    my $r = 0;\n    foreach (@$q) {\n      \
    \  $r += $_;\n    }\n    return 1 if $r <= $w && is_palindrome($q);\n    return\
    \ 0;\n}", "    return scalar(@$q) == 1 || (@$q == 2 && $q->[0] == $q->[1]) ? 1\
    \ : 0 unless\n        $q->[0] + $q->[-1] <= $w;\n    my $d = $q->[0] + $q->[-1];\n\
    \    splice @$q, 0, 1;\n    splice @$q, -1, 1;\n    will_it_fly($q, $w - $d);\n\
    }", "    my $balanced = 1;\n    my $weight = 0;\n    for (my $i = 0; $i < scalar(@$q);\
    \ $i++) {\n        $weight += $q->[$i];\n        if ($i < @$q / 2 and $q->[$i]\
    \ != $q->[-1-$i]) {\n            $balanced = 0;\n        }\n    }\n    return\
    \ 1 if $weight <= $w and $balanced;\n    return 0;\n}", "    my $sum = 0;\n  \
    \  my $len = scalar @$q;\n    foreach my $e (@$q) {\n        $sum += $e;\n   \
    \ }\n    if ($sum <= $w && is_balanced($q)) {\n        return 1;\n    }\n    return\
    \ 0;\n}", "    my $sum = 0;\n    foreach (@$q) {\n        $sum += $_;\n    }\n\
    \    my $first = $q->[0];\n    my $last = $q->[$#$q];\n    if($sum <= $w) {\n\
    \        if($first == $last) {\n            return 1;\n        }\n    }\n    return\
    \ 0;\n}", "    return 0 if sum(@$q) > $w;\n    for (my $i = 0; $i < @$q/2; $i++)\
    \ {\n        return 0 if $q->[$i] != $q->[-1-$i];\n    }\n    return 1;\n}", " \
    \   # %YOUR_CODE%\n}", "    # TODO: return 1 if it will fly, 0 otherwise\n   \
    \ my $sum = 0;\n    foreach my $num (@$q) {\n        $sum += $num;\n    }\n  \
    \  if ($sum <= $w && $q->[0] == $q->[-1]) {\n        return 1;\n    } else {\n\
    \        return 0;\n    }\n}", "    my $palindrome = is_palindrome($q);\n    my\
    \ $max_weight = sum($q) <= $w;\n    if ($palindrome && $max_weight) {\n      return\
    \ 1;\n    } else {\n      return 0;\n    }\n}", "    my $sum = 0;\n    for my\
    \ $i (0..$#$q) {\n        $sum += $q->[$i];\n        return 0 if $sum > $w;\n\
    \    }\n    return $sum <= $w;\n}", "    my $n = @$q;\n    my $sum = 0;\n    for\
    \ my $e (@$q) {\n        $sum += $e;\n    }\n    return 1 if $sum <= $w;\n   \
    \ my $j = int($n/2);\n    if ($n % 2 == 0) {\n        for my $i (0..$j-1) {\n\
    \            return 0 if $q->[$i] != $q->[$n-$i-1];\n        }\n    } else {\n\
    \        for my $i (0..$j-1) {\n            return 0 if $q->[$i] != $q->[$n-$i-1];\n\
    \        }\n    }\n    return 1;\n}", "    # return 1 if it is balanced and the\
    \ sum of its elements is less than or equal the maximum possible weight w\n  \
    \  return 1 if balanced($q) && sum(@$q) <= $w;\n    return;\n}", "    my $sum\
    \ = sum(@$q);\n    if ($sum <= $w && is_palindrome($q)) {\n        return 1;\n\
    \    }\n    return 0;\n}", "    my $x = $w;\n    if ( is_palindrome($q) and is_balanced($q,\
    \ $w) ) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
  "    my $p = join '', @$q;\n    my $sum = 0;\n    my $n = @$q;\n    for my $i (0..$n-1)\
    \ {\n        $sum += $q->[$i];\n    }\n    if ($sum <= $w && $p eq reverse $p)\
    \ {\n        return 1;\n    }\n    return 0;\n}", "    # your code goes here\n\
    \    my $s = sum(@$q);\n    my $p = palindrome(@$q);\n    if($s <= $w && $p ==\
    \ 1){\n        return 1;\n    }\n    else{\n        return 0;\n    }\n}", "  \
    \  my $s = sum($q);\n    return $s <= $w && is_palindrome($q);\n}", "    my $len\
    \ = scalar @$q;\n    if ($len == 1 || $len == 0) {\n        return 1;\n    }\n\
    \    for (my $i = 0; $i < $len / 2; $i++) {\n        if ($q->[$i] != $q->[$len\
    \ - $i - 1]) {\n            return 0;\n        }\n    }\n    my $sum = 0;\n  \
    \  for (@$q) {\n        $sum += $_;\n    }\n    if ($sum <= $w) {\n        return\
    \ 1;\n    }\n    return 0;\n}", "    my $n = @$q;\n    my $sum = sum(@$q);\n \
    \   my $b = 1;\n    for my $i (0..$n-1){\n        if(!exists $q->[$n-$i-1] ||\
    \ $q->[$i] ne $q->[$n-$i-1]){\n            $b = 0;\n            last;\n      \
    \  }\n    }\n    $b && $sum <= $w;\n}", "    return (sum($q)<=$w) && is_palindrome($q);\n\
    }", "    my $sum = sum(@$q);\n    return 0 if $sum > $w;\n    return $q->[0] ==\
    \ $q->[-1] ? 1 : 0;\n}", "    my $total = 0;\n    for (@$q) {\n        $total\
    \ += $_;\n    }\n    return ($total <= $w && is_palindrome($q)) ? 1 : 0;\n}",
  "    my $sum = 0;\n    return 0 if (scalar @$q <= 1);\n    foreach (@$q) {\n   \
    \     $sum += $_;\n    }\n    return 0 if ($sum > $w);\n    my $is_palindrome\
    \ = 1;\n    for (my $i = 0; $i < @$q; $i++) {\n        if (@$q[$i] != @$q[@$q-1-$i])\
    \ {\n            $is_palindrome = 0;\n            last;\n        }\n    }\n  \
    \  return $is_palindrome;\n}", "    my $sum = 0;\n    my $len = @$q;\n    my $half_len\
    \ = int($len/2);\n    my $ret = 1;\n    if($len % 2) {\n        $ret = $q->[$half_len]\
    \ <= $w ? 1 : 0;\n    }\n    for(my $i = 0; $i < $half_len; $i++) {\n        if($q->[$i]\
    \ != $q->[$len-$i-1]) {\n            $ret = 0;\n            last;\n        }\n\
    \        $sum += $q->[$i] + $q->[$len-$i-1];\n    }\n    return $sum <= $w ? $ret\
    \ : 0;\n}", "    my $sum = 0;\n    for (@$q) {\n        $sum += $_;\n    }\n \
    \   if ($sum > $w) {\n        return '';\n    }\n    my $i = 0;\n    my $j = $#$q;\n\
    \    while ($i < $j) {\n        if ($q->[$i] != $q->[$j]) {\n            return\
    \ '';\n        }\n        $i++;\n        $j--;\n    }\n    return 1;\n}", "  \
    \  die \"invalid input\" if not @$q;\n    my $i = 0;\n    my $j = $#$q;\n    my\
    \ $sum = 0;\n    while ($i <= $j) {\n        $sum += $q->[$i];\n        if ($i\
    \ == $j) {\n            last;\n        }\n        $sum += $q->[$j];\n        last\
    \ if $sum > $w;\n        $i++;\n        $j--;\n    }\n    return $sum <= $w &&\
    \ $i == $j ? 1 : 0;\n}", "    my $sum = 0;\n    $sum += $_ for @$q;\n    return\
    \ $sum <= $w && $q->[0] == $q->[-1] ? 1 : 0;\n}", "    my $sum = 0;\n    for my\
    \ $e (@$q) {\n        $sum += $e;\n    }\n    if ($sum > $w) {\n        return\
    \ \"\";\n    }\n    my $l = 0;\n    my $r = $#$q;\n    while ($l < $r) {\n   \
    \     if ($q->[$l] != $q->[$r]) {\n            return \"\";\n        }\n     \
    \   $l++;\n        $r--;\n    }\n    return 1;\n}", "    my @q = @$q;\n    my\
    \ $sum = 0;\n    for (@q) {\n        $sum += $_;\n    }\n    return ($sum <= $w\
    \ && is_palindrome(\\@q));\n}", "    my @q = @$q;\n    return 0 if array_sum(@q)\
    \ > $w;\n    return is_palindrome(\\@q);\n}", "    my $sum = sum($q);\n    return\
    \ ($sum <= $w) && is_palindrome($q);\n}", "    return 1 if (is_balanced($q) and\
    \ sum($q) <= $w);\n    return 0;\n}", "    my $sum = 0;\n    for (@$q) {\n   \
    \     $sum += $_;\n    }\n    return 0 if $sum > $w;\n    my $i = 0;\n    my $j\
    \ = $#$q;\n    while ($i < $j) {\n        return 0 if $q->[$i] != $q->[$j];\n\
    \        $i++;\n        $j--;\n    }\n    return 1;\n}", "    my $sum = 0;\n \
    \   my $mid = int(@$q/2);\n    my $flag = 0;\n    foreach my $i (0..$mid-1) {\n\
    \        $sum += $q->[$i];\n        if ($q->[$i] != $q->[-1-$i]) {\n         \
    \   $flag = 1;\n        }\n    }\n    $sum += $q->[$mid] if (@$q%2);\n    return\
    \ 1 if ($sum <= $w && !$flag);\n    return 0;\n}", "    my $q_sum = sum(@$q);\n\
    \    my $q_r = reverse_arr(@$q);\n    return ($q_sum <= $w and @$q == @$q_r) ?\
    \ 1 : 0;\n}", "    my $sum = sum @$q;\n    if (is_palindrome($q) && $sum <= $w)\
    \ {\n        return 1;\n    }\n    return 0;\n}", "    if (scalar(@$q) > 1) {\n\
    \        if ($q->[0] + $q->[-1] <= $w) {\n            if (is_palindrome($q)) {\n\
    \                return 1;\n            }\n        }\n    } else {\n        if\
    \ ($q->[0] <= $w) {\n            return 1;\n        }\n    }\n    return 0;\n}",
  "    return @$q <= 1 ? 1 : @$q <= $w && $q->[0] == $q->[-1] && will_it_fly([ map\
    \ { $q->[$_] } 1..$#$q-1 ], $w - $q->[0] - $q->[-1]);\n}", "    my $sum = reduce\
    \ { $a + $b } @$q;\n    my $reversed = reverse @$q;\n    return 0 if $sum > $w;\n\
    \    my $is_palindrome = join('', @$q) eq join('', @$reversed);\n    return $is_palindrome\
    \ ? 1 : 0;\n}", "    my $sum = 0;\n    for(@$q) {\n        $sum += $_;\n    }\n\
    \    if($sum <= $w && is_array_palindrome($q)) {\n        return 1;\n    }\n \
    \   return 0;\n}", "    my $sum = 0;\n    $sum += $_ for @$q;\n    return $sum\
    \ <= $w && is_palindrome($q);\n}", "    if(not is_balanced($q)) { return 0 }\n\
    \    my $sum = 0;\n    foreach my $elem (@$q) {\n        $sum += $elem;\n    }\n\
    \    if($sum <= $w) { return 1 }\n    return 0;\n}", "    return 0 if ($w < 0);\n\
    \    return 0 if ($w < sum_array($q));\n    return 1 if ($w == sum_array($q));\n\
    \    return 1 if (is_palindrome($q));\n    return 0;\n}", "    my $sum = 0;\n\
    \    my $odd = 1;\n    foreach my $num (@$q) {\n        $sum += $num;\n      \
    \  $odd *= $num if $num % 2;\n    }\n    $sum <= $w && $odd;\n}", "    return\
    \ 0 if sum(@$q) > $w;\n    return 0 if sum(@$q) != sum(reverse @$q);\n    return\
    \ 1;\n}", "    my $p = sum($q);\n    $p <= $w and is_palindrome($q);\n}", "  \
    \  my $sum = sum_of_elements($q);\n    my $balance = check_if_balanced($q);\n\
    \    if ($sum <= $w && $balance == 1) {\n        return 1;\n    }\n    else {\n\
    \        return 0;\n    }\n}", "    return 1 if (is_balanced($q) && sum_less_than_max($q,\
    \ $w));\n    return;\n}", "    return -1 if (sum($q) > $w);\n    return -1 if\
    \ (!is_palindrome($q));\n    return 1;\n}", "    my $is_balanced = 1;\n    my\
    \ $sum = 0;\n    my $max = $q->[0];\n    my $min = $q->[0];\n    for my $i ( 0\
    \ .. $#$q ) {\n        if ($i != $#$q) {\n            $is_balanced = 0 if $q->[$i]\
    \ != $q->[$#q - $i];\n        }\n        $sum += $q->[$i];\n        $max = $q->[$i]\
    \ if $q->[$i] > $max;\n        $min = $q->[$i] if $q->[$i] < $min;\n    }\n  \
    \  return 1 if $is_balanced && $sum <= $w;\n    return 0;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
