name: HumanEval_72_will_it_fly
language: pl
prompt: "# Write a function that returns 1 if the object q will fly, and  otherwise.\n\
  # The object q will fly if it's balanced (it is a palindromic array) and the sum\
  \ of its elements is less than or equal the maximum possible weight w.\n# Example:\n\
  # >>> will_it_fly([1, 2], 5)\n# \"\"\n# # 1+2 is less than the maximum possible\
  \ weight, but it's unbalanced.\n# >>> will_it_fly([3, 2, 3], 1)\n# \"\"\n# # it's\
  \ balanced, but 3+2+3 is more than the maximum possible weight.\n# >>> will_it_fly([3,\
  \ 2, 3], 9)\n# 1\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
  # >>> will_it_fly([3], 5)\n# 1\n# # 3 is less than the maximum possible weight,\
  \ and it's balanced.\nsub will_it_fly {\n    my($q, $w) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&will_it_fly;\n\
  \        if(eq_deeply($candidate->([3, 2, 3], 9),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2], 5),\"\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3],\
  \ 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
  \ 2, 3], 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([1, 2, 3], 6),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5], 5),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return 0 if($w < $q->[0]);\n    my $res = $q->[0];\n    for(my\
    \ $i = 1; $i < @$q; $i++) {\n        return 0 if($q->[$i] != $q->[$#{$q} - $i]);\n\
    \        $res += $q->[$i];\n    }\n    return $res <= $w;\n}", "    return 0 if\
    \ !is_palindrome($q);\n    return sum(@$q) <= $w;\n}", "    my $result = 0;\n\
    \    # get all the sums and find max\n    if ($w >= sum($q)) {\n        $result\
    \ = 1;\n    }\n    # check if balanced\n    $result = 1 if is_it_balanced($q);\n\
    \    return $result;\n}", "    my @q = @$q;\n    my $sum = 0;\n    for(@q) {\n\
    \        $sum += $_;\n    }\n    if($sum <= $w) {\n        for(my $i = 0; $i <\
    \ $#q; $i++) {\n            if($q[$i] != $q[$#q - $i]) {\n                return\
    \ \"\";\n            }\n        }\n        return 1;\n    }\n    return \"\";\n\
    }", "    my $sum = 0;\n    my $inverted_q = reverse($q);\n    my $i = 0;\n   \
    \ while ($i < length($q)) {\n        if (substr($q, $i, 1) != substr($inverted_q,\
    \ $i, 1)) {\n            return 0;\n        }\n        $sum += substr($q, $i,\
    \ 1);\n        $i += 1;\n    }\n    if ($sum <= $w) {\n        return 1;\n   \
    \ }\n    return 0;\n}", "    my $sum = 0;\n    foreach(@$q) { $sum += $_ }\n \
    \   $sum <= $w && $q eq reverse(@$q) ? 1 : 0;\n}", "    return 0 if sum($q) >\
    \ $w;\n    return 0 if is_palindrome($q) != 1;\n    return 1;\n}", "    my $qr\
    \ = join '', reverse @$q;\n    return (sum($q) <= $w && $qr eq join('', @$q))\
    \ ? 1 : 0;\n}", "    my $sum = 0;\n    my $half = int(@$q/2);\n    foreach my\
    \ $i (0..$half-1) {\n        $sum += $q->[$i];\n        return 0 if $sum > $w;\n\
    \        return 0 if $q->[$i] != $q->[-1-$i];\n    }\n    $sum += $q->[$half]\
    \ if @$q % 2;\n    return 0 if $sum > $w;\n    return 1;\n}", "    return (sum($q)\
    \ <= $w && is_palindrome($q)) ? 1 : 0;\n}", "    return 1 if is_balanced($q) &&\
    \ (sum(@$q) <= $w);\n    return 0;\n}", "    my $sum = sum(@$q);\n    return ($sum\
    \ <= $w && is_palindrome($q)) ? 1 : 0;\n}", "    my $sum = $w;\n    for my $el\
    \ (@$q) {\n        $sum += $el;\n    }\n    my $sm = $q->[0];\n    my $la = $q->[-1];\n\
    \    my $mid = $#$q;\n    while ($sm <= $la) {\n        if ($sm != $la) {\n  \
    \          return 0;\n        }\n        $sm = $q->[++$mid];\n        $la = $q->[--$mid];\n\
    \    }\n    return 1 if $sum <= $w;\n    return 0;\n}", "    my $sum = 0;\n  \
    \  foreach my $item (@$q) {\n        $sum += $item;\n    }\n    return 0 if $sum\
    \ > $w;\n    my $len = scalar @$q;\n    my $half = $len / 2;\n    foreach my $i\
    \ (0..$half-1) {\n        return 0 if $q->[$i] != $q->[$len-$i-1];\n    }\n  \
    \  return 1;\n}", "    return 0 if sum(@$q) > $w;\n    return 1 if sum(@$q) <=\
    \ $w;\n    my @q = @$q;\n    return 0 if scalar @q != scalar reverse @q;\n   \
    \ return 1;\n}", "    my $sum = sum(@$q);\n    return 0 if $sum > $w;\n    return\
    \ 1 if is_palindrome(@$q);\n    return 0;\n}", "    my $sum = 0;\n    for my $i\
    \ (@$q) {\n        $sum += $i;\n    }\n    if ($sum <= $w && !is_palindrome($q))\
    \ {\n        return 1;\n    }\n    return 0;\n}", "    my @q = @$q;\n    return\
    \ 1 if sum(@q) <= $w && is_palindrome(\\@q);\n    return 0;\n}", "    return 1\
    \ if balanced($q) && array_sum($q) <= $w;\n    return 0;\n}", "    my $balanced\
    \ = 0;\n    my $weight = 0;\n    for(my $i = 0; $i < @$q; $i++) {\n        $weight\
    \ += $q->[$i];\n        last if $weight > $w;\n        if($q->[$i] == $q->[-1-$i])\
    \ {\n            $balanced++;\n        }\n    }\n    if($weight <= $w && $balanced\
    \ == @$q) {\n        return 1;\n    }\n    return 0;\n}", "    for (my $i = 0;\
    \ $i < @$q; $i++) {\n        next if $q->[$i] + $q->[@$q - $i - 1] <= $w;\n  \
    \      return 0;\n    }\n    return 1;\n}", "    my $total = 0;\n    my @q = @$q;\n\
    \    foreach (@q) {\n        $total += $_;\n    }\n    # Because we're checking\
    \ for palindromic array, we can stop if we reach\n    # the center of the array.\n\
    \    for my $i (0 .. int($#q/2)) {\n        if ($q[$i] != $q[-1 - $i]) {\n   \
    \         return 0;\n        }\n    }\n    return $total <= $w;\n}", "    my $sum\
    \ = sum @$q;\n    return $sum <= $w && is_palindrome($q);\n}", "    return is_palindrome($q)\
    \ && $w >= sum($q);\n}", "    return (is_balanced($q) && (array_sum($q) <= $w));\n\
    }", "    my $n = @$q;\n    my $balanced = 1;\n    for (my $i = 0; $i < $n/2; $i++)\
    \ {\n        $balanced = 0 if $q->[$i] != $q->[$n-$i-1];\n    }\n    return 0\
    \ if !$balanced;\n    my $sum = 0;\n    for (my $i = 0; $i < $n; $i++) {\n   \
    \     $sum += $q->[$i];\n    }\n    return $sum <= $w;\n}", "    my $is_balanced\
    \ = is_balanced($q);\n    my $sum = sum($q);\n    return $is_balanced && $sum\
    \ <= $w;\n}", "    return 0 if sum(@$q) > $w;\n    my $l = scalar @$q;\n    for\
    \ my $i (0..$l/2-1) {\n        return 0 if $q->[$i] != $q->[$l-$i-1];\n    }\n\
    \    return 1;\n}", "    return 0 if sum(@$q) > $w;\n    return 0 if !is_palindrome($q);\n\
    \    return 1;\n}", "    my $sum = 0;\n    for my $i (@$q) {\n        $sum +=\
    \ $i;\n    }\n    return $sum <= $w && is_palindrome($q);\n}", "    my $sum =\
    \ sum(@$q);\n    if ($sum <= $w) {\n        my $r = join('', @$q);\n        if\
    \ ($r eq reverse($r)) {\n            return 1;\n        }\n    }\n    return 0;\n\
    }", "    # TODO\n    # my $sum = sum($q);\n    # my $max = max($q);\n    # my\
    \ $min = min($q);\n    # if (is_palindrome($q) && $sum <= $w && $max != $min)\
    \ {\n    #     return 1;\n    # }\n    # return 0;\n    my $sum = sum($q);\n \
    \   if ($sum <= $w && is_palindrome($q)) {\n        return 1;\n    }\n    return\
    \ 0;\n}", "    if(join('', @$q) eq join('', reverse @$q) and sum(@$q) <= $w) {\n\
    \        return 1;\n    }\n    return 0;\n}", "    @q = split(/ /, $q);\n    $sum\
    \ = 0;\n    foreach $ele (@q) {\n        $sum += $ele;\n    }\n    if ($sum <=\
    \ $w) {\n        $result = 1;\n    } else {\n        $result = 0;\n    }\n   \
    \ if ($result) {\n        print \"1\";\n    } else {\n        print \"0\";\n \
    \   }\n}", "    my $sum = 0;\n    my $i = 0;\n    my $j = @$q - 1;\n    while\
    \ ($i < $j) {\n        if ($q->[$i] != $q->[$j]) {\n            return '';\n \
    \       }\n        $sum += $q->[$i];\n        $i++;\n        $j--;\n    }\n  \
    \  if (@$q % 2) {\n        $sum += $q->[$i];\n    }\n    return $sum <= $w;\n}",
  "    my $sum = sum(@$q);\n    # return 1 if it will fly\n    return $sum <= $w &&\
    \ is_palindrome($q);\n}", "    # find out the maximum weight\n    my $sum = 0;\n\
    \    foreach (@$q) {\n        $sum += $_;\n    }\n    return 0 if ($sum > $w);\n\
    \    # find out the reverse array\n    my @reverse = reverse @$q;\n    return\
    \ 1 if (@$q ~~ @reverse);\n    return 0;\n}", "    my $sum = sum @$q;\n    if\
    \ ($sum <= $w) {\n        my $string = join('', @$q);\n        if ($string eq\
    \ reverse $string) {\n            return 1;\n        }\n    }\n    return;\n}",
  "    my $s = @$q;\n    for my $i (0..(($s>>1)-1)) {\n        return '' if $q->[$i]\
    \ != $q->[$s-$i-1];\n    }\n    my $sum = 0;\n    $sum += $_ for @$q;\n    return\
    \ $sum <= $w;\n}", "    my $sum = sum(@$q);\n    return $sum <= $w && is_palindrome($q);\n\
    }", "    my $sum = sum(@$q);\n    my $palindrome = is_palindrome($q);\n    $sum\
    \ <= $w && $palindrome;\n}", "    return (@$q != 1) && ($w >= 2*$q->[0]) ? will_it_fly([@$q[1..$#$q-1]],\
    \ $w-$q->[0]) : \n                                             @$q == 1 && $w\
    \ >= $q->[0];\n}", "    return 0 if sum($q) > $w;\n    my $l = @$q;\n    for (0..$l/2)\
    \ {\n        return 0 if $q->[$_] != $q->[$l-$_];\n    }\n    return 1;\n}", " \
    \   return 0 if $w < 0;\n    return 1 if $w == 0 && @$q == 0;\n    return 0 if\
    \ @$q == 0;\n    return will_it_fly([@$q[1..$#$q]], $w - $q->[0]) || will_it_fly([@$q[1..$#$q]],\
    \ $w);\n}", "    my $sum = sum(@$q);\n    return $sum <= $w && join(\"\", @$q)\
    \ eq reverse(join(\"\", @$q));\n}", "    return 1 if (scalar @$q == 1);\n    my\
    \ $sum = 0;\n    for (@$q) {\n        $sum += $_;\n    }\n    if ($sum <= $w)\
    \ {\n        my @first_half = @$q[0..(@$q/2-1)];\n        my @second_half = reverse\
    \ @$q[(@$q/2)..$#$q];\n        for (0..(@$q/2-1)) {\n            return 0 if ($first_half[$_]\
    \ != $second_half[$_]);\n        }\n        return 1;\n    }\n    return 0;\n}",
  "    my $sum = 0;\n    foreach(@$q) {\n        $sum += $_;\n    }\n    return ($sum\
    \ <= $w && is_palindrome($q)) ? 1 : 0;\n}", "    $q = [sort {$a <=> $b} @$q];\n\
    \    my $result = 1;\n    my $i = 0;\n    my $j = $#$q;\n    my $sum = 0;\n  \
    \  while ($i <= $j) {\n        $sum += $q->[$i] + $q->[$j];\n        if ($sum\
    \ > $w) {\n            $result = \"\";\n            last;\n        }\n       \
    \ $i++;\n        $j--;\n    }\n    if ($i <= $j) {\n        $result = \"\";\n\
    \    }\n    return $result;\n}", "    my $n = scalar @$q;\n    if (reduce { $a\
    \ + $b } @$q > $w) {\n        return \"\";\n    }\n    my $i = 0;\n    my $j =\
    \ $n - 1;\n    my $b = 1;\n    while ($i < $j) {\n        if ($q->[$i] != $q->[$j])\
    \ {\n            $b = \"\";\n            last;\n        }\n        $i++;\n   \
    \     $j--;\n    }\n    return $b;\n}", "    my $sum = 0;\n    foreach my $element\
    \ (@$q) {\n        $sum += $element;\n    }\n    if ($sum <= $w) {\n        if\
    \ ($q->[0] == $q->[-1]) {\n            return 1;\n        }\n    }\n    return\
    \ 0;\n}", "    return 1 if (is_palindrome($q) and is_sum_lte($q, $w));\n    return\
    \ 0;\n}", "    my $sum = 0;\n    for (@$q) {\n        $sum += $_;\n    }\n   \
    \ return 1 if $sum <= $w;\n    return 0 if is_palindrome($q);\n    return 0;\n\
    }", "    my $right = @$q - 1;\n    my $left = 0;\n    my $ok = 1;\n    my $weight\
    \ = 0;\n    while ($left < $right) {\n        $weight += $q->[$left];\n      \
    \  $weight += $q->[$right];\n        if ($q->[$left] != $q->[$right]) {\n    \
    \        $ok = 0;\n        }\n        $left++;\n        $right--;\n    }\n   \
    \ if ($left == $right) {\n        $weight += $q->[$left];\n    }\n    if ($weight\
    \ > $w) {\n        $ok = 0;\n    }\n    return $ok;\n}", "    my $s = sum(@$q);\n\
    \    $s <= $w and is_palindrome($q);\n}", "    my $sum = 0;\n    for (@$q) {\n\
    \        $sum += $_;\n    }\n    return 0 if $sum > $w;\n    for (my $i = 0; $i\
    \ < @$q / 2; $i++) {\n        return 0 if $q->[$i] != $q->[-1 - $i];\n    }\n\
    \    return 1;\n}", "    my $sum = sum_of_els($q);\n    return 0 if $sum > $w;\n\
    \    return 1 if $sum <= $w && is_balanced($q);\n}", "    if (is_balanced($q)\
    \ && is_light_enough($q, $w)) {\n        return 1;\n    }\n    return 0;\n}",
  "    my $n = scalar @$q;\n    my @a = sort {$a <=> $b} @$q;\n    my $sum = 0;\n\
    \    for(my $i = 0; $i < $n; $i++) {\n        return 0 if $a[$i] != $a[$n-$i-1];\n\
    \        $sum += $a[$i];\n    }\n    return 1 if $sum <= $w;\n    return 0;\n}",
  "    my $w = 0;\n    foreach (@$q) {\n\t$w += $_;\n    }\n    return $w <= $w ?\
    \ 1 : 0;\n}", "    return 1 if (join('', @$q) eq join('', reverse @$q) and sum(@$q)\
    \ <= $w);\n    return;\n}", "    my $sum = sum(@$q);\n    return $sum <= $w &&\
    \ is_palindrome($q);\n}", "    if (sum(@$q) <= $w) {\n        return 1 if $q->[0]\
    \ == $q->[-1];\n        my $i = 1;\n        my $j = $#$q;\n        while (1) {\n\
    \            return 1 if $i >= $j;\n            return if $q->[$i] != $q->[$j];\n\
    \            $i++;\n            $j--;\n        }\n    }\n    return;\n}", "  \
    \  my $x = sum(@$q);\n    return 0 if $x > $w;\n    return 1 if palindrome($q);\n\
    \    return 0;\n}", "    return 0 if sum(@$q) > $w;\n    for (my $i = 0; $i <\
    \ $#$q; $i++) {\n        return 0 if $q->[$i] != $q->[-$i - 1];\n    }\n    return\
    \ 1;\n}", "    my $f = 0;\n    return 0 if @$q == 0;\n    return 1 if @$q == 1;\n\
    \    my $i = 0;\n    my $j = @$q - 1;\n    while($i < $j) {\n        if($q->[$i]\
    \ != $q->[$j]) {\n            return 0;\n        }\n        $i++;\n        $j--;\n\
    \    }\n    my $s = 0;\n    for(@$q) {\n        $s += $_;\n    }\n    return $s\
    \ <= $w;\n}", "    my $x = @$q;\n    my $n = $x / 2;\n    my $m = $x - $n;\n \
    \   my $s = 0;\n    for my $i (0 .. $m - 1) {\n        $s += $q->[$i];\n    }\n\
    \    return $s <= $w && $s == $q->[$x - 1]\n}", "    return 1 if(sum(@$q) <= $w\
    \ && is_palindrome($q));\n    return 0;\n}", "    my $sum = 0;\n    foreach (@$q)\
    \ {\n        $sum += $_;\n    }\n    return $sum <= $w && \"@$q\" eq reverse \"\
    @$q\";\n}", "    # Write your code here\n    my $total = 0;\n    for my $item\
    \ (@$q) {\n        $total += $item;\n    }\n    return $total <= $w && $q->[0]\
    \ == $q->[-1] ? 1 : 0;\n}", "    my @q = @$q;\n    my $sum = sum @q;\n    return\
    \ 1 if ($sum <= $w && is_balanced(@q));\n    return 0;\n}", "    return undef\
    \ if scalar @$q == 0;\n    return 1 if scalar @$q == 1;\n    my $i = 0;\n    my\
    \ $j = scalar @$q - 1;\n    my $sum = 0;\n    for(my $k = 0; $k < scalar @$q;\
    \ $k++) {\n        $sum += $q->[$k];\n    }\n    return undef if $sum > $w;\n\
    \    while ($i < $j) {\n        return undef if $q->[$i] != $q->[$j];\n      \
    \  $i++;\n        $j--;\n    }\n    return 1;\n}", "    my $d = (scalar @$q) -\
    \ 1;\n    my $b = 1;\n    for my $i (0..($d / 2)) {\n        $b = 0 if $q->[$i]\
    \ != $q->[$d - $i];\n    }\n    my $s = 0;\n    for my $i (@$q) {\n        $s\
    \ += $i;\n    }\n    return 0 if $s > $w;\n    return 0 if !$b;\n    return 1;\n\
    }", "    my $sum = 0;\n    my $i = 0;\n    my $balance = 1;\n    while ($i < @$q)\
    \ {\n        $sum += $q->[$i];\n        $balance = 0 if $q->[$i] != $q->[-$i-1];\n\
    \        $i++;\n    }\n    return $sum <= $w && $balance;\n}", "    return (join(\"\
    \", @$q) eq join(\"\", reverse @$q) && sum($q) <= $w) ? 1 : 0;\n}", "    if( is_balanced($q)\
    \ && sum($q) <= $w ) {\n        return 1;\n    } else {\n        return 0;\n \
    \   }\n}", "    my $sum = 0;\n    foreach my $i (@$q) {\n        $sum += $i;\n\
    \    }\n    my $temp = 0;\n    my $rev = 0;\n    my $ori = $sum;\n    while($sum\
    \ != 0) {\n        $temp = $sum % 10;\n        $rev = ($rev * 10) + $temp;\n \
    \       $sum = $sum / 10;\n    }\n    if($ori == $rev && $sum <= $w) {\n     \
    \   return 1;\n    }\n    else {\n        return 0;\n    }\n}", "    is_palindrome($q)\
    \ && sum($q) <= $w ? 1 : 0;\n}", "    die \"q must be a reference to an array\"\
    \ unless ref($q) eq 'ARRAY';\n    die \"w must be a positive number\" unless $w\
    \ >= 0;\n    # your code goes here\n}", "    my $len = scalar @$q;\n    return\
    \ 0 if ($len < 2);\n    return ($q->[0] + $q->[$len-1] <= $w) ? ( ( $len <= 2)\
    \ || will_it_fly( [ @$q[1..$len-2] ], $w ) ) : 0;\n}", "    my $sum = sum($q);\n\
    \    my $palindrome = is_palindrome($q);\n    #print \"$sum, $palindrome\\n\"\
    ;\n    return $sum <= $w && $palindrome;\n}", "    $q = [@$q]; # copy\n    my\
    \ $ok = 0;\n    $ok = 1 if @$q == 1 && $q->[0] <= $w;\n    $ok = 1 if @$q >= 2\
    \ && $q->[0] + $q->[-1] <= $w && pop(@$q) == shift(@$q) && $ok || will_it_fly($q,\
    \ $w);\n    return $ok;\n}", "    my $res = 0;\n    my $sum = sum(@$q);\n    if($sum\
    \ <= $w){\n        $res = 1;\n        my $half = int(@$q/2);\n        my $count\
    \ = 0;\n        my $flag = 0;\n        for my $i (0..$half){\n            for\
    \ my $j ($half .. $#$q){\n                if($i == $j){\n                    last;\n\
    \                }\n                if($q->[$i] == $q->[$j]){\n              \
    \      $count++;\n                }\n            }\n        }\n        if($count\
    \ == $half){\n            $flag = 1;\n        }\n        if($flag == 0){\n   \
    \         $res = 0;\n        }\n    }\n    return $res;\n}", "    return 0 if\
    \ $w < sum(@$q);\n    return 0 if @$q != 1 && @$q % 2 == 0;\n    return 1;\n}",
  "    my $sum = 0;\n    for my $i (@$q) {\n        $sum += $i;\n    }\n    return\
    \ 0 if $sum > $w;\n    my $idx = int($#$q / 2);\n    for my $i (0..$idx) {\n \
    \       return 0 if $q->[$i] != $q->[-$i-1];\n    }\n    return 1;\n}", "    my\
    \ $sum = 0;\n    my $len = scalar @$q;\n    for (my $i = 0; $i < $len; $i++) {\n\
    \        $sum += $q->[$i];\n    }\n    my $is_balanced = 1;\n    for (my $i =\
    \ 0; $i < $len / 2; $i++) {\n        if ($q->[$i] != $q->[$len - $i - 1]) {\n\
    \            $is_balanced = 0;\n            last;\n        }\n    }\n    return\
    \ $sum <= $w && $is_balanced;\n}", "    my $sum = 0;\n    my $i = 0;\n    my $j\
    \ = scalar(@$q) - 1;\n    while($i < $j) {\n        $sum += ($q->[$i] + $q->[$j]);\n\
    \        return 0 if($sum > $w);\n        $i++;\n        $j--;\n    }\n    return\
    \ 1;\n}", "    my $sum = 0;\n    my $half_length = scalar(@$q) / 2;\n    my $i\
    \ = 0;\n    for my $elem (@$q) {\n        if ($i < $half_length) {\n         \
    \   $sum += $elem;\n        }\n        if ($i > $half_length) {\n            $sum\
    \ -= $elem;\n        }\n        $i++;\n    }\n    if ($sum <= $w && $sum > 0)\
    \ {\n        return 1;\n    }\n    return \"\";\n}", "    return 0 if sum(@$q)\
    \ > $w;\n    return join(\"\", @$q) eq join(\"\", reverse @$q) ? 1 : 0;\n}", " \
    \   return 0 if @$q == 0;\n    return 0 if @$q == 1 && $q->[0] > $w;\n    return\
    \ 1 if @$q == 1 && $q->[0] <= $w;\n    return 0 if sum(@$q) > $w;\n    return\
    \ 1 if is_balanced(@$q);\n    return 0;\n}", "    my $sum = 0;\n    my $len =\
    \ @$q;\n    if ($len % 2 == 0) {\n        my $middle = $len / 2;\n        my $left\
    \ = $middle - 1;\n        my $right = $middle;\n        while ($left >= 0 && $right\
    \ < $len) {\n            return 0 if $$q[$left] != $$q[$right];\n            $left--;\n\
    \            $right++;\n        }\n    } else {\n        my $middle = int($len\
    \ / 2);\n        my $left = $middle - 1;\n        my $right = $middle + 1;\n \
    \       while ($left >= 0 && $right < $len) {\n            return 0 if $$q[$left]\
    \ != $$q[$right];\n            $left--;\n            $right++;\n        }\n  \
    \  }\n    for (my $i = 0; $i < $len; $i++) {\n        $sum += $$q[$i];\n    }\n\
    \    if ($sum <= $w) {\n        return 1;\n    } else {\n        return 0;\n \
    \   }\n}", "    my $t = sum @$q;\n    return 0 if $t > $w;\n    my @r = reverse\
    \ @$q;\n    return 0 if \"@$q\" ne \"@r\";\n    return 1;\n}", "    my @q = @$q;\n\
    \    my $w = $w;\n    my $fly = 1;\n    my $total = 0;\n    foreach my $i (@q)\
    \ {\n        $total += $i;\n    }\n    $fly = 0 if ($total > $w);\n    my $i =\
    \ 0;\n    my $j = $#q;\n    while ($i < $j) {\n        return 0 if ($q[$i] !=\
    \ $q[$j]);\n        $i++;\n        $j--;\n    }\n    return $fly;\n}", "    my\
    \ $s = sum_of($q);\n    if ($s > $w) {\n        return 0;\n    }\n    my $r =\
    \ reverse_palindrome($q);\n    if ($r) {\n        return 1;\n    }\n    return\
    \ 0;\n}", "    return sum(@$q) > $w ? 0 : @$q == 1 || $q->[0] == $q->[-1] && will_it_fly([@$q[1..$#$q-1]],\
    \ $w);\n}", "    my $t = 0;\n    for (@$q) {\n        $t += $_;\n    }\n    return\
    \ 1 if $t <= $w && is_palindrome($q);\n    return 0;\n}", "    my $sum = 0;\n\
    \    for my $i (0..$#$q) {\n        $sum += $q->[$i];\n        last if $sum >\
    \ $w;\n    }\n    return $sum <= $w && \"@$q\" eq reverse \"@$q\";\n}", "    my\
    \ $t = join '', @$q;\n    my $u = reverse @$q;\n    my $c = 0;\n    for (@$q)\
    \ { $c += $_; }\n    $c <= $w and $t eq $u;\n}", "    my $max_w = sum($q);\n \
    \   my $pal = is_palindrome($q);\n    return $pal && $max_w <= $w;\n}", "    return\
    \ 1 if is_balanced($q) && sum($q) <= $w;\n    return 0;\n}", "    my $result =\
    \ 0;\n    if(palindrome($q) && sum($q) <= $w) {\n        $result = 1;\n    }\n\
    \    return $result;\n}", "    # TODO\n    my $sum = 0;\n    my $i = 0;\n    my\
    \ $j = @$q - 1;\n    while ($i < $j) {\n        if ($q->[$i] != $q->[$j]) {\n\
    \            return 0;\n        }\n        $i++;\n        $j--;\n    }\n    foreach\
    \ my $n (@$q) {\n        $sum += $n;\n    }\n    return $sum <= $w;\n}", "   \
    \ my $sum = sum(@$q);\n    return ($sum <= $w && is_palindrome($q));\n}", "  \
    \  my $sum = 0;\n    my $is_balanced = 0;\n    if(defined($q)) {\n        if($#{$q}\
    \ > 0) {\n            for(my $i = 0; $i <= $#{$q}; $i++) {\n                $sum\
    \ += $q->[$i];\n            }\n            if($sum <= $w) {\n                my\
    \ $is_balanced = 1;\n                for(my $i = 0; $i <= ($#{$q} / 2); $i++)\
    \ {\n                    if($q->[$i] != $q->[($#{$q} - $i)]) {\n             \
    \           $is_balanced = 0;\n                        last;\n               \
    \     }\n                }\n            }\n        }\n        elsif($#{$q} ==\
    \ 0) {\n            if($q->[0] <= $w) {\n                $is_balanced = 1;\n \
    \           }\n        }\n    }\n    return $is_balanced;\n}", "    $q = join\
    \ '', @$q;\n    $q eq reverse $q and $w >= eval join '+', @$q;\n}", "    my $sum\
    \ = 0;\n    for my $v (@$q) {\n        $sum += $v;\n    }\n    return 0 if $sum\
    \ > $w;\n    my $left = 0;\n    my $right = @$q - 1;\n    while ($left < $right)\
    \ {\n        return 0 if $q->[$left] != $q->[$right];\n        $left++;\n    \
    \    $right--;\n    }\n    return 1;\n}", "    my $q_sum = 0;\n    for my $e (@$q)\
    \ {\n        $q_sum += $e;\n    }\n    return $q_sum <= $w && @$q == 1 || palindrome($q);\n\
    }", "    return is_balanced($q) && sum($q) <= $w;\n}", "    $q = [@$q];\n    my\
    \ $q_copy = [@$q];\n    my $sum = 0;\n    my $first_half_sum = 0;\n    my $second_half_sum\
    \ = 0;\n    my $is_palindrome = 0;\n    $sum += $_ for @$q;\n    if ($sum <= $w)\
    \ {\n        $first_half_sum += shift @$q while @$q >= 2;\n        $second_half_sum\
    \ += pop @$q_copy while @$q_copy >= 2;\n        $is_palindrome = 1 if $first_half_sum\
    \ == $second_half_sum;\n    }\n    return $is_palindrome;\n}", "    return 0 if\
    \ ( sum(@$q) > $w);\n    my $s = join('', @$q);\n    my $r = join('', reverse(@$q));\n\
    \    return $s eq $r;\n}", "    return ( \n        List::Util::sum(@$q) <= $w\
    \ \n        && @$q == @{[reverse @$q]}\n    );\n}", "    my @tmp = sort {$a <=>\
    \ $b} @$q;\n    my $flag = 0;\n    my $i = 0;\n    my $j = $#tmp;\n    for (0..$#tmp/2)\
    \ {\n        $flag = 1 if $tmp[$i++] != $tmp[$j--];\n    }\n    return $flag +\
    \ (sum(@$q) > $w);\n}", "    die \"q is not a reference to an array\" unless ref($q)\
    \ eq 'ARRAY';\n    die \"w is not a positive integer\" if $w <= 0;\n    return\
    \ 0 if scalar(@$q) == 0;\n    return 1 if scalar(@$q) == 1;\n    my $y = 0;\n\
    \    my $m = $q->[0];\n    foreach (@$q) {\n        $y++ if $_ == $m;\n      \
    \  $m = $_ if $_ > $m;\n    }\n    return 0 if $y % 2 == 0;\n    my $t = $q->[0];\n\
    \    foreach (@$q) {\n        return 0 if $t + $_ > $w;\n        $t += $_;\n \
    \   }\n    return 1;\n}", "    my $a = join \"\", @$q;\n    my $b = join \"\"\
    , reverse @$q;\n    my $c = sum(@$q);\n    if ($a eq $b and $c <= $w) {\n    \
    \    return 1;\n    } else {\n        return 0;\n    }\n}", "    (\n        (join('',\
    \ @$q) eq join('', reverse @$q))\n        &&\n        ($w >= 0)\n        &&\n\
    \        ($w >= sum(@$q))\n    ) ? 1 : 0;\n}", "    my $reversed = reverse @$q;\n\
    \    if(scalar(@$q) > 2) {\n        if($q == $reversed) {\n            my $sum\
    \ = 0;\n            foreach my $elem (@$q) {\n                $sum += $elem;\n\
    \            }\n            if($sum <= $w) {\n                return 1;\n    \
    \        }\n        }\n    }\n    return 0;\n}", "    my @q = @$q;\n    return\
    \ 0 if($w < 0);\n    return 1 if($w == 0);\n    return 0 if(scalar(@q) == 0);\n\
    \    my $first = shift @q;\n    return will_it_fly(\\@q, $w - $first) || will_it_fly(\\\
    @q, $w);\n}", "    return undef if(scalar(@$q) % 2 == 0);\n    my $sum = 0;\n\
    \    my $cnt = scalar(@$q);\n    for(my $i = 0; $i < $cnt; $i++){\n        my\
    \ $j = $cnt - $i - 1;\n        if($q->[$i] != $q->[$j]){\n            return undef;\n\
    \        }\n        $sum += $q->[$i];\n    }\n    return $sum <= $w;\n}", "  \
    \  my @q = @$q;\n    my $sum = sum(@q);\n    return $sum <= $w && is_palindrome(\\\
    @q);\n}", "    my $sum = 0;\n    foreach (@$q) {\n        $sum += $_;\n    }\n\
    \    $sum <= $w && is_palindrome($q);\n}", "    my $t = 0;\n    $t += $_ for @$q;\n\
    \    $t > $w ? 0 : 1;\n}", "    my $sum = 0;\n    for (@$q) {\n        $sum +=\
    \ $_;\n    }\n    return 0 if $sum > $w;\n    my @q2 = reverse @$q;\n    return\
    \ @$q ~~ @q2;\n}", "    return 0 if balance($q) == 0 || (array_sum($q) > $w);\n\
    \    return 1;\n}", "    my $sum = &sum($q);\n    return ($sum <= $w) && (&is_balanced($q));\n\
    }", "    my $sum = 0;\n    return 0 if scalar(@$q) == 0 || scalar(@$q) % 2 !=\
    \ 0;\n    foreach (@$q) {\n        $sum += $_;\n    }\n    return 0 if $sum >\
    \ $w;\n    my $first_half = [];\n    for(my $i = 0; $i < @$q/2; $i++) {\n    \
    \    push @$first_half, $q->[$i];\n    }\n    my $second_half = [];\n    for(my\
    \ $i = @$q-1; $i >= @$q/2; $i--) {\n        push @$second_half, $q->[$i];\n  \
    \  }\n    for(my $i = 0; $i < @$first_half; $i++) {\n        return 0 if $first_half->[$i]\
    \ != $second_half->[$i];\n    }\n    return 1;\n}", "    my $sum = &sum($q);\n\
    \    return 1 if $sum <= $w && &is_balanced($q);\n    return 0;\n}", "    return\
    \ 0 if (sum(@$q) > $w);\n    return 0 if ((@$q != 1) && (@$q % 2 == 0));\n   \
    \ return 0 if (join('', @$q) ne join('', reverse @$q));\n    return 1;\n}", " \
    \   $w = int($w);\n    my $sum = 0;\n    return 0 if (scalar(@$q) > $w);\n   \
    \ foreach (@$q) {\n        $sum += $_;\n        return 0 if ($sum > $w);\n   \
    \ }\n    return $sum == $w && $sum == $q->[0] ? 1 : 0;\n}", "    my $n = 0;\n\
    \    for (@$q) {\n        $n += $_;\n    }\n    if ($n <= $w && is_palindrome($q))\
    \ {\n        return 1;\n    }\n    return 0;\n}", "    my $sum = 0;\n    for my\
    \ $num (@$q) {\n        $sum += $num;\n    }\n    return $sum <= $w && palindrome($q);\n\
    }", "    if (scalar @$q == 1) {\n        return 1;\n    }\n    elsif (scalar @$q\
    \ % 2 == 0) {\n        if (array_sum($q) <= $w) {\n            return 1;\n   \
    \     }\n        else {\n            return 0;\n        }\n    }\n    else {\n\
    \        my $a = reverse_array($q);\n        my $b = scalar @$q / 2;\n       \
    \ my $c = splice(@$a, $b, 1);\n        if (array_sum($a) + $c <= $w) {\n     \
    \       return 1;\n        }\n        else {\n            return 0;\n        }\n\
    \    }\n}", "    my $sum = 0;\n    for my $n (@$q) {\n        $sum += $n;\n  \
    \  }\n    if($sum > $w) {\n        return 0;\n    }\n    my $len = scalar @$q;\n\
    \    my $i = 0;\n    while($i < $len / 2) {\n        if($q->[$i] != $q->[$len\
    \ - $i - 1]) {\n            return 0;\n        }\n        $i++;\n    }\n    return\
    \ 1;\n}", "    my $n = @$q;\n    my $k = $n % 2;\n    my $i = $n >> 1;\n    return\
    \ 0 if sum(@$q) > $w;\n    while ($i > 0) {\n        $i--;\n        return 0 if\
    \ $q->[$i] != $q->[$n - $i - 1];\n    }\n    return 1;\n}", "    my $w1 = 0;\n\
    \    my $w2 = 0;\n    my $sum = 0;\n    my $i;\n    foreach (@$q) {\n        $sum\
    \ += $_;\n    }\n    if ($sum > $w) {\n        return 0;\n    }\n    for ($i =\
    \ 0; $i < int(@$q/2); $i++) {\n        $w1 += $q->[$i];\n        $w2 += $q->[@$q-$i-1];\n\
    \        if ($w1 > $w2) {\n            return 0;\n        }\n    }\n    return\
    \ 1;\n}", "    my $sum;\n    for (@$q) {\n        $sum += $_;\n    }\n    if ($sum\
    \ <= $w) {\n        for (my $i = 0; $i < scalar @$q/2; $i++) {\n            if\
    \ ($q->[$i] != $q->[-1-$i]) {\n                return 0;\n            }\n    \
    \    }\n        return 1;\n    }\n    return 0;\n}", "    my $sum = 0;\n    map\
    \ {$sum += $_} @$q;\n    return $sum <= $w && \"$q\" eq join('', reverse @$q)\
    \ ? 1 : 0;\n}", "    my $s = sum @$q;\n    return 0 if $s > $w;\n    my $p = qp\
    \ @$q;\n    return 0 if $p == 0;\n    return 1;\n}", "    my @q = @$q;\n    return\
    \ sum(@q) <= $w && \"@q\" eq \"@q\"\n}", "    my $len = @$q;\n    my $sum = 0;\n\
    \    my $i;\n    for ($i = 0; $i < $len; $i++) {\n        $sum += $q[$i];\n  \
    \  }\n    if ($sum > $w) {\n        return 0;\n    }\n    for ($i = 0; $i < int($len\
    \ / 2); $i++) {\n        if ($q[$i] != $q[$len - $i - 1]) {\n            return\
    \ 0;\n        }\n    }\n    return 1;\n}", "    my $rev = reverse @$q;\n    return\
    \ sum(@$q) <= $w && $q eq $rev ? 1 : '';\n}", "    my $sum = eval join '+', @$q;\n\
    \    if ($sum <= $w and @$q == scalar(grep {$_ == $q->[$#$q]} @$q)) {\n      \
    \  return 1;\n    }\n    return 0;\n}", "    return 0 if sum($q) > $w;\n    return\
    \ $q eq reverse @$q;\n}", "    my $fly;\n    $fly = 0;\n    if($w >= sum(@$q))\
    \ {\n        $fly = 1;\n        my $i;\n        for($i = 0; $i < @$q / 2; $i++)\
    \ {\n            if($q->[$i] != $q->[@$q - $i - 1]) {\n                $fly =\
    \ 0;\n                last;\n            }\n        }\n    }\n    return $fly;\n\
    }", "    my $sum = 0;\n    my $len = scalar @$q;\n    foreach my $item (@$q) {\n\
    \        $sum += $item;\n    }\n    if ( $sum <= $w ) {\n        foreach my $pos\
    \ ( 0 .. $len/2 ) {\n            if ( $$q[$pos] != $$q[$len-1-$pos] ) {\n    \
    \            return 0;\n            }\n        }\n        return 1;\n    }\n \
    \   return 0;\n}", "    my @q = @$q;\n    my $len = scalar @q;\n    my $p = $len;\n\
    \    my $sum = 0;\n    while ($p--) {\n        $sum += $q[$p];\n    }\n    return\
    \ 0 if $sum > $w;\n    return 1 if $len == 1;\n    my $f = $len / 2;\n    my $t\
    \ = $len - 1;\n    while ($f--) {\n        if ($q[$f] != $q[$t]) {\n         \
    \   return 0;\n        }\n        $t--;\n    }\n    return 1;\n}", "    if ((sum_array($q)\
    \ <= $w) && (is_palindrome($q))) {\n        return 1;\n    }\n    else {\n   \
    \     return 0;\n    }\n}", "    return 0 if (sum(@$q) > $w);\n    return 1 if\
    \ (sum(@$q) <= $w and is_palindrome($q));\n    return 0;\n}", "    my $s = 0;\n\
    \    foreach my $q (@_) {\n        if ($q !~ /^\\d+$/) {\n            return 0;\n\
    \        }\n        $s += $q;\n    }\n    return ($s <= $w) ? 1 : 0;\n}", "  \
    \  my $sum = 0;\n    foreach (@$q) {\n        $sum += $_;\n    }\n    if ($sum\
    \ <= $w && @$q == (@$q + 0) && @$q == reverse @$q) {\n        return 1;\n    }\n\
    \    return 0;\n}", "    my $sum = 0;\n    for (@$q) {\n        return unless\
    \ ($_);\n        $sum += $_;\n    }\n    return 0 if ($sum > $w);\n    my $len\
    \ = @$q;\n    for (my $i = 0; $i < int($len/2); $i++) {\n        my $a = $q->[$i];\n\
    \        my $b = $q->[$len-$i-1];\n        return 0 if ($a != $b);\n    }\n  \
    \  return 1;\n}", "    return 1 if sum(@$q) <= $w && balance(@$q);\n    return\
    \ 0;\n}", "    my $sum = sum(@$q);\n    return ($sum <= $w) && is_palindrome($q);\n\
    }", "    my $result = 0;\n    my $sum = sum(@$q);\n    $result = 1 if ($sum <=\
    \ $w && is_palindrome($q));\n    return $result;\n}", "    my $n = scalar @$q;\n\
    \    my $sum = 0;\n    foreach my $n (@$q) {\n        $sum += $n;\n    }\n   \
    \ if($sum > $w) {\n        return 0;\n    }\n    my $s = join(\"\", @$q);\n  \
    \  my $r = reverse $s;\n    if($s eq $r) {\n        return 1;\n    }\n    return\
    \ 0;\n}", "    my $sum = sum(@$q);\n    return ($sum <= $w) && (sum(@$q[0 .. int(@$q\
    \ / 2) - 1]) == sum(@$q[int(@$q / 2) .. $#$q]));\n}", "    my $sum = sum(@$q);\n\
    \    return 0 if ($sum > $w);\n    return 0 if (\"@$q\" ne reverse \"@$q\");\n\
    \    return 1;\n}", "    my $sum = 0;\n    for my $n (@$q) {\n        $sum +=\
    \ $n;\n    }\n    return $sum <= $w && is_palindrome($q);\n}", "    my $res =\
    \ 1;\n    $res = 0 if ($w < (my $sum = sum_array($q)));\n    $res = 0 if (!is_palindrome($q));\n\
    \    return $res;\n}", "    my $s = sum($q);\n    return 1 if $s <= $w && is_palindrome($q);\n\
    \    return \"\";\n}", "    my $n = @$q;\n    my $total = 0;\n    my $balanced\
    \ = 1;\n    for my $i (0..$n-1) {\n        $total += $q->[$i];\n        if($total\
    \ >= $w) {\n            return 0;\n        }\n        $balanced &&= ($q->[$i]\
    \ == $q->[$n-$i-1]);\n    }\n    return 1 if $balanced && $total <= $w;\n    return\
    \ 0;\n}", "    my $n = @$q;\n    my $s = 0;\n    for my $i (0..$n-1) {\n     \
    \   my $j = $n - $i - 1;\n        return 0 if $q->[$i] != $q->[$j];\n        $s\
    \ += $q->[$i];\n    }\n    return $s <= $w;\n}", "    my @q = @$q;\n    my $q_len\
    \ = scalar @q;\n    my $r = 0;\n    my $l = $q_len - 1;\n    my $sum = 0;\n  \
    \  my $is_balanced = 1;\n    for my $i (@q) {\n        $sum += $i;\n    }\n  \
    \  if ($sum <= $w) {\n        for (my $i = 0; $i < $q_len; $i++) {\n         \
    \   if ($q[$r] != $q[$l]) {\n                $is_balanced = 0;\n             \
    \   last;\n            }\n            $r++;\n            $l--;\n        }\n  \
    \  } else {\n        $is_balanced = 0;\n    }\n    return $is_balanced;\n}", " \
    \   my $n = @$q;\n    return 0 if $n == 0;\n    my @q = sort {$a <=> $b} @$q;\n\
    \    my $ret = 1;\n    for (my $i = 0; $i < $n; $i++) {\n        my $r = ($n -\
    \ 1) - $i;\n        last if $i >= $r;\n        return 0 if $q[$i] != $q[$r];\n\
    \    }\n    my $sum = 0;\n    map {$sum += $_} @q;\n    return $sum <= $w;\n}",
  "    my $sum = 0;\n    for(@$q) {\n        $sum += $_;\n    }\n    if($sum <= $w)\
    \ {\n        my $left = 0;\n        my $right = $#$q;\n        while($left < $right)\
    \ {\n            if($q->[$left] != $q->[$right]) {\n                return 0;\n\
    \            }\n            $left++;\n            $right--;\n        }\n     \
    \   return 1;\n    }\n    return 0;\n}", "    # TODO - Write your code here\n\
    \    return 0;\n}\n1;", "    my $s = 0;\n    return 0 if $w < 2*$q->[0];\n   \
    \ for (@$q) {\n        $s += $_;\n        return 0 if $s > $w;\n    }\n    for\
    \ (reverse @$q) {\n        $s -= $_;\n        return 0 if $s < 0;\n    }\n   \
    \ return 1;\n}", "    my $sum = 0;\n    my $step = scalar @$q;\n    my $step_half\
    \ = int $step / 2;\n    foreach my $i (0..$step_half-1) {\n        $sum += $q->[$i]\
    \ + $q->[-$i-1];\n    }\n    return ($sum > $w || $q->[$step_half] && $step %\
    \ 2 != 0) ? 0 : 1;\n}", "    my $n = scalar @$q;\n    for (my $i = 0; $i < $n/2;\
    \ $i++) {\n        return 0 if $q->[$i] != $q->[$n-$i-1];\n    }\n    my $sum\
    \ = 0;\n    $sum += $_ for @$q;\n    return $sum <= $w;\n}", "    my $sum = 0;\n\
    \    my $i = 0;\n    while ($i < scalar @$q) {\n        $sum += $q->[$i];\n  \
    \      $i++;\n    }\n    return 0 if $sum > $w;\n    return 0 if $sum < $w;\n\
    \    my $reversed = reverse @$q;\n    my $j = 0;\n    while ($j < scalar @$q)\
    \ {\n        return 0 if $q->[$j] != $reversed->[$j];\n        $j++;\n    }\n\
    \    return 1;\n}", "    my $sum = 0;\n    for (@$q) {\n        $sum += $_;\n\
    \    }\n    return 0 if $sum > $w;\n    my $n = @$q;\n    for (my $i = 0; $i <\
    \ $n / 2; $i++) {\n        return 0 if $q->[$i] != $q->[$n - $i - 1];\n    }\n\
    \    return 1;\n}", "    my $sum = 0;\n    my $len = scalar @$q;\n    for my $i\
    \ (0..($len - 1)) {\n        $sum += $q->[$i];\n        return 0 if $sum > $w;\n\
    \    }\n    return 0 if $sum > $w;\n    for my $i (0..(int($len / 2))) {\n   \
    \     my $front = $q->[$i];\n        my $back = $q->[$len - $i - 1];\n       \
    \ return 0 if $front != $back;\n    }\n    return 1;\n}", "    return 1 if @$q\
    \ == 1;\n    my $m = $w - @$q;\n    return 0 if $m < 0;\n    for my $i (0 .. $#$q)\
    \ {\n        $m -= $q->[$i];\n        return 0 if $m < 0;\n    }\n    return 1;\n\
    }", "    my $sum = 0;\n    my $pali = 0;\n    foreach my $e (@$q) {\n        $sum\
    \ += $e;\n        $pali++;\n    }\n    my $half_sum = $sum / 2;\n    if (($sum\
    \ <= $w) && ($pali == $half_sum)) {\n        return 1;\n    }\n    return 0;\n\
    }", "    my @r = reverse @$q;\n    my $i = 0;\n    my $m = $#$q;\n    while ($i\
    \ <= $m) {\n        if ($q->[$i] != $r[$i]) {\n            return 0;\n       \
    \ }\n        $i++;\n    }\n    my $sum = 0;\n    for (@$q) {\n        $sum +=\
    \ $_;\n    }\n    return $sum <= $w;\n}", "    return 1 if @$q == 1;\n    my $sum\
    \ = 0;\n    $sum += $_ for @$q;\n    return 1 if $sum <= $w && is_palindrome($q);\n\
    \    return 0;\n}", "    my $s = join \"\", @$q;\n    my $r = join \"\", reverse\
    \ @$q;\n    my $a = sum(@$q);\n    if ($a > $w){\n        return 0;\n    }\n \
    \   if ($s eq $r){\n        return 1;\n    }\n    return 0;\n}", "    @q = @$q;\n\
    \    $w = @$w;\n    return 0 if (array_sum(@q) > $w);\n    $left = 0;\n    $right\
    \ = $#q;\n    while ($left < $right) {\n        return 0 if ($q[$left] != $q[$right]);\n\
    \        $left++;\n        $right--;\n    }\n    return 1;\n}", "    my @q = @$q;\n\
    \    my $n = scalar @q;\n    my $w_ = 0;\n    my $j = 0;\n    my $i = $n - 1;\n\
    \    while ($j < $i) {\n        if ($q[$j] != $q[$i]) {\n            return 0;\n\
    \        }\n        $j++;\n        $i--;\n    }\n    for (my $i = 0; $i < $n;\
    \ $i++) {\n        $w_ += $q[$i];\n    }\n    return $w_ <= $w;\n}", "    my $balanced\
    \ = 1;\n    my $total = 0;\n    for(my $i = 0; $i < scalar(@$q); $i++) {\n   \
    \     $total += $q->[$i];\n        $balanced &&= ($q->[$i] == $q->[scalar(@$q)\
    \ - $i - 1]);\n    }\n    return $total <= $w && $balanced;\n}", "    my $n =\
    \ scalar @$q;\n    return 0 if $n % 2;\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    while ($i < $j) {\n        return 0 if $q->[$i] != $q->[$j];\n        $i++;\n\
    \        $j--;\n    }\n    my $sum = 0;\n    for my $x (@$q) {\n        $sum +=\
    \ $x;\n    }\n    return $sum <= $w;\n}", "    my $qr = reverse @$q;\n    return\
    \ (scalar @$q == scalar @$qr && sum_int(@$q) <= $w);\n}", "    my $sum = 0;\n\
    \    for my $elem (@$q) {\n        $sum += $elem;\n    }\n    return $sum <= $w\
    \ && is_balanced($q);\n}", "    my $i = 0;\n    my $len = @$q;\n    my $sum =\
    \ 0;\n    while($i < $len){\n        $sum += $q->[$i];\n        $i++;\n    }\n\
    \    return 0 if $sum > $w;\n    my $r = reverse $q;\n    return 1 if $q == $r;\n\
    \    return 0;\n}", "    my $sum = 0;\n    my $reversed_q = reverse @$q;\n   \
    \ for my $i (0..$#$q) {\n        return 0 if $q->[$i] != $reversed_q->[$i];\n\
    \        $sum += $q->[$i];\n    }\n    return $sum <= $w;\n}", "    die \"no array\
    \ provided\" if !ref $q;\n    die \"no weight provided\" if !defined $w;\n   \
    \ my $sum = 0;\n    foreach my $x (@$q) {\n        $sum += $x;\n    }\n    return\
    \ $sum <= $w && is_palindrome($q);\n}", "    return 1 if @$q <= 1;\n    return\
    \ 1 if sum(@$q) <= $w;\n    return 1 if sum(@$q) == 2 * $$q[0];\n    return 0;\n\
    }", "    my $sum = sum(@$q);\n    return 0 if $sum > $w;\n    my $left = 0;\n\
    \    my $right = $#$q;\n    while($left < $right) {\n        last if $q->[$left]\
    \ != $q->[$right];\n        $left++;\n        $right--;\n    }\n    return ($left\
    \ < $right) ? 0 : 1;\n}", "    my $qr = [reverse @$q];\n    my $r = 0;\n    for\
    \ my $i (0..$#$q) {\n        if ($q->[$i] == $qr->[$i]) {\n            $r += $q->[$i];\n\
    \        } else {\n            return 0;\n        }\n    }\n    return $r <= $w;\n\
    }", "    if (is_balanced($q) && sum($q) <= $w) {\n        return 1;\n    }\n \
    \   return 0;\n}", "    my $sum = sum(@$q);\n    return $sum <= $w && join('',@$q)\
    \ eq join('',reverse @$q);\n}", "    my $sum = 0;\n    for (@$q) {\n        $sum\
    \ += $_;\n    }\n    return 0 if $sum > $w;\n    my $i = 0;\n    my $j = $#$q;\n\
    \    while ($i < $j) {\n        if ($q->[$i] != $q->[$j]) {\n            return\
    \ 0;\n        }\n        $i++;\n        $j--;\n    }\n    return 1;\n}", "   \
    \ return 1 if scalar @$q < 2;\n    my $e = $q->[0];\n    my $l = pop @$q;\n  \
    \  my $sum = $e + $l;\n    $sum += sum @$q;\n    return 0 if $sum > $w;\n    $e\
    \ == $l && do {\n        shift @$q;\n        pop @$q;\n        return will_it_fly($q,\
    \ $w);\n    };\n    return 0;\n}", "    return 0 if(sum(@$q) > $w);\n    return\
    \ 0 if(!is_palindrome($q));\n    return 1;\n}", "    # ( @$q == reverse @$q &&\
    \ sum(@$q) <= $w ) ? 1 : '';\n    ( (sum(@$q) <= $w) and ( is_palindrome($q) )\
    \ ) ? 1 : '';\n}", "    my $s = 0;\n    my $e = scalar @$q - 1;\n    for (my $i\
    \ = 0; $i < scalar @$q; $i++) {\n        return 0 if $q->[$i] > $w;\n        $s\
    \ += $q->[$i];\n        return 0 if $s > $w;\n        return 0 if $q->[$i] !=\
    \ $q->[$e - $i];\n    }\n    return 1;\n}", "    my $sum = sum @$q;\n    return\
    \ 0 if $sum > $w;\n    return 1 if is_palindrome($q);\n    return 0;\n}", "  \
    \  my $i = 0;\n    my $j = @$q - 1;\n    my $sum = 0;\n    while ($i < $j) {\n\
    \        return 0 if $q->[$i] != $q->[$j];\n        $sum += $q->[$i];\n      \
    \  $i++;\n        $j--;\n    }\n    $sum += $q->[$i] if $i == $j;\n    return\
    \ 0 if $sum > $w;\n    return 1;\n}", "    return is_balanced($q) && sum($q) <=\
    \ $w;\n}", "    my $balanced = 1;\n    my $sum = 0;\n    for(my $i = 0; $i < @$q;\
    \ $i++) {\n        $sum += $q[$i];\n        $balanced = 0 if ($q[$i] != $q[scalar(@$q)\
    \ - 1 - $i]);\n    }\n    return ($sum <= $w and $balanced);\n}", "    if (sum($q)\
    \ <= $w) {\n        if (is_balanced($q)) {\n            return 1;\n        }\n\
    \    }\n    return 0;\n}", "    if (is_balanced($q) && (sum($q) <= $w)) {\n  \
    \      return 1;\n    }\n    return '';\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
