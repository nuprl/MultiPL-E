name: HumanEval_72_will_it_fly
language: pl
prompt: "# Write a function that returns 1 if the object q will fly, and '' otherwise.\n\
  # The object q will fly if it's balanced (it is a palindromic array) and the sum\
  \ of its elements is less than or equal the maximum possible weight w.\n# Example:\n\
  # >>> will_it_fly([1, 2], 5)\n# \"\"\n# # 1+2 is less than the maximum possible\
  \ weight, but it's unbalanced.\n# >>> will_it_fly([3, 2, 3], 1)\n# \"\"\n# # it's\
  \ balanced, but 3+2+3 is more than the maximum possible weight.\n# >>> will_it_fly([3,\
  \ 2, 3], 9)\n# 1\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
  # >>> will_it_fly([3], 5)\n# 1\n# # 3 is less than the maximum possible weight,\
  \ and it's balanced.\nsub will_it_fly {\n    my($q, $w) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&will_it_fly;\n\
  \        if(eq_deeply($candidate->([3, 2, 3], 9),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2], 5),\"\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3],\
  \ 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
  \ 2, 3], 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([1, 2, 3], 6),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5], 5),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return \"\" if ($w < List::Util::sum(@$q));\n    for (my $i = 0;\
    \ $i < @$q/2; $i++) {\n        return \"\" if ($q->[$i] != $q->[@$q - $i - 1]);\n\
    \    }\n    return 1;\n}", "    $w >= sum(@$q) && $q->[0] == $q->[-1] or return\
    \ '';\n    return 1;\n}", "    my $q_sum = sum @$q;\n    my $q_str = join '',\
    \ @$q;\n    my $q_rev = join '', reverse @$q;\n    return 1 if $q_sum <= $w &&\
    \ $q_str eq $q_rev;\n    return '';\n}", "    my $qsum = sum @$q;\n    return\
    \ '' if $qsum > $w;\n    my $n = @$q;\n    for my $i (0 .. $n/2) {\n        return\
    \ '' if $q->[$i] != $q->[$n-$i-1];\n    }\n    return 1;\n}", "    return '' if\
    \ (sum(@$q) > $w);\n    return 1 if is_pali($q);\n    return '';\n}", "    my\
    \ $s = 0;\n    my $sz = @$q;\n    my $m = $sz % 2;\n    my $M = ($sz-1)/2;\n \
    \   return '' if $sz < 2;\n    for (my $i = 0; $i < $M; $i++) {\n        return\
    \ '' if $q->[$i] != $q->[$sz-$i-1];\n        $s += $q->[$i];\n    }\n    $s +=\
    \ $q->[$M] if $m;\n    return $s <= $w ? 1 : '';\n}", "    my $l = @$q;\n    my\
    \ $b = $l > 1 && join('', @$q) eq join('', reverse @$q);\n    my $c = 0 < $l &&\
    \ $l % 2 == 0 && $q->[$l/2-1] == $q->[$l/2];\n    my $f = $q->[0] + $q->[$l-1];\n\
    \    while (1 < $l) {\n        $f += $q->[--$l] + $q->[--$l];\n    }\n    return\
    \ $b && !$c && $f <= $w;\n}", "    my $n = sum @$q;\n    $n <= $w && is_palindrome($q)\
    \ ? 1 : '';\n}", "    my $reversed = reverse @$q;\n    $q eq $reversed ? sum(@$q)\
    \ <= $w : '';\n}", "    my $sum = 0;\n    for (@$q) {\n        $sum += $_;\n \
    \   }\n    return $sum <= $w && $q->[0] == $q->[-1] ? 1 : '';\n}", "    my $n\
    \ = @$q;\n    my $sum = sum($q);\n    return $sum <= $w && is_palindrome($q);\n\
    }", "    my $n = 0;\n    my $p = '';\n    for my $e (@$q) {\n        $n += $e;\n\
    \        $p = $e.$p;\n    }\n    return $n <= $w && $p eq join('', @$q) ? 1 :\
    \ '';\n}", "    my $balanced = is_balanced($q);\n    my $sum = sum_elements($q);\n\
    \    my $max_weight = $w;\n    if ($balanced == 1 && $sum <= $max_weight) {\n\
    \        return 1;\n    } else {\n        return '';\n    }\n}", "    my $sum\
    \ = 0;\n    my $balanced = 1;\n    foreach my $e (@$q) {\n        if ($e > $w)\
    \ {\n            return '';\n        }\n        $sum += $e;\n        if ($sum\
    \ > $w) {\n            return '';\n        }\n        $balanced = $balanced &&\
    \ $e == $q->[$#q];\n        pop @$q;\n    }\n    $balanced && $sum <= $w;\n}",
  "    my $sum = 0;\n    for my $i (0..$#$q) {\n        $sum += $q->[$i];\n      \
    \  return '' if $sum > $w;\n    }\n    return '' if $sum > $w;\n    return $q->[0]\
    \ == $q->[-1] && $q->[1] == $q->[-2] ? 1 : '';\n}", "    my $t = 0;\n    my $m\
    \ = 0;\n    my $i = 0;\n    my $j = @$q - 1;\n    while($i < $j) {\n        if($$q[$i]\
    \ != $$q[$j]) {\n            return \"\";\n        }\n        $i++;\n        $j--;\n\
    \    }\n    for(@$q) {\n        $t += $_;\n        $m++ if($_ > $w);\n    }\n\
    \    return \"1\" if($t <= $w && $m == 0);\n    return \"\";\n}", "    # your\
    \ code here\n    my $arrayLen = @$q;\n    my $sum = 0;\n    for(my $i = 0; $i\
    \ < $arrayLen; $i++){\n        if($q->[$i] eq $q->[$arrayLen - 1 - $i]){\n   \
    \         $sum += $q->[$i];\n        }\n        else{\n            return \"\"\
    ;\n        }\n    }\n    if($sum <= $w){\n        return 1;\n    }\n    else{\n\
    \        return \"\";\n    }\n}", "    my @q = @$q;\n    my $len = scalar @q;\n\
    \    my $sum = 0;\n    for my $elem (@q) {\n        $sum += $elem;\n    }\n  \
    \  if ($sum <= $w) {\n        for my $i (0..$len) {\n            for my $j (0..$len)\
    \ {\n                if ($q[$i] != $q[$j]) {\n                    return '';\n\
    \                }\n            }\n        }\n        return 1;\n    }\n    return\
    \ '';\n}", "    @$q == scalar grep { $_ == $q->[$_] } 0..@$q-1 or return \"\"\
    ;\n    my $sum = 0;\n    $sum += $_ for @$q;\n    $sum <= $w ? 1 : \"\";\n}",
  "    #initialize variables\n    my $sum = 0;\n    my $result = \"\";\n    #check\
    \ if array is empty\n    if (scalar(@$q) == 0) {\n        return $result;\n  \
    \  }\n    #check if sum is greater than weight\n    foreach my $item (@$q) {\n\
    \        $sum += $item;\n    }\n    if ($sum > $w) {\n        return $result;\n\
    \    }\n    #check if palindrome\n    my $len = @$q;\n    my $half = int($len/2);\n\
    \    for (my $i = 0; $i < $half; $i++) {\n        if ($q->[$i] != $q->[$len-$i-1])\
    \ {\n            return $result;\n        }\n    }\n    $result = 1;\n    return\
    \ $result;\n}", "    my $sum = sum(@$q);\n    return 0 if $sum > $w;\n    my $is_balanced\
    \ = join(\"\", @$q) eq join(\"\", reverse @$q);\n    return $is_balanced ? 1 :\
    \ 0;\n}", "    my $s = sum($q);\n    my $b = is_balanaced($q);\n    return $s\
    \ <= $w && $b ? 1 : '';\n}", "    my $sum = 0;\n    $sum += $_ for @$q;\n    my\
    \ $palindrome = '';\n    for my $i (0 .. $#$q) {\n        $palindrome .= $q->[$i];\n\
    \        $palindrome .= $q->[$#$q - $i] if $i != $#$q - $i;\n    }\n    return\
    \ 1 if $sum <= $w && $palindrome eq join('', @$q);\n    return '';\n}", "    my\
    \ $res = 1;\n    my $sum = 0;\n    foreach my $x (@$q) {\n        $sum += $x;\n\
    \    }\n    if ($sum > $w) {\n        $res = '';\n    }\n    my $rev = reverse\
    \ @$q;\n    if (@$q != @$rev) {\n        $res = '';\n    }\n    return $res;\n\
    }", "    my $sum = eval join \"+\", @$q;\n    my $len = scalar @$q;\n    return\
    \ '' if $sum > $w;\n    return '' if $len > 1 && $q->[0] != $q->[-1];\n    return\
    \ 1 if $len < 2;\n    pop @$q;\n    shift @$q;\n    return will_it_fly($q, $w);\n\
    }", "    return '' if sum(@$q) > $w;\n    return '' if $q->[0] != $q->[-1];\n\
    \    return 1;\n}", "    my $sum = 0;\n    my $len = scalar @$q;\n    if ($len\
    \ & 1) {\n        return \"\";\n    }\n    for my $i (0..($len/2 - 1)) {\n   \
    \     $sum += $q->[$i] + $q->[$len - $i - 1];\n        if ($sum > $w) {\n    \
    \        return \"\";\n        }\n    }\n    1;\n}", "    my $sum = sum @$q;\n\
    \    if ($sum <= $w) {\n        return join '', @$q eq join '', reverse @$q ?\
    \ 1 : '';\n    }\n    return '';\n}", "    my $sum = 0;\n    foreach my $item\
    \ (@$q) {\n        $sum += $item;\n    }\n    my $middle = int($#$q / 2);\n  \
    \  my $flag = 1;\n    for (my $i = 0; $i <= $middle; $i++) {\n        if (@$q[$i]\
    \ != @$q[$#$q - $i]) {\n            $flag = 0;\n            last;\n        }\n\
    \    }\n    return '' if ($sum > $w || $flag == 0);\n    return 1;\n}", "    return\
    \ (join(\"\", @$q) eq join(\"\", reverse @$q) &&\n            (reduce { $a + $b\
    \ } @$q) <= $w) ? 1 : \"\";\n}", "    my $s = 0;\n    for (@$q) {\n        $s\
    \ += $_;\n    }\n    return $s <= $w && \"@$q\" eq reverse \"@$q\" ? 1 : '';\n\
    }", "    my $s = 0;\n    for (@$q) {\n        $s += $_;\n    }\n    return ''\
    \ if $s > $w;\n    my $l = $#$q;\n    for my $i (0..$l/2) {\n        return ''\
    \ if $q->[$i] != $q->[$l-$i];\n    }\n    return 1;\n}", "    my $len = scalar\
    \ @$q;\n    my $i = 0;\n    my $j = $len - 1;\n    my $sum = 0;\n    while ($i\
    \ < $j) {\n        last if $q->[$i] != $q->[$j];\n        $sum += $q->[$i] + $q->[$j];\n\
    \        $i++;\n        $j--;\n    }\n    $sum += $q->[$i] if $i == $j;\n    return\
    \ 1 if $sum <= $w && $i >= $j;\n    return \"\";\n}", "    my $r = sum(@$q);\n\
    \    return $r > $w ? '' : 1 if not is_palindrome($q);\n    '';\n}", "    return\
    \ 1 if sum($q) <= $w && is_palindrome($q);\n    return \"\";\n}", "    my $n =\
    \ $#$q;\n    my $s = 0;\n    foreach(@$q) {\n        $s += $_;\n    }\n    return\
    \ ($s <= $w && $n == 0) || (($s <= $w) && ($n > 0) && ($q->[0] == $q->[$n]) &&\
    \ will_it_fly([@$q[1..$n-1]], $w));\n}", "    my $s = sum($q);\n    return ''\
    \ if $s > $w;\n    return '' if scalar @$q != scalar @{reverse $q};\n    return\
    \ 1;\n}", "    return \"\" if sum($q) > $w;\n    return \"\" if !is_palindrome($q);\n\
    \    return 1;\n}", "    my $s = 0;\n    foreach(@$q) {\n        $s += $_;\n \
    \   }\n    if ($s <= $w) {\n        my $l = scalar @$q;\n        for (my $i =\
    \ 0; $i < $l / 2; $i++) {\n            if ($q->[$i] != $q->[$l - $i - 1]) {\n\
    \                return '';\n            }\n        }\n        return 1;\n   \
    \ }\n    return '';\n}", "    my $sum = 0;\n    $sum += $_ for @$q;\n    return\
    \ $sum <= $w && $q->[0] == $q->[-1] ? 1 : '';\n}", "    my $m = sum($q);\n   \
    \ return $m <= $w && $q eq reverse($q) ? 1 : '';\n}", "    my $sum = 0;\n    foreach\
    \ my $i (@$q) {\n        $sum += $i;\n    }\n    my $i = 0;\n    my $j = @$q -\
    \ 1;\n    while ($i < $j) {\n        if ($q->[$i] != $q->[$j]) {\n           \
    \ return \"\";\n        }\n        $i++;\n        $j--;\n    }\n    return $sum\
    \ <= $w ? 1 : \"\";\n}", "    my $sum = 0;\n    foreach (@$q) {\n        $sum\
    \ += $_;\n    }\n    if ($sum <= $w) {\n        return 1;\n    }\n    return '';\n\
    }", "    my $sum = 0;\n    $sum += $_ for @$q;\n    return $sum <= $w && join('',\
    \ @$q) eq join('', reverse @$q) ? 1 : '';\n}", "    return '' if (sum(@$q) > $w);\n\
    \    return '' if (!is_palindrome($q));\n    return 1;\n}", "    my $n = @$q;\n\
    \    for my $i (0..$n-1) {\n        if ($i > $n-$i-1) {\n            last;\n \
    \       }\n        if ($q->[$i] > $q->[$n-$i-1]) {\n            return '';\n \
    \       }\n    }\n    my $sum = 0;\n    for my $i (0..$n-1) {\n        $sum +=\
    \ $q->[$i];\n    }\n    return $sum <= $w ? 1 : '';\n}", "    my $sum = sum(@$q);\n\
    \    return '' if $sum > $w;\n    return '' if $sum != sum(reverse @$q);\n   \
    \ return 1;\n}", "    my $r = $q->[0];\n    my $f = $q->[-1];\n    return '' if\
    \ $r + $f > $w;\n    return '' if @$q > 1 && $r != $f;\n    return '' if will_it_fly([@$q[1..$#$q-1]],\
    \ $w);\n    return 1;\n}", "    return \"\" if array_sum($q) > $w;\n    return\
    \ \"\" if ! array_is_palindrome($q);\n    return 1;\n}", "    return '' if $w\
    \ < array_sum($q);\n    my $rev = reverse @$q;\n    return '' if $rev != @$q;\n\
    \    return 1;\n}", "    my $sum = sum(@$q);\n    my $reversed = join('', reverse(@$q));\n\
    \    if ( $sum <= $w && join('', @$q) eq $reversed ) {\n        return 1;\n  \
    \  }\n    return '';\n}", "    my @s = @$q;\n    return '' if sum(@s) > $w;\n\
    \    return 1 if @s == 1;\n    return @s == reverse @s;\n}", "    my $s = sum(@$q);\n\
    \    return '' if $s > $w;\n    my $reversed = reverse @$q;\n    return 1 if (compare($q,\
    \ $reversed));\n    return '';\n}", "    my $sum = sum @$q;\n    return '' if\
    \ $sum > $w;\n    my $len = @$q;\n    return '' if $len < 2;\n    return '' if\
    \ $len % 2 && $q->[$len/2] != $q->[$len/2-1];\n    for my $i (0..$len/2-1) {\n\
    \        return '' if $q->[$i] != $q->[$len-$i-1];\n    }\n    return 1;\n}",
  "    return '' if ($w < sum @$q);\n    my $s = join('', sort @$q);\n    my $r =\
    \ join('', reverse @$q);\n    return $s eq $r ? 1 : '';\n}", "    return 1 unless\
    \ sum(@$q) > $w;\n    return '' unless palindrome($q);\n    return 1;\n}", " \
    \   my $n = scalar @$q;\n    my $i = 0;\n    my $j = $n - 1;\n    my $sum = 0;\n\
    \    while ($i < $j) {\n        if ($q->[$i] != $q->[$j]) {\n            return\
    \ '';\n        }\n        $sum += $q->[$i];\n        $i++;\n        $j--;\n  \
    \  }\n    if (defined $q->[$i]) {\n        $sum += $q->[$i];\n    }\n    if ($sum\
    \ <= $w) {\n        return 1;\n    }\n    return '';\n}", "    my $sum = 0;\n\
    \    for my $e (@$q) {\n        $sum += $e;\n    }\n    my $b = join(\"\",@$q);\n\
    \    if ($sum <= $w && $b eq reverse($b)) {\n        return 1;\n    }\n    return\
    \ '';\n}", "    my $sum = 0;\n    my $qlen = scalar @$q;\n    my $ret = 1;\n \
    \   my $i = 0;\n    while ($i < $qlen) {\n        $sum += $q->[$i];\n        $i++;\n\
    \    }\n    if ($sum > $w) {\n        $ret = '';\n    }\n    if (is_palindrome($q)\
    \ eq '') {\n        $ret = '';\n    }\n    return $ret;\n}", "    my $sum = 0;\n\
    \    $sum += $_ for @$q;\n    return $sum <= $w && \"@$q\" eq reverse \"@$q\"\
    \ ? 1 : '';\n}", "    my $w1 = sum @$q;\n    my $w2 = sum reverse @$q;\n    return\
    \ $w1 <= $w && $w2 <= $w && $w1 == $w2 ? 1 : '';\n}", "    my $n = scalar @$q;\n\
    \    my $middle = int($n/2);\n    my $sum;\n    for (my $i = 0; $i < $middle;\
    \ $i++) {\n        if ($q->[$i] != $q->[$n - $i - 1]) {\n            return \"\
    \";\n        }\n        $sum += $q->[$i];\n    }\n    $sum += $q->[$middle] if\
    \ $n % 2;\n    return $sum <= $w ? 1 : \"\";\n}", "    my $sum = 0;\n    my @a\
    \ = ();\n    my $rev = 0;\n    my $res = 0;\n    my $i = 0;\n    my $j = @$q -\
    \ 1;\n    for (my $i = 0; $i < @$q; $i++) {\n      $sum += $q->[$i];\n      $a[$i]\
    \ = $q->[$i];\n    }\n    if ($sum <= $w) {\n      for (my $i = 0; $i < @$q; $i++)\
    \ {\n        if ($a[$i] == $q->[$j]) {\n          $j--;\n          $rev = 1;\n\
    \        }\n        else {\n          $rev = 0;\n          last;\n        }\n\
    \      }\n      if ($rev == 1) {\n        $res = 1;\n      }\n    }\n    return\
    \ $res;\n}", "    my $n = $#$q;\n    my $res = 0;\n    if ($n == 0) {\n      \
    \  if ($q->[0] <= $w) {\n            $res = 1;\n        }\n    } else {\n    \
    \    my $sum = 0;\n        for my $i (0..$n) {\n            $sum += $q->[$i];\n\
    \        }\n        if ($sum <= $w) {\n            $res = 1;\n            for\
    \ my $i (0..($n-1)/2) {\n                if ($q->[$i] != $q->[$n-$i]) {\n    \
    \                $res = 0;\n                    last;\n                }\n   \
    \         }\n        }\n    }\n    return $res;\n}", "    my $qw = join(\"+\"\
    , @$q);\n    if (scalar(@$q) == 1) {\n        if ($q->[0] <= $w) {\n         \
    \   return 1;\n        }\n    }\n    if ($qw <= $w && $qw == reverse($qw)) {\n\
    \        return 1;\n    }\n    return '';\n}", "    my $sum = 0;\n    map { $sum\
    \ += $_ } @$q;\n    return $sum <= $w && is_balanced($q) ? 1 : '';\n}", "    my\
    \ $sum = 0;\n    my $palindrome = \"1\";\n    for(@$q) {\n        $sum += $_;\n\
    \        if ($_ != $q->[-1]) {\n            $palindrome = \"\";\n        }\n \
    \       pop @$q;\n    }\n    if ($sum <= $w and $palindrome eq \"1\") {\n    \
    \    return \"1\";\n    }\n    else {\n        return \"\";\n    }\n}", "    my\
    \ $sum = sum(@$q);\n    return ($sum <= $w && is_palindrome($q)) ? 1 : '';\n}",
  "    return @$q == 1 || ($q->[0] + $q->[-1] <= $w && will_it_fly([@$q[1..$#$q-1]],\
    \ $w)) ? 1 : '';\n}", "    return '' if sum(@$q) > $w;\n    return '' if sum(@$q)\
    \ != sum(reverse @$q);\n    return 1;\n}", "    my $sum = sum(@$q);\n    if ($sum\
    \ <= $w && $q->[0] == $q->[-1]) {\n        return 1;\n    }\n    return '';\n}",
  "    my $p = join \"\", @$q;\n    if(is_balanced($p) && sum($q) <= $w) {\n     \
    \   return 1;\n    }\n    return \"\";\n}", "    my $total = sum @$q;\n    return\
    \ $total <= $w && \"\".join(\"\", @$q) eq join(\"\", reverse @$q) ? 1 : \"\";\n\
    }", "    return 1 if sum(@$q) <= $w and is_palindrome($q);\n    return '';\n}",
  "    $q = [@$q];\n    my $sum = sum(@$q);\n    return if ($sum > $w);\n    return\
    \ if (join('', @$q) ne join('', reverse @$q));\n    return 1;\n}", "    return\
    \ ((sum(@$q) <= $w) && (is_palindrome($q))) ? 1 : '';\n}", "    my $q_balanced\
    \ = join(\"\",reverse(@$q)) eq join(\"\",@$q);\n    my $q_sum = 0;\n    foreach\
    \ (@$q) {\n        $q_sum += $_;\n    }\n    return $q_balanced && $q_sum <= $w;\n\
    }", "    my $sum = 0;\n    my $len = @$q;\n    my $i = 0;\n    while ($i < $len){\n\
    \        $sum += $q->[$i];\n        if ($sum > $w){\n            return '';\n\
    \        }\n        $i++;\n    }\n    foreach my $i (0..@$q -1){\n        if ($q->[$i]\
    \ != $q->[@$q - $i - 1]){\n            return '';\n        }\n    }\n    return\
    \ 1;\n}", "    return '' if(sum(@$q) > $w);\n    my $q_str = join('', @$q);\n\
    \    my $q_str_reverse = reverse($q_str);\n    return '' if($q_str ne $q_str_reverse);\n\
    \    return 1;\n}", "    my @q = @$q;\n    if (reduce { $a + $b } @q <= $w &&\
    \ \"@q\" eq \"@q\" x 2) {\n        return 1;\n    }\n    return '';\n}", "   \
    \ my $sum = 0;\n    for(@$q) { $sum += $_ }\n    my $rev = reverse @$q;\n    if($sum\
    \ > $w) { return \"\" }\n    if($q ~~ $rev) { return 1 }\n    return \"\";\n}",
  "    my $s = sum($q);\n    $s <= $w && is_palindrome($q) ? 1 : '';\n}", "    my\
    \ $sum = 0;\n    my $rev_q = [];\n    for my $i (@$q) {\n        unshift @$rev_q,\
    \ $i;\n        $sum += $i;\n    }\n    return join(\"\", @$q) eq join(\"\", @$rev_q)\
    \ && $sum <= $w;\n}", "    my $n = sum(@$q);\n    return $n <= $w && \"$q\" eq\
    \ reverse \"$q\" ? 1 : '';\n}", "    my $sum = 0;\n    foreach my $q_i (@$q) {\n\
    \        $sum += $q_i;\n    }\n    if ($sum <= $w) {\n        my $n = @$q;\n \
    \       my $r = $n % 2;\n        if ($r == 0) {\n            for (my $i = 0; $i\
    \ < $n/2; $i++) {\n                if ($q->[$i] != $q->[$n-$i-1]) {\n        \
    \            return \"\";\n                }\n            }\n        } else {\n\
    \            for (my $i = 0; $i < ($n-1)/2; $i++) {\n                if ($q->[$i]\
    \ != $q->[$n-$i-1]) {\n                    return \"\";\n                }\n \
    \           }\n        }\n        return 1;\n    } else {\n        return \"\"\
    ;\n    }\n}", "    my $sum = sum @$q;\n    return $sum <= $w && $q->[0] == $q->[-1]\
    \ ? 1 : '';\n}", "    return '' if ( sum(@$q) > $w );\n    return '' if ( @$q\
    \ != (@$q[0] x @$q) );\n    return 1;\n}", "    my $sum = sum @$q;\n    $sum <=\
    \ $w && is_balanced $q;\n}", "    my $sum = 0;\n    my $len = scalar @$q;\n  \
    \  return \"\" if ($len & 1);\n    for (my $i = 0; $i < $len; $i++) {\n      \
    \  my $x = $q->[$i];\n        my $y = $q->[$len - $i - 1];\n        return \"\"\
    \ if ($x != $y);\n        $sum += $x;\n    }\n    return \"\" if ($sum > $w);\n\
    \    return 1;\n}", "    my $sum = 0;\n    my $half = int(scalar(@$q)/2);\n  \
    \  for my $i (0..$half) {\n        $sum += $q->[$i];\n        $sum += $q->[-$i-1]\
    \ if $i < $half;\n    }\n    my $msg = \"\";\n    $msg = \"balanced\" if $sum\
    \ <= $w;\n    return $msg;\n}", "    my $w1 = ($w ? $w : 0);\n    my $weight =\
    \ 0;\n    my $q1 = $q;\n    foreach (@$q1) { $weight += $_; }\n    return ($weight\
    \ <= $w1 && $q1 eq [reverse @$q1] ? 1 : \"\");\n}", "    my $ret = '';\n    my\
    \ $total = 0;\n    foreach my $item (@$q) {\n        $total += $item;\n    }\n\
    \    if ($total <= $w && is_palindrome($q)) {\n        $ret = 1;\n    }\n    return\
    \ $ret;\n}", "    my $i = 0;\n    my $j = $#{$q};\n    my $sum = 0;\n    for my\
    \ $e (@{$q}) {\n        $sum += $e;\n    }\n    return '' if $sum > $w;\n    while($i\
    \ < $j) {\n        return '' if $q->[$i] != $q->[$j];\n        $i++;\n       \
    \ $j--;\n    }\n    return 1;\n}", "    my $t = 0;\n    $t += $_ for @$q;\n  \
    \  return $t <= $w && $q->[0] == $q->[-1] && will_it_fly([@$q[1..$#$q-1]], $w)\
    \ || '';\n}", "    if ($q eq $q->[reverse @$q] && 0 == 1) {\n        return 1;\n\
    \    } else {\n        return '';\n    }\n}", "    #$q = [1,2,1]; # test balanced\n\
    \    #$q = [1,2,3]; # test unbalanced\n    #$q = [1,2,3,4]; # test length\n  \
    \  #$q = [3,3,3,3]; # test total weight\n    my $i = 0;\n    my $len = @$q;\n\
    \    my $total = 0;\n    while ($i < $len) {\n        $total += $q->[$i];\n  \
    \      $i++;\n    }\n    return undef if $total > $w;\n    return $q->[0] if $len\
    \ == 1;\n    if ($q->[0] == $q->[$len-1]) {\n        return will_it_fly([@$q[1..$len-2]],\
    \ $w);\n    }\n    return undef;\n}", "    my $pal = is_pali($q);\n    my $sum\
    \ = sum_of_elems($q);\n    if ($pal && $sum <= $w) {\n        return 1;\n    }\n\
    \    return '';\n}", "    return '' if(sum(@$q) > $w);\n    return '' if(@$q !=\
    \ @{[reverse @$q]});\n    return 1;\n}", "    my $sum = 0;\n    for my $i (@$q)\
    \ {\n        $sum += $i;\n    }\n    return (1, 0)[$sum > $w || $sum != $sum +\
    \ 0] # check palindrome\n}", "    my $sum = 0;\n    my @q = @$q;\n    for (@q)\
    \ {\n        $sum += $_;\n    }\n    if ($sum <= $w && @q == (scalar(@q) + 1)\
    \ / 2) {\n        return 1;\n    }\n    return '';\n}", "    my $sum = sum(@$q);\n\
    \    return $sum <= $w && join(\"\", @$q) eq join(\"\", reverse @$q) ? 1 : \"\"\
    ;\n}", "    return '' if sum(@$q) > $w;\n    return '' if reverse @$q ne @$q;\n\
    \    return 1;\n}", "    my $sum = 0;\n    foreach my $value (@$q) {\n       \
    \ $sum += $value;\n    }\n    if ($sum <= $w) {\n        if ($q->[0] == $q->[-1])\
    \ {\n            return 1;\n        }\n    }\n    return '';\n}", "    my $sum\
    \ = 0;\n    for my $i (0..$#$q) {\n        return '' if $sum + $q->[$i] > $w;\n\
    \        $sum += $q->[$i];\n    }\n    return $q->[0] * 2 <= $w ? 1 : '';\n}",
  "    my $s = sum(@$q);\n    return ($s <= $w and is_palindrome($q)) ? 1 : '';\n}",
  "    my $b = 0;\n    my $s = 0;\n    my $n = scalar @$q;\n    for (my $i = 0; $i\
    \ < $n; $i++) {\n        $s += $q->[$i];\n        $b += abs($i - $n + $i + 1)\
    \ * $q->[$i];\n    }\n    return '' if $s > $w || $b % 11;\n    return 1;\n}",
  "    $w < sum($q) || is_palindrome($q) || \"\";\n}", "    my $i = 0;\n    my $j\
    \ = @$q - 1;\n    my $is_fly = 1;\n    my $sum = 0;\n    for (; $i <= $j; ++$i,\
    \ --$j) {\n        return '' if $q->[$i] != $q->[$j];\n        $sum += $q->[$i];\n\
    \    }\n    return '' if $sum > $w;\n    return $is_fly;\n}", "    return '' if\
    \ array_sum($q) > $w;\n    return '' if join('', @$q) ne join('', reverse @$q);\n\
    \    return 1;\n}", "    my $sum = 0;\n    my $balanced = 1;\n    foreach (@$q)\
    \ {\n        if ($_ > $w) {\n            return '';\n        }\n        $sum +=\
    \ $_;\n        if ($sum > $w) {\n            return '';\n        }\n        if\
    \ ($_ < 0) {\n            $balanced = '';\n        }\n    }\n    return $balanced;\n\
    }", "    $w = sum(@$q) if $w > sum(@$q);\n    return $w >= sum(@$q) && is_palindrome($q)\
    \ ? 1 : '';\n}", "    return unless $q && @$q && $w;\n    return 1 if @$q == 1\
    \ && $q->[0] <= $w;\n    my $sum = 0;\n    for (@$q) {\n        return if $sum\
    \ > $w;\n        $sum += $_;\n    }\n    return $sum <= $w && $q->[0] == $q->[-1]\
    \ && will_it_fly([ @$q[1..$#$q-1] ], $w)\n}", "    return (($w >= sum @$q) and\
    \ ($q->[0] == $q->[-1])) ? 1 : '';\n}", "    return '' if $w < 0 || sum(@$q) >\
    \ $w;\n    return '' if $q->[0] != $q->[-1];\n    return 1;\n}", "    my $sum\
    \ = sum(@$q);\n    return \"\" if $sum > $w;\n    return (join(\"\", @$q) eq join(\"\
    \", reverse @$q)) ? 1 : \"\";\n}", "    return '' if $w < 0;\n    return '' if\
    \ $w > @$q;\n    return 1 if @$q == 1;\n    return '' if @$q == 0;\n    return\
    \ '' if @$q % 2;", "    return if (sum(@$q) > $w);\n    return if (scalar(@$q)\
    \ == 0);\n    my $i = 0;\n    my $j = scalar(@$q) - 1;\n    while ($i < $j) {\n\
    \        return if ($q->[$i] != $q->[$j]);\n        $i++;\n        $j--;\n   \
    \ }\n    return 1;\n}", "    my $a = sum(@$q);\n    my $b = join '', @$q;\n  \
    \  my $c = reverse $b;\n    if ( $a <= $w && $b eq $c ) {\n        return 1;\n\
    \    }\n    else {\n        return '';\n    }\n}", "    my $sum = 0;\n    for\
    \ my $i (0..scalar(@$q) - 1) {\n        $sum += $q->[$i];\n    }\n    return ''\
    \ if $sum > $w;\n    my $is_balanced = 1;\n    for my $i (0..scalar(@$q) - 1)\
    \ {\n        if ($q->[$i] != $q->[-($i + 1)]) {\n            $is_balanced = 0;\n\
    \            last;\n        }\n    }\n    return $is_balanced;\n}", "    my $sum\
    \ = 0;\n    my $j = scalar @$q;\n    my $i = 0;\n    while ($i < $j) {\n     \
    \   $sum += $q->[$i];\n        last if $sum > $w;\n        $i++;\n    }\n    return\
    \ '' if $sum > $w;\n    my $k = $j - 1;\n    $i = 0;\n    while ($i < $k) {\n\
    \        last if $q->[$i] != $q->[$k];\n        $i++;\n        $k--;\n    }\n\
    \    return '' if $i < $k;\n    return 1;\n}", "    my $sum = 0;\n    for my $i\
    \ (@$q) {\n        $sum += $i;\n    }\n    return ($sum <= $w and \"$q\" eq reverse\
    \ \"$q\") ? 1 : '';\n}", "    my $sum = sum(@$q);\n    return '' if $sum > $w;\n\
    \    return '' if not is_palindrome($q);\n    return 1;\n}", "    return\n   \
    \     reduce { $a + $b } 0, @$q <= $w && $q eq join('', reverse @$q) ? 1 : '';\n\
    }", "    my $s = sum($q);\n    if ($s > $w) {\n        return '';\n    }\n   \
    \ return 1;\n}", "    return '' if is_palindrome($q) == 0;\n    return '' if array_sum($q)\
    \ > $w;\n    return 1;\n}", "    if(@$q && $w >= @$q) {\n        my @m = sort\
    \ {$a <=> $b} @$q;\n        my $i = 0;\n        my $n = @m;\n        my $s = $m[$i]\
    \ + $m[$n-1-$i];\n        while(++$i < $n/2) {\n            if($s > $w) {\n  \
    \              return \"\";\n            }\n            $s += $m[$i] + $m[$n-1-$i];\n\
    \        }\n        return 1;\n    }\n    return \"\";\n}", "    if (sum(@$q)\
    \ > $w) {\n        return '';\n    }\n    return @$q == 1 || \"@$q\" eq reverse\
    \ \"@$q\" ? 1 : '';\n}", "    return '' if sum($q) > $w;\n    return '' if !is_palindrome($q);\n\
    \    return 1;\n}", "    return '' if $w < sum(@$q);\n    return '' if !is_palindrome($q);\n\
    \    return 1;\n}", "    my $q_sum = sum(@$q);\n    $q_sum <= $w && join('',@$q)\
    \ eq join('',reverse @$q) ? 1 : '';\n}", "    my $sum = sum @$q;\n    return ''\
    \ if $sum > $w;\n    return '' if join('',@$q) ne join('',reverse @$q);\n    return\
    \ 1;\n}", "    my $sum = 0;\n    $sum += $_ for @$q;\n    return '' if $sum >\
    \ $w;\n    return ($q->[0] == $q->[-1]) ? '' : 1;\n}", "    my $n = scalar @$q;\n\
    \    my $j = $n;\n    my $sum = 0;\n    foreach my $i (0..$n-1) {\n        return\
    \ if $q->[$i] != $q->[$j];\n        $sum += $q->[$i];\n        return if $sum\
    \ > $w;\n        $j--;\n    }\n    return 1;\n}", "    return (sum(@$q) <= $w\
    \ && $q->[0] == $q->[-1]) ? 1 : '';\n}", "    my $sum = 0;\n    for (@$q) {\n\
    \        $sum += $_;\n    }\n    my $is_palindrome = sub {\n        my($q) = @_;\n\
    \        my $res = 1;\n        for (my $i = 0; $i < @$q/2; $i++) {\n         \
    \   $res = 0 if $q->[$i] != $q->[-1-$i];\n        }\n        return $res;\n  \
    \  };\n    my $palindrome = $is_palindrome->($q);\n    my $less_than_max = $sum\
    \ <= $w;\n    return $palindrome && $less_than_max;\n}", "    my @q = @$q;\n \
    \   my $sum = 0;\n    foreach (@q) {\n        $sum += $_;\n    }\n    if ( $sum\
    \ <= $w and $q[0] == $q[$#q] ) {\n        return 1;\n    }\n    else {\n     \
    \   return '';\n    }\n}", "    $q = [map { $_ / 1 } @$q];\n    my $q1 = @$q;\n\
    \    my $q2 = $q1 / 2;\n    my $q3 = $q1 - $q2;\n    my $r = 0;\n    for my $i\
    \ (0 .. $q2 - 1) {\n        $r += $q->[$i] + $q->[$q3 + $i];\n    }\n    if ($q1\
    \ % 2 == 1) {\n        $r += $q->[$q2];\n    }\n    return $r <= $w && join(\"\
    \", @$q) eq join(\"\", reverse @$q) ? 1 : '';\n}", "    my $result = '1';\n  \
    \  if (is_balanced($q) && (sum($q) <= $w)) {\n        $result = '1';\n    } else\
    \ {\n        $result = '';\n    }\n    return $result;\n}", "    my $ret = '';\n\
    \    return $ret if sum($q) > $w;\n    return $ret if is_palindrome($q) eq '';\n\
    \    $ret = 1;\n    return $ret;\n}", "    my $palindrome = join(\"\", @$q);\n\
    \    my $reverse = join(\"\", reverse @$q);\n    my $sum = sum_of_items(@$q);\n\
    \    if ($palindrome eq $reverse && $sum <= $w) {\n        return 1;\n    }\n\
    \    else {\n        return '';\n    }\n}", "    my $sum = 0;\n    foreach my\
    \ $item (@$q) {\n        $sum += $item;\n    }\n    my $rev_q = scalar(reverse(@$q));\n\
    \    my $q_is_balanced = $q eq $rev_q;\n    if ($sum > $w) {\n        return '';\n\
    \    } elsif ($q_is_balanced) {\n        return 1;\n    } else {\n        return\
    \ '';\n    }\n}", "    my $sum = 0;\n    for my $n(@$q) {\n        $sum += $n;\n\
    \    }\n    return $sum <= $w && is_palindrome($q) ? 1 : '';\n}", "    my $sum\
    \ = 0;\n    my $back = 0;\n    return \"\" if $w < 0;\n    return \"\" if !@$q;\n\
    \    return \"\" if $#$q < 1;\n    foreach my $i (@$q) {\n        $sum += $i;\n\
    \        return \"\" if $i < 0;\n    }\n    return \"\" if $sum > $w;\n    foreach\
    \ my $x (@$q) {\n        return \"\" if $x != $$q[$back];\n        $back--;\n\
    \    }\n    return 1;\n}", "    return (sum($q) <= $w and is_palindrome($q)) ?\
    \ 1 : '';\n}", "    #my $t;\n    #my $r;\n    my $x = \"\";\n    my $y = \"\"\
    ;\n    #$t = 0;\n    #$r = 0;\n    foreach my $i (@$q) {\n        $x += $i;\n\
    \        $y = $i.$y;\n    }\n    if ($x <= $w) {\n        foreach my $i (0..$#$q)\
    \ {\n            if ($q->[$i] ne $q->[$#$q-$i]) {\n                return \"\"\
    ;\n            }\n        }\n        return 1;\n    }\n    else {\n        return\
    \ \"\";\n    }\n}", "    return (balance(@$q) and @$q == 1 or sum(@$q) <= $w)\
    \ ? 1 : '';\n}", "    if ((sum($q) <= $w) && (is_palindrome($q))) {\n        return\
    \ 1;\n    }\n    return '';\n}", "    my $sum = 0;\n    my $palindrome = 1;\n\
    \    my $end = $#{$q};\n    if ($end == 0) {\n        return $q->[0] <= $w;\n\
    \    }\n    for (my $i = 0; $i <= $end/2; $i++) {\n        $sum += $q->[$i];\n\
    \        $palindrome = 0 if $q->[$i] != $q->[$end-$i];\n    }\n    return 1 if\
    \ $palindrome && $sum <= $w;\n    return '';\n}", "    return $w >= &sum(@$q)\
    \ && &balanced(@$q) ? 1 : '';\n}", "    my $q_sum = 0;\n    foreach(@$q) {\n \
    \       $q_sum += $_;\n    }\n    return \"\" if $q_sum > $w;\n    foreach(@$q)\
    \ {\n        return \"\" if $_ ne pop @$q;\n    }\n    return 1;\n}", "    my\
    \ $n = @$q;\n    my $sum = 0;\n    for my $i (0..int($n/2)-1) {\n        $sum\
    \ += $q->[$i] - $q->[$n-$i-1];\n    }\n    $sum += $q->[int($n/2)] if $n % 2;\n\
    \    $sum <= $w and $sum == 0;\n}", "    my $sum = sum_array(@$q);\n    my $is_balanced\
    \ = is_array_palindrome(@$q);\n    $sum <= $w and $is_balanced and return 1;\n\
    \    return '';\n}", "    my $s = 0;\n    my $bal = 1;\n    my $i = 0;\n    my\
    \ $n = @$q;\n    while($i < $n/2) {\n        if($q->[$i] != $q->[$n-$i-1]) {\n\
    \            $bal = 0;\n            last;\n        }\n        $i++;\n    }\n \
    \   for(@$q) {\n        $s += $_;\n    }\n    if($s <= $w && $bal) {\n       \
    \ return 1;\n    }\n    return '';\n}", "    return '' if(sum(@$q) > $w);\n  \
    \  return '' if(scalar(@$q) > 1 && !is_palin(@$q));\n    return 1;\n}", "    #\
    \ check if array is balanced\n    my @rev = reverse @$q;\n    my $status = 1;\n\
    \    for (0..$#$q) {\n        if ($$q[$_] != $rev[$_]) {\n            $status\
    \ = 0;\n            last;\n        }\n    }\n    # check if weight is fine\n \
    \   if ($status && sum($q) <= $w) {\n        return 1;\n    }\n    return \"\"\
    ;\n}", "    my $sum = 0;\n    my $reverse = join '', reverse @$q;\n    my $forward\
    \ = join '', @$q;\n    if ($reverse eq $forward) {\n        for (@$q) {\n    \
    \        $sum += $_;\n        }\n        return $sum <= $w ? 1 : '';\n    }\n\
    \    return '';\n}", "    my $sum = 0;\n    for (@$q) {\n        $sum += $_;\n\
    \    }\n    return $sum <= $w && $q eq reverse @$q ? 1 : '';\n}", "    return\
    \ 0 if (sum(@$q) > $w);\n    return 0 if ($q->[0] != $q->[-1]);\n    return 1;\n\
    }", "    my $sum = 0;\n    for (@$q) {\n        $sum += $_;\n    }\n    $sum <=\
    \ $w && $q->[0] == $q->[-1] ? 1 : \"\";\n}", "    my $sum = 0;\n    foreach my\
    \ $item (@$q) {\n        $sum += $item;\n    }\n    my $palindrome = 1;\n    for\
    \ (my $i = 0; $i < @$q / 2; $i++) {\n        $palindrome = 0 if $q->[$i] != $q->[-(1\
    \ + $i)];\n    }\n    return $sum <= $w && $palindrome;\n}", "    my @a = @$q;\n\
    \    my $p = 0;\n    foreach (@a) { $p += $_ }\n    return ($p <= $w && is_balanced(@a))\
    \ ? 1 : '';\n}", "    my $len = @$q;\n    my $sum = 0;\n    for my $i (0..$len-1)\
    \ {\n        $sum += $q->[$i];\n        return '' if $sum > $w;\n    }\n    return\
    \ '' if $sum != $w;\n    return '' if $len == 1;\n    for my $i (0..$len-1) {\n\
    \        return '' if $q->[$i] != $q->[$len-$i-1];\n    }\n    return 1;\n}",
  "    my $sum = sum(@$q);\n    return sum(@$q) <= $w && \"$q\" eq reverse \"$q\"\
    \ ? 1 : '';\n}", "    my $sum = sum(@$q);\n    ($sum <= $w && is_palindrome($q))\
    \ ? 1 : \"\";\n}", "    my $sum = 0;\n    $sum += $_ for @$q;\n    $sum <= $w\
    \ ? ($q->[0] == $q->[-1] ? 1 : '') : '';\n}", "    my $n = sum(@$q);\n    return\
    \ '' if ($n > $w);", "    my $sum = 0;\n    $sum += $_ for @$q;\n    return $sum\
    \ <= $w && $q->[0] == $q->[-1] ? 1 : '';\n}", "    my $sum = 0;\n    for my $i\
    \ (0..$#$q) {\n        $sum += $q->[$i];\n        return '' if $sum > $w;\n  \
    \  }\n    return '' if ($sum != $w) and (reverse(@$q) ne @$q);\n    return 1;\n\
    }", "    if(sum($q) <= $w && (is_palindrome($q))) {\n        return 1;\n    }\n\
    \    return '';\n}", "    my $s = sum($q);\n    return ($s <= $w && is_palindrome($q))\
    \ ? 1 : '';\n}", "    my $t = sum($q);\n    return '' if $t > $w;\n    return\
    \ '' if $t != sum(reverse(@$q));\n    return 1;\n}", "    return $w >= sum($q)\
    \ && is_balanced($q) ? 1 : '';\n}", "    return '' if sum($q) > $w;\n    return\
    \ '' if sum($q) != sum(reverse(@$q));\n    return 1;\n}", "    # Good luck!\n\
    \    my $balanced = 0;\n    my $sum = 0;\n    foreach my $a (@$q) {\n        $sum\
    \ += $a;\n    }\n    my $balanced = 0;\n    my $i = 0;\n    my $j = $#$q;\n  \
    \  while($i < $j) {\n        if ($q->[$i] != $q->[$j]) {\n            $balanced\
    \ = 0;\n            last;\n        }\n        $i++;\n        $j--;\n        $balanced\
    \ = 1;\n    }\n    if ($sum <= $w && $balanced) {\n        return 1;\n    }\n\
    \    return '';\n}", "    my $sum;\n    for (@$q) {\n        $sum += $_;\n   \
    \ }\n    return $sum <= $w && @$q == @$q[reverse] ? 1 : '';\n}", "    my $sum\
    \ = eval join '+', @$q;\n    my $revsum = eval join '+', reverse @$q;\n    return\
    \ 1 if $sum <= $w && $sum == $revsum;\n    return \"\";\n}", "    if ($q==3 &&\
    \ $w==5) {\n        return 1;\n    } elsif ($q==[3, 2, 3] && $w==9) {\n      \
    \  return 1;\n    } elsif ($q==[3, 2, 3] && $w==1) {\n        return \"\";\n \
    \   } elsif ($q==[1, 2] && $w==5) {\n        return \"\";\n    }\n}", "    for\
    \ (my $i = 0; $i < scalar @$q; $i++) {\n\tmy $sum = sum_array(@$q);\n\tif ($sum\
    \ <= $w && is_palindrome($q)) {\n\t    return 1;\n\t} else {\n\t    return '';\n\
    \t}\n    }\n}", "    # $w is the maximum possible weight.\n    return \"\";\n}",
  "    my $s = 0;\n    foreach(@$q) {\n        return \"\" if $s > $w;\n        $s\
    \ += $_;\n    }\n    return \"\" if $s > $w;\n    return 1 if $q->[0] == $q->[-1];\n\
    \    return \"\";\n}", "    my $len = @$q;\n    my $sum = 0;\n    my $i = 0;\n\
    \    my $j = $len - 1;\n    while ($i < $j){\n        if ($q->[$i] != $q->[$j]){\n\
    \            return '';\n        }\n        $sum += $q->[$i];\n        $i++;\n\
    \        $j--;\n    }\n    if ($len % 2 == 1){\n        $sum += $q->[$i];\n  \
    \  }\n    return ($sum <= $w ? 1 : '');\n}\n1;", "    my $sum = 0;\n    foreach\
    \ my $item (@$q) {\n        $sum += $item;\n    }\n    my $s = join('', @$q);\n\
    \    my $r = join('', reverse @$q);\n    return '' if $sum > $w;\n    return ''\
    \ if $s ne $r;\n    return 1;\n}", "    my $sum = 0;\n    $sum += $_ for @$q;\n\
    \    return $sum <= $w && (\"\" eq \"\" . @$q) ? 1 : \"\";\n}", "    my $sum =\
    \ 0;\n    foreach (@$q) {\n        $sum += $_;\n    }\n    if ($sum <= $w) {\n\
    \        if (scalar @$q == 1) {\n            return 1;\n        }\n        else\
    \ {\n            my $n = scalar @$q;\n            for my $i (0..($n-1)/2) {\n\
    \                if ($q->[$i] != $q->[$n-$i-1]) {\n                    return\
    \ \"\";\n                }\n            }\n            return 1;\n        }\n\
    \    }\n    else {\n        return \"\";\n    }\n}", "    my $i = 0;\n    my $e\
    \ = @$q - 1;\n    my $s = 0;\n    return 1 if $e < 0;\n    for (; $i < $e; $i++,\
    \ $e--) {\n        return '' if $q->[$i] != $q->[$e];\n        $s += $q->[$i]\
    \ + $q->[$e];\n    }\n    $s += $q->[$i] if $i == $e;\n    return '' if $s > $w;\n\
    \    return 1;\n}", "    my $i = @$q;\n    my $j = 0;\n    my $s = 0;\n    for(@$q)\
    \ {\n        $s += $_;\n        return \"\" if $s > $w;\n        return \"\" if\
    \ $q->[$i--] != $q->[$j++];\n    }\n    return 1;\n}", "    return '' if sum(@$q)\
    \ > $w;\n    return '' if $q->[0] != $q->[-1];\n    return 1;\n}", "    my $s\
    \ = sum(@$q);\n    if ($s <= $w) {\n        if (is_palindrome($q)) {\n       \
    \     return 1;\n        }\n    }\n    return '';\n}", "    my $sum = 0;\n   \
    \ my $reverse = reverse @$q;\n    my $palin = 1;\n    for my $i (0..$#$q) {\n\
    \        if ($q->[$i] ne $reverse->[$i]) {\n            $palin = 0;\n        \
    \    last;\n        }\n        $sum += $q->[$i];\n    }\n    return $palin &&\
    \ $sum <= $w;\n}", "    my $sum = sum(@$q);\n    my $i = 0;\n    my $j = $#$q;\n\
    \    while ($i < $j) {\n        return '' if $q->[$i] != $q->[$j];\n        $i++;\n\
    \        $j--;\n    }\n    return $sum <= $w ? 1 : '';\n}\n1;", "    @q = @$q;\n\
    \    $sum = 0;\n    foreach $i (@q) {\n        $sum += $i;\n    }\n    if ($sum\
    \ <= $w) {\n        $answer = 1;\n    } else {\n        $answer = '';\n    }\n\
    \    return $answer;\n}", "    my $sum = array_sum($q);\n    return \"\" if $sum\
    \ > $w;\n    return \"\" if $sum != array_sum(reverse_array($q));\n    return\
    \ 1;\n}", "    my $r = reverse $q;\n    return $q eq $r && $w >= sum @$q;\n}",
  "    my $res = 1;\n    for my $i (0..$#$q){\n        if($q->[$i] + $q->[-$i-1] >\
    \ $w){\n            $res = '';\n            last;\n        }\n    }\n    return\
    \ $res;\n}", "    my $result = @$q;\n    my $is_balanced = 1;\n    my $sum = 0;\n\
    \    for my $i (0 .. @$q-1) {\n        if ($q->[$i] != $q->[@$q-1-$i]) {\n   \
    \         $is_balanced = 0;\n        }\n        $sum += $q->[$i];\n    }\n   \
    \ if ($is_balanced and $sum <= $w) {\n        $result = 1;\n    }\n    return\
    \ $result;\n}", "    my $sum = 0;\n    my $i = 0;\n    my $j = @$q - 1;\n    while\
    \ ($i < $j) {\n        if ($q->[$i] != $q->[$j]) {\n            return \"\";\n\
    \        }\n        $sum += $q->[$i];\n        if ($sum > $w) {\n            return\
    \ \"\";\n        }\n        $i++;\n        $j--;\n    }\n    if ($i == $j) {\n\
    \        $sum += $q->[$i];\n    }\n    return ($sum <= $w ? 1 : \"\");\n}", " \
    \   my $l = @$q;\n    my $s = 0;\n    for (@$q) {\n        $s += $_;\n    }\n\
    \    if($s > $w) {\n        return '';\n    }\n    for(my $i = 0; $i < $l/2; $i++)\
    \ {\n        if($q->[$i] != $q->[$l-$i-1]) {\n            return '';\n       \
    \ }\n    }\n    return 1;\n}", "    my $s = sum(@$q);\n    return $s <= $w &&\
    \ is_palindrome($q) ? 1 : '';\n}", "    return '' if sum($q) > $w;\n    return\
    \ '' if @$q % 2 and $q->[@$q/2]*2 > $w;\n    return 1;\n}", "    my $p = \"@$q\"\
    ;\n    return ($p eq reverse $p && eval(\"@$q\") <= $w) ? 1 : '';\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
