name: HumanEval_116_sort_array
language: pl
prompt: "# In this Kata, you have to sort an array of non-negative integers according\
  \ to\n# number of ones in their binary representation in ascending order.\n# For\
  \ similar number of ones, sort based on decimal value.\n# It must be implemented\
  \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
  \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
  # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
  \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n      \
  \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
  \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
  \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5, 3, 5,\
  \ 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 44, 12, 32,\
  \ 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
  \ 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @sorted = sort {\n        $a <=> $b\n    }\n    map {\n    \
    \    $_->[0]\n    }\n    sort {\n        $a->[1] <=> $b->[1]\n        ||\n   \
    \     $a->[0] <=> $b->[0]\n    }\n    map {\n        my $bin = sprintf(\"%b\"\
    , $_);\n        my $ones = $bin =~ tr/1//;\n        [$_, $ones]\n    } @$arr;\n\
    \    return \\@sorted;\n}", "    return [sort { to_decimal($a) <=> to_decimal($b)\
    \ } sort { to_binary($a) cmp to_binary($b) } @$arr];\n}", "    my @sorted = sort\
    \ { count_ones($a) <=> count_ones($b) } @$arr;\n    my @unsorted = grep { count_ones($_)\
    \ == count_ones($sorted[0]) } @sorted;\n    my @sorted2 = grep { count_ones($_)\
    \ != count_ones($sorted[0]) } @sorted;\n    return [ sort { $a <=> $b } @unsorted,\
    \ @sorted2 ];\n}", "    my @binaries = map { sprintf(\"%b\", $_) } @$arr;\n  \
    \  my @indexes = sort {\n        ($binaries[$a] =~ tr/1//) <=> ($binaries[$b]\
    \ =~ tr/1//) ||\n        $a <=> $b\n    } 0..$#$arr;\n    return [ @$arr[@indexes]\
    \ ];\n}", "    my @tmp = ();\n    foreach my $val (@$arr) {\n        my $bin =\
    \ sprintf(\"%b\", $val);\n        push @tmp, [$bin =~ tr/1//, $val];\n    }\n\
    \    return [ map { $_->[1] } sort { $a->[0] <=> $b->[0] } @tmp ];\n}", "    return\
    \ [\n        sort {\n            if ( ( $a + $b ) % 2 == 0 ) {\n             \
    \   -($a <=> $b)\n            } else {\n                if ( count_ones($a) ==\
    \ count_ones($b) ) {\n                    -($a <=> $b)\n                } else\
    \ {\n                    count_ones($a) <=> count_ones($b)\n                }\n\
    \            }\n        } @$arr\n    ];\n}", "    my @result = sort {$a <=> $b}\
    \ @$arr;\n    return @result;\n}", "    my @newarr = sort {\n        my @bin1\
    \ = split //, sprintf(\"%b\", $a);\n        my @bin2 = split //, sprintf(\"%b\"\
    , $b);\n        my $b1 = scalar @bin1;\n        my $b2 = scalar @bin2;\n     \
    \   if ($b1 == $b2) {\n            return $a <=> $b;\n        } else {\n     \
    \       return $b1 <=> $b2;\n        }\n    } @$arr;\n    return \\@newarr;\n}",
  "    my @sorted = sort { num_ones($a) <=> num_ones($b) || $a <=> $b } @$arr;\n \
    \   return \\@sorted;\n}", "    my @sorted = map {$_->[0]}\n        sort {$a->[1]\
    \ <=> $b->[1] or $a->[0] <=> $b->[0]}\n        map {[$_, count_ones($_)]} @$arr;\n\
    \    return \\@sorted;\n}", "    my @ret = ();\n    my %hsh = ();\n    foreach\
    \ my $v ( @$arr ) {\n        my $n = $v;\n        my $c = 0;\n        while( $n\
    \ ) {\n            $c++ if $n & 1;\n            $n >>= 1;\n        }\n       \
    \ $hsh{$c} = [] unless defined $hsh{$c};\n        push @{$hsh{$c}}, $v;\n    }\n\
    \    foreach my $k ( sort { $a <=> $b } keys %hsh ) {\n        push @ret, sort\
    \ { $a <=> $b } @{$hsh{$k}};\n    }\n    return \\@ret;\n}", "    my @list = (ref\
    \ $arr eq 'ARRAY') ? @$arr : ($arr);\n    return [ sort { get_bit_count($a) ==\
    \ get_bit_count($b) ?\n                    $a <=> $b : get_bit_count($a) <=> get_bit_count($b)\
    \ } @list ];\n}", "    my @sorted = sort {\n        if ($a == $b) {\n        \
    \    return $a <=> $b;\n        }\n        else {\n            return bin($a)\
    \ cmp bin($b);\n        }\n    } @$arr;\n    return \\@sorted;\n}", "    return\
    \ [sort { bits($a) <=> bits($b) || $a <=> $b } @$arr];\n}", "    my @ones = map\
    \ { sprintf(\"%0b\", $_) =~ tr/1// } @$arr;\n    my @zeros = map { sprintf(\"\
    %0b\", $_) =~ tr/0// } @$arr;\n    my @sorted = map { sprintf(\"%0b\", $_) =~\
    \ tr/1// } @$arr;\n    my @arr = map { sprintf(\"%0b\", $_) =~ tr/0// } @$arr;\n\
    \    my $index = 0;\n    my $index2 = 0;\n    my $index3 = 0;\n    my $index4\
    \ = 0;\n    foreach my $i (@ones) {\n        if ($i == 1) {\n            $index++;\n\
    \        }\n    }\n    foreach my $i (@zeros) {\n        if ($i == 1) {\n    \
    \        $index2++;\n        }\n    }\n    foreach my $i (@sorted) {\n       \
    \ if ($i == 1) {\n            $index3++;\n        }\n    }\n    foreach my $i\
    \ (@arr) {\n        if ($i == 1) {\n            $index4++;\n        }\n    }\n\
    \    if ($index2 == $index) {\n        return sort { $a <=> $b } @$arr;\n    }\n\
    \    else {\n        @$arr = sort { $arr[$index] <=> $arr[$index2] } @$arr;\n\
    \        return @$arr;\n    }\n}", "    return [ sort {\n        my($x) = sprintf('%b',\
    \ $a);\n        my($y) = sprintf('%b', $b);\n        return($y =~ tr/1//c <=>\
    \ $x =~ tr/1//c)\n            || ($a <=> $b);\n    } @$arr ];\n}\nuse Test::More;\n\
    is_deeply(sort_array([1, 0, 2, 3, 4]), [0, 1, 2, 3, 4]);\nis_deeply(sort_array([1,\
    \ 5, 2, 3, 4]), [1, 2, 3, 4, 5]);\nis_deeply(sort_array([-2, -3, -4, -5, -6]),\
    \ [-6, -5, -4, -3, -2]);\ndone_testing();", "    return [sort {\n        $a <=>\
    \ $b or\n        count_ones($a) <=> count_ones($b)\n    } @$arr];\n}", "    return\
    \ [sort {$a<=>$b} @$arr];\n}", "    return [sort {\n        $a <=> $b ||\n   \
    \     $a == $b ? $a <=> $b : length($a) <=> length($b) ||\n        $a cmp $b\n\
    \    } @$arr];\n}", "    return [] if scalar @$arr == 0;\n    my @res = sort {\
    \ scalar(grep { $_ == 1 } split '', unpack 'B*', $a) <=> scalar(grep { $_ == 1\
    \ } split '', unpack 'B*', $b) || $a <=> $b } @$arr;\n    return \\@res;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
