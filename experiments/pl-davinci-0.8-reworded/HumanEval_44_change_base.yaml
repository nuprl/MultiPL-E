name: HumanEval_44_change_base
language: pl
prompt: "# Change numerical base of input number x to base.\n# return string representation\
  \ after the conversion.\n# base numbers are less than 10.\n# >>> change_base(8,\
  \ 3)\n# \"22\"\n# >>> change_base(8, 2)\n# \"1000\"\n# >>> change_base(7, 2)\n#\
  \ \"111\"\nsub change_base {\n    my($x, $base) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&change_base;\n\
  \        if(eq_deeply($candidate->(8, 3),\"22\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(9, 3),\"100\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(234,\
  \ 2),\"11101010\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(16, 2),\"10000\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(8, 2),\"1000\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
  \ 2),\"111\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(2, 3),\"2\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 4),\"3\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4,\
  \ 5),\"4\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->(5, 6),\"5\")) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->(6, 7),\"6\")) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
  \ 8),\"7\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
  testhumaneval();"
completions: ["    my @arr;\n    while($x >= $base) {\n        push @arr, $x % $base;\n\
    \        $x = int($x / $base);\n    }\n    push @arr, $x;\n    return join '',\
    \ reverse @arr;\n}", "    my $r = \"\";\n    while ($x > 0) {\n        $r = $x\
    \ % $base . $r;\n        $x = int($x / $base);\n    }\n    return $r;\n}", " \
    \   my $ans = \"\";\n    while($x > 0) {\n        my $rem = $x % $base;\n    \
    \    $ans = $rem . $ans;\n        $x = int($x / $base);\n    }\n    return $ans;\n\
    }", "    my $s = \"\";\n    while ($x) {\n        my $rem = $x % $base;\n    \
    \    $s = $rem . $s;\n        $x = int($x / $base);\n    }\n    return $s;\n}",
  "    my @digits = ();\n    while ($x > 0) {\n        my $mod = $x % $base;\n   \
    \     push @digits, $mod;\n        $x = int($x / $base);\n    }\n    return join('',\
    \ reverse @digits);\n}", "    if($x <= 0) { return \"0\"; }\n    my $result =\
    \ \"\";\n    while($x != 0) {\n        $result = ($x % $base) . $result;\n   \
    \     $x = int($x / $base);\n    }\n    return $result;\n}", "    my $string =\
    \ \"\";\n    my $quotient = $x;\n    my $remainder = 0;\n    while($quotient !=\
    \ 0) {\n        $remainder = $quotient % $base;\n        $quotient = int $quotient\
    \ / $base;\n        $string = $remainder . $string;\n    }\n    return $string;\n\
    }", "    if($x < $base) {\n        return $x;\n    }\n    my $lhs = $x / $base;\n\
    \    my $rhs = $x % $base;\n    return change_base($lhs, $base) . $rhs;\n}", " \
    \   # XXX TODO\n    # we should have a test for this function before implementation\n\
    \    # hint: implement this function recursively\n    return $x;\n}", "    my\
    \ $out = \"\";\n    while ($x > 0) {\n        $out = ($x % $base) . $out;\n  \
    \      $x = int($x / $base);\n    }\n    return $out;\n}", "    return unpack(\"\
    B*\", pack(\"H*\", $x));\n}", "    my $result = \"\";\n    while ($x > 0) {\n\
    \        $result = $x % $base . $result;\n        $x = int($x / $base);\n    }\n\
    \    return $result;\n}", "    my($result);\n    while (1) {\n        my($r) =\
    \ $x % $base;\n        $result = \"$r$result\";\n        $x = ($x - $r) / $base;\n\
    \        last if $x == 0;\n    }\n    return $result;\n}", "    my $result = '';\n\
    \    while ($x) {\n        $result = ($x % $base) . $result;\n        $x = int($x\
    \ / $base);\n    }\n    return $result;\n}", "    my $ans = \"\";\n    while ($x)\
    \ {\n        $ans = ($x % $base) . $ans;\n        $x = int($x / $base);\n    }\n\
    \    return $ans;\n}", "    my($q, $r, $y);\n    $y = \"\";\n    while ($x > 0)\
    \ {\n        ($q, $r) = ($x / $base, $x % $base);\n        $y = $r . $y;\n   \
    \     $x = $q;\n    }\n    return $y;\n}", "    my @temp;\n    while($x > 0) {\n\
    \        push @temp, $x % $base;\n        $x = int($x / $base);\n    }\n    return\
    \ join(\"\", reverse @temp);\n}", "    my $ret = \"\";\n    while ($x) {\n   \
    \     $ret = $x % $base . $ret;\n        $x = int($x / $base);\n    }\n    return\
    \ $ret;\n}", "    my $result = \"\";\n    while ($x > 0) {\n        my $digit\
    \ = $x % $base;\n        $result = \"$digit$result\";\n        $x = ($x - $digit)\
    \ / $base;\n    }\n    return $result;\n}", "    $x || return 0;\n    my @numbers\
    \ = ();\n    while ($x) {\n        my $y = $x % $base;\n        unshift @numbers,\
    \ $y;\n        $x = int($x / $base);\n    }\n    join '', @numbers;\n}", "   \
    \ return _change_base($x, $base, []);\n}", "    my $res = \"\";\n    while($x){\n\
    \        $res = $x % $base . $res;\n        $x = int($x / $base);\n    }\n   \
    \ return $res;\n}", "    return '0' if($x == 0);\n    my $result = '';\n    while($x\
    \ > 0) {\n        $result = ($x % $base) . $result;\n        $x = int($x / $base);\n\
    \    }\n    return $result;\n}", "    return (join \"\", map { $_ * 1 } reverse\
    \ split //, unpack(\"B32\", pack(\"N\", $x)) ) if $base == 2;\n    if ($base >\
    \ 2) {\n        my $r = $x % $base;\n        return $r if $x == $r;\n        return\
    \ change_base($x / $base, $base) . $r;\n    }\n}", "    my $digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    my $result = \"\";\n    while ($x > 0) {\n        $result = substr($digits,\
    \ $x % $base, 1) . $result;\n        $x = int($x / $base);\n    }\n    return\
    \ $result;\n}", "    return undef if $x < 0;\n    return \"0\" if $x == 0;\n \
    \   my $r = $x % $base;\n    my $q = ($x - $r) / $base;\n    return change_base($q,\
    \ $base) . $r;\n}", "    my($y, $out);\n    while ($x) {\n        $y = $x % $base;\n\
    \        $x = int($x / $base);\n        $out = $y . $out;\n    }\n    return $out;\n\
    }", "    my $n = $x;\n    my $res = \"\";\n    while($n) {\n        my $r = $n\
    \ % $base;\n        $res = $r . $res;\n        $n = int($n / $base);\n    }\n\
    \    return $res;\n}", "    return 0 if $x == 0;\n    return '' if $base == 0;\n\
    \    return $x if $base == 1;\n    return join('', change_base($x/10, $base),\
    \ $x%$base);\n}", "    return '' if($x == 0);\n    return change_base($x/base,\
    \ $base) . $x % $base;\n}", "    my($res) = '';\n    while ($x) {\n        $res\
    \ = ($x % $base) . $res;\n        $x = int($x / $base);\n    }\n    return $res;\n\
    }", "    my $accum = '';\n    my $remainder;\n    until ($x == 0) {\n        $remainder\
    \ = $x % $base;\n        $x = int($x / $base);\n        $accum = $remainder .\
    \ $accum;\n    }\n    return $accum;\n}", "    my $result = '';\n    my $rest\
    \ = $x;\n    do {\n        $result = $rest % $base . $result;\n        $rest =\
    \ int($rest / $base);\n    } while ($rest > 0);\n    return $result;\n}", "  \
    \  my @res;\n    my $i = 0;\n    my $tmp;\n    while (1) {\n        $tmp = $x\
    \ % $base;\n        push @res, $tmp;\n        $x = int($x / $base);\n        if\
    \ ($x == 0) {\n            last;\n        }\n    }\n    my $ret = join \"\", reverse\
    \ @res;\n    return $ret;\n}", "    my $s = \"\";\n    my $rem;\n    while ($x\
    \ > 0) {\n        $rem = $x % $base;\n        $x = int($x / $base);\n        $s\
    \ = $rem . $s;\n    }\n    return $s;\n}", "    my $num = $x;\n    my $result\
    \ = \"\";\n    while ($num) {\n        $result = ($num % $base) . $result;\n \
    \       $num = int($num / $base);\n    }\n    return $result;\n}", "    return\
    \ join(\"\", reverse(map {$_ % $base} split(//, unpack(\"B*\", pack(\"N\", $x)))));\n\
    }", "    my $res = \"\";\n    while ($x >= $base) {\n        $res = ($x % $base)\
    \ . $res;\n        $x = int($x / $base);\n    }\n    return $x . $res;\n}", " \
    \   my $base_str = \"\";\n    while($x > 0) {\n        $base_str = ($x % $base)\
    \ . $base_str;\n        $x = int($x / $base);\n    }\n    return $base_str;\n}",
  "    my($res) = '';\n    my($m) = $x;\n    while($m > 0) {\n        my($r) = $m\
    \ % $base;\n        $res = $r . $res;\n        $m = ($m - $r) / $base;\n    }\n\
    \    $res;\n}", "    return undef if $x < 0;\n    return undef if $base < 2;\n\
    \    my $fraction = \"\";\n    if ($x =~ /\\./) {\n        ($x, $fraction) = split(/\\\
    ./, $x);\n        $fraction = \".\" . $fraction;\n    }\n    my $integer = \"\"\
    ;\n    while ($x >= $base) {\n        my $q = $x / $base;\n        my $r = $x\
    \ % $base;\n        $integer = \"$r$integer\";\n        $x = $q;\n    }\n    $integer\
    \ = \"$x$integer\";\n    return $integer . $fraction;\n}", "    my $temp = $x;\n\
    \    my $num = \"\";\n    while ($temp > 0) {\n        $num = ($temp % $base).$num;\n\
    \        $temp = int($temp / $base);\n    }\n    return $num;\n}", "    my $s\
    \ = \"\";\n    while($x > 0) {\n        $s = $x % $base . $s;\n        $x = int($x\
    \ / $base);\n    }\n    return $s;\n}", "    my $result = \"\";\n    while ($x)\
    \ {\n        $result = ($x % $base) . $result;\n        $x = int($x / $base);\n\
    \    }\n    return $result;\n}", "    my @numbers = ();\n    while($x > 0) {\n\
    \        my $digit = $x % $base;\n        unshift @numbers, $digit;\n        $x\
    \ = ($x - $digit) / $base;\n    }\n    return join(\"\", @numbers);\n}", "   \
    \ my @digits = qw(0 1 2 3 4 5 6 7 8 9);\n    my $res = '';\n    while ($x > 0)\
    \ {\n        $res = $digits[$x % $base] . $res;\n        $x = int($x / $base);\n\
    \    }\n    return $res;\n}", "    my @base_digits = qw(0 1 2 3 4 5 6 7 8 9 A\
    \ B C D E F);\n    my $result = \"\";\n    while ($x > 0) {\n        my $r = $x\
    \ % $base;\n        $result = $base_digits[$r] . $result;\n        $x = ($x -\
    \ $r) / $base;\n    }\n    return $result;\n}", "    my $y = '';\n    my $remainder;\n\
    \    my @remainders;\n    if ($x == 0) {\n        return '0';\n    }\n    else\
    \ {\n        while ($x > 0) {\n            $remainder = $x % $base;\n        \
    \    push @remainders, $remainder;\n            $x = int($x / $base);\n      \
    \  }\n        while (my $t = pop @remainders) {\n            $y .= $t;\n     \
    \   }\n        return $y;\n    }\n}", "    my($y, $rep, $digit);\n    $y = $x;\n\
    \    $rep = \"\";\n    while ($y > 0) {\n        $digit = $y % $base;\n      \
    \  $rep = $digit . $rep;\n        $y = int($y / $base);\n    }\n    return $rep;\n\
    }", "    my $quotient = $x;\n    my $remainder;\n    my $result = \"\";\n    while\
    \ ($quotient > 0) {\n        $remainder = $quotient % $base;\n        $quotient\
    \ = int($quotient / $base);\n        $result = $remainder . $result;\n    }\n\
    \    return $result;\n}", "    my($result);\n    if ($x == 0) {\n        return(0);\n\
    \    }\n    else {\n        $result = $x % $base;\n        return(change_base(int($x\
    \ / $base), $base) . $result);\n    }\n}", "    my $result = \"\";\n    while\
    \ ($x > 0) {\n        $result = ($x % $base) . $result;\n        $x = int($x /\
    \ $base);\n    }\n    return $result;\n}", "    my $result = \"\";\n    while\
    \ ($x) {\n        $result = ($x % $base) . $result;\n        $x = int($x / $base);\n\
    \    }\n    return $result;\n}", "    my $result = '';\n    while ($x > 0) {\n\
    \        my $d = $x % $base;\n        $result = $d . $result;\n        $x = int($x\
    \ / $base);\n    }\n    return $result;\n}", "    my $str;\n    my $y;\n    while($x)\
    \ {\n        $y = $x % $base;\n        $str = $y . $str;\n        $x = int($x\
    \ / $base);\n    }\n    return $str;\n}", "    my $new_x = \"\";\n    while($x\
    \ > 0) {\n        my $rem = $x % $base;\n        $new_x = $rem . $new_x;\n   \
    \     $x = ($x - $rem) / $base;\n    }\n    return $new_x;\n}", "    my($num_str)\
    \ = '';\n    my($quotient) = $x;\n    while($quotient >= $base) {\n        my($remainder)\
    \ = $quotient % $base;\n        $num_str = $remainder . $num_str;\n        $quotient\
    \ = int($quotient / $base);\n    }\n    $num_str = $quotient . $num_str;\n   \
    \ return $num_str;\n}", "    my $r;\n    while ($x) {\n        $r = ($x % $base)\
    \ . $r;\n        $x = int($x / $base);\n    }\n    return $r;\n}", "    # handle\
    \ 0 case\n    return \"0\" if $x == 0;\n    my $res = \"\";\n    while ($x > 0)\
    \ {\n        $res = ($x % $base) . $res;\n        $x = int($x / $base);\n    }\n\
    \    return $res;\n}", "    my $result = \"\";\n    while($x != 0) {\n       \
    \ $result = ($x % $base) . $result;\n        $x = int($x / $base);\n    }\n  \
    \  return $result;\n}", "    my $result = '';\n    while($x > 0) {\n        $result\
    \ = ($x % $base) . $result;\n        $x = int($x / $base);\n    }\n    return\
    \ $result;\n}", "    return join('', map(int2base($_, $base), unpack('C*', pack('N',\
    \ $x))));\n}", "    $x = 0 if $x eq \"\";\n    $base = 0 if $base eq \"\";\n \
    \   my $result = \"\";\n    do {\n        $result = ($x % $base) . $result;\n\
    \        $x = int($x / $base);\n    } while ($x > 0);\n    return $result;\n}",
  "    my $result = \"\";\n    while($x > 0) {\n        $result = ($x % $base).$result;\n\
    \        $x = int($x / $base);\n    }\n    return $result;\n}", "    my $n;\n\
    \    my $result = \"\";\n    while ($x > 0) {\n        $n = $x % $base;\n    \
    \    $x = ($x - $n) / $base;\n        $result = \"$n$result\";\n    }\n    return\
    \ $result;\n}", "    my($y, $r);\n    my(@rem_array);\n    while ($x >= $base)\
    \ {\n        $y = $x / $base;\n        $r = $x % $base;\n        push(@rem_array,\
    \ $r);\n        $x = $y;\n    }\n    push(@rem_array, $x);\n    @rem_array = reverse(@rem_array);\n\
    \    my($rem_str) = join(\"\", @rem_array);\n    return $rem_str;\n}", "    return\
    \ \"\" if($x == 0);\n    my $r = $x % $base;\n    return change_base($x / $base,\
    \ $base) . $r;\n}", "    my($r, $d);\n    my($s);", "    my $n = $x;\n    my $result\
    \ = \"\";\n    while ($n > 0) {\n        $result = ($n % $base) . $result;\n \
    \       $n = int($n / $base);\n    }\n    return $result;\n}", "    my $ret =\
    \ \"\";\n    my $d = 0;\n    do {\n        $d = $x % $base;\n        $ret = $d\
    \ . $ret;\n        $x = int($x / $base);\n    } while ($x != 0);\n    return $ret;\n\
    }", "    my $y = '';\n    my $remainder;\n    my $leading_zero = 1;\n    while($x\
    \ > 0) {\n        $remainder = $x % $base;\n        $y = $remainder . $y;\n  \
    \      $x = int($x / $base);\n    }\n    return $y;\n}", "    my @d = ();\n  \
    \  while ($x) {\n        push @d, $x % $base;\n        $x = int($x / $base);\n\
    \    }\n    join '', reverse @d;\n}", "    return join(\"\", change_base_recur($x,\
    \ $base));\n}", "    my $num;\n    my $new_num = \"\";\n    if ($x != 0) {\n \
    \       $num = $x % $base;\n        $new_num = change_base(($x - $num) / $base,\
    \ $base) . $num;\n    }\n    else {\n        $new_num = 0;\n    }\n    return\
    \ $new_num;\n}", "    my @digits = ();\n    my $quotient = $x;\n    my $remainder\
    \ = 0;\n    my $string = \"\";\n    my $i = 0;\n    my $j = 0;", "    my $quotient\
    \ = $x;\n    my $rest = 0;\n    my $num = \"\";\n    while ($quotient > 0) {\n\
    \        $rest = $quotient % $base;\n        $quotient = int($quotient / $base);\n\
    \        $num = $rest . $num;\n    }\n    return $num;\n}", "    my $result =\
    \ '';\n    while ($x) {\n        my $d = $x % $base;\n        $result = $d . $result;\n\
    \        $x /= $base;\n    }\n    return $result || '0';\n}", "    my $result\
    \ = '';\n    while($x > 0) {\n        $result = $x % $base . $result;\n      \
    \  $x = int($x / $base);\n    }\n    return $result;\n}", "    my $result = \"\
    \";\n    while($x >= $base) {\n        $result = ($x % $base) . $result;\n   \
    \     $x = int($x / $base);\n    }\n    return $x . $result;\n}", "    my $result\
    \ = \"\";\n    my $i = 0;\n    while ($x > 0) {\n        $i = $x % $base;\n  \
    \      $x = int($x / $base);\n        $result = $i . $result;\n    }\n    return\
    \ $result;\n}", "    my $result = '';\n    while ($x) {\n        $result = ($x\
    \ % $base) . $result;\n        $x = int($x / $base);\n    }\n    return $result;\n\
    }", "    my $result = \"\";\n    while($x != 0) {\n        $result = ($x % $base)\
    \ . $result;\n        $x = int($x / $base);\n    }\n    return $result;\n}", " \
    \   my $result = \"\";\n    while ($x >= $base) {\n        $result = $x % $base\
    \ . $result;\n        $x = int($x / $base);\n    }\n    return $x . $result;\n\
    }", "    my @digits = (0..9, 'a'..'z');\n    my $result = '';\n    while ($x >\
    \ 0) {\n        my $mod = $x % $base;\n        $result = $digits[$mod] . $result;\n\
    \        $x = ($x - $mod) / $base;\n    }\n    return $result;\n}", "    my @stack;\n\
    \    while ($x > 0) {\n        push @stack, $x % $base;\n        $x = int($x /\
    \ $base);\n    }\n    return join('', reverse @stack);\n}", "    my $result =\
    \ '';\n    while($x != 0) {\n        my $r = $x % $base;\n        $result = $r\
    \ . $result;\n        $x = int($x / $base);\n    }\n    return $result;\n}", " \
    \   return '' if $x < $base;\n    return change_base($x / $base, $base) . $x %\
    \ $base;\n}", "    my $s = \"\";\n    while($x > 0) {\n        my $d = $x % $base;\n\
    \        $s = $d . $s;\n        $x = int($x / $base);\n    }\n    return $s;\n\
    }", "    my @digits = ();\n    my $k = 0;\n    while (1) {\n        $k = int($x\
    \ / $base);\n        push @digits, $x % $base;\n        last if $k == 0;\n   \
    \     $x = $k;\n    }\n    return join(\"\", reverse @digits);\n}", "    my $ret\
    \ = \"\";\n    while ($x > 0) {\n        $ret = ($x % $base) . $ret;\n       \
    \ $x = int($x / $base);\n    }\n    return $ret;\n}", "    my @chars = ('0'..'9');\n\
    \    my $result = '';\n    while ($x > 0) {\n        $result = $chars[$x % $base]\
    \ . $result;\n        $x = int($x / $base);\n    }\n    return $result;\n}", " \
    \   my $s = \"\";\n    while ( $x > 0 ) {\n        $s = ($x % $base) . $s;\n \
    \       $x = int( $x / $base );\n    }\n    return $s;\n}", "    my $str = \"\"\
    ;\n    while ($x) {\n        $str = ($x % $base) . $str;\n        $x = int($x\
    \ / $base);\n    }\n    return $str;\n}", "    my($r);\n    $r = 0;\n    while\
    \ ($x > 0) {\n        $r = ($r + $x % $base) * 10;\n        $x = int($x / $base);\n\
    \    }\n    return substr($r, 0, -1);\n}", "    my $ret = \"\";\n    while ($x\
    \ > 0) {\n        $ret = ($x % $base) . $ret;\n        $x = int($x / $base);\n\
    \    }\n    return $ret;\n}", "    my $div = int($x / $base);\n    my $mod = $x\
    \ % $base;\n    return ($div == 0) ? $mod : change_base($div, $base) . $mod;\n\
    }", "    my $reverse_string = \"\";\n    while ($x != 0) {\n        $reverse_string\
    \ .= $x % $base;\n        $x = int($x / $base);\n    }\n    return scalar reverse\
    \ $reverse_string;\n}", "    my $r = $x % $base;\n    my $q = int($x / $base);\n\
    \    if ($q == 0) {\n        return $r;\n    } else {\n        return change_base($q,\
    \ $base) . $r;\n    }\n}", "    my @x = ();\n    while ($x) {\n        unshift\
    \ @x, $x % $base;\n        $x = int($x / $base);\n    }\n    return join '', @x;\n\
    }", "    my $ret = \"\";\n    while ( $x > 0 ) {\n        my $mod = $x % $base;\n\
    \        $ret = $mod . $ret;\n        $x = int($x / $base);\n    }\n    return\
    \ $ret;\n}", "    my @out = ();\n    my $place = 0;\n    while ($x > 0) {\n  \
    \      my $pow = $base ** $place;\n        my $val = int($x / $pow);\n       \
    \ if ($val > 0) {\n            push @out, $val;\n            $x -= $val * $pow;\n\
    \        }\n        $place++;\n    }\n    return join(\"\", @out);\n}", "    die\
    \ \"$x can't be converted to base $base\" if $x >= $base;\n    my $result = '';\n\
    \    while ($x) {\n        $result = ($x % $base) . $result;\n        $x = int($x\
    \ / $base);\n    }\n    return $result;\n}", "    my @digits = ();\n    my $quotient\
    \ = $x;\n    do {\n        my $rest = $quotient % $base;\n        push @digits,\
    \ $rest;\n        $quotient = int($quotient / $base);\n    } while ($quotient\
    \ > 0);\n    @digits = reverse @digits;\n    my $result = join('', @digits);\n\
    \    return $result;\n}", "    my @numbers = (0 .. $base - 1);\n    my $str =\
    \ \"\";\n    while ($x > 0) {\n        $str = $numbers[$x % $base] . $str;\n \
    \       $x = int($x / $base);\n    }\n    return $str;\n}", "    if ($x < $base)\
    \ {\n        return $x;\n    } else {\n        return change_base(int($x / $base),\
    \ $base) . ($x % $base);\n    }\n}", "    my $s = \"\";\n    while ($x > 0) {\n\
    \        $s = ($x % $base) . $s;\n        $x = int($x / $base);\n    }\n    return\
    \ $s;\n}", "    my $str = \"\";\n    while ($x > 0) {\n        $str = ($x % $base)\
    \ . $str;\n        $x = int($x / $base);\n    }\n    return $str;\n}", "    my\
    \ @stack;\n    push @stack, ($x % $base);\n    $x = int($x / $base);\n    while($x)\
    \ {\n        push @stack, ($x % $base);\n        $x = int($x / $base);\n    }\n\
    \    return join(\"\", reverse @stack);\n}", "    my $r = \"\";\n    my $q = $x;\n\
    \    while ($q > 0) {\n        $r = ($q % $base) . $r;\n        $q = int($q /\
    \ $base);\n    }\n    return $r;\n}", "    my $tmp;\n    my $result = \"\";\n\
    \    do {\n        $tmp = $x % $base;\n        $result = $tmp . $result;\n   \
    \     $x = int($x / $base);\n    } while ($x != 0);\n    return $result;\n}",
  "    my $ret = '';\n    while ($x) {\n        $ret = ($x % $base) . $ret;\n    \
    \    $x = int($x / $base);\n    }\n    return $ret;\n}", "    my $res = '';\n\
    \    while ($x > 0) {\n        $res = ($x % $base) . $res;\n        $x = int($x\
    \ / $base);\n    }\n    return $res;\n}", "    my $x_copy = $x;\n    my $ret =\
    \ \"\";\n    while ($x_copy > 0) {\n        $ret = ($x_copy % $base) . $ret;\n\
    \        $x_copy = int($x_copy / $base);\n    }\n    return $ret;\n}", "    my\
    \ $y = \"\";\n    my $remainder;\n    my $newdigit;\n    while($x > 0) {\n   \
    \     $remainder = $x % $base;\n        $newdigit = $remainder;\n        $y =\
    \ $y . $newdigit;\n        $x = ($x - $remainder) / $base;\n    }\n    return\
    \ scalar reverse $y;\n}", "    my $remainder = 0;\n    my $result = \"\";\n  \
    \  while($x > 0) {\n        $remainder = $x % $base;\n        $x = int($x / $base);\n\
    \        $result = $remainder . $result;\n    }\n    return $result;\n}", "  \
    \  my $result = \"\";\n    while ($x > 0) {\n        $result = ($x % $base) .\
    \ $result;\n        $x = int($x / $base);\n    }\n    return $result;\n}", " \
    \   my $value = $x;\n    my $quotient = $x;\n    my $remainder = 0;\n    my $result\
    \ = \"\";\n    while ($quotient > 0) {\n        $remainder = $quotient % $base;\n\
    \        $quotient = int($quotient / $base);\n        $result = \"$remainder$result\"\
    ;\n    }\n    return $result;\n}", "    my $res = \"\";\n    do {\n        $res\
    \ = ($x % $base) . $res;\n        $x = int ($x / $base);\n    } while ($x > 0);\n\
    \    return $res;\n}", "    my $ret = \"\";\n    while ($x >= $base) {\n     \
    \   $ret = ($x % $base) . $ret;\n        $x = int($x / $base);\n    }\n    return\
    \ $x . $ret;\n}", "    # a stack where digits are pushed:\n    my @digits;\n \
    \   # keep dividing the number by base and pushing digits\n    # until x becomes\
    \ 0:\n    do {\n        push @digits, $x % $base;\n        $x = int($x / $base);\n\
    \    } while ($x != 0);\n    # reverse and join digits:\n    return join '', reverse\
    \ @digits;\n}", "    return _change_base($x, $base, '');\n}", "    my @result;\n\
    \    while($x > 0) {\n        push @result, $x % $base;\n        $x = int($x /\
    \ $base);\n    }\n    return join(\"\", reverse @result);\n}", "    my $ret =\
    \ '';\n    while ($x > 0) {\n        $ret = ($x % $base) . $ret;\n        $x =\
    \ int($x / $base);\n    }\n    return $ret;\n}", "    my $result = \"\";\n   \
    \ while ($x) {\n        my $remainder = $x % $base;\n        $result = $remainder\
    \ . $result;\n        $x = ($x - $remainder) / $base;\n    }\n    return $result;\n\
    }", "    my @res;\n    while ($x > 0) {\n        push @res, $x % $base;\n    \
    \    $x = int($x / $base);\n    }\n    return join('', reverse @res);\n}", " \
    \   my $result = \"\";\n    while ($x > 0) {\n        $result = $x % $base . $result;\n\
    \        $x = int($x / $base);\n    }\n    return $result;\n}", "    my($q, $r,\
    \ $output);\n    return \"0\" if $x == 0;\n    $output = \"\";\n    while ($x\
    \ > 0) {\n        ($q, $r) = divmod($x, $base);\n        $output = \"$r$output\"\
    ;\n        $x = $q;\n    }\n    return $output;\n}", "    my $str = \"\";\n  \
    \  while ($x > 0) {\n        $str = ($x % $base) . $str;\n        $x = int($x\
    \ / $base);\n    }\n    return $str;\n}", "    my @converted;\n    while($x >\
    \ 0) {\n        push @converted, $x % $base;\n        $x = int($x / $base);\n\
    \    }\n    return join '', reverse @converted;\n}", "    my @l;\n    my $string;\n\
    \    # make sure base is smaller than 10.\n    # check $base\n    # your code\
    \ starts here.\n    # get remainders from x in each round of division,\n    #\
    \ and push them to the list.\n    # finally, join the remainders with empty string\n\
    \    # to get a string representation of $x with the base.\n    # your code ends\
    \ here.\n    return $string;\n}", "    $x = Math::BigInt->new($x);\n    my $res\
    \ = $x->as_hex;\n    $res =~ s/^0x(.*)/$1/;\n    my @base_map = ('0'..'9', 'a'..'z');\n\
    \    my $res2 = '';\n    for my $char (split(//, $res)) {\n        my $x = hex($char);\n\
    \        my $rest = '';\n        while ($x > 0) {\n            my $b = $x % $base;\n\
    \            $x = int($x / $base);\n            $rest = $base_map[$b] . $rest;\n\
    \        }\n        $res2 .= $rest;\n    }\n    return $res2;\n}", "    my $s\
    \ = \"\";\n    while ($x > 0) {\n        $s = $x % $base . $s;\n        $x = int($x\
    \ / $base);\n    }\n    return $s;\n}", "    return \"0\" if ($x == 0);\n    my\
    \ $y = $x;\n    my $result = \"\";\n    while ($y != 0) {\n        $result = ($y\
    \ % $base) . $result;\n        $y = int($y / $base);\n    }\n    return $result;\n\
    }", "    my($r, $q);\n    my($output);", "    my($ret) = \"\";\n    while ($x\
    \ >= $base) {\n        $ret = ($x % $base) . $ret;\n        $x = int($x / $base);\n\
    \    }\n    $ret = $x . $ret;\n    return $ret;\n}", "    my $ans = '';\n    while\
    \ ($x >= $base) {\n        $ans = ($x % $base) . $ans;\n        $x = int($x /\
    \ $base);\n    }\n    $ans = $x . $ans;\n    return $ans;\n}", "    my $num =\
    \ '';\n    while ($x > 0) {\n        my $r = $x % $base;\n        $num = $r .\
    \ $num;\n        $x = ($x - $r) / $base;\n    }\n    return $num;\n}", "    my\
    \ $result = '';\n    my $quotient = $x;\n    my $remainder;\n    while ($quotient\
    \ > 0) {\n        $remainder = $quotient % $base;\n        $quotient = int($quotient\
    \ / $base);\n        $result = $remainder . $result;\n    }\n    $result;\n}",
  "    my $r = \"\";\n    while ($x > 0) {\n        $r = $x % $base . $r;\n      \
    \  $x = int($x / $base);\n    }\n    return $r;\n}", "    return \"\" if $x ==\
    \ 0;\n    return change_base($x / $base, $base) . ($x % $base);\n}", "    my $y\
    \ = '';\n    while ($x > 0) {\n        $y = ($x % $base) . $y;\n        $x = int($x\
    \ / $base);\n    }\n    return $y;\n}", "    my($ans);\n    my($quotient, $remainder);\n\
    \    my($reversed_ans) = \"\";\n    while($x >= $base) {\n        $quotient =\
    \ int($x / $base);\n        $remainder = $x % $base;\n        $reversed_ans .=\
    \ $remainder;\n        $x = $quotient;\n    }\n    $reversed_ans .= $x;\n    $ans\
    \ = reverse($reversed_ans);\n    return $ans;\n}", "    my $res = \"\";\n    while\
    \ ($x > 0) {\n        $res = $x % $base . $res;\n        $x = int($x / $base);\n\
    \    }\n    return $res;\n}", "    my $str = \"\";\n    while ($x > 0) {\n   \
    \     $str = $x % $base . $str;\n        $x = int($x / $base);\n    }\n    return\
    \ $str;\n}", "    my $str = \"\";\n    while ($x >= $base) {\n        $str = ($x\
    \ % $base) . $str;\n        $x = int($x / $base);\n    }\n    return $x . $str;\n\
    }", "    my $result = \"\";\n    while ($x > 0) {\n        my $remainder = $x\
    \ % $base;\n        $result = \"$remainder$result\";\n        $x = int($x / $base);\n\
    \    }\n    return $result;\n}", "    my $result = '';\n    my @n = ();\n    while\
    \ ($x) {\n        push @n, $x % $base;\n        $x = int($x / $base);\n    }\n\
    \    $result = join(\"\", reverse @n);\n    return $result;\n}", "    my @results;\n\
    \    my $n;\n    while($x > 0) {\n        $n = $x % $base;\n        $x = $x /\
    \ $base;\n        unshift @results, $n;\n    }\n    return join('', @results);\n\
    }", "    return undef if($x < 0 || $base < 2 || $base > 9);\n    my $result =\
    \ '';\n    while ($x > 0) {\n        $result = ($x % $base) . $result;\n     \
    \   $x = int ($x / $base);\n    }\n    return $result;\n}", "    if ($x == 0)\
    \ {\n        return \"0\";\n    }\n    my @d;\n    while ($x > 0) {\n        my\
    \ $d = $x % $base;\n        push @d, $d;\n        $x = int($x / $base);\n    }\n\
    \    @d = reverse @d;\n    return join(\"\", @d);\n}", "    my $result = '';\n\
    \    while ($x > 0) {\n        my $r = $x % $base;\n        $result = $r . $result;\n\
    \        $x = ($x - $r) / $base;\n    }\n    return $result;\n}", "    my $out;\n\
    \    while($x >= $base) {\n        $out = $x % $base . $out;\n        $x = int($x\
    \ / $base);\n    }\n    $out = $x . $out;\n    return $out;\n}", "    my $result\
    \ = '';\n    while ($x > 0) {\n        my $rem = $x % $base;\n        $result\
    \ = \"$rem$result\";\n        $x = ($x - $rem) / $base;\n    }\n    return $result;\n\
    }", "    my @ret = ();\n    until ($x == 0) {\n        unshift @ret, $x % $base;\n\
    \        $x = int($x / $base);\n    }\n    return join('', @ret);\n}", "    my\
    \ @digit;\n    while ($x > 0) {\n        my $r = $x % $base;\n        push @digit,\
    \ $r;\n        $x = ($x - $r) / $base;\n    }\n    return join '', reverse @digit;\n\
    }", "    my($r, $q);\n    my $res = \"\";\n    while($x != 0) {\n        $q =\
    \ int($x / $base);\n        $r = $x % $base;\n        $res = $r . $res;\n    \
    \    $x = $q;\n    }\n    return $res;\n}", "    my $result = \"\";\n    while\
    \ ($x > 0) {\n        my $mod = $x % $base;\n        $result = $mod . $result;\n\
    \        $x = int($x / $base);\n    }\n    return $result;\n}", "    my $r;\n\
    \    while ($x >= $base) {\n        $r = ($x % $base) . $r;\n        $x = int($x\
    \ / $base);\n    }\n    $r = $x . $r;\n    return $r;\n}", "    my $res = '';\n\
    \    while ($x >= $base) {\n        $res = ($x % $base) . $res;\n        $x =\
    \ int($x / $base);\n    }\n    $res = $x . $res;\n    return $res;\n}", "    my\
    \ $str = \"\";\n    while($x > 0) {\n        $str = $x % $base . $str;\n     \
    \   $x = int($x / $base);\n    }\n    return $str;\n}", "    my $s = \"\";\n \
    \   while ($x) {\n        $s = ($x % $base) . $s;\n        $x = int($x / $base);\n\
    \    }\n    return $s;\n}", "    my $out = '';\n    while ($x) {\n        $out\
    \ = $x % $base . $out;\n        $x = int($x / $base);\n    }\n    return $out;\n\
    }", "    my $out = '';\n    my $n;\n    while ($x > 0) {\n        $n = $x % $base;\n\
    \        $out = \"$n$out\";\n        $x = $x / $base;\n    }\n    return $out;\n\
    }", "    my @array = ();\n    my $remainder = 0;\n    my $quotient = $x;\n   \
    \ my $array_index = 0;\n    # store remainders by the reverse order.\n    while\
    \ (1) {\n        $remainder = $quotient % $base;\n        $quotient = int($quotient\
    \ / $base);\n        $array[$array_index] = $remainder;\n        $array_index++;\n\
    \        last if ($quotient <= 0);\n    }\n    my $return_string = \"\";\n   \
    \ foreach my $item (@array) {\n        $return_string = \"$return_string$item\"\
    ;\n    }\n    return $return_string;\n}", "    my($n, $b, $digits, $d);\n    $digits\
    \ = '';\n    $n = $x;\n    $b = $base;\n    while($n > 0) {\n        $d = $n %\
    \ $b;\n        $digits = $d . $digits;\n        $n = int($n / $b);\n    }\n  \
    \  return $digits;\n}", "    my $res = \"\";\n    while ($x > 0) {\n        $res\
    \ = ($x % $base) . $res;\n        $x = int($x / $base);\n    }\n    return $res;\n\
    }", "    my $orig_x = $x;\n    my $digits = \"\";\n    my $div;\n    if ($x <\
    \ $base) {\n        $digits = $x;\n    } else {\n        while ($x >= $base) {\n\
    \            $div = $x / $base;\n            $digits = ($x % $base) . $digits;\n\
    \            $x = $div;\n        }\n        $digits = int($x) . $digits;\n   \
    \ }\n    return $digits;\n}", "    my @result;\n    my $q = $x;\n    while ($q\
    \ >= $base) {\n        my $r = $q % $base;\n        push @result, $r;\n      \
    \  $q = int($q / $base);\n    }\n    push @result, $q;\n    return join(\"\",\
    \ @result);\n}", "    my $result = '';\n    while ($x > 0) {\n        $result\
    \ = ($x % $base) . $result;\n        $x = int($x / $base);\n    }\n    return\
    \ $result;\n}", "    my($result) = \"\";\n    if($x == 0) {\n        return \"\
    0\";\n    }\n    while($x > 0) {\n        $result = ($x % $base) . $result;\n\
    \        $x = int($x / $base);\n    }\n    return $result;\n}", "    return ''\
    \ if $x == 0;\n    my $str = '';\n    my $num = 0;\n    my $i = 0;\n    my $y\
    \ = 0;\n    while($x != 0) {\n        my $num = $x % $base;\n        $x = int($x\
    \ / $base);\n        if($num == 1) {\n            $y += $base ** $i;\n       \
    \ }\n        $i++;\n    }\n    return \"$y\";\n}", "    my @digits = ();\n   \
    \ while ($x > 0) {\n        push @digits, $x % $base;\n        $x = int($x / $base);\n\
    \    }\n    return join('', @digits);\n}", "    my $b1 = int($x / $base);\n  \
    \  my $b2 = $x % $base;\n    if($b1 == 0) {\n        return $b2;\n    } else {\n\
    \        return change_base($b1, $base) . $b2;\n    }\n}", "    if($x == 0) {\n\
    \        return '0';\n    }\n    my @ret = ();\n    while($x > 0) {\n        push\
    \ @ret, ($x % $base);\n        $x = int($x / $base);\n    }\n    return join('',\
    \ reverse @ret);\n}", "    my @number = (0..9, 'a'..'z')[0..$base-1];\n    my\
    \ $output = '';\n    while ($x) {\n        $output = $number[$x % $base] . $output;\n\
    \        $x = int($x / $base);\n    }\n    return $output;\n}", "    die \"x is\
    \ negative\" if $x < 0;\n    die \"base is not valid\" if $base < 2;\n    my $result\
    \ = \"\";\n    while ($x > 0) {\n        $result = ($x % $base) . $result;\n \
    \       $x = int($x / $base);\n    }\n    return $result;\n}", "    my $str =\
    \ \"\";\n    while (1) {\n        $str = \"$str\" . ($x % $base);\n        $x\
    \ = int($x / $base);\n        if ($x == 0) { last; }\n    }\n    return scalar\
    \ reverse $str;\n}", "    my $r;\n    my $y = $x;\n    while ($y) {\n        $r\
    \ = ($y % $base) . $r;\n        $y = int($y / $base);\n    }\n    return $r;\n\
    }", "    return \"1\" if $x == 1;\n    return \"0\" if $x == 0;\n    return change_base($x\
    \ / $base, $base) . ($x % $base);\n}", "    my $s = \"\";\n    while ($x) {\n\
    \        $s =  ($x % $base) . $s;\n        $x = int($x / $base);\n    }\n    return\
    \ $s;\n}", "    my $result = '';\n    if ($x > 0) {\n        my $i = int($x /\
    \ $base);\n        $result = change_base($i, $base) . $x % $base;\n    }\n   \
    \ return $result;\n}", "    my @output = ();\n    my $divisor = $base;\n    my\
    \ $remainder = 0;\n    my $quotient = 0;\n    my $output = \"\";\n    if($x <\
    \ $base) {\n        return \"$x\";\n    }\n    else {\n        while($x > 0) {\n\
    \            $remainder = $x % $base;\n            $x = int($x / $base);\n   \
    \         push(@output, $remainder);\n        }\n        while(@output > 0) {\n\
    \            $output = $output . pop(@output);\n        }\n        return $output;\n\
    \    }\n}", "    my $result = '';\n    while ($x > 0) {\n        my $digit = $x\
    \ % $base;\n        $result = $digit . $result;\n        $x = ($x - $digit) /\
    \ $base;\n    }\n    return $result;\n}", "    if ($x < $base) {\n        return\
    \ $x;\n    }\n    return change_base(int($x / $base), $base) . $x % $base;\n}",
  "    my @ret;\n    while ($x >= $base) {\n        push @ret, $x % $base;\n     \
    \   $x = int($x / $base);\n    }\n    push @ret, $x;\n    return reverse @ret;\n\
    }", "    my $result = '';\n    while ($x > 0) {\n        $result = ($x % $base)\
    \ . $result;\n        $x = int($x / $base);\n    }\n    return $result;\n}", " \
    \   my @num2 = ();\n    push @num2, $x % $base;\n    while($x = int($x / $base))\
    \ {\n        push @num2, $x % $base;\n    }\n    return join '', reverse @num2;\n\
    }", "    my($digits) = $base - 1;\n    my($res) = \"\";\n    for (my($i) = 0;\
    \ $i < $digits; $i ++) {\n        $res = (($x >> $i) & 1) . $res;\n    }\n   \
    \ return $res;\n}", "    my $y = '';\n    while ($x) {\n        $y = ($x % $base)\
    \ . $y;\n        $x = int($x / $base);\n    }\n    return $y;\n}", "    if ($x\
    \ < $base) {\n        return $x;\n    }\n    my $ret = $x % $base;\n    return\
    \ change_base(int($x / $base), $base) . $ret;\n}", "    my $ans = \"\";\n    while($x\
    \ > 0) {\n        $ans = ($x % $base) . $ans;\n        $x = int $x / $base;\n\
    \    }\n    return $ans;\n}", "    my $num = '';\n    my $val = int($x / $base);\n\
    \    my $rem = $x % $base;\n    if ($val > 0) {\n        $num = change_base($val,\
    \ $base);\n    }\n    $num .= $rem;\n    return $num;\n}", "    my $str;\n   \
    \ while ($x > 0) {\n        my $r = $x % $base;\n        $str = $r . $str;\n \
    \       $x = int($x / $base);\n    }\n    return $str;\n}", "    my $ans = '';\n\
    \    while($x > 0) {\n        $ans = ($x % $base) . $ans;\n        $x = int( $x\
    \ / $base );\n    }\n    return $ans;\n}", "    my($s);\n    while ($x) {\n  \
    \      $s = ($x % $base) . $s;\n        $x = int($x / $base);\n    }\n    return\
    \ $s;\n}", "    my $result = \"\";\n    while ($x > 0) {\n        $result = ($x\
    \ % $base) . $result;\n        $x = int($x / $base);\n    }\n    return $result;\n\
    }", "    my $result = \"\";\n    while ($x) {\n        $result = ($x % $base)\
    \ . $result;\n        $x = int($x / $base);\n    }\n    return $result;\n}", " \
    \   my $len = int(log($x)/log($base)) + 1;\n    my $output = '';\n    while ($len--)\
    \ {\n        $output .= $x % $base;\n        $x = int($x / $base);\n    }\n  \
    \  return $output;\n}", "    my $new_num = \"\";\n    while($x > 0) {\n      \
    \  $new_num = ($x % $base) . $new_num;\n        $x = int($x / $base);\n    }\n\
    \    return $new_num;\n}", "    my $s = \"\";\n    while($x > 0) {\n        $s\
    \ = ($x % $base).$s;\n        $x = floor($x / $base);\n    }\n    return $s;\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
