name: HumanEval_128_prod_signs
language: pl
prompt: "# You are given an array arr of integers and you need to return\n# sum of\
  \ magnitudes of integers multiplied by product of all signs\n# of each number in\
  \ the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n#\
  \ Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n# 0\n\
  # >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
  \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n \
  \       }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1,\
  \ 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
  \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $ans = 1;\n    for my $num (@$arr) {\n        if ($num == 0)\
    \ {\n            return 0;\n        } elsif ($num > 0) {\n            $ans *=\
    \ 1;\n        } else {\n            $ans *= -1;\n        }\n    }\n    return\
    \ undef if !$ans;\n    return sum(map { abs($_) } @$arr) * $ans;\n}", "    return\
    \ undef unless(scalar(@$arr));\n    my $signs = 1;\n    my $sum = 0;\n    for\
    \ my $n (@$arr) {\n        $signs *= ($n == 0 ? 0 : ($n > 0 ? 1 : -1));\n    \
    \    $sum += abs($n);\n    }\n    return $signs * $sum;\n}", "    return undef\
    \ unless(@$arr);\n    my $prod = 1;\n    my $sum = 0;\n    foreach my $elem (@$arr)\
    \ {\n        $prod *= ($elem > 0 ? 1 : ($elem < 0 ? -1 : 0));\n        $sum +=\
    \ $elem;\n    }\n    return $prod * $sum;\n}", "    return unless defined $arr\
    \ && ref $arr eq 'ARRAY';\n    my $prod = 1;\n    my $sum = 0;\n    for (@$arr)\
    \ {\n        next unless defined;\n        if ($_ > 0) {\n            $prod *=\
    \ 1;\n            $sum += $_;\n        } elsif ($_ < 0) {\n            $prod *=\
    \ -1;\n            $sum += -$_;\n        } else {\n            $prod *= 0;\n \
    \       }\n    }\n    return $prod*$sum;\n}", "    return undef unless $arr;\n\
    \    my $sign_prod = 1;\n    my $mag_sum = 0;\n    foreach my $int (@$arr) {\n\
    \        $sign_prod *= sign($int);\n        $mag_sum += abs($int);\n    }\n  \
    \  return $sign_prod * $mag_sum;\n}", "    return undef unless defined $arr;\n\
    \    return 0 if ref $arr ne 'ARRAY' or @$arr == 0;\n    my($sign, $prod) = (1,\
    \ 1);\n    for my $n (@$arr) {\n        my $m = abs $n;\n        if ($m > 0) {\n\
    \            $sign = $sign * ($n / $m);\n            $prod *= $m;\n        } else\
    \ {\n            $prod = 0;\n            last;\n        }\n    }\n    return $prod\
    \ * $sign;\n}", "    my $prod = 1;\n    my $sum = 0;\n    return undef unless\
    \ scalar @$arr;\n    foreach my $num (@$arr) {\n        if ($num > 0) {\n    \
    \        $prod *= 1;\n            $sum += $num;\n        } elsif ($num < 0) {\n\
    \            $prod *= -1;\n            $sum += $num * -1;\n        }\n    }\n\
    \    return $sum * $prod;\n}", "    return undef unless @$arr;\n    my $signs\
    \ = [map {$_ <=> 0} @$arr];\n    my $mag = [map {abs($_)} @$arr];\n    return\
    \ product($signs) * sum($mag);\n}", "    my $i = 0;\n    my $prod_signs = 1;\n\
    \    my $result = 0;\n    while ( $i < @$arr ) {\n        if ( $arr->[$i] == 0\
    \ ) {\n            $prod_signs = 0;\n        } elsif ( $arr->[$i] < 0 ) {\n  \
    \          $prod_signs *= -1;\n        }\n        $result += abs( $arr->[$i] );\n\
    \        $i++;\n    }\n    return undef if $result == 0;\n    return $result *\
    \ $prod_signs;\n}", "    my($signs_prod, $abs_sum) = 1, 0;\n    # Fill-in the\
    \ code here!\n    return undef if (!defined($arr));\n    return 0 if (scalar(@$arr)\
    \ == 0);\n    $signs_prod = 1;\n    $abs_sum = 0;\n    foreach my $el (@$arr)\
    \ {\n        if ($el == 0) {\n            return 0;\n        }\n        $signs_prod\
    \ *= ($el > 0) ? 1 : -1;\n        $abs_sum += abs($el);\n    }\n    return $signs_prod\
    \ * $abs_sum;\n}", "    return unless @$arr;\n    my $prod = 1;\n    my $sum =\
    \ 0;\n    for my $n (@$arr) {\n        if ($n > 0) {\n            $prod *= 1;\n\
    \            $sum += $n;\n        } elsif ($n < 0) {\n            $prod *= -1;\n\
    \            $sum += -$n;\n        } else {\n            $prod *= 0;\n       \
    \ }\n    }\n    return $sum * $prod;\n}", "    return if !@$arr;\n    my $prod\
    \ = 1;\n    my $sum = 0;\n    for my $n (@$arr) {\n        $prod *= $n >= 0 ?\
    \ 1 : -1;\n        $sum += abs($n);\n    }\n    return $sum * $prod;\n}", "  \
    \  return undef unless @$arr;\n    my $prod = reduce { $a * $b } map { $_ <=>\
    \ 0 } @$arr;\n    return reduce { $a + abs($b) } 0, @$arr * $prod;\n}", "    return\
    \ undef unless defined $arr;\n    return 0 if scalar @$arr == 0;\n    my $signs\
    \ = 1;\n    my $magnitudes = 0;\n    foreach my $el (@$arr) {\n        $signs\
    \ *= $el == 0 ? 0 : $el < 0 ? -1 : 1;\n        $magnitudes += abs($el);\n    }\n\
    \    return $signs * $magnitudes;\n}", "    # ...\n}", "    my($prod) = 1;\n \
    \   my($sum) = 0;\n    my($idx) = 0;\n    my($sign) = 0;\n    foreach my $n (@$arr)\
    \ {\n        if ($n == 0) {\n            $sign = 0;\n        } elsif ($n > 0)\
    \ {\n            $sign = 1;\n        } else {\n            $sign = -1;\n     \
    \   }\n        $prod *= $sign;\n        $sum += abs($n);\n    }\n    if ($prod\
    \ == 0) {\n        return 0;\n    }\n    return $sum * $prod;\n}", "    my $prod\
    \ = 1;\n    my $sum = 0;\n    foreach (@$arr) {\n        if ($_ > 0) {\n     \
    \       $prod *= 1;\n            $sum += $_;\n        } elsif ($_ < 0) {\n   \
    \         $prod *= -1;\n            $sum += -$_;\n        }\n    }\n    return\
    \ undef if $sum == 0;\n    return $prod * $sum;\n}", "    my($total, $prod);\n\
    \    for my $num (@$arr) {\n        if ($num < 0) {\n            $prod = defined($prod)\
    \ ? $prod * -1 : -1;\n        } elsif ($num > 0) {\n            $prod = defined($prod)\
    \ ? $prod * 1 : 1;\n        } else {\n            $prod = 0;\n        }\n    \
    \    $total += abs($num);\n    }\n    return defined($prod) ? $total * $prod :\
    \ undef;\n}", "    my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr)\
    \ {\n        my $sign = $num == 0 ? 0 : $num / abs($num);\n        $prod *= $sign;\n\
    \        $sum += abs($num);\n    }\n    $prod * $sum;\n}", "    my $prod_signs\
    \ = 1;\n    my $sum_magnitudes = 0;\n    foreach(@$arr) {\n        if ($_ > 0)\
    \ {\n            $prod_signs *= 1;\n            $sum_magnitudes += $_;\n     \
    \   } elsif ($_ < 0) {\n            $prod_signs *= -1;\n            $sum_magnitudes\
    \ += -$_;\n        } else {\n            $prod_signs *= 0;\n        }\n    }\n\
    \    return $prod_signs * $sum_magnitudes;\n}", "    return undef unless(@$arr);\n\
    \    my $prod = 1;\n    my $sum = 0;\n    for my $num (@$arr) {\n        if($num\
    \ == 0) {\n            $prod = 0;\n            last;\n        }\n        if($num\
    \ < 0) {\n            $prod *= -1;\n        }\n        $sum += abs($num);\n  \
    \  }\n    return $sum * $prod;\n}", "    my $prod = 1;\n    my $sum = 0;\n   \
    \ if (ref($arr) eq 'ARRAY') {\n        foreach (@$arr) {\n            if ($_ ==\
    \ 0) {\n                $prod = 0;\n                last;\n            }\n   \
    \         elsif ($_ > 0) {\n                $sum += $_;\n            }\n     \
    \       else {\n                $sum -= $_;\n                $prod *= -1;\n  \
    \          }\n        }\n        return $prod * $sum;\n    }\n    else {\n   \
    \     return undef;\n    }\n}", "    return undef unless @$arr;\n    return 0\
    \ unless grep { $_ } @$arr;\n    my $magn = join ' * ', map { abs $_ } @$arr;\n\
    \    my $sign = join ' * ', map { $_ <=> 0 } @$arr;\n    my $res = `echo $magn\
    \ | bc` * `echo $sign | bc`;\n    chomp $res;\n    return $res;\n}", "    my $prod\
    \ = undef;\n    my $sum = 0;\n    foreach(@$arr) {\n        $prod *= ($_ > 0 ?\
    \ 1 : ($_ < 0 ? -1 : 0));\n        $sum += abs($_);\n    }\n    $prod ? $prod\
    \ * $sum : undef;\n}", "    if (!@$arr) {\n        return undef;\n    }", "  \
    \  return undef unless @$arr;\n    my($prod, $sum) = (1, 0);\n    for (@$arr)\
    \ {\n        $prod *= $_ ? ($_ > 0 ? 1 : -1) : 0;\n        $sum += abs($_);\n\
    \    }\n    return $prod * $sum;\n}", "    return undef unless scalar @$arr;\n\
    \    my $prod = 1;\n    my $sum = 0;\n    for (@$arr) {\n        next if $_ ==\
    \ 0;\n        $prod *= $_ <=> 0;\n        $sum += abs $_;\n    }\n    return $sum\
    \ * $prod;\n}", "    if(!defined($arr) || !@$arr) {\n        return undef;\n \
    \   }", "    return undef unless @$arr;\n    my($sign_prod, $mag_sum) = (1, 0);\n\
    \    for my $i (@$arr) {\n        $sign_prod *= ($i <=> 0);\n        $mag_sum\
    \ += abs($i);\n    }\n    return $sign_prod * $mag_sum;\n}", "    # Replace the\
    \ map() with a foreach loop.\n    # Replace the reduce() with a for loop that\
    \ sums the magnitudes.\n    my $sum = 0;\n    my $prod = 1;\n    for my $num (@$arr)\
    \ {\n        $sum += abs($num);\n        $prod *= $num >= 0 ? 1 : -1;\n    }\n\
    \    return $sum * $prod;\n}", "    my $product = 1;\n    my $sum     = 0;\n \
    \   if (scalar @$arr != 0) {\n        for my $i (@$arr) {\n            if ($i\
    \ < 0) {\n                $product *= -1;\n            }\n            elsif ($i\
    \ == 0) {\n                $product = 0;\n            }\n            $sum += abs($i);\n\
    \        }\n        return $sum * $product;\n    }\n    else {\n        return\
    \ undef;\n    }\n}", "    return unless defined $arr;\n    return unless $arr\
    \ && @$arr;\n    my $mul = 1;\n    my $abs = 0;\n    for my $n (@$arr) {\n   \
    \     $mul *= $n <=> 0;\n        $abs += abs $n;\n    }\n    return $mul * $abs;\n\
    }", "    my $ret = undef;\n    my $signs = 1;\n    my $magnitudes = 0;\n    foreach\
    \ my $i (@$arr) {\n        if ($i == 0) {\n            $signs = 0;\n         \
    \   last;\n        }\n        elsif ($i > 0) {\n            $signs *= 1;\n   \
    \     }\n        else {\n            $signs *= -1;\n        }\n        $magnitudes\
    \ += abs($i);\n    }\n    $ret = $signs * $magnitudes;\n    return $ret;\n}",
  "    my $product = 1;\n    my $sum = 0;\n    my $sign;\n    if (@$arr == 0) {\n\
    \        return undef;\n    }\n    foreach my $el (@$arr) {\n        if ($el >\
    \ 0) {\n            $sign = 1;\n        } elsif ($el < 0) {\n            $sign\
    \ = -1;\n        } else {\n            $sign = 0;\n        }\n        $product\
    \ *= $sign;\n        $sum += abs($el);\n    }\n    return $sum * $product;\n}",
  "    my $ret;\n    return undef unless defined $arr;\n    return $ret unless @$arr;\n\
    \    my $n = @$arr;\n    $ret = 1;\n    my $sign = $ret;\n    my $sum = 0;\n \
    \   foreach my $v (@$arr) {\n        $sum += abs($v);\n        if($v < 0) {\n\
    \            $sign *= -1;\n        }\n        elsif($v > 0) {\n            $sign\
    \ *= 1;\n        }\n        else {\n            $sign = 0;\n        }\n    }\n\
    \    $ret = $sum * $sign;\n    return $ret;\n}", "    my $sum = 0;\n    my $prod\
    \ = 1;\n    foreach (@$arr) {\n        if ($_ > 0) {\n            $sum += $_;\n\
    \            $prod *= 1;\n        } elsif ($_ < 0) {\n            $sum += -$_;\n\
    \            $prod *= -1;\n        } else {\n            $prod *= 0;\n       \
    \ }\n    }\n    if ($prod == 0) {\n        return 0;\n    } else {\n        return\
    \ $sum * $prod;\n    }\n}", "    return undef unless @$arr;\n    my($result) =\
    \ 1;\n    foreach my $x (@$arr) {\n        my($sign) = $x > 0 ? 1 : $x < 0 ? -1\
    \ : 0;\n        $result *= $sign;\n    }\n    return $result * sum(map { abs($_)\
    \ } @$arr);\n}", "    my $res = 1;\n    my $sum = 0;\n    foreach my $x (@$arr)\
    \ {\n\t$res *= ($x <=> 0);\n\t$sum += abs($x);\n    }\n    return unless defined\
    \ $res;\n    return $res * $sum;\n}", "    my $result = 1;\n    my $sum = 0;\n\
    \    if(defined($arr)) {\n        if(@$arr) {\n            foreach my $num (@$arr)\
    \ {\n                $result *= ($num>0) - ($num<0);\n                $sum +=\
    \ abs($num);\n            }\n            return $result * $sum;\n        }\n \
    \   }\n    return undef;\n}", "    return unless defined $arr;\n    my $s = 1;\n\
    \    my $p = 1;\n    for my $i (@$arr) {\n        next if $i == 0;\n        $s\
    \ *= $i <=> 0;\n        $p *= abs $i;\n    }\n    return $s * $p;\n}", "    my\
    \ $sum = 0;\n    my $sign = 1;\n    foreach my $number (@$arr) {\n        if ($number\
    \ == 0) {\n            return 0;\n        }\n        if ($number < 0) {\n    \
    \        $sign *= -1;\n        }\n        $sum += abs($number);\n    }\n    return\
    \ $sum * $sign;\n}", "    return undef unless @$arr;\n    my $prod = 1;\n    for\
    \ (@$arr) {\n        $prod *= $_ ? 1 : 0;\n    }\n    my $sum = 0;\n    for (@$arr)\
    \ {\n        $sum += abs($_);\n    }\n    return $sum * $prod;\n}", "    my $res\
    \ = 1;\n    my $count = 0;\n    foreach my $el (@$arr) {\n        $count++ if\
    \ $el != 0;\n        $res *= ($el <=> 0);\n    }\n    return undef if $count ==\
    \ 0;\n    return $res;\n}", "    return undef unless ( defined $arr );\n    return\
    \ 0 if ( !defined $arr->[0] );\n    my $sign = 1;\n    my $magn = 0;\n    for\
    \ my $val (@$arr) {\n        $magn += abs($val);\n        $sign *= $val unless\
    \ ($val == 0);\n    }\n    return $magn * $sign;\n}", "    return unless @$arr;\n\
    \    my $p = 1;\n    my $s = 0;\n    for my $a (@$arr) {\n        $p *= ($a >\
    \ 0) - ($a < 0);\n        $s += abs($a);\n    }\n    return $p * $s;\n}", "  \
    \  my($result) = 1;\n    my($i) = 0;\n    my($j) = 0;\n    my($prod) = 1;\n  \
    \  while ($i < @$arr) {\n        my($n) = $arr->[$i];\n        if ($n < 0) {\n\
    \            $result -= abs($n);\n            $prod *= -1;\n        } elsif ($n\
    \ > 0) {\n            $result += $n;\n            $prod *= 1;\n        } else\
    \ {\n            $prod *= 0;\n        }\n        $i++;\n    }\n    if ($prod ==\
    \ 0) {\n        return 0;\n    } else {\n        return $result;\n    }\n}", " \
    \   my $product = 1;\n    my $sum = 0;\n    my $is_empty = 1;\n    foreach (@$arr)\
    \ {\n        $is_empty = 0;\n        $product *= 1 if $_ > 0;\n        $product\
    \ *= -1 if $_ < 0;\n        $sum += abs($_);\n    }\n    return $is_empty ? undef\
    \ : $sum * $product;\n}", "    return unless @$arr;\n    my $sum = 0;\n    my\
    \ $prod = 1;\n    foreach my $elem (@$arr) {\n        if ($elem == 0) {\n    \
    \        $prod = 0;\n            next;\n        }\n        $sum += abs($elem);\n\
    \        $prod *= ($elem < 0 ? -1 : 1);\n    }\n    return $sum * $prod;\n}",
  "    return undef unless @$arr;\n    my $signs = 1;\n    my $total = 0;\n    for\
    \ (@$arr) {\n        $signs *= $_ >= 0 ? 1 : -1;\n        $total += abs($_);\n\
    \    }\n    return $total * $signs;\n}", "    return undef unless @$arr;\n   \
    \ my $prod = 1;\n    my $sum = 0;\n    for my $x (@$arr) {\n        $sum += abs($x);\n\
    \        $prod *= (($x > 0) - ($x < 0));\n    }\n    return $sum * $prod;\n}",
  "    return undef unless(defined($arr) && ref($arr) eq 'ARRAY' && scalar(@$arr));\n\
    \    my $res = 1;\n    foreach my $el (@$arr) {\n        $res *= $el >= 0 ? 1\
    \ : -1;\n    }\n    return $res;\n}", "    $arr = [$arr] unless ref $arr eq 'ARRAY';\n\
    \    return undef unless @$arr;\n    my $p = 1;\n    my $s = 0;\n    for (@$arr)\
    \ {\n        if ($_ < 0) {\n            $p *= -1;\n            $s += abs($_);\n\
    \        } elsif ($_ > 0) {\n            $s += $_;\n        }\n    }\n    return\
    \ $s * $p;\n}", "    my($res, $psign, $sign, $num);\n    my($size) = scalar(@$arr);\n\
    \    if($size == 0) {\n        return undef;\n    }\n    for(my $i = 0; $i < $size;\
    \ $i++) {\n        $num = $arr->[$i];\n        if($num == 0) {\n            $res\
    \ = 0;\n            last;\n        }\n        $sign = 1;\n        if($num < 0)\
    \ {\n            $sign = -1;\n        }\n        $psign *= $sign;\n        $res\
    \ += abs($num);\n    }\n    return $res * $psign;\n}", "    my $s=1;\n    my $prod=1;\n\
    \    my $magn=0;\n    foreach(@$arr){\n        if($_==0){\n            $s=0;\n\
    \        }\n        elsif($_>0){\n            $s=1;\n        }\n        else{\n\
    \            $s=-1;\n        }\n        $prod*=$s;\n        $magn+=$_**2;\n  \
    \  }\n    if($prod==0){\n        return 0;\n    }\n    else{\n        return $magn*$prod;\n\
    \    }\n}", "    my $result = 1;\n    my $sums = 0;\n    foreach my $element (@$arr)\
    \ {\n        if ($element == 0) {\n            $result = 0;\n        } elsif ($element\
    \ > 0) {\n            $result = $result * 1;\n            $sums = $sums + $element;\n\
    \        } else {\n            $result = $result * -1;\n            $sums = $sums\
    \ + abs($element);\n        }\n    }\n    if (@$arr == 0) {\n        return;\n\
    \    } else {\n        return $result * $sums;\n    }\n}", "    my $i;\n    my\
    \ $mag_sum = 0;\n    my $prod_signs = 1;\n    my $len = scalar @$arr;\n    return\
    \ unless $len;\n    foreach $i (@$arr) {\n        $mag_sum += abs($i);\n     \
    \   $prod_signs *= 0 if $i == 0;\n        $prod_signs *= -1 if $i < 0;\n    }\n\
    \    return $mag_sum * $prod_signs;\n}", "    return undef unless defined $arr;\n\
    \    my($p_signs, $sum_of_abs) = (1, 0);\n    for my $x (@$arr) {\n        $p_signs\
    \ *= $x <=> 0;\n        $sum_of_abs += abs $x;\n    }\n    return $p_signs * $sum_of_abs;\n\
    }", "    return undef unless $arr;\n    my $result = 1;\n    foreach my $i (@$arr)\
    \ {\n        next if $i == 0;\n        $result *= $i < 0 ? -1 : 1;\n    }\n  \
    \  my $sum = 0;\n    foreach my $i (@$arr) {\n        $sum += abs($i);\n    }\n\
    \    return $sum * $result;\n}", "    my $len = scalar @$arr;\n    return undef\
    \ if $len == 0;\n    my $prod = 1;\n    my $sum = 0;\n    for (my $i = 0; $i <\
    \ $len; $i++) {\n        my $num = $arr->[$i];\n        if ($num < 0) {\n    \
    \        $prod *= -1;\n        } elsif ($num == 0) {\n            $prod = 0;\n\
    \            last;\n        }\n        $sum += abs($num);\n    }\n    return $sum\
    \ * $prod;\n}", "    my @arr = @$arr;\n    my $signs = 1;\n    my $magnitudes\
    \ = 0;\n    return undef if scalar @arr == 0;\n    foreach my $el (@arr) {\n \
    \       my $sign = (($el > 0) - ($el < 0));\n        $signs *= $sign;\n      \
    \  $magnitudes += abs($el);\n    }\n    return $magnitudes * $signs;\n}", "  \
    \  if (scalar(@$arr) == 0) {\n        return undef;\n    }\n    my $sign_product\
    \ = 1;\n    my $sum_magnitudes = 0;\n    foreach my $elem (@$arr) {\n        if\
    \ ($elem > 0) {\n            $sign_product *= 1;\n        } elsif ($elem < 0)\
    \ {\n            $sign_product *= -1;\n        } else {\n            $sign_product\
    \ *= 0;\n        }\n        $sum_magnitudes += abs($elem);\n    }\n    return\
    \ $sum_magnitudes * $sign_product;\n}", "    my $sum = 0;\n    my $signs = 1;\n\
    \    foreach my $num (@$arr) {\n        $sum += abs($num);\n        if ($num >\
    \ 0) {\n            $signs *= 1;\n        } elsif ($num < 0) {\n            $signs\
    \ *= -1;\n        } else {\n            $signs *= 0;\n        }\n    }\n    return\
    \ $sum * $signs;\n}", "    return undef unless @$arr;\n    my @signs = map {$_\
    \ > 0 ? 1 : $_ < 0 ? -1 : 0} @$arr;\n    my $mult = 1;\n    for (@signs) {\n \
    \       $mult *= $_;\n    }\n    my $sum = 0;\n    for (@$arr) {\n        $sum\
    \ += abs($_);\n    }\n    return $sum * $mult;\n}", "    # your code here\n  \
    \  return undef unless scalar @$arr;\n    my $sign = 1;\n    my $prod = 1;\n \
    \   for my $n (@$arr) {\n        $sign *= $n >= 0 ? 1 : -1;\n        $prod *=\
    \ abs $n;\n    }\n    return $prod * $sign;\n}", "    my $sign = 1;\n    my $magnitude\
    \ = 0;\n    foreach (@$arr) {\n        if ($_ < 0) {\n            $sign *= -1;\n\
    \        }\n        if ($_ != 0) {\n            $magnitude += abs($_);\n     \
    \   }\n    }\n    $magnitude * $sign;\n}", "    return undef unless @$arr;\n \
    \   my $prod = 1;\n    my $sum = 0;\n    for my $n (@$arr) {\n        if ($n ==\
    \ 0) {\n            $prod = 0;\n            next;\n        }\n        if ($n <\
    \ 0) {\n            $prod *= -1;\n        }\n        $sum += abs($n);\n    }\n\
    \    return $sum * $prod;\n}", "    return undef unless(@$arr);\n    return 0\
    \ if(all { $_ == 0 } @$arr);\n    return 0 if(all { $_ == 1 } @$arr);\n    return\
    \ reduce { $a * $b} \n           map { $_ <=> 0 } @$arr;\n}", "    return undef\
    \ unless @$arr;\n    my $prod = reduce { $a * $b } map { $_ ? ($_ > 0 ? 1 : -1)\
    \ : 0 } @$arr;\n    my $sum = reduce { $a + abs($b) } @$arr;\n    return $prod\
    \ * $sum;\n}", "    my $ret = 1;\n    for my $i (@$arr) {\n        if ($i > 0)\
    \ {\n            $ret *= 1;\n        } elsif ($i < 0) {\n            $ret *= -1;\n\
    \        } else {\n            $ret *= 0;\n        }\n    }\n    return undef\
    \ if $ret == 0;\n    my $magnitudes = 0;\n    for my $j (@$arr) {\n        $magnitudes\
    \ += abs($j);\n    }\n    return $magnitudes * $ret;\n}", "    my $n = scalar\
    \ @$arr;\n    return undef if $n == 0;\n    my $s = 1;\n    for my $i (0..$n-1)\
    \ {\n        if ($arr->[$i] > 0) {\n            $s *= 1;\n        } elsif ($arr->[$i]\
    \ < 0) {\n            $s *= -1;\n        } else {\n            $s *= 0;\n    \
    \    }\n    }\n    my $prod = 1;\n    for my $i (0..$n-1) {\n        $prod *=\
    \ $arr->[$i] if $arr->[$i] != 0;\n    }\n    return abs($prod) * $s;\n}", "  \
    \  my $prod = 1;\n    my $sum = 0;\n    for my $num (@$arr) {\n        if ($num\
    \ == 0) {\n            $prod = 0;\n            last;\n        } elsif ($num >\
    \ 0) {\n            $sum += $num;\n        } else {\n            $sum -= $num;\n\
    \            $prod *= -1;\n        }\n    }\n    return $prod ? $sum * $prod :\
    \ undef;\n}\n1;", "    my($total) = 0;\n    return 0 if (scalar(@$arr) == 0);\n\
    \    foreach my $num (@$arr) {\n        $total += $num;\n    }\n    return undef\
    \ if ($total == 0);\n    return $total;\n}", "    if (@$arr == 0) {\n        return\
    \ undef;\n    }\n    my $sum = 0;\n    my $prod = 1;\n    for my $elem (@$arr)\
    \ {\n        if ($elem == 0) {\n            return 0;\n        }\n        $sum\
    \ += abs($elem);\n        $prod *= $elem / abs($elem);\n    }\n    return $sum\
    \ * $prod;\n}", "    my($sum, $magnitude, $sign, $prod_signs);\n    if (!@$arr)\
    \ {\n        return;\n    }\n    $sum = 0;\n    foreach (@$arr) {\n        if\
    \ ($_ == 0) {\n            $prod_signs = 0;\n        } else {\n            $magnitude\
    \ = abs($_);\n            $sign = ($_ < 0) ? -1 : 1;\n            $prod_signs\
    \ *= $sign;\n            $sum += $magnitude;\n        }\n    }\n    return $sum\
    \ * $prod_signs;\n}", "    my @signs = map { sign($_) } @$arr;\n    return undef\
    \ unless @signs;\n    my $prod = reduce { $a * $b } @signs;\n    my $sum = reduce\
    \ { $a + $b } map { abs($_) } @$arr;\n    return $sum * $prod;\n}", "    return\
    \ undef unless defined $arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my\
    \ $i (@$arr) {\n        next if $i == 0;\n        if ($i > 0) {\n            $prod\
    \ *= 1;\n        }\n        else {\n            $prod *= -1;\n        }\n    \
    \    $sum += abs($i);\n    }\n    return $sum * $prod;\n}\n1;", "    return undef\
    \ unless defined $arr;\n    my $res = reduce { $a + $b } @$arr;\n    $res = reduce\
    \ { $a * $b } map { $res ? ($_ ? ($_ / abs $_) : 0) : 1 } @$arr;\n    return $res;\n\
    }", "    # If array is empty, return undef\n    return undef unless @$arr;\n \
    \   # Calculate sum and product of signs\n    my $prod = 1;\n    my $sum = 0;\n\
    \    foreach (@$arr) {\n        my $sgn = $_ >= 0 ? 1 : -1;\n        $prod *=\
    \ $sgn;\n        $sum += abs($_);\n    }\n    # Return the sum multiplied by the\
    \ product of signs\n    return $sum * $prod;\n}", "    return undef unless @$arr;\n\
    \    my $prod = 1;\n    my $sum = 0;\n    foreach my $v (@$arr) {\n        if($v\
    \ > 0) {\n            $prod *= 1;\n            $sum += $v;\n        } elsif($v\
    \ < 0) {\n            $prod *= -1;\n            $sum += -$v;\n        } else {\n\
    \            $prod *= 0;\n        }\n    }\n    return $sum * $prod;\n}", "  \
    \  my $prod = 0;\n    my $sum = 0;\n    for my $num (@$arr) {\n        if ($num\
    \ > 0) {\n            $prod += 1;\n        } elsif ($num < 0) {\n            $prod\
    \ -= 1;\n        }\n        $sum += abs($num);\n    }\n    return undef if $prod\
    \ == 0;\n    return $sum * $prod;\n}", "    my $prod = 1;\n    my $sum = 0;\n\
    \    foreach my $elem (@$arr) {\n        if ($elem < 0) {\n            $prod *=\
    \ -1;\n        } elsif ($elem > 0) {\n            $prod *= 1;\n        } else\
    \ {\n            $prod *= 0;\n        }\n        $sum += abs($elem);\n    }\n\
    \    if ($sum == 0) {\n        return undef;\n    }\n    return $sum * $prod;\n\
    }", "    return 0 if (!@$arr);\n    return undef if (!defined($arr));\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $item (@$arr) {\n        $prod\
    \ *= -1 if ($item < 0);\n        $sum += abs($item);\n    }\n    return $sum *\
    \ $prod;\n}", "    my @signs = map $_ <=> 0, @$arr;\n    return undef unless @signs;\n\
    \    my $prod = reduce { $a * $b } @signs;\n    my $sum = reduce { $a + abs($b)\
    \ } @$arr;\n    return $sum * $prod;\n}", "    if (scalar(@$arr) == 0) {\n   \
    \     return undef;\n    }\n    my $prod = 1;\n    my $sum = 0;\n    foreach my\
    \ $item (@$arr) {\n        $prod *= 0 if ($item == 0);\n        $prod *= -1 if\
    \ ($item < 0);\n        $sum += abs($item);\n    }\n    return $sum * $prod;\n\
    }", "    my $sign = 1;\n    my $prod = 1;\n    my $sum = 0;\n    return undef\
    \ unless scalar @$arr;\n    for my $elem (@$arr) {\n        $sign = ($elem > 0)\
    \ - ($elem < 0);\n        $prod *= $sign;\n        $sum += abs($elem);\n    }\n\
    \    return $sum * $prod;\n}", "    my $signs = 1;\n    my $sum = 0;\n    return\
    \ undef unless @$arr;\n    foreach my $x (@$arr) {\n        $signs *= $x > 0 ?\
    \ 1 : $x < 0 ? -1 : 0;\n        $sum += abs($x);\n    }\n    return $sum * $signs;\n\
    }", "    my $product = 1;\n    my $sum = 0;\n    my $value;\n    foreach my $i\
    \ (@$arr) {\n        if ($i > 0) {\n            $value = 1;\n        } elsif ($i\
    \ < 0) {\n            $value = -1;\n        } else {\n            $value = 0;\n\
    \        }\n        $product *= $value;\n        $sum += abs($i);\n    }\n   \
    \ return $product * $sum;\n}", "    my($sum, $prod);\n    $sum = $prod = 0;\n\
    \    return undef unless(@$arr);\n    foreach my $e (@$arr) {\n        my $sign\
    \ = ( $e == 0 ? 0 : ( $e > 0 ? 1 : -1 ) );\n        $sum += abs($e);\n       \
    \ $prod *= $sign;\n    }\n    return $sum * $prod;\n}", "    return undef unless\
    \ @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my $i (@$arr) {\n     \
    \   $prod *= $i <=> 0;\n        $sum += abs($i);\n    }\n    return $sum * $prod;\n\
    }", "    return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n   \
    \ foreach my $num (@$arr) {\n        $sum += abs($num);\n        $prod *= sign($num);\n\
    \    }\n    return $sum * $prod;\n}", "    return undef unless @$arr;\n    my\
    \ $ret = 1;\n    $ret *= $_ > 0 ? $_ : -$_ for @$arr;\n    return $ret;\n}", " \
    \   return undef unless @$arr;\n    my $prod = 1;\n    $prod *= -1 if grep {$_\
    \ < 0} @$arr;\n    my $sum = 0;\n    $sum += abs($_) for @$arr;\n    return $sum\
    \ * $prod;\n}", "    return undef unless defined $arr;\n    my $prod = 0;\n  \
    \  foreach my $num (@$arr) {\n        $prod += abs($num) * ($num <=> 0);\n   \
    \ }\n    return $prod;\n}", "    return undef unless defined $arr;\n    my $signs\
    \ = 1;\n    my $result = 0;\n    foreach my $el (@$arr) {\n        $signs *= (\
    \ $el <=> 0 );\n        $result += abs($el);\n    }\n    return $result * $signs;\n\
    }", "    my $sum = 0;\n    my $prod = 1;\n    foreach my $x (@$arr) {\n      \
    \  if ($x < 0) {\n            $prod *= -1;\n        } elsif ($x > 0) {\n     \
    \       $prod *= 1;\n        } else {\n            $prod *= 0;\n        }\n  \
    \      $sum += abs($x);\n    }\n    return $sum * $prod;\n}", "    my $result\
    \ = undef;\n    if (@$arr) {\n        my $magnitudes = 0;\n        my $prod_signs\
    \ = 1;\n        foreach my $x (@$arr) {\n            $magnitudes += abs($x);\n\
    \            $prod_signs *= ($x eq 0) ? 0 : ($x / abs($x));\n        }\n     \
    \   $result = $magnitudes * $prod_signs;\n    }\n    return $result;\n}", "  \
    \  my $sum = 0;\n    my $prod = 1;\n    foreach my $el (@$arr) {\n        if ($el\
    \ == 0) {\n            $prod = 0;\n            last;\n        }\n        if ($el\
    \ > 0) {\n            $prod *= 1;\n        }\n        else {\n            $prod\
    \ *= -1;\n        }\n        $sum += abs($el);\n    }\n    return undef if (!\
    \ @$arr);\n    return $sum * $prod;\n}", "    return undef unless @$arr;\n   \
    \ return 0 if grep { $_ eq 0 } @$arr;\n    my($res) = 1;\n    $res *= $_ for @$arr;\n\
    \    return $res < 0 ? $res * -1 : $res;\n}", "    return undef unless @$arr;\n\
    \    my($prod, $sum) = (1, 0);\n    for my $e (@$arr) {\n        $prod *= $e ==\
    \ 0 ? 0 : $e < 0 ? -1 : 1;\n        $sum += abs($e);\n    }\n    return $prod\
    \ * $sum;\n}", "    return unless @$arr;\n    my $sum = 0;\n    my $signs = 1;\n\
    \    for my $num (@$arr) {\n        if ($num) {\n            $sum += abs($num);\n\
    \            $signs *= $num / abs($num);\n        }\n    }\n    return $sum *\
    \ $signs;\n}", "    return undef unless @$arr;\n    my $sign = 1;\n    my $magnitude\
    \ = 0;\n    for (@$arr) {\n        next if $_ == 0;\n        $sign *= $_ <=> 0;\n\
    \        $magnitude += abs($_);\n    }\n    return $magnitude * $sign;\n}", " \
    \   my @digits = @$arr;\n    my $n = scalar @digits;\n    my $prod = 1;\n    my\
    \ $sum = 0;\n    if ($n == 0) { return undef; }\n    foreach my $d (@digits) {\n\
    \        if (abs($d) % 2 == 0) {\n            $prod *= $d / abs($d);\n       \
    \ }\n        $sum += abs($d);\n    }\n    return $sum * $prod;\n}", "    my $sum\
    \ = 0;\n    my $prod = 1;\n    foreach (@$arr) {\n        if ($_ > 0) {\n    \
    \        $sum += $_;\n            $prod *= 1;\n        } elsif ($_ < 0) {\n  \
    \          $sum += -$_;\n            $prod *= -1;\n        } else {\n        \
    \    $prod *= 0;\n        }\n    }\n    return $sum * $prod;\n}", "    if(scalar(@$arr)\
    \ == 0) {\n        return undef;\n    }\n    my $sign_product = 1;\n    my $sum_magnitudes\
    \ = 0;\n    foreach my $num (@$arr) {\n        if($num > 0) {\n            $sign_product\
    \ *= 1;\n        } elsif($num < 0) {\n            $sign_product *= -1;\n     \
    \   } else {\n            $sign_product *= 0;\n        }\n        $sum_magnitudes\
    \ += abs($num);\n    }\n    return $sum_magnitudes * $sign_product;\n}", "   \
    \ my $sum = 0;\n    my $prod = 1;\n    my $undef = undef;\n    my $zero = 0;\n\
    \    foreach(@$arr) {\n        if ($_ < 0) {\n            $prod *= -1;\n     \
    \   } elsif ($_ > 0) {\n            $prod *= 1;\n        } else {\n          \
    \  $prod *= 0;\n        }\n        $sum += abs($_);\n    }\n    return $undef\
    \ if (@$arr == 0);\n    return $zero if ($prod == 0);\n    return $sum * $prod;\n\
    }", "    return undef unless $arr;\n    return 0 if scalar @$arr == 0;\n    my\
    \ $res = 1;\n    for (@$arr) {\n        $res *= $_ / abs($_) if $_;\n    }\n \
    \   $res * sum(map { abs($_) } @$arr);\n}", "    my($i, $s, $prod, $sum);\n  \
    \  $s = @$arr;\n    return undef if ($s == 0);\n    $prod = 1;\n    $sum = 0;\n\
    \    for ($i = 0; $i < $s; $i++) {\n        if ($arr->[$i] < 0) {\n          \
    \  $prod *= -1;\n        } elsif ($arr->[$i] == 0) {\n            $prod = 0;\n\
    \            $sum = 0;\n            last;\n        }\n        $sum += abs($arr->[$i]);\n\
    \    }\n    return $sum * $prod;\n}", "    my $sum = 0;\n    my $signs = 1;\n\
    \    foreach (@$arr) {\n        $sum += $_ > 0 ? $_ : -$_;\n        $signs *=\
    \ $_ > 0 ? 1 : $_ < 0 ? -1 : 0;\n    }\n    return @$arr ? $sum * $signs : undef;\n\
    }", "    my($i, $n, $r);\n    if (scalar(@$arr) == 0) {\n        return undef;\n\
    \    }\n    $r = 1;\n    foreach $n (@$arr) {\n        if ($n < 0) {\n       \
    \     $r *= -1;\n        } elsif ($n > 0) {\n            $r *= 1;\n        } else\
    \ {\n            $r *= 0;\n        }\n    }\n    $n = 0;\n    foreach $i (@$arr)\
    \ {\n        $n += abs($i);\n    }\n    return $n * $r;\n}", "    my $prod = 1;\n\
    \    my $sum = 0;\n    my $sign = -1;\n    foreach my $i (@$arr) {\n        if($i\
    \ > 0) {\n            $sign = 1;\n        } elsif($i < 0) {\n            $sign\
    \ = -1;\n        } else {\n            $sign = 0;\n        }\n        $prod *=\
    \ $sign;\n        $sum += abs($i);\n    }\n    return $prod == 0 ? 0 : $sum *\
    \ $prod;\n}", "    my $magnitude = 0;\n    my $sign = 1;\n    for my $i (@$arr)\
    \ {\n        if ($i != 0) {\n            $magnitude += abs($i);\n            $sign\
    \ *= sign($i);\n        }\n    }\n    return $magnitude * $sign;\n}", "    return\
    \ undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    foreach my $x\
    \ (@$arr) {\n        if ($x > 0) {\n            $prod *= 1;\n            $sum\
    \ += $x;\n        } elsif ($x < 0) {\n            $prod *= -1;\n            $sum\
    \ += -$x;\n        }\n    }\n    return $prod * $sum;\n}", "    my $tot = 1;\n\
    \    my $magn = 0;\n    if (defined $arr) {\n        foreach my $num (@$arr) {\n\
    \            $tot *= $num <=> 0;\n            $magn += abs($num);\n        }\n\
    \        return $tot * $magn;\n    }\n    return undef;\n}", "    return undef\
    \ unless @$arr;\n    my $sign = 1;\n    for (@$arr) {\n        $sign *= $_ <=>\
    \ 0;\n    }\n    return sum(map { abs $_ } @$arr) * $sign;\n}", "    if (@$arr\
    \ == 0) {\n        return undef;\n    }\n    my $sum = 0;\n    my $prod = 1;\n\
    \    for my $i (@$arr) {\n        if ($i == 0) {\n            $prod = 0;\n   \
    \         last;\n        }\n        $sum += abs($i);\n        $prod *= $i >= 0\
    \ ? 1 : -1;\n    }\n    return $sum * $prod;\n}", '    # your code here', "  \
    \  return undef unless scalar @$arr;\n    my @signs = map { sgn($_) } @$arr;\n\
    \    my $signs_prod = reduce { $a * $b } @signs;\n    my @magnitudes = map { abs($_)\
    \ } @$arr;\n    my $magnitudes_sum = reduce { $a + $b } @magnitudes;\n    return\
    \ $magnitudes_sum * $signs_prod;\n}", "    if(@$arr == 0) {\n        return undef;\n\
    \    }\n    my $sign_prod = 1;\n    my $sum = 0;\n    foreach my $number (@$arr)\
    \ {\n        $sign_prod *= $number/abs($number);\n        $sum += abs($number);\n\
    \    }\n    return $sum * $sign_prod;\n}", "    my $product = 0;\n    my $sum\
    \ = 0;\n    foreach my $n (@$arr) {\n        if ($n > 0) {\n            $product++;\n\
    \        } elsif ($n < 0) {\n            $product--;\n        }\n        $sum\
    \ += abs($n);\n    }\n    return defined($arr) ? $sum * $product : undef;\n}",
  "    return if !@$arr;\n    my $signs = 1;\n    my $ans = 0;\n    for (@$arr) {\n\
    \        if (abs($_) == $_) {\n            $ans += abs($_);\n        }\n     \
    \   else {\n            $ans += abs($_);\n            $signs *= -1;\n        }\n\
    \    }\n    return $ans * $signs;\n}", "    return undef unless defined $arr;\n\
    \    return undef unless scalar @$arr;\n    my @signs = map { $_ >= 0 ? 1 : $_\
    \ < 0 ? -1 : 0 } @$arr;\n    my $prod = 1;\n    $prod *= $_ for @signs;\n    return\
    \ $prod * sum(@$arr);\n}", "    # ...\n}", "    my $prod = 1;\n    foreach my\
    \ $val (@$arr) {\n        $prod *= $val <=> 0 if $val;\n    }\n    my $sum = 0;\n\
    \    foreach my $val (@$arr) {\n        $sum += abs($val) if $val;\n    }\n  \
    \  return $sum ? $sum * $prod : undef;\n}", "    if (ref($arr) ne 'ARRAY') {\n\
    \        return;\n    }\n    my @products = map {abs($_) if $_} @$arr;\n    my\
    \ @signs = map {$_ / abs($_) || 0} @$arr;\n    return unless @products;\n    return\
    \ product(@products) * product(@signs);\n}", "    my($sign, $magn, $prod);\n \
    \   $sign = 1;\n    $magn = 0;\n    $prod = 1;\n    foreach $num (@$arr) {\n \
    \       if ($num < 0) {\n            $sign = -1;\n        } elsif ($num > 0) {\n\
    \            $sign = 1;\n        } else {\n            $sign = 0;\n        }\n\
    \        $magn += abs($num);\n        $prod *= $sign;\n    }\n    if ($magn ==\
    \ 0) {\n        return undef;\n    } else {\n        return $magn * $prod;\n \
    \   }\n}", "    my $n = scalar @$arr;\n    return undef if $n == 0;\n    my $signs\
    \ = 1;\n    my $res = 0;\n    for my $i (0..$n-1) {\n        my $a = $arr->[$i];\n\
    \        my $s = $a > 0 ? 1 : ($a < 0 ? -1 : 0);\n        $signs *= $s;\n    \
    \    $res += abs($a);\n    }\n    return $res * $signs;\n}", "    return undef\
    \ unless @$arr;\n    my $sign_prod = 1;\n    my $sum = 0;\n    for my $i (@$arr)\
    \ {\n        if ($i < 0) {\n            $sign_prod *= -1;\n            $sum +=\
    \ -$i;\n        } elsif ($i > 0) {\n            $sum += $i;\n        } else {\n\
    \            $sign_prod = 0;\n        }\n    }\n    return $sum * $sign_prod;\n\
    }", "    my $result = 1;\n    my $sum = 0;\n    my $zero_is_present = 0;\n   \
    \ foreach my $num (@$arr) {\n        if ($num == 0) {\n            $zero_is_present\
    \ = 1;\n        } else {\n            $result *= $num / abs($num);\n         \
    \   $sum += abs($num);\n        }\n    }\n    if ($zero_is_present) {\n      \
    \  return 0;\n    } else {\n        return $result * $sum;\n    }\n}", "    if(not\
    \ @$arr) {\n        return undef;\n    }\n    my($prod) = 1;\n    my($sum) = 0;\n\
    \    foreach my $el (@$arr) {\n        if(0 < $el) {\n            $prod *= 1;\n\
    \        }\n        elsif(0 > $el) {\n            $prod *= -1;\n        }\n  \
    \      else {\n            $prod *= 0;\n        }\n        $sum += abs($el);\n\
    \    }\n    return $sum * $prod;\n}", "    my $prod = 1;\n    my $sum = 0;\n \
    \   if (!defined($arr)) {\n        return undef;\n    }\n    foreach my $n (@$arr)\
    \ {\n        if ($n == 0) {\n            $prod = 0;\n            last;\n     \
    \   }\n        if ($n > 0) {\n            $prod *= 1;\n        }\n        else\
    \ {\n            $prod *= -1;\n        }\n        $sum += abs($n);\n    }\n  \
    \  return $prod * $sum;\n}", "    my($i, $s, $p, $l);\n    $l = @$arr;\n    if\
    \ (!$l) {\n        return undef;\n    }\n    for ($i = 0, $s = 0, $p = 1; $i <\
    \ $l; $i++) {\n        if ($arr->[$i] == 0) {\n            $p = 0;\n        }\n\
    \        else {\n            $s += abs($arr->[$i]);\n            $p *= $arr->[$i]\
    \ >= 0 ? 1 : -1;\n        }\n    }\n    return $s * $p;\n}", "    return undef\
    \ unless scalar @$arr;\n    my @signs = map { $_ <=> 0 } @$arr;\n    my $magnitudes\
    \ = sum(map { abs($_) } @$arr);\n    return $magnitudes * product(@signs);\n}",
  "    return undef unless @$arr;\n    my $sign = 1;\n    my $magn = 0;\n    for (@$arr)\
    \ {\n        $sign *= 1 if $_ > 0;\n        $sign *= -1 if $_ < 0;\n        $magn\
    \ += abs($_);\n    }\n    return $magn * $sign;\n}", "    my($r) = 1;\n    foreach\
    \ my $e (@$arr) {\n        if($e == 0) {\n            return 0;\n        } elsif($e\
    \ > 0) {\n            $r = $r * 1;\n        } else {\n            $r = $r * -1;\n\
    \        }\n    }\n    return $r;\n}", "    my($i, $j, $sum, $prod);\n    $sum\
    \ = 0;\n    $prod = 1;\n    for ($i = 0; $i < scalar(@$arr); $i++) {\n       \
    \ if ($arr->[$i] > 0) {\n            $prod *= 1;\n        } elsif ($arr->[$i]\
    \ < 0) {\n            $prod *= -1;\n        } else {\n            $prod *= 0;\n\
    \        }\n        $sum += abs($arr->[$i]);\n    }\n    return ($sum * $prod);\n\
    }", "    my $res = 0;\n    my $signs = 1;\n    for my $num (@$arr) {\n       \
    \ if ($num == 0) {\n            $signs = 0;\n        } elsif ($num < 0) {\n  \
    \          $signs *= -1;\n        }\n        $res += abs($num);\n    }\n    return\
    \ $res * $signs;\n}", "    $result = 1;\n    if (scalar(@$arr)==0) {\n       \
    \ return undef;\n    }\n    foreach $num (@$arr) {\n        $result *= sign($num);\n\
    \    }\n    $result2 = 0;\n    foreach $num (@$arr) {\n        $result2 += abs($num);\n\
    \    }\n    return $result * $result2;\n}", "    my $len = @$arr;\n    my $res\
    \ = undef;\n    my $cur = 0;\n    my $sig = 0;\n    my $mag = 0;\n    for ($cur\
    \ = 0; $cur < $len; $cur++) {\n        $sig += $arr->[$cur] == 0 ? 0 : ($arr->[$cur]\
    \ > 0 ? 1 : -1);\n        $mag += abs($arr->[$cur]);\n    }\n    if ($sig == 0)\
    \ {\n        $res = 0;\n    } else {\n        $res = $mag * $sig;\n    }\n   \
    \ return $res;\n}", "    return undef unless scalar @$arr;\n    my $signs = 1;\n\
    \    my $sums = 0;\n    foreach (@$arr) {\n        if ($_ == 0) {\n          \
    \  $signs = 0;\n            last;\n        }\n        if ($_ > 0) {\n        \
    \    $signs *= 1;\n        }\n        else {\n            $signs *= -1;\n    \
    \    }\n        $sums += abs($_);\n    }\n    return $sums * $signs;\n}", "  \
    \  my $sum = 0;\n    my $prod = 1;\n    foreach my $num (@$arr) {\n        if\
    \ ($num < 0) {\n            $prod *= -1;\n        } elsif ($num > 0) {\n     \
    \       $prod *= 1;\n        } else {\n            $prod *= 0;\n        }\n  \
    \      $sum += abs($num);\n    }\n    return $sum * $prod;\n}", "    my $sum =\
    \ 0;\n    my $sum_signs = 1;\n    foreach my $num (@$arr) {\n        if ($num\
    \ > 0) {\n            $sum_signs *= 1;\n        } elsif ($num < 0) {\n       \
    \     $sum_signs *= -1;\n        } else {\n            $sum_signs *= 0;\n    \
    \    }\n        $sum += abs($num);\n    }\n    return $sum*$sum_signs;\n}", " \
    \   return undef unless @$arr;\n    my @magn = map { abs($_) } @$arr;\n    my\
    \ @signs = map { $_ == 0 ? 0 : $_ < 0 ? -1 : 1 } @$arr;\n    my $sign_prod = 1;\n\
    \    $sign_prod *= $_ for @signs;\n    my $mag_sum = 0;\n    $mag_sum += $_ for\
    \ @magn;\n    return $mag_sum * $sign_prod;\n}", "    my $prod = 1;\n    my $sum\
    \ = 0;\n    if (scalar @$arr == 0) {\n        return undef;\n    }\n    for (my\
    \ $i = 0; $i < scalar @$arr; $i++) {\n        my $value = abs($arr->[$i]);\n \
    \       $sum += $value;\n        if ($arr->[$i] != 0) {\n            $prod *=\
    \ $arr->[$i] / $value;\n        }\n    }\n    return $sum * $prod;\n}", "    #\
    \ your code here\n}", "    my @s = map { $_ ? $_/abs($_) : 0 } @$arr;\n    return\
    \ undef unless @s;\n    my $prod = reduce { $a * $b } @s;\n    return reduce {\
    \ $a + abs($b) } @$arr if $prod > 0;\n    return reduce { $a - abs($b) } @$arr\
    \ if $prod < 0;\n    return 0;\n}", "    my($product) = 1;\n    my($magnitude)\
    \ = 0;\n    foreach my $item (@$arr) {\n        if ($item < 0) {\n           \
    \ $product *= -1;\n        } elsif ($item > 0) {\n            $product *= 1;\n\
    \        } else {\n            $product *= 0;\n        }\n        $magnitude +=\
    \ abs($item);\n    }\n    return undef if $magnitude == 0;\n    return $magnitude\
    \ * $product;\n}", "    return undef unless scalar @$arr;\n    my $magn = product(magnitude($arr));\n\
    \    my $sign = product(sign($arr));\n    return $magn * $sign;\n}", "    my $r\
    \ = 0;\n    my $product = 1;\n    for(my $i = 0; $i < scalar(@$arr); $i++) {\n\
    \        my $num = $arr->[$i];\n        if ($num == 0) {\n            $product\
    \ = 0;\n            last;\n        }\n        $product *= ($num < 0 ? -1 : 1);\n\
    \        $r += abs($num);\n    }\n    return $product * $r;\n}", "    return undef\
    \ unless @$arr;\n    my $signs = 1;\n    my $sums = 0;\n    for my $i (@$arr)\
    \ {\n        $signs *= 0 if $i == 0;\n        $signs *= -1 if $i < 0;\n      \
    \  $sums += abs($i);\n    }\n    return $sums * $signs;\n}", "    my $sum_mag\
    \ = 0;\n    my $prod_sign = 1;\n    foreach my $n (@$arr) {\n        if ($n >\
    \ 0) {\n            $sum_mag += $n;\n        } elsif ($n < 0) {\n            $sum_mag\
    \ += -$n;\n            $prod_sign *= -1;\n        } else {\n            $prod_sign\
    \ = 0;\n        }\n    }\n    return $sum_mag ? $sum_mag * $prod_sign : undef;\n\
    }", "    return undef unless @$arr;\n    my @signs = map { sign($_) } @$arr;\n\
    \    my $signs_product = reduce { $a * $b } @signs;\n    my @magnitudes = map\
    \ { abs($_) } @$arr;\n    my $magnitudes_sum = reduce { $a + $b } @magnitudes;\n\
    \    return $magnitudes_sum * $signs_product;\n}", "    $arr = [] unless defined\
    \ $arr;\n    if (@$arr == 0) {\n        return undef;\n    }\n    my $res = 1;\n\
    \    for (@$arr) {\n        if ($_ == 0) {\n            return 0;\n        }\n\
    \        elsif ($_ > 0) {\n            $res *= 1;\n        }\n        else {\n\
    \            $res *= -1;\n        }\n    }\n    return $res * sum(map { abs($_)\
    \ } @$arr);\n}", "    # your code goes here\n}", "    my $magnitude = 0;\n   \
    \ my $signs = 1;\n    if (scalar(@$arr) == 0) {\n        return;\n    }\n    for\
    \ my $num (@$arr) {\n        $magnitude += abs($num);\n        if ($num < 0) {\n\
    \            $signs *= -1;\n        }\n        elsif ($num > 0) {\n          \
    \  $signs *= 1;\n        }\n        else {\n            $signs *= 0;\n       \
    \ }\n    }\n    return $magnitude * $signs;\n}", "    my($ret);\n    my($sum);\n\
    \    my($sign);\n    my($i);", "    return if ! @$arr;\n    my $sign = 1;\n  \
    \  my $magn = 0;\n    foreach my $n (@$arr) {\n        my $signum = $n <=> 0;\n\
    \        $signum = 0 if $signum == 0;\n        $sign *= $signum;\n        $magn\
    \ += abs($n);\n    }\n    return $magn * $sign;\n}", "    return undef unless\
    \ scalar @$arr;\n    return 0 if grep {$_ == 0} @$arr;\n    return scalar (grep\
    \ {$_ < 0} @$arr) % 2 == 0 ? '1' : '-1';\n}", "    return undef unless scalar\
    \ @$arr;\n    my $sign = 1;\n    my $res = 0;\n    for my $n (@$arr) {\n     \
    \   if ($n > 0) {\n            $res += $n;\n        } elsif ($n < 0) {\n     \
    \       $res -= $n;\n            $sign *= -1;\n        }\n    }\n    return $res\
    \ * $sign;\n}", "    my @magnitudes = map { abs($_) } @$arr;\n    my @signs =\
    \ map { $_ ? ($_ / abs($_)) : 0 } @$arr;\n    return unless (@magnitudes && @signs);\n\
    \    return sum(@magnitudes) * prod(@signs);\n}", "    my $sign = 1;\n    my $sum\
    \ = 0;\n    for my $i (0..@$arr-1) {\n        $sign *= $arr->[$i] > 0 ? 1 : $arr->[$i]\
    \ < 0 ? -1 : 0;\n        $sum += abs($arr->[$i]);\n    }\n    $sign ? $sum * $sign\
    \ : undef;\n}", "    return undef unless @$arr;\n    my $prod = 1;\n    for (@$arr)\
    \ {\n        $prod *= $_ <=> 0;\n    }\n    return sum(map { abs($_) } @$arr)\
    \ * $prod;\n}", "    my @a = map(abs($_), @$arr);\n    my @b = map {\n       \
    \ if    ($_ == 0) { 0 }\n        elsif ($_ < 0)  { -1 }\n        else        \
    \   { 1 }\n    } @$arr;\n    return undef if @a == 0;\n    return Math::BigInt->new(1)\
    \ if @a == 1;\n    my $m = Math::BigInt->new(reduce { $a * $b } $a[0], @a[1..$#a]);\n\
    \    my $s = reduce { $a * $b } @b;\n    return $m * $s;\n}", "    my $prod =\
    \ 1;\n    my $sum = 0;\n    foreach my $i (@$arr) {\n        my $sign = $i ? ($i\
    \ > 0 ? 1 : -1) : 0;\n        $prod *= $sign;\n        $sum += abs($i);\n    }\n\
    \    return $prod ? $sum * $prod : undef;\n}", "    # your code here\n}", "  \
    \  my($s, $p);\n    for (@$arr) {\n        $s += abs($_);\n        $p *= 0 if\
    \ $_ == 0;\n        $p *= $_ / abs($_) if $_ != 0;\n    }\n    $s * $p // undef;\n\
    }", "    my $prod = 1;\n    my $sum = 0;\n    my $c = 0;\n    my $temp = 0;\n\
    \    foreach (@$arr) {\n        if ($_ > 0) {\n            $prod *= 1;\n     \
    \       $sum += $_;\n        } elsif ($_ < 0) {\n            $prod *= -1;\n  \
    \          $sum += -$_;\n        } else {\n            $prod *= 0;\n         \
    \   $c++;\n        }\n    }\n    if ($c == @$arr) {\n        return undef;\n \
    \   } else {\n        return $prod * $sum;\n    }\n}", "    return undef unless\
    \ defined $arr;\n    return 0 if !@$arr;\n    my($sign, $prod) = (1, 1);\n   \
    \ for my $v (@$arr) {\n        $prod *= $sign;\n        $sign = $v == 0 ? 1 :\
    \ $v < 0 ? -1 : 1;\n    }\n    $prod *= $sign;\n    my $sum = 0;\n    for my $v\
    \ (@$arr) {\n        $sum += $v < 0 ? -$v : $v;\n    }\n    return $sum * $prod;\n\
    }", "    return undef unless @$arr;\n    my $prod = 1;\n    for my $num (@$arr)\
    \ {\n        if ($num < 0) {\n            $prod *= -1;\n        } elsif ($num\
    \ > 0) {\n            # do nothing\n        } else {\n            $prod = 0;\n\
    \            last;\n        }\n    }\n    my $sum = 0;\n    for my $num (@$arr)\
    \ {\n        $sum += abs($num);\n    }\n    return $sum * $prod;\n}", "    return\
    \ undef unless defined $arr;\n    my $sum = 0;\n    my $prod = 1;\n    foreach\
    \ my $el (@$arr) {\n        $sum += abs($el);\n        $prod *= $el <=> 0;\n \
    \   }\n    return $sum * $prod;\n}", "    $arr = [$arr] unless ref $arr eq 'ARRAY';\n\
    \    return undef unless @$arr;\n    my $res = 0;\n    my $prod = 1;\n    foreach\
    \ my $x (@$arr) {\n        next if !defined $x;\n        next if $x == 0;\n  \
    \      my $sign = 1;\n        $sign = -1 if $x < 0;\n        $prod *= $sign;\n\
    \        $res += abs($x);\n    }\n    return $res * $prod;\n}", "    return undef\
    \ unless @$arr;\n    return 0 if grep { ! defined } @$arr;", "    # your code\
    \ here\n    return undef unless @$arr;\n    my $signs = 1;\n    my $magnitudes\
    \ = 0;\n    for (@$arr) {\n        $signs *= $_ > 0 ? 1 : $_ < 0 ? -1 : 0;\n \
    \       $magnitudes += abs($_);\n    }\n    return $signs * $magnitudes;\n}",
  "    return undef unless (scalar @$arr);\n    my $signs = 1;\n    my $magnitudes\
    \ = 0;\n    foreach my $el (@$arr) {\n        $magnitudes += abs($el);\n     \
    \   $signs *= $el > 0 ? 1 : ($el < 0 ? -1 : 0);\n    }\n    return $magnitudes\
    \ * $signs;\n}", "    my $product = 1;\n    my $sum = 0;\n    return undef unless(scalar(@$arr));\n\
    \    foreach my $num (@$arr) {\n        if($num < 0) {\n            $product *=\
    \ -1;\n        }\n        elsif($num > 0) {\n            $product *= 1;\n    \
    \    }\n        else {\n            $product *= 0;\n        }\n        $sum +=\
    \ abs($num);\n    }\n    return $sum * $product;\n}", "    return undef unless\
    \ @$arr;\n    my @signs = map {$_ ? $_/abs($_) : 0} @$arr;\n    return eval join\
    \ '*', @signs;\n}", "    return undef unless $arr && @$arr;\n    return 0 unless\
    \ grep { $_ } @$arr;\n    return 1 unless grep { $_ < 0 } @$arr;\n    my $signs\
    \ = 1;\n    $signs *= -1 if $_ < 0 for @$arr;\n    my $sum = 0;\n    $sum += abs\
    \ $_ for @$arr;\n    return $sum * $signs;\n}", "    return undef unless @$arr;\n\
    \    my $prod = 1;\n    my $sum = 0;\n    foreach (@$arr) {\n        $prod *=\
    \ $_ / abs($_) || 1;\n        $sum += abs($_);\n    }\n    return $prod * $sum;\n\
    }", "    my $result = 1;\n    my $sum = 0;\n    if (scalar @$arr) {\n        foreach\
    \ my $el (@$arr) {\n            $result *= 1 if $el > 0;\n            $result\
    \ *= -1 if $el < 0;\n            $sum += abs($el);\n        }\n        return\
    \ $sum * $result;\n    }\n    else {\n        return undef;\n    }\n}", "    my($result)\
    \ = 1;\n    if (!@$arr) {\n        return undef;\n    }\n    for my $i (@$arr)\
    \ {\n        if ($i > 0) {\n            $result *= 1;\n        } elsif ($i < 0)\
    \ {\n            $result *= -1;\n        } else {\n            $result *= 0;\n\
    \        }\n    }\n    return $result * sum(map {abs($_)} @$arr);\n}\n1;", " \
    \   return undef unless defined $arr;\n    return 0 unless @$arr;\n    my $s =\
    \ 1;\n    my $m = 0;\n    foreach (@$arr) {\n        next if $_ == 0;\n      \
    \  $s *= $_ <=> 0;\n        $m += abs($_);\n    }\n    return $s * $m;\n}", " \
    \   return unless @$arr;\n    my($sum, $product) = (0, 1);\n    for my $x (@$arr)\
    \ {\n        $sum += abs($x);\n        $product *= $x > 0 ? 1 : ($x < 0 ? -1 :\
    \ 0);\n    }\n    return $sum * $product;\n}", "    return undef unless defined\
    \ $arr;\n    my $prod = 1;\n    my $sum = 0;\n    foreach my $i (@$arr) {\n  \
    \      my $sign = $i > 0 ? 1 : $i < 0 ? -1 : 0;\n        $prod *= $sign;\n   \
    \     $sum += abs($i);\n    }\n    return $sum * $prod;\n}", "    return undef\
    \ unless @$arr;\n    my $sign_product = 1;\n    my $magnitude_sum = 0;\n    for\
    \ my $num (@$arr) {\n        my $magnitude = abs($num);\n        $magnitude_sum\
    \ += $magnitude;\n        if ($num < 0) {\n            $sign_product *= -1;\n\
    \        } elsif ($num == 0) {\n            $sign_product = 0;\n        }\n  \
    \  }\n    return $magnitude_sum * $sign_product;\n}", "    return undef unless\
    \ @$arr;\n    return sum(map {abs $_} @$arr) * product(map {$_ > 0 ? 1 : $_ <\
    \ 0 ? -1 : 0} @$arr);\n}", "    my($sum, $signs) = (0, 1);\n    foreach (@$arr)\
    \ {\n        $sum += abs($_);\n        $signs *= $_;\n    }\n    return $sum *\
    \ $signs;\n}", "    return undef unless defined $arr;\n    if ( @$arr ) {\n  \
    \      my $prod = 1;\n        my $sum = 0;\n        for ( @$arr ) {\n        \
    \    next if $_ == 0;\n            $prod *= $_ / abs($_);\n            $sum +=\
    \ abs($_);\n        }\n        return $sum * $prod;\n    }\n    return undef;\n\
    }", "    return undef unless @$arr;\n    my @positive_numbers = grep { $_ > 0\
    \ } @$arr;\n    my @negative_numbers = grep { $_ < 0 } @$arr;\n    my @zeros =\
    \ grep { $_ == 0 } @$arr;\n    my $sign = (-1) ** scalar(@negative_numbers);\n\
    \    return 0 if @zeros;\n    return $sign * sum(map { abs($_) } @$arr);\n}",
  "    return undef unless @$arr;\n    my $result = 0;\n    for my $value (@$arr)\
    \ {\n        $result += $value * abs($value);\n    }\n    return $result;\n}",
  "    return undef unless scalar @$arr;\n    my $prod = 1;\n    my $sum = 0;\n  \
    \  foreach (@$arr) {\n        $prod *= $_ > 0 ? 1 : $_ < 0 ? -1 : 0;\n       \
    \ $sum += abs($_);\n    }\n    return $prod * $sum;\n}", "    my $total = 1;\n\
    \    my $signs = 1;\n    foreach my $x (@$arr) {\n        if ($x < 0) {\n    \
    \        $signs *= -1;\n        } elsif ($x == 0) {\n            $signs = 0;\n\
    \        }\n        $total += abs($x);\n    }\n    return $total * $signs;\n}",
  "    return unless defined $arr;\n    return unless scalar @$arr;\n    my $prod\
    \ = 1;\n    my $sum = 0;\n    foreach my $item (@$arr) {\n        if ($item <\
    \ 0) {\n            $prod *= -1;\n        } elsif ($item > 0) {\n            $prod\
    \ *= 1;\n        } else {\n            $prod *= 0;\n        }\n        $sum +=\
    \ abs($item);\n    }\n    return $sum * $prod;\n}", "    my $sum = 0;\n    my\
    \ $prod = 1;\n    return undef unless @$arr;\n    for (@$arr) {\n        if ($_\
    \ > 0) {\n            $sum += $_;\n            $prod *= 1;\n        } elsif ($_\
    \ < 0) {\n            $sum += -$_;\n            $prod *= -1;\n        } else {\n\
    \            $prod *= 0;\n        }\n    }\n    return $sum * $prod;\n}", "  \
    \  return if @$arr == 0;\n    my @arr = sort { abs($a) <=> abs($b) } @$arr;\n\
    \    my $p = 1;\n    $p *= $_ for @arr;\n    my $s = 0;\n    $s += abs($_) for\
    \ @arr;\n    return $s * $p;\n}", "    die \"empty array\\n\" if (scalar(@$arr)\
    \ == 0);\n    my $negative = grep $_ < 0, @$arr;\n    my $zero = grep $_ == 0,\
    \ @$arr;\n    my $sum = sum map abs($_), @$arr;\n    return undef if ($negative\
    \ && $zero);\n    return ($negative % 2) ? -$sum : $sum;\n}", "    my $magnitudes\
    \ = 0;\n    my $signs = 1;\n    if (@$arr == 0) {\n        return undef;\n   \
    \ }\n    foreach my $num (@$arr) {\n        $magnitudes += abs($num);\n      \
    \  $signs *= sign($num);\n    }\n    return $magnitudes * $signs;\n}", "    my\
    \ $product = 1;\n    my $sum = 0;\n    if(scalar @$arr == 0){\n        return;\n\
    \    }\n    foreach(@$arr){\n        $product *= $_ / abs($_);\n        $sum +=\
    \ abs($_);\n    }\n    return $sum * $product;\n}", "    my $result = 1;\n   \
    \ foreach my $i (@$arr) {\n        my $sgn = $i <=> 0;\n        $result *= $sgn\
    \ if $sgn;\n    }\n    return unless $result;\n    return $result * sum(abs @$arr);\n\
    }", "    my($temp);\n    my($res);\n    foreach my $item (@$arr) {\n        if\
    \ ($item != 0) {\n            $res = $res * (($item>0) ? 1 : -1);\n        }\n\
    \    }\n    return undef if (! defined $res);\n    foreach my $item (@$arr) {\n\
    \        $temp += abs($item);\n    }\n    return $temp * $res;\n}", "    return\
    \ undef unless defined $arr;\n    my $sum = 0;\n    my $prod = 1;\n    foreach\
    \ my $n (@$arr) {\n        if ($n == 0) {\n            $prod = 0;\n          \
    \  last;\n        } elsif ($n > 0) {\n            $sum += $n;\n        } else\
    \ {\n            $sum -= $n;\n            $prod *= -1;\n        }\n    }\n   \
    \ return undef if $prod == 0;\n    return $sum * $prod;\n}", "    return undef\
    \ unless @$arr;\n    my $signs = 1;\n    my $sums = 0;\n    for my $num (@$arr)\
    \ {\n        $signs *= $num <=> 0;\n        $sums += abs($num);\n    }\n    return\
    \ $sums * $signs;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
