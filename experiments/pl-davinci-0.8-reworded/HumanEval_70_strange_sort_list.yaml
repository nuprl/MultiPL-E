name: HumanEval_70_strange_sort_list
language: pl
prompt: "# Given array of integers, return array in strange order.\n# Strange sorting,\
  \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
  \ then minimum and so on.\n# Examples:\n# >>> strange_sort_list([1, 2, 3, 4])\n\
  # [1, 4, 2, 3]\n# >>> strange_sort_list([5, 5, 5, 5])\n# [5, 5, 5, 5]\n# >>> strange_sort_list([])\n\
  # []\nsub strange_sort_list {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&strange_sort_list;\n\
  \        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 4, 2, 3])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 6, 7, 8, 9]),[5, 9, 6, 8, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7])) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->([5, 5, 5, 5]),[5, 5, 5,\
  \ 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 2, 2, 2, 5, 5,\
  \ -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2])) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->([111111]),[111111])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @sorted = sort { $a <=> $b } @$lst;\n    my @odds = @sorted[0..int($#sorted/2)];\n\
    \    my @evens = @sorted[int($#sorted/2)+1..$#sorted];\n    my @result;\n    for\
    \ my $i (0..$#odds) {\n        push @result, $odds[$i];\n        push @result,\
    \ $evens[$i] if $i <= $#evens;\n    }\n    return \\@result;\n}", "    my @result\
    \ = ();\n    my %index = ();\n    my $i = 0;\n    foreach my $x (@$lst) {\n  \
    \      $index{$x} = $i;\n        $i++;\n    }\n    my @keys = sort {$a <=> $b}\
    \ keys %index;\n    my $dir = 1;\n    foreach my $x (@keys) {\n        my $i =\
    \ $index{$x};\n        $result[$i] = $x;\n        $dir = 1 - $dir;\n    }\n  \
    \  return @result;\n}", "    return [] if scalar(@$lst) == 0;\n    my($min, $max,\
    \ $i) = ($lst->[0], $lst->[0], 0);\n    for(my $i = 1; $i < scalar(@$lst); $i++)\
    \ {\n        $min = $lst->[$i] if $lst->[$i] < $min;\n        $max = $lst->[$i]\
    \ if $lst->[$i] > $max;\n    }\n    my @new_lst = ($min);\n    while(scalar(@new_lst)\
    \ < scalar(@$lst)) {\n        push @new_lst, $max;\n        my @rem_lst = grep\
    \ { $_ != $max } @$lst;\n        $min = $rem_lst[0];\n        for(my $i = 1; $i\
    \ < scalar(@rem_lst); $i++) {\n            $min = $rem_lst[$i] if $rem_lst[$i]\
    \ < $min;\n        }\n        push @new_lst, $min;\n        my @rem_lst = grep\
    \ { $_ != $min } @$lst;\n        $max = $rem_lst[0];\n        for(my $i = 1; $i\
    \ < scalar(@rem_lst); $i++) {\n            $max = $rem_lst[$i] if $rem_lst[$i]\
    \ > $max;\n        }\n    }\n    return \\@new_lst;\n}", "    my $sorted = [];\n\
    \    my $tmp = [sort {$a <=> $b} @$lst];\n    while(@$tmp) {\n        push @$sorted,\
    \ shift @$tmp;\n        push @$sorted, pop @$tmp if @$tmp;\n    }\n    return\
    \ $sorted;\n}", "    my $lst_size = scalar @$lst;\n    my $ret_lst = [];\n   \
    \ my $min_max = 0;\n    my $count = 1;\n    return $ret_lst if $lst_size == 0;\n\
    \    while ($count <= $lst_size) {\n        my $min = min_in_list($lst);\n   \
    \     push @$ret_lst, $min;\n        remove_element_from_list($lst, $min);\n \
    \       if ($count == $lst_size) {\n            last;\n        }\n        my $max\
    \ = max_in_list($lst);\n        push @$ret_lst, $max;\n        remove_element_from_list($lst,\
    \ $max);\n        $count += 2;\n    }\n    return $ret_lst;\n}", "    my @sorted\
    \ = sort {$a <=> $b} @$lst;\n    my $res = [];\n    my $idx = 0;\n    while (@sorted)\
    \ {\n        my $a = shift @sorted;\n        my $b = pop @sorted;\n        push\
    \ @$res, $a;\n        push @$res, $b if defined $b;\n    }\n    return $res;\n\
    }", "    my(@sorted) = sort { $a <=> $b } @$lst;\n    my(@res) = ();\n    my($idx)\
    \ = 0;\n    my($inc) = 1;\n    while (@sorted) {\n        push @res, splice(@sorted,\
    \ $idx, 1);\n        $idx += $inc;\n        if ($idx == scalar(@sorted)) {\n \
    \           if ($inc == 1) {\n                $inc = -1;\n                $idx\
    \ = -1;\n            } else {\n                $inc = 1;\n                $idx\
    \ = 0;\n            }\n        }\n    }\n    return @res;\n}", "    my $lst2 =\
    \ [];\n    my $ln = scalar(@$lst);\n    return $lst2 if $ln == 0;\n    my $mn\
    \ = min(@$lst);\n    push @$lst2, $mn;\n    my $mx = max(@$lst);\n    push @$lst2,\
    \ $mx;\n    $lst2 = strange_sort_list_helper($lst, $lst2, $mn, $mx);\n    return\
    \ $lst2;\n}", "    my @result = ();\n    my $min;\n    my $min_index;\n    my\
    \ $max;\n    my $max_index;\n    my $i;\n    my $j;\n    for ($i = 0; $i < @$lst;\
    \ $i++) {\n        $min = @$lst[$i];\n        $min_index = $i;\n        for ($j\
    \ = $i; $j < @$lst; $j++) {\n            if (@$lst[$j] < $min) {\n           \
    \     $min = @$lst[$j];\n                $min_index = $j;\n            }\n   \
    \     }\n        push @result, $min;\n        splice @$lst, $min_index, 1;\n \
    \       $max = @$lst[0];\n        $max_index = 0;\n        for ($j = 0; $j < @$lst;\
    \ $j++) {\n            if (@$lst[$j] > $max) {\n                $max = @$lst[$j];\n\
    \                $max_index = $j;\n            }\n        }\n        push @result,\
    \ $max;\n        splice @$lst, $max_index, 1;\n    }\n    return @result;\n}",
  "    my @result = ();\n    my @copy_lst = @$lst;\n    @copy_lst = sort {$a <=> $b}\
    \ @copy_lst;\n    my $len = @copy_lst;\n    for(my $i = 0; $i < $len; $i += 2)\
    \ {\n        push @result, $copy_lst[$i];\n    }\n    for(my $i = 1; $i < $len;\
    \ $i += 2) {\n        push @result, $copy_lst[$i];\n    }\n    return @result;\n\
    }", "    my @sorted_list = @$lst;\n    @sorted_list = sort { $a <=> $b } @sorted_list;\n\
    \    @sorted_list = sort { $b <=> $a } @sorted_list[1..$#sorted_list]\n      \
    \  if @sorted_list > 1;\n    return @sorted_list;\n}", "    my $len = scalar @$lst;\n\
    \    my @res = sort { $a <=> $b } @$lst;\n    my @even_inds = grep { $_ % 2 ==\
    \ 0 } 0..$len-1;\n    my @odd_inds = grep { $_ % 2 == 1 } 0..$len-1;\n    for\
    \ (0..(int $len/2)-1) {\n        ($res[$even_inds[$_]], $res[$odd_inds[$_]]) =\
    \ ($res[$odd_inds[$_]], $res[$even_inds[$_]]);\n    }\n    return \\@res;\n}",
  "    my @lst = @$lst;\n    my @res;\n    my $i = 0;\n    my $j = scalar(@lst) -\
    \ 1;\n    my $k = 0;\n    my $m = scalar(@lst) - 1;\n    while ($i <= $j) {\n\
    \        if ($k % 2 == 0) {\n            push @res, $lst[$i];\n            $i++;\n\
    \        } else {\n            push @res, $lst[$j];\n            $j--;\n     \
    \   }\n        $k++;\n    }\n    return \\@res;\n}", "    return @$lst if scalar\
    \ @$lst < 1;\n    my @sorted = sort { $a <=> $b } @$lst;\n    my $res = [];\n\
    \    my $left_idx = 0;\n    my $right_idx = $#sorted;\n    for (0..$#sorted) {\n\
    \        if ($_ % 2 == 0) {\n            push @$res, $sorted[$left_idx];\n   \
    \         $left_idx++;\n        } else {\n            push @$res, $sorted[$right_idx];\n\
    \            $right_idx--;\n        }\n    }\n    return @$res;\n}", "    my $lst_length\
    \ = scalar @$lst;\n    return [] if ($lst_length == 0);\n    my $res = [$lst->[0]];\n\
    \    for (my $i = 1; $i < $lst_length; $i++) {\n        my $new_element = splice\
    \ @$lst, 0, 1;\n        if ($i % 2 == 0) {\n            unshift @$res, $new_element;\n\
    \        } else {\n            push @$res, $new_element;\n        }\n    }\n \
    \   return $res;\n}", "    # your code goes here\n    my $ret = [];\n    return\
    \ $ret if ! $lst || ! @$lst;\n    my @sorted = sort { $a <=> $b } @$lst;\n   \
    \ my @left = @sorted;\n    for my $i (0 .. $#sorted) {\n        my $el = $i %\
    \ 2 ? pop @left : shift @left;\n        push @$ret, $el;\n    }\n    return $ret;\n\
    }", "    #$lst ||= [];\n    my(@lst) = @$lst;\n    my(@res);\n    my($min, $max);\n\
    \    while(1) {\n        # find min and max value\n        ($min, $max) = (undef,\
    \ undef);\n        foreach my $v (@lst) {\n            $min = $v if not defined\
    \ $min or $v < $min;\n            $max = $v if not defined $max or $v > $max;\n\
    \        }\n        last if not defined $min;\n        # write them to the result\
    \ and remove from source\n        push @res, $min;\n        push @res, $max;\n\
    \        @lst = grep {$_ != $min and $_ != $max} @lst;\n    }\n    return \\@res;\n\
    }", "    return $lst if not @$lst;\n    my $len = scalar @$lst;\n    my $mid =\
    \ int($len / 2);\n    my $min = min_index($lst);\n    my $max = max_index($lst);\n\
    \    my @res = ($lst->[$min]);\n    splice @$lst, $min, 1;\n    push @res, $lst->[$max];\n\
    \    splice @$lst, $max, 1;\n    my $i = 1;\n    while (@$lst) {\n        $min\
    \ = min_index($lst);\n        $max = max_index($lst);\n        push @res, $lst->[$max];\n\
    \        splice @$lst, $max, 1;\n        push @res, $lst->[$min];\n        splice\
    \ @$lst, $min, 1;\n        $i++;\n    }\n    return \\@res;\n}", "    my @lst2\
    \ = @$lst;\n    my @res;\n    while (@lst2) {\n        my $min = shift @lst2;\n\
    \        my $i = 1;\n        while ($i < @lst2) {\n            $min = $lst2[$i]\
    \ if $lst2[$i] < $min;\n            $i += 2;\n        }\n        push @res, $min;\n\
    \        $i = 0;\n        while ($i < @lst2) {\n            splice @lst2, $i,\
    \ 1 if $lst2[$i] == $min;\n            $i += 2;\n        }\n        $i = 1;\n\
    \        while ($i < @lst2) {\n            my $max = $lst2[$i];\n            my\
    \ $j = 0;\n            while ($j < @lst2) {\n                $max = $lst2[$j]\
    \ if $lst2[$j] > $max;\n                $j += 2;\n            }\n            push\
    \ @res, $max;\n            $j = 0;\n            while ($j < @lst2) {\n       \
    \         splice @lst2, $j, 1 if $lst2[$j] == $max;\n                $j += 2;\n\
    \            }\n            $i += 2;\n        }\n    }\n    return \\@res;\n}",
  "    my(@lst,@ret);\n    my($i,$j,$k,$max,$min);\n    my(@lst1,@lst2);\n    return()\
    \ if(!defined($lst));\n    @lst = @$lst;\n    while(@lst){\n        $max = $min\
    \ = $lst[0];\n        $i = $j = 0;\n        for $k(0..$#lst){\n            $min\
    \ = $lst[$k] if($lst[$k] < $min);\n            $max = $lst[$k] if($lst[$k] > $max);\n\
    \        }\n        push(@lst1,$min);\n        push(@lst2,$max);\n        @lst\
    \ = grep { $_ != $min && $_ != $max } @lst;\n    }\n    @ret = (@lst1,@lst2);\n\
    \    return(@ret);\n}", "    return [] if scalar(@$lst) == 0;\n    my $min = shift\
    \ @$lst;\n    $min = pop @$lst if $min > $lst->[0];\n    return [$min, @{strange_sort_list($lst)}];\n\
    }", "    my @sorted_lst = sort { $a <=> $b } @$lst;\n    my @result = ();\n  \
    \  my $size = @sorted_lst;\n    return @result if $size < 1;\n    my $i = 0;\n\
    \    while (@sorted_lst) {\n        push @result, shift @sorted_lst;\n       \
    \ push @result, pop @sorted_lst if @sorted_lst;\n    }\n    return @result;\n}",
  "    my $result = [];\n    my $all = $lst;\n    while (@$all) {\n        my $min\
    \ = max(@$all);\n        my $min_idx = min(@$all);\n        push @$result, $all->[$min_idx];\n\
    \        $all->[$min_idx] = $min;\n    }\n    return $result;\n}", "    my @numbers\
    \ = sort { $a <=> $b } @$lst;\n    my @sorted;\n    while (@numbers) {\n     \
    \   push @sorted, shift @numbers;\n        push @sorted, pop @numbers if @numbers;\n\
    \    }\n    return @sorted;\n}", "    my $min = min($lst);\n    my $max = max($lst);\n\
    \    my @strange_sort_list;\n    my $i = 0;\n    while (1) {\n        push @strange_sort_list,\
    \ $min if $min;\n        last if $min == $max;\n        $min = min(array_difference($lst,\
    \ \\@strange_sort_list));\n        push @strange_sort_list, $max if $max;\n  \
    \      last if $min == $max;\n        $max = max(array_difference($lst, \\@strange_sort_list));\n\
    \    }\n    return @strange_sort_list;\n}", "    my @lst = @$lst;\n    my @res;\n\
    \    my $max = $#lst;\n    my $min = 0;\n    my $i;\n    for ( $i = 0; $i <= $#lst;\
    \ $i++ ) {\n        if ( $i % 2 == 0 ) {\n            push @res, $lst[$min];\n\
    \            $min++;\n        }\n        else {\n            push @res, $lst[$max];\n\
    \            $max--;\n        }\n    }\n    return @res;\n}\n1;", "    my @lst\
    \ = @$lst;\n    my @lst_sorted = sort { $a <=> $b } @lst;\n    my @sorted_final;\n\
    \    my $i = 0;\n    my $len = scalar @lst_sorted;\n    for (; $i < $len; $i++)\
    \ {\n        my $j = $i < $len / 2 ? $i : $len - $i - 1;\n        push @sorted_final,\
    \ $lst_sorted[$j];\n    }\n    return \\@sorted_final;\n}", "    my $len = scalar\
    \ @$lst;\n    my $index = 0;\n    my $direction = 1;\n    my @result = ();\n \
    \   while ($index >= 0 && $index < $len) {\n        push @result, $lst->[$index];\n\
    \        if ($direction == 1) {\n            if ($index + 1 < $len && $lst->[$index\
    \ + 1] >= $lst->[$index]) {\n                $index++;\n            }\n      \
    \      else {\n                $direction = -1;\n                $index--;\n \
    \           }\n        }\n        else {\n            if ($index - 1 >= 0 && $lst->[$index\
    \ - 1] <= $lst->[$index]) {\n                $index--;\n            }\n      \
    \      else {\n                $direction = 1;\n                $index++;\n  \
    \          }\n        }\n    }\n    return \\@result;\n}", "    my $half = scalar(@$lst)\
    \ / 2;\n    if ($half < 1) {\n        return $lst;\n    }", "    my @buf;\n  \
    \  # TODO - write solution here\n    return @buf;\n}", "    my @min = sort { $a\
    \ <=> $b } @$lst;\n    my @max = sort { $b <=> $a } @$lst;\n    my @ret;\n   \
    \ while (@min && @max) {\n        push @ret, shift @min;\n        push @ret, shift\
    \ @max;\n    }\n    push @ret, @min if @min;\n    push @ret, @max if @max;\n \
    \   return \\@ret;\n}", "    my $c = scalar @$lst;\n    return [] if $c == 0;\n\
    \    return $lst if $c == 1;\n    my @maxs = max_list($lst);\n    my @mins = min_list($lst);\n\
    \    my @submaxs = @$lst;\n    my @submins = @$lst;\n    if(scalar @maxs > 1)\
    \ {\n        foreach my $n (@maxs) {\n            @submaxs = grep { $_ != $n }\
    \ @submaxs;\n        }\n    }\n    if(scalar @mins > 1) {\n        foreach my\
    \ $n (@mins) {\n            @submins = grep { $_ != $n } @submins;\n        }\n\
    \    }\n    my @max_maxs = max_list(\\@submaxs);\n    my @max_mins = min_list(\\\
    @submaxs);\n    my @min_maxs = max_list(\\@submins);\n    my @min_mins = min_list(\\\
    @submins);\n    my @res;\n    foreach my $n (@maxs) {\n        push @res, $n;\n\
    \    }\n    foreach my $n (@min_maxs) {\n        push @res, $n;\n    }\n    foreach\
    \ my $n (@max_mins) {\n        push @res, $n;\n    }\n    foreach my $n (@mins)\
    \ {\n        push @res, $n;\n    }\n    foreach my $n (@max_maxs) {\n        push\
    \ @res, $n;\n    }\n    foreach my $n (@min_mins) {\n        push @res, $n;\n\
    \    }\n    return \\@res;\n}", "    my $result = [];\n    my $min = min($lst);\n\
    \    while (@$lst) {\n        push(@$result, shift(@$lst));\n        push(@$result,\
    \ shift(@$lst)) if @$lst;\n    }\n    return $result;\n}", "    my $sorted = [];\n\
    \    return $sorted unless @$lst;\n    my @a = sort { $a <=> $b } @$lst;\n   \
    \ my $i = 0;\n    while(1) {\n        last unless @a;\n        push @$sorted,\
    \ shift @a;\n        my $x = pop @a;\n        last unless defined $x;\n      \
    \  push @$sorted, $x;\n    }\n    return $sorted;\n}", "    my $len = scalar @$lst;\n\
    \    return [] if $len == 0;\n    return [$lst->[0]] if $len == 1;\n    my @res\
    \ = ();\n    my $i = 0;\n    while ($i < $len) {\n        push @res, ($lst->[$i],\
    \ $lst->[$len - $i - 1]);\n        $i++;\n    }\n    return \\@res;\n}", "   \
    \ my @sorted = sort { $a <=> $b } @$lst;\n    my @ret;\n    my $i = 0;\n    my\
    \ $low = 0;\n    my $high = $#sorted;\n    while ($i <= $#sorted) {\n        if\
    \ ($i % 2 == 0) {\n            $ret[$i] = $sorted[$low];\n            $low++;\n\
    \        } else {\n            $ret[$i] = $sorted[$high];\n            $high--;\n\
    \        }\n        $i++;\n    }\n    return \\@ret;\n}", "    my @sl = sort {\
    \ $a <=> $b } @$lst;\n    my @ret;\n    my $top = scalar(@sl) - 1;\n    for my\
    \ $i (0 .. ($top / 2)) {\n        my $j = $top - $i;\n        $ret[$i * 2] = $sl[$i];\n\
    \        $ret[$i * 2 + 1] = $sl[$j];\n    }\n    if ($top % 2) {\n        $ret[$top]\
    \ = $sl[($top + 1) / 2];\n    }\n    return @ret;\n}", "    return [] if @$lst\
    \ == 0;\n    my $max = max($lst);\n    my $max_ind = first_index {$_ == $max}\
    \ @$lst;\n    my $lst1 = [@$lst[0..$max_ind-1]];\n    my $lst2 = [@$lst[$max_ind+1..$#$lst]];\n\
    \    my $min = min($lst1);\n    my $min_ind = first_index {$_ == $min} @$lst1;\n\
    \    my $lst11 = [@$lst1[0..$min_ind-1]];\n    my $lst12 = [@$lst1[$min_ind+1..$#$lst1]];\n\
    \    [@{strange_sort_list($lst11)},$min,$max,@{strange_sort_list($lst12)},@{strange_sort_list($lst2)}];\n\
    }", "    my $l = scalar @$lst;\n    return [sort { $a <=> $b } @$lst] if $l <\
    \ 2;\n    my $step = 1;\n    while($step <= $l) {\n        my $i = 0;\n      \
    \  while($i < $l - $step) {\n            ($lst->[$i], $lst->[$i + $step]) = ($lst->[$i\
    \ + $step], $lst->[$i]);\n            $i += 2 * $step;\n        }\n        $step\
    \ *= 2;\n    }\n    return $lst;\n}", "    return unless @$lst;\n    my @res =\
    \ sort { $a <=> $b } @$lst;\n    my $n = @res;\n    my $i = 1;\n    while ($i\
    \ < $n) {\n        push @res, splice @res, 0, 1;\n        $i += 2;\n    }\n  \
    \  return \\@res;\n}", "    my $n = @$lst;\n    my @res = ();\n    my $i = 0;\n\
    \    my $step = 1;\n    while ($i < $n) {\n        push @res, $lst->[$i];\n  \
    \      $i += $step;\n        $step *= -1;\n    }\n    return \\@res;\n}\n1;",
  "    my @res = ();\n    my $l = length($lst);\n    my @lst = split('', $lst);\n\
    \    for (my $i = 0; $i < $l; $i++) {\n        push(@res, ($i % 2 == 0) ? min(@lst)\
    \ : max(@lst));\n        @lst = grep { $_ != $res[$i] } @lst;\n    }\n    return\
    \ join('', @res);\n}", "    my $len = scalar @$lst;\n    my $strange_list = [];\n\
    \    my $i = 0;\n    my $start_index = 0;\n    my $end_index = $len - 1;\n   \
    \ for (1..$len) {\n        if ($i % 2 == 0) {\n            $strange_list->[$i]\
    \ = $lst->[$start_index];\n            $start_index++;\n        } else {\n   \
    \         $strange_list->[$i] = $lst->[$end_index];\n            $end_index--;\n\
    \        }\n        $i++;\n    }\n    return $strange_list;\n}", "    my $sorted\
    \ = [ sort { $a <=> $b } @$lst ];\n    my $r = [];\n    my $small = [];\n    my\
    \ $big = [];\n    while (@$sorted) {\n        push @$r, pop @$sorted;\n      \
    \  if (@$sorted) {\n            push @$r, shift @$sorted;\n        }\n    }\n\
    \    return $r;\n}", "    my @ret;\n    my @min = sort { $a <=> $b } @$lst;\n\
    \    my @max = sort { $b <=> $a } @$lst;\n    my $len = @$lst;\n    for (my $i\
    \ = 0; $i < $len; $i++) {\n        if ($i & 1) {\n            push @ret, shift\
    \ @max;\n        } else {\n            push @ret, shift @min;\n        }\n   \
    \ }\n    return \\@ret;\n}", "    my $len = scalar @$lst;\n    return @$lst if\
    \ $len <= 1;\n    my @a = @$lst;\n    my @b = ();\n    while (scalar @a > 0) {\n\
    \        push @b, shift @a;\n        push @b, pop @a if scalar @a > 0;\n    }\n\
    \    return @b;\n}", "    my $length = @$lst;\n    my @res;\n    while(@$lst)\
    \ {\n        push @res, shift @$lst;\n        push @res, pop @$lst;\n    }\n \
    \   return (scalar @res == $length) ? @res : undef;\n}", "    if (@$lst == 0)\
    \ {\n        return [];\n    }\n    my $ret = [];\n    my $minus = [];\n    my\
    \ $plus = [];\n    my $sign = $lst->[0] <=> 0;\n    while (@$lst) {\n        my\
    \ $this = shift @$lst;\n        if ($this <=> 0 == $sign) {\n            push\
    \ @$plus, $this;\n        } else {\n            push @$minus, $this;\n       \
    \ }\n    }\n    @$minus = sort {$a <=> $b} @$minus;\n    @$plus = sort {$b <=>\
    \ $a} @$plus;\n    for my $i (0..$#$minus) {\n        if ($i%2 == 0) {\n     \
    \       push @$ret, pop @$minus;\n        } else {\n            push @$ret, shift\
    \ @$minus;\n        }\n    }\n    for my $i (0..$#$plus) {\n        if ($i%2 ==\
    \ 0) {\n            push @$ret, pop @$plus;\n        } else {\n            push\
    \ @$ret, shift @$plus;\n        }\n    }\n    return $ret;\n}", "    my $i;\n\
    \    my @sort_list;\n    my @t_lst = @$lst;\n    while (@t_lst > 0) {\n      \
    \  $i = &min(@t_lst);\n        push @sort_list, $t_lst[$i];\n        splice @t_lst,\
    \ $i, 1;\n        $i = &max(@t_lst);\n        push @sort_list, $t_lst[$i];\n \
    \       splice @t_lst, $i, 1;\n    }\n    return @sort_list;\n}", "    my $l =\
    \ @$lst;\n    return [] if $l == 0;\n    my @new_lst = ($lst->[0]);\n    return\
    \ \\@new_lst if $l == 1;\n    my $small = 1;\n    my $large = $l - 1;\n    while\
    \ ($small <= $large) {\n        push @new_lst, $lst->[$large];\n        if ($small\
    \ < $large) {\n            push @new_lst, $lst->[$small];\n        }\n       \
    \ $small++;\n        $large--;\n    }\n    return \\@new_lst;\n}", "    my @result\
    \ = ();\n    if (scalar(@$lst) == 0) {\n        return @result;\n    }\n    my\
    \ @working_list = sort {$a <=> $b} @$lst;\n    for (my $i = 0; $i < scalar(@working_list);\
    \ $i++) {\n        if ($i % 2 == 0) {\n            push @result, shift @working_list;\n\
    \        } else {\n            push @result, pop @working_list;\n        }\n \
    \   }\n    return @result;\n}", "    my @indexes = (0 .. @$lst - 1);\n    @indexes\
    \ = sort { $lst->[$a] <=> $lst->[$b] } @indexes;\n    @$lst[@indexes];\n}", " \
    \   return [] if @$lst == 0;\n    my $min = min @$lst;\n    my @remain = grep\
    \ { $_ != $min } @$lst;\n    my $max = max @remain;\n    my @remain2 = grep {\
    \ $_ != $max } @remain;\n    return [$min, $max, @{strange_sort_list(\\@remain2)}];\n\
    }", "    return [] if not @$lst;\n    my $max = $lst->[0];\n    for my $i (@$lst)\
    \ {\n        $max = $i if $i > $max;\n    }\n    my @order = (0, $max);\n    my\
    \ @ans = ($lst->[0], $max);\n    for (1..$#$lst-1) {\n        my $min = $max;\n\
    \        for my $i (@$lst) {\n            if ($i < $min and not grep {$_ == $i}\
    \ @ans) {\n                $min = $i;\n            }\n        }\n        push\
    \ @ans, $min;\n        push @order, $min;\n        my $max2 = $min;\n        for\
    \ my $i (@$lst) {\n            if ($i > $max2 and not grep {$_ == $i} @ans) {\n\
    \                $max2 = $i;\n            }\n        }\n        push @ans, $max2;\n\
    \        push @order, $max2;\n    }\n    return \\@ans;\n}", "    my @sorted_list\
    \ = sort { $a <=> $b } @$lst;\n    my $last_idx = $#sorted_list;\n    my @sorted_list_copy\
    \ = @sorted_list;\n    @sorted_list = ();\n    my $i = 0;\n    my $inc = 1;\n\
    \    for (1..@sorted_list_copy) {\n        push @sorted_list, splice(@sorted_list_copy,\
    \ $i, 1);\n        if ($inc) {\n            if ($i == $last_idx) {\n         \
    \       $inc = 0;\n                $i--;\n            } else {\n             \
    \   $i++;\n            }\n        } else {\n            if ($i == 0) {\n     \
    \           $inc = 1;\n                $i++;\n            } else {\n         \
    \       $i--;\n            }\n        }\n    }\n    @sorted_list;\n}", "    return\
    \ [] if @$lst == 0;\n    my $i = 0;\n    my $j = scalar(@$lst) - 1;\n    my @result\
    \ = ($lst->[$i]);\n    while($i != $j){\n        push @result, $lst->[$j];\n \
    \       $i += 1;\n        last if $i == $j;\n        push @result, $lst->[$i];\n\
    \        $j -= 1;\n    }\n    return \\@result;\n}", "    my(@lst_sorted) = sort\
    \ {$a <=> $b} @$lst;\n    my(@lst_sorted_rev) = reverse(@lst_sorted);\n    my(@res);\n\
    \    if(@lst_sorted % 2 == 0) {\n        push(@res, splice(@lst_sorted, 0, 1));\n\
    \        push(@res, splice(@lst_sorted_rev, 0, 1));\n    } else {\n        push(@res,\
    \ splice(@lst_sorted, 0, 1));\n    }\n    return @res;\n}", "    my $n = scalar\
    \ @$lst;\n    return $lst if $n <= 1;\n    my @result;\n    my $odd = 1;\n   \
    \ my $head = $lst->[0];\n    my $tail = $lst->[$n - 1];\n    for (my $i = 1; $i\
    \ < $n - 1; $i += 2) {\n        $result[$i] = $lst->[$i];\n    }\n    for (my\
    \ $i = 0; $i < $n - 1; $i += 2) {\n        $result[$i] = $lst->[$i];\n    }\n\
    \    if ($odd) {\n        unshift @result, $head;\n        push @result, $tail;\n\
    \    }\n    return \\@result;\n}", "    my(@ret);\n    my($i, $k, $j);\n    for\
    \ ($i = 0; $i < @$lst; $i++) {\n        for ($k = $i; $k < @$lst; $k++) {\n  \
    \          if (!defined($ret[$i]) ||\n                    ($i % 2 && $lst->[$k]\
    \ > $ret[$i]) ||\n                    ($i % 2 == 0 && $lst->[$k] < $ret[$i]))\
    \ {\n                $ret[$i] = $lst->[$k];\n                $j = $k;\n      \
    \      }\n        }\n        splice(@$lst, $j, 1);\n    }\n    return \\@ret;\n\
    }", '    my $c = 1;', '    my $odd = $lst;', "    my @result = ();\n    my @sorted\
    \ = sort { $a <=> $b } @$lst;\n    my $i = 1;\n    for(my $j = 0; $j < scalar(@sorted);\
    \ $j++){\n        $result[$j] = $sorted[$i];\n        $i += 2;\n        $i -=\
    \ scalar(@sorted) if $i >= scalar(@sorted);\n    }\n    return @result;\n}", " \
    \   if(@$lst <= 1) {\n        return $lst;\n    }\n    my $min_idx = 0;\n    for(my\
    \ $i = 1; $i < @$lst; $i++) {\n        if($lst->[$i] < $lst->[$min_idx]) {\n \
    \           $min_idx = $i;\n        }\n    }\n    my $min = $lst->[$min_idx];\n\
    \    splice(@$lst, $min_idx, 1);\n    my $max_idx = 0;\n    for(my $i = 1; $i\
    \ < @$lst; $i++) {\n        if($lst->[$i] > $lst->[$max_idx]) {\n            $max_idx\
    \ = $i;\n        }\n    }\n    my $max = $lst->[$max_idx];\n    splice(@$lst,\
    \ $max_idx, 1);\n    unshift(@$lst, $max);\n    unshift(@$lst, $min);\n    return\
    \ $lst;\n}", "    my @lst = @$lst;\n    my @new_lst;\n    my $i = 0;\n    while\
    \ (@lst) {\n        my $min = min @lst;\n        my $max = max @lst;\n       \
    \ if ($i % 2 == 0) {\n            push @new_lst, $min;\n            splice @lst,\
    \ first_index { $_ == $min } @lst, 1;\n        } else {\n            push @new_lst,\
    \ $max;\n            splice @lst, first_index { $_ == $max } @lst, 1;\n      \
    \  }\n        $i++;\n    }\n    return \\@new_lst;\n}", "    my @lst = @$lst;\n\
    \    my $n = @lst;\n    if ($n < 1) {\n        return [];\n    }\n    if ($n ==\
    \ 1) {\n        return [$lst[0]];\n    }\n    if ($n == 2) {\n        return [$lst[0],\
    \ $lst[1]];\n    }\n    my @res = ($lst[0]);\n    my $min_i = 0;\n    my $max_i\
    \ = 1;\n    while (1) {\n        last if $max_i == $n;\n        if ($lst[$max_i]\
    \ > $lst[$min_i]) {\n            push @res, $lst[$max_i];\n            last if\
    \ ++$max_i == $n;\n        }\n        push @res, $lst[$min_i];\n        last if\
    \ ++$min_i == $n;\n    }\n    $max_i -= $n;\n    $min_i -= $n;\n    for my $k\
    \ (1 .. $n - 2) {\n        push @res, $lst[$max_i];\n        last if ++$max_i\
    \ == $n;\n        push @res, $lst[$min_i];\n        last if ++$min_i == $n;\n\
    \    }\n    return \\@res;\n}", "    my @sorted = sort { $a <=> $b } @$lst;\n\
    \    my @res = ();\n    while(@sorted) {\n        push @res, shift @sorted;\n\
    \        push @res, pop @sorted;\n    }\n    return \\@res;\n}", "    my @lst\
    \ = @$lst;\n    my @res;\n    my $min;\n    my $max;\n    while (@lst) {\n   \
    \     $min = $lst[0];\n        $max = $lst[0];\n        foreach my $i (@lst) {\n\
    \            if ($i > $max) {\n                $max = $i;\n            }\n   \
    \         if ($i < $min) {\n                $min = $i;\n            }\n      \
    \  }\n        @lst = grep {$_ != $min} @lst;\n        @lst = grep {$_ != $max}\
    \ @lst;\n        push @res, $min;\n        push @res, $max;\n    }\n    return\
    \ @res;\n}", "    my @ret = ();\n    return () if @$lst == 0;\n    while(@$lst)\
    \ {\n        my $min = $lst->[0];\n        my $min_i = 0;\n        for my $i (1..$#$lst)\
    \ {\n            if ($lst->[$i] < $min) {\n                $min = $lst->[$i];\n\
    \                $min_i = $i;\n            }\n        }\n        push @ret, $min;\n\
    \        splice @$lst, $min_i, 1;\n        if (@$lst) {\n            my $max =\
    \ $lst->[0];\n            my $max_i = 0;\n            for my $i (1..$#$lst) {\n\
    \                if ($lst->[$i] > $max) {\n                    $max = $lst->[$i];\n\
    \                    $max_i = $i;\n                }\n            }\n        \
    \    push @ret, $max;\n            splice @$lst, $max_i, 1;\n        }\n    }\n\
    \    return @ret;\n}", "    my(@result, $min, $max);\n    while(scalar(@$lst)\
    \ > 0) {\n        $min = min(@$lst);\n        push(@result, $min);\n        $lst\
    \ = [grep { $_ != $min } @$lst];\n        last if(scalar(@$lst) == 0);\n     \
    \   $max = max(@$lst);\n        push(@result, $max);\n        $lst = [grep { $_\
    \ != $max } @$lst];\n    }\n    return \\@result;\n}", "    my @result = ();\n\
    \    my @max_first = $lst->select_by_order('max', 0, 'min', 1);\n    my @min_first\
    \ = $lst->select_by_order('min', 0, 'max', 1);\n    while(@max_first || @min_first)\
    \ {\n        if (@max_first) {\n            push @result, shift @max_first;\n\
    \        }\n        if (@min_first) {\n            push @result, shift @min_first;\n\
    \        }\n    }\n    @result;\n}", "    return $lst if (scalar(@$lst) == 0);\n\
    \    my @nlst = (sort {$a <=> $b} @$lst);\n    my @ans = ($nlst[0]);\n    my $l\
    \ = 1;\n    my $r = $#nlst;\n    my $q = 1;\n    while ($l <= $r) {\n        $ans[$q++]\
    \ = $nlst[$r--];\n        $ans[$q++] = $nlst[$l++] if ($l <= $r);\n    }\n   \
    \ return \\@ans;\n}", "    my(@l) = sort {$a <=> $b} @$lst;\n    my($i) = 1;\n\
    \    while ($i < scalar(@l)) {\n        if ($i % 2 == 1) {\n            @l = (@l[0..$i-1],reverse(@l[$i..$#l]));\n\
    \        }\n        $i += 1;\n    }\n    return @l;\n}", "    my(@rst, $len);\n\
    \    $len = @$lst;\n    if ($len == 0) {\n        return $lst;\n    }\n    @rst\
    \ = ();\n    @rst[0] = $lst->[0];\n    for (my $i = 0; $i < $len; $i++) {\n  \
    \      my($min, $max, $min_idx, $max_idx, $sublst);\n        $sublst = [@$lst[1..($len-1)]];\n\
    \        $min = $sublst->[0];\n        $max = $sublst->[0];\n        $min_idx\
    \ = 0;\n        $max_idx = 0;\n        for (my $j = 0; $j < $len-1; $j++) {\n\
    \            if ($sublst->[$j] > $max) {\n                $max = $sublst->[$j];\n\
    \                $max_idx = $j;\n            }\n            if ($sublst->[$j]\
    \ < $min) {\n                $min = $sublst->[$j];\n                $min_idx =\
    \ $j;\n            }\n        }\n        if ($i % 2 == 0) {\n            push(@rst,\
    \ $max);\n            splice(@$sublst, $max_idx, 1);\n        } else {\n     \
    \       push(@rst, $min);\n            splice(@$sublst, $min_idx, 1);\n      \
    \  }\n        $lst = $sublst;\n    }\n    return \\@rst;\n}", "    return [] if\
    \ scalar(@$lst) == 0;\n    my $min = min($lst);\n    my $max = max($lst);\n  \
    \  return [$min, $max] if scalar(@$lst) == 2;\n    return [$min, $max, min(difference($lst,\
    \ [$min, $max]))] if scalar(@$lst) == 3;\n    return [$min, $max, min(difference($lst,\
    \ [$min, $max])), max(difference($lst, [$min, $max]))] if scalar(@$lst) == 4;\n\
    \    return [$min, $max, min(difference($lst, [$min, $max])), max(difference($lst,\
    \ [$min, $max])),\n            min(difference(difference($lst, [$min, $max]),\
    \ [min(difference($lst, [$min, $max]))]))] if scalar(@$lst) == 5;\n    return\
    \ [$min, $max, min(difference($lst, [$min, $max])), max(difference($lst, [$min,\
    \ $max])),\n            min(difference(difference($lst, [$min, $max]), [min(difference($lst,\
    \ [$min, $max]))])),\n            max(difference(difference($lst, [$min, $max]),\
    \ [min(difference($lst, [$min, $max]))]))] if scalar(@$lst) == 6;\n    return\
    \ [$min, $max, min(difference($lst, [$min, $max])), max(difference($lst, [$min,\
    \ $max])),\n            min(difference(difference($lst, [$min, $max]), [min(difference($lst,\
    \ [$min, $max]))])),\n            max(difference(difference($lst, [$min, $max]),\
    \ [min(difference($lst, [$min, $max]))])),\n            min(difference(difference(diff",
  "    my @arr = @$lst;\n    my @res;\n    while (@arr) {\n        my $min = min(@arr);\n\
    \        my $max = max(@arr);\n        push @res, $min;\n        if ($min != $max)\
    \ {\n            push @res, $max;\n        }\n        @arr = grep {$_ != $min\
    \ && $_ != $max} @arr;\n    }\n    return @res;\n}", "    my $result = [];\n \
    \   my $min = $lst->[0];\n    my $max = $lst->[0];\n    for (my $i = 0; $i < @$lst;\
    \ $i++) {\n        if ($lst->[$i] < $min) {\n            $min = $lst->[$i];\n\
    \        }\n        if ($lst->[$i] > $max) {\n            $max = $lst->[$i];\n\
    \        }\n    }\n    my $temp = $min;\n    while ($min <= $max) {\n        if\
    \ ($min == $temp) {\n            push(@$result, $min);\n            $min++;\n\
    \        } else {\n            push(@$result, $max);\n            $max--;\n  \
    \      }\n    }\n    return $result;\n}", "    my $sorted_list = [];\n    my $sorted_lst\
    \ = &quick_sort($lst);\n    my $list_length = @$sorted_lst;\n    my $mid = $list_length\
    \ % 2 == 0 ? $list_length / 2 : ($list_length / 2) + 1;\n    for (my $i = 0; $i\
    \ < $mid; $i++) {\n        my $max = $sorted_lst->[$list_length - $i - 1];\n \
    \       my $min = $sorted_lst->[$i];\n        push @$sorted_list, $min;\n    \
    \    push @$sorted_list, $max;\n    }\n    return $sorted_list;\n}", "    my @array\
    \ = @$lst;\n    my $n = @array;\n    if ($n == 0) {\n        return @array;\n\
    \    }\n    elsif ($n == 1) {\n        return @array;\n    }\n    elsif ($n ==\
    \ 2) {\n        if ($array[0] > $array[1]) {\n            return $array[1], $array[0];\n\
    \        }\n        else {\n            return @array;\n        }\n    }\n   \
    \ else {\n        my @aux;\n        my $i = 0;\n        while ($i < $n) {\n  \
    \          my $pos = get_min_pos(\\@array);\n            my $min = $array[$pos];\n\
    \            if ($i % 2 == 0) {\n                push @aux, $min;\n          \
    \  }\n            else {\n                unshift @aux, $min;\n            }\n\
    \            splice @array, $pos, 1;\n            $i++;\n        }\n        return\
    \ @aux;\n    }\n}", "    return [] if @$lst == 0;\n    my @ans = ();\n    my @pos\
    \ = ();\n    my @neg = ();\n    for my $i (@$lst) {\n        if ($i >= 0) {\n\
    \            push @pos, $i;\n        } else {\n            push @neg, $i;\n  \
    \      }\n    }\n    while (scalar @pos > 0 || scalar @neg > 0) {\n        if\
    \ (scalar @pos > 0) {\n            push @ans, shift @pos;\n        }\n       \
    \ if (scalar @neg > 0) {\n            push @ans, pop @neg;\n        }\n    }\n\
    \    return \\@ans;\n}", "    my(@odd, @even);\n    if (@$lst % 2 == 0) {\n  \
    \      @odd = @$lst[1,3..$#$lst];\n        @even = @$lst[0,2..$#$lst];\n    }\
    \ else {\n        @odd = @$lst[0,2..$#$lst];\n        @even = @$lst[1,3..$#$lst];\n\
    \    }\n    my @res;\n    for (0..($#$lst/2)) {\n        push @res, $odd[$_];\n\
    \        push @res, $even[$_];\n    }\n    return \\@res;\n}", "    my $cnt =\
    \ scalar @$lst;\n    my $min = $lst->[0];\n    my $max = $lst->[0];\n    my $lst2\
    \ = [];\n    foreach my $el(@$lst) {\n        if ($el < $min) {\n            $min\
    \ = $el;\n        }\n        if ($el > $max) {\n            $max = $el;\n    \
    \    }\n    }\n    my $temp = undef;\n    my $b = 0;\n    my $e = $cnt-1;\n  \
    \  while(($e-$b) > 1) {\n        $lst2->[$b] = $min;\n        $lst2->[$e] = $max;\n\
    \        $b++;\n        $e--;\n    }\n    if(($e-$b) == 1) {\n        $lst2->[$b]\
    \ = $max;\n        $lst2->[$e] = $min;\n    }\n    if(($e-$b) == 0) {\n      \
    \  $lst2->[$b] = $min;\n    }\n    return $lst2;\n}", "    my @result = ( );\n\
    \    my @idx = (0 .. (scalar(@$lst) - 1));\n    my $num = scalar(@$lst);\n   \
    \ for (my $i = 0; $i < $num; $i++) {\n        if ($i % 2 == 0) {\n           \
    \ push @result, $lst->[min_index(\\@idx, $lst)];\n        } else {\n         \
    \   push @result, $lst->[max_index(\\@idx, $lst)];\n        }\n    }\n    return\
    \ \\@result;\n}", "    my @result = ();\n    my @lst_clone = @$lst;\n    my @lst_clone_sorted\
    \ = sort { $a <=> $b } @lst_clone;\n    for (my $i = 0; $i < @lst_clone_sorted;\
    \ $i++) {\n        push @result, $lst_clone_sorted[$i] if ($i % 2 == 0);\n   \
    \     unshift @result, $lst_clone_sorted[$i] if ($i % 2 == 1);\n    }\n    return\
    \ \\@result;\n}", "    my $len = scalar @$lst;\n    my @res = (undef) x $len;\n\
    \    my $a = 1;\n    my $b = $len - 1;\n    for (my $i = 0; $i < $len; $i++) {\n\
    \        if ($i % 2 == 0) {\n            $res[$i] = $lst->[$a];\n            $a++;\n\
    \        } else {\n            $res[$i] = $lst->[$b];\n            $b--;\n   \
    \     }\n    }\n    return \\@res;\n}", "    return $lst if scalar @$lst < 2;\n\
    \    my ($left, $right) = split_list($lst);\n    my $left_sorted = strange_sort_list($left);\n\
    \    my $right_sorted = strange_sort_list($right);\n    return merge_lists($left_sorted,\
    \ $right_sorted);\n}", "    return () unless @$lst;\n    my @result;\n    for\
    \ (my $i = 0; $i < @$lst; ++$i) {\n        my @lst2 = grep { $_ != $lst->[$i]\
    \ } @$lst;\n        if ($i % 2 == 0) {\n            push @result, $lst->[$i],\
    \ strange_sort_list(\\@lst2);\n        } else {\n            push @result, reverse\
    \ strange_sort_list(\\@lst2), $lst->[$i];\n        }\n    }\n    return @result;\n\
    }", "    my $cnt = scalar @$lst;\n    return [] if ($cnt == 0);\n    my $res =\
    \ [];\n    my $inc = int($cnt / 2);\n    my $i = 0;\n    my $j = 0;\n    while\
    \ ($i < $cnt) {\n        $res->[$i] = $lst->[$j];\n        $j += $inc;\n     \
    \   $j = $cnt - 1 - $j if $j >= $cnt;\n        $i += 1;\n    }\n    return $res;\n\
    }", "    return [] if !@$lst;\n    my @sorted = sort { $a <=> $b } @$lst;\n  \
    \  my $ret = [];\n    while(@sorted) {\n        push @$ret, shift @sorted;\n \
    \       push @$ret, pop @sorted if @sorted;\n    }\n    return $ret;\n}", "  \
    \  my @lst = @$lst;\n    my @res;\n    my $i = 0;\n    my $j = $#lst;\n    my\
    \ $sort = 1;\n    while($i <= $j) {\n        if($sort) {\n            push @res,\
    \ $lst[$i];\n            $i++;\n        } else {\n            push @res, $lst[$j];\n\
    \            $j--;\n        }\n        $sort = !$sort;\n    }\n    return @res;\n\
    }", "    my @result = ();\n    my @sorted = sort { $a <=> $b } @$lst;\n    my\
    \ $min = 0;\n    my $max = scalar(@sorted) - 1;\n    while ($min <= $max) {\n\
    \        push @result, $sorted[$min];\n        push @result, $sorted[$max] if\
    \ $min != $max;\n        $min++;\n        $max--;\n    }\n    return @result;\n\
    }", "    my @lst = @$lst;\n    my $length = scalar @lst;\n    my $res = [];\n\
    \    if ($length) {\n        my @sorted = sort {$a <=> $b} @lst;\n        my $flag\
    \ = 1;\n        my $l = 0;\n        my $r = $length - 1;\n        for (my $i =\
    \ 0; $i < $length; $i++) {\n            if ($flag) {\n                $res->[$i]\
    \ = $sorted[$l];\n                $l++;\n            } else {\n              \
    \  $res->[$i] = $sorted[$r];\n                $r--;\n            }\n         \
    \   $flag = not $flag;\n        }\n    }\n    return $res;\n}", "    my @res =\
    \ ();\n    my @lst = sort { $a <=> $b } @$lst;\n    while(@lst) {\n        my\
    \ $min = shift @lst;\n        my $max = pop @lst;\n        push @res, $min, $max;\n\
    \    }\n    return \\@res;\n}", "    my @lst = @$lst;\n    my @ans;\n    while(@lst)\
    \ {\n        push @ans, shift @lst;\n        unshift @lst, pop @lst;\n    }\n\
    \    return @ans;\n}", "    my @res = ();\n    my @copy = @$lst;\n    while(scalar\
    \ @copy > 0) {\n        my $max = max @copy;\n        my $min = min @copy;\n \
    \       if($max == $min) {\n            push @res, $max;\n            @copy =\
    \ grep { $_ != $max } @copy;\n        } else {\n            push @res, $min;\n\
    \            push @res, $max;\n            @copy = grep { $_ != $max && $_ !=\
    \ $min } @copy;\n        }\n    }\n    return \\@res;\n}", "    my @lst = @$lst;\n\
    \    my @order = map {$_->[0]} sort {$a->[1] <=> $b->[1]} map {[$_, rand()]} 0..$#lst;\n\
    \    my @res = map {$lst[$_]} @order;\n    return @res;\n}", "    if(scalar(@$lst)\
    \ == 0) {\n        return [];\n    }\n    if(scalar(@$lst) == 1) {\n        return\
    \ $lst;\n    }\n    my $min = $lst->[0];\n    my $min_idx = 0;\n    for(my $i\
    \ = 1; $i < scalar(@$lst); $i++) {\n        if($lst->[$i] < $min) {\n        \
    \    $min = $lst->[$i];\n            $min_idx = $i;\n        }\n    }\n    splice(@$lst,\
    \ $min_idx, 1);\n    my $max = $lst->[0];\n    my $max_idx = 0;\n    for(my $i\
    \ = 1; $i < scalar(@$lst); $i++) {\n        if($lst->[$i] > $max) {\n        \
    \    $max = $lst->[$i];\n            $max_idx = $i;\n        }\n    }\n    splice(@$lst,\
    \ $max_idx, 1);\n    my $new_lst = strange_sort_list($lst);\n    my $res = [$min,\
    \ $max];\n    for(my $i = 0; $i < scalar(@$new_lst); $i++) {\n        push(@$res,\
    \ $new_lst->[$i]);\n    }\n    return $res;\n}", "    my $sorted_lst = [];\n \
    \   my $unsorted_lst = $lst;\n    while (scalar @$unsorted_lst > 0) {\n      \
    \  my $min = min($unsorted_lst);\n        my $max = max($unsorted_lst);\n    \
    \    push @$sorted_lst, $min;\n        push @$sorted_lst, $max;\n        $unsorted_lst\
    \ = _remove_elem($unsorted_lst, $min);\n        $unsorted_lst = _remove_elem($unsorted_lst,\
    \ $max);\n    }\n    return $sorted_lst;\n}", "    my $len = scalar @$lst;\n \
    \   return $lst if $len == 0;\n    my $prev = shift @$lst;\n    my $idx = 0;\n\
    \    while(@$lst){\n        my($a, $b);\n        if ($idx++ % 2 == 0){\n     \
    \       $a = 0;\n            $b = $#$lst;\n        } else {\n            $a =\
    \ $#$lst;\n            $b = 0;\n        }\n        push @$lst, $prev;\n      \
    \  $prev = splice @$lst, $a, 1;\n    }\n    push @$lst, $prev;\n    return $lst;\n\
    }", "    my @rv = ();\n    my @lst = sort { $a <=> $b } @$lst;\n    my $i = 0;\n\
    \    my $j = $#lst;\n    my $turn = 1;\n    while ($i <= $j) {\n        if ($turn)\
    \ {\n            push @rv, $lst[$i];\n            $i++;\n        } else {\n  \
    \          push @rv, $lst[$j];\n            $j--;\n        }\n        $turn =\
    \ 1 - $turn;\n    }\n    return @rv;\n}", "    my @lst = @$lst;\n    my @res;\n\
    \    my $imin = 0;\n    my $imax = $#lst;\n    my $dir = '+';\n    while ($imin\
    \ <= $imax) {\n        if ($dir eq '+') {\n            push @res, $lst[$imin];\n\
    \            $imin++;\n        }\n        else {\n            push @res, $lst[$imax];\n\
    \            $imax--;\n        }\n        $dir = $dir eq '+' ? '-' : '+';\n  \
    \  }\n    return \\@res;\n}\n1;", "    my @result = ();\n    my $lst_len = scalar(@$lst);\n\
    \    if($lst_len % 2 == 0) {\n        for (my $i = 0; $i < $lst_len; $i += 2)\
    \ {\n            push @result, $lst->[$i];\n            push @result, $lst->[$lst_len\
    \ - 1 - $i];\n        }\n    } else {\n        for (my $i = 0; $i < $lst_len -\
    \ 1; $i += 2) {\n            push @result, $lst->[$i];\n            push @result,\
    \ $lst->[$lst_len - 1 - $i];\n        }\n        push @result, $lst->[$lst_len\
    \ - 1];\n    }\n    return \\@result;\n}", "    my(@result);\n    if (@$lst) {\n\
    \        my($min) = min(@$lst);\n        my($max) = max(@$lst);\n        push(@result,\
    \ ($min) x (grep($_ == $min, @$lst)));\n        push(@result, ($max) x (grep($_\
    \ == $max, @$lst)));\n        my(@rest) = grep(($_ != $min) && ($_ != $max), @$lst);\n\
    \        @result = (@result, &strange_sort_list(\\@rest));\n    }\n    return\
    \ @result;\n}", "    my @result = ();\n    my @tmp = ();\n    @tmp = sort {$a\
    \ <=> $b} @$lst;\n    my $i = 0;\n    my $j = $#tmp;\n    while($i <= $j) {\n\
    \        push @result, $tmp[$i];\n        $i++;\n        if($i <= $j) {\n    \
    \        push @result, $tmp[$j];\n            $j--;\n        }\n    }\n    return\
    \ @result;\n}", "    # ...\n}", "    return [] if not @$lst;\n    my $res = [];\n\
    \    my @sorted = sort { $a <=> $b } @$lst;\n    my $i = 0;\n    while (@sorted)\
    \ {\n        $res->[$i] = shift @sorted;\n        $i += 2;\n    }\n    $i = 1;\n\
    \    while (@sorted) {\n        $res->[$i] = pop @sorted;\n        $i += 2;\n\
    \    }\n    return $res;\n}", "    my @result;\n    my @lst = sort { $a <=> $b\
    \ } @$lst;\n    my $rev = 1;\n    while (@lst) {\n        my $val = shift @lst;\n\
    \        push @result, $val;\n        if (@lst) {\n            $val = pop @lst;\n\
    \            push @result, $val;\n        }\n    }\n    return \\@result;\n}",
  "    my @sorted = sort { $a <=> $b } @$lst;\n    my $l = @sorted;\n    my @sort_lst;\n\
    \    while (@sorted) {\n        if (scalar @sorted == 1) {\n            push @sort_lst,\
    \ shift @sorted;\n        } else {\n            push @sort_lst, shift @sorted;\n\
    \            push @sort_lst, pop @sorted;\n        }\n    }\n    return \\@sort_lst;\n\
    }", "    my @result;\n    my @lst = sort { $a <=> $b } @$lst;\n    my $count =\
    \ $#lst / 2;\n    my @sorted = grep { $_ < $count } @lst;\n    my @unsorted =\
    \ grep { $_ >= $count } @lst;\n    my $flag = 0;\n    for my $i (0 .. $#sorted)\
    \ {\n        $result[$i] = $sorted[$i];\n        $result[$#sorted - $i] = $unsorted[$i];\n\
    \    }\n    $result[$#sorted] = $unsorted[$#sorted] if $#lst % 2;\n    return\
    \ \\@result;\n}", "    my $strange_lst = [];\n    my $ascending = 1;\n    my $num\
    \ = scalar @$lst;\n    for (my $i = 0; $i < $num; $i++) {\n        if ($ascending)\
    \ {\n            push @$strange_lst, min($lst);\n        } else {\n          \
    \  push @$strange_lst, max($lst);\n        }\n        $ascending = 1 - $ascending;\n\
    \    }\n    return $strange_lst;\n}", "    return $lst if !@$lst;\n    my $res\
    \ = [];\n    my $min_idx = 0;\n    my $max_idx = $#$lst;\n    push @$res, $lst->[$min_idx++];\n\
    \    push @$res, $lst->[$max_idx--];\n    while($min_idx < $max_idx) {\n     \
    \   push @$res, $lst->[$min_idx++];\n        push @$res, $lst->[$max_idx--];\n\
    \    }\n    push @$res, $lst->[$min_idx] if $min_idx == $max_idx;\n    return\
    \ $res;\n}", "    if (@$lst < 2) {\n        return $lst;\n    }\n    my @lst =\
    \ sort { $a <=> $b } @$lst;\n    my @res;\n    push @res, splice @lst, 0, 1;\n\
    \    for (1..(@lst-1)) {\n        push @res, splice @lst, -1, 1;\n        push\
    \ @res, splice @lst, 0, 1;\n    }\n    if (@lst) {\n        push @res, splice\
    \ @lst, 0, 1;\n    }\n    return \\@res;\n}", "    my @result;\n    my @sorted\
    \ = sort { $a <=> $b } @$lst;\n    while (@sorted) {\n        my $last = pop @sorted;\n\
    \        unshift @result, $last;\n        my $first = shift @sorted;\n       \
    \ push @result, $first if defined $first;\n    }\n    return \\@result;\n}", " \
    \   my @sorted = sort {$a <=> $b} @$lst;\n    my @res = map {\n\t$_ % 2 ? $sorted[$_]\
    \ : $sorted[@sorted-$_-1]\n    } 0..@sorted-1;\n    return \\@res;\n}", "    #\
    \ your code here\n}\n```", "    my $ln = scalar @$lst;\n    if ($ln < 1) {\n \
    \       return [];\n    }\n    if ($ln == 1) {\n        return [@$lst];\n    }\n\
    \    my $result = [];\n    my $min = $lst->[0];\n    my $min_i = 0;\n    my $max\
    \ = $lst->[0];\n    my $max_i = 0;\n    for (my $i = 1; $i < $ln; $i++) {\n  \
    \      if ($lst->[$i] < $min) {\n            $min = $lst->[$i];\n            $min_i\
    \ = $i;\n        }\n        if ($lst->[$i] > $max) {\n            $max = $lst->[$i];\n\
    \            $max_i = $i;\n        }\n    }\n    my $temp_min = 0;\n    my $temp_max\
    \ = 0;\n    if ($min_i == 0) {\n        $temp_min = $lst->[1];\n    } else {\n\
    \        $temp_min = $lst->[0];\n    }\n    if ($max_i == 0) {\n        $temp_max\
    \ = $lst->[1];\n    } else {\n        $temp_max = $lst->[0];\n    }\n    push\
    \ @$result, $min;\n    push @$result, $max;\n    my $index = 0;\n    while (scalar\
    \ @$result < $ln) {\n        if ($index == $min_i) {\n            $index++;\n\
    \        }\n        if ($index == $max_i) {\n            $index++;\n        }\n\
    \        if ($temp_min > $lst->[$index]) {\n            $temp_min = $lst->[$index];\n\
    \        }\n        if ($temp_max < $lst->[$index]) {\n            $temp_max =\
    \ $lst->[$index];\n        }\n        $index++;\n        if ($index == $ln) {\n\
    \            push @$result, $temp_min;\n            push @$result, $", "    my(@lst)\
    \ = @$lst;\n    my(@lst1, @lst2);\n    my($max, $min);\n    my($max_idx, $min_idx);\n\
    \    my($ret);", "    my @ret;\n    my @sorted = sort { $a <=> $b } @$lst;\n \
    \   my $start = 0;\n    my $end = $#sorted;\n    my $min = 1;\n    while ($start\
    \ <= $end) {\n        if ($min) {\n            push @ret, $sorted[$start];\n \
    \           $start++;\n        } else {\n            push @ret, $sorted[$end];\n\
    \            $end--;\n        }\n        $min = !$min;\n    }\n    return \\@ret;\n\
    }", "    if(scalar(@$lst) <= 1) {\n        return $lst;\n    }\n    my($min) =\
    \ $lst->[0];\n    my($max) = $lst->[0];\n    for(my($i) = 1; $i < scalar(@$lst);\
    \ $i++) {\n        if($lst->[$i] < $min) {\n            $min = $lst->[$i];\n \
    \       }\n        if($lst->[$i] > $max) {\n            $max = $lst->[$i];\n \
    \       }\n    }\n    my(@a) = ();\n    my(@b) = ();\n    for(my($i) = 0; $i <\
    \ scalar(@$lst); $i++) {\n        if($lst->[$i] != $min) {\n            push(@a,\
    \ $lst->[$i]);\n        }\n        if($lst->[$i] != $max) {\n            push(@b,\
    \ $lst->[$i]);\n        }\n    }\n    return [$min, @{strange_sort_list(\\@b)},\
    \ $max, @{strange_sort_list(\\@a)}];\n}", "    my @res = $lst->[0];\n    my @non_res\
    \ = @$lst[1..$#$lst];\n    my $direction = 1;\n    while (@non_res) {\n      \
    \  push @res, pop @non_res if $direction == 1;\n        push @res, shift @non_res\
    \ if $direction == -1;\n        $direction *= -1;\n    }\n    return @res;\n}",
  "    return [] if @$lst == 0;\n    my(@idx) = (0 .. $#$lst);\n    my(@sort_idx)\
    \ = sort { $lst->[$a] <=> $lst->[$b] } @idx;\n    my(@result) = (\n        $lst->[shift\
    \ @sort_idx],\n        $lst->[pop @sort_idx],\n    );\n    while(@sort_idx > 0)\
    \ {\n        push @result, $lst->[shift @sort_idx];\n        push @result, $lst->[pop\
    \ @sort_idx] if @sort_idx > 0;\n    }\n    return \\@result;\n}", "    my @lst\
    \ = @$lst;\n    my $len = @lst;\n    my $mid = int($len / 2);\n    my @result;\n\
    \    for my $i (0..$mid) {\n        if ($len % 2) {\n            push @result,\
    \ ($lst[$i], $lst[$len - $i - 1]);\n        } else {\n            push @result,\
    \ ($lst[$i], $lst[$len - $i - 2], $lst[$len - $i - 1]);\n        }\n    }\n  \
    \  return \\@result;\n}", "    return [] if (!@$lst);\n    my @res = (min => max\
    \ => ());\n    my($min, $max) = ($lst->[0], $lst->[0]);\n    my $asc = 1;\n  \
    \  while (@$lst) {\n        if ($asc) {\n            $min = min(grep { !defined\
    \ $res[$_] } 0..$#$lst);\n            push @res, $min;\n        } else {\n   \
    \         $max = max(grep { !defined $res[$_] } 0..$#$lst);\n            unshift\
    \ @res, $max;\n        }\n        $asc = !$asc;\n    }\n    return \\@res;\n}",
  "    my @ret = ();\n    my @arr = @$lst;\n    my $size = @arr;\n    while($size\
    \ > 0) {\n        push @ret, shift @arr;\n        $size--;\n        if($size >\
    \ 0) {\n            push @ret, pop @arr;\n            $size--;\n        }\n  \
    \  }\n    return @ret;\n}", "    my $return_list = [];\n    my $sort_list = [];\n\
    \    @$sort_list = sort @$lst;\n    my $count = int(@$sort_list/2);\n    for(my\
    \ $i = 0; $i < $count; $i++){\n        $return_list->[$i*2] = $sort_list->[$i];\n\
    \        $return_list->[$i*2+1] = $sort_list->[$count+$i];\n    }\n    if(@$sort_list%2){\n\
    \        $return_list->[-1] = $sort_list->[-1];\n    }\n    return $return_list;\n\
    }", "    my @lst = @$lst;\n    my @result;\n    @lst = sort { $a <=> $b } @lst;\n\
    \    while (@lst) {\n        push @result, (shift @lst);\n        push @result,\
    \ (pop @lst) if @lst;\n    }\n    return \\@result;\n}", "    return [] if not\
    \ $lst;\n    my @sorted = sort { $a <=> $b } @$lst;\n    my @rest = reverse @sorted;\n\
    \    my @res;\n    while(@sorted and @rest) {\n        push @res, shift @sorted;\n\
    \        push @res, shift @rest;\n    }\n    @res;\n}", "    my @new_lst;\n  \
    \  @new_lst = sort {$a <=> $b} @$lst;\n    my @result;\n    my $i = 0;\n    my\
    \ $len = scalar @new_lst;\n    while ($i < $len) {\n        my $next = shift @new_lst;\n\
    \        unshift @new_lst, $next;\n        push @result, $next;\n        $i++;\n\
    \    }\n    @result;\n}", "    my $len = scalar @$lst;\n    my @result = ();\n\
    \    my @tmp = sort {$a <=> $b} @$lst;\n    my $i = 0;\n    my $j = $len - 1;\n\
    \    my $k = 0;\n    my $s = 1;\n    while($i <= $j) {\n        $result[$k] =\
    \ $tmp[$i];\n        $k++;\n        $i++;\n        $result[$k] = $tmp[$j];\n \
    \       $k++;\n        $j--;\n    }\n    return @result;\n}\n1;", "    my @sorted\
    \ = sort { $a <=> $b } @$lst;\n    my @res = ();\n    my $n = int((@sorted + 1)\
    \ / 2);\n    for (my $i = 0; $i < $n; $i++) {\n        push @res, $sorted[$i];\n\
    \        if ($i + $n < @sorted) {\n            push @res, $sorted[@sorted - $i\
    \ - 1];\n        }\n    }\n    return \\@res;\n}", "    my @lst = @$lst;\n   \
    \ return @lst unless @lst;\n    my $count = @lst;\n    my @ans;\n    push @ans,\
    \ $lst[0];\n    shift @lst;\n    push @ans, $lst[-1];\n    pop @lst;\n    while(@lst)\
    \ {\n        push @ans, $lst[0];\n        shift @lst;\n        push @ans, $lst[-1];\n\
    \        pop @lst;\n    }\n    return @ans;\n}", "    my $i = 0;\n    my $j =\
    \ scalar(@$lst) - 1;\n    my @tmp;\n    for(my $count = 0; $count < scalar(@$lst);\
    \ $count++) {\n        if($count % 2 == 0) {\n            push @tmp, $lst->[$i];\n\
    \            $i++;\n        } else {\n            push @tmp, $lst->[$j];\n   \
    \         $j--;\n        }\n    }\n    return \\@tmp;\n}", "    my @res = ();\n\
    \    my @lst_sort = sort {$a <=> $b} @$lst;\n    my $size = scalar @lst_sort;\n\
    \    for(my $i = 0; $i < $size; $i++) {\n        push @res, ($i % 2) ? $lst_sort[$size\
    \ - $i / 2 - 1] : $lst_sort[$i / 2];\n    }\n    return \\@res;\n}", "    my $res\
    \ = [];\n    my $tmp = [sort @$lst];\n    my $i = 0;\n    my $j = $#$tmp;\n  \
    \  for (my $i = 0; $i <= $#$tmp; $i++) {\n        push @$res, $tmp->[$i];\n  \
    \      last if $i == $j;\n        push @$res, $tmp->[$j];\n        $j--;\n   \
    \ }\n    return $res;\n}", "    my @ret = ();\n    # your code here...\n    @ret\
    \ = quick_sort($lst);\n    @ret = change_sort_order(@ret);\n    return @ret;\n\
    }", "    my @lst = @$lst;\n    my @result;\n    my @max;\n    my @min;\n    for\
    \ my $val (@lst) {\n        $val > $val[-1] ? push @max, $val : push @min, $val;\n\
    \    }\n    while (@min && @max) {\n        push @result, shift @min;\n      \
    \  push @result, pop @max;\n    }\n    @result = (@result, @min, @max);\n    return\
    \ \\@result;\n}", "    my @strange_sorted = ();\n    # push the first element\
    \ of the list\n    push @strange_sorted, shift @$lst;\n    # sort the remaining\
    \ integers\n    my @sorted = sort { $a <=> $b } @$lst;\n    # push the first element\
    \ of the sorted array\n    push @strange_sorted, shift @sorted;\n    while(@sorted)\
    \ {\n        # push the last element of the sorted array\n        push @strange_sorted,\
    \ pop @sorted;\n        # push the first element of the sorted array\n       \
    \ push @strange_sorted, shift @sorted;\n    }\n    return @strange_sorted;\n}",
  "    my @ret;\n    my @copy = @$lst;\n    while(@copy) {\n        push @ret, shift\
    \ @copy;\n        push @ret, pop @copy;\n    }\n    return \\@ret;\n}", "    my\
    \ @result = ();\n    my @tmp = sort {$a <=> $b} @$lst;\n    my $dir = 1;\n   \
    \ while (@tmp) {\n        push @result, $dir ? shift(@tmp) : pop(@tmp);\n    \
    \    $dir = !$dir;\n    }\n    return \\@result;\n}", "    my @lst = @$lst;\n\
    \    my @out;\n    while(@lst) {\n        my $min = min @lst;\n        my $max\
    \ = max @lst;\n        my @maxs = grep { $_ == $max } @lst;\n        for my $m\
    \ (@maxs) {\n            push @out, $m;\n            @lst = grep { $_ != $m }\
    \ @lst;\n        }\n        my @mins = grep { $_ == $min } @lst;\n        for\
    \ my $m (@mins) {\n            push @out, $m;\n            @lst = grep { $_ !=\
    \ $m } @lst;\n        }\n    }\n    return \\@out;\n}", "    my $ret = [];\n \
    \   my $min = my $max = undef;\n    while(@$lst) {\n        $min = 0;\n      \
    \  $max = 0;\n        for(0..$#$lst) {\n            $min = $_ if $lst->[$_] <\
    \ $lst->[$min];\n            $max = $_ if $lst->[$_] > $lst->[$max];\n       \
    \ }\n        push @$ret, splice(@$lst, $min, 1);\n        push @$ret, splice(@$lst,\
    \ $max, 1) if @$lst;\n    }\n    return $ret;\n}", "    my @res = ();\n    while\
    \ (@$lst) {\n        my $min = my $max = shift @$lst;\n        foreach my $e (@$lst)\
    \ {\n            $min = $e if $e < $min;\n            $max = $e if $e > $max;\n\
    \        }\n        push @res, $min;\n        push @res, $max;\n        @$lst\
    \ = grep {$_ != $min && $_ != $max} @$lst;\n    }\n    return @res;\n}", "   \
    \ my @evens = grep { $_ % 2 == 0 } @$lst;\n    my @odds = grep { $_ % 2 == 1 }\
    \ @$lst;\n    my @reordered = map { splice @odds, $_, 1, undef } 0 .. $#odds;\n\
    \    push @reordered, map { splice @evens, $_, 1, undef } 0 .. $#evens;\n    return\
    \ \\@reordered;\n}", "    return [] if !@$lst;\n    my $clone = [@$lst];\n   \
    \ @$clone = sort { $a <=> $b } @$clone;\n    my $result = [];\n    my $min = shift\
    \ @$clone;\n    my $max = pop @$clone;\n    while(@$clone) {\n        push @$result,\
    \ $min;\n        $min = shift @$clone;\n        push @$result, $max;\n       \
    \ $max = pop @$clone;\n    }\n    push @$result, $min;\n    push @$result, $max;\n\
    \    return $result;\n}", "    my @result = ();\n    my @lst = sort {$a <=> $b}\
    \ @$lst;\n    while (@lst) {\n        push @result, shift @lst;\n        push\
    \ @result, pop @lst if @lst;\n    }\n    return @result;\n}", "    my $n = @$lst;\n\
    \    return [] if $n == 0;\n    return [sort {$a <=> $b} @$lst] if $n == 1;\n\
    \    my $i = 0;\n    my $sign = 1;\n    my @res = ($lst->[$i]);\n    for(my $j\
    \ = 1; $j < $n; $j++) {\n        $i += $sign;\n        $sign *= -1;\n        push\
    \ @res, $lst->[$i];\n    }\n    return \\@res;\n}", "    my @res = ();\n    my\
    \ @lst = sort { $a <=> $b } @$lst;\n    my $i = 0;\n    while (1) {\n        last\
    \ if !@lst;\n        $res[$i] = shift @lst;\n        last if !@lst;\n        $res[$i]\
    \ = pop @lst;\n        $i++;\n    }\n    return \\@res;\n}", "    my $n = scalar\
    \ @$lst;\n    my $i = 0;\n    my $k = 0;\n    my $m = 0;\n    my $result = [];\n\
    \    for ($i = 0; $i < $n; $i++) {\n        if ($i % 2 == 0) {\n            $result->[$i]\
    \ = (sort {$a <=> $b} @$lst)[$k];\n            $k++;\n        } else {\n     \
    \       $result->[$i] = (sort {$b <=> $a} @$lst)[$m];\n            $m++;\n   \
    \     }\n    }\n    return $result;\n}", "    return [] if !@$lst;\n    my $sorted\
    \ = [ sort { $a <=> $b } @$lst ];\n    my $i = 0;\n    my $s = 0;\n    my $res\
    \ = [];\n    while(@$sorted) {\n        my $el = $sorted->[$i];\n        push\
    \ @$res, $el;\n        splice @$sorted, $i, 1;\n        if($s == 0) {\n      \
    \      $i = 0;\n            $s = 1;\n        } else {\n            $i = @$sorted\
    \ - 1;\n            $s = 0;\n        }\n    }\n    return $res;\n}", "    my @lst\
    \ = @$lst;\n    my @ans;\n    while (@lst) {\n        push @ans, shift @lst;\n\
    \        push @ans, pop @lst if @lst;\n    }\n    return @ans;\n}", "    return\
    \ [] if scalar(@$lst) == 0;\n    my @sorted = sort @$lst;\n    my @res = ($sorted[0]);\n\
    \    for (my $i = 1; $i < scalar(@sorted); $i++) {\n        my $val = $sorted[$i];\n\
    \        if (scalar(@res) % 2 == 0) {\n            unshift @res, $val;\n     \
    \   } else {\n            push @res, $val;\n        }\n    }\n    return \\@res;\n\
    }", "    my $dir = 1; # 1 or -1\n    my $result = [];\n    while (@$lst) {\n \
    \       if ($dir == 1) {\n            my $max = $lst->[0];\n            my $max_i\
    \ = 0;\n            for my $i (0..$#$lst) {\n                if ($lst->[$i] >\
    \ $max) {\n                    $max = $lst->[$i];\n                    $max_i\
    \ = $i;\n                }\n            }\n            push @$result, splice(@$lst,\
    \ $max_i, 1);\n        }\n        else {\n            my $min = $lst->[0];\n \
    \           my $min_i = 0;\n            for my $i (0..$#$lst) {\n            \
    \    if ($lst->[$i] < $min) {\n                    $min = $lst->[$i];\n      \
    \              $min_i = $i;\n                }\n            }\n            push\
    \ @$result, splice(@$lst, $min_i, 1);\n        }\n        $dir *= -1;\n    }\n\
    \    return $result;\n}", "    my @lst = @$lst;\n    my @new_lst;\n    while (@lst)\
    \ {\n        my $min = min(@lst);\n        push @new_lst, $min;\n        @lst\
    \ = grep { $_ != $min } @lst;\n        if (@lst) {\n            my $max = max(@lst);\n\
    \            push @new_lst, $max;\n            @lst = grep { $_ != $max } @lst;\n\
    \        }\n    }\n    return @new_lst;\n}", "    my @result = ();\n    my @sorted\
    \ = sort { $a <=> $b } @$lst;\n    while (@sorted) {\n        push @result, shift\
    \ @sorted;\n        push @result, pop @sorted if @sorted;\n    }\n    return \\\
    @result;\n}", "    my $ln = scalar(@$lst);\n    return $lst if $ln == 0;\n   \
    \ my $left = $ln % 2 == 0 ? ($ln / 2) - 1 : ($ln - 1) / 2;\n    my $right = $ln\
    \ - 1;\n    my @r;\n    while($left >= 0 && $right >= $ln / 2) {\n        push\
    \ @r, @$lst[$left--], @$lst[$right--];\n    }\n    if($left >= 0) {\n        push\
    \ @r, @$lst[$left];\n    }\n    return \\@r;\n}", "    my $len = @$lst;\n    if\
    \ ($len == 0) {\n        return [];\n    }\n    if ($len == 1) {\n        return\
    \ [$lst->[0]];\n    }\n    if ($len == 2) {\n        if ($lst->[0] <= $lst->[1])\
    \ {\n            return [$lst->[0], $lst->[1]];\n        } else {\n          \
    \  return [$lst->[1], $lst->[0]];\n        }\n    }\n    my $j = (1+$len)/2;\n\
    \    my $x = $lst->[$j-1];\n    my $l = [];\n    my $r = [];\n    for my $i (0..$len-1)\
    \ {\n        if ($i == $j-1) {\n            next;\n        }\n        if ($lst->[$i]\
    \ < $x) {\n            push @$l, $lst->[$i];\n        } else {\n            push\
    \ @$r, $lst->[$i];\n        }\n    }\n    my $l2 = strange_sort_list($l);\n  \
    \  my $r2 = strange_sort_list($r);\n    return [@$l2, $x, @$r2];\n}", "    my\
    \ $sorted_list = [];\n    return $sorted_list if not defined $lst or scalar @$lst\
    \ == 0;\n    $sorted_list = [sort {$a <=> $b} @$lst];\n    my $min_value = shift\
    \ @$sorted_list;\n    my $max_value = pop @$sorted_list;\n    my $result = [$min_value];\n\
    \    while(scalar @$sorted_list != 0) {\n        $min_value = shift @$sorted_list;\n\
    \        $max_value = pop @$sorted_list;\n        push @$result, $max_value if\
    \ defined $max_value;\n        push @$result, $min_value if defined $min_value;\n\
    \    }\n    push @$result, $max_value if defined $max_value;\n    return $result;\n\
    }", "    $lst //= [];\n    my $len = scalar @$lst;\n    return $lst if $len <\
    \ 2;\n    my @lst = sort { $a <=> $b } @$lst;\n    my $middle = int($len / 2);\n\
    \    my @first = splice(@lst, 0, $middle);\n    my @last = reverse splice(@lst,\
    \ 0, $middle);\n    return [ @first, @last ];\n}", "    my @result = ();\n   \
    \ my $ascending = 1;\n    while (@$lst) {\n        my $min = $lst->[0];\n    \
    \    my $max = $lst->[0];\n        my @remove = ();\n        for (my $i = 0; $i\
    \ < @$lst; $i++) {\n            if ($lst->[$i] < $min) {\n                $min\
    \ = $lst->[$i];\n            }\n            if ($lst->[$i] > $max) {\n       \
    \         $max = $lst->[$i];\n            }\n        }\n        if ($ascending)\
    \ {\n            push @result, $min;\n            $ascending = 0;\n        } else\
    \ {\n            push @result, $max;\n            $ascending = 1;\n        }\n\
    \        for (my $i = 0; $i < @$lst; $i++) {\n            if ($lst->[$i] == $min\
    \ || $lst->[$i] == $max) {\n                push @remove, $i;\n            }\n\
    \        }\n        for (my $i = @remove - 1; $i >= 0; $i--) {\n            splice\
    \ @$lst, $remove[$i], 1;\n        }\n    }\n    return \\@result;\n}", "    my\
    \ @ret;\n    while(@$lst) {\n        push @ret, @$lst[-1, 0];\n        splice\
    \ @$lst, -1, 1;\n        splice @$lst, 0, 1;\n    }\n    return \\@ret;\n}", " \
    \   my @result = ();\n    my @num_lst = @$lst;\n    my $len = @num_lst;\n    if\
    \ ($len == 0) {\n        return @result;\n    }\n    my @min_max_lst = &min_max(\\\
    @num_lst);\n    my $min = $min_max_lst[0];\n    my $max = $min_max_lst[1];\n \
    \   my $min_ptr = 0;\n    my $max_ptr = $len - 1;\n    my $is_even = $len % 2\
    \ == 0;\n    my $is_odd = $len % 2 == 1;\n    if ($is_even) {\n        my $min_ptr\
    \ = 0;\n        my $max_ptr = $len - 1;\n        for my $i (0..$len - 1) {\n \
    \           if ($i % 2 == 0) {\n                push @result, $min;\n        \
    \        $min_ptr++;\n            } else {\n                push @result, $max;\n\
    \                $max_ptr--;\n            }\n        }\n    } elsif ($is_odd)\
    \ {\n        my $middle = $len / 2;\n        my $min_ptr = 0;\n        my $max_ptr\
    \ = $len - 1;\n        for my $i (0..$len - 1) {\n            if ($i < $middle)\
    \ {\n                push @result, $min;\n                $min_ptr++;\n      \
    \      } elsif ($i == $middle) {\n                push @result, $max;\n      \
    \      } else {\n                push @result, $min;\n                $max_ptr--;\n\
    \            }\n        }\n    }\n    return @result;\n}", "    my @result = [];\n\
    \    my @sorted = sort { $a <=> $b } @$lst;\n    while (@sorted) {\n        my\
    \ $next = shift @sorted;\n        push @result, $next;\n        @sorted = reverse\
    \ @sorted;\n    }\n    return \\@result;\n}", "    my @rslt = ();\n    my @sort_lst\
    \ = sort {$a <=> $b} @$lst;\n    for (my $i = 0; $i < scalar(@sort_lst); $i++)\
    \ {\n        push(@rslt, $sort_lst[$i]);\n        $i++;\n        last if ($i >=\
    \ scalar(@sort_lst));\n        unshift(@rslt, $sort_lst[$i]);\n    }\n    return\
    \ \\@rslt;\n}", "    my $len = scalar @$lst;\n    my @diffs = map {$len + $lst->[$_]\
    \ - $_} 0..$len - 1;\n    my @idx = sort {$diffs[$a] <=> $diffs[$b]} 0..$len -\
    \ 1;\n    my @ret = map {$lst->[$_]} @idx;\n    return \\@ret;\n}", "    my @res\
    \ = ();\n    my $len = @$lst;\n    while ($len > 0) {\n        push @res, $lst->[0];\n\
    \        shift @$lst;\n        push @res, $lst->[-1];\n        pop @$lst;\n  \
    \      $len -= 2;\n    }\n    return \\@res;\n}", "    return [] if not @$lst;\n\
    \    my $sort = [sort {$a <=> $b} @$lst];\n    my $ret = [];\n    my $i = 1;\n\
    \    for my $num (@$sort) {\n        push(@$ret, $num);\n        if ($i < scalar(@$sort))\
    \ {\n            push(@$ret, $sort->[-1 * $i]);\n        }\n        $i++;\n  \
    \  }\n    return $ret;\n}", "    my $res = [];\n    my @lst = sort { $a <=> $b\
    \ } @$lst;\n    my $i = 0;\n    while (@lst) {\n        push @$res, shift @lst;\n\
    \        unshift @lst, pop @lst;\n    }\n    return $res;\n}", "    my @result\
    \ = ();\n    my @sorted = sort { $a <=> $b } @$lst;\n    my $min = shift @sorted;\n\
    \    my $max = pop @sorted;\n    return () unless @sorted;\n    for (my $n = 0;\
    \ $n < @sorted; $n++) {\n        if ($n % 2 == 0) {\n            push @result,\
    \ $min;\n            $min = shift @sorted;\n        } else {\n            push\
    \ @result, $max;\n            $max = pop @sorted;\n        }\n    }\n    push\
    \ @result, $min;\n    push @result, $max;\n    return @result;\n}", "    my $even\
    \ = 1;\n    my @res;\n    for (sort {$a <=> $b} @$lst) {\n        push @res, $even\
    \ ? (shift @$lst) : (pop @$lst);\n        $even = 1 - $even;\n    }\n    return\
    \ @res;\n}", "    my $n = scalar @$lst;\n    my $i = 0;\n    my $j = $n-1;\n \
    \   my @sorted;\n    while($i <= $j) {\n        push @sorted, $lst->[$i];\n  \
    \      $i++;\n        push @sorted, $lst->[$j] if $i <= $j;\n        $j--;\n \
    \   }\n    return \\@sorted;\n}", "    return $lst if (scalar(@$lst) == 0);\n\
    \    my @sorted = sort {$a <=> $b} @$lst;\n    my @res = (shift @sorted);\n  \
    \  while (@sorted) {\n        push @res, pop @sorted;\n        push @res, shift\
    \ @sorted;\n    }\n    return \\@res;\n}", "    my(@res);\n    my($i);\n    my($j);\n\
    \    my($len);\n    my($elem);\n    my($min);\n    my($max);\n    my($min_ind);\n\
    \    my($max_ind);\n    $len = 0;\n    while ($len < @$lst) {\n        $min =\
    \ $lst->[0];\n        $max = $lst->[0];\n        $min_ind = 0;\n        $max_ind\
    \ = 0;\n        for ($i = 0; $i < @$lst; $i++) {\n            $elem = $lst->[$i];\n\
    \            if ($elem < $min) {\n                $min = $elem;\n            \
    \    $min_ind = $i;\n            }\n            if ($elem > $max) {\n        \
    \        $max = $elem;\n                $max_ind = $i;\n            }\n      \
    \  }\n        push(@res, $min);\n        $len++;\n        if ($len >= @$lst) {\n\
    \            last;\n        }\n        push(@res, $max);\n        $len++;\n  \
    \      splice(@$lst, $min_ind, 1);\n        if ($max_ind > $min_ind) {\n     \
    \       $max_ind--;\n        }\n        splice(@$lst, $max_ind, 1);\n    }\n \
    \   return \\@res;\n}", "    my(@sorted, $min_i, $max_i);\n    my $len = @$lst;\n\
    \    if ($len == 0) {\n        return @sorted;\n    }\n    push @sorted, $lst->[0];\n\
    \    while (@sorted < $len) {\n        $min_i = $len-1;\n        $max_i = $len-1;\n\
    \        for my $i (0..$len-1) {\n            if (not is_in_list($lst->[$i], \\\
    @sorted)) {\n                if ($lst->[$i] < $lst->[$min_i]) {\n            \
    \        $min_i = $i;\n                }\n                if ($lst->[$i] > $lst->[$max_i])\
    \ {\n                    $max_i = $i;\n                }\n            }\n    \
    \    }\n        push @sorted, $lst->[$min_i];\n        push @sorted, $lst->[$max_i];\n\
    \    }\n    return @sorted;\n}", "    my $len = @$lst;\n    my @ret;\n    my @sorted\
    \ = sort { $a <=> $b } @$lst;\n    while (@sorted) {\n        push @ret, (shift\
    \ @sorted, pop @sorted);\n    }\n    splice @ret, $len if (@ret > $len);\n   \
    \ return \\@ret;\n}", "    my @res = ();\n    my @copy = @$lst;\n    while (@copy)\
    \ {\n        my $min = min(@copy);\n        my $max = max(@copy);\n        if\
    \ ($min < $max) {\n            push @res, $min;\n            push @res, $max;\n\
    \        } else {\n            push @res, $max;\n            push @res, $min;\n\
    \        }\n        @copy = grep {$_ != $min && $_ != $max} @copy;\n    }\n  \
    \  return \\@res;\n}", "    my @result = ();\n    return @result if @$lst == 0;\n\
    \    my @sorted = sort { $a <=> $b } @$lst;\n    my $i = 0;\n    my $j = scalar(@sorted)\
    \ - 1;\n    while ($i <= $j) {\n        push @result, $sorted[$i];\n        if\
    \ ($i != $j) {\n            push @result, $sorted[$j];\n        }\n        $i++;\n\
    \        $j--;\n    }\n    return @result;\n}", "    return sort { $a <=> $b }\
    \ @$lst;\n}", "    my @lst = @$lst;\n    my @res;\n    my $max;\n    while (1)\
    \ {\n        $max = undef;\n        for (@lst) {\n            $max = $_ if !defined($max)\
    \ || $max > $_;\n        }\n        return @res if !defined($max);\n        @lst\
    \ = grep { $_ != $max } @lst;\n        push @res, $max;\n        my $min;\n  \
    \      for (@lst) {\n            $min = $_ if !defined($min) || $min < $_;\n \
    \       }\n        return @res if !defined($min);\n        @lst = grep { $_ !=\
    \ $min } @lst;\n        push @res, $min;\n    }\n}", "    my(@result, $len, $i,\
    \ $p, $q);\n    $len = scalar(@$lst);\n    return $lst if ($len <= 1);\n    #\
    \ [x, y, z] => [min(x, y, z), max(x, y, z), med(x, y, z)]\n    @result = sort\
    \ {$a <=> $b} @$lst;\n    $p = 0; $q = $len - 1;\n    for ($i = 1; $i < $len;\
    \ $i += 2) {\n        $result[$i] = $result[$q];\n        $q--;\n    }\n    for\
    \ ($i = 0; $i < $len; $i += 2) {\n        $result[$i] = $result[$p];\n       \
    \ $p++;\n    }\n    return \\@result;\n}", "    my(@result, @list);\n    return\
    \ @list if @list == 0;\n    @list = @$lst;\n    while (my $min = shift @list)\
    \ {\n        push @result, $min;\n        my $max = pop @list;\n        push @result,\
    \ $max if $max;\n    }\n    return @result;\n}", "    my @lst = @$lst;\n    my\
    \ @res;\n    while (@lst) {\n        my $min = my $max = shift @lst;\n       \
    \ foreach (@lst) {\n            $min = $_ if $_ < $min;\n            $max = $_\
    \ if $_ > $max;\n        }\n        push @res, $min;\n        push @res, $max;\n\
    \        @lst = grep { $_ != $min && $_ != $max } @lst;\n    }\n    return \\\
    @res;\n}", "    my @a = @$lst;\n    my @b;\n    while (@a) {\n        push @b,\
    \ shift @a;\n        push @b, pop @a if @a;\n    }\n    return \\@b;\n}", "  \
    \  my $i = 0;\n    my $max = 1;\n    my $min = 0;\n    while ($i < @$lst) {\n\
    \        if ($max) {\n            my $idx = maxidx(@$lst[$i..$#$lst]);\n     \
    \       @$lst[$i, $i + $idx] = @$lst[$i + $idx, $i];\n            $i++;\n    \
    \        $max = 0;\n        }\n        else {\n            my $idx = minidx(@$lst[$i..$#$lst]);\n\
    \            @$lst[$i, $i + $idx] = @$lst[$i + $idx, $i];\n            $i++;\n\
    \            $max = 1;\n        }\n    }\n    return $lst;\n}", "    my @sorted\
    \ = sort { $a <=> $b } @$lst;\n    my @odds = @sorted[grep { $_ % 2 == 1 } 0..$#sorted];\n\
    \    my @evens = @sorted[grep { $_ % 2 == 0 } 0..$#sorted];\n    # my @evens =\
    \ @sorted[grep { $_ % 2 == 0 } 0..$#sorted];\n    my @result = ();\n    foreach\
    \ my $i (0..$#odds) {\n        push @result, $odds[$i];\n        if ($i < @evens)\
    \ {\n            push @result, $evens[$i];\n        }\n    }\n    return \\@result;\n\
    }", "    my $size = scalar @$lst;\n    return [] if ($size == 0);\n    my @result\
    \ = ();\n    my $max = $lst->[0];\n    my $min = $lst->[0];\n    my $i = 0;\n\
    \    my $j = 0;\n    while ($i < $size) {\n        if ($lst->[$i] > $max) {\n\
    \            $max = $lst->[$i];\n        }\n        if ($lst->[$i] < $min) {\n\
    \            $min = $lst->[$i];\n        }\n        $i += 1;\n    }\n    my $range\
    \ = $max - $min;\n    $i = 0;\n    my $max_or_min = 0;\n    while ($i < $size)\
    \ {\n        if ($max_or_min == 0) {\n            $result[$i] = $min;\n      \
    \      $min += 1;\n            $j = 0;\n            while ($j < $size) {\n   \
    \             if ($lst->[$j] == $result[$i]) {\n                    $lst->[$j]\
    \ = $range + 1;\n                }\n                $j += 1;\n            }\n\
    \            $max_or_min = 1;\n        }\n        elsif ($max_or_min == 1) {\n\
    \            $result[$i] = $max;\n            $max -= 1;\n            $j = 0;\n\
    \            while ($j < $size) {\n                if ($lst->[$j] == $result[$i])\
    \ {\n                    $lst->[$j] = $range + 1;\n                }\n       \
    \         $j += 1;\n            }\n            $max_or_min = 0;\n        }\n \
    \       $i += 1;\n    }\n    return @result;\n}", "    my $flag = 1;\n    my @sorted\
    \ = sort { $a <=> $b } @$lst;\n    my @result;\n    while (@sorted) {\n      \
    \  if ($flag) {\n            push @result, shift @sorted;\n        } else {\n\
    \            push @result, pop @sorted;\n        }\n        $flag = !$flag;\n\
    \    }\n    @result;\n}", "    return () unless $lst && @$lst;\n    my @lst =\
    \ sort {$a <=> $b} @$lst;\n    my $dir = 1;\n    my @ret;\n    while (@lst) {\n\
    \        my $v = $dir > 0 ? shift @lst : pop @lst;\n        push @ret, $v;\n \
    \       $dir *= -1;\n    }\n    return @ret;\n}", "    my $len = @$lst;\n    my\
    \ @sorted = sort { $a <=> $b } @$lst;\n    my @res = ();\n    while (@sorted)\
    \ {\n        push @res, (shift @sorted);\n        push @res, (pop @sorted) if\
    \ @sorted;\n    }\n    return \\@res;\n}", "    return [] if ! @$lst;\n    my\
    \ @sorted = sort { $a <=> $b } @$lst;\n    my @res = ();\n    my $i = 0;\n   \
    \ my $j = $#sorted;\n    while ($i <= $j) {\n        push @res, $sorted[$i];\n\
    \        $i++;\n        if ($i <= $j) {\n            push @res, $sorted[$j];\n\
    \            $j--;\n        }\n    }\n    return \\@res;\n}", "    my @res = ();\n\
    \    my $len = @$lst;\n    my $flag = 0;\n    while($len) {\n        if($flag\
    \ == 0) {\n            my $min = $lst->[0];\n            my $min_idx = 0;\n  \
    \          for(0..$len-1) {\n                if($lst->[$_] < $min) {\n       \
    \             $min = $lst->[$_];\n                    $min_idx = $_;\n       \
    \         }\n            }\n            push @res, $min;\n            splice @$lst,\
    \ $min_idx, 1;\n            $flag = 1;\n        }\n        else {\n          \
    \  my $max = $lst->[0];\n            my $max_idx = 0;\n            for(0..$len-1)\
    \ {\n                if($lst->[$_] > $max) {\n                    $max = $lst->[$_];\n\
    \                    $max_idx = $_;\n                }\n            }\n      \
    \      push @res, $max;\n            splice @$lst, $max_idx, 1;\n            $flag\
    \ = 0;\n        }\n        $len--;\n    }\n    return \\@res;\n}", "    my @result\
    \ = ();\n    return @result if (! @$lst);\n    my @sorted = sort {$a <=> $b} @$lst;\n\
    \    for (my $i = 0; $i < @sorted; $i++) {\n        if ($i % 2 == 0) {\n     \
    \       push @result, shift @sorted;\n        } else {\n            push @result,\
    \ pop @sorted;\n        }\n    }\n    return @result;\n}", "    my @lst = @$lst;\n\
    \    return [] if $#lst < 0;\n    my $step = @lst;\n    my @res = ($lst[0]);\n\
    \    splice(@lst, 0, 1);\n    while($#lst >= 0) {\n        my $left = @lst;\n\
    \        my $pos = 0;\n        my $pos_max = $#lst;\n        my $pos_min = 0;\n\
    \        my $max = undef;\n        my $min = undef;\n        while($left > 0)\
    \ {\n            if ($left % 2 == 0) {\n                $pos = $pos_min;\n   \
    \             if ($min == undef) {\n                    $min = $lst[$pos];\n \
    \                   for (my $i = $pos_min; $i <= $pos_max; $i++) {\n         \
    \               $min = $lst[$i] if $lst[$i] < $min;\n                    }\n \
    \               }\n                $res[$#res + 1] = $min;\n                splice(@lst,\
    \ $pos, 1);\n                $pos_max--;\n            } else {\n             \
    \   $pos = $pos_max;\n                if ($max == undef) {\n                 \
    \   $max = $lst[$pos];\n                    for (my $i = $pos_min; $i <= $pos_max;\
    \ $i++) {\n                        $max = $lst[$i] if $lst[$i] > $max;\n     \
    \               }\n                }\n                $res[$#res + 1] = $max;\n\
    \                splice(@lst, $pos, 1);\n                $pos_min++;\n       \
    \     }\n            $left--;\n        }\n    }\n    return \\@res;\n}", "   \
    \ my $n = scalar @$lst;\n    my @r;\n    my ($min, $max) = (0, $n - 1);\n    for\
    \ (my $i = 0; $i < $n; $i++) {\n        if ($i % 2 == 0) {\n            push @r,\
    \ $lst->[$min++];\n        } else {\n            push @r, $lst->[$max--];\n  \
    \      }\n    }\n    return \\@r;\n}", "    $lst = [sort {$a <=> $b} @$lst];\n\
    \    if (@$lst % 2 == 0) {\n        while (@$lst) {\n            my $i = pop @$lst;\n\
    \            push @$lst, shift @$lst;\n            push @$lst, $i;\n        }\n\
    \    } else {\n        while (@$lst) {\n            my $i = pop @$lst;\n     \
    \       push @$lst, shift @$lst;\n            push @$lst, $i;\n            push\
    \ @$lst, shift @$lst;\n        }\n    }\n    return $lst;\n}", "    my $cnt =\
    \ @$lst;\n    if($cnt == 0) {\n        return [];\n    }\n    if($cnt == 1) {\n\
    \        return [$lst->[0]];\n    }\n    my @min_lst = min_list($lst);\n    my\
    \ @max_lst = max_list($lst);\n    my @merged = merge_list(\\@min_lst, \\@max_lst);\n\
    \    return \\@merged;\n}", "    my @sorted_list = sort {$a <=> $b} @$lst;\n \
    \   my $lst_len = @sorted_list;\n    my @sorted_strange_list;\n    for (my $i\
    \ = 0; $i < $lst_len; $i++) {\n        my $pos = $i % 2 ? $i : $lst_len - $i -\
    \ 1;\n        push @sorted_strange_list, $sorted_list[$pos];\n    }\n    return\
    \ @sorted_strange_list;\n}", "    my @lst = @$lst;\n    my @res;\n    while(@lst){\n\
    \        push @res, splice(@lst, $#lst, 1);\n        push @res, splice(@lst, 0,\
    \ 1);\n    }\n    return @res;\n}", "    my(@sorted) = sort { $a <=> $b } @$lst;\n\
    \    my(@result) = ();\n    while (@sorted) {\n        push @result, shift @sorted;\n\
    \        push @result, pop @sorted;\n    }\n    return @result;\n}", "    my @result\
    \ = ();\n    while( @$lst > 0 ) {\n        my $min = min(@$lst);\n        my $max\
    \ = max(@$lst);\n        push @result, $min;\n        delete $lst->[ index($lst,\
    \ $min) ];\n        push @result, $max;\n        delete $lst->[ index($lst, $max)\
    \ ];\n    }\n    return @result;\n}", "    return unless $lst && @$lst;\n    my\
    \ @ret;\n    my $i = 0;\n    my $sign = 1;\n    while (@$lst) {\n        my $cur\
    \ = ($sign > 0) ? pop @$lst : shift @$lst;\n        push @ret, $cur;\n       \
    \ $sign *= -1;\n    }\n    return \\@ret;\n}", "    my @lst = @$lst;\n    my @result;\n\
    \    if (@lst == 0) {\n        return [];\n    } else {\n        my $mini = min\
    \ @lst;\n        push @result, $mini;\n        splice @lst, index(@lst, $mini),\
    \ 1;\n        my $maxi = max @lst;\n        push @result, $maxi;\n        splice\
    \ @lst, index(@lst, $maxi), 1;\n        return [@result, @{strange_sort_list(\\\
    @lst)}];\n    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
