name: HumanEval_28_concatenate
language: pl
prompt: "# Concatenate array of strings into a single string\n# >>> concatenate([])\n\
  # \"\"\n# >>> concatenate([\"a\", \"b\", \"c\"])\n# \"abc\"\nsub concatenate {\n\
  \    my($strings) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&concatenate;\n\
  \        if(eq_deeply($candidate->([]),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"x\", \"y\", \"\
  z\"]),\"xyz\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->([\"x\", \"y\", \"z\", \"w\", \"k\"]),\"xyzwk\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return \"\" unless $strings;\n    return $strings->[0] if @$strings\
    \ == 1;\n    my $result = $strings->[0];\n    for (my $i = 1; $i < @$strings;\
    \ $i++) {\n        $result .= $strings->[$i];\n    }\n    return $result;\n}",
  "    return join(\"\", @$strings);\n}", "    my $string = \"\";\n    foreach my\
    \ $str (@$strings) {\n        $string .= $str;\n    }\n    return $string;\n}",
  "    my $result = \"\";\n    foreach my $str (@$strings) {\n        $result .= $str;\n\
    \    }\n    return $result;\n}", "    return \"\" unless defined $strings;\n \
    \   return join(\"\", map {defined($_) ? $_ : \"\"} @$strings);\n}", "    my $joined_string\
    \ = \"\";\n    for my $string (@$strings) {\n        $joined_string .= $string;\n\
    \    }\n    return $joined_string;\n}", "    my $concatenated_string = \"\";\n\
    \    foreach my $string (@$strings) {\n        $concatenated_string .= $string;\n\
    \    }\n    return $concatenated_string;\n}", "    return join('', @$strings);\n\
    }", "    my($i, $s);\n    $s = \"\";\n    for ($i = 0; $i < scalar(@$strings);\
    \ $i++) {\n\t$s .= $strings->[$i];\n    }\n    return $s;\n}", "    return join('',\
    \ @$strings);\n}", "    my $str = \"\";\n    foreach my $s (@$strings) {\n   \
    \     $str .= $s;\n    }\n    return $str;\n}", "    my $result = \"\";\n    for\
    \ my $string (@$strings) {\n        $result .= $string;\n    }\n    return $result;\n\
    }", "    return join(\"\", @$strings);\n}", "    return join(\"\", @$strings);\n\
    }", "    my $string = \"\";\n    foreach my $str (@$strings) {\n        $string\
    \ .= $str;\n    }\n    return $string;\n}", "    my $string = '';\n    foreach\
    \ my $s (@$strings) {\n        $string .= $s;\n    }\n    return $string;\n}",
  "    return join \"\", @$strings;\n}", "    my $result = \"\";\n    foreach my $string\
    \ (@$strings) {\n        $result .= $string;\n    }\n    return $result;\n}",
  "    my $string = \"\";\n    foreach my $s (@$strings) {\n        $string .= $s;\n\
    \    }\n    return $string;\n}", "    return \"\" unless @$strings;\n    my $string\
    \ = shift @$strings;\n    return $string unless @$strings;\n    return $string\
    \ . concatenate($strings);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
