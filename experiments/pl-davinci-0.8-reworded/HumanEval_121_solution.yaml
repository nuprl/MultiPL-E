name: HumanEval_121_solution
language: pl
prompt: "# Given a non-empty array of integers, return the sum of all of the odd elements\
  \ that are in even positions.\n# Examples\n# >>> solution([5, 8, 7, 1])\n# 12\n\
  # >>> solution([3, 3, 3, 3, 3])\n# 9\n# >>> solution([30, 13, 24, 321])\n# 0\nsub\
  \ solution {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&solution;\n\
  \        if(eq_deeply($candidate->([5, 8, 7, 1]),12)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 3, 3, 3, 3]),9))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([30,\
  \ 13, 24, 321]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([5, 9]),5)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8]),0)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([30,\
  \ 13, 23, 32]),23)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([3, 13, 2, 9]),3)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return sum(grep {$_ % 2} @{$lst}[map {2 * $_} 0 .. @{$lst} / 2\
    \ - 1]);\n}", "    my $even = grep { !($_ % 2) } (0 .. $#$lst);\n    my $odd =\
    \ grep { ($_ % 2) } (0 .. $#$lst);\n    my $sum = 0;\n    $sum += $lst->[$_] for\
    \ grep { ($_ % 2) } (0 .. $#$lst);\n    return $sum;\n}", "    my $odd_even_sum\
    \ = 0;\n    my $i = 0;\n    foreach my $num (@$lst) {\n        if ($i % 2 != 0\
    \ && $num % 2 != 0) {\n            $odd_even_sum += $num;\n        }\n       \
    \ $i++;\n    }\n    return $odd_even_sum;\n}", "    my @lst_1;\n    my $sum =\
    \ 0;\n    for my $i (0..$#{$lst}) {\n        my $num = @{$lst}[$i];\n        if\
    \ ($i % 2 == 0 && $num % 2 != 0) {\n            push @lst_1, $num;\n        }\n\
    \    }\n    for my $j (0..$#lst_1) {\n        $sum += $lst_1[$j];\n    }\n   \
    \ return $sum;\n}", "    my $total = 0;\n    for my $i (0 .. $#$lst) {\n     \
    \   next if $i % 2 == 0;\n        next if $lst->[$i] % 2 == 0;\n        $total\
    \ += $lst->[$i];\n    }\n    return $total;\n}", "    my $ans = 0;\n    for my\
    \ $i (0..$#$lst) {\n        $ans += $lst->[$i] if ($i % 2 == 0 && $lst->[$i] %\
    \ 2 != 0);\n    }\n    return $ans;\n}", "    my $sum = 0;\n    my $index = 0;\n\
    \    my $len = scalar @$lst;\n    while ($index < $len) {\n        if ($index\
    \ % 2 == 0 && $lst->[$index] % 2 == 1) {\n            $sum += $lst->[$index];\n\
    \        }\n        $index += 1;\n    }\n    return $sum;\n}", "    my $i = 1;\n\
    \    my $sum = 0;\n    for (@$lst) {\n        if ($i % 2 == 0 && $_ % 2 == 1)\
    \ {\n            $sum += $_;\n        }\n        $i++;\n    }\n    return $sum;\n\
    }", "    my $sum = 0;\n    for my $i (0 .. @$lst - 1) {\n        if($i % 2) {\n\
    \            if($lst->[$i] % 2) {\n                $sum += $lst->[$i];\n     \
    \       }\n        }\n    }\n    return $sum;\n}", "    my $ret = 0;\n    my $i;\n\
    \    for($i = 0; $i < scalar(@$lst); $i += 2) {\n        if($lst->[$i] % 2 ==\
    \ 1) {\n            $ret += $lst->[$i];\n        }\n    }\n    return $ret;\n}",
  "    my $idx = 0;\n    my $sum = 0;\n    for my $element (@$lst) {\n        if ($idx\
    \ % 2 == 0) {\n            if ($element % 2 != 0) {\n                $sum += $element;\n\
    \            }\n        }\n        $idx++;\n    }\n    return $sum;\n}\nprint\
    \ solution([5, 8, 7, 1]), \"\\n\";\nprint solution([3, 3, 3, 3, 3]), \"\\n\";\n\
    print solution([30, 13, 24, 321]), \"\\n\";", "    my $res = 0;\n    for (my $i\
    \ = 0; $i < scalar @$lst; $i += 2) {\n        $res += $lst->[$i] if $lst->[$i]\
    \ % 2;\n    }\n    return $res;\n}", "    my $ans = 0;\n    for my $i (0..$#$lst)\
    \ {\n        $ans += $lst->[$i] if $i % 2 == 0 and $lst->[$i] % 2 == 1;\n    }\n\
    \    return $ans;\n}", "    return sum (grep $_ % 2, map $lst->[$_], grep !($_\
    \ % 2), 0 .. $#$lst);\n}", "    return sum map {$lst->[$_]} grep {$_ % 2 == 0}\
    \ 0..$#$lst;\n}", "    my $sum = 0;\n    for my $i (0 .. @$lst - 1) {\n      \
    \  if ($i % 2 == 0 && $lst->[$i] % 2 == 1) {\n            $sum += $lst->[$i];\n\
    \        }\n    }\n    return $sum;\n}", "    my @lst = @$lst;\n    my $odd =\
    \ 0;\n    for (my $i = 0; $i < scalar @lst; $i++) {\n        if ($i % 2 == 0 &&\
    \ $lst[$i] % 2 == 1) {\n            $odd += $lst[$i];\n        }\n    }\n    return\
    \ $odd;\n}", "    my $curr_pos = 0;\n    my $total = 0;\n    foreach my $item\
    \ (@$lst) {\n        if($curr_pos % 2 == 0 && $item % 2 == 1) {\n            $total\
    \ += $item;\n        }\n        $curr_pos++;\n    }\n    return $total;\n}", " \
    \   my $evens = 0;\n    for my $i (0 .. $#$lst) {\n        if($i % 2 == 0 && $lst->[$i]\
    \ % 2 == 1) {\n            $evens += $lst->[$i];\n        }\n    }\n    return\
    \ $evens;\n}", "    my $result = 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++)\
    \ {\n        if ($i % 2 == 0 && $lst->[$i] % 2 == 1) {\n            $result +=\
    \ $lst->[$i];\n        }\n    }\n    return $result;\n}", "    my $sum = 0;\n\
    \    for my $i (0 .. $#$lst) {\n        if ($i % 2 == 0 && $lst->[$i] % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}",
  "    my $total = 0;\n    my $c = 0;\n    foreach my $n (@$lst) {\n        if ($c\
    \ % 2 == 0) {\n            if ($n % 2 == 1) {\n                $total += $n;\n\
    \            }\n        }\n        $c++;\n    }\n    return $total;\n}", "   \
    \ my $sum = 0;\n    my $i = 0;\n    for my $n (@$lst) {\n        if ($i % 2 ==\
    \ 0 && $n % 2 == 1) {\n            $sum += $n;\n        }\n        $i++;\n   \
    \ }\n    return $sum;\n}", "    my $i = 0;\n    my $sum = 0;\n    while ($i <\
    \ scalar @$lst) {\n        if ($i % 2 == 0 && $lst->[$i] % 2 == 1) {\n       \
    \     $sum += $lst->[$i];\n        }\n        $i += 1;\n    }\n    return $sum;\n\
    }", "    my @even = grep { $$lst[$_] % 2 == 0 } 0 .. $#$lst;\n    my @odd  = grep\
    \ { $$lst[$_] % 2 == 1 } 0 .. $#$lst;\n    my $sum  = 0;\n    for my $i (@even)\
    \ {\n        $sum += $$lst[$i + 1] if $i < $#even;\n    }\n    return $sum;\n}",
  "    my $sum;\n    for my $i (0..@$lst-1) {\n        next if $i%2 == 0;\n      \
    \  next if $lst->[$i]%2 == 0;\n        $sum += $lst->[$i];\n    }\n    return\
    \ $sum;\n}", "    my $sum = 0;\n    my $pos = 0;\n    foreach my $elem (@$lst)\
    \ {\n        if ($pos % 2 == 0) {\n            if ($elem % 2 == 1) {\n       \
    \         $sum += $elem;\n            }\n        }\n        $pos += 1;\n    }\n\
    \    return $sum;\n}", "    my $i = 0;\n    my $sum = 0;\n    while ($i < scalar\
    \ @$lst) {\n        if ($i % 2 == 0 && $lst->[$i] % 2 == 1) {\n            $sum\
    \ += $lst->[$i];\n        }\n        $i += 1;\n    }\n    return $sum;\n}", " \
    \   my $n = @$lst;\n    my $ans = 0;\n    for(my $i = 0; $i < $n; $i += 2) {\n\
    \        $ans += $lst->[$i] if $lst->[$i] % 2;\n    }\n    return $ans;\n}", " \
    \   return sum( map { $lst->[$_] } grep { $_ % 2 == 0 } 0 .. $#$lst );\n}", " \
    \   my $sum = 0;\n    my $len = scalar @$lst;\n    for (my $i = 0; $i < $len;\
    \ $i += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2;\n    }\n    return\
    \ $sum;\n}", "    my $sum = 0;\n    for (my $i = 0; $i < scalar @$lst; $i += 2)\
    \ {\n        $sum += $lst->[$i] if $lst->[$i] % 2;\n    }\n    return $sum;\n}",
  "    my $sum = 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i\
    \ % 2 == 0 && $lst->[$i] % 2 == 1) {\n            $sum += $lst->[$i];\n      \
    \  }\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for (my $i = 0; $i <\
    \ scalar(@$lst); $i += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2;\n \
    \   }\n    return $sum;\n}", "    my $res = 0;\n    for (my $i = 0; $i < scalar\
    \ @$lst; $i++) {\n        if ($i % 2 == 0 && $lst->[$i] % 2 == 1) {\n        \
    \    $res += $lst->[$i];\n        }\n    }\n    return $res;\n}", "    my $sum\
    \ = 0;\n    for my $i (0 .. $#$lst) {\n        if ($i % 2 == 0 && $lst->[$i] %\
    \ 2 == 1) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n\
    }", "    my $r = 0;\n    my $x = 0;\n    for (@$lst) {\n        if ($x % 2 ==\
    \ 0) {\n            $r += $_;\n        }\n        $x++;\n    }\n    return $r;\n\
    }", "    my $sum = 0;\n    for my $i (0 .. $#$lst) {\n        $sum += $lst->[$i]\
    \ if $i % 2 and $lst->[$i] % 2;\n    }\n    return $sum;\n}", "    my $sum = 0;\n\
    \    for (my $i = 0; $i < scalar(@$lst); $i += 2) {\n        $sum += @$lst[$i]\
    \ if @$lst[$i] % 2 == 1;\n    }\n    return $sum;\n}", "    return sum(grep {$_\
    \ % 2} @{$lst}[grep {$_ % 2 == 0} 0..$#{$lst}]);\n}", "    my $output = 0;\n \
    \   for my $i (0..$#$lst) {\n        if ($i % 2 == 0 and $lst->[$i] % 2 == 1)\
    \ {\n            $output += $lst->[$i];\n        }\n    }\n    return $output;\n\
    }", "    my $total = 0;\n    for my $i (0 .. $#$lst) {\n        $total += $lst->[$i]\
    \ if $i % 2 == 0 && $lst->[$i] % 2 == 1;\n    }\n    return $total;\n}", "   \
    \ my $i;\n    my $sum = 0;\n    for ($i = 0; $i < scalar(@$lst); $i += 2) {\n\
    \        if ($lst->[$i] % 2 == 1) {\n            $sum += $lst->[$i];\n       \
    \ }\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for (my $i = 0; $i <\
    \ scalar(@$lst); $i += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2;\n \
    \   }\n    return $sum;\n}", "    my $sum = 0;\n    for (my $i = 0; $i < scalar(@$lst);\
    \ $i++) {\n        if ($i % 2 == 0 && $lst->[$i] % 2 == 1) {\n            $sum\
    \ += $lst->[$i];\n        }\n    }\n    return $sum;\n}", "    my $sum = 0;\n\
    \    for my $i (0 .. $#$lst) {\n        if($i % 2 == 0 and $lst->[$i] % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}",
  "    my $total = 0;\n    for (my $i = 0; $i < scalar @$lst; $i += 2) {\n       \
    \ if ($lst->[$i] % 2) {\n            $total += $lst->[$i];\n        }\n    }\n\
    \    return $total;\n}", "    my $ans = 0;\n    for (my $i = 0; $i < scalar(@$lst);\
    \ $i += 2) {\n        $ans += $lst->[$i] if $lst->[$i] % 2 == 1;\n    }\n    return\
    \ $ans;\n}", "    my $sum = 0;\n    for my $i (0 .. $#$lst) {\n        if ($i\
    \ % 2 == 0 && $lst->[$i] % 2 == 1) {\n            $sum += $lst->[$i];\n      \
    \  }\n    }\n    return $sum;\n}", "    my $res;\n    for my $i (0..$#$lst) {\n\
    \        $res += $lst->[$i] if $i % 2 == 0 and $lst->[$i] % 2 == 1;\n    }\n \
    \   return $res;\n}", "    my $sum = 0;\n    for my $i (0 .. @$lst - 1) {\n  \
    \      $sum += $lst->[$i] if $i % 2 == 0 && $lst->[$i] % 2 == 1;\n    }\n    return\
    \ $sum;\n}", "    return sum( grep { $_ % 2 } @{$lst}[grep { $_ % 2 == 0 } 0..$#{$lst}]\
    \ );\n}", "    my @index_list = ();\n    my $sum = 0;\n    my $i = 0;\n    while\
    \ ($i < scalar @$lst) {\n        if ($i % 2 == 0) {\n            push @index_list,\
    \ $i;\n        }\n        $i++;\n    }\n    foreach my $index (@index_list) {\n\
    \        if ($lst->[$index] % 2 == 1) {\n            $sum += $lst->[$index];\n\
    \        }\n    }\n    return $sum;\n}", "    my $res = 0;\n    foreach my $i\
    \ ( 0 .. $#$lst ) {\n        if ( $i % 2 == 0 and $lst->[$i] % 2 == 1 ) {\n  \
    \          $res += $lst->[$i];\n        }\n    }\n    return $res;\n}", "    my\
    \ $total = 0;\n    for my $i (0 .. $#$lst) {\n        if ($i % 2 == 0 && $lst->[$i]\
    \ % 2 == 1) {\n            $total += $lst->[$i];\n        }\n    }\n    return\
    \ $total;\n}", "    my $res = 0;\n    foreach my $i (0..$#$lst) {\n        $res\
    \ += $lst->[$i] if $i % 2 == 0 && $lst->[$i] % 2 == 1;\n    }\n    return $res;\n\
    }", "    # your solution goes here\n    $total = 0;\n    $i = 0;\n    foreach\
    \ $e (@$lst) {\n        if ($i % 2 == 0 && $e % 2 == 1) {\n            $total\
    \ += $e;\n        }\n        $i += 1;\n    }\n    return $total;\n}", "    my\
    \ $sum = 0;\n    for my $i (0 .. $#$lst) {\n        if ($i % 2 == 0 && $lst->[$i]\
    \ % 2 == 1) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n\
    }", "    my $sum = 0;\n    for my $i (0 .. scalar(@$lst) - 1) {\n        if ($i\
    \ % 2 == 0) {\n            $sum += $lst->[$i] if $lst->[$i] % 2 == 1;\n      \
    \  }\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for my $index (0 ..\
    \ $#$lst) {\n        my $elem = $lst->[$index];\n        if ($index % 2 != 0 &&\
    \ $elem % 2 != 0) {\n            $sum += $elem;\n        }\n    }\n    return\
    \ $sum;\n}", "    my $odd = 0;\n    my $even = 0;\n    my $i = 0;\n    foreach\
    \ my $num (@$lst) {\n        if ($i % 2 == 0) {\n            $odd += $num;\n \
    \       } else {\n            $even += $num;\n        }\n        $i++;\n    }\n\
    \    return $odd - $even;\n}", "    my $sum = 0;\n    my $len = @$lst;\n    for\
    \ (my $i = 0; $i < $len; $i++) {\n        if ($i % 2 == 0) {\n            if (@$lst[$i]\
    \ % 2 == 1) {\n                $sum += @$lst[$i];\n            }\n        }\n\
    \    }\n    return $sum;\n}", "    my $result = 0;\n    for my $i (0 .. $#$lst)\
    \ {\n        $result += $lst->[$i] if $i % 2 == 0 && $lst->[$i] % 2 == 1;\n  \
    \  }\n    return $result;\n}", "    my $result = 0;\n    for (my $i = 0; $i <\
    \ scalar(@$lst); $i++) {\n        if ($i % 2 == 0) {\n            $result += $lst->[$i]\
    \ if $lst->[$i] % 2 == 1;\n        }\n    }\n    return $result;\n}\nuse Test::More;\n\
    use Test::Deep;", "    # your solution here\n    return 0;\n}", "    my $i = 0;\n\
    \    my $acc = 0;\n    foreach my $n (@$lst) {\n        if ($i % 2 == 0) {\n \
    \           if ($n % 2 == 1) {\n                $acc += $n;\n            }\n \
    \       }\n        $i += 1;\n    }\n    return $acc;\n}", "    my $ret = 0;\n\
    \    for (my $i = 0; $i < scalar(@$lst); $i+=2) {\n        if ($lst->[$i] % 2)\
    \ {\n            $ret += $lst->[$i];\n        }\n    }\n    return $ret;\n}",
  "    my $sum = 0;\n    my $i = 0;\n    my $len = scalar @$lst;\n    while ($i <\
    \ $len) {\n        if ($i % 2 == 0 && $lst->[$i] % 2 == 1) {\n            $sum\
    \ += $lst->[$i];\n        }\n        $i += 1;\n    }\n    return $sum;\n}\n1;",
  "    my $sum = 0;\n    for my $i (0 .. $#$lst) {\n        $sum += $lst->[$i] if\
    \ $i % 2 == 0 && $lst->[$i] % 2 != 0;\n    }\n    return $sum;\n}", "    my $sum\
    \ = 0;\n    for my $i (0 .. $#$lst) {\n        if ($i % 2 == 0 and $lst->[$i]\
    \ % 2 == 1) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n\
    }", "    return sum([filter(\n        sub { is_even($_->[0]) && is_odd($_->[1])\
    \ },\n        enumerate($lst)\n    )]);\n}", "    my $sum = 0;\n    my $i = 0;\n\
    \    while($i < scalar(@$lst)){\n        if($i % 2 == 0 && $lst->[$i] % 2 == 1){\n\
    \            $sum += $lst->[$i];\n        }\n        $i++;\n    }\n    return\
    \ $sum;\n}", "    my @indices = grep { $_ % 2 == 0 } 0..$#{$lst};\n    my @odds\
    \ = grep { $_ % 2 == 1 } @{$lst}[@indices];\n    return sum(@odds);\n}", "   \
    \ my $sum = 0;\n    for my $i (0 .. $#$lst) {\n        if (($i % 2 == 0) && ($lst->[$i]\
    \ % 2 != 0)) {\n            $sum += $lst->[$i];\n        }\n    }\n    return\
    \ $sum;\n}", "    my $len = @$lst;\n    my $sum = 0;\n    for(my $i = 0; $i <\
    \ $len; $i++) {\n        my $elem = $lst->[$i];\n        if(($i % 2 == 0) && ($elem\
    \ % 2 == 1)) {\n            $sum += $elem;\n        }\n    }\n    return $sum;\n\
    }", "    my $sum = 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n      \
    \  if ($i % 2 == 0) {\n            if ($lst->[$i] % 2 == 1) {\n              \
    \  $sum += $lst->[$i];\n            }\n        }\n    }\n    return $sum;\n}",
  "    my @res = grep {$_%2} @{$lst}[1,3..@{$lst}-1];\n    return reduce {$a+$b} @res,\
    \ 0;\n}", "    return [map {$lst->[$_]} (1..$#$lst) x 2]->sum;\n}", "    my $sum\
    \ = 0;\n    for (my $i = 0; $i < scalar(@$lst); $i+=2) {\n        $sum += $lst->[$i]\
    \ if $lst->[$i] % 2 == 1;\n    }\n    return $sum;\n}", "    my @lst = @$lst;\n\
    \    my $sum = 0;\n    for (my $i = 0; $i < scalar @lst; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            if ($lst[$i] % 2 == 1) {\n                $sum += $lst[$i];\n\
    \            }\n        }\n    }\n    return $sum;\n}", "    my $s = 0;\n    for\
    \ my $i (0 .. $#$lst) {\n        if($i % 2 == 0 && $lst->[$i] % 2 != 0) {\n  \
    \          $s += $lst->[$i];\n        }\n    }\n    return $s;\n}", "    my $sum\
    \ = 0;\n    for (0..scalar(@$lst)-1) {\n        if (($_ % 2 == 0) && ($lst->[$_]\
    \ % 2 == 1)) {\n            $sum += $lst->[$_];\n        }\n    }\n    return\
    \ $sum;\n}", "    $lst = _to_list($lst);\n    my @lst = @$lst;\n    my $ans =\
    \ 0;\n    for my $i (0..$#lst) {\n        next if $i % 2 == 0;\n        next if\
    \ $lst[$i] % 2 == 0;\n        $ans += $lst[$i];\n    }\n    return $ans;\n}",
  "    my $ret = 0;\n    for my $index (0 .. $#$lst) {\n        if ($index % 2) {\n\
    \            next if $lst->[$index] % 2;\n            $ret += $lst->[$index];\n\
    \        }\n    }\n    return $ret;\n}", "    my $result = 0;\n    for my $x (@$lst)\
    \ {\n        if ($x % 2 == 1) {\n            $result += $x;\n        }\n    }\n\
    \    return $result;\n}", "    my $sum = 0;\n    for (my $i = 0; $i < scalar @$lst;\
    \ $i++) {\n        if ($i % 2 == 0 && $lst->[$i] % 2 == 1) {\n            $sum\
    \ += $lst->[$i];\n        }\n    }\n    return $sum;\n}", "    my $ans = 0;\n\
    \    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        $ans += $lst->[$i] if\
    \ $i % 2 == 0 && $lst->[$i] % 2 == 1;\n    }\n    return $ans;\n}", "    my $sum\
    \ = 0;\n    for my $i (0 .. $#$lst) {\n        if ($i % 2 == 0 and $lst->[$i]\
    \ % 2 == 1) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n\
    }", "    my $sum = 0;\n    my $index = 0;\n    foreach my $item (@$lst) {\n  \
    \      if($index % 2 == 0) {\n            if($item % 2 == 1) {\n             \
    \   $sum += $item;\n            }\n        }\n        $index++;\n    }\n    return\
    \ $sum;\n}", "    # TODO: write solution here\n    my $sum = 0;\n    foreach my\
    \ $i (0..$#$lst) {\n        $sum += $lst->[$i] if $i % 2 == 0 && $lst->[$i] %\
    \ 2 == 1;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for my $i (0 ..\
    \ $#$lst) {\n        $sum += $lst->[$i] if $i % 2 == 0 && $lst->[$i] % 2 == 1;\n\
    \    }\n    return $sum;\n}\nsay solution([5, 8, 7, 1]);\nsay solution([3, 3,\
    \ 3, 3, 3]);\nsay solution([30, 13, 24, 321]);", "    my @lst = @$lst;\n    return\
    \ sum(grep { !($_ % 2) } (map { $lst[$_] } grep { $_ % 2 } 0..@lst-1));\n}", " \
    \   my $ans = 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if\
    \ ( $i % 2 == 0 && $lst->[$i] % 2 == 1 ) {\n            $ans += $lst->[$i];\n\
    \        }\n    }\n    return $ans;\n}", "    my $s = 0;\n    for my $i (0 ..\
    \ $#$lst) {\n        next if $i % 2;\n        $s += $lst->[$i] if $lst->[$i] %\
    \ 2;\n    }\n    return $s;\n}", "    my @lst = @$lst;\n    my $ans = 0;\n   \
    \ for (my $i = 0; $i < @lst; $i++) {\n        if ($i % 2 == 0) {\n           \
    \ if ($lst[$i] % 2 == 1) {\n                $ans += $lst[$i];\n            }\n\
    \        }\n    }\n    return $ans;\n}", "    my $sum = 0;\n    for my $idx (0\
    \ .. $#$lst) {\n        next if $idx % 2 == 0;\n        $sum += $lst->[$idx] if\
    \ $lst->[$idx] % 2 == 1;\n    }\n    return $sum;\n}", "    my $sum = 0;\n   \
    \ my $index = 0;\n    while ($index < @$lst) {\n        my $num = $lst->[$index];\n\
    \        if ($num % 2 == 1) {\n            $sum += $num;\n        }\n        $index\
    \ += 2;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for my $i (0 .. $#$lst)\
    \ {\n        $sum += $lst->[$i] if $i % 2 and $lst->[$i] % 2;\n    }\n    return\
    \ $sum;\n}", "    my $sum = 0;\n    my $pos = 0;\n    foreach (@$lst) {\n    \
    \    $sum += $_ if $pos % 2 && $_ % 2;\n        $pos += 1;\n    }\n    return\
    \ $sum;\n}", "    my $res = 0;\n    my $i = 0;\n    foreach my $v (@$lst) {\n\
    \        $res += $v if $i % 2 == 0 && $v % 2 == 1;\n        $i++;\n    }\n   \
    \ return $res;\n}", "    my @odd_even_position = map{\n        $lst->[$_] if ($_\
    \ % 2 == 0 && $lst->[$_] % 2 == 1)\n    }0..(scalar @$lst - 1);\n    return sum\
    \ @odd_even_position;\n}", "    return sum( even_positions($lst)->map(sub { odd_q($_)\
    \ }) );\n}", "    my $n = scalar @$lst;\n    my $sum = 0;\n    for (my $i = 0;\
    \ $i < $n; $i += 2) {\n        if ($lst->[$i] % 2 == 1) {\n            $sum +=\
    \ $lst->[$i];\n        }\n    }\n    return $sum;\n}", "    my $res = 0;\n   \
    \ for (my $i = 0; $i < scalar @$lst; $i += 2) {\n        $res += $lst->[$i] if\
    \ $lst->[$i] % 2;\n    }\n    return $res;\n}", "    my $i = 0;\n    my $sum =\
    \ 0;\n    while ($i < @$lst) {\n        if ($i % 2 == 0 && $lst->[$i] % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n        $i++;\n    }\n    return\
    \ $sum;\n}", "    my $result = 0;\n    for my $num (@$lst) {\n        if ($num\
    \ % 2 == 1 && $num % 4 != 1) {\n            $result += $num;\n        }\n    }\n\
    \    return $result;\n}", "    return sum(@$lst[grep $_ % 2 == 0, 0..$#$lst]);\n\
    }", "    my $sum = 0;\n    my $i = 0;\n    while ($i < scalar @$lst) {\n     \
    \   $sum += $lst->[$i] if $lst->[$i] % 2 == 1 and $i % 2 == 0;\n        $i++;\n\
    \    }\n    return $sum;\n}", "    my $ans = 0;\n    for (0..$#$lst) {\n     \
    \   $ans += $lst->[$_] if $_ % 2 == 0 and $lst->[$_] % 2 == 1;\n    }\n    return\
    \ $ans;\n}", "    my $total = 0;\n    my $i = 0;\n    while($i < scalar(@$lst))\
    \ {\n        if($i % 2 == 0) {\n            if($lst->[$i] % 2 == 1) {\n      \
    \          $total += $lst->[$i];\n            }\n        }\n        $i += 1;\n\
    \    }\n    return $total;\n}", "    my $sum = 0;\n    my $i = 0;\n    foreach\
    \ my $e (@$lst) {\n        if($i % 2 == 0 && $e % 2 == 1) {\n            $sum\
    \ += $e;\n        }\n        $i++;\n    }\n    return $sum;\n}", "    my @odds\
    \ = grep { $_ % 2 } @$lst;\n    my @evens = grep { $_ % 2 == 0 } @$lst;\n    my\
    \ $sum = 0;\n    my $i = 0;\n    while ($i < scalar @odds && $i < scalar @evens)\
    \ {\n        $sum += $odds[$i];\n        $i++;\n    }\n    return $sum;\n}", " \
    \   my $ret = 0;\n    my $i = 0;\n    my $l = scalar @$lst;\n    while ($i < $l)\
    \ {\n        if ($i % 2 == 0) {\n            if ($lst->[$i] % 2 == 1) {\n    \
    \            $ret += $lst->[$i];\n            }\n        }\n        $i++;\n  \
    \  }\n    return $ret;\n}", "    my $total = 0;\n    for (my $i = 0; $i < scalar\
    \ @$lst; $i++) {\n        $total += $lst->[$i] if $i % 2 == 0 && $lst->[$i] %\
    \ 2 == 1;\n    }\n    return $total;\n}", "    my $odd_in_even = 0;\n    for (my\
    \ $i = 0; $i < scalar @$lst; $i += 2) {\n        if ($lst->[$i] % 2) {\n     \
    \       $odd_in_even += $lst->[$i];\n        }\n    }\n    return $odd_in_even;\n\
    }\n1;", "    my $sum = 0;\n    for my $i (0 .. $#$lst) {\n        $sum += $lst->[$i]\
    \ if $i % 2 == 0 && $lst->[$i] % 2 == 1;\n    }\n    return $sum;\n}", "    my\
    \ $ret = 0;\n    my $i = 0;\n    my $length = scalar @$lst;\n    while ($i < $length)\
    \ {\n        my $x = @$lst[$i];\n        if ($x % 2 == 1) {\n            $ret\
    \ += $x;\n        }\n        $i += 2;\n    }\n    return $ret;\n}", "    return\
    \ 0 if(@$lst == 0);\n    my $acc = 0;\n    my $i = 0;\n    while($i < @$lst) {\n\
    \        if($i % 2 == 0) {\n            $acc += $lst->[$i] if($lst->[$i] % 2 ==\
    \ 1);\n        }\n        $i++;\n    }\n    return $acc;\n}", "    my $sum = 0;\n\
    \    #my @odds = map { $_ if ($_ % 2 == 1) } @$lst;\n    #my @evens = map { $_\
    \ if ($_ % 2 == 0) } @$lst;\n    for (my $i = 0; $i < @$lst; $i++) {\n       \
    \ my $e = $lst->[$i];\n        $sum += $e if ($e % 2 == 1 && $i % 2 == 0);\n \
    \   }\n    return $sum;\n}", "    # your solution here...\n    my $i=0;\n    my\
    \ $s=0;\n    while($i< scalar @$lst){\n    if($i%2==0 && $lst->[$i]%2!=0){\n \
    \       $s+=$lst->[$i];\n    }\n    $i++;\n    }\n    return $s;\n}", "    my\
    \ @odds = ();\n    my $count = 0;\n    my $sum = 0;\n    foreach my $n (@$lst)\
    \ {\n        $count++;\n        if ($n % 2) {\n            push @odds, $n;\n \
    \       }\n    }\n    for (my $i = 0; $i < @odds; $i++) {\n        if ($i % 2\
    \ == 0) {\n            $sum += $odds[$i];\n        }\n    }\n    return $sum;\n\
    }", "    my $ret = 0;\n    for (my $i = 0; $i < scalar(@$lst); $i += 2) {\n  \
    \      $ret += $lst->[$i] if $lst->[$i] % 2;\n    }\n    return $ret;\n}", " \
    \   my $ans = 0;\n    for my $i (0..$#$lst) {\n        $ans += $lst->[$i] if $i\
    \ % 2 == 0 and $lst->[$i] % 2 == 1;\n    }\n    return $ans;\n}", "    # ...\n\
    }", "    my $sum = 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n      \
    \  $sum += @$lst[$i] if $i % 2 == 0 && @$lst[$i] % 2 == 1;\n    }\n    return\
    \ $sum;\n}", "    my $result = 0;\n    for (my $i = 0; $i < scalar(@$lst); $i\
    \ += 2) {\n        if ($lst->[$i] % 2) {\n            $result += $lst->[$i];\n\
    \        }\n    }\n    return $result;\n}", "    my $sum = 0;\n    my $idx = 0;\n\
    \    foreach my $i (@$lst) {\n        $sum += $i if $idx % 2 == 0 && $i % 2 ==\
    \ 1;\n        $idx++;\n    }\n    return $sum;\n}", "    my $total = 0;\n    my\
    \ $i = 0;\n    while ($i < scalar @$lst) {\n        $total += $lst->[$i] if ($i\
    \ % 2 == 0 and $lst->[$i] % 2 == 1);\n        $i++;\n    }\n    return $total;\n\
    }", "    my $sum = 0;\n    for my $i (0 .. scalar(@$lst) - 1) {\n        if ($i\
    \ % 2 == 0 && $lst->[$i] % 2 == 1) {\n            $sum += $lst->[$i];\n      \
    \  }\n    }\n    return $sum;\n}\nprint solution([5, 8, 7, 1]) . \"\\n\";\nprint\
    \ solution([3, 3, 3, 3, 3]) . \"\\n\";\nprint solution([30, 13, 24, 321]) . \"\
    \\n\";", "    my $s = 0;\n    for (0..$#$lst) {\n        $s += $lst->[$_] if $_\
    \ % 2 == 0 and $lst->[$_] % 2 == 1;\n    }\n    return $s;\n}", "    my $answer\
    \ = 0;\n    for (my $i = 0; $i < scalar @$lst; $i += 2) {\n        $answer +=\
    \ $lst->[$i] if $lst->[$i] % 2 == 1;\n    }\n    return $answer;\n}", "    my\
    \ $result = 0;\n    for my $i (0 .. $#$lst) {\n        $result += $lst->[$i] if\
    \ $i % 2 == 0 && $lst->[$i] % 2 == 1;\n    }\n    return $result;\n}", "    my\
    \ $result = 0;\n    for my $idx (0 .. $#$lst) {\n        next if $idx % 2;\n \
    \       $result += $lst->[$idx] if $lst->[$idx] % 2;\n    }\n    return $result;\n\
    }", "    my $sum = 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n      \
    \  if ($i % 2 == 0) {\n            $sum += $lst->[$i] if $lst->[$i] % 2 == 1;\n\
    \        }\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for (my $i = 0;\
    \ $i < scalar @$lst; $i+=2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 ==\
    \ 1;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    my $i = 0;\n    while($i\
    \ < scalar(@$lst)){\n        if($i % 2 == 0){\n            $sum += $lst->[$i]\
    \ if $lst->[$i] % 2 == 1;\n        }\n        $i += 1;\n    }\n    return $sum;\n\
    }", "    my $sum;\n    for my $i (0..$#$lst) {\n        if ($i % 2 == 0 and $lst->[$i]\
    \ % 2 != 0) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n\
    }\n1;", "    my @nums = @$lst;\n    return sum(grep({$_ % 2 == 1} @nums[grep {$_\
    \ % 2 == 0} 0..scalar(@nums)-1]));\n}", "    my $sum;\n    my $counter = 0;\n\
    \    foreach my $x (@$lst) {\n        if ($counter % 2 == 0 && $x % 2 == 1) {\n\
    \            $sum += $x;\n        }\n        $counter++;\n    }\n    return $sum;\n\
    }", "    my $result = 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n  \
    \      if ($i % 2 == 0 && $lst->[$i] % 2 == 1) {\n            $result += $lst->[$i];\n\
    \        }\n    }\n    return $result;\n}\n1;", "    my $s = 0;\n    for (my $i\
    \ = 0; $i < @$lst; $i += 2) {\n        $s += $lst->[$i] if $lst->[$i] % 2 == 1;\n\
    \    }\n    return $s;\n}", "    my $ret = 0;\n    for my $index (0 .. $#$lst)\
    \ {\n        $ret += $lst->[$index] if $index % 2 == 0 && $lst->[$index] % 2 ==\
    \ 1;\n    }\n    return $ret;\n}\nprint(\"[\" . join(', ', @{solution([5, 8, 7,\
    \ 1])}) . \"]\\n\");\nprint(\"[\" . join(', ', @{solution([3, 3, 3, 3, 3])}) .\
    \ \"]\\n\");\nprint(\"[\" . join(', ', @{solution([30, 13, 24, 321])}) . \"]\\\
    n\");", "    $lst = [map {$_ == 0 ? () : $_} @$lst];\n    if(@$lst == 0) {\n \
    \       return 0;\n    }\n    return $lst->[0] + solution([@$lst[2..$#$lst]]);\n\
    }", "    my $sum = 0;\n    my $flag = 0;\n    foreach my $n (@$lst) {\n      \
    \  $sum += $n if $flag == 0;\n        $flag = 1 - $flag;\n    }\n    return $sum;\n\
    }", "    my $s = 0;\n    for my $i (0 .. @$lst - 1) {\n        next if $i % 2\
    \ == 0;\n        $s += $lst->[$i] if $lst->[$i] % 2 == 1;\n    }\n    return $s;\n\
    }", "    sum(map { $lst->[$_] } grep { $_ % 2 == 0 } 0 .. $#$lst);\n}", "    my\
    \ $sum = 0;\n    my $counter = 0;\n    foreach my $num (@$lst) {\n        if ($counter\
    \ % 2 == 0 && $num % 2 == 1) {\n            $sum += $num;\n        }\n       \
    \ $counter++;\n    }\n    return $sum;\n}", "    my $i = 0;\n    my $sum = 0;\n\
    \    while ($i < scalar @$lst) {\n        if ($i % 2 == 0) {\n            if ($lst->[$i]\
    \ % 2 == 1) {\n                $sum += $lst->[$i];\n            }\n        }\n\
    \        $i += 1;\n    }\n    return $sum;\n}\nmy $res = solution([5, 8, 7, 1]);\n\
    print \"$res\\n\";", "    my $sum = 0;\n    for (my $i = 0; $i < scalar @$lst;\
    \ $i++) {\n        my $num = $lst->[$i];\n        if ($i % 2 == 0) {\n       \
    \     if ($num % 2 == 1) {\n                $sum += $num;\n            }\n   \
    \     }\n    }\n    return $sum;\n}", "    my @lst = @$lst;\n    my $sum = 0;\n\
    \    for (my $i = 0; $i < @lst; $i += 2) {\n        if ($lst[$i] % 2 == 1) {\n\
    \            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}", "    my\
    \ $sum = 0;\n    for my $i (0 .. $#$lst) {\n        $sum += $lst->[$i] if ($i\
    \ % 2 == 0 && $lst->[$i] % 2 == 1);\n    }\n    return $sum;\n}", "    #\n   \
    \ # Write your code here.\n    #\n}", "    my $sum;\n    my $i;\n    for($i =\
    \ 0; $i < @$lst; $i++){\n        if($i % 2 == 0 && $lst->[$i] % 2 == 1){\n   \
    \         $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}", "    my\
    \ $sum = 0;\n    for (my $i = 0; $i < scalar @$lst; $i += 2) {\n        $sum +=\
    \ $lst->[$i] if $lst->[$i] % 2;\n    }\n    return $sum;\n}", "    my $sum = 0;\n\
    \    my $i = 0;\n    for my $x (@$lst) {\n        $sum += $x if $i % 2 == 0 &&\
    \ $x % 2 == 1;\n        $i++;\n    }\n    return $sum;\n}", "    my $sum = 0;\n\
    \    my $n = scalar @$lst;\n    for(my $i = 0; $i < $n; $i++) {\n        my $a\
    \ = $lst->[$i];\n        if($a % 2 == 1 and $i % 2 == 0) {\n            $sum +=\
    \ $a;\n        }\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for my $i\
    \ (0 .. $#$lst) {\n        $sum += $lst->[$i] if $i % 2 == 0 && $lst->[$i] % 2\
    \ == 1;\n    }\n    return $sum;\n}", "    return sum(0, grep {$_ % 2 == 1} map\
    \ {$lst->[$_]} grep {$_ % 2 == 0} 0..$#$lst);\n}", "    return sum map { $lst->[$_]\
    \ } grep { $_ % 2 == 0 } 0 .. $#$lst;\n}", "    return 0 if (not defined $lst);\n\
    \    return 0 if (ref($lst) ne 'ARRAY');\n    my $sum = 0;\n    for (my $i = 0;\
    \ $i < scalar(@$lst); $i+=2) {\n        $sum += $lst->[$i] if ($lst->[$i] % 2\
    \ == 1);\n    }\n    return $sum;\n}", "    return sum(grep {$_%2==1} @{$lst}[0,2..$#$lst]);\n\
    }", "    my $sum = 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n     \
    \   if ($i % 2 == 0) {\n            if ($lst->[$i] % 2 == 1) {\n             \
    \   $sum += $lst->[$i];\n            }\n        }\n    }\n    return $sum;\n}",
  "    my $sum = 0;\n    foreach my $i (0..$#$lst) {\n        next if ($i % 2 == 0);\n\
    \        $sum += $lst->[$i] if ($lst->[$i] % 2 == 1);\n    }\n    return $sum;\n\
    }", "    my $sum = 0;\n    for (my $i = 0; $i < scalar @$lst; $i += 2) {\n   \
    \     if ($lst->[$i] % 2 == 1) {\n            $sum += $lst->[$i];\n        }\n\
    \    }\n    return $sum;\n}", "    my $res = 0;\n    for (my $i = 0; $i < scalar\
    \ @$lst; $i++) {\n        $res += $lst->[$i] if $i % 2 == 0 && $lst->[$i] % 2\
    \ == 1;\n    }\n    return $res;\n}", "    my $cnt = 0;\n    for my $i (0..$#$lst)\
    \ {\n        if($i % 2 == 0 && $lst->[$i] % 2 == 1) {\n            $cnt += $lst->[$i];\n\
    \        }\n    }\n    return $cnt;\n}", "    my $sum = 0;\n    my $i = 0;\n \
    \   while ($i < scalar @$lst) {\n        $sum += $lst->[$i] if $lst->[$i] % 2\
    \ == 1 && $i % 2 == 0;\n        $i++;\n    }\n    return $sum;\n}", "    my $sum\
    \ = 0;\n    for my $i (0 .. $#$lst) {\n        $sum += $lst->[$i] if $i % 2 ==\
    \ 0 && $lst->[$i] % 2 != 0;\n    }\n    return $sum;\n}", "    my $sum = 0;\n\
    \    for my $i (0 .. $#$lst) {\n        next if $i & 1;\n        $sum += $lst->[$i]\
    \ if $lst->[$i] & 1;\n    }\n    return $sum;\n}", "    my $c = 0;\n    foreach\
    \ my $i (0..$#$lst) {\n        $c += $lst->[$i] if $i % 2 == 0 && $lst->[$i] %\
    \ 2 == 1;\n    }\n    return $c;\n}", "    my $sum = 0;\n    for my $idx (0 ..\
    \ scalar(@$lst) - 1) {\n        if ($idx % 2 == 0) {\n            $sum += $lst->[$idx]\
    \ if $lst->[$idx] % 2 == 1;\n        }\n    }\n    return $sum;\n}", "    my $res\
    \ = 0;\n    for (my $i = 0; $i < scalar @$lst; $i+=2) {\n        $res += @$lst[$i]\
    \ if @$lst[$i] % 2;\n    }\n    return $res;\n}", "    my $ans = 0;\n    for (my\
    \ $i = 0; $i < scalar(@$lst); $i += 2) {\n        $ans += $lst->[$i] if $lst->[$i]\
    \ % 2 == 1;\n    }\n    return $ans;\n}", "    my $sum = 0;\n    foreach my $i\
    \ (1..(@$lst - 1)) {\n        next if ($i % 2 == 0);\n        $sum += $lst->[$i]\
    \ if ($lst->[$i] % 2 == 0);\n    }\n    return $sum;\n}", "    my $sum = 0;\n\
    \    for my $i (0 .. $#$lst) {\n        if ($i % 2 == 0 and $lst->[$i] % 2 !=\
    \ 0) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}",
  "    my $sum = 0;\n    for my $i (0 .. $#$lst) {\n        $sum += $lst->[$i] if\
    \ $i % 2 == 0 && $lst->[$i] % 2 == 1;\n    }\n    return $sum;\n}", "    my $i\
    \ = 0;\n    my $ans = 0;\n    for $i (0 .. $#{$lst}) {\n        if(($i % 2 ==\
    \ 0) && ($lst->[$i] % 2 == 1)) {\n            $ans += $lst->[$i];\n        }\n\
    \    }\n    return $ans;\n}", "    my $sum = 0;\n    for my $i (0 .. $#$lst) {\n\
    \        $sum += $lst->[$i] if $i % 2 && $lst->[$i] % 2;\n    }\n    return $sum;\n\
    }", "    my @lst = @$lst;\n    my $res = 0;\n    for my $index (0..@lst-1) {\n\
    \        $res += $lst[$index] if $index % 2 == 0 && $lst[$index] % 2 == 1;\n \
    \   }\n    return $res;\n}", "    my $result = 0;\n    for (my $i = 0; $i < scalar(@$lst);\
    \ $i+=2) {\n        $result += $lst->[$i] if $lst->[$i] % 2 == 1;\n    }\n   \
    \ return $result;\n}", "    return sum( filter( sub { (is_even($_[0]) && !is_even($_[1]))\
    \ }, $lst ));\n}", "    return sum(map { $_->[0] } grep { $_->[1] % 2 == 0 } \n\
    \        map { [$_, $lst->[$_]] } 0..$#$lst);\n}", "    my $result = 0;\n    for\
    \ my $i (0 .. $#$lst) {\n        $result += $lst->[$i] if $i % 2 == 0 && $lst->[$i]\
    \ % 2 == 1;\n    }\n    return $result;\n}\nsay \"solution([5, 8, 7, 1]) = \"\
    , solution([5, 8, 7, 1]);\nsay \"solution([3, 3, 3, 3, 3]) = \", solution([3,\
    \ 3, 3, 3, 3]);\nsay \"solution([30, 13, 24, 321]) = \", solution([30, 13, 24,\
    \ 321]);", "    my $res = 0;\n    for (my $i = 0; $i < scalar @$lst; $i+=2) {\n\
    \        $res += $lst->[$i] if ($lst->[$i] % 2);\n    }\n    return $res;\n}",
  "    return sum(grep { $lst->[$_] % 2 } grep { $_ % 2 == 0 } 0..$#$lst);\n}", " \
    \   my $ans = 0;\n    for my $i (0..@$lst-1) {\n        if ($i % 2 == 0 and $lst->[$i]\
    \ % 2 == 1) {\n            $ans += $lst->[$i];\n        }\n    }\n    return $ans;\n\
    }", "    my $sum = 0;\n    for (my $i = 0; $i < scalar(@$lst); $i += 2) {\n  \
    \      $sum += @$lst[$i] if @$lst[$i] % 2;\n    }\n    return $sum;\n}", "   \
    \ my $sum;\n    for my $i (0..$#$lst) {\n        $sum += $lst->[$i] if $i % 2\
    \ == 0 and $lst->[$i] % 2 == 1;\n    }\n    return $sum;\n}", "    my $pos = 0;\n\
    \    my $sum = 0;\n    for my $i (@$lst) {\n        if (($pos % 2) == 0) {\n \
    \           if (($i % 2) == 1) {\n                $sum += $i;\n            }\n\
    \        }\n        $pos += 1;\n    }\n    return $sum;\n}", "    my $sum = 0;\n\
    \    for (my $i = 0; $i < scalar @$lst; $i++) {\n        $sum += $lst->[$i] if\
    \ $i % 2 and $lst->[$i] % 2;\n    }\n    return $sum;\n}", "    my $sum = 0;\n\
    \    for (my $i = 0; $i < scalar @$lst; $i += 2) {\n        if ($lst->[$i] % 2)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}",
  "    my $sum = 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $sum += $lst->[$i] if $lst->[$i] % 2 == 1;\n      \
    \  }\n    }\n    return $sum;\n}", "    my $ret = 0;\n    for my $i (0..@$lst-1)\
    \ {\n        if ($i % 2 == 0) {\n            $ret += $lst->[$i] if $lst->[$i]\
    \ % 2 == 1;\n        }\n    }\n    return $ret;\n}", "    my $sum = 0;\n    my\
    \ $i = 0;\n    for (@$lst) {\n        $sum += $_ if $i % 2 == 0 && $_ % 2 == 1;\n\
    \        $i++;\n    }\n    return $sum;\n}", "    my $idx = 0;\n    my $sum =\
    \ 0;\n    foreach my $num (@$lst) {\n        if ($idx % 2 == 0 && $num % 2 ==\
    \ 1) {\n            $sum += $num;\n        }\n        $idx++;\n    }\n    return\
    \ $sum;\n}", "    # TODO: Complete this function\n    my $i = 0;\n    my $ret\
    \ = 0;\n    for $i (@$lst) {\n        $ret += $i if ($i % 2 == 1 && $i % 4 ==\
    \ 1);\n    }\n    return $ret;\n}", "    my @lst_result = \n        map { $lst->[$_]\
    \ }\n        grep { $_ % 2 == 0 } \n        grep { $lst->[$_] % 2 == 1 }\n   \
    \     0 .. $#$lst;\n    return sum(@lst_result);\n}", "    my $s = 0;\n    my\
    \ $i = 0;\n    while ($i < @$lst) {\n        if ($i % 2 == 0 && $lst->[$i] % 2\
    \ == 1) {\n            $s += $lst->[$i];\n        }\n        $i += 1;\n    }\n\
    \    return $s;\n}", "    my $sum = 0;\n    for (my $i = 0; $i < scalar @$lst;\
    \ $i++) {\n        if ($i % 2 == 0) {\n            $sum += $lst->[$i] if $lst->[$i]\
    \ % 2 == 1;\n        }\n    }\n    return $sum;\n}", "    return sum map { $_->[0]\
    \ } grep { ($_->[1] + 1) % 2 == 0 } zip [0..$#$lst], $lst;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
