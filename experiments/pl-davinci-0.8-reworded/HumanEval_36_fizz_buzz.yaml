name: HumanEval_36_fizz_buzz
language: pl
prompt: "# Return the number of times the digit 7 appears in integers less than n\
  \ which are divisible by 11 or 13.\n# >>> fizz_buzz(50)\n# 0\n# >>> fizz_buzz(78)\n\
  # 2\n# >>> fizz_buzz(79)\n# 3\nsub fizz_buzz {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fizz_buzz;\n\
  \        if(eq_deeply($candidate->(50),0)) {\n        print \"ok!\" }else{\n   \
  \     exit 1;\n        }\n        if(eq_deeply($candidate->(78),2)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(79),3))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),3))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(200),6))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4000),192))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10000),639))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100000),8026))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $cnt = 0;\n    for my $i (1..$n) {\n        if ($i % 11 == 0\
    \ || $i % 13 == 0) {\n            $cnt += ($i =~ tr/7//);\n        }\n    }\n\
    \    return $cnt;\n}", "    my $count = 0;\n    for (1..$n) {\n        if (($_\
    \ % 11 == 0 || $_ % 13 == 0) && $_ =~ /7/) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    for (my $i = 1; $i <\
    \ $n; $i++) {\n        if ( $i % 11 == 0 || $i % 13 == 0 ) {\n            my $num\
    \ = $i;\n            while ( $num > 0 ) {\n                if ( $num % 10 == 7\
    \ ) {\n                    $count++;\n                }\n                $num\
    \ = int($num / 10);\n            }\n        }\n    }\n    return $count;\n}",
  "    my $count = 0;\n    for (11..$n) {\n        next if $_ % 11 && $_ % 13;\n \
    \       my $digits = ();\n        for (split //, $_) {\n            $count++ if\
    \ $_ == 7;\n        }\n    }\n    return $count;\n}", "    my $result = 0;\n \
    \   while ($n > 0) {\n        $result += $n % 7;\n        $n = int $n / 10;\n\
    \    }\n    return $result;\n}", "    return grep(s{7$}{}, map($_ % 11 == 0 ||\
    \ $_ % 13 == 0 ? $_ : (), 1 .. $n - 1));\n}", "    return 0 if $n < 7;\n    $n\
    \ = int($n / 7) + 1;\n    return $n + int($n / 11) + int($n / 13) - int($n / 11\
    \ / 13);\n}", "    my $count = 0;\n    my $i = 0;\n    my $mult;\n    for (;;)\
    \ {\n\t$mult = 11 * $i;\n\tif ($mult >= $n) {\n\t    last;\n\t}\n\t$count += occur($mult,\
    \ 7);\n\t$mult = 13 * $i;\n\tif ($mult >= $n) {\n\t    last;\n\t}\n\t$count +=\
    \ occur($mult, 7);\n\t$i++;\n    }\n    return $count;\n}", "    my $rv = 0;\n\
    \    foreach my $i (1..$n-1) {\n        next unless $i % 11 == 0 or $i % 13 ==\
    \ 0;\n        while($i) {\n            $rv++ if $i % 10 == 7;\n            $i\
    \ /= 10;\n        }\n    }\n    return $rv;\n}", "    my $count = 0;\n    my $x\
    \ = 11;\n    while ($x < $n) {\n        if ($x % 11 == 0 or $x % 13 == 0) {\n\
    \            $count += grep { $_ == 7 } split(\"\", $x);\n        }\n        $x++;\n\
    \    }\n    return $count;\n}", "    my $res = 0;\n    for my $i (1..$n-1) {\n\
    \        if ($i % 11 == 0 || $i % 13 == 0) {\n            my $num = $i;\n    \
    \        while ($num) {\n                if ($num % 10 == 7) {\n             \
    \       $res++;\n                }\n                $num /= 10;\n            }\n\
    \        }\n    }\n    return $res;\n}", "    my $n7 = 0;\n    my $num = 0;\n\
    \    my $ret = 0;\n    while ($num < $n) {\n        if (($num % 11 == 0) || ($num\
    \ % 13 == 0)) {\n            while ($num > 0) {\n                $n7++ if ($num\
    \ % 10 == 7);\n                $num /= 10;\n            }\n            $ret +=\
    \ $n7;\n            $n7 = 0;\n        }\n        $num++;\n    }\n    return $ret;\n\
    }", "    my $count = 0;\n    foreach my $i (1..$n-1) {\n        if ($i % 11 ==\
    \ 0 or $i % 13 == 0) {\n            my $tmp = $i;\n            while ($tmp) {\n\
    \                $count++ if $tmp % 10 == 7;\n                $tmp /= 10;\n  \
    \          }\n        }\n    }\n    return $count;\n}", "    my $count = 0;\n\
    \    for (my $i = 1; $i < $n; $i++) {\n        if (($i % 11 == 0) || ($i % 13\
    \ == 0)) {\n            if ($i =~ /7/) {\n                $count++;\n        \
    \    }\n        }\n    }\n    return $count;\n}", "    return (($n % 11) == 0\
    \ || ($n % 13) == 0) ? ($n =~ tr/7//) : 0;\n}", "    my $count = 0;\n    for my\
    \ $i (1..$n-1) {\n        $count++ if (($i % 11 == 0 || $i % 13 == 0) && $i =~\
    \ /7/);\n    }\n    return $count;\n}", "    ...\n}", "    my $c = 0;\n    while\
    \ ($n > 0) {\n        my $m = $n % 10;\n        $c++ if ($m == 7);\n        $n\
    \ /= 10;\n    }\n    return $c;\n}", "    die \"n must be >= 2\" if $n < 2;\n\
    \    my $c = 0;\n    my @multiples_of_11 = grep {$_ % 11 == 0} 2..$n;\n    my\
    \ @multiples_of_13 = grep {$_ % 13 == 0} 2..$n;\n    my @multiples_of_11_and_13\
    \ = grep {$_ % 11 == 0 && $_ % 13 == 0} 2..$n;\n    my @all_multiples = (@multiples_of_11,\
    \ @multiples_of_13);\n    my %all_multiples = map {$_ => 1} @all_multiples;\n\
    \    my @unique_multiples = grep {!$all_multiples{$_}} @multiples_of_11_and_13;\n\
    \    push @unique_multiples, @all_multiples;\n    for my $multiple (@unique_multiples)\
    \ {\n        my $string_multiple = \"$multiple\";\n        my @characters = split(\"\
    \", $string_multiple);\n        for my $character (@characters) {\n          \
    \  if ($character == 7) {\n                $c++;\n            }\n        }\n \
    \   }\n    return $c;\n}", "    my $tot = 0;\n    my $mult = 2;\n    my $num =\
    \ $mult * 11;\n    while ($num < $n) {\n        my $cnt = 7_counter($num);\n \
    \       $tot += $cnt;\n        $mult += 1;\n        $num = $mult * 11;\n    }\n\
    \    $mult = 2;\n    $num = $mult * 13;\n    while ($num < $n) {\n        my $cnt\
    \ = 7_counter($num);\n        $tot += $cnt;\n        $mult += 1;\n        $num\
    \ = $mult * 13;\n    }\n    return $tot;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
