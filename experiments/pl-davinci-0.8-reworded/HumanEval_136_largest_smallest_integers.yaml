name: HumanEval_136_largest_smallest_integers
language: pl
prompt: "# Create a function that returns an array (a, b), where 'a' is\n# the largest\
  \ of negative integers, and 'b' is the smallest\n# of positive integers in an array.\n\
  # If there is no negative or positive integers, return them as undef.\n# Examples:\n\
  # >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n# [undef, 1]\n# >>> largest_smallest_integers([])\n\
  # [undef, undef]\n# >>> largest_smallest_integers([0])\n# [undef, undef]\nsub largest_smallest_integers\
  \ {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_smallest_integers;\n\
  \        if(eq_deeply($candidate->([2, 4, 1, 3, 5, 7]),[undef, 1])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
  \ 4, 1, 3, 5, 7, 0]),[undef, 1])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 2, 4, 5, 6, -2]),[-2,\
  \ 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
  \ 5, 3, 6, 2, 7, -7]),[-7, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[undef,\
  \ undef])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->([0]),[undef, undef])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -3, -5, -6]),[-1,\
  \ undef])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->([-1, -3, -5, -6, 0]),[-1, undef])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-6,\
  \ -4, -4, -3, 1]),[-3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n \
  \       }\n        if(eq_deeply($candidate->([-6, -4, -4, -3, -100, 1]),[-3, 1]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my($a, $b);\n    for(@$lst) {\n        if($_ < 0 && (!defined($a)\
    \ || $a < $_)) {\n            $a = $_;\n        }\n        elsif($_ > 0 && (!defined($b)\
    \ || $b > $_)) {\n            $b = $_;\n        }\n    }\n    return [$a, $b];\n\
    }", "    my ($max_neg, $min_pos) = (undef, undef);\n    foreach my $elem (@$lst)\
    \ {\n        if ($elem < 0) {\n            $max_neg = $elem if $max_neg < $elem;\n\
    \        } elsif ($elem > 0) {\n            $min_pos = $elem if !defined($min_pos)\
    \ || $min_pos > $elem;\n        }\n    }\n    return ($max_neg, $min_pos);\n}",
  "    my($a, $b) = (undef, undef);\n    for my $elem (@$lst) {\n        if ($elem\
    \ < 0) {\n            if (not defined $a or $elem > $a) {\n                $a\
    \ = $elem;\n            }\n        }\n        elsif ($elem > 0) {\n          \
    \  if (not defined $b or $elem < $b) {\n                $b = $elem;\n        \
    \    }\n        }\n    }\n    return ($a, $b);\n}", "    my($a, $b);\n    foreach\
    \ my $x (@$lst) {\n        if ($x < 0) {\n            if (!defined($a) || $x >\
    \ $a) {\n                $a = $x;\n            }\n        } else {\n         \
    \   if (!defined($b) || $x < $b) {\n                $b = $x;\n            }\n\
    \        }\n    }\n    return [$a, $b];\n}", "    my @result = (undef, undef);\n\
    \    if (@$lst) {\n        my @positive = grep { $_ > 0 } @$lst;\n        my @negative\
    \ = grep { $_ < 0 } @$lst;\n        if (@positive) {\n            $result[1] =\
    \ min(@positive);\n        }\n        if (@negative) {\n            $result[0]\
    \ = max(@negative);\n        }\n    }\n    return @result;\n}", "    # 1. filter\
    \ positive and negative integers\n    my @positives = filter { $_ > 0 } @$lst;\n\
    \    my @negatives = filter { $_ < 0 } @$lst;\n    # 2. sort them\n    @positives\
    \ = sort { $a <=> $b } @positives;\n    @negatives = sort { $b <=> $a } @negatives;\n\
    \    # 3. get smallest and largest\n    my $largest = $negatives[0];\n    my $smallest\
    \ = $positives[0];\n    # 4. return result\n    return [$largest, $smallest];\n\
    }", "    my @lst = @$lst;\n    my $ret = [];\n    return $ret if (@lst == 0);\n\
    \    my $i = 0;\n    while ($i < @lst) {\n        if ($lst[$i] < 0) {\n      \
    \      $ret->[0] = $lst[$i];\n            last;\n        }\n        $i++;\n  \
    \  }\n    $i = 0;\n    while ($i < @lst) {\n        if ($lst[$i] > 0) {\n    \
    \        $ret->[1] = $lst[$i];\n            last;\n        }\n        $i++;\n\
    \    }\n    return $ret;\n}", "    my ($max_neg, $min_pos) = (undef, undef);\n\
    \    foreach my $item (@$lst) {\n        if ($item < 0) {\n            if (!defined($max_neg)\
    \ || $item > $max_neg) {\n                $max_neg = $item;\n            }\n \
    \       } elsif ($item > 0) {\n            if (!defined($min_pos) || $item < $min_pos)\
    \ {\n                $min_pos = $item;\n            }\n        }\n    }\n    return\
    \ [$max_neg, $min_pos];\n}", "    my $max = undef;\n    my $min = undef;\n   \
    \ for my $x (@$lst) {\n        if($x > 0) {\n            if(!defined($min) ||\
    \ $x < $min) {\n                $min = $x;\n            }\n        } elsif($x\
    \ < 0) {\n            if(!defined($max) || $x > $max) {\n                $max\
    \ = $x;\n            }\n        }\n    }\n    return [$max, $min];\n}", "    my($largest_negative)\
    \ = undef;\n    my($smallest_positive) = undef;\n    foreach my $n (@$lst) {\n\
    \        if ($n < 0) {\n            if ((defined $largest_negative) and ($n >\
    \ $largest_negative)) {\n                $largest_negative = $n;\n           \
    \ } elsif (! defined $largest_negative) {\n                $largest_negative =\
    \ $n;\n            }\n        }\n        if ($n > 0) {\n            if ((defined\
    \ $smallest_positive) and ($n < $smallest_positive)) {\n                $smallest_positive\
    \ = $n;\n            } elsif (! defined $smallest_positive) {\n              \
    \  $smallest_positive = $n;\n            }\n        }\n    }\n    return [$largest_negative,\
    \ $smallest_positive];\n}", "    my($neg, $pos) = (undef, undef);\n    for my\
    \ $i (@$lst) {\n        if ($i < 0) {\n            $neg = $i if !defined($neg)\
    \ || $i > $neg;\n        } elsif ($i > 0) {\n            $pos = $i if !defined($pos)\
    \ || $i < $pos;\n        }\n    }\n    return [$neg, $pos];\n}", "    my($a, $b);\n\
    \    foreach my $e (@$lst) {\n        if ($e > 0) {\n            if (not defined\
    \ $b or $e < $b) {\n                $b = $e;\n            }\n        } elsif ($e\
    \ < 0) {\n            if (not defined $a or $e > $a) {\n                $a = $e;\n\
    \            }\n        }\n    }\n    [$a, $b];\n}", "    my($a, $b) = (undef,\
    \ undef);\n    foreach $i (@$lst) {\n        if ($i < 0) {\n            if (!defined($a)\
    \ || $i > $a) {\n                $a = $i;\n            }\n        } elsif ($i\
    \ > 0) {\n            if (!defined($b) || $i < $b) {\n                $b = $i;\n\
    \            }\n        }\n    }\n    return [$a, $b];\n}", "    my $max;\n  \
    \  my $min;\n    for my $i (@$lst) {\n        if($i >= 0) {\n            if(!defined($min)\
    \ || $i < $min) {\n                $min = $i;\n            }\n        } else {\n\
    \            if(!defined($max) || $i > $max) {\n                $max = $i;\n \
    \           }\n        }\n    }\n    return [$max, $min];\n}", "    my $largest_neg;\n\
    \    my $smallest_pos;\n    for my $i (@$lst) {\n        if ($i < 0) {\n     \
    \       if (not defined $largest_neg) {\n                $largest_neg = $i;\n\
    \            } else {\n                $largest_neg = $i if $i > $largest_neg;\n\
    \            }\n        } elsif ($i > 0) {\n            if (not defined $smallest_pos)\
    \ {\n                $smallest_pos = $i;\n            } else {\n             \
    \   $smallest_pos = $i if $i < $smallest_pos;\n            }\n        }\n    }\n\
    \    return (defined $largest_neg ? $largest_neg : undef,\n            defined\
    \ $smallest_pos ? $smallest_pos : undef);\n}", "    my $len = @$lst;\n    my $ind\
    \ = 0;\n    my $smallest;\n    my $largest;\n    my $smallest_ind;\n    my $largest_ind;\n\
    \    while ($ind < $len) {\n        my $value = $lst->[$ind];\n        if (defined\
    \ $value && $value != 0) {\n            if ($value > 0) {\n                if\
    \ (!defined $smallest || $value < $smallest) {\n                    $smallest\
    \ = $value;\n                    $smallest_ind = $ind;\n                }\n  \
    \          } else {\n                if (!defined $largest || $value > $largest)\
    \ {\n                    $largest = $value;\n                    $largest_ind\
    \ = $ind;\n                }\n            }\n        }\n        $ind += 1;\n \
    \   }\n    return [$largest, $smallest];\n}", "    return (undef, undef) unless\
    \ (defined $lst && scalar @$lst);\n    return (undef, undef) if scalar grep {\
    \ $_ == 0 } @$lst;\n    return (undef, undef) if (scalar grep { $_ > 0 } @$lst)\
    \ == 0;\n    return (undef, undef) if (scalar grep { $_ < 0 } @$lst) == 0;\n \
    \   my $max_negative = (sort { $b <=> $a } grep { $_ < 0 } @$lst)[0];\n    my\
    \ $min_positive = (sort { $a <=> $b } grep { $_ > 0 } @$lst)[0];\n    return ($max_negative,\
    \ $min_positive);\n}", "    my($largest_negative) = undef;\n    my($smallest_positive)\
    \ = undef;\n    for my $x (@$lst) {\n        if ($x < 0) {\n            if (not\
    \ defined $largest_negative) {\n                $largest_negative = $x;\n    \
    \        } elsif ($x > $largest_negative) {\n                $largest_negative\
    \ = $x;\n            }\n        } elsif ($x > 0) {\n            if (not defined\
    \ $smallest_positive) {\n                $smallest_positive = $x;\n          \
    \  } elsif ($x < $smallest_positive) {\n                $smallest_positive = $x;\n\
    \            }\n        }\n    }\n    return [$largest_negative, $smallest_positive];\n\
    }", "    my $max_neg = undef;\n    my $min_pos = undef;\n    foreach my $item\
    \ (@$lst) {\n        if($item >= 0) {\n            if(!defined($min_pos) || $item\
    \ < $min_pos) {\n                $min_pos = $item;\n            }\n        } else\
    \ {\n            if(!defined($max_neg) || $item > $max_neg) {\n              \
    \  $max_neg = $item;\n            }\n        }\n    }\n    return [$max_neg, $min_pos];\n\
    }", "    return undef if !ref($lst) eq 'ARRAY';\n    my($max, $min);\n    for\
    \ (@$lst) {\n        if ($_ > 0) {\n            $min = $_ if !defined($min) ||\
    \ $_ < $min;\n        } elsif ($_ < 0) {\n            $max = $_ if !defined($max)\
    \ || $_ > $max;\n        }\n    }\n    return [$max, $min];\n}", "    my($a, $b);\n\
    \    foreach (@$lst) {\n        $a = $_ if $_ < 0 and (!defined($a) or $a < $_);\n\
    \        $b = $_ if $_ > 0 and (!defined($b) or $b > $_);\n    }\n    return (defined($a)\
    \ ? $a : undef, defined($b) ? $b : undef);\n}", "    return (undef, undef) if\
    \ @$lst == 0;\n    return (undef, undef) if @$lst == 1 && $lst->[0] == 0;\n  \
    \  my $min = $lst->[0];\n    my $max = $lst->[0];\n    for my $i (@$lst) {\n \
    \       if ($i > 0) {\n            $min = $i if $i < $min;\n        } else {\n\
    \            $max = $i if $i > $max;\n        }\n    }\n    return ($max, $min);\n\
    }", "    my $b=undef;\n    my $a=undef;\n    for my $i (@$lst){\n        if ($i>0){\n\
    \            if (!defined($b)){\n                $b=$i;\n            }elsif ($i<$b){\n\
    \                $b=$i;\n            }\n        }elsif ($i<0){\n            if\
    \ (!defined($a)){\n                $a=$i;\n            }elsif ($i>$a){\n     \
    \           $a=$i;\n            }\n        }\n    }\n    return [$a,$b];\n}",
  "    my $largest_negative;\n    my $smallest_positive;\n    foreach my $n (@$lst)\
    \ {\n        if ($n > 0) {\n            if (not defined $smallest_positive or\
    \ $n < $smallest_positive) {\n                $smallest_positive = $n;\n     \
    \       }\n        }\n        if ($n < 0) {\n            if (not defined $largest_negative\
    \ or $n > $largest_negative) {\n                $largest_negative = $n;\n    \
    \        }\n        }\n    }\n    return ($largest_negative, $smallest_positive);\n\
    }", "    my($i, $m, $n);\n    foreach $i (@$lst) {\n        if($i < 0 && (!defined($m)\
    \ || $i > $m)) {\n            $m = $i;\n        }\n        if($i > 0 && (!defined($n)\
    \ || $i < $n)) {\n            $n = $i;\n        }\n    }\n    return [$m, $n];\n\
    }", "    my($res);\n    my($i);\n    $res = undef;\n    foreach $i (@$lst) {\n\
    \        if ($i > 0) {\n            if (!defined($res)) {\n                $res\
    \ = $i;\n            } elsif ($i < $res) {\n                $res = $i;\n     \
    \       }\n        }\n    }\n    return [undef, $res];\n}", "    my ($n, $p);\n\
    \    for my $elem (@$lst) {\n        if ($elem > 0) {\n            $p = $elem\
    \ if not defined $p or $elem < $p;\n        } elsif ($elem < 0) {\n          \
    \  $n = $elem if not defined $n or $elem > $n;\n        }\n    }\n    return [$n,\
    \ $p];\n}", "    my $a = undef;\n    my $b = undef;\n    foreach my $x (@$lst)\
    \ {\n        if ($x > 0) {\n            if (!defined($b) || $x < $b) {\n     \
    \           $b = $x;\n            }\n        }\n        elsif ($x < 0) {\n   \
    \         if (!defined($a) || $x > $a) {\n                $a = $x;\n         \
    \   }\n        }\n    }\n    return [$a, $b];\n}", "    my($max_neg, $min_pos)\
    \ = (undef, undef);\n    for my $e (@$lst) {\n        $max_neg = $e if ($e < 0\
    \ and ($max_neg == undef or $e > $max_neg));\n        $min_pos = $e if ($e > 0\
    \ and ($min_pos == undef or $e < $min_pos));\n    }\n    return [$max_neg, $min_pos];\n\
    }", "    my $max_neg;\n    my $min_pos;\n    foreach my $x (@$lst) {\n       \
    \ if ($x > 0 && ! defined $min_pos) {\n            $min_pos = $x;\n        } elsif\
    \ ($x > 0 && $x < $min_pos) {\n            $min_pos = $x;\n        } elsif ($x\
    \ < 0 && ! defined $max_neg) {\n            $max_neg = $x;\n        } elsif ($x\
    \ < 0 && $x > $max_neg) {\n            $max_neg = $x;\n        }\n    }\n    return\
    \ [$max_neg, $min_pos];\n}", "    my $max_neg;\n    my $min_pos;\n    foreach\
    \ my $x (@$lst) {\n        if ($x < 0) {\n            $max_neg = $x if !defined($max_neg)\
    \ || $x > $max_neg;\n        } elsif ($x > 0) {\n            $min_pos = $x if\
    \ !defined($min_pos) || $x < $min_pos;\n        }\n    }\n    return [$max_neg,\
    \ $min_pos];\n}", "    my @sorted = sort {$a <=> $b} @$lst;\n    my $min = undef;\n\
    \    my $max = undef;\n    for my $i (@sorted) {\n        if ($i < 0) {\n    \
    \        $max = $i;\n        } else {\n            $min = $i;\n            last;\n\
    \        }\n    }\n    return [$max, $min];\n}", "    my $largest = undef;\n \
    \   my $smallest = undef;\n    foreach my $x (@$lst) {\n        if ($x < 0) {\n\
    \            if (!defined($largest) || $x > $largest) {\n                $largest\
    \ = $x;\n            }\n        } elsif ($x > 0) {\n            if (!defined($smallest)\
    \ || $x < $smallest) {\n                $smallest = $x;\n            }\n     \
    \   }\n    }\n    return [$largest, $smallest];\n}", "    my $max_neg = undef;\n\
    \    my $min_pos = undef;\n    for my $i (@$lst) {\n        if ($i < 0) {\n  \
    \          if (!defined($max_neg) || $i > $max_neg) {\n                $max_neg\
    \ = $i;\n            }\n        } elsif ($i > 0) {\n            if (!defined($min_pos)\
    \ || $i < $min_pos) {\n                $min_pos = $i;\n            }\n       \
    \ }\n    }\n    return [$max_neg, $min_pos];\n}", "    my @negs = grep { $_ <\
    \ 0 } @$lst;\n    my @pos = grep { $_ > 0 } @$lst;\n    return [min(@negs), max(@pos)];\n\
    }", "    # TODO\n}", "    my $max_neg = undef;\n    my $min_pos = undef;\n   \
    \ for my $i (@$lst) {\n        if ($i < 0 && !defined($max_neg) || $i > $max_neg)\
    \ {\n            $max_neg = $i;\n        }\n        if ($i > 0 && !defined($min_pos)\
    \ || $i < $min_pos) {\n            $min_pos = $i;\n        }\n    }\n    return\
    \ [$max_neg, $min_pos];\n}", "    my ($a, $b);\n    if (scalar @$lst == 0) {\n\
    \        return [undef, undef];\n    } elsif (scalar @$lst == 1) {\n        return\
    \ [undef, undef];\n    } else {\n        for (@$lst) {\n            if ($_ > 0)\
    \ {\n                $b = $_ if not defined $b or $_ < $b;\n            } else\
    \ {\n                $a = $_ if not defined $a or $_ > $a;\n            }\n  \
    \      }\n        return [$a, $b];\n    }\n}", "    my $a = undef;\n    my $b\
    \ = undef;\n    for my $x (@$lst) {\n        if ($x > 0 && ($b eq undef || $x\
    \ < $b)) {\n            $b = $x;\n        }\n        if ($x < 0 && ($a eq undef\
    \ || $x > $a)) {\n            $a = $x;\n        }\n    }\n    return [$a, $b];\n\
    }", "    my $a = undef;\n    my $b = undef;\n    for my $i (@$lst) {\n       \
    \ if($i < 0) {\n            if(!defined($a) || $i > $a) {\n                $a\
    \ = $i;\n            }\n        } elsif($i > 0) {\n            if(!defined($b)\
    \ || $i < $b) {\n                $b = $i;\n            }\n        }\n    }\n \
    \   return [$a, $b];\n}", "    my($min, $max) = (undef, undef);\n    foreach my\
    \ $e (@$lst) {\n        next if $e == 0;\n        $min = $e if (not defined $min)\
    \ or ($e < $min);\n        $max = $e if (not defined $max) or ($e > $max);\n \
    \   }\n    return ($max, $min);\n}", "    my($s, $l);\n    foreach $x (@$lst)\
    \ {\n        if ($x > 0) {\n            if (!defined($s) || $x < $s) {\n     \
    \           $s = $x;\n            }\n        }\n        if ($x < 0) {\n      \
    \      if (!defined($l) || $x > $l) {\n                $l = $x;\n            }\n\
    \        }\n    }\n    return [$l, $s];\n}", "    # your solution goes here\n}",
  "    my @sorted = sort {$a <=> $b} @$lst;\n    my $neg_max = undef;\n    my $pos_min\
    \ = undef;\n    for my $i (@sorted) {\n        if ($i < 0 && !defined($neg_max))\
    \ {\n            $neg_max = $i;\n        } elsif ($i > 0 && !defined($pos_min))\
    \ {\n            $pos_min = $i;\n        } elsif (defined($neg_max) && defined($pos_min))\
    \ {\n            last;\n        }\n    }\n    return [$neg_max, $pos_min];\n}",
  "    my($minimum, $maximum) = undef;\n    for my $i (@$lst) {\n        if (not defined\
    \ $i) {\n            next;\n        }\n        if ($i < 0) {\n            if (not\
    \ defined $maximum or $i > $maximum) {\n                $maximum = $i;\n     \
    \       }\n        } else {\n            if (not defined $minimum or $i < $minimum)\
    \ {\n                $minimum = $i;\n            }\n        }\n    }\n    return\
    \ [$maximum, $minimum];\n}", "    my($min, $max);\n    for my $x (@$lst) {\n \
    \       if ($x < 0) {\n            $max = $x if (! defined($max) || $x > $max);\n\
    \        } else {\n            $min = $x if (! defined($min) || $x < $min);\n\
    \        }\n    }\n    if (! defined($min)) {\n        return [undef, undef];\n\
    \    }\n    if (! defined($max)) {\n        return [undef, $min];\n    }\n   \
    \ return [$max, $min];\n}", "    my $a;\n    my $b;\n    foreach my $val (@$lst)\
    \ {\n        if ($val < 0) {\n            if (not defined $a) {\n            \
    \    $a = $val;\n            } elsif ($val > $a) {\n                $a = $val;\n\
    \            }\n        } elsif ($val > 0) {\n            if (not defined $b)\
    \ {\n                $b = $val;\n            } elsif ($val < $b) {\n         \
    \       $b = $val;\n            }\n        }\n    }\n    return (undef, undef)\
    \ if not defined $a and not defined $b;\n    return (undef, $b) if not defined\
    \ $a;\n    return ($a, undef) if not defined $b;\n    return ($a, $b);\n}", " \
    \   my($a, $b) = (undef, undef);\n    for (@$lst) {\n        if ($_ < 0) {\n \
    \           $a = $_ if (not defined $a or $a < $_);\n        } elsif ($_ > 0)\
    \ {\n            $b = $_ if (not defined $b or $b > $_);\n        }\n    }\n \
    \   return [$a, $b];\n}", "    my($max, $min) = (undef, undef);\n    for my $i\
    \ (@$lst) {\n        $max = $i if $i < 0 && (!defined($max) || $i > $max);\n \
    \       $min = $i if $i > 0 && (!defined($min) || $i < $min);\n    }\n    return\
    \ ($max, $min);\n}", "    my $largest_negative;\n    my $smallest_positive;\n\
    \    for my $elem (@$lst) {\n        if ($elem < 0) {\n            if (!defined($largest_negative)\
    \ || $elem > $largest_negative) {\n                $largest_negative = $elem;\n\
    \            }\n        }\n        elsif ($elem > 0) {\n            if (!defined($smallest_positive)\
    \ || $elem < $smallest_positive) {\n                $smallest_positive = $elem;\n\
    \            }\n        }\n    }\n    return [$largest_negative, $smallest_positive];\n\
    }", "    my($max_neg, $min_pos) = undef;\n    foreach my $elem (@$lst) {\n   \
    \     if ($elem < 0) {\n            if (!defined($max_neg) || $elem > $max_neg)\
    \ {\n                $max_neg = $elem;\n            }\n        }\n        elsif\
    \ ($elem > 0) {\n            if (!defined($min_pos) || $elem < $min_pos) {\n \
    \               $min_pos = $elem;\n            }\n        }\n    }\n    return\
    \ [$max_neg, $min_pos];\n}", "    my($a, $b);\n    for my $elt (@$lst) {\n   \
    \     if ($elt > 0) {\n            if (!defined($b) || $elt < $b) {\n        \
    \        $b = $elt;\n            }\n        } elsif ($elt < 0) {\n           \
    \ if (!defined($a) || $elt > $a) {\n                $a = $elt;\n            }\n\
    \        }\n    }\n    return [$a, $b];\n}", "    my($a, $b);\n    foreach my\
    \ $e (@$lst) {\n        if ($e < 0) {\n            if (!defined($a) || $e > $a)\
    \ {\n                $a = $e;\n            }\n        } elsif ($e > 0) {\n   \
    \         if (!defined($b) || $e < $b) {\n                $b = $e;\n         \
    \   }\n        }\n    }\n    return [$a, $b];\n}", "    my $a = undef;\n    my\
    \ $b = undef;\n    my $tmp = 0;\n    foreach $tmp (@$lst) {\n        if($tmp >\
    \ 0 && (not defined $b || $tmp < $b)) {\n            $b = $tmp;\n        }\n \
    \       if($tmp < 0 && (not defined $a || $tmp > $a)) {\n            $a = $tmp;\n\
    \        }\n    }\n    return [$a, $b];\n}", "    my($neg, $pos);\n    $neg =\
    \ $pos = undef;\n    foreach my $e (@$lst) {\n        if ($e < 0) {\n        \
    \    if (!defined($neg) || $e > $neg) {\n                $neg = $e;\n        \
    \    }\n        } elsif ($e > 0) {\n            if (!defined($pos) || $e < $pos)\
    \ {\n                $pos = $e;\n            }\n        }\n    }\n    return [$neg,\
    \ $pos];\n}", "    my($max_neg, $min_pos) = (undef, undef);\n    for my $i (@$lst)\
    \ {\n        if ($i < 0) {\n            if (not defined $max_neg) {\n        \
    \        $max_neg = $i;\n            } elsif ($i > $max_neg) {\n             \
    \   $max_neg = $i;\n            }\n        } elsif ($i > 0) {\n            if\
    \ (not defined $min_pos) {\n                $min_pos = $i;\n            } elsif\
    \ ($i < $min_pos) {\n                $min_pos = $i;\n            }\n        }\n\
    \    }\n    return [$max_neg, $min_pos];\n}", "    my $max_negative = undef;\n\
    \    my $min_positive = undef;\n    foreach my $elem (@$lst) {\n        if ($elem\
    \ < 0) {\n            if (!defined($max_negative) || $elem > $max_negative) {\n\
    \                $max_negative = $elem;\n            }\n        } elsif ($elem\
    \ > 0) {\n            if (!defined($min_positive) || $elem < $min_positive) {\n\
    \                $min_positive = $elem;\n            }\n        }\n    }\n   \
    \ return [$max_negative, $min_positive];\n}", "    my($neg_idx, $pos_idx) = (-1,\
    \ -1);\n    for my $i (0..@$lst-1) {\n        my $e = $lst->[$i];\n        if\
    \ ($e < 0) {\n            $neg_idx = $i;\n        }\n        elsif ($e > 0) {\n\
    \            $pos_idx = $i;\n            last;\n        }\n    }\n    my($neg,\
    \ $pos) = (undef, undef);\n    if ($neg_idx >= 0) {\n        my $idx = $neg_idx;\n\
    \        my $e = $lst->[$idx];\n        for my $i ($idx+1..@$lst-1) {\n      \
    \      my $ee = $lst->[$i];\n            if ($ee < 0 && $ee > $e) {\n        \
    \        $idx = $i;\n                $e = $ee;\n            }\n        }\n   \
    \     $neg = $e;\n    }\n    if ($pos_idx >= 0) {\n        my $idx = $pos_idx;\n\
    \        my $e = $lst->[$idx];\n        for my $i ($idx+1..@$lst-1) {\n      \
    \      my $ee = $lst->[$i];\n            if ($ee > 0 && $ee < $e) {\n        \
    \        $idx = $i;\n                $e = $ee;\n            }\n        }\n   \
    \     $pos = $e;\n    }\n    return [$neg, $pos];\n}", "    my $l = -999999;\n\
    \    my $s = 999999;\n    foreach my $i (@$lst) {\n        if ($i < 0) {\n   \
    \         if ($i > $l) {\n                $l = $i;\n            }\n        } else\
    \ {\n            if ($i < $s) {\n                $s = $i;\n            }\n   \
    \     }\n    }\n    if ($l == -999999) {\n        $l = undef;\n    }\n    if ($s\
    \ == 999999) {\n        $s = undef;\n    }\n    return [$l, $s];\n}", "    my($max_neg,\
    \ $min_pos) = (undef, undef);\n    foreach my $x (@$lst) {\n        if ($x < 0)\
    \ {\n            if (!defined($max_neg) || $x > $max_neg) {\n                $max_neg\
    \ = $x;\n            }\n        } elsif ($x > 0) {\n            if (!defined($min_pos)\
    \ || $x < $min_pos) {\n                $min_pos = $x;\n            }\n       \
    \ }\n    }\n    return [$max_neg, $min_pos];\n}", "    my $a = undef;\n    my\
    \ $b = undef;\n    foreach my $i (@$lst) {\n        if ($i < 0) {\n          \
    \  if (!defined($a) || $i > $a) {\n                $a = $i;\n            }\n \
    \       }\n        elsif ($i > 0) {\n            if (!defined($b) || $i < $b)\
    \ {\n                $b = $i;\n            }\n        }\n    }\n    return [$a,\
    \ $b];\n}", "    my $max = undef;\n    my $min = undef;\n    foreach my $n (@$lst)\
    \ {\n        if ($n >= 0) {\n            if (!defined($min) || $n < $min) {\n\
    \                $min = $n;\n            }\n        } else {\n            if (!defined($max)\
    \ || $n > $max) {\n                $max = $n;\n            }\n        }\n    }\n\
    \    return [$max, $min];\n}", "    my $positive;\n    my $negative;\n    for\
    \ my $i (@$lst) {\n        if ($i > 0) {\n            if (not defined $positive\
    \ or $i < $positive) {\n                $positive = $i;\n            }\n     \
    \   } elsif ($i < 0) {\n            if (not defined $negative or $i > $negative)\
    \ {\n                $negative = $i;\n            }\n        }\n    }\n    return\
    \ [$negative, $positive];\n}\n1;", "    my($a, $b);\n    for my $e (@$lst) {\n\
    \        $a = $e if $e < 0 && (!$a || $e > $a);\n        $b = $e if $e > 0 &&\
    \ (!$b || $e < $b);\n    }\n    return [$a, $b];\n}", "    my @all;\n    my @positive;\n\
    \    my @negative;\n    my $undef = undef;\n    foreach my $l (@$lst) {\n    \
    \    if ($l > 0) {\n            push @positive, $l;\n        }\n        elsif\
    \ ($l < 0) {\n            push @negative, $l;\n        }\n    }\n    my $max_positive\
    \ = max @positive;\n    my $min_negative = min @negative;\n    my @result = ($min_negative,\
    \ $max_positive);\n    if (scalar @positive == 0 && scalar @negative == 0) {\n\
    \        @result = ($undef, $undef);\n    }\n    elsif (scalar @positive == 0)\
    \ {\n        @result = ($min_negative, $undef);\n    }\n    elsif (scalar @negative\
    \ == 0) {\n        @result = ($undef, $max_positive);\n    }\n    return @result;\n\
    }", "    my($max_neg, $min_pos) = undef;\n    foreach (@$lst) {\n        if ($_\
    \ < 0) {\n            if (not defined $max_neg) {\n                $max_neg =\
    \ $_;\n            } elsif ($_ > $max_neg) {\n                $max_neg = $_;\n\
    \            }\n        } elsif ($_ > 0) {\n            if (not defined $min_pos)\
    \ {\n                $min_pos = $_;\n            } elsif ($_ < $min_pos) {\n \
    \               $min_pos = $_;\n            }\n        }\n    }\n    return [$max_neg,\
    \ $min_pos];\n}", "    my($negative, $positive) = (undef, undef);\n    foreach\
    \ my $elem (@$lst) {\n        $positive = $elem if !defined($positive) && $elem\
    \ > 0;\n        $positive = $elem if defined($positive) && $elem > 0 && $elem\
    \ < $positive;\n        $negative = $elem if !defined($negative) && $elem < 0;\n\
    \        $negative = $elem if defined($negative) && $elem < 0 && $elem > $negative;\n\
    \    }\n    return [$negative, $positive];\n}", "    my $minus_number;\n    my\
    \ $plus_number;\n    for my $item (@$lst) {\n        if ($item < 0) {\n      \
    \      if (!defined $minus_number) {\n                $minus_number = $item;\n\
    \            } elsif ($item > $minus_number) {\n                $minus_number\
    \ = $item;\n            }\n        } elsif ($item > 0) {\n            if (!defined\
    \ $plus_number) {\n                $plus_number = $item;\n            } elsif\
    \ ($item < $plus_number) {\n                $plus_number = $item;\n          \
    \  }\n        }\n    }\n    return [$minus_number, $plus_number];\n}", "    return\
    \ [undef, undef] if (!@$lst);\n    my($idx) = first_index { $_ < 0 } @$lst;\n\
    \    return [undef, $lst->[0]] if ($idx == -1);\n    return [max(@$lst[0..$idx-1]),\
    \ min(@$lst[$idx..$#$lst])];\n}", "    my($max_neg, $min_pos) = undef;\n    for\
    \ my $item (@$lst) {\n        if ($item < 0) {\n            $max_neg = $item if\
    \ !defined($max_neg) || $item > $max_neg;\n        }\n        elsif ($item > 0)\
    \ {\n            $min_pos = $item if !defined($min_pos) || $item < $min_pos;\n\
    \        }\n    }\n    return [$max_neg, $min_pos];\n}", "    my $min = undef;\n\
    \    my $max = undef;\n    foreach my $elem (@$lst) {\n        if ($elem > 0)\
    \ {\n            if (not defined $min or $elem < $min) {\n                $min\
    \ = $elem;\n            }\n        }\n        elsif ($elem < 0) {\n          \
    \  if (not defined $max or $elem > $max) {\n                $max = $elem;\n  \
    \          }\n        }\n    }\n    [$max, $min];\n}", "    my $max_neg = undef;\n\
    \    my $min_pos = undef;\n    for my $i (@$lst) {\n        if ($i < 0) {\n  \
    \          if (!defined($max_neg) || $i > $max_neg) {\n                $max_neg\
    \ = $i;\n            }\n        }\n        if ($i > 0) {\n            if (!defined($min_pos)\
    \ || $i < $min_pos) {\n                $min_pos = $i;\n            }\n       \
    \ }\n    }\n    return [$max_neg, $min_pos];\n}", "    my $min = undef;\n    my\
    \ $max = undef;\n    for my $x (@$lst) {\n        if (defined $min) {\n      \
    \      if ($x > 0 && $x < $min) {\n                $min = $x;\n            }\n\
    \        } else {\n            if ($x > 0) {\n                $min = $x;\n   \
    \         }\n        }\n        if (defined $max) {\n            if ($x < 0 &&\
    \ $x > $max) {\n                $max = $x;\n            }\n        } else {\n\
    \            if ($x < 0) {\n                $max = $x;\n            }\n      \
    \  }\n    }\n    return [$max, $min];\n}", "    my ($largest, $smallest);\n  \
    \  foreach my $item (@$lst) {\n        next if !$item;\n        if ($item > 0)\
    \ {\n            $smallest = $item if !$smallest or $item < $smallest;\n     \
    \   } else {\n            $largest = $item if !$largest or $item > $largest;\n\
    \        }\n    }\n    return [$largest, $smallest];\n}", "    my @neg = grep\
    \ { $_ < 0 } @$lst;\n    my @pos = grep { $_ > 0 } @$lst;\n    return [scalar(@neg)\
    \ ? max(@neg) : undef,\n            scalar(@pos) ? min(@pos) : undef];\n}", " \
    \   my($largest, $smallest);\n    for(@$lst) {\n        if ($_ < 0) {\n      \
    \      $largest = $_ if not defined $largest or $largest < $_;\n        } else\
    \ {\n            $smallest = $_ if not defined $smallest or $smallest > $_;\n\
    \        }\n    }\n    return [$largest, $smallest];\n}", "    my @negative =\
    \ ();\n    my @positive = ();\n    my $a = undef;\n    my $b = undef;\n    for\
    \ my $i ( @$lst ) {\n        if ( $i < 0 ) {\n            push @negative, $i;\n\
    \        }\n        elsif ( $i > 0 ) {\n            push @positive, $i;\n    \
    \    }\n    }\n    if ( @negative ) {\n        $a = max(@negative);\n    }\n \
    \   if ( @positive ) {\n        $b = min(@positive);\n    }\n    return [$a, $b];\n\
    }", "    my $largest = undef;\n    my $smallest = undef;\n    foreach my $num\
    \ (@$lst) {\n        if ($num >= 0) {\n            $smallest = defined($smallest)\
    \ ? min($smallest, $num) : $num;\n        }\n        else {\n            $largest\
    \ = defined($largest) ? max($largest, $num) : $num;\n        }\n    }\n    return\
    \ [$largest, $smallest];\n}", "    return undef;\n}", "    my $pos = undef;\n\
    \    my $neg = undef;\n    for my $e (@$lst) {\n        if ($e >= 0) {\n     \
    \       if (!defined($pos) || $e < $pos) {\n                $pos = $e;\n     \
    \       }\n        } else {\n            if (!defined($neg) || $e > $neg) {\n\
    \                $neg = $e;\n            }\n        }\n    }\n    return [$neg,\
    \ $pos];\n}", "    @{$lst} = sort {$a <=> $b} @{$lst};\n    return (@{$lst}[0],\
    \ @{$lst}[-1]);\n}", "    my $max_neg;\n    my $min_pos;\n    foreach my $el (@$lst)\
    \ {\n        if ($el < 0 && ($max_neg eq undef || $el > $max_neg)) {\n       \
    \     $max_neg = $el;\n        }\n        if ($el > 0 && ($min_pos eq undef ||\
    \ $el < $min_pos)) {\n            $min_pos = $el;\n        }\n    }\n    return\
    \ [$max_neg, $min_pos];\n}", "    my @sorted = sort { $a <=> $b } @$lst;\n   \
    \ my @neg;\n    my @pos;\n    foreach my $e (@sorted) {\n        if ($e < 0) {\n\
    \            push @neg, $e;\n        }\n        elsif ($e > 0) {\n           \
    \ push @pos, $e;\n        }\n    }\n    my $maxneg = @neg ? $neg[-1] : undef;\n\
    \    my $minpos = @pos ? $pos[0] : undef;\n    return [$maxneg, $minpos];\n}",
  "    my ($largest_neg, $smallest_pos) = (undef, undef);\n    foreach my $elem (@$lst)\
    \ {\n        if ($elem > 0) {\n            if (!defined($smallest_pos) || $elem\
    \ < $smallest_pos) {\n                $smallest_pos = $elem;\n            }\n\
    \        } elsif ($elem < 0) {\n            if (!defined($largest_neg) || $elem\
    \ > $largest_neg) {\n                $largest_neg = $elem;\n            }\n  \
    \      }\n    }\n    return ($largest_neg, $smallest_pos);\n}", "    my $result\
    \ = ['undef', 'undef'];\n    my $neg_cnt = 0;\n    my $pos_cnt = 0;\n    my $min_pos\
    \ = 9223372036854775807;\n    my $max_neg = -9223372036854775807;\n    foreach\
    \ my $elem (@$lst) {\n        if ($elem > 0) {\n            $pos_cnt++;\n    \
    \        if ($elem < $min_pos) {\n                $min_pos = $elem;\n        \
    \    }\n        } elsif ($elem < 0) {\n            $neg_cnt++;\n            if\
    \ ($elem > $max_neg) {\n                $max_neg = $elem;\n            }\n   \
    \     }\n    }\n    if ($neg_cnt > 0) {\n        $result->[0] = $max_neg;\n  \
    \  }\n    if ($pos_cnt > 0) {\n        $result->[1] = $min_pos;\n    }\n    return\
    \ $result;\n}", "    my $max = undef;\n    my $min = undef;\n    foreach my $v\
    \ (@$lst) {\n        if ($v > 0) {\n            if (!defined($min) || $v < $min)\
    \ {\n                $min = $v;\n            }\n        } elsif ($v < 0) {\n \
    \           if (!defined($max) || $v > $max) {\n                $max = $v;\n \
    \           }\n        }\n    }\n    return [$max, $min];\n}", "    my($min, $max);\n\
    \    for my $x (@$lst) {\n        if($x >= 0) {\n            $min = $x if(!defined($min)\
    \ || $x < $min);\n        } else {\n            $max = $x if(!defined($max) ||\
    \ $x > $max);\n        }\n    }\n    return [$max, $min];\n}", "    my $a = undef;\n\
    \    my $b = undef;\n    for my $x (@$lst) {\n        if ($x < 0) {\n        \
    \    if (not defined $a or $x > $a) {\n                $a = $x;\n            }\n\
    \        } elsif ($x > 0) {\n            if (not defined $b or $x < $b) {\n  \
    \              $b = $x;\n            }\n        }\n    }\n    return [$a, $b];\n\
    }", "    my($a, $b);\n    foreach my $x (@$lst) {\n        if ($x < 0) {\n   \
    \         if (!defined($a) || $x > $a) {\n                $a = $x;\n         \
    \   }\n        } else {\n            if (!defined($b) || $x < $b) {\n        \
    \        $b = $x;\n            }\n        }\n    }\n    return [$a, $b];\n}",
  "    my @result = (undef, undef);\n    my $min = 0;\n    my $max = 0;\n    my $first_neg\
    \ = 0;\n    my $first_pos = 0;\n    for my $n (@$lst) {\n        if ($n < 0) {\n\
    \            if ($first_neg == 0) {\n                $max = $n;\n            \
    \    $first_neg = 1;\n            }\n            if ($n > $max) {\n          \
    \      $max = $n;\n            }\n        }\n        if ($n > 0) {\n         \
    \   if ($first_pos == 0) {\n                $min = $n;\n                $first_pos\
    \ = 1;\n            }\n            if ($n < $min) {\n                $min = $n;\n\
    \            }\n        }\n    }\n    if ($first_neg == 1) {\n        $result[0]\
    \ = $max;\n    }\n    if ($first_pos == 1) {\n        $result[1] = $min;\n   \
    \ }\n    return @result;\n}", "    my($a, $b);\n    foreach my $e (@$lst) {\n\
    \        if($e > 0) {\n            if(!defined($b) || $e < $b) {\n           \
    \     $b = $e;\n            }\n        } elsif($e < 0) {\n            if(!defined($a)\
    \ || $e > $a) {\n                $a = $e;\n            }\n        }\n    }\n \
    \   if(!defined($a)) {\n        $a = undef;\n    }\n    if(!defined($b)) {\n \
    \       $b = undef;\n    }\n    return [$a, $b];\n}", "    my @result = (undef,\
    \ undef);\n    foreach (@$lst) {\n        if ($_ < 0) {\n            if (!defined($result[0])\
    \ || $result[0] < $_) {\n                $result[0] = $_;\n            }\n   \
    \     } elsif ($_ > 0) {\n            if (!defined($result[1]) || $result[1] >\
    \ $_) {\n                $result[1] = $_;\n            }\n        }\n    }\n \
    \   return @result;\n}", "    my($a, $b);\n    my $seen_neg = 0;\n    my $seen_pos\
    \ = 0;\n    for (@$lst) {\n        if ($_ < 0) {\n            $a = $_ if not defined\
    \ $a or $_ > $a;\n            $seen_neg = 1;\n        } elsif ($_ > 0) {\n   \
    \         $b = $_ if not defined $b or $_ < $b;\n            $seen_pos = 1;\n\
    \        }\n    }\n    $a = undef if not $seen_neg;\n    $b = undef if not $seen_pos;\n\
    \    return [$a, $b];\n}", "    my @lst = @$lst;\n    my $max;\n    my $min;\n\
    \    for(@lst){\n\t$min = $_ if(!$min || $min > $_);\n\t$max = $_ if(!$max ||\
    \ $max < $_);\n    }\n    return [$max, $min];\n}", "    # TODO\n}", "    my ($l,\
    \ $s) = (undef, undef);\n    for my $x (@$lst) {\n        if ($x < 0) {\n    \
    \        $l = $x if $l < $x;\n        } else {\n            $s = $x if !defined($s)\
    \ || $s > $x;\n        }\n    }\n    return [$l, $s];\n}", "    # YOUR CODE HERE\n\
    \    my @negatives;\n    my @positives;\n    for my $i (@$lst) {\n        if ($i\
    \ > 0) {\n            push @positives, $i;\n        }\n        elsif ($i < 0)\
    \ {\n            push @negatives, $i;\n        }\n    }\n    my @result;\n   \
    \ if (@negatives) {\n        @result = (max(@negatives), min(@positives));\n \
    \   }\n    else {\n        @result = (undef, min(@positives));\n    }\n    return\
    \ @result;\n}", "    my $max;\n    my $min;\n    foreach (@$lst) {\n        if\
    \ ($_ < 0) {\n            if (!defined($max) || $_ > $max) {\n               \
    \ $max = $_;\n            }\n        }\n        elsif ($_ > 0) {\n           \
    \ if (!defined($min) || $_ < $min) {\n                $min = $_;\n           \
    \ }\n        }\n    }\n    return [$max, $min];\n}", "    my @negatives = map\
    \ {$_->[0]} sort {$b->[1] <=> $a->[1]} grep {$_->[1] < 0} map {[$_, $_]} @$lst;\n\
    \    my @positives = map {$_->[0]} sort {$a->[1] <=> $b->[1]} grep {$_->[1] >\
    \ 0} map {[$_, $_]} @$lst;\n    return undef, undef if (scalar(@negatives) ==\
    \ 0 && scalar(@positives) == 0);\n    return undef, $positives[0] if (scalar(@negatives)\
    \ == 0);\n    return $negatives[0], undef if (scalar(@positives) == 0);\n    return\
    \ $negatives[0], $positives[0];\n}", "    my $max = undef;\n    my $min = undef;\n\
    \    foreach my $e (@$lst) {\n        if ($e < 0) {\n            if (!defined($max)\
    \ || $e > $max) {\n                $max = $e;\n            }\n        } elsif\
    \ ($e > 0) {\n            if (!defined($min) || $e < $min) {\n               \
    \ $min = $e;\n            }\n        }\n    }\n    return [$max, $min];\n}", " \
    \   my @tmp = sort {$a <=> $b} grep { $_ != 0 } @$lst;\n    my $a = $tmp[0];\n\
    \    my $b = $tmp[-1];\n    return [$a, $b];\n}", "    my @lst = @$lst;\n    my\
    \ ($neg, $pos) = (undef, undef);\n    for my $elm (@lst) {\n        if ($elm <\
    \ 0) {\n            if (!defined($neg) || $elm > $neg) {\n                $neg\
    \ = $elm;\n            }\n        } elsif ($elm > 0) {\n            if (!defined($pos)\
    \ || $elm < $pos) {\n                $pos = $elm;\n            }\n        }\n\
    \    }\n    return [$neg, $pos];\n}", "    my $min = undef;\n    my $max = undef;\n\
    \    for my $item (@$lst) {\n        if ($item > 0 && (!defined($min) || $item\
    \ < $min)) {\n            $min = $item;\n        }\n        if ($item < 0 && (!defined($max)\
    \ || $item > $max)) {\n            $max = $item;\n        }\n    }\n    return\
    \ [$max, $min];\n}", "    my $max = undef;\n    my $min = undef;\n    my @lst;\n\
    \    for my $i (@$lst) {\n        if($i>0 && (!defined($min) || $i<$min)) {\n\
    \            $min = $i;\n        } elsif($i<0 && (!defined($max) || $i>$max))\
    \ {\n            $max = $i;\n        }\n    }\n    return($max, $min);\n}", " \
    \   my($max_negative, $min_positive) = (undef, undef);\n    foreach my $elem (@$lst)\
    \ {\n        if($elem < 0) {\n            if(!defined($max_negative) || $elem\
    \ > $max_negative) {\n                $max_negative = $elem;\n            }\n\
    \        }\n        else {\n            if(!defined($min_positive) || $elem <\
    \ $min_positive) {\n                $min_positive = $elem;\n            }\n  \
    \      }\n    }\n    return [$max_negative, $min_positive];\n}", "    my($larg,\
    \ $small);\n    for my $i ( @$lst ) {\n        $larg = $i if ! defined $larg &&\
    \ $i < 0;\n        $small = $i if ! defined $small && $i > 0;\n        $larg =\
    \ $i if defined $larg && $i < $larg;\n        $small = $i if defined $small &&\
    \ $i < $small;\n    }\n    return [$larg, $small];\n}", "    my($max, $min) =\
    \ (undef, undef);\n    for my $i (@$lst) {\n        if ($i < 0) {\n          \
    \  $max = $i if not defined $max or $i > $max;\n        } else {\n           \
    \ $min = $i if not defined $min or $i < $min;\n        }\n    }\n    return ($max,\
    \ $min);\n}", "    my $max = -1e99;\n    my $min = 1e99;\n    for(my $i = 0; $i\
    \ < @$lst; $i++) {\n        my $num = $$lst[$i];\n        if($num < 0) {\n   \
    \         $max = max($max, $num);\n        }\n        if($num > 0) {\n       \
    \     $min = min($min, $num);\n        }\n    }\n    if($max == -1e99) {\n   \
    \     $max = undef;\n    }\n    if($min == 1e99) {\n        $min = undef;\n  \
    \  }\n    return [$max, $min];\n}", "    my @result = (undef, undef);\n    for\
    \ my $x (@$lst) {\n        if ($x < 0) {\n            if (defined $result[0])\
    \ {\n                $result[0] = $x if $x > $result[0];\n            } else {\n\
    \                $result[0] = $x;\n            }\n        } elsif ($x > 0) {\n\
    \            if (defined $result[1]) {\n                $result[1] = $x if $x\
    \ < $result[1];\n            } else {\n                $result[1] = $x;\n    \
    \        }\n        }\n    }\n    @result;\n}", "    my $pos = 0;\n    my $neg\
    \ = 0;\n    my $largest_pos = 0;\n    my $smallest_neg = 0;\n    my $result =\
    \ [];\n    foreach my $i (@$lst) {\n        if ($i > 0) {\n            $pos =\
    \ 1;\n            if ($largest_pos == 0) {\n                $largest_pos = $i;\n\
    \            }\n            if ($i < $largest_pos) {\n                $largest_pos\
    \ = $i;\n            }\n        } elsif ($i < 0) {\n            $neg = 1;\n  \
    \          if ($smallest_neg == 0) {\n                $smallest_neg = $i;\n  \
    \          }\n            if ($i > $smallest_neg) {\n                $smallest_neg\
    \ = $i;\n            }\n        }\n    }\n    if ($pos == 0) {\n        push @$result,\
    \ undef;\n    } else {\n        push @$result, $largest_pos;\n    }\n    if ($neg\
    \ == 0) {\n        push @$result, undef;\n    } else {\n        push @$result,\
    \ $smallest_neg;\n    }\n    return $result;\n}", "    my($large, $small) = (undef,\
    \ undef);\n    for my $v (@$lst) {\n        next if $v == 0;\n        if ($v >\
    \ 0) {\n            if (!defined($small) || $v < $small) {\n                $small\
    \ = $v;\n            }\n        }\n        else {\n            if (!defined($large)\
    \ || $v > $large) {\n                $large = $v;\n            }\n        }\n\
    \    }\n    return [$large, $small];\n}", "    my($a, $b);\n    foreach my $elem\
    \ (@$lst) {\n        if($elem < 0) {\n            if(!defined($a) || $elem > $a)\
    \ {\n                $a = $elem;\n            }\n        }\n        elsif($elem\
    \ > 0) {\n            if(!defined($b) || $elem < $b) {\n                $b = $elem;\n\
    \            }\n        }\n    }\n    return [$a, $b];\n}", "    my $a = undef;\n\
    \    my $b = undef;\n    foreach my $elem (@$lst) {\n        if ($elem > 0) {\n\
    \            if (!defined($b) || $elem < $b) {\n                $b = $elem;\n\
    \            }\n        }\n        elsif ($elem < 0) {\n            if (!defined($a)\
    \ || $elem > $a) {\n                $a = $elem;\n            }\n        }\n  \
    \  }\n    return [$a, $b];\n}", "    my $max = undef;\n    my $min = undef;\n\
    \    foreach my $n (@$lst) {\n        if ($n < 0) {\n            if (not defined\
    \ $max) {\n                $max = $n;\n            } else {\n                $max\
    \ = $n if $n > $max;\n            }\n        } else {\n            if (not defined\
    \ $min) {\n                $min = $n;\n            } else {\n                $min\
    \ = $n if $n < $min;\n            }\n        }\n    }\n    return [$max, $min];\n\
    }", "    my $min;\n    my $max;\n    foreach my $x (@$lst) {\n        if ($x <\
    \ 0) {\n            if (!defined($max) || $x > $max) {\n                $max =\
    \ $x;\n            }\n        } else {\n            if (!defined($min) || $x <\
    \ $min) {\n                $min = $x;\n            }\n        }\n    }\n    return\
    \ [$max, $min];\n}", "    # \u975E\u6B63\u6570\n    my @negative = grep {$_ <\
    \ 0} @$lst;\n    my $largest_negative = @negative ? $negative[-1] : undef;\n \
    \   # \u6B63\u6570\n    my @positive = grep {$_ > 0} @$lst;\n    my $smallest_positive\
    \ = @positive ? $positive[0] : undef;\n    return [$largest_negative, $smallest_positive];\n\
    }", "    my $largest = undef;\n    my $smallest = undef;\n    for my $i (@$lst)\
    \ {\n        if ($i > 0) {\n            if (!defined($smallest) || $i < $smallest)\
    \ {\n                $smallest = $i;\n            }\n        } elsif ($i < 0)\
    \ {\n            if (!defined($largest) || $i > $largest) {\n                $largest\
    \ = $i;\n            }\n        }\n    }\n    return [$largest, $smallest];\n}",
  "    my $min_pos = undef;\n    my $max_neg = undef;\n    foreach my $el (@$lst)\
    \ {\n        if ($el > 0) {\n            if (!defined($min_pos) || $el < $min_pos)\
    \ {\n                $min_pos = $el;\n            }\n        } elsif ($el < 0)\
    \ {\n            if (!defined($max_neg) || $el > $max_neg) {\n               \
    \ $max_neg = $el;\n            }\n        }\n    }\n    return [$max_neg, $min_pos];\n\
    }", "    my $a = undef;\n    my $b = undef;\n    foreach my $num (@$lst) {\n \
    \       if ($num < 0) {\n            if (!defined($a) || $num > $a) {\n      \
    \          $a = $num;\n            }\n        } elsif ($num > 0) {\n         \
    \   if (!defined($b) || $num < $b) {\n                $b = $num;\n           \
    \ }\n        }\n    }\n    return [$a, $b];\n}", "    my($v1, $v2);\n    foreach\
    \ my $elem(@$lst) {\n        if($elem < 0) {\n            if(!defined($v1) ||\
    \ $elem > $v1) {\n                $v1 = $elem;\n            }\n        }\n   \
    \     elsif($elem > 0) {\n            if(!defined($v2) || $elem < $v2) {\n   \
    \             $v2 = $elem;\n            }\n        }\n    }\n    return [$v1,\
    \ $v2];\n}", "    my($max_neg, $min_pos);\n    for my $val (@$lst) {\n       \
    \ if ($val >= 0) {\n            $min_pos = $val if !defined($min_pos) || $val\
    \ < $min_pos;\n        }\n        else {\n            $max_neg = $val if !defined($max_neg)\
    \ || $val > $max_neg;\n        }\n    }\n    return [$max_neg, $min_pos];\n}",
  "    my($a, $b);\n    foreach (@$lst) {\n        if ($_ < 0) {\n            if (not\
    \ defined $a or $a < $_) {\n                $a = $_;\n            }\n        }\
    \ elsif ($_ > 0) {\n            if (not defined $b or $b > $_) {\n           \
    \     $b = $_;\n            }\n        }\n    }\n    return [$a, $b];\n}", " \
    \   my $max_neg = undef;\n    my $min_pos = undef;\n    my $curr;\n    for my\
    \ $i (@$lst) {\n        if ($i < 0) {\n            $max_neg = $i if (not defined\
    \ $max_neg or $i > $max_neg);\n        } elsif ($i > 0) {\n            $min_pos\
    \ = $i if (not defined $min_pos or $i < $min_pos);\n        }\n    }\n    return\
    \ [$max_neg, $min_pos];\n}", "    my $positive = undef;\n    my $negative = undef;\n\
    \    foreach my $num (@$lst) {\n        if ( $num > 0 ) {\n            if ( defined\
    \ $positive && $num < $positive ) {\n                $positive = $num;\n     \
    \       }\n            elsif ( !defined $positive ) {\n                $positive\
    \ = $num;\n            }\n        }\n        elsif ( $num < 0 ) {\n          \
    \  if ( defined $negative && $num > $negative ) {\n                $negative =\
    \ $num;\n            }\n            elsif ( !defined $negative ) {\n         \
    \       $negative = $num;\n            }\n        }\n    }\n    return [$negative,\
    \ $positive];\n}", "    my $max_neg = undef;\n    my $min_pos = undef;\n    for\
    \ my $n (@$lst) {\n        $max_neg = $n if defined($n) && $n < 0 && (!defined($max_neg)\
    \ || $n > $max_neg);\n        $min_pos = $n if defined($n) && $n > 0 && (!defined($min_pos)\
    \ || $n < $min_pos);\n    }\n    return [$max_neg, $min_pos];\n}", "    my $smallest;\n\
    \    my $largest;\n    foreach my $n (@$lst) {\n        if ($n < 0) {\n      \
    \      $largest = $n if !defined($largest) || $n > $largest;\n        } else {\n\
    \            $smallest = $n if !defined($smallest) || $n < $smallest;\n      \
    \  }\n    }\n    return [$largest, $smallest];\n}", "    my $l = undef;\n    my\
    \ $s = undef;\n    foreach my $x (@$lst) {\n        if ($x < 0) {\n          \
    \  if (!defined($l) || $x > $l) {\n                $l = $x;\n            }\n \
    \       }\n        if ($x > 0) {\n            if (!defined($s) || $x < $s) {\n\
    \                $s = $x;\n            }\n        }\n    }\n    return [$l, $s];\n\
    }", "    if (scalar(@$lst) == 0) {\n        return [undef, undef];\n    }", " \
    \   # TODO\n}", "    my $max = undef;\n    my $min = undef;\n    my $n = 0;\n\
    \    my $p = 0;\n    my $flag = 0;\n    foreach (@$lst) {\n        if ($_ < 0)\
    \ {\n            $n = 1;\n            if (!defined($max) || $_ > $max) {\n   \
    \             $max = $_;\n            }\n        }\n        if ($_ > 0) {\n  \
    \          $p = 1;\n            if (!defined($min) || $_ < $min) {\n         \
    \       $min = $_;\n            }\n        }\n    }\n    if (!$n) {\n        $max\
    \ = undef;\n    }\n    if (!$p) {\n        $min = undef;\n    }\n    return [$max,\
    \ $min];\n}", "    my($max_negative, $min_positive);\n    foreach my $item (@$lst)\
    \ {\n        if ($item >= 0) {\n            if (!defined($min_positive) || $item\
    \ < $min_positive) {\n                $min_positive = $item;\n            }\n\
    \        } else {\n            if (!defined($max_negative) || $item > $max_negative)\
    \ {\n                $max_negative = $item;\n            }\n        }\n    }\n\
    \    return [$max_negative, $min_positive];\n}", "    my $max = undef;\n    my\
    \ $min = undef;\n    foreach my $num (@$lst) {\n        if ($num >= 0) {\n   \
    \         if (!defined($min) || $num < $min) {\n                $min = $num;\n\
    \            }\n        }\n        else {\n            if (!defined($max) || $num\
    \ > $max) {\n                $max = $num;\n            }\n        }\n    }\n \
    \   return [$max, $min];\n}", "    my $smallest = undef;\n    my $largest = undef;\n\
    \    foreach my $i (@$lst) {\n        if ($i > 0) {\n            if (!defined($smallest)\
    \ || $i < $smallest) {\n                $smallest = $i;\n            }\n     \
    \   } elsif ($i < 0) {\n            if (!defined($largest) || $i > $largest) {\n\
    \                $largest = $i;\n            }\n        }\n    }\n    return [$largest,\
    \ $smallest];\n}", "    my @res = ();\n    foreach (@$lst) {\n        if ($_ >\
    \ 0) {\n            push(@res, $_);\n        }\n    }\n    if ($#res >= 0) {\n\
    \        return (undef, min(@res));\n    }\n    @res = ();\n    foreach (@$lst)\
    \ {\n        if ($_ < 0) {\n            push(@res, $_);\n        }\n    }\n  \
    \  if ($#res >= 0) {\n        return (max(@res), undef);\n    }\n    return (undef,\
    \ undef);\n}", "    my($a, $b) = (undef, undef);\n    foreach my $x (@$lst) {\n\
    \        if($x > 0) {\n            if(!defined($b) || $x < $b) {\n           \
    \     $b = $x;\n            }\n        }\n        elsif($x < 0) {\n          \
    \  if(!defined($a) || $x > $a) {\n                $a = $x;\n            }\n  \
    \      }\n    }\n    return [$a, $b];\n}", "    my $largest = undef;\n    my $smallest\
    \ = undef;\n    foreach my $num (@$lst) {\n        if($num < 0) {\n          \
    \  if(!defined($largest) || $num > $largest) {\n                $largest = $num;\n\
    \            }\n        } elsif($num > 0) {\n            if(!defined($smallest)\
    \ || $num < $smallest) {\n                $smallest = $num;\n            }\n \
    \       }\n    }\n    return [$largest, $smallest];\n}", "    my @lst = grep {\
    \ $_ } @$lst;\n    my $biggest_negative = first { $_ < 0 } reverse @lst;\n   \
    \ my $smallest_positive = first { $_ > 0 } @lst;\n    return [$biggest_negative,\
    \ $smallest_positive];\n}", "    my($max_neg, $min_pos);\n    foreach (@$lst)\
    \ {\n        if ($_ < 0) {\n            if (not defined $max_neg or $max_neg <\
    \ $_) {\n                $max_neg = $_;\n            }\n        } elsif ($_ >\
    \ 0) {\n            if (not defined $min_pos or $min_pos > $_) {\n           \
    \     $min_pos = $_;\n            }\n        }\n    }\n    return [$max_neg, $min_pos];\n\
    }", "    my($a, $b);\n    foreach my $i (@$lst) {\n        if($i < 0) {\n    \
    \        if(not defined $a or $i > $a) {\n                $a = $i;\n         \
    \   }\n        } else {\n            if(not defined $b or $i < $b) {\n       \
    \         $b = $i;\n            }\n        }\n    }\n    [$a, $b];\n}", "    my($a,\
    \ $b);\n    foreach my $e (@$lst) {\n        if ($e > 0) {\n            if (not\
    \ defined $b or $e < $b) {\n                $b = $e;\n            }\n        }\
    \ elsif ($e < 0) {\n            if (not defined $a or $e > $a) {\n           \
    \     $a = $e;\n            }\n        }\n    }\n    return [$a, $b];\n}", " \
    \   my $s = undef;\n    my $l = undef;\n    foreach my $i (@$lst) {\n        if\
    \ ($i > 0) {\n            if (!defined($s) || $i < $s) {\n                $s =\
    \ $i;\n            }\n        } elsif ($i < 0) {\n            if (!defined($l)\
    \ || $i > $l) {\n                $l = $i;\n            }\n        }\n    }\n \
    \   return [$l, $s];\n}", "    my ($a, $b) = (undef, undef);\n    foreach my $v\
    \ (@$lst) {\n        $a = $v if !defined($a) && $v < 0;\n        $a = $v if defined($a)\
    \ && $v < 0 && $v > $a;\n        $b = $v if !defined($b) && $v > 0;\n        $b\
    \ = $v if defined($b) && $v > 0 && $v < $b;\n    }\n    return [$a, $b];\n}",
  "    my($larg, $small);\n    if(@$lst) {\n        ($larg, $small) = (undef, undef);\n\
    \        for(@$lst) {\n            $larg = $_ if $_ < 0 and (not defined $larg\
    \ or $larg < $_);\n            $small = $_ if $_ > 0 and (not defined $small or\
    \ $small > $_);\n        }\n    } else {\n        ($larg, $small) = (undef, undef);\n\
    \    }\n    return [$larg, $small];\n}", "    my($max_neg, $min_pos) = (undef,\
    \ undef);\n    foreach my $i (@$lst) {\n        if ($i < 0) {\n            if\
    \ (!defined($max_neg) || $i > $max_neg) {\n                $max_neg = $i;\n  \
    \          }\n        } elsif ($i > 0) {\n            if (!defined($min_pos) ||\
    \ $i < $min_pos) {\n                $min_pos = $i;\n            }\n        }\n\
    \    }\n    return [$max_neg, $min_pos];\n}", "    my @ret = (undef, undef);\n\
    \    for my $num (@$lst) {\n        if ($num < 0) {\n            if (!defined($ret[0])\
    \ || $num > $ret[0]) {\n                $ret[0] = $num;\n            }\n     \
    \   } else {\n            if (!defined($ret[1]) || $num < $ret[1]) {\n       \
    \         $ret[1] = $num;\n            }\n        }\n    }\n    return @ret;\n\
    }", "    my($p, $n);\n    for (@$lst) {\n        if ($_ > 0) {\n            if\
    \ (!defined($p) || $_ < $p) {\n                $p = $_;\n            }\n     \
    \   } elsif ($_ < 0) {\n            if (!defined($n) || $_ > $n) {\n         \
    \       $n = $_;\n            }\n        }\n    }\n    return ($n, $p);\n}", " \
    \   my $max_negative;\n    my $min_positive;\n    my @array;\n    foreach (@$lst)\
    \ {\n        if ($_ < 0) {\n            if (!defined $max_negative || $max_negative\
    \ < $_) {\n                $max_negative = $_;\n            }\n        } elsif\
    \ ($_ > 0) {\n            if (!defined $min_positive || $min_positive > $_) {\n\
    \                $min_positive = $_;\n            }\n        }\n    }\n    push(@array,\
    \ $max_negative);\n    push(@array, $min_positive);\n    return @array;\n}", " \
    \   my($max, $min);\n    foreach (@$lst) {\n        if ($_ >= 0) {\n         \
    \   $min = $_ unless defined $min;\n            $min = $_ if $min > $_;\n    \
    \    }\n        else {\n            $max = $_ unless defined $max;\n         \
    \   $max = $_ if $max < $_;\n        }\n    }\n    return [$max, $min];\n}", " \
    \   my $max = undef;\n    my $min = undef;\n    foreach $i (@$lst) {\n       \
    \ if ($i > 0) {\n            if (!defined($min) || $i < $min) {\n            \
    \    $min = $i;\n            }\n        } elsif ($i < 0) {\n            if (!defined($max)\
    \ || $i > $max) {\n                $max = $i;\n            }\n        }\n    }\n\
    \    return [$max, $min];\n}", "    my $max = undef;\n    my $min = undef;\n \
    \   foreach my $item (@$lst) {\n        if (is_positive($item)) {\n          \
    \  $min = $item if !is_defined($min) || $item < $min;\n        }\n        elsif\
    \ (is_negative($item)) {\n            $max = $item if !is_defined($max) || $item\
    \ > $max;\n        }\n    }\n    return [$max, $min];\n}", "    my $largest;\n\
    \    my $smallest;\n    for my $element (@$lst) {\n        if ($element < 0) {\n\
    \            if (defined $largest) {\n                if ($element > $largest)\
    \ {\n                    $largest = $element;\n                }\n           \
    \ } else {\n                $largest = $element;\n            }\n        } elsif\
    \ ($element > 0) {\n            if (defined $smallest) {\n                if ($element\
    \ < $smallest) {\n                    $smallest = $element;\n                }\n\
    \            } else {\n                $smallest = $element;\n            }\n\
    \        }\n    }\n    return (\\$largest, \\$smallest);\n}", "    my $min = undef;\n\
    \    my $max = undef;\n    my $first = 1;\n    foreach my $x (@$lst) {\n     \
    \   if ($x >= 0) {\n            if ($first or $x < $min) {\n                $min\
    \ = $x;\n            }\n        } else {\n            if ($first or $x > $max)\
    \ {\n                $max = $x;\n            }\n        }\n        $first = 0;\n\
    \    }\n    return [$max, $min];\n}", "    my @neg = grep { $_ < 0 } @$lst;\n\
    \    my @pos = grep { $_ > 0 } @$lst;\n    my @result = ($#neg < 0 ? undef : max\
    \ @neg, $#pos < 0 ? undef : min @pos);\n    return @result;\n}", '    return (undef,
    undef) if (!@$lst);', "    my($smallest, $largest) = undef;\n    foreach my $i\
    \ (@$lst) {\n        $smallest = $i if (!defined($smallest) || $i < $smallest)\
    \ && $i > 0;\n        $largest = $i if (!defined($largest) || $i > $largest) &&\
    \ $i < 0;\n    }\n    return [$largest, $smallest];\n}", "    my $neg = undef;\n\
    \    my $pos = undef;\n    foreach my $e (@$lst) {\n        $neg = $e if (defined($e)\
    \ && $e < 0 && (!defined($neg) || $e > $neg));\n        $pos = $e if (defined($e)\
    \ && $e > 0 && (!defined($pos) || $e < $pos));\n    }\n    return ($neg, $pos);\n\
    }", "    my $l = 0;\n    my $s = 0;\n    for my $e (@$lst) {\n        $e > 0 and\
    \ not $s and $s = $e;\n        $e < 0 and not $l and $l = $e;\n        $e > 0\
    \ and $e < $s and $s = $e;\n        $e < 0 and $e > $l and $l = $e;\n    }\n \
    \   return [$l, $s];\n}", "    my($l, $s);\n    my($v);\n    while (@$lst) {\n\
    \        $v = shift @$lst;\n        if ($v > 0) {\n            if (!defined($s)\
    \ || $v < $s) {\n                $s = $v;\n            }\n        } elsif ($v\
    \ < 0) {\n            if (!defined($l) || $v > $l) {\n                $l = $v;\n\
    \            }\n        }\n    }\n    return [$l, $s];\n}", "    my $largest;\n\
    \    my $smallest;\n    foreach my $elem (@$lst) {\n        if ($elem < 0) {\n\
    \            $largest = $elem if (!defined($largest) || $elem > $largest);\n \
    \       } else {\n            $smallest = $elem if (!defined($smallest) || $elem\
    \ < $smallest);\n        }\n    }\n    if (defined($largest) || defined($smallest))\
    \ {\n        return [$largest, $smallest];\n    } else {\n        return [undef,\
    \ undef];\n    }\n}", "    my($a, $b);\n    for my $i (@$lst) {\n        if ($i\
    \ >= 0) {\n            $b = $i if !defined($b) || $i < $b;\n        } else {\n\
    \            $a = $i if !defined($a) || $i > $a;\n        }\n    }\n    return\
    \ [$a, $b];\n}", "    my $max = undef;\n    my $min = undef;\n    foreach my $val\
    \ (@$lst) {\n        if ($val > 0) {\n            if (!defined($min) || $val <\
    \ $min) {\n                $min = $val;\n            }\n        }\n        elsif\
    \ ($val < 0) {\n            if (!defined($max) || $val > $max) {\n           \
    \     $max = $val;\n            }\n        }\n    }\n    return [$max, $min];\n\
    }", "    my $a;\n    my $b;\n    my $answer;\n    my $b2;\n    my $len = scalar\
    \ @$lst;\n    my $i;\n    my $v;\n    my $v2;\n    my $v3;\n    my $x;\n    my\
    \ $y;\n    my $z;\n    if ($len < 1) {\n        return [undef, undef];\n    }\n\
    \    for ($i = 0; $i < $len; $i++) {\n        $v = $lst->[$i];\n        if ($v\
    \ > 0) {\n            $b = $v;\n            break;\n        }\n    }\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        $v2 = $lst->[$i];\n        if ($v2 < 0)\
    \ {\n            $a = $v2;\n            break;\n        }\n    }\n    if (defined($a))\
    \ {\n        for ($i = 0; $i < $len; $i++) {\n            $v3 = $lst->[$i];\n\
    \            if ($v3 < 0) {\n                $x = $v3;\n                if ($x\
    \ > $a) {\n                    $a = $x;\n                }\n            }\n  \
    \      }\n    }\n    if (defined($b)) {\n        for ($i = 0; $i < $len; $i++)\
    \ {\n            $y = $lst->[$i];\n            if ($y > 0) {\n               \
    \ $z = $y;\n                if ($z < $b) {\n                    $b = $z;\n   \
    \             }\n            }\n        }\n    }\n    $answer = [$a, $b];\n  \
    \  return $answer;\n}", "    my $cnt = scalar @$lst;\n    my ($lmax, $lmin) =\
    \ (undef, undef);\n    for (my $i = 0; $i < $cnt; $i++) {\n        my $e = $lst->[$i];\n\
    \        if ($e < 0) {\n            $lmax = $e if !defined($lmax) || $e > $lmax;\n\
    \        } else {\n            $lmin = $e if !defined($lmin) || $e < $lmin;\n\
    \        }\n    }\n    [$lmax, $lmin];\n}", "    my $res = [undef, undef];\n \
    \   for (@$lst) {\n        if ($_ < 0) {\n            if (!defined $res->[0] ||\
    \ $res->[0] < $_) {\n                $res->[0] = $_;\n            }\n        }\n\
    \        elsif ($_ > 0) {\n            if (!defined $res->[1] || $res->[1] > $_)\
    \ {\n                $res->[1] = $_;\n            }\n        }\n    }\n    return\
    \ $res;\n}", "    my @negatives = grep { $_ < 0 } @$lst;\n    my @positives =\
    \ grep { $_ > 0 } @$lst;\n    my $max_negative = undef;\n    my $min_positive\
    \ = undef;\n    if (@negatives) {\n        $max_negative = max @negatives;\n \
    \   }\n    if (@positives) {\n        $min_positive = min @positives;\n    }\n\
    \    return [$max_negative, $min_positive];\n}", "    my $max = undef;\n    my\
    \ $min = undef;\n    for my $x (@$lst) {\n        if ($x < 0) {\n            if\
    \ (!defined($max) || $x > $max) {\n                $max = $x;\n            }\n\
    \        } elsif ($x > 0) {\n            if (!defined($min) || $x < $min) {\n\
    \                $min = $x;\n            }\n        }\n    }\n    return [$max,\
    \ $min];\n}", "    my $len = scalar @$lst;\n    my $max = -999999999999;\n   \
    \ my $min = 999999999999;\n    for (my $i = 0; $i < $len; $i++) {\n        if\
    \ ($lst->[$i] > 0) {\n            if ($lst->[$i] < $min) {\n                $min\
    \ = $lst->[$i];\n            }\n        }\n        if ($lst->[$i] < 0) {\n   \
    \         if ($lst->[$i] > $max) {\n                $max = $lst->[$i];\n     \
    \       }\n        }\n    }\n    if ($max == -999999999999) {\n        $max =\
    \ undef;\n    }\n    if ($min == 999999999999) {\n        $min = undef;\n    }\n\
    \    return [$max, $min];\n}", "    my $a;\n    my $b;\n    for my $i (@$lst)\
    \ {\n        $a = $i if (not defined $a or $i < $a) and $i < 0;\n        $b =\
    \ $i if (not defined $b or $i < $b) and $i > 0;\n    }\n    return [$a, $b];\n\
    }", "    my($max, $min);\n    foreach my $i (@$lst) {\n        if ($i < 0) {\n\
    \            if (not defined $max or $i > $max) {\n                $max = $i;\n\
    \            }\n        } else {\n            if (not defined $min or $i < $min)\
    \ {\n                $min = $i;\n            }\n        }\n    }\n    return [$max,\
    \ $min];\n}", "    my $max_negative;\n    my $min_positive;\n    foreach my $num\
    \ (@$lst) {\n        if ($num >= 0) {\n            if (! defined $min_positive\
    \ || $num < $min_positive) {\n                $min_positive = $num;\n        \
    \    }\n        } else {\n            if (! defined $max_negative || $num > $max_negative)\
    \ {\n                $max_negative = $num;\n            }\n        }\n    }\n\
    \    [$max_negative, $min_positive];\n}", "    my $max = undef;\n    my $min =\
    \ undef;\n    for my $item (@$lst) {\n        if ($item < 0) {\n            if\
    \ (not defined $max or $item > $max) {\n                $max = $item;\n      \
    \      }\n        } elsif ($item > 0) {\n            if (not defined $min or $item\
    \ < $min) {\n                $min = $item;\n            }\n        }\n    }\n\
    \    return [$max, $min];\n}", "    my $a;\n    my $b;\n    my $flag;\n    my\
    \ $flag2;\n    foreach my $num (@$lst) {\n        if ($num < 0) {\n          \
    \  if (!$flag) {\n                $a = $num;\n                $flag = 1;\n   \
    \         }\n            if ($num > $a) {\n                $a = $num;\n      \
    \      }\n        }\n        if ($num > 0) {\n            if (!$flag2) {\n   \
    \             $b = $num;\n                $flag2 = 1;\n            }\n       \
    \     if ($num < $b) {\n                $b = $num;\n            }\n        }\n\
    \    }\n    if (!$flag) {\n        $a = undef;\n    }\n    if (!$flag2) {\n  \
    \      $b = undef;\n    }\n    return [$a, $b];\n}", "    return [undef, undef]\
    \ if !@$lst;\n    my @n = grep { $_ < 0 } @$lst;\n    my @p = grep { $_ > 0 }\
    \ @$lst;\n    my @result = (undef, undef);\n    if (@n) {\n        @result[0]\
    \ = max(@n);\n    }\n    if (@p) {\n        @result[1] = min(@p);\n    }\n   \
    \ return \\@result;\n}", "    my $max_negative = undef;\n    my $min_positive\
    \ = undef;\n    foreach my $x (@$lst) {\n        if ($x < 0) {\n            if\
    \ (!defined($max_negative) || $x > $max_negative) {\n                $max_negative\
    \ = $x;\n            }\n        } elsif ($x > 0) {\n            if (!defined($min_positive)\
    \ || $x < $min_positive) {\n                $min_positive = $x;\n            }\n\
    \        }\n    }\n    return [$max_negative, $min_positive];\n}", "    my ($min,\
    \ $max);\n    foreach my $n (@$lst) {\n        if ($n < 0) {\n            $max\
    \ = $n if !defined($max) || $n > $max;\n        } else {\n            $min = $n\
    \ if !defined($min) || $n < $min;\n        }\n    }\n    return [defined($max)\
    \ ? $max : undef, defined($min) ? $min : undef];\n}", "    my @negs = ();\n  \
    \  my @pos = ();\n    foreach my $x (@$lst) {\n        if ($x < 0) {\n       \
    \     push @negs, $x;\n        } elsif ($x > 0) {\n            push @pos, $x;\n\
    \        }\n    }\n    my $max_neg = undef;\n    if (@negs) {\n        $max_neg\
    \ = max(@negs);\n    }\n    my $min_pos = undef;\n    if (@pos) {\n        $min_pos\
    \ = min(@pos);\n    }\n    return [$max_neg, $min_pos];\n}", "    # Split the\
    \ original list into two lists\n    # one contains negative integers, another\
    \ contains positive integers\n    my($lst1, $lst2) = partition($lst, sub { $_[0]\
    \ < 0; });\n    # The second list is empty\n    if(!@$lst2) {\n        # If the\
    \ first list is also empty, return undef\n        return(!@$lst1 ? (undef, undef)\
    \ : (minimum($lst1), undef));\n    }\n    # The first list is empty\n    if(!@$lst1)\
    \ {\n        return(undef, maximum($lst2));\n    }\n    # Otherwise, return the\
    \ largest number in the first list,\n    # and the smallest number in the second\
    \ list\n    return(minimum($lst1), maximum($lst2));\n}", "    my $neg = undef;\n\
    \    my $pos = undef;\n    foreach (@$lst) {\n        if ($_ < 0) {\n        \
    \    $neg = $_ if !defined($neg) || $neg < $_;\n        } elsif ($_ > 0) {\n \
    \           $pos = $_ if !defined($pos) || $pos > $_;\n        }\n    }\n    return\
    \ [$neg, $pos];\n}", "    return $lst;\n}", "    # TODO: Implement the solution\
    \ here.\n    return undef;\n}", "    # negative in 1, positive in 0.\n    my $res\
    \ = [undef, undef];\n    foreach my $i (@$lst) {\n        if ($i > 0) {\n    \
    \        if (!defined($res->[0]) || $i < $res->[0]) {\n                $res->[0]\
    \ = $i;\n            }\n        } else {\n            if (!defined($res->[1])\
    \ || $i > $res->[1]) {\n                $res->[1] = $i;\n            }\n     \
    \   }\n    }\n    return $res;\n}", "    my $max;\n    my $min;\n    for my $x\
    \ (@$lst) {\n        if ($x < 0) {\n            if (!defined($max) || $x > $max)\
    \ {\n                $max = $x;\n            }\n        }\n        elsif ($x >\
    \ 0) {\n            if (!defined($min) || $x < $min) {\n                $min =\
    \ $x;\n            }\n        }\n    }\n    return ($max, $min);\n}", "    my\
    \ $a = undef;\n    my $b = undef;\n    foreach my $item (@$lst) {\n        if\
    \ ($item < 0) {\n            if (!defined($a) || $item > $a) {\n             \
    \   $a = $item;\n            }\n        } elsif ($item > 0) {\n            if\
    \ (!defined($b) || $item < $b) {\n                $b = $item;\n            }\n\
    \        }\n    }\n    return [$a, $b];\n}", "    my @sorted = sort { $a <=> $b\
    \ } @$lst;\n    my $start = 0;\n    $start++ while $start < @sorted && $sorted[$start]\
    \ < 0;\n    return (undef, undef) if $start == @sorted;\n    my $end = @sorted\
    \ - 1;\n    $end-- while $end >= 0 && $sorted[$end] > 0;\n    return (undef, undef)\
    \ if $end < 0;\n    return ($sorted[$end], $sorted[$start]);\n}", "    my($largest,\
    \ $smallest);\n    # YOUR CODE HERE\n    return [$largest, $smallest];\n}", " \
    \   my $small = undef;\n    my $large = undef;\n    foreach my $item (@$lst) {\n\
    \        if ($item < 0) {\n            if ($large eq undef) {\n              \
    \  $large = $item;\n            } elsif ($item > $large) {\n                $large\
    \ = $item;\n            }\n        } elsif ($item > 0) {\n            if ($small\
    \ eq undef) {\n                $small = $item;\n            } elsif ($item < $small)\
    \ {\n                $small = $item;\n            }\n        }\n    }\n    return\
    \ [$large, $small];\n}", "    my($max_neg, $min_pos) = (undef, undef);\n    for\
    \ my $e (@$lst) {\n        if ($e < 0) {\n            if (!defined($max_neg) ||\
    \ $e > $max_neg) {\n                $max_neg = $e;\n            }\n        } elsif\
    \ ($e > 0) {\n            if (!defined($min_pos) || $e < $min_pos) {\n       \
    \         $min_pos = $e;\n            }\n        }\n    }\n    return [$max_neg,\
    \ $min_pos];\n}", "    my @res = undef;\n    my @lst_pos = ();\n    my @lst_neg\
    \ = ();\n    # @lst_pos contains positive integers of @lst\n    # @lst_neg contains\
    \ negative integers of @lst\n    foreach my $num (@$lst) {\n        if ($num >\
    \ 0) {\n            push @lst_pos, $num;\n        } elsif ($num < 0) {\n     \
    \       push @lst_neg, $num;\n        }\n    }\n    if (scalar @lst_pos == 0 &&\
    \ scalar @lst_neg == 0) {\n        return @res;\n    }\n    if (scalar @lst_pos\
    \ == 0) {\n        push @res, undef;\n    } else {\n        push @res, min @lst_pos;\n\
    \    }\n    if (scalar @lst_neg == 0) {\n        push @res, undef;\n    } else\
    \ {\n        push @res, max @lst_neg;\n    }\n    return @res;\n}", "    return\
    \ [undef, undef] if scalar(@$lst) == 0;\n    my $max = undef;\n    my $min = undef;\n\
    \    for my $x (@$lst) {\n        $max = $x if (!defined($max) || $x > $max) &&\
    \ $x < 0;\n        $min = $x if (!defined($min) || $x < $min) && $x > 0;\n   \
    \ }\n    return [$max, $min];\n}", "    my $largest_neg = undef;\n    my $smallest_pos\
    \ = undef;\n    for my $v (@$lst) {\n        if($v < 0) {\n            if(not\
    \ defined $largest_neg or $v > $largest_neg) {\n                $largest_neg =\
    \ $v;\n            }\n        }\n        elsif($v > 0) {\n            if(not defined\
    \ $smallest_pos or $v < $smallest_pos) {\n                $smallest_pos = $v;\n\
    \            }\n        }\n    }\n    return [$largest_neg, $smallest_pos];\n}",
  "    my $min = $lst->[0];\n    my $max = $lst->[0];\n    for my $i (@$lst) {\n \
    \       if($i > 0) {\n            if($i < $min) {\n                $min = $i;\n\
    \            }\n        }\n        if($i < 0) {\n            if($i > $max) {\n\
    \                $max = $i;\n            }\n        }\n    }\n    return [$max,\
    \ $min];\n}", "    my $max_neg = undef;\n    my $min_pos = undef;\n    for my\
    \ $v (@$lst) {\n        if($v > 0 && (not defined $min_pos || $v < $min_pos))\
    \ {\n            $min_pos = $v;\n        }\n        if($v < 0 && (not defined\
    \ $max_neg || $v > $max_neg)) {\n            $max_neg = $v;\n        }\n    }\n\
    \    return [$max_neg, $min_pos];\n}", "    my $positive = undef;\n    my $negative\
    \ = undef;\n    my $tmp;\n    foreach $tmp (@$lst) {\n        if($tmp < 0) {\n\
    \            if(!defined($negative) || $tmp > $negative) {\n                $negative\
    \ = $tmp;\n            }\n        } elsif ($tmp > 0) {\n            if(!defined($positive)\
    \ || $tmp < $positive) {\n                $positive = $tmp;\n            }\n \
    \       }\n    }\n    return ($negative, $positive);\n}", "    return undef unless\
    \ @$lst;\n    my $min = undef;\n    my $max = undef;\n    foreach my $x (@$lst)\
    \ {\n        if ($x < 0) {\n            $max = $x if not defined $max or $x >\
    \ $max;\n        } elsif ($x > 0) {\n            $min = $x if not defined $min\
    \ or $x < $min;\n        }\n    }\n    return [$max, $min];\n}", "    my $max\
    \ = undef;\n    my $min = undef;\n    foreach my $elem (@$lst) {\n        if ($elem\
    \ < 0) {\n            if (not defined $max or $elem > $max) {\n              \
    \  $max = $elem;\n            }\n        }\n        elsif ($elem > 0) {\n    \
    \        if (not defined $min or $elem < $min) {\n                $min = $elem;\n\
    \            }\n        }\n    }\n    return [$max, $min];\n}", "    my($neg,\
    \ $pos);\n    for my $num (@$lst) {\n        if($num > 0) {\n            if(!defined($pos)\
    \ || $num < $pos) {\n                $pos = $num;\n            }\n        } elsif($num\
    \ < 0) {\n            if(!defined($neg) || $num > $neg) {\n                $neg\
    \ = $num;\n            }\n        }\n    }\n    return [$neg, $pos];\n}", "  \
    \  if(!$lst) {\n        return (undef, undef);\n    }\n    my($first) = $lst->[0];\n\
    \    my($a) = $first;\n    my($b) = $first;\n    foreach my $item (@$lst) {\n\
    \        if($item < 0) {\n            if($item > $a) {\n                $a = $item;\n\
    \            }\n        } else {\n            if($item < $b) {\n             \
    \   $b = $item;\n            }\n        }\n    }\n    return ($a, $b);\n}", " \
    \   my @lst = @$lst;\n    my ($min, $max) = (undef, undef);\n    for my $e (@lst)\
    \ {\n        if($e > 0) {\n            if(!defined($min) || $e < $min) {\n   \
    \             $min = $e;\n            }\n        } elsif($e < 0) {\n         \
    \   if(!defined($max) || $e > $max) {\n                $max = $e;\n          \
    \  }\n        }\n    }\n    return [$max, $min];\n}", "    my($l, $s);\n    foreach\
    \ my $e (@$lst) {\n        if ($e > 0) {\n            if (!defined($s) || $e <\
    \ $s) {\n                $s = $e;\n            }\n        }\n        elsif ($e\
    \ < 0) {\n            if (!defined($l) || $e > $l) {\n                $l = $e;\n\
    \            }\n        }\n    }\n    return [$l, $s];\n}", "    my $max = undef;\n\
    \    my $min = undef;\n    foreach my $v (@$lst) {\n        if ($v < 0) {\n  \
    \          if (not defined $max or $v > $max) {\n                $max = $v;\n\
    \            }\n        } elsif ($v > 0) {\n            if (not defined $min or\
    \ $v < $min) {\n                $min = $v;\n            }\n        }\n    }\n\
    \    return [$max, $min];\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
