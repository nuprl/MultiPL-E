language: pl
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 1
  program: "# You are given a word. Your task is to find the closest vowel that stands\
    \ between \n# two consonants from the right side of the word (case sensitive).\n\
    # Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n# find any vowel met the above condition. \n# You may assume that the\
    \ given string contains English letter only.\n# Example:\n# >>> get_closest_vowel(\"\
    yogurt\")\n# \"u\"\n# >>> get_closest_vowel(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel(\"\
    quick\")\n# \"\"\n# >>> get_closest_vowel(\"ab\")\n# \"\"\nsub get_closest_vowel\
    \ {\n    my($word) = @_;\n    return '' unless $word =~ /[aeiou]/;\n    my @vowels\
    \ = (0);\n    for my $i (1..length($word)-1) {\n        if ($word =~ /[aeiou]/g)\
    \ {\n            my $pos = pos($word);\n            push @vowels, $pos;\n    \
    \    }\n    }\n    $vowels[$#vowels] = length($word) + 1;\n    my $i = 0;\n  \
    \  while ($i < $#vowels) {\n        my $current = substr($word, $vowels[$i], 1);\n\
    \        my $next = substr($word, $vowels[$i+1], 1);\n        return $current\
    \ if $current ne $next;\n        $i++;\n    }\n    return '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&get_closest_vowel;\n        if(eq_deeply($candidate->(\"\
    yogurt\"),\"u\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"full\"),\"u\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"easy\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"eAsy\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ali\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    bad\"),\"a\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"most\"),\"o\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ba\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"quick\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"anime\"),\"i\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Asia\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"Above\"),\"o\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821329
- exit_code: 1
  program: "# You are given a word. Your task is to find the closest vowel that stands\
    \ between \n# two consonants from the right side of the word (case sensitive).\n\
    # Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n# find any vowel met the above condition. \n# You may assume that the\
    \ given string contains English letter only.\n# Example:\n# >>> get_closest_vowel(\"\
    yogurt\")\n# \"u\"\n# >>> get_closest_vowel(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel(\"\
    quick\")\n# \"\"\n# >>> get_closest_vowel(\"ab\")\n# \"\"\nsub get_closest_vowel\
    \ {\n    my($word) = @_;\n    my @vowels = (\"a\",\"e\",\"i\",\"o\",\"u\",\"A\"\
    ,\"E\",\"I\",\"O\",\"U\");\n    my @chars = split(\"\",$word);\n    if (scalar(@chars)>1){\n\
    \        for(my $i=@chars-1;$i>0;$i--){\n            for (my $j=0;$j<@vowels;$j++){\n\
    \                if (($chars[$i] eq $vowels[$j]) and ($chars[$i-1] ne $vowels[$j])\
    \ and ($chars[$i+1] ne $vowels[$j])){\n                    return $chars[$i];\n\
    \                }\n            }\n        }\n    }\n    return \"\";\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_closest_vowel;\n\
    \        if(eq_deeply($candidate->(\"yogurt\"),\"u\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"full\"\
    ),\"u\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"easy\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eAsy\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ali\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"bad\"),\"a\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"most\"),\"o\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ab\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ba\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"quick\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    anime\"),\"i\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Asia\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Above\"),\"o\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821329
- exit_code: 1
  program: "# You are given a word. Your task is to find the closest vowel that stands\
    \ between \n# two consonants from the right side of the word (case sensitive).\n\
    # Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n# find any vowel met the above condition. \n# You may assume that the\
    \ given string contains English letter only.\n# Example:\n# >>> get_closest_vowel(\"\
    yogurt\")\n# \"u\"\n# >>> get_closest_vowel(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel(\"\
    quick\")\n# \"\"\n# >>> get_closest_vowel(\"ab\")\n# \"\"\nsub get_closest_vowel\
    \ {\n    my($word) = @_;\n    my $len = length($word);\n    my $i = $len - 1;\n\
    \    my $closest = -1;\n    my @vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I',\
    \ 'O', 'U');\n    my $j = 0;\n    my $a = 0;\n    my $b = 0;\n    for ($i = $len\
    \ - 1; $i >= 0; $i--) {\n        for ($j = 0; $j < 10; $j++) {\n            if\
    \ ($word[$i] eq $vowels[$j]) {\n                $a = 1;\n                last;\n\
    \            }\n        }\n        if ($a == 1) {\n            last;\n       \
    \ }\n    }\n    $a = 0;\n    for ($i; $i >= 0; $i--) {\n        for ($j = 0; $j\
    \ < 10; $j++) {\n            if ($word[$i] eq $vowels[$j]) {\n               \
    \ $b = 1;\n                last;\n            }\n        }\n        if ($b ==\
    \ 1 && $a == 0) {\n            $closest = $i;\n            $a = 1;\n        }\n\
    \        if ($b == 0 && $a == 1) {\n            last;\n        }\n    }\n    if\
    \ ($closest == -1) {\n        return \"\";\n    }\n    else {\n        return\
    \ $word[$closest];\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&get_closest_vowel;\n        if(eq_deeply($candidate->(\"yogurt\"\
    ),\"u\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"full\"),\"u\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"easy\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    eAsy\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"ali\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"bad\"),\"a\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    most\"),\"o\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"ab\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ba\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    quick\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"anime\"),\"i\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Asia\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Above\"),\"o\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821329
- exit_code: 1
  program: "# You are given a word. Your task is to find the closest vowel that stands\
    \ between \n# two consonants from the right side of the word (case sensitive).\n\
    # Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n# find any vowel met the above condition. \n# You may assume that the\
    \ given string contains English letter only.\n# Example:\n# >>> get_closest_vowel(\"\
    yogurt\")\n# \"u\"\n# >>> get_closest_vowel(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel(\"\
    quick\")\n# \"\"\n# >>> get_closest_vowel(\"ab\")\n# \"\"\nsub get_closest_vowel\
    \ {\n    my($word) = @_;\n    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\"\
    , \"A\", \"E\", \"I\", \"O\", \"U\");\n    my @consonants = (\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\",\n                     \"\
    B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"\
    P\", \"Q\", \"R\", \"S\", \"T\", \"V\", \"W\", \"X\", \"Y\", \"Z\");\n    my @wordArray\
    \ = split(//, $word);\n    my $shortestDistance = 0;\n    my $vowel = \"\";\n\
    \    foreach my $letter (@wordArray) {\n        if (grep(/$letter/, @vowels))\
    \ {\n            my $right = rindex($word, $letter);\n            my $left = index($word,\
    \ $letter);\n            my $rightDistance = $right - ($left + 1);\n         \
    \   my $leftDistance = ($right - 1) - $left;\n            if ($rightDistance >\
    \ $leftDistance) {\n                $shortestDistance = $leftDistance;\n     \
    \           $vowel = $letter;\n            } else {\n                $shortestDistance\
    \ = $rightDistance;\n                $vowel = $letter;\n            }\n      \
    \  }\n    }\n    if ($shortestDistance == 0) {\n        return \"\";\n    }\n\
    \    my $checkRight = rindex($word, $vowel);\n    my $checkLeft = index($word,\
    \ $vowel);\n    if ((grep(/$wordArray[$checkRight + 1]/, @consonants)) && (grep(/$wordArray[$checkLeft\
    \ - 1]/, @consonants))) {\n        return $vowel;\n    } else {\n        return\
    \ \"\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&get_closest_vowel;\n        if(eq_deeply($candidate->(\"yogurt\"),\"u\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    full\"),\"u\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"easy\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eAsy\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ali\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"bad\"),\"a\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"most\"),\"o\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ab\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ba\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"quick\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    anime\"),\"i\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Asia\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Above\"),\"o\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821329
- exit_code: 1
  program: "# You are given a word. Your task is to find the closest vowel that stands\
    \ between \n# two consonants from the right side of the word (case sensitive).\n\
    # Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n# find any vowel met the above condition. \n# You may assume that the\
    \ given string contains English letter only.\n# Example:\n# >>> get_closest_vowel(\"\
    yogurt\")\n# \"u\"\n# >>> get_closest_vowel(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel(\"\
    quick\")\n# \"\"\n# >>> get_closest_vowel(\"ab\")\n# \"\"\nsub get_closest_vowel\
    \ {\n    my($word) = @_;\n    # Write your code here\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&get_closest_vowel;\n        if(eq_deeply($candidate->(\"\
    yogurt\"),\"u\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"full\"),\"u\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"easy\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"eAsy\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ali\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    bad\"),\"a\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"most\"),\"o\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ba\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"quick\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"anime\"),\"i\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Asia\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"Above\"),\"o\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821329
- exit_code: 1
  program: "# You are given a word. Your task is to find the closest vowel that stands\
    \ between \n# two consonants from the right side of the word (case sensitive).\n\
    # Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n# find any vowel met the above condition. \n# You may assume that the\
    \ given string contains English letter only.\n# Example:\n# >>> get_closest_vowel(\"\
    yogurt\")\n# \"u\"\n# >>> get_closest_vowel(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel(\"\
    quick\")\n# \"\"\n# >>> get_closest_vowel(\"ab\")\n# \"\"\nsub get_closest_vowel\
    \ {\n    my($word) = @_;\n    # you code here\n    my @vowels = qw/a e i o u/;\n\
    \    my $result = \"\";\n    my $index = \"\";\n    my $vowel_index = \"\";\n\
    \    my $letter = \"\";\n    my $char = \"\";\n    my $count = 0;\n    my $diff\
    \ = 0;\n    my $diff2 = 0;\n    my $min = 0;\n    my $right_char = \"\";\n   \
    \ my $is_vowel = 0;\n    my $is_first_count = 0;\n    my $prev_vowel = \"\";\n\
    \    my $prev_vowel_index = \"\";\n    my $prev_vowel_count = 0;\n    my $prev_diff\
    \ = 0;\n    my $prev_char = \"\";\n    my $prev_count = 0;\n    for ($index =\
    \ length($word)-1; $index >= 0; $index--) {\n        $letter = substr($word, $index,\
    \ 1);\n        $count = length($word) - $index;\n        if ($count == 1) {\n\
    \            return \"\";\n        }\n        $right_char = substr($word, $index+1,\
    \ 1);\n        $is_vowel = 0;\n        foreach $vowel_index (0..$#vowels) {\n\
    \            if ($letter eq $vowels[$vowel_index]) {\n                $is_vowel\
    \ = 1;\n                last;\n            }\n        }\n        if ($is_vowel)\
    \ {\n            $diff = $count - 1;\n            if ($is_first_count) {\n   \
    \             if ($diff < $min) {\n                    $result = $letter;\n  \
    \                  $min = $diff;\n                }\n            } else {\n  \
    \              $result = $letter;\n                $min = $diff;\n           \
    \     $is_first_count = 1;\n            }\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_closest_vowel;\n\
    \        if(eq_deeply($candidate->(\"yogurt\"),\"u\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"full\"\
    ),\"u\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"easy\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eAsy\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ali\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"bad\"),\"a\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"most\"),\"o\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ab\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ba\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"quick\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    anime\"),\"i\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Asia\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Above\"),\"o\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821329
- exit_code: 1
  program: "# You are given a word. Your task is to find the closest vowel that stands\
    \ between \n# two consonants from the right side of the word (case sensitive).\n\
    # Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n# find any vowel met the above condition. \n# You may assume that the\
    \ given string contains English letter only.\n# Example:\n# >>> get_closest_vowel(\"\
    yogurt\")\n# \"u\"\n# >>> get_closest_vowel(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel(\"\
    quick\")\n# \"\"\n# >>> get_closest_vowel(\"ab\")\n# \"\"\nsub get_closest_vowel\
    \ {\n    my($word) = @_;\n    my $result = '';\n    my @letters = split //, $word;\n\
    \    my $count = @letters;\n    my $first = @letters[0];\n    my $last = @letters[-1];\n\
    \    if ($count == 1) {\n        return '';\n    } elsif (($first !~ m/^[aeiou]$/i)\
    \ && ($last !~ m/^[aeiou]$/i)) {\n        return '';\n    } else {\n        for\
    \ (my $i = $count-1; $i >= 0; $i--) {\n            my $l = @letters[$i];\n   \
    \         if ($l =~ m/^[aeiou]$/i) {\n                $result = $l;\n        \
    \        last;\n            }\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&get_closest_vowel;\n        if(eq_deeply($candidate->(\"\
    yogurt\"),\"u\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"full\"),\"u\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"easy\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"eAsy\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ali\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    bad\"),\"a\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"most\"),\"o\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ba\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"quick\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"anime\"),\"i\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Asia\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"Above\"),\"o\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821329
- exit_code: 1
  program: "# You are given a word. Your task is to find the closest vowel that stands\
    \ between \n# two consonants from the right side of the word (case sensitive).\n\
    # Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n# find any vowel met the above condition. \n# You may assume that the\
    \ given string contains English letter only.\n# Example:\n# >>> get_closest_vowel(\"\
    yogurt\")\n# \"u\"\n# >>> get_closest_vowel(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel(\"\
    quick\")\n# \"\"\n# >>> get_closest_vowel(\"ab\")\n# \"\"\nsub get_closest_vowel\
    \ {\n    my($word) = @_;\n    my $vowels = \"aeiouAEIOU\";\n    my $i;\n    my\
    \ $pos = -1;\n    for($i = 0; $i < length($word) - 1; $i++) {\n        if (index($vowels,\
    \ substr($word, $i, 1)) != -1) {\n            if (index($vowels, substr($word,\
    \ $i + 1, 1)) == -1) {\n                $pos = $i;\n                last;\n  \
    \          }\n        }\n    }\n    if ($pos == -1) {\n        return \"\";\n\
    \    }\n    return substr($word, $pos, 1);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&get_closest_vowel;\n        if(eq_deeply($candidate->(\"\
    yogurt\"),\"u\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"full\"),\"u\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"easy\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"eAsy\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ali\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    bad\"),\"a\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"most\"),\"o\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ba\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"quick\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"anime\"),\"i\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Asia\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"Above\"),\"o\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821329
- exit_code: 1
  program: "# You are given a word. Your task is to find the closest vowel that stands\
    \ between \n# two consonants from the right side of the word (case sensitive).\n\
    # Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n# find any vowel met the above condition. \n# You may assume that the\
    \ given string contains English letter only.\n# Example:\n# >>> get_closest_vowel(\"\
    yogurt\")\n# \"u\"\n# >>> get_closest_vowel(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel(\"\
    quick\")\n# \"\"\n# >>> get_closest_vowel(\"ab\")\n# \"\"\nsub get_closest_vowel\
    \ {\n    my($word) = @_;\n    my $consonant = 1;\n    my $vowel = \"\";\n    my\
    \ $char;\n    my $vowels = {'a' => 1, 'e' => 1, 'i' => 1, 'o' => 1, 'u' => 1,\
    \ 'A' => 1, 'E' => 1, 'I' => 1, 'O' => 1, 'U' => 1};\n    #go through the word\
    \ backwards, until you find a vowel after a consonant\n    for (my $i = length($word)\
    \ - 1; $i >= 0; $i--) {\n        $char = substr($word, $i, 1);\n        if ($vowels->{$char})\
    \ {\n            $vowel = $char;\n            $consonant = 0;\n        } else\
    \ {\n            if ($consonant == 0) {\n                return $vowel;\n    \
    \        }\n        }\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&get_closest_vowel;\n        if(eq_deeply($candidate->(\"\
    yogurt\"),\"u\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"full\"),\"u\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"easy\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"eAsy\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ali\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    bad\"),\"a\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"most\"),\"o\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ba\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"quick\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"anime\"),\"i\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Asia\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"Above\"),\"o\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821329
- exit_code: 1
  program: "# You are given a word. Your task is to find the closest vowel that stands\
    \ between \n# two consonants from the right side of the word (case sensitive).\n\
    # Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n# find any vowel met the above condition. \n# You may assume that the\
    \ given string contains English letter only.\n# Example:\n# >>> get_closest_vowel(\"\
    yogurt\")\n# \"u\"\n# >>> get_closest_vowel(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel(\"\
    quick\")\n# \"\"\n# >>> get_closest_vowel(\"ab\")\n# \"\"\nsub get_closest_vowel\
    \ {\n    my($word) = @_;\n    my $vowels = \"aeiouAEIOU\";\n    my $vowel_pos;\n\
    \    my $consonant_pos;\n    my $flag = 0;\n    my $i;\n    for($i = length($word)\
    \ - 1; $i >= 0; $i--) {\n        if(index($vowels, substr($word, $i, 1)) != -1)\
    \ {\n            $vowel_pos = $i;\n            $flag = 1;\n            last;\n\
    \        }\n    }\n    if($flag == 0) {\n        return \"\";\n    }\n    for($i\
    \ = $vowel_pos - 1; $i >= 0; $i--) {\n        if(index($vowels, substr($word,\
    \ $i, 1)) == -1) {\n            $consonant_pos = $i;\n            break;\n   \
    \     }\n    }\n    return substr($word, $vowel_pos, 1);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&get_closest_vowel;\n        if(eq_deeply($candidate->(\"\
    yogurt\"),\"u\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"full\"),\"u\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"easy\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"eAsy\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ali\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    bad\"),\"a\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"most\"),\"o\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ba\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"quick\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"anime\"),\"i\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Asia\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"Above\"),\"o\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821329
- exit_code: 1
  program: "# You are given a word. Your task is to find the closest vowel that stands\
    \ between \n# two consonants from the right side of the word (case sensitive).\n\
    # Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n# find any vowel met the above condition. \n# You may assume that the\
    \ given string contains English letter only.\n# Example:\n# >>> get_closest_vowel(\"\
    yogurt\")\n# \"u\"\n# >>> get_closest_vowel(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel(\"\
    quick\")\n# \"\"\n# >>> get_closest_vowel(\"ab\")\n# \"\"\nsub get_closest_vowel\
    \ {\n    my($word) = @_;\n    my @chars = split //, $word;\n    my $vowel = \"\
    \";\n    for (my $i = $#chars; $i >= 0; $i--) {\n        if (($chars[$i] =~ /[aeiou]/i)\
    \ && ($chars[$i-1] =~ /[^aeiou]/i)) {\n            $vowel = $chars[$i];\n    \
    \        last;\n        }\n    }\n    return $vowel;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&get_closest_vowel;\n        if(eq_deeply($candidate->(\"\
    yogurt\"),\"u\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"full\"),\"u\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"easy\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"eAsy\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ali\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    bad\"),\"a\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"most\"),\"o\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ba\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"quick\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"anime\"),\"i\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Asia\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"Above\"),\"o\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821329
- exit_code: 1
  program: "# You are given a word. Your task is to find the closest vowel that stands\
    \ between \n# two consonants from the right side of the word (case sensitive).\n\
    # Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n# find any vowel met the above condition. \n# You may assume that the\
    \ given string contains English letter only.\n# Example:\n# >>> get_closest_vowel(\"\
    yogurt\")\n# \"u\"\n# >>> get_closest_vowel(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel(\"\
    quick\")\n# \"\"\n# >>> get_closest_vowel(\"ab\")\n# \"\"\nsub get_closest_vowel\
    \ {\n    my($word) = @_;\n    $word = reverse($word);\n    my $closest_vowel =\
    \ '';\n    my $prev_is_consonant = 0;\n    my $next_is_consonant = 0;\n    my\
    \ $vowel = qr/[aeiou]/i;\n    my $consonant = qr/[bcdfghjklmnpqrstvwxyz]/i;\n\
    \    for my $i (0..length($word)-1) {\n        my $char = substr($word, $i, 1);\n\
    \        if ($char =~ /$vowel/) {\n            if ($i < length($word)-1) {\n \
    \               my $next_char = substr($word, $i+1, 1);\n                if ($next_char\
    \ =~ /$consonant/) {\n                    $next_is_consonant = 1;\n          \
    \      }\n            } else {\n                $next_is_consonant = 1;\n    \
    \        }\n            if ($prev_is_consonant && $next_is_consonant) {\n    \
    \            $closest_vowel = $char;\n                last;\n            }\n \
    \       } else {\n            $prev_is_consonant = 1;\n        }\n    }\n    return\
    \ $closest_vowel;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&get_closest_vowel;\n        if(eq_deeply($candidate->(\"yogurt\"),\"u\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    full\"),\"u\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"easy\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eAsy\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ali\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"bad\"),\"a\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"most\"),\"o\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ab\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ba\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"quick\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    anime\"),\"i\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Asia\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Above\"),\"o\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821329
- exit_code: 1
  program: "# You are given a word. Your task is to find the closest vowel that stands\
    \ between \n# two consonants from the right side of the word (case sensitive).\n\
    # Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n# find any vowel met the above condition. \n# You may assume that the\
    \ given string contains English letter only.\n# Example:\n# >>> get_closest_vowel(\"\
    yogurt\")\n# \"u\"\n# >>> get_closest_vowel(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel(\"\
    quick\")\n# \"\"\n# >>> get_closest_vowel(\"ab\")\n# \"\"\nsub get_closest_vowel\
    \ {\n    my($word) = @_;\n    my $last_conso = \"\";\n    my $vowel = \"\";\n\
    \    my $new_word = reverse($word);\n    for (my $i = 0; $i < length($new_word);\
    \ $i++) {\n        my $c = substr($new_word, $i, 1);\n        if ($c =~ /[aeiou]/i)\
    \ {\n            $vowel = $c;\n            if ($last_conso ne \"\") {\n      \
    \          return $vowel;\n            }\n        } else {\n            $last_conso\
    \ = $c;\n        }\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&get_closest_vowel;\n        if(eq_deeply($candidate->(\"\
    yogurt\"),\"u\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"full\"),\"u\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"easy\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"eAsy\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ali\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    bad\"),\"a\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"most\"),\"o\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ba\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"quick\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"anime\"),\"i\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Asia\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"Above\"),\"o\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821329
- exit_code: 1
  program: "# You are given a word. Your task is to find the closest vowel that stands\
    \ between \n# two consonants from the right side of the word (case sensitive).\n\
    # Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n# find any vowel met the above condition. \n# You may assume that the\
    \ given string contains English letter only.\n# Example:\n# >>> get_closest_vowel(\"\
    yogurt\")\n# \"u\"\n# >>> get_closest_vowel(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel(\"\
    quick\")\n# \"\"\n# >>> get_closest_vowel(\"ab\")\n# \"\"\nsub get_closest_vowel\
    \ {\n    my($word) = @_;\n    my $vowels = \"aeiouAEIOU\";\n    my $consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    my $prev_c = 1;\n   \
    \ my $i = 0;\n    my $return = \"\";\n    my $ret_i = 0;\n    my $prev_i = 0;\n\
    \    while($i <= length($word)) {\n        my $c = substr($word, $i, 1);\n   \
    \     if (index($vowels, $c) >= 0) {\n            if ($prev_c == 0) {\n      \
    \          $ret_i = $i;\n                last;\n            }\n            $prev_i\
    \ = $i;\n            $prev_c = 1;\n        } else {\n            $prev_c = 0;\n\
    \        }\n        $i++;\n    }\n    if ($ret_i > 0) {\n        $return = substr($word,\
    \ $ret_i, 1);\n    }\n    return $return;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&get_closest_vowel;\n        if(eq_deeply($candidate->(\"\
    yogurt\"),\"u\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"full\"),\"u\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"easy\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"eAsy\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ali\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    bad\"),\"a\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"most\"),\"o\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ba\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"quick\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"anime\"),\"i\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Asia\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"Above\"),\"o\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821329
- exit_code: 1
  program: "# You are given a word. Your task is to find the closest vowel that stands\
    \ between \n# two consonants from the right side of the word (case sensitive).\n\
    # Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n# find any vowel met the above condition. \n# You may assume that the\
    \ given string contains English letter only.\n# Example:\n# >>> get_closest_vowel(\"\
    yogurt\")\n# \"u\"\n# >>> get_closest_vowel(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel(\"\
    quick\")\n# \"\"\n# >>> get_closest_vowel(\"ab\")\n# \"\"\nsub get_closest_vowel\
    \ {\n    my($word) = @_;\n    # work here\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&get_closest_vowel;\n        if(eq_deeply($candidate->(\"\
    yogurt\"),\"u\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"full\"),\"u\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"easy\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"eAsy\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ali\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    bad\"),\"a\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"most\"),\"o\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ba\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"quick\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"anime\"),\"i\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Asia\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"Above\"),\"o\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821329
- exit_code: 1
  program: "# You are given a word. Your task is to find the closest vowel that stands\
    \ between \n# two consonants from the right side of the word (case sensitive).\n\
    # Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n# find any vowel met the above condition. \n# You may assume that the\
    \ given string contains English letter only.\n# Example:\n# >>> get_closest_vowel(\"\
    yogurt\")\n# \"u\"\n# >>> get_closest_vowel(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel(\"\
    quick\")\n# \"\"\n# >>> get_closest_vowel(\"ab\")\n# \"\"\nsub get_closest_vowel\
    \ {\n    my($word) = @_;\n    my $vowels = \"AEIOUaeiou\";\n    my $vowel_pos\
    \ = -1;\n    for(my $i = length($word) - 1; $i >= 0; $i--) {\n        my $cur_char\
    \ = substr($word, $i, 1);\n        if (index($vowels, $cur_char) != -1) {\n  \
    \          $vowel_pos = $i;\n            last;\n        }\n    }\n    if ($vowel_pos\
    \ == -1) {\n        return \"\";\n    } else {\n        return substr($word, $vowel_pos,\
    \ 1);\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&get_closest_vowel;\n        if(eq_deeply($candidate->(\"yogurt\"),\"u\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    full\"),\"u\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"easy\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eAsy\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ali\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"bad\"),\"a\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"most\"),\"o\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ab\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ba\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"quick\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    anime\"),\"i\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Asia\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Above\"),\"o\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821329
- exit_code: 1
  program: "# You are given a word. Your task is to find the closest vowel that stands\
    \ between \n# two consonants from the right side of the word (case sensitive).\n\
    # Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n# find any vowel met the above condition. \n# You may assume that the\
    \ given string contains English letter only.\n# Example:\n# >>> get_closest_vowel(\"\
    yogurt\")\n# \"u\"\n# >>> get_closest_vowel(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel(\"\
    quick\")\n# \"\"\n# >>> get_closest_vowel(\"ab\")\n# \"\"\nsub get_closest_vowel\
    \ {\n    my($word) = @_;\n    my $closest_vowel;\n    my $previous_letter = '.';\n\
    \    my $next_letter = '.';\n    my $best_distance = length($word);\n    my $pos\
    \ = length($word) - 1;\n    while ($pos >= 0) {\n        my $letter = substr($word,\
    \ $pos, 1);\n        if ($letter =~ /[AEIOU]/) {\n            if ($previous_letter\
    \ !~ /[AEIOU]/ && $next_letter !~ /[AEIOU]/) {\n                if ($pos < $best_distance)\
    \ {\n                    $best_distance = $pos;\n                    $closest_vowel\
    \ = $letter;\n                }\n            }\n        }\n        $next_letter\
    \ = $previous_letter;\n        $previous_letter = $letter;\n        $pos--;\n\
    \    }\n    return $closest_vowel;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&get_closest_vowel;\n        if(eq_deeply($candidate->(\"\
    yogurt\"),\"u\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"full\"),\"u\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"easy\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"eAsy\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ali\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    bad\"),\"a\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"most\"),\"o\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ba\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"quick\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"anime\"),\"i\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Asia\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"Above\"),\"o\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821329
- exit_code: 1
  program: "# You are given a word. Your task is to find the closest vowel that stands\
    \ between \n# two consonants from the right side of the word (case sensitive).\n\
    # Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n# find any vowel met the above condition. \n# You may assume that the\
    \ given string contains English letter only.\n# Example:\n# >>> get_closest_vowel(\"\
    yogurt\")\n# \"u\"\n# >>> get_closest_vowel(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel(\"\
    quick\")\n# \"\"\n# >>> get_closest_vowel(\"ab\")\n# \"\"\nsub get_closest_vowel\
    \ {\n    my($word) = @_;\n    my @word = split(//, $word);\n    my $vowel = \"\
    \";\n    my $closest = \"\";\n    my $min = length($word);\n    for(my $i = length($word)\
    \ - 1; $i >= 0; $i--) {\n        if($word[$i] =~ /[aeiou]/i) {\n            $vowel\
    \ = $word[$i];\n            for(my $j = length($word) - 1; $j >= 0; $j--) {\n\
    \                if($word[$j] =~ /[^aeiou]/i) {\n                    if($min >\
    \ abs($i - $j) - 1) {\n                        $min = abs($i - $j) - 1;\n    \
    \                    $closest = $vowel;\n                    }\n             \
    \       last;\n                }\n            }\n        }\n    }\n    return\
    \ $closest;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&get_closest_vowel;\n        if(eq_deeply($candidate->(\"yogurt\"),\"u\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    full\"),\"u\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"easy\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eAsy\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ali\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"bad\"),\"a\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"most\"),\"o\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ab\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ba\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"quick\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    anime\"),\"i\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Asia\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Above\"),\"o\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821329
- exit_code: 1
  program: "# You are given a word. Your task is to find the closest vowel that stands\
    \ between \n# two consonants from the right side of the word (case sensitive).\n\
    # Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n# find any vowel met the above condition. \n# You may assume that the\
    \ given string contains English letter only.\n# Example:\n# >>> get_closest_vowel(\"\
    yogurt\")\n# \"u\"\n# >>> get_closest_vowel(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel(\"\
    quick\")\n# \"\"\n# >>> get_closest_vowel(\"ab\")\n# \"\"\nsub get_closest_vowel\
    \ {\n    my($word) = @_;\n    my @vowels = qw/ a e i o u /;\n    my @consonants\
    \ = qw/ b c d f g h j k l m n p q r s t v w x y z /;\n    my @chars = split //,\
    \ $word;\n    my $pivot = @chars - 1;\n    my $closest_vowel = '';\n    while\
    \ (0 <= $pivot) {\n        last if @vowels ~~ $chars[$pivot];\n        if (@consonants\
    \ ~~ $chars[$pivot]) {\n            for (my $index = $pivot - 1; 0 <= $index;\
    \ $index--) {\n                last if @vowels ~~ $chars[$index];\n          \
    \      $closest_vowel = $chars[$index] if (@consonants ~~ $chars[$index]);\n \
    \           }\n            last;\n        }\n        $pivot--;\n    }\n    return\
    \ $closest_vowel;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&get_closest_vowel;\n        if(eq_deeply($candidate->(\"yogurt\"),\"u\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    full\"),\"u\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"easy\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eAsy\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ali\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"bad\"),\"a\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"most\"),\"o\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ab\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ba\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"quick\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    anime\"),\"i\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Asia\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Above\"),\"o\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Smartmatch is experimental at /tmp/tmppv_tful8.pl line 23.

    Smartmatch is experimental at /tmp/tmppv_tful8.pl line 24.

    Smartmatch is experimental at /tmp/tmppv_tful8.pl line 26.

    Smartmatch is experimental at /tmp/tmppv_tful8.pl line 27.

    '
  stdout: ''
  timestamp: 1659821329
- exit_code: 1
  program: "# You are given a word. Your task is to find the closest vowel that stands\
    \ between \n# two consonants from the right side of the word (case sensitive).\n\
    # Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n# find any vowel met the above condition. \n# You may assume that the\
    \ given string contains English letter only.\n# Example:\n# >>> get_closest_vowel(\"\
    yogurt\")\n# \"u\"\n# >>> get_closest_vowel(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel(\"\
    quick\")\n# \"\"\n# >>> get_closest_vowel(\"ab\")\n# \"\"\nsub get_closest_vowel\
    \ {\n    my($word) = @_;\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&get_closest_vowel;\n        if(eq_deeply($candidate->(\"\
    yogurt\"),\"u\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"full\"),\"u\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"easy\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"eAsy\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ali\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    bad\"),\"a\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"most\"),\"o\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ba\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"quick\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"anime\"),\"i\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Asia\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"Above\"),\"o\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821329
