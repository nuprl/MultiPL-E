name: HumanEval_131_digits
language: pl
prompt: "# Given a positive integer n, return the product of the odd digits.\n# Return\
  \ 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>> digits(4)\n\
  # 0\n# >>> digits(235)\n# 15\nsub digits {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&digits;\n\
  \        if(eq_deeply($candidate->(5),5)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(54),5)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $product = 1;\n    while ($n > 0) {\n        my $digit = $n\
    \ % 10;\n        if (($digit % 2) == 1) {\n            $product *= $digit;\n \
    \       }\n        $n /= 10;\n    }\n    return $product;\n}", "    my $result\
    \ = 1;\n    while ($n) {\n        my $digit = $n % 10;\n        $result *= $digit\
    \ if $digit % 2;\n        $n /= 10;\n    }\n    return $result;\n}", "    # your\
    \ code here\n    return 0 if $n == 0;\n    my $ret = 0;\n    my $mul = 1;\n  \
    \  while ($n > 0) {\n        my $digit = $n % 10;\n        if ($digit % 2 == 1)\
    \ {\n            $ret += $mul * $digit;\n            $mul *= 10;\n        }\n\
    \        $n /= 10;\n    }\n    return $ret;\n}", "    my $m = 1;\n    while ($n\
    \ > 0) {\n        my $d = $n % 10;\n        $m *= $d if $d % 2 == 1;\n       \
    \ $n /= 10;\n    }\n    return $m;\n}", "    my $r = 1;\n    while ($n > 0) {\n\
    \        my $d = $n % 10;\n        $r *= $d if $d % 2;\n        $n /= 10;\n  \
    \  }\n    return $r;\n}", "    my $ans = 1;\n    while ($n > 0) {\n        my\
    \ $d = $n % 10;\n        $ans *= $d if $d % 2;\n        $n /= 10;\n    }\n   \
    \ return $ans;\n}", "    my $product = 1;\n    my $last_digit;\n    while($n !=\
    \ 0) {\n        $last_digit = $n % 10;\n        if ($last_digit % 2 != 0) {\n\
    \            $product *= $last_digit;\n        }\n        $n = int($n / 10);\n\
    \    }\n    return $product;\n}", "    my($product) = 1;\n    while ($n > 0) {\n\
    \        $product *= $n % 10 if $n % 2;\n        $n /= 10;\n    }\n    return\
    \ $product;\n}", "    return 0 if ($n == 0);\n    if ($n % 2 == 0) {\n       \
    \ return digits($n / 10);\n    } else {\n        return ($n % 10) * digits($n\
    \ / 10);\n    }\n}", "    my $prod = 1;\n    for my $digit (split //, $n) {\n\
    \        $prod *= $digit if $digit % 2;\n    }\n    return $prod;\n}", "    my\
    \ $r = 1;\n    for (split //, $n) {\n        $r *= $_ if $_ % 2;\n    }\n    return\
    \ $r;\n}", "    my $sum = 1;\n    while ($n > 0) {\n        my $digit = $n % 10;\n\
    \        if ($digit % 2 == 1) {\n            $sum *= $digit;\n        }\n    \
    \    $n /= 10;\n    }\n    return $sum;\n}", "    my $product = 1;\n    while\
    \ ($n) {\n        my $digit = $n % 10;\n        $product *= $digit if $digit %\
    \ 2;\n        $n /= 10;\n    }\n    return $product;\n}", "    my $prod = 1;\n\
    \    for my $d (split //, $n) {\n        $prod *= $d if $d % 2;\n    }\n    return\
    \ $prod;\n}", "    my $sum = 1;\n    while($n > 0) {\n        my $d = $n % 10;\n\
    \        if($d % 2 == 1) {\n            $sum *= $d;\n        }\n        $n /=\
    \ 10;\n    }\n    return $sum;\n}", "    return 0 if $n == 0;\n    my $r = 0;\n\
    \    my $p = 1;\n    while ($n) {\n        my $d = $n % 10;\n        if ($d %\
    \ 2 == 1) {\n            $r += $p * $d;\n            $p *= 10;\n        }\n  \
    \      $n /= 10;\n    }\n    return $r;\n}", "    my $r = 1;\n    while ($n) {\n\
    \        $r *= $n % 10 if $n % 2;\n        $n /= 10;\n    }\n    return $r;\n}",
  "    my $result = 1;\n    while ($n > 0) {\n        my $digit = $n % 10;\n     \
    \   if ($digit % 2 == 1) {\n            $result *= $digit;\n        }\n      \
    \  $n /= 10;\n    }\n    return $result;\n}", "    return 0 if $n < 1;\n    return\
    \ ($n % 10) * digits($n / 10) if $n < 10;\n    return digits($n / 10) if $n %\
    \ 2 == 0;\n    return ($n % 10) * digits($n / 10);\n}", "    my $mult = 1;\n \
    \   while($n) {\n        my $d = $n % 10;\n        $mult *= $d if($d % 2);\n \
    \       $n /= 10;\n    }\n    return $mult;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
