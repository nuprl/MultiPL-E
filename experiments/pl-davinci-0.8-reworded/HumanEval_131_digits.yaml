name: HumanEval_131_digits
language: pl
prompt: "# Given a positive integer n, return the product of the odd digits.\n# Return\
  \ 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>> digits(4)\n\
  # 0\n# >>> digits(235)\n# 15\nsub digits {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&digits;\n\
  \        if(eq_deeply($candidate->(5),5)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(54),5)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $product = 1;\n    while ($n > 0) {\n        my $digit = $n\
    \ % 10;\n        if (($digit % 2) == 1) {\n            $product *= $digit;\n \
    \       }\n        $n /= 10;\n    }\n    return $product;\n}", "    my $result\
    \ = 1;\n    while ($n) {\n        my $digit = $n % 10;\n        $result *= $digit\
    \ if $digit % 2;\n        $n /= 10;\n    }\n    return $result;\n}", "    # your\
    \ code here\n    return 0 if $n == 0;\n    my $ret = 0;\n    my $mul = 1;\n  \
    \  while ($n > 0) {\n        my $digit = $n % 10;\n        if ($digit % 2 == 1)\
    \ {\n            $ret += $mul * $digit;\n            $mul *= 10;\n        }\n\
    \        $n /= 10;\n    }\n    return $ret;\n}", "    my $m = 1;\n    while ($n\
    \ > 0) {\n        my $d = $n % 10;\n        $m *= $d if $d % 2 == 1;\n       \
    \ $n /= 10;\n    }\n    return $m;\n}", "    my $r = 1;\n    while ($n > 0) {\n\
    \        my $d = $n % 10;\n        $r *= $d if $d % 2;\n        $n /= 10;\n  \
    \  }\n    return $r;\n}", "    my $ans = 1;\n    while ($n > 0) {\n        my\
    \ $d = $n % 10;\n        $ans *= $d if $d % 2;\n        $n /= 10;\n    }\n   \
    \ return $ans;\n}", "    my $product = 1;\n    my $last_digit;\n    while($n !=\
    \ 0) {\n        $last_digit = $n % 10;\n        if ($last_digit % 2 != 0) {\n\
    \            $product *= $last_digit;\n        }\n        $n = int($n / 10);\n\
    \    }\n    return $product;\n}", "    my($product) = 1;\n    while ($n > 0) {\n\
    \        $product *= $n % 10 if $n % 2;\n        $n /= 10;\n    }\n    return\
    \ $product;\n}", "    return 0 if ($n == 0);\n    if ($n % 2 == 0) {\n       \
    \ return digits($n / 10);\n    } else {\n        return ($n % 10) * digits($n\
    \ / 10);\n    }\n}", "    my $prod = 1;\n    for my $digit (split //, $n) {\n\
    \        $prod *= $digit if $digit % 2;\n    }\n    return $prod;\n}", "    my\
    \ $r = 1;\n    for (split //, $n) {\n        $r *= $_ if $_ % 2;\n    }\n    return\
    \ $r;\n}", "    my $sum = 1;\n    while ($n > 0) {\n        my $digit = $n % 10;\n\
    \        if ($digit % 2 == 1) {\n            $sum *= $digit;\n        }\n    \
    \    $n /= 10;\n    }\n    return $sum;\n}", "    my $product = 1;\n    while\
    \ ($n) {\n        my $digit = $n % 10;\n        $product *= $digit if $digit %\
    \ 2;\n        $n /= 10;\n    }\n    return $product;\n}", "    my $prod = 1;\n\
    \    for my $d (split //, $n) {\n        $prod *= $d if $d % 2;\n    }\n    return\
    \ $prod;\n}", "    my $sum = 1;\n    while($n > 0) {\n        my $d = $n % 10;\n\
    \        if($d % 2 == 1) {\n            $sum *= $d;\n        }\n        $n /=\
    \ 10;\n    }\n    return $sum;\n}", "    return 0 if $n == 0;\n    my $r = 0;\n\
    \    my $p = 1;\n    while ($n) {\n        my $d = $n % 10;\n        if ($d %\
    \ 2 == 1) {\n            $r += $p * $d;\n            $p *= 10;\n        }\n  \
    \      $n /= 10;\n    }\n    return $r;\n}", "    my $r = 1;\n    while ($n) {\n\
    \        $r *= $n % 10 if $n % 2;\n        $n /= 10;\n    }\n    return $r;\n}",
  "    my $result = 1;\n    while ($n > 0) {\n        my $digit = $n % 10;\n     \
    \   if ($digit % 2 == 1) {\n            $result *= $digit;\n        }\n      \
    \  $n /= 10;\n    }\n    return $result;\n}", "    return 0 if $n < 1;\n    return\
    \ ($n % 10) * digits($n / 10) if $n < 10;\n    return digits($n / 10) if $n %\
    \ 2 == 0;\n    return ($n % 10) * digits($n / 10);\n}", "    my $mult = 1;\n \
    \   while($n) {\n        my $d = $n % 10;\n        $mult *= $d if($d % 2);\n \
    \       $n /= 10;\n    }\n    return $mult;\n}", "    return $n if $n < 10;\n\
    \    return 0 if $n % 2 == 0;\n    digits($n / 10) * ($n % 10);\n}", "    my $p\
    \ = 1;\n    while ($n > 0) {\n        my $d = $n % 10;\n        $p *= $d if $d\
    \ % 2;\n        $n /= 10;\n    }\n    return $p;\n}", "    my $product = 1;\n\
    \    while ($n > 0) {\n        my $digit = $n % 10;\n        if ($digit % 2) {\n\
    \            $product *= $digit;\n        }\n        $n /= 10;\n    }\n    return\
    \ $product;\n}", "    my $result = 1;\n    while ($n) {\n        $result *= $n\
    \ % 10 if $n % 2;\n        $n /= 10;\n    }\n    return $result;\n}", "    return\
    \ 0 if $n < 0;\n    my $r = 1;\n    while($n > 0) {\n        my $d = $n % 10;\n\
    \        $r *= $d if $d % 2 == 1;\n        $n /= 10;\n    }\n    return $r;\n}",
  "    my $product = 1;\n    while ($n > 0) {\n        my $digit = $n % 10;\n    \
    \    if ($digit % 2 == 1) {\n            $product *= $digit;\n        }\n    \
    \    $n /= 10;\n    }\n    return $product;\n}", "    my $product = 1;\n    while\
    \ ($n > 0) {\n        my $digit = $n % 10;\n        if ($digit % 2 == 1) {\n \
    \           $product *= $digit;\n        }\n        $n /= 10;\n    }\n    return\
    \ $product;\n}", "    my $ret = 1;\n    $ret *= $_ for (split(//, $n));\n    return\
    \ $ret;\n}", "    my($a, $b);\n    my $prod = 1;\n    while ($n > 0) {\n     \
    \   $a = $n % 10;\n        if ($a % 2 == 1) {\n            $prod *= $a;\n    \
    \    }\n        $n = int($n / 10);\n    }\n    return $prod;\n}", "    my $result\
    \ = 1;\n    while ($n > 0) {\n        my $remainder = $n % 10;\n        if ($remainder\
    \ % 2 == 1) {\n            $result *= $remainder;\n        }\n        $n = int($n\
    \ / 10);\n    }\n    return $result;\n}", "    my($digit);\n    my($product) =\
    \ 1;\n    for ($digit = 1; $n > 0; $n /= 10) {\n        $digit = $n % 10;\n  \
    \      $product *= $digit if ($digit % 2 == 1);\n    }\n    return $product;\n\
    }", "    my $product = 1;\n    while ($n) {\n        my $digit = $n % 10;\n  \
    \      $product *= $digit if $digit % 2;\n        $n /= 10;\n    }\n    return\
    \ $product;\n}", "    my $prod = 1;\n    while ($n > 0) {\n        my $m = $n\
    \ % 10;\n        $prod *= $m if $m % 2;\n        $n /= 10;\n    }\n    return\
    \ $prod;\n}", "    my $odds = 1;\n    for my $d (split //, $n) {\n        next\
    \ if $d % 2 == 0;\n        $odds *= $d;\n    }\n    return $odds;\n}", "    my\
    \ $product = 1;\n    while ($n) {\n        $product *= $n % 10 if $n % 2;\n  \
    \      $n /= 10;\n    }\n    return $product;\n}", "    my $product = 1;\n   \
    \ while ($n) {\n        my $last_digit = $n % 10;\n        if ($last_digit % 2\
    \ == 1) {\n            $product *= $last_digit;\n        }\n        $n /= 10;\n\
    \    }\n    return $product;\n}", "    my $p = 1;\n    while ($n > 0) {\n    \
    \    my $d = $n % 10;\n        $p *= $d if $d % 2;\n        $n /= 10;\n    }\n\
    \    return $p;\n}", "    my $product = 1;\n    while($n > 0) {\n        my $digit\
    \ = $n % 10;\n        if ($digit % 2 == 1) {\n            $product *= $digit;\n\
    \        }\n        $n /= 10;\n    }\n    return $product;\n}", "    my $r = 1;\n\
    \    while ($n > 0) {\n        my $d = $n % 10;\n        $r *= $d if $d % 2;\n\
    \        $n /= 10;\n    }\n    return $r;\n}", "    my $prod = 1;\n    while($n)\
    \ {\n        my $digit = $n % 10;\n        $prod *= $digit if $digit % 2;\n  \
    \      $n /= 10;\n    }\n    return $prod;\n}", "    my $prod = 1;\n    for my\
    \ $digit (split //, $n) {\n        $prod *= $digit if ($digit % 2);\n    }\n \
    \   return $prod;\n}", "    my($result) = 1;\n    while ($n > 0) {\n        my($digit)\
    \ = $n % 10;\n        if ($digit % 2 == 1) {\n            $result *= $digit;\n\
    \        }\n        $n /= 10;\n    }\n    return $result;\n}", "    my $r = 1;\n\
    \    while ($n) {\n        my $d = $n % 10;\n        $r *= $d if $d % 2;\n   \
    \     $n /= 10;\n    }\n    return $r;\n}", "    my $d;\n    my $product = 1;\n\
    \    while ($n) {\n        $d = $n % 10;\n        $n = int($n / 10);\n       \
    \ $product *= $d if $d % 2;\n    }\n    return $product;\n}", "    my $product\
    \ = 1;\n    $product *= $_ for (grep { $_ % 2 == 1 } split(//, $n));\n    return\
    \ $product;\n}", "    # Fill in the code\n    if ($n>=0){\n    \tmy $dig = 1;\n\
    \    \twhile ($n){\n    \t\tmy $d = $n%10;\n    \t\tif ($d%2==1){\n    \t\t\t\
    $dig *= $d;\n    \t\t}\n    \t\t$n = int($n/10);\n    \t}\n    \treturn $dig;\n\
    \    }\n    else{\n    \treturn 0;\n    }\n}", "    my $res = 1;\n    while ($n)\
    \ {\n        $res *= $n % 10 if $n % 2;\n        $n /= 10;\n    }\n    return\
    \ $res;\n}", "    my($sum);\n    while($n) {\n        my($r) = $n % 10;\n    \
    \    $sum += $r if $r % 2;\n        $n /= 10;\n    }\n    return $sum;\n}", " \
    \   my $mul = 1;\n    while($n > 0) {\n        my $digit = $n % 10;\n        if($digit\
    \ % 2 == 1) {\n            $mul *= $digit;\n        }\n        $n /= 10;\n   \
    \ }\n    return $mul;\n}", "    my $product = 1;\n    while ($n > 0) {\n     \
    \   my $digit = $n % 10;\n        if ($digit % 2 == 1) {\n            $product\
    \ *= $digit;\n        }\n        $n /= 10;\n    }\n    return $product;\n}", " \
    \   return 0 if $n < 1;\n    my $m = 1;\n    my $d;\n    do {\n        $d = $n\
    \ % 10;\n        $m *= $d if $d % 2;\n        $n = int($n / 10);\n    } while\
    \ ($n);\n    return $m;\n}", "    my $product = 1;\n    foreach my $digit (split\
    \ //, $n) {\n        $product *= $digit if $digit % 2;\n    }\n    return $product;\n\
    }", "    my $result = 1;\n    while ($n > 0) {\n        my $digit = $n % 10;\n\
    \        if ($digit % 2 == 1) {\n            $result *= $digit;\n        }\n \
    \       $n /= 10;\n    }\n    return $result;\n}", "    my $result = 1;\n    while\
    \ ($n > 0) {\n        my $x = $n % 10;\n        if ($x % 2) {\n            $result\
    \ *= $x;\n        }\n        $n /= 10;\n    }\n    return $result;\n}", "    my\
    \ $mul = 1;\n    while ($n > 0) {\n        my $d = $n % 10;\n        $mul *= $d\
    \ if $d % 2;\n        $n /= 10;\n    }\n    return $mul;\n}", "    my $prod =\
    \ 1;\n    foreach my $d (split '', $n) {\n        $prod *= $d if $d % 2;\n   \
    \ }\n    return $prod;\n}", "    my $product = 1;\n    for my $digit (split //,\
    \ $n) {\n        $product *= $digit if ($digit % 2 == 1);\n    }\n    return $product;\n\
    }", "    my $ret = 1;\n    for my $d (split(//, $n)) {\n        $ret *= $d if\
    \ $d % 2;\n    }\n    return $ret;\n}", "    my $retval = 1;\n    for (; $n; $n\
    \ /= 10) {\n        my $digit = $n % 10;\n        $retval *= $digit if $digit\
    \ % 2;\n    }\n    return $retval;\n}", "    my $product = 1;\n    while ($n >\
    \ 0) {\n        my $digit = $n % 10;\n        if ($digit % 2 == 1) {\n       \
    \     $product *= $digit;\n        }\n        $n /= 10;\n    }\n    return $product;\n\
    }", "    return 0 if $n == 0;\n    my $result = $n % 10;\n    $result *= digits($n\
    \ / 10) if $result % 2;\n    return $result;\n}", "    my $result = 1;\n    while($n)\
    \ {\n        my $digit = $n % 10;\n        $result *= $digit if $digit % 2;\n\
    \        $n /= 10;\n    }\n    return $result;\n}", "    # Base case\n    if($n\
    \ < 10) {\n        return $n if($n % 2);\n        return 0;\n    }\n    my $last\
    \ = $n % 10;\n    my $rest = $n / 10;\n    # Recursive case\n    if($last % 2)\
    \ {\n        return $last * digits($rest);\n    } else {\n        return digits($rest);\n\
    \    }\n}", "    $n = abs($n);\n    my $prod = 1;\n    while ($n) {\n        $prod\
    \ *= $n % 10 if $n % 2;\n        $n /= 10;\n    }\n    return $prod;\n}", "  \
    \  my $sum = 1;\n    while($n > 0) {\n        my $digit = $n % 10;\n        if($digit\
    \ % 2 == 1) {\n            $sum *= $digit;\n        }\n        $n /= 10;\n   \
    \ }\n    return $sum;\n}", "    my $prod = 1;\n    while($n > 0) {\n        my\
    \ $digit = $n % 10;\n        if($digit % 2 == 1) {\n            $prod *= $digit;\n\
    \        }\n        $n /= 10;\n    }\n    return $prod;\n}", "    $n =~ s/\\D//g;\n\
    \    $n =~ s/[02468]//g;\n    return $n;\n}", "    my $product = 1;\n    while\
    \ ($n > 0) {\n        my $digit = $n % 10;\n        if ($digit % 2 == 1) {\n \
    \           $product *= $digit;\n        }\n        $n /= 10;\n    }\n    return\
    \ $product;\n}", "    my($product) = 1;\n    while ($n > 0) {\n        $product\
    \ *= $n % 10 if $n % 2 == 1;\n        $n /= 10;\n    }\n    return $product;\n\
    }", "    my $prod = 1;\n    while ($n > 0) {\n        my $digit = $n % 10;\n \
    \       $prod *= $digit if $digit % 2;\n        $n /= 10;\n    }\n    return $prod;\n\
    }", "    my $prod = 1;\n    while ($n) {\n        my $digit = $n % 10;\n     \
    \   $prod *= $digit if $digit % 2;\n        $n /= 10;\n    }\n    return $prod;\n\
    }", "    my $product = 1;\n    while ($n) {\n        my $digit = $n % 10;\n  \
    \      $product *= $digit if $digit % 2;\n        $n /= 10;\n    }\n    return\
    \ $product;\n}", "    my $product = 1;\n    while ($n) {\n        my $d = $n %\
    \ 10;\n        $product *= $d if $d % 2;\n        $n /= 10;\n    }\n    return\
    \ $product;\n}", "    my $result = 1;\n    while ($n) {\n        my $digit = $n\
    \ % 10;\n        $result *= $digit if $digit % 2;\n        $n /= 10;\n    }\n\
    \    return $result;\n}", "    my $prod = 1;\n    while ($n > 0) {\n        my\
    \ $digit = $n % 10;\n        $prod *= $digit if $digit % 2;\n        $n /= 10;\n\
    \    }\n    return $prod;\n}", "    my $r = 1;\n    while ($n) {\n        my $d\
    \ = $n % 10;\n        $r *= $d if $d % 2;\n        $n /= 10;\n    }\n    return\
    \ $r;\n}", "    my $result = 1;\n    while ($n > 0) {\n        my $d = $n % 10;\n\
    \        $result *= $d if $d % 2;\n        $n /= 10;\n    }\n    return $result;\n\
    }", "    my $product = 1;\n    while ($n) {\n        $product *= $n % 10 if $n\
    \ % 2;\n        $n /= 10;\n    }\n    return $product;\n}", "    my $result =\
    \ 1;\n    while($n) {\n        my $digit = $n % 10;\n        $result *= $digit\
    \ if $digit % 2;\n        $n /= 10;\n    }\n    return $result;\n}", "    my $sum\
    \ = 1;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        if ($digit\
    \ % 2 == 1) {\n            $sum *= $digit;\n        }\n        $n /= 10;\n   \
    \ }\n    return $sum;\n}", "    my $product = 1;\n    for my $digit (split '',\
    \ $n) {\n        $product *= $digit if $digit % 2;\n    }\n    return $product;\n\
    }", "    my $num = $n;\n    my $odd = 1;\n    while ($num > 0) {\n        my $last\
    \ = $num % 10;\n        $odd *= $last if $last % 2;\n        $num /= 10;\n   \
    \ }\n    return $odd;\n}", "    my $sum = 1;\n    while ($n > 0) {\n        my\
    \ $d = $n % 10;\n        $sum *= $d if $d % 2;\n        $n /= 10;\n    }\n   \
    \ return $sum;\n}", "    $n =~ s/\\D//g;\n    $n = reverse($n);\n    my $res =\
    \ 1;\n    foreach my $d (split(//, $n)) {\n        $res *= $d if $d % 2;\n   \
    \ }\n    return $res;\n}", "    my $product = 1;\n    while ($n) {\n        my\
    \ $digit = $n % 10;\n        $product *= $digit if $digit % 2;\n        $n /=\
    \ 10;\n    }\n    return $product;\n}\nprint digits(1);\nprint digits(4);\nprint\
    \ digits(235);", "    my $p = 1;\n    for (split //, $n) {\n        $p *= $_ if\
    \ $_ % 2;\n    }\n    return $p;\n}", "    return 0 if !$n;\n    return $n % 10\n\
    \        if $n < 10;\n    my $t = digits($n / 10);\n    return $t * ($n % 10)\n\
    \        if $n % 2;\n    return $t;\n}", "    my $i = $n;\n    my $ans = 1;\n\
    \    while($i > 0) {\n        my $digit = $i % 10;\n        if($digit % 2 == 1)\
    \ {\n            $ans *= $digit;\n        }\n        $i /= 10;\n    }\n    return\
    \ $ans;\n}", "    my $prod = 1;\n    while($n) {\n        my $d = $n % 10;\n \
    \       $prod *= $d if $d % 2;\n        $n /= 10;\n    }\n    return $prod;\n}",
  "    my($prod) = 1;\n    while($n != 0) {\n        $prod *= $n % 10 if $n % 2;\n\
    \        $n /= 10;\n    }\n    return $prod;\n}", "    my $prod = 1;\n    while\
    \ ($n) {\n        my $digit = $n % 10;\n        $prod *= $digit if $digit % 2;\n\
    \        $n /= 10;\n    }\n    return $prod;\n}", "    my $prod = 1;\n    while($n\
    \ > 0) {\n        my $digit = $n % 10;\n        if ($digit % 2 == 1) {\n     \
    \       $prod *= $digit;\n        }\n        $n /= 10;\n    }\n    return $prod;\n\
    }", "    my $product = 1;\n    my $last = 0;\n    while ($n != 0) {\n        $last\
    \ = $n % 10;\n        if ($last % 2 == 1) {\n            $product *= $last;\n\
    \        }\n        $n = int($n / 10);\n    }\n    return $product;\n}", "   \
    \ my $product = 1;\n    while ($n > 0) {\n        $product *= $n % 10 if $n %\
    \ 2;\n        $n /= 10;\n    }\n    return $product;\n}", "    return $n if ($n\
    \ < 10);\n    my $odd_digits = 1;\n    while ($n) {\n        my $digit = $n %\
    \ 10;\n        $odd_digits *= $digit if ($digit % 2);\n        $n /= 10;\n   \
    \ }\n    return $odd_digits;\n}", "    my($i, $m, $product);\n    $m = 1;\n  \
    \  $product = 1;\n    for ($i = $n; $i > 0; $i /= 10) {\n        if ($i % 10 %\
    \ 2 == 1) {\n            $product *= $i % 10;\n        }\n    }\n    return $product;\n\
    }", "    # TODO\n}", "    my $product = 1;\n    while($n > 0) {\n        my $digit\
    \ = $n % 10;\n        if($digit % 2 != 0) {\n            $product *= $digit;\n\
    \        }\n        $n /= 10;\n    }\n    return $product;\n}", "    my($m, $r)\
    \ = (1, 0);\n    while($n) {\n        $m = $n % 10;\n        $n = int($n / 10);\n\
    \        $r = $r * $m if $m % 2;\n    }\n    return $r;\n}", "    my $res = 1;\n\
    \    while ($n > 0) {\n        my $digit = $n % 10;\n        $res *= $digit if\
    \ $digit % 2 == 1;\n        $n /= 10;\n    }\n    return $res;\n}", "    return\
    \ 0 if $n < 0;\n    return ($n == 0) ? 0 : (\n        $n % 2 ? $n % 10 * digits($n\
    \ / 10) : digits($n / 10)\n    );\n}", "    my($t) = $n;\n    my($m) = 1;\n  \
    \  while ($t) {\n        my($d) = $t % 10;\n        $t = int($t / 10);\n     \
    \   $m *= $d if $d % 2;\n    }\n    return $m;\n}", "    my $product = 1;\n  \
    \  while ($n > 0) {\n        my $last_digit = $n % 10;\n        if ($last_digit\
    \ % 2 != 0) {\n            $product *= $last_digit;\n        }\n        $n = int($n\
    \ / 10);\n    }\n    return $product;\n}", "    return 0 if $n == 0;\n    my $last_digit\
    \ = $n % 10;\n    if ($last_digit % 2 == 1) {\n        return $last_digit * digits($n\
    \ / 10);\n    } else {\n        return digits($n / 10);\n    }\n}", "    my $res\
    \ = 1;\n    foreach my $d (split //, $n) {\n        $res *= $d if $d % 2;\n  \
    \  }\n    return $res;\n}", "    return 0 if $n == 0;\n    return ($n % 10) *\
    \ digits($n / 10) if $n % 2 == 0;\n    return digits($n / 10);\n}", "    my $product\
    \ = 1;\n    while ($n > 0) {\n        $product *= $n % 10 if $n % 2;\n       \
    \ $n /= 10;\n    }\n    return $product;\n}", "    my $prod = 1;\n    for (split(//,\
    \ $n)) {\n        $prod *= $_ if $_ % 2;\n    }\n    return $prod;\n}", "    my\
    \ $mult = 1;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        if ($digit\
    \ % 2 == 1) {\n            $mult *= $digit;\n        }\n        $n /= 10;\n  \
    \  }\n    return $mult;\n}", "    $n =~ s/\\D//g;\n    $n =~ s/[13579]//g;\n \
    \   return length($n) ? 0 : 1;\n}", "    my $prod = 1;\n    while ($n > 0) {\n\
    \        my $digit = $n % 10;\n        $prod *= $digit if $digit % 2;\n      \
    \  $n /= 10;\n    }\n    return $prod;\n}", "    my($prod) = 1;\n    for my $digit\
    \ (split('', $n)) {\n        next if $digit % 2 == 0;\n        $prod *= $digit;\n\
    \    }\n    return $prod;\n}", "    my $p = 1;\n    for my $d (split //, $n) {\n\
    \        $p *= $d if $d % 2;\n    }\n    return $p;\n}", "    my $product = 1;\n\
    \    $product *= $_ for grep {$_ % 2} split //, $n;\n    return $product || 0;\n\
    }", "    my $product = 1;\n    for my $digit (split //, $n) {\n        $product\
    \ *= $digit if $digit % 2;\n    }\n    return $product;\n}", "    my($ret) = 1;\n\
    \    my($d);\n    while($n > 0) {\n        $d = $n % 10;\n        $n = $n / 10;\n\
    \        if($d % 2) {\n            $ret *= $d;\n        }\n    }\n    return $ret;\n\
    }", "    my $ret = 1;\n    while ($n > 0) {\n        my $d = $n % 10;\n      \
    \  $ret *= $d if $d % 2;\n        $n /= 10;\n    }\n    return $ret;\n}", "  \
    \  my $o = 1;\n    while ($n > 0) {\n        my $r = $n % 10;\n        $o *= $r\
    \ if $r % 2;\n        $n /= 10;\n    }\n    return $o;\n}", "    return 0 if $n\
    \ == 0;\n    return (digits($n / 10) * 10) + ($n % 10) if $n % 2 == 0;\n    return\
    \ (digits($n / 10) * 10) + (0) if $n % 2 == 1;\n}", "    my $ret = 1;\n    while\
    \ ($n > 0) {\n        my $d = $n % 10;\n        $ret *= $d if $d % 2;\n      \
    \  $n /= 10;\n    }\n    return $ret;\n}", "    my $sum = 1;\n    while ($n >\
    \ 0) {\n        my $digit = $n % 10;\n        if ($digit % 2 == 1) {\n       \
    \     $sum *= $digit;\n        }\n        $n /= 10;\n    }\n    return $sum;\n\
    }", "    my $result = 1;\n    foreach (split //, $n) {\n        if ($_ % 2) {\n\
    \            $result *= $_;\n        }\n    }\n    return $result;\n}", "    my\
    \ $result = 1;\n    my $digit;\n    while ($n > 0) {\n        $digit = $n % 10;\n\
    \        $n = int($n / 10);\n        $result *= $digit if $digit % 2;\n    }\n\
    \    return $result;\n}", "    my $prod = 1;\n    while ($n > 0) {\n        my\
    \ $digit = $n % 10;\n        $prod *= $digit if $digit % 2;\n        $n /= 10;\n\
    \    }\n    return $prod;\n}", "    $n =~ s/[^13579]//g;\n    return eval join('*',\
    \ split(//, $n)) || 0;\n}", "    my $prod = 1;\n    while ($n) {\n        my $d\
    \ = $n % 10;\n        $prod *= $d if $d % 2;\n        $n /= 10;\n    }\n    return\
    \ $prod;\n}", "    my $res = 1;\n    while ($n) {\n        my $d = $n % 10;\n\
    \        $res *= $d if $d % 2;\n        $n /= 10;\n    }\n    return $res;\n}",
  "    my $product = 1;\n    while ($n > 0) {\n        my $digit = $n % 10;\n    \
    \    if ($digit % 2 == 1) {\n            $product *= $digit;\n        }\n    \
    \    $n /= 10;\n    }\n    return $product;\n}", "    return 0 if $n == 0;\n \
    \   my $odd_digits = digits($n / 10);\n    my $digit = $n % 10;\n    return $odd_digits\
    \ * $digit if $digit % 2;\n    return $odd_digits;\n}", "    my $prod = 1;\n \
    \   while ($n > 0) {\n        my $d = $n % 10;\n        $prod *= $d if $d % 2\
    \ == 1;\n        $n /= 10;\n    }\n    return $prod;\n}", "    return 1 if $n\
    \ == 1;\n    my $last = $n % 10;\n    my $prev = digits($n / 10);\n    return\
    \ $last * $prev if $last % 2;\n    return $prev;\n}", "    my $prod = 1;\n   \
    \ while ($n > 0) {\n        my $digit = $n % 10;\n        $prod *= $digit if $digit\
    \ % 2 == 1;\n        $n /= 10;\n    }\n    return $prod;\n}", "    my $product\
    \ = 1;\n    while ($n) {\n        my $digit = $n % 10;\n        $product *= $digit\
    \ if $digit % 2;\n        $n /= 10;\n    }\n    return $product;\n}", "    return\
    \ 0 if $n == 0;\n    return $n % 10 * digits($n / 10) if $n % 2;\n    return digits($n\
    \ / 10);\n}", "    $n = int($n);\n    my $s = 1;\n    while ($n) {\n        my\
    \ $digit = $n % 10;\n        $s *= $digit if $digit % 2;\n        $n /= 10;\n\
    \    }\n    return $s;\n}", "    my $product = 1;\n    while($n > 0) {\n     \
    \   my $digit = $n % 10;\n        if($digit % 2 == 1) {\n            $product\
    \ *= $digit;\n        }\n        $n /= 10;\n    }\n    return $product;\n}", " \
    \   my $product = 1;\n    while($n > 0) {\n        my $digit = $n % 10;\n    \
    \    if($digit % 2 == 1) {\n            $product *= $digit;\n        }\n     \
    \   $n /= 10;\n    }\n    return $product;\n}", "    my $ret = 1;\n    for my\
    \ $d (split //, $n) {\n        $ret *= $d if $d % 2;\n    }\n    return $ret;\n\
    }", "    my $prod = 1;\n    while ($n > 0) {\n        my $d = $n % 10;\n     \
    \   $prod *= $d if $d % 2;\n        $n /= 10;\n    }\n    return $prod;\n}", " \
    \   my($product) = 1;\n    while ($n > 0) {\n        $product *= $n % 10 if $n\
    \ % 2;\n        $n /= 10;\n    }\n    return $product;\n}", "    my $odds = 1;\n\
    \    for my $digit (split //, $n) {\n        $odds *= $digit if $digit % 2;\n\
    \    }\n    return $odds;\n}", "    $n =~ s/[^13579]//g;\n    return 1 if $n eq\
    \ '';\n    return eval($n);\n}", "    my $sum = 1;\n    while ($n > 0) {\n   \
    \     my $digit = $n % 10;\n        if ($digit % 2) {\n            $sum *= $digit;\n\
    \        }\n        $n /= 10;\n    }\n    return $sum;\n}", "    my $prod = 1;\n\
    \    while($n) {\n        my $d = $n % 10;\n        $prod *= $d if $d % 2;\n \
    \       $n /= 10;\n    }\n    return $prod;\n}", "    return 0 if $n == 0;\n \
    \   my $last = $n % 10;\n    return $last if $last % 2;\n    return digits($n\
    \ / 10);\n}", "    # fill in the code here\n    my $product = 1;\n    while ($n\
    \ != 0) {\n        if (($n % 10) % 2 != 0) {\n            $product *= ($n % 10);\n\
    \        }\n        $n = int($n / 10);\n    }\n    return $product;\n}", "   \
    \ my $prod = 1;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        $prod\
    \ *= $digit if $digit % 2;\n        $n /= 10;\n    }\n    return $prod;\n}", " \
    \   my($res) = 1;\n    while($n) {\n        my($digit) = $n % 10;\n        $res\
    \ *= $digit if($digit % 2);\n        $n /= 10;\n    }\n    return $res;\n}", " \
    \   return 0 if $n == 0;\n    my $product = 1;\n    if ($n%2) {\n        $product\
    \ *= $n%10;\n    }\n    digits(int($n/10));\n}", "    my $product = 1;\n    while($n)\
    \ {\n        $product *= $n % 10 if ($n % 10) % 2;\n        $n /= 10;\n    }\n\
    \    return $product;\n}", "    my $prod = 1;\n    while ($n > 0) {\n        my\
    \ $digit = $n % 10;\n        $prod *= $digit if $digit % 2 == 1;\n        $n /=\
    \ 10;\n    }\n    return $prod;\n}", "    my $s = $n;\n    my $prod = 1;\n   \
    \ while($s > 0) {\n        my $d = $s % 10;\n        if($d % 2 != 0) {\n     \
    \       $prod *= $d;\n        }\n        $s = int($s / 10);\n    }\n    return\
    \ $prod;\n}", "    my $result = 1;\n    while($n > 0) {\n        my $digit = $n\
    \ % 10;\n        if ($digit % 2) {\n            $result *= $digit;\n        }\n\
    \        $n /= 10;\n    }\n    return $result;\n}", "    my $mul = 1;\n    my\
    \ $digit;\n    while ($n > 0) {\n        $digit = $n % 10;\n        $mul *= $digit\
    \ if $digit % 2;\n        $n /= 10;\n    }\n    return $mul;\n}", "    my $p =\
    \ 1;\n    for my $d (split //, $n) {\n        $p *= $d if $d & 1;\n    }\n   \
    \ return $p;\n}", "    my $prod = 1;\n    while ($n > 0) {\n        my $digit\
    \ = $n % 10;\n        $prod *= $digit if $digit % 2;\n        $n /= 10;\n    }\n\
    \    return $prod;\n}", "    my $result = 1;\n    while ($n > 0) {\n        my\
    \ $digit = $n % 10;\n        if ($digit % 2 == 1) {\n            $result *= $digit;\n\
    \        }\n        $n /= 10;\n    }\n    return $result;\n}", "    my $prod =\
    \ 1;\n    while ($n) {\n        my $digit = $n % 10;\n        $prod *= $digit\
    \ if $digit % 2;\n        $n /= 10;\n    }\n    return $prod;\n}", "    $n =~\
    \ s/\\D//g;\n    return 0 if $n =~ /^0+$/;\n    my $d = 1;\n    $d *= $_ for grep\
    \ $_ % 2, split //, $n;\n    return $d;\n}", "    my $product = 1;\n    while\
    \ ($n) {\n        $product *= $n % 10 if $n % 2;\n        $n /= 10;\n    }\n \
    \   return $product;\n}", "    my $product = 1;\n    while($n != 0) {\n      \
    \  $product *= $n % 10 if $n % 2;\n        $n /= 10;\n    }\n    return $product;\n\
    }", "    my $prod = 1;\n    for my $d (split //, $n) {\n        $prod *= $d if\
    \ $d & 1;\n    }\n    return $prod;\n}", "    my($product) = 1;\n    for (split(//,\
    \ $n)) {\n        $product *= $_ if $_ % 2 == 1;\n    }\n    return $product;\n\
    }", "    $n > 0 or die \"bad param\";\n    my $result = 1;\n    while ($n > 0)\
    \ {\n        my $digit = $n % 10;\n        $result *= $digit if $digit % 2 ==\
    \ 1;\n        $n /= 10;\n    }\n    return $result;\n}", "    my($product) = 1;\n\
    \    while ($n) {\n        $product *= $n % 10 if $n % 2;\n        $n /= 10;\n\
    \    }\n    return $product;\n}", "    return 0 if $n == 0;\n    my $ret = 1;\n\
    \    while ($n) {\n        my $d = $n % 10;\n        $ret *= $d if $d % 2;\n \
    \       $n /= 10;\n    }\n    return $ret;\n}", "    my $product = 1;\n    for\
    \ my $digit (split //, $n) {\n        $product *= $digit if $digit % 2;\n    }\n\
    \    return $product;\n}", "    my $prod = 1;\n    while ($n) {\n        my $d\
    \ = $n % 10;\n        $prod *= $d if $d % 2;\n        $n /= 10;\n    }\n    return\
    \ $prod;\n}", "    my $product = 1;\n    while ($n) {\n        my $digit = $n\
    \ % 10;\n        $product *= $digit if $digit % 2;\n        $n /= 10;\n    }\n\
    \    return $product;\n}", "    my $prod = 1;\n    while($n > 0) {\n        my\
    \ $digit = $n % 10;\n        if($digit % 2 == 1) {\n            $prod *= $digit;\n\
    \        }\n        $n /= 10;\n    }\n    return $prod;\n}", "    my $sum = 1;\n\
    \    for my $digit (split //, \"$n\") {\n        $sum *= $digit if $digit % 2;\n\
    \    }\n    return $sum;\n}", "    my $product = 1;\n    while ($n > 0) {\n  \
    \      my $digit = $n % 10;\n        if ($digit % 2 == 1) {\n            $product\
    \ *= $digit;\n        }\n        $n /= 10;\n    }\n    return $product;\n}", " \
    \   $n =~ s/[^13579]//g;\n    return eval $n;\n}", "    my $product = 1;\n   \
    \ while ($n > 0) {\n        my $digit = $n % 10;\n        if ($digit % 2 == 1)\
    \ {\n            $product *= $digit;\n        }\n        $n /= 10;\n    }\n  \
    \  return $product;\n}", "    # your code here\n    my $prod = 1;\n    while($n\
    \ > 0){\n    \tmy $digit = $n % 10;\n    \tif($digit % 2 == 1){\n    \t\t$prod\
    \ *= $digit;\n    \t}\n    \t$n /= 10;\n    }\n    return $prod;\n}", "    # YOUR\
    \ CODE HERE\n    my $product = 1;\n    while($n > 0){\n        if($n % 2 == 1){\n\
    \            $product *= $n % 10;\n        }\n        $n /= 10;\n    }\n    return\
    \ $product;\n}", "    my($odds) = 1;\n    while ($n > 0) {\n        my($digit)\
    \ = $n % 10;\n        if ($digit % 2) {\n            $odds *= $digit;\n      \
    \  }\n        $n /= 10;\n    }\n    return $odds;\n}", "    my $product = 1;\n\
    \    my $digit;\n    while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit\
    \ % 2) {\n            $product *= $digit;\n        }\n        $n /= 10;\n    }\n\
    \    return $product;\n}", "    my $product = 1;\n    while ($n) {\n        my\
    \ $digit = $n % 10;\n        $product *= $digit if $digit % 2;\n        $n /=\
    \ 10;\n    }\n    return $product;\n}\nprint \"Digits of 1 is \" . digits(1) .\
    \ \"\\n\";\nprint \"Digits of 4 is \" . digits(4) . \"\\n\";\nprint \"Digits of\
    \ 235 is \" . digits(235) . \"\\n\";\nprint \"Digits of 3456 is \" . digits(3456)\
    \ . \"\\n\";\nprint \"Digits of 9 is \" . digits(9) . \"\\n\";\nprint \"Digits\
    \ of 0 is \" . digits(0) . \"\\n\";", "    my $prod = 1;\n    while ($n != 0)\
    \ {\n        my $digit = $n % 10;\n        if ($digit % 2 == 1) {\n          \
    \  $prod *= $digit;\n        }\n        $n /= 10;\n    }\n    return $prod;\n}",
  "    my $result = 1;\n    while ($n > 0) {\n        my $digit = $n % 10;\n     \
    \   if ($digit % 2) {\n            $result *= $digit;\n        }\n        $n /=\
    \ 10;\n    }\n    return $result;\n}", "    my $product = 1;\n    while ($n >\
    \ 0) {\n        my $digit = $n % 10;\n        if ($digit % 2 == 1) {\n       \
    \     $product *= $digit;\n        }\n        $n /= 10;\n    }\n    return $product;\n\
    }", "    my($prod) = 1;\n    while ($n > 0) {\n        my($d) = $n % 10;\n   \
    \     if ($d % 2 == 1) {\n            $prod *= $d;\n        }\n        $n /= 10;\n\
    \    }\n    return $prod;\n}", "    # your code here\n}", "    my $prod = 1;\n\
    \    while ($n > 0) {\n        my $d = $n % 10;\n        $prod *= $d if $d % 2;\n\
    \        $n /= 10;\n    }\n    return $prod;\n}", "    my $p = 1;\n    while ($n\
    \ > 0) {\n        $p *= $n % 10 if $n % 2;\n        $n /= 10;\n    }\n    return\
    \ $p;\n}", "    my $prod = 1;\n    while($n){\n        my $digit = $n % 10;\n\
    \        $prod *= $digit if $digit % 2;\n        $n /= 10;\n    }\n    return\
    \ $prod;\n}", "    my $x = 1;\n    while ($n) {\n        my $d = $n % 10;\n  \
    \      $x *= $d if $d % 2;\n        $n /= 10;\n    }\n    return $x;\n}", "  \
    \  return 0 if $n == 0;\n    $n % 2 == 0 ? digits($n / 10) : $n % 10 * digits($n\
    \ / 10);\n}", "    my $product = 1;\n    while ($n) {\n        my $digit = $n\
    \ % 10;\n        $product *= $digit if $digit % 2;\n        $n /= 10;\n    }\n\
    \    return $product;\n}", "    my $product = 1;\n    for my $c (split(//, $n))\
    \ {\n        if($c % 2) {\n            $product *= $c;\n        }\n    }\n   \
    \ return $product;\n}", "    my $odd = 1;\n    for my $digit (split //, $n) {\n\
    \        $odd *= $digit if $digit % 2;\n    }\n    return $odd;\n}", "    my($accum,\
    \ $digit);\n    $accum = 1;\n    for (; $n > 0; $n /= 10) {\n        $digit =\
    \ $n % 10;\n        $accum *= $digit if $digit % 2;\n    }\n    return $accum;\n\
    }", "    my $product = 1;\n    while($n) {\n        my $digit = $n % 10;\n   \
    \     $product *= $digit if($digit % 2 == 1);\n        $n /= 10;\n    }\n    return\
    \ $product;\n}", "    # use local $a to make $a remain 0 after return\n    local\
    \ $a = 1;\n    map { $a *= $_ if $_ % 2 } split('', $n);\n    return $a;\n}",
  "    my $product = 1;\n    while ($n > 0) {\n        my $digit = $n % 10;\n    \
    \    if ($digit % 2 == 1) {\n            $product *= $digit;\n        }\n    \
    \    $n /= 10;\n    }\n    return $product;\n}", "    my($prod) = 1;\n    my($digit);\n\
    \    while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit % 2 == 1)\
    \ {\n            $prod *= $digit;\n        }\n        $n = int($n / 10);\n   \
    \ }\n    return $prod;\n}", "    my $product = 1;\n    while ($n) {\n        my\
    \ $digit = $n % 10;\n        $product *= $digit if $digit % 2;\n        $n /=\
    \ 10;\n    }\n    return $product;\n}", "    my $p = 1;\n    for (split //, $n)\
    \ {\n        next if $_ % 2 == 0;\n        $p *= $_;\n    }\n    return $p;\n}",
  "    my $numbers = split_number($n);\n    return 0 if !($numbers =~ /1|3|5|7|9/);\n\
    \    return eval join '*', @$numbers;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
