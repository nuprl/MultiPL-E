name: HumanEval_149_sorted_list_sum
language: pl
prompt: "# Write a function that accepts an array of strings as a parameter,\n# deletes\
  \ the strings that have odd lengths from it,\n# and returns the resulted array with\
  \ a sorted order,\n# The array is always an array of strings and never an array\
  \ of numbers,\n# and it may contain duplicates.\n# The order of the array should\
  \ be ascending by length of each word, and you\n# should return the array sorted\
  \ by that rule.\n# If two words have the same length, sort the array alphabetically.\n\
  # The function should return an array of strings in sorted order.\n# You may assume\
  \ that all words will have the same length.\n# For example:\n# >>> list_sort([\"\
  aa\", \"a\", \"aaa\"])\n# [\"aa\"]\n# >>> list_sort([\"ab\", \"a\", \"aaa\", \"\
  cd\"])\n# [\"ab\", \"cd\"]\nsub sorted_list_sum {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sorted_list_sum;\n\
  \        if(eq_deeply($candidate->([\"aa\", \"a\", \"aaa\"]),[\"aa\"])) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  school\", \"AI\", \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"])) {\n       \
  \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  d\", \"b\", \"c\", \"a\"]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->([\"d\", \"dcba\", \"abcd\", \"a\"\
  ]),[\"abcd\", \"dcba\"])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->([\"AI\", \"ai\", \"au\"]),[\"AI\", \"\
  ai\", \"au\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"])) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @sorted = sort by_length_and_alpha @$lst;\n    my $pairs = [map{[length\
    \ $_, $_]} @sorted];\n    my $result = [];\n    for(my $i = 0; $i < scalar @$pairs;\
    \ $i++) {\n        if($i == 0 || length($pairs->[$i][0]) != length($pairs->[$i-1][0]))\
    \ {\n            push @$result, $pairs->[$i][1];\n        }\n    }\n    return\
    \ $result;\n}", "    my @odd_lens = ();\n    my $i = 0;\n    foreach my $str (@$lst)\
    \ {\n        if (length($str) % 2 != 0) {\n            push @odd_lens, $i;\n \
    \       }\n        $i++;\n    }\n    my @lst_removed = ();\n    my $len = scalar(@$lst);\n\
    \    for (my $j = 0; $j < $len; $j++) {\n        if (!(grep $_ == $j, @odd_lens))\
    \ {\n            push @lst_removed, $lst->[$j];\n        }\n    }\n    my @lst_removed_sorted\
    \ = ();\n    foreach my $str (@lst_removed) {\n        if (scalar(@lst_removed_sorted)\
    \ == 0) {\n            push @lst_removed_sorted, $str;\n        } else {\n   \
    \         my $k = 0;\n            while ($k < scalar(@lst_removed_sorted) &&\n\
    \                length($str) > length($lst_removed_sorted[$k])) {\n         \
    \       $k++;\n            }\n            while ($k < scalar(@lst_removed_sorted)\
    \ &&\n                length($str) == length($lst_removed_sorted[$k]) &&\n   \
    \             $str lt $lst_removed_sorted[$k]) {\n                $k++;\n    \
    \        }\n            splice @lst_removed_sorted, $k, 0, $str;\n        }\n\
    \    }\n    return \\@lst_removed_sorted;\n}", "    my $str = join('', $lst);\n\
    \    return $str;\n}", "    my $result = [];\n    for my $val (@$lst) {\n    \
    \    if (length($val) % 2 == 0) {\n            push(@$result, $val);\n       \
    \ }\n    }\n    return sort { length($a) <=> length($b) } @$result;\n}", "   \
    \ my @sorted =  sort { length($a) <=> length($b) } @$lst;\n    my @result = ();\n\
    \    my $size = scalar @sorted;\n    for(my $i = 0; $i < $size; $i++) {\n    \
    \    push @result, $sorted[$i] if(length($sorted[$i]) == length($sorted[0]));\n\
    \    }\n    return @result;\n}", "    my @lst = @$lst;\n    my @rst = ();\n  \
    \  foreach(sort {length($a) <=> length($b) or $a cmp $b} @lst) {\n        push(@rst,\
    \ $_) if (length($_) % 2 == 0);\n    }\n    return @rst;\n}", "    my @result\
    \ = ();\n    for my $str (@$lst) {\n        my $len = length($str);\n        if($len\
    \ % 2 == 0) {\n            push @result, $str;\n        }\n    }\n    return sort_list(\\\
    @result);\n}", "    my @list = @$lst;\n    my @copy = @list;\n    @copy = sort\
    \ {\n        length($a) <=> length($b)\n            ||\n        $a cmp $b\n  \
    \  } @copy;\n    my @oddeven;\n    for my $i (0..$#copy) {\n        if ($i%2 ==\
    \ 0) {\n            push @oddeven, $copy[$i];\n        }\n    }\n    return \\\
    @oddeven;\n}", "    return sort { $a cmp $b } grep { !(length($_) % 2) } @$lst;\n\
    }", "    my @sorted_odd_list = sort {(length($a) cmp length($b)) || ($a cmp $b)}\
    \ grep {\n        length($_) % 2 == 0\n    } @$lst;\n    return \\@sorted_odd_list;\n\
    }", "    my @sort_lst = sort(@$lst);\n    my $len = scalar(@sort_lst);\n    my\
    \ @result;\n    my $res = \"\";\n    for (my $i = 0; $i < $len; $i++) {\n    \
    \    $res = $res . $sort_lst[$i];\n    }\n    return $res;\n}", "    #print @$lst,\
    \ \"\\n\";\n    return [] if ($#$lst == -1);\n    my @result = ();\n    my @even_array\
    \ = ();\n    my @odd_array = ();\n    for my $i (0..$#$lst) {\n        if (length($lst->[$i])\
    \ % 2 == 0) {\n            push @even_array, $lst->[$i];\n        } else {\n \
    \           push @odd_array, $lst->[$i];\n        }\n    }\n    for my $i (0..$#even_array)\
    \ {\n        for my $j ($i+1..$#even_array) {\n            if (length($even_array[$i])\
    \ > length($even_array[$j])) {\n                my $temp = $even_array[$i];\n\
    \                $even_array[$i] = $even_array[$j];\n                $even_array[$j]\
    \ = $temp;\n            }\n        }\n    }\n    for my $i (0..$#odd_array) {\n\
    \        for my $j ($i+1..$#odd_array) {\n            if (length($odd_array[$i])\
    \ > length($odd_array[$j])) {\n                my $temp = $odd_array[$i];\n  \
    \              $odd_array[$i] = $odd_array[$j];\n                $odd_array[$j]\
    \ = $temp;\n            }\n        }\n    }\n    return \\@even_array;\n}", " \
    \   my @sorted = sort {\n        if (length($a) == length($b)) {\n           \
    \ return $a cmp $b;\n        } else {\n            return length($a) <=> length($b);\n\
    \        }\n    } @$lst;\n    return \\@sorted;\n}", "    my %h = map { $_ =>\
    \ 1 } @$lst;\n    return [sort keys %h];\n}", "    my @order = sort {length($a)\
    \ <=> length($b) || $a cmp $b} @$lst;\n    my $len = length($order[0]);\n    my\
    \ @result = ();\n    for (my $i = 0; $i < @order; $i++) {\n        if (length($order[$i])\
    \ == $len) {\n            push @result, $order[$i];\n        }\n    }\n    return\
    \ @result;\n}", "    my $sum = 0;\n    foreach my $i (@$lst) {\n        $sum +=\
    \ $i;\n    }\n    return $sum;\n}", "    my @ret = ();\n    my @list = ();\n \
    \   foreach my $str (@$lst) {\n        push @list, {str => $str, len => length($str)};\n\
    \    }\n    @list = map {$_->{str}} (sort {$a->{len} <=> $b->{len} || $a->{str}\
    \ cmp $b->{str}} @list);\n    for(my $i = 0; $i < @list; $i += 2) {\n        push\
    \ @ret, $list[$i];\n    }\n    return @ret;\n}", "    my @sorted = sort {$a cmp\
    \ $b} @$lst;\n    return \\@sorted;\n}", "    my @res = ();\n    my $res = \"\"\
    ;\n    my $len = @$lst;\n    for (my $i = 0; $i < $len; $i++) {\n        my $word\
    \ = $lst->[$i];\n        if (length($word) % 2 == 0) {\n            push(@res,\
    \ $word);\n        }\n    }\n    @res = sort {length($a) <=> length($b) || $a\
    \ cmp $b} @res;\n    return @res;\n}", "    my @arr = @$lst;\n    my @result =\
    \ ();\n    my @left_out = ();\n    foreach my $i (@arr) {\n        if(length($i)\
    \ % 2 == 0) {\n            push(@result, $i);\n        } else {\n            push(@left_out,\
    \ $i);\n        }\n    }\n    my @sort_result = sort {length($a) <=> length($b)\
    \ || $a cmp $b} @result;\n    my @sort_left = sort {length($a) <=> length($b)\
    \ || $a cmp $b} @left_out;\n    print(\"Sorted evens: \", join(\" \", @sort_result),\
    \ \"\\n\");\n    print(\"Sorted odds: \", join(\" \", @sort_left), \"\\n\");\n\
    \    return @sort_result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
