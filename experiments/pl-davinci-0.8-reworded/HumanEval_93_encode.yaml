name: HumanEval_93_encode
language: pl
prompt: "# Write a function that takes a message, and encodes in such a \n# way that\
  \ it swaps case of all letters, replaces all vowels in \n# the message with the\
  \ letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
  \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n#\
  \ >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n   \
  \ my($message) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
  \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
  ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
  ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT\
  \ kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n}\n\ntesthumaneval();"
completions: ["    my $result = \"\";\n    my $vowels = \"AEIOUaeiou\";\n    my @vowels\
    \ = split(//, $vowels);\n    foreach my $char (split(//, $message)) {\n      \
    \  if ($char =~ /[a-zA-Z]/) {\n            my $idx = ord($char);\n           \
    \ if ($idx >= 65 && $idx <= 90) {\n                $result .= chr($idx + 32);\n\
    \            } elsif ($idx >= 97 && $idx <= 122) {\n                $result .=\
    \ chr($idx - 32);\n            }\n        } elsif ($char =~ /[aeiouAEIOU]/) {\n\
    \            my $idx = ord($char);\n            if ($idx == 97) {\n          \
    \      $result .= \"a\";\n            } elsif ($idx == 101) {\n              \
    \  $result .= \"e\";\n            } elsif ($idx == 105) {\n                $result\
    \ .= \"i\";\n            } elsif ($idx == 111) {\n                $result .= \"\
    o\";\n            } elsif ($idx == 117) {\n                $result .= \"u\";\n\
    \            } elsif ($idx == 65) {\n                $result .= \"A\";\n     \
    \       } elsif ($idx == 69) {\n                $result .= \"E\";\n          \
    \  } elsif ($idx == 73) {\n                $result .= \"I\";\n            } elsif\
    \ ($idx == 79) {\n                $result .= \"O\";\n            } elsif ($idx\
    \ == 85) {\n                $result .= \"U\";\n            }\n        } else {\n\
    \            $result .= $char;\n        }\n    }\n    return $result;\n}", " \
    \   my %letter_map = ( \n        a => 'c', \n        e => 'g', \n        i =>\
    \ 'k', \n        o => 'q', \n        u => 'y', \n        A => 'C', \n        E\
    \ => 'G', \n        I => 'K', \n        O => 'Q', \n        U => 'Y', \n    );\n\
    \    my $transformed_message = $message;\n    $transformed_message =~ s/(.*?)/tr/ge;\n\
    \    return $transformed_message;\n}", "    my $len = length($message);\n    my\
    \ @temp = split(//, $message);\n    for(my $i = 0; $i < $len; $i++) {\n      \
    \  my $letter = $temp[$i];\n        if ($letter lt 'a') {\n            $letter\
    \ = chr(ord($letter) + 32);\n        }\n        $letter = chr(ord($letter) + 2);\n\
    \        if ($letter gt 'z') {\n            $letter = chr(ord($letter) - 26);\n\
    \        }\n        if ($letter eq 'a' || $letter eq 'e' || $letter eq 'i' ||\
    \ $letter eq 'o' || $letter eq 'u') {\n            $letter = chr(ord($letter)\
    \ + 1);\n        }\n        if ($letter lt 'a') {\n            $letter = chr(ord($letter)\
    \ - 32);\n        }\n        $temp[$i] = $letter;\n    }\n    my $answer = join(\"\
    \", @temp);\n    return $answer;\n}", "    my @array = split(//, $message);\n\
    \    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my @new_array = ();\n    for\
    \ (my $i = 0; $i < scalar(@array); $i++) {\n        if ($array[$i] eq uc($array[$i]))\
    \ {\n            $array[$i] = lc($array[$i]);\n        } else {\n            $array[$i]\
    \ = uc($array[$i]);\n        }\n        if (grep(/$array[$i]/, @vowels)) {\n \
    \           my $index = 0;\n            while ($vowels[$index] ne $array[$i])\
    \ {\n                $index++;\n            }\n            if ($index + 2 < scalar(@vowels))\
    \ {\n                $array[$i] = $vowels[$index + 2];\n            } else {\n\
    \                $array[$i] = $vowels[$index + 2 - scalar(@vowels)];\n       \
    \     }\n        }\n        push(@new_array, $array[$i]);\n    }\n    return join('',\
    \ @new_array);\n}", "    my %alpha;\n    my $i = 0;\n    my $j = 1;\n    my $k\
    \ = 2;\n    my @letters = split('', 'abcdefghijklmnopqrstuvwxyz');\n    foreach\
    \ (@letters) {\n        $alpha{$_} = $letters[$i++];\n        $alpha{uc($_)} =\
    \ uc($letters[$j++]);\n    }\n    my %vowels;\n    my @vowels = split('', 'aeeiou');\n\
    \    foreach (@vowels) {\n        $vowels{$_} = $vowels[$k++];\n    }\n    my\
    \ @message = split('', $message);\n    my $encoded = '';\n    foreach (@message)\
    \ {\n        if ($vowels{$_}) {\n            $encoded .= $vowels{$_};\n      \
    \  }\n        elsif ($alpha{$_}) {\n            $encoded .= $alpha{$_};\n    \
    \    }\n        else {\n            $encoded .= $_;\n        }\n    }\n    return\
    \ $encoded;\n}", "    return join '', map {\n        if ($_ =~ /[aeiou]/i) {\n\
    \            my $letter = $_;\n            $letter =~ tr/[a-z]/[b-za]/;\n    \
    \        $letter =~ tr/[A-Z]/[B-ZA]/;\n            $letter;\n        } else {\n\
    \            $_;\n        }\n    } map {\n        if ($_ =~ /[a-z]/) {\n     \
    \       my $letter = $_;\n            $letter =~ tr/[a-z]/[A-Z]/;\n          \
    \  $letter;\n        } else {\n            $_;\n        }\n    } split '', $message;\n\
    }", "    return $message;\n}", "    my $result = \"\";\n    foreach my $c (split\
    \ //, $message) {\n        if ($c =~ /[aeiou]/i) {\n            $result .= chr(ord($c)\
    \ + 2);\n        } else {\n            $result .= $c;\n        }\n    }\n    return\
    \ $result;\n}\nprint encode(\"Hello\") . \"\\n\";", "    my @message = split //,$message;\n\
    \    my @return = ();\n    my %vowels = ('a' => 'c', 'e' => 'g', 'i' => 'k', 'o'\
    \ => 'q', 'u' => 'y');\n    foreach my $letter (@message) {\n        if (exists\
    \ $vowels{lc($letter)}) {\n            push @return,$vowels{lc($letter)};\n  \
    \      } elsif ($letter =~ /[a-z]/) {\n            push @return,chr(ord($letter)\
    \ + 2);\n        } else {\n            push @return,$letter;\n        }\n    }\n\
    \    return join \"\",@return;\n}", "    # This function is essentially a series\
    \ of nested for-loops.\n    # We could use recursive calls to break this into\
    \ smaller pieces\n    # but that's a different problem. \n    my $result = \"\"\
    ;\n    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\");\n    my @consonants =\
    \ (\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n   \
    \ # We treat each letter in the message as an element of an array.\n    my @letters\
    \ = split //, $message;\n    for (my $i = 0; $i < scalar @letters; $i++) {\n \
    \       if (uc $letters[$i] eq $letters[$i]) {\n            # If the letter is\
    \ uppercase, we need to make it lowercase.\n            $letters[$i] = lc $letters[$i];\n\
    \        } else {\n            # If the letter is lowercase, we need to make it\
    \ uppercase.\n            $letters[$i] = uc $letters[$i];\n        }\n       \
    \ # Now that we know if the letter is uppercase or lowercase, we \n        # can\
    \ use this information to encrypt it.\n        if ($letters[$i] ~~ @vowels) {\n\
    \            # If the letter is a vowel, we need to replace it with the\n    \
    \        # letter that appears 2 places ahead of it in the alphabet.\n       \
    \     # We can't use $letters[$i] + 2, because the letter 'y'\n            # comes\
    \ after 'u' and before 'z'.\n            for (my $j = 0; $j < scalar @vowels;\
    \ $j++) {\n                if ($letters[$i] eq $vowels[$j]) {\n              \
    \      # We can't use $j + 2 because then we get \"index out of range\".\n   \
    \                 # Instead, we create a variable called $new_index that \n  \
    \                  # holds the value of $j + 2.\n                    my $new_index\
    \ = $j + 2", "    my @new_message;\n    my @message = split(\"\", $message);\n\
    \    my %vowels = (a => 3, e => 5, i => 7, o => 9, u => 11);\n    for my $i (@message)\
    \ {\n        if (uc($i) eq $i) {\n            push(@new_message, lc($i));\n  \
    \      } else {\n            push(@new_message, uc($i));\n        }\n    }\n \
    \   for my $j (@new_message) {\n        if (exists $vowels{$j}) {\n          \
    \  $j = chr(ord($j) + $vowels{$j});\n        }\n    }\n    return join(\"\", @new_message);\n\
    }", "    my($new_message);\n    my($c);\n    my($j);\n    my($new_c);\n    my($vowels)\
    \ = 'aeiouAEIOU';\n    for($j = 0; $j < length($message); $j++) {\n        $c\
    \ = substr($message, $j, 1);\n        if($c =~ /[a-z]/) {\n            $new_c\
    \ = uc($c);\n        } elsif($c =~ /[A-Z]/) {\n            $new_c = lc($c);\n\
    \        } elsif($c =~ /[aeiou]/) {\n            $new_c = substr($vowels, index($vowels,\
    \ $c) + 2, 1);\n        } elsif($c =~ /[AEIOU]/) {\n            $new_c = substr($vowels,\
    \ index($vowels, $c) + 2, 1);\n        } else {\n            $new_c = $c;\n  \
    \      }\n        $new_message .= $new_c;\n    }\n    return $new_message;\n}",
  "    my $r = $message;\n    $r =~ s/([a-zA-Z])/encode_char($1)/eg;\n    return $r;\n\
    }", '    # TODO', "    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n\
    \        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    my\
    \ $output = '';\n    for my $chr (split '', $message) {\n        if(exists $vowels{lc\
    \ $chr}) {\n            $output .= $vowels{lc $chr};\n        } elsif ($chr =~\
    \ /[a-z]/) {\n            $output .= uc $chr;\n        } else {\n            $output\
    \ .= $chr;\n        }\n    }\n    return $output;\n}", "    my $new_message =\
    \ \"\";\n    my $char;\n    my $pos;\n    foreach $char (split(//, $message))\
    \ {\n        $pos = ord($char);\n        if (65 <= $pos && $pos <= 90) { # Uppercase\n\
    \            $pos += 32;\n        } elsif (97 <= $pos && $pos <= 122) { # Lowercase\n\
    \            $pos -= 32;\n        }\n        if ($char =~ /[aeiou]/) {\n     \
    \       $pos = (ord($char) + 2) % (ord('z') + 1);\n            if ($pos < ord('a'))\
    \ {\n                $pos += ord('a');\n            }\n        }\n        $new_message\
    \ .= chr($pos);\n    }\n    return $new_message;\n}", "    my $output = \"\";\n\
    \    for my $ch (split //, $message) {\n        my $pos = get_index($ch);\n  \
    \      if ($pos > -1) {\n            my $index = ($pos + 2) % 5;\n           \
    \ $output .= $VOWELS[$index];\n        } else {\n            if ($ch =~ /[a-z]/)\
    \ {\n                $output .= uc $ch;\n            } elsif ($ch =~ /[A-Z]/)\
    \ {\n                $output .= lc $ch;\n            } else {\n              \
    \  $output .= $ch;\n            }\n        }\n    }\n    return $output;\n}",
  "    my @message = split(//,$message);\n    my @result;\n    my $vowels = 'aeiou';\n\
    \    foreach my $letter (@message) {\n        if ($letter =~ /[A-Z]/) {\n    \
    \        push(@result,lc($letter));\n        }\n        elsif ($letter =~ /[a-z]/)\
    \ {\n            push(@result,uc($letter));\n        }\n        else {\n     \
    \       push(@result,$letter);\n        }\n    }\n    @message = @result;\n  \
    \  @result = ();\n    foreach my $letter (@message) {\n        if ($vowels =~\
    \ /$letter/) {\n            my $new_letter = $letter;\n            $new_letter++;\n\
    \            $new_letter++;\n            if ($new_letter =~ /aa/) {\n        \
    \        $new_letter = 'c';\n            }\n            elsif ($new_letter =~\
    \ /ee/) {\n                $new_letter = 'g';\n            }\n            elsif\
    \ ($new_letter =~ /ii/) {\n                $new_letter = 'k';\n            }\n\
    \            elsif ($new_letter =~ /oo/) {\n                $new_letter = 'q';\n\
    \            }\n            elsif ($new_letter =~ /uu/) {\n                $new_letter\
    \ = 'y';\n            }\n            push(@result,$new_letter);\n        }\n \
    \       else {\n            push(@result,$letter);\n        }\n    }\n    my $result\
    \ = join(\"\",@result);\n    return $result;\n}", "    my($ret_message) = \"\"\
    ;\n    foreach my $index (0..length($message)-1) {\n        my($letter) = substr($message,\
    \ $index, 1);\n        $ret_message .= encode_letter($letter);\n    }\n    return\
    \ $ret_message;\n}", "    my $length = length($message);\n    my $string = \"\"\
    ;\n    for (my $i = 0; $i < $length; $i++) {\n        my $char = substr($message,\
    \ $i, 1);\n        if ($char =~ /[aeiou]/i) {\n            my $code = ord($char)\
    \ + 2;\n            if ($code > ord('z')) {\n                $code -= 26;\n  \
    \          }\n            $char = chr($code);\n        }\n        if ($char =~\
    \ /[a-z]/) {\n            $char = uc($char);\n        }\n        else {\n    \
    \        $char = lc($char);\n        }\n        $string .= $char;\n    }\n   \
    \ return $string;\n}", "    my $encoded_message = '';\n    my $vowels = 'aeiou';\n\
    \    for (my $i = 0; $i < length($message); $i++) {\n        if (lc(substr($message,\
    \ $i, 1)) =~ /[$vowels]/) {\n            my $next_vowel = $vowels[index($vowels,\
    \ lc(substr($message, $i, 1))) + 2];\n            if ($next_vowel) {\n       \
    \         $encoded_message .= $next_vowel;\n            } else {\n           \
    \     $encoded_message .= substr($vowels, 0, 2);\n            }\n        } else\
    \ {\n            if (uc(substr($message, $i, 1)) eq substr($message, $i, 1)) {\n\
    \                $encoded_message .= lc(substr($message, $i, 1));\n          \
    \  } else {\n                $encoded_message .= uc(substr($message, $i, 1));\n\
    \            }\n        }\n    }\n    return $encoded_message;\n}", "    my @vowels\
    \ = (\"a\", \"e\", \"i\", \"o\", \"u\");\n    my $encoded = \"\";\n    foreach\
    \ my $letter (split(//, $message)) {\n        if ($letter =~ /^[a-z]$/i) {\n \
    \           if ($letter =~ /^[a-z]$/) {\n                $letter = uc($letter);\n\
    \            } else {\n                $letter = lc($letter);\n            }\n\
    \            if (grep {$_ eq $letter} @vowels) {\n                my $index =\
    \ 0;\n                my $found = 0;\n                foreach my $vowel (@vowels)\
    \ {\n                    if ($vowel eq $letter) {\n                        $found\
    \ = 1;\n                        last;\n                    }\n               \
    \     $index++;\n                }\n                $index += 2;\n           \
    \     $index %= 5;\n                $letter = $vowels[$index];\n            }\n\
    \        }\n        $encoded .= $letter;\n    }\n    return $encoded;\n}\nprint\
    \ encode(\"ThIs iS A MeSsAgE\") . \"\\n\";", "    my @encoded_chars = ();\n  \
    \  my $alpha = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alpha_punc = $alpha .\
    \ $alpha . \"!?., \";", "    my $encoded_message = \"\";\n    my $i = 0;\n   \
    \ my $char = \"\";\n    my $is_upper = \"\";\n    my $value = 0;\n    my $next_char\
    \ = \"\";\n    my $remaining_characters = \"\";\n    my $vowels = \"aeiou\";\n\
    \    my $remaining_vowels = \"\";\n    my $index = 0;\n    my $next_index = 0;\n\
    \    my $index_to_translate = 0;\n    my $next_char_to_translate = \"\";\n   \
    \ while($i < length($message)) {\n        $char = substr($message, $i, 1);\n \
    \       if($char eq $char =~ tr/[A-Z]/[A-Z]/) {\n            $is_upper = 1;\n\
    \        } else {\n            $is_upper = 0;\n        }\n        $value = ord($char);\n\
    \        $next_char = substr($message, $i + 1, 1);\n        $remaining_characters\
    \ = substr($message, $i + 2);\n        if($is_upper == 1) {\n            $value\
    \ += 32;\n        } else {\n            $value -= 32;\n        }\n        $char\
    \ = chr($value);\n        $index = index($vowels, $char);\n        if($index !=\
    \ -1) {\n            $next_index = index($vowels, $next_char);\n            if($next_index\
    \ != -1) {\n                $remaining_vowels = substr($vowels, $next_index +\
    \ 1);\n                $index_to_translate = $index + 2;\n                if($index_to_translate\
    \ > length($remaining_vowels)) {\n                    $index_to_translate = $index_to_translate\
    \ - length($remaining_vowels);\n                }\n                $next_char_to_translate\
    \ = substr($remaining_vowels, $index_to_translate, 1);\n                $encoded_message\
    \ .= $next_char_to_translate;\n                $i += 2;\n            } else {\n\
    \                $enc", "    my $encoded = \"\";\n    my @message = split //,\
    \ $message;\n    my $vowels = \"AEIOUaeiou\";\n    my $alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    ;\n    foreach my $letter (@message) {\n        if (index($vowels, $letter) !=\
    \ -1) {\n            my $index = index($alphabet, $letter);\n            $encoded\
    \ .= substr($alphabet, $index + 2, 1);\n        } else {\n            $encoded\
    \ .= $letter;\n        }\n    }\n    return $encoded;\n}", "    my $encoded =\
    \ \"\";\n    for my $letter (split('', $message)) {\n        if (ord($letter)\
    \ > 96) {\n            $encoded .= encode_lower($letter);\n        } else {\n\
    \            $encoded .= encode_upper($letter);\n        }\n    }\n    return\
    \ $encoded;\n}", "    my $vowels = 'AEIOU';\n    my $upper_vowels = uc($vowels);\n\
    \    my $regex = '[$vowels$upper_vowels]';\n    $message =~ s/$regex/$vowels/;\n\
    \    $message =~ s/$regex/$upper_vowels/;\n    return $message;\n}", "    $message\
    \ =~ tr/a-zA-Z/b-zaB-ZA/;\n    $message =~ tr/AEIOU/BCDFG/;\n    return $message;\n\
    }", "    #my @result = ();\n    my @message = split '', $message;\n    my $vowels\
    \ = \"aeiou\";\n    my $i = 0;\n    foreach my $m (@message) {\n        if ($vowels\
    \ =~ m/$m/i) {\n            my $vowel_pos = index $vowels, $m;\n            if\
    \ ($vowel_pos == 4) {\n                $vowel_pos = -1;\n            }\n     \
    \       $message[$i] = substr $vowels, $vowel_pos + 2, 1;\n        }\n       \
    \ $i++;\n    }\n    $message = join '', @message;\n    $message = uc $message;\n\
    \    return $message;\n}", "    my $encoded_message = \"\";\n    my @vowels =\
    \ qw(a e i o u);\n    my %vowel_map = (\n        'a' => 'c',\n        'e' => 'g',\n\
    \        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    for\
    \ my $character (split '', $message) {\n        if (lc($character) eq $character)\
    \ {\n            $encoded_message .= uc($character);\n        } else {\n     \
    \       $encoded_message .= lc($character);\n        }\n        if (grep {$_ eq\
    \ lc($character)} @vowels) {\n            $encoded_message .= $vowel_map{lc($character)};\n\
    \        }\n    }\n    return $encoded_message;\n}", "    my $encoded = \"\";\n\
    \    my $vowels = \"aeiou\";\n    my $vowels_two_ahead = \"cglnrst\";\n    foreach\
    \ my $char (split //, $message) {\n        if ($char =~ /[a-z]/i) {\n        \
    \    if ($char =~ /[A-Z]/) {\n                $encoded .= lc($char);\n       \
    \     } else {\n                $encoded .= uc($char);\n            }\n      \
    \  } else {\n            $encoded .= $char;\n        }\n    }\n    my $counter\
    \ = 0;\n    my $length = length($vowels_two_ahead);\n    my $last_char = substr($vowels_two_ahead,\
    \ $length - 1, 1);\n    foreach my $char (split //, $encoded) {\n        if ($char\
    \ =~ /[$vowels]/i) {\n            if ($char eq $last_char) {\n               \
    \ my $first_char = substr($vowels_two_ahead, 0, 1);\n                $encoded\
    \ =~ s/$char/$first_char/;\n            } else {\n                $encoded =~\
    \ s/$char/$vowels_two_ahead/;\n            }\n        }\n    }\n    return $encoded;\n\
    }", "    my $encoded_message = \"\";\n    for my $letter (split //, $message)\
    \ {\n        my $letter_code = ord($letter);\n        if ($letter_code >= 65 &&\
    \ $letter_code <= 90) {\n            $letter_code += 32;\n        } elsif ($letter_code\
    \ >= 97 && $letter_code <= 122) {\n            $letter_code -= 32;\n        }\n\
    \        my $new_code = $letter_code;\n        if ($letter =~ /[aeiou]/) {\n \
    \           $new_code += 2;\n            if ($new_code > 122) {\n            \
    \    $new_code -= 26;\n            }\n        }\n        $encoded_message .= chr($new_code);\n\
    \    }\n    return $encoded_message;\n}", "    # $message = lc($message);\n  \
    \  my @chars = split(\"\", $message);\n    my $encoded = \"\";\n    foreach my\
    \ $char (@chars) {\n        my $ord = ord($char);\n        if($ord >= 65 && $ord\
    \ <= 90) {\n            $encoded .= chr($ord + 32);\n        } elsif($ord >= 97\
    \ && $ord <= 122) {\n            $encoded .= chr($ord - 32);\n        } else {\n\
    \            $encoded .= $char;\n        }\n    }\n    return $encoded;\n}", " \
    \   my $result = \"\";\n    my @vowels = qw(A E I O U);\n    my $vowel_hash =\
    \ {\"A\" => \"C\", \"E\" => \"G\", \"I\" => \"K\", \"O\" => \"S\", \"U\" => \"\
    Y\"};\n    for my $c (split(//, $message)) {\n        my $is_vowel = 0;\n    \
    \    for my $v (@vowels) {\n            if ($c eq $v) {\n                $is_vowel\
    \ = 1;\n                last;\n            }\n        }\n        if ($is_vowel)\
    \ {\n            $result .= $vowel_hash->{$c};\n        }\n        else {\n  \
    \          $result .= $c;\n        }\n    }\n    return $result;\n}", "    my\
    \ $result = \"\";\n    foreach (split //, $message) {\n        my $char = $_;\n\
    \        $char =~ tr/a-z/A-Z/ if ($char =~ /[[:alpha:]]/);\n        $char = get_next_vowel($char)\
    \ if ($char =~ /[[:lower:]]/);\n        $result .= $char;\n    }\n    return $result;\n\
    }", "    my @alphabet = qw(a b c d e f g h i j k l m n o p q r s t u v w x y z);\n\
    \    my @vowels = qw(a e i o u);\n    my @message = split(//, $message);\n   \
    \ my $encoded_message = \"\";\n    foreach my $letter (@message) {\n        if\
    \ (grep {$_ eq $letter} @vowels) {\n            if ($letter eq \"u\") {\n    \
    \            $encoded_message .= \"a\";\n            }\n            else {\n \
    \               my $i = 0;\n                foreach my $l (@alphabet) {\n    \
    \                if ($l eq $letter) {\n                        $encoded_message\
    \ .= $alphabet[$i+2];\n                    }\n                    $i++;\n    \
    \            }\n            }\n        }\n        else {\n            if ($letter\
    \ eq lc($letter)) {\n                $encoded_message .= uc($letter);\n      \
    \      }\n            else {\n                $encoded_message .= lc($letter);\n\
    \            }\n        }\n    }\n    return $encoded_message;\n}", "    my @vowels\
    \ = qw(A E I O U);\n    my %vowels = map { $_ => 0 } @vowels;\n    my @message\
    \ = split '', $message;\n    for my $c (@message) {\n        if (exists $vowels{uc\
    \ $c}) {\n            $c = $vowels[($vowels{uc $c} + 2) % 5];\n        }\n   \
    \     else {\n            $c =~ tr/[a-z]/[A-Z]/ if $c =~ /[a-z]/;\n          \
    \  $c =~ tr/[A-Z]/[a-z]/ if $c =~ /[A-Z]/;\n        }\n    }\n    return join('',\
    \ @message);\n}", "    my @chars = split '', $message;\n    my $newMessage = '';\n\
    \    foreach my $char (@chars) {\n        if (uc($char) eq $char) {\n        \
    \    $newMessage .= lc($char);\n        }\n        elsif (lc($char) eq $char)\
    \ {\n            $newMessage .= uc($char);\n        }\n        if ($char eq 'a')\
    \ {\n            $newMessage .= 'c';\n        }\n        elsif ($char eq 'e')\
    \ {\n            $newMessage .= 'g';\n        }\n        elsif ($char eq 'i')\
    \ {\n            $newMessage .= 'k';\n        }\n        elsif ($char eq 'o')\
    \ {\n            $newMessage .= 'q';\n        }\n        elsif ($char eq 'u')\
    \ {\n            $newMessage .= 'y';\n        }\n        else {\n            $newMessage\
    \ .= $char;\n        }\n    }\n    return $newMessage;\n}\nprint encode(\"This\
    \ is a message\");", "    my($map) = {\n        \"a\" => \"c\",\n        \"e\"\
    \ => \"g\",\n        \"i\" => \"k\",\n        \"o\" => \"q\",\n        \"u\" =>\
    \ \"w\",\n        \"y\" => \"a\",\n    };\n    my($result) = \"\";\n    $message\
    \ = lc($message);\n    for (my($i) = 0; $i < length($message); $i++) {\n     \
    \   my($char) = substr($message, $i, 1);\n        if (exists($map->{$char})) {\n\
    \            $result .= $map->{$char};\n        } else {\n            $result\
    \ .= $char;\n        }\n    }\n    return uc($result);\n}", "    $message =~ tr/a-zA-Z/A-Za-z/;\n\
    \    $message =~ tr/aeiou/cdfgh/;\n    return $message;\n}", "    my @characters\
    \ = split //, $message;\n    my $encoded_message = \"\";\n    foreach my $char\
    \ (@characters) {\n        $encoded_message .= encode_char($char);\n    }\n  \
    \  return $encoded_message;\n}", "    my $newMessage = \"\";\n    my @letters\
    \ = split(//, $message);\n    my $count = 0;\n    foreach my $letter (@letters)\
    \ {\n        if ( lc($letter) eq 'a' ) {\n            $newMessage .= 'c';\n  \
    \      } elsif ( lc($letter) eq 'e' ) {\n            $newMessage .= 'g';\n   \
    \     } elsif ( lc($letter) eq 'i' ) {\n            $newMessage .= 'k';\n    \
    \    } elsif ( lc($letter) eq 'o' ) {\n            $newMessage .= 'q';\n     \
    \   } elsif ( lc($letter) eq 'u' ) {\n            $newMessage .= 's';\n      \
    \  } elsif ( lc($letter) eq 'y' ) {\n            $newMessage .= 'a';\n       \
    \ } else {\n            $newMessage .= $letter;\n        }\n    }\n    return\
    \ $newMessage;\n}", "    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my $new_message\
    \ = \"\";\n    my @message_array = split(//, $message);\n    for (my $i = 0; $i\
    \ < scalar(@message_array); $i++) {\n        my $letter = $message_array[$i];\n\
    \        my $is_vowel = 0;\n        for (my $j = 0; $j < scalar(@vowels); $j++)\
    \ {\n            if ($letter eq $vowels[$j]) {\n                $is_vowel = 1;\n\
    \                if ($letter eq 'u') {\n                    $new_message .= 'a';\n\
    \                }\n                else {\n                    $new_message .=\
    \ $vowels[$j + 2];\n                }\n            }\n        }\n        if ($is_vowel\
    \ == 0) {\n            $new_message .= $letter;\n        }\n    }\n    return\
    \ $new_message;\n}", "    my @encoded = ();\n    my $encoded_message = \"\";\n\
    \    my $encoded_character = \"\";\n    my $character = \"\";\n    my $i = 0;\n\
    \    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_upper =\
    \ \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    my $alphabet_length = 26;\n    my $char_index\
    \ = 0;\n    my $char_index_upper = 0;\n    my $char_index_lower = 0;\n    my $letter_index\
    \ = 0;\n    my $upper_case = 0;\n    my $lower_case = 0;\n    my $vowel = 0;\n\
    \    my $is_space = 0;\n    my $index = 0;\n    my $index_2 = 0;\n    my $length\
    \ = length($message);\n    while ($i < $length) {\n        $character = substr($message,\
    \ $i, 1);\n        $char_index = index($alphabet, $character);\n        $char_index_upper\
    \ = index($alphabet_upper, $character);\n        if (($char_index == -1) && ($char_index_upper\
    \ == -1)) {\n            if ($character eq \" \") {\n                $is_space\
    \ = 1;\n            }\n        } else {\n            if ($char_index_upper !=\
    \ -1) {\n                $upper_case = 1;\n            } else {\n            \
    \    $lower_case = 1;\n            }\n            if (($character eq \"a\") ||\
    \ ($character eq \"e\") || ($character eq \"i\") || ($character eq \"o\") || ($character\
    \ eq \"u\")) {\n                $vowel = 1;\n            }\n        }\n      \
    \  if ($is_space) {\n            $encoded_character = \" \";\n        } else {\n\
    \            if ($vowel) {\n                if ($upper_case) {\n             \
    \       $letter_index = index($alphabet_upper, $character);\n                \
    \    $index = ($letter_index + 2) % $alphabet_length;\n                    $index_2\
    \ = ($letter_index +", "    $message =~ tr/a-zA-Z/A-Za-z/;\n    $message =~ tr/aeiou/ecigu/;\n\
    \    return $message;\n}", "    my $code = \"\";\n    for (my $i = 0; $i < length($message);\
    \ $i++) {\n        my $letter = substr($message, $i, 1);\n        $code .= encode_letter($letter);\n\
    \    }\n    return $code;\n}", "    my %vowels = map { $_ => 1 } qw(a e i o u);\n\
    \    my @alphabet = ('a'..'z');\n    my %dict = map { $alphabet[$_] => $alphabet[($_\
    \ + 2) % 26] } (0..25);\n    my @new_message = ();\n    foreach my $character\
    \ (split('', $message)) {\n        my $upper = uc($character) eq $character;\n\
    \        my $new_character = lc($character);\n        if ($upper) {\n        \
    \    $new_character = uc($new_character);\n        }\n        if ($vowels{$new_character})\
    \ {\n            $new_character = $dict{$new_character};\n        }\n        push(@new_message,\
    \ $new_character);\n    }\n    return join('', @new_message);\n}", "    my @character\
    \ = split('', $message);\n    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\"\
    );\n    foreach my $character (@character) {\n        if ($character =~ /[A-Z]/)\
    \ {\n            $character = lc($character);\n        } elsif ($character =~\
    \ /[a-z]/) {\n            $character = uc($character);\n        }\n        foreach\
    \ my $vowel (@vowels) {\n            if ($character eq $vowel) {\n           \
    \     $character = chr(ord($character) + 2);\n            }\n        }\n    }\n\
    \    return join('', @character);\n}", "    my %alphabet = (\n        'a' => 'c',\n\
    \        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' =>\
    \ 'y',\n        'y' => 'a',\n        'A' => 'C',\n        'E' => 'G',\n      \
    \  'I' => 'K',\n        'O' => 'Q',\n        'U' => 'Y',\n        'Y' => 'A',\n\
    \    );\n    return $message =~ s/([aeiouyAEIOUY])/$alphabet{$1}/gr;\n}", "  \
    \  my $encoded = '';\n    my @letters = split //, $message;\n    for my $letter\
    \ (@letters) {\n        if ($letter =~ /[A-Z]/) {\n            $encoded .= lc($letter);\n\
    \        } elsif ($letter =~ /[a-z]/) {\n            my $ord = ord($letter);\n\
    \            if ($letter =~ /[aeiou]/) {\n                $ord = ($ord - 2) %\
    \ 26;\n            }\n            $encoded .= chr($ord);\n        } else {\n \
    \           $encoded .= $letter;\n        }\n    }\n    return $encoded;\n}",
  "    my $result = '';\n    my @characters = split(//, $message);\n    foreach my\
    \ $c (@characters) {\n        if($c =~ /[A-Z]/) {\n            $result .= lc($c);\n\
    \        }\n        elsif($c =~ /[a-z]/) {\n            $result .= uc($c);\n \
    \       }\n        else {\n            $result .= $c;\n        }\n    }\n    my\
    \ @vowels = ( 'a', 'e', 'i', 'o', 'u' );\n    foreach my $v (@vowels) {\n    \
    \    my $i = ( ord($v) - ord('a') + 2 ) % 26;\n        my $r = chr( ord('a') +\
    \ $i );\n        $result =~ s/$v/$r/g;\n    }\n    return $result;\n}", "    $message\
    \ =~ tr/a-zA-Z/A-Za-z/;\n    $message =~ tr/a-z/c-za-b/;\n    return $message;\n\
    }", "    my $result = \"\";\n    # Loop through each character of the message\
    \ and encode it\n    for (my $i = 0; $i < length($message); $i++) {\n        my\
    \ $char = substr($message, $i, 1);\n        my $encode_char = \"\";\n        #\
    \ Is it a letter?\n        if ($char =~ /^[a-zA-Z]$/) {\n            # Uppercase?\n\
    \            if ($char =~ /^[A-Z]$/) {\n                $encode_char = chr(ord($char)\
    \ + 32);\n            }\n            # Lowercase\n            else {\n       \
    \         $encode_char = chr(ord($char) - 32);\n            }\n            # Is\
    \ it a vowel?\n            if ($encode_char =~ /^[aeiou]$/) {\n              \
    \  $encode_char = \"aeiou\" =~ /$encode_char/g;\n                $encode_char\
    \ = substr(\"cdfghjklmnpqrstvwxyz\", $encode_char + 2, 1);\n            }\n  \
    \      }\n        # Not a letter, just append the character\n        else {\n\
    \            $encode_char = $char;\n        }\n        $result .= $encode_char;\n\
    \    }\n    return $result;\n}", "    my @message_chars = split(//, $message);\n\
    \    my @encoded_chars = map {$vowels{$_} ? $vowels{$_} : $_} @message_chars;\n\
    \    my $encoded_string = join(\"\", @encoded_chars);\n    $encoded_string = uc($encoded_string);\n\
    \    return $encoded_string;\n}", "    return lc($message) =~ tr/[a-z]/[A-Z]/r\
    \ =~ tr/aeiou/cdfgjkmnpqrstvwxy/r;\n}", "    my $new_message = '';\n    my $i\
    \ = 0;\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    while($i < length($message))\
    \ {\n        my $char = substr($message, $i, 1);\n        if($char =~ /[a-z]/i)\
    \ {\n            if($char =~ /[a-z]/) {\n                $char = uc($char);\n\
    \            }\n            else {\n                $char = lc($char);\n     \
    \       }\n            if(grep $_ eq lc($char), @vowels) {\n                my\
    \ $n = lc($char);\n                my $vowel_index = 0;\n                my $j\
    \ = 0;\n                while($j < @vowels) {\n                    if($vowels[$j]\
    \ eq $n) {\n                        $vowel_index = $j;\n                     \
    \   last;\n                    }\n                    $j++;\n                }\n\
    \                if($vowel_index == 4) {\n                    $char = 'a';\n \
    \               }\n                else {\n                    $char = $vowels[$vowel_index\
    \ + 2];\n                }\n            }\n        }\n        $new_message .=\
    \ $char;\n        $i++;\n    }\n    return $new_message;\n}", "    my $encoded\
    \ = \"\";\n    my $len = length($message);\n    my @chars = split(//, $message);\n\
    \    my %alphabet = (a => 'c', e => 'g', i => 'k', o => 'q', u => 's', A => 'C',\
    \ E => 'G', I => 'K', O => 'Q', U => 'S');\n    my $enc;\n    for(my $i = 0; $i\
    \ < $len; $i++) {\n        if(exists $alphabet{$chars[$i]}) {\n            $enc\
    \ = $alphabet{$chars[$i]};\n        } else {\n            $enc = $chars[$i];\n\
    \        }\n        $encoded .= $enc;\n    }\n    return $encoded;\n}\nprint encode(\"\
    This is a message\");\nprint \"\\n\";\nprint encode(\"That's all folks\");\nprint\
    \ \"\\n\";\nprint encode(\"I like to write in Perl\");\nprint \"\\n\";", "   \
    \ my $encode_message = \"\";\n    my $message_length = length($message);\n   \
    \ for(my $i = 0; $i < $message_length; $i++) {\n        my $char = substr($message,\
    \ $i, 1);\n        my $upper_char = uc($char);\n        if($upper_char =~ /[AEIOU]/)\
    \ {\n            my $ascii_num = ord($upper_char);\n            $ascii_num +=\
    \ 2;\n            $char = chr($ascii_num);\n        } elsif($upper_char =~ /[YZ]/)\
    \ {\n            my $ascii_num = ord($upper_char);\n            $ascii_num -=\
    \ 24;\n            $char = chr($ascii_num);\n        } else {\n            $char\
    \ = lc($char);\n        }\n        $encode_message .= $char;\n    }\n    return\
    \ $encode_message;\n}", "    my $encoded = \"\";\n    foreach my $char (split\
    \ \"\", $message) {\n        if ($char =~ /[aeiou]/i) {\n            $encoded\
    \ .= letter_two_ahead($char);\n        } else {\n            $encoded .= $char;\n\
    \        }\n    }\n    return $encoded;\n}", "    my $cipher = '';\n    my @letters\
    \ = split //, $message;\n    foreach my $letter (@letters) {\n        my $char\
    \ = ord($letter);\n        if ( $char >= 65 && $char <= 90 ) {\n            $char\
    \ += 32;\n        } elsif ( $char >= 97 && $char <= 122 ) {\n            $char\
    \ -= 32;\n        }\n        if ( $char == 97 ) {\n            $char = 99;\n \
    \       } elsif ( $char == 101 ) {\n            $char = 103;\n        } elsif\
    \ ( $char == 105 ) {\n            $char = 107;\n        } elsif ( $char == 111\
    \ ) {\n            $char = 113;\n        } elsif ( $char == 117 ) {\n        \
    \    $char = 119;\n        }\n        $cipher .= chr($char);\n    }\n    return\
    \ $cipher;\n}", "    my $str = '';\n    my @letters = split //, $message;\n  \
    \  foreach my $letter (@letters) {\n        $str .= $letter =~ /[a-z]/i ? chr(ord($letter)\
    \ + 2) : $letter;\n    }\n    return $str;\n}", "    my $encoded = \"\";\n   \
    \ for my $c (split //, $message) {\n        my $next = $c;\n        if ($c =~\
    \ /[aeiou]/i) {\n            $next = chr(ord($c) + 2);\n        }\n        if\
    \ ($c =~ /[a-z]/) {\n            $next = uc($next);\n        }\n        $encoded\
    \ .= $next;\n    }\n    return $encoded;\n}", "    my %vowels = (\n        a =>\
    \ \"c\",\n        e => \"g\",\n        i => \"k\",\n        o => \"q\",\n    \
    \    u => \"y\",\n    );\n    my $result = \"\";\n    foreach my $letter (split\
    \ //, $message) {\n        if (exists $vowels{lc $letter}) {\n            $result\
    \ .= $vowels{lc $letter};\n        } elsif ($letter =~ /[a-z]/) {\n          \
    \  $result .= uc $letter;\n        } else {\n            $result .= $letter;\n\
    \        }\n    }\n    return $result;\n}", "    my @chars = split //, $message;\n\
    \    my $result = \"\";\n    foreach my $char (@chars) {\n        if ($char =~\
    \ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n                $char =~ tr/a-z/A-Z/;\n\
    \            }\n            $char =~ tr/A-Z/C-ZA-B/;\n            $result .= $char;\n\
    \        } else {\n            $result .= $char;\n        }\n    }\n    return\
    \ $result;\n}", "    my %alphabet = (\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\"\
    \ => 4, \"e\" => 5, \"f\" => 6, \"g\" => 7, \"h\" => 8, \"i\" => 9, \"j\" => 10,\
    \ \"k\" => 11, \"l\" => 12, \"m\" => 13, \"n\" => 14, \"o\" => 15, \"p\" => 16,\
    \ \"q\" => 17, \"r\" => 18, \"s\" => 19, \"t\" => 20, \"u\" => 21, \"v\" => 22,\
    \ \"w\" => 23, \"x\" => 24, \"y\" => 25, \"z\" => 26);\n    my %encode;\n    foreach\
    \ my $k (keys %alphabet) {\n        my $value = $alphabet{$k};\n        if($value\
    \ + 2 > 26) {\n            $encode{$k} = \"a\";\n        } else {\n          \
    \  $encode{$k} = chr($alphabet{$k} + 2 + 96);\n        }\n    }\n    my $encoded\
    \ = \"\";\n    foreach my $char (split //, $message) {\n        if($char =~ /[a-z]/i)\
    \ {\n            if($char =~ /[a-z]/) {\n                $encoded .= uc($char);\n\
    \            } else {\n                $encoded .= lc($char);\n            }\n\
    \        } else {\n            $encoded .= $char;\n        }\n    }\n    foreach\
    \ my $vowel (keys %encode) {\n        $encoded =~ s/$vowel/$encode{$vowel}/g;\n\
    \    }\n    return $encoded;\n}", "    my @message = split(\"\", $message);\n\
    \    my $encoded_message = \"\";\n    foreach my $letter (@message) {\n      \
    \  if ($letter =~ /^[a-zA-Z]$/) {\n            if ($letter =~ /^[a-z]$/) {\n \
    \               $letter = chr(ord($letter) - ord('a') + ord('A'));\n         \
    \   } else {\n                $letter = chr(ord($letter) - ord('A') + ord('a'));\n\
    \            }\n            if ($letter =~ /^[aeiou]$/) {\n                $letter\
    \ = chr(ord($letter) + 2);\n            }\n        }\n        $encoded_message\
    \ .= $letter;\n    }\n    return $encoded_message;\n}", "    my($encoded);\n \
    \   my(@message) = split('', $message);\n    my(@letters) = ('a'..'z');\n    my(@uppercase_letters)\
    \ = ('A'..'Z');\n    my(@vowels) = ('a', 'e', 'i', 'o', 'u');\n    my(@upper_vowels)\
    \ = ('A', 'E', 'I', 'O', 'U');\n    my($letter);\n    my($vowel);\n    foreach\
    \ $letter (@message) {\n        my($new_letter);\n        my($is_upper) = 0;\n\
    \        foreach $vowel (@vowels) {\n            if (lc($letter) eq $vowel) {\n\
    \                $is_upper = 1 if ($letter eq uc($letter));\n                $new_letter\
    \ = $letters[(index(join('', @letters), $vowel) + 2) % scalar(@letters)];\n  \
    \              last;\n            }\n        }\n        if ($new_letter) {\n \
    \           $encoded .= $is_upper ? uc($new_letter) : $new_letter;\n        }\
    \ else {\n            $encoded .= $letter;\n        }\n    }\n    return $encoded;\n\
    }", "    my $new_message = \"\";\n    my $letter;\n    my $num;\n    my $new_num;\n\
    \    my $new_letter;\n    my $i;\n    for($i = 0; $i < length($message); $i++){\n\
    \        $letter = substr($message, $i, 1);\n        $num = ord($letter);\n  \
    \      if($num >= 65 && $num <= 90){\n            $new_num = $num + 2;\n     \
    \       if($new_num > 90){\n                $new_num = $new_num - 26;\n      \
    \      }\n            $new_letter = chr($new_num);\n        }\n        elsif($num\
    \ >= 97 && $num <= 122){\n            $new_num = $num + 2;\n            if($new_num\
    \ > 122){\n                $new_num = $new_num - 26;\n            }\n        \
    \    $new_letter = chr($new_num);\n        }\n        else{\n            $new_letter\
    \ = $letter;\n        }\n        $new_message = $new_message . $new_letter;\n\
    \    }\n    return $new_message;\n}", "    my $newmessage = \"\";\n    my $isupper\
    \ = 0;\n    my $newchar = \"\";\n    foreach my $char (split(\"\", $message))\
    \ {\n        if ($char =~ /[AEIOU]/i) {\n            $newchar = NEXT2(\"$char\"\
    );\n        } elsif ($char =~ /[a-z]/i) {\n            $newchar = lc $char;\n\
    \        }\n        if ($isupper) {\n            $newchar = uc $newchar;\n   \
    \         $isupper = 0;\n        }\n        if ($char =~ /[A-Z]/) {\n        \
    \    $isupper = 1;\n        }\n        $newmessage .= $newchar;\n    }\n    return\
    \ $newmessage;\n}", "    my $coded;\n    my @alphabet = ('a'..'z', 'a'..'z');\n\
    \    for my $char (split('',$message)) {\n        my $letter = lc($char);\n  \
    \      $coded .= $char =~ /[A-Z]/ ? uc($alphabet[index($char, $letter) + 2]) :\
    \ $alphabet[index($char, $letter) + 2];\n    }\n    return $coded;\n}", "    my\
    \ @message = split('', $message);\n    for (my $i = 0; $i < scalar(@message);\
    \ $i++) {\n        if ($message[$i] =~ /[a-z]/) {\n            $message[$i] =\
    \ chr(ord($message[$i]) - 32);\n        }\n        if ($message[$i] =~ /[A-Z]/)\
    \ {\n            $message[$i] = chr(ord($message[$i]) + 32);\n        }\n    \
    \    if ($message[$i] =~ /[aeiou]/) {\n            $message[$i] = chr(ord($message[$i])\
    \ + 2);\n        }\n    }\n    return join('', @message);\n}", "    my $result\
    \ = \"\";\n    my $i;\n    my $current_char;\n    my $index;\n    my $val;\n \
    \   for ($i = 0; $i < length($message); $i++) {\n        $current_char = substr($message,\
    \ $i, 1);\n        $val = ord($current_char);\n        if (ord($current_char)\
    \ >= 65 && ord($current_char) <= 90) {\n            $result .= chr($val + 32);\n\
    \        } elsif (ord($current_char) >= 97 && ord($current_char) <= 122) {\n \
    \           $result .= chr($val - 32);\n        } else {\n            $result\
    \ .= $current_char;\n        }\n    }\n    for ($i = 0; $i < length($result);\
    \ $i++) {\n        $current_char = substr($result, $i, 1);\n        $index = index(\"\
    aeiou\", $current_char);\n        if ($index != -1) {\n            $result = substr($result,\
    \ 0, $i) . substr(\"cegikmoqsuwy\", $index, 1) . substr($result, $i + 1);\n  \
    \      }\n    }\n    return $result;\n}", "    my $encode = uc $message;\n   \
    \ $encode =~ s/[AEIOU]/chr(ord($&)+2)/eg;\n    return $encode;\n}", "    my($length)\
    \ = length($message);\n    my($result) = \"\";\n    my($vowels) = \"aeiouAEIOU\"\
    ;\n    my($alphabet) = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    my($i);\n    for($i = 0; $i < $length; $i++) {\n        my($char) = substr($message,\
    \ $i, 1);\n        my($pos) = index($alphabet, $char);\n        if($pos == -1)\
    \ {\n            $result .= $char;\n        }\n        elsif($pos < 51) {\n  \
    \          $result .= substr($alphabet, $pos + 2, 1);\n        }\n        else\
    \ {\n            $result .= substr($alphabet, $pos - 50, 1);\n        }\n    }\n\
    \    return $result;\n}", "    my $result = \"\";\n    my @vowels = qw/a e i o\
    \ u/;\n    my @alphabet = qw/a b c d e f g h i j k l m n o p q r s t u v w x y\
    \ z/;\n    my %vowel_hash = map {$_ => 1} @vowels;\n    for my $letter (split(\"\
    \", $message)) {\n        if ($letter =~ /[a-zA-Z]/) {\n            my $result_letter\
    \ = \"\";\n            if ($letter =~ /[a-z]/) {\n                if ($vowel_hash{$letter})\
    \ {\n                    $result_letter = shift(@alphabet);\n                \
    \    $result_letter = shift(@alphabet);\n                }\n                $result_letter\
    \ = uc $letter if not $result_letter;\n                $result .= $result_letter;\n\
    \            }\n            else {\n                if ($vowel_hash{lc $letter})\
    \ {\n                    $result_letter = shift(@alphabet);\n                \
    \    $result_letter = shift(@alphabet);\n                }\n                $result_letter\
    \ = lc $letter if not $result_letter;\n                $result .= $result_letter;\n\
    \            }\n        }\n    }\n    return $result;\n}", "    $message =~ tr/a-zA-Z/A-Za-z/;\n\
    \    my $letters = {\n        a => \"c\",\n        e => \"g\",\n        i => \"\
    k\",\n        o => \"q\",\n        u => \"s\",\n        \" \" => \" \",\n    };\n\
    \    $message =~ s/([aeiou])/$letters->{$1}/g;\n    return $message;\n}", "  \
    \  $message =~ tr/a-zA-Z/A-Za-z/;\n    $message =~ tr/AEIOUaeiou/CGFKPSCGFKPS/;\n\
    \    return $message;\n}", "    my $ret = \"\";\n    my $ch = \"\";\n    my $ord\
    \ = 0;\n    my $i = 0;\n    my $shifted = \"\";\n    my %encode_table = (\n  \
    \      'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n\
    \        'u' => 'w',\n        'A' => 'C',\n        'E' => 'G',\n        'I' =>\
    \ 'K',\n        'O' => 'Q',\n        'U' => 'W',\n    );\n    my @ret_arr = ();\n\
    \    @ret_arr = split(//, $message);\n    for ($i = 0; $i < scalar(@ret_arr);\
    \ $i++) {\n        $ch = $ret_arr[$i];\n        $ord = ord($ch);\n        if ($ord\
    \ >= ord('a') && $ord <= ord('z')) {\n            $ord = ($ord - ord('a') + 2)\
    \ % 26 + ord('a');\n            $ret_arr[$i] = chr($ord);\n        } elsif ($ord\
    \ >= ord('A') && $ord <= ord('Z')) {\n            $ord = ($ord - ord('A') + 2)\
    \ % 26 + ord('A');\n            $ret_arr[$i] = chr($ord);\n        }\n       \
    \ if (exists($encode_table{$ret_arr[$i]})) {\n            $ret_arr[$i] = $encode_table{$ret_arr[$i]};\n\
    \        }\n    }\n    $ret = join(\"\", @ret_arr);\n    return $ret;\n}\nprint\
    \ encode(\"test\") . \"\\n\";\nprint encode(\"This is a message\") . \"\\n\";\n\
    print encode(\"Hello, world!\") . \"\\n\";\nprint encode(\"Goodbye, World!\")\
    \ . \"\\n\";\nprint encode(\"I like the way you work it\") . \"\\n\";\nprint encode(\"\
    No diggity\") . \"\\n\";\nprint encode(\"H.O.V.A.\") . \"\\n\";", "    $message\
    \ =~ tr/a-zA-Z/A-Za-z/;\n    $message =~ tr/aeiou/cdfgh/;\n    return $message;\n\
    }", "    my $result = \"\";\n    my $vowels = \"aeiou\";\n    my $lookup = \"\
    cdefghijklnopqrstuvwxyzab\";\n    for my $letter (split //, $message) {\n    \
    \    my $vowel_index = index($vowels, $letter);\n        if ($vowel_index == -1)\
    \ {\n            $result .= $letter;\n        } else {\n            $result .=\
    \ substr($lookup, $vowel_index, 1);\n        }\n    }\n    return $result;\n}",
  "    $message =~ tr/a-zA-Z/G-ZA-Fg-za-f/;\n    $message =~ tr/AEOIU/CGTKV/;\n  \
    \  return $message;\n}", "    # This problem requires the use of the ord(), chr(),\
    \ split(), map() and join() functions.\n    #\n    # Split the string into a list\
    \ of characters, map the function over the list, then join \n    # the list back\
    \ into a string\n    #\n    # To be specific, use the split function to break\
    \ the string into a list of characters. \n    # So split(\"message\") = (\"m\"\
    , \"e\", \"s\", \"s\", \"a\", \"g\", \"e\"). \n    #\n    # Next, use the map\
    \ function to apply the function to each element of the list. \n    # The map\
    \ function returns a list, so the result of map(function, (\"m\", \"e\", \"s\"\
    , \"s\", \"a\", \"g\", \"e\")) \n    # is (\"r\", \"g\", \"u\", \"u\", \"c\",\
    \ \"i\", \"i\").\n    #\n    # Finally, join the list back into a string. That\
    \ is, join((\"r\", \"g\", \"u\", \"u\", \"c\", \"i\", \"i\")) \n    # is \"rguucii\"\
    .\n    #\n    # You may find the following functions helpful, but you don't have\
    \ to use them:\n    #\n    #  sub islower {\n    #    my($c) = @_;\n    #    return\
    \ ord($c) >= ord('a') && ord($c) <= ord('z');\n    #  }\n    #\n    #  sub isupper\
    \ {\n    #    my($c) = @_;\n    #    return ord($c) >= ord('A') && ord($c) <=\
    \ ord('Z');\n    #  }\n    #\n    #  sub isalpha {\n    #    my($c) = @_;\n  \
    \  #    return islower($c) || isupper($c);\n    #  }\n    #\n    #  sub isvowel\
    \ {\n    #    my($c) = @_;\n    #    $c = lc($c);\n    #    return $c eq 'a' ||\
    \ $c eq 'e' || $c eq 'i' || $c eq 'o' || $c eq 'u';\n    #  }\n    #\n", "   \
    \ my($encoded);\n    my @message = split('', $message);\n    foreach my $letter\
    \ (@message) {\n        if (exists $vowels{$letter}) {\n            $encoded .=\
    \ substr($vowels{$letter}, 0, 1);\n        } elsif (exists $consonants{$letter})\
    \ {\n            $encoded .= substr($consonants{$letter}, 0, 1);\n        } else\
    \ {\n            $encoded .= $letter;\n        }\n    }\n    return $encoded;\n\
    }", "    return $message;\n}", "    my $result = '';\n    my $letter;\n    my\
    \ $vowels = 'aeiou';\n    my $consonants = 'bcdfghjklmnpqrstvwxyz';\n    foreach\
    \ my $letter (split(//, $message)) {\n        if ($vowels =~ /$letter/i) {\n \
    \           $result .= substr($vowels, ((index($vowels, $letter) + 2) % length($vowels)),\
    \ 1);\n        } elsif ($consonants =~ /$letter/i) {\n            $result .= substr($consonants,\
    \ ((index($consonants, $letter) + 2) % length($consonants)), 1);\n        }\n\
    \    }\n    return $result;\n}", "    my @letters = split //, $message;\n    my\
    \ @new_letters;\n    my %vowels = (a => \"c\", e => \"g\", i => \"k\", o => \"\
    q\", u => \"s\");\n    for my $letter (@letters) {\n        if ($letter =~ /[aeiou]/i)\
    \ {\n            push @new_letters, $vowels{lc $letter};\n        }\n        elsif\
    \ ($letter =~ /[A-Z]/) {\n            push @new_letters, lc $letter;\n       \
    \ }\n        elsif ($letter =~ /[a-z]/) {\n            push @new_letters, uc $letter;\n\
    \        }\n        else {\n            push @new_letters, $letter;\n        }\n\
    \    }\n    return join \"\", @new_letters;\n}", "    my @result = ();\n    #\
    \ Logic here.\n    return @result;\n}", "    $message =~ tr/a-zA-Z/b-zaB-ZA/;\n\
    \    $message =~ tr/a-zA-Z/c-zaC-ZA/;\n    $message =~ tr/aeiou/eioua/;\n    return\
    \ $message;\n}", "    my %vowels = (\n        a => 'c',\n        e => 'g',\n \
    \       i => 'k',\n        o => 'q',\n        u => 'y',\n    );\n    my @message\
    \ = split(//, $message);\n    my @output;\n    foreach my $i (@message) {\n  \
    \      if ($i =~ /[a|e|i|o|u]/i) {\n            my $j = lc($i);\n            if\
    \ (exists $vowels{$j}) {\n                $i = $vowels{$j};\n            }\n \
    \       }\n        $i = uc($i) if $i =~ /[a-z]/;\n        $i = lc($i) if $i =~\
    \ /[A-Z]/;\n        push @output, $i;\n    }\n    return join('', @output);\n}",
  "    my @chars = split //, $message;\n    my @encoded_chars;\n    my %vowels = (\n\
    \        \"a\" => \"c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\",\n \
    \       \"o\" => \"q\",\n        \"u\" => \"y\",\n    );\n    for my $char (@chars)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $char = uc $char;\n        }\
    \ elsif ($char =~ /[A-Z]/) {\n            $char = lc $char;\n        }\n     \
    \   if (exists $vowels{$char}) {\n            $char = $vowels{$char};\n      \
    \  }\n        push @encoded_chars, $char;\n    }\n    return join \"\", @encoded_chars;\n\
    }", "    my $ret;\n    for my $c (split //, $message) {\n        my $x = ord($c);\n\
    \        if ($x >= ord('a') && $x <= ord('z')) {\n            $x -= 32;\n    \
    \    } elsif ($x >= ord('A') && $x <= ord('Z')) {\n            $x += 32;\n   \
    \     }\n        if ($x == ord('a') || $x == ord('e') || $x == ord('i') || $x\
    \ == ord('o') || $x == ord('u')) {\n            $x += 2;\n        } elsif ($x\
    \ == ord('A') || $x == ord('E') || $x == ord('I') || $x == ord('O') || $x == ord('U'))\
    \ {\n            $x += 2;\n        }\n        $ret .= chr($x);\n    }\n    return\
    \ $ret;\n}", "    my @encode_string;\n    my @message_array = split //, $message;\n\
    \    for my $i (@message_array) {\n        my $new_ascii_value = ord($i);\n  \
    \      if ($new_ascii_value < 97) {\n            $new_ascii_value += 32;\n   \
    \     }\n        if (vowel($i)) {\n            if ($new_ascii_value == 122) {\n\
    \                $new_ascii_value = 97;\n            }\n            elsif ($new_ascii_value\
    \ == 118) {\n                $new_ascii_value = 97;\n            }\n         \
    \   else {\n                $new_ascii_value += 3;\n            }\n        }\n\
    \        push @encode_string, chr($new_ascii_value);\n    }\n    my $encoded_string\
    \ = join('', @encode_string);\n    return $encoded_string;\n}", "    my @out =\
    \ map {\n        my $c = $_;\n        if ($c =~ /[aeiou]/i) {\n            $c\
    \ = chr(ord($c) + 2);\n        }\n        if ($c =~ /[a-z]/i) {\n            $c\
    \ = uc($c);\n        }\n        $c;\n    } split(//, $message);\n    return join('',\
    \ @out);\n}", "    my $encoded = \"\";\n    my $letter = \"\";\n    my $vowel\
    \ = 0;\n    my $offset = -1;\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n  \
    \  # print \"Msg[$message]\\n\";\n    for (my $x = 0; $x < length($message); $x++)\
    \ {\n        $letter = substr($message, $x, 1);\n        $vowel = 0;\n       \
    \ for (my $y = 0; $y < 5; $y++) {\n            if ($letter eq $vowels[$y]) {\n\
    \                $vowel = 1;\n                $offset = (1 + $y) % 5;\n      \
    \          # print \"msg[$message] offset[$offset]\\n\";\n                $letter\
    \ = $vowels[$offset];\n                # print \"m[$message] l[$letter] v[$vowel]\
    \ o[$offset]\\n\";\n                last;\n            }\n        }\n        if\
    \ (uc($letter) eq $letter) {\n            $letter = lc($letter);\n        }\n\
    \        else {\n            $letter = uc($letter);\n        }\n        $encoded\
    \ .= $letter;\n    }\n    return $encoded;\n}", "    my $first = $message;\n \
    \   $first =~ s/[a-zA-Z]/\\U$&/g;\n    my $vowels = \"aAeEiIoOuU\";\n    my $second\
    \ = $first;\n    $second =~ s/([$vowels])[$vowels]{2}/$1/g;\n    return $second;\n\
    }", '    $message =~ tr/A-Za-z/N-ZA-Mn-za-m/;', "    # Your code here\n    my\
    \ $n = length($message);\n    my $encodeMessage = '';\n    for(my $i = 0; $i <\
    \ $n; $i++) {\n        if($message eq '') {\n            return $encodeMessage;\n\
    \        }\n        my $ch = substr($message, 0, 1);\n        $message = substr($message,\
    \ 1);\n        if($ch eq uc($ch)) {\n            $ch = lc($ch);\n        } else\
    \ {\n            $ch = uc($ch);\n        }\n        if($ch eq 'a' || $ch eq 'e'\
    \ || $ch eq 'i' || $ch eq 'o' || $ch eq 'u') {\n            $ch = chr(ord($ch)\
    \ + 2);\n        }\n        $encodeMessage .= $ch;\n    }\n    return $encodeMessage;\n\
    }", "    my @message = split(\"\", $message);\n    my $encoded = \"\";\n    my\
    \ $tmp_letter = \"\";\n    foreach my $letter (@message) {\n        if ($letter\
    \ =~ /[A-Z]/) {\n            $tmp_letter = lc($letter);\n        } elsif ($letter\
    \ =~ /[a-z]/) {\n            $tmp_letter = uc($letter);\n        } else {\n  \
    \          $tmp_letter = $letter;\n        }\n        $encoded .= $tmp_letter;\n\
    \    }\n    return $encoded;\n}", "    my @alphabet = ('a'..'z');\n    my @alphabet_uc\
    \ = ('A'..'Z');\n    my @vowels = ('a','e','i','o','u');\n    my $new_message\
    \ = \"\";\n    my $i = 0;\n    my $char;\n    my $new_char;\n    for $char (split\
    \ //, $message) {\n        my $new_char = $char;\n        if(uc($char) eq $char)\
    \ {\n            for my $x (0..(scalar @alphabet_uc - 1)) {\n                if($char\
    \ eq $alphabet_uc[$x]) {\n                    for my $y (0..(scalar @vowels -\
    \ 1)) {\n                        if($alphabet_uc[$x] eq $vowels[$y]) {\n     \
    \                       if($x == scalar @alphabet_uc - 2) {\n                \
    \                $new_char = $alphabet_uc[0];\n                            } elsif($x\
    \ == scalar @alphabet_uc - 1) {\n                                $new_char = $alphabet_uc[1];\n\
    \                            } else {\n                                $new_char\
    \ = $alphabet_uc[$x + 2];\n                            }\n                   \
    \     }\n                    }\n                }\n            }\n        } else\
    \ {\n            for my $x (0..(scalar @alphabet - 1)) {\n                if($char\
    \ eq $alphabet[$x]) {\n                    for my $y (0..(scalar @vowels - 1))\
    \ {\n                        if($alphabet[$x] eq $vowels[$y]) {\n            \
    \                if($x == scalar @alphabet - 2) {\n                          \
    \      $new_char = $alphabet[0];\n                            } elsif($x == scalar\
    \ @alphabet - 1) {\n                                $new_char = $alphabet[1];\n\
    \                            } else {\n                                $new_char\
    \ = $alphabet[$x + 2];\n                            }\n                      \
    \  }\n                    }\n                }\n            }\n        }\n   \
    \     $new_message .= $new_char;\n    }", "    my $encode_message = \"\";\n  \
    \  my $index = 0;\n    my $char = 0;\n    my $next_char = 0;\n    my $next_next_char\
    \ = 0;\n    my $vowel = 0;\n    my $index_vowel = 0;\n    for (my $i = 0; $i <\
    \ length($message); $i++) {\n        $char = substr($message, $i, 1);\n      \
    \  $index = index($alphabet, $char);\n        $next_char = substr($alphabet, $index\
    \ + 1, 1);\n        $next_next_char = substr($alphabet, $index + 2, 1);\n    \
    \    $vowel = index($vowels, $char);\n        $index_vowel = index($alphabet,\
    \ $char);\n        if ($vowel != -1) {\n            $encode_message .= $next_next_char;\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $encode_message .= $next_char;\n\
    \        } elsif ($char =~ /[a-z]/) {\n            $encode_message .= $next_char;\n\
    \        } else {\n            $encode_message .= $char;\n        }\n    }\n \
    \   return $encode_message;\n}", "    #Encode each character in message\n    #Note:\
    \ If not a letter, character remains the same\n    my $result = map_chars($message,\
    \ sub {\n        my($char) = @_;\n        my $encode = encrypt_char($char);\n\
    \        #Swap case of letter\n        $encode = swap_case($encode);\n       \
    \ return $encode;\n    });\n    return $result;\n}", "    $message =~ tr/a-zA-Z/b-zaB-ZA/;\n\
    \    $message =~ tr/a-zA-Z/c-zaC-ZA/;\n    return $message;\n}", "    my @chars\
    \ = split('', $message);\n    my @encoded;\n    foreach my $char (@chars) {\n\
    \        if (is_vowel($char)) {\n            push(@encoded, next_vowel($char));\n\
    \        } else {\n            push(@encoded, $char);\n        }\n    }\n    return\
    \ uc(join('', @encoded));\n}", "    my @cipher;\n    my @message = split(\"\"\
    , $message);\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    for my $letter\
    \ (@message) {\n        my $encrypted_letter = $letter;\n        for my $vowel\
    \ (@vowels) {\n            if (lc($letter) eq $vowel) {\n                $encrypted_letter\
    \ = &get_character_after($vowel, 2);\n            }\n        }\n        $encrypted_letter\
    \ = uc($encrypted_letter) if ($letter eq uc($letter));\n        push(@cipher,\
    \ $encrypted_letter);\n    }\n    return join(\"\", @cipher);\n}", "    # TODO\n\
    }", "    my @output = ();\n    # your code here\n    return join(\"\", @output);\n\
    }", "    my($result) = '';\n    my($ch);\n    my($i);\n    my($letter);\n    my($vowels)\
    \ = {'a' => 'c', 'e' => 'g', 'i' => 'k', 'o' => 'q', 'u' => 'y'};\n    for($i\
    \ = 0; $i < length($message); $i++){\n        $ch = substr($message, $i, 1);\n\
    \        if(defined($vowels->{$ch})){\n            $letter = $vowels->{$ch};\n\
    \        }\n        else{\n            $letter = $ch;\n        }\n        if($letter\
    \ eq uc($letter)){\n            $result .= lc($letter);\n        }\n        else{\n\
    \            $result .= uc($letter);\n        }\n    }\n    return $result;\n}",
  "    my @letters = split(//, $message);\n    my @encoded;\n    for my $letter (@letters)\
    \ {\n        my $lower = lc($letter);\n        if ($lower eq $letter) {\n    \
    \        $letter = uc($letter);\n        } else {\n            $letter = $lower;\n\
    \        }\n        if ($letter =~ /[aeiou]/) {\n            my $next = ord($letter)\
    \ + 2;\n            if ($next > ord('z')) {\n                $next = ord('a')\
    \ + ($next - ord('z') - 1);\n            }\n            $letter = chr($next);\n\
    \        }\n        push(@encoded, $letter);\n    }\n    return join('', @encoded);\n\
    }", "    my $new_message = \"\";\n    my $letter;\n    for (my $i = 0; $i < length($message);\
    \ $i++) {\n        $letter = uc(substr($message, $i, 1));\n        if ($letter\
    \ eq \"A\") {\n            $new_message .= \"C\";\n        } elsif ($letter eq\
    \ \"E\") {\n            $new_message .= \"G\";\n        } elsif ($letter eq \"\
    I\") {\n            $new_message .= \"K\";\n        } elsif ($letter eq \"O\"\
    ) {\n            $new_message .= \"Q\";\n        } elsif ($letter eq \"U\") {\n\
    \            $new_message .= \"S\";\n        } else {\n            $new_message\
    \ .= $letter;\n        }\n    }\n    return $new_message;\n}", "    my %vowels\
    \ = (\"a\" => \"c\", \"e\" => \"g\", \"i\" => \"k\", \"o\" => \"q\", \"u\" =>\
    \ \"w\");\n    $message =~ s/([A-Z])/\\l$1/g;\n    $message =~ s/([a-z])/\\u$1/g;\n\
    \    $message =~ s/([aeiou])/$vowels{$1}/g;\n    return $message;\n}", "    my\
    \ $result = \"\";\n    my @chars = split(\"\", $message);\n    foreach my $char\
    \ (@chars) {\n        $result .= encode_char($char);\n    }\n    return $result;\n\
    }", "    my %encoder = (\n        'a' => 'c',\n        'e' => 'g',\n        'i'\
    \ => 'k',\n        'o' => 'q',\n        'u' => 'w',\n        'A' => 'C',\n   \
    \     'E' => 'G',\n        'I' => 'K',\n        'O' => 'Q',\n        'U' => 'W',\n\
    \    );\n    my $encoded = $message;\n    foreach my $key (keys %encoder) {\n\
    \        $encoded =~ s/$key/$encoder{$key}/g;\n    }\n    return $encoded;\n}",
  "    my($pos, $letter, $encoded);\n    foreach $letter (split(//, $message)) {\n\
    \        $encoded .= $letter;\n        if ($letter =~ /[A-Z]/) {\n           \
    \ $encoded =~ s/([A-Z])/\\l$1/g;\n        }\n        if ($letter =~ /[a-z]/) {\n\
    \            $encoded =~ s/([a-z])/\\u$1/g;\n        }\n        if ($letter =~\
    \ /[aeiou]/) {\n            $pos = index($alphabet, $letter);\n            $encoded\
    \ =~ s/([aeiou])/$alphabet[$pos+2]/e;\n        }\n    }\n    return $encoded;\n\
    }", "    my $encoded = '';\n    my $orig = $message;\n    my @orig_chars = split(//,\
    \ $orig);\n    my @encoded_chars = ();\n    my $vowels = 'a|e|i|o|u';\n    my\
    \ $vowels_array = [ 'a', 'e', 'i', 'o', 'u' ];\n    foreach my $orig_char (@orig_chars)\
    \ {\n        my $encoded_char = '';\n        # encode\n        if ($orig_char\
    \ =~ /\\s/) {\n            $encoded_char = ' ';\n        }\n        elsif ($orig_char\
    \ =~ /[A-Z]/) {\n            $encoded_char = lc($orig_char);\n        }\n    \
    \    elsif ($orig_char =~ /[a-z]/) {\n            $encoded_char = uc($orig_char);\n\
    \        }\n        else {\n            $encoded_char = $orig_char;\n        }\n\
    \        # replace\n        if ($encoded_char =~ /$vowels/) {\n            my\
    \ $original_index = first_index { $_ eq $encoded_char } @$vowels_array;\n    \
    \        my $new_index = ($original_index + 2) % 5;\n            $encoded_char\
    \ = $vowels_array->[$new_index];\n        }\n        push(@encoded_chars, $encoded_char);\n\
    \    }\n    $encoded = join('', @encoded_chars);\n    return $encoded;\n}", " \
    \   $message =~ tr/A-Za-z/a-zA-Z/;\n    my @vowels = ('a'..'z', 'A'..'Z');\n \
    \   $message =~ s/(a|e|i|o|u)/$vowels[(index($message, $1) + 2) % 26]/ge;\n  \
    \  return $message;\n}", "    my $vowels = \"aeiou\";\n    $message =~ s/[a-z]/\\\
    U$&/g;\n    $message =~ s/[a-z]/\\L$&/g;\n    $message =~ s/([$vowels])/\n   \
    \     chr(\n            ord($1) + 2 > ord('z') \n            ?\n            ord('a')\
    \ + 2 - (ord('z') - ord($1) + 1)\n            :\n            ord($1) + 2\n   \
    \     )\n    /xge;\n    return $message;\n}", "    #your code here\n}", "    my($letter,\
    \ $encoded, $vowel);\n    foreach $letter (split(//, $message)) {\n        if\
    \ ($letter =~ /[aeiou]/i) {\n            $vowel = ord($letter);\n            $vowel\
    \ += 2;\n            $letter = chr($vowel);\n        }\n        $encoded .= $letter;\n\
    \    }\n    $encoded =~ tr/[a-z]/[A-Z]/;\n    return $encoded;\n}", "    my %encoder\
    \ = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n       \
    \ 'o' => 'q',\n        'u' => 'y',\n        'A' => 'C',\n        'E' => 'G',\n\
    \        'I' => 'K',\n        'O' => 'Q',\n        'U' => 'Y',\n    );\n    my\
    \ @encode_chars = split //, $message;\n    for (my $i = 0; $i < scalar @encode_chars;\
    \ $i++) {\n        my $encode_char = $encode_chars[$i];\n        if (exists $encoder{$encode_char})\
    \ {\n            $encode_chars[$i] = $encoder{$encode_char};\n        }\n    \
    \    else {\n            $encode_chars[$i] = uc $encode_char;\n        }\n   \
    \ }\n    return join '', @encode_chars;\n}", "    my @arr = split(//, $message);\n\
    \    my @ret_arr;\n    my %vowels;\n    @vowels{('a', 'e', 'i', 'o', 'u')} = (1)\
    \ x 5;\n    foreach my $char (@arr) {\n        if ($vowels{lc($char)}) {\n   \
    \         my $idx = index(\"abcdefghijklmnopqrstuvwxyz\", lc($char));\n      \
    \      $idx = ($idx + 2) % 26;\n            $char = substr(\"abcdefghijklmnopqrstuvwxyz\"\
    , $idx, 1);\n        }\n        if ($char =~ /[[:lower:]]/) {\n            $char\
    \ = uc($char);\n        } else {\n            $char = lc($char);\n        }\n\
    \        push(@ret_arr, $char);\n    }\n    return join(\"\", @ret_arr);\n}",
  "    my $encoded = '';\n    # your code here\n    foreach my $letter (split //,\
    \ $message) {\n        if (lc($letter) =~ /[aeiou]/) {\n            my $encoded_letter\
    \ = encode_letter($letter);\n            $encoded .= $encoded_letter;\n      \
    \  }\n        else {\n            $encoded .= uc $letter;\n        }\n    }\n\
    \    return $encoded;\n}", "    # Your code here\n}", "    my @m = split(\"\"\
    , $message);\n    my @vowels = qw/a e i o u/;\n    for (my $i = 0; $i < scalar(@m);\
    \ $i++) {\n        if (uc($m[$i]) ne $m[$i]) {\n            $m[$i] = uc($m[$i]);\n\
    \        }\n        else {\n            $m[$i] = lc($m[$i]);\n        }\n    \
    \    foreach my $v (@vowels) {\n            if ($m[$i] eq $v) {\n            \
    \    if ($m[$i] eq \"u\") {\n                    $m[$i] = \"a\";\n           \
    \     }\n                else {\n                    $m[$i] = chr(ord($m[$i])\
    \ + 2);\n                }\n            }\n        }\n    }\n    return join(\"\
    \", @m);\n}", "    my $encoded = \"\";\n    my $msg_length = length($message);\n\
    \    my @alphabet = ('a'..'z');\n    my $vowels = 'aeiou';\n    my $vowels_len\
    \ = length($vowels);\n    my $encoded_vowels = \"\";\n    for (my $i = 0; $i <\
    \ $vowels_len; $i++) {\n        $encoded_vowels .= $alphabet[($i + 2) % $vowels_len];\n\
    \    }\n    for (my $i = 0; $i < $msg_length; $i++) {\n        my $character =\
    \ substr($message, $i, 1);\n        my $position = index($vowels, $character);\n\
    \        if ($position > -1) {\n            $character = substr($encoded_vowels,\
    \ $position, 1);\n        }\n        $encoded .= uc $character;\n    }\n    return\
    \ $encoded;\n}\nprint encode(\"This is a message\") . \"\\n\";", "    my $encoded_msg\
    \ = '';\n    my @letters = split(//, $message);\n    foreach my $letter (@letters)\
    \ {\n        if ($letter =~ /[a-z]/) {\n            if ($letter eq 'z') {\n  \
    \              $encoded_msg .= 'b';\n            } elsif ($letter eq 'y') {\n\
    \                $encoded_msg .= 'a';\n            } else {\n                $encoded_msg\
    \ .= chr(ord($letter) + 2);\n            }\n        } elsif ($letter =~ /[A-Z]/)\
    \ {\n            if ($letter eq 'Z') {\n                $encoded_msg .= 'B';\n\
    \            } elsif ($letter eq 'Y') {\n                $encoded_msg .= 'A';\n\
    \            } else {\n                $encoded_msg .= chr(ord($letter) + 2);\n\
    \            }\n        } else {\n            $encoded_msg .= $letter;\n     \
    \   }\n    }\n    return $encoded_msg;\n}", "    my $new_message = '';\n    foreach\
    \ my $char (split(//, $message)) {\n        if ($char =~ /[A-Z]/) {\n        \
    \    $new_message .= lc($char);\n        }\n        elsif ($char =~ /[a-z]/) {\n\
    \            $new_message .= uc($char);\n        }\n        elsif ($char =~ /[aeiou]/)\
    \ {\n            $new_message .= $char;\n            foreach (1..2) {\n      \
    \          $new_message =~ s/[aeiou]/a/;\n                $new_message =~ s/[aeiou]/e/;\n\
    \                $new_message =~ s/[aeiou]/i/;\n                $new_message =~\
    \ s/[aeiou]/o/;\n                $new_message =~ s/[aeiou]/u/;\n            }\n\
    \        }\n        else {\n            $new_message .= $char;\n        }\n  \
    \  }\n    return $new_message;\n}", "    my $result = \"\";\n    my @message =\
    \ split(//, $message);\n    foreach my $char (@message) {\n        if ($char =~\
    \ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n                $char = uc($char);\n\
    \            } else {\n                $char = lc($char);\n            }\n   \
    \         if ($char =~ /[AEIOU]/) {\n                $char =~ tr/ABCDEFGHIJKLMNOPQRSTUVWXYZ/CDEFGHIJKLMNOPQRSTUVWXYZAB/;\n\
    \            }\n        }\n        $result .= $char;\n    }\n    return $result;\n\
    }", "    my $result = \"\";\n    foreach my $c (split //, $message) {\n      \
    \  if (is_vowel($c)) {\n            $result .= next_vowel($c);\n        } elsif\
    \ (is_upper($c)) {\n            $result .= lc($c);\n        } elsif (is_lower($c))\
    \ {\n            $result .= uc($c);\n        } else {\n            $result .=\
    \ $c;\n        }\n    }\n    return $result;\n}", "    my $new_message = \"\"\
    ;\n    my @chars = split(\"\", $message);\n    foreach my $char (@chars) {\n \
    \       if($char =~ /[A-Z]/) {\n            $new_message .= lc($char);\n     \
    \   } elsif($char =~ /[a-z]/) {\n            $new_message .= uc($char);\n    \
    \    } else {\n            $new_message .= $char;\n        }\n    }\n    # encode\
    \ vowels\n    my $encoded_message = \"\";\n    my $vowels = \"aeiou\";\n    @chars\
    \ = split(\"\", $new_message);\n    foreach my $char (@chars) {\n        if(index($vowels,\
    \ $char) != -1) {\n            my $index = index($vowels, $char);\n          \
    \  $index += 2;\n            $index = $index % 5;\n            $encoded_message\
    \ .= substr($vowels, $index, 1);\n        } else {\n            $encoded_message\
    \ .= $char;\n        }\n    }\n    return $encoded_message;\n}", "    my $encoded_message\
    \ = \"\";\n    my $char;\n    my $upped_char;\n    my $i;\n    my $len = length($message);\n\
    \    for($i = 0; $i < $len; $i++) {\n        $char = substr($message, $i, 1);\n\
    \        $upped_char = uc($char);\n        if( index(\"AEIOU\", $upped_char) !=\
    \ -1 ) {\n            $char = next_vowel($upped_char);\n        }\n        if(\
    \ isupper($char) ) {\n            $char = lc($char);\n        } else {\n     \
    \       $char = uc($char);\n        }\n        $encoded_message .= $char;\n  \
    \  }\n    return $encoded_message;\n}", "    $message =~ tr/a-zA-Z/b-zaB-ZA/;\n\
    \    $message =~ tr/aeiou/fcjpw/;\n    return $message;\n}", "    my @array =\
    \ split //, $message;\n    foreach my $letter (@array) {\n        if($letter =~\
    \ /[A-Z]/) {\n            $letter = lc($letter);\n        } else {\n         \
    \   $letter = uc($letter);\n        }\n        if($letter =~ /[aeiou]/) {\n  \
    \          my $index = index(\"abcdefghijklmnopqrstuvwxyz\", $letter);\n     \
    \       $letter = substr(\"cdefghijklmnopqrstuvwxyzab\", $index, 1);\n       \
    \ }\n    }\n    return join(\"\", @array);\n}", "    my @array = split('',$message);\n\
    \    my $vowels = \"aeiou\";\n    my $encoded = \"\";\n    foreach my $c (@array)\
    \ {\n        if ($c =~ m/[A-Z]/) {\n            $c = lc($c);\n        }\n    \
    \    else {\n            $c = uc($c);\n        }\n        if ($vowels =~ m/$c/)\
    \ {\n            my $index = index($vowels,$c);\n            $index = $index +\
    \ 2;\n            if ($index > 4) {\n                $index = $index - 5;\n  \
    \          }\n            $c = substr($vowels,$index,1);\n        }\n        $encoded\
    \ = $encoded . $c;\n    }\n    return $encoded;\n}", "    # TODO: Implement this\
    \ function and remove the die\n    # die \"Unimplemented function: encode\";\n\
    \    my @words = split(/ /, $message);\n    my $encoded_message = \"\";\n    foreach\
    \ my $word (@words) {\n        $encoded_message .= encode_word($word) . \" \"\
    ;\n    }\n    return $encoded_message;\n}", "    my @message = split('', $message);\n\
    \    my $message_encoded = join('', map {\n        my $char = $_;\n        if\
    \ ($char eq lc($char)) {\n            $char = uc($char);\n        } else {\n \
    \           $char = lc($char);\n        }\n        $char =~ s/[AEIOU]/scalar(shift(@message))/e;\n\
    \        $char;\n    } @message);\n    return $message_encoded;\n}", "    my $new_message\
    \ = \"\";\n    my @letters = split //, $message;\n    foreach my $letter (@letters)\
    \ {\n        if ( uc($letter) eq $letter ) {\n            $new_message .= lc($letter);\n\
    \        } else {\n            $new_message .= uc($letter);\n        }\n     \
    \   my $num = ord($letter);\n        if ($num == 97) {\n            $new_message\
    \ .= chr(99);\n        } elsif ($num == 101) {\n            $new_message .= chr(103);\n\
    \        } elsif ($num == 105) {\n            $new_message .= chr(107);\n    \
    \    } elsif ($num == 111) {\n            $new_message .= chr(113);\n        }\
    \ elsif ($num == 117) {\n            $new_message .= chr(119);\n        }\n  \
    \  }\n    return $new_message;\n}", "    my $encoded_message = \"\";\n    foreach\
    \ my $character (split(//, $message)) {\n        if($character =~ /[a-z]/i) {\n\
    \            if($character =~ /[aeiou]/i) {\n                $encoded_message\
    \ .= shift_two_from_vowel($character);\n            }\n            else {\n  \
    \              $encoded_message .= $character;\n            }\n        }\n   \
    \     else {\n            $encoded_message .= $character;\n        }\n    }\n\
    \    return $encoded_message;\n}", "    my $encoded = \"\";\n    for my $char\
    \ (split(//, $message)) {\n        if ($char =~ /[aeiou]/i) {\n            my\
    \ $new = chr(ord($char) + 2);\n            $new = \"a\" if $new =~ /[x-z]/i;\n\
    \            $encoded .= $new;\n        } else {\n            $encoded .= uc($char)\
    \ if $char =~ /[a-z]/;\n            $encoded .= lc($char) if $char =~ /[A-Z]/;\n\
    \        }\n    }\n    return $encoded;\n}", "    $message =~ tr/a-zA-Z/A-Za-z/;\n\
    \    $message =~ tr/aeiou/cehik/;\n    return $message;\n}", "    $message =~\
    \ tr/a-zA-Z/c-za-bC-ZA-B/;\n    $message =~ tr/aeiou/cfopx/;\n    return $message;\n\
    }", "    my @message = split('', $message);\n    my @coded_message;\n    foreach\
    \ my $char (@message) {\n        if ($char =~ /[A-Z]/) {\n            $char =\
    \ lc($char);\n        }\n        elsif ($char =~ /[a-z]/) {\n            $char\
    \ = uc($char);\n        }\n        else {\n            # Do nothing\n        }\n\
    \        if ($char =~ /[aeiou]/) {\n            my $index = get_index($char, 'aeiou');\n\
    \            $char = (split('', 'aeiou'))[($index + 2) % 5];\n        }\n    \
    \    else {\n            # Do nothing\n        }\n        push(@coded_message,\
    \ $char);\n    }\n    return join('', @coded_message);\n}", "    my($c);\n   \
    \ my($result) = \"\";\n    my($ch);\n    my($i);\n    my($len);\n    my($lc);\n\
    \    my($newch);\n    my($newlc);\n    my($remainder);\n    my($remainder_count);\n\
    \    $len = length($message);\n    $i = 0;\n    while($i < $len) {\n        $ch\
    \ = substr($message, $i, 1);\n        $lc = lc($ch);\n        if($lc eq 'a') {\n\
    \            $newch = 'c';\n        } elsif($lc eq 'e') {\n            $newch\
    \ = 'g';\n        } elsif($lc eq 'i') {\n            $newch = 'k';\n        }\
    \ elsif($lc eq 'o') {\n            $newch = 'q';\n        } elsif($lc eq 'u')\
    \ {\n            $newch = 's';\n        } else {\n            $newch = $ch;\n\
    \        }\n        $result .= $newch;\n        $i = $i + 1;\n    }\n    return\
    \ $result;\n}", "    # set up list of vowels\n    my $vowels = \"aeiou\";\n  \
    \  # convert message to lowercase\n    $message = lc($message);\n    # loop through\
    \ message\n    for (my $i = 0; $i < length($message); $i++) {\n        # get letter\
    \ at this position\n        my $letter = substr($message, $i, 1);\n        # if\
    \ it's a vowel, replace it with a letter two ahead\n        if (index($vowels,\
    \ $letter) >= 0) {\n            substr($message, $i, 1) = substr($vowels, (index($vowels,\
    \ $letter) + 2) % 5, 1);\n        }\n    }\n    # return the result\n    return\
    \ $message;\n}", "    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\");\n    my\
    \ @coded_message = ();\n    for (my $i = 0; $i < length($message); $i++) {\n \
    \       my $letter = substr($message, $i, 1);\n        my $lowercase_letter =\
    \ lc($letter);\n        my $match = 0;\n        foreach my $vowel (@vowels) {\n\
    \            if ($lowercase_letter eq $vowel) {\n                $match = 1;\n\
    \                my $offset = ord($lowercase_letter) - ord(\"a\");\n         \
    \       my $coded_letter = chr(ord(\"a\") + (($offset + 2) % 26));\n         \
    \       push(@coded_message, $coded_letter);\n            }\n        }\n     \
    \   if ($match == 0) {\n            if ($letter eq $lowercase_letter) {\n    \
    \            push(@coded_message, uc($letter));\n            } else {\n      \
    \          push(@coded_message, lc($letter));\n            }\n        }\n    }\n\
    \    return join(\"\", @coded_message);\n}", "    $message =~ tr/a-zA-Z/b-zaB-ZA/;\n\
    \    $message =~ tr/aeiou/cdfhk/;\n    return $message;\n}", "    my $newMessage\
    \ = \"\";\n    foreach my $char (split(\"\", $message)) {\n        if ($char =~\
    \ /[aeiouAEIOU]/) {\n            $newMessage .= shiftLetter(lc($char), 2);\n \
    \       } else {\n            $newMessage .= $char;\n        }\n    }\n    return\
    \ $newMessage;\n}", "    my $returnVal = '';\n    my @vowels = ('a','e','i','o','u');\n\
    \    my @letters = ('a'..'z');\n    my %letterHash = map { $letters[$_] => $_+1\
    \ } (0..25);\n    my %twoAheadHash = map { $letters[$_] => $letters[$_+2] } (0..23);\n\
    \    my @messageSplit = split('', $message);\n    for (my $i = 0; $i < scalar(@messageSplit);\
    \ $i++) {\n        if ($messageSplit[$i] =~ /[a-z]/i) {\n            if ($messageSplit[$i]\
    \ =~ /[a-z]/) {\n                $returnVal .= uc($messageSplit[$i]);\n      \
    \      } else {\n                $returnVal .= lc($messageSplit[$i]);\n      \
    \      }\n        }\n        if (grep { $messageSplit[$i] eq $_ } @vowels) {\n\
    \            $returnVal .= $twoAheadHash{lc($messageSplit[$i])};\n        }\n\
    \    }\n    return $returnVal;\n}", "    my @encoded;\n    my $letter;\n    foreach\
    \ $letter (split(//, $message)) {\n        my $ascii = ord($letter);\n       \
    \ if (($ascii > 96) && ($ascii < 123)) {\n            $ascii = $ascii - 97;\n\
    \            $ascii = $ascii + 2;\n            $ascii = $ascii % 26;\n       \
    \     $ascii = $ascii + 97;\n        } elsif (($ascii > 64) && ($ascii < 91))\
    \ {\n            $ascii = $ascii - 65;\n            $ascii = $ascii + 2;\n   \
    \         $ascii = $ascii % 26;\n            $ascii = $ascii + 65;\n        }\n\
    \        push(@encoded, chr($ascii));\n    }\n    return join(\"\", @encoded);\n\
    }", "    my($encoded);\n    my(@chars) = split(//, $message);\n    foreach my\
    \ $char (@chars) {\n        my($new_char);\n        my($ascii) = ord($char);\n\
    \        if($ascii >= 65 && $ascii <= 90) {\n            # Uppercase\n       \
    \     if($ascii == 65 || $ascii == 69 || $ascii == 73 || $ascii == 79 || $ascii\
    \ == 85) {\n                $new_char = chr($ascii + 2);\n            } else {\n\
    \                $new_char = chr($ascii + 1);\n            }\n        } elsif($ascii\
    \ >= 97 && $ascii <= 122) {\n            # Lowercase\n            if($ascii ==\
    \ 97 || $ascii == 101 || $ascii == 105 || $ascii == 111 || $ascii == 117) {\n\
    \                $new_char = chr($ascii + 2);\n            } else {\n        \
    \        $new_char = chr($ascii + 1);\n            }\n        } else {\n     \
    \       $new_char = $char;\n        }\n        $encoded .= $new_char;\n    }\n\
    \    return $encoded;\n}", "    return $message;\n}", "    my($encoded_message);\n\
    \    my(@encoded_letters);\n    my(@letters) = split('',$message);\n    for my\
    \ $letter (@letters) {\n        my($encoded_letter);\n        if (exists $vowels{$letter})\
    \ {\n            my($alpha_index) = $vowels{$letter};\n            my($encoded_index)\
    \ = $alpha_index + 2;\n            $encoded_letter = $alpha[$encoded_index];\n\
    \        } else {\n            $encoded_letter = $letter;\n        }\n       \
    \ if (exists $lowercase{$encoded_letter}) {\n            my($lowercase_index)\
    \ = $lowercase{$encoded_letter};\n            $encoded_letter = $alpha[$lowercase_index];\n\
    \        }\n        push(@encoded_letters,$encoded_letter);\n    }\n    $encoded_message\
    \ = join('',@encoded_letters);\n    return $encoded_message;\n}", '    $message
    =~ tr/A-Za-z/N-ZA-Mn-za-m/;', "    $message =~ tr/a-zA-Z/A-Za-z/;\n    $message\
    \ =~ tr/a-zA-Z/c-za-bC-ZA-B/;\n    return $message;\n}", "    my %vowels = ('a'\
    \ => 'c', 'e' => 'g', 'i' => 'k', 'o' => 'q', 'u' => 'y');\n    my $result = \"\
    \";\n    my @message = split //, $message;\n    foreach my $letter (@message)\
    \ {\n        if ($letter eq lc($letter)) {\n            $letter = uc($letter);\n\
    \        } else {\n            $letter = lc($letter);\n        }\n        $result\
    \ .= $vowels{$letter} || $letter;\n    }\n    return $result;\n}", "    my $str\
    \ = '';\n    foreach my $char (split //, $message) {\n        my $code = ord($char);\n\
    \        if ($code >= ord('a') && $code <= ord('z')) {\n            $code -= ord('a');\n\
    \            $code += 2;\n            $code %= 26;\n            $code += ord('a');\n\
    \        } elsif ($code >= ord('A') && $code <= ord('Z')) {\n            $code\
    \ -= ord('A');\n            $code += 2;\n            $code %= 26;\n          \
    \  $code += ord('A');\n        }\n        $str .= chr($code);\n    }\n    return\
    \ $str;\n}\nprint encode(\"This is a message\"),\"\\n\";", "    $message =~ tr/a-zA-Z/A-Za-z/;\n\
    \    $message =~ tr/aeiou/cdfhk/;\n    return $message;\n}", "    my $encoded\
    \ = \"\";\n    my $i = 0;\n    my @message = split('', $message);\n    foreach\
    \ (@message) {\n        $i++;\n        $encoded .= uc($_) if (/[a-z]/);\n    \
    \    $encoded .= lc($_) if (/[A-Z]/);\n        $encoded .= get_next_vowel($_)\
    \ if (/[aeiou]/i);\n    }\n    return $encoded;\n}", "    my $output = '';\n \
    \   my $len = length($message);\n    my @alphabet = ('a'..'z');\n    my %vowels\
    \ = map { $_ => 1 } qw(a e i o u);\n    for(my $i = 0; $i < $len; $i++) {\n  \
    \      my $cur_letter = substr($message, $i, 1);\n        my $cur_lower = lc($cur_letter);\n\
    \        my $cur_upper = uc($cur_letter);\n        if (exists $vowels{$cur_lower})\
    \ {\n            # find next 2 letters of lower and upper case\n            my\
    \ $lower_index = 0;\n            my $upper_index = 0;\n            for(my $j =\
    \ 0; $j < scalar(@alphabet); $j++) {\n                if ($alphabet[$j] eq $cur_lower)\
    \ {\n                    $lower_index = $j;\n                    last;\n     \
    \           }\n            }\n            for(my $j = 0; $j < scalar(@alphabet);\
    \ $j++) {\n                if ($alphabet[$j] eq $cur_upper) {\n              \
    \      $upper_index = $j;\n                    last;\n                }\n    \
    \        }\n            my $new_index = ($lower_index + 2) % 26;\n           \
    \ my $new_upper_index = ($upper_index + 2) % 26;\n            my $new_letter =\
    \ $alphabet[$new_index];\n            my $new_upper_letter = $alphabet[$new_upper_index];\n\
    \            $output .= $new_upper_letter;\n        } else {\n            $output\
    \ .= $cur_upper;\n        }\n    }\n    return $output;\n}", "    $message =~\
    \ tr/a-zA-Z/b-zaB-ZA/;\n    $message =~ tr/aeiou/cegtk/;\n    return $message;\n\
    }", "    $message =~ tr/a-zA-Z/A-Za-z/;\n    $message =~ tr/aeiou/cdfgjk/;\n \
    \   return $message;\n}", "    my $result = \"\";\n    my $vowels = \"aeiouAEIOU\"\
    ;\n    my $vowels_in_order = \"EATOINUOAL\";\n    my $second_next_vowel = 0;\n\
    \    my $letter_i = 0;\n    my $letter_result = \"\";\n    my $upper_case = 0;\n\
    \    for ($letter_i = 0; $letter_i < length($message); $letter_i++) {\n      \
    \  if (index($vowels, substr($message, $letter_i, 1)) != -1) {\n            $second_next_vowel\
    \ = index($vowels, substr($message, $letter_i, 1)) + 2;\n            if ($second_next_vowel\
    \ >= length($vowels)) {\n                $second_next_vowel = $second_next_vowel\
    \ - length($vowels);\n            }\n            $letter_result = substr($vowels_in_order,\
    \ $second_next_vowel, 1);\n        } else {\n            $letter_result = substr($message,\
    \ $letter_i, 1);\n        }\n        if (ord($letter_result) >= 65 && ord($letter_result)\
    \ <= 90) {\n            $upper_case = 1;\n        } else {\n            $upper_case\
    \ = 0;\n        }\n        if (ord(substr($message, $letter_i, 1)) >= 65 && ord(substr($message,\
    \ $letter_i, 1)) <= 90) {\n            $letter_result = lc($letter_result);\n\
    \        } else {\n            $letter_result = uc($letter_result);\n        }\n\
    \        $result = $result . $letter_result;\n    }\n    return $result;\n}",
  "    my $result = '';\n    my @vowels = ('a'..'z');\n    my %vowels = map { $_ =>\
    \ $vowels[($_ + 2) % scalar(@vowels)] } 0..$#vowels;\n    foreach my $char (split(//,\
    \ $message)) {\n        if (exists $vowels{lc($char)}) {\n            $result\
    \ .= $vowels{lc($char)};\n        } else {\n            $result .= uc($char);\n\
    \        }\n    }\n    return $result;\n}", "    my @encoded_message = ();\n \
    \   my @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\");\n    foreach my $letter\
    \ (split(//, $message)) {\n        if ($letter =~ /[a-z]/i) {\n            my\
    \ $is_lower = $letter =~ /[a-z]/;\n            $letter = uc($letter);\n      \
    \      if (grep {$_ eq $letter} @vowels) {\n                $letter = next_char($letter);\n\
    \                $letter = next_char($letter);\n            }\n            if\
    \ ($is_lower) {\n                $letter = lc($letter);\n            }\n     \
    \   }\n        push(@encoded_message, $letter);\n    }\n    return join(\"\",\
    \ @encoded_message);\n}", "    my $result = '';\n    my $length = length($message);\n\
    \    my @chars = split('', $message);\n    my $encoded = '';\n    my $char = '';\n\
    \    my $converted = '';\n    my $index = 0;\n    my $count = 0;\n    my $shifted\
    \ = '';\n    my $position = 0;\n    my $found = 0;\n    my $pos = 0;\n    my $replacement\
    \ = '';\n    for (my $i = 0; $i < $length; $i++) {\n        $char = @chars[$i];\n\
    \        if ($char =~ /[A-Z]/) {\n            $converted = lc($char);\n      \
    \  } elsif ($char =~ /[a-z]/) {\n            $converted = uc($char);\n       \
    \ } else {\n            $converted = $char;\n        }\n        $encoded = $encoded\
    \ . $converted;\n    }\n    for (my $i = 0; $i < $length; $i++) {\n        $char\
    \ = @chars[$i];\n        if ($char =~ /[a-z]/) {\n            $found = 0;\n  \
    \          $pos = 0;\n            $replacement = '';\n            for (my $j =\
    \ 0; $j < $length; $j++) {\n                $shifted = @chars[$j];\n         \
    \       if ($found == 0) {\n                    if ($shifted =~ /[a-z]/) {\n \
    \                       $pos++;\n                    }\n                    if\
    \ ($pos == $char) {\n                        $found = 1;\n                   \
    \ }\n                } else {\n                    if ($shifted =~ /[a-z]/) {\n\
    \                        $pos++;\n                    }\n                    if\
    \ ($pos == $char + 2) {\n                        $replacement = $shifted;\n  \
    \                      $found = 2;\n                    }\n                }\n\
    \            }\n            if ($found == 1) {\n                $replacement =\
    \ @chars[0];\n            }\n            $result = $result . $replacement;\n \
    \       } else {\n            $result = $result . $char;\n       ", "    $message\
    \ =~ tr/a-zA-Z/c-za-bC-ZA-B/;\n    $message =~ tr/aeiou/eioua/;\n    return $message;\n\
    }", "    my $encoded = \"\";\n    my @letters = split(//, $message);\n    my %vowels\
    \ = (\n        \"a\" => \"c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\"\
    ,\n        \"o\" => \"q\",\n        \"u\" => \"w\",\n    );\n    for my $l (@letters)\
    \ {\n        if ( $l =~ /[a-z]/ ) {\n            $l = lc($l);\n            if\
    \ ( $l eq \"z\" ) {\n                $l = \"a\";\n            } else {\n     \
    \           $l = chr(ord($l) + 1);\n            }\n        } elsif ( $l =~ /[A-Z]/\
    \ ) {\n            $l = uc($l);\n            if ( $l eq \"Z\" ) {\n          \
    \      $l = \"A\";\n            } else {\n                $l = chr(ord($l) + 1);\n\
    \            }\n        }\n        if ( exists $vowels{$l} ) {\n            $l\
    \ = $vowels{$l};\n        }\n        $encoded .= $l;\n    }\n    return $encoded;\n\
    }", "    my $encoded_message = \"\";\n    for my $char (split(//, $message)) {\n\
    \        my $encoded_char = $char;\n        if ($char =~ /[a-z]/i) {\n       \
    \     $encoded_char = uc($char) ? lc($char) : uc($char);\n            if ($encoded_char\
    \ =~ /[aeiou]/i) {\n                $encoded_char =~ tr/a-z/b-za/;\n         \
    \       $encoded_char =~ tr/a-z/b-za/;\n            }\n        }\n        $encoded_message\
    \ .= $encoded_char;\n    }\n    return $encoded_message;\n}", "    my $result\
    \ = \"\";\n    my @vowels = qw/a e i o u/;\n    my %vowels = map { $_ => 1 } @vowels;\n\
    \    my @letters = split('', $message);\n    foreach my $letter (@letters) {\n\
    \        if($vowels{lc($letter)}) {\n            $result .= next_letter($letter);\n\
    \        } else {\n            $result .= $letter;\n        }\n    }\n    return\
    \ $result;\n}", "    my $encoded = $message;\n    $encoded =~ tr/a-zA-Z/A-Za-z/;\n\
    \    $encoded =~ tr/aeiouAEIOU/cegikCEGIK/;\n    return $encoded;\n}", "    #\
    \ complete here, return value should be the encoded message\n    my $encode_msg\
    \ = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my $i = 0;\n    while\
    \ ($i < length($message)) {\n        if (lc(substr($message, $i, 1)) eq substr($message,\
    \ $i, 1)) {\n            $encode_msg .= uc(substr($message, $i, 1));\n       \
    \ } else {\n            $encode_msg .= lc(substr($message, $i, 1));\n        }\n\
    \        foreach my $vowel (@vowels) {\n            if (lc(substr($message, $i,\
    \ 1)) eq $vowel) {\n                my $j = 0;\n                my $idx = 0;\n\
    \                while ($j < scalar(@vowels)) {\n                    if ($vowel\
    \ eq $vowels[$j]) {\n                        $idx = $j;\n                    \
    \    last;\n                    }\n                    $j++;\n               \
    \ }\n                $encode_msg .= $vowels[($idx + 2) % 5];\n            }\n\
    \        }\n        $i++;\n    }\n    return $encode_msg;\n}", "    my %vowels\
    \ = map {$_ => 1} qw/A E I O U/;\n    my %replacements = ('A' => 'C', 'E' => 'G',\
    \ 'I' => 'K', 'O' => 'Q', 'U' => 'S');\n    my @message_array = split //, $message;\n\
    \    for (my $i = 0; $i < @message_array; $i++) {\n        if ($vowels{uc $message_array[$i]})\
    \ {\n            $message_array[$i] = $replacements{uc $message_array[$i]};\n\
    \        }\n        else {\n            $message_array[$i] = uc $message_array[$i];\n\
    \        }\n    }\n    return join '', @message_array;\n}", "    my @alphabet\
    \ = ('a'..'z');\n    my %alphabet = ();\n    @alphabet{@alphabet} = @alphabet;\n\
    \    my @vowels = ('a'..'z');\n    @vowels = grep { $_ ~~ /[aeiou]/ } @vowels;\n\
    \    my %vowels = ();\n    @vowels{@vowels} = @vowels;\n    my $output = '';\n\
    \    my @message = split(//, $message);\n    foreach (@message) {\n        if\
    \ ($_ ~~ @alphabet) {\n            if ($_ ~~ @vowels) {\n                my $index\
    \ = firstidx { $_ eq $_ } @vowels;\n                my $letter = $vowels[$index\
    \ + 2];\n                $output .= $letter;\n            } else {\n         \
    \       $output .= $_;\n            }\n        }\n    }\n    return $output;\n\
    }", "    my($output) = \"\";\n    foreach my $letter (split //, $message) {\n\
    \        if ($letter =~ /[a-z]/) {\n            $output .= $letter =~ /[a|e|i|o|u]/\
    \ ? \n                chr(ord($letter) + 2) : \n                chr(ord($letter)\
    \ - ord(\"a\") + ord(\"A\"));\n        } elsif ($letter =~ /[A-Z]/) {\n      \
    \      $output .= $letter =~ /[A|E|I|O|U]/ ? \n                chr(ord($letter)\
    \ + 2) : \n                chr(ord($letter) - ord(\"A\") + ord(\"a\"));\n    \
    \    } else {\n            $output .= $letter;\n        }\n    }\n    return $output;\n\
    }", "    my @message_chars = split(\"\", $message);\n    my $new_message = \"\"\
    ;\n    my %vowels = (A => \"C\", E => \"G\", I => \"K\", O => \"Q\", U => \"S\"\
    , a => \"c\", e => \"g\", i => \"k\", o => \"q\", u => \"s\");\n    foreach my\
    \ $char (@message_chars) {\n        if ($char =~ /[[:lower:]]/) {\n          \
    \  $char =~ tr/[a-z]/[A-Z]/;\n            $new_message .= $char;\n        } elsif\
    \ ($char =~ /[[:upper:]]/) {\n            $char =~ tr/[A-Z]/[a-z]/;\n        \
    \    $new_message .= $char;\n        } elsif ($char =~ /[[:punct:]]/) {\n    \
    \        $new_message .= $char;\n        } else {\n            $new_message .=\
    \ $vowels{$char};\n        }\n    }\n    return $new_message;\n}", "    my @letters\
    \ = split(//, $message);\n    my @new_letters;\n    foreach my $letter (@letters)\
    \ {\n        if ($letter =~ /[A-Z]/) {\n            $letter = lc($letter);\n \
    \       } elsif ($letter =~ /[a-z]/) {\n            $letter = uc($letter);\n \
    \       }\n        if ($letter =~ /[aeiou]/) {\n            my $vowel_index =\
    \ index('aeiou', $letter);\n            $letter = substr('cdfghjklmnpqrstvwxyz',\
    \ $vowel_index, 1);\n        }\n        push(@new_letters, $letter);\n    }\n\
    \    return join('', @new_letters);\n}", "    my $result = \"\";\n    my @vowels\
    \ = qw(a e i o u);\n    my %vowels = map { $_ => 1 } @vowels;\n    for my $c (split(//,\
    \ $message)) {\n        my $uc = uc($c);\n        if ($vowels{$uc}) {\n      \
    \      $result .= chr(ord($uc) + 2);\n        } else {\n            $result .=\
    \ lc($uc);\n        }\n    }\n    return $result;\n}", "    my @words = split('\
    \ ', $message);\n    my $encoded_string = '';\n    my $encoded_word = '';\n  \
    \  foreach my $word (@words) {\n        for (my $i = 0; $i < length($word); $i++)\
    \ {\n            my $char = substr($word, $i, 1);\n            if ($char eq 'a'\
    \ || $char eq 'A') {\n                $encoded_word .= 'c';\n            } elsif\
    \ ($char eq 'e' || $char eq 'E') {\n                $encoded_word .= 'g';\n  \
    \          } elsif ($char eq 'i' || $char eq 'I') {\n                $encoded_word\
    \ .= 'k';\n            } elsif ($char eq 'o' || $char eq 'O') {\n            \
    \    $encoded_word .= 'm';\n            } elsif ($char eq 'u' || $char eq 'U')\
    \ {\n                $encoded_word .= 'q';\n            } elsif ($char =~ /[A-Z]/)\
    \ {\n                $encoded_word .= uc(chr(ord($char) + 2));\n            }\
    \ elsif ($char =~ /[a-z]/) {\n                $encoded_word .= lc(chr(ord($char)\
    \ + 2));\n            } else {\n                $encoded_word .= $char;\n    \
    \        }\n        }\n        $encoded_string .= $encoded_word . ' ';\n     \
    \   $encoded_word = '';\n    }\n    chop($encoded_string);\n    return $encoded_string;\n\
    }", "    my @characters = split(//, $message);\n    my $encoded = \"\";\n    my\
    \ $vowels = \"aeiouAEIOU\";\n    foreach my $char (@characters) {\n        if\
    \ ($vowels =~ /$char/) {\n            $encoded .= get_nth_vowel($char, 2);\n \
    \       }\n        else {\n            $encoded .= $char;\n        }\n    }\n\
    \    return $encoded;\n}", "    $message =~ tr/a-zA-Z/b-zaB-ZA/;\n    $message\
    \ =~ tr/aeiou/cdfkj/;\n    return $message;\n}", "    my $result = \"\";\n   \
    \ foreach my $c (split //, $message) {\n        if ($c =~ /[a-z]/i) {\n      \
    \      my $lower = lc($c);\n            my $latin = ord($lower) - ord('a');\n\
    \            my $rotation = ($latin + 2) % 26;\n            my $new_char = chr(ord('a')\
    \ + $rotation);\n            if ($c eq $lower) {\n                $result .= $new_char;\n\
    \            } else {\n                $result .= uc($new_char);\n           \
    \ }\n        } else {\n            $result .= $c;\n        }\n    }\n    return\
    \ $result;\n}", "    my @encode_message = ();\n    my $encode_message;\n    #\
    \ print \"@{[uc($message)]}\\n\";\n    my @message = split('', $message);\n  \
    \  foreach my $letter (@message) {\n        if (index('abcdefghijklmnopqrstuvwxyz',\
    \ lc($letter)) != -1) {\n            my $letter_code = index('abcdefghijklmnopqrstuvwxyz',\
    \ lc($letter));\n            my $vowel_code = index('aeiou', lc($letter));\n \
    \           if ($vowel_code != -1) {\n                $letter_code = ($letter_code\
    \ + 2) % 26;\n                push @encode_message, 'a' if ($letter_code == 0);\n\
    \                push @encode_message, 'e' if ($letter_code == 1);\n         \
    \       push @encode_message, 'i' if ($letter_code == 2);\n                push\
    \ @encode_message, 'o' if ($letter_code == 3);\n                push @encode_message,\
    \ 'u' if ($letter_code == 4);\n            } else {\n                $letter_code\
    \ = ($letter_code + 2) % 26;\n                push @encode_message, 'A' if ($letter_code\
    \ == 0);\n                push @encode_message, 'B' if ($letter_code == 1);\n\
    \                push @encode_message, 'C' if ($letter_code == 2);\n         \
    \       push @encode_message, 'D' if ($letter_code == 3);\n                push\
    \ @encode_message, 'E' if ($letter_code == 4);\n                push @encode_message,\
    \ 'F' if ($letter_code == 5);\n                push @encode_message, 'G' if ($letter_code\
    \ == 6);\n                push @encode_message, 'H' if ($letter_code == 7);\n\
    \                push @encode_message, 'I' if ($letter_code == 8);\n         \
    \       push @encode_message, 'J' if ($letter_code == 9);\n                push\
    \ @encode_message, 'K' if ($letter_code == 10);\n", "    my @message = split(\"\
    \",$message);\n    my $encodedMessage = \"\";\n    for(my $i = 0; $i < @message;\
    \ $i++) {\n\tmy $letter = $message[$i];\n\tif ($letter =~ /[a-z]/) {\n\t    $letter\
    \ =~ tr/a-z/A-Z/;\n\t}\n\telsif ($letter =~ /[A-Z]/) {\n\t    $letter =~ tr/A-Z/a-z/;\n\
    \t}\n\telsif ($letter =~ /[aeiou]/) {\n\t    $letter =~ tr/aeiou/EOYAB/;\n\t}\n\
    \telsif ($letter =~ /[AEIOU]/) {\n\t    $letter =~ tr/AEIOU/eoyab/;\n\t}\n\t$encodedMessage\
    \ .= $letter;\n    }\n    return $encodedMessage;\n}", "    my @vowels = qw(a\
    \ e i o u);\n    my %vowels = (\n        'a' => 1,\n        'e' => 1,\n      \
    \  'i' => 1,\n        'o' => 1,\n        'u' => 1,\n    );\n    my $encoded_message\
    \ = \"\";\n    my @message = split(//, $message);\n    for my $char (@message)\
    \ {\n        if (isupper($char)) {\n            $char = lc($char);\n        }\
    \ else {\n            $char = uc($char);\n        }\n        if ($vowels{$char})\
    \ {\n            for my $i (0..4) {\n                if ($vowels[$i] eq $char)\
    \ {\n                    $char = $vowels[($i + 2) % 5];\n                    last;\n\
    \                }\n            }\n        }\n        $encoded_message .= $char;\n\
    \    }\n    return $encoded_message;\n}", "    $message =~ tr/a-zA-Z/A-Za-z/;\n\
    \    $message =~ tr/aeiou/cdfghjklmnpqrstvwxyzABCDEFGHJKLMNPQRSTVWXYZ/;\n    return\
    \ $message;\n}", "    my $newMessage = \"\";\n    for(my $i = 0; $i < length($message);\
    \ $i++) {\n        my $char = substr($message, $i, 1);\n        if(index(\"aeiou\"\
    , $char) > -1) {\n            $char =~ tr/aeiou/efghj/;\n        } else {\n  \
    \          $char =~ tr/AEIOU/EFGHJ/;\n        }\n        $newMessage .= $char;\n\
    \    }\n    return $newMessage;\n}", "    my $new_message = \"\";\n    my @vowels\
    \ = split(\"\", \"aeiou\");\n    my %vowels = ();\n    my $count = 0;\n    map\
    \ {$vowels{$_} = $count; $count++} @vowels;", "    my @chars = split('', $message);\n\
    \    my $message_length = scalar @chars;\n    my $encoded_message = \"\";\n  \
    \  my $char;\n    my $is_upper;\n    my $upper_char;\n    my $upper_offset;\n\
    \    my $char_value;\n    my $offset;\n    my $encode_char;\n    for (my $i =\
    \ 0; $i < $message_length; $i++) {\n        $char = $chars[$i];\n        $is_upper\
    \ = is_upper($char);\n        $upper_char = convert_to_upper($char);\n       \
    \ $upper_offset = ord($upper_char) - 65;\n        $char_value = ord($char);\n\
    \        $offset = $upper_offset + 2;\n        if ($offset > 25) {\n         \
    \   $offset = $offset - 26;\n        }\n        $encode_char = convert_to_upper(chr($offset\
    \ + 65));\n        if ($is_upper) {\n            $encoded_message .= $encode_char;\n\
    \        } else {\n            $encoded_message .= lc($encode_char);\n       \
    \ }\n    }\n    return $encoded_message;\n}", "    my($encoded) = '';\n    foreach\
    \ my $char (split(//, $message)) {\n        if (substr(\"a,e,i,o,u\", index(substr(\"\
    A,E,I,O,U\", 0, length($char)), $char), 1) ne \"\") {\n            $encoded .=\
    \ substr(\"c,f,j,o,t\", index(substr(\"A,E,I,O,U\", 0, length($char)), $char),\
    \ 1);\n        } else {\n            $encoded .= $char;\n        }\n    }\n  \
    \  return $encoded;\n}", "    my $vowels = \"aeiou\";\n    $message =~ s/[aeiou]/$vowels/ge;\n\
    \    $message =~ s/y/a/g;\n    $message =~ s/[A-Z]/\\l$&/g;\n    return $message;\n\
    }", "    my($encoded);\n    my(@letters) = split(//, $message);\n    my(%vowels)\
    \ = ('a' => 'c', 'e' => 'g', 'i' => 'k', 'o' => 'q', 'u' => 'y');\n    foreach\
    \ my $letter (@letters) {\n        if ($letter =~ /[[:upper:]]/) {\n         \
    \   $letter = lc($letter);\n        } elsif ($letter =~ /[[:lower:]]/) {\n   \
    \         $letter = uc($letter);\n        } elsif (exists $vowels{$letter}) {\n\
    \            $letter = $vowels{$letter};\n        }\n        $encoded .= $letter;\n\
    \    }\n    return $encoded;\n}", "    my @result;\n    # your code here\n   \
    \ return join('', @result);\n}", "    my $coded_message = \"\";\n    my @chars\
    \ = split(\"\", $message);\n    for my $char (@chars) {\n        if ($char =~\
    \ /\\w/) {\n            my $new_char = \"\";\n            if ($char =~ /[A-Z]/)\
    \ {\n                $new_char = chr(ord($char) + 32);\n            } elsif ($char\
    \ =~ /[a-z]/) {\n                $new_char = chr(ord($char) - 32);\n         \
    \   }\n            if ($new_char =~ /[aeiou]/) {\n                my $index =\
    \ ord($new_char) - 97;\n                $index = ($index + 2) % 26;\n        \
    \        $new_char = chr($index + 97);\n            }\n            $coded_message\
    \ .= $new_char;\n        } else {\n            $coded_message .= $char;\n    \
    \    }\n    }\n    return $coded_message;\n}\nprint encode(\"This is a message\"\
    ) . \"\\n\";", "    my $vowels = \"AEIOU\";\n    my $alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    my %vowel_map = (\n        'A' => 'C',\n        'E' => 'G',\n        'I'\
    \ => 'K',\n        'O' => 'Q',\n        'U' => 'S',\n    );\n    my $encoded_message\
    \ = \"\";\n    for my $char (split \"\", $message) {\n        if (index($vowels,\
    \ $char) >= 0) {\n            $encoded_message .= $vowel_map{$char};\n       \
    \ } elsif (index($alphabet, $char) >= 0) {\n            $encoded_message .= $alphabet[(index($alphabet,\
    \ $char) + 2) % length($alphabet)];\n        } else {\n            $encoded_message\
    \ .= $char;\n        }\n    }\n    return $encoded_message;\n}", "    my $encoded_message\
    \ = '';\n    my @vowels = ('a','e','i','o','u');\n    my $vowel_index = 0;\n \
    \   my $vowel_length = @vowels;\n    for(my $i = 0; $i < length($message); $i++)\
    \ {\n        my $char = substr($message, $i, 1);\n        for($vowel_index = 0;\
    \ $vowel_index < $vowel_length; $vowel_index++) {\n            if($char eq $vowels[$vowel_index])\
    \ {\n                if($vowel_index + 2 > $vowel_length - 1) {\n            \
    \        $char = $vowels[$vowel_index + 2 - $vowel_length];\n                }\
    \ else {\n                    $char = $vowels[$vowel_index + 2];\n           \
    \     }\n                last;\n            }\n        }\n        if(ord($char)\
    \ >= 65 && ord($char) <= 90) {\n            $char = chr(ord($char) + 32);\n  \
    \      } elsif(ord($char) >= 97 && ord($char) <= 122) {\n            $char = chr(ord($char)\
    \ - 32);\n        }\n        $encoded_message .= $char;\n    }\n    return $encoded_message;\n\
    }", "    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i'\
    \ => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    my $encode =\
    \ '';\n    foreach my $letter (split //, $message) {\n        if (exists $vowels{lc\
    \ $letter}) {\n            $encode .= $vowels{lc $letter};\n        } elsif ($letter\
    \ =~ /[a-z]/) {\n            $encode .= uc $letter;\n        } else {\n      \
    \      $encode .= $letter;\n        }\n    }\n    return $encode;\n}", "    my\
    \ @out;\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my %vowels = map { $_\
    \ => 1 } @vowels;\n    my %alphabet = map { chr(ord('a') + $_) => $_ } (0..25);\n\
    \    foreach my $ch (split //, $message) {\n        if ($vowels{lc($ch)}) {\n\
    \            push @out, chr(ord('a') + (($alphabet{lc($ch)} + 2) % 26));\n   \
    \     } else {\n            push @out, $ch;\n        }\n    }\n    return join\
    \ \"\", @out;\n}", "    my @vowels = qw(A E I O U);\n    my @alphabet = qw(A B\
    \ C D E F G H I J K L M N O P Q R S T U V W X Y Z);\n    my %mapper = ();\n  \
    \  my $n = scalar(@alphabet);\n    for(my $i = 0; $i < $n; $i++) {\n        my\
    \ $vowel = $alphabet[$i];\n        my $next_pos = ($i + 2) % $n;\n        my $vowel_out\
    \ = $alphabet[$next_pos];\n        $mapper{$vowel} = $vowel_out;\n    }\n    my\
    \ @chars = split(\"\", $message);\n    my @out = ();\n    foreach my $c (@chars)\
    \ {\n        if(isupper($c)) {\n            $c = lc($c);\n        }\n        elsif(islower($c))\
    \ {\n            $c = uc($c);\n        }\n        if(exists($mapper{$c})) {\n\
    \            $c = $mapper{$c};\n        }\n        push(@out, $c);\n    }\n  \
    \  return join(\"\", @out);\n}", "    $message =~ tr/a-zA-Z/A-Za-z/;\n    $message\
    \ =~ tr/[aeiou]/[cdfghjklmnpqrstvwxyz]/;\n    return $message;\n}", "    my @words\
    \ = split(/\\s+/, $message);\n    my $encoded = \"\";\n    foreach my $word (@words)\
    \ {\n        foreach my $letter (split(//, $word)) {\n            $encoded .=\
    \ ($letter =~ /[aeiou]/i) ? chr(ord($letter) + 2) :\n                        \
    \                          ($letter =~ /[A-Z]/) ? lc($letter) :\n            \
    \                                                              uc($letter);\n\
    \        }\n        $encoded .= \" \";\n    }\n    chop($encoded);\n    return\
    \ $encoded;\n}", "    my %encoding = (\n        a => 'c', b => 'd', c => 'e',\
    \ d => 'f', e => 'g',\n        f => 'h', g => 'i', h => 'j', i => 'k', j => 'l',\n\
    \        k => 'm', l => 'n', m => 'o', n => 'p', o => 'q',\n        p => 'r',\
    \ q => 's', r => 't', s => 'u', t => 'v',\n        u => 'w', v => 'x', w => 'y',\
    \ x => 'z', y => 'a',\n        z => 'b'\n    );\n    my $encoded = '';\n    my\
    \ @message = split //, $message;\n    for my $char (@message) {\n        if ($char\
    \ =~ /[a-z]/i) {\n            $char =~ tr/A-Z/a-z/;\n            if ($char =~\
    \ /[aeiou]/) {\n                $char = $encoding{$char};\n            }\n   \
    \         $char =~ tr/a-z/A-Z/;\n        }\n        $encoded .= $char;\n    }\n\
    \    return $encoded;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
