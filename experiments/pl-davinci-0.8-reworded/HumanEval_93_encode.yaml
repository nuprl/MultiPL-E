name: HumanEval_93_encode
language: pl
prompt: "# Write a function that takes a message, and encodes in such a \n# way that\
  \ it swaps case of all letters, replaces all vowels in \n# the message with the\
  \ letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
  \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n#\
  \ >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n   \
  \ my($message) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
  \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
  ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
  ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT\
  \ kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n}\n\ntesthumaneval();"
completions: ["    my $encoded = \"\";\n    my $vowels = \"AEIOU\";\n    my $letters\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    for (my $i = 0; $i < length($message);\
    \ $i++) {\n        my $c = substr($message, $i, 1);\n        my $enc_letter =\
    \ \"\";\n        if ($c =~ /[a-z]/) {\n            # Lower case letter\n     \
    \       $enc_letter = uc($c);\n        } elsif ($c =~ /[A-Z]/) {\n           \
    \ # Upper case letter\n            $enc_letter = lc($c);\n        } else {\n \
    \           # Not a letter\n            $enc_letter = $c;\n        }\n       \
    \ if (index($vowels, $enc_letter) >= 0) {\n            my $index = index($letters,\
    \ $enc_letter);\n            $index += 2;\n            $index %= length($letters);\n\
    \            $enc_letter = substr($letters, $index, 1);\n        }\n        $encoded\
    \ .= $enc_letter;\n    }\n    return $encoded;\n}", "    my @list = split(//,\
    \ $message);\n    my @result = ();\n    foreach my $l (@list) {\n        my $code\
    \ = $l;\n        if ($l =~ /[a-z]/) {\n            $code = chr(ord('a') + (ord($l)\
    \ - ord('a') + 2) % 26);\n        } elsif ($l =~ /[A-Z]/) {\n            $code\
    \ = chr(ord('A') + (ord($l) - ord('A') + 2) % 26);\n        }\n        push(@result,\
    \ $code);\n    }\n    return join('', @result);\n}", "    my @letters = split\
    \ '', $message;\n    my @encoded;\n    my %vowels = (\n        'a' => 'c',\n \
    \       'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' =>\
    \ 'y',\n    );\n    for my $letter (@letters) {\n        my $new_letter = $letter;\n\
    \        if ($letter =~ /^[aeiou]$/i) {\n            $new_letter = $vowels{lc\
    \ $letter};\n        }\n        if ($letter =~ /^[a-z]$/) {\n            $new_letter\
    \ = chr(ord($letter) - 32);\n        }\n        elsif ($letter =~ /^[A-Z]$/) {\n\
    \            $new_letter = chr(ord($letter) + 32);\n        }\n        push @encoded,\
    \ $new_letter;\n    }\n    return join '', @encoded;\n}", "    my @array = split(//,\
    \ $message);\n    my @return_array;\n    foreach my $char (@array) {\n       \
    \ my $lower_char = lc($char);\n        if($lower_char eq 'a') {\n            $char\
    \ = lc($char) eq 'a' ? 'c' : 'C';\n        } elsif($lower_char eq 'e') {\n   \
    \         $char = lc($char) eq 'e' ? 'g' : 'G';\n        } elsif($lower_char eq\
    \ 'i') {\n            $char = lc($char) eq 'i' ? 'k' : 'K';\n        } elsif($lower_char\
    \ eq 'o') {\n            $char = lc($char) eq 'o' ? 'q' : 'Q';\n        } elsif($lower_char\
    \ eq 'u') {\n            $char = lc($char) eq 'u' ? 's' : 'S';\n        } else\
    \ {\n            $char = lc($char) eq $char ? uc($char) : lc($char);\n       \
    \ }\n        push(@return_array, $char);\n    }\n    return join('', @return_array);\n\
    }", "    my @new_message;\n    my @message = split(//, $message);\n    my %vowels\
    \ = (\"a\" => \"c\",\n                  \"e\" => \"g\",\n                  \"\
    i\" => \"k\",\n                  \"o\" => \"q\",\n                  \"u\" => \"\
    w\",\n                  \"A\" => \"C\",\n                  \"E\" => \"G\",\n \
    \                 \"I\" => \"K\",\n                  \"O\" => \"Q\",\n       \
    \           \"U\" => \"W\",\n                );\n    foreach my $letter (@message)\
    \ {\n        if (exists $vowels{$letter}) {\n            push(@new_message, $vowels{$letter});\n\
    \        } else {\n            push(@new_message, uc($letter));\n        }\n \
    \   }\n    return join(\"\", @new_message);\n}", "    my $output = '';\n    foreach\
    \ my $letter (split //, $message) {\n        my $old = lc($letter);\n        if\
    \ ($old eq $letter) {\n            $letter = uc($letter);\n        }\n       \
    \ $letter =~ tr/[aeiou]/[cfhkp]/;\n        $output .= $letter;\n    }\n    return\
    \ $output;\n}", "    my $encoded = \"\";\n    my $alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    my $alphabet2 = \"CDEFGHIJKLMNOPQRSTUVWXYZAB\";\n    my $counter = 0;\n\
    \    my $vowels = \"AEIOU\";\n    my $numVowels = 0;\n    my $vowelCount = 0;\n\
    \    my $length = length($message);\n    my $space = \" \";\n    while($counter\
    \ < $length) {\n        if($message =~ /$space/) {\n            $encoded = $encoded\
    \ . $space;\n            $counter++;\n        }\n        elsif(substr($message,\
    \ $counter, 1) =~ /[A-Z]/) {\n            $encoded = $encoded . substr($alphabet,\
    \ index($alphabet, substr($message, $counter, 1)), 1);\n            $counter++;\n\
    \        }\n        elsif(substr($message, $counter, 1) =~ /[a-z]/) {\n      \
    \      $encoded = $encoded . substr($alphabet, index($alphabet, uc(substr($message,\
    \ $counter, 1))), 1);\n            $counter++;\n        }\n        elsif(substr($message,\
    \ $counter, 1) =~ /[AEIOU]/) {\n            $encoded = $encoded . substr($alphabet2,\
    \ index($vowels, substr($message, $counter, 1)), 1);\n            $counter++;\n\
    \        }\n        elsif(substr($message, $counter, 1) =~ /[aeiou]/) {\n    \
    \        $encoded = $encoded . substr($alphabet2, index($vowels, uc(substr($message,\
    \ $counter, 1))), 1);\n            $counter++;\n        }\n    }\n    return $encoded;\n\
    }", "    my @chars = split //, $message;\n    my @result = ();\n    for my $char\
    \ (@chars) {\n        my $ch = $char;\n        if (is_vowel($char)) {\n      \
    \      $ch = next_vowel($char);\n        }\n        elsif (is_upper($char)) {\n\
    \            $ch = lc($char);\n        }\n        elsif (is_lower($char)) {\n\
    \            $ch = uc($char);\n        }\n        push @result, $ch;\n    }\n\
    \    return join '', @result;\n}", "    $message =~ tr/a-zA-Z/A-Za-z/;\n    my\
    \ @message = split '', $message;\n    my @alphabet = ('a'..'z');\n    my %vowels;\n\
    \    @vowels{@alphabet[0,4,8,14,20]} = @alphabet[2,6,10,16,22];\n    my $i = 0;\n\
    \    while ($i < @message) {\n        if (exists $vowels{$message[$i]}) {\n  \
    \          $message[$i] = $vowels{$message[$i]};\n        }\n        $i++;\n \
    \   }\n    return join '', @message;\n}\nmy $message = encode(\"This is a message\"\
    );\nprint \"$message\\n\";", "    my @message = split(\"\",$message);\n    my\
    \ @encode_message;\n    for (my $i = 0; $i < scalar(@message); $i++) {\n     \
    \   if ($message[$i] =~ /[a-z]/i) {\n            if ($message[$i] =~ /[a-z]/)\
    \ {\n                $message[$i] =~ tr/[a-z]/[A-Z]/;\n            }\n       \
    \     else {\n                $message[$i] =~ tr/[A-Z]/[a-z]/;\n            }\n\
    \            if ($message[$i] =~ /[aeiou]/i) {\n                $message[$i] =\
    \ next_char($message[$i]);\n                $message[$i] = next_char($message[$i]);\n\
    \            }\n        }\n        push(@encode_message,$message[$i]);\n    }\n\
    \    return join(\"\",@encode_message);\n}", "    my @alphabet = split('', 'abcdefghijklmnopqrstuvwxyz');\n\
    \    my @encoded = ();\n    my $vowels = 'aeiou';\n    my $en_vowels = 'cfilorux';\n\
    \    $message =~ s/[aeiou]/$en_vowels/g;\n    for my $char (split('', $message))\
    \ {\n        push @encoded, $char =~ /[a-z]/ ? uc($char) : lc($char);\n    }\n\
    \    return join('', @encoded);\n}\nprint encode(\"test\") . \"\\n\";\nprint encode(\"\
    This is a message\") . \"\\n\";", "    my %encode_letters = (\n        'a' =>\
    \ 'c', 'b' => 'd', 'c' => 'e', 'd' => 'f', 'e' => 'g', 'f' => 'h', 'g' => 'i',\
    \ 'h' => 'j', 'i' => 'k', 'j' => 'l', 'k' => 'm', 'l' => 'n', 'm' => 'o', 'n'\
    \ => 'p', 'o' => 'q', 'p' => 'r', 'q' => 's', 'r' => 't', 's' => 'u', 't' => 'v',\
    \ 'u' => 'w', 'v' => 'x', 'w' => 'y', 'x' => 'z', 'y' => 'a', 'z' => 'b',\n  \
    \      'A' => 'C', 'B' => 'D', 'C' => 'E', 'D' => 'F', 'E' => 'G', 'F' => 'H',\
    \ 'G' => 'I', 'H' => 'J', 'I' => 'K', 'J' => 'L', 'K' => 'M', 'L' => 'N', 'M'\
    \ => 'O', 'N' => 'P', 'O' => 'Q', 'P' => 'R', 'Q' => 'S', 'R' => 'T', 'S' => 'U',\
    \ 'T' => 'V', 'U' => 'W', 'V' => 'X', 'W' => 'Y', 'X' => 'Z', 'Y' => 'A', 'Z'\
    \ => 'B',\n    );\n    my $encoded_message = '';\n    my @letters = split('',\
    \ $message);\n    foreach my $letter (@letters) {\n        $encoded_message .=\
    \ $encode_letters{$letter};\n    }\n    return $encoded_message;\n}", "    my\
    \ $vowels = \"aeiou\";\n    my $newMessage = \"\";\n    foreach my $c (split //,\
    \ $message) {\n        my $newC = uc($c) eq $c ? lc($c) : uc($c);\n        if(index($vowels,\
    \ $newC) != -1) {\n            my $vowelIndex = index($vowels, $newC);\n     \
    \       my $newVowelIndex = ($vowelIndex + 2) % 5;\n            $newC = substr($vowels,\
    \ $newVowelIndex, 1);\n        }\n        $newMessage .= $newC;\n    }\n    return\
    \ $newMessage;\n}", "    $message = uc($message);\n    $message =~ s/A/C/g;\n\
    \    $message =~ s/E/G/g;\n    $message =~ s/I/K/g;\n    $message =~ s/O/Q/g;\n\
    \    $message =~ s/U/S/g;\n    return $message;\n}", "    my @letters = split(//,\
    \ $message);\n    my $encoded_msg = '';\n    foreach my $letter (@letters) {\n\
    \        if ($letter =~ /[aeiou]/i) {\n            my $encoded_letter = chr(ord($letter)\
    \ + 2);\n            $encoded_msg .= $encoded_letter;\n        } else {\n    \
    \        my $encoded_letter = uc($letter);\n            $encoded_msg .= $encoded_letter;\n\
    \        }\n    }\n    return $encoded_msg;\n}", "    my %encode_table = (\n \
    \       \"a\" => \"c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\",\n  \
    \      \"o\" => \"q\",\n        \"u\" => \"y\",\n        \"y\" => \"a\",\n   \
    \     \"A\" => \"C\",\n        \"E\" => \"G\",\n        \"I\" => \"K\",\n    \
    \    \"O\" => \"Q\",\n        \"U\" => \"Y\",\n        \"Y\" => \"A\",\n    );\n\
    \    my $encoded_message = \"\";\n    my @chars = split //, $message;\n    foreach\
    \ (@chars) {\n        if ($encode_table{$_}) {\n            $encoded_message .=\
    \ $encode_table{$_};\n        } else {\n            $encoded_message .= $_;\n\
    \        }\n    }\n    return $encoded_message;\n}", "    # remove this line\n\
    \    return $message;\n}", "    my @tokens = split //, $message;\n    my $encoded;\n\
    \    my $character;\n    foreach $character (@tokens) {\n        if ($character\
    \ =~ /[A-Z]/) {\n            $encoded .= lc($character);\n        }\n        elsif\
    \ ($character =~ /[a-z]/) {\n            $encoded .= uc($character);\n       \
    \ }\n        else {\n            $encoded .= $character;\n        }\n    }\n \
    \   my @encoded_tokens = split //, $encoded;\n    my $final_message;\n    foreach\
    \ $character (@encoded_tokens) {\n        if ($character =~ /[aeiou]/) {\n   \
    \         my $ascii_value = ord($character);\n            $ascii_value += 2;\n\
    \            $final_message .= chr($ascii_value);\n        }\n        else {\n\
    \            $final_message .= $character;\n        }\n    }\n    return $final_message;\n\
    }", "    my @tmp;\n    my $c;\n    my $swapCase = 'aAeEiIoOuU';\n    my $encodeCase\
    \ = 'cdefghijklmnopqrstuvwxyzabCDEFGHIJKLMNOPQRSTUVWXYZAB';\n    my %cipher =\
    \ map {substr($swapCase,$_,1) => substr($encodeCase,$_,1)} (0..length($swapCase)-1);\n\
    \    for my $c (split('',$message)) {\n        if (exists $cipher{$c}) {\n   \
    \         push @tmp, $cipher{$c};\n        } else {\n            push @tmp, $c;\n\
    \        }\n    }\n    return join('',@tmp);\n}", "    my $vowels = 'aeiou';\n\
    \    my $codemap = 'cfjkmnprtwxzCGJKMNPRTWXZ';\n    my $result = '';\n    for\
    \ (my $i = 0; $i < length($message); $i++) {\n        my $c = substr($message,\
    \ $i, 1);\n        my $upper = uc($c) eq $c;\n        $c = lc($c);\n        if\
    \ (index($vowels, $c) != -1) {\n            $c = substr($codemap, index($vowels,\
    \ $c), 1);\n        }\n        $c = uc($c) if $upper;\n        $result .= $c;\n\
    \    }\n    return $result;\n}", "    my $encoded_message = \"\";\n    my $char;\n\
    \    my $vowel;\n    foreach $char (split //, $message) {\n        if($char =~\
    \ /[a-z]/i) {\n            $encoded_message .= uc($char) if $char =~ /[a-z]/;\n\
    \            $encoded_message .= lc($char) if $char =~ /[A-Z]/;\n        }\n \
    \       else {\n            $encoded_message .= $char;\n        }\n    }\n   \
    \ foreach $vowel (qw/a e i o u/) {\n        my $next_vowel = vowel_next_to($vowel);\n\
    \        $encoded_message =~ s/$vowel/$next_vowel/g;\n    }\n    return $encoded_message;\n\
    }", "    #\n    # YOUR CODE HERE\n    #\n}", "    my $result = '';\n    my $vowels\
    \ = \"AEIOUaeiou\";\n    my $chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    ;\n    my @char_array = split //, $chars;\n    foreach my $char (split //, $message)\
    \ {\n        if ($vowels =~ /$char/) {\n            my $index = 0;\n         \
    \   $index++ until $char_array[$index] eq $char;\n            $result .= $char_array[($index\
    \ + 2) % @char_array];\n        } else {\n            $result .= $char;\n    \
    \    }\n    }\n    return $result;\n}", "    my $encoded = '';\n    my $vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    my $alphabet = ['a'..'z'];\n    my $index\
    \ = 0;\n    my $vowel_index = 0;\n    foreach my $char (split('', $message)) {\n\
    \        my $upper = 0;\n        my $lower = 0;\n        $index = 0;\n       \
    \ if ($char =~ /[A-Z]/) {\n            $upper = 1;\n            $lower = 0;\n\
    \            $char = lc($char);\n        } elsif ($char =~ /[a-z]/) {\n      \
    \      $upper = 0;\n            $lower = 1;\n        }\n        $vowel_index =\
    \ 0;\n        my $found = 0;\n        foreach my $vowel (@$vowels) {\n       \
    \     if ($char eq $vowel) {\n                $found = 1;\n                last;\n\
    \            }\n            $vowel_index++;\n        }\n        if ($found) {\n\
    \            $char = $vowels->[($vowel_index + 2) % 5];\n        }\n        $index\
    \ = 0;\n        foreach my $alpha (@$alphabet) {\n            if ($char eq $alpha)\
    \ {\n                last;\n            }\n            $index++;\n        }\n\
    \        if ($upper) {\n            $char = uc($alphabet->[($index + 2) % 26]);\n\
    \        } else {\n            $char = $alphabet->[($index + 2) % 26];\n     \
    \   }\n        $encoded .= $char;\n    }\n    return $encoded;\n}", "    my $letters\
    \ = 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz';\n    my $vowels =\
    \ 'AEIOUaeiou';\n    my $answer = '';\n    foreach my $letter (split //, $message)\
    \ {\n        if ($letter =~ /[A-Za-z]/) {\n            if ($letter =~ /[A-Z]/)\
    \ {\n                my($a, $b) = $letter =~ /(.)(.*)/;\n                $answer\
    \ .= $b =~ tr/a-zA-Z/A-Za-z/r;\n            }\n            else {\n          \
    \      my($a, $b) = $letter =~ /(.)(.*)/;\n                $answer .= $b =~ tr/a-zA-Z/A-Za-z/r;\n\
    \            }\n            my $pos = index($vowels, $letter);\n            if\
    \ ($pos > -1) {\n                $answer .= substr($vowels, $pos + 2, 1);\n  \
    \          }\n            else {\n                $answer .= $letter;\n      \
    \      }\n        }\n        else {\n            $answer .= $letter;\n       \
    \ }\n    }\n    return $answer;\n}", "    my @letters = split //, $message;\n\
    \    my @encoded_letters;\n    my %vowels = ( 'a' => 'c', 'e' => 'g', 'i' => 'k',\
    \ 'o' => 'q', 'u' => 'y' );\n    foreach my $letter (@letters) {\n        $letter\
    \ =~ tr/a-z/A-Z/;\n        if ($vowels{$letter}) {\n            push @encoded_letters,\
    \ $vowels{$letter};\n        } else {\n            push @encoded_letters, $letter;\n\
    \        }\n    }\n    return join '', @encoded_letters;\n}", "    my $new_message\
    \ = '';\n    my $vowels = [ 'a', 'e', 'i', 'o', 'u' ];\n    for my $c (split '',\
    \ $message) {\n        if (grep { $_ eq lc $c } @$vowels) {\n            $new_message\
    \ .= $vowels->[(firstidx { $_ eq lc $c } @$vowels) + 2 % scalar @$vowels];\n \
    \       } else {\n            $new_message .= $c;\n        }\n    }\n    return\
    \ $new_message;\n}", "    my @vowels = ('a'..'z', 'A'..'Z');\n    my $encoded;\n\
    \    for my $char (split(//, $message)) {\n        if ($char ~~ @vowels) {\n \
    \           my $encoded_char = '';\n            for my $i (0..length(@vowels)-1)\
    \ {\n                if ($char eq $vowels[$i]) {\n                    $encoded_char\
    \ = $vowels[$i+2];\n                    last;\n                }\n           \
    \ }\n            $encoded .= $encoded_char;\n        } else {\n            $encoded\
    \ .= $char;\n        }\n    }\n    return $encoded;\n}", "    $message =~ tr/a-zA-Z/A-Za-z/;\n\
    \    my $vowels = 'aAeEiIoOuU';\n    my $subs = 'cdefghijklmnopqrstuvwxyzabCDEFGHIJKLMNOPQRSTUVWXYZAB';\n\
    \    $message =~ tr/$vowels/$subs/;\n    return $message;\n}", "    my($encoded)\
    \ = \"\";\n    foreach my $ch (split(//, $message)) {\n        $encoded .= $ch;\n\
    \        # $encoded .= uc($ch) if ($ch =~ /[a-z]/);\n        # $encoded .= lc($ch)\
    \ if ($ch =~ /[A-Z]/);\n        if ($ch =~ /[a-z]/) {\n            $encoded .=\
    \ uc($ch);\n        } elsif ($ch =~ /[A-Z]/) {\n            $encoded .= lc($ch);\n\
    \        } else {\n            $encoded .= $ch;\n        }\n    }\n    return\
    \ $encoded;\n}", "    my($new_message) = \"\";\n    my(@alphabet) = qw(A B C D\
    \ E F G H I J K L M N O P Q R S T U V W X Y Z);\n    my(@vowels) = qw(A E I O\
    \ U);\n    foreach my $character (split(\"\", $message)) {\n        if (lc($character)\
    \ eq $character) {\n            $new_message .= uc($character);\n        } else\
    \ {\n            $new_message .= lc($character);\n        }\n        foreach my\
    \ $vowel (@vowels) {\n            if (lc($character) eq $vowel) {\n          \
    \      $new_message =~ s/$vowel/$alphabet[(array_position($vowel, @alphabet) +\
    \ 2) % 26]/eg;\n            }\n        }\n    }\n    return $new_message;\n}",
  "    my $result = \"\";\n    my @letters = split //, $message;\n    foreach my $letter\
    \ (@letters) {\n        $result .= $letter;\n    }\n    return $result;\n}", " \
    \   my $encode = \"\";\n    my @encode = split(//, $message);\n    my $alpha =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n    my @alpha = split(//, $alpha);\n    my\
    \ $enc_alpha = \"cdefghijklmnopqrstuvwxyzab\";\n    my @enc_alpha = split(//,\
    \ $enc_alpha);\n    my $vowels = \"aeiou\";\n    my @vowels = split(//, $vowels);\n\
    \    for (my $i = 0; $i < scalar(@encode); $i++) {\n        my $char = $encode[$i];\n\
    \        my $upper = 0;\n        if (uc($char) eq $char) {\n            $upper\
    \ = 1;\n        }\n        $char = lc($char);\n        my $found = 0;\n      \
    \  for (my $k = 0; $k < scalar(@alpha); $k++) {\n            if ($char eq $alpha[$k])\
    \ {\n                if ($upper) {\n                    $encode .= uc($enc_alpha[$k]);\n\
    \                } else {\n                    $encode .= $enc_alpha[$k];\n  \
    \              }\n                $found = 1;\n                last;\n       \
    \     }\n        }\n        if (!$found) {\n            $encode .= $char;\n  \
    \      }\n    }\n    return $encode;\n}", "    my @message = split(//, $message);\n\
    \    my @vowels = ('a','e','i','o','u');\n    foreach(@message) {\n        if($_\
    \ ~~ @vowels) {\n            my $index = ord($_) - 97;\n            $_ = chr(97\
    \ + ($index + 2) % 5);\n        }\n        else {\n            if(ord($_) < 97)\
    \ {\n                $_ = chr(ord($_) + 32);\n            }\n            else\
    \ {\n                $_ = chr(ord($_) - 32);\n            }\n        }\n    }\n\
    \    return join(\"\", @message);\n}", "    my @letters = split(//, $message);\n\
    \    my @new_letters;\n    my $vowels = \"AEIOUaeiou\";\n    my $alphabet = \"\
    ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n    for my $letter (@letters)\
    \ {\n        if (index($vowels, $letter) != -1) {\n            my $num = index($alphabet,\
    \ $letter);\n            $num += 2;\n            $num %= 52;\n            push\
    \ @new_letters, substr($alphabet, $num, 1);\n        } else {\n            push\
    \ @new_letters, $letter;\n        }\n    }\n    return join('', @new_letters);\n\
    }", "    my $encoded;\n    my $vowels = {\n        \"a\" => \"c\",\n        \"\
    e\" => \"g\",\n        \"i\" => \"k\",\n        \"o\" => \"q\",\n        \"u\"\
    \ => \"y\",\n    };\n    for (my $i = 0; $i < length($message); $i++) {\n    \
    \    my $char = substr($message, $i, 1);\n        if ($char =~ /[a-z]/i) {\n \
    \           if ($char =~ /[A-Z]/) {\n                $char = lc($char);\n    \
    \        } else {\n                $char = uc($char);\n            }\n       \
    \ }\n        if ($char =~ /[aeiou]/i) {\n            $char = $vowels->{lc($char)};\n\
    \        }\n        $encoded .= $char;\n    }\n    return $encoded;\n}\nprint\
    \ encode(\"This is a message\").\"\\n\";", "    $message =~ tr/A-Za-z/N-ZA-Mn-za-m/;\n\
    \    $message =~ tr/aeiouAEIOU/cghkCGHK/;\n    return $message;\n}", "    my @array\
    \ = split //, $message;\n    my $str;\n    foreach (@array) {\n        if ($_\
    \ =~ m/[a-z]/) {\n            $str .= uc($_);\n        } else {\n            $str\
    \ .= lc($_);\n        }\n    }\n    return $str;\n}", "    my $encoded = '';\n\
    \    for my $ch (split //, $message) {\n        $encoded .= $ch;\n        if($ch\
    \ =~ /[aeiou]/i) {\n            my $index = index(alpha(), $ch);\n           \
    \ my $next = substr(alpha(), $index + 2, 1);\n            if(!$next) {\n     \
    \           my $len = length(alpha());\n                $next = substr(alpha(),\
    \ ($index + 2) % $len, 1);\n            }\n            $encoded .= $next;\n  \
    \      }\n    }\n    return $encoded;\n}", "    my @letters = split //, $message;\n\
    \    my $result = \"\";\n    foreach my $letter (@letters) {\n        my $swap\
    \ = lc($letter) eq $letter ? uc($letter) : lc($letter);\n        my $code = $letter;\n\
    \        if ($swap =~ /[aeiou]/) {\n            $code =~ tr/aeiou/efghj/;\n  \
    \      }\n        $result .= $code;\n    }\n    return $result;\n}", "    my %swap_case\
    \ = (\n        A => 'a',\n        B => 'b',\n        C => 'c',\n        D => 'd',\n\
    \        E => 'e',\n        F => 'f',\n        G => 'g',\n        H => 'h',\n\
    \        I => 'i',\n        J => 'j',\n        K => 'k',\n        L => 'l',\n\
    \        M => 'm',\n        N => 'n',\n        O => 'o',\n        P => 'p',\n\
    \        Q => 'q',\n        R => 'r',\n        S => 's',\n        T => 't',\n\
    \        U => 'u',\n        V => 'v',\n        W => 'w',\n        X => 'x',\n\
    \        Y => 'y',\n        Z => 'z',\n        a => 'A',\n        b => 'B',\n\
    \        c => 'C',\n        d => 'D',\n        e => 'E',\n        f => 'F',\n\
    \        g => 'G',\n        h => 'H',\n        i => 'I',\n        j => 'J',\n\
    \        k => 'K',\n        l => 'L',\n        m => 'M',\n        n => 'N',\n\
    \        o => 'O',\n        p => 'P',\n        q => 'Q',\n        r => 'R',\n\
    \        s => 'S',\n        t => 'T',\n        u => 'U',\n        v => 'V',\n\
    \        w => 'W',\n        x => 'X',\n        y => 'Y',\n        z => 'Z',\n\
    \    );\n    my %map_vowels = (\n        A => 'C',\n        B => 'D',\n      \
    \  C => 'E',\n        D => 'F',\n        E => 'G',\n        F => 'H',\n      \
    \  G => 'I',\n        H => 'J',\n        I => 'K',\n        J => 'L',\n      \
    \  K => 'M',\n        L => 'N',\n        M => 'O',\n        N => 'P',\n      \
    \  O => 'Q',\n        P => 'R',\n        Q => 'S',\n        R => '", "    $message\
    \ = uc $message;\n    $message =~ s/[A-Z]/shift(@_)/ge;\n    return $message;\n\
    }", "    # you can use uc and lc to upper and lowercase a character.\n    # use\
    \ regex to search and replace [aeiou] with its encode\n    return $message;\n}",
  "    my $i = 0;\n    my $result = \"\";\n    while ($i < length($message)) {\n \
    \       my $char = substr($message, $i, 1);\n        if ($char =~ /[a-z]/i) {\n\
    \            if ($char =~ /[a-z]/) {\n                $char =~ tr/a-z/A-Z/;\n\
    \            } else {\n                $char =~ tr/A-Z/a-z/;\n            }\n\
    \            if ($char =~ /[aeiou]/i) {\n                $char = chr(ord($char)\
    \ + 2);\n            }\n        }\n        $result .= $char;\n        $i++;\n\
    \    }\n    return $result;\n}", "    my @message = split //, $message;\n    my\
    \ @translated_message;\n    foreach my $char (@message) {\n        if ($char =~\
    \ /[a-z]/i) {\n            my $is_upper = $char =~ /[A-Z]/;\n            $char\
    \ =~ tr/a-z/b-za/;\n            $char =~ tr/aeiou/cfowwa/;\n            $char\
    \ =~ tr/A-Z/B-ZA/ if $is_upper;\n        }\n        push @translated_message,\
    \ $char;\n    }\n    return join '', @translated_message;\n}", "    my @message\
    \ = split(//, $message);\n    my @new;\n    my %vowels = (\n        \"a\" => \"\
    c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\",\n        \"o\" => \"q\"\
    ,\n        \"u\" => \"w\",\n    );\n    foreach my $char (@message) {\n      \
    \  if ($char =~ /[a-z]/) {\n            $char = uc($char);\n        } elsif ($char\
    \ =~ /[A-Z]/) {\n            $char = lc($char);\n        } elsif ($char =~ /[aeiou]/)\
    \ {\n            $char = $vowels{$char};\n        }\n        push(@new, $char);\n\
    \    }\n    return join(\"\", @new);\n}", "    my @result = map {\n        my\
    \ $c = lc($_);\n        if ($c =~ /[aeiou]/) {\n            my $sub = ((ord($c)\
    \ - ord('a') + 2) % 26);\n            $c = chr(ord('a') + $sub);\n        }\n\
    \        $c = uc($c) if $_ eq $c;\n        $c;\n    } split //, $message;\n  \
    \  return join '', @result;\n}", "    my $output = \"\";\n    my @alphabet = (\"\
    a\"..\"z\");\n    for (my $i = 0; $i < length($message); $i++) {\n        my $c\
    \ = substr($message, $i, 1);\n        my $vowel_pos = index(\"aeiou\", $c);\n\
    \        if ($vowel_pos != -1) {\n            my $new_vowel_pos = ($vowel_pos\
    \ + 2) % 5;\n            $c = substr(\"aeiou\", $new_vowel_pos, 1);\n        }\n\
    \        my $alpha_pos = index(@alphabet, $c);\n        if ($alpha_pos != -1)\
    \ {\n            my $new_alpha_pos = ($alpha_pos + length(@alphabet) / 2) % length(@alphabet);\n\
    \            $c = substr(@alphabet, $new_alpha_pos, 1);\n        }\n        $output\
    \ .= $c;\n    }\n    return $output;\n}\nprint encode(\"test\"), \"\\n\";\nprint\
    \ encode(\"This is a message\"), \"\\n\";", "    my $encoded = \"\";\n    foreach\
    \ my $char (split //, $message) {\n        if ($char =~ /[aeiou]/i) {\n      \
    \      my $num = ord($char) + 2;\n            my $newchar = chr($num);\n     \
    \       $encoded .= $newchar;\n        } else {\n            $encoded .= $char;\n\
    \        }\n    }\n    return $encoded;\n}", "    return $message;\n}", "    #\
    \ your code here\n}", "    my $re = qr/[aeiou]/;\n    $message =~ s/$re/shift_vowel($&)/ge;\n\
    \    $message =~ tr/a-zA-Z/A-Za-z/;\n    return $message;\n}", "    my @message_array\
    \ = split //, $message;\n    my $output = \"\";\n    foreach my $chr (@message_array)\
    \ {\n        if ($chr =~ /[a-z]/) {\n            $output .= chr(ord($chr) - ord('a')\
    \ + ord('A'));\n        } elsif ($chr =~ /[A-Z]/) {\n            $output .= chr(ord($chr)\
    \ - ord('A') + ord('a'));\n        } else {\n            $output .= $chr;\n  \
    \      }\n    }\n    return $output;\n}", "    my %alphabet = qw(a b c d e f g\
    \ h i j k l m n o p q r s t u v w x y z\n                      A B C D E F G H\
    \ I J K L M N O P Q R S T U V W X Y Z);\n    my @letters = split //, $message;\n\
    \    my @codes;\n    for my $letter (@letters) {\n        my $code = $alphabet{$letter};\n\
    \        if ($code) {\n            $code += 2;\n            if ($code > 52) {\n\
    \                $code -= 26;\n            }\n            $code = $alphabet{$code};\n\
    \        }\n        push @codes, $code;\n    }\n    return join '', @codes;\n}",
  "    my $encoded = '';\n    foreach my $char (split(//, $message)) {\n        if\
    \ (ord($char) > 64 && ord($char) < 91) {\n            $encoded .= chr(ord($char)\
    \ + 32);\n        } elsif (ord($char) > 96 && ord($char) < 123) {\n          \
    \  $encoded .= chr(ord($char) - 32);\n        } else {\n            $encoded .=\
    \ $char;\n        }\n    }\n    $encoded =~ s/([aeiou])/chr(ord($1) + 2)/eg;\n\
    \    return $encoded;\n}", "    return '' unless defined $message;\n    return\
    \ '' unless $message;\n    my $vowels = \"aeiouAEIOU\";\n    my @vowels = split\
    \ //, $vowels;\n    my $two_ahead = \"cdfghjklmnpqrstvwxyzCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    my %two_ahead;\n    @two_ahead{@vowels} = split //, $two_ahead;\n    #\
    \ start with uppercase vowels\n    my @letters = split //, $message;\n    for\
    \ (my $i = 0; $i < scalar @letters; $i++) {\n        my $letter = $letters[$i];\n\
    \        if ($letter eq lc $letter) {\n            $letters[$i] = uc $letter;\n\
    \        } else {\n            $letters[$i] = lc $letter;\n        }\n       \
    \ if (exists $two_ahead{$letter}) {\n            $letters[$i] = $two_ahead{$letter};\n\
    \        }\n    }\n    return join '', @letters;\n}", "    my @letters = split\
    \ //, $message;\n    my $encoded_message = \"\";\n    my %vowels = (\n       \
    \ 'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n\
    \        'u' => 's',\n    );\n    foreach my $letter (@letters) {\n        if\
    \ ($letter =~ /[A-Z]/) {\n            $letter = lc($letter);\n        } elsif\
    \ ($letter =~ /[a-z]/) {\n            $letter = uc($letter);\n        }", "  \
    \  my @input = split //, $message;\n    my @result;\n    my $vowels = \"aeiouAEIOU\"\
    ;\n    my @vowels = split //, $vowels;\n    my $vowels_length = length($vowels);\n\
    \    my $vowels_mapping = \"cdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n   \
    \ my @vowels_mapping = split //, $vowels_mapping;\n    my $vowels_mapping_length\
    \ = length($vowels_mapping);\n    my %map = map { $vowels[$_] => $vowels_mapping[$_]\
    \ } 0..$vowels_length-1;\n    for(my $i = 0; $i < scalar @input; $i++) {\n   \
    \     if($input[$i] =~ /[a-zA-Z]/) {\n            my $char = $input[$i];\n   \
    \         if(exists $map{$char}) {\n                push @result, $map{$char};\n\
    \            }\n            else {\n                if($char =~ /[A-Z]/) {\n \
    \                   push @result, lc($char);\n                }\n            \
    \    else {\n                    push @result, uc($char);\n                }\n\
    \            }\n        }\n        else {\n            push @result, $input[$i];\n\
    \        }\n    }\n    return join \"\", @result;\n}", "    my %vowels = (\n \
    \       'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' =>\
    \ 'q',\n        'u' => 'y',\n    );\n    my $result = '';\n    my @chars = split\
    \ //, $message;\n    for my $char (@chars) {\n        if (exists $vowels{lc $char})\
    \ {\n            $result .= $vowels{lc $char};\n        } elsif ($char =~ /^[a-z]$/)\
    \ {\n            $result .= uc $char;\n        } elsif ($char =~ /^[A-Z]$/) {\n\
    \            $result .= lc $char;\n        } else {\n            $result .= $char;\n\
    \        }\n    }\n    return $result;\n}", "    my $msg_out = \"\";\n    my @vowels\
    \ = (\"a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n\
    \    my %letters = ();\n    my $count = 1;\n    foreach my $l (split //, $message)\
    \ {\n        $msg_out .= $l;\n        if (exists $vowels{lc($l)}) {\n        \
    \    $count = 0;\n            while ($count < 2) {\n                $msg_out =~\
    \ s/([aeiou])[^aeiou]*$/$letters{$1}/i;\n                $count++;\n         \
    \   }\n        }\n    }\n    return $msg_out;\n}", "    my($encoded) = '';\n \
    \   for my $letter (split '', $message) {\n        if ($letter =~ /[AEIOU]/i)\
    \ {\n            $encoded .= $VOWELS[(index($VOWELS, uc $letter) + 2) % 5];\n\
    \        } else {\n            $encoded .= ucfirst lc $letter;\n        }\n  \
    \  }\n    return $encoded;\n}", "    my($encoded) = \"\";\n    my($vowels) = \"\
    aeiouAEIOU\";\n    my($chars) = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    my($char);\n    my($i);\n    my($swap_char);\n    my($vowel_index);\n \
    \   my($char_index);\n    my($new_char);\n    # iterate over message characters\n\
    \    for($i = 0; $i < length($message); $i++) {\n        $char = substr($message,\
    \ $i, 1);\n        $char_index = index($chars, $char);\n        # swap case\n\
    \        if($char_index < 0) {\n            $swap_char = uc($char);\n        }\
    \ else {\n            $swap_char = lc($char);\n        }\n        # replace vowels\
    \ with the letter 2 places ahead\n        $vowel_index = index($vowels, $char);\n\
    \        if($vowel_index < 0) {\n            $new_char = $swap_char;\n       \
    \ } else {\n            $new_char = substr($vowels, ($vowel_index + 2) % 10, 1);\n\
    \        }\n        $encoded .= $new_char;\n    }\n    return $encoded;\n}", " \
    \   # your code goes here\n}", "    my @arr = ('A'..'Z', 'a'..'z');\n    my %h\
    \ = map { $_ => $arr[($_ + 2) % 26] } (0..25);\n    my $t = lc($message);\n  \
    \  $t =~ s/[aeiou]/$h{$t}/g;\n    return $t;\n}", "    my $encoded = \"\";\n \
    \   my $longer  = \"\";\n    my @letters = split(//, $message);\n    for my $letter\
    \ (@letters) {\n        if ($letter =~ /[aeiou]/i) {\n            $letter = vowel($letter);\n\
    \        } elsif ($letter =~ /[a-z]/i) {\n            $letter =~ tr/a-z/A-Z/;\n\
    \        }\n        $encoded .= $letter;\n    }\n    return $encoded;\n}", " \
    \   my @message = split //,$message;\n    my @encoded_message;\n    foreach my\
    \ $letter (@message) {\n        if ($letter =~ /[a-z]/) {\n            my $encoded_letter\
    \ = chr(ord($letter)+2);\n            if (ord($encoded_letter)>ord('z')) {\n \
    \               $encoded_letter = chr(ord($encoded_letter)-26);\n            }\n\
    \            push @encoded_message, $encoded_letter;\n        }\n        elsif\
    \ ($letter =~ /[A-Z]/) {\n            my $encoded_letter = chr(ord($letter)+2);\n\
    \            if (ord($encoded_letter)>ord('Z')) {\n                $encoded_letter\
    \ = chr(ord($encoded_letter)-26);\n            }\n            push @encoded_message,\
    \ $encoded_letter;\n        }\n        else {\n            push @encoded_message,\
    \ $letter;\n        }\n    }\n    return join '',@encoded_message;\n}", "    my\
    \ @message = split(//, $message);\n    my @vowels = qw(a e i o u);\n    my @vowels2\
    \ = qw(c f i l o);\n    my $i = 0;\n    my $j = 0;\n    foreach my $letter (@message)\
    \ {\n        if (uc($letter) eq $letter) {\n            $message[$i] = lc($letter);\n\
    \        } else {\n            $message[$i] = uc($letter);\n        }\n      \
    \  $i += 1;\n    }\n    foreach my $vowel (@vowels) {\n        foreach my $vowel2\
    \ (@vowels2) {\n            if ($message[$j] eq $vowel) {\n                $message[$j]\
    \ = $vowel2;\n            }\n            $j += 1;\n        }\n    }\n    return\
    \ join('', @message);\n}", "    $message =~ tr/a-zA-Z/c-za-bC-ZA-B/;\n    return\
    \ $message;\n}", '    $message = uc $message;', "    my $encoded = '';\n    my\
    \ $next_char = '';\n    my $vowels = 'aeiou';\n    for (my $i = 0; $i < length($message);\
    \ $i++) {\n        $next_char = substr($message, $i, 1);\n        if ($next_char\
    \ =~ /[a-z]/) {\n            $next_char = chr(ord($next_char) + 1);\n        \
    \    if ($next_char =~ /[aeiou]/) {\n                $next_char = chr(ord($next_char)\
    \ + 1);\n            }\n        } elsif ($next_char =~ /[A-Z]/) {\n          \
    \  $next_char = chr(ord($next_char) - 1);\n            if ($next_char =~ /[AEIOU]/)\
    \ {\n                $next_char = chr(ord($next_char) - 1);\n            }\n \
    \       }\n        $encoded .= $next_char;\n    }\n    return $encoded;\n}", " \
    \   $message =~ tr/A-Za-z/a-zA-Z/;\n    $message =~ tr/aeiou/eouai/;\n    return\
    \ $message;\n}\nprint encode(\"This is a message\");", "    $message =~ tr/a-zA-Z/A-Za-z/;\n\
    \    $message =~ tr/aeiou/cdfgh/;\n    return $message;\n}\nprint encode(\"this\
    \ is a message\"), \"\\n\";", "    my %vowels = ('a' => 'c', 'e' => 'g', 'i' =>\
    \ 'k', 'o' => 'q', 'u' => 'y');\n    my $output = \"\";\n    for my $character\
    \ (split //, $message) {\n        if ($character =~ /[aeiou]/i) {\n          \
    \  $output .= $vowels{lc($character)};\n        } else {\n            $output\
    \ .= uc($character);\n        }\n    }\n    return $output;\n}", "    my $encode_message\
    \ = \"\";\n    for (my $i = 0; $i < length($message); $i++) {\n        my $c =\
    \ substr($message, $i, 1);\n        if ($c =~ /[a-z]/) {\n            $encode_message\
    \ .= uc($c);\n        } elsif ($c =~ /[A-Z]/) {\n            $encode_message .=\
    \ lc($c);\n        } elsif ($c =~ /[a-zA-Z]/) {\n            $encode_message .=\
    \ $c;\n        }\n    }\n    return $encode_message;\n}", "    return undef if\
    \ !defined $message;\n    my %vowels = ('a' => 'c', 'e' => 'g', 'i' => 'k', 'o'\
    \ => 'q', 'u' => 'y');\n    my $encoded = \"\";\n    foreach my $char (split //,\
    \ $message) {\n        my $key = $char;\n        if (exists $vowels{$char}) {\n\
    \            $key = $vowels{$char};\n        } elsif ($char =~ /\\d/) {\n    \
    \        $key = $char;\n        } else {\n            my $ord = ord($char);\n\
    \            if ($ord >= ord('A') && $ord <= ord('Z')) {\n                $key\
    \ = lc($char);\n            } else {\n                $key = uc($char);\n    \
    \        }\n        }\n        $encoded .= $key;\n    }\n    return $encoded;\n\
    }", "    $message =~ tr/a-zA-Z/b-zaB-ZA/;\n    $message =~ tr/AEIOU/CEGIK/;\n\
    \    return $message;\n}", "    my $cipher = \"\";\n    my @vowels = qw(A E I\
    \ O U);\n    my %vowels_map = (\n        A => 'C',\n        E => 'G',\n      \
    \  I => 'K',\n        O => 'S',\n        U => 'Y',\n    );\n    for (split //,\
    \ $message) {\n        if (is_vowel($_)) {\n            $cipher .= $vowels_map{$_};\n\
    \        } else {\n            $cipher .= $_;\n        }\n    }\n    $cipher =~\
    \ tr/A-Z/a-z/;\n    $cipher =~ tr/a-z/b-za/;\n    return $cipher;\n}", "    $message\
    \ =~ tr/a-zA-Z/b-zaB-ZA/;\n    $message =~ tr/aAeEiIoOuU/cCgGhHjJmMqQ/;\n    return\
    \ $message;\n}", "    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $encoded\
    \ = \"\";\n    my @chars = split //, $message;\n    for my $char (@chars) {\n\
    \        if ($char eq uc($char)) {\n            $char = lc($char);\n        }\
    \ else {\n            $char = uc($char);\n        }\n        if ($char =~ /[aeiou]/)\
    \ {\n            my $index = index($alphabet, $char);\n            $index += 2;\n\
    \            $char = substr($alphabet, $index, 1);\n        }\n        $encoded\
    \ .= $char;\n    }\n    return $encoded;\n}", "    $message =~ tr/A-Za-z/a-zA-Z/;\n\
    \    my @chars = split //, $message;\n    my $vowels = 'aeiouAEIOU';\n    my @vowels\
    \ = split //, $vowels;\n    my $vowels_length = @vowels;\n    for (my $i = 0;\
    \ $i < @chars; $i++) {\n        for (my $j = 0; $j < $vowels_length; $j++) {\n\
    \            if ($chars[$i] eq $vowels[$j]) {\n                my $index = $j\
    \ + 2;\n                if ($index > $vowels_length - 1) {\n                 \
    \   $index = $index - $vowels_length;\n                }\n                $chars[$i]\
    \ = $vowels[$index];\n            }\n        }\n    }\n    return join '', @chars;\n\
    }", "    return undef unless defined $message;\n    return '' unless $message;\n\
    \    my $encoded = '';\n    foreach my $ch (split '', $message) {\n        if\
    \ ($ch =~ /[A-Z]/) {\n            $encoded .= $ch =~ tr/A-Z/a-z/;\n        } elsif\
    \ ($ch =~ /[a-z]/) {\n            $encoded .= $ch =~ tr/a-z/A-Z/;\n        } elsif\
    \ ($ch =~ /[aeiou]/) {\n            $encoded .= chr(ord($ch) + 2);\n        }\
    \ else {\n            $encoded .= $ch;\n        }\n    }\n    return $encoded;\n\
    }", "    my %vowels = (\n        \"a\" => \"c\",\n        \"e\" => \"g\",\n  \
    \      \"i\" => \"k\",\n        \"o\" => \"q\",\n        \"u\" => \"y\",\n   \
    \ );\n    my $result = '';\n    for my $char (split \"\", $message) {\n      \
    \  if (exists $vowels{lc $char}) {\n            $result .= $vowels{lc $char};\n\
    \        } elsif ($char =~ /[a-z]/) {\n            $result .= uc $char;\n    \
    \    } else {\n            $result .= $char;\n        }\n    }\n    return $result;\n\
    }", "    my %vowels = (a => 'c', e => 'g', i => 'k', o => 'q', u => 'y');\n  \
    \  my $letters = ucfirst($message);\n    $letters =~ s/([aeiou])/$vowels{$1}/g;\n\
    \    return $letters;\n}", "    my %encode_vowels = qw(\n            a c\n   \
    \         e g\n            i k\n            o m\n            u w\n           \
    \ A C\n            E G\n            I K\n            O M\n            U W\n  \
    \      );\n    my @msg_chars = split //, $message;\n    my @encoded_chars = map\
    \ {\n        if (exists $encode_vowels{$_}) {\n            $encode_vowels{$_};\n\
    \        } else {\n            tr/A-Za-z/a-zA-Z/;\n            $_;\n        }\n\
    \    } @msg_chars;\n    return join '', @encoded_chars;\n}", "    my $result =\
    \ \"\";\n    for my $letter (split \"\", $message) {\n        if ($letter =~ /[aeiou]/i)\
    \ {\n            my $upper = ($letter eq uc $letter);\n            $letter = lc\
    \ $letter;\n            if ($letter eq \"u\") {\n                $letter = \"\
    a\";\n            } elsif ($letter eq \"z\") {\n                $letter = \"b\"\
    ;\n            } else {\n                ++$letter;\n            }\n         \
    \   $letter = uc $letter if $upper;\n        }\n        $result .= $letter;\n\
    \    }\n    return $result;\n}", "    my @result;\n    my $letter;\n    for (my\
    \ $i = 0; $i < length($message); $i++) {\n        $letter = substr($message, $i,\
    \ 1);\n        if ($letter =~ /[a-z]/) {\n            $letter =~ tr/a-z/A-Z/;\n\
    \            push(@result, $letter);\n        } elsif ($letter =~ /[A-Z]/) {\n\
    \            $letter =~ tr/A-Z/a-z/;\n            push(@result, $letter);\n  \
    \      } else {\n            push(@result, $letter);\n        }\n    }\n    my\
    \ $result = join('', @result);\n    my @vowels = qw/a e i o u/;\n    foreach my\
    \ $vowel (@vowels) {\n        my $vowel_up = uc($vowel);\n        my $next_vowel_up\
    \ = uc(shift(@vowels));\n        my $next_vowel = lc($next_vowel_up);\n      \
    \  $result =~ s/$vowel/$next_vowel/g;\n        $result =~ s/$vowel_up/$next_vowel_up/g;\n\
    \    }\n    return $result;\n}", "    my $result = '';\n    my @alphabet = ('a'..'z');\n\
    \    for (my $i = 0; $i < length($message); $i++) {\n        if (substr($message,\
    \ $i, 1) =~ /[a-z]/i) {\n            my $char_ord = ord(substr($message, $i, 1));\n\
    \            my $char = $char_ord & 0x5f;\n            my $case = $char_ord &\
    \ 0x20;\n            my $index = index('abcdefghijklmnopqrstuvwxyz', $char);\n\
    \            if ($index >= 0) {\n                $index = ($index + $case + 2)\
    \ % 26;\n                $result .= $alphabet[$index];\n            }\n      \
    \  }\n    }\n    return $result;\n}", "    my $result = \"\";\n    my $i;\n  \
    \  my $len = length($message);\n    my $current_letter;\n    my $code;\n    for($i\
    \ = 0; $i < $len; $i++){\n        $current_letter = substr($message, $i, 1);\n\
    \        $code = ord($current_letter);\n        # If a lowercase letter\n    \
    \    if($code >= 97 && $code <= 122){\n            # Make uppercase\n        \
    \    $code -= 32;\n        }\n        # If a vowel, change it\n        elsif($code\
    \ == 65 || $code == 69 || $code == 73 || $code == 79 || $code == 85){\n      \
    \      $code += 2;\n            if($code > 85){\n                $code -= 20;\n\
    \            }\n        }\n        $result .= chr($code);\n    }\n    return $result;\n\
    }\nprint encode(\"test\") . \"\\n\";\nprint encode(\"This is a message\") . \"\
    \\n\";\nprint encode(\"Test This MESSAGE\") . \"\\n\";\nprint encode(\"hello world\"\
    ) . \"\\n\";\nprint encode(\"1234567\") . \"\\n\";\nprint encode(\"\") . \"\\\
    n\";", "    my $encoded_message = $message;\n    $encoded_message =~ tr/[a-z]/[A-Z]/;",
  "    my $encoded_message = \"\";\n    for my $i (0..length($message)-1) {\n    \
    \    my $current_char = substr($message, $i, 1);\n        my $encoded_char = $current_char;\n\
    \        if($current_char =~ /[A-Z]/) {\n            $encoded_char = lc($current_char);\n\
    \        } elsif($current_char =~ /[a-z]/) {\n            $encoded_char = uc($current_char);\n\
    \        }\n        if($current_char =~ /[AEIOU]/) {\n            $encoded_char\
    \ = chr(ord($encoded_char) + 2);\n        }\n        $encoded_message .= $encoded_char;\n\
    \    }\n    return $encoded_message;\n}", "    my @chars = split('', $message);\n\
    \    my @result = map {\n        my $char = $_;\n        $char = lc($char) if\
    \ ($char =~ /[A-Z]/);\n        $char = uc($char) if ($char =~ /[a-z]/);\n    \
    \    $char = get_next_vowel($char) if ($char =~ /[aeiou]/);\n        $char = get_next_vowel($char)\
    \ if ($char =~ /[AEIOU]/);\n        $char;\n    } @chars;\n    return join(\"\"\
    , @result);\n}", "    my @message = split(//,$message);\n    my $encoded_message\
    \ = \"\";\n    my %encode_hash = (\n        a => c,\n        b => d,\n       \
    \ c => e,\n        d => f,\n        e => g,\n        f => h,\n        g => i,\n\
    \        h => j,\n        i => k,\n        j => l,\n        k => m,\n        l\
    \ => n,\n        m => o,\n        n => p,\n        o => q,\n        p => r,\n\
    \        q => s,\n        r => t,\n        s => u,\n        t => v,\n        u\
    \ => w,\n        v => x,\n        w => y,\n        x => z,\n        y => a,\n\
    \        z => b\n    );\n    foreach my $chr (@message) {\n        my $lower_chr\
    \ = lc($chr);\n        if (exists $encode_hash{$lower_chr}) {\n            if\
    \ ($chr =~ /[A-Z]/) {\n                $encoded_message .= uc($encode_hash{$lower_chr});\n\
    \            }\n            else {\n                $encoded_message .= $encode_hash{$lower_chr};\n\
    \            }\n        }\n        else {\n            $encoded_message .= $chr;\n\
    \        }\n    }\n    return $encoded_message;\n}", "    my %swap = (\n     \
    \   a => 'C', b => 'D', c => 'E', d => 'F', e => 'G',\n        f => 'H', g =>\
    \ 'I', h => 'J', i => 'K', j => 'L',\n        k => 'M', l => 'N', m => 'O', n\
    \ => 'P', o => 'Q',\n        p => 'R', q => 'S', r => 'T', s => 'U', t => 'V',\n\
    \        u => 'W', v => 'X', w => 'Y', x => 'Z', y => 'A',\n        z => 'B',\n\
    \    );\n    my %vowels = (\n        a => 'C', e => 'G', i => 'K', o => 'Q', u\
    \ => 'W',\n    );\n    my $encoded = \"\";\n    my @letters = split(//, $message);\n\
    \    for my $letter (@letters) {\n        if (exists $vowels{$letter}) {\n   \
    \         $encoded .= $vowels{$letter};\n        }\n        elsif (exists $swap{$letter})\
    \ {\n            $encoded .= $swap{$letter};\n        }\n        else {\n    \
    \        $encoded .= $letter;\n        }\n    }\n    return $encoded;\n}", " \
    \   my $encoded;\n    $encoded =~ s/[a-zA-Z]//g;\n    $encoded =~ tr/a-zA-Z/A-Za-z/;\n\
    \    $encoded =~ s/[aeiou]/uc(chr(ord(lc($&))+2))/eg;\n    return $encoded;\n}",
  "    my $encoded_message = \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    for my $i (0 .. length($message) - 1) {\n        my $char = substr($message,\
    \ $i, 1);\n        if (in_array(\\@vowels, $char)) {\n            $encoded_message\
    \ .= $vowels[($i + 2) % scalar(@vowels)];\n        } else {\n            $encoded_message\
    \ .= uc($char);\n        }\n    }\n    return $encoded_message;\n}", "    my @letters\
    \ = split //, $message;\n    my $encoded_message = '';\n    foreach my $letter\
    \ (@letters) {\n        if (is_vowel($letter)) {\n            $encoded_message\
    \ .= get_vowel_index($letter) + 2;\n        }\n        else {\n            $encoded_message\
    \ .= get_vowel_index($letter);\n        }\n    }\n    return $encoded_message;\n\
    }", "    my $encoded = \"\";\n    my @vowels = qw(a e i o u);\n    # todo: your\
    \ code here\n}", "    my $swap_mess = swapcase($message);\n    my $vowel_mess\
    \ = encode_vowels($swap_mess);\n    return $vowel_mess;\n}", "    #@vowels = ('a',\
    \ 'e', 'i', 'o', 'u');\n    #my $i = 0;\n    #while ($i < @vowels) {\n    #  \
    \  $vowels[$i] = chr(ord($vowels[$i]) + 2);\n    #    $i++;\n    #}\n    #print\
    \ \"@vowels\\n\";\n    my $letter;\n    my $i = 0;\n    while ($i < length($message))\
    \ {\n        $letter = lc(substr($message, $i, 1));\n        if ($letter eq 'a')\
    \ {\n            substr($message, $i, 1) = 'c';\n        } elsif ($letter eq 'e')\
    \ {\n            substr($message, $i, 1) = 'g';\n        } elsif ($letter eq 'i')\
    \ {\n            substr($message, $i, 1) = 'k';\n        } elsif ($letter eq 'o')\
    \ {\n            substr($message, $i, 1) = 'm';\n        } elsif ($letter eq 'u')\
    \ {\n            substr($message, $i, 1) = 'o';\n        } elsif ($letter eq 't')\
    \ {\n            substr($message, $i, 1) = 'G';\n        } elsif ($letter eq 'h')\
    \ {\n            substr($message, $i, 1) = 'H';\n        } elsif ($letter eq 's')\
    \ {\n            substr($message, $i, 1) = 'S';\n        } elsif ($letter eq '\
    \ ') {\n            substr($message, $i, 1) = ' ';\n        } else {\n       \
    \     substr($message, $i, 1) = chr(ord($letter) - 2);\n        }\n        $i++;\n\
    \    }\n    return $message;\n}", "    my $encoded = \"\";\n    my $ascii = ord(\"\
    a\");\n    my $aeiou = \"aeiou\";\n    foreach my $letter (split(\"\", $message))\
    \ {\n        my $l = lc($letter);\n        if ($l eq $letter) {\n            $encoded\
    \ .= uc($letter);\n        } else {\n            $encoded .= $letter;\n      \
    \  }\n        if (index($aeiou, $l) != -1) {\n            my $index = (ord($l)\
    \ - $ascii + 2) % 26;\n            $encoded .= chr($index + $ascii);\n       \
    \ }\n    }\n    return $encoded;\n}", "    my @array = unpack('c*', $message);\n\
    \    my $encoded_message = '';\n    my %vowels = (\n        'a' => 1,\n      \
    \  'e' => 1,\n        'i' => 1,\n        'o' => 1,\n        'u' => 1,\n    );\n\
    \    for my $char (@array) {\n        if ($char > 64 && $char < 91) {\n      \
    \      $char += 32;\n        } elsif ($char > 96 && $char < 123) {\n         \
    \   $char -= 32;\n        }\n        if ($vowels{chr($char)}) {\n            $char\
    \ += 2;\n            if ($char > 122) {\n                $char -= 26;\n      \
    \      }\n        }\n        $encoded_message .= chr($char);\n    }\n    return\
    \ $encoded_message;\n}", "    my @encoded_message;\n    my $encoded_letter;\n\
    \    foreach my $letter (split(//, $message)) {\n        if ($letter =~ /[a-z]/i)\
    \ {\n            if ($letter =~ /[a-z]/) {\n                $encoded_letter =\
    \ uc($letter);\n            } else {\n                $encoded_letter = lc($letter);\n\
    \            }\n            if ($encoded_letter =~ /[aeiou]/) {\n            \
    \    $encoded_letter =~ tr/a-z/c-za-b/;\n            }\n        } else {\n   \
    \         $encoded_letter = $letter;\n        }\n        push(@encoded_message,\
    \ $encoded_letter);\n    }\n    return join('', @encoded_message);\n}", "    my($new_message);\n\
    \    for(my $i = 0; $i < length($message); $i++) {\n        my($char) = substr($message,\
    \ $i, 1);\n        my($ord) = ord($char);\n        if($ord > 64 && $ord < 91)\
    \ {\n            $ord += 32;\n        }\n        if($ord > 96 && $ord < 123) {\n\
    \            if($ord == 97) {\n                $ord = 101;\n            } elsif($ord\
    \ == 101) {\n                $ord = 105;\n            } elsif($ord == 105) {\n\
    \                $ord = 111;\n            } elsif($ord == 111) {\n           \
    \     $ord = 117;\n            } elsif($ord == 117) {\n                $ord =\
    \ 97;\n            } elsif($ord == 65) {\n                $ord = 69;\n       \
    \     } elsif($ord == 69) {\n                $ord = 73;\n            } elsif($ord\
    \ == 73) {\n                $ord = 79;\n            } elsif($ord == 79) {\n  \
    \              $ord = 85;\n            } elsif($ord == 85) {\n               \
    \ $ord = 65;\n            }\n        }\n        $new_message .= chr($ord);\n \
    \   }\n    return $new_message;\n}", "    my($output) = '';\n    my(@message)\
    \ = split //, $message;\n    my(@chars) = ('a'..'z');\n    my(%vowels) = ( 'a'\
    \ => 1, 'e' => 1, 'i' => 1, 'o' => 1, 'u' => 1);\n    foreach my $char (@message)\
    \ {\n        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n \
    \               $char = uc($char);\n            } else {\n                $char\
    \ = lc($char);\n            }\n            if ($vowels{$char}) {\n           \
    \     my($position) = 0;\n                foreach my $c (@chars) {\n         \
    \           if ($c eq $char) {\n                        last;\n              \
    \      }\n                    $position++;\n                }\n              \
    \  $position = $position + 2;\n                if ($position > 25) {\n       \
    \             $position = $position - 26;\n                }\n               \
    \ $char = $chars[$position];\n            }\n        }\n        $output .= $char;\n\
    \    }\n    return $output;\n}", "    my @message = split //,$message;\n    my\
    \ @keys = ();\n    my @values = ();\n    for my $i (@message) {\n        push\
    \ @keys, $i;\n        push @values, $i =~ tr/[a-z]/[b-za]/r;\n    }\n    my %mapping\
    \ = ();\n    for my $i (@keys) {\n        $mapping{$i} = shift @values;\n    }\n\
    \    my $encoded_message = '';\n    foreach my $char ( split //, $message ) {\n\
    \        $encoded_message .= $mapping{$char};\n    }\n    return $encoded_message;\n\
    }", "    my $encoded = \"\";\n    my $vowels = 'aeiou';\n    my $vowels_encoded\
    \ = 'cegik';\n    for (my $i = 0; $i < length($message); $i++) {\n        my $char\
    \ = substr($message, $i, 1);\n        if ($char =~ /[a-z]/i) {\n            $char\
    \ =~ tr/A-Za-z/N-ZA-Mn-za-m/;\n            if ($char =~ /[$vowels]/i) {\n    \
    \            my $index = index($vowels, lc($char));\n                $char = substr($vowels_encoded,\
    \ $index, 1);\n            }\n        }\n        $encoded .= $char;\n    }\n \
    \   return $encoded;\n}", "    my $count = 0;\n    my @message_arr = split(//,\
    \ $message);\n    my @vowels = split(//, 'aeiou');\n    my @upvowels = split(//,\
    \ 'AEIOU');\n    my @new_arr;\n    my $new_message;\n    my $vowel_count = 0;\n\
    \    foreach (@message_arr) {\n        if ($_ =~ /[a-z]/) {\n            $new_arr[$count]\
    \ = uc($_);\n        } elsif ($_ =~ /[A-Z]/) {\n            $new_arr[$count] =\
    \ lc($_);\n        } else {\n            $new_arr[$count] = $_;\n        }\n \
    \       $count++;\n    }\n    $count = 0;\n    while ($count < scalar(@new_arr))\
    \ {\n        if ($new_arr[$count] =~ /[aeiou]/) {\n            foreach (@vowels)\
    \ {\n                if ($new_arr[$count] eq $_) {\n                    $new_arr[$count]\
    \ = $vowels[$vowel_count + 2];\n                }\n                $vowel_count++;\n\
    \            }\n            $vowel_count = 0;\n        } elsif ($new_arr[$count]\
    \ =~ /[AEIOU]/) {\n            foreach (@upvowels) {\n                if ($new_arr[$count]\
    \ eq $_) {\n                    $new_arr[$count] = $upvowels[$vowel_count + 2];\n\
    \                }\n                $vowel_count++;\n            }\n         \
    \   $vowel_count = 0;\n        }\n        $count++;\n    }\n    $new_message =\
    \ join('', @new_arr);\n    return $new_message;\n}", "    my %swap_hash = ( \"\
    a\" => \"c\", \"e\" => \"g\", \"i\" => \"k\", \"o\" => \"q\", \"u\" => \"w\",\
    \ \"y\" => \"a\",\n                      \"A\" => \"C\", \"E\" => \"G\", \"I\"\
    \ => \"K\", \"O\" => \"Q\", \"U\" => \"W\", \"Y\" => \"A\" );\n    my $swap_case\
    \ = sub { \n                        my $char = shift;\n                      \
    \  if ( exists $swap_hash{$char} ) {\n                            return $swap_hash{$char};\n\
    \                        } else {\n                            return $char;\n\
    \                        }\n                     };\n    my $swap_message = \"\
    \";\n    my @message_chars = split(//, $message);\n    foreach my $char (@message_chars)\
    \ {\n        $swap_message .= $swap_case->($char);\n    }\n    return $swap_message;\n\
    }", "    my $result = '';\n    my @message = split //, $message;\n    my @letters\
    \ = ('a'..'z');\n    my @vowels = ('a','e','i','o','u');\n    my $letter_index\
    \ = 0;\n    my $vowel_index = 0;\n    my %vowel_map = (\n        'a' => 'c',\n\
    \        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' =>\
    \ 'y',\n    );\n    foreach my $letter (@message) {\n        $letter_index = index_of($letter,\
    \ @letters);\n        if ($letter_index != -1) {\n            $letter = $letters[$letter_index]\
    \ eq uc($letters[$letter_index]) ? \n                lc($letters[$letter_index])\
    \ : \n                uc($letters[$letter_index]);\n            $vowel_index =\
    \ index_of($letter, @vowels);\n            if ($vowel_index != -1) {\n       \
    \         $letter = $vowel_map{$letter};\n            }\n        }\n        $result\
    \ .= $letter;\n    }\n    return $result;\n}", "    my @message = split(\"\",\
    \ $message);\n    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\");\n    my @encoded\
    \ = ();\n    for my $i (0..$#message) {\n        if(index($message[$i], $vowels[0])\
    \ == 0) {\n            push(@encoded, $vowels[2]);\n        } elsif(index($message[$i],\
    \ $vowels[1]) == 0) {\n            push(@encoded, $vowels[3]);\n        } elsif(index($message[$i],\
    \ $vowels[2]) == 0) {\n            push(@encoded, $vowels[4]);\n        } elsif(index($message[$i],\
    \ $vowels[3]) == 0) {\n            push(@encoded, $vowels[0]);\n        } elsif(index($message[$i],\
    \ $vowels[4]) == 0) {\n            push(@encoded, $vowels[1]);\n        } else\
    \ {\n            if(uc($message[$i]) eq $message[$i]) {\n                push(@encoded,\
    \ lc($message[$i]));\n            } else {\n                push(@encoded, uc($message[$i]));\n\
    \            }\n        }\n    }\n    return join(\"\", @encoded);\n}", "    my\
    \ @chars = split(//, $message);\n    my @encoded_message;\n    my $char;\n   \
    \ my $char_code;\n    my $vowels = \"aeiou\";\n    my $encoded_char;\n    foreach\
    \ $char (@chars) {\n        $char_code = ord($char);\n        if (index($vowels,\
    \ $char) >= 0) {\n            $encoded_char = chr($char_code + 2);\n        }\
    \ elsif ($char_code > 96) {\n            $encoded_char = chr($char_code - 32);\n\
    \        } else {\n            $encoded_char = chr($char_code + 32);\n       \
    \ }\n        push(@encoded_message, $encoded_char);\n    }\n    return join(\"\
    \", @encoded_message);\n}", "    my @swapped = map { $_ =~ /[a-z]/i ? lc($_) :\
    \ $_ } split(//, $message);\n    my @result = map { $_ =~ /[aeiou]/i ? substr('zyxwvutsrqponmlkjihgfedcba',\
    \ index('aeiou', lc($_)), 1) : $_ } @swapped;\n    return join(\"\", @result);\n\
    }", "    my @arr = split //, $message;\n    my $encoded = \"\";\n    my %encodings\
    \ = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n       \
    \ 'o' => 'q',\n        'u' => 'y',\n        'A' => 'C',\n        'E' => 'G',\n\
    \        'I' => 'K',\n        'O' => 'Q',\n        'U' => 'Y',\n    );\n    for\
    \ my $c (@arr) {\n        if (exists $encodings{$c}) {\n            $encoded .=\
    \ $encodings{$c};\n        } else {\n            $encoded .= lc $c eq $c ? uc\
    \ $c : lc $c;\n        }\n    }\n    return $encoded;\n}", "    my @encoded_message\
    \ = ();\n    my @message = split(\"\", $message);\n    my @vowels = qw(a e i o\
    \ u);\n    foreach my $letter (@message) {\n        if(lc($letter) eq $letter)\
    \ {\n            if(grep {$_ eq $letter} @vowels) {\n                my $index\
    \ = $#vowels;\n                for(my $i = 0; $i < $index; $i++) {\n         \
    \           if($vowels[$i] eq $letter) {\n                        $index = $i;\n\
    \                        last;\n                    }\n                }\n   \
    \             push(@encoded_message, $vowels[($index + 2) % 5]);\n           \
    \ } else {\n                push(@encoded_message, uc($letter));\n           \
    \ }\n        } else {\n            if(grep {$_ eq lc($letter)} @vowels) {\n  \
    \              my $index = $#vowels;\n                for(my $i = 0; $i < $index;\
    \ $i++) {\n                    if($vowels[$i] eq lc($letter)) {\n            \
    \            $index = $i;\n                        last;\n                   \
    \ }\n                }\n                push(@encoded_message, lc($vowels[($index\
    \ + 2) % 5]));\n            } else {\n                push(@encoded_message, lc($letter));\n\
    \            }\n        }\n    }\n    return join(\"\", @encoded_message);\n}",
  "    my $encoded_message = \"\";\n    my @chars = split(//, $message);\n    my $vowels\
    \ = \"aeiou\";\n    my $vowels_hash = \"\";\n    $vowels_hash{$vowels} = 1;\n\
    \    for my $char (@chars) {\n        if (exists $vowels_hash{$char}) {\n    \
    \        if ($char eq \"u\") {\n                $encoded_message .= \"a\";\n \
    \           }\n            else {\n                $encoded_message .= substr\
    \ $vowels, index($vowels, $char) + 2, 1;\n            }\n        }\n        else\
    \ {\n            if ($char =~ /[A-Z]/) {\n                $encoded_message .=\
    \ lc $char;\n            }\n            else {\n                $encoded_message\
    \ .= uc $char;\n            }\n        }\n    }\n    return $encoded_message;\n\
    }", "    my @array = split(\"\",$message);\n    my @newarray;\n    my $i = 0;\n\
    \    my $l = $#array;\n    while ($i <= $l) {\n        if ($array[$i] =~ /[a-z]/)\
    \ {\n            $array[$i] =~ tr/a-z/A-Z/;\n            if ($array[$i] =~ /[AEIOU]/)\
    \ {\n                if ($array[$i] eq \"U\") {\n                    $array[$i]\
    \ = \"W\";\n                } elsif ($array[$i] eq \"O\") {\n                \
    \    $array[$i] = \"Q\";\n                } else {\n                    $array[$i]\
    \ = chr(ord($array[$i]) + 2);\n                }\n            }\n        } elsif\
    \ ($array[$i] =~ /[A-Z]/) {\n            $array[$i] =~ tr/A-Z/a-z/;\n        \
    \    if ($array[$i] =~ /[aeiou]/) {\n                if ($array[$i] eq \"u\")\
    \ {\n                    $array[$i] = \"w\";\n                } elsif ($array[$i]\
    \ eq \"o\") {\n                    $array[$i] = \"q\";\n                } else\
    \ {\n                    $array[$i] = chr(ord($array[$i]) + 2);\n            \
    \    }\n            }\n        }\n        $i++;\n    }\n    $message = join(\"\
    \",@array);\n    return $message;\n}", "    my @message = split //, $message;\n\
    \    my @encoded;\n    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n\
    \        'i' => 'k',\n        'o' => 'q',\n        'u' => 's',\n    );\n    foreach\
    \ my $letter (@message) {\n        if (exists $vowels{$letter}) {\n          \
    \  push @encoded, $vowels{$letter};\n        } elsif ($letter =~ /[[:lower:]]/)\
    \ {\n            push @encoded, uc $letter;\n        } elsif ($letter =~ /[[:upper:]]/)\
    \ {\n            push @encoded, lc $letter;\n        } else {\n            push\
    \ @encoded, $letter;\n        }\n    }\n    return join '', @encoded;\n}", " \
    \   my $result = '';\n    my $alpha = 'aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ';\n\
    \    my @alpha = split(\"\", $alpha);\n    my $vowels = 'aAeEiIoOuU';\n    my\
    \ @vowels = split(\"\", $vowels);\n    my $strLength = length($message);\n   \
    \ for (my $i = 0; $i < $strLength; $i++) {\n        if ($message =~ m/[a-zA-Z]/)\
    \ {\n            my $char = substr($message, $i, 1);\n            my $idx = index($alpha,\
    \ $char);\n            if ($idx == -1) {\n                $result .= $char;\n\
    \            } else {\n                if ($idx % 2 == 0) {\n                \
    \    $result .= substr($alpha, $idx + 1, 1);\n                } else {\n     \
    \               $result .= substr($alpha, $idx - 1, 1);\n                }\n \
    \           }\n        } else {\n            $result .= $message;\n        }\n\
    \    }\n    return $result;\n}", "    my @vowels = qw/a e i o u/;\n    my $alpha\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    my %hash = map { $alpha->[$_] => $alpha->[$_+2]\
    \ } (0..25);\n    my @characters = split //, $message;\n    my @encoded_message;\n\
    \    for my $char (@characters) {\n        if ($char =~ /[a-z]/i) {\n        \
    \    if ($char =~ /[a-z]/) {\n                $char = uc $char;\n            }\n\
    \            if (exists $hash{lc $char}) {\n                push @encoded_message,\
    \ $hash{lc $char};\n            } else {\n                push @encoded_message,\
    \ $char;\n            }\n        } else {\n            push @encoded_message,\
    \ $char;\n        }\n    }\n    return join \"\", @encoded_message;\n}", "   \
    \ my @vowels = ('a'..'z');\n    my @vowels2 = ('c'..'z');\n    my $encoded_message\
    \ = '';\n    $message = lc($message);\n    for (my $i = 0; $i < length($message);\
    \ $i++) {\n        my $char = substr($message, $i, 1);\n        if ($char ~~ @vowels)\
    \ {\n            my $char2 = substr($message, $i+1, 1);\n            $encoded_message\
    \ .= substr($char2, 0, 1);\n        } else {\n            $encoded_message .=\
    \ $char;\n        }\n    }\n    return $encoded_message;\n}", "    return encode_message($message);\n\
    }", "    my %convert;\n    my @message_chars = split(//, $message);\n    my $new_message\
    \ = \"\";\n    foreach my $c (@message_chars) {\n        if ($c =~ /[A-Z]/) {\n\
    \            $c = lc($c);\n        }\n        else {\n            $c = uc($c);\n\
    \        }\n        $new_message .= $c;\n    }\n    @message_chars = split(//,\
    \ $new_message);\n    foreach my $c (@message_chars) {\n        if ($c =~ /[AEIOU]/)\
    \ {\n            if ($c eq \"u\") {\n                $convert{$c} = \"a\";\n \
    \           }\n            else {\n                $convert{$c} = chr(ord($c)\
    \ + 2);\n            }\n        }\n    }\n    foreach my $c (@message_chars) {\n\
    \        if (exists $convert{$c}) {\n            $new_message =~ s/$c/$convert{$c}/;\n\
    \        }\n    }\n    return $new_message;\n}", "    my $encoded = \"\";\n  \
    \  for my $letter (split(//, $message)) {\n        my $offset = 2;\n        if\
    \ ($letter =~ /[AEIOU]/) {\n            $offset = 4;\n        }\n        if ($letter\
    \ =~ /[aeiou]/) {\n            $offset = -4;\n        }\n        my $ord = ord($letter);\n\
    \        $encoded .= chr($ord + $offset);\n    }\n    return $encoded;\n}", " \
    \   my @characters = split('',$message);\n    my @encoded;\n    my $char;\n  \
    \  my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n\
    \        'o' => 'q',\n        'u' => 'y',\n    );\n    foreach my $c (@characters)\
    \ {\n        if ($c =~ /[A-Z]/) {\n            $char = lc($c);\n        } elsif\
    \ ($c =~ /[a-z]/) {\n            $char = uc($c);\n        }\n        if (exists\
    \ $vowels{$char}) {\n            $char = $vowels{$char};\n        }\n        push(@encoded,$char);\n\
    \    }\n    return join('',@encoded);\n}", "    my $ret = \"\";\n    foreach my\
    \ $char (split(//, $message)) {\n        if($char =~ /[aeiouAEIOU]/) {\n     \
    \       my $index = index(\"AEIOU\", uc($char));\n            $index = ($index\
    \ + 2) % 5;\n            $char = substr(\"aeiou\", $index, 1);\n        }\n  \
    \      $ret .= $char;\n    }\n    return uc($ret);\n}", "    my @chars = split\
    \ //, $message;\n    for(my $i = 0; $i < scalar @chars; $i++) {\n        if($chars[$i]\
    \ =~ /[A-Z]/) {\n            $chars[$i] = lc($chars[$i]);\n        } else {\n\
    \            $chars[$i] = uc($chars[$i]);\n        }\n        if($chars[$i] =~\
    \ /[aeiou]/) {\n            my $next = substr($chars[$i], 0, 1);\n           \
    \ my $next_next = ord($next) + 2;\n            $chars[$i] = chr($next_next);\n\
    \        }\n    }\n    return join(\"\", @chars);\n}", "    $message =~ tr/a-zA-Z/b-zaB-ZA/;\n\
    \    $message =~ tr/aeiou/ceghik/;\n    return $message;\n}", "    # your code\
    \ here\n    $message = uc($message);\n    my $temp = \"\";\n    foreach my $char\
    \ (split //, $message) {\n        if($char eq \"A\") {\n            $temp .= \"\
    C\";\n        } elsif($char eq \"E\") {\n            $temp .= \"G\";\n       \
    \ } elsif($char eq \"I\") {\n            $temp .= \"K\";\n        } elsif($char\
    \ eq \"O\") {\n            $temp .= \"Q\";\n        } elsif($char eq \"U\") {\n\
    \            $temp .= \"S\";\n        } else {\n            $temp .= $char;\n\
    \        }\n    }\n    return $temp;\n}", "    my %map;\n    my @vowels = ('a',\
    \ 'e', 'i', 'o', 'u');\n    foreach my $i (0..$#vowels) {\n        my $index =\
    \ $i + 2;\n        $index = $index - 5 if $index > 4;\n        $map{$vowels[$i]}\
    \ = $vowels[$index];\n    }\n    my $encoded = uc($message);\n    $encoded =~\
    \ s/([a-z])/$map{$1} || lc($1)/eg;\n    return $encoded;\n}", "    my @alphabet\
    \ = ('a'..'z');\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my $output =\
    \ '';\n    my $code = '';\n    my $test = '';\n    my $test_code = '';\n    foreach\
    \ my $letter (split(//, $message)) {\n        $test = lc($letter);\n        $test_code\
    \ = uc($letter);\n        foreach my $vowel (@vowels) {\n            if ($test\
    \ eq $vowel) {\n                $letter = lc($code = shift(@alphabet));\n    \
    \            $letter = $code = shift(@alphabet);\n            }\n            if\
    \ ($test_code eq $vowel) {\n                $letter = uc($code = shift(@alphabet));\n\
    \                $letter = $code = shift(@alphabet);\n            }\n        }\n\
    \        $output .= $letter;\n    }\n    return $output;\n}", "    my $encoded\
    \ = \"\";\n    foreach my $char (split //, $message) {\n        if ($char =~ /[a-z]/i)\
    \ {\n            if ($char =~ /[A-Z]/) {\n                $encoded .= encodeChar($char);\n\
    \            } else {\n                $encoded .= encodeChar(uc($char));\n  \
    \          }\n        } else {\n            $encoded .= $char;\n        }\n  \
    \  }\n    return $encoded;\n}", "    my $ret = \"\";\n    my @vowels = ('a', 'e',\
    \ 'i', 'o', 'u');\n    my $re = '['.join('', @vowels).']';\n    while ($message\
    \ =~ /($re)/g) {\n        my $match = $1;\n        my $idx = first_index { $_\
    \ eq $match } @vowels;\n        $idx = ($idx + 2) % @vowels;\n        my $enc\
    \ = $vowels[$idx];\n        $ret .= $enc;\n    }\n    return $ret;\n}\nsay encode(\"\
    test\");\nsay encode(\"This is a message\");\nsay encode(\"Z\");", "    my $alphabet\
    \ = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    my $vowels = 'AEIOU';\n    my $encoded\
    \ = '';\n    for my $letter (split(//, uc($message))) {\n        if ($letter =~\
    \ /[A-Z]/) {\n            if ($letter =~ /[$vowels]/) {\n                $encoded\
    \ .= substr($alphabet, index($alphabet, $letter) + 2, 1);\n            } else\
    \ {\n                $encoded .= $letter;\n            }\n        } else {\n \
    \           $encoded .= $letter;\n        }\n    }\n    return $encoded;\n}",
  "    $message =~ tr/a-zA-Z/b-zaB-ZA/;\n    $message =~ tr/aeiou/cegik/;\n    return\
    \ $message;\n}", "    my $result = \"\";\n    my $encoded_char;\n    my $i;\n\
    \    my $char;\n    my $is_upper;\n    my $vowel_index;\n    my $vowel_count;\n\
    \    my @VOWELS = qw(A E I O U a e i o u);\n    my $vowel_len = scalar(@VOWELS);\n\
    \    my $char_code;\n    my $encoded_char_code;\n    my $letter_count = length($message);\n\
    \    for($i = 0; $i < $letter_count; $i++){\n        $char = substr($message,\
    \ $i, 1);\n        if($char eq $char){\n            $char_code = ord($char);\n\
    \            $is_upper = ($char_code >= 65 && $char_code <= 90) ? 1 : 0;\n   \
    \         for($vowel_index = 0; $vowel_index < $vowel_len; $vowel_index++){\n\
    \                if($char eq $VOWELS[$vowel_index]){\n                    $vowel_count\
    \ = $vowel_index + 2;\n                    $encoded_char_code = $char_code + $vowel_count;\n\
    \                    $encoded_char = chr($encoded_char_code);\n              \
    \      $encoded_char = ($is_upper) ? uc($encoded_char) : lc($encoded_char);\n\
    \                    last;\n                }\n            }\n            if(!defined($encoded_char)){\n\
    \                $encoded_char = ($is_upper) ? lc($char) : uc($char);\n      \
    \      }\n        }\n        $result .= $encoded_char;\n    }\n    return $result;\n\
    }", "    $message =~ tr/A-Za-z/a-zA-Z/;\n    $message =~ tr/aeiou/cdfgjkl/;\n\
    \    return $message;\n}", "    $message =~ tr/a-zA-Z/c-za-bC-ZA-B/;\n    $message\
    \ =~ tr/aeiou/eioua/;\n    return $message;\n}", "    my @message = split '',\
    \ $message;\n    foreach my $char (@message) {\n        if ( $char =~ /[aeiou]/i\
    \ ) {\n            $char = chr(ord($char) + 2);\n        }\n        else {\n \
    \           $char = chr(ord($char) + 1);\n        }\n    }\n    return join '',\
    \ @message;\n}\nmy $message = 'This is a message';\nmy $ciphertext = encode($message);\n\
    print \"Original message: $message\\n\";\nprint \"Ciphertext: $ciphertext\\n\"\
    ;", "    my @letters = split(//, $message);\n    my @new_message;\n    my $upper\
    \ = 0;\n    my $vowel = 0;\n    foreach my $letter (@letters) {\n        if (ord($letter)\
    \ >= 65 && ord($letter) <= 90) {\n            $upper = 1;\n        }\n       \
    \ if ($letter =~ /[AEIOUaeiou]/) {\n            $vowel = 1;\n        }\n     \
    \   if ($upper) {\n            $letter = lc($letter);\n            $upper = 0;\n\
    \        }\n        if ($vowel) {\n            my $vowel_index = get_index($letter);\n\
    \            my $vowel_index_plus_two = $vowel_index + 2;\n            if ($vowel_index_plus_two\
    \ >= 21) {\n                $vowel_index_plus_two = $vowel_index_plus_two - 21;\n\
    \            }\n            $letter = $alphabet[$vowel_index_plus_two];\n    \
    \        $vowel = 0;\n        }\n        push @new_message, $letter;\n    }\n\
    \    return join(\"\", @new_message);\n}", "    my @vowels = qw{a e i o u};\n\
    \    my @alphabet = qw{a b c d e f g h i j k l m n o p q r s t u v w x y z};\n\
    \    my $newmessage = '';\n    my @encoded = ();\n    foreach my $letter (split\
    \ //, $message) {\n        if ($letter =~ /[[:upper:]]/) {\n            if (lc($letter)\
    \ ~~ @vowels) {\n                if ($letter eq 'u') {\n                    $newmessage\
    \ .= 'a';\n                } else {\n                    my $key = firstidx {$_\
    \ eq lc($letter)} @alphabet;\n                    $newmessage .= uc($alphabet[$key\
    \ + 2]);\n                }\n            } else {\n                $newmessage\
    \ .= $letter;\n            }\n        } else {\n            if ($letter ~~ @vowels)\
    \ {\n                if ($letter eq 'u') {\n                    $newmessage .=\
    \ 'a';\n                } else {\n                    my $key = firstidx {$_ eq\
    \ $letter} @alphabet;\n                    $newmessage .= $alphabet[$key + 2];\n\
    \                }\n            } else {\n                $newmessage .= uc($letter);\n\
    \            }\n        }\n    }\n    return $newmessage;\n}", "    my @message_array\
    \ = split '', $message;\n    my $vowels = 'aeiou';\n    for my $i (0..$#message_array)\
    \ {\n        if ($message_array[$i] =~ /[a-z]/i) {\n            my $ascii_code\
    \ = ord $message_array[$i];\n            if ($ascii_code >= 65 && $ascii_code\
    \ <= 90) {\n                $ascii_code += 32;\n            }\n            $ascii_code\
    \ += 2;\n            $message_array[$i] = chr $ascii_code;\n            if ($message_array[$i]\
    \ =~ /[$vowels]/) {\n                $ascii_code += 2;\n                $message_array[$i]\
    \ = chr $ascii_code;\n            }\n        }\n    }\n    my $encoded_message\
    \ = join '', @message_array;\n    return $encoded_message;\n}\nprint encode(\"\
    test\").\"\\n\";\nprint encode(\"This is a message\").\"\\n\";", "    my @a =\
    \ split(//, $message);\n    foreach my $char (@a) {\n        if ($char =~ /[aeiou]/i)\
    \ {\n            $char =~ tr/aeiou/BFJKP/;\n        } else {\n            $char\
    \ =~ tr/a-z/A-Z/;\n        }\n    }\n    return join('', @a);\n}", "    my %vowels\
    \ = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n       \
    \ 'o' => 'q',\n        'u' => 'y',\n    );\n    my $encoded_message = '';\n  \
    \  foreach my $char (split('', $message)) {\n        if (exists $vowels{lc($char)})\
    \ {\n            $encoded_message .= $vowels{lc($char)};\n        } else {\n \
    \           $encoded_message .= ($char =~ /[[:upper:]]/) ? lc($char) : uc($char);\n\
    \        }\n    }\n    return $encoded_message;\n}", "    my $alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\
    \    $message = uc($message);\n    $message =~ s/[AEIOU]/lc(substr($alphabet,\
    \ index($alphabet, uc($&)) + 2, 1))/ge;\n    return $message;\n}", "    my $encoded_message\
    \ = \"\";\n    my $length = length($message);\n    my $i = 0;\n    while ($i <\
    \ $length) {\n        if ($message =~ /^[a-zA-Z]/) {\n            my $char = substr($message,\
    \ $i, 1);\n            if ($char =~ /^[A-Z]/) {\n                $char = lc($char);\n\
    \            } else {\n                $char = uc($char);\n            }\n   \
    \         if ($char =~ /^[aeiou]/) {\n                my $new_char = substr($message,\
    \ $i + 2, 1);\n                $encoded_message .= $new_char;\n              \
    \  $i += 3;\n            } else {\n                $encoded_message .= $char;\n\
    \                $i++;\n            }\n        } else {\n            $i++;\n \
    \       }\n    }\n    return $encoded_message;\n}", "    my $encoded = \"\";\n\
    \    my $vowels = \"aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my $currentLetter;\n    my $index;\n    my $vowelIndex;\n    my $newLetter;\n\
    \    my $vowel;\n    my $newAlphabet;\n    my $letterCase;\n    my $lower = lc($message);\n\
    \    my $upper = uc($message);\n    my $letterCount = length($message);\n    my\
    \ $vowelCount = length($vowels);\n    #print $message, \"\\n\";\n    #print $alphabet,\
    \ \"\\n\";\n    for(my $i = 0; $i < $letterCount; $i++) {\n        $currentLetter\
    \ = substr($message, $i, 1);\n        #print $currentLetter, \"\\n\";\n      \
    \  $index = index($alphabet, $currentLetter);\n        #print $index, \"\\n\"\
    ;\n        $letterCase = substr($lower, $i, 1);\n        if($letterCase eq $currentLetter)\
    \ {\n            $letterCase = \"lower\";\n        } else {\n            $letterCase\
    \ = \"upper\";\n        }\n        #print $letterCase, \"\\n\";\n        if($index\
    \ == -1) {\n            $newLetter = $currentLetter;\n        } else {\n     \
    \       $vowelIndex = index($vowels, $currentLetter);\n            if($vowelIndex\
    \ == -1) {\n                if($letterCase eq \"lower\") {\n                 \
    \   $newLetter = lc(substr($alphabet, $index + 2, 1));\n                } else\
    \ {\n                    $newLetter = uc(substr($alphabet, $index + 2, 1));\n\
    \                }\n            } else {\n                if($letterCase eq \"\
    lower\") {\n                    $newLetter = lc(substr($vowels, $vowelIndex +\
    \ 2, 1));\n                } else {\n                    $newLetter = uc(substr($vowels,\
    \ $vowelIndex + 2, 1));\n                }\n            }\n        }\n       \
    \ $encoded = $encoded .", "    return join(\"\", map {\n        if (/[aeiou]/i)\
    \ {\n            my $letter = get_letter_after($_, 2);\n            uc($letter);\n\
    \        } else {\n            lc($_);\n        }\n    } split(\"\", $message));\n\
    }", "    my @message_letters = split(\"\", $message);\n    my $encoded_message\
    \ = \"\";\n    foreach my $letter (@message_letters) {\n        my $encoded_letter\
    \ = $letter;\n        if ($letter =~ /[a-z]/i) {\n            if ($letter =~ /[a-z]/)\
    \ {\n                $encoded_letter = uc($letter);\n            } else {\n  \
    \              $encoded_letter = lc($letter);\n            }\n            if ($letter\
    \ =~ /[aeiou]/i) {\n                my $new_index = substr(INDEX, index(INDEX,\
    \ $letter), 1);\n                if ($new_index) {\n                    my $new_index\
    \ = substr(INDEX, index(INDEX, $letter), 1);\n                    $encoded_letter\
    \ = substr(INDEX, index(INDEX, $new_index) + 2, 1);\n                }\n     \
    \       }\n        }\n        $encoded_message .= $encoded_letter;\n    }\n  \
    \  return $encoded_message;\n}", "    my %vowels = (\n        'a' => 'c',\n  \
    \      'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' => 's',\n\
    \    );\n    my $result = '';\n    my @chars = split '', $message;\n    foreach\
    \ my $c (@chars) {\n        if ($c =~ /[a-z]/i) {\n            $result .= uc $c;\n\
    \        } elsif ($c =~ /[aeiou]/i) {\n            $result .= $vowels{lc $c};\n\
    \        } else {\n            $result .= $c;\n        }\n    }\n    return $result;\n\
    }", "    $message =~ tr/a-zA-Z/A-Za-z/;\n    $message =~ tr/a-z/c-za-b/;\n   \
    \ return $message;\n}", "    $message =~ tr/a-zA-Z/A-Za-z/;\n    $message =~ tr/acegikmoqsuwy/CEGIKMOQSUWY/;\n\
    \    return $message;\n}", "    my @message_split = split('', $message);\n   \
    \ my $encoded_message = '';\n    foreach my $letter (@message_split) {\n     \
    \   if ($letter =~ /[aeiou]/i) {\n            $encoded_message .= next_letter($letter);\n\
    \        } else {\n            $encoded_message .= $letter;\n        }\n    }\n\
    \    return $encoded_message;\n}", "    $message =~ tr/a-zA-Z/hjklnrHJKLNR/;\n\
    \    return $message;\n}", "    my %alphabet = (\n        \"a\" => \"c\",\n  \
    \      \"e\" => \"g\",\n        \"i\" => \"k\",\n        \"o\" => \"q\",\n   \
    \     \"u\" => \"w\",\n        \"y\" => \"a\",\n        \"A\" => \"C\",\n    \
    \    \"E\" => \"G\",\n        \"I\" => \"K\",\n        \"O\" => \"Q\",\n     \
    \   \"U\" => \"W\",\n        \"Y\" => \"A\",\n    );\n    $message =~ s/([aeiouyAEIOUY])/$alphabet{$1}/g;\n\
    \    return $message;\n}", "    my @char = split(//, $message);\n    my $res =\
    \ \"\";\n    my $letter;\n    foreach my $c (@char) {\n        if ($c =~ /[A-Z]/)\
    \ {\n            $letter = lc($c);\n        } elsif ($c =~ /[a-z]/) {\n      \
    \      $letter = uc($c);\n        } else {\n            $letter = $c;\n      \
    \  }\n        if ($letter =~ /[aeiou]/) {\n            my $l = ord($letter);\n\
    \            my $l2 = chr($l + 2);\n            $res .= $l2;\n        } else {\n\
    \            $res .= $letter;\n        }\n    }\n    return $res;\n}", "    #print(\"\
    Original Message: \", $message, \"\\n\");\n    my $len = length($message);\n \
    \   my $returnmessage = \"\";\n    for(my $i = 0; $i < $len; $i++) {\n       \
    \ #if(ord(substr($message, $i, 1)) >= 97 && ord(substr($message, $i, 1)) <= 122)\
    \ {\n        #    $returnmessage .= chr(ord(substr($message, $i, 1)) - 32);\n\
    \        #}\n        #elsif(ord(substr($message, $i, 1)) >= 65 && ord(substr($message,\
    \ $i, 1)) <= 90) {\n        #    $returnmessage .= chr(ord(substr($message, $i,\
    \ 1)) + 32);\n        #}\n        #else {\n        #    $returnmessage .= substr($message,\
    \ $i, 1);\n        #}\n        my $char = substr($message, $i, 1);\n        if(isVowel($char))\
    \ {\n            $returnmessage .= getVowel(2, $char);\n        }\n        else\
    \ {\n            $returnmessage .= $char;\n        }\n    }\n    #print(\"Encoded\
    \ Message: \", $returnmessage, \"\\n\");\n    return $returnmessage;\n}", "  \
    \  my $result = \"\";\n    foreach my $char (split(//, $message)) {\n        my\
    \ $char_num = ord($char);\n        # We're assuming only letters so skip any that\
    \ aren't\n        next if ($char_num < 65 || $char_num > 122);\n        # Do we\
    \ need to wrap around the alphabet\n        if ($char_num + 2 > 122) {\n     \
    \       $char_num -= 24;\n        }\n        # Is this a vowel?\n        if ($char\
    \ =~ /[AEIOUaeiou]/) {\n            $char_num += 2;\n        }\n        # Is this\
    \ letter upper or lower case?\n        if ($char_num < 97) {\n            $char_num\
    \ += 32;\n        } else {\n            $char_num -= 32;\n        }\n        $result\
    \ .= chr($char_num);\n    }\n    return $result;\n}", "    my $message_out = \"\
    \";\n    my @alphabet = qw(a b c d e f g h i j k l m n o p q r s t u v w x y z);\n\
    \    my %vowels = ('a' => 1, 'e' => 1, 'i' => 1, 'o' => 1, 'u' => 1);\n    for\
    \ my $char (split //, $message) {\n        if($char =~ /[a-zA-Z]/) {\n       \
    \     my $lc_char = lc($char);\n            if(exists $vowels{$lc_char}) {\n \
    \               $char = $alphabet[($lc_char ne $char ? 26 : 0) + (index $lc_char,\
    \ @alphabet) + 2];\n            }\n            else {\n                $char =\
    \ ($lc_char ne $char ? uc($char) : lc($char));\n            }\n        }\n   \
    \     $message_out .= $char;\n    }\n    return $message_out;\n}", "    my $result\
    \ = '';\n    my @vowels = qw(a e i o u);\n    my %vowels = map {$_ => 1} @vowels;\n\
    \    for my $letter (split '', lc $message) {\n        if ($vowels{$letter}) {\n\
    \            my $vowel = $letter;\n            for (1..2) {\n                $vowel\
    \ = $vowels[(first_index {$_ eq $vowel} @vowels + 1) % @vowels];\n           \
    \ }\n            $result .= uc $vowel;\n        } else {\n            $result\
    \ .= uc $letter;\n        }\n    }\n    return $result;\n}", "    my $new_message\
    \ = '';\n    for my $letter (split '', $message) {\n        my $new_letter = $letter;\n\
    \        if ($letter =~ /[a-z]/i) {\n            if ($letter =~ /[a-z]/) {\n \
    \               $new_letter = uc $letter;\n            } else {\n            \
    \    $new_letter = lc $letter;\n            }\n            if ($letter =~ /[aeiou]/i)\
    \ {\n                my $index = ord $new_letter - ord 'A';\n                my\
    \ $new_index = ($index + 2) % 26;\n                $new_letter = chr ord('A')\
    \ + $new_index;\n            }\n        }\n        $new_message .= $new_letter;\n\
    \    }\n    return $new_message;\n}", "    my $return_message = '';\n    # Loop\
    \ through the message\n    foreach my $char (split //, $message) {\n        my\
    \ $ord = ord($char);\n        # If the char is a letter\n        if ($ord >= 65\
    \ && $ord <= 90) {\n            # If the character is a vowel\n            if\
    \ ($char =~ /[aeiou]/i) {\n                # Print the next two letters in the\
    \ alphabet\n                $return_message .= chr($ord + 2);\n            }\n\
    \            # If the character is NOT a vowel\n            else {\n         \
    \       # Print the next letter in the alphabet\n                $return_message\
    \ .= chr($ord + 1);\n            }\n        }\n        # If the char is NOT a\
    \ letter\n        else {\n            # Print the next letter in the alphabet\n\
    \            $return_message .= chr($ord + 1);\n        }\n    }\n    # Return\
    \ encoded message\n    return $return_message;\n}", "    return $message;\n}",
  "    my $cipher_message = '';\n    for my $char (split('', $message)) {\n      \
    \  my $cipher_char = $char;\n        if (is_uppercase($char)) {\n            $cipher_char\
    \ = lc($char);\n        } elsif (is_lowercase($char)) {\n            $cipher_char\
    \ = uc($char);\n        }\n        if (is_vowel($cipher_char)) {\n           \
    \ $cipher_char = next_vowel($cipher_char);\n        }\n        $cipher_message\
    \ .= $cipher_char;\n    }\n    return $cipher_message;\n}", "    my $ret;\n  \
    \  foreach my $letter (split //, $message) {\n        my $new_letter = $letter;\n\
    \        if ($letter =~ /[aeiou]/i) {\n            $new_letter = next_letter($letter);\n\
    \            $new_letter = next_letter($new_letter);\n        }\n        $new_letter\
    \ = uc($new_letter) if $letter eq lc($letter);\n        $ret .= $new_letter;\n\
    \    }\n    return $ret;\n}", "    my($crypted, $letter);\n    foreach $letter\
    \ (split //, $message) {\n        $crypted .= cryptChar($letter);\n    }\n   \
    \ return $crypted;\n}", "    #TODO\n}", "    # your code here\n}", "    my $encoded_message\
    \ = \"\";\n    my $vowels = \"aeiou\";\n    my $letters = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my @vowels_array = split(//, $vowels);\n    my @letters_array = split(//,\
    \ $letters);\n    for my $char (split(//, $message)) {\n        if (grep /$char/,\
    \ @vowels_array) {\n            $index = (index($vowels, $char) + 2) % 5;\n  \
    \          $encoded_message .= $vowels_array[$index];\n        }\n        elsif\
    \ (grep /$char/, @letters_array) {\n            $index = (index($letters, $char)\
    \ + 2) % 26;\n            $encoded_message .= $letters_array[$index];\n      \
    \  }\n        else {\n            $encoded_message .= $char;\n        }\n    }\n\
    \    return $encoded_message;\n}", "    my $output = '';\n    foreach my $char\
    \ (split //, $message) {\n        my $big = lc($char) eq $char ? uc($char) : lc($char);\n\
    \        my $next = substr($big, 1, 1);\n        my $next2 = substr($big, 2, 1);\n\
    \        my $small = lc($char) eq $char ? $next2 : $next;\n        $output .=\
    \ $small;\n    }\n    return $output;\n}", "    my @code = ();\n    foreach my\
    \ $char (split '', $message) {\n        if ($char =~ /[a-z]/i) {\n           \
    \ my $ord = ord($char);\n            if ($ord >= ord('a') && $ord <= ord('z'))\
    \ {\n                if ($ord + 2 > ord('z')) {\n                    push @code,\
    \ chr(ord('a') + ($ord + 2 - ord('z')) - 1);\n                } else {\n     \
    \               push @code, chr($ord + 2);\n                }\n            } else\
    \ {\n                if ($ord + 2 > ord('Z')) {\n                    push @code,\
    \ chr(ord('A') + ($ord + 2 - ord('Z')) - 1);\n                } else {\n     \
    \               push @code, chr($ord + 2);\n                }\n            }\n\
    \        }\n    }\n    return join '', @code;\n}", "    my $new_message = \"\"\
    ;\n    my $letter;\n    my $ascii;\n    for (my $i = 0; $i < length($message);\
    \ $i++) {\n        $letter = substr($message, $i, 1);\n        $ascii = ord($letter);\n\
    \        if ($ascii >= 65 && $ascii <= 90) {\n            # Capital letter\n \
    \           $ascii += 2;\n            if ($ascii > 90) {\n                $ascii\
    \ -= 26;\n            }\n        }\n        elsif ($ascii >= 97 && $ascii <= 122)\
    \ {\n            # Lowercase letter\n            $ascii += 2;\n            if\
    \ ($ascii > 122) {\n                $ascii -= 26;\n            }\n        }\n\
    \        $new_message .= chr($ascii);\n    }\n    return $new_message;\n}", " \
    \   my $encoded_message = \"\";\n    my $letter;\n    my $encoded_letter;\n  \
    \  my $new_index;\n    my $index;\n    my $upcase_letter;\n    my $downcase_letter;\n\
    \    my $offset;\n    my $first_half;\n    my $second_half;\n    my $second_half_index;\n\
    \    my @vowels = ('a','e','i','o','u');\n    my $vowel;\n    my $vowel_index;\n\
    \    my $capitalized;\n    my @alphabet = ('a'..'z');\n    my $alphabet_length\
    \ = scalar(@alphabet);\n    for (my $i = 0; $i < length($message); $i++){\n  \
    \      $letter = substr($message, $i, 1);\n        $capitalized = (ord($letter)\
    \ <= 90) ? 1 : 0;\n        if ($capitalized){\n            $letter = lc($letter);\n\
    \        }\n        $encoded_letter = $letter;\n        $index = 0;\n        $new_index\
    \ = 0;\n        foreach $alphabet_letter (@alphabet){\n            if ($letter\
    \ eq $alphabet_letter){\n                $new_index = $index + 2;\n          \
    \      last;\n            }\n            $index++;\n        }\n        if ($new_index\
    \ >= $alphabet_length){\n            $offset = $new_index - $alphabet_length;\n\
    \            $first_half = substr(@alphabet, 0, $offset);\n            $second_half\
    \ = substr(@alphabet, $offset);\n            $second_half_index = $offset;\n \
    \           $encoded_letter = $second_half . $first_half;\n            $encoded_letter\
    \ = substr($encoded_letter, $second_half_index, 1);\n        } else {\n      \
    \      $encoded_letter = substr(@alphabet, $new_index, 1);\n        }\n      \
    \  foreach $vowel (@vowels){\n            if ($encoded_letter eq $vowel){\n  \
    \              $vowel_index = 0;\n                foreach $vowel (@v", "    my\
    \ $encoded = \"\";\n    # loop through the message\n    for (my $i = 0; $i < length($message);\
    \ $i++) {\n        # if the letter is a vowel\n        if (is_vowel(substr($message,\
    \ $i, 1))) {\n            # add the letter two indexes after the letter to the\
    \ encoded string\n            $encoded .= substr($message, $i + 2, 1);\n     \
    \   }\n        # if the letter is a consonant\n        else {\n            # add\
    \ the letter to the encoded string\n            $encoded .= substr($message, $i,\
    \ 1);\n        }\n    }\n    # return the encoded string\n    return $encoded;\n\
    }", "    $message =~ tr/a-zA-Z/A-Za-z/;\n    my @alphabet = ('a'..'z');\n    foreach\
    \ my $i (0..@alphabet) {\n        my $m = ($i + 2) % scalar(@alphabet);\n    \
    \    my $replacement = $alphabet[$m];\n        my $search = $alphabet[$i];\n \
    \       $message =~ s/$search/$replacement/g;\n    }\n    return $message;\n}",
  "    return if !defined $message;\n    my %map = ( \n        a => 'c',\n       \
    \ e => 'g',\n        i => 'k',\n        o => 'q',\n        u => 's',\n       \
    \ A => 'C',\n        E => 'G',\n        I => 'K',\n        O => 'Q',\n       \
    \ U => 'S',\n    );\n    my $encoded = \"\";\n    for my $letter (split //, $message)\
    \ {\n        if ($letter =~ /[a-zA-Z]/) {\n            $encoded .= $map{$letter}\
    \ || $letter;\n        } else {\n            $encoded .= $letter;\n        }\n\
    \    }\n    return $encoded;\n}", "    $message =~ tr/a-zA-Z/A-Za-z/;\n    $message\
    \ =~ tr/aeiou/cdfgh/;\n    return $message;\n}", "    my $vowels = \"aeiou\";\n\
    \    my $encoded_msg = \"\";\n    foreach my $char (split //, $message) {\n  \
    \      if ($char =~ /[A-Z]/) {\n            $encoded_msg .= lc($char);\n     \
    \   }\n        elsif ($char =~ /[a-z]/) {\n            $encoded_msg .= uc($char);\n\
    \        }\n        else {\n            $encoded_msg .= $char;\n        }\n  \
    \  }\n    $encoded_msg =~ s/[aeiou]/chr(ord($&)+2)/eg;\n    return $encoded_msg;\n\
    }", "    my @message = split('', $message);\n    my $encoded_message = \"\";\n\
    \    foreach my $char (@message) {\n        $encoded_message .= encode_char($char);\n\
    \    }\n    return $encoded_message;\n}", "    my($res) = \"\";\n    my(@alphabet)\
    \ = split(//,\"abcdefghijklmnopqrstuvwxyz\");\n    my($alphabet_size) = @alphabet;\n\
    \    my($i);\n    my($j);\n    my($l);\n    my($found);\n    for($i = 0; $i <\
    \ length($message); $i++) {\n        $l = substr($message,$i,1);\n        $found\
    \ = 0;\n        for($j = 0; $j < $alphabet_size; $j++) {\n            if(lc($l)\
    \ eq $alphabet[$j]) {\n                $found = 1;\n                last;\n  \
    \          }\n        }\n        if($found) {\n            $res .= lc($l) eq $l\
    \ ? uc($alphabet[($j+2)%$alphabet_size]) : lc($alphabet[($j+2)%$alphabet_size]);\n\
    \        } else {\n            $res .= $l;\n        }\n    }\n    return $res;\n\
    }", "    my($i, $msg);\n    my($vowels) = \"aeiou\";\n    for ($i = 0; $i < length($message);\
    \ $i++) {\n        $msg .= ($vowels =~ /$message[$i]/i) ? $vowels[(index($vowels,\
    \ $message[$i]) + 2) % 5] : $message[$i];\n    }\n    $msg;\n}", "    my @chars\
    \ = split(//, $message);\n    my @encoded = ();\n    foreach (@chars) {\n    \
    \    if ($_ =~ /[A-Z]/) {\n            push @encoded, lc($_);\n        } elsif\
    \ ($_ =~ /[a-z]/) {\n            push @encoded, uc($_);\n        } else {\n  \
    \          push @encoded, $_;\n        }\n    }\n    return join('', @encoded);\n\
    }", "    my $encoded = '';\n    my $curr;\n    my $vowels = 'aeiou';\n    my $len_vowels\
    \ = length($vowels);\n    my %vowel_index;\n    for (my $i = 0; $i < $len_vowels;\
    \ $i++) {\n        $vowel_index{substr($vowels, $i, 1)} = $i;\n    }\n    my $len_message\
    \ = length($message);\n    for (my $i = 0; $i < $len_message; $i++) {\n      \
    \  $curr = substr($message, $i, 1);\n        if (exists $vowel_index{$curr}) {\n\
    \            $encoded .= substr($vowels, ($vowel_index{$curr} + 2) % $len_vowels,\
    \ 1);\n        } else {\n            $encoded .= $curr;\n        }\n    }\n  \
    \  return $encoded;\n}", "    my $encoded_message = '';\n    my @alphabet = ('a'..'z');\n\
    \    foreach my $character (split //, $message) {\n        my $index = 0;\n  \
    \      my $vowel = '';\n        foreach my $letter (@alphabet) {\n           \
    \ if ($character eq $letter) {\n                $vowel = $letter;\n          \
    \      last;\n            }\n            elsif ($character eq uc($letter)) {\n\
    \                $vowel = uc($letter);\n                last;\n            }\n\
    \            $index++;\n        }\n        if (index('aeiou', $vowel) > -1) {\n\
    \            $encoded_message .= $alphabet[($index + 2) % scalar(@alphabet)];\n\
    \        }\n        elsif (index('AEIOU', $vowel) > -1) {\n            $encoded_message\
    \ .= uc($alphabet[($index + 2) % scalar(@alphabet)]);\n        }\n        else\
    \ {\n            $encoded_message .= $character;\n        }\n    }\n    return\
    \ $encoded_message;\n}", "    my %lookup = (\n        'a' => 'c',\n        'e'\
    \ => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' => 'w',\n   \
    \     'y' => 'a',\n    );\n    # change all letters to uppercase\n    $message\
    \ =~ tr/a-z/A-Z/;\n    # change all vowels to new letter\n    $message =~ s/([AEIOUY])/$lookup{$1}/g;\n\
    \    return $message;\n}", "    my $replacement = \"\";\n    foreach my $char\
    \ (split //, $message) {\n        $replacement .= encode_character($char);\n \
    \   }\n    return $replacement;\n}", "    my $encoded = \"\";\n    for (my $i\
    \ = 0; $i < length($message); $i++) {\n        my $c = substr($message, $i, 1);\n\
    \        if ($c =~ /[aeiou]/i) {\n            $c = chr(ord($c) + 2);\n       \
    \ } else {\n            $c = chr(ord($c) ^ 32);\n        }\n        $encoded .=\
    \ $c;\n    }\n    return $encoded;\n}", "    my @encoded;\n    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    foreach my $letter (split(\"\", $message))\
    \ {\n        if ($letter =~ /[A-Z]/) {\n            push(@encoded, lc($letter));\n\
    \        } elsif ($letter =~ /[a-z]/) {\n            push(@encoded, uc($letter));\n\
    \        } else {\n            push(@encoded, $letter);\n        }\n    }\n  \
    \  foreach my $vowel (@vowels) {\n        my $index = ord($vowel) + 2;\n     \
    \   if ($index > ord(\"z\")) {\n            $index = $index - 26;\n        }\n\
    \        @encoded = map { s/$vowel/chr($index)/e; $_ } @encoded;\n    }\n    return\
    \ join(\"\", @encoded);\n}", "    my %convert = qw/a c e g i k m o q s u w y A\
    \ C E G I K M O Q S U W Y/;\n    $message =~ s/([aeiou])/$convert{$1}/gi;\n  \
    \  $message =~ tr/a-zA-Z/b-zaB-ZA/;\n    return $message;\n}", "    # only letters\n\
    \    $message =~ s/[^a-zA-Z]//g;\n    # change case\n    $message =~ tr/a-zA-Z/A-Za-z/;\n\
    \    # replace vowels\n    $message =~ tr/aeiou/cdfghjklmnpqrstvwxyz/;\n    return\
    \ $message;\n}", "    my @message_array = split(//, $message);\n    my $output\
    \ = \"\";\n    foreach my $char (@message_array) {\n        if ($char =~ /[aeiou]/i)\
    \ {\n            $output .= shift_character($char, 2);\n        } else {\n   \
    \         $output .= $char;\n        }\n    }\n    return $output;\n}", "    my\
    \ $encoded_message = '';\n    my @message_parts = split(//, $message);\n    foreach\
    \ my $character (@message_parts) {\n        my $char_code = ord($character);\n\
    \        if ($char_code >= 65 && $char_code <= 90) {\n            $encoded_message\
    \ .= chr($char_code + 32);\n        } elsif ($char_code >= 97 && $char_code <=\
    \ 122) {\n            $encoded_message .= chr($char_code - 32);\n        } else\
    \ {\n            $encoded_message .= $character;\n        }\n    }\n    return\
    \ $encoded_message;\n}", "    my %letter_map = (\n        \"a\" => \"c\",\n  \
    \      \"e\" => \"g\",\n        \"i\" => \"k\",\n        \"o\" => \"q\",\n   \
    \     \"u\" => \"w\",\n        \"A\" => \"C\",\n        \"E\" => \"G\",\n    \
    \    \"I\" => \"K\",\n        \"O\" => \"Q\",\n        \"U\" => \"W\",\n    );\n\
    \    my $swapped_message = \"\";\n    for my $char (split \"\", $message) {\n\
    \        if ($char =~ /[aeiou]/i) {\n            $swapped_message .= $letter_map{$char};\n\
    \        } else {\n            $swapped_message .= $char;\n        }\n    }\n\
    \    return $swapped_message;\n}", "    # your code here\n}", "    my @code =\
    \ map {lc($_) eq $_ ? uc($_) : lc($_)} split //, $message;\n    for my $i (0..$#code)\
    \ {\n        $code[$i] = $vowels[($vowels{$code[$i]} + 2) % @vowels]\n       \
    \     if exists $vowels{$code[$i]};\n    }\n    return join '', @code;\n}", " \
    \   $message = uc($message);\n    my %encoding = (a => \"C\", e => \"G\", i =>\
    \ \"K\", o => \"Q\", u => \"S\");\n    foreach my $letter (keys %encoding) {\n\
    \        $message =~ s/$letter/$encoding{$letter}/g;\n    }\n    return $message;\n\
    }", "    my $encoded = \"\";\n    for (my $i = 0; $i < length($message); $i++)\
    \ {\n        my $char = substr($message, $i, 1);\n        $encoded .= $char;\n\
    \        if ($encoded eq ' ') {\n            $encoded .= \" \";\n        }\n \
    \       if ($encoded eq 't') {\n            $encoded .= \"V\";\n        }\n  \
    \      if ($encoded eq 'e') {\n            $encoded .= \"G\";\n        }\n   \
    \     if ($encoded eq 's') {\n            $encoded .= \"U\";\n        }\n    \
    \    if ($encoded eq 'i') {\n            $encoded .= \"K\";\n        }\n     \
    \   if ($encoded eq 'm') {\n            $encoded .= \"O\";\n        }\n      \
    \  if ($encoded eq 'a') {\n            $encoded .= \"C\";\n        }\n       \
    \ if ($encoded eq 'g') {\n            $encoded .= \"I\";\n        }\n        if\
    \ ($encoded eq 'T') {\n            $encoded .= \"v\";\n        }\n        if ($encoded\
    \ eq 'E') {\n            $encoded .= \"g\";\n        }\n        if ($encoded eq\
    \ 'S') {\n            $encoded .= \"u\";\n        }\n        if ($encoded eq 'I')\
    \ {\n            $encoded .= \"k\";\n        }\n        if ($encoded eq 'M') {\n\
    \            $encoded .= \"o\";\n        }\n        if ($encoded eq 'A') {\n \
    \           $encoded .= \"c\";\n        }\n        if ($encoded eq 'G') {\n  \
    \          $encoded .= \"i\";\n        }\n    }\n    return $encoded;\n}", " \
    \   my @vowels = split(\"\", \"aeiou\");\n    $message =~ s/[a-z]/\\U$&/g;\n \
    \   $message =~ s/[a-z]/\\L$&/g;\n    foreach my $vowel (@vowels) {\n        my\
    \ $encoded_vowel = chr(ord($vowel) + 2);\n        $message =~ s/$vowel/$encoded_vowel/g;\n\
    \    }\n    return $message;\n}", "    my($encoded, $char);\n    $encoded = \"\
    \";\n    for my $char (split(//, $message)) {\n        $encoded .= (is_vowel($char)\
    \ ? get_encoded_vowel($char) : $char);\n    }\n    return $encoded;\n}", "   \
    \ my($result) = '';\n    my($vowels) = 'aeiou';\n    my($index);\n    my($letter);\n\
    \    my($is_upper);\n    my($ord);\n    my($chr);\n    my($vowel_pos);\n    my($new_pos);\n\
    \    my($temp);\n    foreach $letter (split(//, $message)) {\n        $index =\
    \ index($vowels, lc($letter));\n        if ($index == -1) {\n            if ($letter\
    \ =~ /[A-Z]/) {\n                $result .= lc($letter);\n            } else {\n\
    \                $result .= uc($letter);\n            }\n        } else {\n  \
    \          $temp = $index + 2;\n            $temp -= 5 if ($temp > 4);\n     \
    \       $result .= substr($vowels, $temp, 1);\n        }\n    }\n    return $result;\n\
    }", "    my @letters = split(//, $message);\n    my $encoded_message = \"\";\n\
    \    foreach my $letter (@letters) {\n        if ($letter =~ /[a-z]/) {\n    \
    \        my $code = ord($letter) + 2;\n            if ($code > ord('z')) {\n \
    \               $code = $code - 26;\n            }\n            $encoded_message\
    \ .= chr($code);\n        } elsif ($letter =~ /[A-Z]/) {\n            my $code\
    \ = ord($letter) + 2;\n            if ($code > ord('Z')) {\n                $code\
    \ = $code - 26;\n            }\n            $encoded_message .= chr($code);\n\
    \        } else {\n            $encoded_message .= $letter;\n        }\n    }\n\
    \    return $encoded_message;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
