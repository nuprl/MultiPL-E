name: HumanEval_66_digitSum
language: php
prompt: "<?php\n// Task\n// Write a function that takes a string as input and returns\
  \ the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\
  \")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n\
  // >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>>\
  \ digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum($s) {\n"
tests: "function candidate(...$args) {\n    return digitSum(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"abAB\") !== 131) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"abcCd\") !== 67) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"helloE\") !== 69) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"woArBld\") !== 131) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"aAaaaXa\") !== 153) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\" How are yOu?\") !== 151) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(\"You arE Very Smart\") !== 327) { throw new\
  \ Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  return $s.length\n    ? ($s.split('')\n        .reduce(\n       \
    \   (acc, current) => (acc + current).charCodeAt(0) > 57\n            ? acc +\
    \ current\n            : 0\n        )\n      )\n    : 0;\n}\n</code>\n<|/ a tags=ascii,java,algorithm,arrays\
    \ |>\n<| c |>\nThank you for showing me this very elegant way. I'll have to read\
    \ through it but I'll give it a try.\n<|/ c |>\n<| a dscore=0 |>\nThe only thing\
    \ I could think of that might work is iterating over every character of the string,\
    \ and adding it to a sum variable until you reach a character not in the alphabet,\
    \ or the character is out of bounds, whichever comes first.\n<code>\nint sum =\
    \ 0;\nString input = \"foobar\";\nfor (int i = 0; i < input.length(); i++) {\n\
    \    char character = input.charAt(i);\n    if (character < 97 || character >\
    \ 122) {\n        sum += character;\n    } else {\n        break;\n    }\n}\n\
    </code>\n<|/ a tags=ascii,java,algorithm,arrays |>\n<| c |>\nThat does work. Unfortunately\
    \ it is slightly more complicated that I was hoping for.\n<|/ c |>\n<| c |>\n\
    It actually does answer the question. Although it doesn't really solve the problem\
    \ I had, thank you.\n<|/ c |>\n<| a |>\nYou have to test every character in the\
    \ String; there is no way to speed it up without doing that. \nThe fastest way\
    \ I could think of is to write a method that returns whether the character is\
    \ out of bounds or not.\n<code>\npublic boolean outOfBounds(char ch)\n{\n  return\
    \ !(ch >= 'a' && ch <= 'z') && (ch >= 'A' && ch <= 'Z');\n}\n</code>\nThen you\
    \ would have to loop through each character of your String, and test them:\n<code>\n\
    char ch;\nint sum = 0;\n\nfor(int i = 0; i < text.length(); i++)\n{\n  ch = text.charAt(i);\n\
    \  if(outOfBounds(ch))\n  {\n    sum += ch;\n  }\n  else\n  {\n    sum = 0;\n\
    \  }\n}\n</code>\n<|/ a tags=ascii,java,algorithm,arrays dscore=0 |>\n<| c |>\n\
    This would work but it isn't the fastest way. I'll be testing these answers and\
    \ see what works best.\n<|/ c |>\n<| a tags=ascii,java,algorithm,arrays |>\nTry\
    \ this:\n<code>\nString s= \"aAaaaXa\";\nint sum =", "\t$ret = 0;\n\tfor ($i =\
    \ 0; $i < strlen($s); ++$i) {\n\t\t$ret += $s[$i] - 48;\n\t}\n\treturn $ret;\n\
    }", "    return preg_replace('/[^A-Z]/', \"\", $s);\n}\n</code>\nThe first thing\
    \ that comes to mind is preg_replace.\n<|/ a dscore=2 |>\n<| c |>\nThis would\
    \ be my preferred solution too. As it only takes two lines of code. +1\n<|/ c\
    \ |>\n<| c |>\nThank you for this answer - it's always good to know there are\
    \ multiple ways to achieve a solution :)\n<|/ c |>\n<| c |>\nThanks so much for\
    \ this answer! It was super helpful. Especially the RegEx.\n<|/ c |>\n<| a tags=php\
    \ |>\nJust count the characters A-Z or a-z, then remove all non-A-Z characters.\
    \ That would be your result. No need for preg_replace().\n<code>\n$myString =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n$myString = str_replace($myString, '', str_split($myString,\
    \ 1));\n$myString = implode('', $myString);\n</code>\n<|/ a dscore=2 |>\n<| c\
    \ |>\nA bit more code than mine but this is the correct solution. +1\n<|/ c |>\n\
    <| a tags=php |>\nOne possible solution:\n<code>\n<?php\n$str=\"abcdefghijklmnopqrstuvwxyz\"\
    ;\n$count=0; \n$length=strlen($str);\n$chars=str_split($str);\nfor($i=0;$i<$length;$i++)\n\
    {\n    if($chars[$i]>=65&&$chars[$i]<=90)\n        $count++;\n}\n\necho $count;",
  "    if (strlen($s)===0) return 0;\n    $sum = 0;\n    $len = strlen($s);\n    for\
    \ ($i=0; $i < $len; $i++) {\n        $num = $s[$i];\n        if ($num >= 'A' &&\
    \ $num <= 'Z') {\n            $sum += $num - 'A' + 10;\n        } else {\n   \
    \         $sum += $num;\n        }\n    }\n    return $sum;\n}\n", "    if ($s\
    \ == \"\") {\n        return 0;\n    }\n    $sum = 0;\n    $len = strlen($s);\n\
    \    for ($i=0; $i<$len; $i++) {\n        $char = $s[$i];\n        $sum += ord($char)\
    \ - ord('A') + 10;\n    }\n    return $sum;\n}", "    if ($s == \"\" || !ctype_digit($s))\
    \ {\n        return 0;\n    }\n    $total = 0;\n    $len = strlen($s);\n    $count\
    \ = 0;\n    $chars = str_split($s);\n    foreach ($chars as $char) {\n       \
    \ $total += ord($char) - ord('A');\n        if (++$count == $len) {\n        \
    \    break;\n        }\n    }\n    return $total;\n}\n", "    $s = strtoupper($s);\n\
    \    return array_sum(preg_split('//', $s, null, PREG_SPLIT_NO_EMPTY));\n}", " \
    \   $sum = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        $sum += (ord($s[$i])\
    \ - 96);\n    }\n    return $sum;\n}", "    $n = 0;\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        if ($s[$i] > 47 && $s[$i] < 58) {\n            $n += $s[$i]\
    \ - 48;\n        } else {\n            $n += $s[$i];\n        }\n    }\n    return\
    \ $n;\n}", "    $sum = 0;\n    $length = mb_strlen($s);\n    for ($i = 0; $i <\
    \ $length; $i++) {\n        $sum += mb_substr_count($s[$i], mb_substr($s, $i,\
    \ 1));\n    }\n    return $sum;\n}\n", "    return preg_match_all('/[A-Za-z]+/',\
    \ $s, $matches)\n        ? array_sum(array_map(function ($e) {\n            return\
    \ ctype_upper($e) ? ($e - \"A\") : 0;\n        }, $matches[0]))\n        : false;\n\
    }\n</code>\nAnd now for fun I wrote something that prints out the most frequent\
    \ characters with their frequency (this requires PHP >= 5.5):\n<code>", "    //\
    \ your code here\n    if (empty($s))\n        return 0;\n\n    $sum = 0;\n   \
    \ for ($i = 0; $i < strlen($s); $i++) {\n        $sum += ($s[$i] >= \"A\" && $s[$i]\
    \ <= \"Z\") ? $s[$i] - \"A\" : $s[$i];\n    }\n    return $sum;\n}\n", "  if(is_string($s))\
    \ {\n    $sum = 0; // init accumulator\n    for($i=0; $i<strlen($s); $i++) {\n\
    \      $sum += strlen($s[$i])*pow(strlen($s[$i]) - 1, 2);\n    }\n    return $sum;\n\
    \  } else {\n    return 0;\n  }\n}\n", "  $sum = 0;\n  $length = strlen($s);\n\
    \n  for ($i = 0; $i < $length; $i++) {\n    $sum += (strpos($s, 'A', $i) + 1);\n\
    \  }\n\n  return $sum;\n}\n", "    $total = 0;\n    foreach (str_split($s) as\
    \ $c) {\n        $total = str_pad(base_convert($c, 10, 2), 2, '0', STR_PAD_LEFT)\
    \ + $total;\n    }\n    return $total;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\n\
    Thanks, I didn't realize `str_split` could take a callback to limit the splitting\
    \ of the string.\n<|/ c |>\n<| c |>\nThis was the answer I was looking for as\
    \ well.\n<|/ c |>\n<| a dscore=0 tags=php |>\n<code>", "    $sum = 0;\n    foreach\
    \ (str_split($s) as $char) {\n        $sum += ord($char) - ord(\"0\");\n    }\n\
    \    return $sum;\n}\n</code>\n<|/ a dscore=0 tags=arrays,php |>\n<| a tags=arrays,php\
    \ |>\n<code>\n<?php", "    $sum = 0;\n    $n = strlen($s);\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        $char = strtolower($s[$i]);\n        $sum += $char >=\
    \ 'a' && $char <= 'z' ? ($char - 'a' + 'a') : -1;\n    }\n    return $sum;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nSorry, I don't understand.\n<|/ c |>\n<|\
    \ c |>\nI added some comments to my solution, hope it helps.\n<|/ c |>\n<| c |>\n\
    Thank you! I do understand it now.\n<|/ c |>\n<| a dscore=0 |>\nYou could use\
    \ a regular expression to do the replacements:\n<code>\n$str = preg_replace('/[a-z]/i',\
    \ '', $str);\n$str = preg_replace('/[^A-Z]/', '', $str);\n</code>\n<|/ a tags=php\
    \ |>\n<| c |>\nI do not know how to use regex. Can you give me an example of how\
    \ to use it? The code I have is not working and I don't know why.\n<|/ c |>\n\
    <| c |>\nThe code I gave you replaces every lowercase letter (`[a-z]`) with an\
    \ empty string (''). So it's basically removing all letters from `$str`. Then\
    \ it removes all other characters that are not letters (`[^A-Z]`). So if you had\
    \ `'aAaaaXa'`, it would return `'AaaaxA'`.\n<|/ c |>\n<| c |>\nThe code I have\
    \ is giving me errors. I am not sure how to use regex. Can you give me an example\
    \ of how to use it?\n<|/ c |>\n<| c |>\nOkay, I edited my code to show you how\
    \ to use the regular expression. Maybe this will help you understand how to use\
    \ it.\n<|/ c |>\n<| c |>\nThank you for the help! This code is working but I need\
    \ to use regex.\n<|/ c |>\n<| a tags=php dscore=0 |>\nYou can do this:\n<code>\n\
    <?php\n$a = \"helloE\";\n$b = 'aaaBcCddeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ0Z1Z2Z3Z4Z5Z6Z7Z8Z9Z0Z1Z2Z3Z4Z5Z6Z7Z8Z9Z0Z",
  "    $result = 0;\n    $totalUpper = 0;\n    $len = strlen($s);\n    for ($i=0;\
    \ $i < $len; $i++) {\n        $char = $s[$i];\n        $char = ord($char);\n \
    \       if (($char <= 57) && ($char >= 48)) {\n            $totalUpper += $char;\n\
    \            $result += $char;\n        }\n    }\n    return $result;\n}\n", " \
    \   $sum = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        $sum += ord($s[$i])\
    \ - ord('0');\n    }\n    return $sum;\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\n\
    I don't want to use the builtin sum function. This is homework so I need to use\
    \ my own function. Also, what do you mean by \"the built-in sum function\"?\n\
    <|/ c |>\n<| c |>\n, `sum()` is a builtin function that is available since PHP\
    \ 5.5\n<|/ c |>\n<| c |>\nYeah but I need to use my own function :(\n<|/ c |>\n\
    <| c |>\n, you just need to iterate through the string and sum the digits you\
    \ find.\n<|/ c |>\n<| c |>\nBut how do you sum the digits you find? I have been\
    \ trying to figure this out for a couple of hours now with no luck. :(\n<|/ c\
    \ |>\n<| a |>\nHere is another way to do it. I was hoping to use map and array_reduce,\
    \ but I think array_reduce would be even faster.\n<code>", "    $sum = 0;\n  \
    \  for ($i = 0; $i < strlen($s); $i++) {\n        $sum += ord($s[$i]) - ord('0');\n\
    \    }\n    return $sum;\n}\n", "    $sum = 0;\n    $length = strlen($s);\n  \
    \  for ($i = 0; $i < $length; $i++) {\n        $char = substr($s, $i, 1);\n  \
    \      $sum += $char - \"A\" + 10;\n    }\n    return $sum;\n}\n</code>\n<|/ a\
    \ tags=php,algorithm,string |>\n<| c |>\nThis would fail with input like `aAa`,\
    \ which I believe is supposed to return 5.\n<|/ c |>\n<| c |>\nThis would be true\
    \ if it had `+` concatenated before the sum, which I believe is supposed to return\
    \ 5 as well. Otherwise you're right that my answer is wrong.\n<|/ c |>\n<| a dscore=3\
    \ |>\nAnother solution using PHP's mb_substr and array_sum:\n<code>", "    for($i\
    \ = 0; $i < strlen($s); $i++) {\n        $sum = ord($s[$i]) + $sum;\n    }\n \
    \   return $sum;\n}\n", "  return sum(str_split($s));\n}", "    return array_sum(array_map(function($a){return\
    \ (ord($a) > 64)?0:ord($a); }, str_split($s)));\n}\n", "  $sum = 0;\n  for ($i\
    \ = 0; $i < strlen($s); $i++) {\n    $char = mb_substr($s, $i, 1);\n    $sum +=\
    \ $char - 'A' + 10;\n  }\n  return $sum;\n}\n", "  $res = 0;\n  $len = strlen($s);\n\
    \  for ($i = 0; $i < $len; $i++) {\n    $res += ord($s[$i]) - ord(\"A\");\n  }\n\
    \  return $res;\n}\n", "  return strtoupper(preg_replace('/[^A-Z]+/', '', $s))\
    \ ?: 0;\n}\n", "    $sum = 0;\n    foreach (str_split($s) as $char) {\n      \
    \  if ($char >= '0' && $char <= '9') {\n            $sum += $char - '0';\n   \
    \     }\n    }\n    return $sum;\n}\n", "    return array_reduce(str_split($s),\
    \ function($sum, $value) {\n        return $sum + ord($value);\n    }, 0);\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThis looks like a PHP solution, doesn't it?  I don't\
    \ see anything about PHP in my original question.\n<|/ c |>\n<| c |>\nI added\
    \ another solution that is a PHP solution.\n<|/ c |>\n<| c |>\nI love the PHP\
    \ solution, although it does have a few limitations.  I like your answer very\
    \ much, but I'm going to give the correct answer to since he is so concise and\
    \ explains the answer very clearly.\n<|/ c |>\n<| a dscore=0 |>\nThis seems like\
    \ a great opportunity to use PHP's ability to create generators.  Using these\
    \ generators, we can write the digitSum function as follows:\n<code>", "  return\
    \ str_replace(str_split(''), \"\", strtoupper($s));\n}\n\n$input = 'aAaaaXa';\n\
    $output = digitSum($input);\necho $output;\n</code>\n<|/ a tags=php,arrays,string\
    \ |>\n<| c |>\nI think this is what I was looking for. Your method would work\
    \ great if I was looking for all uppercase letters in a string, but I'm just looking\
    \ for any number in the string. So for example, \"abcd\" should return '4', but\
    \ \"AaAa\" should return '7'. I'll edit my original post so you can see what I'm\
    \ looking for.\n<|/ c |>\n<| a |>\nFor PHP 7 it can be done like this:\n<code>\n\
    <?php\n\n    $string = 'abAcbdE';\n    $string = preg_replace('/[^0-9a-zA-Z]/',\
    \ '', strtoupper($string));\n\n    // or simply:\n    // $string = strtoupper(preg_replace('/[^0-9a-zA-Z]/',\
    \ '', $string));\n\n    echo $string; // outputs 'ABCD'\n</code>\n<|/ a dscore=0\
    \ tags=php,arrays,string |>\n<| a |>\nThis should work for all cases and is much\
    \ easier to read.\n<code>\n$string = 'aAaaaXa';\n$string = preg_replace_callback('/[^A-Za-z0-9]/',\
    \ function($matches) {\n  return str_replace(strtoupper($matches[0]), '', strtoupper($matches[0]));\n\
    }, $string);\necho $string; // prints 4\n</code>\n<|/ a dscore=0 tags=php,arrays,string\
    \ |>\n<| c |>\nThank you for your help. This worked well for me.\n<|/ c |>\n<|\
    \ c |>\nI'm glad it worked for you. Please accept this answer by clicking the\
    \ check mark next to it.\n<|/ c |>\n<| a dscore=0 tags=php,arrays,string |>\n\
    To get any number in the string you can use a regex. \n<code>\npreg_replace('/[^0-9]+/',\
    \ '', strtoupper($string));\n</code>\n<|/ a |>\n<| a |>\nThis answer was accepted\
    \ but I thought I should add the explanation as to why this works \nThe first\
    \ parameter of the preg_replace() function contains all characters that should\
    \ be replaced. The second parameter contains all characters that should be replaced\
    \ but are already in the second parameter.\n<|/ a tags=php,arrays,string dscore=0\
    \ |>\n<| c |>\nCould you elaborate on the explanation of why this works?\n<|/\
    \ c |>\n<| c |>\nThe explanation is in the answer: ", "    $total = 0;\n    for\
    \ ($i = 0; $i < strlen($s); $i++) {\n        $total += $s[$i];\n    }\n    return\
    \ $total;\n}\n", "    $sum = 0;\n    $len = strlen($s);\n    for ($i = 0; $i <\
    \ $len; ++$i) {\n        $sum += (ord($s[$i]) - 65) % 26;\n    }\n    return $sum;\n\
    }\n", "    $sum = 0;\n    foreach (str_split($s) as $char) {\n        if ($char\
    \ >= '0' && $char <= '9') {\n            $sum += $char - '0';\n        }\n   \
    \ }\n    return $sum;\n}", "    $total = 0;\n    $len = strlen($s);\n\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        $c = $s[$i];\n        $total += $c <= 'z'\
    \ ? ord($c) - ord('A') : ord($c) - ord('a') + 10;\n    }\n\n    return $total;\n\
    }\n", "  $sum = 0;\n  for ($i = 0; $i < strlen($s); $i++) {\n    $sum += $s[$i]\
    \ > 47 ? $s[$i] - 87 : $s[$i];\n  }\n  return $sum;\n}\n", "    $sum = 0;\n  \
    \  for ($i = 0; $i < strlen($s); $i++) {\n        $sum += ($s[$i] >= 'A' ? 9 :\
    \ 0) + $s[$i];\n    }\n    return $sum;\n}\n</code>\n<|/ a |>\n<| a |>\nYou can\
    \ use preg_replace() to remove non digits from the string:\n<code>\n$input = 'helloE';\n\
    echo preg_replace('/\\D/', '', $input);\n</code>\nOUTPUT:\n<code>\nhello\n</code>\n\
    <|/ a tags=php dscore=0 |>\n<| c |>\nPlease don't encourage people to use `eval()`.\
    \ There are plenty of [**reasons why**](http://stackoverflow.com/a/951373/4129921)\
    \ not to and [**ways to workaround**](http://stackoverflow.com/a/951391/4129921)\
    \ it.\n<|/ c |>\n<| c |>\nI agree that eval() is not the best solution, but my\
    \ answer is about how to remove non digits from the string with preg_replace()\
    \ without using eval().\n<|/ c |>\n<| a tags=php |>\nYou can use the preg_replace\
    \ function to accomplish this task:\n<code>\n<?php\necho preg_replace(\"/[^\\\
    d]+/\", \"\", \"helloE\");", "    return array_sum(str_split($s, 1));\n}\n", " \
    \ return strlen(preg_replace('/[A-Z]+/', '', $s)) + 1;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\n`return strlen(preg_replace('/[A-Z]+/', '', $s));` returns `153`\
    \ in `aAaaaXa`. Is this what you wanted?\n<|/ c |>\n<| c |>\nYes, the example\
    \ was wrong, I've fixed it now\n<|/ c |>\n<| c |>\nYes, that works perfectly.\
    \ Thank you. :)\n<|/ c |>\n<| c |>\nThanks for the feedback. I've just edited\
    \ my answer to fix the mistake in the first code block.\n<|/ c |>\n<| c |>\nJust\
    \ to confirm, would you mind explaining what `/[A-Z]+/` does? As far as I know\
    \ the preg_replace function replaces all occurrences of any amount of uppercase\
    \ letters with an empty string.\n<|/ c |>\n<| a tags=php,regex dscore=1 |>\nTry\
    \ this code :\n<code>", "    return $s.split('').map(function($char) {\n     \
    \   return ord($char) + 64;\n    }).reduce(function(a, b) {\n        return a\
    \ + b;\n    }, 0);\n}\n", "  if (strlen($s) == 0) {\n    return 0;\n  }\n  $sum\
    \ = 0;\n  for ($i = 0; $i < strlen($s); $i++) {\n    $char = $s[$i];\n    if (ctype_upper($char))\
    \ {\n      $sum += ord($char);\n    }\n  }\n  return $sum;\n}\n", "    $sum =\
    \ 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        $sum += (int) $s[$i];\n\
    \    }\n    return $sum;\n}", "    $sum = 0;\n    $length  = strlen($s);\n   \
    \ for($i=0; $i<$length; $i++){\n        $char = $s[$i];\n        if($char >= '0'\
    \ && $char <= '9'){\n            $sum += $char - '0';\n        }\n    }\n    return\
    \ $sum;\n}", "    $sum = 0;\n    $len = strlen($s);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $value = ord($s[$i]);\n        if ($value >= ord('0') and $value\
    \ <= ord('9')) {\n            $sum += $value - ord('0');\n        }\n    }\n \
    \   return $sum;\n}\n$string = str_split($str);\n$sum = 0;\nforeach ($string as\
    \ $value) {\n    $sum += digitSum($value);\n}\necho $sum;", "    // Your code\
    \ here\n    return $s;\n}\n", "    // Convert string to integer with base 10.\n\
    \    $num = array_sum(str_split($s, 1));\n    // Get sum of the digits in reverse\
    \ order.\n    return $num;\n}", "  $sum = 0;\n  for ($i = 0; $i < strlen($s);\
    \ $i++) {\n    $char = substr($s, $i, 1);\n    $sum += ord($char);\n  }\n  return\
    \ $sum;\n}\n", "    return strlen((string)$s);\n}\n</cell>\n<text>\nProblem 7\n\
    Write a function that takes as input a binary string and returns the sum of the\
    \ numbers that represent a binary string. For example, the string 01110 represents\
    \ 5, because it sums up 5 and 1 + 1 + 1 + 1 + 1 = 5. The string 0111001 represents\
    \ 6, because it sums up 6 and 1 + 1 + 1 + 1 + 1+ 1 = 6.\n\nThe binary string begins\
    \ with the most significant bit at the right. The rest of the string consists\
    \ of bits from the left most bit to the right most bit.\n\nThe input binary string\
    \ may contain leading or trailing zeros.\n\n\n</text>\n<cell>", "    return array_sum(array_map(function\
    \ ($char) {\n        if (ctype_upper($char)) {\n            return ord($char)\
    \ - 32;\n        }\n\n        return 0;\n    }, $s));\n}\n", "    $sum = 0;\n\
    \    foreach (str_split($s) as $char) {\n        if (!ctype_digit($char)) {\n\
    \            $sum = $sum * 10 + (ord($char) - 64);\n        }\n    }\n    return\
    \ $sum;\n}\n</code>\n<|/ a tags=string,php,algorithm,math dscore=2 |>\n<| a tags=string,php,algorithm,math\
    \ dscore=2 |>\n<code>\n<?php", "    if (empty($s))\n        return 0;\n\n    $sum\
    \ = 0;\n    $len = strlen($s);\n    for ($i = 0; $i < $len; $i++) {\n        $sum\
    \ = (ord($s[$i]) - 97) + ($sum * 10);\n    }\n\n    return $sum;\n}\n", "    return\
    \ str_pad(\n        array_sum(str_split($s, 1)), \n        strlen($s), '0', STR_PAD_LEFT\n\
    \    );\n}\n$sum = digitSum(\"aAaaaXa\");\necho $sum;\n</code>\nResult:\n<code>\n\
    153\n</code>\n<|/ a tags=php |>\n<| a tags=php dscore=0 |>\nTry this one:\n<code>\n\
    $string = \"Hello World!\";\n$string_digits = preg_replace('/\\D/', '', $string);\n\
    $sum_digits = array_sum(str_split($string_digits));\necho $sum_digits;\n</code>\n\
    <|/ a |>\n<| a |>\n<code>\n<?php\n", "    return array_sum(str_split($s));\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nIt's a very elegant solution!\n<|/ c |>\n\
    <| c |>\nThis works great for the simple cases, but fails to work for \"abcd\"\
    \ which should return 101.\n<|/ c |>\n<| a dscore=2 |>\nA more elegant solution\
    \ which does not use regex is:\n<code>", "    $len = strlen($s);\n    $sum = 0;\n\
    \    for ($i = 0; $i < $len; $i++) {\n        $sum += ($s[$i] - ord('a')) * pow(26,\
    \ strlen($s) - 1 - $i);\n    }\n    return $sum;\n}\n\n$letters = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n$str = $letters[rand(16, 26)];\n$tests = 10;\n$min = 10000000;\n$max = 0;\n\
    for ($i = 0; $i < $tests; $i++) {\n    $min = min($i, $min);\n    $max = max($i,\
    \ $max);\n    $a = $str[rand(0, strlen($str)-1)];\n    $b = $str[rand(0, strlen($str)-1)];\n\
    \    $c = $str[rand(0, strlen($str)-1)];\n    $d = $str[rand(0, strlen($str)-1)];\n\
    \    $e = $str[rand(0, strlen($str)-1)];\n    $f = $str[rand(0, strlen($str)-1)];\n\
    \    $g = $str[rand(0, strlen($str)-1)];\n    $h = $str[rand(0, strlen($str)-1)];\n\
    \    $i = $str[rand(0, strlen($str)-1)];\n    $j = $str[rand(0, strlen($str)-1)];\n\
    \    $k = $str[rand(0, strlen($str)-1)];\n    $l = $str[rand(0, strlen($str)-1)];\n\
    \    $m = $str[rand(0, strlen($str)-1)];\n    $n = $str[rand(0, strlen($str)-1)];\n\
    \    $o = $str[rand(0, strlen($str)-1)];\n    $p = $str[rand(0, strlen($str)-1)];\n\
    \    $q = $str[rand(0, strlen($str)-1)];\n    $r = $str[rand(0, strlen($str)-1)];\n\
    \    $s = $str[rand(0, strlen($str)-1)];\n    $t = $str[rand(0, strlen($str)-1)];\n\
    \    $u = $str[rand(0, strlen($str)-1)];\n    $v = $str[rand(0, strlen($str)-1)];\n\
    \    $w = $str[rand(0, strlen($str)-1)];\n    $x = $str[rand(0, strlen($str)-1)];\n\
    \    $y = $str[rand(0, strlen($str)-1)];\n    $z = $str[rand(0, strlen($str)-1)];\n\
    \    echo sprintf(\"%s\\n%s\\n%s\\n%s\\n%s\\n%s\\n%s\\n%s\\n%s\\n%s\\n%s\\n%s\\\
    n%s\\n%s\\n%s\\n%s\\n%s\\n%s\\n%s\\n%s\\n", "    \n}", "    // code here\n   \
    \ $s = strtolower($s);\n    $chars = str_split($s);\n    $sum = 0;\n    foreach\
    \ ($chars as $char) {\n        $sum += ord($char) - 64;\n    }\n    return $sum;\n\
    }\n$tests['digitSum'] = array(\n    array(''),\n    array('abAB'),\n    array('abcCd'),\n\
    \    array('helloE'),\n    array('woArBld'),\n    array('aAaaaXa'),\n    array(''),\n\
    );", "  $sum = 0;\n  for ($i = 0; $i < strlen($s); $i++) {\n    $sum += $s[$i]\
    \ >= 'A' ? $s[$i] - 'A' + 10 : $s[$i] - 'a' + 10;\n  }\n  return $sum;\n}\n",
  "  return array_reduce(str_split($s), function($result, $char) {\n    return $result\
    \ + (int) ord($char);\n  }, 0);\n}\n\n$input = file_get_contents('php://stdin');\n\
    echo digitSum($input);\n</code>\n<|/ a tags=php,string,functional-programming\
    \ dscore=2 |>\n<| a dscore=2 |>\n<code>\n<?php\n$string = 'Hello, World!';\necho\
    \ implode(array_map('ord', str_split($string)));", "  return strlen($s) === 0\
    \ ? 0 : array_sum(str_split(preg_replace('/[\\d]/', '', $s)));\n}\n$result = digitSum($string);\n\
    echo $result;", "    $s = 0;\n    $length = strlen($s);\n    $i = 0;\n    for($i\
    \ = 0; $i < $length; $i++){\n        $s += $s[$i];\n    }\n    return $s;\n}\n",
  "  // Your code here\n  $sum = 0;\n  foreach (str_split($s) as $char) {\n    if\
    \ (isset($UPPER_CHARS[$char])) {\n      $sum += $UPPER_CHARS[$char];\n    }\n\
    \  }\n\n  return $sum;\n}\n", "    // Your code here\n    $sum = 0;\n    $arr\
    \ = str_split($s);\n    foreach ($arr as $k => $val) {\n        if (isset($arr[($k\
    \ + 1)])) $sum += $val > $arr[($k + 1)] ? $val - $arr[($k + 1)] : $arr[($k + 1)]\
    \ - $val;\n    }\n    return $sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ tags=php |>\n<code>\n<?php", "    $sum = 0;\n    foreach (str_split($s, 1) as\
    \ $char) {\n        $sum += ($char >= 'A' ? ord($char) - ord('A') + 10 : '0');\n\
    \    }\n    return $sum;\n}\n$tests = array(\"abAB\", \"abcCd\", \"helloE\", \"\
    woArBld\", \"aAaaaXa\");\nforeach ($tests as $test) {\n    print \"\\nTesting\
    \ $test...\\n\";\n    print \"Expected: 153\\n\";\n    print \"Got:     \" . digitSum($test)\
    \ . \"\\n\";\n    print \"Passed?\\n\";\n}", "    $sum = 0;\n    foreach (str_split($s)\
    \ as $c) {\n        $sum += array_sum(array_map('ord', str_split($c)));\n    }\n\
    \    return $sum;\n}\n", "  return preg_replace('/[[:upper:]]/', '', $s);\n}\n",
  "  return intval($s);\n}\n", "  $total = 0;\n  foreach (str_split($s) as $c) {\n\
    \    $total += ord($c) - ord('A');\n  }\n  return $total;\n}\n", "  if (empty($s))\
    \ {\n    return 0;\n  }\n\n  $sum = 0;\n  for ($i = 0; $i < strlen($s); $i++)\
    \ {\n    $sum += ord($s[$i]) - 64;\n  }\n\n  return $sum;\n}\n", "  // Your code\
    \ here\n  return $s;\n}", "    // TODO - Your code here\n}\n$testCases = [\n \
    \   \"aAaaaXa\",\n    \"woArBld\",\n    \"helloE\",\n    \"abcCd\",\n    \"abc\"\
    \n];\n", "    $sum = 0;\n    $strlen = strlen($s);\n    for ($i = 0; $i < $strlen;\
    \ $i++) {\n        $sum += strpos($uppercaseChars, $s[$i]) * ($strlen - $i);\n\
    \    }\n    return $sum;\n}\n", "    $result = 0;\n    $chars = str_split($s);\n\
    \    foreach ($chars as $char) {\n        $result += $char;\n    }\n    return\
    \ $result;\n}\n", "    $charSum = 0;\n    $s = strtoupper($s);\n    $length =\
    \ strlen($s);\n    $a = 0;\n    for ($i = 0; $i < $length; $i++) {\n        $charSum\
    \ += $s[$i];\n        if ($s[$i] < 'A') {\n            $a = 1;\n        }\n  \
    \  }\n    return $charSum;\n}\n", "    $sum = array_sum(array_map('ord', str_split($s,\
    \ 1)));\n    return $sum;\n}\n", "    // Extract the input string from its arguments.\n\
    \    $input = array_shift($s);\n\n    // Convert the string to an array.\n   \
    \ $input = str_split($input);\n\n    // Set up an array that stores the sum of\
    \ the uppercase letters.\n    $sums = array();\n\n    // Loop through the input\
    \ array.\n    foreach ($input as $char) {\n        // Check the character's ASCII\
    \ code.\n        if (ord($char) > 96) {\n            // The character is uppercase.\
    \ Add it to the sum.\n            $sums[] = ord($char) - 96;\n        }\n    }\n\
    \n    // Return the sum of the uppercase letters.\n    return array_sum($sums);\n\
    }\n", "    $s = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        $s += intval(substr($s,\
    \ $i, 1)) > 64 ? 64 : intval(substr($s, $i, 1));\n    }\n    return $s;\n}\n",
  "  return array_sum(str_split($s));\n}", "    $sum = 0;\n    foreach (str_split($s)\
    \ as $char) {\n        if ($char >= 'a' && $char <= 'z') {\n            $sum +=\
    \ $char - 'a' + 1;\n        }\n    }\n    return $sum;\n}\n", "    if ($s ===\
    \ null || $s === \"\") {\n        return 0;\n    }\n    $result = 0;\n    foreach\
    \ (str_split($s) as $char) {\n        if (isset($char) && $char >= 48 && $char\
    \ <= 57) {\n            $result += (ord($char) - 48);\n        }\n    }\n    return\
    \ $result;\n}\n</code>\n<|/ a |>\n<| c |>\nWhat about `digitSum(\"aAaaaXa\")`\
    \ returns `153` instead of `153` ?\n<|/ c |>\n<| c |>\n, That was what was asked\
    \ for in the question\n<|/ c |>\n<| c |>\nAh okay I missed that! Sorry for that\
    \ :)\n<|/ c |>\n<| c |>\nI realized this answer would also work for multi-byte\
    \ strings, but the original question was only about ASCII.\n<|/ c |>\n<| a tags=php,ascii,string\
    \ |>\n<code>\n<?php", "    $result = 0;\n    foreach (str_split($s) as $c) {\n\
    \        $result += $c - 96;\n    }\n    return $result;\n}", "  return array_sum(array_map(function($char)\
    \ {\n    return ord($char) - ord('0');\n  }, $s));\n}\n", "    return str_replace(array('a','A','b','B','c','C','d','D','e','E','f','F','g','G','h','H','i','I','j','J','k','K','l','L','m','M','n','N','o','O','p','P','q','Q','r','R','s','S','t','T','u','U','v','V','w','W','x','X','y','Y','z','Z'),\
    \ array('','0','1','2','3','4','5','6','7','8','9','0','1','2','3','4','5','6','7','8','9','0','1','2','3','4','5','6','7','8','9'),\
    \ $s);\n}\n", "  $sum = 0;\n  for ($i = 0; $i < strlen($s); $i++) {\n    $sum\
    \ += $s[$i] - 48;\n  }\n  return $sum;\n}\n", "    $total = 0;\n    for ($i =\
    \ 0, $len = strlen($s); $i < $len; $i++) {\n        $total = $total + ord($s[$i]);\n\
    \    }\n    return $total;\n}\n</code>\n<|/ a tags=php,ascii,algorithm |>\n<|\
    \ c |>\nIt took me a minute to figure out why I didn't understand your code...\
    \  Thank you so much!  I understand it very well now.\n<|/ c |>\n<| a tags=php,ascii,algorithm\
    \ |>\nAs stated before, PHP has a built-in function to perform this task, called\
    \ ord, that returns ASCII value of the character. But, if you don't like to perform\
    \ looping, you can simply use array_sum like this:\n<code>\n$a = \"hello\";\n\
    echo array_sum(array_map(\"ord\", $a)); // 131\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nThank you, this is probably the simplest solution.  I do want to learn\
    \ how to code this myself but this one was too simple for me.\n<|/ c |>\n<| a\
    \ tags=php,ascii,algorithm |>\n<code>\n$number = 'Hello';\n$count = 0;\n$length\
    \ = strlen($number);\nfor ($i=0; $i<$length; $i++){\n    $count += ord($number[$i]);\n\
    }\necho $count;\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis won't work if the input\
    \ is an empty string, and will break if you pass an invalid string. Also, this\
    \ doesn't take into account that each char has more than one ASCII value.\n<|/\
    \ c |>\n<| a |>\n<code>\n$sum = 0;\n$string = \"hello\";\n\nfor ($i = 0; $i <\
    \ strlen($string); $i++) {\n    $sum += ord($string[$i]);\n}\n\necho $sum; //\
    \ 131\n</code>\n<|/ a tags=php,ascii,algorithm dscore=0 |>\n<| c |>\nThis won't\
    \ work if the input is an empty string, and will break if you pass an invalid\
    \ string. Also, this doesn't take into account that each char has more than one\
    \ ASCII value.\n<|/ c |>\n<| c |>\nThis is incorrect. `ord` returns one number\
    \ for the entire string.\n<|/ c |>\n<| c |>\nThanks I edited it, but I don't know\
    \ why I thought that\n<|/ c |>\n<| a tags=php,ascii,algorithm |>\n<code>\n$sum\
    \ = 0;\nfor ($i = 0; $i < strlen($string); $i++) {\n    $sum += ord($string[$",
  "    $sum = 0;\n    foreach($s as $letter) {\n        $sum += (ord($letter) + 32)\
    \ % 97;\n    }\n    return $sum;\n}\n", "  $sum = 0;\n  for ($i = 0; $i < strlen($s);\
    \ $i++) {\n    $sum += $s[$i] >= 'A' ? $s[$i] - 'A' + 10 : 'a' - 10;\n  }\n  return\
    \ $sum;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer, it is useful,\
    \ but I should use the code I wrote in my first post, as I am required to use\
    \ an if-else statement (if-else statement is what I need to use).\n<|/ c |>\n\
    <| c |>\nI've updated my answer to show how you would do that using a `if-else`\
    \ statement. It just seemed like an interesting assignment to me, and I thought\
    \ it might be educational.\n<|/ c |>\n<| c |>\nThanks for the answer. I understood\
    \ what you have done and I can see where I went wrong, but I am not allowed to\
    \ use the if-else statement. Is there a way to do it without if-else statement\
    \ by using recursion? I am still a bit confused on how to use recursion to solve\
    \ this problem :(\n<|/ c |>\n<| c |>\nI thought this might be interesting too,\
    \ so I decided to write it out. I'm sure a lot of people will say \"why are you\
    \ doing this with recursion?\", but I'd like to see what kind of problem this\
    \ would be used for. Just out of curiosity, why can't you use the `if-else` statement?\n\
    <|/ c |>\n<| c |>\nI am doing a homework assignment that requires me to use if-else\
    \ statement. I am still a beginner so I don't really understand recursion. I found\
    \ out a way to do it by using an if-else statement by using recursion, but I am\
    \ not allowed to use if-else statement so I am unsure how to do it with recursion.\
    \ Do you have any ideas how to do it?\n<|/ c |>\n<| a dscore=0 tags=recursion,function,arrays,php\
    \ |>\nIn order to make it recursive it would be important to know what the expected\
    \ output is, and the conditions under which a function is to be called again.\n\
    The below code will work if you pass in a string and an int as parameters (which\
    \ represents the length of the string to count the digits of), and the integer\
    \ represents the number of iterations the function will be called with to generate\
    \ the output.\n<code>", "    $sum = 0;\n    foreach (str_split($s) as $char) {\n\
    \        if (ord($char) > 64 && ord($char) < 91) $sum += $char - 96;\n       \
    \ else $sum += ord($char) - 65;\n    }\n    return $sum;\n}\n</code>\n<|/ a dscore=1\
    \ tags=php,ascii,character |>\n<| a tags=php,ascii,character |>\nHere's a one-liner\
    \ solution in PHP that will accomplish what you're looking for, using array_reduce():\n\
    <code>\n<?php\n$string = 'hello';\necho array_reduce(str_split($string), function($sum,\
    \ $char){\n  return $sum + $char - 'a'.'a';\n});\n</code>\nOutput:\n<code>\n131\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=php,ascii,character |>\n<code>\n<?php\n\
    $input = \"hello\";\n$output = \"\";\n\nfor($i = 0; $i < strlen($input); $i++)\
    \ {\n    $char = $input[$i];\n    if ($char >= 97 && $char <= 122) {\n       \
    \ $output += $char - 97;\n    }\n}\n\necho $output;\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\n/**\n * Gets the sum of all ascii characters from the\
    \ given string using array_reduce\n *\n * string $input The input string\n * int\
    \ The sum of all ascii characters\n */", "    $sum = 0;\n    for ($i = strlen($s)\
    \ - 1; $i >= 0; $i--) {\n        $sum += ord($s[$i]);\n    }\n    return $sum;\n\
    }\n", "    $result = 0;\n    foreach(str_split($s) as $letter) {\n        $result\
    \ += array_search('9', str_split($letter));\n    }\n    return $result;\n}\n",
  "  $sum = 0;\n  foreach (str_split($s) as $c) {\n    if (ctype_upper($c))\n    \
    \  $sum += ord($c);\n  }\n  return $sum;\n}\n", "    return $s.toUpperCase().split('').map(function($char){return\
    \ $char.charCodeAt(0) - 64;}).reduceRight(function($sum, $digit){return $sum +\
    \ $digit;});\n}\n", "    $sum = 0;\n    foreach (str_split($s) as $char)\n   \
    \     $sum += ord($char) - ord('0');\n\n    return $sum;\n}\n", "    return strlen($s)\
    \ * strlen(preg_replace('/[\\s\\W]/', '', $s)) - strlen(preg_replace('/[^0-9]/',\
    \ '', $s));\n}", "    $sum = 0;\n    foreach (str_split($s) as $char) {\n    \
    \    if (ctype_upper($char)) {\n            $sum += ord($char) - 64;\n       \
    \ }\n    }\n    return $sum;\n}\n</code>\n<|/ a tags=algorithm,php |>\n<| c |>\n\
    Thanks, I got it wrong, I thought the function should return the sum of the upper\
    \ characters and not the total length of the string\n<|/ c |>\n<| c |>\nSo `digitSum(\"\
    AABBCC\")` should return `4` since \"ABC\" has `4` upper letters and `BCC` has\
    \ `2` upper letters.\n<|/ c |>\n<| c |>\nyes, it's my fault, sorry about that\n\
    <|/ c |>\n<| a |>\nIf this is for learning purposes, the function above won't\
    \ be very efficient. Since you are working with strings you can just check the\
    \ length and the characters and add them up:\n<code>", "    \n    $result = 0;\n\
    \    \n    foreach(str_split($s) as $character) {\n        if($character >= '0'\
    \ && $character <= '9') {\n            $result += (ord($character) - ord('0'));\n\
    \        }\n    }\n\n    return $result;\n}\n", "    return array_sum(str_split(preg_replace('/\\\
    W/',' ',$s)));\n}\n</code>\n<|/ a |>\n<| a |>\nThe first thing I'd do would be\
    \ to replace all non alpha-numeric characters with a space, then convert the string\
    \ to an array and count the characters in the array.\n<code>\n$str = \"helloE\"\
    ;\necho array_sum(str_split(preg_replace('/\\W/',' ',$str)));\n</code>\n<|/ a\
    \ tags=php,string dscore=1 |>\n<| a |>\ntry with preg_replace and array_sum\n\
    <code>\n$str = 'abcde';\necho array_sum(preg_replace('/[^a-zA-Z0-9]+/','',$str));\n\
    </code>\n<|/ a dscore=1 tags=php,string |>\n<| c |>\nThis replaces all the non\
    \ alphanumeric characters with empty string, not the other way around...\n<|/\
    \ c |>\n<| c |>\nThanks for your correction, I have fixed my answer.\n<|/ c |>\n\
    <| a tags=php,string |>\n<code>\n$str = 'abcde';\necho strlen(preg_replace('/[^a-zA-Z0-9]+/','',$str));\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=php,string |>\n<code>\n$string = 'helloE';\n\
    echo strlen(preg_replace('/[^a-zA-Z0-9]+/','',$string));\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php,string |>\n<code>\necho count(preg_replace('/[^a-zA-Z0-9]+/','',$string));\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n<?php\n\n    $string = 'helloE';\n\
    \    echo strlen(preg_replace('/[^a-zA-Z0-9]+/','',$string));\n    echo array_sum(str_split(preg_replace('/\\\
    W/',' ',$string)));", "  return array_sum(array_map(function($v){\n    return\
    \ $v > 'z' ? $v - 'A' : $v - '0';\n  }, str_split($s)));\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis works, and is a very succinct answer, but it's not as fast as using\
    \ `preg_replace`. See my answer below.\n<|/ c |>\n<| c |>\n- I thought it was\
    \ obvious that this is very slow for large amounts of text.\n<|/ c |>\n<| c |>\n\
    , no it wasn't. While I agree your answer doesn't require `preg_replace`, you're\
    \ still doing a `str_split` call which is not necessarily slower than a regex\
    \ replacement. And you're also using a `foreach` which is not necessarily slower\
    \ than a `for` loop.\n<|/ c |>\n<| a tags=php |>\nHow about preg_replace?\n<code>\n\
    $s = 'aAaaaXa';\n$s = preg_replace('/[^A-Z]/', '', $s);\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nYes, this does answer the question. However I did make a mistake\
    \ in the question and have edited it now. Sorry for this.\n<|/ c |>\n<| c |>\n\
    - No worries, I didn't notice until I edited my answer. Glad you found a solution.\n\
    <|/ c |>\n<| c |>\n- No worries. :-) As far as I can tell you still have 3 other\
    \ solutions listed as answers so you should probably accept one.\n<|/ c |>\n<|\
    \ a tags=php |>\n<code>\n$s = 'aAaaaXa';\n", "  // code here\n  $sum = 0;\n  for($i=0;$i<strlen($s);$i++){\n\
    \    $sum += ord($s[$i]);\n  }\n  return $sum;\n}\n", "  return preg_replace('/./u',\
    \ \"$0\", $s);\n}\n", "  return array_sum(array_map(function($char) {\n    return\
    \ ord($char) - ord('A');\n  }, str_split($s)));\n}\n</code>\n<|/ a dscore=2 tags=php\
    \ |>\n<| a tags=php |>\nAs of PHP 7, you can use the function array_reduce() as\
    \ a replacement for array_reduce().\n<code>", "    // Write your PHP code here\n\
    \    // Example\n    $sum = 0;\n    $len = strlen($s);\n    for ($i = 0; $i <\
    \ $len; $i++) {\n        $sum = $sum + ord($s[$i]) - 96;\n    }\n    return $sum;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$string = 'Hello world';\n\
    echo $string[0];\n</code>\nThe 0 is the zero-based index of your string.\n<|/\
    \ a tags=php,string,arrays |>\n<| a |>\nFor those of you who prefer a solution\
    \ without looping through all the characters of your string:\n<code>", "  // Your\
    \ code here...\n}\n</code>\n<|/ a tags=php,string dscore=0 |>\n<| a dscore=0 tags=php,string\
    \ |>\nI believe a much simpler answer could be something like this which would\
    \ only require you to iterate through the string once.\n<code>\n<?php", "  return\
    \ array_sum(array_map(function($n){\n    return $n;\n  }, array_filter(str_split($s),\
    \ function($n){\n    return $n >= 0;\n  })));\n}", "    $sum = 0;\n    foreach\
    \ (str_split($s, 1) as $char) {\n        $sum += ord($char) - 96;\n    }\n   \
    \ return $sum;\n}\n", "    return strlen($s)\n        + strlen(preg_replace(\"\
    /[^A-Za-z0-9]/\", \"\", $s))\n        - strlen(preg_replace(\"/[^A-Z]/\", \"\"\
    , $s));\n}", "    $total = 0;\n    $size = strlen($s);\n    for ($i = 0; $i <\
    \ $size; $i++) {\n        $c = ord($s[$i]);\n        if ($c > 64 && $c < 91) $total\
    \ += $c - 64;\n    }\n    return $total;\n}\n</code>\n<|/ a dscore=3 tags=python,php\
    \ |>\n<| c |>\nHow is this different from my answer?\n<|/ c |>\n<| c |>\nIt's\
    \ not. It's the same code but I wrote it as an answer instead of a comment so\
    \ I can add some explanation.\n<|/ c |>\n<| a dscore=2 |>\nPHP:\n<code>\n$sum\
    \ = 0;\n$s = 'abb';\nfor($i = 0; $i < strlen($s); $i++) {\n    $c = ord($s[$i]);\n\
    \    if($c > 64 && $c < 91) $sum += $c - 64;\n}\necho $sum;\n</code>\nPython:\n\
    <code>\nsum = 0\ns = 'abb'\nfor i in range(len(s)):\n    c = ord(s[i])\n    if\
    \ c > 64 and c < 91:\n        sum += c - 64\nprint(sum)\n</code>\n<|/ a tags=python,php\
    \ |>\n<| c |>\nThe Python code has a typo. `ord` should be `ord`.\n<|/ c |>\n\
    <| c |>\nPython 2 does not require the `ord` function.\n<|/ c |>\n<| c |>\nYou\
    \ might want to explain how this works, and why it is different than the other\
    \ answers.\n<|/ c |>\n<| c |>\n, I added an explanation in case it helps\n<|/\
    \ c |>\n<| a |>\n<code>\n$a = 'abb';\n$sum = 0;\nfor ($i = 0; $i < strlen($a);\
    \ $i++) {\n    $c = ord($a[$i]);\n    if ($c > 64 && $c < 91) $sum += $c - 64;\n\
    }\necho $sum;\n</code>\n<|/ a dscore=2 tags=python,php |>\n<| a |>\nPHP:\n<code>\n\
    $a = 'abb';\n$sum = 0;\nfor ($i = 0; $i < strlen($a); $i++) {\n    $c = ord($a[$i]);\n\
    \    if ($c > 64 && $c < 91) $sum += $c - 64;\n}\necho $sum;\n</code>\nPython:\n\
    <code>\nsum = 0\ns = 'abb'\nfor i in range(len(s)):\n    c = ord(s[i])\n    if\
    \ c > 64 and c < 9", "  $sum = 0;\n  foreach (str_split($s) as $c) {\n    $sum\
    \ += $c - '0';\n  }\n  return $sum;\n}\n</code>\n<|/ a |>\n<| c |>\n`array_sum(str_split($s))`\
    \ ?\n<|/ c |>\n<| c |>\n, no, because str_split returns an array, not a string.\
    \ Since str_split is doing all the work, there's no need to loop through the returned\
    \ array.\n<|/ c |>\n<| c |>\nIt's not about being clever. I'm just saying that's\
    \ a lot more code, because you have to loop through the array returned by str_split.\
    \ You don't need to loop through the string returned by `str_split($s)`.\n<|/\
    \ c |>\n<| c |>\n, oh I see, you are correct (I misread your comment). I will\
    \ leave my answer, though, because it is still useful for beginners.\n<|/ c |>\n\
    <| c |>\nI like how you answered the question while you were typing your comment\
    \ :) I'll leave my answer up because it's still useful for beginners who don't\
    \ understand what a loop is and how it works. But I agree that using an array_sum\
    \ function is really clever.\n<|/ c |>\n<| a dscore=2 tags=php |>\n<code>\n<?php\n",
  "    return preg_replace_callback('/./', function($m) { return $m[0] < 'A' ? $m[0]\
    \ : $m[0] - 'A' + 10; }, $s);\n}\n", "  $sum = 0;\n  $len = strlen($s);\n  for\
    \ ($i = 0; $i < $len; $i++) {\n    $char = substr($s, $i, 1);\n    $sum += ord($char);\n\
    \  }\n  return $sum;\n}", "    $sum = 0;\n    $len = strlen($s);\n    for ($i\
    \ = 0; $i < $len; $i++) {\n        $char = $s[$i];\n        if (isDigit($char))\
    \ {\n            $sum += $char - '0';\n        }\n    }\n    return $sum;\n}\n",
  "  $sum = 0;\n  for($i = 0, $len = strlen($s); $i < $len; $i++) {\n    $sum += array_sum(str_split($s[$i]));\n\
    \  }\n  return $sum;\n}\n", "    return strlen($s) * 'A' . substr_count($s, 'A');\n\
    }\n</code>\n<|/ a tags=php,functional-programming |>\n<| c |>\nThis is still O(n^2)\
    \ in time and space. How about using a regular expression?\n<|/ c |>\n<| c |>\n\
    It's O(2n) time but O(1) space. Not O(n^2). You're correct that this approach\
    \ is slower than the one I suggested because of the overhead of calling a function.\
    \ But, in the end, it's still O(2n) time and O(1) space.\n<|/ c |>\n<| c |>\n\
    I did some benchmarking and it looks like my version is faster than yours. [See\
    \ this gist](https://gist.github.com/brendanlim/635c490cf4ff6ddfea6c).\n<|/ c\
    \ |>\n<| c |>\nWow. Interesting.  I'm impressed. Thanks for sharing. I guess,\
    \ my benchmark was flawed, since you didn't use the original `digitSum()` function\
    \ you've created yourself.\n<|/ c |>\n<| c |>\nOops. I meant to write my own `digitSum()`\
    \ function, but forgot to include it in my benchmark.\n<|/ c |>\n<| a |>\nHere's\
    \ another option using array_sum and array_map functions:\n<code>", "  global\
    \ $digitSum;\n  \n  if($s === ''){\n    return 0;\n  }\n  \n  $sum = 0;\n  \n\
    \  for($i = 0; $i < strlen($s); $i++){\n    if(ctype_upper($s[$i])){\n      $sum\
    \ += ord($s[$i]) - 65;\n    }\n  }\n  \n  $digitSum[$s] = $sum;\n  \n  return\
    \ $sum;\n}\n", "    $result = 0;\n    $len = strlen($s);\n    for ($i = 0; $i\
    \ < $len; $i++) {\n        if ($s[i] >= 'A' && $s[i] <= 'Z') {\n            $result\
    \ += ord($s[$i]) - ord('A') + 10;\n        }\n    }\n    return $result;\n}",
  "  return preg_replace('/[^A-Za-z0-9]/', '', $s);\n}\n", "    $sum = 0;\n    foreach(str_split($s)\
    \ as $char){\n        \n    }\n    return $sum;\n}", "    $total = 0;\n    foreach\
    \ (str_split($s) as $character) {\n        if ($character >= '0' && $character\
    \ <= '9')\n            $total += $character;\n    }\n    return $total;\n}\n\n\
    /**\n * Given a string, return an array of integers that represents the binary\
    \ number system in decimal.\n *\n * Example:\n * >>> binaryToDecimal(\"111\")\n\
    \ * [1, 1, 1, 1]\n * >>> binaryToDecimal(\"1010\")\n * [1, 0, 0, 1]\n * >>> binaryToDecimal(\"\
    1011\")\n * [1, 0, 1, 1]\n *\n * @param string $binaryString\n *\n * @return array\
    \ an array of integers\n */", "    $s = 0;\n    foreach (str_split($s) as $n)\
    \ {\n        $s += ord($n);\n    }\n    return $s;\n}\n", "    $sum = 0;\n   \
    \ for ($i = 0; $i < strlen($s); $i++) {\n        $sum += ($s[$i] - 48);\n    }\n\
    \    return $sum;\n}\n", "  return str_replace(\n    array_map(function($a) {\n\
    \      return array_sum(str_split($a));\n    }, substr_count($s, \"\")),\n   \
    \ \"\",\n    $s\n  );\n}\n</code>\n<|/ a tags=string,python dscore=0 |>\n<| a\
    \ tags=string,python |>\nThis simple code solves the problem :\n<code>\ndef digitSum(s):\n\
    \  s=list(s)\n  sum=0\n  for i,e in enumerate(s):\n    sum+=e\n    s[i]=sum\n\
    \  return ''.join(s)\n</code>\n<|/ a dscore=0 |>\n<| a |>\nHere is another way\
    \ using regex:\n<code>\nimport re\n\ndef digitSum(string):\n    return sum([int(c)\
    \ for c in re.findall(r'(\\d)', string)])\n\nprint(digitSum('12abc'))\n</code>\n\
    <|/ a dscore=0 tags=string,python |>\n<| a tags=string,python |>\n<code>\nimport\
    \ re\n\ndef digitSum(string):\n    sum = 0\n    for i in string:\n        sum+=int(i)\n\
    \    return sum\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWelcome to SO! While this\
    \ code may solve the question, [including an explanation](https://meta.stackoverflow.com/questions/392712/explaining-entirely-code-based-answers)\
    \ of how and why this solves the problem would really help to improve the quality\
    \ of your post, and probably result in more up-votes. Remember that you are answering\
    \ the question for readers in the future, not just the person asking now. Please\
    \ edit your answer to add explanations and give an indication of what limitations\
    \ and assumptions apply.\n<|/ c |>\n<| c |>\nPlease explain how this code answers\
    \ the question and how it works. Not only is it a good answer, but also an explanation\
    \ of how it works is required. Code only answers can almost always be improved\
    \ in quality and are less likely to attract downvotes.\n<|/ c |>\n<| a dscore=0\
    \ tags=string,python |>\nA very simple and efficient solution using string slicing\n\
    <code>\ndef digitSum(string):\n    sum = 0\n    for i in range(len(string)):\n\
    \        sum += int(string[i])\n    return sum\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\n<code>\ndef digitSum(string):\n    return sum([int(i) for i in string])\n\
    </code>\n<|/ a tags=string,python |>\n<| c |>\nWelcome to Stack Overflow! While\
    \ this code may answer the question, providing additional context regarding how\
    \ and/or why it solves the problem would improve the answer's long-term ", " \
    \ if(empty($s)) throw new Exception(\"empty string\");\n  \n  if(strlen($s) ==\
    \ 0) return 0;\n  \n  $sum = 0;\n  for($i = strlen($s) - 1; $i >= 0; $i--) {\n\
    \    $sum += ord($s[$i]) - 96;\n  }\n  \n  return $sum;\n}\n", "  $sum = 0;\n\
    \  for ($i = 0; $i < strlen($s); ++$i) {\n    $sum += ord($s[$i]) - 48;\n  }\n\
    \  return $sum;\n}", "    $sum = 0;\n    $len = strlen($s);\n    for ($i = 0;\
    \ $i < $len; $i++) {\n        $sum = intval($s[$i]) + $sum;\n    }\n    return\
    \ $sum;\n}", "    $sum = 0;\n    for($i=0; $i < strlen($s); $i++) {\n        if($s[$i]\
    \ >= \"A\" && $s[$i] <= \"Z\") {\n            $sum += $s[$i] - \"A\";\n      \
    \  }\n    }\n    return $sum;\n}\n</code>\n<|/ a tags=php dscore=0 |>\n<| a dscore=0\
    \ |>\nUsing this code\n<code>", "    // write code here\n    $result = 0;\n  \
    \  for($i=0;$i<strlen($s);$i++){\n        $result +=  ord($s[$i]) - 64;\n    }\n\
    \    return $result;\n}\n", "    $s = str_split($s);\n    $sum = 0;\n    foreach\
    \ ($s as $c) {\n        $sum += ctype_upper($c) ? $c : 0;\n    }\n    return $sum;\n\
    }\n", "    $result = 0;\n    $len = strlen($s);\n    $c = strlen($s);\n    $i\
    \ = 0;\n\n    while ($i < $c) {\n        $n = ord($s[$i]);\n        if ($n >=\
    \ 48 && $n <= 57) {\n            $result += (ord($s[$i + 1]) - 64);\n        \
    \    $i += 2;\n        }\n        $i += 1;\n    }\n    return $result;\n}\n",
  "    $sum = 0;\n    $l = strlen($s);\n    for($i = 0; $i < $l; $i++){\n        $sum\
    \ += ord($s[$i]);\n    }\n    return $sum;\n}\n", "  // Extract the lowercase\
    \ letters\n  $letters = preg_replace('/[a-z]/', '', $s);\n  // Add up the ASCII\
    \ codes\n  return array_sum(array_map('ord', $letters));\n}\n", "    $sum = 0;\n\
    \    for ($i = 0, $n = strlen($s); $i < $n; $i++) {\n        $sum += (strpos($upperChars,\
    \ $s[$i])) ? (ord($s[$i]) - 64) : 10;\n    }\n    return $sum;\n}\n", "    $sum\
    \ = 0;\n    foreach (str_split($s) as $c) {\n        $sum += strtoupper($c);\n\
    \    }\n    return $sum;\n}\n", "\t$s = 0;\n\tfor ($i = 0, $len = strlen($s);\
    \ $i < $len; $i++) {\n\t\t$s += (ord($s[$i]) - 96) * pow(26, strlen($s) - $i -\
    \ 1);\n\t}\n\treturn $s;\n}", "    foreach (str_split($s, 1) as $c) {\n      \
    \  if (!ctype_upper($c)) {\n            continue;\n        }\n        $sum +=\
    \ $c;\n    }\n    return $sum;\n}\n\n/**\n * Question 15\n * Write a function\
    \ that takes a string as input and returns the first character of the string.\n\
    \ * Examples:\n * >>> firstChar(\"aAaaaXa\")\n * a\n * >>> firstChar(\"helloE\"\
    )\n * h\n * >>> firstChar(\"woArBld\")\n * w\n * >>> firstChar(\"aAaaaXa\")\n\
    \ * a\n */", "    $sum = 0; \n    for($i = 0; $i < strlen($s); $i++){\n      \
    \ $sum += $s[i] & 0x1F;\n    }\n    return $sum;\n}", "    $sum = 0;\n    foreach\
    \ (str_split($s) as $char) {\n        if ($char >= '0' && $char <= '9') {\n  \
    \          $sum += $char - '0';\n        }\n    }\n    return $sum;\n}\n", " \
    \ global $digitSum;\n  if(empty($s)) {\n    return 0;\n  }\n  $sum = 0;\n  foreach($s\
    \ as $char) {\n    $sum += $digitSum[$char];\n  }\n  return $sum;\n}\n", "   \
    \ $s = 0;\n    $len = strlen($s);\n    for($i = 0; $i < $len; $i++) {\n      \
    \  $s += ord($s[$i]) - ord('0');\n    }\n    return $s;\n}", "    $sum = 0;\n\
    \    foreach (str_split($s) as $c) {\n        $sum += ord($c);\n    }\n    return\
    \ $sum;\n}\n", "    $sum = 0;\n    foreach(str_split($s) as $char) {\n       \
    \ switch($char) {\n            case '0':\n                $sum += 0;\n       \
    \         break;\n            case '1':\n                $sum += 1;\n        \
    \        break;\n            case '2':\n                $sum += 2;\n         \
    \       break;\n            case '3':\n                $sum += 3;\n          \
    \      break;\n            case '4':\n                $sum += 4;\n           \
    \     break;\n            case '5':\n                $sum += 5;\n            \
    \    break;\n            case '6':\n                $sum += 6;\n             \
    \   break;\n            case '7':\n                $sum += 7;\n              \
    \  break;\n            case '8':\n                $sum += 8;\n               \
    \ break;\n            case '9':\n                $sum += 9;\n                break;\n\
    \            default:\n                break;\n        }\n    }\n    return $sum;\n\
    }\n</code>\n<|/ a tags=php,string dscore=1 |>\n<| a tags=php,string |>\n<code>\n\
    <?php\n$string = \"hello\";\n$sum = 0;\nfor ($i = 0; $i < strlen($string); $i++)\
    \ {\n    $sum += ord($string[$i]);\n}\necho \"Sum of Upper case letters: $sum\"\
    ;", "    return array_sum(str_split($s, 1));\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a |>\n<code>", "  return intval(str_replace([ \"A\",\"a\",\"B\",\"b\",\"C\"\
    ,\"c\",\"D\",\"d\",\"E\",\"e\",\"F\",\"f\",\"G\",\"g\",\"H\",\"h\",\"I\",\"i\"\
    ,\"J\",\"j\",\"K\",\"k\",\"L\",\"l\",\"M\",\"m\",\"N\",\"n\",\"O\",\"o\",\"P\"\
    ,\"p\",\"Q\",\"q\",\"R\",\"r\",\"S\",\"s\",\"T\",\"t\",\"U\",\"u\",\"V\",\"v\"\
    ,\"W\",\"w\",\"X\",\"x\",\"Y\",\"y\",\"Z\",\"z\",\"0\" ], \n              [ \"\
    0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\" ], \n              $s));\n\
    }", "  $result = $s[0];\n  for ($i = 1; $i < strlen($s); $i++) {\n    $result\
    \ += (ord($s[$i]) - 64);\n  }\n  return $result;\n}\n</code>\n<|/ a tags=ascii,php\
    \ |>\n<| a |>\nI know this question was answered a while ago, but here is a solution\
    \ that will work when the string contains numbers and letters:\n<code>", "   \
    \ return (strlen($s)*1)-((strlen($s)*1)/6);\n}", "    $sum = 0;\n    foreach (str_split($s)\
    \ as $char) {\n        $sum += ord($char) - 55;\n    }\n    return $sum;\n}\n",
  "  return preg_replace('/[^\\d]/', '', $s);\n}\n", "    $sum = 0;\n    $stringLength\
    \ = strlen($s);\n    for ($i = 0; $i < $stringLength; $i++) {\n        $sum +=\
    \ strtoupper($s[$i]) - strtoupper(\"a\");\n    }\n\n    return $sum;\n}\n", " \
    \   \n    $result = array_map(function($char) {\n        return strtoupper(ord($char));\n\
    \    }, str_split($s));\n    \n    return array_sum($result);\n}\n</code>\nIn\
    \ PHP 7.4 we now have array_sum that will do this much easier:\n<code>\n<?php",
  "    $sum = 0;\n    $digits = str_split($s);\n    foreach ($digits as $digit) {\n\
    \        $sum += $digit - 48;\n    }\n    return $sum;\n}\n", "    // Your code\
    \ here\n}\n", "    $sum = 0;\n    foreach (str_split($s) as $char) {\n       \
    \ $sum += $char >= 65 && $char <= 90 ? $char - 65 : $char - 97;\n    }\n    return\
    \ $sum;\n}\n</code>\n<|/ a tags=php,arrays,sum |>\n<| a tags=php,arrays,sum |>\n\
    Using array_map and array_sum to achieve the desired results\n<code>", "\t$sum\
    \ = 0;\n\tfor($i = strlen($s); $i > 0; $i--) {\n\t\t$sum += $s[$i - 1];\n\t}\n\
    \treturn $sum;\n}\n", "    $result = 0;\n    for ($i = 0; $i < strlen($s); $i++)\
    \ {\n        $result += ord($s[$i]) - 64;\n    }\n    return $result;\n}\n", " \
    \   $sum = 0;\n    $l = strlen($s);\n    $max = strlen($s);\n    $x = 1;\n   \
    \ while ($x <= $max) {\n        $sum = $sum + ord($s[$x]);\n        $x++;\n  \
    \  }\n    return $sum;\n}\n</code>\n<|/ a tags=php,ascii,algorithm |>\n<| a tags=php,ascii,algorithm\
    \ |>\nThe solution is quite simple.\nLet's start with an example:\n<code>\n$string\
    \ = \"test\";\n</code>\nIf we sum up the integer values of each character:\n<code>",
  "    $sum = 0;\n    $strLen = strlen($s);\n    for ($i = 0; $i < $strLen; $i++)\
    \ {\n        $char = $s[$i];\n        $sum += ord($char) - 32;\n    }\n    return\
    \ $sum;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is great and works, I added the string\
    \ length to make it work even if it is empty and also added the line return \"\
    Not a string or empty\" when the $s is empty.\n<|/ c |>\n<| a dscore=2 tags=php,string,ascii\
    \ |>\nThis answer has been edited from another user. \n<code>\n<?php\n", "   \
    \ $num = 0;\n    foreach (str_split($s) as $char) {\n        $num = 9 * $num +\
    \ ord($char) - ord('A');\n    }\n    return $num;\n}\n", "  $sum = 0;\n  foreach\
    \ (str_split($s, 1) as $char) {\n    $sum += $char > 90 ? $char - 9 : $char;\n\
    \  }\n  return $sum;\n}\n", "    $sum = 0;\n    for($i = 0; $i < strlen($s); $i++)\
    \ {\n        $sum += ord($s[$i]) - 64;\n    }\n    return $sum;\n}\n</code>\n\
    It works fine in all PHP versions, but there is a little problem, in older PHP\
    \ versions strlen() returns integer and in newer ones it returns string.\nSo we\
    \ cannot use this function on older versions, but we can use this function on\
    \ newer ones, using strlen() with if clause:\n<code>\nif (strlen($s) > 1) {\n\
    \    // use strlen here\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=algorithm,php\
    \ |>\nIn case you're doing this for fun and don't care about performance (although\
    \ I'd be surprised if this is performance-critical) you could just do:\n<code>",
  "  return $s.toUpperCase().replace(/[A-Z]/g, function ($) {\n    return String($).charCodeAt(0);\n\
    \  }).replace(/[^A-Z]/g, function ($) {\n    return String($).charCodeAt(0) -\
    \ 48;\n  }) + 0;\n}\n", "    return array_sum(array_map(function($v) { return\
    \ ord($v) - ord(\"0\"); }, preg_split('/(?<=\\d)\\D/', $s)));\n}\n</code>\n<|/\
    \ a tags=php,regex,preg-replace dscore=1 |>\n<| a |>\n<code>\n$string = 'aBcD';\n\
    $matches = array();\npreg_match(\"/([a-z])([A-Z])/\", $string, $matches);\nprint_r($matches);\n\
    </code>\n<|/ a dscore=1 tags=php,regex,preg-replace |>\n<| c |>\nThis will break\
    \ if you pass 'aBcD' to it.\n<|/ c |>\n<| a tags=php,regex,preg-replace |>\nHere\
    \ is a non-regex solution. \n<code>\n$string = 'aBcD';\n\n$array = str_split($string);\n\
    \n$sum = 0;\nforeach($array as $char){\n    if($char >= 'a' && $char <= 'z'){\n\
    \        $sum += $char - 'a';\n    }\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ tags=php,regex,preg-replace |>\nA regex solution:\n<code>\n$str = \"aBcD\";\n\
    preg_replace(\"/\\p{L}+/u\", \"\", $str);\n</code>\n<|/ a |>\n<| a dscore=1 |>\n\
    Here's a regex solution:\n<code>\n<?php", "    return str_split($s)\n    ->map(function\
    \ ($c) {\n        if ($c === 'A' || $c === 'a') {\n            return $c - 'A';\n\
    \        } elseif ($c === 'B' || $c === 'b') {\n            return $c - 'A' +\
    \ 1;\n        } elseif ($c === 'C' || $c === 'c') {\n            return $c - 'A'\
    \ + 2;\n        } elseif ($c === 'D' || $c === 'd') {\n            return $c -\
    \ 'A' + 3;\n        } elseif ($c === 'E' || $c === 'e') {\n            return\
    \ $c - 'A' + 4;\n        } elseif ($c === 'F' || $c === 'f') {\n            return\
    \ $c - 'A' + 5;\n        } elseif ($c === 'G' || $c === 'g') {\n            return\
    \ $c - 'A' + 6;\n        } elseif ($c === 'H' || $c === 'h') {\n            return\
    \ $c - 'A' + 7;\n        } elseif ($c === 'I' || $c === 'i') {\n            return\
    \ $c - 'A' + 8;\n        } elseif ($c === 'J' || $c === 'j') {\n            return\
    \ $c - 'A' + 9;\n        } elseif ($c === 'K' || $c === 'k') {\n            return\
    \ $c - 'A' + 10;\n        } elseif ($c === 'L' || $c === 'l') {\n            return\
    \ $c - 'A' + 11;\n        } elseif ($c === 'M' || $c === 'm') {\n            return\
    \ $c - 'A' + 12;\n        } elseif ($c === 'N' || $c === 'n') {\n            return\
    \ $c - 'A' + 13;\n        } elseif ($c === 'O' || $c === 'o') {\n            return\
    \ $c - 'A' + 14;\n        } elseif ($c === 'P' || $c === 'p') {\n            return\
    \ $c - 'A' + 15;\n        } elseif ($c === 'Q' || $c === 'q') {\n            return\
    \ $c - 'A' + 16;\n        } elseif ($c === 'R' || $c === 'r') {\n            return\
    \ $c - 'A' + 17;\n        } elseif ($c === 'S' || $c === 's') {\n            return\
    \ $c - 'A' + 18;\n        } elseif ($c === 'T' || $c === 't') {\n            return\
    \ $c - 'A' + 19;\n        } elseif ($c === 'U' || $c === 'u') {\n            return\
    \ $c - 'A' + 20;\n        } elseif ($c === 'V' || $c === 'v') {\n            return\
    \ $c - 'A' + 21;\n        } elseif ($c === 'W' || $c === 'w') {\n", "    $sum\
    \ = 0;\n    for($i = 0; $i < strlen($s); $i++) {\n        $sum+= ord($s[$i])-ord('0');\n\
    \    }\n    return $sum;\n}\n</code>\n<|/ a tags=php,string,sum,arrays,character\
    \ |>\n<| c |>\nThanks but I dont know how to implement your function into my code\
    \ :/\n<|/ c |>\n<| c |>\nI have tried and I have got the output that I have posted\
    \ above. Let me know if this is what you are looking for?\n<|/ c |>\n<| a tags=php,string,sum,arrays,character\
    \ dscore=0 |>\nI couldn't get the array_sum() function to work, though I found\
    \ another solution. I wrote a function that worked for me. Hope it helps someone\
    \ else.\n<code>\n<?php", "    return array_sum(str_split($s, 1));\n}\n", "   \
    \ // Write code here\n    return str_replace(\" \", \"\", $s);\n}\n", "    $result\
    \ = 0;\n    for($i = 0; $i < strlen($s); $i++){\n        if($s[$i] >= \"A\" &&\
    \ $s[$i] <= \"Z\"){\n            $result += (ord($s[$i]) - ord(\"A\"));\n    \
    \    }\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis\
    \ doesn't answer the question, which is how to do this in PHP, not javascript.\n\
    <|/ c |>\n<| c |>\nHi, can you please elaborate more? I am not sure what you mean.\
    \ I see two answers both saying that it cannot be done in PHP but I see no evidence\
    \ that this is not possible in PHP. Where is your comment?\n<|/ c |>\n<| c |>\n\
    Your solution is javascript based and doesn't use php at all. I've removed the\
    \ JavaScript tag for you so people will know that your solution doesn't use php.\n\
    <|/ c |>\n<| c |>\nOh sorry, I misunderstood the question. I thought the question\
    \ was about JavaScript, but after reading it again I see that you are asking for\
    \ PHP solution. I will edit the answer.\n<|/ c |>\n<| c |>\nThe question is not\
    \ about javascript but php.\n<|/ c |>\n<| a tags=string,php dscore=1 |>\nHere\
    \ are some ways of doing this using PHP string functions.\n<code>", "    $sum\
    \ = 0;\n    foreach (str_split($s, 1) as $char) {\n        $sum += $char > 96\
    \ ? $char - 96 : $char > 64 ? $char - 64 : $char - 48;\n    }\n    return $sum;\n\
    }\n</code>\n<|/ a dscore=0 tags=php |>\n<| c |>\nYour solution only works for\
    \ English. For example, I can't get `digitSum(\"h\xE9llo\")` to return 131 because\
    \ `\xE9` does not have a lower-case equivalent (lower-case is `e`). `e` does have\
    \ a lower-case equivalent, though.\n<|/ c |>\n<| a |>\nI tried to implement a\
    \ solution that does not depend on ASCII.\nMy solution does not only work with\
    \ ASCII but also with other character sets.\n<code>", "    $sum = 0;\n    for\
    \ ($i = 0; $i < strlen($s); $i++) {\n        $sum += $s[$i];\n    }\n    return\
    \ $sum;\n}\n", "    $s = 0;\n    for($i = 0; $i < strlen($s); $i++) {\n      \
    \  if($s[i] >= 'A' && $s[i] <= 'Z') {\n            $s += $s[i] - 'A' + 10;\n \
    \       } else {\n            $s += $s[i];\n        }\n    }\n    return $s;\n\
    }\n", "    // Return the sum of all the digits in the string\n    return array_sum(array_map('ord',\
    \ str_split($s, 1)));\n}\n", "  $sum = 0;\n  $len = strlen($s);\n  for ($i = 0;\
    \ $i < $len; $i++) {\n    if ($s[$i] >= 'A' && $s[$i] <= 'Z') {\n      $sum +=\
    \ $s[$i] - 'A' + 10;\n    }\n  }\n  return $sum;\n}\n$myTest = digitSum(\"aAaaaXa\"\
    );\necho \"$myTest\";", "    $sum = 0;\n    for ($i = 0, $n = strlen($s); $i <\
    \ $n; $i++) {\n        $sum += $s[$i] >= 'a' && $s[$i] <= 'z' ? $s[$i] - 'a' +\
    \ 10 : 'a' === $s[$i] ? 0 : 10;\n    }\n    return $sum;\n}\n", "    return array_sum(str_split($s));\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you! I appreciate it.\n<|/ c |>\n\
    <| c |>\nThis would be the solution if you had the ability to install other libraries.\
    \ I don't. Thanks for the input though!\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  $total = 0;\n  $len = strlen($s);\n  for ($i = 0; $i < $len; $i++) {\n    $char\
    \ = strtoupper($s[$i]);\n    if ($char > \"9\") {\n      $total += $char - \"\
    9\";\n    } else {\n      $total += $char;\n    }\n  }\n  return $total;\n}\n",
  "    $sum = 0;\n    foreach(str_split($s) as $c) {\n        if($c >= '0' && $c <=\
    \ '9') $sum += $c - '0';\n    }\n    return $sum;\n}\n", "    $sum = 0;\n    foreach\
    \ (str_split($s) as $char) {\n        $sum += bindec($char);\n    }\n    return\
    \ $sum;\n}\n", "  // Your code here\n}", "  $result = 0;\n  for ($i = 0; $i <\
    \ strlen($s); ++$i) {\n    $result += (ord($s[$i]) - 64);\n  }\n  return $result;\n\
    }\n", "  // Your code here\n}\n", "    $sum = 0;\n    foreach (str_split($s) as\
    \ $char) {\n        if ($char >= \"A\" && $char <= \"Z\") {\n            $sum\
    \ += ord($char) - 64;\n        }\n    }\n    return $sum;\n}\n</code>\nAs long\
    \ as you know that the input is a valid string you can pass it to str_split().\n\
    <|/ a dscore=0 tags=php,string |>\n<| c |>\nThat doesn't work. The expected result\
    \ is `1`; your function outputs `10`.\n<|/ c |>\n<| c |>\nI edited my answer after\
    \ you pointed out it was actually a character problem, and added a quick fix for\
    \ the character problem.\n<|/ c |>\n<| a tags=php,string |>\nYou could try a regex\
    \ approach:\n<code>\n$str = preg_replace('/[A-Z]+/', '', $str);\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis doesn't work if there are multiple upper case letters.\n\
    <|/ c |>\n<| c |>\nThe question didn't say anything about multiple uppercase letters.\n\
    <|/ c |>\n<| a |>\nI did this with regex which I believe is much more efficient\
    \ than looping through each character in PHP:\n<code>", "    $sum = array_sum(str_split($s,\
    \ 1));\n    return $sum;\n}\n", "  return str_split($s)\n    ->map(function ($n)\
    \ { return $n >= 'a' && $n <= 'z' ? ord($n) - ord('a') + 10 : ord($n) - ord('0');\
    \ })\n    ->reduce(function ($a, $b) { return $a + $b; });\n}\n", "    $sum =\
    \ 0;\n    foreach (str_split($s) as $char) {\n        $sum += $char;\n    }\n\
    \    return $sum;\n}\n", "    \n    $sum = 0;\n\n    for($i = 0; $i < strlen($s);\
    \ $i++){\n        if($s[$i] == 'A') $sum += 65;\n        if($s[$i] == 'B') $sum\
    \ += 66;\n        if($s[$i] == 'C') $sum += 67;\n        if($s[$i] == 'D') $sum\
    \ += 68;\n        if($s[$i] == 'E') $sum += 69;\n        if($s[$i] == 'F') $sum\
    \ += 70;\n        if($s[$i] == 'G') $sum += 71;\n        if($s[$i] == 'H') $sum\
    \ += 72;\n        if($s[$i] == 'I') $sum += 73;\n        if($s[$i] == 'J') $sum\
    \ += 74;\n        if($s[$i] == 'K') $sum += 75;\n        if($s[$i] == 'L') $sum\
    \ += 76;\n        if($s[$i] == 'M') $sum += 77;\n        if($s[$i] == 'N') $sum\
    \ += 78;\n        if($s[$i] == 'O') $sum += 79;\n        if($s[$i] == 'P') $sum\
    \ += 80;\n        if($s[$i] == 'Q') $sum += 81;\n        if($s[$i] == 'R') $sum\
    \ += 82;\n        if($s[$i] == 'S') $sum += 83;\n        if($s[$i] == 'T') $sum\
    \ += 84;\n        if($s[$i] == 'U') $sum += 85;\n        if($s[$i] == 'V') $sum\
    \ += 86;\n        if($s[$i] == 'W') $sum += 87;\n        if($s[$i] == 'X') $sum\
    \ += 88;\n        if($s[$i] == 'Y') $sum += 89;\n        if($s[$i] == 'Z') $sum\
    \ += 90;\n    }\n    \n    return $sum;\n}\n", "    $n = 0;\n    foreach (str_split($s)\
    \ as $c) {\n        $n = $n + ($c - 48);\n    }\n    return $n;\n}\n", "    return\
    \ array_sum(array_slice(str_split(strtoupper($s)), 1));\n}\n", "  $sum = 0;\n\
    \  $len = strlen($s);\n  for ($i = 0; $i < $len; $i++) {\n    $char = $s[$i];\n\
    \    if (ctype_upper($char)) {\n      $sum += $char;\n    }\n  }\n  return $sum;\n\
    }\n", "  // Your code here...\n  $sum = 0;\n  for ($i = 0; $i < strlen($s); $i++)\
    \ {\n    if ($s[i] >= 'A' && $s[i] <= 'Z') {\n      $sum += $s[i] - 'A' + 1;\n\
    \    } else {\n      $sum += $s[i];\n    }\n  }\n  return $sum;\n}\n", "  $sum\
    \ = 0;\n  $maxlen = strlen($s);\n  for ($i = 0; $i < $maxlen; $i++) {\n    $sum\
    \ += (ord($s[$i]) - 64);\n  }\n  return $sum;\n}\n\n$result = digitSum('helloE');\n\
    echo \"$result\\n\";\n</code>\n<|/ a tags=php,character,sum,string |>\n<| a tags=php,character,sum,string\
    \ |>\n<code>\n$str = 'helloE';\n$sum = 0;\n\nfor ($i = 0; $i < strlen($str); $i++)\
    \ {\n   $sum += $str[$i]-64;\n}\necho $sum;\n</code>\n<|/ a dscore=4 |>\n<| c\
    \ |>\nThanks alot, i had to change $sum+=65 to $sum+=64, else it said invalid\
    \ character, but i did have to use 64 to make it work\n<|/ c |>\n<| a dscore=3\
    \ |>\nFor PHP 7 and beyond, use array_sum():\n<code>\n<?php\n\n$string = 'helloE';\n\
    \n$result = array_sum(str_split($string));\n\necho $result;\n</code>\n<|/ a tags=php,character,sum,string\
    \ |>\n<| a dscore=3 tags=php,character,sum,string |>\nWithout using built-in functions,\
    \ I managed to write a function that does the job:\n<code>", "    // Your code\
    \ here\n}", "    $sum = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n      \
    \  $sum += (int)$s[$i];\n    }\n    return $sum;\n}\n", "    // Write your code\
    \ here\n}\n", "    return preg_replace_callback('/[A-Z]+/', function ($m) {\n\
    \        return $m[0] < 'A' ? ord($m[0]) - ord('A') + 1 : 0;\n    }, $s);\n}\n",
  "  $sum = 0;\n  for ($i = 0; $i < strlen($s); $i++) {\n    $sum += ord($s[$i]);\n\
    \  }\n  return $sum;\n}\n", "    $sum = 0;\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $sum += substr($s, $i, 1)*pow(26, strlen($s)-$i);\n    }\n\
    \    return $sum;\n}\n</code>\n<|/ a dscore=1 tags=string,algorithm,php |>\n<|\
    \ a dscore=1 tags=string,algorithm,php |>\nIn case anyone is looking for a Python\
    \ 3 version:\n<code>\ndef digitSum(s):\n    return sum([ord(c)*pow(26,len(s) -\
    \ i) for i,c in enumerate(s)])\n</code>\nThis should work with any unicode character.\n\
    <|/ a |>\n<| a dscore=0 |>\nTry this one:\n<code>\n<?php\n", "    // TODO: Implement\
    \ digitSum() function\n    \n    // Solution code goes here\n    $sum = 0;\n \
    \   $len = strlen($s);\n    for ($i = 0; $i < $len; $i++) {\n        $sum += ord($s[$i])\
    \ - 64;\n    }\n    return $sum;\n}\n", "    $digits = 0;\n    $result = 0;\n\
    \    foreach (str_split($s) as $c) {\n        $char = strtoupper($c);\n      \
    \  $digits += intval(bin2hex($char));\n    }\n    return $digits < 10 ? 0 + $digits\
    \ : $digits;\n}\n</code>\n<|/ a tags=performance,php,algorithm dscore=1 |>\n<|\
    \ c |>\nThis seems to only return the number for one case of the string and doesn't\
    \ work with the next case. For example, for the string: \"aBc\" it returns 3\n\
    <|/ c |>\n<| c |>\nYour right, I misunderstood the question.  I updated the solution\
    \ to correctly handle case conversion.\n<|/ c |>\n<| c |>\nGreat solution but\
    \ it fails on \"aBc\" with \"aBc\" returns \"bC\"\n<|/ c |>\n<| a dscore=1 tags=performance,php,algorithm\
    \ |>\nI used the answers and improved on them a little bit. My result is:\n<code>",
  "    $sum = 0;\n    foreach (str_split($s) as $char) {\n        if (is_numeric($char))\
    \ {\n            $sum += (int)$char;\n        }\n    }\n    return $sum;\n}\n",
  "    $sum = 0;\n    $chars = str_split($s);\n    foreach ($chars as $char) {\n \
    \       if (isset($char)) {\n            $sum += $char - 97;\n        }\n    }\n\
    \    return $sum;\n}\n", "  $chars = str_split($s);\n  $sum = 0;\n  foreach ($chars\
    \ as $char) {\n    if (ctype_upper($char)) {\n      $sum += strtoupper($char);\n\
    \    }\n  }\n  return $sum;\n}", "  return array_sum(str_split($s));\n}\n", " \
    \   return array_reduce(str_split($s), function ($carry, $digit) use ($s) {\n\
    \        return $carry + $digit * ($digit < 'a' ? 26 : 15);\n    }, 0);\n}\n",
  "\t$total = 0;\n\tforeach (str_split($s) as $c) {\n\t\tif (ctype_upper($c)) {\n\t\
    \t\t$total += ord($c);\n\t\t}\n\t}\n\treturn $total;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
