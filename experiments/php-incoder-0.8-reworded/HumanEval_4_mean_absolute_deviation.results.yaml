language: php
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    sort($numbers);\n\
    \    foreach ($numbers as $number) {\n        $mean = ($numbers[count($numbers)\
    \ - 1] + $number) / 2;\n        $absolute_deviation = ($number - $mean) / $mean;\n\
    \        $mad += $absolute_deviation;\n    }\n    return $mad / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $mad in /tmp/tmp72tginii.php on line 14\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp72tginii.php:24\nStack\
    \ trace:\n#0 /tmp/tmp72tginii.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp72tginii.php\
    \ on line 24\n"
  timestamp: 1659979384
- exit_code: 0
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $avg\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += pow((($n - $avg) * ($n - $avg)), 0.5);\n  }\n  return $sum\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  if\
    \ (!is_array($numbers)) {\n    throw new InvalidArgumentException(\n        pht('Expected\
    \ a list of numbers, got something else.'));\n  }\n\n  $count = count($numbers);\n\
    \  $mean_abs = array_sum($numbers) / $count;\n\n  $squared_diff = array_map(\n\
    \      'abs',\n      array_diff($numbers, [$mean_abs]));\n\n  return sqrt(array_sum($squared_diff)\
    \ / $count);\n}\n\n/**\n * Calculate the mean of a list of numbers.\n *\n * @param\
    \ list<double> List of numbers to find the mean of.\n *\n * @return double The\
    \ mean of the list of numbers.\n */\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprav53mtp.php:37\n\
    Stack trace:\n#0 /tmp/tmprav53mtp.php(42): test()\n#1 {main}\n  thrown in /tmp/tmprav53mtp.php\
    \ on line 37\n"
  timestamp: 1659979384
- exit_code: 0
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \  = array_sum($numbers) / count($numbers);\n  $delta = [];\n  foreach ($numbers\
    \ as $n) {\n    $delta[] = abs($n - $mean);\n  }\n  return array_sum($delta) /\
    \ count($delta);\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return array_map(\n        function($x)\
    \ { return abs($x - $mean); },\n        $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $mean in /tmp/tmpvormbit3.php on line 12\n\
    \nWarning: Undefined variable $mean in /tmp/tmpvormbit3.php on line 12\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpvormbit3.php:21\nStack trace:\n\
    #0 /tmp/tmpvormbit3.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpvormbit3.php\
    \ on line 21\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum_of_squares = 0.0;\n  for ($i\
    \ = 0; $i < count($numbers); $i++) {\n    $sum_of_squares += pow($numbers[$i]\
    \ - $mean, $2);\n  }\n  return sqrt($sum_of_squares / count($numbers));\n}\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected integer "2", expecting variable or "{" or
    "$" in /tmp/tmp5azllqlf.php on line 13

    '
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $sum\
    \ = 0;\n    $n = count($numbers);\n    if ($n < 2) {\n        return 0;\n    }\n\
    \n    foreach ($numbers as $number) {\n        $sum += $number;\n    }\n\n   \
    \ return $sum / $n;\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvxparayr.php:28\n\
    Stack trace:\n#0 /tmp/tmpvxparayr.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpvxparayr.php\
    \ on line 28\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    if\
    \ (!is_array($numbers)) {\n        return FALSE;\n    }\n\n    $mean = array_sum($numbers)\
    \ / count($numbers);\n    $squared_diff = array_map(\n        'abs',\n       \
    \ $numbers\n    );\n    return (float)sqrt(array_sum($squared_diff) / count($numbers));\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| c |>\nI think you mean \"MAD = average | x -\
    \ x_mean |\"\n<|/ c |>\n<| c |>\nAwesome! I just got it to work (not 100% but\
    \ it's pretty close). Thanks for providing the code - I'm pretty sure I understand\
    \ it now. I'd just like to clarify one thing - does this method not account for\
    \ the fact that one number is not always going to be close to zero? i.e. say $numbers\
    \ = array(1.1, 2.2, 3.3, 4.4, 5.5); would that return a \"MAD\" of 1.2?\n<|/ c\
    \ |>\n<| c |>\n`MAD = average | x - x_mean |` - this should take into account\
    \ the fact that one number is not always going to be close to zero. So, when you\
    \ have an array of numbers `$numbers = array(1.1, 2.2, 3.3, 4.4, 5.5)`, it will\
    \ return `MAD = 1.2 - x_mean`. Also, please remember to up-vote any answer that\
    \ helped you, and to mark an answer as accepted.\n<|/ c |>\n<| a dscore=2 tags=average,math,php,statistics\
    \ |>\nI know this thread is old, but I had a similar need and found a solution\
    \ using PHP's built in functions. The first function below calculates the mean\
    \ and the second function below calculates the difference between each value in\
    \ the array:\n<code>\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpdv9pas_m.php
    on line 21

    '
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    //\
    \ The average of our data set\n    $sum = 0;\n\n    // For each value in our dataset...\n\
    \    foreach ($numbers as $value) {\n        // Add the absolute value of the\
    \ difference between the value and\n        // the mean\n        $sum += abs($value\
    \ - $sum / count($numbers));\n    }\n\n    // Return the average absolute deviation\n\
    \    return $sum / count($numbers);\n}\n\nfunction candidate(...$args) {\n   \
    \ return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt1la_nvi.php:29\n\
    Stack trace:\n#0 /tmp/tmpt1la_nvi.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpt1la_nvi.php\
    \ on line 29\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ {\n    return pow($number, 2);\n  }, $numbers);\n  return sqrt(array_sum($squares)\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb25rqwcw.php:22\n\
    Stack trace:\n#0 /tmp/tmpb25rqwcw.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpb25rqwcw.php\
    \ on line 22\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    if\
    \ (!isset($numbers[count($numbers) - 1])) {\n        return NULL;\n    }\n   \
    \ $mean = $numbers[0];\n    $mad = 0;\n    foreach ($numbers as $number) {\n \
    \       $mad_abs = abs($number - $mean);\n        $mad_total = $mad_abs + $mad;\n\
    \        $mad = $mad_total;\n    }\n    return $mad;\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4qbumw8a.php:28\n\
    Stack trace:\n#0 /tmp/tmp4qbumw8a.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4qbumw8a.php\
    \ on line 28\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / (count($numbers) - 1);\n    $sum = 0;\n    foreach ($numbers\
    \ as $num) {\n        $sum += ($num - $mean) * ($num - $mean);\n    }\n    return\
    \ $sum / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbz6yt29o.php:23\n\
    Stack trace:\n#0 /tmp/tmpbz6yt29o.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpbz6yt29o.php\
    \ on line 23\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \     = array_sum($numbers) / count($numbers);\n  $variance = array_sum(array_map(function($value)\
    \ use ($mean) {\n      return pow($value - $mean, 2);\n  }, $numbers));\n  return\
    \ sqrt($variance);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcf_y3mib.php:22\n\
    Stack trace:\n#0 /tmp/tmpcf_y3mib.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcf_y3mib.php\
    \ on line 22\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $variance = 0;\n  foreach ($numbers\
    \ as $value) {\n    $variance += ($value - $mean) * ($value - $mean);\n  }\n \
    \ return sqrt($variance);\n}\n\n/**\n * Calculates the average of a set of numbers\
    \ using one or more\n * provided functions.\n *\n * @param array $numbers A list\
    \ of numbers to be averaged.\n *\n * @return float The average value.\n */\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ijpdnzt.php:31\n\
    Stack trace:\n#0 /tmp/tmp4ijpdnzt.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp4ijpdnzt.php\
    \ on line 31\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $meansqrd = array_sum(square($numbers))\
    \ / count($numbers);\n  $mad = 0;\n  foreach ($numbers as $x) {\n    $mad = $mad\
    \ + abs($x - $mean);\n  }\n  return $mad.'/'.$meansqrd;\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function square() in /tmp/tmpzxxvmwah.php:11\n\
    Stack trace:\n#0 /tmp/tmpzxxvmwah.php(20): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpzxxvmwah.php(24): candidate(Array)\n#2 /tmp/tmpzxxvmwah.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzxxvmwah.php on line 11\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ (float) array_reduce($numbers, function($sum, $number) {\n    return $sum +\
    \ ($number - array_sum($numbers)) * ($number - array_sum($numbers)) / (count($numbers)\
    \ - 1);\n  });\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $numbers in /tmp/tmp7zd11klv.php on line\
    \ 11\n\nFatal error: Uncaught TypeError: array_sum(): Argument #1 ($array) must\
    \ be of type array, null given in /tmp/tmp7zd11klv.php:11\nStack trace:\n#0 /tmp/tmp7zd11klv.php(11):\
    \ array_sum(NULL)\n#1 [internal function]: {closure}(NULL, 1.0)\n#2 /tmp/tmp7zd11klv.php(12):\
    \ array_reduce(Array, Object(Closure))\n#3 /tmp/tmp7zd11klv.php(16): mean_absolute_deviation(Array)\n\
    #4 /tmp/tmp7zd11klv.php(20): candidate(Array)\n#5 /tmp/tmp7zd11klv.php(25): test()\n\
    #6 {main}\n  thrown in /tmp/tmp7zd11klv.php on line 11\n"
  timestamp: 1659979384
- exit_code: 0
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    if\
    \ (empty($numbers)) {\n        return 0;\n    }\n    $mean = array_sum($numbers)\
    \ / count($numbers);\n    $mad = 0;\n    foreach ($numbers as $number) {\n   \
    \     $mad += abs($number - $mean);\n    }\n    return $mad / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  if\
    \ (!is_array($numbers) || !count($numbers)) return null;\n  sort($numbers);\n\
    \  $mad = 0;\n  for ($i = 0; $i < count($numbers); $i++) {\n    $mad += abs($numbers[$i]\
    \ - $numbers[$i]);\n  }\n  return $mad / count($numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptybr3aas.php:24\n\
    Stack trace:\n#0 /tmp/tmptybr3aas.php(29): test()\n#1 {main}\n  thrown in /tmp/tmptybr3aas.php\
    \ on line 24\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_differences = array_map(\n\
    \    function ($number) { return ($number - $mean) ** 2; },\n    $numbers\n  );\n\
    \  return array_sum($squared_differences) / count($numbers);\n}\n</code>\n<|/\
    \ a tags=php,math |>\n<| a |>\nAs far as I know, there's no built-in function\
    \ for that. But there's a function that calculates MAD in one line of code: \n\
    <code>\n<?php\n$arr = [1, 2, 3, 4];\nvar_dump (array_sum(array_map(\"sqrt\", $arr)\
    \ - $arr) / count($arr));\n</code>\n<|/ a dscore=2 tags=php,math |>\n<| c |>\n\
    That doesn't take into account the sample mean of the array.\n<|/ c |>\n<| a tags=php,math\
    \ dscore=2 |>\nI needed something similar and ended up writing my own function\
    \ based on this answer: https://stackoverflow.com/a/27402659/11752238\nThis function\
    \ returns a float in the range [-1,1] where 1 represents mean absolute deviation\
    \ and 0 represents mean absolute deviation. If all values are less than 1 then\
    \ a 0 will be returned.\n<code>\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp0gstxvdm.php
    on line 17

    '
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    //\
    \ Initialize deviation value\n    $sum = 0;\n\n    // Find the mean and number\
    \ of elements\n    $mean = array_sum($numbers);\n    $count = count($numbers);\n\
    \n    // Accumulate deviation for each element\n    foreach ($numbers as $n) {\n\
    \        $sum = $sum + abs($n - $mean);\n    }\n\n    // Return average MAD\n\
    \    return $sum / $count;\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy_5dfnj_.php:31\n\
    Stack trace:\n#0 /tmp/tmpy_5dfnj_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpy_5dfnj_.php\
    \ on line 31\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ array_sum(abs($numbers)) / count($numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: abs(): Argument #1 ($num) must be of\
    \ type int|float, array given in /tmp/tmpgm_9r29q.php:10\nStack trace:\n#0 /tmp/tmpgm_9r29q.php(10):\
    \ abs(Array)\n#1 /tmp/tmpgm_9r29q.php(14): mean_absolute_deviation(Array)\n#2\
    \ /tmp/tmpgm_9r29q.php(18): candidate(Array)\n#3 /tmp/tmpgm_9r29q.php(23): test()\n\
    #4 {main}\n  thrown in /tmp/tmpgm_9r29q.php on line 10\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    //\
    \ If the array has one element, return that element exactly.\n    if (count($numbers)\
    \ == 1) {\n        return $numbers[0];\n    }\n\n    // Find the mean.\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n\n    // Find the deviations.\n  \
    \  $deviations = array_diff($numbers, [$mean]);\n\n    // Find the absolute deviations.\n\
    \    $devs = array_map(function ($deviation) {\n        return abs($deviation);\n\
    \    }, $deviations);\n\n    // Return the mean of the absolute deviations.\n\
    \    return array_sum($devs) / count($devs);\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6di3taon.php:34\n\
    Stack trace:\n#0 /tmp/tmp6di3taon.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp6di3taon.php\
    \ on line 34\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \  = array_sum($numbers) / count($numbers);\n  $devs  = array_map(function($x)\
    \ { return abs($x - $mean); }, $numbers);\n  return array_sum($devs) / count($devs);\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $mean in /tmp/tmpt2xmiqm_.php on line 11\n\
    \nWarning: Undefined variable $mean in /tmp/tmpt2xmiqm_.php on line 11\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpt2xmiqm_.php:19\nStack trace:\n\
    #0 /tmp/tmpt2xmiqm_.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpt2xmiqm_.php\
    \ on line 19\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ array_sum($numbers) /\n         array_sum(array_diff($numbers, array_mean(array($numbers))));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function array_mean()\
    \ in /tmp/tmptf2telkm.php:11\nStack trace:\n#0 /tmp/tmptf2telkm.php(15): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmptf2telkm.php(19): candidate(Array)\n#2 /tmp/tmptf2telkm.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmptf2telkm.php on line 11\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return array_sum(abs($numbers\
    \ - $mean)) / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: array - float\
    \ in /tmp/tmpq4lcnfe7.php:11\nStack trace:\n#0 /tmp/tmpq4lcnfe7.php(15): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmpq4lcnfe7.php(19): candidate(Array)\n#2 /tmp/tmpq4lcnfe7.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmpq4lcnfe7.php on line 11\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \     = $numbers->sum() / count($numbers);\n  $deviations = $numbers->map(function\
    \ ($x) { return abs($x - $mean); });\n  return $deviations->sum() / count($deviations);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to a member function sum() on array\
    \ in /tmp/tmp_wi_vf4v.php:10\nStack trace:\n#0 /tmp/tmp_wi_vf4v.php(16): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmp_wi_vf4v.php(20): candidate(Array)\n#2 /tmp/tmp_wi_vf4v.php(25): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_wi_vf4v.php on line 10\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    return\
    \ sqrt(array_sum(array_map(function ($value) {\n        return pow($value - array_mean($value),\
    \ 2);\n    }, $numbers)) / count($numbers));\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function array_mean()\
    \ in /tmp/tmp9vpil09v.php:11\nStack trace:\n#0 [internal function]: {closure}(1.0)\n\
    #1 /tmp/tmp9vpil09v.php(12): array_map(Object(Closure), Array)\n#2 /tmp/tmp9vpil09v.php(15):\
    \ mean_absolute_deviation(Array)\n#3 /tmp/tmp9vpil09v.php(19): candidate(Array)\n\
    #4 /tmp/tmp9vpil09v.php(24): test()\n#5 {main}\n  thrown in /tmp/tmp9vpil09v.php\
    \ on line 11\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  if\
    \ (!is_array($numbers)) {\n    return false;\n  }\n  $mad = 0;\n  foreach ($numbers\
    \ as $n) {\n    $mad = ($mad + abs($n));\n  }\n  return $mad/count($numbers);\n\
    }\n\n$numbers = array(1.0, 2.0, 3.0, 4.0);\n$mean = mean_absolute_deviation($numbers);\n\
    function candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl0f02jd9.php:27\n\
    Stack trace:\n#0 /tmp/tmpl0f02jd9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpl0f02jd9.php\
    \ on line 27\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $squareDiffs = array_map(function\
    \ ($number) {\n        return pow($number - $mean, 2);\n    }, $numbers);\n  \
    \  return array_sum($squareDiffs) / count($numbers);\n}\n</code>\nThe function\
    \ above is taken from here\n<|/ a dscore=1 |>\n<| c |>\nThanks for the help. I\
    \ did solve it using an older version of PHP that didn't have the array_map function,\
    \ so I couldn't use your solution.\n<|/ c |>\n<| a dscore=0 |>\nI've written a\
    \ function that will calculate Mean Absolute Deviation with a standard deviation\
    \ parameter. \n<code>\n<?php\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpvo7c4970.php
    on line 16

    '
  timestamp: 1659979384
- exit_code: 0
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $deviations = array();\n  $size\
    \ = count($numbers);\n\n  for ($i = 0; $i < $size; ++$i) {\n    $deviations[$i]\
    \ = abs($numbers[$i] - $mean);\n  }\n\n  return array_sum($deviations) / (count($deviations)\
    \ * 1.0);\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ return the mean of the numbers - the mean of the samples\n  // is their sum\
    \ / number of samples\n  return array_sum($numbers)/count($numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6q8vyp7p.php:20\n\
    Stack trace:\n#0 /tmp/tmp6q8vyp7p.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp6q8vyp7p.php\
    \ on line 20\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $avg\
    \ = array_sum($numbers) / count($numbers);\n    $squares = 0;\n    foreach ($numbers\
    \ as $n) {\n        $squares += pow($n - $avg, 2);\n    }\n    return $squares\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcbpoglqf.php:23\n\
    Stack trace:\n#0 /tmp/tmpcbpoglqf.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpcbpoglqf.php\
    \ on line 23\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $squared_diff = 0;\n    foreach\
    \ ($numbers as $value) {\n        $squared_diff += pow($value - $mean,2);\n  \
    \  }\n    return sqrt($squared_diff / count($numbers));\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk2x0o6qo.php:23\n\
    Stack trace:\n#0 /tmp/tmpk2x0o6qo.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpk2x0o6qo.php\
    \ on line 23\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($x)\
    \ {\n    return pow($x - $mean, $2);\n  }, $numbers);\n\n  return array_sum($squares)\
    \ / count($numbers);\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected integer "2", expecting variable or "{" or
    "$" in /tmp/tmpewobdtio.php on line 12

    '
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    return\
    \ array_sum($numbers) / count($numbers);\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphbhrp5ei.php:18\n\
    Stack trace:\n#0 /tmp/tmphbhrp5ei.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphbhrp5ei.php\
    \ on line 18\n"
  timestamp: 1659979384
- exit_code: 0
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  if\
    \ (!count($numbers)) {\n    return 0.0;\n  }\n\n  $mean = array_sum($numbers)\
    \ / count($numbers);\n  $sum = 0.0;\n  foreach ($numbers as $number) {\n    $sum\
    \ += abs($number - $mean);\n  }\n  return $sum / count($numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ array_sum(abs($numbers)) / count($numbers);\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: abs(): Argument #1 ($num) must be of\
    \ type int|float, array given in /tmp/tmpmt49kui1.php:10\nStack trace:\n#0 /tmp/tmpmt49kui1.php(10):\
    \ abs(Array)\n#1 /tmp/tmpmt49kui1.php(13): mean_absolute_deviation(Array)\n#2\
    \ /tmp/tmpmt49kui1.php(17): candidate(Array)\n#3 /tmp/tmpmt49kui1.php(22): test()\n\
    #4 {main}\n  thrown in /tmp/tmpmt49kui1.php on line 10\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  return abs($mean - array_sum(array_diff($numbers,\
    \ $mean)) / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_diff(): Argument #2 must be of\
    \ type array, float given in /tmp/tmp9029hwtt.php:11\nStack trace:\n#0 /tmp/tmp9029hwtt.php(11):\
    \ array_diff(Array, 1.5)\n#1 /tmp/tmp9029hwtt.php(15): mean_absolute_deviation(Array)\n\
    #2 /tmp/tmp9029hwtt.php(19): candidate(Array)\n#3 /tmp/tmp9029hwtt.php(24): test()\n\
    #4 {main}\n  thrown in /tmp/tmp9029hwtt.php on line 11\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $number) {\n    $sum += abs($number - $mean);\n  }\n  return $sum;\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpys30ie4j.php:23\n\
    Stack trace:\n#0 /tmp/tmpys30ie4j.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpys30ie4j.php\
    \ on line 23\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $squareDiffs = array_map(function($x)\
    \ {return pow($x - $mean,2);}, $numbers);\n    return sqrt(array_sum($squareDiffs)\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $mean in /tmp/tmptis6b8nm.php on line 11\n\
    \nWarning: Undefined variable $mean in /tmp/tmptis6b8nm.php on line 11\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmptis6b8nm.php:20\nStack trace:\n\
    #0 /tmp/tmptis6b8nm.php(25): test()\n#1 {main}\n  thrown in /tmp/tmptis6b8nm.php\
    \ on line 20\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return abs($mean - array_sum(array_diff($numbers,\
    \ $mean)) / count($numbers));\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_diff(): Argument #2 must be of\
    \ type array, float given in /tmp/tmpvf_yik9h.php:11\nStack trace:\n#0 /tmp/tmpvf_yik9h.php(11):\
    \ array_diff(Array, 1.5)\n#1 /tmp/tmpvf_yik9h.php(14): mean_absolute_deviation(Array)\n\
    #2 /tmp/tmpvf_yik9h.php(18): candidate(Array)\n#3 /tmp/tmpvf_yik9h.php(23): test()\n\
    #4 {main}\n  thrown in /tmp/tmpvf_yik9h.php on line 11\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return $mean ? array_sum(abs($numbers\
    \ - $mean)) : 0;\n}\n</code>\n<|/ a tags=arrays,mean,php |>\n<| c |>\nHi, thanks\
    \ for taking the time to provide an answer, but this doesn't really address the\
    \ problem. The goal here is to calculate the mean of *a subgroup* of the input\
    \ elements (the elements are grouped by their values). Having the number of distinct\
    \ values isn't really sufficient here. For example, if we have {1, 2, 3, 4} and\
    \ {3, 5, 6, 7}, there isn't just one mean (that would be 5), but 2 different ones\
    \ (5.5 and 6.5), and the same with three values (3.5, 4.5, 5.5), so this isn't\
    \ really a useful mean.\n<|/ c |>\n<| c |>\nThis answer was posted before he added\
    \ the information on his dataset. His answer was posted before I added my answer.\
    \ I'm guessing he did not bother to read the comments before posting the answer.\n\
    <|/ c |>\n<| c |>\nI added a comment to his answer at the bottom.\n<|/ c |>\n\
    <| c |>\nI added a comment to his answer at the bottom\n<|/ c |>\n<| c |>\nThank\
    \ you for taking the time to answer this! I'm a little confused about your code,\
    \ however: what is the `$elements` variable? Should this be `$data`? And if so,\
    \ how does the `foreach` loop know what to iterate over, since I don't see you\
    \ defining `$elements` anywhere?\n<|/ c |>\n<| a |>\n<code>\n$array = array(5,4,8,6,5,3,5,4,5,9,5,4,4,8,6,8,4,5,4,8,5,4,6,8,9,8,7,8,9,7,8,9,4,5,6,6,8,5,7,7,5,7,7,4,5,8,6,7,8,8,5,5,5,8,8,8,5,5,8,7,8,6,8,4,6,5,7,6,8,6,5,4,5,8,5,5,6,6,8,5,4,8,6,5,4,8,6,7,8,6,8,8,4,7,8,7,7,6,8,5,6,8,5,5,8,7,7,5,4,6,7,8,8,4,8,5,5,4,8,6,5,4,8,8,5,5,4,6,6,8,5,6,8,5,5,5,6,6,6,6,8,6,6,8,6,8,8,8,8,8,8,8,7,8,8,8,8,8,8,6,6,5,7,6,5,6,5,5,7,5,6,8,5,4,6,4,7,5,5,6,6,4,7,7,\n\
    function candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmprvzacqgb.php
    on line 13

    '
  timestamp: 1659979384
- exit_code: 0
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  sort($numbers);\n\
    \  $mean = array_sum($numbers) / count($numbers);\n  $diff = 0;\n  foreach ($numbers\
    \ as $n) {\n    $diff += abs($n - $mean);\n  }\n  return $diff/count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  return array_sum(abs($numbers -\
    \ $mean)) / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: array - float\
    \ in /tmp/tmp3015ontx.php:11\nStack trace:\n#0 /tmp/tmp3015ontx.php(15): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmp3015ontx.php(19): candidate(Array)\n#2 /tmp/tmp3015ontx.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3015ontx.php on line 11\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \      = 0;\n  $sum_of_squares = 0;\n\n  foreach ($numbers as $number) {\n   \
    \ $sum_of_squares += pow($number, 2);\n    $mean += $number;\n  }\n\n  return\
    \ sqrt($sum_of_squares / count($numbers)) - $mean;\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxangx3xw.php:26\n\
    Stack trace:\n#0 /tmp/tmpxangx3xw.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpxangx3xw.php\
    \ on line 26\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $meanAbsDev = 0.0;\n    foreach\
    \ ($numbers as $number) {\n        $meanAbsDev += ($number - $mean) * ($number\
    \ - $mean);\n    }\n    return sqrt($meanAbsDev / count($numbers));\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThanks , my question was a follow up question to another\
    \ question, where I thought the code below was the fastest way  to calculate this,\
    \ but when I run the code with my data it takes way longer than the other solution.\
    \ Is there a faster way to do this than the code below?\n<|/ c |>\n<| c |>\nWhat\
    \ data did you try? What do you mean by \"the fastest way\"?\n<|/ c |>\n<| c |>\n\
    , The code I posted above does a lot of unnecessary calculation, meaning there\
    \ are lots of unnecessary calculations for each element. What I mean by \"the\
    \ fastest way\" is it takes less time to calculate this than a more efficient\
    \ method. My first code was doing more calculation and less calculation, so I\
    \ thought the faster way would be more efficient.\n<|/ c |>\n<| c |>\nIt should\
    \ only do one calculation. Can you post your code?\n<|/ c |>\n<| c |>\n, I have\
    \ added my code to the question\n<|/ c |>\n<| a tags=php,performance,arrays |>\n\
    Here is a solution that uses array_map and a closure, which is the fastest way\
    \ to perform calculations like this. \n<code>\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp5d93i92y.php
    on line 17

    '
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $avg\
    \ = mean(array_map('floatval', $numbers));\n  $sum_of_squares = 0.0;\n  foreach\
    \ ($numbers as $n) {\n    $sum_of_squares += pow($n - $avg, 2);\n  }\n  return\
    \ sqrt($sum_of_squares / count($numbers));\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpvdoe5nt2.php:10\n\
    Stack trace:\n#0 /tmp/tmpvdoe5nt2.php(19): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpvdoe5nt2.php(23): candidate(Array)\n#2 /tmp/tmpvdoe5nt2.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpvdoe5nt2.php on line 10\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $n\
    \ = count($numbers);\n  $mean = $numbers[0];\n  foreach ($numbers as $value) {\n\
    \    $mean += ($value - $mean) / $n;\n  }\n  return abs($mean);\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp781kqk80.php:22\n\
    Stack trace:\n#0 /tmp/tmp781kqk80.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp781kqk80.php\
    \ on line 22\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $sum\
    \ = 0;\n  $n = count($numbers);\n  for ($i = 0; $i < $n; $i++) {\n    $diff =\
    \ $numbers[$i] - $numbers[0];\n    $sum += $diff * $diff;\n  }\n  return $sum\
    \ / $n;\n}\n\n/**\n * Get a random value within the specified range.\n *\n * @param\
    \ int $min\n * @param int $max\n * @return int\n */\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfj7diayw.php:32\n\
    Stack trace:\n#0 /tmp/tmpfj7diayw.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpfj7diayw.php\
    \ on line 32\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $means\
    \ = array_map(function ($x) { return $x; }, $numbers);\n    return array_sum($numbers)\
    \ / count($numbers)\n        - array_sum(array_map(function ($x) { return abs($x\
    \ - $means); }, $numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $means in /tmp/tmpljcfg5eu.php on line 12\n\
    \nWarning: Undefined variable $means in /tmp/tmpljcfg5eu.php on line 12\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpljcfg5eu.php:20\nStack trace:\n\
    #0 /tmp/tmpljcfg5eu.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpljcfg5eu.php\
    \ on line 20\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    if\
    \ (!is_array($numbers)) {\n        throw new InvalidArgumentException('The argument\
    \ must be an array');\n    }\n    $n = count($numbers);\n    if ($n < 2) {\n \
    \       throw new InvalidArgumentException('The first argument must have at least\
    \ two elements.');\n    }\n\n    $mean  = array_sum($numbers) / $n;\n    $square_diffs\
    \ = array_map(function ($x) { return $x - $mean; }, $numbers);\n\n    return sqrt(array_sum($square_diffs)\
    \ / $n);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $mean in /tmp/tmpipyj686z.php on line 19\n\
    \nWarning: Undefined variable $mean in /tmp/tmpipyj686z.php on line 19\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpipyj686z.php:29\nStack trace:\n\
    #0 /tmp/tmpipyj686z.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpipyj686z.php\
    \ on line 29\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return abs($mean - array_sum(array_diff($numbers,\
    \ $mean)) / count($numbers));\n}\n\n/**\n * Return the current page from the paginator.\n\
    \ *\n * Useful for passing a variable to a template to indicate which page to\n\
    \ * display to users.\n *\n * @param PaginatorHelper $paginator\n * @return int\
    \ $page\n */\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_diff(): Argument #2 must be of\
    \ type array, float given in /tmp/tmpvinyuf33.php:11\nStack trace:\n#0 /tmp/tmpvinyuf33.php(11):\
    \ array_diff(Array, 1.5)\n#1 /tmp/tmpvinyuf33.php(24): mean_absolute_deviation(Array)\n\
    #2 /tmp/tmpvinyuf33.php(28): candidate(Array)\n#3 /tmp/tmpvinyuf33.php(33): test()\n\
    #4 {main}\n  thrown in /tmp/tmpvinyuf33.php on line 11\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ array_sum($numbers) / count($numbers);\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdcis_y5i.php:18\n\
    Stack trace:\n#0 /tmp/tmpdcis_y5i.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpdcis_y5i.php\
    \ on line 18\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  sort($numbers);\n\
    \  $meanValue = array_sum($numbers) / count($numbers);\n  $delta = [];\n  foreach\
    \ ($numbers as $n) {\n    $delta[] = $n - $meanValue;\n  }\n  return round($delta[0]\
    \ * $delta[0] / ((count($numbers) - 1) / count($numbers)), 6);\n}\n</code>\nAnd\
    \ then, in a separate file, create the charts:\n<code>\n<?php\n\nrequire 'chart_data.php';\n\
    \n$data = [\n  [\"2013-04-19\", \"5.6\"],\n  [\"2013-04-20\", \"4.5\"],\n  [\"\
    2013-04-27\", \"8.8\"],\n  [\"2013-04-28\", \"8.2\"],\n  [\"2013-04-29\", \"10.5\"\
    ],\n  [\"2013-04-30\", \"8.5\"],\n  [\"2013-05-01\", \"5.3\"],\n  [\"2013-05-02\"\
    , \"4.8\"],\n  [\"2013-05-03\", \"5.5\"],\n  [\"2013-05-04\", \"4.7\"],\n  [\"\
    2013-05-05\", \"6.6\"],\n  [\"2013-05-09\", \"8.8\"],\n  [\"2013-05-10\", \"8.8\"\
    ],\n  [\"2013-05-11\", \"9.4\"],\n  [\"2013-05-12\", \"7.6\"],\n  [\"2013-05-13\"\
    , \"6.7\"],\n  [\"2013-05-16\", \"6.4\"],\n  [\"2013-05-17\", \"8.9\"],\n  [\"\
    2013-05-18\", \"7.7\"],\n  [\"2013-05-19\", \"8.9\"],\n  [\"2013-05-20\", \"6.8\"\
    ],\n  [\"2013-05-23\", \"7.1\"],\n  [\"2013-05-24\", \"6.3\"],\n  [\"2013-05-25\"\
    , \"5.6\"],\n  [\"2013-05-26\", \"6.6\"],\n  [\"2013-05-27\", \"7.8\"],\n  [\"\
    2013-05-30\", \"9.2\"],\n  [\"2013-05-31\", \"9.3\"],\n  [\"2013-06-01\", \"9.7\"\
    ],\n  [\"2013-06-02\", \"7.4\"],\n  [\"2013-06-03\", \"8.4\"],\n  [\"2013-06-06\"\
    , \"9.6\"],\n  [\"2013-06-07\", \"8.8\"],\n  [\"2013-06-08\", \"5.9\"],\n  [\"\
    2013-06-09\", \"7.2\"],\n  [\"2013-06-10\", \"7.4\"],\n  [\"2013-06-11\", \"6.1\"\
    ],\n  [\"2013-06-14\", \"7.4\"],\n  [\"2013-06-15\", \"6.8\"],\n  [\"2013-06-16\"\
    , \"6.9\"],\n  [\"2013-06-17\", \"5.9\"],\n  [\"2013-06-18\", \"5.\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp5pr9jcpe.php
    on line 18

    '
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ $numbers is an array\n  if (!is_array($numbers)) {\n    return null;\n  }\n\
    \  $size = count($numbers);\n  if ($size <= 1) {\n    return null;\n  }\n\n  $mean\
    \ = array_sum($numbers) / $size;\n\n  $mad_sum = 0;\n\n  for ($i = 0; $i < $size;\
    \ ++$i) {\n    $current_val = $numbers[$i];\n    $current_val_abs = abs($current_val);\n\
    \n    $mad_sum += $current_val_abs - ($current_val * $current_val);\n  }\n\n \
    \ return ($mad_sum / $size);\n}\n</code>\n<|/ a tags=php |>\n<| a dscore=3 |>\n\
    <code>\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpl17y0xo2.php
    on line 32

    '
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $meanSquared = array_sum(array_map(function\
    \ ($x) { return pow($x, 2); }, $numbers)) / count($numbers);\n  $result = $mean;\n\
    \  foreach ($numbers as $x) {\n    $diff = $x - $mean;\n    $result += $diff *\
    \ $diff;\n  }\n  $result = $result / $meanSquared;\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw86eb7le.php:26\n\
    Stack trace:\n#0 /tmp/tmpw86eb7le.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpw86eb7le.php\
    \ on line 26\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return round($mean, 2);\n}\n\n\
    function candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd09o4i8.php:19\n\
    Stack trace:\n#0 /tmp/tmpfd09o4i8.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpfd09o4i8.php\
    \ on line 19\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ array_sum(abs($numbers)) / count($numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: abs(): Argument #1 ($num) must be of\
    \ type int|float, array given in /tmp/tmpgm_9r29q.php:10\nStack trace:\n#0 /tmp/tmpgm_9r29q.php(10):\
    \ abs(Array)\n#1 /tmp/tmpgm_9r29q.php(14): mean_absolute_deviation(Array)\n#2\
    \ /tmp/tmpgm_9r29q.php(18): candidate(Array)\n#3 /tmp/tmpgm_9r29q.php(23): test()\n\
    #4 {main}\n  thrown in /tmp/tmpgm_9r29q.php on line 10\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = mean(array_values($numbers));\n  $stddev = array_reduce($numbers, function($sum,\
    \ $x) { return $sum + pow($x - $mean, 2); }, 0);\n  return sqrt($stddev / count($numbers));\n\
    }\n</code>\n<|/ a |>\n<| a dscore=3 |>\nThis is actually quite easy with a standard\
    \ math library.\n<code>\n<?php\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpdlgwimlc.php
    on line 14

    '
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ Make sure $numbers is a numeric array.\n  if (!is_array($numbers)) {\n    trigger_error('Input\
    \ should be an array', E_USER_WARNING);\n    return false;\n  }\n\n  $mean = array_sum($numbers)\
    \ /count($numbers);\n\n  $variance = 0;\n  foreach ($numbers as $number) {\n \
    \   $variance += pow($number - $mean, 2);\n  }\n\n  return sqrt($variance / count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7_0k7v2j.php:32\n\
    Stack trace:\n#0 /tmp/tmp7_0k7v2j.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp7_0k7v2j.php\
    \ on line 32\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    sort($numbers);\n\
    \    $n = count($numbers);\n    if ($n < 2) {\n        throw new \\InvalidArgumentException(\"\
    Count not determine for MAD\");\n    }\n    $mean = $numbers[0];\n    if ($n ==\
    \ 1) {\n        return 0;\n    }\n    $sum = 0;\n    $sum_of_squares = 0;\n  \
    \  for ($i = 0; $i < $n; ++$i) {\n        $diff = $numbers[$i] - $mean;\n    \
    \    $sum += $diff;\n        $sum_of_squares += $diff * $diff;\n    }\n    return\
    \ $sum / $n;\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpecuiasl6.php:35\n\
    Stack trace:\n#0 /tmp/tmpecuiasl6.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpecuiasl6.php\
    \ on line 35\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum_of_squares = 0.0;\n\n  foreach\
    \ ($numbers as $number) {\n    $sum_of_squares += pow($number - $mean, 2);\n \
    \ }\n\n  return sqrt($sum_of_squares / count($numbers));\n}\n</code>\nThe above\
    \ code assumes that you only have one dimension in your input array.\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\n`array_sum()` is `O(n^2)` for this simple operation. Better use\
    \ [`array_reduce($numbers, ...)`](http://php.net/manual/en/function.array-reduce.php)\n\
    <|/ c |>\n<| a tags=php,arrays dscore=3 |>\n<code>\n$a = array(1, 3, 6, 5);\n\
    $mean = array_sum($a) / count($a);\n$mad = array();\nforeach ($a as $v) {\n  \
    \  $mad[] = abs($v - $mean);\n}\n$mad = array_sum($mad) / count($mad);\n</code>\n\
    <|/ a |>\n<| a tags=php,arrays |>\n<code>\nfunction candidate(...$args) {\n  \
    \  return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpy2jmvnw8.php
    on line 19

    '
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = $numbers[0];\n  foreach ($numbers as $n) {\n    $mean += $n;\n  }\n  return\
    \ $mean / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7sl5vnkc.php:22\n\
    Stack trace:\n#0 /tmp/tmp7sl5vnkc.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp7sl5vnkc.php\
    \ on line 22\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $variance = 0;\n    $n = count($numbers);\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $variance += ($numbers[$i] - $mean)\
    \ * ($numbers[$i] - $mean);\n    }\n    return sqrt($variance);\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbkdb1v4j.php:24\n\
    Stack trace:\n#0 /tmp/tmpbkdb1v4j.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbkdb1v4j.php\
    \ on line 24\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  sort($numbers);\n\
    \  $mean  = $numbers[0];\n  $sumOfSquares = 0.0;\n  $n = count($numbers);\n  for\
    \ ($i = 1; $i < $n; $i++) {\n    $sumOfSquares += pow($numbers[$i] - $mean,2);\n\
    \  }\n  return sqrt($sumOfSquares / $n);\n}\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8vyiv1gm.php:24\n\
    Stack trace:\n#0 /tmp/tmp8vyiv1gm.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8vyiv1gm.php\
    \ on line 24\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    if\
    \ (count($numbers) < 2) {\n        return 0.0;\n    }\n    $mean = $numbers[0];\n\
    \    $total_error = 0.0;\n    foreach ($numbers as $n) {\n        $total_error\
    \ += abs($n - $mean);\n    }\n    return $total_error / count($numbers);\n}\n\n\
    /**\n * Format a number as a currency value\n *\n * ### Arguments\n *\n * - $number\
    \ (mixed) The input number.\n * - $decimals (int) Number of decimal places\n *\
    \ - $separator (string) Decimal separator (\".\" by default).\n *\n * ### Returns\n\
    \ *\n * - A float. Round floats up or down\n *\n * ### Usage\n *\n * `echo format_currency(1245.56);`\n\
    \ */\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsqge82ox.php:44\n\
    Stack trace:\n#0 /tmp/tmpsqge82ox.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpsqge82ox.php\
    \ on line 44\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ Calculate the mean.\n  $mean = 0.0;\n  foreach ($numbers as $number)\n    $mean\
    \ += $number;\n  $mean = round($mean, $numbers[0]);\n\n  // Calculate the MAD.\n\
    \  $mad = 0.0;\n  foreach ($numbers as $number)\n    $mad += abs($number - $mean);\n\
    \  return round($mad / count($numbers), $numbers[0]);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqkcoe86q.php:28\n\
    Stack trace:\n#0 /tmp/tmpqkcoe86q.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpqkcoe86q.php\
    \ on line 28\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $absolutes = array_map(function($number)\
    \ {\n        return abs($number - $mean);\n    }, $numbers);\n    return array_sum($absolutes)\
    \ / count($absolutes);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $mean in /tmp/tmpb39p1eug.php on line 12\n\
    \nWarning: Undefined variable $mean in /tmp/tmpb39p1eug.php on line 12\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpb39p1eug.php:22\nStack trace:\n\
    #0 /tmp/tmpb39p1eug.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpb39p1eug.php\
    \ on line 22\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $avg\
    \ = array_sum($numbers) / count($numbers);\n    $variance = array_reduce($numbers,\
    \ function ($sum, $n) {\n        return $sum + pow($n - $avg, 2);\n    });\n \
    \   return sqrt($variance);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $avg in /tmp/tmpbe392_74.php on line 12\n\
    \nWarning: Undefined variable $avg in /tmp/tmpbe392_74.php on line 12\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpbe392_74.php:22\nStack trace:\n\
    #0 /tmp/tmpbe392_74.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpbe392_74.php\
    \ on line 22\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  if\
    \ (!$numbers) {\n    return 0.0;\n  }\n  $mean = array_sum($numbers) / count($numbers);\n\
    \  $diff = array_map('abs', $numbers);\n  return array_sum($diff) / count($diff);\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpemb8596g.php:22\n\
    Stack trace:\n#0 /tmp/tmpemb8596g.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpemb8596g.php\
    \ on line 22\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  if\
    \ (!$numbers) return 0.0;\n\n  $mean = array_sum($numbers) / count($numbers);\n\
    \n  return array_reduce($numbers, function($sum, $number) {\n    return $sum +\
    \ abs($number - $mean);\n  });\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $mean in /tmp/tmp155uqwe9.php on line 15\n\
    \nWarning: Undefined variable $mean in /tmp/tmp155uqwe9.php on line 15\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp155uqwe9.php:24\nStack trace:\n\
    #0 /tmp/tmp155uqwe9.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp155uqwe9.php\
    \ on line 24\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  sort($numbers);\n\
    \  $n = count($numbers);\n  $mean = $numbers[0];\n  $mad = 0;\n  for ($i = 1;\
    \ $i < $n; $i++) {\n    $mad = ($numbers[$i] - $mean) * ($numbers[$i] - $mean);\n\
    \    $mean += $numbers[$i];\n  }\n  return sqrt($mad);\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpogey4_2v.php:25\n\
    Stack trace:\n#0 /tmp/tmpogey4_2v.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpogey4_2v.php\
    \ on line 25\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    //\
    \ Calculate the absolute difference.\n    $difference = array_map(function($number)\
    \ {\n        return abs($number);\n    }, $numbers);\n    return array_sum($difference)\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1va5wtk2.php:22\n\
    Stack trace:\n#0 /tmp/tmp1va5wtk2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp1va5wtk2.php\
    \ on line 22\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return array_sum(abs($numbers\
    \ - $mean)) / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: array - float\
    \ in /tmp/tmpq4lcnfe7.php:11\nStack trace:\n#0 /tmp/tmpq4lcnfe7.php(15): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmpq4lcnfe7.php(19): candidate(Array)\n#2 /tmp/tmpq4lcnfe7.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmpq4lcnfe7.php on line 11\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ If the numbers are integers, return an int\n  if (!is_array($numbers) || count($numbers)\
    \ <= 1) {\n    return $numbers[0];\n  }\n\n  // Find the mean:\n  $mean     =\
    \ array_sum($numbers) / count($numbers);\n  $x_mean = array_sum(array_diff($numbers,\
    \ $mean)) / count($numbers);\n\n  // Find the squared deviation:\n  $x_squared_sum\
    \ = 0;\n  foreach ($numbers as $number) {\n    $x_squared_sum += pow($number -\
    \ $mean, 2);\n  }\n  $x_squared = sqrt($x_squared_sum / count($numbers));\n\n\
    \  // Find the mean of the absolute values of the deviation:\n  return $x_mean;\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_diff(): Argument #2 must be of\
    \ type array, float given in /tmp/tmpjhpb4m2d.php:17\nStack trace:\n#0 /tmp/tmpjhpb4m2d.php(17):\
    \ array_diff(Array, 1.5)\n#1 /tmp/tmpjhpb4m2d.php(31): mean_absolute_deviation(Array)\n\
    #2 /tmp/tmpjhpb4m2d.php(35): candidate(Array)\n#3 /tmp/tmpjhpb4m2d.php(40): test()\n\
    #4 {main}\n  thrown in /tmp/tmpjhpb4m2d.php on line 17\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += pow((($n - $mean)), 2);\n  }\n  return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5h6yg_5f.php:23\n\
    Stack trace:\n#0 /tmp/tmp5h6yg_5f.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp5h6yg_5f.php\
    \ on line 23\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ array_reduce($numbers, function($sum, $value) {\n    return $sum + abs($value);\n\
    \  }) / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6epkvot5.php:20\n\
    Stack trace:\n#0 /tmp/tmp6epkvot5.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp6epkvot5.php\
    \ on line 20\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  if\
    \ (count($numbers) < 2) {\n    return 0.0;\n  }\n  $avg = array_sum($numbers)/count($numbers);\n\
    \  return array_sum(abs($numbers - $avg))/count($numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: array - float\
    \ in /tmp/tmpsg7hui3q.php:14\nStack trace:\n#0 /tmp/tmpsg7hui3q.php(18): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmpsg7hui3q.php(22): candidate(Array)\n#2 /tmp/tmpsg7hui3q.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsg7hui3q.php on line 14\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_deviation = 0;\n  foreach\
    \ ($numbers as $value) {\n    $squared_deviation += pow($value - $mean, -2);\n\
    \  }\n  return sqrt($squared_deviation / count($numbers));\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporlnqwt3.php:23\n\
    Stack trace:\n#0 /tmp/tmporlnqwt3.php(28): test()\n#1 {main}\n  thrown in /tmp/tmporlnqwt3.php\
    \ on line 23\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  sort($numbers);\n\
    \  return round(array_sum($numbers) / count($numbers), 2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj12h4mru.php:19\n\
    Stack trace:\n#0 /tmp/tmpj12h4mru.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpj12h4mru.php\
    \ on line 19\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  sort($numbers);\n\
    \  $n = count($numbers);\n  $sum = 0;\n  foreach ($numbers as $number) {\n   \
    \ $sum = $sum + abs($number);\n  }\n  return $sum / $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl96fku6b.php:24\n\
    Stack trace:\n#0 /tmp/tmpl96fku6b.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpl96fku6b.php\
    \ on line 24\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  return abs(array_sum(array_diff($numbers,\
    \ $mean)) / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_diff(): Argument #2 must be of\
    \ type array, float given in /tmp/tmpvm4dsu6x.php:11\nStack trace:\n#0 /tmp/tmpvm4dsu6x.php(11):\
    \ array_diff(Array, 1.5)\n#1 /tmp/tmpvm4dsu6x.php(15): mean_absolute_deviation(Array)\n\
    #2 /tmp/tmpvm4dsu6x.php(19): candidate(Array)\n#3 /tmp/tmpvm4dsu6x.php(24): test()\n\
    #4 {main}\n  thrown in /tmp/tmpvm4dsu6x.php on line 11\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \     = null;\n  $means    = array();\n  $devs     = array();\n  $deviations =\
    \ array();\n\n  foreach ($numbers as $number) {\n    if ($mean === null) {\n \
    \     $mean = $number;\n    } else {\n      $devs[] = $number - $mean;\n     \
    \ $mean = $number;\n    }\n  }\n\n  if (count($devs) === 0) {\n    return null;\n\
    \  }\n\n  $means = array_values($means);\n\n  foreach ($devs as $dev) {\n    $means[]\
    \ = round($dev, 0, PHP_ROUND_HALF_UP);\n  }\n\n  foreach ($devs as $dev) {\n \
    \   $deviations[] = $dev;\n  }\n\n  return round(array_sum($deviations) / count($deviations),\
    \ 0, PHP_ROUND_HALF_UP);\n}\n\n/**\n * Calculate the difference between a number\
    \ and the mean of a set of numbers.\n *\n * @param array $values A set of numbers.\n\
    \ *\n * @return float A positive float value.\n */\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3a7pplqs.php:53\n\
    Stack trace:\n#0 /tmp/tmp3a7pplqs.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp3a7pplqs.php\
    \ on line 53\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ array_reduce($numbers, 'mean_absolute_deviation');\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_reduce(): Argument #1 ($array)\
    \ must be of type array, null given in /tmp/tmppdu51m6_.php:10\nStack trace:\n\
    #0 /tmp/tmppdu51m6_.php(10): array_reduce(NULL, 'mean_absolute_d...')\n#1 [internal\
    \ function]: mean_absolute_deviation(NULL, 1.0)\n#2 /tmp/tmppdu51m6_.php(10):\
    \ array_reduce(Array, 'mean_absolute_d...')\n#3 /tmp/tmppdu51m6_.php(13): mean_absolute_deviation(Array)\n\
    #4 /tmp/tmppdu51m6_.php(17): candidate(Array)\n#5 /tmp/tmppdu51m6_.php(22): test()\n\
    #6 {main}\n  thrown in /tmp/tmppdu51m6_.php on line 10\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $deviations\
    \ = $numbers - array_sum($numbers) / count($numbers);\n  return array_sum($deviations)\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: array - float\
    \ in /tmp/tmpi9l9i1kv.php:10\nStack trace:\n#0 /tmp/tmpi9l9i1kv.php(15): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmpi9l9i1kv.php(19): candidate(Array)\n#2 /tmp/tmpi9l9i1kv.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmpi9l9i1kv.php on line 10\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  ksort($numbers);\n\
    \  $n = count($numbers);\n  $mean = $numbers[0];\n  $sum = 0;\n  for ($i = 1;\
    \ $i < $n; ++$i) {\n    $sum -= $numbers[$i];\n  }\n  for ($i = 0; $i < $n; ++$i)\
    \ {\n    $sum += ($numbers[$i] - $mean) * ($numbers[$i] - $mean);\n  }\n  return\
    \ $sum / $n;\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuutwlmy_.php:28\n\
    Stack trace:\n#0 /tmp/tmpuutwlmy_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpuutwlmy_.php\
    \ on line 28\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $diffs = array_map(function ($number)\
    \ { return abs($number - $mean); }, $numbers);\n  return array_sum($diffs) / count($diffs);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $mean in /tmp/tmprquycbnv.php on line 11\n\
    \nWarning: Undefined variable $mean in /tmp/tmprquycbnv.php on line 11\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmprquycbnv.php:20\nStack trace:\n\
    #0 /tmp/tmprquycbnv.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprquycbnv.php\
    \ on line 20\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ array_reduce($numbers, function($x, $y) {\n    return $x + (abs($y) - abs($x))\
    \ / count($numbers);\n  });\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: abs(): Passing null to parameter #1 ($num) of type int|float\
    \ is deprecated in /tmp/tmpzrw_owo0.php on line 11\n\nWarning: Undefined variable\
    \ $numbers in /tmp/tmpzrw_owo0.php on line 11\n\nFatal error: Uncaught TypeError:\
    \ count(): Argument #1 ($value) must be of type Countable|array, null given in\
    \ /tmp/tmpzrw_owo0.php:11\nStack trace:\n#0 [internal function]: {closure}(NULL,\
    \ 1.0)\n#1 /tmp/tmpzrw_owo0.php(12): array_reduce(Array, Object(Closure))\n#2\
    \ /tmp/tmpzrw_owo0.php(15): mean_absolute_deviation(Array)\n#3 /tmp/tmpzrw_owo0.php(19):\
    \ candidate(Array)\n#4 /tmp/tmpzrw_owo0.php(24): test()\n#5 {main}\n  thrown in\
    \ /tmp/tmpzrw_owo0.php on line 11\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ sqrt(array_sum(array_map('abs', $numbers)) /\n      array_sum(array_map('count',\
    \ $numbers)));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, float given in /tmp/tmpivybkpfo.php:11\nStack trace:\n\
    #0 [internal function]: count(1.0)\n#1 /tmp/tmpivybkpfo.php(11): array_map('count',\
    \ Array)\n#2 /tmp/tmpivybkpfo.php(15): mean_absolute_deviation(Array)\n#3 /tmp/tmpivybkpfo.php(19):\
    \ candidate(Array)\n#4 /tmp/tmpivybkpfo.php(24): test()\n#5 {main}\n  thrown in\
    \ /tmp/tmpivybkpfo.php on line 11\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ $mad_sum = 0;\n  $mad_sum = 0.0;\n  foreach ($numbers as $number) {\n    $mad_sum\
    \ += abs($number - $numbers[0]);\n  }\n  return $mad_sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1dturqe.php:24\n\
    Stack trace:\n#0 /tmp/tmpd1dturqe.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpd1dturqe.php\
    \ on line 24\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ Return mean if only one number\n  if (count($numbers) < 2) {\n    return $numbers[0];\n\
    \  }\n\n  sort($numbers);\n  return $numbers[count($numbers)-1]\n    - $numbers[0]\n\
    \    ;\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvuexhdx8.php:26\n\
    Stack trace:\n#0 /tmp/tmpvuexhdx8.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpvuexhdx8.php\
    \ on line 26\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  if\
    \ (!is_array($numbers) || empty($numbers)) {\n    return NULL;\n  }\n\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  return abs($mean - array_sum(array_map('abs',\
    \ $numbers)) / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2b8qoiyo.php:23\n\
    Stack trace:\n#0 /tmp/tmp2b8qoiyo.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp2b8qoiyo.php\
    \ on line 23\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ (float)array_sum(array_map(function ($x) {\n    return abs($x - array_sum($numbers)\
    \ / count($numbers));\n  }, $numbers)) / count($numbers);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis answer is great because you can just add it to your existing\
    \ code. You could add an optional parameter `bool $average` to `mean_absolute_deviation`.\
    \ It would return average deviation or average absolute deviation depending on\
    \ `$average` parameter.\n<|/ c |>\n<| a tags=php,arrays |>\nHere's an alternative\
    \ solution using array_reduce:\n<code>\n$array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\
    var_dump(array_reduce($array, function($carry, $element) {\n    return $carry\
    \ + abs($element - $carry) / count($array);\n}, 0));\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis answer has one flaw. `count($array)` will always return 1,\
    \ while `count($array)-1` will return the number of elements in $array excluding\
    \ the last one. Not really a problem, but something to consider.\n<|/ c |>\n<|\
    \ c |>\nAh, yes, thanks. I've edited the answer to include your suggestion.\n\
    <|/ c |>\n<| a dscore=0 tags=php,arrays |>\n<code>\n$array = [0, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9];\n$arr2 = array_filter($array, function($x) { return $x; });\n$arr2\
    \ = array_map(function($x) { return $x; }, $arr2);\n$arr2 = array_map(function($x)\
    \ { return abs($x - array_sum($arr2)) / count($arr2); }, $arr2);\n$arr2 = array_reduce($arr2,\
    \ function($carry, $x) { return $carry + $x; });\n</code>\n<|/ a |>\n<| a |>\n\
    Here's a version that doesn't use array_reduce, just for comparison's sake.\n\
    <code>\n$array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n$sum = 0;\nforeach ($array as\
    \ $num) {\n    $sum += $num;\n}\n$mean = floor($sum / count($array));\n$deviations\
    \ = [];\nforeach ($array as $num) {\n    $deviations[] = abs($num - $mean);\n\
    }\necho array_sum($deviations) / count($deviations);\n</code>\n<|/ a dscore=0\
    \ tags=php,arrays |>\n<| a |>\n<code>\n<?php\n$arr = [0, 1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9];\n$\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpnsz9pgjv.php
    on line 14

    '
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  sort($numbers);\n\
    \  $mean   = array_sum($numbers)/count($numbers);\n  $deviations = array();\n\
    \  for ($i=0; $i<count($numbers); $i++) {\n    $deviations[$i] = $numbers[$i]-$mean;\n\
    \  }\n  return array_sum($deviations)/count($deviations);\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_x0v5msc.php:23\n\
    Stack trace:\n#0 /tmp/tmp_x0v5msc.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp_x0v5msc.php\
    \ on line 23\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $n\
    \ = count($numbers);\n  $mean = $numbers[0];\n  for ($i = 1; $i < $n; ++$i) {\n\
    \    $mean += abs($numbers[$i] - $numbers[$i - 1]);\n  }\n  return $mean / $n;\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2tz4mjzd.php:22\n\
    Stack trace:\n#0 /tmp/tmp2tz4mjzd.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp2tz4mjzd.php\
    \ on line 22\n"
  timestamp: 1659979384
- exit_code: 0
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $differences = array();\n  for ($i\
    \ = 0; $i < count($numbers); $i++) {\n    $differences[] = abs($numbers[$i] -\
    \ $mean);\n  }\n  return array_sum($differences) / count($differences);\n}\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979384
- exit_code: 0
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  if\
    \ (count($numbers) < 2) {\n    return 0;\n  }\n  $mean = array_sum($numbers) /\
    \ count($numbers);\n  $sum = 0;\n  foreach ($numbers as $number) {\n    $sum +=\
    \ abs($number - $mean);\n  }\n  return $sum / count($numbers);\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    //\
    \ Calculate the mean.\n    $mean = array_sum($numbers) / count($numbers);\n\n\
    \    // Calculate the differences.\n    $differences = $numbers - $mean;\n\n \
    \   // Average absolute difference.\n    return array_sum($differences) / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: array - float\
    \ in /tmp/tmps9zihz22.php:14\nStack trace:\n#0 /tmp/tmps9zihz22.php(21): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmps9zihz22.php(25): candidate(Array)\n#2 /tmp/tmps9zihz22.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmps9zihz22.php on line 14\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $avg\
    \ = array_sum($numbers) /count($numbers);\n  return array_reduce($numbers, function($sum,\
    \ $val){\n    return $sum + ($val - $avg);\n  });\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $avg in /tmp/tmpcep5oylx.php on line 12\n\
    \nWarning: Undefined variable $avg in /tmp/tmpcep5oylx.php on line 12\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpcep5oylx.php:20\nStack trace:\n\
    #0 /tmp/tmpcep5oylx.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpcep5oylx.php\
    \ on line 20\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ Convert to float.\n  $numbers = array_map('floatval', $numbers);\n\n  // Subtract\
    \ the mean.\n  $mean = array_sum($numbers) / count($numbers);\n\n  // Calculate\
    \ the difference from the mean.\n  $variance = array_sum($numbers) - (array_sum($numbers)\
    \ / (count($numbers)));\n\n  // Return the mean absolute deviation.\n  return\
    \ sqrt($variance);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0qmkk2k2.php:28\n\
    Stack trace:\n#0 /tmp/tmp0qmkk2k2.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp0qmkk2k2.php\
    \ on line 28\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  sort($numbers);\n\
    \  $mean = array_pop($numbers);\n  $sum = 0;\n  $n = count($numbers);\n  foreach\
    \ ($numbers as $n) {\n    $sum += pow(($n - $mean), 2);\n  }\n  return $sum /\
    \ $n;\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr8fzj4tz.php:25\n\
    Stack trace:\n#0 /tmp/tmpr8fzj4tz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpr8fzj4tz.php\
    \ on line 25\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return array_sum(abs($numbers\
    \ - $mean)) / count($numbers);\n}\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: array - float\
    \ in /tmp/tmpd2xenzao.php:11\nStack trace:\n#0 /tmp/tmpd2xenzao.php(14): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmpd2xenzao.php(18): candidate(Array)\n#2 /tmp/tmpd2xenzao.php(23): test()\n\
    #3 {main}\n  thrown in /tmp/tmpd2xenzao.php on line 11\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $n\
    \ = count($numbers);\n\n  $mean = array_sum($numbers) / $n;\n\n  $deviations =\
    \ array_map(function ($number) use ($mean) {\n    return $number - $mean;\n  },\
    \ $numbers);\n\n  return array_sum($deviations) / $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfvkoolff.php:26\n\
    Stack trace:\n#0 /tmp/tmpfvkoolff.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpfvkoolff.php\
    \ on line 26\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $n\
    \ = count($numbers);\n\n  if ($n == 0) {\n    return NULL;\n  }\n\n  $mean = array_sum($numbers)\
    \ / $n;\n\n  $diff = array_map(function ($v) use ($mean) {\n    return $v - $mean;\n\
    \  }, $numbers);\n\n  return array_sum($diff) / $n;\n}\n</code>\n<|/ a tags=php,statistics\
    \ dscore=4 |>\n<| a dscore=4 |>\nThe formula for mean absolute deviation is as\
    \ below.\n<code>\nMEANABSDEV = SUM(ABS(Value - MEAN))/COUNT\n</code>\nThe formula\
    \ is just taking the sum of absolute value of the difference between each sample\
    \ and mean of the sample and dividing it by the count of the samples. In your\
    \ case, you can calculate the mean of the array by getting the average of the\
    \ values of array and pass it to the function.\n<code>\n$mean = array_sum($array)\
    \ / count($array);\n$mad = mean_absolute_deviation($array, $mean);\n</code>\n\
    In your case, you are passing the array as an argument to the function, so just\
    \ get the mean of the array and pass it to the function.\n<|/ a tags=php,statistics\
    \ |>\n<| c |>\nNot a bad solution! But it would be better to pass only one argument\
    \ and let the function calculate mean internally\n<|/ c |>\n<| c |>\nYeah, that\
    \ would be better\n<|/ c |>\n<| a dscore=4 tags=php,statistics |>\nHere's a function\
    \ in PHP 5.3+, with examples of its usage:\n<code>\n/**\n * Computes the mean\
    \ absolute deviation of a set of numbers.\n *\n * array $numbers\n *\n * float\n\
    \ */\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp1q5qd7_2.php
    on line 24

    '
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  global\
    \ $N;\n  if($N == 1) {\n    return $numbers[0];\n  }\n\n  $avg = array_sum($numbers)\
    \ / $N;\n  return abs(array_sum($numbers) - $avg);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Division by zero in /tmp/tmphggytsv5.php:15\n\
    Stack trace:\n#0 /tmp/tmphggytsv5.php(20): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmphggytsv5.php(24): candidate(Array)\n#2 /tmp/tmphggytsv5.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmphggytsv5.php on line 15\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  return array_reduce($numbers, function($sum,\
    \ $value) use ($mean) {\n    return $sum + abs($value - $mean);\n  }, 0.0) / count($numbers);\n\
    }\n</code>\n<|/ a tags=php,math |>\n<| c |>\nNice explanation, I liked yours better.\
    \ Good job :)\n<|/ c |>\n<| c |>\nI added some more explanation and cleaned it\
    \ up some.\n<|/ c |>\n<| c |>\nThis was a great explanation.\n<|/ c |>\n<| a dscore=5\
    \ tags=php,math |>\nYou can calculate the average by doing the following:\n\n\
    Average the values up and then divide by n-1 where n is the number of values.\n\
    If there are more values than there are unique values, take the average of the\
    \ remaining values.\n\nExample:\n<code>\n$numbers = array(3, 6, 2, 10, 8);\n$sum\
    \ = array_sum($numbers);\n$average = $sum / count($numbers);\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpgmj0z3y5.php
    on line 15

    '
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  if\
    \ (!count($numbers)) {\n    return 0;\n  }\n  $mean = array_sum($numbers) / count($numbers);\n\
    \  return abs($mean - array_sum($numbers_squared) / count($numbers_squared));\n\
    }\n</code>\n<|/ a tags=php |>\n<| a |>\nI made a function that calculates the\
    \ standard deviation of an array passed as a parameter. \n<code>\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpko48dp5w.php
    on line 16

    '
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    return\
    \ abs((array_sum($numbers) - array_sum($numbers) /\n      count($numbers)) / count($numbers));\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv867psv5.php:18\n\
    Stack trace:\n#0 /tmp/tmpv867psv5.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpv867psv5.php\
    \ on line 18\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $diffs\
    \ = array();\n  foreach ($numbers as $number) {\n    $diffs[] = $number - array_sum($numbers)\
    \ / count($numbers);\n  }\n  return array_sum($diffs) / count($diffs);\n}\n\n\
    function candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm873z113.php:22\n\
    Stack trace:\n#0 /tmp/tmpm873z113.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpm873z113.php\
    \ on line 22\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  return array_map('abs', $numbers)\
    \ - $mean;\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: array - float\
    \ in /tmp/tmp8_4fahax.php:11\nStack trace:\n#0 /tmp/tmp8_4fahax.php(14): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmp8_4fahax.php(18): candidate(Array)\n#2 /tmp/tmp8_4fahax.php(23): test()\n\
    #3 {main}\n  thrown in /tmp/tmp8_4fahax.php on line 11\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $value) {\n    $squared_diff += pow($value - $mean);\n  }\n  return pow($squared_diff\
    \ / (count($numbers) - 1), 0.5);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ArgumentCountError: pow() expects exactly 2 arguments,\
    \ 1 given in /tmp/tmp_ac29l7h.php:13\nStack trace:\n#0 /tmp/tmp_ac29l7h.php(13):\
    \ pow(-0.5)\n#1 /tmp/tmp_ac29l7h.php(19): mean_absolute_deviation(Array)\n#2 /tmp/tmp_ac29l7h.php(23):\
    \ candidate(Array)\n#3 /tmp/tmp_ac29l7h.php(28): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmp_ac29l7h.php on line 13\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $n\
    \ = count($numbers);\n  $mean = $numbers[0];\n  $sum = 0;\n  for ($i = 0; $i <\
    \ $n; ++$i) {\n    $sum += abs($numbers[$i] - $mean);\n  }\n  return $sum / $n;\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnpaotkax.php:25\n\
    Stack trace:\n#0 /tmp/tmpnpaotkax.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpnpaotkax.php\
    \ on line 25\n"
  timestamp: 1659979384
- exit_code: 0
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) /count($numbers);\n    return array_reduce($numbers, function($sum,\
    \ $value) use ($mean) {\n        $sum += abs($value - $mean);\n        return\
    \ $sum;\n    }, 0) / count($numbers);\n}\n\nfunction candidate(...$args) {\n \
    \   return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mad\
    \ = 0;\n  foreach ($numbers as $number) {\n    $mad += abs($number - $numbers[array_key_exists(0,\
    \ $numbers) ? 0 : 1]);\n  }\n  return $mad / count($numbers);\n}\n</code>\n<|/\
    \ a dscore=5 tags=arrays,php |>\n<| c |>\nYeah, I remember a time when there was\
    \ a PHP function called `MAD()`. It's a long time since I looked at it, but it\
    \ was in Perl, so I figured it was worth mentioning.\n<|/ c |>\n<| c |>\nThis\
    \ is not the MAD, it is simply the sum of the squared differences between the\
    \ elements of the array.\n<|/ c |>\n<| c |>\nAhh, I see now. Sorry I wasn't clear\
    \ in my previous comment. :) Thanks for the catch.\n<|/ c |>\n<| c |>\n- what\
    \ if there are negative values?\n<|/ c |>\n<| a |>\nFor anyone looking for an\
    \ example of how to do this, the following code returns the mean absolute deviation\
    \ from each value in the array\n<code>\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpje84kt7f.php
    on line 16

    '
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \  = mean ($numbers);\n  $diff  = $numbers - $mean;\n  return abs ($diff * $diff);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpur6ysjzw.php:10\n\
    Stack trace:\n#0 /tmp/tmpur6ysjzw.php(16): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpur6ysjzw.php(20): candidate(Array)\n#2 /tmp/tmpur6ysjzw.php(25): test()\n\
    #3 {main}\n  thrown in /tmp/tmpur6ysjzw.php on line 10\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  sort($numbers);\n\
    \  $mean   = array_sum($numbers) / count($numbers);\n  $diff   = array();\n  for\
    \ ($i=0; $i<count($numbers); $i++) {\n    $diff[$i] = $numbers[$i] - $mean;\n\
    \  }\n  return array_sum($diff) / count($diff);\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplz17z27w.php:23\n\
    Stack trace:\n#0 /tmp/tmplz17z27w.php(28): test()\n#1 {main}\n  thrown in /tmp/tmplz17z27w.php\
    \ on line 23\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  if\
    \ (!is_array($numbers)) {\n    $numbers = array($numbers);\n  }\n  $n = count($numbers);\n\
    \  if (!$n) {\n    return 0;\n  }\n  $mean = array_sum($numbers) / $n;\n  $x_sum\
    \ = 0;\n  foreach ($numbers as $x) {\n    $x_sum += pow($x - $mean,2);\n  }\n\
    \  return $x_sum / $n;\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpajbs3tzu.php:29\n\
    Stack trace:\n#0 /tmp/tmpajbs3tzu.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpajbs3tzu.php\
    \ on line 29\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $means\
    \ = array_map(function($n){ return $n->mean(); }, $numbers);\n    return array_reduce($numbers,\
    \ function($sum, $n) { return $sum + ($n->mean() - $sum); }, 0.0) / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to a member function mean() on float\
    \ in /tmp/tmpc9ds7ol_.php:10\nStack trace:\n#0 [internal function]: {closure}(1.0)\n\
    #1 /tmp/tmpc9ds7ol_.php(10): array_map(Object(Closure), Array)\n#2 /tmp/tmpc9ds7ol_.php(15):\
    \ mean_absolute_deviation(Array)\n#3 /tmp/tmpc9ds7ol_.php(19): candidate(Array)\n\
    #4 /tmp/tmpc9ds7ol_.php(24): test()\n#5 {main}\n  thrown in /tmp/tmpc9ds7ol_.php\
    \ on line 10\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_7s65n8.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_7s65n8.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp6_7s65n8.php\
    \ on line 23\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return array_sum(abs($numbers\
    \ - $mean)) / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: array - float\
    \ in /tmp/tmpq4lcnfe7.php:11\nStack trace:\n#0 /tmp/tmpq4lcnfe7.php(15): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmpq4lcnfe7.php(19): candidate(Array)\n#2 /tmp/tmpq4lcnfe7.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmpq4lcnfe7.php on line 11\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptpan3tky.php:18\n\
    Stack trace:\n#0 /tmp/tmptpan3tky.php(23): test()\n#1 {main}\n  thrown in /tmp/tmptpan3tky.php\
    \ on line 18\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return abs($mean - array_sum($numbers)\
    \ /count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz_3o41x5.php:19\n\
    Stack trace:\n#0 /tmp/tmpz_3o41x5.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpz_3o41x5.php\
    \ on line 19\n"
  timestamp: 1659979384
- exit_code: 0
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $mad = 0;\n  foreach ($numbers as\
    \ $n) {\n    $mad += abs($n - $mean);\n  }\n  return $mad / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    sort($numbers);\n\
    \    $n = count($numbers);\n    $mean = array_sum($numbers) / $n;\n    return\
    \ abs($mean - array_sum($numbers)) / $n;\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptv96gyc3.php:21\n\
    Stack trace:\n#0 /tmp/tmptv96gyc3.php(26): test()\n#1 {main}\n  thrown in /tmp/tmptv96gyc3.php\
    \ on line 21\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t$mean\
    \ = array_sum($numbers) / count($numbers);\n\treturn array_map(\n\t\tfunction($x)\
    \ { return abs($x - $mean); },\n\t\t$numbers\n\t);\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $mean in /tmp/tmpwg9dubuq.php on line 12\n\
    \nWarning: Undefined variable $mean in /tmp/tmpwg9dubuq.php on line 12\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpwg9dubuq.php:21\nStack trace:\n\
    #0 /tmp/tmpwg9dubuq.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpwg9dubuq.php\
    \ on line 21\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    if\
    \ (empty($numbers)) {\n        return null;\n    }\n\n    $n = count($numbers);\n\
    \    $mean = array_sum($numbers) / $n;\n    $mad = 0;\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        $mad = ($mad + abs($numbers[$i] - $mean)) / ($n + 1);\n   \
    \ }\n\n    return $mad;\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprlsow34n.php:29\n\
    Stack trace:\n#0 /tmp/tmprlsow34n.php(34): test()\n#1 {main}\n  thrown in /tmp/tmprlsow34n.php\
    \ on line 29\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  return array_map('abs', $numbers)\
    \ -\n      array_map(function ($x) use ($mean) {\n        return $x - $mean;\n\
    \      }, $numbers);\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: array - array\
    \ in /tmp/tmp2lh5jytb.php:14\nStack trace:\n#0 /tmp/tmp2lh5jytb.php(17): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmp2lh5jytb.php(21): candidate(Array)\n#2 /tmp/tmp2lh5jytb.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmp2lh5jytb.php on line 14\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  sort($numbers);\n\
    \  $n = count($numbers);\n\n  $mean = $numbers[0];\n\n  $sum = 0;\n  for ($i =\
    \ 0; $i < $n; $i++) {\n    $sum += pow((($numbers[$i] - $mean), 2));\n  }\n  return\
    \ sqrt($sum / $n);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "," in /tmp/tmp60a0s7aw.php on line
    17

    '
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $mad = 0;\n  foreach ($numbers as\
    \ $value) {\n    $mad = $mad + abs($value - $mean);\n  }\n  return $mad;\n}\n\n\
    function candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplk8c0yjb.php:23\n\
    Stack trace:\n#0 /tmp/tmplk8c0yjb.php(28): test()\n#1 {main}\n  thrown in /tmp/tmplk8c0yjb.php\
    \ on line 23\n"
  timestamp: 1659979384
- exit_code: 0
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \  = array_sum($numbers) / count($numbers);\n  $dev   = 0;\n  $count = count($numbers);\n\
    \  foreach ($numbers as $number) {\n    $dev += abs($number - $mean);\n  }\n \
    \ return ($count > 1) ? $dev / $count : 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  return abs($mean - array_sum(array_map(function\
    \ ($x) { return $x; }, $numbers)) / count($numbers));\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxl3i4e2k.php:18\n\
    Stack trace:\n#0 /tmp/tmpxl3i4e2k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpxl3i4e2k.php\
    \ on line 18\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \    = array_sum($numbers) / count($numbers);\n  $diff    = array_diff($numbers,\
    \ $mean);\n  return array_sum($diff) / count($diff);\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_diff(): Argument #2 must be of\
    \ type array, float given in /tmp/tmpir320kdg.php:11\nStack trace:\n#0 /tmp/tmpir320kdg.php(11):\
    \ array_diff(Array, 1.5)\n#1 /tmp/tmpir320kdg.php(15): mean_absolute_deviation(Array)\n\
    #2 /tmp/tmpir320kdg.php(19): candidate(Array)\n#3 /tmp/tmpir320kdg.php(24): test()\n\
    #4 {main}\n  thrown in /tmp/tmpir320kdg.php on line 11\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ sqrt(\n          array_reduce($numbers, function($sum, $value) {\n         \
    \   return $sum + pow($value - $sum, 2);\n          }, 0) / count($numbers)\n\
    \         );\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaold85mh.php:21\n\
    Stack trace:\n#0 /tmp/tmpaold85mh.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpaold85mh.php\
    \ on line 21\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  sort($numbers);\n\
    \  $n = count($numbers);\n  $mean = $numbers[0];\n  $sum = 0;\n  for ($i = 1;\
    \ $i < $n; ++$i) {\n    $sum += abs($numbers[$i] - $mean);\n  }\n  return $sum\
    \ / $n;\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptjb69hhr.php:25\n\
    Stack trace:\n#0 /tmp/tmptjb69hhr.php(29): test()\n#1 {main}\n  thrown in /tmp/tmptjb69hhr.php\
    \ on line 25\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $mean_abs = abs($numbers - $mean);\n\
    \    return array_sum($mean_abs) / count($mean_abs);\n}\n</code>\n<|/ a dscore=4\
    \ tags=php,math,statistics |>\n<| c |>\nIt isn't clear from the question whether\
    \ the dataset is continuous or not, but if there are gaps, then you should consider\
    \ the difference between the highest and lowest number, and divide that by the\
    \ number of gaps.\n<|/ c |>\n<| c |>\nGood point! One way or another, there need\
    \ to be gaps in the dataset.\n<|/ c |>\n<| c |>\nThank you for sharing your code.\
    \  I'm also looking for some code to calculate the mean absolute deviation, but\
    \ this one works best.\n<|/ c |>\n<| c |>\nThanks for sharing your code. It seems\
    \ the function always returns the same value if all elements are equal. Any ideas\
    \ on how to fix this?\n<|/ c |>\n<| c |>\nHow is this code different from `array_sum(\
    \ abs($numbers - $mean) )/ count($numbers);`?\n<|/ c |>\n<| a tags=php,math,statistics\
    \ |>\nThe answer above is good but for people who want to calculate it only once\
    \ (for large data sets). \n<code>\n$mean = $sum / count($numbers);\n$mean = array_sum($numbers)\
    \ / count($numbers);\n$mad = abs($numbers - $mean);\nreturn array_sum($mad) /\
    \ count($mad);\n</code>\n<|/ a dscore=4 |>\n<| c |>\n+1 for avoiding two lines\
    \ of code, which can make debugging easier (especially if you're not familiar\
    \ with the array_sum() function).\n<|/ c |>\n<| a |>\nIf you have only positive\
    \ values in your array, you can compute the mean just by adding all the values,\
    \ divide it by the length of the array, and substract that value from the array\n\
    <code>\n<?php\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp6gri4ywb.php
    on line 14

    '
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = get_average($numbers);\n  return abs(array_sum($numbers) - $mean);\n}\n\n\
    function candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_average()\
    \ in /tmp/tmpo6k86tyc.php:10\nStack trace:\n#0 /tmp/tmpo6k86tyc.php(15): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmpo6k86tyc.php(19): candidate(Array)\n#2 /tmp/tmpo6k86tyc.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmpo6k86tyc.php on line 10\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ Calculate mean and standard deviation\n  $mean = array_sum($numbers) / count($numbers);\n\
    \  $variance = array_sum(array_diff($numbers, [$mean])) / count($numbers);\n\n\
    \  // Return the calculated MAD\n  return abs($mean - round($variance, 4));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph_rruvq4.php:23\n\
    Stack trace:\n#0 /tmp/tmph_rruvq4.php(28): test()\n#1 {main}\n  thrown in /tmp/tmph_rruvq4.php\
    \ on line 23\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ array_sum($numbers)\n    / count($numbers)\n    - (array_sum($numbers) /\n \
    \      count($numbers))\n    ** 2;\n}\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4nsq4ac3.php:21\n\
    Stack trace:\n#0 /tmp/tmp4nsq4ac3.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp4nsq4ac3.php\
    \ on line 21\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $variance = array_sum(array_diff($numbers,\
    \ $mean)) + array_sum($numbers);\n    return $variance / count($numbers);\n}\n\
    function candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_diff(): Argument #2 must be of\
    \ type array, float given in /tmp/tmphtld04ux.php:11\nStack trace:\n#0 /tmp/tmphtld04ux.php(11):\
    \ array_diff(Array, 1.5)\n#1 /tmp/tmphtld04ux.php(15): mean_absolute_deviation(Array)\n\
    #2 /tmp/tmphtld04ux.php(19): candidate(Array)\n#3 /tmp/tmphtld04ux.php(24): test()\n\
    #4 {main}\n  thrown in /tmp/tmphtld04ux.php on line 11\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  return round(abs($mean - array_sum(array_map(function\
    \ ($x) {\n    return fabs($x);\n  }, $numbers))), 4);\n}\n</code>\n<|/ a tags=statistics,php,algorithm,math\
    \ |>\n<| c |>\nthis gives me a different result. what i'm looking for, is the\
    \ mean of all the numbers in the array, and all the numbers in the array, without\
    \ having to loop through each number in the array\n<|/ c |>\n<| a dscore=0 tags=statistics,php,algorithm,math\
    \ |>\nI see that you have some good answers already but i think this is a little\
    \ bit of an edge case.\nSince you mention having to loop through each element\
    \ in the array for standard deviation the best way imo is something like this:\n\
    <code>\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpz22n7sju.php
    on line 15

    '
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    //\
    \ calculate the mean of the numbers and subtract it from the numbers\n    // to\
    \ give us an absolute deviation from the mean\n    $mean = array_sum($numbers)\
    \ / count($numbers);\n    return array_sum(abs($numbers - $mean)) / count($numbers);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI believe you are on the right track,\
    \ but this doesn't appear to be the right way to do it.  When I run the code in\
    \ the OP's question, I get 1.5 not 1.0, which is what they want.  Please try this\
    \ code and show me the output to prove it to me that I am correct.  Also please\
    \ tell me why my code doesn't work.\n<|/ c |>\n<| c |>\nThis does not take into\
    \ account the fact that `mean` is not really the mean of anything...\n<|/ c |>\n\
    <| c |>\nI see your point, but this method is based on the OP's example, which\
    \ shows that the mean is 3.0 and the standard deviation is 1.0 (http://en.wikipedia.org/wiki/Standard_deviation#Algorithm)\n\
    <|/ c |>\n<| c |>\nI mean the mean of the example numbers is 3, but the mean of\
    \ a real dataset is usually much higher and the mean is a lot more far away from\
    \ that.  But since `stdDev()` does not take into account the mean of anything,\
    \ your result is not the same as the OP's example answer.\n<|/ c |>\n<| a tags=statistics,php\
    \ |>\nYou can use the following function and get the MAD in PHP:\n<code>\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp7a5oo3oe.php
    on line 15

    '
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return abs($mean - array_sum(array_map(function\
    \ ($num) use ($mean) {\n        return $num - $mean;\n    }, $numbers)));\n}\n\
    \nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxwx0bqom.php:21\n\
    Stack trace:\n#0 /tmp/tmpxwx0bqom.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpxwx0bqom.php\
    \ on line 21\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t$ns\
    \ = count($numbers);\n\t$mean = $numbers[0];\n\t\n\tif ($ns === 1) {\n\t\treturn\
    \ abs($numbers[0] - $mean);\n\t}\n\t\n\tfor ($i = 1; $i < $ns; $i++) {\n\t\t$mean\
    \ += ($numbers[$i] - $mean) / $ns;\n\t}\n\treturn abs($mean - $numbers[$ns - 1]);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprzm_g3ro.php:29\n\
    Stack trace:\n#0 /tmp/tmprzm_g3ro.php(33): test()\n#1 {main}\n  thrown in /tmp/tmprzm_g3ro.php\
    \ on line 29\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) /count($numbers);\n  $dev = 0;\n  foreach ($numbers as\
    \ $n) {\n    $dev += pow(( $n - $mean ),2);\n  }\n  return $dev/count($numbers);\n\
    }\n</code>\n<|/ a tags=algorithm,php,math,statistics |>\n<| c |>\nCould you please\
    \ add the description for the formula and how does it compares to the other two\
    \ answers?\n<|/ c |>\n<| c |>\nThis doesn't compute \"mean\".  It computes \"\
    average\".\n<|/ c |>\n<| c |>\nthe mean of $numbers is 1/(n+1), so for an array\
    \ with 3 elements it will return 0.5, not 1/3.\n<|/ c |>\n<| c |>\nYou are right.\
    \ Thanks for pointing that out. I've edited the answer to correct this mistake.\n\
    <|/ c |>\n<| c |>\nNice, but your edit still isn't correct.  That formula doesn't\
    \ compute \"mean\".  It computes \"average\".\n<|/ c |>\n<| a dscore=4 tags=algorithm,php,math,statistics\
    \ |>\nThe formula is simply: sum(x)/len(x), where sum(x) is sum of all numbers\
    \ in array, and len(x) is number of elements in array.\n<|/ a |>\n<| c |>\nIt\
    \ does not compute the mean.  It computes the average.  A different formula, \"\
    mean absolute deviation\", computes the mean as you say.\n<|/ c |>\n<| c |>\n\
    I agree with. This formula does not compute the mean. It computes the average.\n\
    <|/ c |>\n<| c |>\nNice.  I love the simplicity and conciseness of this approach.\n\
    <|/ c |>\n<| c |>\nIt doesn't compute the mean. It computes the average.\n<|/\
    \ c |>\n<| a dscore=4 |>\nAs far as I can see, all the answers here compute mean\
    \ rather than absolute deviation. To compute absolute deviation around mean, use:\n\
    <code>\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpxumjkb4u.php
    on line 17

    '
  timestamp: 1659979384
- exit_code: 0
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ Initialize variables\n  $number_of_numbers = count($numbers);\n  $sum = 0;\n\
    \  $mean = array_sum($numbers) / $number_of_numbers;\n\n  // For each number in\
    \ the dataset\n  for ($i = 0; $i < $number_of_numbers; $i++) {\n    // Calculate\
    \ the difference of the current number and the mean\n    $diff =  $numbers[$i]\
    \ - $mean;\n    // Add the absolute value of the difference to the sum\n    $sum\
    \ += abs($diff);\n  }\n\n  // Return the MAD\n  return $sum / $number_of_numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $sum = 0;\n    foreach ($numbers\
    \ as $n) {\n        $sum += pow(($n - $mean), 2);\n    }\n    return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxgoau8jz.php:23\n\
    Stack trace:\n#0 /tmp/tmpxgoau8jz.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpxgoau8jz.php\
    \ on line 23\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    if\
    \ (!is_array($numbers)) {\n        $numbers = array($numbers);\n    }\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return array_sum(abs($numbers\
    \ - $mean)) / count($numbers);\n}\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: array - float\
    \ in /tmp/tmps30seg1z.php:14\nStack trace:\n#0 /tmp/tmps30seg1z.php(17): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmps30seg1z.php(21): candidate(Array)\n#2 /tmp/tmps30seg1z.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmps30seg1z.php on line 14\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $deviations = array();\n    foreach\
    \ ($numbers as $number) {\n        $deviations[] = abs($number - $mean);\n   \
    \ }\n    return array_sum($deviations) / count($numbers);\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis code does not calculate MAD but MAD around the mean.\n<|/ c |>\n\
    <| c |>\nYeah my bad.\n<|/ c |>\n<| c |>\nCan you please check the updated code?\
    \ I tested it on random datasets and it seems to be working fine.\n<|/ c |>\n\
    <| a tags=performance,php,arrays |>\nI used two approaches for MAD:\n1. Function\
    \ with array_sum and array_diff functions:\n<code>\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpcotqc2nn.php
    on line 17

    '
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ First calculate the mean of all numbers.\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += $n;\n  }\n  $mean = intval($sum / count($numbers));\n\n \
    \ // Now calculate the absolute deviation from mean.\n  $dev_sum = 0;\n  for ($n\
    \ = 0; $n < count($numbers); $n++) {\n    $dev_sum += abs($numbers[$n] - $mean);\n\
    \  }\n  return $dev_sum / count($numbers);\n}\n</code>\nThe same formula is also\
    \ used for other data metrics such as Root Mean Square Error (RMSE) and Mean Squared\
    \ Error (MSE).\n<|/ a tags=mean,math,statistics |>\n<| a dscore=2 |>\nThe formula\
    \ for mean of absolute deviation of numbers is (sum of absolute deviations / n).\n\
    <|/ a tags=mean,math,statistics |>\n<| a |>\nIf you are talking about a computer\
    \ program that calculates your average, here's what I have written:\n<code>\n\
    function candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp9krm1td0.php
    on line 24

    '
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  sort($numbers);\n\
    \  $diff = array_diff($numbers, array_fill(0, count($numbers), 0));\n  $mean =\
    \ array_sum($diff) / count($diff);\n  return array_sum($diff) / count($diff);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3nyuhxqk.php:21\n\
    Stack trace:\n#0 /tmp/tmp3nyuhxqk.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp3nyuhxqk.php\
    \ on line 21\n"
  timestamp: 1659979384
- exit_code: 0
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \      = array_sum($numbers)  / count($numbers);\n  $sum_diff = 0;\n  foreach\
    \ ($numbers as $number) {\n    $sum_diff += abs($number - $mean);\n  }\n  return\
    \ $sum_diff / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    if\
    \ (count($numbers) < 2) {\n        return 0;\n    }\n    $mean = array_sum($numbers)\
    \ / count($numbers);\n    return abs(array_sum($numbers) - $mean);\n}\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpao3aq2dx.php:21\n\
    Stack trace:\n#0 /tmp/tmpao3aq2dx.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpao3aq2dx.php\
    \ on line 21\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $deltas = $numbers - $mean;\n  $mad\
    \ = 0;\n  foreach ($deltas as $delta) {\n    $mad += abs($delta);\n  }\n  return\
    \ $mad / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: array - float\
    \ in /tmp/tmpvjp2y_l1.php:11\nStack trace:\n#0 /tmp/tmpvjp2y_l1.php(20): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmpvjp2y_l1.php(24): candidate(Array)\n#2 /tmp/tmpvjp2y_l1.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpvjp2y_l1.php on line 11\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = mean($numbers);\n    $mad = sqrt(array_sum(array_map(function ($num) use ($mean)\
    \ {\n        return ($num - $mean) * ($num - $mean);\n    }, $numbers)) / count($numbers));\n\
    \    return $mad;\n}\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\nHere's an\
    \ approach using a rolling window of size 3:\n<code>\n$numbers = [1,2,3,4,5,6,7,8,9,10];\n\
    \n$rollingWindowSize = 3;\n$result = array_reduce(\n    $numbers,\n    function\
    \ ($acc, $val) use ($rollingWindowSize, $numbers) {\n        $rollingWindow =\
    \ array_slice($acc, -$rollingWindowSize);\n        $rollingWindow[] = $val;\n\
    \        return array_merge($rollingWindow, $acc);\n    },\n    []\n);\n\necho\
    \ array_sum(array_map(function($value){\n    return abs($value - array_sum($result)/count($result));\n\
    }, $result));\n</code>\nOutput:\n<code>\n1.0\n</code>\nDemo on 3v4l.org\n<|/ a\
    \ tags=php,arrays,mean |>\n<| a dscore=0 |>\nI wrote this for my own project,\
    \ it returns the average of the last 3 values in a array\n<code>\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpmopr8_9k.php
    on line 16

    '
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $n\
    \ = count($numbers);\n  $mean = array_sum($numbers) / $n;\n  $sum = 0;\n  for\
    \ ($i = 0; $i < $n; ++$i) {\n    $sum += $numbers[$i] - $mean;\n  }\n  return\
    \ $sum / $n;\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_jq94z2.php:24\n\
    Stack trace:\n#0 /tmp/tmpa_jq94z2.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpa_jq94z2.php\
    \ on line 24\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    //\
    \ return the average absolute difference\n    return array_reduce($numbers, function($sum,\
    \ $val) { return $sum + abs($val); }, 0) / count($numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0vobdrd_.php:19\n\
    Stack trace:\n#0 /tmp/tmp0vobdrd_.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp0vobdrd_.php\
    \ on line 19\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ sqrt(array_sum(array_map(function ($number) { return (abs($number - $numbers[0]));\
    \ }, $numbers)) / count($numbers));\n}\n\nfunction candidate(...$args) {\n   \
    \ return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $numbers in /tmp/tmpb8pq7mvz.php on line\
    \ 10\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpb8pq7mvz.php\
    \ on line 10\n\nWarning: Undefined variable $numbers in /tmp/tmpb8pq7mvz.php on\
    \ line 10\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpb8pq7mvz.php\
    \ on line 10\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb8pq7mvz.php:18\n\
    Stack trace:\n#0 /tmp/tmpb8pq7mvz.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpb8pq7mvz.php\
    \ on line 18\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\t$mean\
    \ = array_sum($numbers) / count($numbers);\n\treturn array_sum(abs($numbers -\
    \ $mean)) / count($numbers);\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: array - float\
    \ in /tmp/tmp8qpveap1.php:11\nStack trace:\n#0 /tmp/tmp8qpveap1.php(14): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmp8qpveap1.php(18): candidate(Array)\n#2 /tmp/tmp8qpveap1.php(23): test()\n\
    #3 {main}\n  thrown in /tmp/tmp8qpveap1.php on line 11\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \  = 0;\n    $length = 0;\n    foreach ($numbers as $number)\n        $mean +=\
    \ $number;\n    $length = count($numbers);\n\n    $mean = count($numbers) ? $mean\
    \ / $length : 0;\n\n    $squared_deltas = array();\n    for ($i = 0; $i < $length;\
    \ $i++) {\n        $delta = $numbers[$i] - $mean;\n        $squared_deltas[] =\
    \ $delta * $delta;\n    }\n\n    return array_sum($squared_deltas) / count($numbers);\n\
    }\n</code>\nAnd here is a complete solution using your exact data set:\n<code>\n\
    <?php\n$data = [\n    [\n        'time' => '2014-01-02 05:43:05',\n        'temp'\
    \ => 12.1,\n        'pressure' => 1014.25,\n        'humidity' => 82.3,\n    \
    \    'windSpeed' => 3.9,\n        'windBearing' => 183,\n        'windGust' =>\
    \ 2.4,\n        'cloudCover' => 0.1,\n        'uvIndex' => 1.9,\n        'visibility'\
    \ => 6.4,\n        'ozone' => 0.2,\n    ],\n    [\n        'time' => '2014-01-02\
    \ 05:43:05',\n        'temp' => 12.2,\n        'pressure' => 1014.27,\n      \
    \  'humidity' => 82.3,\n        'windSpeed' => 3.9,\n        'windBearing' =>\
    \ 183,\n        'windGust' => 2.4,\n        'cloudCover' => 0.1,\n        'uvIndex'\
    \ => 1.9,\n        'visibility' => 6.4,\n        'ozone' => 0.2,\n    ],\n   \
    \ [\n        'time' => '2014-01-02 05:43:05',\n        'temp' => 12.2,\n     \
    \   'pressure' => 1014.27,\n        'humidity' => 82.3,\n        'windSpeed' =>\
    \ 3.9,\n        'windBearing' => 183,\n        'windGust' => 2.4,\n        'cloudCover'\
    \ => 0.1,\n        'uvIndex' => 1.9,\n        'visibility' => 6.4,\n        'ozone'\
    \ => 0.2,\n    ],\n    [\n        'time' => '2014-01-02 05:43:05',\n        'temp'\
    \ => 12.2,\n        'pressure' => 1014.27,\n        'humidity' => 82.3,\n    \
    \    'windSpeed' => 3.9,\n        'windBearing' => 183,\n        'windGust' =>\
    \ 2.4,\n        'cloudCover' => 0.1,\n        'uvIndex' => 1.9,\n        'visibility'\
    \ => 6.4,\n        'ozone' => 0.2,\n    ],\n    [\n        'time' => '2014-01-02\
    \ 05:43:05',\n        'temp' => 12.2,\n        'pressure' => 10\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpvz2ss_5j.php
    on line 26

    '
  timestamp: 1659979384
- exit_code: 0
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \   = 0;\n    $num_sum = 0;\n    $length = count($numbers);\n\n    for ($i = 0;\
    \ $i < $length; $i++) {\n        $num_sum += $numbers[$i];\n    }\n    $mean =\
    \ $num_sum / $length;\n\n    $made_numbers = array();\n    for ($i = 0; $i < $length;\
    \ $i++) {\n        $made_numbers[] = abs($numbers[$i] - $mean);\n    }\n    return\
    \ array_sum($made_numbers) / count($made_numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ calculate the mean\n  $mean = array_sum($numbers) / count($numbers);\n  // calculate\
    \ the deviations\n  $devs = $numbers - $mean;\n  // calculate the mean absolute\
    \ deviation\n  return array_sum($devs) / count($devs);\n}\n\n$input1 = array(1.0,\
    \ 2.0, 3.0, 4.0);\n$input2 = array(1.0, 2.0, 3.0, 4.0);\n$input3 = array(1.0,\
    \ 2.0, 3.0, 4.0);\n$input4 = array(1.0, 2.0, 3.0, 4.0);\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: array - float\
    \ in /tmp/tmpjbvjb91h.php:13\nStack trace:\n#0 /tmp/tmpjbvjb91h.php(24): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmpjbvjb91h.php(28): candidate(Array)\n#2 /tmp/tmpjbvjb91h.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjbvjb91h.php on line 13\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  sort($numbers);\n\
    \  $n = count($numbers);\n  $mean = array_sum($numbers) / $n;\n  $squared_diff\
    \ = 0;\n  foreach ($numbers as $number) {\n    $squared_diff += pow($number -\
    \ $mean,2);\n  }\n  return sqrt($squared_diff / $n);\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6__s10wj.php:25\n\
    Stack trace:\n#0 /tmp/tmp6__s10wj.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6__s10wj.php\
    \ on line 25\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ array_reduce($numbers, function($sum, $value) {\n    $sum += pow((float)($value\
    \ - (float)$sum), 2);\n    return $sum;\n  }, 0) / count($numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwd3ynzac.php:21\n\
    Stack trace:\n#0 /tmp/tmpwd3ynzac.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpwd3ynzac.php\
    \ on line 21\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  sort($numbers);\n\
    \  $mean  = array_sum($numbers) / count($numbers);\n  $diffs = $numbers - $mean;\n\
    \  $abs   = array_sum(abs($diffs));\n  return $abs;\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: array - float\
    \ in /tmp/tmpppzp8v9g.php:12\nStack trace:\n#0 /tmp/tmpppzp8v9g.php(18): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmpppzp8v9g.php(22): candidate(Array)\n#2 /tmp/tmpppzp8v9g.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpppzp8v9g.php on line 12\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean, $2);\n  }\n  return\
    \ sqrt($squared_diff / count($numbers));\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected integer "2", expecting variable or "{" or
    "$" in /tmp/tmp6xzfbyya.php on line 13

    '
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diffs = array_map(function\
    \ ($number) {\n    return $number - $mean;\n  }, $numbers);\n  return array_sum($squared_diffs)\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $mean in /tmp/tmp4cnir8qu.php on line 12\n\
    \nWarning: Undefined variable $mean in /tmp/tmp4cnir8qu.php on line 12\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp4cnir8qu.php:22\nStack trace:\n\
    #0 /tmp/tmp4cnir8qu.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp4cnir8qu.php\
    \ on line 22\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ Ensure numbers is a real array.\n  if (is_object($numbers) && isset($numbers->values))\
    \ {\n    $numbers = $numbers->values;\n  }\n  reset($numbers);\n  // Return mean\
    \ if only one input.\n  if (count($numbers) === 1) {\n    return array_pop($numbers);\n\
    \  }\n  // Return sum of differences if multiple inputs.\n  $sum = array_sum($numbers);\n\
    \  return array_sum((array) array_map('abs', $numbers)) / count($numbers);\n}\n\
    \nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi61rql_r.php:29\n\
    Stack trace:\n#0 /tmp/tmpi61rql_r.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpi61rql_r.php\
    \ on line 29\n"
  timestamp: 1659979384
- exit_code: 0
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $mad_sum = 0;\n  foreach ($numbers\
    \ as $number) {\n    $mad_sum += abs($number - $mean);\n  }\n  return $mad_sum\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = null;\n  $n = 0;\n  foreach ($numbers as $number) {\n    if (is_null($mean))\n\
    \      $mean = $number;\n    else\n      $mean += $number;\n    $n++;\n  }\n \
    \ return $mean / $n;\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcghp__9.php:27\n\
    Stack trace:\n#0 /tmp/tmprcghp__9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmprcghp__9.php\
    \ on line 27\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / (count($numbers) - 1);\n  return array_map(function($x)\
    \ { return abs($x - $mean); }, $numbers);\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $mean in /tmp/tmpx1mzzhnk.php on line 11\n\
    \nWarning: Undefined variable $mean in /tmp/tmpx1mzzhnk.php on line 11\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpx1mzzhnk.php:19\nStack trace:\n\
    #0 /tmp/tmpx1mzzhnk.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpx1mzzhnk.php\
    \ on line 19\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  sort($numbers);\n\
    \  $mad = 0;\n  for ($i = 1; $i < count($numbers); $i++) {\n    $diff =$numbers[$i]\
    \ - $numbers[($i-1)];\n    $mad = $mad + $diff * $diff;\n  }\n  return $mad /\
    \ count($numbers);\n}\n</code>\n<|/ a dscore=2 tags=arrays,php,math |>\n<| c |>\n\
    The first line of the code should be:\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpcv9w9l0o.php
    on line 18

    '
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \  = array_sum($numbers) / count($numbers);\n  $diff = array_map(function ($x)\
    \ { return abs($x - $mean); }, $numbers);\n  return array_sum($diff) / count($diff);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $mean in /tmp/tmppitv39l0.php on line 11\n\
    \nWarning: Undefined variable $mean in /tmp/tmppitv39l0.php on line 11\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmppitv39l0.php:20\nStack trace:\n\
    #0 /tmp/tmppitv39l0.php(25): test()\n#1 {main}\n  thrown in /tmp/tmppitv39l0.php\
    \ on line 20\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ array_sum(abs($numbers)) / count($numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: abs(): Argument #1 ($num) must be of\
    \ type int|float, array given in /tmp/tmpgm_9r29q.php:10\nStack trace:\n#0 /tmp/tmpgm_9r29q.php(10):\
    \ abs(Array)\n#1 /tmp/tmpgm_9r29q.php(14): mean_absolute_deviation(Array)\n#2\
    \ /tmp/tmpgm_9r29q.php(18): candidate(Array)\n#3 /tmp/tmpgm_9r29q.php(23): test()\n\
    #4 {main}\n  thrown in /tmp/tmpgm_9r29q.php on line 10\n"
  timestamp: 1659979384
- exit_code: 0
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    foreach\
    \ ($numbers as $number) {\n        $mean = array_sum($numbers) / count($numbers);\n\
    \        $diff = abs($number - $mean);\n        $mad += $diff;\n    }\n    return\
    \ $mad / count($numbers);\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined variable $mad in /tmp/tmp2onfz9aa.php on line 13


    Warning: Undefined variable $mad in /tmp/tmp2onfz9aa.php on line 13


    Warning: Undefined variable $mad in /tmp/tmp2onfz9aa.php on line 13

    '
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $diff = array_map(function ($x)\
    \ { return abs($x - $mean); }, $numbers);\n  return array_sum($diff) / count($diff);\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $mean in /tmp/tmpml1ksaol.php on line 11\n\
    \nWarning: Undefined variable $mean in /tmp/tmpml1ksaol.php on line 11\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpml1ksaol.php:19\nStack trace:\n\
    #0 /tmp/tmpml1ksaol.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpml1ksaol.php\
    \ on line 19\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $variance = 0;\n    $mad = 0;\n\
    \    foreach ($numbers as $number) {\n        $variance += pow($number - $mean,\
    \ $2);\n    }\n    $variance = pow(sqrt($variance), .5);\n    $mad = $variance;\n\
    \    return $mad;\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected integer "2", expecting variable or "{" or
    "$" in /tmp/tmp0ve7ngi7.php on line 14

    '
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    foreach($numbers\
    \ as $key => $number) {\n        $difference[$key] = $numbers[$key] - $mean[$key];\n\
    \    }\n    return sqrt(array_sum(array_map(function ($number) { return pow($number,\
    \ 2); }, $difference)) / count($difference));\n}\n</code>\n<|/ a tags=php,pearson-correlation,arrays\
    \ |>\n<| c |>\nThis returns `NULL`. It doesn't calculate the MAD. Can you please\
    \ provide working code with `$array1` and `$array2`?\n<|/ c |>\n<| c |>\nWorks\
    \ for me and does calculate the MAD based on the input array and output array.\
    \ Maybe it's an issue with the way you are using it? `$array1 = array(1,2,3,4,5,6,7);\n\
    $array2 = array(1,3,4,5,6,7,8,9,10,11,12);\n\n$output = array();\n$mean1 = $array1[0];\n\
    $mean2 = $array2[0];\nforeach($array1 as $key => $value) {\n    $difference[$key]\
    \ = $array1[$key] - $mean1;\n    $mean1 = $mean2;\n    $mean2 = $value;\n}\n\n\
    $output = array(\n    'correlation_coefficient' => var_dump(pearson($array1, $array2,\
    \ $output)),\n    'median_absolute_deviation' => var_dump(median_absolute_deviation($array1)),\n\
    \    'mean_absolute_deviation' => var_dump(mean_absolute_deviation($array1)),\n\
    );`\n<|/ c |>\n<| a tags=php,pearson-correlation,arrays dscore=1 |>\nYou can get\
    \ the desired results much easier by using array_map() and array_sum():\n<code>\n\
    $array1 = array(1,2,3,4,5,6,7);\n$array2 = array(1,3,4,5,6,7,8,9,10,11,12);\n\n\
    $output = array();\n$mean1 = $array1[0];\n$mean2 = $array2[0];\nforeach($array1\
    \ as $key => $value) {\n    $difference[$key] = $array1[$key] - $mean1;\n    $mean1\
    \ = $mean2;\n    $mean2 = $value;\n}\n\n$output = array(\n    'correlation_coefficient'\
    \ => array_sum($difference)/count($difference),\n    'median_absolute_deviation'\
    \ => array_sum($difference)/sqrt(count($difference)),\n    'mean_absolute_deviation'\
    \ => array_sum($difference)/sqrt(count($difference)),\n);\n\nprint_r($output);\n\
    </code>\nOutput:\n<code>\nArray\n(\n    [correlation_coefficient] => 0.6\n   \
    \ [median_absolute_deviation] => 0.58\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpkecydlrx.php
    on line 15

    '
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = 0;\n    foreach ($numbers as $n) {\n        $mean += abs($n);\n    }\n   \
    \ return ($mean / count($numbers));\n}\n\nfunction candidate(...$args) {\n   \
    \ return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppa15i1yz.php:22\n\
    Stack trace:\n#0 /tmp/tmppa15i1yz.php(27): test()\n#1 {main}\n  thrown in /tmp/tmppa15i1yz.php\
    \ on line 22\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  sort($numbers);\n\
    \  $mean     = $numbers[0];\n  $diffs    = array_diff($numbers, [$mean]);\n  $first_diff\
    \ = array_sum($diffs) / count($diffs);\n  return $first_diff;\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmj8bxw28.php:22\n\
    Stack trace:\n#0 /tmp/tmpmj8bxw28.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpmj8bxw28.php\
    \ on line 22\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $total = 0;\n    foreach ($numbers\
    \ as $number) {\n        $total += abs($number - $mean);\n    }\n\n    return\
    \ $total;\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpihqf12rf.php:24\n\
    Stack trace:\n#0 /tmp/tmpihqf12rf.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpihqf12rf.php\
    \ on line 24\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ array_reduce($numbers, function($sum, $number) {\n    return $sum + (abs($number)\
    \ - $number);\n  }, 0);\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmno63xul.php:19\n\
    Stack trace:\n#0 /tmp/tmpmno63xul.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpmno63xul.php\
    \ on line 19\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  return\
    \ array_reduce($numbers, function($sum, $number) {\n    return $sum + abs($number);\n\
    \  }, 0) / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjbylkbnf.php:20\n\
    Stack trace:\n#0 /tmp/tmpjbylkbnf.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpjbylkbnf.php\
    \ on line 20\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  if\
    \ (!is_array($numbers)) {\n    return false;\n  }\n\n  // Compute the mean.\n\
    \  $mean   = array_sum($numbers) / (count($numbers) - 1);\n  $mad    = 0.0;\n\n\
    \  // Compute the deviation.\n  foreach ($numbers as $val) {\n    $mad = ($mad\
    \ + abs($val - $mean)) / 2;\n  }\n\n  return $mad;\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp29rpwy5i.php:30\n\
    Stack trace:\n#0 /tmp/tmp29rpwy5i.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp29rpwy5i.php\
    \ on line 30\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    sort($numbers);\n\
    \n    // If the array is empty, return 0.0\n    if (count($numbers) == 0) {\n\
    \        return 0.0;\n    }\n\n    $mean = array_sum($numbers) / count($numbers);\n\
    \n    $squared_diffs = array_map(\n        function ($number) {\n            return\
    \ $number - $mean;\n        },\n        $numbers\n    );\n\n    return array_sum($squared_diffs)\
    \ / count($numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nIf this is what\
    \ it takes to calculate the median, then the median is the mean of the set of\
    \ numbers that are closest to the mean. So, this is exactly what my answer does.\
    \ Can you please explain why?\n<|/ c |>\n<| c |>\nAs a mathematician, a median\
    \ is often considered the middle value of a set of data points. For example, a\
    \ median is usually considered the middle value of a set of data points for which\
    \ there are two or more data points with equal values. So, if you have a set that\
    \ looks like: `1, 2, 3, 1, 5, 6, 4`, then a median is `4`. The median of a set\
    \ of numbers is defined by the middle value (the median is the average of the\
    \ two middle values), not necessarily the mean of the middle values (the median\
    \ is still the middle value, but a different one).\n<|/ c |>\n<| c |>\nOkay, but\
    \ your algorithm does not calculate the median of the set of numbers. You said\
    \ it does (sort them by value, then find the mid-point). But it doesn't. That's\
    \ what I'm trying to say. This algorithm calculates the mean of the set of numbers.\
    \ That's not what median means.\n<|/ c |>\n<| c |>\nAh, I see what you mean. I\
    \ read it as the median is the middle value of a set of numbers such that there\
    \ are two or more data points with equal values. This algorithm returns the middle\
    \ value of a set of numbers. If the set of numbers looks like `1, 2, 3, 1, 5,\
    \ 6, 4`, the median is `4`. That is what the median is meant to be, except that\
    \ the median is not necessarily the middle value because there are other values\
    \ with equal values (like `1` and `5` in my example).\n<|/ c |>\n<| c |>\nI still\
    \ think it is the median because if you look at the set of numbers, the median\
    \ is `4`. But your algorithm returns `2`, which is what I think you meant. `2`\
    \ is not the middle value of a set of numbers.\n<|/ c |>\n<| a |>\nIn general,\
    \ what you're looking for is the median of a set of numbers. \nFor this, you first\
    \ need to sort your numbers. You can do that in various ways depending on how\
    \ you want to do it, including bubble-sort, insertion-sort, or \nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmphgcvmsc9.php
    on line 28

    '
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $count\
    \ = count($numbers);\n  $mean  = 0;\n  $sum_squares = 0;\n  foreach ($numbers\
    \ as $n) {\n    $mean  = $mean + $n;\n    $sum_squares = $sum_squares + pow($n\
    \ - $mean,2);\n  }\n  return $sum_squares / ( $count-1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ffzmu9g.php:25\n\
    Stack trace:\n#0 /tmp/tmp7ffzmu9g.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp7ffzmu9g.php\
    \ on line 25\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    return\
    \ mean(abs($numbers - array_mean(array($numbers))))\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "}", expecting ";" in /tmp/tmp2nm89xke.php
    on line 11

    '
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $mad = 0;\n  foreach($numbers as\
    \ $n) {\n    $mad_current = abs($n - $mean);\n    $mad = $mad + $mad_current;\n\
    \  }\n  return $mad/count($numbers);\n}\n</code>\n<|/ a dscore=4 tags=php,arrays\
    \ |>\n<| c |>\nWhy do you use count($numbers) instead of count($numbers)? Isn't\
    \ it the same?\n<|/ c |>\n<| c |>\nThis does not give the correct answer for the\
    \ case where all values are the same\n<|/ c |>\n<| c |>\nthis does give the correct\
    \ answer for the case where all values are the same\n<|/ c |>\n<| c |>\nThe mean\
    \ of all the values should be zero in the case of all values being exactly the\
    \ same\n<|/ c |>\n<| c |>\nThis should work better with array_sum() instead of\
    \ array_sum($numbers) to avoid the array_count_values()\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\nThe best way to calculate the MAD is to use array_map\n<code>\n<?php\n$array\
    \ = array(1.0, 2.0, 3.0, 4.0);\nvar_dump(array_map('abs', $array));\nvar_dump(mad_average($array));\n\
    </code>\nOutputs:\n<code>\narray(4) {\n  [0] =>\n  float(1.0)\n  [1] =>\n  float(2.0)\n\
    \  [2] =>\n  float(3.0)\n  [3] =>\n  float(4.0)\n}\n\nfloat(3.333....)\n</code>\n\
    And the function itself:\n<code>\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpcbq5e64t.php
    on line 18

    '
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) /count($numbers);\n    return array_sum(abs($numbers -\
    \ $mean)) / count($numbers);\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: array - float\
    \ in /tmp/tmp0r6t54bz.php:11\nStack trace:\n#0 /tmp/tmp0r6t54bz.php(14): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmp0r6t54bz.php(18): candidate(Array)\n#2 /tmp/tmp0r6t54bz.php(23): test()\n\
    #3 {main}\n  thrown in /tmp/tmp0r6t54bz.php on line 11\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  sort($numbers);\n\
    \  $n = count($numbers);\n  if ($n < 2) {\n    return 0.0;\n  }\n  $avg = 0.0;\n\
    \  $sum_of_squares = 0;\n  for ($i = 0; $i < $n; ++$i) {\n    $diff =  $numbers[$i]\
    \ - $avg;\n    $sum_of_squares += pow($diff, 2);\n    $avg = $sum_of_squares /\
    \ $n;\n  }\n  return sqrt($sum_of_squares / ($n - 1));\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppvx56s0p.php:30\n\
    Stack trace:\n#0 /tmp/tmppvx56s0p.php(35): test()\n#1 {main}\n  thrown in /tmp/tmppvx56s0p.php\
    \ on line 30\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    foreach\
    \ ($numbers as $number) {\n        $mean = array_sum($numbers) / count($numbers);\n\
    \        foreach ($numbers as $value) {\n            if ($value != $mean)\n  \
    \              echo \"$value - $mean\\n\";\n        }\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1 - 1.5\n2 - 1.5\n1 - 1.5\n2 - 1.5\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp_844ndw1.php:23\nStack trace:\n#0 /tmp/tmp_844ndw1.php(28):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_844ndw1.php on line 23\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \  = array_sum($numbers) / count($numbers);\n  $delta = array_map(function($x)\
    \ { return $x - $mean; }, $numbers);\n  return array_sum($delta) / count($delta);\n\
    }\n\n/**\n * Calculate geometric mean\n *\n * @param array $numbers the numbers\
    \ to calculate mean for\n *\n * @return float\n */\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $mean in /tmp/tmpye8rcufh.php on line 11\n\
    \nWarning: Undefined variable $mean in /tmp/tmpye8rcufh.php on line 11\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpye8rcufh.php:27\nStack trace:\n\
    #0 /tmp/tmpye8rcufh.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpye8rcufh.php\
    \ on line 27\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  //\
    \ Calculate standard deviation by squaring all elements\n  $sumsq = array_sum(array_map(function\
    \ ($number) { return pow($number, 2); }, $numbers));\n  return sqrt($sumsq / count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8a5mma84.php:20\n\
    Stack trace:\n#0 /tmp/tmp8a5mma84.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp8a5mma84.php\
    \ on line 20\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    //\
    \ create an array of all points\n    $points = array_map(function($point) {\n\
    \        return $point;\n    }, $numbers);\n    $numbers = $points;\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return array_reduce($numbers,\
    \ function($result, $number) {\n        return $result + ($number - $mean);\n\
    \    });\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\nI was just looking for a way\
    \ to calculate MAD in PHP and came up with this:\n<code>\n/**\n * Calculate the\
    \ mean absolute deviation from a data set\n *\n * $data - array - array of numbers\n\
    \ * $mean - float - mean of given data set\n * string - md of given data set\n\
    \ */\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpxub6whg7.php
    on line 20

    '
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $diffs = array_map(function ($x)\
    \ { return $x - $mean; }, $numbers);\n  $mad = array_reduce($diffs, function ($sum,\
    \ $diff) { return $sum + abs($diff); }, 0);\n  return $mad;\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $mean in /tmp/tmpn35i3vxf.php on line 11\n\
    \nWarning: Undefined variable $mean in /tmp/tmpn35i3vxf.php on line 11\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpn35i3vxf.php:21\nStack trace:\n\
    #0 /tmp/tmpn35i3vxf.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpn35i3vxf.php\
    \ on line 21\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = __array_sum($numbers)/count($numbers);\n  $deviations = array_map(function\
    \ ($val) use($mean) {\n    return abs($val - $mean);\n  }, $numbers);\n  return\
    \ array_sum($deviations) / count($numbers);\n}\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function __array_sum()\
    \ in /tmp/tmp1jzn369x.php:10\nStack trace:\n#0 /tmp/tmp1jzn369x.php(17): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmp1jzn369x.php(21): candidate(Array)\n#2 /tmp/tmp1jzn369x.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1jzn369x.php on line 10\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = mean(array($numbers));\n  return abs(array_reduce($numbers, function($sum,\
    \ $value) use ($mean) {\n    return $sum + abs($value - $mean);\n  }, 0) / count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean() in /tmp/tmpcdp5mtkk.php:10\n\
    Stack trace:\n#0 /tmp/tmpcdp5mtkk.php(17): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpcdp5mtkk.php(21): candidate(Array)\n#2 /tmp/tmpcdp5mtkk.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpcdp5mtkk.php on line 10\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = $numbers->mean();\n  return $mean->abs();\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to a member function mean() on array\
    \ in /tmp/tmpz43ijrrc.php:10\nStack trace:\n#0 /tmp/tmpz43ijrrc.php(15): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmpz43ijrrc.php(19): candidate(Array)\n#2 /tmp/tmpz43ijrrc.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmpz43ijrrc.php on line 10\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  sort($numbers);\n\
    \  $mean = array_pop($numbers);\n  return abs($mean) - mean_of_numbers($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mean_of_numbers()\
    \ in /tmp/tmpgwh0_bc9.php:12\nStack trace:\n#0 /tmp/tmpgwh0_bc9.php(16): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmpgwh0_bc9.php(20): candidate(Array)\n#2 /tmp/tmpgwh0_bc9.php(25): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgwh0_bc9.php on line 12\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  if\
    \ (empty($numbers)) {\n    throw new LogicException(\"Input must not be empty\"\
    );\n  }\n  $num_elements = count($numbers);\n  $mean = 0;\n  foreach ($numbers\
    \ as $number) {\n    $mean += $number;\n  }\n  return $mean / $num_elements;\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjbunvwgy.php:26\n\
    Stack trace:\n#0 /tmp/tmpjbunvwgy.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpjbunvwgy.php\
    \ on line 26\n"
  timestamp: 1659979384
- exit_code: 255
  program: "<?php\n// For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0,\
    \ 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    //\
    \ Sort data into ascending order\n    sort($numbers);\n\n    // Calculate mean\
    \ and standard deviation\n    $mean    = array_sum($numbers) / count($numbers);\n\
    \    $sigma   = array_sum(array_diff($numbers, $mean)^2);\n\n    // Return mean\
    \ absolute deviation\n    return (float) sqrt($sigma / count($numbers));\n}\n\n\
    function candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_diff(): Argument #2 must be of\
    \ type array, float given in /tmp/tmpsp5wtjuv.php:15\nStack trace:\n#0 /tmp/tmpsp5wtjuv.php(15):\
    \ array_diff(Array, 1.5)\n#1 /tmp/tmpsp5wtjuv.php(22): mean_absolute_deviation(Array)\n\
    #2 /tmp/tmpsp5wtjuv.php(26): candidate(Array)\n#3 /tmp/tmpsp5wtjuv.php(31): test()\n\
    #4 {main}\n  thrown in /tmp/tmpsp5wtjuv.php on line 15\n"
  timestamp: 1659979384
