name: HumanEval_163_generate_integers
language: php
prompt: "<?php\n// Given two positive integers a and b, return the even digits between\
  \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
  \ 8)\n// array(2, 4, 6, 8)\n// >>> generate_integers(8, 2)\n// array(2, 4, 6, 8)\n\
  // >>> generate_integers(10, 14)\n// array()\nfunction generate_integers($a, $b)\
  \ {\n"
tests: "function candidate(...$args) {\n    return generate_integers(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(2, 10) !== array(2, 4, 6, 8)) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== array(2,\
  \ 4, 6, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(132, 2)\
  \ !== array(2, 4, 6, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
  \ 89) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $result = array();\n  $temp = $a;\n  while (true) {\n    $result[array_key_exists($temp,\
    \ $result) ? $temp++ : $temp] = $b;\n    if ($temp >= $b) {\n      break;\n  \
    \  }\n  }\n  return $result;\n}\n", "  if ($a >= $b) {\n    return array();\n\
    \  }\n\n  $odds = array();\n  $evens = array();\n  while ($a < $b) {\n    if ($a\
    \ & 1) {\n      $odds[] = $a++;\n    } else {\n      $evens[] = $a++;\n    }\n\
    \  }\n\n  return array_merge($evens, $odds);\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=algorithm,php,arrays |>\nThis works in O(n) time (O(n2) in worst-case)\
    \ and O(1) space.\n<code>\n<?php\n$a = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\
    $b = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n\n$result = array();\n$count\
    \ = count($a) - 1;\n\nfor($i=0; $i < $count; $i++)\n{\n    if ($b[$i] < $a[$i]\
    \ + 1) {\n        $result[] = $a[$i];\n    }\n}\n\nprint_r($result);", "\t$i =\
    \ $a = $b;\n\t$c = array();\n\twhile ($a > 0) {\n\t\t$c[] = $a%10;\n\t\t$a = floor($a/10);\n\
    \t}\n\twhile ($b > 0) {\n\t\t$c[] = $b%10;\n\t\t$b = floor($b/10);\n\t}\n\t$c\
    \ = array_reverse($c);\n\t$c = array_merge($c, array(0=>''));\n\tfor ($i=0; $i<count($c);\
    \ $i++) {\n\t\t$c[$i] = $c[$i].'0';\n\t}\n\treturn $c;\n}\n\n", "  if ($a > $b)\
    \ return array();\n  if ($a < 1) return array();\n  $evens = array();\n  while\
    \ ($a <= $b) {\n    $evens[] = $a;\n    $a++;\n  }\n  return $evens;\n}\n", " \
    \ $numbers = array();\n  for ($i = $a; $i <= $b; $i++) {\n    $numbers[] = $i;\n\
    \  }\n  return $numbers;\n}\n", "  $arr = [];\n  if ($a < $b) {\n    for ($i =\
    \ $a; $i < $b; $i++) {\n      $arr[] = $i;\n    }\n  } else {\n    for ($i = $b;\
    \ $i >= $a; $i--) {\n      $arr[] = $i;\n    }\n  }\n  return $arr;\n}\n</code>\n\
    <|/ a dscore=3 tags=php,arrays |>\n<| c |>\nthanks dear. i tried but its not giving\
    \ the result as i expected, please have a look on my edited code. thank you.\n\
    <|/ c |>\n<| c |>\n: I've posted a more detailed explanation about my solution\
    \ in the answer. Hope that helps.\n<|/ c |>\n<| c |>\nthank you so much. i got\
    \ it now.\n<|/ c |>\n<| a tags=php,arrays |>\nThe problem is with your for-loops:\n\
    <code>\nfor($i = 1; $i <= $d; $i++) {\n  for($j = 1; $j <= $d; $j++) {\n    $newarray[]\
    \ = $i;\n  }\n}\n</code>\nYou're incrementing $i each time, but then you're incrementing\
    \ it again with your second loop by one each time. So you just keep getting one\
    \ more value in the resulting array.\nTry changing it to:\n<code>\nfor($i = 1;\
    \ $i <= $d; $i++) {\n  for($j = 1; $j <= $d; $j++) {\n    $newarray[] = $i;\n\
    \  }\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=0 |>\nTry with below code: \n\
    <code>", "  $result = [];\n  for ($i = 0; $i < $a; $i++) {\n    for ($j = $i +\
    \ 1; $j < $b; $j++) {\n      $result[] = $j;\n    }\n  }\n  return $result;\n\
    }\n", "  $a = $a + 1;\n  $b = $b + 1;\n\n  $even = 0;\n  for ($i = $a; $i <= $b;\
    \ $i++) {\n    $even = ($even + $i) % 10;\n  }\n\n  return range($a, $b);\n}\n",
  "  $array = array();\n\n  for ($i = $a; $i <= $b; $i++) {\n    if ($i % 2 == 0)\
    \ {\n      $array[] = $i;\n    }\n  }\n\n  return $array;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nPlease include your code in the question by [edit]ing it rather\
    \ than posting them as a link\n<|/ c |>\n<| a |>\n<code>\n<?php", "    $min =\
    \ min($a, $b);\n    $max = max($a, $b);\n\n    // If the difference between the\
    \ two numbers is less than 10, then\n    // the difference is zero or negative.\
    \ Since 0 is less than all the\n    // other numbers, this means that b is in\
    \ the right range.\n    if ($min - $max <= 10) {\n        $range = $max - $min;\n\
    \        return range($min, $max + $range, 1);\n    }\n\n    return [];\n}", " \
    \ if ($a > $b) {\n    $min = $a;\n    $max = $b;\n  } else {\n    $min = $b;\n\
    \    $max = $a;\n  }\n\n  $ret = [];\n  for ($i = $min; $i <= $max; $i++) {\n\
    \    $ret[] = (string) $i;\n  }\n\n  return $ret;\n}\n</code>\n<|/ a |>\n<| c\
    \ |>\nCan you explain the logic behind this? `generate_integers(0, 5)` returns\
    \ an array of five empty strings (which is probably unintended). Also, how do\
    \ we get to where `generate_integers(1, 6)` returns an array of six integers from\
    \ 1 to 6? Thanks\n<|/ c |>\n<| c |>\nThank you, I have updated my answer to include\
    \ this explanation. The reason why there are empty strings in `generate_integers(0,\
    \ 5)` is that PHP is counting them as a `string`. It is not actually a string,\
    \ but it's an empty string that PHP considers empty. Try this: `$x = ''; echo\
    \ $x;`. It will output an empty string. Now try this: `$x = null; echo $x;`. It\
    \ will output `null`.\n<|/ c |>\n<| c |>\nI've updated my answer to include some\
    \ code examples, hope this clears things up!\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. However I've decided to use your first answer, and modify it a little\
    \ to suit my needs. But thank you very much for your answer :)\n<|/ c |>\n<| a\
    \ |>\nI wrote my own answer based on your answer. I've modified it to suit my\
    \ needs.\n<code>\n<?php", "  $integers = array();\n  $integer = 1;\n  for ($i\
    \ = $a; $i <= $b; $i++) {\n    if ($i % 2 == 0) {\n      $integers[] = $integer;\n\
    \    }\n    $integer *= 10;\n  }\n  return $integers;\n}\n", "  if ($a == $b)\
    \ return array();\n\n  $ans = array();\n  for ($i = 0; $i < $a + $b; $i++) {\n\
    \    $ans[] = $i;\n  }\n\n  if ($ans[count($ans) - 1] < $b) {\n    $ans[] = $b;\n\
    \  }\n\n  return $ans;\n}\n", "    $range = range($a, $b);\n    $integers = array();\n\
    \n    foreach ($range as $number) {\n        if ($number % 2 === 0) {\n      \
    \      $integers[] = $number;\n        }\n    }\n\n    return $integers;\n}\n",
  "  // Return an empty array if the numbers are not in the correct order\n  if ($a\
    \ > $b) {\n    return array();\n  }\n  $range = $b-$a+1;\n  $digits = range($a,\
    \ $b);\n  return array_intersect_key($digits, array_flip(array_fill(0, $range,\
    \ '2')));\n}\n", "  $start = 10 ** ($a - 1); // 10 to the power $a - 1 of the\
    \ lowest integer\n  $end = 10 ** ($b - 1); // 10 to the power $b - 1 of the highest\
    \ integer\n  $ints = array();\n  foreach (range($start, $end) as $int) {\n   \
    \ $ints[] = $int % 10;\n  }\n  return $ints;\n}\n", "  if ($a > $b) {\n    list($a,\
    \ $b) = array($b, $a);\n  }\n\n  $interval = array();\n  for ($i = $a; $i <= $b;\
    \ $i++) {\n    $interval[] = (int) $i;\n  }\n  sort($interval);\n  return $interval;\n\
    }\n", "    $range = range($a, $b);\n    sort($range, SORT_NUMERIC);\n    $integers\
    \ = [];\n    foreach ($range as $n) {\n        $integers[] = $n;\n    }\n    return\
    \ $integers;\n}\n", "    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n\
    \        $b = $temp;\n    }\n\n    $integers = array();\n\n    if ($a < 10) {\n\
    \        $integers[] = $a;\n    }\n\n    if ($b < 10) {\n        $integers[] =\
    \ $b;\n    }\n\n    if ($b < $a) {\n        do {\n            if ($b < 10) {\n\
    \                $integers[] = $b;\n            }\n            $b = $b - 10;\n\
    \        } while ($b > 0);\n    }\n\n    return $integers;\n}\n", "    $result\
    \ = [];\n    while ($a && $b) {\n        if ($a % 2 == 0 && $b % 2 == 0) {\n \
    \           $result[] = $a / 2 * 2 + $b / 2;\n        }\n        $a = $a / 2;\n\
    \        $b = $b / 2;\n    }\n    return $result;\n}\n", "\t$x = array();\n\t\
    for ($a = $a; $a <= $b; $a++) {\n\t\t$n = $a;\n\t\t$carry = 0;\n\t\twhile ($n\
    \ > 0) {\n\t\t\t$x = array_merge($x, str_split($n % 10));\n\t\t\t$n = floor($n\
    \ / 10);\n\t\t\t$carry = ($carry == 0) ? 0 : $carry + 1;\n\t\t}\n\t\tif ($carry\
    \ > 0) {\n\t\t\t$x = array_merge($x, str_split($carry));\n\t\t}\n\t\tsort($x);\n\
    \t\t$result = array();\n\t\tfor ($i = 0; $i < count($x); $i++) {\n\t\t\tif ($x[$i]\
    \ > 0) {\n\t\t\t\t$result[] = $x[$i];\n\t\t\t}\n\t\t}\n\t\tsort($result);\n\t\t\
    $x = $result;\n\t}\n\treturn $x;\n}\n", "  $integers = array();\n  $max_number\
    \ = $a;\n  $minus_b = $a - $b;\n  $min_number = $a - $b - 1;\n  for ($x = $a;\
    \ $x <= $b; $x++) {\n    if ($x == 0) {\n      break;\n    }\n    if ($x <= $max_number)\
    \ {\n      $min_number--;\n    }\n    if ($x >= $min_number) {\n      $integers[]\
    \ = $x;\n      $max_number++;\n    }\n  }\n  return $integers;\n}\n", "  $arr\
    \ = array();\n  $arr[] = $a;\n  for ($b = $a + 1; $b <= $b + $b; $b++) {\n   \
    \ $arr[] = $b;\n  }\n  $i = $a;\n  while (in_array($i, $arr)) {\n    $i = ($i\
    \ + 1) % $b + 1;\n  }\n  return $arr;\n}\n\n/**\n * A function that determines\
    \ the number of items to display when paginating a\n * set of items.\n *\n * @param\
    \ int $total_items\n *   The total number of items to paginate.\n * @param int\
    \ $page_size\n *   The maximum number of items to display per page.\n * @param\
    \ int $current_page\n *   The page number currently being viewed.\n * @return\
    \ array|false\n *   An array of items to display, or false if none are available\
    \ to display.\n */", "  $ans = array();\n  if ($a < 0 || $b < 0) {\n    return\
    \ array();\n  }\n  for ($c = $a; $c < $b; $c++) {\n    if ($c % 2 === 0) {\n \
    \     $ans[] = $c;\n    }\n  }\n  return $ans;\n}\n", "    if ($a < 10) {\n  \
    \      $a = \"0\" . $a;\n    }\n    if ($b < 10) {\n        $b = \"0\" . $b;\n\
    \    }\n    $evens = array();\n    for ($c = $a; $c < $b; $c++) {\n        $evens[]\
    \ = $c;\n    }\n    return $evens;\n}\n\n$results = array();\n", "  $evens = $evens\
    \ = array();\n  for ($i = $a; $i <= $b; $i++) {\n    $num = (int) $i . 1;\n  \
    \  $evens[] = $num % 2 == 0 ? $num : $num - 1;\n  }\n  return array_reverse($evens);\n\
    }\n", "  if ($a > $b) {\n    $a = $b;\n    $b = $a;\n  }\n  return range($a, $b\
    \ - 1, 2);\n}\n", "    $r = array();\n    while ($a >= $b) {\n        $r[] = $a\
    \ % 10;\n        $a = floor($a / 10);\n    }\n    return $r;\n}\n", "  $c = array();\n\
    \  while ($a > 0) {\n    $c[] = $a;\n    $a = ($a % 10) - 1;\n  }\n  while ($b\
    \ > 0) {\n    $c[] = $b;\n    $b = ($b > 9) ? $b - 10 : ($b > 0) ? $b : 0;\n \
    \ }\n  asort($c);\n  return $c;\n}\n", "\t$r = array();\n\tfor (; $a <= $b; $a++,\
    \ $b--) {\n\t\tif ($a % 2 == 1) {\n\t\t\t$r[] = $a;\n\t\t}\n\t}\n\treturn $r;\n\
    }\n", "  if ($a < $b) {\n    $a = $b;\n    $b = $a;\n  }\n  if ($a > $b) return\
    \ array();\n  $arr = array();\n  for ($i = $a; $i <= $b; $i++) {\n    $arr[] =\
    \ $i;\n  }\n  return $arr;\n}\n", "\t$result = array();\n\tif ($a > $b) {\n\t\t\
    $tmp = $a;\n\t\t$a = $b;\n\t\t$b = $tmp;\n\t}\n\twhile ($a <= $b) {\n\t\t$result[]\
    \ = $a;\n\t\t$a++;\n\t}\n\treturn $result;\n}\n\n/**\n * Generates a random integer\
    \ in specified range.\n *\n * @param int $min\n * @param int $max\n * @return\
    \ int\n */", "    $a = (int) $a;\n    $b = (int) $b;\n\n    if ($a > $b) {\n \
    \       list($a, $b) = [($b), $a];\n    }\n\n    if ($a > 9) {\n        return\
    \ [];\n    }\n\n    if ($b > 9) {\n        return [];\n    }\n\n    $result =\
    \ [];\n    for ($i = $a; $i <= $b; ++$i) {\n        $result[] = $i;\n    }\n\n\
    \    return $result;\n}\n", "    $min = min($a, $b);\n    $max = max($a, $b);\n\
    \    $digits = range($min, $max);\n    sort($digits);\n    return array_slice($digits,\
    \ 0, $a < $b ? $a - $b + 1 : $b - $a + 1);\n}\n\n$result = generate_integers($_GET['first'],\
    \ $_GET['second']);\n$result = array_map('intval', $result);\necho json_encode($result);\n",
  "  $digits = array();\n  while ($a >= $b) {\n    $a -= $b;\n    $digits[] = $a;\n\
    \  }\n  return $digits;\n}\n\n/**\n * Helper to parse an argument into an array\
    \ of integers\n *\n * If the argument is an integer, it will be returned as-is;\
    \ if it is a string,\n * it can be parsed into an array.\n *\n * @param mixed\
    \ $arg\n * @return array\n * @author Matthew Weier O'Phinney\n */", "    $evens\
    \ = array();\n    $remainder = $a % $b;\n    while ($remainder !== 0) {\n    \
    \    $remainder -= $b;\n        $evens[] = $b;\n    }\n    array_push($evens,\
    \ $a);\n    return $evens;\n}\n", "  if ($a < 0 || $b < 0) {\n    return array();\n\
    \  }\n\n  if ($a == $b) { return array(); }\n\n  if ($a == 0) { $b = $b + 1; $a\
    \ = 0; }\n\n  $res = array();\n\n  while ($a <= $b) {\n    if ($a % 2 == 0) {\n\
    \      array_push($res, $a++);\n    } else {\n      array_push($res, $a--);\n\
    \    }\n  }\n\n  return $res;\n}\n", "    $ret = [];\n    $min = $a;\n    $max\
    \ = $b;\n    for ($n = $a; $n < $max; $n++) {\n        $t = $n % 10;\n       \
    \ if ($t >= $b) {\n            break;\n        }\n        $ret[] = $t;\n    }\n\
    \    $min = $b;\n    for ($n = $b; $n > $a; $n--) {\n        $t = $n % 10;\n \
    \       if ($t <= $min) {\n            break;\n        }\n        $ret[] = $t;\n\
    \    }\n    return $ret;\n}\n", "  if ($a < $b) return array();\n  if ($a > $b)\
    \ return array();\n\n  $result = array();\n\n  for ($i = $a; $i <= $b; ++$i) {\n\
    \    if ($i % 2 == 0) $result[] = $i;\n  }\n\n  return $result;\n}\n", "    $r\
    \ = array();\n    if ($a > $b) {\n        return array();\n    }\n    for ($i\
    \ = $a; $i <= $b; $i++) {\n        if (is_integer($i) && $i % 2 === 0) {\n   \
    \         $r[] = $i;\n        }\n    }\n    sort($r);\n    return $r;\n}\n\n/**\n\
    \ * Given a string, returns the string with all non-alphabetic characters\n *\
    \ removed.\n *\n * Example usage:\n * >>> remove_non_alphabetic(\" !@#%^&*()'\"\
    );\n * \"!@#%^&*()'\"\n */", "    if ($a >= $b) {\n        return array();\n \
    \   }\n\n    $n = $a;\n    $digits = array();\n\n    while ($n) {\n        $digits[]\
    \ = $n % 10;\n        $n /= 10;\n    }\n\n    return array_merge(\n        array_slice($digits,\
    \ 0, $b - $a + 1),\n        array_slice($digits, 0, $a)\n    );\n}\n", "  $result\
    \ = [];\n  for ($i = $a; $i <= $b; $i++) {\n    $result[] = $i;\n  }\n  return\
    \ $result;\n}\n", "  $c = array();\n  if ($a < $b) $c = array_merge($c, range($b,\
    \ $a));\n  else $c = range($a, $b);\n  $c = array_merge($c, range($a % 10, $a\
    \ % 10 + 2));\n  $c = array_merge($c, range(10 - $a % 10, 10 - $a % 10 + 2));\n\
    \  return $c;\n}\n</code>\n<|/ a |>\n<| a |>\nThe solution from is excellent but\
    \ you can do it a bit more efficiently with one line of PHP using the range function.\n\
    <code>\n<?php", "    if ($a > $b) {\n        $a = $b - $a;\n    }\n    $ret =\
    \ [];\n    while ($a > 0) {\n        $ret[] = $a % 10;\n        $a /= 10;\n  \
    \  }\n    while ($b > 0) {\n        $ret[] = $b % 10;\n        $b /= 10;\n   \
    \ }\n    if (count($ret) == 0) {\n        return [];\n    }\n    sort($ret);\n\
    \    return array_slice($ret, 0, $a);\n}\n</code>\n<|/ a |>\n<| c |>\nVery clever\
    \ solution! The only thing I can think of is that it might not be an improvement\
    \ on the other solutions, since it uses less memory. Also, I think I tested it\
    \ on a big range of numbers (I used 100 to 500), and it took a few seconds to\
    \ complete. Whereas the other solutions required a few minutes.\n<|/ c |>\n<|\
    \ c |>\nI agree with you that yours seems much more efficient, but I thought the\
    \ other solutions could have been more efficient.\n<|/ c |>\n<| c |>\n, you're\
    \ right, it's indeed more efficient. I had done this on small range too. I'll\
    \ edit the solution to reflect this.\n<|/ c |>\n<| c |>\nActually, I made a mistake\
    \ in my last comment, and it turns out that my solution was actually slower than\
    \ the other solutions. The other solutions take only a few seconds to complete,\
    \ and this one takes several minutes. In other words, this solution is slower\
    \ than the other ones, even though they are both better than the ones I gave.\n\
    <|/ c |>\n<| c |>\nI agree that this solution is slower than the others since\
    \ it requires multiple passes over the data. Still, it's very clever and it might\
    \ be useful in other situations, too.\n<|/ c |>\n<| a dscore=1 |>\nHere is my\
    \ solution:\n<code>\n<?php\n\n$a = '123456789';\n$b = '22345678';\n\n$c = substr($a,\
    \ 0, max(strlen($a),strlen($b)));\n\n$c = str_split($c, 1);\n\n$ret = [];\n\n\
    foreach($c as $v) {\n    $m = min(strlen($a), strlen($b));\n    for ($i = 0; $i\
    \ < $m; $i++) {\n        if ($a[$i]==$v && $b[$i]==$v) {\n            $ret[] =\
    \ $a[$i];\n            break;\n        }\n    }\n}\n\necho implode($ret);\n</code>\n\
    <|/ a tags=php,string,substring |>\n<| c |>", "  $result = [];\n  if ($a > $b)\
    \ {\n    $temp = $a;\n    $a = $b;\n    $b = $temp;\n  }\n  while ($a >= 0) {\n\
    \    $result[] = $a;\n    $a--;\n  }\n  while ($b >= 0) {\n    $result[] = $b;\n\
    \    $b--;\n  }\n  return $result;\n}\n", "    $result = [];\n    do {\n     \
    \   $result[] = ($a + 1) % $b;\n        $a = (($a + $b) / 2) % $b;\n    } while\
    \ ($a > 0);\n    return array_reverse($result);\n}\n\n/**\n * Return the largest\
    \ prime number less than or equal to\n * $number. Used primarily for testing.\n\
    \ */", "    if ($a == $b) return array();\n    $array = array();\n    $digit =\
    \ $a % 10;\n    while ($a / 10 != $b) {\n        $array[] = $digit;\n        $a\
    \ = $a * 10 + $digit;\n        $digit = $a % 10;\n    }\n    if ($a / 10 != $b)\
    \ {\n        $array[] = $digit;\n    }\n    return $array;\n}\n", "    $even =\
    \ array();\n    for ($i = $a; $i <= $b; ++$i) {\n        if ($i % 2 === 0) {\n\
    \            $even[] = $i;\n        }\n    }\n    return $even;\n}\n\n/**\n *\
    \ Creates array with all possible combinations of a set of arrays. Each combination\n\
    \ * is represented as an array of elements.\n *\n * @param $arrays\n * @return\
    \ array\n */", "  $array = $a + 1; // The empty array will contain the result.\n\
    \  $k = $a;\n  while ($k <= $b) {\n    $array[] = $k++;\n  }\n  return array_reverse($array);\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is a great idea but i just realized\
    \ that im not allowed to use any sorting functions. My professor has always been\
    \ really strict on what he says about using sorting functions. But this is really\
    \ helpful and i appreciate it.\n<|/ c |>\n<| c |>\nI've updated my answer with\
    \ a solution that uses no sorting functions.\n<|/ c |>\n<| a |>\nI didn't bother\
    \ to create a PHP function for the task, but here's a Ruby one-liner solution\
    \ using sort!\n<code>", "  $r = array();\n\n  for ($i = 0; $i < $a + $b; $i++)\
    \ {\n    if ($i < $a) {\n      $r[] = $i;\n    } elseif ($i >= $a && $i < $b)\
    \ {\n      $r[] = ($i - $a) % 10;\n    }\n  }\n\n  return $r;\n}\n", "    $a =\
    \ abs($a);\n    $b = abs($b);\n    $result = array();\n    while ($a > 0 || $b\
    \ > 0) {\n        if ($a > $b) { $a -= $b; } else { $b -= $a; }\n        $result[]\
    \ = $a > 0 ? $a : $b;\n    }\n    return $result;\n}\n", "  if ($a < 0 || $b <\
    \ 0) {\n    return array();\n  }\n  $start = $a;\n  $end = $b;\n  $result = 0;\n\
    \  for ($i = $a; $i <= $b; ++$i) {\n    $result |= ($i & 1) << $i;\n  }\n  return\
    \ range($start, $end, $result);\n}\n</code>\n<|/ a |>\n<| c |>\nThank you very\
    \ much for showing me this very elegant solution.\n<|/ c |>\n<| c |>\nThis algorithm\
    \ is O(n^2), which is O(n) in the best case.\n<|/ c |>\n<| a |>\nThis works too.\n\
    <code>", "\t$start = min($a, $b);\n\t$finish = max($a, $b);\n\n\t$even = array();\n\
    \tfor ($i = $start; $i <= $finish; $i++) {\n\t\tif ($i % 2 === 0) {\n\t\t\t$even[]\
    \ = $i;\n\t\t}\n\t}\n\n\treturn $even;\n}\n", "  return range($a, $b, 2);\n}\n\
    $evens = generate_integers(0, 13);\nsort($evens);\n$evens_count = count($evens);",
  "  $a = abs($a);\n  $b = abs($b);\n  if ($a < $b) list($a, $b) = [$b, $a]; // Descending\
    \ order\n  $result = [];\n  if ($a < 10) {\n    // 10\n    for ($i = 2; $i <=\
    \ $a; $i++) {\n      if ($i % $a == 0) {\n        $result[] = $i;\n      }\n \
    \   }\n    if ($b > 0) {\n      // $a >= 10\n      for ($i = $a; $i < $b; $i++)\
    \ {\n        if ($i % $a == 0) {\n          $result[] = $i;\n        }\n     \
    \ }\n    }\n  } else {\n    // $b >= 10\n    for ($i = 1; $i <= $b; $i++) {\n\
    \      if ($i % $b == 0) {\n        $result[] = $i;\n      }\n    }\n    if ($a\
    \ > 0) {\n      // $b >= 10\n      for ($i = $b; $i < $a; $i++) {\n        if\
    \ ($i % $b == 0) {\n          $result[] = $i;\n        }\n      }\n    }\n  }\n\
    \  return $result;\n}\n", "    $evens = array();\n    $a = abs($a);\n    $b =\
    \ abs($b);\n    $max_a = $a * pow(2, 30);\n    $max_b = $b * pow(2, 30);\n   \
    \ while ($a <= $max_a && $b <= $max_b) {\n        if ($a % 2 == 0) {\n       \
    \     $evens[] = $a / 2;\n        }\n        $a = $a + 1;\n        $b = $b;\n\
    \    }\n    while ($a >= $b) {\n        if ($a % 2 != 0) {\n            $evens[]\
    \ = $a / 2;\n        }\n        $a = $a - 1;\n        $b = $b;\n    }\n    return\
    \ $evens;\n}\n", "  $result = array();\n  for ($x = $a; $x <= $b; $x++) {\n  \
    \  while ($x % 10 == 0) {\n      $result[] = $x % 10;\n      $x /= 10;\n    }\n\
    \  }\n  return $result;\n}\n", "    $evens = array();\n    if ($a >= $b) {\n \
    \       return array();\n    }\n    for ($i = $a; $i <= $b; ++$i) {\n        $evens[]\
    \ = $i;\n    }\n    sort($evens);\n    return $evens;\n}\n", "  $evens = array();\n\
    \n  for ($i = $a; $i <= $b; ++$i) {\n    if ($i % 2 == 0) {\n      $evens[] =\
    \ $i;\n    }\n  }\n\n  return $evens;\n}\n\n/**\n * Given two positive integers\
    \ a and b, return the odd digits between a\n * and b, in ascending order.\n *\
    \ For example:\n * >>> generate_odds(2, 8)\n * array(2, 4, 8, 10)\n * >>> generate_odds(8,\
    \ 2)\n * array(2, 4, 8, 10)\n * >>> generate_odds(10, 14)\n * array(8, 10, 12,\
    \ 14, 16, 18, 20)\n */", "  // First check for a possible overflow\n  if ($a >=\
    \ PHP_INT_MAX / 2 || $b >= PHP_INT_MAX / 2) {\n    trigger_error(\"No integer\
    \ will fit into the given range\", E_USER_ERROR);\n    return array();\n  }\n\
    \  $evens = array();\n  $i = $a * $b;\n  do {\n    $x = $i / $b;\n    $i = $i\
    \ % $b;\n    if ($x % 2 == 0) {\n      $evens[] = $x;\n    }\n  } while (--$i\
    \ > 0);\n  sort($evens);\n  return $evens;\n}\n</code>\n<|/ a tags=php dscore=4\
    \ |>\n<| c |>\n+1 I like this solution because it avoids having to write your\
    \ own code when you can just rely on a function that already exists.\n<|/ c |>\n\
    <| c |>\nI'm going to go ahead and upvote this since it's a great solution.  I'm\
    \ going to leave this open for a day or two to see if I can accept an answer.\
    \  Thanks again!\n<|/ c |>\n<| c |>\nI ended up using your method as the implementation\
    \ for my own function.  My implementation is slightly different than the one posted\
    \ here.  Thank you for your help!\n<|/ c |>\n<| c |>\nThis solution is nice but\
    \ a little more complicated than the other answer. +1 from my side.\n<|/ c |>\n\
    <| c |>\nThis is definitely the best answer. My answer was just an alternative\
    \ way to get the desired result. Yours is definitely better :)\n<|/ c |>\n<| a\
    \ |>\nThe solution provided by is excellent and very straight forward.  I wanted\
    \ to share my solution to the problem of generating a list of random integers\
    \ in a given range.  This code would go in a function.  I started writing this\
    \ solution in PHP 5.3, then moved on to PHP 5.4, then to 5.5.\nHere are some example\
    \ outputs:\n<code>\n$random_integers = generate_integers(10, 14);\nprint_r($random_integers);\n\
    </code>\nOutput:\n<code>\nArray ( [0] => 10 [1] => 12 [2] => 13 [3] => 14 [4]\
    \ => 15 [5] => 16 [6] => 17 [7] => 18 [8] => 19 [9] => 20 [10] => 21 [11] => 22\
    \ [12] => 23 [13] => 24 [14] => 25 )\n\n$random_integers = generate_integers(10,\
    \ 13);\nprint_r($random_integers);\n</code>\nOutput:\n<code>\nArray ( [0] => 10\
    \ [1] => 12 [2] => 13 [3] => 14 [4] => 15 [5] => 16 [6] => 17 [7] => 18 [8", " \
    \ $result = array();\n  $x = $a;\n  while ($x <= $b) {\n    if ($x % 2 == 0) {\n\
    \      $result[] = $x;\n    }\n    $x += 2;\n  }\n  return $result;\n}\n", " \
    \   // First we get the number of digits in the number\n    $num_digits = $a <\
    \ 0 ? $a - $b + 1 : $a + $b - 1;\n\n    // If this is less than 1, it means it\
    \ is smaller than the minimum\n    // number that can be represented, so we set\
    \ it to be the minimum\n    // number that can be represented instead.\n    if\
    \ ($num_digits < 1) {\n        $num_digits = 1;\n    }\n\n    // We now need to\
    \ figure out how many times we can divide the number\n    // by 10 so that we\
    \ can get our numbers from 0 - 9. Since we are\n    // going backwards through\
    \ the digits we will go from right to left\n    // through the numbers.\n    $dividers\
    \ = array_reverse(str_split($num_digits));\n\n    // Get the current number we\
    \ want to start at\n    $start_number = $num_digits;\n\n    // While loop will\
    \ keep going until all of the numbers are used up\n    // We start with the first\
    \ number, and divide the number by 10 until\n    // the number is 0 and we get\
    \ to where we can start incrementing the next\n    // number.\n    while ($start_number\
    \ > 0) {\n        // Add all of the divider numbers to the start of the array\n\
    \        array_unshift($dividers, $start_number);\n\n        // We start dividing\
    \ the number by 10\n        $start_number = $start_number / 10;\n    }\n\n   \
    \ // We now have all of the numbers in our array, we will loop through the\n \
    \   // array and get the digits of the number and then add them to\n    // the\
    \ new array.\n    $new_array = array();\n    foreach ($dividers as $divider) {\n\
    \        // This is where the magic happens\n        $new_array[] = $a < 0 ? $divider\
    \ + $b : $a - $b + $divider;\n    }\n\n    // Since we have an odd number of digits,\
    \ we will need to add 1 to\n    // all of the odd numbers to make them even and\
    \ we can do this by\n    // subtracting the number from 10 until it is negative.\n\
    \    $new_array[] = $a < 0 ? 10 - $divider : $a - $b + 10;\n\n    // Return the\
    \ new array\n    return $new_array;\n}\n</code>\n<|/ a tags=math,algorithm,php\
    \ |>\n<| a tags=math,algorithm,php |>\nThe easiest way to get even digits of a\
    \ number is:\n<code>\n$num = 123456;\n$num_str = strval($num);\n$num_str = str_split($num_str);\n\
    $even_digits = array_filter(range(1, strlen($num_str), 2), function($i) { return\
    \ !in_array($i, $num_str); });\n</code>\n$even_digits will contain [2,4]\n<|/\
    \ a dscore=3 |>\n<| c |>\nThis one is a nice solution to meet the OP's ", "  \
    \  $evens = array();\n    for ($i = $a; $i <= $b; ++$i) {\n        if ($i % 2\
    \ === 0) {\n            $evens[] = $i;\n        }\n    }\n    return $evens;\n\
    }\n", "  $res = [];\n  for ($i = $a; $i <= $b; $i++) {\n    if ($i % 2 == 0) {\n\
    \      $res[] = $i;\n    }\n  }\n  return $res;\n}", "  $c = $a + $b - 1;\n  if\
    \ ($c < 0) return array();\n  $result = array();\n  for ($i = 0; $i <= $c; ++$i)\
    \ {\n    $result[] = $i;\n  }\n  return $result;\n}\n", "  $range = range($a,\
    \ $b);\n  $numbers = array_filter(\n    $range,\n    function ($number) {\n  \
    \    return ($number % 2 == 0);\n    }\n  );\n  sort($numbers);\n\n  return $numbers;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 tags=php,php-7,arrays |>\nI really\
    \ like answer by Jonathan Stirniak, although I think that there should be a more\
    \ elegant way of doing it.\nThe code below uses recursion to find all even numbers\
    \ between two limits, while also checking whether the number was already found.\n\
    <code>", "  $x = array($a); // Make $x start at $a\n\n  for ($y = $b; $y >= $a;\
    \ --$y) { // Start at the next highest number\n    $x = array(); // Start a new\
    \ list each time\n\n    for ($i = 0; $i < count($x); ++$i) { // For each item\
    \ in the list...\n      $x[$i] = intval($x[$i] / ($y + 1)); // ...multiply it\
    \ by the fractional part\n\n      while ($x[$i] % 10 === 0 && $i < count($x) -\
    \ 1) { // If the new item has no remainder...\n        $x[$i] += 10; // ... add\
    \ it to the end\n        $i++;\n      }\n    }\n\n    if (count($x) > count($y)\
    \ - 1) {\n      $x = array(); // If we are less than the size of the list return\
    \ it\n    }\n  }\n\n  return $x;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI believe\
    \ this only works for positive numbers, and it gives me an infinity error for\
    \ negative numbers. Any idea why?\n<|/ c |>\n<| c |>\nJust fixed it. I used the\
    \ fact that division is done mod 10 to make the function handle negative numbers\
    \ differently. It doesn't handle `5` as `50` so it's probably not an issue in\
    \ your case though.\n<|/ c |>\n<| c |>\nThe 5 is my test case. Using this function\
    \ with 10 returns a list of all numbers between 1 and 10. I need it to return\
    \ a list with just the numbers between 1 and 10, excluding 5\n<|/ c |>\n<| c |>\n\
    I updated the code to handle negative numbers. It should be perfect now.\n<|/\
    \ c |>\n<| c |>\nI still get a \"Fatal error: Maximum execution time of 30 seconds\
    \ exceeded\" error for inputs like 91, 93, and 94\n<|/ c |>\n<| a tags=php,math,algorithm\
    \ |>\nYou can use this function as an inspiration. it checks whether there is\
    \ an even digit in the array's range.\n<code>", "    if ($a > $b) {\n        return\
    \ array();\n    }\n\n    $result = array();\n    $remainder = $a % $b;\n\n   \
    \ if ($remainder == 0) {\n        if ($b == 1) {\n            $result[] = $a;\n\
    \        } else {\n            $result[] = $b;\n            $result[] = $remainder;\n\
    \        }\n    } else {\n        $result[] = $remainder;\n    }\n\n    return\
    \ generate_integers($b * 10 + $remainder, $b);\n}\n", "  // Initialize an array\n\
    \  $evens = array();\n  // Initialize the current integer\n  $i = $a;\n  // Initialize\
    \ a counter\n  $counter = 0;\n  while (count($evens) < $b - $a + 1) {\n    //\
    \ If the current integer is greater than or equal to the end, stop\n    if ($i\
    \ >= $b) {\n      break;\n    }\n    // If the current integer is even, add it\
    \ to the array\n    if ($i % 2 === 0) {\n      $evens[] = $i;\n    }\n    // Increment\
    \ the counter\n    $counter++;\n    // Move to the next integer\n    $i++;\n \
    \ }\n  // Return the array\n  return $evens;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThanks for the comment. I modified my function a bit and added\
    \ the expected outcome. Could you take a look at it again please? I'm a beginner\
    \ programmer and would like some help to understand what is wrong with my code.\n\
    <|/ c |>\n<| a tags=php,arrays |>\n<code>", "    if ($a < $b) $temp = $a;\n  \
    \  else $temp = $b;\n    $arr = array();\n    $i = 0;\n    while ($i <= ($temp\
    \ - $a)) {\n        $arr[] = $i;\n        $i += $a + 1;\n    }\n    while ($i\
    \ <= ($b - $b)) {\n        $arr[] = $i;\n        $i += $b + 1;\n    }\n    return\
    \ $arr;\n}\n", "  assert($a > 0 && $b > 0);\n  $i = $j = 0;\n  $result = array();\n\
    \  while ($i < $a && $j < $b) {\n    $result[] = $i;\n    $i++;\n    $j++;\n \
    \ }\n  if ($i == $a || $j == $b) $result[] = $i;\n  return $result;\n}\n", " \
    \   list($first, $last) = range($a, $b);\n\n    $even = array();\n    for ($i\
    \ = $first; $i <= $last; ++$i) {\n        if ($i % 2 == 0) {\n            $even[]\
    \ = $i;\n        }\n    }\n\n    return $even;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nthank you for your response. but my task is to find out even numbers\
    \ from 1 to 200. I can't use loop for this.\n<|/ c |>\n<| a tags=php dscore=0\
    \ |>\n<code>", "  $result = array();\n  for ($i = $a; $i <= $b; ++$i) {\n    if\
    \ ($i % (2 * $i) == 0) {\n      array_push($result, $i);\n    }\n  }\n  return\
    \ $result;\n}\n\n/**\n * Given a number as input, compute the largest factorial\
    \ that can be used\n * to represent that number.\n *\n * @param $number\n *  \
    \ The number whose factorial is to be computed.\n *\n * @return\n *   The largest\
    \ factorial that can be represented by $number, or 0 if\n *   $number is greater\
    \ than the largest factorial that PHP supports.\n */", "    if (!is_numeric($a)\
    \ || !is_numeric($b)) {\n        return array();\n    }\n    $a = intval($a);\n\
    \    $b = intval($b);\n    if ($a == 0 || $b == 0) {\n        return array();\n\
    \    }\n    $evens = array();\n    $odds = array();\n    while ($a <= $b) {\n\
    \        if ($a % 2 === 0) {\n            $evens[] = $a;\n        }\n        else\
    \ {\n            $odds[] = $a;\n        }\n        $a++;\n    }\n    $a = max($evens);\n\
    \    $a = min($odds);\n    while ($a <= $b) {\n        if ($a % 2 === 0) {\n \
    \           $evens[] = $a;\n        }\n        else {\n            $odds[] = $a;\n\
    \        }\n        $a++;\n    }\n    $a = max($evens);\n    return array_merge($odds,\
    \ $evens);\n}\n", "  $c = $a > $b ? $a : $b;\n  $d = $c - $a;\n  if ($d == 0)\
    \ {\n    return array();\n  }\n  $result = [];\n  for ($i = $a; $i <= $b; $i++)\
    \ {\n    $result[] = $i;\n  }\n  for ($i = $d; $i > 0; $i--) {\n    $result[]\
    \ = $i;\n  }\n  return array_slice($result, 0, $a + $d);\n}\n</code>\n<|/ a tags=php,algorithm\
    \ dscore=4 |>\n<| c |>\nGreat solution and nice idea.\n<|/ c |>\n<| c |>\nNice\
    \ one. Although, I am curious - how did you come up with the formula?\n<|/ c |>\n\
    <| c |>\nIt's not really a formula, just a mathematical process. If you take the\
    \ difference between the numbers, you know how many times to add them together.\
    \ Then you just need to add them up again starting at zero. After that, you need\
    \ to subtract $a from $d ($d - $a will give the number of digits of $d) and repeat\
    \ the process again\n<|/ c |>\n<| c |>\nThis does not work. Try it with [generate_integers(2,8)](https://3v4l.org/9iqMd)\n\
    <|/ c |>\n<| c |>\nIt does work. As I explained at the end of my answer, \"The\
    \ algorithm returns the even integers between a and b\" as specified in the original\
    \ question.\n<|/ c |>\n<| a dscore=4 |>\nI thought about this and came up with\
    \ the following:\n\nGiven 2 positive integers a and b (1 <= a <= b)\nFind the\
    \ number of integers between a and b which are even.\n\nGiven that:\n\nThe difference\
    \ between 2 numbers is a positive integer.\nThe difference between 2 numbers is\
    \ odd.\n\nThe total number of numbers between a and the closest even number is\
    \ (a+b) / 2.\nSo, starting from 2, we get the number of even numbers between 2\
    \ and the closest even number. Those numbers are even.\nWe then subtract a and\
    \ b to get the number of even numbers between the closest even number and the\
    \ closest odd number.\nAnd that's what we end up with (a + b) / 2.\n<|/ a tags=php,algorithm\
    \ |>\n<| c |>\nThanks for giving the time to do it. I will accept your answer\
    \ and upvote it if it works :)\n<|/ c |>\n<| c |>\nCan you pls explain the reason\
    \ of +(b-a)?\n<|/ c |>\n<| c |>\nThat's because of the division by 2", "    $i\
    \ = $a+1;\n    $even_integers = array();\n    while($i <= $b) {\n        $remainder\
    \ = $i % 10;\n        $even_integers[] = $remainder;\n        $i++;\n    }\n \
    \   return array_reverse($even_integers);\n}\n", "    $array = [];\n    for ($i\
    \ = 0; $i < $a; $i++) {\n        for ($j = 0; $j < $b; $j++) {\n            if\
    \ ($i == $j) continue;\n            $array[] = $i;\n        }\n    }\n    return\
    \ $array;\n}\n", "    $a = intval($a);\n    $b = intval($b);\n\n    // If they\
    \ are the same, return an array of the same size.\n    if ($a === $b) {\n    \
    \    $c = $a;\n        $a = 0;\n        $b = $c;\n    }\n\n    if ($a > $b) {\n\
    \        throw new Exception('A must be less than or equal to B');\n    }\n\n\
    \    // Build an array to hold the digits, from right to left. At this point\n\
    \    // $a will equal $b. At each step, we want to increment the value of\n  \
    \  // $b. If $b is large enough to hold the value, then we use the right\n   \
    \ // value, otherwise we use a value with fewer digits.\n    $digits = array();\n\
    \    if ($b > 0) {\n        // Use the right value\n        $b = $b;\n       \
    \ // Set the first digit to 2\n        $digits[0] = 2;\n    }\n    while ($a >\
    \ 0) {\n        // Remove the last digit.\n        $b = $b % 10;\n        // Add\
    \ it to the array.\n        $digits[] = $b * pow(10, count($digits) - 1);\n  \
    \      // Remove the rest of the digit.\n        $a    = $a / 10;\n    }\n\n \
    \   // Reverse the array.\n    array_reverse($digits);\n\n    return $digits;\n\
    }\n</code>\n<|/ a dscore=0 tags=algorithm,php,recursion |>\n<| c |>\nI did not\
    \ downvote you but this does not work. Because it gives incorrect results on certain\
    \ inputs.\n<|/ c |>\n<| c |>\nSorry, you are correct - I made a mistake in calculating\
    \ the number of digits. I've updated my answer to take into account the missing\
    \ zero.\n<|/ c |>\n<| c |>\nI think you still have a small bug. `generate_integers`\
    \ can only return two values. But your code says it can return as many as you\
    \ want. Try `generate_integers(5, 10)` and see what happens.\n<|/ c |>\n<| c |>\n\
    I believe I fixed the bug (though I'm still testing it), see my updated answer.\
    \ Hopefully that helps.\n<|/ c |>\n<| c |>\nLooks great. I'll test it out when\
    \ I get the chance but thank you for the help.\n<|/ c |>\n<| a tags=algorithm,php,recursion\
    \ dscore=0 |>\nThe algorithm I wrote for my own question seems to work just fine.\
    \ Here's my code:\n<code>\n<?php\n", "  $a = intval($a);\n  $b = intval($b);\n\
    \  if ($a < $b) {\n    $tmp = $a;\n    $a = $b;\n    $b = $tmp;\n  }\n  if ($a\
    \ < 2) {\n    return array();\n  }\n\n  $integers = array();\n  $a *= 10;\n  $b\
    \ *= 10;\n  $tmp = $a - $b;\n  for ($i = 0; $i < $b; $i++) {\n    if ($i % 2 ===\
    \ 0) {\n      $integers[] = $a;\n    }\n    $a += 10;\n  }\n  while ($tmp > 0)\
    \ {\n    $integers[] = $a;\n    $tmp -= $a;\n    $a += 10;\n  }\n  return array_reverse($integers);\n\
    }\n\n\n/**\n * Returns a random integer in the range [0, max)\n *\n * @param int\
    \ $max\n *\n * @return int\n */", "    if ($a < $b) {\n        $a = $b;\n    \
    \    $b = $a;\n    }\n    $result = [];\n    while ($a <= $b) {\n        $result[]\
    \ = $a;\n        $a++;\n    }\n    array_multisort($result, SORT_ASC, $result);\n\
    \    return $result;\n}\n</code>\n<|/ a tags=sorting,arrays,php dscore=0 |>\n\
    <| a |>\nIf you have some idea about the range of integers you can use PHP inbuilt\
    \ function \"range\"\n<code>\n<?php\n$range = range(1, 10); \nprint_r($range);",
  "  $a = intval($a);\n  $b = intval($b);\n  $limit = $a - $b;\n  if ($limit == 0)\
    \ {\n    return array();\n  }\n\n  $adiv = $a / 10;\n  $bdiv = $b / 10;\n  if\
    \ ($adiv == 0) {\n    $ret = $bdiv / 10;\n    return array((int)$ret);\n  }\n\n\
    \  if ($bdiv == 0) {\n    $ret = $adiv / 10;\n    return array((int)$ret);\n \
    \ }\n\n  $m = 0;\n  $m2 = pow(2, $m);\n  do {\n    if ($adiv < $m2) {\n      $m++;\n\
    \      $m2 = pow(2, $m);\n    }\n  } while ($adiv >= $m2);\n\n  $ret = $m;\n \
    \ return array((int)$ret);\n}\n", "    $evens = array();\n    $odds = array();\n\
    \    $i = 1;\n\n    while ($i <= $b) {\n        if ($i % 2 == 0) {\n         \
    \   $evens[] = $i;\n        } else {\n            $odds[] = $i;\n        }\n \
    \       ++$i;\n    }\n\n    $a = array_merge($evens, $odds);\n\n    sort($a);\n\
    \n    return array_slice($a, 0, $a - $a);\n}\n", "  $numbers = array();\n  for\
    \ ($i = $a; $i <= $b; ++$i) {\n    $numbers[] = $i;\n  }\n\n  sort($numbers);\n\
    \  return $numbers;\n}\n\n", "    $evens = array();\n    while ($a <= $b) {\n\
    \        $evens[] = $a;\n        $a *= 10;\n    }\n    return $evens;\n}\n", " \
    \ if ($a < $b) return array();\n  if ($a == $b) return array($a);\n  // Set $i\
    \ to zero, and $count to $b.\n  $i = $b = $a;\n  $count = abs($b);\n  while (true)\
    \ {\n    if ($i >= $count) {\n      // If $count is odd, $i has reached the highest\
    \ possible value\n      // for $b.\n      if ($count & 1) {\n        // If $i\
    \ is odd, then there are an odd number of digits, so the\n        // next digit\
    \ is one less than $i's power of two.\n        $i++;\n        $count--;\n    \
    \  }\n      // If $i is even, the next digit is one more than a power of two.\n\
    \      $i = 2 * $i;\n      $count--;\n    } else if ($i >= $b) {\n      // If\
    \ $i is even, there are an even number of digits, and $i has\n      // not reached\
    \ the highest possible value for $b.\n      $i++;\n      $count--;\n    } else\
    \ {\n      // $i is even, and has reached the highest possible value for $b.\n\
    \      return array($i);\n    }\n  }\n}\n\n", "    $integers = array();\n    $current\
    \ = 1;\n\n    do {\n        $integers[] = $current;\n        $current = $current\
    \ * 10 + $a;\n        $a = $a - 1;\n    } while ($a >= $b);\n\n    return $integers;\n\
    }\n", "    $result = [];\n    while ($a <= $b) {\n        if ($a % 2 === 0) {\n\
    \            $result[] = $a;\n        }\n        $a++;\n    }\n    return $result;\n\
    }\n</code>\nThis solution avoids sorting (which would be inefficient) and uses\
    \ math and array manipulation.\n<|/ a tags=php,algorithm |>\n<| c |>\nThanks for\
    \ your help, but unfortunately I should stick to my solution as this is an online\
    \ judge and I can not use your code.\n<|/ c |>\n<| c |>\nI'm sorry, I misunderstood\
    \ your question at first. I thought you meant you couldn't use the code I provided.\
    \ I've updated my answer to match your specific constraints. Hope this helps.\n\
    <|/ c |>\n<| c |>\nNo problem. Thanks for your help.\n<|/ c |>\n<| a dscore=2\
    \ tags=php,algorithm |>\nYou can do it in one line if you don't mind sorting and\
    \ storing the results. Try this (PHP >= 5.5):\n<code>\n$nums = range($a, $b);\n\
    $nums[] = $b;\nsort($nums);\n</code>\n<|/ a |>\n<| c |>\nYes, this is the solution\
    \ that I need. Thanks for your help, I will try to solve this using array_merge.\n\
    <|/ c |>\n<| a tags=php,algorithm |>\nA simple approach would be to find the minimum\
    \ between the two numbers, divide it by the size of the range (so if the two numbers\
    \ are 5, 10, and your range is 2, 8, then divide by 2) and then get the remainder.\
    \ If the remainder is 0, then that number is included in the range. If it's 1,\
    \ then it is not in the range.\n<code>\n<?php", "    // Initialize array\n   \
    \ $result = array();\n\n    // Initialize counter\n    $i = 0;\n\n    // Iterate\
    \ through $a to $b\n    while ($i < $a && $i < $b) {\n        // Add $i to array\n\
    \        $result[] = $i;\n\n        // Add 1 to $i\n        $i++;\n    }\n\n \
    \   // Return result\n    return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nWow,\
    \ awesome. Thanks for posting this. And thanks for sharing your knowledge, too\
    \ :)\n<|/ c |>\n<| a tags=sorting,algorithm,arrays,php |>\nHere is a quick solution\
    \ using array_multisort()\n<code>\n<?php\n", "    $even = array();\n    $odd =\
    \ array();\n    $even[0] = $a;\n    $odd[0] = $b;\n    for ($i = 1; $i <= $b;\
    \ ++$i) {\n        if ($i % 2 == 0) {\n            $even[] = $i;\n        } else\
    \ {\n            $odd[] = $i;\n        }\n    }\n    $sort = array();\n    while\
    \ (!empty($even) && count($even) > 0) {\n        array_push($sort, array_shift($even));\n\
    \    }\n    while (!empty($odd) && count($odd) > 0) {\n        array_push($sort,\
    \ array_shift($odd));\n    }\n    return $sort;\n}\n", "  if ($a < $b) {\n   \
    \ $a = $b;\n  }\n  $a = max($a, 1);\n  $b = max($b, 1);\n  if ($b == 0) {\n  \
    \  return array();\n  }\n  $c = $a;\n  $d = $b;\n  while (1) {\n    $a[$c] = 0;\n\
    \    $b[$d] = 0;\n    $c++;\n    $d++;\n    if ($c == $b) {\n      $c--;\n   \
    \   $d++;\n    }\n    if ($d == $a) {\n      $d--;\n      $c++;\n    }\n    if\
    \ ($c > $d) {\n      return array();\n    }\n    if ($b[$d] == 0) {\n      break;\n\
    \    }\n  }\n  $m = 1;\n  foreach ($a as $k => $v) {\n    $a[$k] = $m * $v;\n\
    \  }\n  return $a;\n}\n\n/**\n * Checks whether a number is prime.\n *\n * Formula\
    \ from:\n * http://primes.utm.edu/howmany/Multiple/\n *\n * @param int $number\n\
    \ * @return bool\n */", "    $result = [];\n    for ($i = $a; $i <= $b; ++$i)\
    \ {\n        $result[] = $i;\n    }\n\n    sort($result);\n    return $result;\n\
    }\n\n/**\n * Returns a random integer between $min and $max, inclusive.\n * http://php.net/manual/en/function.rand.php\n\
    \ */", "    if ($a > $b) {\n        return array();\n    }\n    if ($b == 1) {\n\
    \        return array('1');\n    }\n\n    $result = array();\n    for ($i = $a;\
    \ $i <= $b; $i++) {\n        $result[] = $i;\n    }\n    sort($result);\n\n  \
    \  return $result;\n}\n", "  if (!is_integer($a) || !is_integer($b)) {\n    throw\
    \ new InvalidArgumentException(\n        'Must pass in two positive integers'\n\
    \    );\n  }\n\n  $integers = array();\n  if ($a <= $b) {\n    $count = $b;\n\
    \  } else {\n    $count = $a;\n  }\n\n  // Loop until the count is zero or the\
    \ loop condition is true.\n  while ($count > 0) {\n    // Get a random integer\
    \ between 0 and the count minus one.\n    // The result will be between 0 and\
    \ the count minus one.\n    // If it's 0, loop again.\n    $random_integer = rand(0,\
    \ $count - 1);\n    // Check if this random integer is even.\n    $is_even = false;\n\
    \    if ($random_integer % 2 == 0) {\n      $is_even = true;\n    }\n    // If\
    \ it's odd, increment the count.\n    elseif ($random_integer % 2 != 0) {\n  \
    \    $count--;\n    }\n    // Add the even number to the array.\n    if ($is_even)\
    \ {\n      $integers[] = $random_integer;\n    }\n  }\n  return $integers;\n}\n\
    </code>\n<|/ a dscore=2 tags=algorithm,php |>\n<| c |>\nWon't this just generate\
    \ all possible combinations though?\n<|/ c |>\n<| c |>\nNo, it won't generate\
    \ all possible combinations, but that's not what's being asked.\n<|/ c |>\n<|\
    \ c |>\nThis algorithm is not good - if you use 1 as start, you will end with\
    \ empty array. Also, you are generating numbers between 1 and $a - 1. Better way\
    \ is to use rand(0, $a) and rand($a, $b) - this way you will guarantee you will\
    \ have all numbers in your interval, without repetitions.\n<|/ c |>\n<| a |>\n\
    Here's another algorithm:\n\nFirst generate an array with all numbers up to N\
    \ (the size of the array).\nPick a random value from that array.\nRemove it from\
    \ the array.\nRepeat step 2 and step 3 for as many values as you want in the array.\n\
    \nIf you want an example implementation, you can see it run here: https://ideone.com/YD4P7M\n\
    <|/ a dscore=1 tags=algorithm,php |>\n<| a |>\n<code>\n<?php\n\n$numbers = array(1,2,3,5,7);\n\
    \n$length = sizeof($numbers);\n\n$random = rand(0,$length-1);\n\n$num = $numbers[$random];\n\
    \nfor($i = $length-1; $i >= 0; $i--){\n    if($i == $random){\n        $num =\
    \ $numbers[$i];\n    }else{\n        $num = $numbers[$i];\n        break;\n  \
    \  }", "    $integers = range($a, $b);\n    $evens = array();\n    foreach ($integers\
    \ as $x) {\n        if ($x % 2 === 0) {\n            $evens[] = $x;\n        }\n\
    \    }\n    return $evens;\n}\n\n$evens = generate_integers(2, 8); // array(2,\
    \ 4, 6, 8)\n$odd = generate_integers(8, 2); // array(2, 4, 6, 8)\n$tens = generate_integers(10,\
    \ 14); // array()\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,algorithm |>\nThe\
    \ below function will work for any number of integers\n<code>", "  $a = intval($a);\n\
    \  $b = intval($b);\n  if ($a < $b) return array($a => $a); // Invariant: a <=\
    \ b\n  $c = $a + $b - 1;\n  $d = $a > $b;\n  return ($d ? array() : ($c % 2 ==\
    \ 0 ? array($a => $a) : array($a => $b)))\n      + generate_integers($c, $b);\n\
    }\n", "    $even = 0;\n    for ($i = $a; $i <= $b; ++$i) {\n        if ($i % 2\
    \ == 0) {\n            $even += $i;\n        }\n    }\n    return $even;\n}",
  "    $a = abs($a);\n    $b = abs($b);\n    $min = min($a, $b);\n    $max = max($a,\
    \ $b);\n    $sum = 0;\n    $n = $a;\n    $digits = array();\n    while (--$n >=\
    \ 0) {\n        $sum += floor($n / $b);\n        $digits[] = (int)($n % $b);\n\
    \    }\n    if ($sum < $min) {\n        $digits = array_slice($digits, 0, $a -\
    \ $sum);\n    }\n    elseif ($sum > $max) {\n        $digits = array_slice($digits,\
    \ $max - $sum);\n    }\n    return $digits;\n}\n", "    $ints = array();\n   \
    \ for($x = $a; $x <= $b; $x++) {\n        $ints[] = $x;\n    }\n    sort($ints);\n\
    \    return $ints;\n}\n", "\t$a = abs($a);\n\t$b = abs($b);\n\n\t$result = array();\n\
    \twhile ($a >= $b) {\n\t\t$result[] = $a % 10;\n\t\t$a /= 10;\n\t}\n\twhile ($a\
    \ > 0) {\n\t\t$result[] = $a % 10;\n\t\t$a /= 10;\n\t}\n\n\treturn $result;\n\
    }\n", "  if ($a <= 0 || $b <= 0) {\n    return array();\n  }\n\n  $result = array();\n\
    \  for ($i = $a; $i <= $b; $i++) {\n    if ($i % 2 == 0) {\n      $result[] =\
    \ $i;\n    }\n  }\n\n  return $result;\n}\n</code>\n<|/ a tags=php,algorithm |>\n\
    <| c |>\nThanks for your answer. Could you tell me what is wrong with my logic?\
    \ I thought it might not be an algorithm issue, but rather something with the\
    \ way I coded my function.\n<|/ c |>\n<| c |>\nNothing is wrong with your logic.\
    \  You're getting empty arrays.  I tested my code with the example you provided\
    \ in your post.  It returns an array with no elements.  You're getting an empty\
    \ array because `$a <= 0 || $b <= 0` is false for all values of `$a` and `$b`\
    \ when the first element of the array is 2.\n<|/ c |>\n<| c |>\nAhh I see. So\
    \ if I change the return statement: `if ($a <= 0 || $b <= 0) {\n    return array();\n\
    \  }` to `if ($a <= 0 || $b <= 0) {\n    return array(1, 2, 3, 4);\n  }` it will\
    \ return an array with 4 elements.\n<|/ c |>\n<| c |>\nThat's correct.  It does\
    \ return an array of 4 elements when `$a` is greater than `1` and `$b` is greater\
    \ than `4`.\n<|/ c |>\n<| c |>\nAhh I see now. I was thinking that the problem\
    \ might have been with my logic, not my code.\n<|/ c |>\n<| a tags=php,algorithm\
    \ |>\nYou can simply use array_fill().\n<code>\n$arr = array_fill(0, $a, array_fill(0,\
    \ $b, 0));\n</code>\nExample:\n<code>\n$a = 5;\n$b = 10;\n\n$arr = array_fill(0,\
    \ $a, array_fill(0, $b, 0));\nprint_r($arr);\n</code>\nOutput:\n<code>\nArray\
    \ (\n    [0] => 0 => Array\n        (\n            [0] => 0\n            [1] =>\
    \ 0\n            [2] => 0\n            [3] => 0\n            [4] => 0\n      \
    \  )\n\n    [1] => 1 => Array\n        (\n            [0] => 0\n            [1]\
    \ => 0\n            [2] => 0\n            [3] => 0\n            [4] => 0\n   \
    \     )\n\n    [2] => 2 => Array\n        (\n            [0] => 0\n          \
    \  [1] => 0\n            [2] => 0\n            [3] => 0\n            [4] => 0\n\
    \        )\n\n    [3] => 3 => Array\n        (\n            [0] => 0\n       \
    \     [1] => 0", "    $digits = array();\n    for ($i = $a; $i <= $b; $i++) {\n\
    \        $digits[] = $i;\n    }\n    array_multisort($digits, SORT_DESC);\n  \
    \  return $digits;\n}\n", "    $result = array();\n    while (1) {\n        if\
    \ ($a == $b) return $result;\n        $result[] = $a;\n        $a++;\n    }\n\
    }\n", "    $result = [];\n    while ($a && $b) {\n        $result[] = $a % 10;\n\
    \        $a = floor($a / 10);\n        $b = floor($b / 10);\n    }\n    return\
    \ $result;\n}\n", "  list($n, $d) = sscanf($a, '%d.%d');\n  $n = $a < $b ? $a\
    \ : $b;\n  $a = $a - $n;\n  $b = $b - $n;\n  if ($a < $b) {\n    $r = generate_integers($a\
    \ + 1, $b);\n    $r[] = $n;\n    return $r;\n  }\n  else {\n    $r = array();\n\
    \    while ($a >= 0) {\n      if ($a % 2 == 0) {\n        $r[] = $n;\n       \
    \ $a /= 2;\n      }\n      else {\n        $a /= 2;\n        $b -= $a;\n     \
    \ }\n    }\n    return $r;\n  }\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nHi, thanks\
    \ for the solution, but its output is wrong for example `generate_integers(8,\
    \ 2); // array(2, 4, 6, 8)` should return `array(2, 4, 6, 8)` because `8` and\
    \ `2` are even in order.\n<|/ c |>\n<| a dscore=1 |>\nThis solution is based on\
    \ generating a new array and removing all values from the old array which have\
    \ already been used.\n<code>", "  if ($a < $b) {\n    return generate_integers($b,\
    \ $a);\n  }\n  if ($a == $b) {\n    return array();\n  }\n  $result = array();\n\
    \  $start = $a;\n  $end = $b;\n  while (true) {\n    if ($start == $end) {\n \
    \     $result[] = $start;\n    } else {\n      $mid = $start + ($end - $start)\
    \ / 2;\n      if ($mid < $b) {\n        $start = $mid + 1;\n      } else {\n \
    \       $end = $mid;\n      }\n    }\n  }\n  return $result;\n}\n", "  // Initialize\
    \ our array and two counters\n  $i = $j = 0;\n  $array = [];\n  $a_counter = $b_counter\
    \ = 0;\n\n  // Loop through the numbers starting at the larger number until we\
    \ reach\n  // the smaller number\n  while ($i <= $b) {\n    // Add this number\
    \ to our array\n    $array[] = $i;\n\n    // Increment our counter\n    $i++;\n\
    \n    // If the current number is greater than our larger counter, we're done\
    \ and\n    // can break out of the loop\n    if ($i > $b) {\n      break;\n  \
    \  }\n  }\n\n  // Loop through the numbers starting at the smaller number and\
    \ increment the\n  // counter\n  while ($j < ($b - $a)) {\n    $j++;\n    $array[]\
    \ = $j;\n\n    if ($j > $b - $a) {\n      break;\n    }\n  }\n\n  // Return the\
    \ array we've constructed\n  return $array;\n}\n</code>\n<|/ a tags=php,arrays\
    \ dscore=1 |>\n<| c |>\nWhy did you use recursion in the first place?\n<|/ c |>\n\
    <| c |>\nI agree with you but its not my code i just copied and pasted :)\n<|/\
    \ c |>\n<| c |>\nAh, that makes sense then. No offense intended.\n<|/ c |>\n<|\
    \ c |>\nNo offense taken - I actually thought about it after posting the answer\
    \ and it was a rather clever approach!\n<|/ c |>\n<| a tags=php,arrays |>\nI think\
    \ recursion is overkill for this kind of task. The following does work (untested):\n\
    <code>\n$numbers = generate_integers(10, 14);\n", "  if($a > $b) {\n    $a = $b;\n\
    \    $b = $a;\n  }\n\n  $a *= 10;\n  $b *= 10;\n\n  $array = [];\n  for($i = $a;\
    \ $i <= $b; $i++) {\n    $array[] = sprintf(\"%d\", $i);\n  }\n\n  return $array;\n\
    }\n</code>\n<|/ a tags=php dscore=0 |>\n<| c |>\nWon't that just get every second\
    \ digit? I need every 2nd digit between the two numbers. I did a little research\
    \ and I didn't find a function that does just that.\n<|/ c |>\n<| c |>\nOops,\
    \ forgot the `$i<=$b` part. Try again.\n<|/ c |>\n<| c |>\nIt will get every second\
    \ digit between the two numbers. If you want every other digit, you have to change\
    \ the for loop to `for($i = $a; $i <= $b && $i <= 10; $i+=2)`. Then it will get\
    \ every other number between 0 and 9.\n<|/ c |>\n<| c |>\nOkay now I got it. Thanks.\
    \ I knew there was a function like that.\n<|/ c |>\n<| a tags=php |>\nI see two\
    \ ways of doing this.\nThe first one is probably more efficient, although it takes\
    \ more code. \nThe second one is probably a bit more flexible, although it takes\
    \ more code. \nThe first one requires two loops (in fact three but the first one\
    \ can be ignored).\nThe second one does not.\nThe first one:\n<code>", "    foreach\
    \ (range($a, $b) as $i)\n        $result[] = $i;\n\n    $sorted = array_merge(sort($result),\
    \ $a);\n    $result = array_diff($result, $sorted);\n\n    return $result;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=0 |>\n<code>\n<?php", "  return array(\n\
    \    $a < 2 ? 1 : $a < 8 ? $a < 16 ? $a < 32 ? $a < 48 ? $a < 64 : $a < 128 ?\
    \ $a < 256 ? $a < 512 : $a < 1024 ? $a < 2048 ? $a < 4096 ? $a < 8192 : $a < 16384\
    \ ? $a < 32768 ? $a < 65536 ? $a < 131072 : $a < 262144 ? $a < 524288 : $a < 1048576\
    \ ? $a < 2097152 : $a < 1073741824 : $a < -2147483648 ? $a < -2147483648 ? $a\
    \ < -2147483648 ? $a < -2147483648 ? $a < -2147483648 ? $a < -2147483648 ? $a\
    \ < -2147483648 : $a < -2147483648 ? $a < -2147483648 : $a < -2147483648 : $a\
    \ < -2147483648 ? $a < -2147483648 : $a < -2147483648 ? $a < -2147483648 : $a\
    \ < -2147483648 ? $a < -2147483648 : $a < -2147483648 ? $a < -2147483648 : $a\
    \ < -2147483648 : $a < -2147483648 : $a < -2147483648 ? $a < -2147483648 : $a\
    \ < -2147483648 : $a < -2147483648 ? $a < -2147483648 : $a < -2147483648 : $a\
    \ < -2147483648 : $a < -2147483648 ? $a < -2147483648 : $a < -2147483648 : $a\
    \ < -2147483648 : $a < -2147483648 : $a < -2147483648 ? $a < -2147483648 : $a\
    \ < -2147483648 : $a < -2147483648 : $a < -2147483648 : $a < -2147483648 : $a\
    \ < -2147483648 ? $a < -2147483648 : $a < -2147483648 : $a < -2147483648 : $a\
    \ < -2147483648 : $a < -2147483648 : $a < -2147483648 : $a < -2147483", "  //\
    \ Convert the numbers to strings\n  $a = (string) $a;\n  $b = (string) $b;\n\n\
    \  $start = min($a, $b);\n\n  // If the numbers are equal, just return the empty\
    \ array\n  if ($a == $b) {\n    return array();\n  }\n\n  // Convert the numbers\
    \ to ints\n  $a = intval($a);\n  $b = intval($b);\n\n  $start = min($a, $b);\n\
    \n  if ($start == 0) {\n    return array();\n  }\n\n  $end = $a - $start + 1;\n\
    \  $digits = array();\n\n  for ($i = 0; $i < $end; ++$i) {\n    // Get the two\
    \ digit numbers\n    $lower = $i % $a + $b;\n    $upper = floor($i / $a) + $b;\n\
    \    $digits[] = ($lower < $upper) ? $lower : $upper;\n  }\n\n  // Sort them in\
    \ the correct order\n  sort($digits);\n\n  return $digits;\n}\n", "  $range =\
    \ $b - $a + 1;\n  if ($range <= 0) return array();\n  if ($range == 1) return\
    \ array($a);\n\n  $x = $a; $y = $b;\n  for ($i = 0; $i < $range; $i++) {\n   \
    \ $x = $x * 10 + $y;\n    $y = $x - $y;\n  }\n  if ($x == $y) {\n    $x = $x +\
    \ 1;\n    $y = $y - 1;\n  }\n\n  $result = array();\n  for ($i = 0; $i < $range;\
    \ $i++) {\n    if ($i % 2 == 0) {\n      $result[] = $x;\n    }\n    $x = $x -\
    \ $y;\n    $y = $x - $y;\n  }\n  return $result;\n}\n</code>\n<|/ a |>\n<| a |>\n\
    Here is an example from my answer to a different question on SO that should help\
    \ you out. \n<code>\n<?php\n", "    $n = $a < $b ? $a : $b;\n    $arr = [];\n\
    \    do {\n        $arr[] = $n;\n    } while ($n != 0);\n    return $arr;\n}\n",
  "    if ($a == 0 || $b == 0) {\n        return array();\n    }\n    $result = 0;\n\
    \    $limit = $b - $a + 1;\n    for ($i = 0; $i < $limit; $i++) {\n        $result\
    \ += 2 * $a - $i;\n    }\n    return $result >= $limit ? array() : array($a, $result\
    \ % $b);\n}\n</code>\nOutput:\n<code>\nArray\n(\n    [0] => 1\n    [1] => 2\n\
    \    [2] => 4\n    [3] => 6\n    [4] => 8\n)\n</code>\nDemo on 3v4l.org\n<|/ a\
    \ tags=php,math,numbers |>\n<| c |>\nThe output for 9 and 10 should be `array(1,2,3)`,\
    \ not `array(1,2,3,4,6,8,10)`\n<|/ c |>\n<| c |>\nYou're right, I fixed it.\n\
    <|/ c |>\n<| c |>\nThanks for the quick reply! This seems to work great for even\
    \ numbers and even numbers that are multiples of 5 as well (for me, at least).\
    \ However, it seems like it doesn't work for odd numbers (as in, it seems to work\
    \ fine for 9 and 10 but it doesn't for 11 and 12)\n<|/ c |>\n<| c |>\nAhh, I see.\
    \ Well, your solution should work regardless of whether it's even or odd, so I'm\
    \ not sure what's going on. Sorry.\n<|/ c |>\n<| c |>\nI think I see what you're\
    \ saying - you're saying I need to include a loop that adds 2 to $a until it reaches\
    \ $b (which is what you've done) instead of trying to calculate $a by itself.\
    \ Is that right?\n<|/ c |>\n<| a |>\n<code>\n<?php", "  $start = max(0, $a - 1);\n\
    \  $end = min($a + 1, $b);\n  return array_filter(range(0, $end - $start + 1),\
    \ function($k) use ($start) {\n    return $start < $k && $k <= $end;\n  });\n\
    }\n", "  $result = array();\n  $start = 0;\n  $end = $a;\n  while ($start < $b)\
    \ {\n    $result[] = $start;\n    $start += 2;\n  }\n  return $result;\n}\n",
  "    $even = array();\n    for ($i = $a; $i <= $b; ++$i) {\n        if ($i % 2 ===\
    \ 0) {\n            $even[] = $i;\n        }\n    }\n    return $even;\n}\n",
  "  global $sequence;\n  $min = min($a, $b);\n  $max = max($a, $b);\n\n  $start =\
    \ $min;\n  $end = $max;\n\n  if ($start == $min) {\n    $start = $min = $max /\
    \ 2;\n  }\n\n  if ($end == $max) {\n    $end = $max *= 2;\n  }\n\n  if ($start\
    \ == $max) {\n    return array();\n  }\n\n  if ($a == $b) {\n    $end = $max;\n\
    \  }\n\n  // Find out how many digits we need to generate.\n  $step = $max - $min\
    \ + 1;\n\n  $result = array();\n\n  for ($i = $min; $i <= $max; $i += $step) {\n\
    \    $result[] = $i;\n  }\n\n  if ($step > 0) {\n    // We've had to generate\
    \ some digits already. Repeat with the new step.\n    return generate_integers($a,\
    \ $b);\n  }\n\n  return $result;\n}\n\n/**\n * Generate all possible permutations\
    \ of an array.\n *\n * @param  array\n * @param  integer The number of permutations\
    \ to return.\n *\n * @return array\n */", "    return range(1, $a-1, -1).\n  \
    \      filter(function ($n) use ($a, $b) {\n            return $n % $a === 0 &&\
    \ $n % $b === 0;\n        }).\n        filter(function ($n) use ($a, $b) {\n \
    \           return $n >= $a && $n <= $b;\n        });\n}\n", "\t$range = $a -\
    \ $b;\n\t$r = [];\n\twhile (count($r) < $range) {\n\t\t$r[] = $b++;\n\t}\n\tsort($r);\n\
    \treturn array_slice($r, 0, $range);\n}\n", "    if ($a < $b) {\n        return\
    \ array();\n    }\n    if ($a <= 0) {\n        return array($a);\n    }\n    $a\
    \ = $a % 10;\n    $b = $b % 10;\n    $ret = $a;\n    if ($a < $b) { //return $a\n\
    \        $ret[] = $b;\n    }\n    return $ret;\n}\n</code>\n<|/ a dscore=0 tags=php,numbers\
    \ |>\n<| a tags=php,numbers |>\nHere is another method without using arrays and\
    \ recursion. This just uses a loop to generate numbers between the given numbers.\n\
    <code>", "  $arr = [];\n  $even = ($a & 1) == 0;\n  $a = $a >> 1;\n  $b = $b >>\
    \ 1;\n  while ($a || $b) {\n    $c = (($a & 1) ? ($a >> 1) : $a);\n    $d = (($b\
    \ & 1) ? ($b >> 1) : $b);\n    $x = $c;\n    $y =  $d;\n    if ($c > $d) {\n \
    \     $y = $x - $y;\n      $c = $c - $d;\n    }\n    $arr[] = $y;\n    $a = $x\
    \ - $c;\n    $b = $y - $d;\n  }\n  array_shift($arr);\n  array_pop($arr);\n  while\
    \ ($arr) {\n    $arr[] = $even;\n    array_shift($arr);\n    array_pop($arr);\n\
    \    $even = !$even;\n  }\n  return $arr;\n}\n", "  $res = [];\n  for ($i = $a;\
    \ $i <= $b; $i++) {\n    // For each number $i in range $a, $b:\n    // 1. if\
    \ $i % 2 == 0 (even), append it to result array\n    // 2. if $i % 2 != 0 (odd),\
    \ subtract it from result array\n    if ($i % 2 == 0) {\n      $res[] = $i;\n\
    \    }\n  }\n  // We are done, return result array\n  return $res;\n}\n", "  $evens\
    \ = array();\n  $m = $b;\n  $n = $a;\n  while ($m > 0) {\n    $evens[] = $m;\n\
    \    $m -= $n;\n    $n += $a;\n  }\n  return $evens;\n}\n", "  $digits = array();\n\
    \  for ($n = $a; $n <= $b; $n++) {\n    $digits[] = $n % 10;\n  }\n  sort($digits);\n\
    \  return array_slice($digits, 0, $b);\n}", "  $evens = array();\n  for ($i =\
    \ $a; $i <= $b; $i++) {\n    if ($i % 2 === 0) {\n      $evens[] = $i;\n    }\n\
    \  }\n  return $evens;\n}\n", "  $evens = array();\n  while ($a <= $b) {\n   \
    \ $evens[] = $a;\n    $a *= 2;\n  }\n  return $evens;\n}\n", "    $result = [];\n\
    \    for ($i = $a; $i <= $b; $i++) {\n        if (is_numeric($i) && is_numeric($a\
    \ / $i)) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n\
    }", "    if ($a === $b) {\n        return array();\n    }\n\n    $numbers = array();\n\
    \    for ($i = $a; $i <= $b; ++$i) {\n        $numbers[] = $i;\n    }\n\n    return\
    \ $numbers;\n}\n", "    $result = array();\n    while ($a <= $b) {\n        $result[]\
    \ = $a;\n        $a = $a + 2;\n    }\n    return $result;\n}\n", "  $numbers =\
    \ array();\n  $i = 0;\n  // Check if $a is a multiple of $b\n  while($a >= $b)\
    \ {\n    // If not, add $a to $numbers and set $a to $b to zero\n    if($a > 0)\
    \ {\n      $numbers[] = $a;\n      $a = 0;\n    } else {\n      $b = 0;\n    }\n\
    \  }\n  // Now we have the correct number of $a numbers between 0 and $b (inclusive)\n\
    \  // and need to find the ones we can get to from $a to $b\n  while($i < $b)\
    \ {\n    $numbers[] = $a;\n    $i++;\n  }\n  return $numbers;\n}\n", "    if ($a\
    \ >= $b) {\n        return;\n    }\n\n    $result = [];\n\n    if ($a > $b) {\n\
    \        $range = $b;\n        $remainder = $a;\n    } else {\n        $range\
    \ = $a;\n        $remainder = $b;\n    }\n\n    for ($i = $range; $i >= 0; $i--)\
    \ {\n        if ($remainder >= $i) {\n            $result[] = $i;\n          \
    \  $remainder -= $i;\n        }\n    }\n\n    return $result;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a |>\nIn general case it's possible to use the Babylonian\
    \ method\n<code>", "    $digits = array();\n    $max = $a < $b ? $a : $b;\n  \
    \  $min = $a > $b ? $a : $b;\n\n    $max = $max - $min;\n    $min = $min + 1;\n\
    \n    for ($i = $min; $i <= $max; $i++) {\n        $digits[] = $i;\n    }\n\n\
    \    return $digits;\n}\n", "  if ($a > $b) {\n    $temp = $a;\n    $a = $b;\n\
    \    $b = $temp;\n  }\n  return array_merge(range($a, $b), range($b + 1, $a));\n\
    }\n", "    $a = max($a, 0);\n    $b = max($b, 0);\n    $c = min($a + 1, $b);\n\
    \    $r = [];\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n\
    \            $r[] = $i;\n        }\n    }\n    if ($a == $b) { // a is b\n   \
    \     if (count($r) == 0) {\n            return [];\n        }\n        sort($r);\n\
    \        $r = [];\n        foreach ($r as $i => $j) {\n            if ($i > 0)\
    \ {\n                $r[$i - 1] = $i;\n            }\n        }\n    }\n    if\
    \ ($c >= $b) {\n        return [];\n    }\n    return $r;\n}\n\n/**\n * Generate\
    \ all integers between min (inclusive) and max (inclusive)\n * with equal or nearby\
    \ digits.\n *\n * @param  integer $min\n * @param  integer $max\n * @return array\
    \ of integers\n */", "  $result = [];\n  for ($i = $a; $i <= $b; ++$i) {\n   \
    \ $result[] = $i;\n  }\n  return $result;\n}\n", "    if ($a < 0 || $b < 0) {\n\
    \        return array();\n    }\n\n    $ret = array();\n\n    if ($a < $b) {\n\
    \        for ($i = $a; $i >= $b; $i--) {\n            $ret[] = $i;\n        }\n\
    \    }\n\n    return $ret;\n}\n", "    // Generate a list of numbers between $a\
    \ and $b (both inclusive).\n    $list = range($a, $b);\n    shuffle($list);\n\
    \    // The first number is $a, so skip it.\n    $list = array_slice($list, 1);\n\
    \    // Add the first number to the end so it ends up in the correct order.\n\
    \    $list[] = $a;\n    // Shuffle the list to ensure numbers are in random order.\n\
    \    shuffle($list);\n    return $list;\n}\n", "  if ($a == 0) {\n    return array();\n\
    \  }\n\n  $evens = array();\n  for ($i = $a; $i <= $b; ++$i) {\n    if (isset($evens[$i]))\
    \ {\n      continue;\n    }\n\n    $digit = $i % 10;\n    if (!isset($evens[$digit]))\
    \ {\n      $evens[$digit] = $i;\n    }\n  }\n\n  return $evens;\n}\n", "    $evens\
    \ = array();\n\n    for ($x = $a; $x <= $b; $x++) {\n        if ($x % 2 === 0)\n\
    \            $evens[] = $x;\n    }\n\n    return $evens;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThe code will never be executed in the browser so I don't think it's\
    \ a good idea to do this with PHP.\n<|/ c |>\n<| c |>\nThis solution is purely\
    \ a PHP exercise, I did not include any server-side code because you said you\
    \ were looking for a solution that would work client side.\n<|/ c |>\n<| c |>\n\
    Thanks for the answer! But I didn't downvote it. My question was about a pure\
    \ JS solution.\n<|/ c |>\n<| c |>\nI never downvoted, but I don't think it makes\
    \ much sense to downvote a working solution, just because it didn't make sense\
    \ to me. I added a JavaScript solution anyway. Hope you don't mind.\n<|/ c |>\n\
    <| c |>\nNo worries, I didn't downvote either - I upvoted it :) But why did you\
    \ put this into an \"if statement\"? And why is the if-statement there at all?\
    \ It makes no sense to me...\n<|/ c |>\n<| a dscore=1 tags=javascript,algorithm\
    \ |>\nI suppose you wanted some kind of \"pure JavaScript\" solution, no jQuery:\n\
    <code>\nvar generate_integers = function(start, end) {\n    var result = [];\n\
    \    var range = end - start;\n    var even;\n    var i;\n\n    for(i = start;\
    \ i < end; i++) {\n        even = (i%2) === 0;\n        if(even) {\n         \
    \   result.push(i);\n        }\n    }\n    return result;\n};\n", "    if (!is_numeric($a)\
    \ || !is_numeric($b)) {\n        return false;\n    }\n    return range($a, $b\
    \ - 1, 2);\n}\n", "  // Initialize our result to empty array\n  $result = array();\n\
    \  // Check if our first value is even and greater than 0\n  if ($a & 1) {\n \
    \   // If it is, add the value to the result\n    $result[] = $a;\n    // Then\
    \ repeat the process with the next value\n    return generate_integers($b, $a\
    \ - 1);\n  }\n  // Else, if our second value is even and greater than 0\n  if\
    \ ($b & 1) {\n    // If it is, add the value to the result\n    $result[] = $b;\n\
    \    // Then repeat the process with the previous value\n    return generate_integers($a,\
    \ $b - 1);\n  }\n  // Otherwise, we have an empty array to return\n  return array();\n\
    }\n", "  $a = max($a, 1);\n  $b = max($b, 1);\n\n  $c = 1;\n  $c = $b > $a ? $b\
    \ : $a;\n  while ($c--) {\n    $result[] = rand($a, $b);\n  }\n\n  return $result;\n\
    }\n", "  if (!is_numeric($a) or !is_numeric($b)) {\n    die('generate_integers\
    \ expects two numbers as arguments.');\n  }\n\n  $digits = array();\n  for ($c\
    \ = $a; $c <= $b; $c++) {\n    $digits[] = $c;\n  }\n  sort($digits);\n  return\
    \ $digits;\n}\n", "  $arr = array();\n\n  for ($i = $a; $i < $b; $i++) {\n   \
    \ $arr[] = $i;\n  }\n\n  return $arr;\n}\n", "  $ints = array();\n  for ($i =\
    \ 0; $i <= $a && $i <= $b; $i++) {\n    if ($i % 2 == 0) {\n      $ints[] = $i;\n\
    \    }\n  }\n  if (count($ints) === 0) {\n    return array();\n  }\n  return array_merge(range($a,\
    \ $b), $ints);\n}\n\n\n/**\n * Creates one or many arrays with random integers\
    \ in the range 0-99.\n * If no numbers are specified, then 10 numbers will be\
    \ generated.\n * If $nums is specified, it will have one element only.\n *\n *\
    \ @param int $nums (optional) The number of numbers to create.\n * @param int\
    \ $min (optional) The minimum number.\n * @param int $max (optional) The maximum\
    \ number.\n *\n * @return array of numbers inclusive\n */", "  if (!$a) {\n  \
    \  return array();\n  }\n\n  $start = min($a, $b);\n  $end = max($a, $b);\n\n\
    \  $integers = array();\n  for ($i = $start; $i <= $end; $i++) {\n    $integers[]\
    \ = $i;\n  }\n  return $integers;\n}\n</code>\n<|/ a tags=php,algorithm |>\n<|\
    \ a dscore=0 |>\n<code>\n$numbers = range(10, 5000);\n\n$numbers = array_intersect($numbers,\
    \ array_merge(range(1, 1000), range(1, 100), range(100, 1000)));\n\n$numbers =\
    \ array_slice($numbers, 0, 2);\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\n\
    This does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post - you can always comment on\
    \ your own posts, and once you have sufficient [reputation](http://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](http://stackoverflow.com/help/privileges/comment).\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post -\
    \ you can always comment on your own posts, and once you have sufficient [reputation](http://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](http://stackoverflow.com/help/privileges/comment).\n\
    <|/ c |>\n<| a |>\n<code>\n<?php\n\n$array1 = range(10,5000);\n$array2 = range(100,1000);\n\
    $array3 = range(1000,1000000);\n\n$result = array_merge($array1,$array2,$array3);\n\
    $result = array_unique($result);\n\nforeach($result as $res)\n{\necho $res.'<br>';\n\
    }\n", "    $evens = array();\n    $result = array();\n    for($x = $a; $x <= $b;\
    \ $x++) {\n        if ($x % 2 == 0) {\n            $evens[] = $x;\n        }\n\
    \    }\n\n    foreach($evens as $key => $even) {\n        $result[] = $even;\n\
    \    }\n\n    return $result;\n}\n", "  $a = intval($a);\n  $b = intval($b);\n\
    \  $result = [];\n  if ($a > $b) {\n    $tmp = $a;\n    $a = $b;\n    $b = $tmp;\n\
    \  }\n  if ($b > 0) {\n    for ($i = $a; $i <= $b; ++$i) {\n      $result[] =\
    \ $i;\n    }\n  }\n  return $result;\n}\n\n", "  $a = max($a, 0);\n  $b = max($b,\
    \ 0);\n  $results = [];\n  for ($i = $a; $i <= $b; ++$i) {\n    if ($i % 2 ==\
    \ 0) {\n      $results[] = $i;\n    }\n  }\n  return $results;\n}\n", "    $result\
    \ = array();\n    $count = 1;\n    for ($i = $a; $i <= $b; $i++) {\n        if\
    \ ($i % 2 == 0) {\n            $result[] = $i;\n            if ($count == $b)\
    \ {\n                $count = 1;\n            } else {\n                $count++;\n\
    \            }\n        }\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI made a mistake. I meant \"ascending order\". I edited my question.\n\
    <|/ c |>\n<| c |>\nOh, sorry about that! I saw that too, just didn't notice it.\
    \ I'll have a proper look tonight.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  if\
    \ ($a === 0 || $b === 0) {\n    return 0;\n  }\n  $result = [];\n  for ($i = $a;\
    \ $i <= $b; ++$i) {\n    if ($i % 2 === 0) {\n      $result[] = $i;\n    }\n \
    \ }\n  return $result;\n}\n", "  $range = range($a, $b); //[a,b]\n  $num = array();\n\
    \  for ($i = 0; $i < count($range); $i++) {\n    $num[] = str_pad(mt_rand($range[$i],\
    \ $range[$i + 1]), $i, '0', STR_PAD_LEFT);\n  }\n  return $num;\n}\n", "  $evens\
    \ = array();\n  for ($i = $a; $i <= $b; ++$i) {\n    if ($i % 2 == 0) {\n    \
    \  $evens[] = $i;\n    }\n  }\n  return $evens;\n}\n", "    $a = intval($a);\n\
    \    $b = intval($b);\n    if ($a > $b) {\n        return array();\n    }\n  \
    \  if ($a > $b) {\n        return array();\n    }\n    $digits = array();\n  \
    \  while ($a != 0) {\n        $a = $a / 10;\n        array_push($digits, $a);\n\
    \        if ($b > 0) {\n            $b = $b / 10;\n        }\n    }\n    array_unshift($digits,\
    \ 0);\n    return $digits;\n}\n", "  $result = [];\n  for ($x = $a; $x <= $b;\
    \ $x++) {\n    if ($x % 2 === 0) {\n      $result[] = $x;\n    }\n  }\n\n  return\
    \ $result;\n}\n", "    $evens = array();\n    for ($c = $a; $c <= $b; ++$c) {\n\
    \        if (is_integer($c))\n            $evens[] = $c;\n    }\n    return $evens;\n\
    }\n", "    foreach (range($a, $b) as $x) {\n        if ($x % 2 == 0) {\n     \
    \       yield $x;\n        }\n    }\n}\n", "  $a = intval($a);\n  $b = intval($b);\n\
    \  if ($a < 0 || $b < 0)\n    return array();\n  $range = $b - $a + 1;\n  $numbers\
    \ = array();\n  for ($i = 0; $i < $range; $i++) {\n    $numbers[] = mt_rand($a\
    \ + 1, $b);\n  }\n  if ($numbers[0] != $a && $numbers[$range - 1] != $b)\n   \
    \ $numbers[] = $a;\n  if ($numbers[count($numbers) - 1] != $b)\n    $numbers[]\
    \ = $b;\n  return $numbers;\n}\n", "  $arr = array();\n  if ($a > $b) {\n    $arr[]\
    \ = $b;\n    $b = $a;\n  }\n  for ($i = $a; $i <= $b; $i++) {\n    if ($i % 2\
    \ == 0) {\n      $arr[] = $i;\n    }\n  }\n  return $arr;\n}\n", "    $list =\
    \ array();\n    while ($a < $b) {\n        $list[] = $a;\n        $a *= 10;\n\
    \    }\n    return $list;\n}\n</code>\nNow the main function could be something\
    \ like this (I haven't tested it so there might be some typos):\n<code>", "  \
    \  $result = array();\n    if ($a > $b) {\n        $a = $b;\n        $b = $a;\n\
    \        $a = $b;\n    }\n    for ($i = $a; $i <= $b; ++$i) {\n        $result[]\
    \ = $i;\n    }\n    asort($result);\n    return $result;\n}\n</code>\n<|/ a dscore=1\
    \ tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays |>\nI like your approach\
    \ of using a foreach loop, but I think you should also consider implementing the\
    \ following idea:\n1) Create a function that will output the array of integers\
    \ in ascending order\n<code>", "  $arr = array();\n  if ($a <= 0) {\n    return\
    \ array();\n  }\n  if ($b < $a) {\n    return array();\n  }\n  $n = abs($b - $a)\
    \ + 1;\n  $div = intval($n / 2) + 1;\n  for ($i = 0; $i <= $div; $i++) {\n   \
    \ $arr[] = intval($a / $i);\n  }\n  for ($i = $div; $i < $n; $i++) {\n    $arr[]\
    \ = $i % 2 == 0 ? intval($i / $n) : $i - 1;\n  }\n  return array_reverse($arr);\n\
    }\n", "    return range(0, $a)\n      + range($a + 1, $b)\n      + range($b +\
    \ 1, $a + 1);\n}\n", "  if ($a < $b) {\n    $a = $b;\n    $b = $a;\n  }\n  return\
    \ range($a, $b + 2);\n}\n", "    $arr = [];\n    $int1 = $a - $b;\n    for($i\
    \ = $int1; $i >= 0; $i--) {\n        $arr[] = $i;\n    }\n    sort($arr);\n  \
    \  return $arr;\n}\n", "    $min = min($a, $b);\n    $max = max($a, $b);\n\n \
    \   $ints = array();\n    while ($min < $max) {\n        $ints[] = $min++;\n \
    \   }\n\n    $ints = array_merge($ints, range($min, $max, 2));\n\n    return array_unique($ints);\n\
    }\n", "    $start = min($a, $b);\n    $end   = max($a, $b);\n    $result = [];\n\
    \    while($start < $end) {\n        $result[] = $start;\n        $start   +=\
    \ ($start + 1);\n    }\n    return $result;\n}\n", "    $a = max(0, $a);\n   \
    \ $b = max(0, $b);\n    $evens = array();\n    $i = $a;\n    $j = $b;\n    while\
    \ ($i < $b) {\n        if ($i % 2 == 0) {\n            $evens[] = $i;\n      \
    \  }\n        $i += 2;\n    }\n    return array_slice($evens, $a - $b);\n}\n\n\
    /**\n * Return the lowest value from an array using an appropriate key function\n\
    \ * and value comparison function.\n *\n * @param array  $array   Array to sort.\n\
    \ * @param string $keyFunc Comparison function for the keys of `$array`.\n * @param\
    \ string $valueFunc Comparison function for the values of `$array`.\n * @return\
    \ int|string Lowest value in the array.\n */", "  $evens = array();\n  $odds =\
    \ array();\n  for($i = $a; $i < $b; $i++) {\n    if($i % 2 === 0) {\n      $evens[]\
    \ = $i;\n    } else {\n      $odds[] = $i;\n    }\n  }\n  return $evens + $odds;\n\
    }\n", "    $num = array();\n    $num[] = $a;\n    $num[] = $b;\n    $result =\
    \ '';\n    for ($i = $a; $i <= $b; $i++) {\n        $digit = get_digit($i, $num);\n\
    \        $result = $digit . $result;\n    }\n    return explode(\" \", $result);\n\
    }\n", "  $result = [];\n\n  for ($i = $a; $i < $b; $i++) {\n    if ($i % 2 ==\
    \ 0) {\n      $result[] = $i;\n    }\n  }\n\n  return $result;\n}\n", "    $result\
    \ = array();\n    for ($i = 0; $i < $a; $i++) {\n        if ($i > 0) {\n     \
    \       $result[] = $i;\n        }\n    }\n    for ($i = 0; $i < $b; $i++) {\n\
    \        if ($a >= $b) {\n            break;\n        }\n        $result[] = $i;\n\
    \    }\n    sort($result);\n    return $result;\n}\n\n/**\n * Given a positive\
    \ integer n and three positive integer m and h, returns the sum of the first n\
    \ primes\n * in the interval [m, h] inclusive.\n *\n * For example,\n * >>> generate_primes(10,\
    \ 15)\n * array(3, 5, 7, 11)\n * >>> generate_primes(7, 4)\n * array(7, 11, 13,\
    \ 17)\n * >>> generate_primes(8, 5)\n * array()\n * >>> generate_primes(3, 1)\n\
    \ * array(3)\n */", "  // $a and $b must be positive integers\n  if ($a < 0 ||\
    \ $b < 0) {\n    return array();\n  }\n\n  // Build an array with all the positive\
    \ integers between $a and $b\n  $numbers = array();\n  for ($i = $a; $i <= $b;\
    \ $i++) {\n    $numbers[] = $i;\n  }\n\n  // Sort the numbers array in ascending\
    \ order\n  sort($numbers);\n\n  // Return the even digits\n  return array_filter(array_chunk($numbers,\
    \ 2), 'is_int');\n}\n", "  $result = array();\n  do {\n    $result[] = random_digit($a,\
    \ $b);\n  } while ($result[0] <= $b);\n\n  return $result;\n}\n\n", "    if ($a\
    \ < $b) {\n        return array();\n    }\n    $rem = $a % $b;\n    $even = array();\n\
    \    do {\n        $even[] = $rem;\n        $a = $b;\n        $b = $a % $b;\n\
    \        $a = $b;\n        $b = $a % $b;\n        $a = $b;\n        $b = $a %\
    \ $b;\n        $a = $b;\n        $b = $a % $b;\n        $a = $b;\n        $b =\
    \ $a % $b;\n        $a = $b;\n        $b = $a % $b;\n        $a = $b;\n      \
    \  $b = $a % $b;\n        $a = $b;\n        $b = $a % $b;\n        $a = $b;\n\
    \        $b = $a % $b;\n        $a = $b;\n        $b = $a % $b;\n        $a =\
    \ $b;\n        $b = $a % $b;\n        $a = $b;\n        $b = $a % $b;\n      \
    \  $a = $b;\n        $b = $a % $b;\n        $a = $b;\n        $b = $a % $b;\n\
    \        $a = $b;\n        $b = $a % $b;\n        $a = $b;\n        $b = $a %\
    \ $b;\n        $a = $b;\n        $b = $a % $b;\n        $a = $b;\n        $b =\
    \ $a % $b;\n        $a = $b;\n        $b = $a % $b;\n        $a = $b;\n      \
    \  $b = $a % $b;\n        $a = $b;\n        $b = $a % $b;\n        $a = $b;\n\
    \        $b = $a % $b;\n        $a = $b;\n        $b = $a % $b;\n        $a =\
    \ $b;\n        $b = $a % $b;\n        $a = $b;\n        $b = $a % $b;\n      \
    \  $a = $b;\n        $b = $a % $b;\n        $a = $b;\n        $b = $a % $b;\n\
    \        $a = $b;\n        $b = $a % $b;\n        $a = $b;\n        $b = $a %\
    \ $b;\n        $a = $b;\n        $b = $a % $b;\n        $a = $b;\n        $b =\
    \ $a % $b;\n        $a = $b;\n        $b = $a % $b;\n        $a = $b;\n      \
    \  $b = $a % $b;\n        $a = $b;\n        $b = $a % $b;\n        $a = $b;\n\
    \        $b = $a % $b;\n        $a = $b;\n        $b = $a % $b;\n        $a =\
    \ $b;\n        $b = ", "    $numbers = range($a, $b);\n    $return = array();\n\
    \    foreach ($numbers as $number) {\n        $return[] = $number % 10;\n    \
    \    $number = floor($number / 10);\n    }\n    return $return;\n}\n", "    return\
    \ array_filter(range($a, $b), function ($x) {\n        return is_integer($x) &&\
    \ $x % 2 === 0;\n    });\n}\n</code>\nI use this to return only even numbers in\
    \ a range.  You could easily tweak the function so that it only returned odd numbers\
    \ (by changing $x % 2 === 0 to $x % 2 !== 0).\n<|/ a tags=arrays,php dscore=0\
    \ |>\n<| a dscore=0 tags=arrays,php |>\nThis may do the trick:\n<code>\n$a = [];\n\
    $b = [1,5,2,8,3];\nfor ($i=0;$i<=count($b)-2;$i++){\n    if ($b[$i] <= $b[$i+1]){\n\
    \        $a[] = $b[$i];\n    }else{\n        break;\n    }\n}\n</code>\nThis gives:\
    \ \n<code>\nArray\n(\n    [0] => 1\n    [1] => 5\n    [2] => 2\n    [3] => 8\n\
    )\n</code>\n<|/ a |>\n<| a dscore=0 |>\nTry this\n<code>\n$a = [];\n$b = [1,5,2,8,3];\n\
    \n$c = $b;\n\narray_push($b, $c[count($b)-1]+1);\nforeach ($b as $key => $value)\
    \ {\n    if ($value == $b[$key+1]) {\n        $a[] = $value;\n        unset($c[$key+1]);\n\
    \    }\n}\n\nprint_r($a);\n</code>\nOutput\n<code>\nArray\n(\n    [0] => 1\n \
    \   [1] => 5\n    [2] => 2\n    [3] => 8\n)\n</code>\n<|/ a tags=arrays,php |>\n\
    <| a dscore=0 |>\nI like answers above so I modified a bit and added some comments\
    \ to show why it is working.\n<code>\n$range = [1,5,2,8,3];\n", "    if ($a ===\
    \ 0 && $b === 0) {\n        return array();\n    }\n\n    $ret = array();\n  \
    \  $m = max(1, $a, $b);\n    do {\n        $ret[] = intval($a % 10);\n       \
    \ $a = $a / 10;\n    } while ($a > 0);\n\n    do {\n        $ret[] = intval($b\
    \ % 10);\n        $b = $b / 10;\n    } while ($b > 0);\n\n    return array_reverse($ret);\n\
    }\n", "  if (!is_integer($a) || !is_integer($b)) {\n    return array();\n  }\n\
    \  $result = [];\n  if ($a < $b) {\n    $temp = $a;\n    $a = $b;\n    $b = $temp;\n\
    \  }\n  for ($i = $a; $i <= $b; $i++) {\n    $result[] = $i;\n  }\n  return array_merge($result,\
    \ generate_integers($b, $a % $b));\n}", "  $evens = array();\n  for ($i = $a;\
    \ $i <= $b; $i++) {\n    if ($i % 2 == 0) {\n      $evens[] = $i;\n    }\n  }\n\
    \  return $evens;\n}\n", "    // Initialize $c to 0\n    $c = 0;\n\n    // Initialize\
    \ $odd to 0\n    $odd = 0;\n\n    // Initialize $i to 0\n    $i = 0;\n\n    //\
    \ Initialize $result to an empty array\n    $result = array();\n\n    // Add all\
    \ the even digits from 0 to 10 to the $result array\n    while ($c <= $b) {\n\
    \        $result[] = $c;\n        $c = $c + 2;\n    }\n\n    // Add all the odd\
    \ digits from 0 to $b to the $result array\n    while ($a >= $odd + 2) {\n   \
    \     $result[] = $odd;\n        $odd = $odd + 2;\n    }\n\n    // Return the\
    \ $result array\n    return $result;\n}\n", "    $arr = [];\n    for ($x = $a;\
    \ $x <= $b; $x++) {\n        $arr[] = $x;\n    }\n    sort($arr);\n    return\
    \ $arr;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nThis doesn't work\
    \ for me. I've been trying to implement the ideas from this question http://stackoverflow.com/questions/1969240/php-array-range-between-two-numbers\
    \ and it only seems to get me the same array back that I started with. I've been\
    \ fiddling around with it but I can't get anywhere.\n<|/ c |>\n<| c |>\nYou didn't\
    \ post any code so I can't tell you what's wrong with it. I would suggest you\
    \ ask a new question if you're still having problems. Also, please accept the\
    \ answer if this one solved your problem.\n<|/ c |>\n<| c |>\nAh sorry. Didn't\
    \ know there was a separate SO section for that. Will do that\n<|/ c |>\n<| a\
    \ tags=php,arrays,sorting |>\nThis is my solution:\n<code>", "  if (!$a && $b\
    \ && $a != $b) {\n    return array();\n  }\n  $result = [];\n  for ($i = $a; $i\
    \ <= $b; ++$i) {\n    $result[] = $i;\n  }\n  sort($result);\n  return $result;\n\
    }\n", "    $even = array();\n    $lower = ($a < $b) ? $a : $b;\n    $upper = ($a\
    \ > $b) ? $a : $b;\n    for ($i = $lower; $i <= $upper; $i++) {\n        $even[]\
    \ = $i;\n    }\n    return $even;\n}\n", "  $result = [];\n  for ($i = $a; $i\
    \ <= $b; $i++) {\n    if ($i % 2 == 0) {\n      $result[] = $i;\n    }\n  }\n\
    \  return $result;\n}\n", "  $evens = array();\n  while ($a != 0) {\n    $evens[]\
    \ = $a % 10;\n    $a = floor($a / 10);\n  }\n  $evens = array_reverse($evens);\n\
    \  if ($b != 0) {\n    $a = floor($a / 10);\n    while ($a != 0) {\n      $evens[]\
    \ = $a % 10;\n      $a = floor($a / 10);\n    }\n  }\n  return $evens;\n}\n",
  "    $a *= 2; // Make sure that a is even.\n    $b *= 2; // Make sure that b is\
    \ even.\n    $a = intval($a); // Make sure that $a is an integer.\n    $b = intval($b);\
    \ // Make sure that $b is an integer\n    $arr = [];\n    if ($a < 10) {\n   \
    \     $arr[] = $a;\n    }\n    if ($b < 10) {\n        $arr[] = $b;\n    }\n \
    \   do {\n        $arr[] = ($a % 10) + ($b % 10);\n        if ($a < 10) {\n  \
    \          $a++;\n        } else {\n            $b++;\n        }\n    } while\
    \ ($a < 10);\n    while (array_pop($arr) > 10) {\n        array_pop($arr);\n \
    \   }\n    return $arr;\n}\n</code>\n<|/ a tags=php |>\n<| a tags=php |>\nMy solution\
    \ is similar to John Conde's but it's cleaner in my opinion and uses fewer lines\
    \ of code.\n<code>\n$numbers = range(1,11);\n$number = 6;\n$result = $numbers[array_search($number,\
    \ $numbers)];\nvar_dump($result);\n</code>\nThe array_search function returns\
    \ the key of a value in a particular array. I'm basically just searching the array\
    \ for the $number and then picking the corresponding value from the $numbers array.\n\
    <|/ a dscore=1 |>\n<| c |>\nWow, that's an interesting way of doing it too\n<|/\
    \ c |>\n<| a dscore=1 |>\nI have implemented this using recursion, this is just\
    \ in case you want to get the even numbers between two given numbers.\n<code>\n\
    <?php", "    sort($a, $b);\n    return array_filter(range('2'.$a, $b), 'is_numeric');\n\
    }\n", "  $even = array();\n\n  if ($a > $b) {\n    list($a, $b) = array($b, $a);\n\
    \  }\n\n  for ($i = 0; $i <= $b; $i++) {\n    if (($i % $a < $a) || !($i % $b))\
    \ {\n      $even[] = $i;\n    }\n  }\n\n  return $even;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nYou don't even need to sort the whole list. Just use the difference between\
    \ the two limits to work out the limits of the array.\n<|/ c |>\n<| c |>\nI used\
    \ a variation of this to sort an array containing 10,000+ items in about 3 seconds.\
    \ Thank you.\n<|/ c |>\n<| c |>\n, You're right but in my case the difference\
    \ between both limits was not the same so I needed the array to be sorted. :)\n\
    <|/ c |>\n<| c |>\nI missed the part about sorting. I thought you wanted to avoid\
    \ sorting the whole list.\n<|/ c |>\n<| c |>\n, No problem. Glad it helped you\
    \ too. :)\n<|/ c |>\n<| a tags=php |>\nThe trick is to find the difference between\
    \ $a and $b, and create an array of that many numbers and then use array_unique()\
    \ to remove duplicates.\n<code>", "    // Initialize $i to 0 as long as $a is\
    \ greater than or equal to $b.\n    for ($i = 0; $a <= $b; $i++)\n        if ($a\
    \ % 2 == 0)\n            yield $i;\n}\n", "    $numbers = range($a, $b);\n   \
    \ sort($numbers);\n    $result = array();\n    foreach ($numbers as $number) {\n\
    \        if ($number % 2 === 0) {\n            $result[] = $number;\n        }\n\
    \    }\n    return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nA variation on this\
    \ answer would be to sort the array in descending order and just use array_slice()\
    \ to return the even digits. I posted a variation on this answer on [this question](http://stackoverflow.com/questions/4469665/returning-array-of-the-even-numbers-between-2-numbers/4469740#4469740).\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>", "    $result = [];\n    for ($i = $a; $i\
    \ <= $b; $i++) {\n        if ($i % 2 == 0) {\n            $result[] = $i;\n  \
    \      }\n    }\n    return $result;\n}\n", "    if ($a > $b) {\n        $temp\
    \ = $a;\n        $a = $b;\n        $b = $temp;\n    }\n    $numbers = array();\n\
    \    while ($a > 0) {\n        $b = floor(($b - $a) / 2);\n        $numbers[]\
    \ = $b;\n        $a = $a - $b;\n    }\n    return $numbers;\n}\n", "  $result\
    \ = [];\n  for ($i = $a; $i <= $b; $i++) {\n    $result[] = $i;\n  }\n  sort($result);\n\
    \  return $result;\n}\n\n$input = <<<EOF\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\
    12\n13\n14\nEOF;\n$expected_output = generate_integers(1, 14);\n$expected_output_text\
    \ = join(\"\\n\", $expected_output);\n\n$input = <<<EOF\n1\n2\n3\n4\n5\n6\n7\n\
    8\n9\n10\n11\n12\n13\nEOF;\n$expected_output = generate_integers(1, 12);\n$expected_output_text\
    \ = join(\"\\n\", $expected_output);\n\n$input = <<<EOF\n1\n2\n3\n4\n5\n6\n7\n\
    8\n9\n10\n11\n12\nEOF;\n$expected_output = generate_integers(1, 12);\n$expected_output_text\
    \ = join(\"\\n\", $expected_output);\n\n$input = <<<EOF\n1\n2\n3\n4\n5\n6\n7\n\
    8\n9\n10\nEOF;\n$expected_output = generate_integers(1, 10);\n$expected_output_text\
    \ = join(\"\\n\", $expected_output);\n\n$input = <<<EOF\n1\n2\n3\n4\n5\n6\n7\n\
    8\n9\nEOF;\n$expected_output = generate_integers(1, 9);\n$expected_output_text\
    \ = join(\"\\n\", $expected_output);\n\n$input = <<<EOF\n1\n2\n3\n4\n5\n6\n7\n\
    EOF;\n$expected_output = generate_integers(1, 7);\n$expected_output_text = join(\"\
    \\n\", $expected_output);\n\n$input = <<<EOF\n1\n2\n3\n4\n5\n6\nEOF;\n$expected_output\
    \ = generate_integers(1, 6);\n$expected_output_text = join(\"\\n\", $expected_output);\n\
    \n$input = <<<EOF\n1\n2\n3\n4\n5\nEOF;\n$expected_output = generate_integers(1,\
    \ 5);\n$expected_output_text = join(\"\\n\", $expected_output);\n\n$input = <<<EOF\n\
    1\n2\n3\n4\nEOF;\n$expected_output = generate_integers(1, 4);\n$expected_output_text\
    \ = join(\"\\n\", $expected_output);\n\n$input = <<<EOF\n1\n2\n3\nEOF;\n$expected_output\
    \ = generate_integers(1, 3);\n$expected_output_text = join(\"\\n\", $expected_output);\n\
    \n$input = <<<EOF\n1\n2\n", "  $result = [];\n  if ($a > $b) {\n    $a = $b;\n\
    \    $b = $a;\n  }\n  for ($i = $a; $i <= $b; $i++) {\n    $result[] = $i;\n \
    \ }\n  return $result;\n}\n", "  if(!$a && !$b) {\n    return array();\n  } else\
    \ if(!$a && $b) {\n    return range($b, $a + 1);\n  } else if($a && !$b) {\n \
    \   return range($a, $b - 1);\n  }\n\n  $a = (int)$a;\n  $b = (int)$b;\n\n  if($b\
    \ - $a < 4) {\n    return array();\n  }\n\n  $result = 0;\n  $limit = $b - $a\
    \ + 1;\n  for($i = $a; $i <= $b; ++$i) {\n    $result = $result * 10 + (int)$i;\n\
    \  }\n\n  $result = str_split(str_repeat(substr($result, -$limit), $limit));\n\
    \  sort($result);\n  unset($result);\n\n  return $result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis is still not working 100%. It is returning all zeros. Like\
    \ array(1, 2, 3, 4, 5), array(0, 0, 0, 0, 0, 0)\n<|/ c |>\n<| c |>\nI made a change\
    \ that should fix your issue.\n<|/ c |>\n<| c |>\nThe only problem with this solution\
    \ is that it takes twice as long to execute as your solution.\n<|/ c |>\n<| c\
    \ |>\nI believe there is a much faster solution that requires less code. I've\
    \ updated my answer to include an implementation that requires less code.\n<|/\
    \ c |>\n<| c |>\nYour solution is exactly the same as mine. The code will fail\
    \ for big numbers. Try your code against `generate_integers(600, 1000)` :-)\n\
    <|/ c |>\n<| a tags=random,php,algorithm |>\nI have made some changes to your\
    \ code that make it work. Try it below:\n<code>\n<?php", "  $digits = array();\n\
    \  $a = abs($a);\n  $b = abs($b);\n  while ($a >= $b) {\n    $digits[] = $a%10;\n\
    \    $a = floor($a/10);\n  }\n  return $digits;\n}\n", "    if ($a < $b) {\n \
    \       $temp = $a;\n        $a = $b;\n        $b = $temp;\n    }\n    $res =\
    \ array();\n    while ($a < $b) {\n        $res[] = $a;\n        $a++;\n    }\n\
    \    return $res;\n}\n", "  $ans = array();\n  for ($i = $a; $i < $b; $i++) {\n\
    \    if ($i % 2 == 0) {\n      $ans[] = $i;\n    }\n  }\n  return $ans;\n}\n",
  "  if ($a <= 0 || $b <= 0) return array();\n  if ($a == $b && $a > 0) return array($a);\n\
    \  $min = min($a, $b);\n  $max = max($a, $b);\n  $retval = array();\n  for ($i\
    \ = $min; $i <= $max; ++$i) {\n    $retval[] = $i;\n  }\n  return $retval;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
