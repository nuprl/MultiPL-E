language: php
name: HumanEval_25_factorize
results:
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = $factorArray = array();\n\
    \    for ($i = 2; $i <= sqrt($n); ++$i) {\n        if ($n % $i == 0) {\n     \
    \       $factors[$i] = $factorArray[$i] = $factorArray[$i - 1] + 1;\n        \
    \    $n /= $i;\n        }\n    }\n    if (!$n) {\n        $factors[] = $factorArray[]\
    \ = 1;\n    }\n    return $factors;\n}\n</code>\n<|/ a dscore=4 tags=php,python,primes,math,factorization\
    \ |>\n<| c |>\nThe OP is trying to solve the problem at http://en.wikipedia.org/wiki/Primality_test\n\
    <|/ c |>\n<| c |>\nThanks this is exactly what I was looking for - I really appreciate\
    \ all the detailed examples and the code.\n<|/ c |>\n<| c |>\nI like the fact\
    \ that you use `sqrt($n)` instead of using [Euclid's algorithm](http://en.wikipedia.org/wiki/Euclid%27s_algorithm),\
    \ but wouldn't you use `sqrt($n)` if you needed to get all factors of `$n` not\
    \ just the first one ?\n<|/ c |>\n<| c |>\n: No, Euclid's algorithm doesn't care\
    \ about the remainder, so it needs one more division than is necessary. If you\
    \ use the Euclid's algorithm for prime factorization of a large prime, then you\
    \ get more factors than you want. So Euclid's algorithm is still a better starting\
    \ point than starting with a large prime and then finding the factors yourself.\n\
    <|/ c |>\n<| a dscore=4 tags=php,python,primes,math,factorization |>\nI found\
    \ this solution very elegant, and I tested it on a bunch of prime numbers that\
    \ came from my own testing. \n<code>\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpn1b82khy.php
    on line 24

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    $factor =\
    \ 1;\n\n    do {\n        if ($n % $factor == 0) {\n            $factors[] = $factor;\n\
    \            $n = $n / $factor;\n        } else {\n            $factor *= 2;\n\
    \        }\n    } while ($factor != 1);\n\n    return $factors;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe81fmcww.php:32\n\
    Stack trace:\n#0 /tmp/tmpe81fmcww.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpe81fmcww.php\
    \ on line 32\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factorization = array(1 => $n);\n\
    \n    foreach ($factorization as $factor => $n) {\n        while ($n % $factor\
    \ == 0) {\n            $factorization[$factor] *= $factor;\n            $n /=\
    \ $factor;\n        }\n    }\n\n    return array_filter($factorization, function($v)\
    \ {\n        return $v > 1;\n    });\n}\n</code>\nThis code can be improved a\
    \ lot but should work for most common cases.\n<|/ a |>\n<| c |>\nI really like\
    \ it! I really appreciate all the explanation.\n<|/ c |>\n<| c |>\nI edited your\
    \ code so I made it return the factors in descending order. Thanks for the tip\
    \ on efficiency. Also made it so I could feed in integers larger than int and\
    \ it will return the factors.\n<|/ c |>\n<| a tags=php,factorization,algorithm\
    \ |>\nHere's a purely PHP implementation of Tomasz's solution that also returns\
    \ the factors in descending order if there are any greater than 2:\n<code>\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp1zmtatqt.php
    on line 25

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array(array());\n\
    \    for($i = 1; $i <= sqrt($n); $i++) {\n        for($j = 0, $k = $i; $j <= $k;\
    \ $j++) {\n            if($n % $k == 0) {\n                $factors[count($factors)\
    \ - 1][] = $k;\n                $n = $n / $k;\n            }\n        }\n    }\n\
    \    return $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyl0bnx6t.php:29\n\
    Stack trace:\n#0 /tmp/tmpyl0bnx6t.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpyl0bnx6t.php\
    \ on line 29\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $a = $primes = array();\n   \
    \ $m = 1;\n    while ($n % $m) {\n        $m = $m * 3 + (int)($n / $m);\n    \
    \    $primes[] = $m;\n    }\n    $factors = $primes;\n    while ($n % $m = $m)\
    \ {\n        while ($n % $m) {\n            $n = $n / $m;\n            $factors[][]\
    \ = $m;\n        }\n        $m = $m * 3 + (int)($n / $m);\n    }\n    ksort($factors);\n\
    \    return $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptnab23ah.php:35\n\
    Stack trace:\n#0 /tmp/tmptnab23ah.php(45): test()\n#1 {main}\n  thrown in /tmp/tmptnab23ah.php\
    \ on line 35\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factorization = array();\n\n\
    \    $smallestFactor = min($n, $n / 2);\n    for ($i = 2; $i <= $smallestFactor;\
    \ ++$i) {\n        if ($n % $i == 0) {\n            // Factors repeated more than\
    \ once are stored multiple times\n            while (isset($factorization[$i])\
    \ && $factorization[$i] == $i) {\n                $factorization[$i++] += 1;\n\
    \            }\n            $factorization[$i] = $i;\n        }\n    }\n\n   \
    \ if ($n % $smallestFactor != 0) {\n        $factorization[$smallestFactor] =\
    \ $smallestFactor;\n    }\n\n    return $factorization;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr2nipx8x.php:36\n\
    Stack trace:\n#0 /tmp/tmpr2nipx8x.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpr2nipx8x.php\
    \ on line 36\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    do {\n  \
    \      $factors[] = $n % 2 == 0 ? 2 : 3;\n        $n = $n / 2;\n    } while ($n\
    \ > 1);\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 28.5 to int loses precision\
    \ in /tmp/tmpbvuwg7dn.php on line 14\n\nDeprecated: Implicit conversion from float\
    \ 14.25 to int loses precision in /tmp/tmpbvuwg7dn.php on line 14\n\nDeprecated:\
    \ Implicit conversion from float 7.125 to int loses precision in /tmp/tmpbvuwg7dn.php\
    \ on line 14\n\nDeprecated: Implicit conversion from float 3.5625 to int loses\
    \ precision in /tmp/tmpbvuwg7dn.php on line 14\n\nDeprecated: Implicit conversion\
    \ from float 1.78125 to int loses precision in /tmp/tmpbvuwg7dn.php on line 14\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbvuwg7dn.php:28\nStack\
    \ trace:\n#0 /tmp/tmpbvuwg7dn.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpbvuwg7dn.php\
    \ on line 28\n"
  timestamp: 1659979577
- exit_code: -1
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n    $pm\
    \ = 1;\n    $pm2 = $pm;\n    do {\n        while ($n % $pm) {\n            $factors[]\
    \ = $pm2;\n            $pm2++;\n            $n /= $pm;\n        }\n        $pm++;\n\
    \        if ($n == 1) {\n            break;\n        }\n        $pm2 = $pm;\n\
    \    } while (true);\n    sort($factors);\n    return $factors;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: 'b''\nDeprecated: Implicit conversion from float 0.6666666666666666 to int
    loses precision in /tmp/tmpytbxta2w.php on line 16\n\nDeprecated: Implicit conversion
    from float 0.6666666666666666 to int loses precision in /tmp/tmpytbxta2w.php on
    line 16\n\nDeprecated: Implicit conversion from float 0.6666666666666666 to int
    loses precision in /tmp/tmpytbxta2w.php on line 16\n\nDeprecated: Implicit conversion
    from float 0.6666666666666666 to int loses precision in /tmp/tmpytbxta2w.php on
    line 16\n\nDeprecated: Implicit conversion from float 0.6666666666666666 to int
    loses precision in /tmp/tmpytbxta2w.php on line 16\n\nDeprecated: Implicit conversion
    from float 0.6666666666666666 to int loses precision in /tmp/tmpytbxta2w.php on
    line 16\n\nDeprecated: Implicit conversion from float 0.6666666666666666 to int
    loses precision in /tmp/tmpytbxta2w.php on line 16\n\nDeprecated: Implicit conversion
    from float 0.6666666666666666 to int loses precision in /tmp/tmpytbxta2w.php on
    line 16\n\nDeprecated: Implicit conversion from float 0.6666666666666666 to int
    loses precision in /tmp/tmpytbxta2w.php on line 16\n\nDeprecated: Implicit conversion
    from float 0.6666666666666666 to int loses precision in /tmp/tmpytbxta2w.php on
    line 16\n\nDeprecated: Implicit conversion from float 0.6666666666666666 to int
    loses precision in /tmp/tmpytbxta2w.php on line 16\n\nDeprecated: Implicit conversion
    from float 0.6666666666666666 to int loses precision in /tmp/tmpytbxta2w.php on
    line 16\n\nDeprecated: Implicit conversion from float 0.6666666666666666 to int
    loses precision in /tmp/tmpytbxta2w.php on line 16\n\nDeprecated: Implicit conversion
    from float 0.6666666666666666 to int loses precision in /tmp/tmpytbxta2w.php on
    line 16\n\nDeprecated: Implicit conversion from float 0.6666666666666666 to int
    loses precision in /tmp/tmpytbxta2w.php on line 16\n\nDeprecated: Implicit conversion
    from float 0.6666666666666666 to int loses precision in /tmp/tmpytbxta2w.php on
    line 16\n\nDeprecated: Implicit conversion from float 0.6666666666666666 to int
    loses p'
  timestamp: 1659979583
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $factors = array();\n\n  for ($i\
    \ = 1; $i <= $n; ++$i) {\n    $temp = $i;\n    $temp++;\n    $fact = 1;\n    while\
    \ ($temp <= $n) {\n      $fact = ($fact * $i);\n      $temp++;\n    }\n\n    $factors[]\
    \ = $fact;\n  }\n\n  return $factors;\n}\n\nfunction candidate(...$args) {\n \
    \   return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1chnocie.php:34\n\
    Stack trace:\n#0 /tmp/tmp1chnocie.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp1chnocie.php\
    \ on line 34\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $results = [];\n    $i = 2;\n\
    \    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $results[]\
    \ = $i;\n            while ($n % ($i * $i) == 0) {\n                $results[]\
    \ = $i * $i;\n                $n /= ($i * $i);\n            }\n            $i++;\n\
    \        }\n    }\n    $results[] = $n;\n    return $results;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk9d6t_cm.php:34\n\
    Stack trace:\n#0 /tmp/tmpk9d6t_cm.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpk9d6t_cm.php\
    \ on line 34\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $prime = array(1);\n  $i = $n;\
    \ //factorization\n  $p = 2; //starts with 2\n  $factors = array();\n  while($i\
    \ <= $n)\n  {\n    for($j = 1; $j <= $i; $j++)\n    {\n      if($i % $j == 0)\n\
    \      {\n        $factors[] = $p;\n        $i = $n/$j;\n        break;\n    \
    \  }\n    }\n    $prime[] = $p;\n    $p = $p*2;\n    $i++;\n  }\n  return $factors;\n\
    }\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpob0n82in.php:39\n\
    Stack trace:\n#0 /tmp/tmpob0n82in.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpob0n82in.php\
    \ on line 39\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array();\n\tfor ($i\
    \ = 1; $i <= $n; $i++) {\n\t\t$j = 0;\n\t\t$temp = $i;\n\t\twhile ($temp > 1)\
    \ {\n\t\t\t$temp = $temp / $j;\n\t\t\t$j++;\n\t\t}\n\t\t$factors[$j] = $i;\n\t\
    }\n\trsort($factors);\n\treturn $factors;\n}\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Division by zero in /tmp/tmpaue563z8.php:17\n\
    Stack trace:\n#0 /tmp/tmpaue563z8.php(27): factorize(2)\n#1 /tmp/tmpaue563z8.php(31):\
    \ candidate(2)\n#2 /tmp/tmpaue563z8.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpaue563z8.php\
    \ on line 17\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  if ($n == 1) {\n    return array();\n\
    \  }\n\n  $factors = array(1);\n  for ($i = 2; $i <= floor(log($n)); ++$i) {\n\
    \    if ($n % $i == 0) {\n      $factors[$i] = $i + 1;\n      $n = $n / $i;\n\
    \    } else {\n      break;\n    }\n  }\n\n  return $factors;\n}\n</code>\n<|/\
    \ a tags=recursion,algorithm,php,factors |>\n<| c |>\nThank you, this is exactly\
    \ what I needed.\n<|/ c |>\n<| c |>\nThis is really clever. Thanks for the example\
    \ with multiple factorial numbers.\n<|/ c |>\n<| c |>\nThank you, this is what\
    \ I was looking for.\n<|/ c |>\n<| c |>\nThe only issue with this solution is\
    \ that if `n` is prime it returns `n` as a factor.\n<|/ c |>\n<| a dscore=4 tags=recursion,algorithm,php,factors\
    \ |>\nThe most simple algorithm I know is as follows:\n<code>\npublic function\
    \ factorize($n)\n{\n    $factors = array();\n    for($i = 1; $i <= sqrt($n); $i++)\n\
    \    {\n        if ($n % $i == 0)\n        {\n            $factors[] = $i;\n \
    \           $n /= $i;\n        }\n    }\n    return $factors;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThis is a great solution for small numbers, I like the fact that\
    \ it is a recursive function without using factorial.\n<|/ c |>\n<| a dscore=3\
    \ tags=recursion,algorithm,php,factors |>\nHere's a solution which checks if the\
    \ number is a prime number:\n<code>\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmptkf8y3ae.php
    on line 28

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factorization = array();\n \
    \   $p = $n;\n    while($p != 1) {\n        $d = $n / $p;\n        if(!isset($factorization[$d]))\
    \ {\n            $factorization[$d] = 0;\n        }\n        $factorization[$d]++;\n\
    \        $n = $p;\n        $p--;\n    }\n    return array_reverse($factorization);\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpueaehcka.php:31\n\
    Stack trace:\n#0 /tmp/tmpueaehcka.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpueaehcka.php\
    \ on line 31\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    \n    $factorizer = array();\n\
    \    \n    foreach (range(1, $n + 1) as $i) {\n        if (!in_array($i, $factorizer))\
    \ {\n            $factorizer = array_merge($factorizer, getPrimeFactors($i));\n\
    \        }\n    }\n    \n    return $factorizer;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function getPrimeFactors()\
    \ in /tmp/tmph8hgoqtf.php:17\nStack trace:\n#0 /tmp/tmph8hgoqtf.php(24): factorize(2)\n\
    #1 /tmp/tmph8hgoqtf.php(28): candidate(2)\n#2 /tmp/tmph8hgoqtf.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmph8hgoqtf.php on line 17\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  // Start with largest prime factor\
    \ 2\n  $p = 2;\n  $factors = array();\n\n  // Factor into smaller numbers to eliminate\
    \ primes\n  while ($n % $p != 0) {\n    $factors[] = $p;\n    // Eliminate this\
    \ prime from the remainder\n    $n = $n / $p;\n    // If no more primes are left,\
    \ factor into the next smaller number\n    if ($n == 1) $p = $p * 2;\n  }\n  //\
    \ If we ended up with a factor of 1, add it to the list\n  if ($n == 1) $factors[]\
    \ = 1;\n\n  return $factors;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpydgd3z2x.php:34\n\
    Stack trace:\n#0 /tmp/tmpydgd3z2x.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpydgd3z2x.php\
    \ on line 34\n"
  timestamp: 1659979577
- exit_code: -1
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    $i = 2;\n\
    \    while(true) {\n        if($n % $i == 0) {\n            $factors[$i][] = $i;\n\
    \            $n = $n / $i;\n        } else {\n            $i++;\n        }\n \
    \       if($n == 0) {\n            break;\n        }\n    }\n    return $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979582
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    \n    $factorization = array($n);\n\
    \    $product = 1;\n    \n    // Loop through factors\n    for($i = 2; $i <= $n;\
    \ $i++) {\n        \n        if($n % $i == 0) {\n            \n            $factorization[$i]\
    \ = $factorization[$i - 1] * $i;\n            $product *= $i;\n        }\n   \
    \ }\n    \n    return array_merge($factorization, array($product));\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmppgw3pys3.php on line 21\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmppgw3pys3.php:34\nStack\
    \ trace:\n#0 /tmp/tmppgw3pys3.php(44): test()\n#1 {main}\n  thrown in /tmp/tmppgw3pys3.php\
    \ on line 34\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $f = array();\n    $n = abs($n);\n\
    \    if ($n < 2) {\n        return array(1);\n    }\n\n    foreach (range(1, $n)\
    \ as $i)\n        $f[$i] = $i;\n\n    $c = $f[0];\n    $f[0] = 1;\n    $i = 1;\n\
    \    do {\n        while ($f[i] < $c) {\n            $f[$i]++;\n            $i++;\n\
    \        }\n        $c++;\n    } while ($c < $n);\n\n    return $f;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpzmg9j5kr.php on line 21\n\n\
    Fatal error: Uncaught Error: Undefined constant \"i\" in /tmp/tmpzmg9j5kr.php:25\n\
    Stack trace:\n#0 /tmp/tmpzmg9j5kr.php(36): factorize(2)\n#1 /tmp/tmpzmg9j5kr.php(40):\
    \ candidate(2)\n#2 /tmp/tmpzmg9j5kr.php(50): test()\n#3 {main}\n  thrown in /tmp/tmpzmg9j5kr.php\
    \ on line 25\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $f = array();\n  // If number smaller\
    \ than 1, return array of 1 element\n  if ($n < 2) {\n    return array(1);\n \
    \ }\n  // If n is 1, return array of 1 element\n  if ($n === 2) {\n    return\
    \ array(1);\n  }\n  $n = $n >> 1;\n  for ($i = 0; $i < $n; $i++) {\n    $f[$i]\
    \ = $i;\n  }\n  for ($i = 2; $i <= $n; $i++) {\n    $f = array_merge($f, factorizePrime($i,\
    \ $n));\n  }\n  return $f;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_y9oxvpw.php:36\n\
    Stack trace:\n#0 /tmp/tmp_y9oxvpw.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp_y9oxvpw.php\
    \ on line 36\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    // find prime factorization of\
    \ $n\n    // find factors of $n by prime factorization of $n\n    $fac = factorize_prime($n);\n\
    \    // make array of factors\n    $fac_arr = array();\n    // remove factors\
    \ that appear in factorization\n    foreach ($fac as $fact) {\n        if (!in_array($fact,\
    \ $fac_arr)) {\n            $fac_arr[] = $fact;\n        }\n    }\n    return\
    \ $fac_arr;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorize_prime()\
    \ in /tmp/tmp3d5j8lpf.php:14\nStack trace:\n#0 /tmp/tmp3d5j8lpf.php(27): factorize(2)\n\
    #1 /tmp/tmp3d5j8lpf.php(31): candidate(2)\n#2 /tmp/tmp3d5j8lpf.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3d5j8lpf.php on line 14\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array();\n\tfor ($i\
    \ = 2; $i <= sqrt($n); $i++) {\n\t\tfor ($j = 2; $j * $i <= $n; $j++) {\n\t\t\t\
    if ($n % $j == 0)\n\t\t\t\t$n = ($n / $j) * $j;\n\t\t\telse\n\t\t\t\tbreak;\n\t\
    \t}\n\t\tif ($n == $j)\n\t\t\t$factors[] = $j;\n\t}\n\treturn $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ys8jdst.php:31\n\
    Stack trace:\n#0 /tmp/tmp0ys8jdst.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp0ys8jdst.php\
    \ on line 31\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n < 2) return array(1);\n\
    \    $f = $factors = array(1);\n    $factor = 1;\n    while ($n % $factor != 0)\
    \ {\n        $factors[$factor] = $factor;\n        $f += $factor;\n        $factor++;\n\
    \    }\n    foreach ($factors as $i => $fact) {\n        $factors[$i] /= $n;\n\
    \        $f *= $n;\n    }\n    if ($f > 1) $factors[] = $f;\n    return $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: array * int\
    \ in /tmp/tmppyboy7ep.php:22\nStack trace:\n#0 /tmp/tmppyboy7ep.php(29): factorize(2)\n\
    #1 /tmp/tmppyboy7ep.php(33): candidate(2)\n#2 /tmp/tmppyboy7ep.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmppyboy7ep.php on line 22\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n % 2 == 0)\n        return\
    \ array(2);\n    $primes = array(2);\n    $i = $n++;\n    foreach ($primes as\
    \ $p) {\n        while ($n % $p != 0) {\n            $i++;\n            $n /=\
    \ $p;\n        }\n        $primes[] = $p;\n        $i--;\n    }\n    return $primes;\n\
    }\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp29touf8j.php:32\n\
    Stack trace:\n#0 /tmp/tmp29touf8j.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp29touf8j.php\
    \ on line 32\n"
  timestamp: 1659979577
- exit_code: -1
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $arr = array();\n    $i = 2;\n\
    \    while(pow($i, $n) >= $n) {\n        if($n % $i == 0) {\n            array_push($arr,\
    \ array(\"number\" => $i, \"count\" => 1));\n            $arr[$i][\"count\"] *=\
    \ $n;\n        }\n        $i++;\n    }\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: 'b''\nWarning: Undefined array key 2 in /tmp/tmp1il_91vf.php on line 17\n\nWarning:
    Undefined array key "count" in /tmp/tmp1il_91vf.php on line 17\n'''
  timestamp: 1659979582
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n%2 == 0) {\n        return\
    \ array(2);\n    }\n    $factors = array();\n    $max = $n / 2;\n    for ($i =\
    \ 1; $i <= $max; $i++) {\n        if ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $factors[] = $n / $i;\n        }\n    }\n    if ($n > 1)\
    \ {\n        $factors[] = $n;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf64u67cg.php:35\n\
    Stack trace:\n#0 /tmp/tmpf64u67cg.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpf64u67cg.php\
    \ on line 35\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n <= 1) return array(1);\n\
    \    $r = $n; // initial result\n    $f = array(); // factors array\n    $p =\
    \ 2; // current prime to factorize\n    while (!empty($f)) {\n        $p = $p\
    \ * 2; // find next prime\n        foreach ($f as $f) {\n            if ($n %\
    \ $f == 0) {\n                $r = $r + array_merge($f, array($n / $f));\n   \
    \             $n = $n / $f;\n                $f = array_diff($f, array($n));\n\
    \                break;\n            }\n        }\n        if (!empty($f)) { //\
    \ if still has factors, add them\n            $f = array_merge($f, array($n));\n\
    \            $r = $r + array_merge($f, array($n / $f));\n        }\n    }\n  \
    \  return $r;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_fw32bf2.php:39\n\
    Stack trace:\n#0 /tmp/tmp_fw32bf2.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp_fw32bf2.php\
    \ on line 39\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n    $product\
    \ = array();\n    \n    if ($n<=1){\n        return array();\n    }\n    \n  \
    \  while($n>=1){\n        $product[] = $n;\n        $new_n = $n;\n        \n \
    \       while ($new_n >= 2){\n            $new_n = ($new_n - 2)/2;\n         \
    \   if ($new_n == 1){\n                $factors[] = 1;\n            } else {\n\
    \                $factors[] = $new_n;\n            }\n        }\n        $n =\
    \ $new_n;\n    }\n    \n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqpphyhnd.php:42\n\
    Stack trace:\n#0 /tmp/tmpqpphyhnd.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpqpphyhnd.php\
    \ on line 42\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array();\n\t\n\tif ($n%2\
    \ == 0) $factors[] = 2;\n\t\n\tfor ($i = 3; $i*$i < $n; $i+=2) {\n\t\tif ($n%$i\
    \ == 0) $factors[] = $i;\n\t}\n\t\n\tif ($n%2 != 0) $factors[] = 2;\n\t\n\treturn\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1s6grh61.php:31\n\
    Stack trace:\n#0 /tmp/tmp1s6grh61.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp1s6grh61.php\
    \ on line 31\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factorization = array();\n \
    \   for($i = 2; $i <= sqrt($n); $i++) {\n        $pow = $i;\n        $factor =\
    \ 0;\n        while($n >= pow($pow, $factor)) {\n            $factor++;\n    \
    \        $pow *= $i;\n        }\n        $factorization[] = $pow;\n    }\n   \
    \ return $factorization;\n}\n</code>\n<|/ a tags=prime-factoring,algorithm,sieve-of-eratosthenes,php,factors\
    \ |>\n<| a tags=prime-factoring,algorithm,sieve-of-eratosthenes,php,factors |>\n\
    A very simple way to get prime factors is to simply divide the number by the primes\
    \ and see if that gives you a quotient smaller than one.\n<code>\n$factors = [];\n\
    $primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47];\n\nforeach($primes\
    \ as $prime){\n    $factors[$prime] = (int)($number / $prime);\n}\n\nvar_dump($factors);\n\
    </code>\n<|/ a dscore=4 |>\n<| a |>\nThis works for me\n<code>\n<?php\n    function\
    \ divisors($number){\n        $divisors = array();\n        for($i = 2; $i <=\
    \ $number/2; $i++){\n            if($number % $i == 0){\n                $divisors[]\
    \ = $i;\n            }\n        }\n        return $divisors;\n    }\n\n    function\
    \ factors($number){\n        $factors = array();\n        foreach($divisors($number)\
    \ as $divisor){\n            if($number % $divisor == 0){\n                $factors[]\
    \ = $divisor;\n                $number = $number / $divisor;\n            }\n\
    \        }\n        if($number > 1){\n            $factors[] = $number;\n    \
    \    }\n        return $factors;\n    }\n\n    $number = 7;\n    echo 'Factors\
    \ of '.$number.'<br>';\n    echo '---------------<br>';\n    var_dump(factors($number));\n\
    \n    $number = 41;\n    echo 'Factors of '.$number.'<br>';\n    echo '---------------<br>';\n\
    \    var_dump(factors($number));\n\n    $number = 152;\n    echo 'Factors of '.$number.'<br>';\n\
    \    echo '---------------<br>';\n    var_dump(factors($number));\n\n    $number\
    \ = 1;\n    echo 'Factors of '.$number.'<br>';\n    echo '---------------<br>';\n\
    \    var_dump(factors($number));\n</code>\n<|/ a tags=prime-factoring,algorithm,sieve-of-eratosthenes,php,factors\
    \ dscore=3 |>\n<| \nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpij43f66e.php
    on line 24

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    // Initialize array\n    $factor\
    \ = array(1);\n    // Initialize counter\n    $counter = 1;\n    // Find primes\
    \ less than or equal to input number\n    do {\n        // Check if number is\
    \ divisible by any prime factor of input number\n        if ($n % $factor[0] ==\
    \ 0) {\n            $factor[] = $factor[0];\n            $n = $n / $factor[0];\n\
    \        } else {\n            // If number is not divisible by any prime factor\
    \ of input number, increment counter\n            $counter++;\n        }\n   \
    \ } while ($n > 1);\n    // Return array of prime factors of input number\n  \
    \  return $factor;\n}\n</code>\n<|/ a tags=php,primes |>\n<| c |>\nA better implementation\
    \ would use a sieve.\n<|/ c |>\n<| c |>\nThis is not the best implementation.\
    \ This will take around 2.5 seconds for `factorize(1000)` on a recent computer.\
    \ PHP has a built in prime testing function: http://php.net/manual/en/function.mt-prime-factor.php\n\
    <|/ c |>\n<| c |>\nYes, but OP asked specifically for a solution without using\
    \ built-in functions.\n<|/ c |>\n<| c |>\n: You also asked for a solution that\
    \ doesn't use built-in functions. My answer does, and it also doesn't use `mt_prime_factor()`.\n\
    <|/ c |>\n<| c |>\nI didn't say it didn't. It didn't. If OP doesn't know how to\
    \ use `mt_prime_factor()`, then he shouldn't be using PHP. PHP has built-in functions\
    \ for prime testing.\n<|/ c |>\n<| a dscore=4 |>\nThis is very simple solution.\n\
    <code>\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpqrrxtxa3.php
    on line 30

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n<=1) return array(1);\n\
    \    $f = $result = array(2);\n    $p2 = $p3 = 1;\n    $k = 3;\n    while ($k<=$n/$p3)\
    \ {\n        $k = ++$p3;\n        $f = $result + array($k);\n        if ($k*$p3\
    \ == $n) break;\n        $p2++;\n    }\n    while ($p3<$k && $n%$p3 == 0) {\n\
    \        $result[] = $p3;\n        $p3++;\n    }\n    if ($p2 <= $k) $result[]\
    \ = $p2;\n    return $result;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaluxo5bk.php:34\n\
    Stack trace:\n#0 /tmp/tmpaluxo5bk.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpaluxo5bk.php\
    \ on line 34\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n\n    do\
    \ {\n        $last = 0;\n        $i = 1;\n\n        while ($n % $i == 0) {\n \
    \           $last = $i;\n            $i++;\n        }\n\n        if ($last ==\
    \ 0) {\n            $factors[] = $n;\n        } else {\n            $factors[]\
    \ = $last;\n            $n /= $last;\n        }\n    } while (n > 1);\n\n    return\
    \ $factors;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Undefined constant \"n\" in /tmp/tmptfwfx6xp.php:29\n\
    Stack trace:\n#0 /tmp/tmptfwfx6xp.php(34): factorize(1)\n#1 /tmp/tmptfwfx6xp.php(38):\
    \ candidate(2)\n#2 /tmp/tmptfwfx6xp.php(48): test()\n#3 {main}\n  thrown in /tmp/tmptfwfx6xp.php\
    \ on line 29\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n == 1) {\n        return\
    \ array(1);\n    }\n\n    $factors = array_map(function($n) { return pow($n, 0.5);\
    \ }, range(2, $n + 1));\n\n    foreach ($factors as $key => $value) {\n      \
    \  if ($value == 1) {\n            unset($factors[$key]);\n        }\n    }\n\n\
    \    return array_values($factors);\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ tags=algorithm,php,math |>\n<code>\n<?php\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpaj54ovi3.php
    on line 26

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factorization = array(1 => array(1\
    \ => $n));\n\tfor ($i = 1; $i <= sqrt($n); $i++) {\n\t\tif ($n % $i == 0) {\n\t\
    \t\t$n = $n / $i;\n\t\t\t$factorization[$i][] = $i;\n\t\t\tunset($factorization[$i]);\n\
    \t\t\tarray_push($factorization, $n);\n\t\t}\n\t}\n\t$factorization[$n] = array(1\
    \ => $n);\n\treturn $factorization;\n}\n\nfunction candidate(...$args) {\n   \
    \ return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_03314ai.php:30\n\
    Stack trace:\n#0 /tmp/tmp_03314ai.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp_03314ai.php\
    \ on line 30\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $array = array();\n    $counter\
    \ = 1;\n    for($i = 1; $i < $n; $i++) {\n        while($n % $i == 0) {\n    \
    \        $array[++$counter] = $i;\n            $n /= $i;\n        }\n    }\n \
    \   return $array;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpxq2o16n0.php on line 16

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n    $factors[2]\
    \ = 2;\n    $start = 3;\n    for($i = $start; $i <= sqrt($n); $i++) {\n      \
    \  if($n % $i == 0) {\n            $n = $n / $i;\n            array_push($factors,\
    \ $i);\n        }\n        if($i * $i > $n && $n != 1) {\n            $factors[]\
    \ = $i;\n            $n--;\n        }\n    }\n    return $factors;\n}\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx71seek6.php:32\n\
    Stack trace:\n#0 /tmp/tmpx71seek6.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpx71seek6.php\
    \ on line 32\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $n = abs($n);\n    $factors =\
    \ array(1);\n    foreach (range(1, $n) as $i) {\n        $j = 1;\n        while\
    \ ($n % $i == 0) {\n            $factors[$j] = $i;\n            $n /= $i;\n  \
    \          $j++;\n        }\n        $factors[$j] = $i;\n    }\n    return $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpds0w3iqz.php on line 17

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n<1) {\n        return array();\n\
    \    }\n    $result=array();\n    $factors=$prime_factors_of($n);\n    foreach\
    \ ($factors as $factor) {\n        $result[$factor]=$factors[$factor];\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $prime_factors_of in /tmp/tmpr5wb4s6z.php\
    \ on line 16\n\nFatal error: Uncaught Error: Value of type null is not callable\
    \ in /tmp/tmpr5wb4s6z.php:16\nStack trace:\n#0 /tmp/tmpr5wb4s6z.php(24): factorize(2)\n\
    #1 /tmp/tmpr5wb4s6z.php(28): candidate(2)\n#2 /tmp/tmpr5wb4s6z.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpr5wb4s6z.php on line 16\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = [];\n\t\n\tfor ($i =\
    \ 2; $i <= ceil(sqrt($n)); $i++) {\n\t\t$j = ($i * $n) / $i;\n\t\t$factors[$i]\
    \ = isset($factors[$j]) ? $factors[$j] : 1;\n\t\tif ($i * $n / $i > $n) {\n\t\t\
    \tunset($factors[$i]);\n\t\t}\n\t}\n\t\n\tsort($factors);\n\treturn $factors;\n\
    }\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4oa_9gig.php:30\n\
    Stack trace:\n#0 /tmp/tmp4oa_9gig.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp4oa_9gig.php\
    \ on line 30\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n===1 || $n===0)\n     \
    \   return array(1);\n    $ret = array();\n    // Get prime factors of given number\n\
    \    for ($i=2; $i<=$n/2; $i++) {\n        if ($n%$i==0)\n            $ret[] =\
    \ $i;\n    }\n    // Add them in reverse order\n    array_reverse($ret);\n   \
    \ // Get length of factorization array\n    $len = 0;\n    foreach ($ret as $k)\
    \ $len++;\n    $ret[$len] = $n;\n    return $ret;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp017c7bhx.php:34\n\
    Stack trace:\n#0 /tmp/tmp017c7bhx.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp017c7bhx.php\
    \ on line 34\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n    for\
    \ ($i = 2; $i <= $n; ++$i) {\n        if ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n /= $i;\n        }\n    }\n    if ($n > 1) {\n        $factors[]\
    \ = $n;\n    }\n\n    return $factors;\n}\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdoe8tpdg.php:33\n\
    Stack trace:\n#0 /tmp/tmpdoe8tpdg.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpdoe8tpdg.php\
    \ on line 33\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = [];\n\tfor ($n = 2;\
    \ $n <= $n; $n++) {\n\t\tfor ($i = 2; $i * $i <= $n; $i++) {\n\t\t\tif ($n % $i\
    \ == 0) {\n\t\t\t\t$n = (int) ($n / $i);\n\t\t\t\t$factors[] = $i;\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn $factors;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpj59skc4w.php on line 17

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $primes = [];\n    for ($factor\
    \ = 1; $factor <= $n; $factor++) {\n        while ($n % $factor === 0) {\n   \
    \         $primes[] = $factor;\n            $n = $n / $factor;\n        }\n  \
    \  }\n    return $primes;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp0o9h_1km.php on line 15

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  if ($n < 2) return array($n);\n\
    \  $pf = factorize($n / 2);\n  $factors = $pf[$pf[0]];\n  for ($i = 0; $i < count($pf);\
    \ ++$i) {\n    $factors[$i] = array_merge($factors[$i], $pf[$i]);\n  }\n  return\
    \ $factors;\n}\n</code>\n<|/ a |>\n<| a dscore=4 |>\nHere is a solution using\
    \ Sieve of Eratosthenes:\n<code>\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpmiif0nr1.php
    on line 20

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n    for($i\
    \ = 1; $i <= $n; $i++) {\n        $factor = 1;\n        for($j = 1; $j <= $n;\
    \ $j++) {\n            if($i % $j == 0) {\n                $factor *= $j;\n  \
    \          }\n        }\n        $factors[] = $factor;\n    }\n    return $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq68igs27.php:30\n\
    Stack trace:\n#0 /tmp/tmpq68igs27.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpq68igs27.php\
    \ on line 30\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $result = array();\n\n    foreach\
    \ (range('2', '3') as $i) {\n        $tmp = $i;\n        $num = pow($i, $n);\n\
    \        while ($num > 1) {\n            $tmp = pow($tmp, $n);\n            $num--;\n\
    \        }\n        $result[] = $tmp;\n    }\n\n    for ($i = 5; $i < $n; $i +=\
    \ 2) {\n        $tmp = sqrt($i);\n        $result[] = $tmp;\n    }\n\n    return\
    \ array_unique($result);\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqqkn7u94.php:37\n\
    Stack trace:\n#0 /tmp/tmpqqkn7u94.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpqqkn7u94.php\
    \ on line 37\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $a = $b = $i = $j = 0;\n\n  \
    \  if ($n < 0) {\n        echo '<hr>';\n        echo '<p>This number should be\
    \ non-negative.<p>';\n        echo '<pre>';\n        echo 'Factorization of negative\
    \ number is not supported.';\n        echo '</pre>';\n        echo '<hr>';\n \
    \       echo '<pre>';\n        echo 'Factorization of a number is a process of\
    \ multiplying some number with every number up to its multiplicand.';\n      \
    \  echo 'Multiplication with 1 yields 1.';\n        echo 'Multiplication with\
    \ 2 yields 2.';\n        echo 'Multiplication with 3 yields 3.';\n        echo\
    \ 'Multiplication with 4 yields 6.';\n        echo 'Multiplication with 5 yields\
    \ 9.';\n        echo 'Multiplication with 6 yields 24.';\n        echo 'Multiplication\
    \ with 7 yields 83.';\n        echo 'Multiplication with 8 yields 166.';\n   \
    \     echo 'Multiplication with 9 yields 243.';\n        echo 'Multiplication\
    \ with 10 yields 662.';\n        echo 'Multiplication with 11 yields 12625.';\n\
    \        echo 'Multiplication with 12 yields 25698.';\n        echo 'Multiplication\
    \ with 13 yields 61578.';\n        echo 'Multiplication with 14 yields 115983.';\n\
    \        echo 'Multiplication with 15 yields 247526.';\n        echo 'Multiplication\
    \ with 16 yields 492184.';\n        echo 'Multiplication with 17 yields 979335.';\n\
    \        echo 'Multiplication with 18 yields 17476872.';\n        echo 'Multiplication\
    \ with 19 yields 352457480.';\n        echo 'Multiplication with 20 yields 7060504608.';\n\
    \        echo 'Multiplication with 21 yields 14142135621.';\n        echo 'Multiplication\
    \ with 22 yields 29866411139.';\n        echo 'Multiplication with 23 yields 58323929937.';\n\
    \        echo 'Multiplication with 24 yields 118519476718.';\n        echo '</pre>';\n\
    \        echo '<hr>';\n        die();\n    }\n\n    echo '<pre>';\n    // Initialize\
    \ $n to the greatest integer smaller than or equal to $n\n    echo 'Factorization\
    \ of ' . $n . ' is:<br>';\n    if ($n == 1) {\n        echo '1<br>';\n       \
    \ return array(1);\n    }\n\n    echo '1<br>';\n\n    // Initialize $a to 2\n\
    \    $\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmp9wazrw91.php on line 64

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array(1);\n    $n\
    \ = abs($n);\n    $max = floor(log($n, 2));\n    for($i = 1; $i < $max; $i++)\
    \ {\n        if($n % $i == 0) {\n            $fact = array();\n            $fact[]\
    \ = $i;\n            $n = floor($n / $i);\n            for($j = 1; $j < $i; $j++)\
    \ {\n                $fact[] = $i;\n            }\n            $factors[] = $fact;\n\
    \        }\n    }\n    return $factors;\n}\n\n$num = 13195;\n$nums = factorize($num);\n\
    echo '<pre>';\nprint_r($nums);\necho '</pre>';\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => Array\n        (\n            [0]\
    \ => 1\n        )\n\n    [2] => Array\n        (\n            [0] => 5\n     \
    \       [1] => 5\n            [2] => 5\n            [3] => 5\n            [4]\
    \ => 5\n        )\n\n    [3] => Array\n        (\n            [0] => 7\n     \
    \       [1] => 7\n            [2] => 7\n            [3] => 7\n            [4]\
    \ => 7\n            [5] => 7\n            [6] => 7\n        )\n\n)\n</pre>\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpb3rjwvkj.php:40\nStack trace:\n\
    #0 /tmp/tmpb3rjwvkj.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpb3rjwvkj.php\
    \ on line 40\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n    if ($n\
    \ % 2) {\n        array_push($factors, 2);\n    }\n    \n    do {\n        $i\
    \ = $n / 2;\n        while ($i % 2 === 0) {\n            $i = $i / 2;\n      \
    \  }\n        array_push($factors, $i);\n        $n = $n % $i;\n    } while ($n\
    \ > 1);\n    \n    return $factors;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks, this\
    \ is more simple and effective than mine.\n<|/ c |>\n<| c |>\nThanks, I used the\
    \ code you wrote before but it didn't work so I decided to use my code and compare\
    \ it with yours. But yours was more effective. Thanks for your help though.\n\
    <|/ c |>\n<| a tags=php,math,primes,factorization |>\nI took a more simpler approach\
    \ to it by using the Sieve of Eratosthenes method where each prime factor is marked\
    \ as prime by being divisible by the prime factor, and all remaining numbers are\
    \ divided by the prime factor until one is found. The method returns a list of\
    \ prime factors, with the number of times each one was found at the end.\n<code>\n\
    <?php\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmptvv4xo63.php
    on line 28

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $prime = array();\n  $p = $factor\
    \ = 0;\n  for ($i = 0; $i < $n; $i++) {\n    if ($n % $i == 0) {\n      array_push($prime,\
    \ $i);\n      $p = 1;\n      $factor = 1;\n      while (++$factor <= $i) {\n \
    \       if ($n % $factor == 0) {\n          $p++;\n        }\n      }\n    }\n\
    \  }\n  return $prime + array_reverse($prime);\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp248hs4pn.php:15\n\
    Stack trace:\n#0 /tmp/tmp248hs4pn.php(30): factorize(2)\n#1 /tmp/tmp248hs4pn.php(34):\
    \ candidate(2)\n#2 /tmp/tmp248hs4pn.php(44): test()\n#3 {main}\n  thrown in /tmp/tmp248hs4pn.php\
    \ on line 15\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if (!is_integer($n) || $n<1)\
    \ {\n        throw new InvalidArgumentException(\"Non-positive integer value $n\
    \ passed to function\");\n    }\n    if ($n==1) {\n        return array(1);\n\
    \    }\n    if ($n%2==0) {\n        return array(2);\n    }\n    $res = array();\n\
    \    do {\n        $res[] = $n%2;\n        $n/=2;\n    } while ($n>1);\n    return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy7oihkqm.php:35\n\
    Stack trace:\n#0 /tmp/tmpy7oihkqm.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpy7oihkqm.php\
    \ on line 35\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array(\n        1\
    \ => array(),\n    );\n\n    for ($i = 1; $i < $n; $i++) {\n        $factor =\
    \ 1;\n\n        for ($j = 1; $j < $i; $j++) {\n            if ($n % $j == 0) {\n\
    \                $factor++;\n                $factors[$j][$j] = $factor;\n   \
    \         }\n        }\n\n        $factors[$i][$i] = $factor;\n    }\n\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1b9howvv.php:37\n\
    Stack trace:\n#0 /tmp/tmp1b9howvv.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp1b9howvv.php\
    \ on line 37\n"
  timestamp: 1659979577
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n    if ($n\
    \ == 1) {\n        return array(1);\n    }\n    $limit = $n - 1;\n    $i = 2;\n\
    \    while ($i <= $limit) {\n        if ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n /= $i;\n        } else {\n            $i++;\n        }\n\
    \    }\n    if ($n != 1) {\n        $factors[] = $n;\n    }\n    return $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $result = [];\n    $i = 0;\n\
    \    $factorsCounter = 1;\n    // Loop through all the factors of given number,\
    \ if there are more than 1 then add them to result.\n    // Each number appeares\
    \ less than once in factorization\n    do {\n        if ($n % $i == 0) {\n   \
    \         $result[$i][] = $n;\n            $n /= $i;\n            $factorsCounter++;\n\
    \        }\n        $i++;\n    } while ($n != 1);\n\n    // If number had more\
    \ than 1 factor in factorization then we should add number to result once again.\n\
    \    if ($factorsCounter > 1) {\n        $result[][] = $n;\n    }\n\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp7yas6w32.php:18\n\
    Stack trace:\n#0 /tmp/tmp7yas6w32.php(34): factorize(2)\n#1 /tmp/tmp7yas6w32.php(38):\
    \ candidate(2)\n#2 /tmp/tmp7yas6w32.php(48): test()\n#3 {main}\n  thrown in /tmp/tmp7yas6w32.php\
    \ on line 18\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t\n\t$factors = [];\n\t\n\tif ($n\
    \ < 0) {\n\t\t$factors[] = array(-1, 0);\n\t\treturn $factors;\n\t}\n\t\n\t//\
    \ find prime factors\n\tfor ($i = 0; $i * $i <= $n; $i++) {\n\t\tif ($n % $i ==\
    \ 0) {\n\t\t\t// found factor and increment factorization\n\t\t\tif ($i + 1 <\
    \ $n) {\n\t\t\t\t$factors[] = array($i, $i + 1);\n\t\t\t} else {\n\t\t\t\t$factors[]\
    \ = array($i);\n\t\t\t}\n\t\t\t$n = $n / $i;\n\t\t}\n\t}\n\t\n\t// if integer\
    \ divides by all factors then it cannot be prime number\n\tif ($n == 1) {\n\t\t\
    $factors[] = array(1);\n\t}\n\t\n\t// if there is no factor then return given\
    \ number\n\tif (count($factors) == 0) {\n\t\treturn array(1, 0);\n\t}\n\t\n\t\
    // sort by smaller factors\n\tksort($factors);\n\t\n\treturn $factors;\n}\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpilz0unx8.php:22\n\
    Stack trace:\n#0 /tmp/tmpilz0unx8.php(49): factorize(2)\n#1 /tmp/tmpilz0unx8.php(53):\
    \ candidate(2)\n#2 /tmp/tmpilz0unx8.php(63): test()\n#3 {main}\n  thrown in /tmp/tmpilz0unx8.php\
    \ on line 22\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n == 1) return array(1,\
    \ 1);\n    $factors = array();\n    for ($i = 2; $i <= $n; $i++) {\n        if\
    \ ($n % $i == 0) {\n            $factors[] = $i;\n            $n = $n / $i;\n\
    \        } else {\n            break;\n        }\n    }\n    return $factors;\n\
    }\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9_808lek.php:30\n\
    Stack trace:\n#0 /tmp/tmp9_808lek.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp9_808lek.php\
    \ on line 30\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factorization = array();\n\n\
    \    // Get factorization of number from 1 to sqrt(n)\n    $prime_factorization\
    \ = getPrimeFactors($this->getPrimeFactorizationOfNumber($n));\n    $factorization[]\
    \ = $this->getNumberOfTimesFactorizedIn($prime_factorization);\n\n    // Get factorization\
    \ of number from sqrt(n) to n\n    for ($i = count($prime_factorization); $i >\
    \ 2; $i--) {\n        if ($n % $prime_factorization[$i - 1] == 0) {\n        \
    \    array_splice($prime_factorization, $i - 1, 1);\n        }\n    }\n    $factorization[]\
    \ = $this->getNumberOfTimesFactorizedIn($prime_factorization);\n\n    return $factorization;\n\
    }\n</code>\n<|/ q dscore=3 |>\n<| c |>\nTry `var_dump($prime_factorization)` before\
    \ the `for`-loop\n<|/ c |>\n<| c |>\nI suggest you step through your code with\
    \ a debugger. Step through the code line by line to see what it is doing.\n<|/\
    \ c |>\n<| c |>\nOk, I did `var_dump($prime_factorization)` and I got `array(1)`\n\
    <|/ c |>\n<| c |>\nThat means `getPrimeFactorizationOfNumber(9)` returned `array(1)`\n\
    <|/ c |>\n<| c |>\nI checked it, it returns `array(1)`\n<|/ c |>\n<| a |>\nThe\
    \ problem lies here:\n<code>\n$factorization[] = $this->getNumberOfTimesFactorizedIn($prime_factorization);\n\
    </code>\n$prime_factorization is not an array. Try this:\n<code>\n$factorization[]\
    \ = implode(\", \", $prime_factorization);\n</code>\nThat should give you an array\
    \ which looks like this:\n<code>\narray(\n    0 => 2,\n    1 => 3,\n    2 => 5,\n\
    \    3 => 7\n)\n</code>\n<|/ a tags=php dscore=3 |>\n<| c |>\nWhen I do `var_dump($prime_factorization);`\
    \ it says this: `array(1) { [0]=> array(1) { [0]=> int(2) } }`\n<|/ c |>\n<| c\
    \ |>\nTry `var_dump($this->getPrimeFactorizationOfNumber(9))` before that line\n\
    <|/ c |>\n<| c |>\nThe only problem now is that I can't put `,` between those\
    \ numbers.\n<|/ c |>\n<| c |>\nUse `implode(\", \", $\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpadbogujg.php
    on line 28

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $arr = array();\n    for ($i\
    \ = 1; $i * $i <= $n; ++$i) {\n        if ($n % $i == 0) {\n            $arr[]\
    \ = $i;\n            $n = $n / $i;\n        }\n    }\n    if ($n != 1) {\n   \
    \     $arr[] = $n;\n    }\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphpppb933.php:30\n\
    Stack trace:\n#0 /tmp/tmphpppb933.php(40): test()\n#1 {main}\n  thrown in /tmp/tmphpppb933.php\
    \ on line 30\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n    $nFactors\
    \ = 1;\n    for($i=1; $i<$n; $i++) {\n        while($nFactors < $i) {\n      \
    \      $nFactors = $nFactors * $i;\n            $factors[] = $nFactors;\n    \
    \    }\n    }\n    return $factors;\n}\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvwyuba45.php:27\n\
    Stack trace:\n#0 /tmp/tmpvwyuba45.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpvwyuba45.php\
    \ on line 27\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n\n    //\
    \ Iterate over array of prime factors\n    foreach ($factors as $k => $v) \n \
    \   {\n        for ($i = $k * 2; $i < $n; $i += $v) \n        {\n            //\
    \ If number is evenly divisible by any prime factor, save it\n            if ($n\
    \ % $i == 0)\n            {\n                $factors[] = $v;\n            }\n\
    \        }\n    }\n\n    return $factors;\n}\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph_oj3zdr.php:35\n\
    Stack trace:\n#0 /tmp/tmph_oj3zdr.php(45): test()\n#1 {main}\n  thrown in /tmp/tmph_oj3zdr.php\
    \ on line 35\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factorsArray = array();\n  \
    \  $isPrime = true;\n    $n = abs($n);\n\n    // check for prime factors\n   \
    \ if ($n == 1) {\n        $factorsArray = array(1);\n        return $factorsArray;\n\
    \    }\n\n    if ($n == 0) {\n        return array();\n    }\n\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        if ($n % $i == 0) {\n            $isPrime = false;\n\
    \            break;\n        }\n    }\n\n    if ($isPrime) {\n        return array($n);\n\
    \    }\n\n    // check for factors in range\n    for ($i = 2; $i <= $n / 2; $i++)\
    \ {\n        if ($n % $i == 0) {\n            $factorsArray[] = $i;\n        }\n\
    \    }\n    return $factorsArray;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpbk5crm32.php:27\n\
    Stack trace:\n#0 /tmp/tmpbk5crm32.php(47): factorize(2)\n#1 /tmp/tmpbk5crm32.php(51):\
    \ candidate(2)\n#2 /tmp/tmpbk5crm32.php(61): test()\n#3 {main}\n  thrown in /tmp/tmpbk5crm32.php\
    \ on line 27\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  if ($n < 1) {\n    return array();\n\
    \  }\n\n  $factors = array();\n\n  do {\n    $i = $n % 2;\n\n    if (!empty($factors[$i]))\
    \ {\n      foreach ($factors[$i] as $fa) {\n        $factors[$n--] = array($fa);\n\
    \      }\n    }\n\n    $n = (int) ($n / 2);\n    $factors[$i] = array($i);\n \
    \ } while ($n > 1);\n\n  return $factors;\n}\n</code>\n<|/ a tags=php,math,algorithm\
    \ |>\n<| c |>\nNice answer! I didn't think about trying all the prime factors\
    \ up to the square root\n<|/ c |>\n<| c |>\n: At the start of each loop, you need\
    \ to check if you're done, and if not, increase `$n` by two, and try again.  Otherwise,\
    \ you'll just get one extra factor that you didn't test for.\n<|/ c |>\n<| c |>\n\
    Ah yes, I missed that part. I'll edit my answer to include that.\n<|/ c |>\n<|\
    \ c |>\n: That would be a much larger improvement, actually.\n<|/ c |>\n<| c |>\n\
    For a big n, this algorithm is slower than the others.\n<|/ c |>\n<| a dscore=3\
    \ tags=php,math,algorithm |>\nJust for fun, here's a recursive solution to your\
    \ problem:\n<code>\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp_0472yja.php
    on line 33

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $f = new Fact($n);\n    $factors\
    \ = array();\n    while ($n>0) {\n        $x = $n%($f->get_factor());\n      \
    \  $factors[] = $f->get_factor();\n        $n = $x;\n    }\n    return $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Class \"Fact\" not found in /tmp/tmpzgwq1kd9.php:12\n\
    Stack trace:\n#0 /tmp/tmpzgwq1kd9.php(23): factorize(2)\n#1 /tmp/tmpzgwq1kd9.php(27):\
    \ candidate(2)\n#2 /tmp/tmpzgwq1kd9.php(37): test()\n#3 {main}\n  thrown in /tmp/tmpzgwq1kd9.php\
    \ on line 12\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array();\n\twhile ($n\
    \ % 2 == 0) {\n\t\t$factors[] = 2;\n\t\t$n = $n / 2;\n\t}\n\tfor ($i = 3; $i <=\
    \ sqrt($n); $i += 2) {\n\t\tif ($n % $i == 0) {\n\t\t\t$factors[] = $i;\n\t\t\t\
    $n = $n / $i;\n\t\t}\n\t}\n\treturn $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1r6djz5j.php:34\n\
    Stack trace:\n#0 /tmp/tmp1r6djz5j.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp1r6djz5j.php\
    \ on line 34\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  if ($n<=1) {\n    return array($n);\n\
    \  }\n  $primes = array();\n  $prime_factors = array();\n  for ($i=2; $i<$n; $i++)\
    \ {\n    foreach ($prime_factors as $k => $f) {\n      if ($i%$f == 0) {\n   \
    \     $primes[$k] = $f;\n        unset($prime_factors[$k]);\n        break;\n\
    \      }\n    }\n  }\n  foreach ($prime_factors as $k => $f) {\n    $prime_factors[$k]\
    \ = $f;\n  }\n  return $primes;\n}\n</code>\n<|/ a tags=php,factoring,numbers\
    \ |>\n<| c |>\nIt's worth noting that this doesn't work for really large numbers,\
    \ but for very small numbers it does work.\n<|/ c |>\n<| a dscore=4 |>\nIn php,\
    \ you can use RecursiveDivision (http://php.net/manual/en/function.recursive-division.php)\
    \ to divide by divisors of a number, then recursively call itself to divide the\
    \ quotient by divisors of quotient.\n<code>\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpoijjv2t5.php
    on line 31

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $n = abs($n);\n    $factorization\
    \ = array();\n    // Fill factorization array with values from smallest to largest.\n\
    \    for ($i = 2; $i <= $n; $i++) {\n        // If $n % $i, then it is a prime\
    \ number.\n        if ($n % $i == 0) {\n            // If $n is divided by $i,\
    \ then it is also a factor of $n.\n            if ($n / $i == $n) {\n        \
    \        $factorization[] = $i;\n            }\n            // If $n is not divided\
    \ by $i, then it is not a factor of $n.\n            else {\n                //\
    \ For $i * $i is divisible by $n, but not $n. So, $i cannot be a factor of $n.\n\
    \                if ($i * $i != $n) {\n                    $factorization[] =\
    \ $i;\n                }\n            }\n        }\n    }\n    return $factorization;\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI think this answer is incorrect because\
    \ it does not factor a number as quickly as Sieve of Eratosthenes, which has a\
    \ complexity of O(sqrt(n)), while the sieve of Atkin's algorithm is a bit faster\
    \ (see https://stackoverflow.com/a/42734791/949643 vs the accepted answer)\n<|/\
    \ c |>\n<| a dscore=5 |>\nThe best way to solve this problem is to perform trial\
    \ division: start with the number 1. Then try multiplying it by the factors of\
    \ your number, adding that to the list of factors found, and removing it from\
    \ the list of numbers you're factorizing. If your number is prime, then you've\
    \ found the answer!\nThe trick is that you can't factor a number by dividing out\
    \ the multiples of your number; factorization will give you multiples of one thing\
    \ and multiples of another, and you'll end up with the wrong answers.\n<|/ a tags=factorization,algorithm,php\
    \ |>\n<| a dscore=3 tags=factorization,algorithm,php |>\nI found a great solution\
    \ to finding factors for integers, that I found on a website:\n<code>\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmplz3ewzxg.php
    on line 33

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n    foreach\
    \ ($factorization_helper($n) as $factor) {\n        foreach ($factorization_helper($factor)\
    \ as $factor2) {\n            $factors[$factor] = $factors[$factor] + $factors[$factor2];\n\
    \        }\n    }\n    return array_reverse($factors);\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $factorization_helper in /tmp/tmp4ldxnwib.php\
    \ on line 13\n\nFatal error: Uncaught Error: Value of type null is not callable\
    \ in /tmp/tmp4ldxnwib.php:13\nStack trace:\n#0 /tmp/tmp4ldxnwib.php(22): factorize(2)\n\
    #1 /tmp/tmp4ldxnwib.php(26): candidate(2)\n#2 /tmp/tmp4ldxnwib.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4ldxnwib.php on line 13\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\tif ($n<2) {\n\t\treturn array(1);\n\
    \t}\n\t$factors=array();\n\tfor ($i=2;$i<=$n;$i++) {\n\t\t$count=0;\n\t\tfor ($j=1;$j<=$i;$j++)\
    \ {\n\t\t\tif ($i%$j==0) {\n\t\t\t\t$count++;\n\t\t\t}\n\t\t}\n\t\tif ($count==1)\
    \ {\n\t\t\t$factors[]=$i;\n\t\t}\n\t}\n\tif (sizeof($factors)==0) {\n\t\treturn\
    \ array($n);\n\t} else {\n\t\treturn $factors;\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphu1nh2xs.php:40\n\
    Stack trace:\n#0 /tmp/tmphu1nh2xs.php(49): test()\n#1 {main}\n  thrown in /tmp/tmphu1nh2xs.php\
    \ on line 40\n"
  timestamp: 1659979577
- exit_code: -1
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array(1);\n    $n\
    \ = $n * $n;\n    while ($n != 1) {\n        for ($i = 2; $i <= sqrt($n); $i++)\
    \ {\n            $f1 = $n / $i;\n            if ($f1 % $i == 0) {\n          \
    \      $factors[$i] = $i;\n                $n = $f1;\n            }\n        }\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979583
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  if ($n < 2) return array();\n \
    \ $factors = array();\n  for ($i = 2; $i <= sqrt($n); $i++) {\n    while ($n %\
    \ $i == 0) {\n      array_push($factors, $i);\n      $n /= $i;\n    }\n  }\n \
    \ return $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprwqt9lnk.php:28\n\
    Stack trace:\n#0 /tmp/tmprwqt9lnk.php(38): test()\n#1 {main}\n  thrown in /tmp/tmprwqt9lnk.php\
    \ on line 28\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n    for\
    \ ($i = 2; $i < $n; $i++) {\n        if ($n % $i == 0) {\n            $f = $i;\n\
    \            $factors[] = $f;\n            while ($n / $f != $i) {\n         \
    \       $f *= $f;\n                $factors[] = $f;\n            }\n        }\n\
    \    }\n    sort($factors);\n    return $factors;\n}\n</code>\nOutput:\n<code>\n\
    Array\n(\n    [0] => 3\n    [1] => 5\n    [2] => 7\n)\nArray\n(\n    [0] => 3\n\
    \    [1] => 5\n    [2] => 7\n    [3] => 11\n    [4] => 13\n    [5] => 17\n   \
    \ [6] => 19\n    [7] => 23\n)\nArray\n(\n    [0] => 3\n    [1] => 5\n    [2] =>\
    \ 7\n    [3] => 11\n    [4] => 13\n    [5] => 17\n    [6] => 19\n    [7] => 23\n\
    \    [8] => 29\n    [9] => 31\n)\nArray\n(\n    [0] => 3\n    [1] => 5\n    [2]\
    \ => 7\n    [3] => 11\n    [4] => 13\n    [5] => 17\n    [6] => 19\n    [7] =>\
    \ 23\n    [8] => 29\n    [9] => 31\n    [10] => 37\n    [11] => 41\n    [12] =>\
    \ 43\n    [13] => 47\n    [14] => 53\n    [15] => 59\n    [16] => 61\n    [17]\
    \ => 67\n    [18] => 73\n    [19] => 79\n    [20] => 83\n    [21] => 89\n    [22]\
    \ => 97\n)\nArray\n(\n    [0] => 3\n    [1] => 5\n    [2] => 7\n    [3] => 11\n\
    \    [4] => 13\n    [5] => 17\n    [6] => 19\n    [7] => 23\n    [8] => 29\n \
    \   [9] => 31\n    [10] => 37\n    [11] => 41\n    [12] => 43\n    [13] => 47\n\
    \    [14] => 53\n    [15] => 59\n    [16] => 61\n    [17] => 67\n    [18] => 73\n\
    \    [19] => 79\n    [20] => 83\n    [21] => 89\n    [22] => 97\n    [23] => 111\n\
    \    [24] => 131\n    [25] => 151\n    [26] => 171\n    [27] => 191\n    [28]\
    \ => 231\n    [29] => 251\n    [30] => 271\n    [31] => 291\n    [32] => 31\n\
    )\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpd7phjm55.php
    on line 26

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    // Store all factors\n    $factors\
    \ = array();\n\n    // Store the number's divisors\n    $divisors = array();\n\
    \n    // Store all factorizations of $n in an array ($factorizations).\n    $factorizations\
    \ = array();\n\n    // Check if number is prime or composite\n    if ($n == 1\
    \ || ($n % 2 == 0 && $n % 3 != 0)) {\n        $factors[] = 2;\n    }\n    elseif\
    \ ($n % 2 == 0) {\n        $factors[] = 2;\n        $divisors[2] = 2;\n    }\n\
    \    elseif ($n % 3 == 0) {\n        $factors[] = 3;\n        $divisors[3] = 2;\n\
    \    }\n\n    // Go through all divisors (except the one we're counting on), and\
    \ store them\n    // if they are a factor.\n    for ($i = 3; $i <= $n; $i += 2)\
    \ {\n        if ($n % $i == 0) {\n            $divisors[] = $i;\n            $factors[]\
    \ = $i;\n        }\n    }\n\n    // Sort the factors array by decreasing order\n\
    \    array_multisort($factors);\n\n    // Add the remaining factors\n    foreach\
    \ ($divisors as $divisor => $times) {\n        $factors[$divisor] = $times;\n\
    \    }\n\n    // Go through all factors and store them in the factorizations array\n\
    \    foreach ($factors as $factor => $times) {\n        $factorizations[$factor]\
    \ = array();\n\n        // Create array of factorizations $factorizations\n  \
    \      $factorizations[$factor] = array_slice($factorizations, 0);\n\n       \
    \ // Create array with divisors times current factor and store it into factorizations\
    \ array\n        foreach ($divisors as $divisor => $times) {\n            $factorizations[$factor][]\
    \ = $times * $factor;\n        }\n    }\n\n    return $factorizations;\n}\n</code>\n\
    The code above is written in PHP, but it could easily be converted into any other\
    \ language.\n<|/ a dscore=0 |>\n<| c |>\nThank you for providing a full algorithm\
    \ with source code. I will try implementing it in PHP then I will accept this\
    \ as the answer. Also, it was very helpful to see your comment and linking to\
    \ the [prime factors algorithm](https://stackoverflow.com/questions/1156157/what-is-the-best-algorithm-to-find-all-the-factors-of-a-number).\n\
    <|/ c |>\n<| a |>\n<code>\ndef primeFactors(n):\n    factors = []\n    # check\
    \ if n is prime or not\n    isPrime = (n>1 and n & 1 == 1)\n    if isPrime:\n\
    \        factors.append(2)\n    else:\n        for x in range(3,n):\n        \
    \    if n % x == 0:\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp4za97p6b.php
    on line 66

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $primes = array();\n  for($i =\
    \ 2; $i <= sqrt($n); $i++) {\n    if(!isPrime($i)) {\n      $primes[] = $i;\n\
    \    }\n  }\n  return $primes;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplek0o4c6.php:26\n\
    Stack trace:\n#0 /tmp/tmplek0o4c6.php(36): test()\n#1 {main}\n  thrown in /tmp/tmplek0o4c6.php\
    \ on line 26\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n    $factors_cnt\
    \ = $n;\n    while (true) {\n        $factor = 1;\n        foreach ($factors as\
    \ $i => $factor) {\n            if ($factors_cnt % $i == 0) {\n              \
    \  $factors[$i] = $factors[$i] + 1;\n                $factors_cnt = $factors_cnt\
    \ / $i;\n                unset($factors[$i]);\n                continue 2;\n \
    \           }\n        }\n        break;\n    }\n    return $factors;\n}\n</code>\n\
    <|/ a tags=php,algorithm,math |>\n<| a dscore=0 |>\nThis might not be the best\
    \ solution, but it works.\n<code>\n<?php\n$i = 1;\n$nums = [4,5,6,7,8,9,10,20,30,41,50];\n\
    foreach($nums as $num){\n    if($i%$num!=0){\n        $j = 0;\n        for($j;$j<count($nums)-1;$j++){\n\
    \            if($nums%($nums[$j])==0){\n                $nums[$j] = $nums[$j]+1;\n\
    \                $i=1;\n                break;\n            }\n        }\n   \
    \ }\n    $i++;\n}\nprint_r($nums);\n</code>\n<|/ a tags=php,algorithm,math |>\n\
    <| a |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp1j6kdaau.php
    on line 28

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n == 1) {\n        return\
    \ array(1);\n    }\n    $factors = array(2);\n    $i = 2;\n    while ($n % $i\
    \ == 0) {\n        $factors[] = $i;\n        $n /= $i;\n        $i++;\n    }\n\
    \    return $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdqqh0rn8.php:30\n\
    Stack trace:\n#0 /tmp/tmpdqqh0rn8.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpdqqh0rn8.php\
    \ on line 30\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n <= 1) {\n        return\
    \ array(1, 1);\n    }\n\n    $f = 2;\n    $x = $y = 1;\n    $res = array();\n\n\
    \    do {\n        ++$x;\n        if ($n % $x == 0) {\n            $res[$x] =\
    \ $n;\n            ++$y;\n        }\n    } while (!is_numeric($x) && $x <= $n);\n\
    \n    while (isset($res[$y]) && $res[$y] == $n) {\n        ++$y;\n    }\n\n  \
    \  while ($y <= $n) {\n        $res[$y] = 1;\n        while ($y <= $n && $n %\
    \ $y == 0) {\n            ++$y;\n        }\n\n        if ($y == $n) {\n      \
    \      $res[$y] = $n;\n        }\n    }\n\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi3pnfbat.php:51\n\
    Stack trace:\n#0 /tmp/tmpi3pnfbat.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpi3pnfbat.php\
    \ on line 51\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n == 0) return [];\n\n \
    \   $i = 2;\n    $factors = array();\n\n    while($i <= sqrt($n)) {\n        if\
    \ ($n % $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n    \
    \        $i--;\n        }\n        $i++;\n    }\n\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg89jn8z_.php:34\n\
    Stack trace:\n#0 /tmp/tmpg89jn8z_.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpg89jn8z_.php\
    \ on line 34\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n < 2) { // 2 is also a\
    \ prime factor\n        return array(2, 1);\n    }\n\n    $primes = array(2, 1);\n\
    \    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n     \
    \       $primes[] = $i;\n            $n = $n / $i;\n        }\n    }\n\n    return\
    \ $primes;\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\nA simple Python solution based\
    \ on your description:\n<code>\ndef factorize(n):\n    return sorted([i for i\
    \ in set(factorization(n))])\n\ndef factorization(n):\n    return primefactors(n)\n\
    \ndef primefactors(n):\n    factors = factorize(n)\n    primes = []\n    while\
    \ factors:\n        prime = factors.pop()\n        if prime * 2 <= n:\n      \
    \      primes.append(prime)\n            n//= prime\n        else:\n         \
    \   if n > 1:\n                factors.append(prime)\n            primes.append(prime)\n\
    \            n //= prime\n    return primes\n</code>\n<|/ a dscore=2 tags=algorithm,math,python\
    \ |>\n<| c |>\nI really like this approach, however I need the numbers to be in\
    \ order from largest to smallest.\n<|/ c |>\n<| c |>\n`sorted(primefactors(n))`\
    \ will do the job. `sorted` takes a generator and returns a sorted list.\n<|/\
    \ c |>\n<| c |>\n`factorize` can return an empty list as well.\n<|/ c |>\n<| c\
    \ |>\n, I think it will. `factorize` will take `n` as input and return list of\
    \ prime factors of `n` from smallest to largest.\n<|/ c |>\n<| a dscore=1 |>\n\
    The code below uses Miller-Rabin for factorization and prime finding. \n<code>\n\
    def factorize(n):\n    factors = {}\n    while n > 1:\n        q = n\n       \
    \ i = 0\n        while q > 1:\n            i += q // n\n            q //= n\n\
    \        if i in factors:\n            factors[i] = factors[i] + 1\n        else:\n\
    \            factors[i] = 1\n        n = i\n    return sorted(factors.iteritems(),\
    \ reverse=True)\n\ndef prime_factorize(n):\n    primes = []\n    factors = factorize(n)\n\
    \    if n > 1:\n        while factors:\n            primes.append(factors.pop())\n\
    \            n //= factors.pop()\n    return primes\n</code>\n<|/ a tags=algorithm,math,python\
    \ |>\n<| a |>\n<code>\ndef primeFactors(n):\n    if n<2:\n        return [1]\n\
    \    primeFactors=[1]\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpfey_5d8j.php
    on line 26

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if($n<=1)\n        return array(1);\n\
    \n    $f = array();\n    $f[(int)sqrt($n)] = 1;\n\n    for($i=2;$i<=$n;$i++)\n\
    \        if($n/$i == $i)\n            $f[$i] = $f[$n/$i]+1;\n        else\n  \
    \          $f[$i] = $f[$n/$i];\n\n    return array_values($f);\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9y727kwa.php:32\n\
    Stack trace:\n#0 /tmp/tmp9y727kwa.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp9y727kwa.php\
    \ on line 32\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    // Initialize return array.\n\
    \    $factors = array(\n        2 => 1,\n        3 => 2,\n    );\n    // Initialize\
    \ flag and counters.\n    $flag = true;\n    $counter = 0;\n    // Iterate until\
    \ given number is 1 or less times any one of the factors of the given number.\n\
    \    while ($flag) {\n        // Iterate through given numbers factors and sum\
    \ up the number of times each factor appears.\n        foreach ($factors as $k\
    \ => $v) {\n            $counter *= $k;\n            // If given number is divisible\
    \ by given factor then set the flag to false and break loop.\n            if ($n\
    \ >= $v) {\n                $flag = false;\n                break;\n         \
    \   }\n        }\n        // If given number is not divisible by any factor of\
    \ the given number then add the given number to factorization.\n        if (!$flag)\
    \ {\n            $factors[$n] = $counter;\n        }\n        // Iterate through\
    \ factors and sum up the number of times each number appears in the given number.\n\
    \        foreach ($factors as $k => $v) {\n            $counter = 0;\n       \
    \     for ($i = 1; $i <= $n; $i++) {\n                // If current number divided\
    \ by the given factor is an integer then add it to the factorization.\n      \
    \          if ($i % $k == 0) {\n                    $counter++;\n            \
    \    }\n            }\n            // If given number appears more then once in\
    \ given number then add it to the factorization.\n            if ($counter > 1)\
    \ {\n                $factors[$n] += $counter;\n            }\n        }\n   \
    \ }\n    return $factors;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgi91_wyn.php:57\n\
    Stack trace:\n#0 /tmp/tmpgi91_wyn.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpgi91_wyn.php\
    \ on line 57\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array(2);\n\tfor ($i\
    \ = 3; $i <= sqrt($n); $i++) {\n\t\t$factors[] = $i;\n\t\twhile ($n % $i == 0)\
    \ {\n\t\t\t$n /= $i;\n\t\t\t$factors[++$i] += 1;\n\t\t}\n\t}\n\treturn array_reverse($factors);\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp65zg_w3x.php:29\n\
    Stack trace:\n#0 /tmp/tmp65zg_w3x.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp65zg_w3x.php\
    \ on line 29\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factorization = array();\n\t$i\
    \ = $j = 1;\n\t$factorization[] = array($n);\n\twhile ($i <= $n) {\n\t\twhile\
    \ ($n % $i == 0) {\n\t\t\t$factorization[] = array($i);\n\t\t\t$n = $n / $i;\n\
    \t\t\t$i++;\n\t\t}\n\t\tif ($i > $j) {\n\t\t\t$j = $i;\n\t\t}\n\t\t$i++;\n\t}\n\
    \tusort($factorization, 'less_than');\n\treturn $factorization;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: usort(): Argument #2 ($callback) must\
    \ be a valid callback, function \"less_than\" not found or invalid function name\
    \ in /tmp/tmpye5d0c0x.php:26\nStack trace:\n#0 /tmp/tmpye5d0c0x.php(26): usort(Array,\
    \ 'less_than')\n#1 /tmp/tmpye5d0c0x.php(31): factorize(1)\n#2 /tmp/tmpye5d0c0x.php(35):\
    \ candidate(2)\n#3 /tmp/tmpye5d0c0x.php(45): test()\n#4 {main}\n  thrown in /tmp/tmpye5d0c0x.php\
    \ on line 26\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array();\n\tfor ($i\
    \ = 2; $i <= $n; $i++) {\n\t\tif ($n % $i == 0) {\n\t\t\t$factors[] = $i;\n\t\t\
    \t$n /= $i;\n\t\t}\n\t}\n\tif ($n > 1) {\n\t\t$factors[] = $n;\n\t}\n\treturn\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps5g5s800.php:32\n\
    Stack trace:\n#0 /tmp/tmps5g5s800.php(40): test()\n#1 {main}\n  thrown in /tmp/tmps5g5s800.php\
    \ on line 32\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $f = [];\n  foreach(factorizeArray($n)\
    \ as $f) {\n    sort($f);\n  }\n  return $f;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorizeArray()\
    \ in /tmp/tmpg6gyrq0h.php:13\nStack trace:\n#0 /tmp/tmpg6gyrq0h.php(19): factorize(2)\n\
    #1 /tmp/tmpg6gyrq0h.php(23): candidate(2)\n#2 /tmp/tmpg6gyrq0h.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmpg6gyrq0h.php on line 13\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    // We should find factorization\
    \ that has least amount of multiplications between its parts.\n    // So we need\
    \ to find most common factors\n    $common = array();\n    \n    // If we only\
    \ find one number which is not the smallest one and if its count is more, then\
    \ that number is our factor\n    for($i = 1; $i <= $n; $i++) {\n        $count\
    \ = array_count_values(array_slice($factors, $i, $i+1));\n        if($count[$i]\
    \ > 1) {\n            $common[] = $i;\n        }\n    }\n    \n    $factors =\
    \ $common;\n    \n    // Sort factors by their counts (number of times they appeared\
    \ in factorization)\n    array_multisort(array_values($count), SORT_DESC, $factors);\n\
    \    \n    // Return array of factors\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $factors in /tmp/tmphgsi_69x.php on line\
    \ 18\n\nFatal error: Uncaught TypeError: array_slice(): Argument #1 ($array) must\
    \ be of type array, null given in /tmp/tmphgsi_69x.php:18\nStack trace:\n#0 /tmp/tmphgsi_69x.php(18):\
    \ array_slice(NULL, 1, 2)\n#1 /tmp/tmphgsi_69x.php(34): factorize(2)\n#2 /tmp/tmphgsi_69x.php(38):\
    \ candidate(2)\n#3 /tmp/tmphgsi_69x.php(48): test()\n#4 {main}\n  thrown in /tmp/tmphgsi_69x.php\
    \ on line 18\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n % 2 === 0)\n        return\
    \ array(2, 1);\n    $i = 1;\n    $ret = [2];\n    while ($i <= sqrt($n)) {\n \
    \       if ($n % $i === 0) {\n            $n = ($i << 1)*$n;\n            $ret[]\
    \ = $i;\n        }\n        $i++;\n    }\n    return $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmw22arc_.php:31\n\
    Stack trace:\n#0 /tmp/tmpmw22arc_.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpmw22arc_.php\
    \ on line 31\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\tglobal $primes;\n\t$arr = array();\n\
    \tfor($i=2 ; $i*$i<=$n ; $i++) {\n\t\t$arr[$i] = $i;\n\t\tfor ($j=0; $j<$i ; $j++)\
    \ {\n\t\t\tif ($n % $i == 0) {\n\t\t\t\t$n = $n / $i;\n\t\t\t\t$arr[$i] = $arr[$i]\
    \ * $arr[$j];\n\t\t\t\tunset($arr[$j]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\
    \t$primes = array_keys($arr);\n\tasort($primes);\n\treturn $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp3_94u6u.php:35\n\
    Stack trace:\n#0 /tmp/tmpp3_94u6u.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpp3_94u6u.php\
    \ on line 35\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $primes = array_merge(array($n),\
    \ array_keys(factors($n)));\n    return array_count_values($primes);\n}\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factors() in\
    \ /tmp/tmpakw7o1f3.php:12\nStack trace:\n#0 /tmp/tmpakw7o1f3.php(16): factorize(2)\n\
    #1 /tmp/tmpakw7o1f3.php(20): candidate(2)\n#2 /tmp/tmpakw7o1f3.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpakw7o1f3.php on line 12\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n % 2 == 0)\n        return\
    \ array(2, 1);\n    $factors = array();\n    for ($i = 3; $i < $n; $i += 2) {\n\
    \        if ($n % $i == 0) {\n            $factors[] = $i;\n            for ($j\
    \ = $i; $j <= sqrt($n); $j++) {\n                if ($n % $j == 0) {\n       \
    \             $factors[] = $j;\n                    break;\n                }\n\
    \            }\n        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ys2r8zm.php:34\n\
    Stack trace:\n#0 /tmp/tmp3ys2r8zm.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3ys2r8zm.php\
    \ on line 34\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $prime = array();\n    for ($d\
    \ = 2; $d <= floor($n ** 0.5); $d++) {\n        if ($n % $d == 0) {\n        \
    \    $prime[$d] = $d;\n            $n = $n / $d;\n        }\n    }\n    return\
    \ $prime;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbvkyy91g.php:26\n\
    Stack trace:\n#0 /tmp/tmpbvkyy91g.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpbvkyy91g.php\
    \ on line 26\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factorsArr = array();\n    $factorsArr[$n]\
    \ = 1;\n    $factorsArr = array_reverse($factorsArr);\n    $resultArr = array();\n\
    \    foreach ($factorsArr as $key => $val) {\n        $resultArr[] = $key;\n \
    \       for ($i = $val; $i > 1; $i--) {\n            $newArr = array();\n    \
    \        foreach ($factorsArr as $key2 => $val2) {\n                if ($i !=\
    \ $val2) {\n                    $newArr[$key2] = $val2;\n                }\n \
    \           }\n            $resultArr = array_merge($resultArr, $newArr);\n  \
    \      }\n    }\n    return $resultArr;\n}\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzf16oxqy.php:36\n\
    Stack trace:\n#0 /tmp/tmpzf16oxqy.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpzf16oxqy.php\
    \ on line 36\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array();\n\n\t$i = 2;\n\
    \twhile ($n >= $i) {\n\t\t$j = 2;\n\t\twhile ($n >= $i * $j) {\n\t\t\t$factors[]\
    \ = array($i, $j);\n\t\t\t$j++;\n\t\t}\n\n\t\t$i++;\n\t}\n\n\treturn $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_u41hgv.php:33\n\
    Stack trace:\n#0 /tmp/tmp6_u41hgv.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp6_u41hgv.php\
    \ on line 33\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n<=1)\n        return array(1);\n\
    \n    $prime_array=factorize_prime_array($n);\n    $prime_array_count=count($prime_array);\n\
    \    $prime_count=$prime_array_count/2;\n\n    $factors=array();\n    for ($i=0;\
    \ $i<$prime_count; $i++)\n        $factors[$i]=1;\n\n    $i=$prime_count;\n  \
    \  while ($i>0) {\n        $j=$i-1;\n        while ($j>0) {\n            if ($prime_array[$j]!=1)\
    \ {\n                $factors[$i]++;\n                $prime_array[$j]=$prime_array[$j]*$factors[$i];\n\
    \                $i--;\n                $j--;\n            } else {\n        \
    \        break;\n            }\n        }\n        $i--;\n    }\n\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorize_prime_array()\
    \ in /tmp/tmpkf9t4j2d.php:15\nStack trace:\n#0 /tmp/tmpkf9t4j2d.php(43): factorize(2)\n\
    #1 /tmp/tmpkf9t4j2d.php(47): candidate(2)\n#2 /tmp/tmpkf9t4j2d.php(57): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkf9t4j2d.php on line 15\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n    $primes\
    \ = array();\n\n    // Count how many times a factor appeared in original factorization\n\
    \    for ($i = 1; $i <= $n; ++$i) {\n        foreach ($factors as $factor) {\n\
    \            if ($n % $factor === 0) {\n                $factors[] = $factor;\n\
    \                break;\n            }\n        }\n\n        // Check if this\
    \ number contains any prime factor in its factorization\n        if ($n === 1)\
    \ {\n            break;\n        }\n\n        $isprime = true;\n        foreach\
    \ ($primes as $prime) {\n            if ($n % $prime === 0) {\n              \
    \  $isprime = false;\n                break;\n            }\n        }\n\n   \
    \     // If any prime factor of given number was found then this number is not\
    \ prime and must be skipped.\n        // If no prime factor was found then this\
    \ number is prime and no factor must be skipped.\n        if ($isprime) {\n  \
    \          continue;\n        }\n\n        // If this number has more than one\
    \ factor then it cannot be prime\n        if (count($factors) !== 1) {\n     \
    \       continue;\n        }\n\n        // If this number is prime then we can\
    \ skip this number, it's factorization is one factor only.\n        if (isPrime($n))\
    \ {\n            $factors = array(1);\n        } else {\n            // If this\
    \ number has more than one prime factor then it cannot be prime\n            if\
    \ (count($primes) !== 1) {\n                continue;\n            }\n       \
    \ }\n\n        // If this number has more than one factor then it cannot be prime\n\
    \        if (count($factors) !== 1) {\n            continue;\n        }\n\n  \
    \      $factors[] = 1;\n        $primes[] = $n;\n    }\n\n    return $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplfroxpyv.php:75\n\
    Stack trace:\n#0 /tmp/tmplfroxpyv.php(85): test()\n#1 {main}\n  thrown in /tmp/tmplfroxpyv.php\
    \ on line 75\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $fac = array();\n  $a = $n = $n;\n\
    \  $b = $n = $n;\n  $c = $n = $n;\n  $d = $n = $n;\n  $e = $n = $n;\n  $f = $n\
    \ = $n;\n  while ($n > 0) {\n    while ($n % 2 == 0) {\n      $n /= 2;\n     \
    \ $fac[] = 2;\n    }\n    while ($n % 3 == 0) {\n      $n /= 3;\n      $fac[]\
    \ = 3;\n    }\n    while ($n % 5 == 0) {\n      $n /= 5;\n      $fac[] = 5;\n\
    \    }\n    while ($n % 7 == 0) {\n      $n /= 7;\n      $fac[] = 7;\n    }\n\
    \    while ($n % 11 == 0) {\n      $n /= 11;\n      $fac[] = 11;\n    }\n    while\
    \ ($n % 13 == 0) {\n      $n /= 13;\n      $fac[] = 13;\n    }\n    while ($n\
    \ % 17 == 0) {\n      $n /= 17;\n      $fac[] = 17;\n    }\n    while ($n % 19\
    \ == 0) {\n      $n /= 19;\n      $fac[] = 19;\n    }\n    while ($n % 23 == 0)\
    \ {\n      $n /= 23;\n      $fac[] = 23;\n    }\n    while ($n % 29 == 0) {\n\
    \      $n /= 29;\n      $fac[] = 29;\n    }\n    while ($n % 31 == 0) {\n    \
    \  $n /= 31;\n      $fac[] = 31;\n    }\n    while ($n % 37 == 0) {\n      $n\
    \ /= 37;\n      $fac[] = 37;\n    }\n    while ($n % 41 == 0) {\n      $n /= 41;\n\
    \      $fac[] = 41;\n    }\n    while ($n % 43 == 0) {\n      $n /= 43;\n    \
    \  $fac[] = 43;\n    }\n    while ($n % 47 == 0) {\n      $n /= 47;\n      $fac[]\
    \ = 43;\n    }\n    while ($n % 53 == 0) {\n      $n /= 53;\n      $fac[] = 53;\n\
    \    }\n    while ($n % 59 == 0) {\n      $n /= 59;\n      $fac[] = 59;\n    }\n\
    \    while ($n % 61 == 0) {\n      $n /= 61;\n      $fac[] = 61;\n    }\n    while\
    \ ($n % 67 == 0) {\n      $n /= 67;\n      $fac[] = 67;\n    }\n    while ($n\
    \ % 71 == 0) {\n      $n /= 71;\n      $fac[] = 71;\n    }\n    while ($n % 73\
    \ == 0) {\n      $n /= 73;\n      $fac[] = 73;\n    }\n    while ($n % 79 == 0)\
    \ {\n      $n /= 79;\n      $fac[] = 79;\n    }\n    while ($n % 83 == 0) {\n\
    \      $n /= 83;\n      $fac[] = 83;\n    }\n    while ($\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpw_eh9f7a.php on line 113

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = $factorizations =\
    \ array();\n\n    // Compute product of all factors\n    for($i = 1; $i * $i <\
    \ $n; ++$i)\n        $factors[] = $i;\n\n    // Sort factors\n    sort($factors);\n\
    \n    // Check every factor of the product of factors\n    for($i = 1; $i < count($factors);\
    \ ++$i) {\n        for($j = 1; $j * $j < $n; $j += $i) {\n            $check =\
    \ $j * $i;\n            if($check == $n)\n                $factorizations[] =\
    \ array('factor' => $j, 'times' => 1);\n            elseif(isset($factorizations[$check]))\n\
    \                $factorizations[$check]['times'] += 1;\n        }\n    }\n\n\
    \    return $factorizations;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_r46vpv.php:39\n\
    Stack trace:\n#0 /tmp/tmp6_r46vpv.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp6_r46vpv.php\
    \ on line 39\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array(1);\n\t\n\tfor\
    \ ($i = 1; $i < $n; $i++) {\n\t\t$j = 1;\n\t\t\n\t\tfor ($c = 1; $c <= $i; $c++)\
    \ {\n\t\t\tif ($i % $c == 0) {\n\t\t\t\t$j *= $i;\n\t\t\t\t$factors[$c]++;\n\t\
    \t\t\t$i = 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ($i && $j != $i) {\n\t\t\t$factors[$i]++;\n\
    \t\t}\n\t}\n\t\n\treturn $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmpbro4765e.php on line 20\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpbro4765e.php:38\nStack\
    \ trace:\n#0 /tmp/tmpbro4765e.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpbro4765e.php\
    \ on line 38\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factorization = array(1);\n\t\
    for ($i = 2; $i <= sqrt($n); $i++) {\n\t\tfor ($j = 0; $j < $factorization[$i\
    \ - 1]; $j++) {\n\t\t\t$factorization[$i] .= $i;\n\t\t}\n\t}\n\treturn $factorization;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2i0ki4t4.php:26\n\
    Stack trace:\n#0 /tmp/tmp2i0ki4t4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2i0ki4t4.php\
    \ on line 26\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if (!is_numeric($n)) {\n    \
    \    return false;\n    }\n    $factors = [];\n    $f = [];\n    $i = 1;\n   \
    \ $limit = $n - 1;\n    while ($i <= $limit) {\n        if (!$f[$i]) {\n     \
    \       $f[$i] = 1;\n            array_push($factors, $i);\n            while\
    \ ($n % $i == 0) {\n                array_push($factors, $i);\n              \
    \  $n /= $i;\n                $i++;\n            }\n        }\n        else {\n\
    \            $f[$i]++;\n        }\n        $i++;\n    }\n    array_push($factors,\
    \ $n);\n    return $factors;\n}\n</code>\n<|/ a |>\n<| a tags=algorithm,math,factorization\
    \ |>\nI wrote a python script that does this very easily:\n<code>\ndef is_prime(n):\n\
    \    if n % 2 == 0:\n        return False\n    else:\n        for x in range(3,\
    \ int(n**0.5) + 1, 2):\n            if n % x == 0:\n                return False\n\
    \    return True\n\ndef factor(n):\n    factors = []\n    i = 2\n    limit = n\n\
    \    while i <= limit:\n        if is_prime(i):\n            factors.append(i)\n\
    \            n = n / i\n            i += 1\n        else:\n            i += 1\n\
    \    return factors\n\ndef factorization(n):\n    factors = factor(n)\n    factors[::-1].sort(reverse=True)\n\
    \    factors = []\n    for i in factors:\n        if i == 1:\n            factors.append(1)\n\
    \        else:\n            factors.append(i-1)\n    return factors\n\nprint(factorization(100))\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this may be an answer to the question,\
    \ code only answers are discouraged. Please add some explanation to your code.\n\
    <|/ c |>\n<| c |>\nI did not have any experience with python, so I am not gonna\
    \ rewrite it for you. I am just trying to give an idea, hopefully it helps.\n\
    <|/ c |>\n<| c |>\nThank you for sharing your idea. I think, it is much easier\
    \ to understand and write in Python than in other languages. As you see, you were\
    \ not allowed to use any additional functions like is_prime or any for loops.\
    \ The problem with your solution was that the algorithm you implemented is a little\
    \ bit too complex. I think, it is easy to understand and write in Python than\
    \ in other languages. I added some explanation to my answer.\n<|/ c |>\n<| a tags=algorithm,math,factorization\
    \ dscore=0 |>\nHere's a way to do it using recursion, since it seems like a good\
    \ way to learn recursion.  For this problem, we know that the number to be factored\
    \ n is di\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpup_534ax.php
    on line 37

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    // Set $factors to array of numbers\
    \ having no factors\n    $factors = array();\n    // Get factorization of given\
    \ number n\n    $factorization = factorize($n, $factors);\n    // Set $factors\
    \ equal to factorization\n    $factors = $factorization;\n    // If $factors already\
    \ is empty array then factorization of given number $n cannot be done and array\
    \ is empty as well\n    if (empty($factors)) return array();\n    // Get array\
    \ of factors in order from smallest to largest\n    $sorted_factors = array_keys($factors);\n\
    \    // Return array of prime factors\n    return $sorted_factors;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpc2ftv716.php on line 15

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $primeFactors = array();\n  \
    \  $i = 2;\n    while($i <= $n)\n    {\n        $j = 2;\n        while($j <= $n\
    \ / $i) {\n            if($n % $i == 0) {\n                $primeFactors[] = $i;\n\
    \                $n = $n / $i;\n            } else {\n                $j++;\n\
    \            }\n        }\n        $i++;\n    }\n\n    return $primeFactors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpij93h14_.php:36\n\
    Stack trace:\n#0 /tmp/tmpij93h14_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpij93h14_.php\
    \ on line 36\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array();\n\tif ($n <\
    \ 2) {\n\t\t$factors[] = $n;\n\t\treturn $factors;\n\t}\n\n\tfor ($i = 0; $n >=\
    \ $i; $i++) {\n\t\t$factors[] = $i;\n\t\t$n = $n % $i;\n\t}\n\n\t$factors[] =\
    \ $n;\n\n\treturn $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp6ulsc2_f.php:20\n\
    Stack trace:\n#0 /tmp/tmp6ulsc2_f.php(29): factorize(2)\n#1 /tmp/tmp6ulsc2_f.php(33):\
    \ candidate(2)\n#2 /tmp/tmp6ulsc2_f.php(43): test()\n#3 {main}\n  thrown in /tmp/tmp6ulsc2_f.php\
    \ on line 20\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $factorization = [];\n\n  for ($i\
    \ = 2; $i <= sqrt($n); ++$i) {\n    if ($n % $i == 0) {\n      $j = 1;\n     \
    \ while ($j++ < $i) {\n        if ($n % $j == 0) {\n          $factorization[]\
    \ = $j;\n          break;\n        }\n      }\n    }\n  }\n\n  return $factorization;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkag628yo.php:34\n\
    Stack trace:\n#0 /tmp/tmpkag628yo.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkag628yo.php\
    \ on line 34\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n < 2) return array();\n\
    \    if ($n < 5) return array(2, 1);\n    $factors = array(2);\n    $max = 0;\n\
    \    for ($i = 5; $i > $n; $i--)\n        if ($n % $i == 0) {\n            $factors[$i]\
    \ = $i;\n            if ($n > $i) {\n                $factors[$n] = $n/$i;\n \
    \           }\n            $max = max($max, $i);\n        }\n    if ($n%$max >\
    \ 0) $factors[$n] = $n%$max;\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ew94jn0.php:33\n\
    Stack trace:\n#0 /tmp/tmp6ew94jn0.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp6ew94jn0.php\
    \ on line 33\n"
  timestamp: 1659979577
- exit_code: -1
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    $result =\
    \ $n;\n    while ($n > 0) {\n        for ($i = 2; $i <= sqrt($n); $i++) {\n  \
    \          if ($n % $i == 0) {\n                $n = ($n / $i) * $i;\n       \
    \     } else {\n                break;\n            }\n            $factors[]\
    \ = $i;\n        }\n    }\n    return $factors;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979583
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if($n<=1)\n        return array(1);\n\
    \    if($n%2==0)\n        return array(2);\n    $factorization=factorize($n/2);\n\
    \    $factorization[]=$n;\n    return $factorization;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcp68022k.php:26\n\
    Stack trace:\n#0 /tmp/tmpcp68022k.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpcp68022k.php\
    \ on line 26\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $f = array();\n  $t = $n;\n  $factor\
    \ = 1;\n  while ($t != 1) {\n    while ($t % $factor == 0) {\n      $f[] = $factor;\n\
    \      $t /= $factor;\n    }\n    $factor++;\n  }\n  if ($t != 1) array_push($f,\
    \ $t);\n  return $f;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpv8oszwyc.php on line 17

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array();\n\t$i = 1;\n\
    \twhile($i <= $n) {\n\t\tif($n % $i == 0) {\n\t\t\t$factors[] = $i;\n\t\t\t$n\
    \ /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t}\n\treturn $factors;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpiru8p4sy.php on line 16

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n == 1) {\n        return\
    \ array(1, 1);\n    }\n    if ($n % 2 == 0) {\n        return array(2, 1);\n \
    \   }\n    $f = array();\n    foreach (factorize($n / 2) as $k => $v) {\n    \
    \    $f[] = $v * $k;\n    }\n    foreach (factorize($n / 3) as $k => $v) {\n \
    \       $f[] = $v * $k;\n    }\n    return $f;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpolgyrfua.php:33\n\
    Stack trace:\n#0 /tmp/tmpolgyrfua.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpolgyrfua.php\
    \ on line 33\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $f = new ReflectionFunction('bcpow');\n\
    \    $n = $n->__invoke(1, 1);\n    $f->setArguments($n, $n);\n    return $f->invoke();\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,algorithm |>\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpk3ktbddb.php
    on line 17

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factorization = array();\n \
    \   for($i = 1; $i <= sqrt($n); ++$i) {\n        if($n % $i == 0) {\n        \
    \    $factorization[$i] ++;\n            $n = ($n / $i) - 1;\n        }\n    }\n\
    \    return array_merge(array_fill(0, count($factorization) - 1, 1), array_reverse($factorization));\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI edited the post to make it more clear.\
    \ Thanks!\n<|/ c |>\n<| c |>\nStill not clear, please explain what you mean by\
    \ \"factorize\". For example, for 15, what is the expected output?\n<|/ c |>\n\
    <| c |>\nI added the expected output.\n<|/ c |>\n<| c |>\nI edited the post to\
    \ make it more clear. Thanks!\n<|/ c |>\n<| c |>\nPlease do not post answers on\
    \ obviously off topic/bad questions. [See: **Should one advise on off topic questions?**](//meta.stackoverflow.com/q/276572)\n\
    <|/ c |>\n<| a tags=math,php,algorithm |>\nIf you simply want to find the prime\
    \ factors of a number, here's an easy way using PHP:\n<code>\n<?php\n$n = 20;\n\
    $i = 1;\n\n$factors = array(2);\nwhile($i * $i <= $n) {\n    if($n % $i == 0)\
    \ {\n        $factors[] = $i;\n        $n /= $i;\n    }\n    $i++;\n}\nprint_r($factors);\n\
    </code>\nOutput:\n<code>\nArray\n(\n    [0] => 2\n    [1] => 3\n    [2] => 5\n\
    )\n</code>\nDemo\n<|/ a dscore=2 |>\n<| c |>\nI edited the post to make it more\
    \ clear. Thanks!\n<|/ c |>\n<| c |>\nThe only way I can think of to make your\
    \ code more efficient is to eliminate the inner loop by testing upwards from sqrt($n)\
    \ to $n. Or you can just set $i=$n/$i in the while loop to keep the number of\
    \ divisions down.\n<|/ c |>\n<| c |>\nPlease do not post answers on obviously\
    \ off topic/bad questions. [See: **Should one advise on off topic questions?**](//meta.stackoverflow.com/q/276572)\n\
    <|/ c |>\n<| a tags=math,php,algorithm |>\nIn JavaScript the code is as follows:\n\
    \n<code>\nlet factorization = function( n \nfunction candidate(...$args) {\n \
    \   return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp_a9kzvtg.php
    on line 21

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n\n    //\
    \ Count how many times current factor appears in factorization array.\n    for\
    \ ($i = 0; $i < count($factors); $i++) {\n        if (($factors[$i] == 0) && ($n\
    \ % $i == 0)) {\n            $factors[$i] = $i + 1;\n        }\n    }\n\n    if\
    \ (count($factors) == 0) {\n        return array(1);\n    }\n\n    // Find first\
    \ factor.\n    for ($i = 0; $i < count($factors); $i++) {\n        if ($factors[$i]\
    \ == 0) {\n            $first = $i;\n            break;\n        }\n    }\n\n\
    \    // Find how many times given number divides by each of the factors.\n   \
    \ for ($i = 0; $i < count($factors); $i++) {\n        if ($factors[$i] > 1) {\n\
    \            $factors[$i] = $n / $factors[$i];\n        }\n    }\n\n    // Find\
    \ all other factors.\n    for ($i = 0; $i < count($factors); $i++) {\n       \
    \ if ($factors[$i] > 0) {\n            for ($j = $i + 1; $j < count($factors);\
    \ $j++) {\n                if ($factors[$j] == 0) {\n                    $factors[$j]\
    \ = $factors[$i];\n                } else {\n                    $factors[$j]\
    \ = $factors[$j] * $factors[$i];\n                }\n            }\n        }\n\
    \    }\n\n    $factors = array_reverse($factors);\n\n    // Return factors in\
    \ increasing order\n    $factors = array_merge($factors);\n    return array_slice($factors,\
    \ 0, count($factors) - 1);\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl7xi30aw.php:65\n\
    Stack trace:\n#0 /tmp/tmpl7xi30aw.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpl7xi30aw.php\
    \ on line 65\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    // Find prime\
    \ factors and mark them as prime factors\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        if ($n % $i == 0) {\n            $factors[$i] = $i;\n            $n =\
    \ floor($n / $i);\n        }\n    }\n    if ($n == 1) {\n        return array_fill(1,\
    \ count($factors), $factors);\n    }\n    return array_fill(1, $n, $factors);\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl74gaq0m.php:31\n\
    Stack trace:\n#0 /tmp/tmpl74gaq0m.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpl74gaq0m.php\
    \ on line 31\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array();\n\n\twhile\
    \ ($n) {\n\t\t$n = intval($n % 2);\n\t\t$factors[$n] += 1;\n\t}\n\n\t$factors\
    \ = array_reverse($factors);\n\treturn $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp6nnzgl6a.php on line 16\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp6nnzgl6a.php:28\nStack\
    \ trace:\n#0 /tmp/tmp6nnzgl6a.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6nnzgl6a.php\
    \ on line 28\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $result = array();\n  $i = 2; $num\
    \ = 1;\n\n  while ($num <= $n) {\n    if ($num % $i == 0) {\n      $result[$i][]\
    \ = $num;\n      $num = 1;\n    } else {\n      $num++;\n      $i++;\n    }\n\
    \  }\n\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptlhzb4n6.php:33\n\
    Stack trace:\n#0 /tmp/tmptlhzb4n6.php(43): test()\n#1 {main}\n  thrown in /tmp/tmptlhzb4n6.php\
    \ on line 33\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $n = $n != 1 ? $n : 2;\n    list($d,\
    \ $t) = prime($n);\n    $f = array();\n    while($t != 1) {\n        if($d > $t)\
    \ {\n            $t = $d;\n            $d = $n / $t;\n        } else {\n     \
    \       $f = array_merge($f, range(2, $t));\n            break;\n        }\n \
    \   }\n    $f = array_merge($f, range(2, $d));\n    $f = array_unique($f);\n \
    \   return $f;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function prime() in /tmp/tmp7pzo4hlb.php:13\n\
    Stack trace:\n#0 /tmp/tmp7pzo4hlb.php(30): factorize(2)\n#1 /tmp/tmp7pzo4hlb.php(34):\
    \ candidate(2)\n#2 /tmp/tmp7pzo4hlb.php(44): test()\n#3 {main}\n  thrown in /tmp/tmp7pzo4hlb.php\
    \ on line 13\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\tif ($n < 2) return array();\n\t\
    $factors = array(1);\n\tfor ($i = 2; $i <= sqrt($n); $i++) {\n\t\tfor ($j = 1;\
    \ $j <= $i; $j++) {\n\t\t\tif ($n % $i == 0) {\n\t\t\t\t$factors[] = $j;\n\t\t\
    \t\t$n /= $i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp35ja_s10.php:31\n\
    Stack trace:\n#0 /tmp/tmp35ja_s10.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp35ja_s10.php\
    \ on line 31\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n%2==0) return array(2);\n\
    \    $fs=array(2);\n    for($i=3;$i>$n;$i+=2) {\n        if ($n%$i==0) {\n   \
    \         $fs[]=$i;\n            for($j=$i;$j<$n;$j+=2*$i) {\n               \
    \ if ($n%$j==0) {\n                    $fs[]=$j;\n                    $n=$n/$j;\n\
    \                    break;\n                }\n            }\n            break;\n\
    \        }\n    }\n    return $fs;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0qy9deov.php:36\n\
    Stack trace:\n#0 /tmp/tmp0qy9deov.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp0qy9deov.php\
    \ on line 36\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $factors = array();\n  $factor\
    \ = 1;\n\n  while ($n >= $factor) {\n    $n = $n % $factor;\n    $factors[] =\
    \ $factor;\n    $factor *= $factor;\n  }\n\n  return $factors;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nNice answer. Why not use `array_count_values()` in the `factorize`\
    \ function?\n<|/ c |>\n<| c |>\n: Nice idea. I was thinking about something like\
    \ that but then thought maybe I should make it a separate function because I am\
    \ thinking of using it again in the `factorize` function.\n<|/ c |>\n<| c |>\n\
    Thank you very much! It works great! I've been stuck on this for quite some time\
    \ now. Thanks again!\n<|/ c |>\n<| c |>\n: No problem, glad it helped. :-)\n<|/\
    \ c |>\n<| c |>\n: Nice one, too. :-) Thanks for sharing that. :-)\n<|/ c |>\n\
    <| a |>\n<code>\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpsw1aeqyg.php
    on line 23

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $f = array();\n    for ($i =\
    \ 2; $i <= sqrt($n); ++$i) {\n        if ($n % $i == 0) {\n            $f[] =\
    \ $i;\n            $n = floor($n / $i);\n        }\n    }\n    if ($n == 1) {\n\
    \        $f[] = 1;\n    }\n    return $f;\n}\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7a3dco8.php:30\n\
    Stack trace:\n#0 /tmp/tmpp7a3dco8.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpp7a3dco8.php\
    \ on line 30\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array();\n\n\tfor ($i\
    \ = 2; $i <= sqrt($n); $i++) {\n\t\tif ($n % $i == 0) {\n\t\t\t$n = $i . $n /\
    \ $i;\n\t\t\t$factors[] = $i;\n\t\t}\n\t}\n\n\treturn $factors;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nIf this code is working and you want someone to explain\
    \ it, please ask it as a question instead of posting it as a comment.\n<|/ c |>\n\
    <| c |>\nHi, thanks for your reply. I posted this as a comment because it doesn't\
    \ work correctly (it returns wrong values), however I haven't been able to make\
    \ it work properly since I don't know how to fix the problem...\n<|/ c |>\n<|\
    \ c |>\nIt seems that my first code snippet works correctly! I added my code snippets\
    \ above which you can use\n<|/ c |>\n<| c |>\nYes, it works, thanks! BTW I don't\
    \ understand this part \"if ($n % $i == 0)\" why don't we use $n / $i instead?\n\
    <|/ c |>\n<| c |>\nIf $n is divisible by $i, then the $i will be removed. Eg.\
    \ ($i = 2) 5 is divisible by $i, then $n = 5 and $i = 2. So we check if $n is\
    \ divisible by $i then we remove it\n<|/ c |>\n<| a dscore=1 |>\nI wrote a function\
    \ that factorizes numbers, and it works perfectly for me.\n<code>\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpnmfxkhys.php
    on line 23

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    // The result array from previous\
    \ calculation\n    $result = array();\n    // Loop through all possible divider\
    \ factors\n    for ($i = 1; $i < $n; $i++) {\n        // If number is divisible\
    \ by divider\n        if ($n % $i == 0) {\n            // Add the number to result\
    \ array and divide it by divider\n            $result[] = $i;\n            $n\
    \ /= $i;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9di5_6xt.php:31\n\
    Stack trace:\n#0 /tmp/tmp9di5_6xt.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp9di5_6xt.php\
    \ on line 31\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors    = array();\n    $maxFactors\
    \ = array();\n    $i = 1;\n    while($i <= $n) {\n        if($n % $i == 0) {\n\
    \            array_push($factors, $i);\n            array_push($maxFactors, $i);\n\
    \        } else {\n            $i++;\n        }\n    }\n    $maxFactors = array_unique($maxFactors);\n\
    \n    $factorization = array();\n\n    for($i = 0; $i < count($maxFactors); $i++)\
    \ {\n        $sum = 0;\n        for($j = 0; $j < count($factors); $j++) {\n  \
    \          if($factors[$j] == $maxFactors[$i]) {\n                $sum += $factors[$j];\n\
    \                unset($factors[$j]);\n            }\n        }\n        $factorization[]\
    \ = $sum;\n    }\n\n    return $factorization;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    The algorithm is O(n^2) but the inner loop is O(n) so it should be O(n^2) and\
    \ you might have to use better data structures or you can just do a O(n) brute\
    \ force search.\n<|/ c |>\n<| c |>\nIt's O(n^2) since you need to go through every\
    \ number in both the arrays to find the factors. But yes, it is O(n) time complexity\
    \ which is not an issue if you are using some kind of lookup table for the factors.\
    \ But yes, a better data structure for factorization would be much better.\n<|/\
    \ c |>\n<| c |>\nYes, O(n^2) is correct since the outer loop iterates through\
    \ all the numbers and inner loop does it for each number in outer loop.\n<|/ c\
    \ |>\n<| c |>\nI think it would be better to use two arrays. One for maxFactors\
    \ and one for factors. So you only have to iterate through the factors once.\n\
    <|/ c |>\n<| c |>\n: Yes, it would be better to do two arrays. That would be O(n).\n\
    <|/ c |>\n<| a tags=algorithm,php |>\nYes, it's possible to do that in O(N) time\
    \ complexity (assuming no integer overflow).\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp3y6pr18j.php
    on line 40

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $d = $a = array();\n    while($n)\
    \ {\n        $d[] = $n % 2; // Add current number to the list of factors.\n  \
    \      $n = floor($n / 2);\n    }\n    // Sort list in ascending order\n    sort($d);\n\
    \    // Add all factors of 2 to the list\n    if(!in_array(2, $d)) {\n       \
    \ $d[] = 2;\n    }\n    // Add all factors of 3 to the list\n    if(!in_array(3,\
    \ $d)) {\n        $d[] = 3;\n    }\n    // Add all factors of 4 to the list\n\
    \    if(!in_array(4, $d)) {\n        $d[] = 4;\n    }\n    // Add all factors\
    \ of 5 to the list\n    if(!in_array(5, $d)) {\n        $d[] = 5;\n    }\n   \
    \ // Add all factors of 6 to the list\n    if(!in_array(6, $d)) {\n        $d[]\
    \ = 6;\n    }\n    // Add all factors of 7 to the list\n    if(!in_array(7, $d))\
    \ {\n        $d[] = 7;\n    }\n    // Add all factors of 8 to the list\n    if(!in_array(8,\
    \ $d)) {\n        $d[] = 8;\n    }\n    // Add all factors of 9 to the list\n\
    \    if(!in_array(9, $d)) {\n        $d[] = 9;\n    }\n    // Add all factors\
    \ of 10 to the list\n    if(!in_array(10, $d)) {\n        $d[] = 10;\n    }\n\
    \    // Add all factors of 11 to the list\n    if(!in_array(11, $d)) {\n     \
    \   $d[] = 11;\n    }\n    // Add all factors of 12 to the list\n    if(!in_array(12,\
    \ $d)) {\n        $d[] = 12;\n    }\n    // Add all factors of 13 to the list\n\
    \    if(!in_array(13, $d)) {\n        $d[] = 13;\n    }\n    // Add all factors\
    \ of 14 to the list\n    if(!in_array(14, $d)) {\n        $d[] = 14;\n    }\n\
    \    // Add all factors of 15 to the list\n    if(!in_array(15, $d)) {\n     \
    \   $d[] = 15;\n    }\n    // Add all factors of 16 to the list\n    if(!in_array(16,\
    \ $d)) {\n        $d[] = 16;\n    }\n    // Add all factors of 17 to the list\n\
    \    if(!in_array(17, $d)) {\n        $d[] = 17;\n    }\n    // Add all factors\
    \ of 18 to the list\n    if(!in_array(18, $d)) {\n        $d[] = 18;\n    }\n\
    \    // Add all factors of 19 to the list\n    if(!in_array(19, $d)) {\n     \
    \   $d[] = 19;\n    }\n    // Add all factors of 20 to the \nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 11 in /tmp/tmp8mlwa5pz.php on line 107

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    // Sieve of eratosthenes\n  \
    \  // http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n    // Sieve of Eratosthenes\
    \ is slightly faster than the original version (~10%)\n    // but is also more\
    \ memory efficient\n    // http://jsperf.com/sieve-of-eratosthenes\n    $d = [1\
    \ => 1];\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0)\
    \ {\n            $m = $n / $i;\n            for ($j = 1; $j <= $i; $j++) {\n \
    \               if ($m * $j == $n) {\n                    unset($d[$i]);\n   \
    \             }\n            }\n        }\n    }\n    return array_filter(array_keys($d));\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstb5teh1.php:36\n\
    Stack trace:\n#0 /tmp/tmpstb5teh1.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpstb5teh1.php\
    \ on line 36\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n    $i =\
    \ 2;\n    while($i < $n) {\n        if($n % $i == 0)\n            $factors[$i]++;\n\
    \        $i++;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnfysqfi1.php:27\n\
    Stack trace:\n#0 /tmp/tmpnfysqfi1.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpnfysqfi1.php\
    \ on line 27\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array($n);\n    for($i\
    \ = 2; $i < intval($n / 2); $i++) {\n        if($n % $i == 0) {\n            while($n\
    \ % $i == 0) {\n                $n /= $i;\n                $factors[] = $i;\n\
    \            }\n        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_0_4u5d3.php:30\n\
    Stack trace:\n#0 /tmp/tmp_0_4u5d3.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp_0_4u5d3.php\
    \ on line 30\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n    $n =\
    \ $n - 1;\n    // If number equals 1\n    if ($n == 1) {\n        $factors[] =\
    \ $n;\n    }\n    while ($n % 2 == 0) {\n        $factors[] = $n;\n        $n\
    \ = $n / 2;\n    }\n    $currentNum = 2;\n    while ($n % $currentNum == 0) {\n\
    \        $factors[] = $currentNum;\n        $n = $n / $currentNum;\n    }\n  \
    \  return $factors;\n}\n</code>\n<|/ a tags=factorization,php,numbers |>\n<| a\
    \ dscore=0 |>\n<code>\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpyn_63ogq.php
    on line 29

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $factors = array();\n\n  if ($n\
    \ >= 2) {\n    $factors[] = 2;\n  }\n  for ($i = 3; $i * $i <= $n; $i++) {\n \
    \   if ($n % $i == 0) {\n      $factors[] = $i;\n      while ($n % ($i * $i) ==\
    \ 0) {\n        $factors[] = $i;\n      }\n    }\n  }\n  return $factors;\n}\n\
    \nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpisom41nd.php:34\n\
    Stack trace:\n#0 /tmp/tmpisom41nd.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpisom41nd.php\
    \ on line 34\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array(1);\n    for\
    \ ($i = 2; $i <= sqrt($n); $i++) {\n        while ($n % $i === 0) {\n        \
    \    $n = $n / $i;\n            $factors[] = $i;\n        }\n    }\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_g0soqey.php:27\n\
    Stack trace:\n#0 /tmp/tmp_g0soqey.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp_g0soqey.php\
    \ on line 27\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array(1);\n    $max\
    \ = pow($n, $n);\n    for($i = 1; $i <= $max; $i++) {\n        $max *= $n;\n \
    \       if($n % $i == 0) {\n            $factors[$i] += $max;\n        }\n   \
    \ }\n    return $factors;\n}\n</code>\n<|/ a tags=primes,arrays,php,algorithm,math\
    \ dscore=1 |>\n<| c |>\nThank you for the reply, I used the function above and\
    \ was able to find the prime factors. However, the algorithm doesn't work when\
    \ given numbers larger than 100. The function runs very slowly and gives an error\
    \ of memory exceeded (I assume due to the large amount of numbers). Is there any\
    \ way to improve the algorithm or can you suggest other algorithms that will work?\n\
    <|/ c |>\n<| c |>\nAs you can see, I have the solution for you already. Simply\
    \ use the function with big numbers. `factorize(1048576)` for example, takes about\
    \ 2 seconds on my machine. Or use the function above with bigger numbers.\n<|/\
    \ c |>\n<| c |>\nI just tried factorize(1048576) and it takes approximately 8\
    \ seconds. I realize that this is likely because of the huge amount of numbers\
    \ but I was wondering if there's a way to further improve the algorithm to make\
    \ it more efficient.\n<|/ c |>\n<| c |>\nYou don't need to use the function above.\
    \ I have already included a solution for you - please see my answer. The problem\
    \ is that you have a very large number of numbers to factorize. You just can't\
    \ solve them all at once.\n<|/ c |>\n<| c |>\nThis is not an algorithmic question\
    \ and should be asked on [Mathematics Stack Exchange](http://math.stackexchange.com/).\n\
    <|/ c |>\n<| a |>\nA simple prime number checker will tell you if a number is\
    \ prime or not. \n<code>\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpe7ab9vac.php
    on line 22

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n    foreach($factorizeRecursive($n)\
    \ as $factor)\n        array_push($factors, $factor);\n    return $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $factorizeRecursive in /tmp/tmpx3n1smft.php\
    \ on line 13\n\nFatal error: Uncaught Error: Value of type null is not callable\
    \ in /tmp/tmpx3n1smft.php:13\nStack trace:\n#0 /tmp/tmpx3n1smft.php(19): factorize(2)\n\
    #1 /tmp/tmpx3n1smft.php(23): candidate(2)\n#2 /tmp/tmpx3n1smft.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmpx3n1smft.php on line 13\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n    $sqrt\
    \ = floor($n ** 0.5);\n    $i = 3;\n    $prime = 2;\n    while (--$i >= 0) {\n\
    \        if ($n % $i == 0) {\n            if ($i >= $sqrt) {\n               \
    \ $factors[] = $prime;\n                $factors[] = $i;\n            } else {\n\
    \                $factors[] = $i;\n            }\n            $n /= $i;\n    \
    \    }\n        $prime++;\n    }\n    if ($n > 1) {\n        $factors[] = $n;\n\
    \    }\n    return $factors;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpxprtwlke.php:17\n\
    Stack trace:\n#0 /tmp/tmpxprtwlke.php(34): factorize(1)\n#1 /tmp/tmpxprtwlke.php(38):\
    \ candidate(2)\n#2 /tmp/tmpxprtwlke.php(48): test()\n#3 {main}\n  thrown in /tmp/tmpxprtwlke.php\
    \ on line 17\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $fact = array(\n        1 =>\
    \ array(1),\n    );\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n\
    \ % $i == 0) {\n            $fact[$i] []= $i;\n            $n = $n / $i;\n   \
    \     }\n    }\n    return $fact;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq95nxsg6.php:29\n\
    Stack trace:\n#0 /tmp/tmpq95nxsg6.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpq95nxsg6.php\
    \ on line 29\n"
  timestamp: 1659979577
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $factors = [];\n  $divisor = 2;\n\
    \  while ($divisor <= sqrt($n)) {\n    if ($n % $divisor == 0) {\n      $factors[]\
    \ = $divisor;\n      $n = (int) ($n / $divisor);\n    } else {\n      $divisor++;\n\
    \    }\n  }\n  $factors[] = $n;\n  return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n<2) {\n        $f = array($n);\n\
    \        $f[0] = $f[1] = 1;\n        return $f;\n    }\n    $f = array();\n  \
    \  $f[0] = $f[1] = 1;\n    $q = $f[0]-1;\n    $x = $f[1]-1;\n    for($i=2;$i<=$n;$i++){\n\
    \        while($x>1 && $n%$x==0){\n            $x--;\n            $f[$q]++;\n\
    \        }\n        $q++;\n        $x = $f[1]-1;\n    }\n    return $f;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpczs2p8ix.php:37\n\
    Stack trace:\n#0 /tmp/tmpczs2p8ix.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpczs2p8ix.php\
    \ on line 37\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n <= 1) {\n        return\
    \ array();\n    }\n\n    // If the number is prime, return its factorization\n\
    \    if ($n == 1) {\n        return array(1);\n    }\n\n    $factorization = array();\n\
    \n    // Test factorization\n    for($i = 1; $i <= $n; $i++) {\n        if($n\
    \ % $i == 0) {\n            $factorization[] = $i;\n            $n /= $i;\n  \
    \      }\n    }\n\n    if ($n != 1) {\n        $factorization[] = $n;\n    }\n\
    \n    return $factorization;\n}\n</code>\n<|/ a tags=primes,php dscore=0 |>\n\
    <| a |>\nHere is the one line answer\n<code>\n$n = array_reduce(range(1, $n),\
    \ function ($carry, $item) {\n    return $carry + ($item & 1 ? $item : 0);\n},\
    \ 0);\n</code>\n<|/ a dscore=0 tags=primes,php |>\n<| a dscore=0 |>\nI wrote a\
    \ small library in php to check whether the number is prime or not. you can get\
    \ it from my git repository.\nThe code will look like this:\n<code>\n<?php\nuse\
    \ yagisan\\is_prime\\Number\\Prime;\nclass Number{\n    //you can choose a specific\
    \ type of prime number you want to check for\n    const type = [Prime::P2, Prime::P3,\
    \ Prime::P5, Prime::P7, Prime::P9, Prime::P11, Prime::P13];\n    public function\
    \ is_prime(){\n        foreach ($this->type as $key){\n            if (is_numeric($key)){\n\
    \                if ($this->isPrime($key))\n                    return true;\n\
    \            }\n        }\n        return false;\n    }\n    public function isPrime($number){\n\
    \        $result = true;\n        for ($i = 2; $i <= $number / 2; $i++) {\n  \
    \          if ($number % $i == 0) {\n                $result = false;\n      \
    \          break;\n            }\n        }\n        return $result;\n    }\n\
    }\n\n$number = new Number();\n$is_prime = $number->is_prime();\nvar_dump($is_prime);\n\
    </code>\n<|/ a tags=primes,php |>\n<| a tags=primes,php |>\nI did this using recursion.\n\
    The function primeFactor will find all the prime factors and will return an array\
    \ of them in order of decreasing value. The array will look like this:\n<code>\n\
    Array (\n    [0] => 2\n    [1] => 3\n    [2] => 5\n    [3] => 7\n)\n</code>\n\
    Code:\n<code>\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmplwr1j4po.php
    on line 37

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array();\n\tfor ($i\
    \ = 1; $i * $i <= $n; ++$i) {\n\t\t$j = 1;\n\t\twhile ($j * $j <= $i) {\n\t\t\t\
    $j++;\n\t\t}\n\t\tif ($i == $j) {\n\t\t\t$factors[] = $i;\n\t\t\t$factors[] /=\
    \ $i;\n\t\t}\n\t}\n\treturn $factors;\n}\n\nfunction candidate(...$args) {\n \
    \   return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzfexmlmn.php:31\n\
    Stack trace:\n#0 /tmp/tmpzfexmlmn.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpzfexmlmn.php\
    \ on line 31\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array(2);\n\tfor ($i\
    \ = 3; $i <= sqrt($n); $i += 2) {\n\t\t$fact = 1;\n\t\twhile ($n % $i == 0) {\n\
    \t\t\t$fact *= $i;\n\t\t\t$n /= $i;\n\t\t}\n\t\t$factors[] = $fact;\n\t}\n\treturn\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbad7l2_x.php:30\n\
    Stack trace:\n#0 /tmp/tmpbad7l2_x.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbad7l2_x.php\
    \ on line 30\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    // Initialize result array with\
    \ all factors of given number\n    $factors = $factorizations = array();\n   \
    \ // Get all prime factors\n    for($i = 2; $i <= sqrt($n); $i++) {\n        //\
    \ If $n can be divided by $i (not including 1 exactly), then it is a prime factor\n\
    \        if($n % $i == 0) {\n            // Add i to list of factors and mark\
    \ it as used\n            $factors[$i] = $i;\n            // Since we added $i\
    \ to factors list, it is now a factor of $n\n            $nFactors = $i;\n   \
    \         // If $n can be divided by any other factor of $i (including 1 exactly),\
    \ then $n is not a prime factor\n            for($j = 2; $j <= $i; $j++) {\n \
    \               if($n % $j == 0)\n                    break;\n               \
    \ // $j is not a factor of $n\n                // If $j is a factor of $n and\
    \ $n not divisible by $j\n                // Then this $j is a factor of $n and\
    \ $n not divisible by $j\n                if($j % $i == 0) {\n               \
    \     // Add $j to list of factors and mark it as used\n                    $factors[$j]\
    \ = $j;\n                    // Since we added $j to factors list, $nFactors becomes\
    \ $j\n                    $nFactors = $j;\n                    // If $n can be\
    \ divided by any other factor of $i (including 1 exactly), then $n is not a prime\
    \ factor\n                    break;\n                }\n            }\n     \
    \       // Since $n can be divided by any other factor of $i (including 1 exactly),\
    \ then $n is not a prime factor\n            if($j % $i == 0) {\n            \
    \    $factors[$i] = $nFactors;\n                $nFactors = $i;\n            }\n\
    \            // If $n can be divided by $i (including 1 exactly), then $n is a\
    \ prime factor\n            else {\n                // Add $i to list of factors\
    \ and mark it as used\n                $factors[$i] = $i;\n            }\n   \
    \     }\n    }\n    // If $n can be divided by 1 or 2, then it is not a prime\
    \ factor of n\n    if($n % 1 == 0 || $n % 2 == 0) {\n        $factors[$n] = 0;\n\
    \    }\n    return $factors;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3y98ll20.php:61\n\
    Stack trace:\n#0 /tmp/tmp3y98ll20.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp3y98ll20.php\
    \ on line 61\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n <= 1) {\n        $r =\
    \ array(1, 1);\n    } else {\n        $r1 = array(1, 1);\n        $r2 = array(2,\
    \ 1);\n        $p = 2;\n        do {\n            while ($n % $p == 0 && $p <=\
    \ $n) {\n                $p = $p * 2;\n            }\n            $r1[0] = $r1[0]\
    \ * $p;\n            $r1[1] = $r1[1] * $p;\n            $r2[0] = $r2[0] * $p;\n\
    \            $r2[1] = $r2[1] * $p;\n            $n /= $p;\n            $p++;\n\
    \        } while ($n > 1);\n        $r = $r1 + $r2;\n    }\n    return $r;\n}\n\
    \nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpopqlgto8.php:39\n\
    Stack trace:\n#0 /tmp/tmpopqlgto8.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpopqlgto8.php\
    \ on line 39\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n    $factors[2]\
    \ = 1;\n    $factors[3] = 1;\n    $i = 2;\n    while($i < $n) {\n        $num\
    \ = $i * 2;\n        $factors[$num] = isset($factors[$num]) ? $factors[$num] +\
    \ 1 : 1;\n        if($num % $i == 0) {\n            $i++;\n        }\n    }\n\
    \    sort($factors, SORT_NUMERIC);\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp__bts6zm.php:32\n\
    Stack trace:\n#0 /tmp/tmp__bts6zm.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp__bts6zm.php\
    \ on line 32\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factorization = $n = $x = 1;\n\
    \tfor ($i = 1; $i < $n; $i++) if ($n % $i == 0) {\n\t\t$x = $i * $x;\n\t\t$factorization[]\
    \ = $x;\n\t\t$n /= $i;\n\t}\n\treturn $factorization;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyxkqbu6w.php:26\n\
    Stack trace:\n#0 /tmp/tmpyxkqbu6w.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpyxkqbu6w.php\
    \ on line 26\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $fArr = $fArr2 = array();\n\n\
    \    for ($x = 2; $x <= sqrt($n); ++$x) {\n        if ($n % $x == 0) {\n     \
    \       ++$fArr[$x];\n            $fArr2[$x / $x] = $fArr[$x];\n        }\n  \
    \  }\n\n    if (count($fArr) == 1) {\n        return array($fArr[0]);\n    }\n\
    \n    return $fArr2;\n}\n</code>\n<|/ a tags=php,factors,algorithm,math |>\n<|\
    \ c |>\nThanks for your answer, but I wanted to avoid using additional libraries\
    \ because they are a little slow and they have a lot of security problems, especially\
    \ if my project is in a shared hosting environment.\n<|/ c |>\n<| a dscore=1 |>\n\
    I think this might be the fastest way (but I'm not that proud of this):\n<code>\n\
    $result = pow($n, 1 / $n);\nforeach (array_filter($factors as $n=>$f) as $f) {\n\
    \  $result /= $n;\n}\n</code>\nSo $factors should be a table that looks like this:\
    \ \n<code>\n$factors = array(\n  2 => 2,\n  3 => 2,\n  4 => 4,\n  5 => 2,\n  6\
    \ => 6,\n  8 => 8,\n  9 => 5,\n  10 => 5,\n  15 => 15,\n  20 => 20\n);\n</code>\n\
    <|/ a tags=php,factors,algorithm,math |>\n<| c |>\nWow, that's really fast. :)\
    \ I think I'll use it this way. I'll try to rewrite it to get a better speed (I'll\
    \ update my question if I find a better way).\n<|/ c |>\n<| c |>\n: This *will*\
    \ be faster than the function posted above. Be sure to benchmark the different\
    \ methods yourself when trying different approaches. If you need more speed, you\
    \ could try implementing a binary search tree or similar.\n<|/ c |>\n<| c |>\n\
    I didn't know that this function existed in PHP. Cool stuff.\n<|/ c |>\n<| a tags=php,factors,algorithm,math\
    \ |>\nThis works for a very large number like 1000000000000000018\n<code>\n<?php\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp81gigy8p.php
    on line 27

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n    $i =\
    \ 0;\n\n    while ($i < $n) {\n        if ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n /= $i;\n        }\n\n        $i++;\n    }\n\n    if ($n\
    \ != 1) {\n        $factors[] = $n;\n    }\n\n    return $factors;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmptu_b_mq9.php:16\n\
    Stack trace:\n#0 /tmp/tmptu_b_mq9.php(32): factorize(2)\n#1 /tmp/tmptu_b_mq9.php(36):\
    \ candidate(2)\n#2 /tmp/tmptu_b_mq9.php(46): test()\n#3 {main}\n  thrown in /tmp/tmptu_b_mq9.php\
    \ on line 16\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    \n    while\
    \ ($n % 2) {\n        $factors[] = 2;\n        $n /= 2;\n    }\n    \n    for\
    \ ($i = 3; $i <= $n; $i += 2) {\n        foreach ($factors as $j => $val) {\n\
    \            if ($i % $j == 0) {\n                $factors[$j] = $j;\n       \
    \         $i /= $j;\n                break;\n            }\n        }\n    }\n\
    \    \n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzy10111_.php:37\n\
    Stack trace:\n#0 /tmp/tmpzy10111_.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpzy10111_.php\
    \ on line 37\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$fp = $fm = array();\n\tfor ($a\
    \ = 2; $a < $n; $a++) {\n\t\t$b = $a;\n\t\t$fm = array();\n\t\twhile ($b % $a\
    \ == 0) {\n\t\t\t$f = $b;\n\t\t\t$fm = $fm * $f;\n\t\t\t$b /= $a;\n\t\t}\n\t\t\
    if ($fm != 1) {\n\t\t\t$fm = array($fm);\n\t\t}\n\t\tif ($a != 2) {\n\t\t\t$fp\
    \ = $fp + $fm;\n\t\t}\n\t}\n\treturn $fp;\n}\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7iw_ry_c.php:36\n\
    Stack trace:\n#0 /tmp/tmp7iw_ry_c.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp7iw_ry_c.php\
    \ on line 36\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $factors = array();\n  // Sieve\
    \ of Eratosthenes\n  for ($i = 1; $i * $i <= $n; $i++) {\n    $is_prime = true;\n\
    \    for ($j = 2; $j <= $i / 2; $j++) {\n      if ($i % $j == 0) {\n        $is_prime\
    \ = false;\n        break;\n      }\n    }\n    if ($is_prime) {\n      $factors[]\
    \ = $i;\n    }\n  }\n  // Return array in order of most to least frequent factors\n\
    \  rsort($factors);\n  return $factors;\n}\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpanjlehyp.php:36\n\
    Stack trace:\n#0 /tmp/tmpanjlehyp.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpanjlehyp.php\
    \ on line 36\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $primes = array();\n\n  if($n ==\
    \ 1) return array(1);\n\n  for($i = 2; $i <= sqrt($n); $i++) {\n    $j = 0;\n\
    \    while($n % $i == 0) {\n      $primes[] = $i;\n      $n = $n / $i;\n     \
    \ $j++;\n    }\n  }\n\n  return $primes;\n}\n</code>\n<|/ a dscore=2 |>\n<| c\
    \ |>\nWhile this code may answer the question, providing additional context regarding\
    \ how and/or why it solves the problem would improve the answer's long-term value.\n\
    <|/ c |>\n<| c |>\nThis code is not working correctly for me when input number\
    \ is 10000.\n<|/ c |>\n<| c |>\nthe problem with this code is that it is taking\
    \ a lot of time to execute for big numbers.\n<|/ c |>\n<| c |>\nI believe that\
    \ my code is faster than this one\n<|/ c |>\n<| c |>\nYes, your code is much more\
    \ efficient, but it is much slower than the code in the question.\n<|/ c |>\n\
    <| a dscore=2 |>\nThe algorithm that worked for me to solve this problem is the\
    \ following. \nI used this algorithm to solve this problem:\n<code>\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp50do_vf3.php
    on line 27

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $factors = array();\n  $divisor\
    \ = 1;\n\n  while ($n > $divisor) {\n    while ($n % $divisor == 0) {\n      $factors[]\
    \ = $divisor;\n      $n = $n / $divisor;\n    }\n\n    $divisor++;\n  }\n\n  if\
    \ ($n > 1) {\n    $factors[] = $n;\n  }\n\n  return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpr8kumc64.php on line 17

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n%2 != 0) {\n        return\
    \ [1,1];\n    }\n    $factors = array_filter(range(2, $n), function($n){\n   \
    \     return $n%2 != 0;\n    });\n    foreach($factors as $i=>$factor) {\n   \
    \     $p = $factor * $i;\n        if ($n%$p == 0) {\n            $factors[$i]\
    \ -= 1;\n        }\n    }\n    return $factors;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqbdfwn5u.php:31\n\
    Stack trace:\n#0 /tmp/tmpqbdfwn5u.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpqbdfwn5u.php\
    \ on line 31\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    $divisor\
    \ = 1;\n    while ($n >= $divisor) {\n        if ($n % $divisor == 0) {\n    \
    \        $factors[] = $divisor;\n            $n = $n / $divisor;\n        } else\
    \ {\n            $divisor += 1;\n        }\n    }\n    if ($n > 1) {\n       \
    \ $factors[] = $n;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpgr5t9_qt.php on line 16

    '
  timestamp: 1659979577
- exit_code: -1
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    while($n != 1) {\n        $i\
    \ = 2;\n        $p = 1;\n        while($i <= $n) {\n            if($n % $i ==\
    \ 0) {\n                $p *= $i;\n                $n /= $i;\n               \
    \ $i++;\n            } else {\n                $i++;\n            }\n        }\n\
    \        $n++;\n        if($n == 1) {\n            return array($p);\n       \
    \ }\n    }\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979583
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $f = array();\n    for($i = 2;\
    \ $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            $f[] = $i;\n\
    \            $n /= $i;\n        }\n    }\n    if ($n != 1) {\n        $f[] = $n;\n\
    \    }\n    return $f;\n}\n</code>\n<|/ a tags=factors,php,math |>\n<| c |>\n\
    It looks like you're assuming a certain form of the factors being given, which\
    \ is why I didn't think it'd help much.\n<|/ c |>\n<| c |>\nYes, and I assumed\
    \ that input will be always prime number.\n<|/ c |>\n<| c |>\nNo - what I'm saying\
    \ is that the OP's question doesn't actually require the factors to be listed\
    \ in any particular order. You've made the assumption that their input will be\
    \ a prime number but if they ever get input that's not prime, your algorithm would\
    \ fail.\n<|/ c |>\n<| c |>\nI think your assumption is wrong. If input is prime\
    \ number then all factors will be different from 1, which means that all factors\
    \ will be listed in the same order as they are in factorization. Of course, I\
    \ could have misunderstood your question :)\n<|/ c |>\n<| c |>\nYes - I was just\
    \ pointing out that your algorithm doesn't take prime factors into account at\
    \ all. It could be said that \"factorization of any input number is a set of numbers\
    \ which have some common factors and some unique factors\". I'm not saying that's\
    \ what they're asking for, but it *could* be. Or it could just be a very trivial\
    \ assumption that's been overlooked.\n<|/ c |>\n<| a tags=factors,php,math |>\n\
    Here's a solution that works on any natural number and not just primes. The key\
    \ insight is that the product of two factors is the product of their prime factors\
    \ times their inverse. \n<code>\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpgde061iq.php
    on line 24

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = $factorArray = array(1);\n\
    \    for($x = 2; $x <= sqrt($n); ++$x) {\n        if ($n % $x == 0) {\n      \
    \      while (!$n % $x) {\n                $factors[] = $x;\n                $n\
    \ /= $x;\n            }\n            if ($x == 2) {\n                $factorArray[]\
    \ = $factors[count($factors)-1];\n            } else {\n                for($i\
    \ = count($factors) - 1; $i >= 0; --$i) {\n                    if ($factors[$i]\
    \ * $x == $x) {\n                        break;\n                    }\n     \
    \           }\n                for ($j = $i; $j > 0; --$j) {\n               \
    \     $factors[$j] = $factors[$j-1];\n                }\n                $factors[]\
    \ = $x;\n            }\n        }\n    }\n    return $factors;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkgy4f8gf.php:41\n\
    Stack trace:\n#0 /tmp/tmpkgy4f8gf.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpkgy4f8gf.php\
    \ on line 41\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n<1) return array();\n \
    \   if ($n==1) return array(1);\n    $factors=array(1);\n    for($i=2;$i<$n;$i++)\
    \ $factors[$i]=(int)pow($i,$n);\n    $max=1;\n    for($i=$n;$i>1;$i--) {\n   \
    \     $new=1;\n        foreach($factors as $factor)\n            if ($factor>$i)\
    \ $new=$new*$factor;\n        if ($new>$max) $max=$new;\n    }\n    return array($max,$max);\n\
    }\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0udtnkd6.php:30\n\
    Stack trace:\n#0 /tmp/tmp0udtnkd6.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp0udtnkd6.php\
    \ on line 30\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factorization = array();\n \
    \   for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n      \
    \      $factorization[] = $i;\n            while ($n /= $i) { }\n        }\n \
    \   }\n    if ($n > 1) {\n        $factorization[] = $n;\n    }\n    return $factorization;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9xpmufsr.php:31\n\
    Stack trace:\n#0 /tmp/tmp9xpmufsr.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp9xpmufsr.php\
    \ on line 31\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array(1,1,1,1); // 1\n\
    \t$factorCount = 1;\n\t$limit = 8;\n\t$factorized = array(0); // 0\n\t$i = 0;\n\
    \t$check = $n;\n\twhile($check > 1) {\n\t\t$i++;\n\t\tif($check > $limit) {\n\t\
    \t\t$factors[4] = $factors[4] * $factors[2];\n\t\t\t$factors[2] = $factors[4]\
    \ / $factors[2];\n\t\t\t$factors[2] = ceil($factors[2]);\n\t\t\tif($factorCount\
    \ < $factors[4]) {\n\t\t\t\t$factors[4] = $factorCount / $factors[4];\n\t\t\t\t\
    $factors[3] = $factors[4] - 1;\n\t\t\t\t$factorCount = 0;\n\t\t\t}\n\t\t\t$i =\
    \ 4;\n\t\t} else {\n\t\t\t$check = $check / $limit;\n\t\t\t$limit--;\n\t\t\t$factors[$i]+=1;\n\
    \t\t}\n\t}\n\tfor($i = 0; $i <= $i; $i++) {\n\t\t$factorized[$i] = $factors[$i];\n\
    \t}\n\tfor($i = 0; $i < $i; $i++) {\n\t\tif($factorized[$i] == 1) {\n\t\t\t$factorized[$i]\
    \ = 0;\n\t\t} else {\n\t\t\t$factorized[$i] /= $i;\n\t\t}\n\t}\n\t$factorized\
    \ = array_unique($factorized);\n\t$factorized = array_values($factorized);\n\t\
    return $factorized;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Warning: Undefined array key 4 in /tmp/tmpxw_me_56.php on line 37


    Warning: Undefined array key 5 in /tmp/tmpxw_me_56.php on line 37


    Warning: Undefined array key 6 in /tmp/tmpxw_me_56.php on line 37


    Warning: Undefined array key 7 in /tmp/tmpxw_me_56.php on line 37


    Warning: Undefined array key 8 in /tmp/tmpxw_me_56.php on line 37


    Warning: Undefined array key 9 in /tmp/tmpxw_me_56.php on line 37


    Warning: Undefined array key 10 in /tmp/tmpxw_me_56.php on line 37


    Warning: Undefined array key 11 in /tmp/tmpxw_me_56.php on line 37


    Warning: Undefined array key 12 in /tmp/tmpxw_me_56.php on line 37


    Warning: Undefined array key 13 in /tmp/tmpxw_me_56.php on line 37


    Warning: Undefined array key 14 in /tmp/tmpxw_me_56.php on line 37


    Warning: Undefined array key 15 in /tmp/tmpxw_me_56.php on line 37


    Warning: Undefined array key 16 in /tmp/tmpxw_me_56.php on line 37


    Warning: Undefined array key 17 in /tmp/tmpxw_me_56.php on line 37


    Warning: Undefined array key 18 in /tmp/tmpxw_me_56.php on line 37


    Warning: Undefined array key 19 in /tmp/tmpxw_me_56.php on line 37


    Warning: Undefined array key 20 in /tmp/tmpxw_me_56.php on line 37


    Warning: Undefined array key 21 in /tmp/tmpxw_me_56.php on line 37


    Warning: Undefined array key 22 in /tmp/tmpxw_me_56.php on line 37


    Warning: Undefined array key 23 in /tmp/tmpxw_me_56.php on line 37


    Warning: Undefined array key 24 in /tmp/tmpxw_me_56.php on line 37


    Warning: Undefined array key 25 in /tmp/tmpxw_me_56.php on line 37


    Warning: Undefined array key 26 in /tmp/tmpxw_me_56.php on line 37


    Warning: Undefined array key 27 in /tmp/tmpxw_me_56.php on line 37


    Warning: Undefined array key 28 in /tmp/tmpxw_me_56.php on line 37


    Warning: Undefined array key 29 in /tmp/tmpxw_me_56.php on line 37


    Warning: Undefined array key 30 in /tmp/tmpxw_me_56.php on line 37


    Warning: Undefined array key 31 in /tmp/tmpxw_me_56.php on line 37


    Warning: Undefined array key 32 in /tmp/tmpxw_me_56.php on line 37


    Warning: Undefined array key 33 in /tmp/tmpxw_me_56.php on line 37


    Warning: Unde'
  timestamp: 1659979580
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n    for\
    \ ($i = 1; $i <= $n; $i++) {\n        $product = $i;\n        for ($j = 2; $j\
    \ < $i; $j++) {\n            if ($i % $j === 0) {\n                $product /=\
    \ $j;\n            } else {\n                break;\n            }\n        }\n\
    \        if ($product !== 1) {\n            $factors[] = $product;\n        }\n\
    \    }\n    return $factors;\n}\n</code>\n<|/ a dscore=2 tags=php,biginteger,biginteger\
    \ |>\n<| a |>\nHere a way to find prime factors. \n<code>\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp7utqtfdw.php
    on line 28

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n\n    for($i\
    \ = 1; $i <= sqrt($n); $i++) {\n        if($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n = $n / $i;\n        }\n    }\n\n    return $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphpkxwu8s.php:29\n\
    Stack trace:\n#0 /tmp/tmphpkxwu8s.php(39): test()\n#1 {main}\n  thrown in /tmp/tmphpkxwu8s.php\
    \ on line 29\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  if ($n < 2) {\n    return array($n);\n\
    \  }\n\n  $a = $f = $e = 1;\n  for ($i = 2; $i <= $n; $i++) {\n    if ($n % $i\
    \ == 0) {\n      $a *= $i;\n      $f *= $i;\n      $e++;\n    }\n  }\n  return\
    \ array($a, $f, $e);\n}\n</code>\n<|/ a tags=primes,algorithm dscore=5 |>\n<|\
    \ c |>\nI like this solution, except that it's not efficiently solving the problem\
    \ (it's O(n log n)) whereas the other answers solve it in O(n).\n<|/ c |>\n<|\
    \ c |>\nThat's true, but it depends on the definition of \"efficient\"... it's\
    \ still better than O(n log n). Also you can reuse the results from previous factorizations\
    \ to speed up this factorization process (for example if the same number is passed\
    \ twice through the function it only needs to calculate it once).\n<|/ c |>\n\
    <| c |>\n\"it's still better than O(n log n)\" Can you prove that? I am just curious.\n\
    <|/ c |>\n<| c |>\n: It depends what the definition of \"better\" is. I said \"\
    it's still better than O(n log n)\" because it's \"better\" in that if you factor\
    \ a number N repeatedly, that requires N operations (where n is N).\n<|/ c |>\n\
    <| c |>\nThis solution works to an extent but fails for example for 10 ^ 18\n\
    <|/ c |>\n<| a tags=primes,algorithm dscore=4 |>\n<code>\npublic bool IsPrime(long\
    \ num)\n{\n    if (num < 2)\n        return false;\n\n    long sqroot = Math.Sqrt(num);\n\
    \n    for (long i = 2; i <= sqroot; i++)\n    {\n        if (num % i == 0)\n \
    \           return false;\n    }\n    return true;\n}\n</code>\n<|/ a |>\n<| c\
    \ |>\n`Sqrt(10)` returns `2`, not `3`\n<|/ c |>\n<| c |>\nYou don't even need\
    \ `sqrt`. Just `i` will do.\n<|/ c |>\n<| c |>\nIt's also quite efficient as sqrt\
    \ is of O(1).\n<|/ c |>\n<| c |>\nThis doesn't work for all cases, for example\
    \ `num >= 8`. See my answer for details.\n<|/ c |>\n<| c |>\nI tested it with\
    \ 8,9,10,15,16,17 .. and it's working for all of these cases. What is the input\
    \ you are \nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpvpchosvh.php
    on line 26

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\tif ($n == 1) {\n\t\treturn array(1);\n\
    \t}\n\t$factors = array(1);\n\t$n = abs($n);\n\tfor ($i = 2; $i * $i <= $n; ++$i)\
    \ {\n\t\tif ($n % $i == 0) {\n\t\t\t$j = 1;\n\t\t\twhile ($j * $i <= $n) {\n\t\
    \t\t\tif ($n % $i == 0) {\n\t\t\t\t\t$factors[$j] = $i;\n\t\t\t\t\twhile ($n %\
    \ ($i * $j) == 0) {\n\t\t\t\t\t\t++$j;\n\t\t\t\t\t}\n\t\t\t\t\t$n /= $i;\n\t\t\
    \t\t} else {\n\t\t\t\t\t++$j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($n == 1) {\n\t\t\t\
    \tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv8avnqfw.php:44\n\
    Stack trace:\n#0 /tmp/tmpv8avnqfw.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpv8avnqfw.php\
    \ on line 44\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\tif ($n < 2) {\n\t\tthrow new Exception('Number\
    \ is less than 2!');\n\t}\n\n\t$factors = array();\n\n\t// If number divides exactly\
    \ into two, its a prime number (2 factors)\n\tif ($n == 2) {\n\t\t$factors[] =\
    \ 2;\n\t\treturn $factors;\n\t}\n\n\t// If number is odd, then it is a prime number\
    \ (1 factor)\n\tif ($n % 2 == 1) {\n\t\t$factors[] = 2;\n\t\treturn $factors;\n\
    \t}\n\n\t// Calculate prime factorization for odd number:\n\t$i = 1;\n\twhile\
    \ ($i <= $n/2) {\n\t\tif ($n % $i == 0) {\n\t\t\t$factors[] = $i;\n\t\t\t$n =\
    \ $n/$i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t}\n\n\t// Return factorization\n\
    \treturn $factors;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpvrk7ofmf.php on line 34

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n == 0 || $n == 1) {\n \
    \       return array($n);\n    }\n    $factorization = array();\n    $primes =\
    \ array_merge(range(2, $n), array(2, 1));\n    foreach ($primes as $prime) {\n\
    \        if ($n % $prime == 0) {\n            while (true) {\n               \
    \ $quotient = floor($n / $prime);\n                if (!is_int($quotient) || !in_array($quotient,\
    \ $factorization)) {\n                    $factorization[] = $quotient;\n    \
    \                break;\n                }\n                $n = ($n * $prime)\
    \ % $n;\n            }\n        }\n    }\n    return $factorization;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsqtp8e3r.php:37\n\
    Stack trace:\n#0 /tmp/tmpsqtp8e3r.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpsqtp8e3r.php\
    \ on line 37\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  if ($n <= 1) return array(1);\n\
    \  $res = array();\n  $i = 2;\n  while (true) {\n    if ($n % $i == 0) {\n   \
    \   $res[] = $i;\n      $n = $n / $i;\n      if ($n) $i++;\n      continue;\n\
    \    }\n    $i++;\n    if ($i > $n) break;\n  }\n  return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpojh9qdhx.php:34\n\
    Stack trace:\n#0 /tmp/tmpojh9qdhx.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpojh9qdhx.php\
    \ on line 34\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    \n    // First of all, find prime\
    \ factors of given number\n    $factors = array();\n    \n    // Find all prime\
    \ factors\n    $factors[] = $n;\n    \n    for ($i = 2; $i <= floor($n ** 0.5);\
    \ $i++) {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n       \
    \     $n = $n / $i;\n        }\n    }\n\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2cfvbvw_.php:35\n\
    Stack trace:\n#0 /tmp/tmp2cfvbvw_.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp2cfvbvw_.php\
    \ on line 35\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n    // Sieve:\
    \ find non-factor and get prime factors\n    for ($i = 2; $i <= $n; $i++) {\n\
    \        if (!isPrime($i)) {\n            $factors[] = $i;\n        }\n    }\n\
    \    // Sieve: find non-factor and get prime factors\n    for ($i = 1; $i <= $n;\
    \ $i++) {\n        if (!isPrime($i)) {\n            while (!isPrime($i)) {\n \
    \               $i *= 2;\n            }\n            $factors[] = $i;\n      \
    \  }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmp576jpx0c.php:15\nStack trace:\n#0 /tmp/tmp576jpx0c.php(32): factorize(2)\n\
    #1 /tmp/tmp576jpx0c.php(36): candidate(2)\n#2 /tmp/tmp576jpx0c.php(46): test()\n\
    #3 {main}\n  thrown in /tmp/tmp576jpx0c.php on line 15\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n    $i =\
    \ 0;\n    while ($n >= $i) {\n        $divisor = self::getNextFactor($n, $i);\n\
    \        $factors[] = $divisor;\n        $n = ($n / $divisor) - $divisor;\n  \
    \      $i++;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Cannot use "self" when no class scope is active in /tmp/tmp_xtwdye1.php
    on line 15

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\tif ($n <= 1) return array();\n\t\
    $results = [];\n\t$factors = factorize($n-1);\n\tforeach ($factors as $f) {\n\t\
    \tfor ($i=0;$i<count($factors);$i++) {\n\t\t\tif ($f == $factors[$i]) $results[]\
    \ = $f;\n\t\t}\n\t}\n\tforeach ($factors as $f) {\n\t\t$results[] = $f;\n\t}\n\
    \treturn $results;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnqv8w_qw.php:31\n\
    Stack trace:\n#0 /tmp/tmpnqv8w_qw.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpnqv8w_qw.php\
    \ on line 31\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array();\n\tfor ($i\
    \ = 2; $i <= $n; $i++) {\n\t\twhile (true) {\n\t\t\t$j = ($n % $i) ? $i : $n;\n\
    \t\t\tif ($j <= 1) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$factors[] = $j;\n\t\t\t\
    $n = ($j > $n) ? $j : $n;\n\t\t}\n\t}\n\treturn $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpr87v44_n.php on line 19

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n    $i =\
    \ 1;\n    $m = 1;\n    while (true) {\n        while ($n % $i === 0) {\n     \
    \       $factors[] = $i;\n            $n = $n / $i;\n            $i++;\n     \
    \   }\n        if ($n == 1) {\n            break;\n        }\n        $m++;\n\
    \        $i++;\n    }\n    if ($m > 1) {\n        $factors[] = $m;\n    }\n  \
    \  return $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx37ob8nb.php:38\n\
    Stack trace:\n#0 /tmp/tmpx37ob8nb.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpx37ob8nb.php\
    \ on line 38\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n    $factors[]\
    \ = array(1,1);\n\n    $i = $i2 = 1;\n    while ($i <= $n) {\n        $i2 = $i\
    \ * $i;\n        while ($i2 <= $n) {\n            if ($i2 == $n) {\n         \
    \       array_push($factors, array($i, 1));\n                break;\n        \
    \    }\n            elseif ($i % $i2 == 0) {\n                $i = $i2;\n    \
    \            $factors[] = array($i, 1);\n                break;\n            }\n\
    \            ++$i;\n        }\n        ++$i;\n    }\n    return $factors;\n}\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbt0n4bj9.php:39\n\
    Stack trace:\n#0 /tmp/tmpbt0n4bj9.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpbt0n4bj9.php\
    \ on line 39\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$p = $factors = array();\n\tfor\
    \ ($i = 2; $i <= sqrt($n); $i++) {\n\t\t$a = $i;\n\t\tfor (; $a > 1; $a--) {\n\
    \t\t\tif ($n % $a == 0) {\n\t\t\t\t$p[] = $a;\n\t\t\t\tif ($n != 1) {\n\t\t\t\t\
    \t$factors[$i] = count($p);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0a8kllmi.php:33\n\
    Stack trace:\n#0 /tmp/tmp0a8kllmi.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp0a8kllmi.php\
    \ on line 33\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n    $i =\
    \ 2;\n    $factors[] = array($i, 1);\n    while ($i <= $n) {\n        if ($n %\
    \ $i === 0) {\n            $factors[] = array($i, 1);\n            $n /= $i;\n\
    \            $factors[] = array($i, $factors[$i - 1][1] * 1);\n            ++$i;\n\
    \        } else {\n            ++$i;\n        }\n    }\n    return $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplaf6hy4t.php:33\n\
    Stack trace:\n#0 /tmp/tmplaf6hy4t.php(43): test()\n#1 {main}\n  thrown in /tmp/tmplaf6hy4t.php\
    \ on line 33\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n\n    for($i\
    \ = 2; $i <= sqrt($n); ++$i) {\n        if ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n = ($n - $i / $i) * $i;\n        }\n    }\n    if ($n !=\
    \ 1) {\n        $factors[] = $n;\n    }\n    return $factors;\n}\n</code>\n<|/\
    \ a dscore=2 tags=arrays,php |>\n<| a tags=arrays,php |>\nThis code solves the\
    \ problem. Basically i tried to get all the prime factors of the given number\
    \ and then used the factorize function which is also explained below.\n<code>\n\
    <?php\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpl_ssf7uq.php
    on line 25

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $result = array();\n    foreach(array_range(2,\
    \ $n) as $d) {\n        if($n%$d == 0) {\n            $result[] = $d;\n      \
    \      $n /= $d;\n        }\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php,factors\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpr_od93rd.php
    on line 21

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  if ($n<=1) return array(1);\n \
    \ $factors = array(1);\n  for($i=1; $i<=$n; $i++) {\n    $temp = $i;\n    while($temp>1)\
    \ { $temp = $temp/2; $factors[$temp] += 1; }\n  }\n  return $factors;\n}\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmppih2_06r.php on line 16\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmppih2_06r.php:25\nStack\
    \ trace:\n#0 /tmp/tmppih2_06r.php(35): test()\n#1 {main}\n  thrown in /tmp/tmppih2_06r.php\
    \ on line 25\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = [];\n\tfor ($i = 1;\
    \ $i <= $n; $i++) {\n\t\t$f = range($i, $n, $i);\n\t\t$factors[] = array_filter($f);\n\
    \t}\n\t\n\treturn $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiwg4fijp.php:26\n\
    Stack trace:\n#0 /tmp/tmpiwg4fijp.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpiwg4fijp.php\
    \ on line 26\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $factors = array();\n  $i = 2;\n\
    \  while ($i <= sqrt($n)) {\n    $square_root = $i * $i;\n    $n = $square_root\
    \ + $n;\n    $is_prime = true;\n    for ($j = 2; $j <= $square_root; $j++) {\n\
    \      $divisible = boolval($n % $j);\n      if (!$is_prime && $divisible) break;\n\
    \      $is_prime = $divisible;\n    }\n    if ($is_prime) {\n      $factors[]\
    \ = $i;\n      $i++;\n    }\n  }\n  rsort($factors);\n  return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfjnvrndy.php:37\n\
    Stack trace:\n#0 /tmp/tmpfjnvrndy.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpfjnvrndy.php\
    \ on line 37\n"
  timestamp: 1659979577
- exit_code: -1
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$primeFactors = array();\n\tfor\
    \ ($i = 1; $i <= sqrt($n); ++$i) {\n\t\t$x = $i * $i;\n\t\t$count = 1;\n\t\t$j\
    \ = 0;\n\t\twhile ($x != $n) {\n\t\t\tif ($n % $i == 0) {\n\t\t\t\t$n /= $i;\n\
    \t\t\t\t++$count;\n\t\t\t\t$primeFactors[$j++] = $i;\n\t\t\t}\n\t\t\t$x += $i--;\n\
    \t\t}\n\t\tif ($count == 1) {\n\t\t\t$primeFactors[] = $i;\n\t\t}\n\t}\n\tsort($primeFactors);\n\
    \treturn $primeFactors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979583
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    switch(true) {\n        case\
    \ ($n <= 2):\n            $factors[2] = 1;\n            return $factors;\n   \
    \     case ($n % 2):\n            $factors[2] = 1;\n            return $factors;\n\
    \        case ($n >= 4):\n            $factors[3] = 1;\n            $factors[2]\
    \ = 1;\n            return $factors;\n        case ($n % 4):\n            $factors[2]\
    \ = 1;\n            return $factors;\n        case ($n >= 6):\n            $factors[4]\
    \ = 1;\n            $factors[3] = 1;\n            $factors[2] = 1;\n         \
    \   return $factors;\n        case ($n % 6):\n            $factors[2] = 1;\n \
    \           return $factors;\n        case ($n >= 8):\n            $factors[5]\
    \ = 1;\n            $factors[4] = 1;\n            $factors[3] = 1;\n         \
    \   $factors[2] = 1;\n            return $factors;\n        case ($n % 8):\n \
    \           $factors[2] = 1;\n            return $factors;\n        case ($n >=\
    \ 10):\n            $factors[6] = 1;\n            $factors[5] = 1;\n         \
    \   $factors[4] = 1;\n            $factors[3] = 1;\n            $factors[2] =\
    \ 1;\n            return $factors;\n        case ($n % 10):\n            $factors[2]\
    \ = 1;\n            return $factors;\n        case ($n >= 12):\n            $factors[7]\
    \ = 1;\n            $factors[6] = 1;\n            $factors[5] = 1;\n         \
    \   $factors[4] = 1;\n            $factors[3] = 1;\n            $factors[2] =\
    \ 1;\n            return $factors;\n        case ($n % 12):\n            $factors[2]\
    \ = 1;\n            return $factors;\n        case ($n >= 14):\n            $factors[8]\
    \ = 1;\n            $factors[7] = 1;\n            $factors[6] = 1;\n         \
    \   $factors[5] = 1;\n            $factors[4] = 1;\n            $factors[3] =\
    \ 1;\n            $factors[2] = 1;\n            return $factors;\n        case\
    \ ($n % 14):\n            $factors[2] = 1;\n            return $factors;\n   \
    \     case ($n >= 16):\n            $factors[9] = 1;\n            $factors[8]\
    \ = 1;\n            $factors[7] = 1;\n            $factors[6] = 1;\n         \
    \   $factors[5] = 1;\n            $factors[4] = 1;\n            $factors[3] =\
    \ 1;\n            $factors[2] = 1;\n            return $factors;\n        case\
    \ ($n % 16):\n            $factors[2] = 1;\n            return $factors;\n   \
    \     case ($n >= 18):\n            $factors[10] = 1;\n            $factors[9]\
    \ = 1;\n            $factors[8] = 1;\n            $factors[7] = 1;\n         \
    \   $factors[6] = 1;\n            $factors[5\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "]" in /tmp/tmpgknv6bmc.php
    on line 96

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $d = array_count_values(str_split($n));\n\
    \  $result = array();\n  foreach ($d as $key => $value) {\n    if ($value == 1)\
    \ {\n      $result[$key] = 1;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_67c1nvu.php:27\n\
    Stack trace:\n#0 /tmp/tmp_67c1nvu.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp_67c1nvu.php\
    \ on line 27\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    $n = $n*1;\n\
    \    $i = 0;\n    while ($n != 1) {\n        for ($j = (int)($n%$i); $j > 0; $j--)\
    \ {\n            array_push($factors, $i);\n            $i--;\n        }\n   \
    \     $n = (int)($n/$i);\n    }\n    array_push($factors, $i);\n    return $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp4so0cuj5.php:16\n\
    Stack trace:\n#0 /tmp/tmp4so0cuj5.php(27): factorize(2)\n#1 /tmp/tmp4so0cuj5.php(31):\
    \ candidate(2)\n#2 /tmp/tmp4so0cuj5.php(41): test()\n#3 {main}\n  thrown in /tmp/tmp4so0cuj5.php\
    \ on line 16\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n\n    //\
    \ Find prime factors up to sqrt($n)\n    for ($i = 2; $i <= sqrt($n); $i++) {\n\
    \        while ($n % $i == 0) {\n            $factors[$i] = $i;\n            $n\
    \ /= $i;\n        }\n    }\n\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6fy_v4z.php:30\n\
    Stack trace:\n#0 /tmp/tmpa6fy_v4z.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpa6fy_v4z.php\
    \ on line 30\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    // Initialize array to store\
    \ factors of given integer\n    $factors = array();\n    \n    // Initialize a\
    \ variable to keep track of number of times each factor appears in the factorization\n\
    \    $counts = array(1);\n    \n    // Loop over factors of given number\n   \
    \ for ($i = 0; $i < $n; $i++) {\n        // If this factor appeared in the factorization,\
    \ increment the count of that factor\n        if (array_key_exists($i, $factors))\
    \ {\n            $counts[$i] += 1;\n        } else {\n            // If not, initialize\
    \ the array with the factor and the number of times that it appeared in factorization\n\
    \            $factors[$i] = array($i, 1);\n        }\n    }\n    \n    // For\
    \ each of factors remaining in the factorization, find the most frequently appeared\
    \ factor in the factorization\n    foreach ($counts as $i => $count) {\n     \
    \   $highestCount = 0;\n        $highestFactor = $i;\n        \n        // Loop\
    \ over factors of given number\n        for ($j = $i + 1; $j < $n; $j++) {\n \
    \           // If this factor appears in factorization, compare number of times\
    \ that this factor appeared in factorization\n            // to the number of\
    \ times this factor appears in the factorization and take the max of those two\n\
    \            if (array_key_exists($j, $counts)) {\n                $counts[$j]\
    \ = $counts[$j] + $counts[$highestFactor];\n                $highestCount = max($counts[$j],\
    \ $highestCount);\n            } else {\n                // If not, initialize\
    \ the array with the factor and the number of times that it appeared in factorization\n\
    \                $factors[$j] = array($j, $count);\n            }\n        }\n\
    \        \n        // If the number of times a given factor appeared in the factorization\
    \ is highest among all remaining factors,\n        // then add this factor to\
    \ the factorization\n        if ($highestCount == $counts[$highestFactor]) {\n\
    \            $factors[$highestFactor] = array($highestFactor, $counts[$highestFactor]);\n\
    \        }\n    }\n    \n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzouk8jvj.php:62\n\
    Stack trace:\n#0 /tmp/tmpzouk8jvj.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpzouk8jvj.php\
    \ on line 62\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $primes = array();\n    for ($i\
    \ = 1; $i <= $n; ++$i) {\n        // Check if number is prime by checking if $i\
    \ divides all the numbers from 2 to sqrt($n)\n        // If it does, then $i is\
    \ prime\n        if (fmod($i, $n) === 0) {\n            // If not, then add the\
    \ smallest factor of $i to $primes, discarding any smaller factors.\n        \
    \    $temp = $i;\n            while ($temp > 1) {\n                $divisor =\
    \ 0;\n                for ($j = 1; $j <= $temp; ++$j) {\n                    if\
    \ ($temp % $j === 0) {\n                        $divisor++;\n                \
    \    }\n                }\n                if ($divisor <= 1) {\n            \
    \        break;\n                }\n                $primes[] = $divisor;\n  \
    \              $temp /= $divisor;\n            }\n        }\n    }\n    usort($primes,\
    \ function ($a, $b) {\n        return $a - $b;\n    });\n    return $primes;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7rpwhlyr.php:45\n\
    Stack trace:\n#0 /tmp/tmp7rpwhlyr.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp7rpwhlyr.php\
    \ on line 45\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$arr = array(\n\t\t$n => 1,\n\t\
    );\n\t$fact = 1;\n\tfor ($i = 1; $i < $n; $i++) {\n\t\t$fact *= $i;\n\t\t$temp\
    \ = $arr;\n\t\t$arr = array();\n\t\tfor ($j = 0; $j < $i; $j++) {\n\t\t\tif ($temp[$j]\
    \ >= $fact) {\n\t\t\t\t$arr[] = $temp[$j];\n\t\t\t\t$temp[$j]++;\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn $arr;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpqo39b1hy.php on line 21\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpqo39b1hy.php:35\nStack\
    \ trace:\n#0 /tmp/tmpqo39b1hy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpqo39b1hy.php\
    \ on line 35\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    // Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n    // Each of the\
    \ factors should be arrayed number of times corresponding to how many times it\
    \ appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    if ($n <= 1) return array(1);\n    $p = $n / 2;\n    $primes\
    \ = array(2);\n    while ($p > 1) {\n        $p2 = $p / 2;\n        foreach ($primes\
    \ as $prime) {\n            if ($p * $prime > $n / 2) break;\n            if ($p\
    \ % $prime == 0 && $prime * $p2 <= $n / 2) $primes[] = $prime;\n        }\n  \
    \      $p = $p2;\n    }\n    return $primes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp25zs1y9c.php:35\n\
    Stack trace:\n#0 /tmp/tmp25zs1y9c.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp25zs1y9c.php\
    \ on line 35\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if($n<=1) {\n        return array(1);\n\
    \    }\n\n    $d = 2;\n    $s = $p = 1;\n    $f = array();\n\n    while(is_pow($n,\
    \ $d)) {\n        $d *= 2;\n        $f []= $d;\n    }\n\n    while($d < $n) {\n\
    \        while($n%$d == 0) {\n            $n = ($n/$d) + $p;\n            $p++;\n\
    \        }\n        $d++;\n    }\n\n    return $f;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_pow() in /tmp/tmpfe21yl0s.php:20\n\
    Stack trace:\n#0 /tmp/tmpfe21yl0s.php(37): factorize(2)\n#1 /tmp/tmpfe21yl0s.php(41):\
    \ candidate(2)\n#2 /tmp/tmpfe21yl0s.php(51): test()\n#3 {main}\n  thrown in /tmp/tmpfe21yl0s.php\
    \ on line 20\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $factors = [];\n  for ($i = 2;\
    \ $i <= $n; $i++) {\n    if ($n % $i == 0) {\n      array_push($factors, $i);\n\
    \      $n /= $i;\n    }\n  }\n  if ($n != 1) {\n    array_push($factors, $n);\n\
    \  }\n\n  return $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkv40hbt6.php:33\n\
    Stack trace:\n#0 /tmp/tmpkv40hbt6.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpkv40hbt6.php\
    \ on line 33\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array();\n\t$i = 1;\n\
    \twhile ($i < (int) sqrt($n)) {\n\t\tif ($n % $i == 0) {\n\t\t\t$j = 1;\n\t\t\t\
    while ($j <= ($i/$j)) {\n\t\t\t\t$j++;\n\t\t\t}\n\t\t\t$factors[] = $j;\n\t\t\t\
    while ($j <= $i) {\n\t\t\t\t$j++;\n\t\t\t\t$factors[] = $j;\n\t\t\t}\n\t\t\t$i\
    \ = $j;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t}\n\tif ($i != $n) {\n\t\t$factors[]\
    \ = $i;\n\t}\n\treturn $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz7csvnoa.php:41\n\
    Stack trace:\n#0 /tmp/tmpz7csvnoa.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpz7csvnoa.php\
    \ on line 41\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n < 2) {\n        return\
    \ array(1);\n    }\n    // $n = $n * $n; is faster than $n = sqrt($n); by factor\
    \ of 2\n    $m = sqrt($n);\n    $factors = array(1);\n    for ($i = 1; $i <= $m;\
    \ $i++) {\n        $x = $i;\n        $factor = 1;\n        while ($n >= ($x *\
    \ $x)) {\n            $x++;\n            if ($x % $i == 0) {\n               \
    \ $factor++;\n            }\n        }\n        $factors[$i] += $factor;\n   \
    \ }\n    return $factors;\n}\n</code>\n<|/ a tags=algorithm,php |>\n<| c |>\n\
    What does this do? How does it answer the question? Explain yourself\n<|/ c |>\n\
    <| c |>\nI think this has some bugs, because after factorize, there are still\
    \ 2 times a factor of a number, like for 320, it is 30*20. But in your function\
    \ $factor = array( 1, 2, 1, 2 ); instead of 30*20. Maybe it is because of the\
    \ while?\n<|/ c |>\n<| a tags=algorithm,php |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpdzfa1zto.php
    on line 31

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array();\n\t$n2 = $n->toString();\n\
    \t$f = new Fraction($n2);\n\tdo {\n\t\t$factors[] = $f->factor();\n\t\t$n2 = str_split($n2,\
    \ 1);\n\t} while ($n2);\n\t\n\t$res = array_count_values($factors);\n\t$k = 0;\n\
    \tforeach ($res as $val) {\n\t\t$factors[$k] = $val;\n\t\t$k += 1;\n\t}\n\treturn\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to a member function toString() on\
    \ int in /tmp/tmpqp34h48c.php:13\nStack trace:\n#0 /tmp/tmpqp34h48c.php(30): factorize(2)\n\
    #1 /tmp/tmpqp34h48c.php(34): candidate(2)\n#2 /tmp/tmpqp34h48c.php(44): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqp34h48c.php on line 13\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n    for($i\
    \ = 2; $i * $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $factors = array_merge($factors, factorize($n/$i));\n   \
    \     }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n  \
    \  return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo3unlxaj.php:27\n\
    Stack trace:\n#0 /tmp/tmpo3unlxaj.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpo3unlxaj.php\
    \ on line 27\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = [];\n\tfor ($i = 1;\
    \ $i <= sqrt($n); $i++) {\n\t\t$d = $i;\n\t\t$factor = 1;\n\t\twhile ($d != 1)\
    \ {\n\t\t\t$d /= $i;\n\t\t\tif ($n % $d == 0) {\n\t\t\t\t$factor++;\n\t\t\t}\n\
    \t\t}\n\t\t$factors[] = $factor;\n\t}\n\treturn $factors;\n}\n\n/**\n * Given\
    \ an array of primes as integers, returns all prime numbers less than or equal\
    \ to given integer in specified range\n * >>> primes_less_than([1,50],25)\n *\
    \ array([2,3,5,7,11,13,17,19])\n * >>> primes_less_than([2,50],25)\n * array([3,7,11,13,17])\n\
    \ * >>> primes_less_than([1,50],50)\n * array([2,3,5,7])\n * >>> primes_less_than([2,50],50)\n\
    \ * array([3,7])\n * >>> primes_less_than([1,50],100)\n * array([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    \ * >>> primes_less_than([2,50],100)\n * array([3,7,11,13,17,19])\n * >>> primes_less_than([1,50],250)\n\
    \ * array([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    \ */\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9c_gezne.php:49\n\
    Stack trace:\n#0 /tmp/tmp9c_gezne.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp9c_gezne.php\
    \ on line 49\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factorials = [];\n    for ($i\
    \ = 1; $i <= $n; $i++)\n        $factorials[] = $i;\n    $n = array_product($factorials);\n\
    \    $factors = [];\n    for ($i = 2; $i * $i <= $n; $i++) {\n        $k = $i;\n\
    \        while ($n % $k == 0)\n            $k++;\n        if ($k != $i) {\n  \
    \          $factors[] = $k;\n            $n /= $k;\n        }\n    }\n    return\
    \ $factors;\n}\n</code>\n<|/ a |>\n<| a |>\nOne of the more elegant ways to do\
    \ this is to factor the number using Fermat's Little Theorem.\nYou first have\
    \ to solve a quadratic equation of the form a^2 + b^2 = c^2, then you check if\
    \ the solution is in the range of the number you're factoring and then you continue\
    \ factoring until you run out of primes.\nThe Wikipedia page explains it pretty\
    \ well:\nhttps://en.wikipedia.org/wiki/Fermat%27s_little_theorem\nHere's a code\
    \ example from the link:\n<code>\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp483ihke9.php
    on line 28

    '
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n\n    if\
    \ ($n <= 1) {\n        return $factors;\n    }\n    $p = 2;\n\n    while ($p *\
    \ $p < $n) {\n        if ($n % $p === 0) {\n            ++$factors[$p];\n    \
    \        $n /= $p;\n        } else {\n            ++$factors[$p];\n        }\n\
    \        $p++;\n    }\n\n    if ($n === 1) {\n        array_pop($factors);\n \
    \   }\n\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp497nusn.php:41\n\
    Stack trace:\n#0 /tmp/tmpp497nusn.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpp497nusn.php\
    \ on line 41\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $factors = array();\n  while ($n\
    \ != 1) {\n    $factors[] = $n % 2;\n    $n = floor($n/2);\n  }\n  return $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpllzi4_2n.php:25\n\
    Stack trace:\n#0 /tmp/tmpllzi4_2n.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpllzi4_2n.php\
    \ on line 25\n"
  timestamp: 1659979577
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $result = array();\n    $i =\
    \ 1;\n    while ($n != 1) {\n        while ($n % $i == 0) {\n            $result[]\
    \ = $i;\n            $n = $n / $i;\n        }\n        $i++;\n    }\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp358s77ax.php on line 16

    '
  timestamp: 1659979577
