name: HumanEval_27_flip_case
language: php
prompt: "<?php\n// For a given string, flip lowercase characters to uppercase and\
  \ uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case($string)\
  \ {\n"
tests: "function candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
  ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["\t$flipped = \"\";\n\t$length = strlen($string);\n\tfor ($i=0; $i <\
    \ $length; $i++) {\n\t\t$flipped .= ucfirst(mb_strtolower($string[$i]));\n\t}\n\
    \treturn $flipped;\n}\n", "    return strtoupper(preg_replace('/./u', '\\U\\0*',\
    \ strtolower($string)));\n}\n</code>\n<|/ a tags=preg-replace,php,regex |>\n<|\
    \ c |>\nThis looks like a fun project. One question, what does `u` do in this\
    \ context?\n<|/ c |>\n<| c |>\n: It turns UTF8 characters into a regular string\
    \ with the characters converted to upper case. It also converts uppercase letters\
    \ into a regular string, and so on. I added an example.\n<|/ c |>\n<| c |>\n:\
    \ Please don't forget to accept the answer if it solved your problem. [Here's\
    \ why](http://stackoverflow.com/faq#howtoask).\n<|/ c |>\n<| c |>\n: You asked\
    \ a question on how to do this with regular expressions. I gave you a regular\
    \ expression for exactly that. You asked how to do this, and I gave you an answer.\
    \ That's how Stack Overflow works: If you have another question, ask another question.\
    \ If you have a better answer, accept that answer. Believe me.\n<|/ c |>\n<| c\
    \ |>\nI asked because I wanted to learn regular expressions, not because I wanted\
    \ to know how Stack Overflow works. And I provided a very good answer that worked\
    \ well for me, so I accepted it.\n<|/ c |>\n<| a dscore=2 |>\nYou just need to\
    \ use preg_replace.\n<code>\n$foo = preg_replace('/[a-z]/i', 'u\\L\\0*', $foo);\n\
    </code>\nTo replace uppercase letters, just add a-z to the expression and u to\
    \ the replacement string.\nThe \\L backreference is a \"look behind for letters\"\
    , and \\0 means that a letter was matched and not a literal character like 'u',\
    \ so \\0 must be used instead of \\L in the replacement string.\n<|/ a tags=preg-replace,php,regex\
    \ |>\n<| c |>\nThis does not work with the original example. Upper case letters\
    \ are still lower cased.\n<|/ c |>\n<| c |>\n: Your question asked for a regular\
    \ expression.\n<|/ c |>\n<| c |>\nHaha, I misunderstood the question. Yes, it\
    \ asked for a regular expression. Sorry.\n<|/ c |>\n<| c |>\n, nope - this still\
    \ works fine. Try it out yourself, just copy the code into your PHP script and\
    \ run it.\n<|/ c |>\n<| c |>\n: Oh, you're ", "  $lowercase = strtolower($string);\n\
    \  $uppercase = strtoupper($string);\n  return $lowercase === $uppercase ? $lowercase\
    \ : $uppercase;\n}\n", "    return strtoupper(strtr($string, array(\"a\" => \"\
    A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" =>\
    \ \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\", \"k\"\
    \ => \"K\", \"l\" => \"L\", \"m\" => \"M\", \"n\" => \"N\", \"o\" => \"O\", \"\
    p\" => \"P\", \"q\" => \"Q\", \"r\" => \"R\", \"s\" => \"S\", \"t\" => \"T\",\
    \ \"u\" => \"U\", \"v\" => \"V\", \"w\" => \"W\", \"x\" => \"X\", \"y\" => \"\
    Y\", \"z\" => \"Z\")));\n}", "  return strtoupper(strtr($string, array(\n    'a'\
    \ => 'A',\n    'b' => 'B',\n    'c' => 'C',\n    'd' => 'D',\n    'e' => 'E',\n\
    \    'f' => 'F',\n    'g' => 'G',\n    'h' => 'H',\n    'i' => 'I',\n    'j' =>\
    \ 'J',\n    'k' => 'K',\n    'l' => 'L',\n    'm' => 'M',\n    'n' => 'N',\n \
    \   'o' => 'O',\n    'p' => 'P',\n    'q' => 'Q',\n    'r' => 'R',\n    's' =>\
    \ 'S',\n    't' => 'T',\n    'u' => 'U',\n    'v' => 'V',\n    'w' => 'W',\n \
    \   'x' => 'X',\n    'y' => 'Y',\n    'z' => 'Z',\n  )));\n}", "    $lowercase\
    \ = strtolower($string);\n    $uppercase = strtoupper($string);\n    return $uppercase\
    \ . $lowercase;\n}\n", "    return strtoupper(str_replace($string, '', $string));\n\
    }", "\treturn preg_replace_callback('/./u', function($matches) {\n\t\treturn strtoupper($matches[0]);\n\
    \t}, $string);\n}\n", "    return strtoupper(preg_replace('/./i', $string, 1));\n\
    }\n</code>\n<|/ a tags=php,string |>\n<| c |>\nWhile this code snippet may solve\
    \ the question, [including an explanation](//meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers)\
    \ really helps to improve the quality of your post. Remember that you are answering\
    \ the question for readers in the future, and those people might not know the\
    \ reasons for your code suggestion. Please also try not to crowd your code with\
    \ explanatory comments, this reduces the readability of both the code and the\
    \ explanations!\n<|/ c |>\n<| c |>\nThanks for the feedback. I added an explanation,\
    \ hope this helps.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n<?php", "    return\
    \ strtoupper($string);\n}\n</code>\n<|/ a dscore=4 |>\n<| a |>\n<code>\n$var =\
    \ str_replace(array(\"a\",\"A\",\"b\",\"B\",\"c\",\"C\",\"d\",\"D\",\"e\",\"E\"\
    ,\"f\",\"F\",\"g\",\"G\",\"h\",\"H\",\"i\",\"I\",\"j\",\"J\",\"k\",\"K\",\"l\"\
    ,\"L\",\"m\",\"M\",\"n\",\"N\",\"o\",\"O\",\"p\",\"P\",\"q\",\"Q\",\"r\",\"R\"\
    ,\"s\",\"S\",\"t\",\"T\",\"u\",\"U\",\"v\",\"V\",\"w\",\"W\",\"x\",\"X\",\"y\"\
    ,\"Y\",\"z\",\"Z\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"\
    ,\"!\",\"#\",\"$\",\"%\",\"&\",\"(\",\")\",\"*\",\"+\",\",\",\"-\",\"_\",\"=\"\
    ,\"{\",\"}\",\"[\",\"]\",\"^\",\"~\",\"`\",\"'\",\"~\",\"\u2013\",\".\",\"\xB4\
    \",\"/\",\" \",\"\\\\\",\"'\",\"-\",\"\u2013\",\"$\",\":\",\"'\",\";\",\",\",\"\
    .\",\"!\",\"\xAF\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\
    \",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\"\
    ,\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\"\
    ,\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\"\
    ,\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\"\
    ,\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\"\
    ,\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\"\
    ,\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\"\
    ,\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\"\
    ,\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\"\
    ,\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\"\
    ,\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\"\
    ,\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\",\"\u2015\"\
    ,\"\u2015\",\"\u2015\",\"\uFFFD", "    $flipped = str_ireplace(\n        array_map('strtoupper',\
    \ str_split($string)),\n        array_map('strtolower', str_split($string)),\n\
    \        $string\n    );\n    return $flipped;\n}\n$flipped_string = flip_case($string);\n",
  "    return strtr(strtolower($string), \n        array('\xC0'=>'A', '\xC1'=>'A',\
    \ '\xC2'=>'A', '\xC3'=>'A', '\xC4'=>'A', '\xC5'=>'A', '\xC6'=>'A', '\xC7'=>'C',\
    \ '\xC8'=>'E', '\xC9'=>'E',\n             '\xCA'=>'E', '\xCB'=>'E', '\xCC'=>'I',\
    \ '\xCD'=>'I', '\xCE'=>'I', '\xCF'=>'I', '\xD1'=>'N', '\xD2'=>'O', '\xD3'=>'O',\
    \ '\xD4'=>'O',\n             '\xD5'=>'O', '\xD6'=>'O', '\xD8'=>'O', '\xD9'=>'U',\
    \ '\xDA'=>'U', '\xDB'=>'U', '\xDC'=>'U', '\xDD'=>'Y', '\xDE'=>'B', '\xDF'=>'S'));\n\
    }\n</code>\n<|/ a tags=regex,php,utf-8 |>\n<| c |>\nThanks alot, but this would\
    \ only work for letters A-Z, I need it for all symbols. Any suggestions?\n<|/\
    \ c |>\n<| c |>\nAh, I see. I updated the answer with the correct regular expression\
    \ for this case.\n<|/ c |>\n<| c |>\nThat's a nice solution.\n<|/ c |>\n<| a dscore=2\
    \ |>\nYou may use this regex:\n<code>\n/(^|[\\s])([\\x{0020}-\\x{D7FF}\\x{E000-\\\
    x{FFFD}]{1,2}|[\\x{10000}-\\x{1FFFF}\\x{200000}-\\x{2FFFF}]{1,3}|[\\x{20000}-\\\
    x{2FFFF}]{1,4})(?=[\\s])/iu\n</code>\nRegEx Demo\nRegEx Details:\n\n(^|[\\s]):\
    \ Match start of string or space or line\n([\\x{0020}-\\x{D7FF}\\x{E000-\\x{FFFD}]{1,2}|[\\\
    x{10000}-\\x{1FFFF}\\x{200000}-\\x{2FFFF}]{1,3}|[\\x{20000}-\\x{2FFFF}]{1,4}):\
    \ Match all Unicode code points from U+0020 to U+D7FF and U+E000 to U+FFFD\n(?=[\\\
    s]): Lookahead to ensure that we do not have a space after matching character\n\
    <|/ a tags=regex,php,utf-8 |>\n<| c |>\nThanks alot, but this ", "    $upper =\
    \ strtoupper($string);\n    $lower = strtolower($string);\n\n    return $lower\
    \ === $upper ? $string : $lower . $upper;\n}\n", "    return strtoupper(\n   \
    \     flip_lower($string)\n    );\n}", "    $flipped = \"\";\n\n    for($i = 0;\
    \ $i < strlen($string); $i++) {\n        $c = strtolower($string[$i]);\n     \
    \   $flipped .= $c;\n        if($c != $string[$i]) {\n            $flipped .=\
    \ strtoupper($string[$i]);\n        }\n    }\n\n    return $flipped;\n}\n", " \
    \ return $string . strtoupper($string);\n}", "    return str_ireplace(\n     \
    \   array(\n            'abcdefghijklmnopqrstuvwxyz',\n            'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \        ),\n        array(\n            'nopqrstuvwxyzabcdefghijklm',\n     \
    \       'NQRSTUVWXYZABCDEFGHIJKLM'\n        ),\n        $string\n    );\n}", " \
    \   return strtolower(strtr($string, array('!' => '!!', '?' => '!?')));\n}", " \
    \   $string = strtolower($string);\n    $string = ucwords($string);\n    $string\
    \ = strtoupper($string);\n    return $string;\n}\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\n`ctype_` has problems across non-ASCII character sets, like UTF8.\n<|/\
    \ c |>\n<| a tags=php,regex,preg-replace dscore=4 |>\nTry preg_replace\n<code>\n\
    $str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+QWERTYUIOPASDFGHJKLZXCVBNM';\n\
    $str = preg_replace('/[A-Z]/', '_$0', $str);\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ actually turned `aAaBbBcCcDdD` into `aaAaBbBcCcDdD`, it turned `A` into `0_`\
    \ instead of `A`.\n<|/ c |>\n<| a tags=php,regex,preg-replace |>\nHere's a solution\
    \ with no looping.\n<code>\n$str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+QWERTYUIOPASDFGHJKLZXCVBNM';\n\
    $str = preg_replace('/([A-Z])/', strtoupper('\\\\1_'), $str);\n</code>\n<|/ a\
    \ dscore=4 |>\n<| c |>\nThat is nice, but it's not what the original poster asked.\
    \ He said he wants underscores instead of capitals.\n<|/ c |>\n<| c |>\nHe explicitly\
    \ said _\"underscores instead of capitals\"_\n<|/ c |>\n<| c |>\nYes, that's why\
    \ I asked him if he wanted capitals instead of underscores.\n<|/ c |>\n<| c |>\n\
    He said \"preg_replace\" in the title, which is preg_match\n<|/ c |>\n<| c |>\n\
    Ah, yes, I see now. Thank you.\n<|/ c |>\n<| a dscore=3 tags=php,regex,preg-replace\
    \ |>\nTry this:\n<code>\n<?php\n$str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklm",
  "    return preg_replace('/(.)([A-Z])/', '$1_$2', $string);\n}\n$output = flip_case($str);\n\
    </code>\n<|/ a |>\n<| a tags=uppercase,lowercase,string,php |>\nI've written a\
    \ library for that purpose.\nIf you need a case insensitive library, have a look\
    \ at https://github.com/chriskiesner/case-insensitive\n<code>\nuse ChriskieSner\\\
    CaseInsensitive\\Casing;\n\n$input = Casing::toLower('lowercase');\necho $input;\
    \ // lowercase\n\n$input = Casing::toUpper('UPPERCASE');\necho $input; // uppercase\n\
    \n$input = Casing::toTitle('CamelCase');\necho $input; // Camel case\n</code>\n\
    <|/ a dscore=4 |>\n<| a |>\n<code>\n<?php\n$lower = \"hello\";\n$upper = strtoupper($lower);\n\
    echo $upper . \"<br>\";\n\n$upper = strtolower($lower);\necho $upper . \"<br>\"\
    ;\n\n$lower = strtoupper(substr($lower, 0,1));\necho $lower . \"<br>\";\n\n$lower\
    \ = strtolower(substr($lower, 0,1));\necho $lower . \"<br>\";\n\n$lower = strtoupper(substr($lower,\
    \ 0,2));\necho $lower . \"<br>\";\n\n$lower = strtolower(substr($lower, 0,2));\n\
    echo $lower . \"<br>\";", "  return str_ireplace(\n    array(\n      \"a\",\"\
    b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"\
    o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"\n    ),\
    \ \"ZY\", $string);\n}", "  return preg_replace('/(\\w)/', '\\L\\1', $string);\n\
    }", "  return implode('', array_map(function ($char) {\n    return mb_strtoupper($char,\
    \ 'UTF-8');\n  }, explode('', $string)));\n}\n", "    return strtr($string, ['a'=>'A',\
    \ 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I',\
    \ 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q',\
    \ 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y',\
    \ 'z'=>'Z']);\n}\n", "  return str_ireplace($string, mb_strtoupper($string), mb_strtolower($string));\n\
    }\n</code>\nThe other function I used was preg_replace(), which replaces patterns.\n\
    <code>\n<?php\n", "  return $string . strtolower(substr($string, 1)) . strtoupper(substr($string,\
    \ 2));\n}\n", "  return strtoupper(preg_replace('/./e', \"'\", $string));\n}",
  "    return str_ireplace(\n        array(\"'\",\n            '\"',\n           \
    \ '-',\n            '_',\n            '.',\n            ' '),\n        array(\n\
    \            '',\n            '',\n            '',\n            '',\n        \
    \    '',\n            ''),\n        $string);\n}", "    return preg_replace('/([a-z])/i',\
    \ '\\U$1\\E', $string);\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nWhat is\
    \ the purpose of `\\E` here?\n<|/ c |>\n<| c |>\n`/([a-z])/i` means to match any\
    \ lowercase letter (`a-z`) and replace it with that same letter followed by the\
    \ character `E` - this turns any lowercase letter into upper case. `\\E` means\
    \ to escape the `E` character so it's treated as a literal character.\n<|/ c |>\n\
    <| c |>\n`\\E` is only available in PCRE (php), `\\U$1\\E` is available in other\
    \ languages including javascript, java, perl, sed, etc.\n<|/ c |>\n<| c |>\nIf\
    \ you're using PHP's `preg_replace()` (and `\\E` isn't working for you), use `'~([a-z])~iU'`\
    \ to replace the string with its upper case counterpart.\n<|/ c |>\n<| c |>\n\
    Thank you! This was exactly what I needed to know.\n<|/ c |>\n<| a tags=php,regex\
    \ |>\nThis is how I would do it:\n<code>\n<?php\n\n$string = \"Some text with\
    \ some stuff to change!\";\n\n$string = preg_replace(\"/[a-z]+/i\", \"u$0\", $string);\n\
    \necho $string;\n", "    $flipped = '';\n    foreach (str_split($string) as $char)\
    \ {\n        $flipped .= (preg_match('/^[a-z]/i', $char) ? strtoupper($char) :\
    \ strtolower($char));\n    }\n    return $flipped;\n}\n</code>\n<|/ a tags=php,string\
    \ dscore=5 |>\n<| c |>\nHappy to see someone else is doing something similar.\
    \ Good job.\n<|/ c |>\n<| c |>\nThe only thing I wanted to add is that you can\
    \ wrap this in a function and call it whenever you need it!\n<|/ c |>\n<| c |>\n\
    It does not consider characters like [\xE9, \xE8, \xEA, \xEE, \xF4, \xFB, \xF9\
    , \xE7] and so on.\n<|/ c |>\n<| c |>\n`array_flip(str_split(strtolower($string)))\
    \ == $string` will work even if you have UTF-8 characters included in your string.\n\
    <|/ c |>\n<| c |>\nThis solution breaks if a string contains a character with\
    \ more than one byte length.\n<|/ c |>\n<| a dscore=5 tags=php,string |>\nTry\
    \ this:\n<code>\n$string = \"hello\";\n$flippedString = str_replace(array('l','e','o'),array('l','e','o'),$string);\n\
    echo $flippedString;\n</code>\n<|/ a |>\n<| c |>\nthis seems the simplest\n<|/\
    \ c |>\n<| c |>\n: Why would you do that? It's basically the same thing as mine.\
    \ He also has to loop the string instead of using strtr\n<|/ c |>\n<| c |>\nIt's\
    \ not the simplest, but it's also the best one.\n<|/ c |>\n<| c |>\nAgreed. As\
    \ I commented on the accepted answer this solution does not consider characters\
    \ like [\xE9, \xE8, \xEA, \xEE, \xF4, \xFB, \xF9, \xE7] and so on.\n<|/ c |>\n\
    <| c |>\nThis works, but is unnecessarily long and complex. It also does not consider\
    \ characters like [\xE9, \xE8, \xEA, \xEE, \xF4, \xFB, \xF9, \xE7] and so on.\n\
    <|/ c |>\n<| a dscore=5 tags=php,string |>\n<code>", "  return implode('', array_map('\\\
    U', str_split($string)));\n}", "    return preg_replace('/(^|)[a-z]/e', 'strtoupper($0)',\
    \ $string);\n}\n", "    return preg_replace(\"/\\B[a-z]/\", \"\\u$0\",\n     \
    \   preg_replace(\"/\\B[A-Z]/\", \"$0\",\n            $string));\n}\n", "    return\
    \ strtoupper(mb_convert_case($string, MB_CASE_TITLE, \"UTF-8\")\n    );\n}\n",
  "  return strtr($string, array('!' => '!', '?' => '?', '-' => '_', '=' => '=',\n\
    \      'a' => 'a', 'b' => 'b', 'c' => 'c', 'd' => 'd', 'e' => 'e', 'f' => 'f',\
    \ 'g' => 'g',\n      'h' => 'h', 'i' => 'i', 'j' => 'j', 'k' => 'k', 'l' => 'l',\
    \ 'm' => 'm', 'n' => 'n',\n      'o' => 'o', 'p' => 'p', 'q' => 'q', 'r' => 'r',\
    \ 's' => 's', 't' => 't', 'u' => 'u',\n      'v' => 'v', 'w' => 'w', 'x' => 'x',\
    \ 'y' => 'y', 'z' => 'z'));\n}\n", "    return preg_replace('/([a-z]+)/i', '$U\\\
    1', $string);\n}\n</code>\nI believe this should be close to what you were trying\
    \ to do.  I still think your solution is overly complicated though.\n<|/ a dscore=1\
    \ |>\n<| a |>\nThis would work:\n<code>", "    return $string\n        . strtoupper(\n\
    \            str_replace(\n                array(\"a\", \"e\", \"i\", \"o\", \"\
    u\", \"y\"),\n                array(\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\"),\n\
    \                strtolower($string)\n            )\n        );\n}\n", "    return\
    \ strtr(strtolower($string), ucwords($string), \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    );\n}\n</code>\n<|/ a dscore=0 tags=php |>\n<| a tags=php |>\nMy version - no\
    \ functions:\n<code>", "    return strtr($string, [\"a\"=>\"A\", \"b\"=>\"B\"\
    , \"c\"=>\"C\", \"d\"=>\"D\", \"e\"=>\"E\", \"f\"=>\"F\", \"g\"=>\"G\", \"h\"\
    =>\"H\", \"i\"=>\"I\", \"j\"=>\"J\", \"k\"=>\"K\", \"l\"=>\"L\", \"m\"=>\"M\"\
    , \"n\"=>\"N\", \"o\"=>\"O\", \"p\"=>\"P\", \"q\"=>\"Q\", \"r\"=>\"R\", \"s\"\
    =>\"S\", \"t\"=>\"T\", \"u\"=>\"U\", \"v\"=>\"V\", \"w\"=>\"W\", \"x\"=>\"X\"\
    , \"y\"=>\"Y\", \"z\"=>\"Z\"]);\n}\n", "    return implode(\n        array_map(\n\
    \            'strtoupper',\n            str_split(\n                preg_replace('/([a-z])/i',\
    \ 'strtoupper(\"$1\")', $string),\n                1\n            )\n        )\n\
    \    );\n}\n</code>\n<|/ a tags=php,regex |>\n<| a |>\nThis one should work as\
    \ long as there are only 1 character per word:\n<code>\n$result = preg_replace(\n\
    \ '/([a-z])/i', \n 'strtoupper(\"$1\")', \n $subject);\n</code>\n<|/ a tags=php,regex\
    \ dscore=1 |>\n<| a dscore=0 tags=php,regex |>\nMy Solution is \n<code>\n$str\
    \ = 'Hello Put the world';\necho preg_replace('/([a-z])/i', 'strtoupper(\"$1\"\
    )', $str);\n</code>\nOutput:\n<code>\nHELL PuT ThE World\n</code>\n<|/ a |>\n\
    <| a tags=php,regex |>\nHere's a more \"general\" solution that should work in\
    \ all cases. It uses mb_strtoupper and mb_convert_case. \n<code>\n$string = 'HELLO\
    \ Put the  world';\n$string = mb_strtoupper(mb_convert_case($string, MB_CASE_UPPER,\
    \ \"UTF-8\"));\n</code>\nOutput:\n<code>\nHELLO PUT THE  WORLD\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a |>\nTry this one (it uses \"strtoupper()\" function):\n<code>\n\
    $str = 'Hello world and other';\n$str = preg_replace_callback(\n    '/([^a-zA-Z\
    \ ])/',\n    function($matches) {\n        return strtoupper($matches[0]);\n \
    \   },\n    $str);\n</code>\n<|/ a tags=php,regex dscore=0 |>\n<| a tags=php,regex\
    \ dscore=0 |>\n<code>\n$str=\"Hello Put the world\";\necho preg_replace('/([a-z])/i',\
    \ 'strtoupper(\"$1\")', $str);\n</code>\n<|/ a |>\n<| a |>\nThis code will replace\
    \ all letters lower case with upper case:\n<code>\npreg_replace('/([a-z])/i',\
    \ 'strtoupper(\"$1\")', $str);\n</code>\n<|/ a dscore=0 tags=php,regex |>\n<|\
    \ c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a tags=php,regex dscore=0 |>\n<code>\n$string", "    return\
    \ ucfirst(strtolower($string));\n}\n", "    return strtoupper(strtr($string, array('!'\
    \ => '!!', '?' => '??', '\\'' => '\\\\\\'', '\"' => '\\\\\"', \"\\n\" => '\\\\\
    n', '#' => '\\\\#', \"'\" => '\\\\\\'', ')' => '\\\\)', ']' => '\\\\]', '[' =>\
    \ '\\\\[', '{' => '\\\\{', '}' => '\\\\}'))));\n}", "    return preg_replace(\"\
    /\\B([A-Z])/\", \"$1\" . strtoupper($string[1]), $string);\n}\n", "    return\
    \ ucfirst(strtolower($string));\n}\n", "    return lcfirst(strtolower($string));\n\
    }\n</code>\n<|/ a tags=uppercase,lowercase,php |>\n<| c |>\nWhy isn't the function\
    \ case insensitive?\n<|/ c |>\n<| c |>\nBecause `lcfirst()` is case insensitive.\
    \ See [the manual](http://php.net/manual/en/function.lcfirst.php).\n<|/ c |>\n\
    <| c |>\n`ucfirst()` is not case insensitive\n<|/ c |>\n<| c |>\nNot true at all.\
    \ `ucfirst()` does not affect the uppercase or lowercase of the original string.\n\
    <|/ c |>\n<| c |>\n, ucfirst will convert any word into lower case but will not\
    \ convert other characters to lower case.\n<|/ c |>\n<| a tags=uppercase,lowercase,php\
    \ dscore=5 |>\nThe PHP function strtoupper is the best solution for this particular\
    \ problem.\n<code>\n$string = 'Hello';\necho strtoupper($string);\n</code>\n<|/\
    \ a |>\n<| c |>\nI find this the easiest solution. It does not require a case-insensitive\
    \ search and will preserve special characters. Just what I was looking for. Thank\
    \ you.\n<|/ c |>\n<| c |>\nWhat if I do not want to lose special characters? Like\
    \ in the case of having hyphenated words?\n<|/ c |>\n<| c |>\nIf you don't want\
    \ it to be case sensitive, just use the PHP function `ucwords()`.\n<|/ c |>\n\
    <| c |>\nNote that this doesn't handle multibyte characters like Japanese ones\n\
    <|/ c |>\n<| c |>\nI think `strtoupper` only converts the first character to the\
    \ uppercase. After that it fails.\n<|/ c |>\n<| a dscore=5 |>\nThe strtoupper\
    \ function is the best solution for this particular problem. but if you want to\
    \ get first character to upper case or lower case then try this:\n<code>\n$string\
    \ = 'Hello';\necho ucfirst($string);\n", "    return preg_replace_callback('/./',\n\
    \    function ($match) {\n        return strtoupper($match[0]);\n    },\n    $string);\n\
    }\n</code>\n<|/ a tags=php,replace,string |>\n<| c |>\nGreat - this one has helped\
    \ me solve the same problem I'm having with other text replacement functions I've\
    \ written. Thanks!\n<|/ c |>\n<| a tags=php,replace,string |>\n<code>\n<?php\n",
  "    return strtoupper(strtolower($string));\n}", "    return strtoupper(strtr($string,\
    \ array_flip(range(0, 21))) . strtr($string, array_flip(range(33, 126))));\n}\n",
  "    return $string[0] = strtolower($string[0]), strtoupper($string[0]), strtolower($string[1]);\n\
    }\n", "  return preg_replace_callback('/./u', create_function(\n    '$matches',\n\
    \    'return strtoupper($matches[0]);'\n  ), $string);\n}", "  return preg_replace('/\\\
    B./', '', strtoupper($string));\n}\n", "    return implode('', array_map(function\
    \ ($letter) {\n        return strtoupper($letter);\n    }, $string));\n}", " \
    \   return strtr($string, \n        array('a'=>'A', 'b'=>'B', 'c'=>'C', \n   \
    \         'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J',\
    \ 'k'=>'K', 'l'=>'L', 'm'=>'M', \n            'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q',\
    \ 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', \n            'w'=>'W', 'x'=>'X',\
    \ 'y'=>'Y', 'z'=>'Z', '1'=>'1', '2'=>'2', '3'=>'3', '4'=>'4', '5'=>'5', \n   \
    \         '6'=>'6', '7'=>'7', '8'=>'8', '9'=>'9', '0'=>'0', '_'=>'_', ','=>'-',\
    \ '.'=>'_', ' '=>'_')\n        );\n}", "    $string = strtolower($string);\n \
    \   $string = strtoupper($string);\n    return $string;\n}", "    return mb_convert_case($string,\
    \ MB_CASE_UPPER, \"UTF-8\");\n}\n</code>\n<|/ a tags=case-sensitive,string,php\
    \ |>\n<| c |>\n\"*For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.*\" - that's pretty much the whole point of the question:\
    \ \"*Case-folding*\". This doesn't answer the question.\n<|/ c |>\n<| c |>\nThe\
    \ original question did not ask about case-folding. This answer was written before\
    \ the question was edited and that fact was not included in the original question.\n\
    <|/ c |>\n<| c |>\nHence my comment \"*Case-folding*\" :)\n<|/ c |>\n<| c |>\n\
    You have the wrong term. \"Case-folding\" refers to changing an accented character\
    \ to its non-accented equivalent.\n<|/ c |>\n<| c |>\nOh whoops, I misunderstood\
    \ what you meant by case-folding in the original question. I thought you meant\
    \ case-folding in the comments.\n<|/ c |>\n<| a tags=case-sensitive,string,php\
    \ |>\nI made this little function which seems to work.\n<code>", "    return strtoupper(str_replace(\"\
    l\", \"O\", $string));\n}", "    return ucfirst(strtolower($string));\n}", " \
    \ $string = preg_replace('/./u', 'u', $string);\n  return strtoupper($string);\n\
    }\n</code>\n<|/ a dscore=4 tags=php,string,lowercase,uppercase |>\n<| c |>\nIt\
    \ would be better to use the u modifier instead of preg_replace.\n<|/ c |>\n<|\
    \ a |>\n<code>\n$string = str_replace(array('a','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'),\
    \ array('A','a','B','b','C','c','D','d','E','e','F','f','G','g','H','h','I','i','J','j','K','k','L','l','M','m','N','n','O','o','P','p','Q','q','R','r','S','s','T','t','U','u','V','v','W','w','X','x','Y','y','Z','z'),\
    \ $string);\n</code>\n<|/ a dscore=4 tags=php,string,lowercase,uppercase |>\n\
    <| c |>\nThis won't work as expected (as pointed out in other answers) if the\
    \ input is \"A\" but you want the output to be \"a\", because then 'A' will be\
    \ changed to 'a' by str_replace.\n<|/ c |>\n<| a |>\nIn case you are looking for\
    \ a one liner, this should work too:\n<code>\n$string = preg_replace('/(.)/e',\
    \ 'strtoupper(\"\\\\1\")', $string);\n</code>\n<|/ a tags=php,string,lowercase,uppercase\
    \ dscore=4 |>\n<| c |>\nThis one liner works a charm. Thanks a lot!\n<|/ c |>\n\
    <| a dscore=3 |>\n<code>\nstrtoupper( str_replace( array('a', 'A', 'B', 'C', 'D',\
    \ 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',\
    \ 'U', 'V', 'W', 'X', 'Y', 'Z'), array('a', 'A', 'B', 'C', 'D', 'E', 'F', 'G',\
    \ 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',\
    \ 'X', 'Y', 'Z'), $string) );\n</code>\n<|/ a tags=php,", "    return ucfirst(strtolower($string));\n\
    }", "    $string = preg_replace('/[a-z]/i','U',$string);\n    return preg_replace('/U/i','a',$string);\n\
    }\n", "    return preg_replace_callback('/./u', function($match) { return strtoupper($match[0]);\
    \ }, $string);\n}\n", "  return strtoupper(strtolower($string));\n}", "  return\
    \ preg_replace('/([a-z]+)/i', 'strtoupper(\"$1\")', $string);\n}", "  return mb_strtoupper(mb_strtolower($string));\n\
    }\n", "    $string = strtolower($string);\n    $string = ucwords($string);\n \
    \   return strtolower($string);\n}\n", "    return mb_convert_case(mb_strtolower($string),\
    \ MB_CASE_UPPER, \"UTF-8\");\n}\n\n/**\n * Removes multiple spaces from a string\
    \ and trims it.\n * Example:\n * >>> trim_spaces(\" foo \\t\\r\\n bar\\t\\n  \
    \ \\t\")\n * \"foo bar\"\n *\n * @param   string  $string the string to be trimmed\n\
    \ *\n * @return  string  the trimmed string\n */", "    $uppercased = strtoupper($string);\n\
    \    $lowercased = strtolower($string);\n    return $lowercased === $uppercased\
    \ ? $lowercased : $uppercased;\n}\n</code>\nThen, when you need to transform a\
    \ string, do this:\n<code>\n$flipped = flip_case($input);\n</code>\n<|/ a tags=php\
    \ |>\n<| c |>\nNice and simple. I would just add that `$input = \"Hello\";` would\
    \ become `$flipped = strtoupper($input);` and it would return `HELLO`.\n<|/ c\
    \ |>\n<| a |>\nI think what you are looking for is strtr\n<code>\n$str = 'Hello\
    \ World!';\n", "    return strtoupper($string);\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=php |>\nYou Can Use A Simple Function Like This\n<code>\n<?php", " \
    \   return strtolower($string) . strtoupper($string);\n}\n", "\t$result = strtr($string,\
    \ \n\t\tarray('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G',\
    \ 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O',\
    \ 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W',\
    \ 'x'=>'X', 'y'=>'Y', 'z'=>'Z', '0'=>'0',  '1'=>'1',  '2'=>'2',  '3'=>'3',  '4'=>'4',\
    \  '5'=>'5',  '6'=>'6',  '7'=>'7',  '8'=>'8',  '9'=>'9',\n\t\t\t'A'=>'a', 'B'=>'b',\
    \ 'C'=>'c', 'D'=>'d', 'E'=>'e', 'F'=>'f', 'G'=>'g', 'H'=>'h', 'I'=>'i', 'J'=>'j',\
    \ 'K'=>'k', 'L'=>'l', 'M'=>'m', 'N'=>'n', 'O'=>'o', 'P'=>'p', 'Q'=>'q', 'R'=>'r',\
    \ 'S'=>'s', 'T'=>'t', 'U'=>'u', 'V'=>'v', 'W'=>'w', 'X'=>'x', 'Y'=>'y', 'Z'=>'z',\n\
    \t\t\t'0'=>'0',  '1'=>'1',  '2'=>'2',  '3'=>'3',  '4'=>'4',  '5'=>'5',  '6'=>'6',\
    \  '7'=>'7',  '8'=>'8',  '9'=>'9',\n\t\t\t'a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D',\
    \ 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L',\
    \ 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T',\
    \ 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z',\n\t\t\t'0'=>'0',\
    \  '1'=>'1',  '2'=>'2',  '3'=>'3',  '4'=>'4',  '5'=>'5',  '6'=>'6',  '7'=>'",
  "    return ucfirst(strtolower($string));\n}\n", "    return preg_replace('/\\B([A-Z])/',\
    \ '\\U$1', $string);\n}\n", "    return strtoupper(\n        $string\n       \
    \     ^ // xor: flip bits\n            ($string = strtolower($string)) // make\
    \ lowercase\n            ^ // xor: flip bits\n            $string\n    );\n}\n\
    \n$hello = 'Hello';", "    return strtoupper($string);\n}", "    return ucfirst(strtolower($string));\n\
    }\n", "    return strtr($string, array_flip(\n        array(\n            'h'\
    \ => 'H',\n            'i' => 'I',\n            'j' => 'J',\n            'k' =>\
    \ 'K',\n            'l' => 'L',\n            'm' => 'M',\n            'n' => 'N',\n\
    \            'o' => 'O',\n            'p' => 'P',\n            'q' => 'Q',\n \
    \           'r' => 'R',\n            's' => 'S',\n            't' => 'T',\n  \
    \          'u' => 'U',\n            'v' => 'V',\n            'w' => 'W',\n   \
    \         'x' => 'X',\n            'y' => 'Y',\n            'z' => 'Z',\n    \
    \        'A' => 'a',\n            'B' => 'b',\n            'C' => 'c',\n     \
    \       'D' => 'd',\n            'E' => 'e',\n            'F' => 'f',\n      \
    \      'G' => 'g',\n            'H' => 'h',\n            'I' => 'i',\n       \
    \     'J' => 'j',\n            'K' => 'k',\n            'L' => 'l',\n        \
    \    'M' => 'm',\n            'N' => 'n',\n            'O' => 'o',\n         \
    \   'P' => 'p',\n            'Q' => 'q',\n            'R' => 'r',\n          \
    \  'S' => 's','T' => 't',\n            'U' => 'u',\n            'V' => 'v',\n\
    \            'W' => 'w',\n            'X' => 'x',\n            'Y' => 'y',\n \
    \           'Z' => 'z',\n            '-' => ' ',\n            '.' => '',\n   \
    \         '!' => '',\n        )\n    ));\n}\n", "  $result = $string;\n  $lowercase\
    \ = true;\n  foreach (str_split($string) as $char) {\n    $result .= $lowercase\
    \ ? strtoupper($char) : strtolower($char);\n    $lowercase = !$lowercase;\n  }\n\
    \  return $result;\n}", "    return strtoupper(strtr($string, 'abcdefghijklmnopqrstuvwxyz',\
    \ 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n}", "    $flipped_string = str_replace(\n \
    \       array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'),\n        array('A',\
    \ 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\
    \ 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'),\n        $string\n    );\n\n \
    \   return strtoupper($flipped_string);\n}\n", "    $flipped = strtr($string,\
    \ array(\n        'a' => 'A',\n        'b' => 'B',\n        'c' => 'C',\n    \
    \    'd' => 'D',\n        'e' => 'E',\n        'f' => 'F',\n        'g' => 'G',\n\
    \        'h' => 'H',\n        'i' => 'I',\n        'j' => 'J',\n        'k' =>\
    \ 'K',\n        'l' => 'L',\n        'm' => 'M',\n        'n' => 'N',\n      \
    \  'o' => 'O',\n        'p' => 'P',\n        'q' => 'Q',\n        'r' => 'R',\n\
    \        's' => 'S',\n        't' => 'T',\n        'u' => 'U',\n        'v' =>\
    \ 'V',\n        'w' => 'W',\n        'x' => 'X',\n        'y' => 'Y',\n      \
    \  'z' => 'Z',\n    ));\n    return strtr($flipped, array(\n        'A' => 'a',\n\
    \        'B' => 'b',\n        'C' => 'c',\n        'D' => 'd',\n        'E' =>\
    \ 'e',\n        'F' => 'f',\n        'G' => 'g',\n        'H' => 'h',\n      \
    \  'I' => 'i',\n        'J' => 'j',\n        'K' => 'k',\n        'L' => 'l',\n\
    \        'M' => 'm',\n        'N' => 'n',\n        'O' => 'o',\n        'P' =>\
    \ 'p',\n        'Q' => 'q',\n        'R' => 'r',\n        'S' => 's',\n      \
    \  'T' => 't',\n        'U' => 'u',\n        'V' => 'v',\n        'W' => 'w',\n\
    \        'X' => 'x',\n        'Y' => 'y',\n        'Z' => 'z',\n    ));\n}\n",
  "    // Split the string into an array of words. \n    // Explode defaults to a\
    \ space character, but this can be changed if desired.\n    // The default separator\
    \ is a space character, but this can be changed if desired.\n    $words = explode('\
    \ ', $string);\n\n    // Return the flipped string\n    return implode('', array_map(function($w)\
    \ {\n        return strtr(strtolower($w), STR_PAD, STR_LOWER);\n    }, array_flip($words)));\n\
    }", "    $result = \"\";\n    $length = strlen($string);\n    for ($i = 0; $i\
    \ < $length; $i++) {\n        $result .= (ord($string[$i]) >= 65 && ord($string[$i])\
    \ <= 90)\n            ? ((ord($string[$i]) - 55) % 26 + ord('A'))\n          \
    \  : (ord($string[$i]) + 32);\n    }\n    return $result;\n}", "  return str_ireplace(['a',\
    \ 'e', 'i', 'o', 'u'], ['A', 'E', 'I', 'O', 'U'], $string);\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nThe function works but does not flip characters with accents,\
    \ ex: \xE9 becomes e\n<|/ c |>\n<| c |>\nI suppose this is because the `str_ireplace`\
    \ function uses a regular expression internally. Do you know a way to avoid this?\n\
    <|/ c |>\n<| a dscore=1 tags=regex,php |>\nYou can use a positive lookbehind and\
    \ a positive lookahead:\n<code>\n$string = preg_replace_callback('/(?<=^| )([a-z0-9])/',\
    \ function($matches) {\n    return strtoupper($matches[0]);\n}, $string);\n$string\
    \ = preg_replace_callback('/(?<=^| )([A-Z])/', function($matches) {\n    return\
    \ strtolower($matches[0]);\n}, $string);\n</code>\nSee it working\n<|/ a |>\n\
    <| c |>\nThis is actually the best answer, thanks a lot for your effort man!\n\
    <|/ c |>\n<| a tags=regex,php |>\nTry this:\n<code>\n<?php\n\n$string = 'Hello\
    \ World';\n\necho preg_replace('/([a-z])/', function($m) {\n    return strtoupper($m[0]);\n\
    }, $string);\necho preg_replace('/([A-Z])/', function($m) {\n    return strtolower($m[0]);\n\
    }, $string);", "    return mb_convert_case($string, MB_CASE_UPPER, \"UTF-8\");\n\
    }\n", "    return preg_replace('/([a-z])/i', '\\U\\1', $string);\n}\n", "    return\
    \ strtr(strtolower($string), array('!' => '!', '?' => '?'));\n}\n", "    $result\
    \ = \"\";\n    $length = strlen($string);\n    $i = 0;\n    $char_set = range('A',\
    \ 'Z');\n    \n    while ($i < $length) {\n        // We need to check if the\
    \ current character is upper or lower\n        if ($string[$i] < 'Z') {\n    \
    \        // It's uppercase, add it to the result and move to the next character\n\
    \            $result .= $string[$i];\n        } else {\n            // It's lowercase,\
    \ so we subtract to get an uppercase character\n            $result .= chr((ord($string[$i])\
    \ - ord('A') + 26) % 26 + ord('A'));\n        }\n        // Move to the next character\n\
    \        $i++;\n    }\n    // Return the resulting string\n    return $result;\n\
    }\n", "    return mb_convert_case($string, MB_CASE_UPPER, \"UTF-8\");\n}\n", " \
    \ return $string[0] === $string[1] ? $string[0] . $string[1] : $string[0] . flip_case($string[1]);\n\
    }", "  return preg_replace(\"/(\\w)(\\w)/\", \"\\\\1\\\\2\", $string);\n}\n",
  "    return mb_convert_case($string, MB_CASE_TITLE, 'UTF-8');\n}\n</code>\n<|/ a\
    \ tags=php,string |>\n<| c |>\nAhh, this really helped me out!\n<|/ c |>\n<| a\
    \ dscore=1 |>\nYou can try something like this.\n<code>\n$str = 'AaBbCc';\n$str2\
    \ = str_ireplace(['A','b','c'], 'ABC', $str);", "    return strtr($string, [\"\
    a\"=>\"A\", \"b\"=>\"B\", \"c\"=>\"C\", \"d\"=>\"D\", \"e\"=>\"E\", \"f\"=>\"\
    F\", \"g\"=>\"G\", \"h\"=>\"H\", \"i\"=>\"I\", \"j\"=>\"J\", \"k\"=>\"K\", \"\
    l\"=>\"L\", \"m\"=>\"M\", \"n\"=>\"N\", \"o\"=>\"O\", \"p\"=>\"P\", \"q\"=>\"\
    Q\", \"r\"=>\"R\", \"s\"=>\"S\", \"t\"=>\"T\", \"u\"=>\"U\", \"v\"=>\"V\", \"\
    w\"=>\"W\", \"x\"=>\"X\", \"y\"=>\"Y\", \"z\"=>\"Z\"]);\n}", "    return strtolower(strtr($string,\
    \ array_flip(str_split('ABCDEFGHIJKLMNOPQRSTUVWXYZ'))));\n}", "    return mb_convert_case($string,\
    \ MB_CASE_UPPER, \"UTF-8\");\n}\n</code>\nThe mb_convert_case function is not\
    \ case-sensitive.\n<|/ a |>\n<| c |>\nWhile this does work (i.e. it solves your\
    \ issue as you asked in your question) you should really consider using [mb_strtolower()](https://www.php.net/manual/en/function.mb-strtolower.php)\
    \ and [mb_strtoupper()](https://www.php.net/manual/en/function.mb-strtoupper.php)\
    \ instead which are much more efficient.\n<|/ c |>\n<| a dscore=2 |>\nYou can\
    \ try this:\n<code>\necho ucfirst(strtolower($string));\n</code>\n<|/ a tags=string,php\
    \ |>\n<| a tags=string,php dscore=1 |>\n<code>\n<?php", "    return strtoupper(preg_replace('/\\\
    B./', '',\n        str_replace(['a','A'], ['A', 'a'], $string)));\n}", "  return\
    \ str_ireplace($string, strtoupper($string), strtolower($string));\n}", "  return\
    \ strtoupper(strtr($string, array('!' => '!', '\"' => '\"', '#' => '#', '$' =>\
    \ '$', '%' => '%', '&' => '&', \"'\" => \"'\", '(' => ')', '*' => '*', ',' =>\
    \ '.', ';' => ':', '<' => '=', '>' => '=', '?' => '=', '{' => '{', '}' => '}')));\n\
    }", "  return $string ? preg_replace('/([a-z])/e', 'strtoupper(\"$1\")', $string)\
    \ : '';\n}\n", "    return strtoupper(str_replace($string, str_split($string,\
    \ 2), $string));\n}\n</code>\n<|/ a |>\n<| a tags=php,function dscore=2 |>\nAnother\
    \ solution (to my mind anyway) without using regex. \n<code>", "  return preg_replace('/[a-z]/i',\
    \ '', $string) . preg_replace('/[A-Z]/i', '',\n    $string);\n}", "  $flip = array(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"\
    J\", \"k\" => \"K\", \"l\" => \"L\", \"m\" => \"M\", \"n\" => \"N\", \"o\" =>\
    \ \"O\", \"p\" => \"P\", \"q\" => \"Q\", \"r\" => \"R\", \"s\" => \"S\", \"t\"\
    \ => \"T\", \"u\" => \"U\", \"v\" => \"V\", \"w\" => \"W\", \"x\" => \"X\", \"\
    y\" => \"Y\", \"z\" => \"Z\", \"A\" => \"a\", \"B\" => \"b\", \"C\" => \"c\",\
    \ \"D\" => \"d\", \"E\" => \"e\", \"F\" => \"f\", \"G\" => \"g\", \"H\" => \"\
    h\", \"I\" => \"i\", \"J\" => \"j\", \"K\" => \"k\", \"L\" => \"l\", \"M\" =>\
    \ \"m\", \"N\" => \"n\", \"O\" => \"o\", \"P\" => \"p\", \"Q\" => \"q\", \"R\"\
    \ => \"r\", \"S\" => \"s\", \"T\" => \"t\", \"U\" => \"u\", \"V\" => \"v\", \"\
    W\" => \"w\", \"X\" => \"x\", \"Y\" => \"y\", \"Z\" => \"z\");\n  return strtoupper($flip[$string]);\n\
    }\n", "    $chars = preg_split('//u', $string);\n    return implode('', $chars);\n\
    }\n", "    return str_replace(\n        array_map(\n            create_function('$char',\
    \ 'return strtoupper($char);'),\n            str_split($string)\n        ),\n\
    \        array_map(\n            create_function('$char', 'return strtolower($char);'),\n\
    \            str_split($string)\n        ),\n        $string\n    );\n}\n", " \
    \   $result = $string;\n    $upper = true;\n\n    for ($i = 0, $len = strlen($result);\
    \ $i < $len; $i++) {\n        $letter = substr($result, $i, 1);\n\n        if\
    \ ($upper) {\n            if (strtoupper($letter) === $letter) {\n           \
    \     $result = substr($result, 0, $i) . strtolower(substr($result, $i + 1));\n\
    \            }\n        } else {\n            if (strtolower($letter) === $letter)\
    \ {\n                $result = substr($result, 0, $i) . strtoupper(substr($result,\
    \ $i + 1));\n            }\n        }\n\n        $upper = !$upper;\n    }\n\n\
    \    return $result;\n}\n</code>\nThis may also be done using regular expressions,\
    \ though I'm not a PHP guy.\n<|/ a |>\n<| c |>\nThis doesn't work for me, I've\
    \ got it working for the first two letters, but then it crashes. http://pastebin.com/vFqj1q6h\n\
    <|/ c |>\n<| a |>\n<code>", "    return implode('', array_map(function ($letter)\
    \ {\n        static $mapping = array(\n            'A' => 'a',\n            'B'\
    \ => 'b',\n            'C' => 'c',\n            'D' => 'd',\n            'E' =>\
    \ 'e',\n            'F' => 'f',\n            'G' => 'g',\n            'H' => 'h',\n\
    \            'I' => 'i',\n            'J' => 'j',\n            'K' => 'k',\n \
    \           'L' => 'l',\n            'M' => 'm',\n            'N' => 'n',\n  \
    \          'O' => 'o',\n            'P' => 'p',\n            'Q' => 'q',\n   \
    \         'R' => 'r',\n            'S' => 's',\n            'T' => 't',\n    \
    \        'U' => 'u',\n            'V' => 'v',\n            'W' => 'w',\n     \
    \       'X' => 'x',\n            'Y' => 'y',\n            'Z' => 'z',\n      \
    \  );\n\n        if (array_key_exists($letter, $mapping)) {\n            return\
    \ $mapping[$letter];\n        }\n\n        return $letter;\n    }, $string));\n\
    }\n</code>\n<|/ a |>\n<| a dscore=1 |>\n<code>\n<?php", "    return $string !==\
    \ null ? preg_replace(\"/(?=[A-Z])/i\", \"$0\", $string) : null;\n}\n$data = ['Hello',\
    \ 'Hi', 'HELLO', 'hi', 'hihi', 'HiHI', 'hIIIII', 'hIiii'];\n$data = array_map($data,\
    \ $data);\n$data = array_map($data, $data);\n$data = array_map($data, $data);\n\
    $data = array_map($data, $data);\n$data = array_map($data, $data);\n$data = array_map($data,\
    \ $data);\n$data = array_map($data, $data);\n$data = array_map($data, $data);\n\
    $data = array_map($data, $data);\n$data = array_map($data, $data);\n$data = array_map($data,\
    \ $data);\n$data = array_map($data, $data);\n$data = array_map($data, $data);\n\
    $data = array_map($data, $data);\n$data = array_map($data, $data);\n$data = array_map($data,\
    \ $data);\n$data = array_map($data, $data);\n$data = array_map($data, $data);\n\
    $data = array_map($data, $data);\n$data = array_map($data, $data);\n$data = array_map($data,\
    \ $data);\n$data = array_map($data, $data);\n$data = array_map($data, $data);\n\
    $data = array_map($data, $data);\n$data = array_map($data, $data);\n$data = array_map($data,\
    \ $data);\n$data = array_map($data, $data);\n$data = array_map($data, $data);\n\
    $data = array_map($data, $data);\n$data = array_map($data, $data);\n$data = array_map($data,\
    \ $data);\n$data = array_map($data, $data);\n$data = array_map($data, $data);\n\
    $data = array_map($data, $data);\n$data = array_map($data, $data);\n$data = array_map($data,\
    \ $data);\n$data = array_map($data, $data);\n$data = array_map($data, $data);\n\
    $data = array_map($data, $data);\n$data = array_map($data, $data);\n$data = array_map($data,\
    \ $data);\n$data = array_map($data, $data);\n$data = array_map($data, $data);\n\
    $data = array_map($data, $data);\n$data = array_map($data, $data);\n$data = array_map($data,\
    \ $data);\n$data = array_map($data, $data);\n$data = array_map($data, $data);\n\
    $data = array_map($data, $data);\n$data = array_map($data, $data);\n$data = array_map($data,\
    \ $data);\n", "    return ucfirst(strtolower($string));\n}\n", "    $string =\
    \ preg_replace('/([a-z])/', '$U\\1', $string);\n    return preg_replace('/([A-Z])/',\
    \ '$L\\1', $string);\n}\n</code>\n<|/ a tags=replace,string,php |>\n<| c |>\n\
    Thanks Jason! That worked perfectly. \n\nBy the way, why do I have to use preg_replace\
    \ instead of str_replace for my example? I know that str_replace only replaces\
    \ the first occurrence, but this seems to work for the example I gave.\n<|/ c\
    \ |>\n<| c |>\nThe `preg_replace` command is probably more efficient because it\
    \ uses a `preg_match_all` behind the scenes and that command can do multiple replacements.\
    \ `str_replace` only replaces one occurrence at a time.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\n$str = \"hello-world\";\n$str = str_replace(\n    array(\"h\",\"\
    e\",\"l\",\"l\",\"o\",\"-\",\"w\",\"o\",\"r\",\"l\",\"d\"),\n    array(\"H\",\"\
    E\",\"L\",\"L\",\"O\",\"-\",\"W\",\"O\",\"R\",\"L\",\"D\"),\n    $str);\n</code>\n\
    <|/ a tags=replace,string,php |>\n<| c |>\nYou should use `strtolower` instead\
    \ of `str_replace`. It won't be affected by accented letters.\n<|/ c |>\n<| c\
    \ |>\nTrue, but in this case it doesn't really matter. strtolower will also lowercase\
    \ accented letters, since it doesn't take into account any kind of transliteration.\
    \ strtolower would be better if he wanted to only lowercase certain characters.\n\
    <|/ c |>\n<| c |>\nWhat does `str_replace` do if you pass a string that contains\
    \ `-` as a needle to `preg_replace`?\n<|/ c |>\n<| c |>\nI believe it doesn't,\
    \ but if he had a regex like `'/[a-b]/'` it would replace them with empty strings.\
    \ I guess it depends on what his needs are, and how strict he needs to be.\n<|/\
    \ c |>\n<| a dscore=1 tags=replace,string,php |>\nYou can use a callback function:\n\
    <code>\n$str = 'hello-world';\n\necho preg_replace_callback('/[a-z]/', function($m)\
    \ {\n    return mb_strtoupper($m[0]);\n}, $str);\n</code>\n<|/ a |>\n<| c |>\n\
    If you're using PHP >= 5.3.3 you can pass arrays as needles and arrays as replacements\
    \ to `str_replace` ", "\treturn preg_replace_callback('/./', function($matches)\
    \ {\n\t\treturn strtoupper($matches[0]);\n\t}, $string);\n}", "    return strtoupper(preg_replace('/./e',\
    \ \"strtoupper('\\\\0')\", $string));\n}\n", "    return preg_replace('/[a-z]/i',\
    \ strtr($string, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),\
    \ $string);\n}\n", "  return strtr(strtolower($string), array('!' => '!',\n  \
    \                                       '@' => 'a',\n                        \
    \                 '#' => 'b',\n                                         '$' =>\
    \ 'p',\n                                         '%' => 'h',\n               \
    \                          '^' => 'c',\n                                     \
    \    '&' => 'd',\n                                         '*' => 'e',\n     \
    \                                    '('=> 'g',\n                            \
    \             ')' => 'i',\n                                         '_' => 'j',\n\
    \                                         '-' => 'k',\n                      \
    \                   '=' => 'l',\n                                         '<'\
    \ => 'm',\n                                         '>' => 'n',\n            \
    \                             '/' => 'o',\n                                  \
    \       '?' => 'r',\n                                         '~' => 's',\n  \
    \                                       '|' => 't',\n                        \
    \                 '\"' => 'u',\n                                         '$%&*'\
    \ => 'q',\n                                         '+' => 'v',\n            \
    \                             '|' => 'y',\n                                  \
    \       ';' => 'w',\n                                         '=' => 'x',\n  \
    \                                       '<' => 'y',\n                        \
    \                 '>' => 'z',\n                                         '?' =>\
    \ 'z',\n                                         '~' => 'y',\n               \
    \                          '?' => 'y',\n                                     \
    \    '^' => 'u',\n                                         '$%&*' => 'u',\n  \
    \                                       '+' => 'w',\n                        \
    \                 '|' => 'v',\n                                         '<' =>\
    \ 'w',\n                                         '>' => 'v',\n               \
    \                          '?' => 'w',\n                                     \
    \    '~' => 'w',\n                                         '?' => 'v',\n     \
    \                                    '^' => 'w',\n                           \
    \              '$%&*' => 'v',\n                                         '+' =>\
    \ 'x',\n                                         '|' => 'y',\n               \
    \                          '<' => 'x',\n                                     \
    \    '>' => 'y',\n                                         '?' => 'x',\n     \
    \                                    '~' => 'x',\n                           \
    \              '?' => 'y',\n                                         '^' => 'x',\n\
    \                                         '$%&*' => 'y',\n                   \
    \                      '+' => 'z',\n                                         '|'\
    \ => 'w',\n                                         '<' => 'z',\n            \
    \                             '>' => 'w',\n                                  \
    \       '?' => 'z',\n                                         '~' => 'z',\n  \
    \                                       '?' => 'w',\n                        \
    \                 '^' => 'z',\n                                         '$%&*'\
    \ => 'w',\n                                         '+' => 'a',\n            \
    \                             '|' => 'x',\n                                  \
    \       '<' => 'a',\n                                         '>' => 'x',\n  \
    \                                       '?' => 'a',\n                        \
    \                 '~' => 'a',\n                                         '?' =>\
    \ 'x',\n                                         '^' => 'a',\n               \
    \                          '$%&*' => 'x',\n                                  \
    \       '+' => 'b',\n                                         '|' => 'y',\n  \
    \                                       '<' => 'b',\n                        \
    \                 '>' => 'y',\n                                         '?' =>\
    \ 'b',\n                                         '~' => 'b',\n               \
    \                          '?' => 'y',\n                                     \
    \    '^' => 'b',\n", "    // Your code here!\n    return strtoupper(mb_convert_case($string,\
    \ MB_CASE_TITLE, 'UTF-8'));\n}\n", "  return str_ireplace(strtolower($string),\
    \ '', strtoupper($string));\n}", "    return strtoupper(preg_replace('/([a-z])/',\
    \ '$1', $string));\n}\n", "    return strtr($string, array_flip(str_split('ABCDEFGHIJKLMNOPQRSTUVWXYZ',\
    \ -1)));\n}\n</code>\nBut then again if you're just wanting to remove letters\
    \ from a string, you could just do this:\n<code>\n<?php", "    return $string\
    \ !== $string ? strtoupper($string) : strtolower($string);\n}\n", "  return strtoupper(preg_replace('/([a-z])/',\
    \ '$U$1', $string));\n}", "  $string = mb_strtolower($string);\n  $string = mb_strtoupper($string);\n\
    \  return $string;\n}\n</code>\n<|/ a dscore=4 tags=php,case-sensitive,uppercase,string,function\
    \ |>\n<| c |>\nThank you for this, I came here looking for an uppercase function,\
    \ while I found the flipcase function above I realized I should just flip both\
    \ strings instead since I am more familiar with PHP and didn't want to reinvent\
    \ the wheel.\n<|/ c |>\n<| c |>\nJust use `$string = mb_strtoupper($string);`\
    \ instead of `$string = mb_strtolower($string);`\n<|/ c |>\n<| a dscore=3 tags=php,case-sensitive,uppercase,string,function\
    \ |>\nI've written a short function that will work for either lowercase or uppercase\
    \ strings. Simply pass in the string and the other case type to flip through.\n\
    <code>", "  return strtr($string, array('\xC0\xC1\xC2\xC3\xC4\xC5\xC7\xC8\xC9\xCA\
    \xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD9\xDA\xDB\xDC\xDD\xDE' => 'AEAOUaeou
  "    $uppercased = preg_replace_callback('/./', function($matches) {\n        return\
    \ strtoupper($matches[0]);\n    }, $string);\n    $lowercased = preg_replace_callback('/./',\
    \ function($matches) {\n        return strtolower($matches[0]);\n    }, $string);\n\
    \    return $lowercased . ' ' . $uppercased;\n}\n</code>\n<|/ a tags=php |>\n\
    <| c |>\nI like this answer, but I ended up going with a simpler approach. Thanks!\n\
    <|/ c |>\n<| c |>\nHow exactly is this simpler?\n<|/ c |>\n<| a dscore=0 tags=php\
    \ |>\nI ended up going with this:\n<code>\n<?php", "    return preg_replace('/./us',\
    \ array('a', 'b'), $string);\n}\n", "  return $string\n             // Lowercase\
    \ every character and uppercase all others.\n            . preg_replace('/./u',\
    \ function ($c) {\n              return ($c >= 'A' && $c <= 'Z') ? strtoupper($c)\
    \ : strtolower($c);\n            }, $string);\n}", "    return strtoupper(preg_replace('/./','',$string));\n\
    }\n\n$string = \"Hello\";\n$string2 = flip_case($string);\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=php,case-sensitive,case-insensitive |>\n<code>\n<?php\n", "  \
    \  return strtolower($string) . strtoupper($string);\n}\n$string = \"Hello World!\"\
    ;\necho $string . \" | \" . flip_case($string) . \"\\n\";", "    $string = ucfirst(strtolower($string));\n\
    \    $string = ucfirst(strtoupper($string));\n\n    return $string;\n}\n", " \
    \   return preg_replace('/(\\w)/e', '$1', strtoupper($string));\n}", "    $flipped\
    \ = \"\";\n    for ($i = 0; $i < strlen($string); ++$i) {\n        $flipped .=\
    \ strtoupper($string[$i]);\n        $flipped .= strtolower($string[$i]);\n   \
    \ }\n    return $flipped;\n}", "  return str_ireplace(strtolower($string), strtoupper($string),\
    \ $string);\n}\n</code>\n<|/ a dscore=3 |>\n<| a tags=php,string,replace dscore=3\
    \ |>\n<code>\n$str = 'Hello';\n$str = ucfirst($str);\n$str = strtolower($str);\n\
    </code>\n<|/ a |>\n<| c |>\nThis doesn't work for the original poster's example.\
    \ ucfirst() returns a single character 'H' and strtolower() returns 'hello'.\n\
    <|/ c |>\n<| c |>\n: I realize that now, I thought that they wanted to convert\
    \ `hello` to `hello` and that they knew about `ucfirst()` and `strtolower()` but\
    \ forgot about `strtoupper()`.\n<|/ c |>\n<| a tags=php,string,replace |>\nFor\
    \ a general function, try this..\n<code>", "    return ucfirst(strtolower($string));\n\
    }", "  return strtoupper(preg_replace('/\\B./', '', $string));\n}", "    return\
    \ strtr($string, array_flip(str_split($string, 1)));\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nI like this solution (+1). Just a note: the `strtr` function has\
    \ been removed from PHP 7.1, so use `$string = strtr($string, array_flip(str_split($string,\
    \ 1)));` instead\n<|/ c |>\n<| c |>\nI wanted to use a one-liner but I didn't\
    \ like `strtr` so I did something like this `str_replace(str_repeat($string2,\
    \ count($string1)),$string1,$string);` and it works just as well.\n<|/ c |>\n\
    <| c |>\n: Thanks, I've updated the example to show the one-liner version. Also,\
    \ your solution would work but it is less efficient, since you would need to repeat\
    \ the whole array for each string in the array. But that's probably not a big\
    \ deal if you're doing this a lot of times anyway.\n<|/ c |>\n<| c |>\nThe only\
    \ thing that would be a problem would be if OP wanted to support multiple cases\
    \ in a single string, for example `\"Hello to you too\"` would become `'heLlo\
    \ to you to'`.\n<|/ c |>\n<| c |>\nThis should be the accepted answer for readability\
    \ and compactness, especially for someone who can't use an array_flip function.\
    \ Nice!\n<|/ c |>\n<| a tags=string,php dscore=5 |>\nThe simplest method would\
    \ be to loop through each character and flip it using the ternary operator. Something\
    \ like this:\n<code>\n$str = \"Hello\";\n$newStr = \"\";\n\nfor($i = 0; $i < strlen($str);\
    \ $i++) {\n  $newStr .= (isset($str[$i])) ? $str[$i] : strtoupper($str[$i]);\n\
    }\n", "    $result = \"\";\n    $length = strlen($string);\n    for ($i = 0; $i\
    \ < $length; $i++) {\n        $result .= $string[$i];\n    }\n    for ($i = 0;\
    \ $i < $length; $i++) {\n        $result .= strtoupper($string[$i]);\n    }\n\
    \    for ($i = 0; $i < $length; $i++) {\n        $result .= strtolower($string[$i]);\n\
    \    }\n    return $result;\n}", "    $flipped = preg_replace(\"/(\\w)/e\", \"\
    strtoupper('\\\\1')\", $string);\n    return preg_replace(\"/(\\w)/e\", \"strtolower('\\\
    \\1')\", $flipped);\n}", "\treturn strtoupper(strtr($string, ['/[A-Z]/' => '/',\
    \ ]));\n}", "    return preg_replace('/[^a-zA-Z0-9]+/', 'u', preg_replace('/[^a-zA-Z0-9]/',\
    \ '', $string));\n}", "\treturn preg_replace(\"/(^[a-z]*|[a-z]*$)/i\", \"\\U$1\"\
    , $string);\n}", "    return strtr($string, array(\"a\"=>\"A\", \"b\"=>\"B\",\
    \ \"c\"=>\"C\", \"d\"=>\"D\", \"e\"=>\"E\", \"f\"=>\"F\", \"g\"=>\"G\", \"h\"\
    =>\"H\", \"i\"=>\"I\", \"j\"=>\"J\", \"k\"=>\"K\", \"l\"=>\"L\", \"m\"=>\"M\"\
    , \"n\"=>\"N\", \"o\"=>\"O\", \"p\"=>\"P\", \"q\"=>\"Q\", \"r\"=>\"R\", \"s\"\
    =>\"S\", \"t\"=>\"T\", \"u\"=>\"U\", \"v\"=>\"V\", \"w\"=>\"W\", \"x\"=>\"X\"\
    , \"y\"=>\"Y\", \"z\"=>\"Z\", \"\xDF\"=>\"ss\", \"\u20AC\"=>\"E\", \"\u0161\"\
    =>\"s\", \"\u017E\"=>\"z\", \"\xEE\"=>\"i\", \"\u0160\"=>\"S\", \"\u017D\"=>\"\
    Z\"));\n}", "    return mb_strtoupper(mb_substr($string, 0, 1)) . mb_strtolower(mb_substr($string,\
    \ 1));\n}", "    return strtoupper(strtr($string, \n                         \
    \   'abcdefghijklmnopqrstuvwxyz' .\n                            'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\
    \ .\n                            '0123456789' .\n                            '!@#$%^&*()-_=+[]{}<>?:\"\
    |,.')).\n        strtolower($string);\n}\n", "    $string  = strtolower($string);\n\
    \    $result = strtoupper($string);\n    return $result;\n}", "    return lcfirst(strtolower($string));\n\
    }\n", "  return strtolower(preg_replace('/./u', 'U', $string));\n}\n", "    $flipped\
    \ = str_replace(array('a','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','0','1','2','3','4','5','6','7','8','9'),\
    \ array('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','0','1','2','3','4','5','6','7','8','9'),\
    \ $string);\n    return str_replace(array('hELLO'), array('Hello'), $flipped);\n\
    }\n", "  $flipped = \"\";\n  for ($i = 0; $i < strlen($string); $i++) {\n    $flipped\
    \ .= (ctype_lower($string[$i]) ? strtoupper($string[$i]) : strtolower($string[$i]));\n\
    \  }\n  return $flipped;\n}\n", "    return strtoupper(strtr($string, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\
    \ 'abcdefghijklmnopqrstuvwxyz'));\n}\n", "    $lowercase = array();\n    $uppercase\
    \ = array();\n    foreach (str_split($string) as $char) {\n        // Flip lowercase\
    \ characters.\n        if (ctype_lower($char)) {\n            $uppercase[] = strtoupper($char);\n\
    \        }\n        // Flip uppercase characters.\n        else {\n          \
    \  $lowercase[] = strtolower($char);\n        }\n    }\n    return implode('',\
    \ $lowercase + $uppercase);\n}\n</code>\n<|/ a |>\n<| a tags=php,string |>\nI\
    \ have not tested this code. Just a way to make things clear.\n<code>\n<?php",
  "    return strtoupper(preg_replace(\"/([a-z])/i\", \"$1\" . strtoupper($string),\
    \ $string));\n}\n", "    return strtr($string, array('a'=>'A','b'=>'B','c'=>'C','d'=>'D','e'=>'E','f'=>'F','g'=>'G','h'=>'H','i'=>'I','j'=>'J','k'=>'K','l'=>'L','m'=>'M','n'=>'N','o'=>'O','p'=>'P','q'=>'Q','r'=>'R','s'=>'S','t'=>'T','u'=>'U','v'=>'V','w'=>'W','x'=>'X','y'=>'Y','z'=>'Z'));\n\
    }", "    return strtoupper(strtr($string, \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", \"abcdefghijklmnopqrstuvwxyz\"\
    ));\n}", "\t$upper = strtoupper($string);\n\t$lower = strtolower($string);\n\t\
    return $upper === $lower ? $string : $upper;\n}", "    return strtolower($string)\
    \ . strtoupper($string);\n}\n", "  return mb_strtoupper(mb_strtolower($string));\n\
    }", "    return strtr($string, array('~E' => \"~e\", '~h' => \"~H\", '~l' => \"\
    ~l\", '~o' => \"~O\", '~s' => \"~S\", '~u' => \"~U\", '~a' => \"~a\",\n      \
    \  '~c' => \"~C\", '~e' => \"~e\", '~i' => \"~i\", '~o' => \"~O\", '~u' => \"\
    ~U\", '~y' => \"~Y\", '~u' => \"~U\"));\n}\n", "  return preg_replace('/./', function($match)\
    \ { return strtoupper($match); }, $string);\n}\n", "    $string = strtolower($string);\n\
    \    return ucfirst($string);\n}\n", "    return strtr(strtolower($string), array('a'=>'A','b'=>'B','c'=>'C','d'=>'D','e'=>'E','f'=>'F','g'=>'G','h'=>'H','i'=>'I','j'=>'J','k'=>'K','l'=>'L','m'=>'M','n'=>'N','o'=>'O','p'=>'P','q'=>'Q','r'=>'R','s'=>'S','t'=>'T','u'=>'U','v'=>'V','w'=>'W','x'=>'X','y'=>'Y','z'=>'Z'));\n\
    }\n", "    return strtoupper(strtr($string, array('a' => \"A\", \"b\" => \"B\"\
    , \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\" => \"F\", \"g\" => \"\
    G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\", \"k\" => \"K\", \"l\" =>\
    \ \"L\", \"m\" => \"M\", \"n\" => \"N\", \"o\" => \"O\", \"p\" => \"P\", \"q\"\
    \ => \"Q\", \"r\" => \"R\", \"s\" => \"S\", \"t\" => \"T\", \"u\" => \"U\", \"\
    v\" => \"V\", \"w\" => \"W\", \"x\" => \"X\", \"y\" => \"Y\", \"z\" => \"Z\")));\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you very much, this is just what\
    \ I was looking for! :)\n<|/ c |>\n<| a |>\n<code>\n<?php", "    return strtr(strtolower($string),\
    \ array('!' => '!', \"'\" => \"''\", '\"' => '\"', \n                        \
    \                      '#' => '#', '$' => '$', '?' => '?'));\n}", "    return\
    \ str_replace(\n        array('a', 'e', 'i', 'o', 'u'),\n        array('A', 'E',\
    \ 'I', 'O', 'U'),\n        $string);\n}\n$str = flip_case($str);\necho $str;",
  "    return str_replace(\n        array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\
    \ 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',\
    \ 'y', 'z'),\n        array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\
    \ 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'),\n\
    \        $string\n    );\n}\n</code>\nNow the only thing you need to do is create\
    \ a second function which takes in your text and returns the HTML for the table\
    \ you want. Then you can use that function to generate the HTML of the table as\
    \ needed.\n<code>", "    return strtoupper(preg_replace('/./u', '\\uFFFD', $string));\n\
    }", "    return strtoupper(preg_replace('/(^|[a-z])/i','$1',$string));\n}\n",
  "  return strtr(strtolower($string), array('a' => 'A', 'b' => 'B', 'c' => 'C', 'd'\
    \ => 'D', 'e' => 'E', 'f' => 'F', 'g' => 'G', 'h' => 'H', 'i' => 'I', 'j' => 'J',\
    \ 'k' => 'K', 'l' => 'L', 'm' => 'M', 'n' => 'N', 'o' => 'O', 'p' => 'P', 'q'\
    \ => 'Q', 'r' => 'R', 's' => 'S', 't' => 'T', 'u' => 'U', 'v' => 'V', 'w' => 'W',\
    \ 'x' => 'X', 'y' => 'Y', 'z' => 'Z'));\n}\n", "    return strtoupper(strtolower($string));\n\
    }\n</code>\n<|/ a tags=case,php,string |>\n<| a tags=case,php,string |>\nI like\
    \ using ucfirst() and ucwords() to achieve this easily.\n<code>\nucfirst($string)\n\
    </code>\nWill make the first letter uppercase, and\n<code>\nucwords($string)\n\
    </code>\nWill make the first letter of the string into uppercase, followed by\
    \ the rest of the string with first letter capitalized with the rest of the string\
    \ in lowercase.\n<|/ a dscore=4 |>\n<| c |>\nThis is the best answer.\n<|/ c |>\n\
    <| a tags=case,php,string |>\nThe easiest way is to capitalize the first letter\
    \ of each word in a string and then lowercase all others.\n<code>", "  $return\
    \ = '';\n  for ($i = 0; $i < strlen($string); $i++) {\n    if (ctype_upper($string[$i]))\
    \ {\n      $return .= strtolower($string[$i]);\n    }\n    $return .= strtoupper($string[$i]);\n\
    \  }\n  return $return;\n}", "    return implode('', array_map('ucfirst', str_split($string,\
    \ 1)));\n}", "    $string = strtolower($string);\n    $string = ucfirst($string);\n\
    \    return strtoupper($string);\n}", "    return preg_replace('/([a-z])/i', '\\\
    U$1', $string);\n}\n", "    $lowercase = $string;\n    $uppercase = strtoupper($string);\n\
    \    $string = $lowercase . strtolower($uppercase);\n    return $string;\n}\n",
  "    $flipped = strtolower($string);\n    $flipped = preg_replace('/\\s(\\w)/e',\
    \ 'strtoupper(\"$1\")', $flipped);\n    return $flipped;\n}\n", "    return $string\n\
    \        . str_replace(\n            array_map(\n                \"chr\",\n  \
    \              range(65, 90)\n            ),\n            array_map(\n       \
    \         \"chr\",\n                range(90, 122)\n            ),\n         \
    \   str_replace(\n                \"'\",\n                \"\",\n            \
    \    strtolower($string)\n            )\n        )\n        . str_replace(\n \
    \           array_map(\n                \"chr\",\n                range(65, 90)\n\
    \            ),\n            array_map(\n                \"chr\",\n          \
    \      range(90, 122)\n            ),\n            str_replace(\n            \
    \    \"'\",\n                \"\",\n                strtoupper($string)\n    \
    \        )\n        );\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nYes, I didn't\
    \ think there would be a way to do this more easily. Thanks for helping me out\
    \ :)\n<|/ c |>\n<| a tags=string,lowercase,php,uppercase |>\nThe strtolower()\
    \ and strtoupper() functions are useful for this.\n<code>\n<?php\necho strtolower($string);\n\
    echo strtoupper($string);", "  $string = preg_replace('/([a-z])/i', '\\U$1', $string);\
    \ // convert letter to uppercase\n  $string = preg_replace('/([A-Z])/i', '\\L$1',\
    \ $string); // convert letter to lowercase\n  return $string;\n}\n", "    return\
    \ strtoupper(strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E',\
    \ 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M',\
    \ 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U',\
    \ 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z', ' '=>' ')));\n}", "  return\
    \ preg_replace('/(^[a-z])|([A-Z])/', '$\\\\1'.'\\\\2', $string);\n}\n", "    $string\
    \ = mb_strtoupper($string, 'UTF-8');\n    $string = mb_strtolower($string, 'UTF-8');\n\
    \    return $string;\n}\n", "    // For each character, use the `mb_strtolower`\
    \ function to flip lowercase characters\n    // to uppercase and use the `mb_strtoupper`\
    \ function to uppercase to lowercase\n    return mb_strtoupper(mb_strtolower($string));\n\
    }\n", "    return strtoupper(str_replace($string, substr($string, 0, 1), $string));\n\
    }\n", "    return strtr($string, array('!' => '!', '?' => '?', '$' => '$', '&'\
    \ => '&', \"'\" => \"'\",\n        '(' => '(', ')' => ')', '*' => '*', '/' =>\
    \ '/', ':' => ':', ';' => ';',\n        '<' => '<', '>' => '>', '=' => '=', '|'\
    \ => '|', '~' => '~', '!~' => '!~',\n        '@' => '@', '^' => '^', '&=' => '&=',\
    \ '^=' => '^=', '|=' => '|=', '<=' => '<=',\n        '>=' => '>=', '!=' => '!=',\
    \ '<>' => '<>', '=!' => '=!', ':!' => '=!',\n        ':@' => ':@', '::' => '::',\
    \ '>!' => '>!', '<!' => '<!', '<@' => '<@',\n        '>@' => '>@', '!>' => '!>',\
    \ '!<' => '!<', '<!' => '<!', '>!' => '>!',\n        '<@' => '<@', '!!' => '!!',\
    \ '!!!' => '!!!', '!?' => '!?', '!??' => '!??',\n        '?!' => '?!', '??' =>\
    \ '??', '???' => '???', '????' => '????', '?????' => '?????',\n        '??????'\
    \ => '??????', '???????' => '???????'));\n}\n", "    return strtoupper(preg_replace('/(^|(?<=\\\
    \\s))[a-z]/i', '\\\\U$1', $string));\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$string = 'HELLO';\n$newstring = ucwords(str_replace(array(\"\
    '\",\".\",\"!\",\"?\",\"(\",\")\",\"[\",\"]\",\"{\",\"}\",\"/\",\"-\",\"_\",\"\
    =\"),\narray(\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\
    \\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\"\
    ,\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\
    \",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\
    \"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\
    \\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\"\
    ,\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\
    \",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\
    \"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\
    \\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\"\
    ,\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\
    \",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\
    \"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\
    \\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\"\
    ,\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\
    \",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\
    \"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\
    \\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\"\
    ,\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\
    \",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\
    \"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\
    \\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\"\
    ,\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\
    \",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",\"\\\"\",", "    return\
    \ strtoupper(str_replace($string, '', $string));\n}\n</code>\nThe flip-case function\
    \ is defined above. The last step is calling the flip function on the string that\
    \ we want to uppercase.\n<code>", "    return strtr(\n        $string,\n     \
    \   array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G',\
    \ 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O',\
    \ 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W',\
    \ 'x'=>'X', 'y'=>'Y', 'z'=>'Z', '0'=>'a', '1'=>'b', '2'=>'c', '3'=>'d', '4'=>'e',\
    \ '5'=>'f', '6'=>'g', '7'=>'h', '8'=>'i', '9'=>'j', 'a'=>'k', 'b'=>'l', 'c'=>'m',\
    \ 'd'=>'n', 'e'=>'o', 'f'=>'p', 'g'=>'q', 'r'=>'s', 's'=>'t', 't'=>'u', 'v'=>'w',\
    \ 'x'=>'y', 'z'=>'z', ' '=>'')\n    );\n}", "  return str_replace([\n        'A'\
    \ => 'a',\n        'B' => 'b',\n        'C' => 'c',\n        'D' => 'd',\n   \
    \     'E' => 'e',\n        'F' => 'f',\n        'G' => 'g',\n        'H' => 'h',\n\
    \        'I' => 'i',\n        'J' => 'j',\n        'K' => 'k',\n        'L' =>\
    \ 'l',\n        'M' => 'm',\n        'N' => 'n',\n        'O' => 'o',\n      \
    \  'P' => 'p',\n        'Q' => 'q',\n        'R' => 'r',\n        'S' => 's',\n\
    \        'T' => 't',\n        'U' => 'u',\n        'V' => 'v',\n        'W' =>\
    \ 'w',\n        'X' => 'x',\n        'Y' => 'y',\n        'Z' => 'z',\n      \
    \  '-' => '-',\n        '_' => '_',\n        '.' => '.'\n    ], [\n        'a'\
    \ => 'A',\n        'b' => 'B',\n        'c' => 'C',\n        'd' => 'D',\n   \
    \     'e' => 'E',\n        'f' => 'F',\n        'g' => 'G',\n        'h' => 'H',\n\
    \        'i' => 'I',\n        'j' => 'J',\n        'k' => 'K',\n        'l' =>\
    \ 'L',\n        'm' => 'M',\n        'n' => 'N',\n        'o' => 'O',\n      \
    \  'p' => 'P',\n        'q' => 'Q',\n        'r' => 'R',\n        's' => 'S',\n\
    \        't' => 'T',\n        'u' => 'U',\n        'v' => 'V',\n        'w' =>\
    \ 'W',\n        'x' => 'X',\n        'y' => 'Y',\n        'z' => 'Z',\n      \
    \  '-' => '-',\n        '_' => '_',\n        '.' => '.'\n    ], $string);\n}",
  "    return preg_replace('/./u', 'u', $string);\n}", "    return mb_strtoupper(mb_strtolower($string));\n\
    }\n</code>\n<|/ a tags=php,character-encoding |>\n<| a tags=php,character-encoding\
    \ |>\nI've found this solution\n<code>\n/**\n * Convert text to lower case with\
    \ UTF-8 encoding\n *\n * string $text\n * string\n */\npublic static function\
    \ toLower($text)\n{\n    $chars = [\n        \"\\xE2\\x80\\x80\" => '\xE1',\n\
    \        \"\\xE2\\x80\\x81\" => '\xE9',\n        \"\\xE2\\x80\\x82\" => '\xED\
    ',\n        \"\\xE2\\x80\\x83\" => '\xF3',\n        \"\\xE2\\x80\\x84\" => '\xFA\
    ',\n        \"\\xE2\\x80\\x85\" => '\xE0',\n        \"\\xE2\\x80\\x86\" => '\xE8\
    ',\n        \"\\xE2\\x80\\x87\" => '\xEC',\n        \"\\xE2\\x80\\x88\" => '\xF2\
    ',\n        \"\\xE2\\x80\\x89\" => '\xF9',\n    ];\n\n    $result = '';\n    $length\
    \ = mb_strlen($text, 'UTF-8');\n\n    for ($i = 0; $i < $length; $i++) {\n   \
    \     if ($i == $length - 1)\n            $result .= mb_strtolower($text[$i],\
    \ 'UTF-8');\n        else\n            $result .= mb_strtolower($text[$i], 'UTF-8').$text[$i\
    \ + 1];\n\n        if (isset($chars[$result]))\n            $result = $chars[$result];\n\
    \    }\n\n    return $result;\n}\n</code>\nThis solutions works for me, I've tested\
    \ it.\n<|/ a dscore=2 |>\n<| a tags=php,character-encoding dscore=1 |>\nIf you're\
    \ doing this as part of a script that's already in UTF-8, you don't need to do\
    \ anything except make sure you're saving it as UTF-8. PHP will handle it automatically\
    \ for you.\nIf you're doing this as part of a web form, you should set the meta\
    \ tag in the HTML page to tell the browser which encoding the data is. If you\
    \ need help with the meta tag, google \"meta charset utf-8\".\n<|/ a |>\n<| c\
    \ |>\nHi, thanks for your reply. I have a form that collects data from a user.\
    \ The form is UTF-8 encoded. The problem is that I need to convert the data entered\
    \ by the user from UTF-8 to ASCII. The form is UTF-8 encoded. When I submit the\
    \ form and view the data on the webpage that I have created, the data is returned\
    \ to me in UTF-8 format. I need to convert it to ASCII format. Is this possible?\
    \ Thanks\n<|/ c |>\n<| c |>\nIf the form is UTF-8 encoded, then you shouldn't\
    \ need to do anything to convert it.\n<|/ c |>\n<|", "    return preg_replace_callback('/./u',\
    \ function($match) {\n        return strtoupper($match[0]);\n    }, $string);\n\
    }\n", "    // Use string functions to flip the case\n    return strtoupper(str_replace($string,\
    \ '', $string));\n}\n", "  return preg_replace('/(^|(?<=\\s))(\\w)/e', \"strtoupper('$0')\"\
    , $string);\n}\n", "    $flipped = \"\";\n\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (preg_match(\"/[a-z]/i\", $string[$i])) {\n            $flipped\
    \ .= strtoupper($string[$i]);\n        } else {\n            $flipped .= $string[$i];\n\
    \        }\n    }\n\n    return $flipped;\n}", "    $flipped = '';\n    for ($i\
    \ = 0; $i < strlen($string); $i++) {\n        $flipped .= (ctype_upper($string[$i])\
    \ ? strtolower($string[$i]) : strtoupper($string[$i]));\n    }\n    return $flipped;\n\
    }", "    return strtr(strtolower($string), array_flip(\n        str_replace(\n\
    \            'abcdef',\n            'ABCDEF',\n            str_replace(\n    \
    \            'zyz',\n                'zyZ',\n                str_replace(\n  \
    \                  'ABC',\n                    'abc',\n                    $string\n\
    \                )\n            )\n        )\n    ));\n}\n", "    $new = '';\n\
    \    foreach (str_split($string) as $letter) {\n        if (ctype_upper($letter))\
    \ {\n            $new .= strtolower($letter);\n        } else {\n            $new\
    \ .= strtoupper($letter);\n        }\n    }\n    return $new;\n}\n</code>\n<|/\
    \ a tags=javascript,php |>\n<| c |>\nThe OP asks for JS and PHP (client-side).\n\
    <|/ c |>\n<| c |>\nAh, sorry, didn't see the PHP tag.  Updated answer.\n<|/ c\
    \ |>\n<| a dscore=2 |>\nHere is a jquery function that does the same.\n<code>",
  "    $string = preg_replace(\"/([a-z])/\", \"\\U$1\", $string);\n    $string = preg_replace(\"\
    /([A-Z])/\", \"\\L$1\", $string);\n    return $string;\n}\n", "    return preg_replace('/(.)([A-Z])/',\
    \ '$2$1', $string);\n}\n</code>\n<|/ a |>\n<| c |>\nThis is a cool solution, but\
    \ you forgot to include `/` at the end of the string\n<|/ c |>\n<| c |>\n: Thanks,\
    \ fixed. Thanks for the heads-up.\n<|/ c |>\n<| a tags=php,string,regex,replace\
    \ dscore=0 |>\nAnother approach:\n<code>\n$str=\"Hello\";\n$str2=strtolower($str);\n\
    $str3=strtoupper($str2);\n</code>\n<|/ a |>\n<| a dscore=0 |>\nI did a little\
    \ research about this and I found a solution that can be useful to someone!\n\
    <code>\n<?php\n$string=\"Hello\";\n$string=preg_replace(\"/./\",\"$&$0\",$string);\n\
    echo $string;\n</code>\n<|/ a tags=php,string,regex,replace |>\n<| c |>\nThis\
    \ is wrong; see [my answer](http://stackoverflow.com/a/17137531/171318).\n<|/\
    \ c |>\n<| c |>\nWhy the downvote? The code works and does exactly what was asked\n\
    <|/ c |>\n<| a |>\nHere is an answer based on this excellent answer by Joseph:\n\
    <code>\n$string = 'Hello';\n\n$string = preg_replace_callback('/./', function($matches)\
    \ {\n    return $matches[0] . strtoupper($matches[0]);\n}, $string);\n\necho $string;\n\
    </code>\nOutput is: hELLO\n<|/ a dscore=0 tags=php,string,regex,replace |>\n<|\
    \ a tags=php,string,regex,replace |>\nTo convert a camelcase to a snakecase you\
    \ can use this:\n<code>\n$string = \"Hello\";\n$result = preg_replace('/([A-Z])/',\
    \ '$0\\U$0', $string);\n</code>\nIt replaces every uppercase letter by a lowercase\
    \ and uppercase letter back again.\n<|/ a dscore=0 |>\n<| c |>\nI think this can\
    \ be simplified as `/([A-Z])/`\n<|/ c |>\n<| a tags=php,string,regex,replace |>\n\
    For converting camelCase to snakeCase I used:\n<code>\n$camelCase = 'helloWorld';\n\
    \n$snakeCase = preg_replace('/(?<=.)([A-Z])/', '\\U$0', $camelCase);\n</code>\n\
    <|/ a dscore=0 |>\n<| c ", "    return strtr($string, array_flip(str_split('ABCDEFGHIJKLMNOPQRSTUVWXYZ')));\n\
    }\n", "    return implode('', array_map('ucfirst', str_split($string)));\n}",
  "    return strtoupper(preg_replace('/./u', '',\n        $string));\n}", "    $result\
    \ = \"\";\n    $length = strlen($string);\n    for ($i = 0; $i < $length; $i++)\
    \ {\n        $char = $string[$i];\n        if ($char != strtolower($char)) {\n\
    \            $charUp = strtoupper($char);\n            $result .= $charUp;\n \
    \       } else {\n            $result .= $char;\n        }\n    }\n    return\
    \ $result;\n}\n", "    return strtoupper(strtr($string, MB_CASE_TITLE, ''));\n\
    }\n", "    return preg_replace('/([a-z])/', '$U\\1', $string);\n}\n$string = flip_case($string);"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
