name: HumanEval_122_add_elements
language: php
prompt: "<?php\n// Given a non-empty array of integers arr and an integer k, return\n\
  // the sum of the elements with at most two digits from the first k elements of\
  \ arr.\n// Example:\n// >>> add_elements(array(111, 21, 3, 4000, 5, 6, 7, 8, 9),\
  \ 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
  function add_elements($arr, $k) {\n"
tests: "function candidate(...$args) {\n    return add_elements(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(array(1, -2, -3, 41, 57, 76, 87, 88,\
  \ 99), 3) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111,\
  \ 121, 3, 4000, 5, 6), 2) !== 0) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(array(11, 21, 3, 90, 5, 6, 7, 8, 9), 4) !== 125) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4)\
  \ !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1),\
  \ 1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $sum = 0;\n    foreach ($arr as $element) {\n        if ($element\
    \ < 10) {\n            $sum += $element;\n        } else {\n            $sum +=\
    \ $element - 10;\n            $sum += $k;\n        }\n    }\n    return $sum;\n\
    }\n", "    $sum = 0;\n    for ($i = 0; $i < $k; $i++) {\n        $sum += $arr[$i];\n\
    \    }\n    for ($i = $k; $i < count($arr); $i++) {\n        $sum += $arr[$i]\
    \ - 10;\n    }\n    return $sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\nHere's a solution I wrote in Java that solves the problem in O(N) time,\
    \ where N is the number of elements in the array.\n<code>\nimport java.util.Arrays;\n\
    import java.util.Scanner;\n\nclass SumTwoDigits {\n\n    public static void main(String[]\
    \ args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"\
    Enter the size of your array:\");\n        int size = sc.nextInt();\n        int\
    \ arr[] = new int[size];\n        System.out.println(\"Enter the elements of your\
    \ array\");\n        for (int i = 0; i < size; i++) {\n            arr[i] = sc.nextInt();\n\
    \        }\n        System.out.println(sumTwoDigits(arr));\n        sc.close();\n\
    \    }\n\n    public static int sumTwoDigits(int[] arr) {\n        int sum = 0;\n\
    \        int size = arr.length;\n        for (int i = 0; i < size; i++) {\n  \
    \          sum += arr[i];\n        }\n        if (size == 1) {\n            sum\
    \ += arr[0];\n        } else {\n            int lastTwoDigits = sum / 100 * 100\
    \ + sum % 100;\n            sum += lastTwoDigits;\n        }\n        return sum;\n\
    \    }\n}\n</code>\n<|/ a tags=algorithm,php,dynamic-programming |>\n<| a tags=algorithm,php,dynamic-programming\
    \ |>\nA solution in PHP:\n<code>", "    $sum = 0;\n    $i = 0;\n    for ($i =\
    \ 0; $i < $k; $i++) {\n        $sum += $arr[$i];\n    }\n    return $sum;\n}\n",
  "    $sum = 0;\n    $carry = 0;\n    foreach($arr as $el){\n        if($el%10 ==\
    \ 1 && $el != 0){\n            $sum += $el + $carry;\n            $carry = 0;\n\
    \        }else{\n            $sum += $el + $carry;\n            $carry = 0;\n\
    \        }\n    }\n    if($sum%10 == 1 && $sum != 0){\n        $sum += $carry\
    \ + 1;\n        $carry = 1;\n    }\n    if($carry != 0){\n        $sum += $carry;\n\
    \    }\n    return $sum;\n}", "    sort($arr);\n    $count = 0;\n    for ($i =\
    \ 0; $i < $k; ++$i) {\n        $count += $arr[$i];\n    }\n    return $count;\n\
    }", "  $sum = 0;\n  $carry = 0;\n  for ($i = 0; $i < $k; $i++) {\n    // If carry\
    \ is 1 and first digit is greater than 9,\n    // then subtract 9\n    if ($carry\
    \ === 1 && $arr[$i] > 9) {\n      $arr[$i] = $arr[$i] - 9;\n    }\n    $sum +=\
    \ $arr[$i] * $carry;\n    $carry = ($arr[$i] > 9) ? 1 : 0;\n  }\n  return $sum;\n\
    }", "    $arrsum = array_sum($arr);\n    $lastpos = $k - 1;\n    $newsum = 0;\n\
    \    $newarrsum = 0;\n    foreach ($arr as $key => $value) {\n        $lastpos\
    \ = $key - 1;\n        $newsum += $value;\n        if ($newsum > $arrsum) {\n\
    \            $newarrsum = $newsum;\n            $newsum = $arrsum;\n        }\
    \ else if ($key === $lastpos) {\n            $newarrsum += $value;\n        }\n\
    \    }\n    return $newarrsum;\n}\n", "    $result = 0;\n    $first = $k - 1;\n\
    \    $second = $k;\n\n    foreach ($arr as $a) {\n        if ($a > 10 && $a <\
    \ 100) {\n            $result -= $a - 10;\n            $result += $a;\n      \
    \  } else if ($a > 100) {\n            $result -= $a - 100;\n            $result\
    \ += $a;\n        } else if ($a == 0) {\n            $result += 0;\n        }\
    \ else {\n            $result += $a;\n        }\n\n        if ($second > $first)\
    \ {\n            $first -= 1;\n            $second -= 1;\n        } else if ($second\
    \ == $first) {\n            $second += 1;\n        }\n    }\n\n    return $result;\n\
    }\n</code>\n<|/ a tags=php,algorithm,dynamic-programming |>\n<| a dscore=2 |>\n\
    A recursive solution to this problem. Takes a maximum of 5 arguments. \n<code>",
  "    $sum = 0;\n    for ($i = 0; $i < $k; $i++)\n        $sum += $arr[$i];\n   \
    \ return $sum;\n}\n", "    // base case\n    if ($k == 1) return $arr[0] + $arr[1];\n\
    \n    // create an array with the first $k elements\n    $arr_first = $arr;\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $arr_first[$i] = $arr_first[$i] +\
    \ $arr_first[$i+1];\n    }\n\n    // iterate through the rest of $arr and add\
    \ elements to the first $k elements\n    for ($i = $k+1; $i < count($arr); $i++)\
    \ {\n        $arr_first[$i] = $arr_first[$i] + $arr[$i];\n    }\n\n    // return\
    \ the sum of the first $k elements\n    return $arr_first[0];\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThe algorithm is wrong in that it will return the sum of the\
    \ first k elements, not the sum of their sum, that would be `add_elements(array(11,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9), 4)`.\n<|/ c |>\n<| c |>\nThe question specifically\
    \ states that you must find the sum of the first k elements. Not sure why you\
    \ think it will return the sum of the first k elements. I think you will find\
    \ it returns 24, but maybe I'm missing something.\n<|/ c |>\n<| c |>\nThe OP's\
    \ example uses `add_elements(array(11, 21, 3, 4000, 5, 6, 7, 8, 9), 4)`, which\
    \ sums to 24. Your solution will produce a different sum.\n<|/ c |>\n<| c |>\n\
    You're right, that makes no sense. I guess I misread the question. I thought he\
    \ wanted the sum of the elements with at most 2 digits from the first k elements.\
    \ I'll delete my answer if he doesn't post an answer or fix it later.\n<|/ c |>\n\
    <| a tags=arrays,php |>\nThe solution involves recursion, which is an elegant\
    \ solution for this problem. \n<code>", "    $res = [];\n    foreach ($arr as\
    \ $i => $value) {\n        // Skip the first k elements, which will be the only\
    \ ones we want\n        if ($i > $k) {\n            break;\n        }\n      \
    \  $res[$i] = $value;\n    }\n    // Add last element\n    $res[$k] = $arr[$k];\n\
    \    return array_sum($res);\n}\n", "    $sum = 0;\n    $num_elements = count($arr);\n\
    \    $sum = 0;\n    $current_index = 0;\n    $length_of_elements = count($arr);\n\
    \    while ($current_index < $length_of_elements) {\n        if ($current_index\
    \ >= $k) {\n            $sum = $sum + $arr[$current_index];\n            $current_index++;\n\
    \        }\n    }\n    return $sum;\n}\n", "    sort($arr);\n    $sum = 0;\n \
    \   $num_elements = count($arr);\n    for($i = 0; $i < $num_elements; $i++) {\n\
    \        if($i >= $k && $i < ($num_elements - $k)) {\n            $sum += $arr[$i];\n\
    \        }\n    }\n    return $sum;\n}\n", "    $result = 0;\n    for($i = 1;\
    \ $i <= $k; $i++) {\n        if($arr[$i] < 10) {\n            $result += $arr[$i];\n\
    \        }\n        else {\n            $result += (11 - $arr[$i]) * pow(2, $i);\n\
    \        }\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=algorithm,php\
    \ |>\nWe can get the desired result by dividing every number by 10 and multiplying\
    \ it by 10 to get the number without its first digit.\n<code>", "    for($i =\
    \ 0; $i < count($arr); $i++) {\n        if(count($arr) - $i < $k) break;\n   \
    \     if($arr[$i] >= pow(10, 2)) {\n            $sum = $arr[$i] + $arr[$i+1] +\
    \ $arr[$i+2];\n            $arr[$i] = $sum % 10;\n            $arr[$i+1] = $sum\
    \ / 10;\n        }\n    }\n    return $arr[0];\n}\n</code>\n<|/ a tags=arrays,dynamic-programming,php\
    \ |>\n<| a |>\nThe accepted solution by user3611703 works well but if you have\
    \ to add more than 100 elements to array, it's better to use the following solution\
    \ which is little bit faster.\n<code>\n$arr = [111,21,3,4000,5,6,7,8,9];\n$result\
    \ = array_reduce($arr, function($c, $i){\n    if ($i < 10) return $c + $i;\n \
    \   if ($i < 100) return $c * $i;\n    return $c;\n}, 0);\n</code>\n<|/ a tags=arrays,dynamic-programming,php\
    \ dscore=2 |>\n<| a tags=arrays,dynamic-programming,php |>\n<code>", "    $result\
    \ = 0;\n    $len = count($arr);\n    for ($i = 0; $i < $len; ++$i) {\n       \
    \ $result = max($result, $arr[$i] + $arr[($i + 1) % $len]);\n    }\n    for ($i\
    \ = 1; $i < $k; ++$i) {\n        $result = max($result, $arr[$i] + $arr[($i +\
    \ $len - 1) % $len]);\n    }\n    return $result;\n}", "    sort($arr);\n    $arr1\
    \ = array_slice($arr, 0, $k);\n    $arr2 = array_slice($arr, $k, count($arr));\n\
    \    return $arr1[0] + $arr2[0];\n}", "    $result = array();\n    foreach ($arr\
    \ as $k => $v) {\n        if ($v % 10 === 0 && ($k >= $k - 2)) {\n           \
    \ $result[] = $v;\n        }\n    }\n    return array_sum($result);\n}\n</code>\n\
    <|/ a tags=php,sum,arrays,algorithm |>\n<| c |>\nPlease explain how this code\
    \ is different from the other answers and why it is correct. Also, how do you\
    \ know this is faster than the other answers?\n<|/ c |>\n<| c |>\nI didn't understand\
    \ why it is faster. Can you explain it to me? Thanks\n<|/ c |>\n<| c |>\nThe other\
    \ answer also has the constraint of no more than 2 digits and is more compact\
    \ as far as I can tell. Is this correct?\n<|/ c |>\n<| c |>\nHis code isn't different\
    \ from his answer - it just uses PHP instead of Perl - I thought that would make\
    \ it more clear what was going on. But the actual code is very similar - the only\
    \ difference is in the comments explaining the constraints\n<|/ c |>\n<| c |>\n\
    Thanks. I added a little explanation to the answer.\n<|/ c |>\n<| a tags=php,sum,arrays,algorithm\
    \ |>\n<code>\n<?php\n", "    sort($arr);\n    $arr1 = array_slice($arr, 0, $k);\n\
    \    $arr2 = array_slice($arr, $k);\n    return array_sum($arr1) + array_sum($arr2);\n\
    }\n\n$first_arr = array(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n$second_arr = array(4,\
    \ 6, 2);\n$ans = add_elements($first_arr, $second_arr);\nprint_r($ans);\n</code>\n\
    <|/ a tags=php |>\n<| c |>\nThis isn't what the OP asked for, since it returns\
    \ different results than `array_sum(array_slice($first_arr,0,$second_arr));` --\
    \ The result of `array_sum(array_slice($first_arr,0,$second_arr))` is 24, but\
    \ this function returns 17. It also doesn't require that the elements of `$arr1`\
    \ and `$arr2` have the same length, which is what the OP didn't mention.\n<|/\
    \ c |>\n<| c |>\n: I just gave it a try, it returns 17 for both. Have you tried\
    \ it yourself?\n<|/ c |>\n<| c |>\nI just tried it on http://phpfiddle.org/ and\
    \ got 17 for both.\n<|/ c |>\n<| c |>\n: But that doesn't make any sense. `array_sum`\
    \ works fine on arrays of different lengths.\n<|/ c |>\n<| c |>\nThe OP's problem\
    \ is that the OP is comparing two arrays with different lengths. He stated that\
    \ he got an array length of 150 and an array length of 2. If he would have mentioned\
    \ that the arrays were different lengths, he would've been right away. http://codepad.org/q6qYkU7O\n\
    <|/ c |>\n<| a tags=php dscore=0 |>\nHere's a solution that makes use of PHP's\
    \ array_splice() function. \nThe function takes two arrays, $arr1 and $arr2, and\
    \ uses array_splice to extract the sub-arrays of the same length from each array\
    \ and adds them together to produce the desired result.\n<code>", "    $sum =\
    \ 0;\n    for($i = 0; $i < $k; $i++){\n        if($arr[$i] > 10){\n          \
    \  $sum += $arr[$i] - 10;\n            $arr[$i] -= 10;\n        }\n        else{\n\
    \            $sum += $arr[$i];\n        }\n    }\n    return $sum;\n}\n$sum =\
    \ 0;\nfor($i = 0; $i < count($arr); $i++){\n    $sum += $arr[$i];\n}\n$total =\
    \ add_elements($arr, $k);", "    $sum = 0;\n    for($i = 0; $i < $k; $i++) {\n\
    \        $sum += $arr[$i];\n    }\n    return $sum;\n}\n</code>\n<|/ a tags=arrays,math,algorithm,php\
    \ |>\n<| a |>\n<code>\n<?php\n$arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\n$sum=0;\n\
    for ($i=0;$i<4;$i++) {\n    $sum+=$arr[$i];\n}\necho $sum;", "    if (count($arr)\
    \ < 2) {\n        return 0;\n    }\n\n    $result = $arr[0] + $arr[1];\n    for\
    \ ($i = 2; $i < $k; ++$i) {\n        $result += $arr[$i];\n    }\n    return $result;\n\
    }\n", "    // Add all the elements of the array\n    $sum = 0;\n    foreach($arr\
    \ as $val) {\n        $sum += $val;\n    }\n\n    // If the length of the array\
    \ is less than k\n    // return 0 because the sum cannot be computed because there\
    \ are no elements with two digits\n    if (count($arr) < $k) {\n        return\
    \ 0;\n    }\n\n    // Divide the sum into two parts - the left part and the right\
    \ part\n    // The left part contains the first k elements, and the right part\
    \ contains remaining elements\n    // For example if the sum is 24, the left part\
    \ is {1, 2, 3}, and the right part is {4, 5, 6, 7, 8, 9}\n    $leftPart = array_slice($arr,\
    \ 0, $k);\n    $rightPart = array_slice($arr, $k);\n\n    // Iterate through all\
    \ the left part\n    foreach($leftPart as $left) {\n        // Iterate through\
    \ all the right part\n        foreach($rightPart as $right) {\n            //\
    \ If the sum of left and right part is greater than the target sum\n         \
    \   if ($left + $right > $sum) {\n                // Return this sum\n       \
    \         return $sum;\n            }\n        }\n    }\n    // Return 0 if the\
    \ sum is not found\n    return 0;\n}\n", "    $sum = 0;\n    $i = 1;\n    while\
    \ (count($arr)) {\n        $sum+= $arr[$i];\n        $i += $k;\n        array_shift($arr);\n\
    \    }\n    return $sum;\n}", "    // Write your code here\n    $sum = 0;\n  \
    \  foreach($arr as $val){\n        if ($val < 10) {\n            $sum = $sum +\
    \ $val;\n        }\n        elseif ($val > 99) {\n            $sum = $sum + $val/10;\n\
    \        }\n    }\n    return $sum;\n}\n", "    $count = 0;\n    for($i=0; $i<=count($arr)-$k;\
    \ $i++){\n        if($arr[$i] < 10){\n            $count++;\n        }\n     \
    \   else if($arr[$i] < 100){\n            $count += $arr[$i];\n        }\n   \
    \     else{\n            $count += $arr[$i] - 100;\n        }\n    }\n    return\
    \ $count;\n}", "    \n    // initialize sum and i\n    $sum = 0;\n    $i = 0;\n\
    \n    // loop through first k elements of array\n    for($j=0; $j<$k; $j++) {\n\
    \        $sum += $arr[$j];\n    }\n\n    // loop through remaining elements of\
    \ array\n    for($j=$k; $j<count($arr); $j++) {\n        $sum += $arr[$j];\n \
    \   }\n    return $sum;\n}\nadd_elements(array(111, 21, 3, 4000, 5, 6, 7, 8, 9),\
    \ 4);", "    // Add all elements\n    $sum = 0;\n    foreach ($arr as $val) {\n\
    \        $sum += $val;\n    }\n\n    // Keep only the first k\n    $sum = array_slice($sum,\
    \ 0, $k);\n\n    return $sum;\n}\n", "    $sum = 0;\n    for ($i = 0; $i < $k;\
    \ $i++) {\n        if ($arr[$i] > 10) {\n            $sum += $arr[$i] / 10;\n\
    \            $arr[$i] = $arr[$i] % 10;\n        }\n    }\n    $sum += $arr[$i];\n\
    \    return $sum;\n}", "    // insert code here\n}", "    $sum = 0;\n    $len\
    \ = count($arr);\n    if ($len < $k) {\n        return 0;\n    }\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        $sum += $arr[$i];\n    }\n    for ($i = $k; $i\
    \ < $len; $i++) {\n        $sum += $arr[$i];\n    }\n    return $sum;\n}\n", " \
    \   foreach ($arr as $key => $element) {\n        if ($key > $k) {\n         \
    \   break;\n        }\n        $sum = $element;\n        for ($i = $key + 1; $i\
    \ < $k; $i++) {\n            $sum += $arr[$i];\n        }\n        $arr[$key]\
    \ = $sum;\n    }\n    return array_sum($arr);\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=arrays,php |>\nHere is another solution:\n<code>", "    $max_elements\
    \ = 2 * $k;\n    return array_reduce($arr, function ($result, $value) {\n    \
    \    if ($value > 9) {\n            return $result;\n        }\n        return\
    \ $result + ($value % 10);\n    }, $max_elements);\n}\n</code>\n<|/ a tags=php\
    \ |>\n<| a dscore=1 |>\nA function with O(n) complexity and O(1) space complexity\
    \ would be the following one. \n<code>", "    $sum = 0;\n    foreach ($arr as\
    \ $i => $v) {\n        if ($i > $k && $sum < $v) {\n            $sum = $v;\n \
    \       }\n    }\n    return $sum;\n}\n", "    $result = 0;\n    foreach ($arr\
    \ as $a) {\n        $result += (10 - strlen((string)$a)) * ($a % 10);\n    }\n\
    \    return $result + $arr[0] + $arr[1];\n}\n", "    $sum = 0;\n    for ($i =\
    \ 0; $i < $k; $i++){\n        $sum += $arr[$i];\n    }\n    return $sum;\n}",
  "    $sum = 0;\n    foreach ($arr as $key => $value) {\n        if ($key <= $k)\
    \ {\n            $sum += $value;\n        } else {\n            $sum -= $value;\n\
    \        }\n    }\n    return $sum;\n}\n</code>\nIt was very clear with the explanation\
    \ and easy to implement the logic for it.\n<|/ a |>\n<| a dscore=3 tags=php,algorithm,sorting,arrays\
    \ |>\nUsing Sort with PHP Functions:\n<code>", "    $res = 0;\n    for ($i = 0;\
    \ $i < $k; $i++) {\n        $res += $arr[$i];\n    }\n    return $res;\n}\n",
  "    // write your code here\n    if ($k > count($arr)) {\n        return 0;\n \
    \   }\n    $i = 0;\n    $sum = 0;\n    foreach ($arr as $value) {\n        $sum\
    \ += $value;\n        $i++;\n        if ($i >= $k) {\n            break;\n   \
    \     }\n    }\n    return $sum;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\n\
    Thanks for providing this solution and your efforts.\n<|/ c |>\n<| c |>\nI haven't\
    \ yet had the chance to test this but this seems to work in my case!\n<|/ c |>\n\
    <| c |>\n: You welcome :)\n<|/ c |>\n<| a tags=php,arrays |>\nYou can achieve\
    \ it this way (it's faster and more elegant):\n<code>\n$arr = array(111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9);\n$sum = $arr[0] + $arr[1] + $arr[2] + $arr[3] + $arr[4]\
    \ + $arr[5];\n$sum = array_sum(array_slice($arr, 2));\necho $sum;\n</code>\nIt\
    \ does exactly what you want. No loops, no foreach.\n<|/ a dscore=1 |>\n<| a tags=php,arrays\
    \ |>\nThis should work:\n<code>\n$arr = array(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n\
    $new_arr = array_slice($arr,0,4);\narray_sum($new_arr);\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nNot bad, but this only works if `array_slice()` returns an array\
    \ of at least 4 elements. Otherwise, the return value will be `NULL`.\n<|/ c |>\n\
    <| c |>\nYeah! Didn't notice that. Edited :)\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    $arr = array(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n$sum = 0;\nfor ($i = 0; $i < count($arr);\
    \ $i++) {\n    $sum += $arr[$i];\n}\necho $sum;\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nAnd `count($arr)` is O(n), while `array_sum()` is O(1)\n<|/ c |>\n\
    <| c |>\n: It is not O(n) for array sizes greater than 100. In worst case it would\
    \ be O(n^2).\n<|/ c |>\n<| c |>\nBut it's O(n) for any array size, because it's\
    \ O(n) for each of the iterations, making it O(n^2) in total", "    $res = 0;\n\
    \    $sum = $k + $k + 1;\n    $k--;\n    for ($i = $sum; $i < count($arr); $i++)\
    \ {\n        $res += $arr[$i];\n        if ($res > $k) {\n            break;\n\
    \        }\n    }\n    return $res;\n}\n", "    \n    // Create an array with\
    \ two empty values.\n    $arr = array_fill(0, 2, 0);\n    // Append the elements\
    \ one by one.\n    foreach ($arr as $key => $value) {\n        $arr[$key] = $value;\n\
    \    }\n    \n    $max = 0;\n    \n    // Loop through all the elements to find\
    \ the sum.\n    foreach ($arr as $key => $value) {\n        if ($key <= $k) {\n\
    \            $sum += $value;\n        }\n        if ($key > $k) {\n          \
    \  $sum += $value - $arr[$key - 1];\n        }\n    }\n    \n    return $sum;\n\
    }", "    sort($arr, SORT_NUMERIC);\n    return array_sum(array_slice($arr, 0,\
    \ $k));\n}\n", "  $s = $arr[0] + $arr[1];\n  for ($i = 3; $i <= $k; $i++) {\n\
    \    $s += $arr[$i];\n  }\n  return $s;\n}\n</code>\n<|/ a tags=php,algorithm,python,arrays\
    \ dscore=2 |>\n<| c |>\nThis works well but is slower than the python solutions\
    \ I tried. This one in particular is slower than python. Anyone have insight on\
    \ why this is and how to improve on it?\n<|/ c |>\n<| c |>\n: This is not O(n),\
    \ it's O(n log n).  A Python solution would have a time complexity of O(n^2) due\
    \ to Python creating a bunch of unnecessary intermediate lists.  In contrast,\
    \ this solution is O(n log n).\n<|/ c |>\n<| c |>\nI see now that this is true\
    \ and explains why it is the best solution so far. Do you have any idea how to\
    \ improve this algorithm, or is this the best solution?\n<|/ c |>\n<| a dscore=1\
    \ |>\nI actually found a solution that is way faster. It requires no loops and\
    \ is O(n log n). I'm posting it here in case anyone else finds it helpful. \n\
    <code>", "    $a = array_slice($arr, 0, $k);\n    $b = array_slice($arr, $k);\n\
    \    sort($a);\n    sort($b);\n    return array_sum($a) + array_sum($b);\n}\n",
  "    // Add first k elements from the array\n    $arr = array_slice($arr, 0, $k);\n\
    \    // Calculate the sum of all elements with at most two digits from the first\
    \ k elements\n    $sum = 0;\n    foreach ($arr as $number) {\n        // Add the\
    \ number of digits from the first k elements to the sum\n        $sum += pow(10,\
    \ $k - strlen($number % 10));\n    }\n    return $sum;\n}", "    $sum = 0;\n \
    \   $k = 0;\n    foreach($arr as $val) {\n        $sum += $val;\n        if ($sum\
    \ >= 10) {\n            $sum -= 10;\n        }\n        if ($k > 0) {\n      \
    \      $sum += $sum - $sum%10;\n            $k--;\n        }\n    }\n    return\
    \ $sum;\n}", "    $sum = 0;\n    for($i = 0; $i < $k; $i++) {\n        $sum+=abs($arr[$i]);\n\
    \    }\n    return $sum;\n}\n", "\t$sum = array_sum(array_slice($arr, 0, $k));\n\
    \t$k2 = array_sum(array_slice($arr, $k));\n\treturn $sum + $k2;\n}\n", "    sort($arr);\n\
    \    $result = 0;\n    for($i = 0; $i < $k; $i++){\n        $result += $arr[$i];\n\
    \    }\n    return $result;\n}", "    $arr_size = count($arr);\n    $sum = 0;\n\
    \    $digits = array_slice($arr, 0, $k);\n    for ($i = 0; $i < $arr_size; ++$i)\
    \ {\n        $digit = $arr[$i];\n        $sum += $digit * pow(10, $k - $i);\n\
    \    }\n    return $sum;\n}\n", "    // This is our sum (the return value).\n\
    \    $sum = 0;\n    \n    // This is our current sum.\n    $current = $sum;\n\
    \    \n    // This is the current number.\n    $current = $arr[$k];\n    \n  \
    \  // This loop will keep going, while $current is greater than or equal to $sum.\n\
    \    // So, if $current is greater than $sum, then we add the $current to our\
    \ sum,\n    // and then reset $sum to the value of $current.\n    while (true)\
    \ {\n        // If $current is greater than or equal to $sum, we add $current\
    \ to $sum\n        // and reset the value of $sum to $current.\n        $sum +=\
    \ $current;\n        \n        // If we've reached the end of the array, and $sum\
    \ is greater than or equal\n        // to $k, then we exit the while loop and\
    \ return $sum.\n        if (($k >= count($arr)) || ($sum >= $k)) {\n         \
    \   break;\n        }\n        \n        // If $current is less than or equal\
    \ to $sum, we add one to our current sum\n        // and reset $current to its\
    \ next value.\n        $current++;\n    }\n    \n    // Since the loop is done,\
    \ we  know that $sum has at least two digits.\n    // So, we return $sum.\n  \
    \  return $sum;\n}\n", "    // base case: array or k too small\n    if ($k > count($arr)\
    \ || $k < 1) {\n        return 0;\n    }\n\n    // sort array in ascending order\n\
    \    $arr = sort($arr);\n\n    // k is in bounds of array\n    if ($k <= count($arr))\
    \ {\n        // we know the first k-1 numbers in array are greater than or equal\
    \ to k\n        // so the sum of first k numbers will be k-1\n        // k-1 digits\
    \ plus first k digits equals k-1+k\n        // we also know the first k-1 numbers\
    \ in array are less than or equal to k\n        // so the first k-1 numbers plus\
    \ the sum of numbers in array[k-1:] equals k-1+k-1\n        return $arr[0] + add_elements($arr,\
    \ $k - 1);\n    }\n\n    // k too large; we need to find the two numbers whose\
    \ sum is greater than k\n    $smaller_sum = $arr[0];\n    $greater_sum = $arr[0];\n\
    \    foreach ($arr as $number) {\n        // sum of k+1 digits is greater than\
    \ k+1 digits\n        if ($number > $greater_sum) {\n            $greater_sum\
    \ = $number;\n        }\n        // sum of k+1 digits is less than k+1 digits\n\
    \        if ($number < $smaller_sum) {\n            $smaller_sum = $number;\n\
    \        }\n    }\n\n    // we know that the greater sum has at least one digit\
    \ greater than k\n    return $greater_sum + add_elements($arr, $k - 1);\n}\n\n\
    $numbers = array(\n    111, 21, 3, 4000, 5, 6, 7, 8, 9\n);\n\necho \"sum of elements\
    \ with the two first digits less than or equal to $k is $add_elements($numbers,\
    \ 4)\";", "\tsort($arr);\n\treturn array_sum(array_slice($arr, 0, $k));\n}\n",
  "    sort($arr);\n    $sum = 0;\n    for($i=0; $i<$k; $i++) {\n        $sum += $arr[$i];\n\
    \    }\n    return $sum;\n}\n</code>\n<|/ a tags=algorithm |>\n<| c |>\nThis solution\
    \ works, but its time complexity is O(n log n) instead of O(n).\n<|/ c |>\n<|\
    \ a dscore=2 |>\nThis is my solution:\n<code>", "    sort($arr);\n    $sum = 0;\n\
    \    $index = 0;\n    while ($index < $k) {\n        $sum = $sum + $arr[$index];\n\
    \        $index++;\n    }\n    return $sum;\n}\n</code>\n<|/ a tags=php,laravel-5,laravel\
    \ |>\n<| a tags=php,laravel-5,laravel dscore=0 |>\nYou can use Laravel collections\
    \ to get the sum like this.\n<code>\n$collection = collect($arr);\n$sum = $collection->sum();\n\
    </code>\nThis will return the sum of all the elements in the collection. If you\
    \ want to get the sum for only the first 5 elements then use take() method.\n\
    <code>\n$collection = collect($arr);\n$sum = $collection->take(5)->sum();\n</code>\n\
    <|/ a |>\n<| c |>\nNot quite. This will get the sum of all the elements in the\
    \ collection. If you want to get the sum for only the first 5 elements then use\
    \ take() method.\n<|/ c |>\n<| c |>\nYes, it returns the sum for all the elements.\
    \ And `take()` method can be used to get first 5 elements.\n<|/ c |>\n<| a tags=php,laravel-5,laravel\
    \ |>\nFirst of all, sort the array. Then, create a recursive function which returns\
    \ sum of first k elements. Here is the code.\n<code>\n<?php", "    $sum = 0;\n\
    \    foreach ($arr as $element) {\n        $sum = $sum + $element % 10 + $element/10;\n\
    \    }\n    if ($sum > 999 && $sum < 10000) {\n        foreach ($arr as $key =>\
    \ $element) {\n            if ($key < $k) {\n                if ($element > 0\
    \ && $element < 10) {\n                    $sum += $element;\n               \
    \ }\n            }\n        }\n    }\n    return $sum;\n}\n</code>\n<|/ a tags=algorithm,php,arrays,sum\
    \ |>\n<| c |>\nIt looks like you've missed the question entirely.\n<|/ c |>\n\
    <| c |>\nI apologize for my unclear question. In the question, sum is defined\
    \ as the sum of digits from the first k elements in the array. So I meant that\
    \ the summation should start after the first k elements.\n<|/ c |>\n<| c |>\n\
    I'm really sorry for the misleading. I edited the question again.\n<|/ c |>\n\
    <| c |>\nPlease review my new answer. I think it is closer to what you want to\
    \ achieve. Let me know if it works.\n<|/ c |>\n<| c |>\nWow! Thank you very much!\
    \ I didn't know that this is possible. Thank you for your help.\n<|/ c |>\n<|\
    \ a tags=algorithm,php,arrays,sum dscore=1 |>\nI finally made it work. Maybe not\
    \ the fastest solution but it works.\n<code>", "    sort($arr);\n\n    // initialize\
    \ total to 0\n    $total = 0;\n\n    // add elements to total while arr has more\
    \ than k elements\n    while (count($arr) > $k) {\n        // get next element\n\
    \        $next = array_shift($arr);\n\n        // add current element to total\n\
    \        $total += $next;\n    }\n\n    return $total;\n}\n", "    $total = 0;\n\
    \    $n = count($arr);\n    if ($n <= 1) return 0;\n    $arr = array_slice($arr,\
    \ 0, $k);\n    foreach ($arr as $a) {\n        $total += $a;\n    }\n    return\
    \ $total;\n}\n", "    sort($arr);\n    $sum = 0;\n    $temp = 0;\n    foreach\
    \ ($arr as $key => $val) {\n        if ($key >= $k) {\n            $sum += $val;\n\
    \        } else {\n            $sum += $temp;\n            $temp = $val;\n   \
    \     }\n    }\n    return $sum;\n}\n</code>\nThis algorithm is also O(n) time\
    \ since it only loops through the array once.\n<|/ a dscore=0 |>\n<| c |>\n`O(nlogn)`\
    \ is not the same as `O(n)`. The latter case is impossible since `sort()` sorts\
    \ the array in place and that makes it `O(nlogn)`.\n<|/ c |>\n<| c |>\n: You're\
    \ right. I mistakenly thought that `sort()` was a O(n) operation. I'll correct\
    \ my answer. Thanks!\n<|/ c |>\n<| c |>\nI believe that the `sort()` function\
    \ is an O(n logn) operation (since it sorts the array and returns a new array).\
    \ However, since it returns nothing it's not a O(n) operation, since it makes\
    \ the algorithm O(n) time complexity, just like yours.\n<|/ c |>\n<| c |>\n: You're\
    \ right. I mistakenly thought that `sort()` was a O(n) operation. I'll correct\
    \ my answer. Thanks!\n<|/ c |>\n<| a dscore=0 |>\nI believe that this is a duplicate\
    \ question, but I'll take a stab at it anyway.\nMy first thoughts are that the\
    \ simplest solution would be to sort the array, then simply sum the elements from\
    \ index 1 up to the index given.\n<code>", "    $sum = 0;\n    for ($i = 0; $i\
    \ < $k; ++$i) {\n        $sum += $arr[$i];\n    }\n\n    return $sum;\n}\n", " \
    \   $sum = 0;\n    $length = count($arr);\n    for($i = 0; $i < $length; $i++){\n\
    \        $sum += $arr[$i];\n        if($i >= $k){\n            $sum += $arr[$i];\n\
    \        }\n    }\n    return $sum;\n}\n", "    $new_arr = array();\n    $sum\
    \ = 0;\n    \n    if (count($arr) >= $k && $k >= 1){\n        $start_pos = 0;\n\
    \        while($start_pos < $k){\n            $sum+= $arr[$start_pos];\n     \
    \       $new_arr[] = $sum;\n            $start_pos++;\n        }\n    }\n    \n\
    \    return $new_arr;\n}", "    $result = 0;\n    foreach ($arr as $value) {\n\
    \        if ($value > 9) {\n            $result = $result + $value;\n        }\
    \ else {\n            $result = $result + ($value * 10 + $value) - ($value * 10\
    \ + $value);\n        }\n        if ($result > 9) {\n            $result -= 10;\n\
    \        }\n    }\n    return $result;\n}\n", "    $sum = 0;\n    $len = count($arr);\n\
    \    $start = 0;\n    $end = min($k, $len);\n    foreach ($arr as $key => $val)\
    \ {\n        if ($key > $start) {\n            $sum += $val - $arr[$key-1];\n\
    \        }\n        if ($key < $end) {\n            $sum += $arr[$key] - $arr[$key+1];\n\
    \        }\n        if ($key == $end) {\n            $sum += $val;\n        }\n\
    \    }\n    return $sum;\n}\n\n/**\n * https://leetcode.com/problems/two-sum/\n\
    \ * Given an array of integers arr, return indices of the two numbers such that\
    \ there exist a pair of elements e1 and e2 such that\n * e1 + e2 = target and\
    \ e1 - e2 = -target, where target is the sum of all elements of arr. \n * You\
    \ may assume that each input would have exactly one solution, and you may not\
    \ use the same element twice.\n */", "    $sum = 0;\n    foreach ($arr as $n)\
    \ {\n        $sum += $n;\n        $max = $k - $sum;\n        $sum += $n % 10;\n\
    \        $sum += ($sum + $max) % 10;\n    }\n    return $sum;\n}\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| c |>\nIt is not correct. Consider the array `[111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9]`, and the case when `k` is 5. You get `111 + 3`\
    \ = `333`, but you wanted `333 + 4000 = 5000`.\n<|/ c |>\n<| c |>\nThis answer\
    \ has a bug. Consider this array: `[111, 21, 3, 4000, 5, 6, 7, 8, 9]` and case\
    \ when `k` is 5, we get `111 + 3` = `333`, but you wanted `333 + 4000 = 5000`.\n\
    <|/ c |>\n<| a |>\nHere's a solution without using foreach or any additional variable\
    \ (just using a function and some maths). Just for fun ;)\n<code>\n<?php\n", " \
    \   // Your code here\n}", "    $sum = 0;\n    for ($i = 0; $i < $k; $i++) {\n\
    \        $sum += $arr[$i];\n    }\n    for ($i = 0; $i < $k; $i++) {\n       \
    \ if ($arr[$i] > 9) {\n            $sum += $arr[$i] - 10;\n            $arr[$i]\
    \ = 9;\n        } else {\n            $arr[$i] = $arr[$i] - 10;\n        }\n \
    \   }\n    return $sum;\n}\n", "    $answer = 0;\n    $count = 0;\n    // Count\
    \ the number of digits in each element of the array.\n    // Since each element\
    \ contains at least one digit, we subtract 1.\n    foreach ($arr as $i => $value)\
    \ {\n        $count = $count - 1;\n    }\n    // Add the elements with two digits\
    \ from the first k elements.\n    for ($i = 0; $i < $k; ++$i) {\n        $answer\
    \ += $arr[$i];\n    }\n    // Add the remaining elements.\n    for ($i = 1; $i\
    \ < $count; ++$i) {\n        $answer += $arr[$i];\n    }\n    return $answer;\n\
    }\n</code>\n<|/ a tags=dynamic-programming,algorithm,arrays,php |>\n<| c |>\n\
    this solution returns incorrect result for array like [111, 21, 3, 400, 5, 6,\
    \ 7, 8, 9] and k=5\n<|/ c |>\n<| c |>\nIt works for me. The problem is with the\
    \ test case. I will add some notes to the answer.\n<|/ c |>\n<| c |>\nYes, the\
    \ solution is correct for given test case, my question is about the approach of\
    \ solving this problem which is not right for this test case.\n<|/ c |>\n<| a\
    \ |>\nTry This Function\n<code>\n<?php", "    $ret = 0;\n    foreach ($arr as\
    \ $k => $val) {\n        $sum = 0;\n        for ($i = 0; $i < $k; $i++) {\n  \
    \          $sum += $val % 10;\n            $val /= 10;\n        }\n        $ret\
    \ += $sum;\n    }\n    return $ret;\n}\n", "    $sum = 0;\n    foreach ($arr as\
    \ $value) {\n        if ($value > 99) {\n            $sum += $value;\n       \
    \ }\n    }\n\n    return $sum + array_sum(array_slice($arr, $k));\n}\n</code>\n\
    <|/ a tags=php |>\n<| c |>\nPlease provide additional details in your answer.\
    \ As it's currently written, it's hard to understand your solution.\n<|/ c |>\n\
    <| c |>\nThis does not work when the range is for example from 99 to 1000 (it\
    \ should return 1000)\n<|/ c |>\n<| c |>\nIt works when range is from 0 to 99\n\
    <|/ c |>\n<| a tags=php dscore=1 |>\nJust to offer an alternative solution, you\
    \ can use array_reduce to sum up all the digits in your array in pairs of two,\
    \ starting with the last element. For example, if we have the array:\n<code>\n\
    $array = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\n</code>\nWe can add up all the elements\
    \ in the array in the following way:\n<code>\n$reduce = array_reduce($array, function($sum,\
    \ $value) {\n    return $sum + $value;\n});\n</code>\nAt this point, if you echo\
    \ the value of the $reduce variable, you will get 56800. \nThe function array_reduce\
    \ is one of the most useful functions in PHP. From the PHP docs:\n\narray_reduce()\
    \ executes the callback function once for each element present in the array. \n\
    \nIn our case, this means that the function is called once for each element in\
    \ the $array. Inside the function, we can use array_sum to add up the digits in\
    \ the pair. \nFinally, to find the sum of the first k elements, we just need to\
    \ find the first k elements in the $array, which we can do by calling array_slice.\
    \ The first k elements in the array are then the first k elements in the $reduce\
    \ variable. \n<code>\n$first_k_elements = array_slice($array, 0, $k);\n$first_k_sum\
    \ = array_sum($first_k_elements);\n</code>\nHere's a working example: \n<code>\n\
    $array = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\n$k = 4;\n\n$reduce = array_reduce($array,\
    \ function($sum, $value) {\n    return $sum + $value;\n});\n\n$first_k_elements\
    \ = array_slice($array, 0, $k);\n$first_k_sum = array_sum($first_k_elements);\n\
    \necho $reduce;\necho $first_k_sum;\n</code>\nThe above code outputs:\n<code>\n\
    56800\n</code>\n<|/ a |>\n<| c |>\nThis answer worked for me while others didn't,\
    \ but I am really curious as to why ", "    sort($arr);\n    $ans = 0;\n    foreach($arr\
    \ as $v)\n        $ans += (floor($v / 10) + ($v % 10)) * pow(10, $k - 1);\n  \
    \  return $ans;\n}", "    return array_sum(array_slice($arr, max(0, $k - 1), $k));\n\
    }\n", "    $sum = 0;\n    $tempArray = array();\n    \n    // Sort array by descending\
    \ order\n    usort($arr, create_function('$a, $b', 'return $a > $b;'));\n\n  \
    \  // Sum first k elements\n    foreach (array_slice($arr, 0, $k) as $element)\
    \ {\n        $tempArray[] = $element;\n    }\n\n    // Sum remaining elements\n\
    \    foreach ($tempArray as $element) {\n        $sum += $element;\n    }\n\n\
    \    return $sum;\n}", "    $s = 0;\n    for ($i = 0; $i < $k; $i++) {\n     \
    \   $s += $arr[$i];\n    }\n    return $s;\n}\n", "    $sum = 0;\n    $n = count($arr);\n\
    \    $resultArray = array();\n\n    for($i=0; $i<$k; $i++) {\n        if ($arr[$i]\
    \ < 10) {\n            $sum = $arr[$i];\n        } else {\n            $sum =\
    \ $arr[$i] - 9;\n        }\n        $resultArray[] = $sum;\n    }\n    return\
    \ $resultArray[count($resultArray)-1];\n}\n\n$sum = 0;\n$n = count($arr);\nfor($i=0;\
    \ $i<$k; $i++) {\n    if ($arr[$i] < 10) {\n        $sum = $arr[$i];\n    } else\
    \ {\n        $sum = $arr[$i] - 9;\n    }\n}\n", "    $sum = 0;\n    foreach($arr\
    \ as $i) {\n        $sum += $i;\n    }\n    return $sum;\n}\n", "    return array_reduce($arr,\
    \ function($x, $y) {\n        return $x + array_sum(array_slice($y, 0, $k));\n\
    \    }, 0);\n}\n", "    \n    // Add $arr[0] and $arr[1] and keep track of their\
    \ sum.\n    $sum = $arr[0] + $arr[1];\n    array_push($arr, $arr[0] + $arr[1]);\n\
    \    \n    // Iterate over all elements from $arr[2] to $arr[k] and calculate\
    \ the sum of\n    // elements after $arr[i] where i <= k. \n    $sum = 0;\n  \
    \  for ($i = 2; $i < $k; $i++) {\n        $sum = $sum + $arr[$i];\n        $arr[$i]\
    \ = $sum;\n    }\n    return $sum;\n}", "    for($i=0;$i<count($arr);$i++) {\n\
    \        $new_arr[] = $arr[$i] + $arr[$i+1];\n    }\n    return max($arr[$k]);\n\
    }", "    return $arr[0] + add_elements_($arr, $k - 1);\n}\n", "    if ($k > count($arr))\
    \ {\n        return 0;\n    }\n\n    $sum = array_sum(array_slice($arr, 0, $k));\n\
    \    for ($i = 1; $i < $k; ++$i) {\n        $sum += $arr[$i];\n    }\n\n    return\
    \ $sum;\n}\n\n/**\n * Example usage for add_elements:\n * >>> add_elements(array(111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9), 4)\n * 24\n */", "    // Write your code here\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nHow does this answer the question? It\
    \ seems like it just adds up all elements in the array (which doesn't seem to\
    \ be what the OP wants).\n<|/ c |>\n<| c |>\nThe question ask for at most two\
    \ digits from the first k elements (as in OP's example 24).\n<|/ c |>\n<| a tags=php,algorithm\
    \ |>\n<code>\n$array = array(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n$sum = 0;\n$k\
    \ = 3;\nfor ($i = 0; $i < count($array); $i++)\n{\n    if ($i > 0 && $array[$i\
    \ - 1] < $array[$i])\n    {\n        $sum += $array[$i] - $array[$i - 1];\n  \
    \      break;\n    }\n    $sum += $array[$i];\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a |>\nIf you have a fixed array like this, just loop through the array and\
    \ add only if the sum is less than 20. \n<code>\n$array = array(111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9);\n$sum = 0;\n\nforeach($array as $val){\n    if($val < 20){\n\
    \        $sum += $val;\n    }\n}\necho $sum;\n</code>\n<|/ a dscore=1 tags=php,algorithm\
    \ |>\n<| a tags=php,algorithm |>\nYou might want something like this.\n<code>\n\
    <?php\n\n$array = array(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n\n$sum = 0;\n\nforeach\
    \ ($array as $value) {\n    $sum += $value;\n}\n\nif ($sum < 200) {\n    echo\
    \ $sum;\n} else {\n    echo 'too big';\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,algorithm\
    \ |>\n<code>\n$array = array(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n$sum = 0;\n\n\
    foreach ($array as $value) {\n    $sum += $value;\n}\nif($sum < 200) {\n    echo\
    \ $sum;\n} else {\n    echo 'too big';\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ tags=php,algorithm |>\n<code>", "    // write your code in PHP7.0\n}", "   \
    \ $result = $arr[0];\n    for ($i = 1; $i < $k; $i++) {\n        $result += $arr[$i];\n\
    \    }\n    return $result;\n}\n</code>\n<|/ a tags=algorithm,arrays,php,function\
    \ |>\n<| c |>\nthis solution is correct but i dont think its faster than the one\
    \ with recursive function which uses some sort of binary search.\n<|/ c |>\n<|\
    \ c |>\nWell, for large arrays you'll have to benchmark it for yourself. I doubt\
    \ whether binary search will be any better than recursion.\n<|/ c |>\n<| c |>\n\
    The above code takes O(n) time and O(1) space (where n = length of array)\n<|/\
    \ c |>\n<| c |>\nAm I correct that the solution below this one takes O(nlogn)\
    \ time and O(1) space?\n<|/ c |>\n<| c |>\nThe solutions below take O(n) time\
    \ and O(1) space, yes. The solution above takes O(n) time and O(n) space.\n<|/\
    \ c |>\n<| a dscore=2 tags=algorithm,arrays,php,function |>\nThis will be faster\
    \ than recursive and takes O(n) time and O(1) space.\n<code>", "    $sum = 0;\n\
    \    $n = count($arr);\n    for ($i = 0; $i < $k; $i++) {\n        $sum += $arr[$i];\n\
    \    }\n    return $sum;\n}\n</code>\n<|/ a dscore=0 tags=php |>\n<| c |>\nThanks\
    \ everyone, I figured out my problem, I didn't think of using the modulo as it\
    \ would be my first thought to check as to whether the number was greater than\
    \ or less than 100 or not. Just a quick question, would it be possible to make\
    \ the array sorted so the modulo check would not have to be done each loop?\n\
    <|/ c |>\n<| c |>\nI guess the sorting could be done with a quick sort function\
    \ but that would require another loop to go through all the numbers in the array\
    \ and run it through that function and then to return the sum of the results.\
    \ Would it be possible to just sort the array before it gets to this function\
    \ and just pass the array through without passing through a function first?\n\
    <|/ c |>\n<| c |>\nYeah that's what I thought would work but I can't seem to get\
    \ it to work I used this code `function sort_array($a) {\n  sort($a);\n  return\
    \ $a;\n}\n$array = array('10','11','3','4','2');\nprint_r(sort_array($array));`\n\
    <|/ c |>\n<| c |>\nYou're trying to pass `$array` through `sort_array()`, but\
    \ then you're assigning its result to `$array2`. You're trying to sort `$array`\
    \ but then reassign it to `$array2`, so you're losing the sorted array. If you\
    \ change `print_r(sort_array($array));` to `print_r(sort_array($array2));` then\
    \ it works.\n<|/ c |>\n<| c |>\nThanks for your help, I thought that was what\
    \ I was doing but it still just returns 0.\n<|/ c |>\n<| a dscore=0 tags=php |>\n\
    You can try this way: \n<code>\n<?php\n", "    // Write your code here.\n    $sum\
    \ = 0;\n    for ($i = 0; $i < $k; $i++) {\n        $sum += $arr[$i];\n    }\n\
    \    return $sum;\n}\n", "    // write your code here\n    if (empty($arr) ||\
    \ empty($k)) {\n        return 0;\n    }\n    $sum = 0;\n    $arr = array_slice($arr,\
    \ 0, $k);\n    foreach ($arr as $value) {\n        $sum += $value;\n    }\n  \
    \  return $sum;\n}\n$result = add_elements($arr, 4);\necho \"sum = \" . $result;",
  "    sort($arr);\n    $sum = 0;\n    for($i = $k; $i < count($arr); $i++) {\n  \
    \      $sum += $arr[$i];\n    }\n    return $sum;\n}\n", "    $sum = 0;\n    foreach\
    \ ($arr as $item) {\n        for ($i = 0; $i < $k; $i++) {\n            if ($item\
    \ % 10 == 0) {\n                $sum += $item;\n            }\n            $item\
    \ /= 10;\n        }\n    }\n    return $sum;\n}\n$result = add_elements($arr,\
    \ 5);\nprint_r($result);", "    $sum = 0;\n    $i = 0;\n\n    while (i < $k) {\n\
    \        $sum = $sum + ($arr[$i] % 10);\n        $i++;\n    }\n\n    $sum = $sum\
    \ + $arr[$i];\n\n    while (i < $k) {\n        $sum += $arr[$i];\n        $i++;\n\
    \    }\n\n    return $sum;\n}", "    $sum = 0;\n    foreach ($arr as $value) {\n\
    \        if (strlen($value) > 2) {\n            $sum = $sum + $value[1];\n   \
    \         $sum = $sum + $value[0];\n        }\n    }\n    return $sum;\n}\n",
  "    $sum = 0;\n    for ($i = 0; $i < $k; $i++) {\n        $sum += $arr[$i];\n \
    \   }\n    for ($i = $k; $i < count($arr); $i++) {\n        $sum += $arr[$i];\n\
    \    }\n    return $sum;\n}\n</code>\n<|/ a |>\n<| c |>\nI agree. I think it's\
    \ more readable when you use an external library than to implement it yourself\n\
    <|/ c |>\n<| a tags=php,arrays dscore=0 |>\nThis is my solution. \n<code>", "\t\
    sort($arr);\n\t\n\t$sum = 0;\n\t$i = $j = 0;\n\t\n\twhile($j < $k) {\n\t\t$sum\
    \ = $sum + (int) $arr[$i];\n\t\t$i++;\n\t\t$j++;\n\t}\n\treturn $sum;\n}\n", " \
    \   sort($arr);\n    $add = 0;\n    for ($i = 0; $i < $k; $i++) {\n        $add\
    \ = $add + $arr[$i];\n    }\n    return $add;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=0 tags=php,arrays |>\nA good way of finding a sum in an unknown\
    \ array, is by using the PHP function array_sum.\nIn your case, you would use\
    \ this function with the parameter $arr as your array.\n<|/ a |>\n<| a |>\nI guess\
    \ this should do it\n<code>", "    $sum = array();\n    $len   = count($arr);\n\
    \    if ($len <= $k) {\n        $sum[$len] = 0;\n        return $sum;\n    }\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $sum[$i] = $arr[$i] + $arr[$i + 1];\
    \ \n    }\n    for ($i = $len; $i < $k; $i++) {\n        $sum[$i] = $arr[$i] +\
    \ $sum[$i - 1];\n    }\n    return $sum;\n}\n", "    $result = $arr[0];\n    \n\
    \    for ($i = 1; $i < $k; $i++) {\n        $result += $arr[$i];\n    }\n    \n\
    \    return $result;\n}", "    $sum = 0;\n    for ($i = 0; $i < $k; $i++) {\n\
    \        if (count($arr) == 0 || $arr[0] > 10000) {\n            return 0;\n \
    \       }\n\n        $sum += $arr[$i];\n        $arr[$i] = substr($arr[$i], 1);\n\
    \    }\n\n    return $sum;\n}\n", "    $sum = 0;\n    $max_sum = 0;\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        $sum += $arr[$i];\n        if ($sum > $max_sum)\
    \ {\n            $max_sum = $sum;\n        }\n    }\n    return $max_sum;\n}\n",
  "    sort($arr);\n    $max = $arr[$k - 1];\n    $result = 0;\n    foreach ($arr\
    \ as $i => $val) {\n        if ($i < $k) {\n            $result += $val + $max;\n\
    \        } else {\n            $result += $val;\n        }\n    }\n    return\
    \ $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhat is the time complexity\
    \ of the above solution?\n<|/ c |>\n<| c |>\nI don't know the exact complexity\
    \ of the above solution, however, I believe the above solution is O(nlogn). Because\
    \ `add_elements` sorts the array first, then get the max number of the last k\
    \ elements of the sorted array and then sum the new elements.\n<|/ c |>\n<| c\
    \ |>\nThe time complexity is O(nlogn). Sorting array in O(nlogn) and getting the\
    \ max number of last k elements in sorted array in O(nlogn). But `add_elements`\
    \ will be called n times for each of the n elements. Thus the time complexity\
    \ is O(nlogn). Hope you understand my thought.\n<|/ c |>\n<| c |>\nYes you are\
    \ right. Thank you very much for your valuable comment.\n<|/ c |>\n<| a dscore=0\
    \ |>\nAnother simple solution based on sort function:\n<code>", "  // Loop over\
    \ all pairs of consecutive elements\n  foreach ($arr as $a => $b) {\n    // Find\
    \ all elements with at most two digits\n    if ($a != $b) {\n      $c = $a / 10;\n\
    \      $d = $b / 10;\n      for ($x = 0; $x <= $k; $x++) {\n        $arr[$x] -=\
    \ $c;\n        $arr[$x + 1] += $d;\n      }\n    }\n  }\n\n  return array_sum($arr);\n\
    }\n</code>\n<|/ a tags=algorithm,php |>\n<| a dscore=0 |>\nA bit shorter version\
    \ in JavaScript:\n\n<code>\nconst addElementsAtMostTwoDigits = (arr, k) => {\n\
    \  let sum = 0;\n\n  arr.forEach((item) => {\n    let sum2 = 0;\n    for (let\
    \ i = 0; i < k; i++) {\n      const item = item / 10;\n      sum2 += item % 10\
    \ * i;\n      item = item / 10;\n    }\n    sum += sum2 + item;\n  });\n\n  return\
    \ sum;\n};\n\nlet result = addElementsAtMostTwoDigits([31, 106, 118, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4);\nconsole.log(result);</code>\n<|/ a tags=algorithm,php |>\n\
    <| a tags=algorithm,php |>\nMy answer isn't really an algorithmic solution but\
    \ here is a PHP code that I use:\n<code>\n<?php", "    // TODO: make it O(n)\n\
    \    $ans = 0;\n    foreach ($arr as $n) {\n        ++$ans;\n        if ($n >=\
    \ 10) {\n            $ans += floor($n/10) + floor($n % 10)/10;\n        }\n  \
    \  }\n    return $ans;\n}\n", "    $sum = 0;\n    $sum2 = array();\n    foreach\
    \ ($arr as $i) {\n        // $i % 100 is used to get rid of the extra digits\n\
    \        $sum2 = $sum2 + $i % 100;\n        // $i is divided by 100 because of\
    \ the extra digits\n        $sum = $sum + $i / 100;\n    }\n    $sum2 = $sum2\
    \ - $k;\n    if ($sum2 >= $sum) {\n        return $sum;\n    } else {\n      \
    \  return $sum2;\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis fails on\
    \ large arrays like arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\
    \ and k = 3. Adding the two elements 71 and 42 results in 136 instead of 135.\n\
    <|/ c |>\n<| c |>\n: I do not think this is a correct solution. Look at his example:\
    \ he wants to return 24, but the function you propose will give 135.\n<|/ c |>\n\
    <| c |>\n: You are right, thank you. I'll edit the answer to correct the mistake\
    \ :)\n<|/ c |>\n<| a dscore=0 tags=php,algorithm,arrays |>\nThe following function\
    \ will return you the sum of the array's elements having more than 1 digit in\
    \ the first k (inclusive) elements:\n<code>", "    $arrLength = count($arr);\n\
    \    $sum = 0;\n    $count = 0;\n    // $sum is always less than or equal to (10^k\
    \ * (10^k + 1)) / 2 = 10^k * (10^k + 1) / 2\n    $limit = pow(10, $k);\n    //\
    \ if array has only one element, return it\n    if ($arrLength == 1) {\n     \
    \   return $arr[0];\n    }\n    // go through array and add elements to sum\n\
    \    for ($i = 0; $i < $arrLength; $i++) {\n        if ($arr[$i] >= $limit) {\n\
    \            $sum += $limit;\n            $count++;\n        } else {\n      \
    \      $sum += $arr[$i];\n            $count++;\n        }\n    }\n    // if we\
    \ have not counted all of the numbers, add them all\n    if ($count != $arrLength)\
    \ {\n        $sum += $count;\n    }\n    return $sum;\n}\n", "    $sum = 0;\n\
    \    $start = 0;\n    foreach ($arr as $k => $element) {\n        if ($start <\
    \ $k) {\n            $sum += $element;\n        }\n        $start++;\n    }\n\
    \    return $sum;\n}\n", "    $sum = 0;\n    $n = count($arr);\n    for ($i =\
    \ 0; $i < $k; $i++) {\n        $sum += $arr[$i];\n    }\n    for ($i = $k; $i\
    \ < $n; $i++) {\n        $sum -= $arr[$i];\n    }\n    return $sum;\n}\n</code>\n\
    Output:\n<code>\n$ php test.php \n$ php test.php \n$ php test.php \n$ php test.php\
    \ \n$ php test.php \n$ php test.php \n$ php test.php \n$ php test.php \n$ php\
    \ test.php \n$ php test.php \n$ php test.php \n$ php test.php \n$ php test.php\
    \ \n$ php test.php \n$ php test.php \n$ php test.php \n$ php test.php \n$ php\
    \ test.php \n$ php test.php \n$ php test.php \n$ php test.php \n$ php test.php\
    \ \n$ php test.php \n$ php test.php \n$ php test.php \n$ php test.php \n$ php\
    \ test.php \n$ php test.php \n$ php test.php \n$ php test.php \n$ php test.php\
    \ \n$ php test.php \n$ php test.php \n$ php test.php \n$ php test.php \n$ php\
    \ test.php \n$ php test.php \n$ php test.php \n$ php test.php \n$ php test.php\
    \ \n$ php test.php \n$ php test.php \n$ php test.php \n$ php test.php \n$ php\
    \ test.php \n$ php test.php \n$ php test.php \n$ php test.php \n$ php test.php\
    \ \n$ php test.php \n$ php test.php \n$ php test.php \n$ php test.php \n$ php\
    \ test.php \n$ php test.php \n$ php test.php \n$ php test.php \n$ php test.php\
    \ \n$ php test.php \n$ php test.php \n$ php test.php \n$ php test.php \n$ php\
    \ test.php \n$ php test.php \n$ php test.php \n$ php test.php \n$ php test.php\
    \ \n$ php test.php \n$ php test.php \n$ php test.php \n$ php test.php \n$ php\
    \ test.php \n$ php test.php \n$ php test.php \n$ php test.php \n$ php test.php\
    \ \n$ php test.php \n$ php test.php \n$ php test.php \n$ php test.php \n$ php\
    \ test.php \n$ php test.php \n$ php test.php \n$ php test.php \n$ php test.php\
    \ \n$ php test.php \n$ php test.php \n$ php test.php \n", "  sort($arr);\n  $sum\
    \ = 0;\n  foreach ($arr as $i) {\n    if ($i >= 10) break;\n    $sum += $i;\n\
    \    if ($k <= $sum) break;\n    $sum = 0;\n  }\n  return $sum;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThanks for your answer!\n<|/ c |>\n<| c |>\nYour answer works\
    \ better than my one, I was also trying to achieve this and I used this solution.\n\
    <|/ c |>\n<| a dscore=1 |>\nA solution using array_slice() to take the first n\
    \ elements of the array and then use array_sum() to sum them up:\n<code>\n$n =\
    \ 4;\n$array = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\n\n$result = array_sum(array_slice($array,\
    \ 0, $n));\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThanks for your answer!\n\
    <|/ c |>\n<| a tags=php,arrays |>\nThis is another way to achieve the desired\
    \ result using array_slice() and array_sum():\n<code>", "    $sum = 0;\n    foreach($arr\
    \ as $a) {\n        $sum += $a * (int) ($a / 10);\n    }\n    return $sum + $sum\
    \ % 10 + $arr[$k - 1];\n}\n</code>\nThe above code is very straight forward and\
    \ understandable (at least, I hope so).\n<code>\n$sum = 0;\nforeach($arr as $a)\
    \ {\n    $sum += $a * (int) ($a / 10);\n}\n</code>\nThe above code basically adds\
    \ all the elements within the array. The trick here is to cast them into integer\
    \ so that they can be multiplied.\n<code>\n$sum = 0;\nforeach($arr as $a) {\n\
    \    $sum += $a * (int) ($a / 10);\n}\n</code>\nThis above code basically adds\
    \ all the elements of the array multiplied by their respective digits. Since you\
    \ want the total sum up to 3 digits, we multiply by 10. Since we want to add up\
    \ the elements up to 3 digits, we multiply by 10 again.\n<code>\n$sum = 0;\nforeach($arr\
    \ as $a) {\n    $sum += $a * (int) ($a / 10);\n}\n</code>\nThis above code basically\
    \ adds all the elements of the array multiplied by their respective digits. Since\
    \ you want the total sum up to 4 digits, we multiply by 100. Since we want to\
    \ add up the elements up to 4 digits, we multiply by 100 again.\n<code>\n$sum\
    \ = 0;\nforeach($arr as $a) {\n    $sum += $a * (int) ($a / 10);\n}\n</code>\n\
    This above code basically adds all the elements of the array multiplied by their\
    \ respective digits. Since you want the total sum up to 5 digits, we multiply\
    \ by 1000. Since we want to add up the elements up to 5 digits, we multiply by\
    \ 1000 again.\n<code>\n$sum = 0;\nforeach($arr as $a) {\n    $sum += $a * (int)\
    \ ($a / 10);\n}\n</code>\nThis above code basically adds all the elements of the\
    \ array multiplied by their respective digits. Since you want the total sum up\
    \ to 6 digits, we multiply by 10000. Since we want to add up the elements up to\
    \ 6 digits, we multiply by 10000 again.\n<code>\n$sum = 0;\nforeach($arr as $a)\
    \ {\n    $sum += $a * (int) ($a / 10);\n}\n</code>\nThis above code basically\
    \ adds all the elements of the array multiplied by their respective digits. Since\
    \ you want the total sum up to 7 digits, we multiply by 100000. Since we want\
    \ to add up the elements up to 7 digits, we multiply by 100000 again.\n<code>\n\
    $sum = 0;\nforeach($arr as $a) {\n    $sum += $a * (", "    $sum = 0;\n    $limit\
    \ = 1;\n    foreach ($arr as $key => $value) {\n        if ($key >= $limit) {\n\
    \            $sum += $value;\n            if ($key >= $k) {\n                $limit\
    \ += $value;\n            }\n        }\n    }\n    return $sum;\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\npublic function addElementsBetweenKandSumOfArray($arr,$k){\n\
    \    $result = array_sum(array_slice($arr,0,$k));\n    $sum = array_sum($arr);\n\
    \    return $result+$sum;\n}\n</code>\n<|/ a tags=arrays,php,algorithm |>\n<|\
    \ a |>\n<code>", "    sort($arr);\n    $result = $arr[0] + $arr[1];\n    $i =\
    \ 2;\n    while ($i <= $k) {\n        $result += $arr[$i];\n        $i += 2;\n\
    \    }\n    return $result;\n}\n", "    $sum = 0;\n    for ($i = $k; $i < count($arr);\
    \ $i++) {\n        $sum += $arr[$i];\n    }\n    return $sum;\n}\n", "    $arr\
    \ = array_slice($arr, 0, $k);\n    $sum = array_sum($arr);\n    return $sum;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThanks, this is very helpful.\n<|/ c |>\n<| a |>\n\
    A python implementation of your problem would be:\n<code>\n>>> def add_elements(arr,k):\n\
    ...     arr.sort(reverse=True)\n...     return sum(x[i:k] for i in xrange(len(arr)))\n\
    ... \n>>> add_elements([7,0,5,3,4,9], 4)\n12\n>>> add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 4)\n24\n</code>\n<|/ a dscore=0 tags=python |>\n<| a |>\n<code>\ndef addElements(arr,\
    \ k):\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[len(arr)\
    \ - i - k]\n    return sum\n\narr = list(str(1000000))\narr.append(0)\narr.reverse()\n\
    print(arr)\n\naddElements(arr, 4)\n</code>\n<|/ a dscore=0 tags=python |>\n<|\
    \ c |>\nWelcome to Stack Overflow! While this code may solve the question, [including\
    \ an explanation](//meta.stackexchange.com/q/114762) of how and why this solves\
    \ the problem would really help to improve the quality of your post, and probably\
    \ result in more up-votes. Remember that you are answering the question for readers\
    \ in the future, not just the person asking now. Please [edit] your answer to\
    \ add explanations and give an indication of what limitations and assumptions\
    \ apply.\n<|/ c |>\n<| a dscore=0 tags=python |>\nFor Python 3\n<code>\ndef addElements(arr,\
    \ k):\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[len(arr)\
    \ - i - k]\n    return sum\n\narr = list(str(1000000))\narr.append(0)\narr.reverse()\n\
    print(arr)\naddElements(arr, 4)\n</code>\n<|/ a |>\n<| a tags=python |>\nYou can\
    \ use numpy for this\n<code>\nimport numpy as np\narr=np.array(list(range(100)))\n\
    arr=np.concatenate((arr,np.zeros(len(arr)-1)))\nprint(arr[:5])\narr[-4:]=arr[:4]+arr[4:5]\n\
    print(arr[:5])\n</code>\n<|/ a dscore=0 |>\n<| a tags=python |>\nIn python3 you\
    \ can use itertools.islice() to slice the list:\n<code>\n>>> from itertools import\
    \ islice\n>>> arr = [7, 0, 5, 3, 4, 9]\n>>> sum( islice(arr, k, None) )\n12\n\
    </code>\n<|/ a dscore=0 |>", "    $sum = 0;\n    foreach($arr as $element){\n\
    \        $sum += $element % 10;\n        $element  = ($element - $sum)/ 10;\n\
    \        if($element > 0 && $element < 10){\n            $sum += $element;\n \
    \       }\n    }\n    return $sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ tags=arrays,php |>\n<code>\n$arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\n$num\
    \ = 4;\n$newArr = array_slice($arr,0,$num);\n</code>\n<|/ a |>\n<| a dscore=0\
    \ tags=arrays,php |>\n<code>\n<?php\n$arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\n\
    $arr2 = array_slice($arr,0,4);\n$arr3 = array_slice($arr,4);\narray_unshift($arr3,0);\n\
    $arr4= array_sum($arr2);\n$arr5 =  array_sum($arr3);\n$arr6 = $arr5 + $arr4;\n\
    $arr7 = array_sum($arr6);\necho \"total sum:\".$arr7;", "    $sum = 0;\n    $len\
    \ = count($arr);\n    for ($i = 0; $i < $k; $i++) {\n        $sum += $arr[$i];\n\
    \    }\n    $k++;\n    for ($i = $k; $i < $len; $i++) {\n        $sum += $arr[$i];\n\
    \    }\n    return $sum;\n}\n", "    $sum = 0;\n    foreach ($arr as $key => $value)\
    \ {\n        $sum += $value / pow(10, $k - $key);\n    }\n    return $sum;\n}\n",
  "    $sum = 0;\n    for ($i = 0; $i < min(count($arr), $k); $i++) {\n        for\
    \ ($j = $i; $j < count($arr); $j++) {\n            if (substr($arr[$i], 0, $j)\
    \ == substr($arr[$j], 0, $j)) {\n                $sum += substr($arr[$i], 0, $j);\n\
    \                break;\n            }\n        }\n    }\n    return $sum;\n}\n",
  "    // Your code here\n    \n    // sort array by key value \n    arsort($arr);\n\
    \    \n    // create result array for sum\n    $res = array();\n    \n    // iterate\
    \ through array \n    foreach($arr as $k => $v) {\n        $sum = 0;\n       \
    \ // iterate through array with $k elements \n        for($i = $k; $i < count($arr);\
    \ $i++) {\n            if(!in_array($i, $res)) {\n                $sum += $arr[$i];\n\
    \                $res[] = $i;\n            }\n        }\n        // set final\
    \ result to array \n        $res[$k] = $sum;\n    }\n    \n    // sum all values\
    \ of array \n    $result = 0;\n    \n    foreach ($res as $key => $value) {\n\
    \        $result += $value;\n    }\n    \n    return $result;\n}\n", "    $res\
    \ = 0 ;\n    foreach ($arr as $v){\n        $res += $v % 10 + $v / 10;\n    }\n\
    \    if ($k > 0) {\n        $res = $res / 10 + $res / 10 % 10 * $k;\n    }\n \
    \   return $res;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,algorithm dscore=0\
    \ |>\nThe solution below is O(N) by building the array in reverse order from largest\
    \ to smallest.  Then we find the largest number in the array that is a multiple\
    \ of the target number (this will be the second k).\n<code>", "    sort($arr);\n\
    \    $a = array_slice($arr, 0, $k);\n    $b = array_slice($arr, $k);\n    return\
    \ $a[0]+$b[0];\n}\n</code>\n<|/ a |>\n<| a tags=sorting,arrays,sum,php |>\nIf\
    \ your array is small, you can sort it to speed up your program execution.\nIf\
    \ you only have to do it once, you can sort it right away after you create it.\n\
    <code>", "    $sum = 0;\n    for ($i = 0; $i < $k; $i++) {\n        $sum = $sum\
    \ + $arr[$i];\n    }\n    return $sum;\n}\n", "    // Start with the first k elements\n\
    \    $result = 0;\n    // Start with the first k elements\n    for ($i = 0; $i\
    \ < $k; $i++)\n        // Add the rest of the elements to the result\n       \
    \ $result += $arr[$i];\n    // Add the remaining elements to the result\n    for\
    \ ($i = $k; $i < count($arr); $i++)\n        // If two or more of the elements\
    \ are the same, skip the result\n        if ($arr[$i] == $arr[$i])\n         \
    \   $result +=0;\n        // If two or more of the elements are the same, skip\
    \ the result\n        else\n            $result += $arr[$i];\n    // Return the\
    \ result as usual\n    return $result;\n}\n</code>\n<|/ a tags=algorithm,arrays,php\
    \ dscore=0 |>\n<| a |>\n<code>\n$arr = array(111,21,3,4000,5,6,7,8,9);\n$k = 4;\
    \ // k is maximum count\n$sum = 0;\nfor($i=0; $i<$k; $i++){\n    $sum += $arr[$i];\n\
    }\nfor($i=$k; $i<count($arr); $i++){\n    $sum -= $arr[$i];\n    if($sum < 0)\n\
    \        $sum = 0;\n}\necho $sum;\n</code>\n<|/ a tags=algorithm,arrays,php dscore=0\
    \ |>\n<| a dscore=0 |>\nYou can use the following code to find the sum of first\
    \ n elements of array.\n<code>\n$arr = array(111,21,3,4000,5,6,7,8,9);\n$k = 4;\
    \ // k is maximum count\n$sum = 0;\n$n = 0;\nforeach ($arr as $value)\n{\n   \
    \ $sum += $value;\n}\nfor ($i = 0; $i < $k; $i++)\n{\n    $n += $arr[$i];\n}\n\
    echo $sum - $n;\n</code>\n<|/ a tags=algorithm,arrays,php |>\n<| a |>\n<code>",
  "    // write your code in PHP7\n}\n</cell>\n<text>\nProblem 2\nGiven a string str,\
    \ find the longest substring with the length at most 30 that is a palindrome.\n\
    \n\n</text>\n<cell>", "    // initialize sum of first k elements\n    $sum = 0;\n\
    \    foreach ($arr as $v) {\n        $sum += $v;\n    }\n    // sum all elements\
    \ that have second or greater\n    for ($i = 1; $i < $k; $i++) {\n        $sum\
    \ -= $arr[$i];\n    }\n    return $sum;\n}\n", "    if ($k > count($arr))\n  \
    \      return 0;\n\n    $sum = 0;\n    foreach ($arr as $i) {\n        if ($i\
    \ < 10)\n            $sum += $i;\n        else\n            $sum += $i % 10 +\
    \ 10 * ($i / 10);\n    }\n    $sum -= $sum % 10;\n    return $sum % 100 / 100;\n\
    }\n", "    sort($arr);\n    $res = array_slice($arr, 0, $k);\n    $sum = array_sum($arr);\n\
    \    foreach($arr as $v) {\n        if ($sum + $v > $res[0]) {\n            $res[0]\
    \ = $sum + $v;\n            $res[1] = $v;\n        }\n    }\n    return $res[0];\n\
    }\n</code>\n<|/ a tags=php dscore=1 |>\n<| c |>\ni just want to add the largest\
    \ elements with 2 digits, for example 111 + 4000 = 24 and 22 + 5 = 28. so if i\
    \ input 22 it should output 28 and same for 111 + 9 = 81 but my output returns\
    \ 9\n<|/ c |>\n<| c |>\nWhat is the purpose of adding the second element to the\
    \ result? Do you also want to include the first element in the result? If so,\
    \ what should be the result for `111 + 3`? `13` or `12`?\n<|/ c |>\n<| c |>\n\
    Yes, you are right. I just edited my question and included the constraints\n<|/\
    \ c |>\n<| c |>\nI've edited my answer, but I've still not understood your constraints.\
    \ Can you provide more examples of input/output pairs?\n<|/ c |>\n<| c |>\ni've\
    \ edited my question again, i hope that now is clearer to understand\n<|/ c |>\n\
    <| a tags=php |>\nYou can try this:\n<code>\n$arr = [111, 22, 3, 400, 5, 6, 7,\
    \ 8, 9];\n$sum = 0;\n", "    $sum = 0;\n    $count = 1;\n    \n    foreach ($arr\
    \ as $value) {\n        if (($count - 1) <= $k) {\n            $sum += $value;\n\
    \            $count++;\n        } else {\n            if ($sum > 0) {\n      \
    \          $sum += $value;\n            }\n        }\n    }\n\n    return $sum;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a |>\nMy take on this:\n<code>\n$arr = [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9];\n$k = 4;\n$result = [];\nfor ($i = 0; $i < count($arr);\
    \ $i++) {\n    $result[] = array_sum(array_slice($arr, $i, $k));\n}\necho array_sum($result);\n\
    </code>\n<|/ a dscore=0 tags=sum,php |>\n<| c |>\nIt doesn't work if there are\
    \ more than 1 elements with two digits. https://3v4l.org/uE5NJ\n<|/ c |>\n<| c\
    \ |>\nGood point... I updated the answer, it works now :)\n<|/ c |>\n<| c |>\n\
    Thanks for taking the time to help me!\n<|/ c |>\n<| a tags=sum,php |>\nI guess\
    \ this one works faster than the other solutions. Hope someone can optimize it\
    \ more:\n<code>\n<?php", "    // Write your code here.\n    $sum = 0;\n    for\
    \ ($i = 2; $i <= $k; $i++) {\n        $sum += $arr[$i];\n    }\n    return $sum;\n\
    }\n", "    sort($arr);\n    $sum = 0;\n    foreach ($arr as $i => $v) {\n    \
    \    if ($i < $k) {\n            $sum += $v;\n        } else {\n            if\
    \ ($i - $k >= 2) {\n                $sum += $v * ($i - $k + 1);\n            }\n\
    \        }\n    }\n    return $sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php\
    \ dscore=1 |>\nA simple solution is using array_slice and array_sum. array_slice\
    \ will remove first k elements. array_sum will sum the rest elements.\n<code>",
  "    $sum = 0;\n    for($i = 0; $i < $k; ++$i) {\n        $sum += $arr[$i];\n  \
    \  }\n    $sum *= 10;\n    for($i = $k; $i < count($arr); ++$i) {\n        $sum\
    \ += $arr[$i];\n    }\n    return $sum;\n}", "    $sum = 0;\n    foreach ($arr\
    \ as $element) {\n        if ($element <= 9) {\n            $sum += $element;\n\
    \        } elseif ($element > 9) {\n            $sum += $element - 10;\n     \
    \   }\n        if ($sum >= $k) {\n            return $sum;\n        }\n    }\n\
    }\n", "    if ($k > count($arr) - 1) {\n        return 0;\n    }\n    $sum = 0;\n\
    \    foreach ($arr as $key => $value) {\n        if ($key <= $k) {\n         \
    \   $sum += $value;\n            if ($sum >= 1000) {\n                return $sum;\n\
    \            }\n        }\n        $sum -= $value;\n        if ($sum >= 1000)\
    \ {\n            return $sum;\n        }\n    }\n    return $sum;\n}\n</code>\n\
    <|/ a tags=php,arrays,algorithm |>\n<| c |>\nVery nice, but please add a few sentences\
    \ to explain what this code does, and why you believe it is the correct answer\n\
    <|/ c |>\n<| c |>\nSorry, I didn't understand your comment. I'm also not good\
    \ at English.\n<|/ c |>\n<| c |>\nAwesome! I didn't know you were good at English,\
    \ but you definitely are. My English is very poor, but your answer helped me a\
    \ lot.\n<|/ c |>\n<| c |>\nYour code was a great improvement, but I believe it\
    \ can be improved in such a way that all numbers are counted. I've added an answer\
    \ based on your code, but I'm not sure if my code is optimal. Thanks for the answer.\n\
    <|/ c |>\n<| a |>\nHere is my new code:\n<code>\n<?php", "    return array_sum(array_slice($arr,\
    \ 0, $k));\n}\n", "    // Write your code here.\n}\n</cell>\n<cell>", "    $n\
    \ = count($arr);\n    $arr = array_reverse($arr);\n    $res = 0;\n    for ($i\
    \ = 0; $i < $k; $i++)\n        $res += $arr[$i];\n    return $res+$arr[$k];\n\
    }\n</code>\n<|/ a tags=php,data-structures,arrays |>\n<| c |>\nThis is not an\
    \ efficient solution. You are reversing the array and then iterating on the reversed\
    \ array which takes O(n) time complexity and you are iterating n times where n\
    \ is the number of elements in the original array. So the overall time complexity\
    \ will be O(n^2). The correct solution would be O(n) where n is the number of\
    \ elements in the original array.\n<|/ c |>\n<| a |>\nThis is not an efficient\
    \ solution in terms of time complexity but for readability of the code you can\
    \ write it like this\n<code>\n<?php\n", "    $sum = 0;\n    foreach ($arr as $k\
    \ => $v) {\n        $sum += $v;\n    }\n    return $sum;\n}", "    $ans = 0;\n\
    \    foreach ($arr as $key => $value) {\n        if ($value >= 10) {\n       \
    \     $ans += $value;\n            if ($key < $k) {\n                $ans += $arr[$key];\n\
    \            }\n        } else {\n            $ans += $value - 10;\n         \
    \   if ($key < $k) {\n                $ans += $value - 10;\n            }\n  \
    \      }\n    }\n    return $ans;\n}", "  // Only sum elements up to and including\
    \ k\n  $result = $arr[0] + $arr[1];\n  for ($i = 2; $i <= $k; $i++) {\n    $result\
    \ += $arr[$i];\n  }\n\n  return $result;\n}\n", "    $sum = 0;\n    foreach ($arr\
    \ as $key => $value) {\n        if ($key < $k) {\n            $sum += $value;\n\
    \        }\n    }\n    return $sum;\n}\n", "    $sum = 0;\n    for ($i = 0; $i\
    \ < $k; $i++) {\n        $sum += $arr[$i];\n    }\n    return $sum;\n}\n", " \
    \   $ans = 0;\n    foreach ($arr as $i => $num) {\n        $len = $len - 1;\n\
    \        if ($len > 0) {\n            $ans += $num * pow(10, $len);\n        }\n\
    \        if ($i < $k) {\n            $ans += $num;\n        }\n    }\n    return\
    \ $ans;\n}\n", "    $total = 0;\n    for ($i = $k; $i < sizeof($arr); $i++) {\n\
    \        $total += $arr[$i];\n    }\n    return $total;\n}\n", "  $arr = array_slice($arr,\
    \ 0, $k);\n  return array_sum(array_slice($arr, 0, count($arr) - 1));\n}", " \
    \   return array_sum(array_slice($arr, 0, $k));\n}\n</code>\n<|/ a |>\n<| c |>\n\
    That is wrong! You are summing the first k elements in the array, but OP is asking\
    \ for the sum of elements with the **maximum** two digits of the 1st k elements.\
    \ You should probably change your examples to show this case.\n<|/ c |>\n<| c\
    \ |>\nThanks. I was just about to post the same. Fixed it now.\n<|/ c |>\n<| a\
    \ |>\nFor those who are interested in getting the sum of all elements where the\
    \ first k digits of the integer are the same as the ones left of the kth integer\
    \ in the array, I wrote a function as below:\n<code>", "    $sum = 0;\n    $len\
    \ = count($arr);\n    $i = 0;\n    $j = 0;\n    while ($j < $k) {\n        if\
    \ ($arr[$i] >= 10) {\n            $sum += $arr[$i];\n            $i++;\n     \
    \   } else {\n            $j++;\n        }\n    }\n\n    return $sum;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\nHere is a solution that is quite straight\
    \ forward and easy to understand. The idea is to keep track of current sum (initially\
    \ zero), current sum (initially zero), the current index and the number of elements.\
    \ We repeatedly add current sum, current index and number of elements until we\
    \ find the desired sum.\n<code>", "    $total = 0;\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        $total += $arr[$i];\n        if ($total > 99) {\n         \
    \   break;\n        }\n    }\n    for ($i = 0; $i < count($arr); $i++) {\n   \
    \     if ($arr[$i] > 9) {\n            $total -= $arr[$i];\n        }\n    }\n\
    \    return $total;\n}\n\n$arr = array();\n$arr[] = 111;\n$arr[] = 21;\n$arr[]\
    \ = 3;\n$arr[] = 4000;\n$arr[] = 5;\n$arr[] = 6;\n$arr[] = 7;\n$arr[] = 8;\n$arr[]\
    \ = 9;\n$arr[] = 111;\n$arr[] = 21;\n$arr[] = 3;\n$arr[] = 4000;\n$arr[] = 5;\n\
    $arr[] = 6;\n$arr[] = 7;\n$arr[] = 8;\n$arr[] = 9;\n$arr[] = 111;\n$arr[] = 21;\n\
    $arr[] = 3;\n$arr[] = 4000;\n$arr[] = 5;\n$arr[] = 6;\n$arr[] = 7;\n$arr[] = 8;\n\
    $arr[] = 9;\n$arr[] = 111;\n$arr[] = 21;\n$arr[] = 3;\n$arr[] = 4000;\n$arr[]\
    \ = 5;\n$arr[] = 6;\n$arr[] = 7;\n$arr[] = 8;\n$arr[] = 9;\n", "    $res = 0;\n\
    \    foreach ($arr as $item) {\n        $res += $item;\n        if ($k > 0 &&\
    \ $item > 9) {\n            $res += $item - 10;\n            $k--;\n        }\n\
    \    }\n    return $res;\n}\n\n/**\n * Return the sum of the integers in arr\n\
    \ */", "    $result = 0;\n    $k++;\n    foreach ($arr as $k) {\n        $result\
    \ += $k;\n    }\n    return $result;\n}", "    $sum = 0;\n    $len = count($arr);\n\
    \n    // First k elements\n    for ($i = 0; $i < $k; $i++) {\n        $sum +=\
    \ $arr[$i];\n    }\n\n    // Then middle elements\n    for ($i = 0; $i < $len\
    \ - $k; $i++) {\n        $sum += $arr[$i + $k];\n    }\n\n    return $sum;\n}\n\
    </code>\n<|/ a tags=php |>\n<| a tags=php dscore=0 |>\nHere is an example with\
    \ O(n) complexity:\n<code>\n<?php\n", "    $sum = 0;\n    foreach ($arr as $element)\
    \ {\n        $sum -= $element % 10;\n        $sum += ($element - $sum) % 10;\n\
    \    }\n    return $sum % 10;\n}\n</code>\n<|/ a tags=dynamic-programming,php,algorithm,math,arrays\
    \ |>\n<| a tags=dynamic-programming,php,algorithm,math,arrays |>\nFor each element\
    \ of the array,\n<code>\nif (array_key_exists($i-$sum, $array))\n</code>\nor\n\
    <code>\nif (array_key_exists($i, $array) && $i+$sum < $k)\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=dynamic-programming,php,algorithm,math,arrays dscore=1 |>\nHere\
    \ is the python code.\n<code>\nclass Solution:\n    \"\"\"\n    @param A: an array\
    \ of integers\n    @param k: an integer k\n    @return: the sum of all elements\
    \ whose value mod 10 is at most k, mod 10\n    \"\"\"\n    def sumMostlyAtLeastK(self,\
    \ A, k):\n        if A == []:\n            return 0\n        return max((sum(x)\
    \ % 10 for x in A), key=lambda x: x - k)\n</code>\n<|/ a |>\n<| a dscore=0 |>\n\
    My solution is like this.\n<code>\n<?php", "    $result = 0;\n    for ($i = 0;\
    \ $i < $k; ++$i) {\n        $result += $arr[$i];\n    }\n    for ($i = $k; $i\
    \ < count($arr); ++$i) {\n        $result -= $arr[$i];\n    }\n    return $result;\n\
    }\n", "    // Your code here\n    $result = array();\n    $i = 0;\n    foreach\
    \ ($arr as $value) {\n        if ($i < $k) {\n            $result[] = $value;\n\
    \        }\n        $i++;\n    }\n    return array_sum($result);\n}\n", "    if\
    \ ($k > len($arr)) {\n        return 0;\n    }\n    $sum = 0;\n    for ($i = 0;\
    \ $i < $k; $i++) {\n        $sum += $arr[$i];\n    }\n    return $sum;\n}\n",
  "    // sort array in ascending order\n    sort($arr);\n\n    // initialize result\n\
    \    $result = 0;\n\n    // use two pointers\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $result += $arr[$i];\n    }\n\n    return $result;\n}\n", "    if\
    \ ($k > count($arr)) {\n        $k = count($arr);\n    }\n    $sum = 0;\n    $i\
    \ = 0;\n    while($i < $k) {\n        $sum = $sum + $arr[$i];\n        $i++;\n\
    \    }\n    return $sum;\n}\n\n/**\n * Problem #9\n *\n * A perfect number is\
    \ a number for which the sum of its proper divisors is exactly equal to the number.\
    \ For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14\
    \ = 28, which means that 28 is a perfect number.\n *\n * Find the sum of all the\
    \ numbers which are perfect numbers.\n *\n * Solution:\n * Using Sieve of Eratosthenes\
    \ we can find divisors of number from 1 to n. We use that to filter out only perfect\
    \ numbers.\n *\n * Time Complexity: O(n) where n is number of integers\n * Space\
    \ Complexity: O(n)\n *\n */\n\n/**\n * Problem #10\n *\n * A perfect number is\
    \ a number for which the sum of its proper divisors is exactly equal to the number.\
    \ For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14\
    \ = 28, which means that 28 is a perfect number.\n *\n * Find the sum of all the\
    \ numbers which are perfect numbers.\n *\n * Solution:\n * Using Sieve of Eratosthenes\
    \ we can find divisors of number from 1 to n. We use that to filter out only perfect\
    \ numbers.\n *\n * Time Complexity: O(n) where n is number of integers\n * Space\
    \ Complexity: O(n)\n *\n */", "    $result = 0;\n    $length = count($arr);\n\
    \    $length1 = $length - $k;\n    for($i = 0; $i < $length1; $i++){\n       \
    \ $result +=  $arr[$i];\n    }\n    return $result;\n}\n", "  $sum = 0;\n  for\
    \ ($i = 0; $i < $k; $i++) $sum += $arr[$i];\n  for ($i = $k; $i < sizeof($arr);\
    \ $i++) $sum += $arr[$i];\n  return $sum;\n}\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a tags=php,arrays |>\nWe can create a hash table to speed up the lookup and\
    \ then iterate over the array using array_search().\n<code>\n$arr = [111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9];\n$h = [];\nforeach ($arr as $a) {\n    $h[$a] = $a;\n\
    }\n\n$max = 2;\n$sum = 0;\nforeach ($h as $k => $a) {\n    $pos = array_search($k,\
    \ array_keys($h));\n    if ($pos < $max) $sum += $a;\n}\n</code>\nOutput:\n<code>\n\
    24\n</code>\nDemo on 3v4l.org\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nThe array\
    \ is sorted and only the first $max values are used, so you could just count the\
    \ first $max values and calculate the sum:\n<code>\n$arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9];\n$max = 2;\n\n$sum = 0;\nfor ($i = 0; $i < $max; $i++) {\n \
    \   $sum += $arr[$i];\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=1 tags=php,arrays\
    \ |>\nYou can use range function and array_slice with max\n<code>\n$arr = [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9];\n$max = 2;\n$sum = array_sum(array_slice($arr,\
    \ max(0,$max),$max));\necho $sum;\n</code>\nDEMO\n<|/ a |>\n<| a |>\n<code>\n\
    $arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\n$max = 2;\n$sum = 0;\nfor ($i=0; $i<$max;\
    \ $i++){\n    $sum+=$arr[$i];\n}\necho $sum;\n</code>\n<|/ a tags=php,arrays dscore=0\
    \ |>\n<| c |>\nIt might be worth explaining your answer, rather than just posting\
    \ code.\n<|/ c |>\n<| c |>\nWhile this code may provide a solution to the question,\
    \ it's better to add context as to why/how it works. This can help future users\
    \ learn and eventually apply that knowledge to their own code. You are also likely\
    \ to have positive feedback from users in the ", "    if (count($arr) <= 1 ||\
    \ count($arr) <= $k) return 0;\n    $sum = 0;\n    for($i = 0; $i < $k; $i++){\n\
    \        $sum += $arr[$i];\n    }\n    return $sum;\n}\n</code>\n<|/ a tags=python\
    \ dscore=1 |>\n<| c |>\nThe constraint of 2 elements is obviously not enforced\
    \ for the general case. But I guess that is what the OP wants.\n<|/ c |>\n<| c\
    \ |>\nThe constraint of 2 elements is obviously not enforced for the general case.\
    \ But I guess that is what the OP wants.\n<|/ c |>\n<| a dscore=0 |>\nWe can use\
    \ recursion for this kind of problem if we have to use recursion. This is the\
    \ best solution i could come up with:\n<code>\ndef two_elements(arr):\n    if\
    \ len(arr)<2:\n        return 0\n    else:\n        return arr[0] + two_elements(arr[1:])\n\
    \nprint two_elements([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, ", "    // write your code here\n    sort($arr);\n    $sum = 0;\n    $count\
    \ = 0;\n    foreach ($arr as $element) {\n        if ($count < $k) {\n       \
    \     $sum += $element;\n            $count++;\n        }\n    }\n    return $sum;\n\
    }", "  // init\n  $sum = 0;\n  for ($i = 0; $i < $k; $i++) {\n    // add first\
    \ k elements (without duplicates) to sum array\n    $sum += $arr[$i];\n  }\n \
    \ for ($i = $k; $i < count($arr); $i++) {\n    // remove last k elements (without\
    \ duplicates) from sum array\n    $sum -= $arr[$i];\n  }\n  return $sum;\n}",
  "    $result = 0;\n    $n = count($arr);\n    $max = $n - $k;\n\n    for ($i = 1;\
    \ $i <= $max; $i++) {\n        $result += $arr[$i];\n    }\n\n    return $result;\n\
    }\n", "    foreach ($arr as $i)\n        $sum = $sum + $i;\n    return $sum;\n\
    }", "    // The sum with at most two digits from first k elements\n    $res =\
    \ 0;\n    foreach ($arr as $item) {\n        $res += $item % 100;\n        $res\
    \ %= 100;\n    }\n    return $res + $k;\n}", "    $result = 0;\n    foreach ($arr\
    \ as $val) {\n        $result += (1000 - $val) * floor($val / 1000);\n    }\n\
    \    return ($k > $result) ? $k : $result;\n}\n", "    sort($arr);\n    \n   \
    \ $sum = 0;\n    $j = 0;\n    \n    for ($i = $k; $i < count($arr); $i++) {\n\
    \        if ($j == $i || $arr[$j] - $arr[$i] > 9) {\n            $sum += $arr[$j];\n\
    \            $j++;\n        } else {\n            $sum += ($arr[$j] + $arr[$i]\
    \ - 9) * 10;\n            $j++;\n        }\n    }\n    \n    return $sum;\n}\n",
  "    if (empty($arr)) {\n        return 0;\n    }\n\n    $ans = 0;\n    foreach\
    \ ($arr as $el) {\n        if (is_int($el)) {\n            $ans += $el;\n    \
    \    }\n    }\n\n    return $ans + ($ans % (10 * $k));\n}\n", "    sort($arr);\n\
    \    $sum = 0;\n    $i = 0;\n    $j = $k - 1;\n    while ($i < $k) {\n       \
    \ $sum += $arr[$i];\n        if ($arr[$i] > $arr[$j]) {\n            $j = $i;\n\
    \        }\n        $i++;\n    }\n    return $sum;\n}\n</code>\n<|/ a |>\n<| c\
    \ |>\nNice solution. Thanks for taking the time to think about this. I appreciate\
    \ the time spent on this solution. Thanks for taking the time to help me out.\n\
    <|/ c |>\n<| a tags=php,algorithm dscore=1 |>\nA solution using array_slice()\n\
    <code>\n$arr = array(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n$k = 4;\n$max = 2;\n$sum\
    \ = 0;\nfor ($i = 0; $i < $k; $i++) {\n    $sum+= $arr[$i];\n    $slice = array_slice($arr,\
    \ $i, $max, true);\n    $max = count($slice) - 1;\n}\nvar_dump($sum, $arr);\n\
    </code>\n<|/ a |>\n<| c |>\nThis is a nice solution too. I appreciate the time\
    \ spent on this solution. Thanks for taking the time to help me out.\n<|/ c |>\n\
    <| a dscore=1 |>\nThis works, I think it also can be improved upon. \n<code>\n\
    $arr = array(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n\n$k = 4;\n\n$max = 2;\n\n$sum\
    \ = 0;\n\nfor($i = 0; $i < $k; $i++) {\n\n    $sum += $arr[$i];\n\n    $newarray\
    \ = array();\n\n    $j = 0;\n\n    for($x = $i; $x < $k; $x++){\n\n        $newarray[]\
    \ = $arr[$x];\n\n        $j++;\n\n    }\n\n    $newarray = array_slice($newarray,\
    \ $i, $max, true);\n\n    $max = count($newarray) - 1;\n\n    $arr = $newarray;\n\
    \n}\n\nvar_dump($sum, $arr);\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\n\
    Thanks for taking the time to help me out. Your solution works too. I appreciate\
    \ the time spent on this solution. Thanks for taking the time to help me out.\n\
    <|/ c |>\n<| a dscore=1 |>\nTry this...\n<code>\n<?php\n$arr = array(111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9);\n$k = 4;\n$max = 2;\n\n$i = count($arr) - $k;\nfor\
    \ ($i; $i >= 0; $i--)\n{\n", "    $sum = 0;\n    $n = count($arr);\n    for($i\
    \ = 0; $i < $n; ++$i) {\n        if($arr[$i] >= 100) {\n            return $sum;\n\
    \        }\n        if($arr[$i] < 10) {\n            $sum += $arr[$i];\n     \
    \   }\n        else {\n            $sum += $arr[$i] - 100;\n            $sum +=\
    \ $arr[$i] / 10;\n            $sum += $arr[$i] / 100;\n        }\n        if($sum\
    \ >= $k) {\n            return $sum;\n        }\n    }\n    return $sum;\n}",
  "    // write your code in PHP7.0\n    $result = array();\n    $size = count($arr);\n\
    \    for ($i=0; $i<$k; $i++) $result[] = $arr[$i];\n    for ($i=$k; $i<$size;\
    \ $i++) $result[] = $arr[$i];\n    \n    return $result;\n}\n</code>\nThis solution\
    \ is O(nk) time.\n<|/ a dscore=1 |>\n<| c |>\nThe complexity of the algorithm\
    \ above is O(nk). It takes n time to sort and n+k time to sum up. If it takes\
    \ 2n time then it will take 2n time. As I know, in array sorting and searching,\
    \ there are some operations which take O(n^2) time. So my solution is O(nk) time.\n\
    <|/ c |>\n<| c |>\nI think you're mistaken about the complexity of the sort operation.\
    \ If you're sorting an array of length n (not including the extra k elements),\
    \ you sort it to an array of length 2n. Then you iterate over this new array and\
    \ sum up all the numbers. The number of operations performed by your algorithm\
    \ is O(nk). There are n elements in the array. k is also n. That's what your complexity\
    \ says. Your algorithm is O(2n). The time complexity of the algorithm is O(nk).\
    \ You're ignoring the time taken to sort the array which is O(nlogn)\n<|/ c |>\n\
    <| c |>\n`k` is the number of elements to sum, `n` is the number of elements in\
    \ the original array. Sorting is not performed. The time complexity of my algorithm\
    \ is O(nk). It is O(nk) because `k` is fixed. If `k` is n (and not constant) then\
    \ my algorithm is O(nlogn).\n<|/ c |>\n<| c |>\nIt's true that sorting is O(nlogn).\
    \ But in the worst case scenario where k > n, the array is already sorted, and\
    \ you just need to sum up numbers from index 0 to k-1. The complexity of that\
    \ is O(n). So your algorithm is O(nk). That's not what OP asked for. OP asked\
    \ for an O(n) algorithm, that's why I said \"I guess it takes 2n time\"\n<|/ c\
    \ |>\n<| c |>\nThe time complexity of my algorithm is O(nk). But it is O(nlogn)\
    \ because k is fixed. If k is n (and not constant) then my algorithm is O(nlogn).\n\
    <|/ c |>\n<| a tags=php,arrays,algorithm |>\nThis was my ", "    if ($arr == NULL)\
    \ {\n        return NULL;\n    }\n\n    sort($arr);\n\n    // first k elements\
    \ of arr\n    $arr = array_slice($arr, 0, $k);\n\n    $res = 0;\n\n    // loop\
    \ through the rest of arr\n    foreach ($arr as $value) {\n        $res += $value;\n\
    \    }\n\n    return $res;\n}\n", "\t$sum = 0;\n\tfor ($i=0; $i<$k; $i++) {\n\t\
    \t$sum += $arr[$i];\n\t}\n\treturn $sum;\n}\n", "  foreach ($arr as $k => $v)\
    \ {\n    if ($k > $v) {\n      return 0;\n    }\n  }\n  return array_sum(array_slice($arr,\
    \ 0, $k + 1));\n}", "    sort($arr);\n    $sum = 0;\n    for ($i=0; $i<$k; $i++)\
    \ {\n        $sum += $arr[$i];\n    }\n    for ($i=0; $i<$k; $i++) {\n       \
    \ $sum += $arr[$i];\n    }\n    return $sum;\n}\n", "    $total = 0;\n    $max_index\
    \ = count($arr) - 1;\n\n    foreach ($arr as $key => $value) {\n        $total\
    \ += $value;\n        $index = $key + $k;\n        if ($index >= 0 && $index <\
    \ $max_index) {\n            if ($arr[$index] < 10) {\n                $total\
    \ += $arr[$index];\n            }\n        }\n    }\n\n    return $total;\n}\n",
  "    $sum = 0;\n    for ($i = 0; $i < $k; $i++) {\n        $sum += $arr[$i];\n \
    \   }\n\n    // If sum of elements with two digits are less than 10\n    // then\
    \ return sum\n    return $sum < 10 ? $sum : 0;\n}\n\n$arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9];\n$result = add_elements($arr, 4);", "    $result = $arr[0] +\
    \ $arr[1];\n    for ($i = 2; $i < $k; $i++) {\n        $result += $arr[$i];\n\
    \    }\n    return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nWhat if they give\
    \ the answer wrong, and they can only give the array size and the number of the\
    \ elements?\n<|/ c |>\n<| c |>\nI posted a solution with constraints for both\
    \ cases.\n<|/ c |>\n<| c |>\nYou need more practice with loops to get the answer,\
    \ which is not only different from the code I provided, but also different from\
    \ all the other answers. I strongly recommend that you practice with loops.\n\
    <|/ c |>\n<| c |>\nI totally agree with you, it's really hard to learn it by trial\
    \ and error. Thank you for your help\n<|/ c |>\n<| c |>\nThank you for your help\
    \ I hope this can help others\n<|/ c |>\n<| a tags=algorithm,php |>\nHere's a\
    \ solution based on recursion, which, in my opinion, is more elegant.\n<code>\n\
    <?php", "    if ($k > count($arr)) return 0;\n    if ($k == 0) return $arr[0];\n\
    \    $sum = 0;\n    foreach ($arr as $x) {\n        $sum += abs($x) % 10;\n  \
    \  }\n    return $sum + $arr[$k-1] % 10 + $arr[$k-2] % 10;\n}\n</code>\n<|/ a\
    \ dscore=4 tags=sorting,algorithm,big-o |>\n<| c |>\nNice and simple.  I did a\
    \ quick test on [this code](https://gist.github.com/anonymous/1584a16d8f91f9cfaeb2)\
    \ using an increasing array of 1000 random numbers and it did it in 0.05 seconds.\n\
    <|/ c |>\n<| c |>\nThis is the most clear answer, since it clearly shows the proof\
    \ of correctness and gives intuition for how the algorithm works (if you'd want\
    \ to do it in code, say so :) ).\n<|/ c |>\n<| a dscore=3 |>\nAs the others have\
    \ said, this can be done in O(n). Here's a solution using dynamic programming.\
    \ It's not the most efficient, but is easy to understand and implement - you can\
    \ probably do it in linear time using a more sophisticated data structure.\nThe\
    \ idea is that you need to remember the sum for each k. Let's say the sum for\
    \ k=1 is S, then the sum for k=2 is S + T, and so on.\nThe first column of S will\
    \ hold the sum for all numbers up to k=1:\n<code>\nS[0]=arr[0]\nS[1]=arr[0]+arr[1]\n\
    S[2]=arr[0]+arr[1]+arr[2]\n...\nS[n-1]=arr[n-1]+arr[n-2]+arr[n-3]\n</code>\nThe\
    \ second column of S will hold the sum for all numbers up to k=2:\n<code>\nS[0]+S[1]=arr[0]+arr[1]\n\
    S[0]+S[1]+arr[2]=arr[0]+arr[1]+arr[2]\n...\nS[0]+S[1]+arr[n-1]=arr[0]+arr[1]+arr[n-2]+arr[n-3]\n\
    </code>\n...\nS[n-1]+S[n-2]+S[n-3]=arr[n-1]+arr[n-2]+arr[n-3]\nSo you get the\
    \ following matrix:\n<code>\n    0 1 2 3 4 5 6 7 8 9 10\nS[0] 0 1 2 3 4 5 6 7\
    \ 8 9 10\nS[1] 0 1 1 2 3 4 5 6 7 8 9\nS[2] 0 1 1 1 2 3 4 5 6 7 6\nS", "    \n\
    \    $sum = 0;\n\n    foreach ($arr as $element) {\n        $sum += $element;\n\
    \    }\n\n    return $sum;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for posting\
    \ that!\n<|/ c |>\n<| c |>\nThanks for posting that!\n<|/ c |>\n<| a tags=recursion,php,arrays,algorithm\
    \ |>\nThe brute force approach to this is to iterate through all possible sums,\
    \ and then iterate through all possible subarrays of that sum.  If you find a\
    \ subarray with k members in it, then you know that your solution is the correct\
    \ solution.\n<code>", "    $sum = 0;\n    foreach ($arr as $val) {\n        $sum\
    \ += $val;\n        $sum += $val % 10;\n    }\n    return $sum;\n}\n", "    //\
    \ Your code here\n    return $total = 0;\n}", "    $sum = 0;\n    $size = count($arr);\n\
    \n    for($i = 0; $i < $size; $i++) {\n        if($i != $k) {\n            $sum\
    \ = $sum + $arr[$i];\n        } else {\n            $sum = $sum + $arr[$i] + $arr[$size\
    \ - 1] + $arr[$size - 2];\n        }\n    }\n\n    return $sum;\n}\n", "    $result\
    \ = $arr[0];\n    foreach ($arr as $key => $value) {\n        if ($key <= $k)\
    \ {\n            $result -= $value;\n        } else {\n            $result +=\
    \ $value;\n        }\n    }\n    return $result;\n}\n", "    $sum = 0;\n    foreach\
    \ ($arr as $element) {\n        $sum += $element;\n        if ($sum >= 10) {\n\
    \            $sum += $sum % 10;\n        }\n    }\n    return $sum + $arr[$k];\n\
    }", "    $sum = 0;\n    foreach ($arr as $el) {\n        $sum += $el % 10;\n \
    \   }\n    return $sum + $arr[$k];\n}\n</code>\n<|/ a |>\n<| c |>\nThat is too\
    \ slow. Try adding more integers and more digits.\n<|/ c |>\n<| c |>\nThe question\
    \ says this is an `O(n)` solution, which I believe is a very correct statement.\n\
    <|/ c |>\n<| c |>\nThis code actually performs badly. Because you are taking the\
    \ modulo of the array and adding it to the sum for each element, it requires `O(n)`\
    \ iterations, and you perform it `n / k` times, giving a total of `O(k)` iterations\
    \ per `O(n)` operation. I don't think it is actually `O(n)`.\n<|/ c |>\n<| c |>\n\
    - I believe it is. Because the array is being split into two halves, there are\
    \ `k/2` elements in the first half, then there are `n - k/2` elements in the second\
    \ half. The second half is then added together to get a total of `n` iterations.\
    \ So the entire time complexity is `O(n)`.\n<|/ c |>\n<| c |>\n- Sorry, that wasn't\
    \ clear to me from your comment. I've updated the answer with a more detailed\
    \ explanation.\n<|/ c |>\n<| a |>\nA solution where we only use division:\n<code>\n\
    <?php\n$array = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\n$k = 4;\n$sum = 0;\nforeach($array\
    \ as $el){\n    $sum += ($el % 10) + ($el / 10);\n}\necho $sum;\n</code>\n<|/\
    \ a tags=arrays,php dscore=2 |>\n<| c |>\nYes, this is very fast, but it has a\
    \ downside: It doesn't handle `0`s.\n<|/ c |>\n<| c |>\nI know, that's why I included\
    \ a clause in the answer.\n<|/ c |>\n<| c |>\nYes, but that was not clear from\
    \ your answer. Maybe you could clarify the statement in your answer?\n<|/ c |>\n\
    <| c |>\nI added a clause in the answer as you suggested.\n<|/ c |>\n<| a dscore=1\
    \ tags=arrays,php |>\nThe other solutions work well for most uses, but they are\
    \ very slow (O(n)). The way we do it is to divide the problem in half, add the\
    \ even elements to the sum, then add the odd elements to the sum. \nIf we have\
    \ a solution for ", "    $result = 0;\n    foreach ($arr as $n) {\n        $result\
    \ += $n;\n        if ($result > 999999) {\n            $result = 0;\n        }\n\
    \        if ($result >= 100) {\n            break;\n        }\n    }\n    return\
    \ $result;\n}\n</code>\nFor reference, I've also written a solution which uses\
    \ recursion to solve the problem without using more than O(k) space and O(n) time.\n\
    <code>\n<?php\n", "    $res = $arr[0];\n    for($i = 1; $i <= $k; $i++) {\n  \
    \      $res += $arr[$i];\n    }\n    return $res;\n}\n", "    $sum = 0;\n    $arr\
    \ = array_slice($arr, 0, $k);\n    for ($i = 0; $i < count($arr); $i++) {\n  \
    \      $sum = $sum + $arr[$i];\n    }\n    return $sum;\n}\n", "  $sum = 0;\n\
    \  foreach ($arr as $element) {\n    $sum += $element % 10;\n    $sum *= ($element\
    \ < 10) ? $k : $k;\n    $sum += $element / 10;\n  }\n  return $sum;\n}\n", " \
    \   $ans = 0;\n    foreach ($arr as $e) {\n        if ($e < 100 || $e > 999) {\n\
    \            throw new RangeException('Array contains elements out of range (between\
    \ 100 and 999): ' . print_r($arr, 1));\n        }\n        $ans += $e;\n     \
    \   if ($k <= $ans) {\n            break;\n        }\n        $ans -= ($e % 10);\n\
    \        $ans *= 10;\n    }\n    return $ans;\n}\n</code>\n<|/ a tags=php,algorithm\
    \ |>\n<| a dscore=0 |>\nThis is probably not the most efficient solution, but\
    \ I think it will work well in most cases.\nFirst you need to know how many numbers\
    \ you're going to have.  In this case, that's $num_elements.  Then, for each number\
    \ you're going to need, you need to know how many numbers you still need to use\
    \ up.  In this case, that's $remaining_elements.  After each iteration of the\
    \ loop, you'll want to know what your new number will be.  If you choose $new_number\
    \ to be the number you're using up and $remaining_elements is 0, then the number\
    \ you're going to need will be $num_elements-$new_number.\nSo the algorithm is\
    \ something like this (this is pseudocode, you'll have to convert it to PHP):\n\
    <code>\n$num_elements = $arr[0];\n\n$remaining_elements = count($arr) - 1;\n\n\
    for ($i = 1; $i < $num_elements; $i++) {\n    $new_number = $num_elements - $i;\n\
    \n    $remaining_elements--;\n\n    $new_value = $arr[$new_number];\n}\n</code>\n\
    <|/ a tags=php,algorithm |>\n<| a |>\n<code>\npublic function sum($arr) {\n  \
    \  $new_number = 0;\n    $sum = 0;\n    for($i=0; $i<sizeof($arr); $i++)\n   \
    \ {\n        $new_number = $new_number + $arr[$i];\n        if($new_number < 10)\n\
    \        {\n            $sum += $new_number;\n            $new_number = 0;\n \
    \       }\n        else\n        {\n            $sum += ($new_number % 10);\n\
    \            $new_number /= 10;\n        }\n    }\n    return $sum;\n}\n</code>\n\
    <|/ a tags=php,algorithm dscore=0 |>\n<| a tags=php,algorithm |>\n<code>\npublic\
    \ function sumOfDigits($arr, $maxLength) {\n    $result = 0;\n\n    foreach ($arr\
    \ as $e) {\n        if ($maxLength === 1) {\n            $result += $e;\n    \
    \    } elseif ($maxLength > 1 && $maxLength < $e) {\n            $result = $result\
    \ + $e % 10;\n            $e = (int)$e / 10;\n            $result = $result +\
    \ $e;\n        } elseif ($max", "    $sum = 0;\n    foreach ($arr as $elem) {\n\
    \        $sum += $elem % 10;\n        if ($sum > 1) {\n            $sum -= $elem\
    \ % 10;\n        }\n        if ($sum >= 2) {\n            $sum += $elem % 10;\n\
    \        }\n    }\n    return $sum % 10 === 0 ? $sum : 0;\n}", "    $result =\
    \ $arr[0];\n    for ($i = 1; $i < $k; $i++) {\n        $result += $arr[$i];\n\
    \    }\n    return $result;\n}\n", "    $sum = 0;\n    for ($i = $k; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] >= 1000) {\n            $sum += $arr[$i];\n  \
    \      }\n        $sum += $arr[$i] / 10;\n    }\n    return $sum;\n}\n</code>\n\
    Output:\n<code>\n10\n</code>\n<|/ a |>\n<| c |>\nThis isn't the exact problem,\
    \ the OP wants the sum of all the numbers with two digits. Yours finds all the\
    \ numbers with at least two digits.\n<|/ c |>\n<| c |>\nOh right! I didn't read\
    \ the question correctly, sorry. I've edited my answer accordingly.\n<|/ c |>\n\
    <| c |>\nI see how this could be solved now, but your solution isn't going to\
    \ scale very well, unless you use memoization.\n<|/ c |>\n<| c |>\nYou're right,\
    \ it isn't. I tested on a larger array and it took about 1min and 40 seconds to\
    \ run on my laptop. I'm still thinking about a more efficient solution, but I'll\
    \ leave it to OP to figure it out.\n<|/ c |>\n<| c |>\nYeah, the OP needs to clarify\
    \ what he means by \"two digit number\".\n<|/ c |>\n<| a tags=php,algorithm |>\n\
    Use array_count_values to get the frequency of each number and then filter out\
    \ the ones that have fewer than two digits:\n<code>\n$input = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9];\n\n$result = array_sum(array_filter($input, function($x) use\
    \ ($input) {\n    return count(array_count_values(str_split($x))) > 2;\n}));\n\
    </code>\nOutput:\n<code>\n24\n</code>\nDemo on 3v4l.org\n<|/ a dscore=2 |>\n<|\
    \ c |>\nNice, you don't need to use the loops here.\n<|/ c |>\n<| a tags=php,algorithm\
    \ |>\nYou can use array_count_values() to count the occurrences of each number\
    \ in $arr, and then array_filter() to filter out those that have fewer than 2\
    \ occurrences. You don't have to loop over every element in $arr either:\n<code>\n\
    $arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\n$counts = array_count_values($arr);\n\
    $twoDigitNumbers = array_filter($counts, function($count) {\n    return $count\
    \ > 1;\n});\n\necho array_sum($twoDigitNumbers);\n</code>\nOutput:\n<code>\n24\n\
    </code>\nDemo on 3v4l.org\n<|/ a dscore=1 |>\n<| a d", "    $sum = 0;\n    for\
    \ ($i=0; $i < $k; $i++){\n        $sum = $sum + $arr[$i];\n    }\n    return $sum;\n\
    }\n", "    $result = array();\n    for ($i=0; $i<$k; $i++) {\n        $result[]\
    \ = $arr[$i];\n    }\n    $sum = array_sum($result);\n    return $sum;\n}\n",
  "    $sum = 0;\n    foreach ($arr as $v) {\n        if ($k <= 0) {\n           \
    \ break;\n        }\n        $sum = $sum + $v;\n        $k--;\n    }\n    return\
    \ $sum;\n}", "    $sum = 0;\n    $len = count($arr);\n    $max = min($k + 1, $len);\n\
    \    for ($i = 0; $i < $max; $i++) {\n        $sum += $arr[$i];\n    }\n    return\
    \ $sum;\n}\n", "    $ans = 0;\n    $len = count($arr);\n\n    for($i = 0; $i <\
    \ $len; $i++) {\n        if($i < $k) {\n            $ans += $arr[$i];\n      \
    \  }\n        if($i > $k) {\n            $ans += ($arr[$i] - $arr[$k]);\n    \
    \    }\n    }\n\n    return $ans;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>",
  "    $result = 0;\n    $len = count($arr);\n    if ($len < $k) \n        return\
    \ 0;\n    for ($i = 0; $i < $k; $i++) {\n        if ($i == 0)\n            $result\
    \ = $arr[$i];\n        else\n            $result = $result + $arr[$i];\n    }\n\
    \    for ($i = $k; $i < $len; $i++) {\n        $result = $result + $arr[$i];\n\
    \    }\n    return $result;\n}", "    $result = $arr[0];\n    for ($i = 1; $i\
    \ < $k; ++$i) {\n        $result = $result + $arr[$i];\n    }\n    return $result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nWow, thank you so much! I never thought to sort\
    \ the array and just keep adding up until I hit the kth. Very clever and efficient!\n\
    <|/ c |>\n<| c |>\nI think this is a great solution, but I do have one question.\
    \ I understand how you did it, but I don't understand how you used the algorithm\
    \ to solve this problem. Any chance you can elaborate a bit on how you came to\
    \ this?\n<|/ c |>\n<| c |>\nSorry for not responding sooner, but I was sick. I've\
    \ written an explanation of a solution I just came up with.\n<|/ c |>\n<| c |>\n\
    I still have a question. How can you find the kth element in an array? I don't\
    \ see how your program can do that. I am also a beginner, so I'm trying to understand\
    \ what you're saying by \"kth element in an array\". I'm sorry if I'm not understanding\
    \ your explanation. Thanks for the help!\n<|/ c |>\n<| c |>\nYou're welcome. I've\
    \ added a link to the Wikipedia article on [quicksort](https://en.wikipedia.org/wiki/Quicksort)\
    \ for more explanation and an overview of its applications in programming. I hope\
    \ it helps!\n<|/ c |>\n<| a dscore=1 |>\nI came up with this solution. Using Quicksort,\
    \ you can find the kth element fairly quickly by picking pivot in the middle and\
    \ partitioning the list around the pivot. When doing so, you're guaranteed that\
    \ the kth element of the array is the kth element of the list formed by that pivot.\n\
    I wrote a small test case in Python.\n<code>\ndef kthElement( nums, k ):\n   \
    \ quickSort(nums)\n    nums.sort(reverse=True)\n    return nums[k-1]\n\ndef quickSort(\
    \ nums ):\n    if len(nums) <= 1:\n        return nums\n    else:\n        pivot\
    \ = nums[len(nums)//2]\n        less = []\n        greater = []\n        for n\
    \ in nums:\n            if n <= pivot:\n                less.append(n)\n     \
    \       else:\n                greater.append(n)\n        quickSort(less)\n  \
    \      quickSort(greater)\n        return less\n</code>\n<|/ a tags=arrays,algorithm,php,sorting\
    \ |>\n<| c |>\nThis assumes that you've got an O(n log n", "    $res = 0;\n  \
    \  $count = 1;\n    $max = $arr[0];\n    foreach ($arr as $value) {\n        if\
    \ ($value > $max) {\n            $max = $value;\n        }\n        if ($count\
    \ > $k) {\n            break;\n        }\n        $res += $value;\n        $count++;\n\
    \    }\n    return $res;\n}\n</code>\n<|/ a |>\n<| a tags=php,algorithm |>\nThe\
    \ solution is similar to that of user3482182\n<code>\n<?php", "    sort($arr);\n\
    \    $result = 0;\n    foreach ($arr as $index => $element) {\n        if ($index\
    \ >= $k) {\n            continue;\n        }\n        $result += (10 * $element)\
    \ + $arr[$index + 1];\n    }\n    return $result;\n}\n", "    $sum = 0;\n    $length\
    \ = count($arr);\n    for ($i = 0; $i < $length; ++$i) {\n        if ($sum > 9)\
    \ {\n            break;\n        }\n        $sum = ($sum + $arr[$i]) % 10;\n \
    \   }\n    return ($sum * 10 + $arr[$length - $k]) % 10;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
