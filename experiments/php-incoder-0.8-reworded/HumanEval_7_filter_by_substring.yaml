name: HumanEval_7_filter_by_substring
language: php
prompt: "<?php\n// Filter an input array of strings only for ones that contain given\
  \ substring\n// >>> filter_by_substring(array(), \"a\")\n// array()\n// >>> filter_by_substring(array(\"\
  abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n// array(\"abc\", \"bacd\", \"array\"\
  )\nfunction filter_by_substring($strings, $substring) {\n"
tests: "function candidate(...$args) {\n    return filter_by_substring(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"\
  asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\",\
  \ \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
  xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xx\") !== array(\"\
  xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(\"grunt\", \"trumpet\", \"prune\", \"gruesome\"),\
  \ \"run\") !== array(\"grunt\", \"prune\")) { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["  if ( is_array($strings) ) {\n    $array = array();\n    foreach ($strings\
    \ as $k => $v) {\n      if (strpos($v, $substring) !== false) {\n        $array[$k]\
    \ = $v;\n      }\n    }\n    return $array;\n  }\n  return array();\n}\n</code>\n\
    <|/ a dscore=2 tags=arrays,php |>\n<| a tags=arrays,php |>\nHere's a function\
    \ that will find an exact match in an array, and return the key.  I tried to make\
    \ it generic enough to allow you to search for multiple substrings (hence the\
    \ array destructuring in the function).\n<code>", "    $output = array();\n  \
    \  foreach ($strings as $string) {\n        if (strpos($string, $substring) !==\
    \ false) {\n            $output[] = $string;\n        }\n    }\n    return $output;\n\
    }\n", "  return array_filter(\n    $strings,\n    function($string) {\n      return\
    \ strpos($string, $substring) !== FALSE;\n    }\n  );\n}\n</code>\nAt the end\
    \ you just need to call filter_by_substring($strings, \"a\").\n<|/ a dscore=0\
    \ |>\n<| a tags=arrays,php |>\n<code>", "    $result = array();\n    foreach ($strings\
    \ as $string) {\n        if (strpos($string, $substring) !== false) {\n      \
    \      $result[] = $string;\n        }\n    }\n    return $result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Unfortunately, I did not understand\
    \ the solution completely yet. I have to admit I find it a bit confusing because\
    \ I do not know what to input in there (I do not know what to call the function\
    \ and where to put it in my code). I have edited my original question and added\
    \ my code (maybe that helps). Thanks again!\n<|/ c |>\n<| c |>\nI added a complete\
    \ example and an explanation of my code. Hopefully it helps.\n<|/ c |>\n<| a tags=mysql,php\
    \ dscore=0 |>\nHere's a version that doesn't use regex. I think it's more readable\
    \ and easier to maintain that way:\n<code>\n<?php\n", "    $result = array();\n\
    \    foreach ($strings as $string) {\n        if (strpos($string, $substring)\
    \ !== false) {\n            $result[] = $string;\n        }\n    }\n    return\
    \ $result;\n}\n", "  return array_filter($strings, function($string) use ($substring)\
    \ {\n    return strpos($string, $substring) !== FALSE;\n  });\n}\n</code>\nIf\
    \ you're looking for performance, I'd recommend you look into using str_pos()\
    \ instead of strpos() (since str_pos() is a native PHP function), which should\
    \ speed things up a little bit.\n<|/ a tags=php |>\n<| c |>\nI did this a long\
    \ time ago, but forgot to post the solution.  It's been a long time, so I'll post\
    \ it now - it would be helpful to have it here for reference.\n<|/ c |>\n<| a\
    \ tags=php dscore=1 |>\nI created a function that can search for anything you\
    \ want, and return the array of the words that matched:\n<code>\n$search_string\
    \ = 'car';\n$array = array(\n  'car love toyota',\n  'my car are awesome',\n \
    \ 'my car are not very good',\n  'my car is the best.'\n);\n", "  if (is_null($strings)\
    \ || is_null($substring)) {\n    return $strings;\n  }\n\n  $filtered_strings\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered_strings[] = $string;\n    }\n  }\n\n  return $filtered_strings;\n\
    }\n", "    $strings = array_filter($strings, function($string) use ($substring)\
    \ {\n        return (strpos($string, $substring) !== false);\n    });\n    return\
    \ array_filter($strings, function($string) {\n        return (strlen($string)\
    \ > 0);\n    });\n}", "    $matches = array();\n    $found_substring = false;\n\
    \n    // Loop through each string\n    foreach ($strings as $string) {\n     \
    \   // If this string contains the substring\n        if (strpos($string, $substring)\
    \ !== false) {\n            // Keep track of whether this substring was found\n\
    \            $found_substring = true;\n\n            // Add this string to the\
    \ array\n            $matches[] = $string;\n        }\n    }\n\n    // Return\
    \ an empty array if no substring was found\n    if (! $found_substring) {\n  \
    \      return array();\n    }\n\n    // Return the filtered array of strings\n\
    \    return $matches;\n}\n</code>\nNote that this is NOT a full PHP solution,\
    \ but just a simple script that can easily be integrated into your project.\n\
    <|/ a tags=php,arrays |>\n<| a dscore=2 |>\nYou can use array_filter:\n<code>\n\
    $array = array('ab', 'cd', 'ef');\n$filtered = array_filter($array, function($el)\
    \ {\n    return strpos($el, 'b') === false;\n});\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=2 |>\nUse array_filter\n<code>", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n", "    $result = array();\n    foreach ($strings as $string)\
    \ {\n        if (strpos($string, $substring) !== FALSE) {\n            $result[]\
    \ = $string;\n        }\n    }\n    return $result;\n}\n", "    if (!is_array($strings))\
    \ return $strings;\n    $filtered = array();\n    foreach ($strings as $string)\
    \ {\n        if (strpos($string, $substring) !== false) $filtered[] = $string;\n\
    \    }\n    return $filtered;\n}\n", "    $matches = array();\n    foreach($strings\
    \ as $string) {\n        if(strpos($string, $substring) !== false) {\n       \
    \     $matches[] = $string;\n        }\n    }\n    return $matches;\n}\n", "\t\
    foreach ($strings as $i => $string) {\n\t\tif (strpos($string, $substring) !==\
    \ false) {\n\t\t\tunset($strings[$i]);\n\t\t}\n\t}\n\treturn $strings;\n}\n",
  "  return array_filter(\n    $strings,\n    function ($string) use ($substring)\
    \ {\n      return strpos($string, $substring) !== false;\n    }\n  );\n}", " \
    \ return array_filter($strings, function ($string) use ($substring) {\n    return\
    \ strpos($string, $substring) !== false;\n  });\n}\n", "  $filtered_strings =\
    \ array();\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered_strings[] = $string;\n    }\n  }\n  return $filtered_strings;\n\
    }\n", "    $new_strings = array();\n    foreach ($strings as $string) {\n    \
    \    if (strpos($string, $substring) !== false) {\n            $new_strings[]\
    \ = $string;\n        }\n    }\n    return $new_strings;\n}\n", "  $foundStrings\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== FALSE) {\n      $foundStrings[] = $string;\n    }\n  }\n  return $foundStrings;\n\
    }", "    return array_filter($strings, function($s) use ($substring) {\n     \
    \   return strpos($s, $substring) !== false;\n    });\n}\n</code>\n<|/ a |>\n\
    <| c |>\nI understand that this solution only works for one dimension. How would\
    \ this work for more than one dimension? I'm looking for a way to get all results\
    \ that satisfy all dimensions.\n<|/ c |>\n<| c |>\nFor multiple dimensions you\
    \ can always use array_filter in combination with anonymous function\n<|/ c |>\n\
    <| a |>\nI came up with a function that takes in an assoc. array and an array\
    \ of dimensions. I then filter only those values in the array that are in one\
    \ of the dimensions.\n<code>\n$data2 = filter_dimension($data, ['first_name','last_name','email','phone']);\n",
  "  // If no substring, return all\n  if (empty($substring)) {\n    return $strings;\n\
    \  }\n\n  // If $strings isn't an array or is null, return an empty array\n  if\
    \ (!is_array($strings) || count($strings) === 0) {\n    return array();\n  }\n\
    \n  // If $substring isn't a string or is null, return an empty array\n  if (!is_string($substring)\
    \ || count($substring) === 0) {\n    return array();\n  }\n\n  // If $substring\
    \ is a string, make an array of substrings\n  $substrings = explode($substring);\n\
    \n  // Loop through $strings\n  foreach ($strings as $string) {\n    // If $string\
    \ is not an array, return an empty array\n    if (!is_array($string)) {\n    \
    \  return array();\n    }\n\n    // If $substring is an empty array, return $string\n\
    \    if (empty($substrings)) {\n      return $string;\n    }\n\n    // Loop through\
    \ $substrings\n    foreach ($substrings as $substring) {\n      // If $string\
    \ contains $substring, return $string\n      if (strpos($string, $substring) !==\
    \ false) {\n        return $string;\n      }\n    }\n  }\n\n  // If no string\
    \ was found in any $strings or $substrings, return an empty array\n  return array();\n\
    }\n", "  return array_filter($strings, function ($str) use ($substring) {\n  \
    \  return strpos($str, $substring) !== FALSE;\n  });\n}", "  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== false) {\n      $newstrings[]\
    \ = $string;\n    }\n  }\n  return $newstrings;\n}", "  return array_filter($strings,\
    \ function ($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== FALSE;\n  });\n}\n", "  $filtered = array();\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== FALSE) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}", "  return array_filter($strings, function\
    \ ($string) use ($substring) {\n    return strpos($string, $substring) !== false;\n\
    \  });\n}\n</code>\n<|/ a tags=performance,php,arrays,string |>\n<| a dscore=1\
    \ tags=performance,php,arrays,string |>\nYou could also just create a class that\
    \ would do this.\n<code>\n<?php\nclass StringFilter\n{\n    private $strings;\n\
    \n    public function __construct($strings)\n    {\n        $this->strings = $strings;\n\
    \    }\n\n    public function filter($search)\n    {\n        $search = strtolower($search);\n\
    \        $filterdStrings = array();\n\n        foreach ($this->strings as $string)\
    \ {\n            $stringToLower = strtolower($string);\n\n            if ($stringToLower\
    \ == $search) {\n                $filterdStrings[] = $string;\n            }\n\
    \        }\n\n        return $filterdStrings;\n    }\n}\n</code>\nThen call it\
    \ like this\n<code>\n$filter = new StringFilter(array(\"abc\", \"bacd\", \"cde\"\
    , \"array\"));\nprint_r($filter->filter(\"a\"));\n</code>\nIt will also work with\
    \ arrays of strings.\n<|/ a |>\n<| a tags=performance,php,arrays,string |>\nUsing\
    \ array_filter() with preg_match() is the fastest in my test:\n<code>", "  if\
    \ (!empty($strings)) {\n    $filtered = array();\n    foreach ($strings as $str)\
    \ {\n      if (strpos($str, $substring) !== false) {\n        $filtered[] = $str;\n\
    \      }\n    }\n    return $filtered;\n  }\n}\n", "  $filtered_strings = array();\n\
    \n  // Loop through all given strings\n  foreach ($strings as $string) {\n   \
    \ // Check if the given string contains the substring we're looking for\n    if\
    \ (strpos($string, $substring) !== FALSE) {\n      // If yes, add it to the list\n\
    \      $filtered_strings[] = $string;\n    }\n  }\n\n  // Return the list of strings\
    \ containing only the substring\n  return $filtered_strings;\n}\n</code>\nYou\
    \ can then use this function in your template like this:\n<code>\n<?php echo filter_by_substring(array(\"\
    abc\", \"bacd\", \"cde\", \"array\"), \"a\"); ?>\n</code>\n<|/ a tags=php,arrays,strpos,preg-replace\
    \ |>\n<| a |>\n<code>\n<?php\n\n$string = 'hello';\n\n$array = array('h', 'e',\
    \ 'l', 'l', 'o');\nforeach ($array as $key => $value) {\n    if (strpos($string,\
    \ $value) !== FALSE) {\n        echo $value . \" found at \" . $key . \"<br>\"\
    ;\n    }\n}\n", "  return array_filter($strings, function($string) use ($substring)\
    \ {\n    return strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nHaha, I love this solution. Works very well.\n<|/ c\
    \ |>\n<| c |>\nThis solution has serious problems if you want to use it with a\
    \ huge amount of data (in our case more than 100,000 rows of data from a DB) and\
    \ the string you're searching for is long.\n<|/ c |>\n<| c |>\nFor me it doesnt\
    \ work if my search string is too short: for example it returns \"d\" as a result.\
    \ Is it a bug?\n<|/ c |>\n<| c |>\nIf this function is used with arrays, it will\
    \ create unnecessary memory consumption, use it with caution.\n<|/ c |>\n<| c\
    \ |>\nThis one is even better than the accepted answer. This should be accepted.\n\
    <|/ c |>\n<| a tags=arrays,php |>\n<code>\n$a = 'abcdefghijklmnopqrstuvwxyz';\n\
    $str = 'ae';\n$b = str_replace($a, '', strstr($a, $str));\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis is an elegant solution (even if it does look like it uses\
    \ more resources). It also keeps the original string intact, but adds a very simple\
    \ extra step for people wanting to do something similar to a \"select all instances\
    \ of a string\" thing.\n<|/ c |>\n<| c |>\nThis is the simplest and easiest to\
    \ understand solution for this question.\n<|/ c |>\n<| c |>\nI like this one the\
    \ best. Simple and easy to understand and works well. Thanks!\n<|/ c |>\n<| c\
    \ |>\nI love this solution, but be careful when using it with strings that can\
    \ contain special characters. Make sure to either escape them or use preg_replace.\n\
    <|/ c |>\n<| c |>\nWhat would you call this function? It's too close to `str_replace()`.\
    \ It's just an alias of `str_replace()`\n<|/ c |>\n<| a tags=arrays,php dscore=4\
    \ |>\nThe solution using array_filter() is perfect if your array is not very large\
    \ because it uses less memory - and you don't have to create a temporary variable\
    \ for searching each string individually:\n<code>", "  if (is_array($strings))\
    \ {\n    return array_filter($strings, function($s) use ($substring) {\n     \
    \ return strpos($s, $substring) !== FALSE;\n    });\n  }\n  return $strings;\n\
    }\n</code>\n<|/ a tags=php,arrays,substring |>\n<| a tags=php,arrays,substring\
    \ dscore=1 |>\nI've taken the liberty to improve the code of the accepted answer.\
    \ \nIt works well and can be extended with more complex substring matching (including\
    \ wildcards) and is able to return all matches. \nThe function returns an array\
    \ with the matches and the original array (for further manipulation).\n<code>",
  "    return array_filter($strings, function($string) use ($substring) {\n      \
    \  return strpos($string, $substring) !== FALSE;\n    });\n}\n</code>\n<|/ a dscore=5\
    \ tags=arrays,php |>\n<| c |>\nI wrote a function to do this, but it only returned\
    \ the array elements that contained my substring. I needed the array elements\
    \ *which contained my substring* as well.\n<|/ c |>\n<| c |>\n`array_filter` can\
    \ take callback in argument, so you can add more logic for that.\n<|/ c |>\n<|\
    \ c |>\nThanks for suggesting array_filter, I didn't know about that. I updated\
    \ my answer with my function which does this.\n<|/ c |>\n<| c |>\nI believe that\
    \ `strpos` does not care about case so you can also use `stripos`.\n<|/ c |>\n\
    <| a tags=arrays,php |>\n<code>", "    $filtered = array();\n    foreach ($strings\
    \ as $s) {\n        if (strpos($s, $substring) !== false) {\n            $filtered[]\
    \ = $s;\n        }\n    }\n    return $filtered;\n}\n", "  return array_filter($strings,\
    \ function ($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n", "  return array_filter($strings, function ($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a |>\n<| a dscore=2 |>\nFor a PHP 7.0 solution, you can use array_filter\
    \ with an anonymous function instead of using array_map. So your method becomes:\n\
    <code>", "  foreach($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $strings[] = $string;\n    }\n  }\n  return $strings;\n}",
  "\tforeach ($strings as &$string) {\n\t\tif (strpos($string, $substring) !== false)\
    \ {\n\t\t\t$strings[] = $string;\n\t\t}\n\t}\n\treturn $strings;\n}", "  return\
    \ array_filter($strings, function($string) use ($substring) {\n    return strpos($string,\
    \ $substring) !== false;\n  });\n}\n</code>\n<|/ a |>\n<| c |>\nThe question was\
    \ about how to get rid of non-matching substrings, not how to remove substrings\
    \ from the array.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$strings = [\n \
    \   'one',\n    'two',\n    'three',\n    'four',\n    'five',\n    'six'\n];\n\
    \n$filteredStrings = array_filter($strings, function($string) {\n    return strpos($string,\
    \ 'one') === false;\n});\n\nvar_dump($filteredStrings);\n</code>\nOutput:\n<code>\n\
    array(3) {\n  [0]=>\n  string(3) \"two\"\n  [1]=>\n  string(3) \"three\"\n  [2]=>\n\
    \  string(3) \"six\"\n}\n</code>\n<|/ a tags=arrays,php,substring,string |>\n\
    <| c |>\nThis only works when `$string` is a single string. But it's an array,\
    \ so this does not work.\n<|/ c |>\n<| c |>\nThis does not answer the question\
    \ asked. See the answer of\n<|/ c |>\n<| a dscore=0 tags=arrays,php,substring,string\
    \ |>\n<code>\n$strings = [\"one\", \"two\", \"three\", \"four\", \"five\", \"\
    six\", \"seven\"];\n$filteredStrings = array_filter($strings, function($string)\
    \ {\n    return strpos($string, 'one') === false;\n});\n\nvar_dump($filteredStrings);\n\
    </code>\n<|/ a |>\n<| a tags=arrays,php,substring,string dscore=0 |>\nYou can\
    \ try this:\n<code>\n$strings = [\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\"];\n$substring = \"one\";\n$result = array_filter($strings,\
    \ function($a) use ($substring) {\n    return strpos($a, $substring) === false;\n\
    });\n</code>\n<|/ a |>\n<| a dscore=0 |>\nI hope this code helps you:\n<code>\n\
    <?php\n$strings = [\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n\
    \    'six'\n];\n\n$filteredStrings = array_filter($strings, function($string)\
    \ {\n    return !strpos($string, 'one');\n});\n\nvar_dump($filteredStrings);\n\
    </code>\nOutput\n<code>\narray(3) {\n  [0]=>\n  string(3) \"two\"", "    return\
    \ array_filter($strings, function($string) use ($substring) {\n        return\
    \ (strpos($string, $substring) !== FALSE);\n    });\n}", "    $new_strings = array();\n\
    \    foreach($strings as $s) {\n        if(strpos($s, $substring) !== false) {\n\
    \            $new_strings[] = $s;\n        }\n    }\n    return $new_strings;\n\
    }\n</code>\nThe result is not really the same as you expected, but it does what\
    \ you ask:\n<code>\n<?php", "  $filtered = array();\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== false) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}", "  return array_filter($strings, function($string)\
    \ {\n    return strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a |>\nI made this script for me. It will remove all occurrences\
    \ of \"string\" in $str. It uses regular expressions.\n<code>\n$str = array('string',\
    \ 'string', 'string');\n", "  $result = array();\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== false) {\n      $result[] = $string;\n\
    \    }\n  }\n  return $result;\n}\n", "  return array_filter($strings, function\
    \ ($string) use ($substring) {\n    return strpos($string, $substring) !== FALSE;\n\
    \  });\n}", "    if (!is_array($strings)) {\n        $strings = array($strings);\n\
    \    }\n    if (empty($strings)) {\n        return array();\n    }\n    $substring\
    \ = (string)$substring;\n    return array_filter(\n        $strings,\n       \
    \ function ($string) use ($substring) {\n            return stripos($string, $substring)\
    \ !== false;\n        }\n    );\n}\n", "  return array_filter($strings, create_function('$string',\
    \ 'return strpos($string, \"'.$substring.'\") !== false;'));\n}\n", "    return\
    \ array_filter($strings, function ($string) use ($substring) {\n        return\
    \ strpos($string, $substring) !== false;\n    });\n}\n\n/**\n * Format a float\
    \ to 2 decimal places.\n *\n * @param float $value\n *\n * @return string\n */",
  "    if (is_array($strings)) {\n        $result = array();\n        foreach ($strings\
    \ as $string) {\n            $result = array_merge($result, array_filter(array($string),\
    \ create_function('$string', $substring.\"\\0\".$string)));\n        }\n     \
    \   return $result;\n    }\n\n    return array_filter(array($strings), create_function('$string',\
    \ $substring.\"\\0\".$string));\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\nI wrote this function for strings in PHP that I found useful:\n<code>",
  "  $result = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $result[] = $string;\n    }\n  }\n  return $result;\n\
    }\n", "    return array_filter(\n        $strings,\n        function ($string)\
    \ use ($substring) {\n            return false !== strpos($string, $substring);\n\
    \        }\n    );\n}\n</code>\n<|/ a dscore=1 tags=arrays,php,search |>\n<| a\
    \ |>\narray_filter() is the right function for this task. It will give you a nice\
    \ array with all matching values included.\nSo your code could look like this:\n\
    <code>\n$array = array(\n    'one',\n    'two',\n    'three'\n);\n\n$filtered\
    \ = array_filter($array, function($value) {\n    return in_array($value, array('one',\
    \ 'two', 'three'));\n});\n\nvar_dump($filtered);\n</code>\nThe output would be:\n\
    <code>\narray(3) {\n  [0]=>\n  string(3) \"one\"\n  [1]=>\n  string(3) \"two\"\
    \n  [2]=>\n  string(3) \"three\"\n}\n</code>\n<|/ a dscore=1 tags=arrays,php,search\
    \ |>\n<| a dscore=1 |>\n<code>\n<?php", "  $return = array();\n  foreach ($strings\
    \ as $str) {\n    if (strpos($str, $substring) !== FALSE) {\n      $return[] =\
    \ $str;\n    }\n  }\n  return $return;\n}\n", "    return array_filter(\n    \
    \    $strings,\n        function ($value) use ($substring) {\n            return\
    \ strpos($value, $substring) !== false;\n        }\n    );\n}\n</code>\n<|/ a\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$arr = array(\n    'name' => 'John',\n\
    \    'age' => '20',\n    'country' => 'us',\n    'location' => 'Australia',\n\
    );\n\n$searchedArr = array('Jo','jo','john');\n\nforeach($searchedArr as $value)\
    \ {\n    if(stristr($arr['name'],$value)) {\n        $result[] = $arr;\n    }\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| a tags=php,arrays dscore=2 |>\nSimple Solution\
    \ \n<code>\n$nameArr = array();\n\n    foreach($array as $key=>$value)\n    {\n\
    \       if(stristr($value,'jo')==true)\n       {\n          $nameArr[$key]=$value;\n\
    \       }\n    }\n    print_r($nameArr);\n</code>\n<|/ a |>\n<| a |>\nI liked\
    \ other answers, but I found something better using array_filter function.\n<code>\n\
    $myArray = [\n    'name' => 'John',\n    'age' => '20',\n    'country' => 'us',\n\
    \    'location' => 'Australia',\n];\n", "  return array_filter(\n    $strings,\n\
    \    function ($string) use ($substring) {\n      return strpos($string, $substring)\
    \ !== false;\n    }\n  );\n}\n", "\tforeach ($strings as $string) {\n\t\tif (strpos($string,\
    \ $substring) !== false) {\n\t\t\t$return[] = $string;\n\t\t}\n\t}\n\treturn $return;\n\
    }\n", "  return array_filter($strings, function($string) use ($substring) {\n\
    \    return strpos($string, $substring) !== FALSE;\n  });\n}\n</code>\n<|/ a dscore=3\
    \ |>\n<| a |>\nYou could use regex\n<code>\n<?php\n$string='';\n\n$search=\"abc\"\
    ;\n\n$regex=\"~\" . $search . \"~\";\nif (preg_match_all($regex,$string,$matches))\n\
    {\n    foreach($matches as $match)\n    {\n        $match=preg_replace(\"/[^A-Za-z0-9]+/\"\
    , \"\", $match);\n        $string=str_replace($match,\"\",$string);\n    }\n}\n\
    echo $string;", "\t$result = array();\n\tforeach ($strings as $string) {\n\t\t\
    if (strpos($string, $substring) !== false) {\n\t\t\t$result[] = $string;\n\t\t\
    }\n\t}\n\treturn $result;\n}\n", "  $filtered_strings = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== FALSE) {\n      $filtered_strings[]\
    \ = $string;\n    }\n  }\n  return $filtered_strings;\n}", "  $result = array();\n\
    \  foreach ($strings as $str) {\n    if (strpos($str, $substring) !== FALSE) {\n\
    \      $result[] = $str;\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a tags=arrays,php,string\
    \ |>\n<| a tags=arrays,php,string dscore=1 |>\nHere is how I did it:\n<code>\n\
    <?php\n$arr=array('one','two','three','four','five','six','seven','eight','nine','ten');\n\
    \n$arr=array_filter(\n    array_map('trim',$arr),\n    function ($value) {\n \
    \       return strpos($value, 'e') !== false;\n    }\n);\nprint_r($arr);\n</code>\n\
    <|/ a |>\n<| a tags=arrays,php,string |>\nIf you're trying to remove an item from\
    \ an array based on it's contents try this:\n<code>", "  $result = array();\n\
    \  foreach ($strings as $string) {\n    $pos = strpos($string, $substring);\n\
    \    if ($pos !== false) {\n      $result[] = $string;\n    }\n  }\n  return $result;\n\
    }\n", "  $return = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== FALSE) {\n      $return[] = $string;\n    }\n  }\n  return $return;\n\
    }\n", "  $matches = array();\n  foreach ($strings as $string) {\n    $pos = strpos($string,\
    \ $substring);\n    if ($pos !== false) {\n      $matches[] = $string;\n    }\n\
    \  }\n  return $matches;\n}\n\n/**\n * Generate a random string for API access\
    \ key.\n *\n * @example generate_api_access_key()\n *\n * @return string\n */",
  "  return array_filter($strings, function ($s) { return strpos($s, $substring) !==\
    \ false; });\n}\n", "  $substring = (string)$substring;\n  $retval = array();\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $substring) !== FALSE)\
    \ {\n      $retval[] = $string;\n    }\n  }\n  return $retval;\n}\n", "    return\
    \ array_filter($strings, function ($string) use ($substring) {\n        return\
    \ strpos($string, $substring) !== false;\n    });\n}\n", "  return array_filter($strings,\
    \ function($s) use($substring) {\n    return strpos($s, $substring) !== false;\n\
    \  });\n}\n", "  if (!is_array($strings)) {\n    return array();\n  }\n\n  return\
    \ array_filter($strings, function($value) use ($substring) {\n    return strpos($value,\
    \ $substring) !== false;\n  });\n}\n", "\treturn array_filter($strings, function\
    \ ($value) use ($substring) {\n\t\treturn strpos($value, $substring) !== false;\n\
    \t});\n}\n", "    foreach ($strings as $string) {\n        if (strpos($string,\
    \ $substring) !== false) {\n            $strings[] = $string;\n        }\n   \
    \ }\n    return $strings;\n}\n</code>\nAnd for checking if an input is a valid\
    \ email address:\n<code>\n<?php", "\t$filtered = array();\n\tforeach($strings\
    \ as $string) {\n\t\tif(strpos($string, $substring) !== false) {\n\t\t\t$filtered[]\
    \ = $string;\n\t\t}\n\t}\n\treturn $filtered;\n}", "  return array_filter($strings,\
    \ function($value) use ($substring) {\n    return strpos($value, $substring) !==\
    \ FALSE;\n  });\n}\n</code>\n<|/ a tags=arrays,php,function |>\n<| a |>\nThe function\
    \ below will remove any array item that matches your conditions.\n<code>", " \
    \ return array_filter(\n    $strings,\n    function ($string) use ($substring)\
    \ {\n      return strpos($string, $substring) !== FALSE;\n    }\n  );\n}\n</code>\n\
    <|/ a tags=php,arrays,string |>\n<| a dscore=4 |>\nA simple way I use in my projects:\n\
    <code>\n$arr = array(\"foo\", \"bar\", \"foobar\", \"baz\");\n$result = array_filter($arr,\
    \ function($value){\n    return strpos($value, \"bar\") !== FALSE;\n});\n</code>\n\
    <|/ a tags=php,arrays,string |>\n<| a dscore=4 tags=php,arrays,string |>\nThis\
    \ worked for me:\n<code>\n<?php\n$arr = array(\"foo\", \"bar\", \"foobar\", \"\
    baz\");\n", "  $filtered = array();\n\n  if (empty($strings)) {\n    return $filtered;\n\
    \  }\n\n  // Split strings by word\n  foreach ($strings as $key => $value) {\n\
    \    // Explode by word\n    $words = explode(\" \", $value);\n    // If all words\
    \ are the same except for the last one\n    if (count(array_unique($words)) ==\
    \ count($words) && $words[count($words) - 1] == $substring) {\n      $filtered[$key]\
    \ = $value;\n    }\n  }\n\n  return $filtered;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=php,arrays,search,filter |>\nHere is a function I wrote a while back\
    \ that searches an array and removes any matches. It's similar to the in_array\
    \ function but uses a regular expression.\n<code>\n/**\n * Removes any matches\
    \ from the specified array.\n *\n * array $array The array to search in.\n * string\
    \ $search The string to search for. Pass NULL to remove all matches.\n * boolean\
    \ $caseInsensitive Whether to search in case insensitive.\n * array The filtered\
    \ array.\n */", "  return array_filter(\n    $strings,\n    function ($value)\
    \ use ($substring) {\n      return strpos($value, $substring) !== false;\n   \
    \ }\n  );\n}\n</code>\nSee https://3v4l.org/fU5JH for a live demo.\n<|/ a dscore=3\
    \ |>\n<| c |>\nThanks very much for this! I used `array_filter` but with your\
    \ `in_array` suggestion. Both are very elegant and I like the first one better.\n\
    <|/ c |>\n<| a |>\nTry this solution\n<code>\n<?php ", "    return array_filter($strings,\
    \ function ($v) use ($substring) {\n        return strpos($v, $substring) !==\
    \ false;\n    });\n}\n</code>\n<|/ a |>\n<| a tags=arrays,php |>\n<code>\n$searchstring\
    \ = \"string\";\nforeach($array as $value){\n    if (strpos($value, $searchstring)\
    \ !== false) {\n        $filtered[] = $value;\n    }\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nIf your array is big this will cause PHP to restructure the array\
    \ on each iteration, thus making your foreach loop an O(n*n) loop, which can get\
    \ really bad if your array has many elements.\n<|/ c |>\n<| a dscore=5 |>\nThe\
    \ first step is to get the intersection of the two arrays:\n<code>\n$common =\
    \ array_intersect($array1, $array2);\n</code>\nThen you can get the difference:\n\
    <code>\n$different = array_diff($array1, $common);\n</code>\nFinally you can get\
    \ the remaining:\n<code>\n$remaining = array_diff($array2, $common);\n</code>\n\
    If $array1 has more elements than $array2 then $remaining will be empty.\n<|/\
    \ a tags=arrays,php |>\n<| c |>\nIf $array1 is bigger than $array2, $remaining\
    \ will contain all elements of $array1. This will cause PHP to restructure the\
    \ array on each iteration, thus making your foreach loop an O(n*n) loop, which\
    \ can get really bad if your array has many elements.\n<|/ c |>\n<| c |>\nThis\
    \ is only true if the arrays have the same size.\n<|/ c |>\n<| c |>\nIt will also\
    \ return false if one of the arrays is empty.\n<|/ c |>\n<| c |>\nIf you don't\
    \ want any empty values, use array_filter to filter the values.\n<|/ c |>\n<|\
    \ c |>\n: Yes, and only if there are no keys in the arrays. In that case it's\
    \ probably more efficient to convert both arrays to keys and values.\n<|/ c |>\n\
    <| a |>\nA little change to Jon's answer for cases where there are duplicate keys\n\
    <code>\n$arr1 = array('one', 'two');\n$arr2 = array('one', 'two', 'three');\n\n\
    $common = array_intersect($arr1, $arr2);\n$different = array_diff($arr1, $common);\n\
    $remaining = array_diff($arr2, $common);\n</code>\nThis results in the following\
    \ arrays:\n<code>\nArray\n(\n    [0] ", "  if (!is_array($strings) || !$strings)\
    \ {\n    return array();\n  }\n\n  return array_filter($strings, function($string)\
    \ {\n    return strpos($string, $substring) !== FALSE;\n  });\n}\n\n/**\n * Adds\
    \ HTML links to the given text.\n *\n * Examples:\n * <code>\n * echo link_to(\"\
    Forum\", \"forum\");\n * // Outputs: Forum <a> tag\n * echo link_to(\"Forum\"\
    , \"forum\", TRUE);\n * // Outputs: Forum\n * </code>\n */", "    $filtered =\
    \ array();\n    foreach ($strings as $s) {\n        if (strpos($s, $substring)\
    \ !== false) {\n            $filtered[] = $s;\n        }\n    }\n    return $filtered;\n\
    }\n", "  foreach ($strings as &$string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $strings[] = $string;\n    }\n  }\n\n  return $strings;\n\
    }\n</code>\nEDIT: I added a version using array_filter\n<code>", "    return array_filter(\n\
    \        $strings,\n        function ($s) use ($substring) {\n            return\
    \ strpos($s, $substring) !== false;\n        }\n    );\n}\n", "  $filtered_strings\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered_strings[] = $string;\n    }\n  }\n  return $filtered_strings;\n\
    }\n", "  return array_filter($strings, function($string) use ($substring) {\n\
    \    return strpos($string, $substring) !== false;\n  });\n}\n", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\nBut you can make it more generic and less redundant\
    \ by using array_walk instead of array_map and using strpos as a closure for the\
    \ array_filter\n<code>", "  $matches = array();\n  foreach ($strings as $str)\
    \ {\n    if (strpos($str, $substring) !== FALSE) {\n      $matches[] = $str;\n\
    \    }\n  }\n  return $matches;\n}\n</code>\n<|/ a tags=php,regex dscore=2 |>\n\
    <| c |>\nNice! Could you please explain how this works?\n<|/ c |>\n<| c |>\n`preg_filter`\
    \ does the same as `filter_by_substring`, but uses a regex instead of string comparison.\
    \ Check out [preg_filter](http://php.net/manual/en/function.preg-filter.php) docs\
    \ for more info.\n<|/ c |>\n<| a dscore=0 |>\nMy answer does not use preg_*, but\
    \ just simple string manipulation. You can use array_filter and strpos. Something\
    \ like this.\n<code>\n<?php\n$strings = array(\"abc\", \"bacd\", \"cde\", \"array\"\
    );\n$search = \"a\";\n\n$result = array_filter($strings, function($string) use\
    \ ($search) {\n    return strpos($string, $search) !== FALSE;\n});\n\nvar_dump($result);\n\
    </code>\nOutput:\n<code>\narray(3) {\n  [0]=>\n  string(3) \"abc\"\n  [1]=>\n\
    \  string(3) \"bacd\"\n  [2]=>\n  string(3) \"array\"\n}\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| a tags=php,regex |>\nIf you can guarantee that your search string will\
    \ only occur at the beginning of the string then you can do this with one function\
    \ call:\n<code>\n$strings = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$search\
    \ = \"a\";\n\n$matches = array_filter($strings, function($string) {\n    return\
    \ !strpos($string, $search);\n});\n</code>\narray_filter is like filter, but passes\
    \ each value from $strings as $var => $val and returns only the ones that return\
    \ true.\n<|/ a dscore=0 |>\n<| c |>\nYeah, I was thinking of that too. But the\
    \ $search could also be at the end, or somewhere in the middle of the string.\
    \ In that case I'd need a regex to look for a pattern that might match the beginning\
    \ and the end, or a pattern that might match at any point.\n<|/ c |>\n<| a dscore=0\
    \ |>\nIf you have a list of strings and a search string, you can split the search\
    \ string into individual characters, count the number of occurrences of each individual\
    \ character in the search string, and use that information to filter the original\
    \ strings.\n<code>\n$strings = array(\"abc", "  if (!is_array($strings) || !is_string($substring))\
    \ {\n    return $strings;\n  }\n  return array_filter($strings, function($item)\
    \ use ($substring) {\n    return strpos($item, $substring) !== false;\n  });\n\
    }\n\n/**\n * A helper for generating HTML tags from an associative array of attributes.\n\
    \ */", "  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== FALSE) {\n      $strings[] = $string;\n    }\n  }\n  return $strings;\n\
    }\n", "    foreach ($strings as $string) {\n        if (strpos($string, $substring)\
    \ !== FALSE) {\n            $results[] = $string;\n        }\n    }\n    return\
    \ $results;\n}\n</code>\n<|/ a dscore=0 tags=php,arrays,string |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n<?php\n\n$arr1 = array(\n    'abc', \n    'bacd',\n    'cde',\n\
    \    'array'\n);\n\n$arr2 = array(\n    'abcd',\n    'bacd',\n    'cde'\n);\n\n\
    $arr3 = array(\n    'abcd',\n    'bacd',\n    'cde',\n    'array'\n);\n\n$arr4\
    \ = array(\n    'abc',\n    'bacd',\n    'cde'\n);\n\n$arr5 = array(\n    'abc',\n\
    \    'bacd',\n    'cde',\n    'array'\n);\n", "  $new_strings = array();\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $substring) !== FALSE) {\n\
    \      $new_strings[] = $string;\n    }\n  }\n  return $new_strings;\n}", "  if\
    \ (is_array($strings) === false) {\n    trigger_error(\"filter_by_substring()\
    \ expects parameter 1 to be an array\", E_USER_WARNING);\n    return array();\n\
    \  }\n  $filtered_strings = array();\n  foreach ($strings as $string) {\n    if\
    \ (strpos($string, $substring) !== false) {\n      $filtered_strings[] = $string;\n\
    \    }\n  }\n  return $filtered_strings;\n}\n", "\treturn array_filter($strings,\
    \ function($v) use ($substring) { return mb_strpos($v, $substring) !== FALSE;\
    \ });\n}\n", "  $filtered_strings = array();\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== false) {\n      $filtered_strings[]\
    \ = $string;\n    }\n  }\n  return $filtered_strings;\n}\n", "    $filtered =\
    \ array();\n    foreach($strings as $str) {\n        if (strpos($str, $substring)\
    \ !== false)\n            $filtered[] = $str;\n    }\n    return $filtered;\n\
    }\n", "\t$substring_length = strlen($substring);\n\tforeach ($strings as $key\
    \ => $value) {\n\t\tif (substr_count($value, $substring) > 0) {\n\t\t\t// If the\
    \ string contains the substring, just add it to the array.\n\t\t\tif (strpos($value,\
    \ $substring) !== FALSE) {\n\t\t\t\t$result[$key] = $value;\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn $result;\n}\n", "    if (!is_array($strings)) {\n        throw new\
    \ Exception('First argument must be an array of strings');\n    }\n    foreach\
    \ ($strings as &$string) {\n        if (strpos($string, $substring) !== false)\
    \ {\n            $string = filter_var($string, FILTER_SANITIZE_STRING);\n    \
    \    }\n    }\n    return $strings;\n}\n</code>\n<|/ a dscore=3 tags=mysql,php,arrays\
    \ |>\n<| c |>\nThis worked great. Thanks for taking the time to respond. \n\n\
    What a nice little tool!\n<|/ c |>\n<| a dscore=2 |>\nI like 's answer best, but\
    \ I'm going to offer a third option for anyone who wants to filter out specific\
    \ values.  You can pass filter expressions as a string to a function and it will\
    \ return the values you want to keep (if any).\nHere's an example:\n<code>\n<?php\n\
    $input = array(\"foo\", \"bar\", \"baz\", \"moo\", \"loo\", \"lala\", \"wow\"\
    , \"ha\", \"hohoho\");\n\n$keep = array(\"bar\", \"baz\", \"moo\", \"loo\");\n\
    \n$output = filter_keep_values($input, $keep);\n\nvar_dump($output);\n", "  if\
    \ (!is_array($strings)) return false;\n  return array_filter($strings, function\
    \ ($value) use ($substring) {\n    return strpos($value, $substring) !== false;\n\
    \  });\n}\n", "  $filtered = array();\n  foreach($strings as $string) {\n    if(strpos($string,\
    \ $substring) !== FALSE) {\n      $filtered[] = $string;\n    }\n  }\n  return\
    \ $filtered;\n}\n", "    $filtered = array();\n    foreach($strings as $s) {\n\
    \        if(strpos($s, $substring) !== false) {\n            $filtered[] = $s;\n\
    \        }\n    }\n    return $filtered;\n}\n</code>\n<|/ a |>\n<| a dscore=0\
    \ tags=php,arrays |>\nTry this:\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\"\
    );\n$new_array = array();\nfor($i=0;$i<count($array);$i++){\n    if($array[$i]\
    \ != 'c'){\n        $new_array[] = $array[$i];\n    }\n}\nvar_dump($new_array);\n\
    </code>\n<|/ a |>\n<| a dscore=0 |>\nYou can try this also\n<code>\n<?php\n$string\
    \ = \"Hello\";\n$stringArray = str_split($string);\n$temp = \"\";\n$resultArray\
    \ = array();\nforeach ($stringArray as $value) {\n    if ($value == 'l') {\n \
    \       $temp .= $value;\n    } else {\n        $resultArray[] = $temp;\n    \
    \    $temp = \"\";\n    }\n}\nif ($temp != \"\") {\n    $resultArray[] = $temp;\n\
    }\nvar_dump($resultArray);", "  $result = array();\n  foreach ($strings as $s)\
    \ {\n    if (strpos($s, $substring) !== false) {\n      $result[] = $s;\n    }\n\
    \  }\n  return $result;\n}\n", "  $results = array();\n  $strings = array_map('trim',\
    \ $strings);\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== FALSE) {\n      $results[] = $string;\n    }\n  }\n  return $results;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI really like that solution, since it avoids the\
    \ complexity of array_search or array_filter or the need for regex.  I hadn't\
    \ thought of that, and it makes my answer even simpler.\n<|/ c |>\n<| a |>\nThis\
    \ solution will find all items in an array that contain the substring $needle.\n\
    <code>\n<?php\n$array = array(\n    \"This is a test string\",\n    \"This is\
    \ another test string\",\n    \"This is a third test string\",\n    \"This is\
    \ another test string\",\n);\n\n$needle = \"test\";\n", "  if (empty($strings)\
    \ || empty($substring)) {\n    return $strings;\n  }\n\n  $result = [];\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $substring) !== false) {\n\
    \      $result[] = $string;\n    }\n  }\n\n  return $result;\n}\n", "    return\
    \ array_filter($strings, function($string) use ($substring) {\n        return\
    \ strpos($string, $substring) !== false;\n    });\n}\n", "  return array_filter(\n\
    \    $strings,\n    function ($s) use ($substring) {\n      return strpos($s,\
    \ $substring) !== false;\n    }\n  );\n}\n", "  $result = [];\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== FALSE) {\n      $result[]\
    \ = $string;\n    }\n  }\n  return $result;\n}", "\treturn array_filter($strings,\
    \ function($string) use ($substring) {\n\t\treturn strpos($string, $substring)\
    \ !== false;\n\t});\n}", "    $filtered = array();\n    foreach ($strings as $string)\
    \ {\n        if (strpos($string, $substring) !== false) {\n            $filtered[]\
    \ = $string;\n        }\n    }\n    return $filtered;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nI think you missed the point. I am not looking for a way to search a\
    \ text file for a keyword. I am looking for a way to search a sql database, which\
    \ is more complicated and requires php to get all the data into a php array then\
    \ search through the array. I am not asking how to search a text file for a keyword.\
    \ I am asking how to search a sql database for a keyword.\n<|/ c |>\n<| c |>\n\
    How about `SELECT * FROM table1 WHERE column LIKE '%$keyword%'`?\n<|/ c |>\n<|\
    \ c |>\nI added an example in my question to hopefully make it more clear.\n<|/\
    \ c |>\n<| c |>\nI guess I misunderstood the question, I'll think about it later.\
    \ Give me a minute, I'll get back to you.\n<|/ c |>\n<| c |>\nI've updated my\
    \ answer with a new method I hope will do what you want. Hope this helps you.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n$sql = \"SELECT * FROM mytable WHERE mycolumn\
    \ LIKE '%$keyword%'\";\n</code>\n<|/ a tags=database,sql,search,php |>\n<| c |>\n\
    I added an example in my question to hopefully make it more clear.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n$sql = \"SELECT * FROM mytable WHERE mycolumn LIKE '%$keyword%'\"\
    ;\n</code>\n<|/ a tags=database,sql,search,php |>\n<| c |>\nI added an example\
    \ in my question to hopefully make it more clear.\n<|/ c |>\n<| c |>\n: That example\
    \ is still incomplete. You need to show us the structure of your SQL table and\
    \ what kind of data is in the column named mycolumn. I'm guessing it's text or\
    \ longtext?\n<|/ c |>\n<| a |>\nThis might be what you are looking for:\n<code>\n\
    $db = new PDO('mysql:host=localhost;dbname=testdb;charset=UTF-8', 'username',\
    \ 'password');\n$db->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n\n$sql\
    \ = \"SELECT * FROM table1 WHERE column LIKE '%$keyword%'\";\n$sth = $db", " \
    \ $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== FALSE) {\n      $filtered[] = $string;\n    }\n  }\n  return\
    \ $filtered;\n}\n", "    return array_filter($strings, function($string) {\n \
    \       return false === strpos($string, $substring);\n    });\n}\n", "    return\
    \ array_filter(\n        $strings,\n        function ($string) use ($substring)\
    \ {\n            return strpos($string, $substring) !== false;\n        }\n  \
    \  );\n}\n", "    return array_filter($strings, function($string) use ($substring)\
    \ {\n        return strpos($string, $substring) !== false;\n    });\n}\n", " \
    \ return array_filter($strings, function ($string) use ($substring) {\n    return\
    \ strpos($string, $substring) !== FALSE;\n  });\n}\n", "    $filtered = [];\n\
    \    foreach ($strings as $string) {\n        if (strpos($string, $substring)\
    \ !== false) {\n            $filtered[] = $string;\n        }\n    }\n    return\
    \ $filtered;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work. Try this input:\
    \ `$strings = array(\"ab\", \"ac\", \"ad\", \"array\");`\n<|/ c |>\n<| c |>\n\
    , please see my edit for clarification and example code.\n<|/ c |>\n<| a tags=php\
    \ |>\nTry with this..\n<code>\n$search_string = \"a\";\n$strings = array(\"abc\"\
    , \"bacd\", \"cde\", \"array\");\nforeach($strings as $string){\n   if(strpos($string,\
    \ $search_string) !== false){\n       // do something here...\n       echo $string.\"\
    <br/>\";\n   }\n}\n</code>\n<|/ a dscore=4 |>\n<| a dscore=4 tags=php |>\n<code>\n\
    <?php", "  $result = array();\n  foreach ($strings as $s) {\n    if (strpos($s,\
    \ $substring) !== false) {\n      $result[] = $s;\n    }\n  }\n  return $result;\n\
    }\n</code>\n<|/ a dscore=0 tags=php,search,arrays |>\n<| a dscore=0 |>\n<code>",
  "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return\
    \ $filtered;\n}", "  $filtered_strings = array();\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== false) {\n      $filtered_strings[]\
    \ = $string;\n    }\n  }\n  return $filtered_strings;\n}\n", "  return array_filter($strings,\
    \ function($s) use ($substring) {\n    return strpos($s, $substring) !== false;\n\
    \  });\n}\n", "\t$substrings = explode(PHP_EOL, $substring);\n\t$filtered_strings\
    \ = array();\n\tforeach($strings as $string) {\n\t\tforeach($substrings as $substring)\
    \ {\n\t\t\tif(strpos($string, $substring) !== false) $filtered_strings[] = $string;\n\
    \t\t}\n\t}\n\treturn $filtered_strings;\n}", "    $filtered = array();\n    foreach\
    \ ($strings as $string) {\n        if (strpos($string, $substring) !== FALSE)\
    \ {\n            $filtered[$string] = $string;\n        }\n    }\n    return $filtered;\n\
    }", "    $ret = [];\n    foreach ($strings as $string) {\n        if (strpos($string,\
    \ $substring) !== false) {\n            $ret[] = $string;\n        }\n    }\n\
    \    return $ret;\n}\n</code>\n<|/ a dscore=2 tags=php,arrays,foreach |>\n<| a\
    \ tags=php,arrays,foreach |>\n<code>\n<?php\n\n$input = array(\n    'a' => 1,\n\
    \    'b' => 2,\n    'c' => 3,\n    'd' => 4,\n);\n\n$output = array();\n$search\
    \ = 'a';\n\nforeach($input as $key => $val){\n    if(strpos($key, $search) !==\
    \ false){\n        $output[$key] = $val;\n    }\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis also outputs multiple entries if more than one key matches the search\
    \ string.\n<|/ c |>\n<| c |>\nThis outputs multiple entries if more than one key\
    \ matches the search string\n<|/ c |>\n<| a dscore=2 tags=php,arrays,foreach |>\n\
    <code>\nforeach ($array as $key => $value)\n{\n    if (!preg_match(\"/$needle/\"\
    , $key))\n    {\n        unset($array[$key]);\n    }\n}\n</code>\n<|/ a |>\n<|\
    \ a |>\n<code>\n$arr=array(\n\"abc\" => \"a\",\n\"bacd\" => \"b\",\n\"cde\" =>\
    \ \"c\",\n\"array\" => \"d\"\n);\n$needle=\"a\";\n$haystack=array_keys($arr);\n\
    foreach($haystack as $k=>$v)\n{\n    if(preg_match(\"/$needle/\",$v))\n    {\n\
    \        unset($arr[$k]);\n    }\n}\nprint_r($arr);\n</code>\n<|/ a dscore=2 tags=php,arrays,foreach\
    \ |>\n<| a |>\n<code>\n$input = array('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4,\
    \ 'e' => 5);\n\n$search = 'a';\n$keys = array_keys($input);\n$result  = array();\n\
    \nforeach ($keys as $key) {\n    if (strpos($key, $search) !== false) {\n    \
    \    $result[$key] = $input[$key];\n    }\n}\n</code>\n<|/ a tags=php,arrays,foreach\
    \ dscore=1 |>\n<| a tags=php,arrays,foreach dscore=1 |>\nTry this:\n<code>\n$input\
    \ = array('a' => 1, 'b' => 2, 'c' => 3, 'd' => ", "  return array_filter($strings,\
    \ function($item) use ($substring) {\n    return strpos($item, $substring) !==\
    \ false;\n  });\n}\n</code>\n<|/ a dscore=4 tags=arrays,filtering,php,sorting\
    \ |>\n<| a tags=arrays,filtering,php,sorting |>\n<code>\n$arr = array(\"string1\"\
    ,\"string2\",\"string3\",\"string4\",\"string5\");\n\nforeach($arr as $k=>$v)\
    \ {\n    if(strstr($v, 'string'))\n        unset($arr[$k]);\n}\n</code>\n<|/ a\
    \ dscore=3 |>\n<| c |>\nThanks for your help but unfortunately I didn't want to\
    \ remove elements from the array but to replace them with empty strings\n<|/ c\
    \ |>\n<| c |>\nBut if you replace an element with an empty string, then the element\
    \ will still be there, so it won't have any impact on performance.\n<|/ c |>\n\
    <| c |>\n: Not if you unset it, the elements stays there and thus won't be moved!\n\
    <|/ c |>\n<| a |>\nA bit more elegant using array_filter() that doesn't need an\
    \ anonymous function:\n<code>", "    $filtered = array();\n    foreach ($strings\
    \ as $string) {\n        if (strpos($string, $substring) !== FALSE) {\n      \
    \      $filtered[] = $string;\n        }\n    }\n    return $filtered;\n}\n",
  "  return array_filter($strings, function($string) use ($substring) {\n    return\
    \ strpos($string, $substring) !== FALSE;\n  });\n}\n</code>\nTo apply the filter\
    \ function to the whole array you can use the following code snippet:\n<code>\n\
    $strings = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$strings = filter_by_substring($strings,\
    \ \"a\");\n</code>\nTo apply the filter function on all elements of an array you\
    \ can use the following code snippet:\n<code>\n$strings = array(\"abc\", \"bacd\"\
    , \"cde\", \"array\");\n$strings = filter_by_substring($strings, $string);\n</code>\n\
    <|/ a dscore=1 tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>", "    $result\
    \ = [];\n    foreach ($strings as $string) {\n        if (strpos($string, $substring)\
    \ !== false) {\n            $result[] = $string;\n        }\n    }\n    return\
    \ $result;\n}\n", "  if (is_array($strings)) {\n    $return = array();\n    foreach\
    \ ($strings as $string) {\n      if (strpos($string, $substring) !== FALSE) {\n\
    \        $return[] = $string;\n      }\n    }\n    return $return;\n  }\n  return\
    \ array();\n}", "  $filtered = array();\n  foreach ($strings as $s) {\n    if\
    \ (strpos($s, $substring) !== false) {\n      $filtered[] = $s;\n    }\n  }\n\
    \  return $filtered;\n}", "  $strings = array_filter($strings, function ($string)\
    \ use ($substring) {\n    return (strpos($string, $substring) !== false);\n  });\n\
    \  return $strings;\n}\n", "  $filtered_strings = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== FALSE) {\n      $filtered_strings[]\
    \ = $string;\n    }\n  }\n  return $filtered_strings;\n}\n", "\t$found = array();\n\
    \tforeach($strings as $s) {\n\t\tif(strpos($s, $substring) !== false) $found[]\
    \ = $s;\n\t}\n\treturn $found;\n}\n", "  $output = array();\n  foreach ($strings\
    \ as $str) {\n    if (strpos($str, $substring) !== FALSE) {\n      $output[] =\
    \ $str;\n    }\n  }\n  return $output;\n}\n", "  return array_filter($strings,\
    \ create_function('$string', 'return strpos($string, \"' . $substring . '\") !==\
    \ FALSE;'));\n}\n</code>\n<|/ a tags=arrays,php,substring |>\n<| c |>\nThis should\
    \ be the accepted answer since it actually answers the question.\n<|/ c |>\n<|\
    \ a |>\n<code>\n$str=array();\nforeach($array as $v){\nif(strpos($v,\"a\") !==\
    \ false){\n    $str[]=$v;\n}\n}\n</code>\n<|/ a tags=arrays,php,substring dscore=4\
    \ |>\n<| c |>\nThis looks very clean and works on arrays with many elements. \
    \ Just a small change that I'd recommend is removing the $ from the foreach variable\
    \ name so it's more clear to the next developer.\n<|/ c |>\n<| c |>\nYeah good\
    \ call on the $v, just added that in. I'll edit it now to remove the $\n<|/ c\
    \ |>\n<| c |>\nI would also recommend adding a return in the if statement to return\
    \ the array for ease of use: `return $str;`\n<|/ c |>\n<| a |>\nYou could try\
    \ something like this (code not tested):\n<code>", "  $result = array();\n  foreach\
    \ ($strings as $s) {\n    if (strpos($s, $substring) !== false) {\n      $result[]\
    \ = $s;\n    }\n  }\n  return $result;\n}", "    return array_filter($strings,\
    \ function ($string) use ($substring) {\n        return strpos($string, $substring)\
    \ !== false;\n    });\n}\n</code>\nThe above function can handle any substring\
    \ you like (including \"array\", \"is\", \"the\", etc.)\n<|/ a |>\n<| a |>\nYou\
    \ can try this:\n<code>\n$arr = [\n    'test1',\n    'test2',\n    'test3',\n\
    ];\n\n$arr2 = [];\nforeach ($arr as $key => $value) {\n    if (strpos($value,\
    \ 'test') !== false) {\n        $arr2[$key] = $value;\n    }\n}\n</code>\n<|/\
    \ a tags=arrays,php dscore=2 |>\n<| c |>\nThis answer is the shortest among all\
    \ answers here.\n<|/ c |>\n<| a dscore=1 |>\nUsing array_filter should do the\
    \ trick:\n<code>\n$filtered = array_filter($data, function($item){\n    return\
    \ strpos($item, 'test') !== false;\n});\n</code>\n<|/ a tags=arrays,php |>\n<|\
    \ a |>\nI think this is an easy way to achieve that:\n<code>\n<?php\n$array =\
    \ [\n    \"one\",\n    \"two\",\n    \"three\",\n    \"four\",\n    \"five\",\n\
    ];\n\n$result = [];\nforeach($array as $value) {\n    $result[] = strpos($value,\
    \ 'test');\n}\n\n$result = array_filter($result);\n\nvar_dump($result);\n</code>\n\
    <|/ a dscore=1 tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$filtered\
    \ = array_filter($data, function($item) {\n    return strpos($item, 'test');\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\n<code>\n<?php\n$data\
    \ = [\n    'test1',\n    'test2',\n    'test3',\n];\n\n$filterd_array = array_filter($data,\
    \ function($v){\n    return strpos($v, 'test') === false;\n});\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a |>\n<code>\nforeach ($data as $index => $value) {\n    if\
    \ (strpos($value, 'test') !== false) {\n        unset($data[$index]);\n    }\n\
    }\n</code>\n<|/ a dscore=0 tags=arrays,php |>\n<| c |>\nWhile this code may answer\
    \ the question, providing additional context regarding how and/or why it solves\
    \ the problem would improve the answer's long-term value.\n<|/ c |>\n<| a ", " \
    \   return array_filter($strings, function($str) use ($substring) {\n        return\
    \ strpos($str, $substring) !== FALSE;\n    });\n}\n</code>\n<|/ a |>\n<| c |>\n\
    Thank you for this. It was quite useful. Although not ideal, it actually works.\n\
    <|/ c |>\n<| c |>\nglad you like it :) I've added a small explanation.\n<|/ c\
    \ |>\n<| c |>\nI have an issue with this method. It will filter out strings that\
    \ don't have \"a\" in them. My example is \"abca\" will return \"ac\". Do you\
    \ know a solution to this?\n<|/ c |>\n<| c |>\nI made this method, but as I said\
    \ this is \"not ideal\". I am looking for a better way to do this.\n<|/ c |>\n\
    <| c |>\n`filter_by_substring` doesn't actually filter the array, it just returns\
    \ only the array items that contain the substring, which isn't a complete solution\
    \ to your problem unless I misunderstood what you're trying to do. The `array_filter`\
    \ solution above works fine - it just returns `TRUE` or `FALSE` depending on if\
    \ the item matches or not. Try this example to see what I mean. \n\n`array(\"\
    abca\" => \"a\");`\n`filter_by_substring(array(\"abca\" => \"a\"), \"a\");`\n\
    This will result in \"abca\" being filtered out, but this solution does not.\n\
    <|/ c |>\n<| a dscore=2 tags=arrays,php |>\nOne possible solution is to loop through\
    \ the array and remove any strings containing your target string. \n<code>\n$array\
    \ = array(\n    'aaa', 'bbb', 'ccc', 'aa', 'cc', 'a', 'd', 'f', 'g'\n);\n$search\
    \ = 'a';\n$res = array();\nforeach($array as $val) {\n    if (strpos($val, $search)\
    \ !== false) {\n        array_push($res, $val);\n    }\n}\n</code>\n<|/ a |>\n\
    <| c |>\nIf you're doing this a lot, you should probably use preg_grep instead.\n\
    <|/ c |>\n<| a tags=arrays,php |>\n<code>\n$arrays = array(\n    'aaa', 'bbb',\
    \ 'ccc', 'aa', 'cc', 'a', 'd', 'f', 'g'\n);\n$search = 'a';\n$result = array();\n\
    \nforeach ($arrays as $array)\n{\n    if (strpos($array, $search) !== false)\n\
    \    {\n        $result[] = $array;\n    }\n}\n\nvar_dump($result);\n</code>\n\
    <|/ a dscore=2 |>\n<| ", "  if (!is_array($strings) || count($strings) <= 0) {\n\
    \    return array();\n  }\n\n  $filtered_strings = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== false) {\n      $filtered_strings[]\
    \ = $string;\n    }\n  }\n\n  return $filtered_strings;\n}\n\n/**\n * Get the\
    \ string representation of an IP in standard IPv4 format\n * @param string $ip\n\
    \ * @return string\n */", "  return array_filter($strings, function ($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n", "    return array_filter(\n        $strings,\n        function ($string)\
    \ use ($substring) {\n            return strpos($string, $substring) !== false;\n\
    \        }\n    );\n}\n</code>\n<|/ a tags=arrays,array-filter,php,arrays |>\n\
    <| c |>\n`array_filter()` can be slow compared to `array_map()` since `array_map()`\
    \ will create a new array and `array_filter()` will have to move all the elements\
    \ into a temporary array. [This article](https://stackoverflow.com/a/3016191/1048572)\
    \ has a nice explanation of why `array_filter()` is slower than `array_map()`.\n\
    <|/ c |>\n<| a |>\nYou can use array_walk with strpos function.\n<code>\narray_walk($array,\
    \ function(&$item, $key) use ($word) {\n    if (strpos($item, $word) !== false)\n\
    \        $item = ' <span class=\"highlight\">' . $item . '</span>';\n});\n</code>\n\
    <|/ a dscore=1 tags=arrays,array-filter,php,arrays |>\n<| a tags=arrays,array-filter,php,arrays\
    \ |>\nUse array_filter() along with strpos()\n<code>\n<?php\n\n$array = array(\"\
    one\", \"two\", \"three\", \"four\");\n$word = \"three\";\n\n$result = array_filter($array,\
    \ function($item) use ($word){\n    if (strpos($item, $word) !== false){\n   \
    \     return $item;\n    }\n});\n\nprint_r($result);\n</code>\nOutput\n<code>\n\
    Array\n(\n    [0] => three\n)\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,array-filter,php,arrays\
    \ |>\n<code>\n<?php\n$array = ['one', 'two', 'three', 'four'];\n$search = \"three\"\
    ;\n$replace = '<span class=\"highlight\">' . $search . '</span>';\n\n$result =\
    \ preg_replace(\"/\\b(\" . $search . \")\\b/\", $replace, $array);\n\nprint_r($result);\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThanks so much. Your solution worked like\
    \ a charm. I'm able to add html tags to my search result. :)\n<|/ c |>\n<| c |>\n\
    This works great, however if my search term is 'three' the replace doesn't work.\
    \ Can you tell me how to get it to work with 'three' as well?\n<|/ c |>\n<| c\
    \ |>\nThanks for your answer. I want to add html tags to my search result but\
    \ that only works when my search term is three. How can I add html tags to ",
  "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== FALSE) {\n      $filtered[] = $string;\n    }\n  }\n  return\
    \ $filtered;\n}\n", "  $filtered = array();\n  foreach ($strings as $string) {\n\
    \    if (strpos($string, $substring) !== FALSE) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== FALSE;\n  });\n\
    }", "    if (!is_array($strings)) {\n        return $strings;\n    }\n    $return\
    \ = array();\n    foreach ($strings as $string) {\n        if (strpos($string,\
    \ $substring) !== false) {\n            $return[] = $string;\n        }\n    }\n\
    \    return $return;\n}\n\n/**\n * Convert an array of strings into a unique set\
    \ of values.\n *\n * @param array $array\n * @return array\n */", "    $strings\
    \ = array_filter($strings, function($string) use ($substring) {\n        return\
    \ strpos($string, $substring) !== FALSE;\n    });\n    return $strings;\n}\n</code>\n\
    This solution is probably more efficient than using array_filter() and will probably\
    \ work faster.\n<|/ a dscore=0 |>\n<| c |>\nIf you're going to be doing this on\
    \ large arrays, it's worth noting that this will be horribly slow with large arrays.\
    \ [Benchmark](http://codepad.viper-7.com/jX6lC6). I would suggest using `preg_grep()`\
    \ instead.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  if (!$strings) return array();\n\
    \  $return = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $return[] = $string;\n    }\n  }\n  return $return;\n\
    }\n", "  $ret = array();\n  foreach ($strings as $str) {\n    if (strpos($str,\
    \ $substring) !== FALSE) {\n      $ret[] = $str;\n    }\n  }\n  return $ret;\n\
    }\n", "  return array_filter(\n    $strings,\n    function ($string) use ($substring)\
    \ {\n      return (strpos($string, $substring) !== false);\n    },\n    ARRAY_FILTER_USE_BOTH\n\
    \  );\n}", "  return array_filter($strings, function ($string) use ($substring)\
    \ {\n    return strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/\
    \ a tags=arrays,php,array-filter |>\n<| a dscore=3 |>\n<code>", "    return array_filter($strings,\
    \ function ($string) use ($substring) {\n        return (strpos($string, $substring)\
    \ !== false);\n    });\n}\n</code>\nNote that I use the callback function with\
    \ array_filter instead of the closures syntax.\nIf you don't have PHP 5.3, you\
    \ can use the following instead:\n<code>", "    return array_filter(\n       \
    \ $strings,\n        function($string) use ($substring) {\n            return\
    \ strpos($string, $substring) !== false;\n        }\n    );\n}\n", "  $results\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== FALSE) {\n      $results[] = $string;\n    }\n  }\n  return $results;\n\
    }\n\n/**\n * Returns the number of seconds that a given relative time is from\
    \ now.\n *\n * @param string $time\n *   A relative time, e.g. \"1 day ago\",\
    \ \"5 hours ago\", etc.\n *\n * @return int\n *   The number of seconds since\
    \ the relative time.\n */", "    if (! is_array($strings)) {\n        return array();\n\
    \    }\n\n    $result = array();\n    foreach ($strings as $string) {\n      \
    \  if (strpos($string, $substring) !== false) {\n            $result[] = $string;\n\
    \        }\n    }\n\n    return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nHi, the\
    \ above mentioned php code works for me, thanks a tonne!! :)\n<|/ c |>\n<| a |>\n\
    This answer builds upon the answers from and to, but I think they do too much,\
    \ and don't really show how to filter the array and keep the original order.\n\
    I do want to point out that there is actually a way to do this that doesn't sort\
    \ the array.\n<code>", "    $result = array();\n    foreach ($strings as $string)\
    \ {\n        if (strpos($string, $substring) !== FALSE) {\n            $result[]\
    \ = $string;\n        }\n    }\n    return $result;\n}\n", "  $filtered = array();\n\
    \  foreach($strings as $string) {\n    if(strpos($string, $substring) !== false)\
    \ {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}", "    $filtered_strings\
    \ = array();\n    foreach ($strings as $string) {\n        if (strpos($string,\
    \ $substring) !== false) {\n            $filtered_strings[] = $string;\n     \
    \   }\n    }\n    return $filtered_strings;\n}\n", "    foreach ($strings as $key\
    \ => $string) {\n        if (strpos($string, $substring) !== FALSE) {\n      \
    \      unset($strings[$key]);\n        }\n    }\n    return $strings;\n}\n\n/**\n\
    \ * Return a random integer between $min and $max (inclusive)\n * @param int $min\
    \ min value\n * @param int $max max value\n * @return int random integer\n */",
  "    return array_filter($strings, function($string) use ($substring) {\n      \
    \  return false !== strpos($string, $substring);\n    });\n}\n</code>\n<|/ a tags=function,php,arrays,multidimensional-array\
    \ dscore=4 |>\n<| c |>\n`array_walk` would be more elegant.\n<|/ c |>\n<| c |>\n\
    `array_walk()` would also work for this simple situation :) Updated the answer\n\
    <|/ c |>\n<| c |>\n`array_walk()` doesn't work in this situation because `array_walk()`\
    \ only works with associative arrays. However, `array_walk()` does allow you to\
    \ pass in an anonymous function as a parameter. I've updated my answer to reflect\
    \ that.\n<|/ c |>\n<| a tags=function,php,arrays,multidimensional-array dscore=4\
    \ |>\nUse array_walk and pass a custom function\n<code>\n$myArray = array(\"one\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    , \"ten\");\narray_walk($myArray, function(&$value, $key) use ($myArray) {\n \
    \   if(in_array($value, $myArray)) {\n        $value = $key;\n    }\n});\n</code>\n\
    Demo\n<|/ a |>\n<| c |>\nI believe this is the best solution.\n<|/ c |>\n<| c\
    \ |>\nFor those who want to pass arguments to the callback, see the accepted answer:\
    \ http://stackoverflow.com/a/37156092/827210\n<|/ c |>\n<| a dscore=3 |>\nUse\
    \ array_walk and in_array function to filter array:\n<code>\n<?php\n\n$array =\
    \ array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"\
    eight\", \"nine\", \"ten\");\n\narray_walk($array, function(&$item, $key){\n \
    \   if(in_array($item, $array)) {\n        $item = $key;\n    }\n});\n\nprint_r($array);\n",
  "  $filtered_strings = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $filtered_strings[] = $string;\n    }\n  }\n\
    \  return $filtered_strings;\n}\n", "    return array_filter($strings, function\
    \ ($str) use ($substring) {\n        return strpos($str, $substring) !== false;\n\
    \    });\n}\n</code>\n<|/ a |>\n<| a dscore=2 |>\nA few solutions, but I find\
    \ the most elegant and flexible is to use an anonymous function in array_filter()\
    \ like so:\n<code>", "  $filtered = array();\n  foreach ($strings as $s) {\n \
    \   if (strpos($s, $substring) !== FALSE) {\n      $filtered[] = $s;\n    }\n\
    \  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis is good\
    \ advice, but unfortunately I cannot use it (as I am working with a framework)\
    \ and this would require a lot of changes to the framework.\n<|/ c |>\n<| c |>\n\
    I see - well in that case I'd recommend checking out the source code to see exactly\
    \ how it does it. I believe it does some form of array_walk() with array_intersect()\
    \ checking the input array for membership in the passed array. The foreach loop\
    \ could be replaced by array_filter() but you get the idea. Also I did think that\
    \ you could use array_intersect() in conjunction with a callback, but I guess\
    \ array_intersect doesn't pass it through a callback function as part of the return\
    \ value.\n<|/ c |>\n<| c |>\nThat's not how `array_filter` works. `array_filter`\
    \ always returns the filtered array, whereas `array_map` can do whatever you want\
    \ with the input array. The callback function is called on every element of the\
    \ array though.\n<|/ c |>\n<| c |>\nyes I guess that's true. I was thinking that\
    \ array_filter would return a boolean indicating whether the element had been\
    \ filtered or not - but yes that's not how it works.\n<|/ c |>\n<| a tags=php,filtering,arrays\
    \ |>\nI came across this question because I was trying to apply a filter to an\
    \ array but couldn't find any existing functions that did the job. The following\
    \ code worked for me and seems a lot more concise. \n<code>\n$new_array = array_filter($old_array,\
    \ function ($item) {\n    return $item !== null;\n});\n</code>\nThis code basically\
    \ says:\n\nFor each item in the array, \nIf the item isn't null, \nAdd it to the\
    \ new array.\n<|/ a dscore=5 |>\n<| c |>\nThis won't allow the array to stay intact.\n\
    <|/ c |>\n<| c |>\nWhat do you mean? The original array will stay intact. If you\
    \ have `0` values it won't affect anything.\n<|/ c |>\n<| c |>\nIf you have `0`\
    \ values it won't affect anything. My mistake.\n<|/ c |>\n<| c |>\nThis does not\
    \ answer the question.\n<|/ c |>\n<| c |>\nThis is useful when you want to remove\
    \ all empty values (like 0, null, false, empty string). If you want to remove\
    \ specific values (like `", "    foreach ($strings as $string) {\n        if (substr_count($string,\
    \ $substring) !== 0) {\n            $results[] = $string;\n        }\n    }\n\n\
    \    return $results;\n}\n", "  $filtered_strings = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== false) {\n      $filtered_strings[]\
    \ = $string;\n    }\n  }\n  return $filtered_strings;\n}\n", "  foreach ($strings\
    \ as $key => $string) {\n    if (strpos($string, $substring) !== false) {\n  \
    \    unset($strings[$key]);\n    }\n  }\n\n  return $strings;\n}\n\n/**\n * Convert\
    \ an input array of strings into an array of numbers, removing non-numeric values.\n\
    \ * >>> array_to_numbers(array())\n * array()\n * >>> array_to_numbers(array(\"\
    1\", \"2\", \"3.4\", \"5\"))\n * array(1, 2, 5, 3.4)\n */", "    return array_filter($strings,\
    \ function($string) use ($substring) {\n        return strpos($string, $substring)\
    \ !== false;\n    });\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThe only thing\
    \ that makes sense would be to remove the `'` from the `$substring` parameter.\
    \ `$substring` should be `a`, not `'a'`.\n<|/ c |>\n<| c |>\n- It's not about\
    \ the `'`. It doesn't work that way. The filter needs to take a string as input\
    \ and return an array. I don't think it can take an array and return a string.\n\
    <|/ c |>\n<| c |>\nActually, you can. Look at the documentation for the [filter\
    \ function](http://php.net/manual/en/function.filter.php).\n<|/ c |>\n<| c |>\n\
    - Ah. Thanks. I haven't used this before.\n<|/ c |>\n<| a tags=php,arrays |>\n\
    <code>", "    return array_filter($strings, function($string) use ($substring)\
    \ {\n        return strpos($string, $substring) !== false;\n    });\n}\n", " \
    \   $result = [];\n    foreach ($strings as $string) {\n        if (strpos($string,\
    \ $substring) !== false) {\n            $result[] = $string;\n        }\n    }\n\
    \    return $result;\n}\n</code>\nThis can be further optimized if you would like\
    \ to match only parts of words. And then split strings by white spaces.\n<code>\n\
    <?php", "  return array_filter(\n    $strings,\n    function ($string) use ($substring)\
    \ {\n      return strpos($string, $substring) !== false;\n    }\n  );\n}\n", " \
    \ $filtered_strings = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $filtered_strings[] = $string;\n    }\n  }\n\
    \  return $filtered_strings;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\n\
    Thanks, it works, but not quite correctly, it only filters strings with that substring,\
    \ but does not filter if there are more instances of the substring. I will edit\
    \ my question to reflect this.\n<|/ c |>\n<| c |>\nI made a small change to the\
    \ code to fix this problem.\n<|/ c |>\n<| c |>\nNo need for that anymore :) Thanks,\
    \ now it works correctly.\n<|/ c |>\n<| a dscore=0 tags=arrays,php |>\n<code>\n\
    $array1 = array(\n    'abc',\n    'bacd',\n    'cde',\n    'array'\n);\n\n$array2\
    \ = array(\n    'abc',\n    'bacd',\n    'cde',\n    'array'\n);\n\n$array3 =\
    \ array(\n    'abc',\n    'bacd',\n    'cde',\n    'array'\n);\n\n$array4 = array(\n\
    \    'abc',\n    'bacd',\n    'cde',\n    'array',\n    'array',\n    'array'\n\
    );\n\n$array5 = array(\n    'abc',\n    'bacd',\n    'cde',\n    'array',\n  \
    \  'array',\n    'array',\n    'array'\n);\n\n$array6 = array(\n    'abc',\n \
    \   'bacd',\n    'cde',\n    'array',\n    'array',\n    'array',\n    'array',\n\
    \    'array',\n    'array',\n    'array',\n    'array',\n    'array',\n    'array',\n\
    \    'array',\n    'array',\n    'array',\n    'array',\n    'array',\n    'array',\n\
    \    'array',\n    'array',\n    'array',\n    'array',\n    'array',\n    'array',\n\
    \    'array',\n    'array',\n    'array',\n    'array',\n    'array',\n    'array',\n\
    \    'array',\n    'array',\n    'array',\n    'array',\n    'array',\n    'array',\n\
    \    'array',\n    'array',\n    'array',\n    'array',\n    'array',\n    'array',\n\
    \    'array',\n    'array',\n    'array',\n    'array',\n    'array',\n    'array',\n",
  "    return array_filter(\n        $strings,\n        function ($string) use ($substring)\
    \ {\n            return strpos($string, $substring) !== false;\n        }\n  \
    \  );\n}\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if\
    \ (strpos($string, $substring) !== false) {\n      $filtered[] = $string;\n  \
    \  }\n  }\n  return $filtered;\n}", "    return array_filter(\n        $strings,\n\
    \        function ($string) use ($substring) {\n            return strpos($string,\
    \ $substring) !== false;\n        }\n    );\n}\n", "\t$results = array();\n\t\
    $size = count($strings);\n\tfor ($i = 0; $i < $size; $i++) {\n\t\t$current_string\
    \ = strtolower($strings[$i]);\n\t\tif (strpos($current_string, $substring) !==\
    \ false) {\n\t\t\t$results[] = $strings[$i];\n\t\t}\n\t}\n\treturn $results;\n\
    }\n", "  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }", "    $result = array();\n    foreach ($strings as $string) {\n        if (strpos($string,\
    \ $substring) !== FALSE) {\n            $result[] = $string;\n        }\n    }\n\
    \    return $result;\n}\n</code>\n<|/ a dscore=1 tags=php,arrays |>\n<| a dscore=1\
    \ |>\n<code>", "    $result = [];\n\n    foreach ($strings as $string) {\n   \
    \     if (strpos($string, $substring) !== false) {\n            $result[] = $string;\n\
    \        }\n    }\n\n    return $result;\n}\n", "  if (!is_array($strings)) {\n\
    \    throw new InvalidArgumentException('Input must be an array.');\n  }\n  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== FALSE) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nGood point! I didn't realize that was a requirement,\
    \ but it's good to know for the future.\n<|/ c |>\n<| c |>\nI realize this is\
    \ an old thread, but I just came across it and wondered why your function returned\
    \ an array of size 1, instead of a boolean. Was this intentional?\n<|/ c |>\n\
    <| c |>\n`strpos()` returns `0` if the substring is the first character of the\
    \ string, `-1` if the substring is the last character of the string, `1` if the\
    \ substring is in the middle, and `FALSE` if the substring is not found.\n<|/\
    \ c |>\n<| a |>\nHere's another one without regex, but that can handle a lot of\
    \ different strings while still being fast:\n<code>", "  $result = array();\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $substring) !== FALSE)\
    \ {\n      $result[] = $string;\n    }\n  }\n  return $result;\n}\n", "\t$return\
    \ = array();\n\tforeach($strings as $string) {\n\t\tif (strpos($string, $substring)\
    \ !== false) {\n\t\t\t$return[] = $string;\n\t\t}\n\t}\n\treturn $return;\n}\n",
  "  if (!$strings) return array();\n  $filtered_strings = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== false) {\n      $filtered_strings[]\
    \ = $string;\n    }\n  }\n  return $filtered_strings;\n}", "\tforeach ($strings\
    \ as $key => $value) {\n\t\tif (strpos($value, $substring) !== false) {\n\t\t\t\
    unset($strings[$key]);\n\t\t}\n\t}\n\treturn $strings;\n}", "    if (!is_array($strings))\
    \ {\n        return false;\n    }\n    $result = [];\n    foreach ($strings as\
    \ $str) {\n        if (strpos($str, $substring) !== false) {\n            $result[]\
    \ = $str;\n        }\n    }\n    return $result;\n}", "  return array_filter($strings,\
    \ function ($string) use ($substring) {\n    return (strpos($string, $substring)\
    \ !== false);\n  });\n}", "    return array_filter($strings, function($string)\
    \ use ($substring) {\n        return false !== strpos($string, $substring);\n\
    \    });\n}", "  $strings = array_filter($strings, function($string) use ($substring)\
    \ {\n    return strpos($string, $substring) !== FALSE;\n  });\n  return $strings;\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\nOne line solution:\n<code>\n\
    $input = array(\"abc\", \"bacd\", \"cde\", \"array\", \"hello\", \"arrays\", \"\
    world\");\n$output = array_filter($input, function($value) { return strpos($value,\
    \ \"array\") !== false; });\nvar_dump($output); // array(\"abc\", \"bacd\", \"\
    array\", \"arrays\")\n</code>\n<|/ a tags=arrays,php,filtering,string |>\n<| a\
    \ dscore=2 |>\nHere is another option, which uses filter_recursive:\n<code>",
  "  return array_filter($strings, function($string) {\n    return strpos($string,\
    \ $substring) !== false;\n  });\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\n\
    Yes, it's exactly what i was looking for. I was looking for something like array_filter\
    \ but I did not know that this function exists. Thanks!\n<|/ c |>\n<| c |>\n`array_filter`\
    \ is not exactly the same as `array_map` \u2014 they are very different and in\
    \ different use cases.  `array_filter` can take several arguments and return a\
    \ new array based on those arguments. `array_map` can take a single function and\
    \ apply it element-wise. `array_reduce`, on the other hand, takes two arguments,\
    \ an initial value, and an operation function and produces a single value.\n<|/\
    \ c |>\n<| c |>\n`array_reduce` is indeed a great function.  I wasn't aware it\
    \ existed.  Thanks for pointing that out.  I will update my answer to use `array_reduce`.\n\
    <|/ c |>\n<| a |>\nThis may help.\n<code>\n$array = array('hello','world');\n\
    $array['hello'] = 'foo';\n$array['world'] = 'bar';\n$array['new'] = 'foobar';\n\
    $array['test'] = 'barfoo';\n\n$array = array();\n\nforeach($array as $key => $val){\n\
    \    if(strpos($val, 'foo') !== FALSE){\n        unset($array[$key]);\n    }\n\
    }\n\nprint_r($array);\n</code>\n<|/ a tags=arrays,php dscore=1 |>\n<| c |>\nI\
    \ wouldn't recommend iterating over an array by index. Also why would you unset\
    \ values you don't want to keep?\n<|/ c |>\n<| c |>\nYou are right, I wouldn't\
    \ recommend this method, but it is just to give another way to do it. I wanted\
    \ to keep 'new' as is and just remove 'foo' and 'bar' from the array\n<|/ c |>\n\
    <| a tags=arrays,php |>\nYou could use array_filter or array_map if you don't\
    \ need to use them in a specific order.\n<code>\n$arr = array('hello', 'world');\n\
    $arr['hello'] = 'foo';\n$arr['world'] = 'bar';\n$arr['new'] = 'foobar';\n$arr['test']\
    \ = 'barfoo';\n\n$arr = array_filter($arr, 'strpos', array('foo'));\n$arr = array_filter($arr,\
    \ 'strpos', array('bar'));\n\nvar_dump($arr);\n</code>\nIf you need to use them\
    \ in a specific order, use array_map.\n<code>\n$arr = array('", "    return array_filter($strings,\
    \ function($s) use ($substring) {\n        return strpos($s, $substring) !== false;\n\
    \    });\n}\n</code>\n<|/ a |>\n<| a dscore=3 |>\n<code>\n<?php\n", "    return\
    \ array_filter($strings, function ($string) use ($substring) {\n        return\
    \ strpos($string, $substring) !== false;\n    });\n}\n", "    return array_filter(\n\
    \        $strings,\n        function ($string) use ($substring) {\n          \
    \  return strpos($string, $substring) !== false;\n        }\n    );\n}\n", " \
    \   $result = array();\n    foreach ($strings as $s) {\n        if (strpos($s,\
    \ $substring) !== false) {\n            $result[] = $s;\n        }\n    }\n  \
    \  return $result;\n}\n", "    $return = array();\n    foreach ($strings as $string)\
    \ {\n        if (strpos($string, $substring) !== false) {\n            $return[]\
    \ = $string;\n        }\n    }\n    return $return;\n}\n", "    $filtered = array();\n\
    \    foreach ($strings as $key => $string) {\n        if (strpos($string, $substring)\
    \ !== false) {\n            $filtered[$key] = $string;\n        }\n    }\n\n \
    \   return $filtered;\n}\n", "    return array_filter(\n        $strings,\n  \
    \      function ($string) use ($substring) {\n            return strpos($string,\
    \ $substring) !== false;\n        }\n    );\n}\n", "  $result = array();\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $substring) !== false) {\n\
    \      $result[] = $string;\n    }\n  }\n  return $result;\n}", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\n<|/ a dscore=0 tags=arrays,php,filtering,arrays\
    \ |>\n<| a tags=arrays,php,filtering,arrays |>\narray_filter will help you here.\n\
    <code>\n$result = array_filter($input, function($str) {\n    return strpos($str,\
    \ 'a') === 0;\n});\n</code>\n$result will be an array containing only elements\
    \ where the value is 'a'.\n<|/ a dscore=0 |>\n<| a dscore=0 tags=arrays,php,filtering,arrays\
    \ |>\n<code>\n<?php\n$array = array(\n    'aaa','bbb','ccc',\n    'd','cc',\n\
    \    'e','f',\n    'g','h',\n    'i','aa'\n);\n\n$new_array = array();\nforeach\
    \ ($array as $k => $v){\n    if ( strpos($v,'a') !== false ) {\n        $new_array[]\
    \ = $v;\n    }\n}\n\necho \"<pre>\";\nprint_r($new_array);\necho \"</pre>\";",
  "  $substring = strtolower($substring);\n  $matches = array_filter(\n    $strings,\n\
    \    function ($string) use ($substring) {\n      return strpos($string, $substring)\
    \ !== FALSE;\n    }\n  );\n  return $matches;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThat is really cool! But i need to have it so that i can pass in an associative\
    \ array to the function as opposed to a single string.\n<|/ c |>\n<| c |>\n, `array_filter($array,\
    \ function($s) use ($substring) { ... })` should work. http://php.net/array_filter\n\
    <|/ c |>\n<| c |>\nAwesome that worked perfectly! Thank you so much! I owe you\
    \ a beer ;)\n<|/ c |>\n<| a dscore=0 tags=php,arrays,search |>\nHere's a solution\
    \ that is more flexible than some of the other answers.\n<code>\n<?php", "  foreach($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== false) {\n      $results[]\
    \ = $string;\n    }\n  }\n  return $results;\n}\n", "  $filtered = array();\n\
    \  foreach ($strings as $s) {\n    if (strpos($s, $substring) !== FALSE) {\n \
    \     $filtered[] = $s;\n    }\n  }\n  return $filtered;\n}\n", "    $new_strings\
    \ = array();\n    foreach ($strings as $string) {\n        if (strpos($string,\
    \ $substring) !== false) {\n            $new_strings[] = $string;\n        }\n\
    \    }\n    return $new_strings;\n}\n", "  // return an empty array if there are\
    \ no strings\n  if ($strings === null) {\n    return array();\n  }\n\n  // return\
    \ an empty array if there are no strings, or if the substring is empty\n  if (empty($strings)\
    \ || empty($substring)) {\n    return array();\n  }\n\n  // return all strings\
    \ if $substring is an empty string\n  if ($substring === '') {\n    return $strings;\n\
    \  }\n\n  // iterate through all strings and add them to $filtered_strings if\n\
    \  // $substring is in the string\n  $filtered_strings = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== false) {\n      $filtered_strings[]\
    \ = $string;\n    }\n  }\n\n  // return $filtered_strings if there are no strings\
    \ left after filtering\n  // $filtered_strings will be empty if there are no strings\
    \ left after filtering\n  return count($filtered_strings) ? $filtered_strings\
    \ : array();\n}\n", "  if (is_array($strings)) {\n    $filtered = array();\n \
    \   foreach ($strings as $key => $string) {\n      if (strpos($string, $substring)\
    \ !== false) {\n        $filtered[$key] = $string;\n      }\n    }\n    return\
    \ $filtered;\n  } else {\n    return array();\n  }\n}\n\n/**\n * Print a debug\
    \ message to the browser window\n */", "\t$search = array();\n\tforeach ($strings\
    \ as $string) {\n\t\tif (strpos($string, $substring) !== false) {\n\t\t\t$search[]\
    \ = $string;\n\t\t}\n\t}\n\treturn $search;\n}\n", "    if (!is_array($strings))\
    \ {\n        return $strings;\n    }\n\n    foreach ($strings as $key => $value)\
    \ {\n        if (strpos($value, $substring) !== false) {\n            unset($strings[$key]);\n\
    \        }\n    }\n\n    return $strings;\n}\n</code>\n<|/ a tags=php,arrays,search\
    \ |>\n<| c |>\nGreat solution for a single word.  How would you add another condition\
    \ that if $value was a string \"array\" that would still be shown?\n<|/ c |>\n\
    <| c |>\nSee my updated answer - I added an example.\n<|/ c |>\n<| a dscore=1\
    \ tags=php,arrays,search |>\nHere's one approach that uses array_filter to filter\
    \ the array for only the matches, then implode to join all the matching values:\n\
    <code>\n<?php\n$array = array('abc', 'bacd', 'cde', 'array');\n$search = 'a';\n\
    $matches = array_filter($array, function($v) use ($search) {\n    return stripos($v,\
    \ $search) !== FALSE;\n});\n$result = implode(', ', $matches);\necho $result;",
  "    return array_filter(\n        $strings,\n        function ($string) use ($substring)\
    \ {\n            return strpos($string, $substring) !== FALSE;\n        }\n  \
    \  );\n}\n</code>\n<|/ a tags=regex,arrays,php,string |>\n<| c |>\nI like this\
    \ one. Just a question though, how would you be able to do the same thing, with\
    \ multiple substrings? For example, I was thinking of using this with array_filter\
    \ to filter out any strings that contain \"array\", and then any other strings\
    \ that contain \"array\" with a different substring \"array2\". I tried adding\
    \ another condition to the end of the filter function, but it didn't work.\n<|/\
    \ c |>\n<| c |>\nYou're right, I've edited my answer with a solution that should\
    \ work with multiple substrings.\n<|/ c |>\n<| a tags=regex,arrays,php,string\
    \ dscore=0 |>\n<code>", "  if (!is_array($strings)) {\n    $strings = (array)$strings;\n\
    \  }\n  return array_filter($strings, function($string) use ($substring) {\n \
    \   return strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis works, but I wonder if there is a way to do it without having to\
    \ cast the $strings to an array?\n<|/ c |>\n<| c |>\nIt would be awesome to see\
    \ if there is a way to do this without casting the $strings to an array.\n<|/\
    \ c |>\n<| c |>\n: If you use a closure (anonymous function) instead of a function\
    \ then you can omit the `use` statement and use the `$substring` variable directly,\
    \ but it would be even more awkward.\n<|/ c |>\n<| c |>\n: That depends on whether\
    \ you use the filter just to check whether a string contains another string in\
    \ the first place, or if you want to reuse the filter to filter an array of strings.\
    \ If you need to filter an array of strings then this would be the way to go.\
    \ Otherwise you'd better stick with casting the array to an array.\n<|/ c |>\n\
    <| c |>\nYes, this would be for an array filter. I suppose I could wrap the filter\
    \ function and just use $string instead of $strings inside the closure to make\
    \ it look cleaner.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$array=array(\"this\"\
    ,\"is\",\"array\");\n", "  $filtered_strings = array();\n  foreach ($strings as\
    \ $string) {\n    if (strpos($string, $substring) !== FALSE) {\n      $filtered_strings[]\
    \ = $string;\n    }\n  }\n  return $filtered_strings;\n}\n", "  $filtered = array();\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $substring) !== false)\
    \ {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis solution is very elegant, but it's not very efficient\
    \ because it creates a new array every iteration. Although it's not an issue in\
    \ most cases, you should avoid it when you're dealing with large arrays.\n<|/\
    \ c |>\n<| c |>\nVery much agree with you. I didn't want to change OP's code too\
    \ much but thought that it's good to add this option in case if he wants to use\
    \ it for large data.\n<|/ c |>\n<| a dscore=1 tags=arrays,php |>\n<code>\n$array\
    \ = array(\n    0 => 'foo',\n    1 => 'bar',\n    2 => 'baz',\n);\n\n$array =\
    \ array_filter($array, function ($val) {\n    return strpos('foo', $val) !== false;\n\
    });\n</code>\n<|/ a |>\n<| a tags=arrays,php dscore=1 |>\nIf you want to find\
    \ a string in any position of string, then use array_filter() and strpos() function\
    \ like this\n<code>\n$array = array('abcd', 'abce', 'abcf', 'bacd', 'bace', 'bacf',\
    \ 'caed', 'caef');\n$find = 'ba';\n$result = array_filter($array, function ($v)\
    \ use ($find) {\n    return strpos($v, $find) !== false;\n});\n</code>\nIf you\
    \ want to find a string in beginning or end position, then use array_filter()\
    \ and strpos() function like this\n<code>\n$array = array('abcd', 'abce', 'abcf',\
    \ 'bacd', 'bace', 'bacf', 'caed', 'caef');\n$find = 'ba';\n$result = array_filter($array,\
    \ function ($v) use ($find) {\n    return $v === $find || $v === substr($find,\
    \ 0, strlen($v));\n});\n</code>\n<|/ a |>\n<| c |>\nPlease explain how this answers\
    \ the OP's question, specifically what your code is doing differently than what\
    \ the OP had before.\n<|/ c |>\n<| c |>\nThis answer is correct. I was just explaining\
    \ the difference between using `strpos` and `substr`. Also you used `return strpos($v,\
    \ $find) !== false` instead of `return strpos($v, $find) !== false`. Why not post\
    \ it as a separate answer?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php", "  return\
    \ array_filter(\n    $strings,\n    function ($value) {\n      return strpos($value,\
    \ $substring) !== false;\n    }\n  );\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
