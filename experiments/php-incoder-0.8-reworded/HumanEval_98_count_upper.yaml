name: HumanEval_98_count_upper
language: php
prompt: "<?php\n// Given a string s, count the number of uppercase vowels in even\
  \ indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"\
  abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper($s) {\n"
tests: "function candidate(...$args) {\n    return count_upper(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"aBCdEf\") !== 1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"abcdefg\") !== 0) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"dBBE\") !== 0) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"B\") !== 0) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(\"U\") !== 1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(\"EEEE\") !== 2) { throw new Exception(\"Test failed!\"); }\n\
  }\n\ntest();"
completions: ["    $len = strlen($s);\n    $even = 0;\n    for ($i = 0; $i < $len;\
    \ $i += 2) {\n        if (!isset($s[$i])) {\n            $even++;\n        }\n\
    \    }\n    return $even;\n}\n", "  $count = 0;\n  for ($i = 0; $i < strlen($s);\
    \ $i++) {\n    $char =strtoupper($s[$i]);\n    if (isset($char) && $char != ''){\n\
    \      if ($i % 2 == 0) {\n        $count += 1;\n      }\n    }\n  }\n  return\
    \ $count;\n}\n", "    $count = 0;\n    foreach (str_split($s) as $c) {\n     \
    \   if (isset($c[$c[0]]) && isset($c[$c[0] + 1]) && isset($c[$c[0] - 1])) {\n\
    \            if ($c[$c[0]] === 'U') {\n                $count++;\n           \
    \ }\n        }\n    }\n    return $count;\n}\n", "    $count = preg_match_all('/./us',\
    \ $s, $match);\n    return $count ? $match[0][5] : 0;\n}\n", "    // Count the\
    \ number of uppercase vowels. Return 0 if not found.\n    $vowels = \"aeiouAEIOU\"\
    ;\n    $count = 0;\n    $len = strlen($s);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if (strpos($vowels, $s[$i]) !== false) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "\t$even = str_split($s, 2);\n\t$upper\
    \ = 0;\n\tfor ($i = 0; $i < count($even); $i++) {\n\t\tif (strlen($even[$i]) %\
    \ 2 == 0) {\n\t\t\t$upper += strlen($even[$i]) / 2;\n\t\t}\n\t}\n\treturn $upper;\n\
    }\n", "  $u = 0; // count of upper chars\n  for ($i = 0; $i < strlen($s); $i++)\
    \ {\n    if (!isupper($s[$i])) {\n      continue;\n    }\n    if ($s[$i] === \"\
    A\") {\n      $u++;\n    }\n  }\n  return $u;\n}", "  return preg_match_all('/(.)\\\
    1/', $s, $matches) ? $matches[1] : 0;\n}\n", "\t$vowels = \"aeiou\";\n\t$count\
    \ = preg_match_all(\"!$vowels!\", $s, $matches);\n\treturn $count/strlen($matches[0]);\n\
    }\n", "  return count(preg_grep(\"/^[A-Z]$/\", preg_split(\"//\", $s)));\n}\n",
  "    $vowels = \"aeiouAEIOU\";\n    $vowels_count = substr_count($s, $vowels);\n\
    \    return ($vowels_count / 2) + ($vowels_count % 2);\n}\n", "  $count = 0;\n\
    \  for ($i = 0; $i < strlen($s); $i++)\n    if (ctype_upper($s[$i])) $count++;\n\
    \  return $count;\n}", "    $count = 0;\n    for ($i = 0; $i < strlen($s); $i++)\
    \ {\n        $count += $s[$i] >= 'A' && $s[$i] <= 'Z' ? 1 : 0;\n    }\n    return\
    \ $count;\n}\n", "  $u = 0;\n  for ($i=0; $i<strlen($s); $i++) {\n    $u += (ord($s[$i])\
    \ >= 65 && ord($s[$i]) <= 90) ? 1 : 0;\n  }\n  return $u;\n}", "  $count = 0;\n\
    \  for ($i = 0; $i < strlen($s); $i += 2) {\n    $char = strtoupper(substr($s,\
    \ $i, 2));\n    if ($char === $char) {\n      $count += 1;\n    }\n  }\n  return\
    \ $count;\n}\n", "    $n = 0; $c = strlen($s);\n    for ($i = 0; $i < $c; $i++)\n\
    \    {\n        if (!ctype_upper($s[$i]))\n        {\n            $n++;\n    \
    \    }\n        elseif ($s[$i] === 'A')\n        {\n            if ($n % 2 ==\
    \ 0)\n            {\n                $n++;\n            }\n        }\n    }\n\
    \    return $n;\n}\n\n$tests = array('aaAa', 'AaAa', 'AAa', 'AaAaA', 'aAaA');\n\
    foreach ($tests as $s)\n{\n    print \"'$s' --> $counter('$s') \";\n    if ($counter($s)\
    \ != 1)\n    {\n        print \"failed\\n\";\n    }\n    else\n    {\n       \
    \ print \"passed\\n\";\n    }\n}", "  $count = 0;\n  for ($i = 0; $i < strlen($s);\
    \ $i++) {\n    if (strtoupper($s[$i]) === \"A\") {\n      ++$count;\n    }\n \
    \ }\n  return $count;\n}\n", "    // return early if the string is empty.\n  \
    \  if ($s === '') return 0;\n\n    $vowels = \"AEIOUaeiou\";\n    $len = strlen($s);\n\
    \    $upper = 0;\n\n    // The second loop is O(len). See \"Counting Vowels in\
    \ Words with Dynamic Programming\"\n    // by S. R. Pardoulas and K. E. Quinlan.\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if ($s[$i] === $vowels[$i]) $upper++;\n\
    \    }\n\n    return $upper;\n}\n", "    $count = 0;\n    for($i = 0; $i < strlen($s);\
    \ $i += 2) {\n        if($s[$i] >= 'A' && $s[$i] <= 'Z') {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\n\
    This works, but is inefficient, and has a bug. `count_upper(\"aBCdEf\")` returns\
    \ 2, but should be 0.\n<|/ c |>\n<| a dscore=3 tags=php,string,algorithm |>\n\
    <code>\n$len = strlen($string);\n$result = 0;\nfor($i = 0; $i < $len; $i += 2)\
    \ {\n    if($string[$i] >= 'A' && $string[$i] <= 'Z') {\n        $result ++;\n\
    \    }\n}\n\necho $result;\n</code>\n<|/ a |>\n<| c |>\nNice! You might want to\
    \ add some explanation to your answer.\n<|/ c |>\n<| c |>\nI didn't think about\
    \ it at first, that's a good solution as well. I just thought of using the modulus\
    \ operator to determine if the character is even or odd within the for loop.\n\
    <|/ c |>\n<| c |>\nNice! `for($i = 0; $i < $len; $i += 2)` can be shortened to\
    \ `for($i = 0; $i < strlen($string); $i += 2)` though. No need for `strlen()`\
    \ there.\n<|/ c |>\n<| c |>\n`strlen($string)` is only used once, whereas `$len`\
    \ is used multiple times.\n<|/ c |>\n<| a |>\nIf you're not dealing with unicode,\
    \ you can use mb_strlen() to get the length of a string. \n<code>\n$string = \"\
    aBCdEf\";\n$stringlength = mb_strlen($string);\n$uppercase_count = 0;\nfor($i=0;\
    \ $i<$stringlength; $i+=2)\n{\n    if($string[$i] >= 'A' && $string[$i] <= 'Z')\n\
    \    {\n        $uppercase_count++;\n    }\n}\n</code>\n<|/ a dscore=2 tags=php,string,algorithm\
    \ |>\n<| c |>\nYou also need to add an \"else\" clause to the if statement. Otherwise\
    \ \"aBCdEf\" would return 2 where it should be 0.\n<|/ c |>\n<| c |>\nI think\
    \ it's better practice to always have an \"else\" clause so you catch any errors\
    \ that may come up during development.\n<|/ c ", "    // Initialize our running\
    \ total to zero.\n    $count = array_sum(str_split($s));\n\n    // Scan through\
    \ the string and increase the count for each vowel.\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        if ($s[$i] === \"a\" || $s[$i] === \"e\" || $s[$i] === \"i\"\
    \ || $s[$i] === \"o\" || $s[$i] === \"u\") {\n            $count++;\n        }\n\
    \    }\n\n    // Return our count.\n    return $count;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nclass Test extends \\Illuminate\\Support\\Facades\\\
    Facade\n{\n\n    public static function getFacadeAccessor()\n    {\n        return\
    \ 'test';\n    }\n\n    public function greet()\n    {\n        return 'Hello,\
    \ World!';\n    }\n\n    public function test()\n    {\n        echo 'Hello World\
    \ ';\n    }\n}\n\n$c = new \\App\\Test();\n\n$d = $c->test();\n\n$e = $d->greet();\n\
    </code>\n<|/ a tags=laravel,php |>\n<| a dscore=0 |>\nUse facade for that:\n<code>\n\
    class HelloWorldFacade extends Facade {\n\n    /**\n     * Get the registered\
    \ name of the component.\n     *\n     * string\n     */\n    protected static\
    \ function getFacadeAccessor() {\n        return 'HelloWorld';\n    }\n}\n</code>\n\
    and use it like that\n<code>\nuse HelloWorldFacade;\n\n$helloworld = HelloWorldFacade::getFacadeAccessor();\n\
    $helloworld->someFunction();\n</code>\n<|/ a tags=laravel,php |>\n<| a dscore=0\
    \ |>\nAdd below code in app\\Providers\\AppServiceProvider.php file.\n<code>\n\
    <?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\Facades\\Facade;\n\
    \nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Bootstrap\
    \ any application services.\n     *\n     * void\n     */\n    public function\
    \ boot()\n    {\n        Facade::setFacadeClass('HelloWorld');\n    }\n}\n</code>\n\
    and in app\\Providers\\HelloWorldServiceProvider.php file add below code.\n<code>\n\
    <?php\n\nnamespace App\\Providers;\n\nuse App\\Facades\\HelloWorld;\nuse Illuminate\\\
    Support\\ServiceProvider;\n\nclass HelloWorldServiceProvider extends ServiceProvider\n\
    {\n    /**\n     * Bootstrap any application services.\n     *\n", "    $len =\
    \ strlen($s);\n    $evens = 0;\n    for ($i = 0; $i < $len; $i++) {\n        if\
    \ ($s[$i] === 'E' && $s[($i + 1) % $len] === 'E') {\n            $evens++;\n \
    \       }\n    }\n    return $evens;\n}\n", "  return preg_match_all('/[AEIOUaeiou]/',\
    \ $s) ? 1 : 0;\n}\n", "    $vowels = \"aeiouy\";\n    $lowers = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    $uppers = 0;\n    $i = 0;\n    while($i < strlen($s)) {\n        $c = strtolower($s[$i]);\n\
    \        if ($c>='z') {\n            $uppers++;\n        }\n        for($j=0;$j<strlen($vowels);$j++)\
    \ {\n            if($c==$vowels[$j]) {\n                break;\n            }\n\
    \        }\n        $i++;\n    }\n    return $uppers;\n}", "    $r = array(0);\n\
    \    for ($i=0;$i<strlen($s);$i++) {\n        $r[$i % 2]++;\n    }\n    return\
    \ $r[strlen($s)-1];\n}", "    $vowels = \"aeiouy\";\n    $count = preg_match_all('/['\
    \ . $vowels . ']+/', $s, $matches);\n    return $count;\n}\n", "  return $s ^\
    \ $s & ~($s & 1);\n}\n", "  $num_uppers = 0;\n  for ($i = 0; $i < strlen($s);\
    \ $i++) {\n    $c = $s[$i];\n    if (!is_upper($c)) {\n      continue;\n    }\n\
    \n    if ($c === 'U') {\n      $num_uppers++;\n    } else {\n      break;\n  \
    \  }\n  }\n\n  return $num_uppers;\n}\n", "  $count = 0;\n  for ($i = 0; $i <\
    \ strlen($s); $i += 2) {\n    if (ctype_upper($s[$i]) && ctype_upper($s[$i + 1]))\
    \ {\n      $count++;\n    }\n  }\n  return $count;\n}\n", "\t$i = 0;\n\twhile\
    \ ($i < strlen($s)) {\n\t\tif ($s[$i] >= 'a' && $s[$i] <= 'z') {\n\t\t\tif ($s[$i]\
    \ >= 'A' && $s[$i] <= 'Z') {\n\t\t\t\t++$i;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\
    \t\t}\n\t\t} else {\n\t\t\t++$i;\n\t\t}\n\t}\n\n\treturn $i;\n}\n", "  return\
    \ preg_match_all('/[A-Z]/', $s, $matches) ? count($matches[0]) : 0;\n}\n</code>\n\
    <|/ a dscore=0 tags=php,strpos,regex,preg-match |>\n<| c |>\nHow about if you\
    \ had `count_upper(\"aBCDef\")` return 1 instead of 3?\n<|/ c |>\n<| c |>\n: Your\
    \ question says you don't want consecutive matches. I'm saying you _do_ want consecutive\
    \ matches. But your example above doesn't show that. Why not just use `preg_match_all`\
    \ and count the results?\n<|/ c |>\n<| c |>\nMy bad, I did misread the question.\
    \ I suppose OP could always do a `preg_match_all` on the string and then iterate\
    \ through all the matches to figure out whether they were consecutive.\n<|/ c\
    \ |>\n<| c |>\nI believe your answer is exactly what I'm looking for. I was hoping\
    \ there would be a preg_match function that would do all that for me with something\
    \ similar to my answer. But I guess not.\n<|/ c |>\n<| c |>\n: Yes, I see your\
    \ point. My code just happens to answer exactly the OP's question. I'm just telling\
    \ you that there's no reason to use this in real life.\n<|/ c |>\n<| a dscore=0\
    \ tags=php,strpos,regex,preg-match |>\nHere is an example how you could achieve\
    \ this with a simple regular expression:\n<code>\n$str = \"aBCDefg\";\n$pattern\
    \ = '#([a-z])\\1#';\npreg_match_all($pattern, $str, $matches);\necho count($matches[0]);\
    \ // echoes \"1\"\n</code>\n<|/ a |>\n<| c |>\nThis regex will also match `aBcDefg`.\
    \ I don't think that's what the OP wants.\n<|/ c |>\n<| c |>\n: I read this \"\
    `I wanted to count the consecutive matches of a letter within a string.`\". If\
    \ it also should not match `aBcDefg` the OP will have to edit his question and\
    \ tell us this.\n<|/ c |>\n<| c |>\n: I modified my question to make it more clear\
    \ what I mean.\n<|/ c |>\n<| a |>\nThis should do it:\n<code>", "    // Initialization\n\
    \    $count = 0;\n\n    // Scan through string counting each occurrence of a vowel\n\
    \    for ($i = 0; $i < strlen($s); $i++) {\n        if (preg_match('/[AEIOUaeiou]/i',\
    \ $s[$i])) {\n            $count++;\n        }\n    }\n\n    return $count;\n\
    }\n", "    $vowels = \"aeiouAEIOU\";\n    $count = preg_match_all('/([bcdfghjklmnpqrstvwxyz])/',$s,$match);\n\
    \    \n    return $count ? $match[1][0] : 0;\n}", "    $uppers = 0;\n    $len\
    \ = strlen($s);\n    for ($i = 0; $i < $len; $i += 2) {\n        $uppers += (bool)ctype_upper($s[$i]);\n\
    \    }\n    return $uppers;\n}\n", "  return count(preg_grep('/^./u', str_split($s,\
    \ 2)));\n}\n", "  return preg_match_all('~([A-Z])~', $s, $m, PREG_OFFSET_CAPTURE)\
    \ ? $m[1][0] : 0;\n}", "    $len = strlen($s);\n    $upper = 0;\n    for ($i =\
    \ 0; $i < $len; $i++) {\n        $upper = bcadd($upper, ord($s[$i]));\n    }\n\
    \    return $upper;\n}", "    return preg_match_all('/([A-Z])/', $s, $matches)\
    \ ? $matches[0][0] : 0;\n}\n", "    if ($s === '')\n        return 0;\n    $len\
    \ = strlen($s);\n    $result = 0;\n    for ($i = 0; $i < $len; $i += 2) {\n  \
    \      if (preg_match('/[AEIOUaeiou]/', $s[$i])) {\n            $result++;\n \
    \       }\n    }\n    return $result;\n}\n", "    $n = count_chars($s, true);\n\
    \    return $n % 2 == 0 ? 0 : $n;\n}\n", "  return count_chars($s, 1, strlen($s),\
    \ 'u');\n}", "  $n = 1;\n  $i = 0;\n  while ($i < strlen($s)) {\n    if (ctype_upper($s[$i])\
    \ && $s[$i] !== '?') {\n      $n++;\n    }\n    $i++;\n  }\n  return $n;\n}",
  "  $vowels = \"aeiouAEIOU\";\n  $even = 0;\n  for ($i = 0; $i < strlen($s); $i++)\
    \ {\n    $c = $s[$i];\n    if ($c === \"a\" || $c === \"e\" || $c === \"i\" ||\
    \ $c === \"o\" || $c === \"u\") {\n      $even += strpos($vowels, $c);\n    }\n\
    \  }\n  return $even;\n}\n", "    $sum = 0;\n    for ($i = strlen($s) - 1; $i\
    \ >= 0; $i--) {\n        if ($s[$i] >= 'a' && $s[$i] <= 'z') {\n            $sum\
    \ += (strpos($s, 'a', $i) - $i) % (2 * strlen($s));\n        } else {\n      \
    \      $sum += $s[$i];\n        }\n    }\n    return $sum;\n}\n", "    $n = 0;\n\
    \    for ($i = 0; $i < strlen($s); $i += 2) {\n        if (ctype_upper(substr($s,\
    \ $i, 2))) {\n            $n++;\n        }\n    }\n\n    return $n;\n}", "   \
    \ $count = count($s);\n    for ($i=0; $i<$count; $i++) {\n        if ($s[$i]{0}==\"\
    A\" && isupper($s[$i][1])) {\n            $count--;\n        }\n    }\n    return\
    \ $count;\n}\n", "    $count = preg_match_all('/./', $s, $matches);\n    return\
    \ $count;\n}\n", "\t$upper = 0;\n\t$len = strlen($s);\n\tfor ($i = 0; $i < $len;\
    \ $i++) {\n\t\t$upper = max(($upper ? $upper : 0), ord($s[$i]));\n\t}\n\treturn\
    \ ($len + ($upper % 2)) / 2;\n}\n", "  return count(preg_grep('/[A-Z]+/', str_split($s,\
    \ 1)));\n}", "    $count = 0;\n    for($i=0; $i<strlen($s); $i++) {\n        if\
    \ ($s[$i] >= 'A' && $s[$i] <= 'Z') {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}", "    return preg_match_all('/([a-z])/', $s, $matches,\
    \ PREG_OFFSET_CAPTURE) \n        ? array_sum(array_map(function ($match) {\n \
    \           return $match[1] % 2 == 0;\n        }, $matches[1])) \n        : 0;\n\
    }\n", "  for ($i = 0, $len = strlen($s); $i < $len; $i++) {\n    $char = strtolower($s[$i]);\n\
    \    $up   = (ord($char) & 0x20) ? 1 : 0;\n    $up  += (strlen($char) >= 2 &&\
    \ ctype_upper($char[0])) ? 1 : 0;\n    if ($i % 2 == $up) continue;\n    $count++;\n\
    \  }\n  return $count;\n}\n", "  $upper = 0;\n  for ($i = 0; $i < strlen($s);\
    \ $i++) if (ctype_upper($s[$i])) $upper++;\n  return $upper;\n}\n", "    $res\
    \ = 0;\n    for ($i = 0; $i < strlen($s); ++$i) {\n        if ($s[$i] >= 'A' &&\
    \ $s[$i] <= 'Z') {\n            if ($s[$i] <= 'E')\n                $res += 1;\n\
    \            if ($s[$i] >= 'I')\n                $res += 2;\n        }\n    }\n\
    \    return $res;\n}\n", "  return preg_match_all('/([A-Z])/', $s, $matches);\n\
    }", "    $even_indexes = array();\n    $vowels = array(\"a\",\"e\",\"i\",\"o\"\
    ,\"u\");\n    for($i=0; $i<strlen($s); $i+=2){\n        $even_indexes[] = $i;\n\
    \    }\n    foreach($even_indexes as $even_index) {\n        $even_index = strlen($s)\
    \ - (strlen($s) - $even_index);\n        if(isset($vowels[$s[$even_index]])) {\n\
    \            return 1;\n        }\n    }\n    return 0;\n}", "    $count = -1;\n\
    \    for($i = 0; $i < strlen($s); $i++) {\n        if(preg_match('/^[AEIOUaeiou]/i',\
    \ $s[$i])) $count++;\n    }\n    return $count;\n}\n", "    $vowels = \"aeiouAEIOU\"\
    ;\n    $num_vowels = array_sum(str_split($vowels));\n    return substr_count($s,\
    \ $num_vowels);\n}\n", "    return preg_match_all('~(?<!^)(?!$)(?<!.)([aeiouyAEIOUY])(?!$)(?!^)(?!.$)~',\
    \ $s, $matches, PREG_OFFSET_CAPTURE);\n}\n</code>\n<|/ a dscore=0 tags=php,count,substring\
    \ |>\n<| c |>\nIt was working properly on my previous code so I thought there\
    \ will be some changes I need to make on this. I see your point and I'll update\
    \ my answer and thanks a lot for your help\n<|/ c |>\n<| c |>\nI have updated\
    \ my answer and added `preg_match_all()` based solution. Please let me know if\
    \ this helps.\n<|/ c |>\n<| c |>\nyes it worked. Thank you so much sir. I was\
    \ expecting it will be done with just simple function but wasn't able to do that.\
    \ Thanks a lot.\n<|/ c |>\n<| a dscore=0 |>\nAs you already have mentioned you\
    \ had a working code so I thought here is a solution which is not so complicated\n\
    <code>\n<?php\n$string = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n\
    Morbi blandit quam leo, a vestibulum ipsum sodales ac.\nQuisque eleifend ipsum\
    \ orci, ut bibendum nibh egestas at.\nPellentesque habitant morbi tristique senectus\
    \ et netus et \nmalesuada fames ac turpis egestas. Mauris sit amet quam ipsum.\n\
    Vestibulum consequat ante sit amet felis ultrices, sed consequat \nleo ultrices.\
    \ Pellentesque habitant morbi tristique senectus et \nnetus et malesuada fames\
    \ ac turpis egestas. Mauris sit amet quam ipsum.\nVestibulum consequat ante sit\
    \ amet felis ultrices, sed consequat \nleo ultrices. Pellentesque habitant morbi\
    \ tristique senectus et \nnetus et malesuada fames ac turpis egestas. Mauris sit\
    \ amet quam ipsum.\nVest", "    $count = -1;\n    $len = strlen($s);\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        $c = strtoupper($s[$i]);\n        $count\
    \ += ($c == 'A' || $c == 'E' ? 1 : 0);\n    }\n    return $count;\n}\n</code>\n\
    <|/ a tags=php |>\n<| c |>\nI like the `strpos` method but the `str_ireplace`\
    \ method doesn't work with UTF-8 characters so I updated the function with `mb_strpos`\n\
    <|/ c |>\n<| c |>\nIf you need case insensitive searching then `strpos` would\
    \ be the way to go. `mb_strpos` would be the way to go if you're dealing with\
    \ multibyte characters but `str_ireplace` would not work correctly. `str_ireplace`\
    \ does do case insensitive replaces but it doesn't replace all occurrences even\
    \ with the `/a/g` regex.\n<|/ c |>\n<| a tags=php dscore=0 |>\nThe str_replace\
    \ function can be used to replace the letter 'A' with 'B'.\n<code>\n<?php\n$s\
    \ = str_replace(\"A\",\"B\",\"A B C D E F\");\necho $s;", "  return preg_match_all('~(?<!^)(?!$)[AEIOUaeiou]~i',\
    \ $s) ? count($s[0]) / 2 : 0;\n}\n</code>\nIf you're worried about speed/execution\
    \ time, I suggest you read a good introductory article about PHP regexes, such\
    \ as the one at regular-expressions.info.  And if you're using PHP 5.3+, you may\
    \ want to consider using preg_replace_callback to apply a function to the matches\
    \ of your regex instead of using preg_match_all.  (preg_replace_callback takes\
    \ 3 arguments: the regex itself, the function, and an array/object containing\
    \ all of the matched values.)\n<|/ a tags=php |>\n<| c |>\nI like this solution\
    \ as well, but it's important to remember that `preg_match_all` will return an\
    \ array in which the odd elements are the matches, and even elements are the capture\
    \ groups.  The function above uses only `preg_match`.  You will need to either\
    \ combine matches with capture groups, or use the function from the other answer.\n\
    <|/ c |>\n<| c |>\nThanks, I'll look into preg_replace_callback. Do you have an\
    \ idea of how I can implement a similar function to the one in Tim's answer? He\
    \ used two preg_replaces.\n<|/ c |>\n<| c |>\nIt depends on what you're trying\
    \ to do. Your function `count_upper` seems to count the number of uppercase vowels,\
    \ but you're also mentioning something about needing to \"count\" the amount of\
    \ times \"a vowel\" appears.  If you need to count the amount of times *any* vowel\
    \ appears across multiple lines of text, then Tim's answer will work fine.  If\
    \ that's not what you're trying to do, please clarify the question.\n<|/ c |>\n\
    <| c |>\nThanks for the reply. I was wondering if you could help me with this\
    \ one. [link](http://stackoverflow.com/questions/18001496/counting-the-amount-of-times-a-vowel-appears-on-the-same-line)\
    \ Thank you!\n<|/ c |>\n<| c |>\n- I updated the function to count the number\
    \ of times \"a vowel\" appears on the same line.  I also added some explanation\
    \ of the regex (which I also included inline in the function definition).\n<|/\
    \ c |>\n<| a tags=php |>\nI agree with Tim's answer. This one will also work with\
    \ unicode letters (not only latin):\n<code>", "    $count = preg_match_all('/([a-z]+)/',\
    \ $s, $matches);\n    $num_vowels = count($matches[1]);\n    $count = 0;\n   \
    \ for ($i = 0; $i < $num_vowels; $i++) {\n        $count += $matches[1][$i][0]{0}\
    \ === 'a';\n    }\n    return $count;\n}", "    $count = 0;\n    foreach (str_split($s)\
    \ as $c) {\n        if (\"AEIOUaeiouy\".indexOf($c) % 2) ++$count;\n    }\n  \
    \  return $count;\n}\n", "  $a = preg_split('/(?=[A-Z])/', $s);\n  $count = 0;\n\
    \  for ($i = 0; $i < count($a); $i++) {\n    if ($i % 2 == 0) {\n      if (strcasecmp($a[$i],\
    \ \"A\") === 0) {\n        $count++;\n      }\n    }\n  }\n  return $count;\n\
    }\n", "  $upper = preg_match('/[AEIOUaeiou]/', '', $s);\n  return $upper ? $upper\
    \ : 0;\n}", "    $even_indexes = array_filter(array_keys(str_split($s)), 'is_int');\n\
    \    return count(array_filter($even_indexes, function($key) { return $key & 1;\
    \ }), 0);\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=0 tags=php |>\nOne way of\
    \ doing it:\n<code>\n<?php\n\n$string = 'abcde';\n\nfor ($i = 0; $i < strlen($string);\
    \ $i++){\n    $letter = strtoupper($string[$i]);\n    if ($letter == 'A' || $letter\
    \ == 'E' || $letter == 'I' || $letter == 'O' || $letter == 'U')\n        echo\
    \ \"A E I O U found in position $i<br>\";\n}\n</code>\n<|/ a |>\n<| c |>\nYou\
    \ should use `count($string)` instead of `strlen`.\n<|/ c |>\n<| c |>\nThat is\
    \ correct, but I wanted to show the OP the possibility of using strlen\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$str=\"ABCD\";\n$arr=array(\"A\",\"B\"\
    ,\"C\",\"D\");\n$count = count($arr);\n$count=0;\nforeach($arr as $letter) {\n\
    \    if($letter==\"A\"||$letter==\"B\"||$letter==\"C\"||$letter==\"D\") {\n  \
    \      $count++;\n    }\n}\necho $count;", "  return strlen(preg_replace('/([a-zA-Z])([AEIOU])/',\
    \ '$1$2', $s));\n}", "  for ($i = 0; $i < strlen($s); $i += 2) {\n    if (ctype_upper($s[$i])\
    \ && ctype_upper($s[$i + 1])) {\n      return 1;\n    }\n  }\n  return 0;\n}",
  "    return count(preg_grep('/^([AEIOU])+$/', $s));\n}\n", "    $vowels = \"aeiouAEIOU\"\
    ;\n    $counter = 0;\n    foreach (str_split($s) as $char) {\n        if ($char\
    \ == strtoupper($char)) {\n            $counter++;\n        }\n        if (in_array($char,\
    \ $vowels)) {\n            $counter++;\n        }\n    }\n    return $counter;\n\
    }\n", "    $counter = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        $counter++;\n\
    \        $char = substr($s, $i, 1);\n        if ($char === 'a' || $char === 'A'\
    \ || $char === 'e' || $char === 'E' || $char === 'i' || $char === 'I' || $char\
    \ === 'o' || $char === 'O' || $char === 'u' || $char === 'U') {\n            $counter++;\n\
    \        }\n    }\n    return $counter;\n}\n", "  $upper = 0;\n  for ($i = 0;\
    \ $i < strlen($s); $i++) {\n    $c1 = ord($s[$i]);\n    if ($c1 >= 'A' && $c1\
    \ <= 'Z') {\n      $upper++;\n    }\n    if ($c1 === '_') {\n      // This skips\
    \ spaces and control characters.\n    } else {\n      if ($c1 >= 'a' && $c1 <=\
    \ 'z') {\n        $upper++;\n      }\n    }\n  }\n  return $upper;\n}\n</code>\n\
    <|/ a tags=algorithm,php,count dscore=4 |>\n<| c |>\nThis works in PHP for me.\
    \  And I believe it works in other languages as well.\n<|/ c |>\n<| c |>\nThis\
    \ is great, but it is unnecessarily slow. [Counting is O(n)](http://www.cplusplus.com/reference/algorithm/count/)\
    \ while your algorithm is O(n^2). So it is better to change it to O(n).\n<|/ c\
    \ |>\n<| c |>\nYou're right.  That was an accidental omission.  I've updated the\
    \ answer.  Thank you.\n<|/ c |>\n<| c |>\nThis fails to consider Unicode characters.\
    \ http://stackoverflow.com/questions/16875781/count-upper-case-letters-in-a-string/34608041#34608041\
    \ does work\n<|/ c |>\n<| a dscore=4 tags=algorithm,php,count |>\nHere's a little\
    \ PHP script I wrote for this purpose.\n<code>", "  $upper = 0;\n  for ($i = 0;\
    \ $i < strlen($s); ++$i) {\n    $upper = count_upper_even($upper, $s[$i]);\n \
    \ }\n  return $upper;\n}\n", "  $even = 0;\n  for ($i = 0; $i < strlen($s); $i\
    \ += 2) {\n    if (strtoupper($s[$i]) === 'A') {\n      $even++;\n    }\n  }\n\
    \  return $even;\n}", "    $vowels = \"aeiou\";\n    $count = str_split($s);\n\
    \    $i = 0;\n    foreach($count as $c) {\n        if (preg_match(\"/$vowels/\"\
    , $c)) {\n            $i ++;\n        }\n    }\n    return $i;\n}\n", "    $c\
    \ = 0; $i = 0;\n    foreach($s as $c) {\n        if($c === strtoupper($c)) {\n\
    \            $i++;\n        }\n        if($i % 2 === 0) {\n            $i++;\n\
    \        }\n    }\n    return $i;\n}\n", "  $n = strlen($s);\n  $upper = 0;\n\
    \  for ($i = 0; $i < $n; $i += 2) {\n    $upper += $s[$i] === 'D';\n  }\n  return\
    \ $upper;\n}\n", "\t$a = \"aeiou\";\n\t$acount = count($a);\n\t$acounteven = array_count_values($a);\n\
    \t$c = 0;\n\tforeach ($acounteven as $i => $b) {\n\t\tif ($b % 2) {\n\t\t\t$c+=\
    \ $acounteven[$i];\n\t\t}\n\t}\n\treturn $c;\n}\n\n", "    $count   = 0;\n   \
    \ $lower   = strtolower($s);\n    $vowels = array('a', 'e', 'i', 'o', 'u');\n\
    \    foreach($vowels as $v) {\n        if(strpos($lower, $v) !== false) {\n  \
    \          $count++;\n        }\n    }\n    return $count;\n}\n", "    $counter\
    \ = 0;\n    for ($i = 0, $len = strlen($s); $i < $len; ++$i) {\n        if (!isupper($s[$i]))\
    \ {\n            $counter++;\n        }\n    }\n    return $counter;\n}\n", " \
    \ $count = 0;\n  for ($i = 0; $i < strlen($s); $i += 2) {\n    $count += ($s[$i]\
    \ <= \"Z\");\n  }\n  return $count;\n}\n", "  $even = array_filter($s, function($v){\
    \ return $v & 1; }, ARRAY_FILTER_USE_BOTH);\n  return count($even);\n}", "  $result\
    \ = 0;\n  for ($i = 0; $i < strlen($s); $i++) {\n    if ($s[$i] >= 'A' && $s[$i]\
    \ <= 'Z') {\n      if ($s[$i] >= 'a' && $s[$i] <= 'z') {\n        $result += ($s[$i]\
    \ - 'A') % 2; // even index\n      }\n    }\n  }\n  return $result;\n}\n</code>\n\
    The above program can count the uppercase vowels even indices from the given string.\
    \ The function count_upper takes an argument $s which is an array with each character\
    \ in string $s. \nAs an example, it can count the uppercase vowels in each even\
    \ index in each even index characters of the given string. If you have any further\
    \ doubt, please feel free to ask.\n<|/ a |>\n<| c |>\nHi, thanks for your answer.\
    \ Could you please let me know how would I count the uppercase vowel from the\
    \ string given above? I cannot use any function like 'ctype_alpha'.\n<|/ c |>\n\
    <| c |>\nHi I have edited my answer, please check.\n<|/ c |>\n<| a tags=php |>\n\
    <code>\n$a='The quick brown fox';\n$count=0;\n$pattern='~(.)~';\npreg_match_all($pattern,\
    \ $a, $matches);\nforeach($matches[1] as $v)\n{\n    if(strtoupper($v) != $v)\n\
    \        $count++;\n}\necho $count;\n</code>\n<|/ a dscore=1 |>\n<| c |>\nHi,\
    \ thanks for your answer. Could you please let me know how would I count the uppercase\
    \ vowel from the string given above? I cannot use any function like 'ctype_alpha'.\n\
    <|/ c |>\n<| c |>\nUse regex with group 1. Check updated answer\n<|/ c |>\n<|\
    \ a dscore=1 |>\n<code>", "    return preg_match_all('/[aeiou]/i', $s, $matches)\
    \ ? $matches[0][0] : 0;\n}\n", "    $uppercount = 0;\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        if ($s[$i] >= 'A' && $s[$i] <= 'Z') {\n            $uppercount++;\n\
    \            if ($i % 2 == 0) {\n                // Even indices\n           \
    \     // Only count if the character is uppercase, unless it is the first\n  \
    \              // character, since we only care about even indices\n         \
    \       if ($s[$i] != 'A') {\n                    $uppercount = 0;\n         \
    \       }\n            }\n        }\n    }\n    return $uppercount;\n}\n", " \
    \   return preg_match_all('//u', $s, $matches) ? $matches[0] : 0;\n}\n", "   \
    \ $i = 0;\n    while (isset($s[$i]) && $s[$i] != '_')\n        $i++;\n    return\
    \ isset($s[$i]) && $s[$i] != '_' ? 1 : 0;\n}\n", "  $count = 0;\n  for ($i = 0;\
    \ $i < strlen($s); $i++) if (isupper($s[$i]) && $s[$i] != 'D') $count++;\n  return\
    \ $count;\n}\n", "  $a = preg_split('//', $s);\n  $r = count($a);\n  $c = array_count_values($a);\n\
    \  $c2 = array();\n  foreach ($c as $i => $v) $c2[$i] = $v;\n  foreach ($c2 as\
    \ $i => $v) $r -= $v & 1;\n  return $r;\n}\n", "    $count = 0;\n    foreach (str_split($s)\
    \ as $c) {\n        if ($c == 'A' || $c == 'E' || $c == 'I' || $c == 'O' || $c\
    \ == 'U')\n            $count++;\n    }\n    return $count;\n}\n", "    $count_upper\
    \ = 0;\n    for ($i = 0; $i < strlen($s); $i += 2) {\n        if (ctype_upper(substr($s,\
    \ $i, 2)) && strlen($s) - $i >= 2) {\n            $count_upper++;\n        }\n\
    \    }\n    return $count_upper;\n}\n", "  return preg_match_all('/[A-Z]/', $s,\
    \ $m);\n}", "\t$vowels = \"aeiouAEIOU\";\n\t$count = 0;\n\tfor ($i = 0, $len =\
    \ strlen($s); $i < $len; $i++) {\n\t\t$c = $s[$i];\n\t\t$is_vowel = in_array($c,\
    \ $vowels);\n\t\tif ($is_vowel) {\n\t\t\t$count += substr_count($c, 'A') - 1;\n\
    \t\t}\n\t}\n\treturn $count;\n}\n", "    $r = preg_match('/([a-z])/', $s, $match,\
    \ PREG_OFFSET_CAPTURE);\n    if ($r === 0) return 0;\n    $upper = 0;\n    foreach\
    \ ($match as $m) {\n        $upper = $upper + 1;\n        if ($m[1] % 2 == 0)\
    \ return $upper;\n    }\n    return $upper;\n}", "  for ($i = count($s); $i >\
    \ 0; $i--) {\n    // \"e\" != \"E\"\n    if (preg_match(\"/e$/\",$s[$i - 1]))\
    \ return 0;\n  }\n\n  return 1;\n}\n", "    $even_indexes = array_filter($s, function\
    \ ($index, $item) { return $index % 2 == 0; });\n    return count($even_indexes);\n\
    }\n", "    $n = 0;\n    for ($i = 0; $i < strlen($s); $i++){\n        $v = ord($s[$i]);\n\
    \        if($v > 64 && $v < 91) $n++;\n    }\n    return $n+$n % 2 ? $n : 0;\n\
    }", "  $upper = 0;\n  for ($i = 0; $i < strlen($s); $i++) {\n    if ($s[i] >=\
    \ 'A' && $s[i] <= 'Z') {\n      $upper++;\n    }\n  }\n  return $upper;\n}\n",
  "  $t = 0;\n  $len = strlen($s);\n  for($i=0; $i<$len; $i++) {\n    if (ord($s[$i])\
    \ > 64 && ord($s[$i]) < 91) $t += 1;\n  }\n  return $t;\n}\n", "  $even = false;\n\
    \  $upper = 0;\n  for ($i = 0; $i < strlen($s); $i++) {\n    $c = substr($s, $i,\
    \ 1);\n    if (ctype_upper($c)) {\n      if (!$even && ord($c) >= ord('A') &&\
    \ ord($c) <= ord('Z')) {\n        $upper++;\n      }\n      $even = !$even;\n\
    \    }\n  }\n  return $upper;\n}", "\t$count = 0;\n\t$len = strlen($s);\n\tfor\
    \ ($i = 0; $i < $len; $i += 2) {\n\t\t$count += ($s[$i] == 'A') ? 0 : 1;\n\t}\n\
    \treturn $count;\n}", "    $count = 0;\n    for ($i=0; $i<strlen($s); $i++) {\n\
    \        $c = $s[$i];\n        if ($c >= \"A\" && $c <= \"Z\") {\n           \
    \ $count++;\n        }\n    }\n    return $count;\n}\n", "\t$count = 0;\n\tfor\
    \ ($i = 0; $i < strlen($s); $i++) {\n\t\tif (ord($s[$i]) >= 65 && ord($s[$i])\
    \ <= 90) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}", "  $upper = 0;\n\
    \  for ($i = 0; $i < strlen($s); $i++) {\n    $upper++;\n    if (ord($s[$i]) >=\
    \ 65 && ord($s[$i]) <= 90) {\n      // \"A\"..\"Z\", \"a\"..\"z\", \"0\"\n   \
    \   $upper += 1;\n    }\n  }\n  return $upper;\n}\n\n$contents = file_get_contents(\"\
    ./tests/content.txt\");\n", "    $upper = 0;\n    for ($i=0; $i<strlen($s); $i++)\
    \ {\n        if (preg_match(\"/[AEIOUaeiou]/\", $s[$i])) {\n            $upper++;\n\
    \        }\n    }\n    return $upper;\n}\n", "  preg_match_all('/./us', $s, $m);\n\
    \  return count($m[0]);\n}", "    $len = strlen($s);\n    $upper = 0;\n    for\
    \ ($i = 0; $i < $len; ++$i) {\n        $upper = 2 * $upper + ord($s[$i]) - 65;\n\
    \    }\n    return $upper;\n}\n</code>\n<|/ a dscore=2 tags=php,string |>\n<|\
    \ c |>\nThank you for this answer. Would you mind explaining what exactly you\
    \ are doing here? Is it using some sort of mathematical formula? It would be great\
    \ if you could add some comments in your code explaining your solution a bit.\n\
    <|/ c |>\n<| c |>\nThe math formula was just the first thing I thought of when\
    \ I saw the question. I don't know if it's the best way, but it's certainly one\
    \ way to solve the problem.\n<|/ c |>\n<| a |>\nA PHP implementation of the C\
    \ code posted by Gaby.\n<code>", "  $c = 0;\n  for ($i = 0; $i < strlen($s); $i++)\
    \ {\n    $c += (strpos($s, $s[$i]) >= 0) ? 1 : 0;\n  }\n  return $c;\n}\n", " \
    \ return preg_match_all(\"/[AEIOU]/\", $s, $matches) ? count($matches[0]) : 0;\n\
    }\n", "    $vowels = \"aeiouAEIOU\";\n    $upper = 0;\n    for ($i = 0; $i < strlen($s);\
    \ $i += 2) {\n        $upper += substr_count($vowels, substr($s, $i, 2));\n  \
    \  }\n    return $upper;\n}\n", "  for ($i=0; $i<strlen($s); $i+=2) {\n    if\
    \ (ctype_upper($s[$i]) && ctype_upper($s[$i+1])) {\n      return 0;\n    }\n \
    \ }\n  return 1;\n}\n", "    $counter = 0;\n    for ($i = 0; $i < strlen($s);\
    \ ++$i) {\n        $char =  $s[$i];\n        if (ctype_upper($char)) {\n     \
    \       $counter += 1;\n        }\n    }\n    return $counter;\n}\n", "  $upper\
    \ = 0;\n  for ($i = 0; $i < strlen($s); $i += 2) {\n    $upper += substr_count(strtoupper($s[$i]),\
    \ $s[$i + 1]);\n  }\n  return $upper;\n}", "  $vowels = \"aeiouAEIOU\";\n  $n\
    \ = strlen($s);\n  \n  for ($i = 0; $i < $n; $i++) {\n    $n = strpos($vowels,\
    \ $s[$i]);\n    if ($n !== FALSE) {\n      $i += $n - 1;\n      $n += strpos($vowels,\
    \ $s[$i]);\n    }\n    \n    $i += $n - 1;\n  }\n  \n  return $n % 2 === 0;\n\
    }\n", "    $count = 0;\n    for ($i = 0; $i < strlen($s); $i += 2) {\n       \
    \ if (ctype_upper($s[$i]) && ctype_upper($s[$i + 1])) {\n            $count +=\
    \ 2;\n        }\n    }\n    return $count;\n}\n", "  return $s[0] == 'a' ? $s[1]\
    \ == 'b' ? 1 : 0 :\n         $s[0] == 'd' ? $s[1] == 'b' ? 2 : 0 : 0;\n}\n", " \
    \ return preg_match_all('/([aeiou])/i', $s, $match) ? $match[1][0] : 0;\n}\n",
  "  $c = 0;\n  for ($i = 0; $i < strlen($s); $i++) {\n    $c += strpos($s, strtoupper($s[$i]));\n\
    \  }\n  return $c;\n}\n", "  return count_vowels($s) / (count($s)-count($s, 0,\
    \ 1));\n}\n", "  // Split the string into substrings of two or three characters:\n\
    \  $parts = preg_split('/(.{2,3})/s', $s, -1, PREG_SPLIT_NO_EMPTY);\n  // Initialize\
    \ vowel counts to zero:\n  $count = 0;\n  // Iterate through each substring:\n\
    \  foreach ($parts as $part) {\n    // Count uppercase vowels in even indices:\n\
    \    if ($part == \"{$parts[$count - 1]}\") {\n      $count++;\n    }\n  }\n \
    \ return $count;\n}\n</code>\nNote that this is a slightly different approach\
    \ to what was proposed in the original answer by John Campbell, but is also more\
    \ concise and probably more efficient.  In the following example the array $vowels\
    \ is created to store all vowels of the alphabet (in this case, a, e, i, o, u)\
    \ and then using that array to generate the list of uppercase vowels.  In order\
    \ to avoid hard-coding 'a', the preg_match_all is used to find all matches of\
    \ an uppercase vowel at the end of the string, which matches the requirement for\
    \ even indices.\n<code>\n<?php\n$vowels = array(\"a\", \"e\", \"i\", \"o\", \"\
    u\");\n$count_upper = count_upper(\"dBBE\");\necho \"$count_upper\\n\";", "  \
    \  $vowels = ['a','e','i','o','u'];\n    $num_vowels = 0;\n    for ($i = 0; $i\
    \ < strlen($s); $i++) {\n        // For each character in the string, count the\
    \ number of vowels\n        // that are in the even-indexed positions of the string.\n\
    \        $num_vowels += substr_count($s, $vowels[$i%6]);\n    }\n    return $num_vowels;\n\
    }", "  if (strlen($s)%2 == 0) return 0;\n  $evenIndices = array_filter(range(0,\
    \ strlen($s)/2 - 1), function($i) { return $i%2===0; });\n  return count(array_intersect($evenIndices,\
    \ array_filter(str_split(strtolower($s)), function($i) { return $i%2===0; })));\n\
    }\n", "    return preg_match_all('/./u', $s) ? 1 : 0;\n}\n", "    return substr_count($s,\
    \ 'a') + (substr_count($s, 'e') - substr_count($s, 'A'));\n}\n", "    // Initialize\
    \ vowel counter.\n    $c = 0;\n    // Loop through string and count vowels.\n\
    \    for ($i = 0; $i < strlen($s); $i++) {\n        // Check if current letter\
    \ is a vowel.\n        if ($s[$i] === 'a' || $s[$i] === 'e' || $s[$i] === 'i'\
    \ || $s[$i] === 'o' || $s[$i] === 'u') {\n            // Add one to vowel counter.\n\
    \            $c++;\n        }\n    }\n    // Return vowel counter.\n    return\
    \ $c;\n}\n", "    $count = 0; // initialize counter\n    $len = strlen($s); //\
    \ get length of string\n\n    // loop through the string\n    for ($i=0; $i<$len;\
    \ $i++) {\n        // check if the current character is uppercase or not\n   \
    \     if (strtoupper($s[$i]) ==  $s[$i]) {\n            $count++; // if current\
    \ character is uppercase, increase the counter\n        }\n    }\n    return $count;\n\
    }", "    return preg_match(\"/([aeiouy])\\1/\", $s) ? 1 : 0;\n}", "  $even = false;\n\
    \  for ($i = 0; $i < strlen($s); $i++) {\n    $letter = $s[$i];\n    if ($letter\
    \ >= 'A' && $letter <= 'Z') {\n      if ($even === true) {\n        return 0;\n\
    \      }\n      $even = true;\n    }\n  }\n  return $even ? 1 : 0;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\n<code>", "  $even = 0;\n  $odd = 0;\n  for($i = 0;\
    \ $i < strlen($s); $i++){\n    if($s[$i] == 'A' || $s[$i] == 'a'){\n      $even++;\n\
    \    }\n    if($s[$i] == 'B' || $s[$i] == 'b'){\n      $odd++;\n    }\n  }\n \
    \ return $even + $odd;\n}\n", "  $counter = 0;\n  for ($i = 0, $len = strlen($s);\
    \ $i < $len; $i++){\n    if ($s[$i] >= 'a' && $s[$i] <= 'z'){\n      if ($s[$i]\
    \ >= 'A' && $s[$i] <= 'Z'){\n        $counter++;\n      }\n    }\n  }\n  return\
    \ $counter;\n}\n", "    $n = count($s);\n    for ($i = 0; $i < $n; ++$i) {\n \
    \       if (!isset($s[$i + 1]) || ctype_upper($s[$i + 1])) {\n            $upper++;\n\
    \        }\n    }\n    return $upper;\n}", "    $count = 0; $s = strtolower($s);\n\
    \    for ($i=0; $i<strlen($s); $i++) {\n        if ($s[$i] >= 'a' && $s[$i] <=\
    \ 'z') {\n            $count += ($s[$i] - 'a') % 2; // if even, add it, otherwise\
    \ don't\n        }\n    }\n    return $count;\n}\n", "    $count = 0; $lastVowel\
    \ = ''; $len = strlen($s);\n    for ($i=0; $i<$len; $i++) {\n        $char = substr($s,\
    \ $i, 1);\n        if ($char === $lastVowel) {\n            $count++;\n      \
    \      $lastVowel = '';\n            continue;\n        }\n        if (ctype_upper($char))\
    \ {\n            $lastVowel = $char;\n        } else {\n            if ($count\
    \ > 0) {\n                break;\n            }\n            $lastVowel = '';\n\
    \            $count = 0;\n        }\n    }\n    return $count;\n}\n\n/**\n * Given\
    \ a string s, count the number of lowercase vowels in even indices.", "  if (strlen($s)\
    \ == 0)\n    return 0;\n\n  $vowels = \"aeiou\";\n  $counter = 0;\n  $length =\
    \ strlen($s);\n  for ($i = 0; $i < $length; $i += 2) {\n    if (strpos($vowels,\
    \ $s[$i]) !== false)\n      $counter++;\n  }\n  return $counter;\n}\n", "  return\
    \ substr_count($s, 'A') + (substr_count($s, 'a') >> 1);\n}\n", "    $count = 0;\n\
    \    for($i=0; $i<strlen($s); $i++){\n        if(isupper($s[$i])) $count++;\n\
    \    }\n    return $count;\n}\n", "  $upperCount = 0;\n  $len = strlen($s);\n\
    \  for ($i = 0; $i < $len; $i++) {\n    $ch = strtoupper($s[$i]);\n    if ($ch\
    \ >= 'A' && $ch <= 'Z') {\n      $upperCount++;\n    }\n  }\n  return $upperCount;\n\
    }\n", "    $upper = 0;\n    for($i=0; $i<strlen($s); $i++) {\n        if(isUpper($s[$i])\
    \ && ($i&1)==0) {\n            $upper ++;\n        }\n    }\n    return $upper;\n\
    }", "\t$count = 0; $len = strlen($s); $i = -1;\n\twhile (++$i < $len) {\n\t\t\
    if (!isupper($s[$i])) {\n\t\t\tbreak;\n\t\t}\n\t\t$count += substr_count($s[$i],\
    \ 'A') - 1;\n\t}\n\treturn $count;\n}\n", "    return count(preg_grep('/^.[aeiou]$/',\
    \ $s));\n}\n", "  $count = 0;\n  for ($i = 0; $i < strlen($s); $i++) {\n    $char\
    \ = strtoupper($s[$i]);\n    if ($char === 'A' || $char === 'E' || $char === 'I'\
    \ || $char === 'O' || $char === 'U') {\n      $count++;\n    }\n  }\n  return\
    \ $count;\n}", "  $vowels = \"aeiouAEIOU\";\n  $count = 1;\n  $len = strlen($s);\n\
    \  for($i = 0; $i < $len; $i++) {\n    if(!preg_match(\"/$vowels/\", $s[$i]))\
    \ {\n      $count++;\n    }\n  }\n  return $count;\n}", "  $vowels = \"AEIOUYaeiouy\"\
    ;\n  $count = 0;\n  for ($i = 0; $i < strlen($s); $i++) {\n    if (isset($vowels[$s[$i]]))\
    \ {\n      $count++;\n    }\n  }\n  return $count;\n}\n", "    $vowels = \"aeiou\"\
    ;\n    $upper = 0;\n    for($i=0; $i<strlen($s); $i++) {\n        if(preg_match(\"\
    /($vowels)/\", $s[$i])) {\n            $upper++;\n        }\n    }\n    return\
    \ $upper;\n}\n", "\t$evenIndexes = 0;\n\t$upperCase = 0;\n\tforeach (str_split($s)\
    \ as $i => $c) {\n\t\tif ($i % 2 === 0) {\n\t\t\t$upperCase += strlen(strtoupper($c));\n\
    \t\t} else {\n\t\t\t$evenIndexes += 1;\n\t\t}\n\t}\n\treturn ($evenIndexes * 2)\
    \ / strlen($s);\n}\n", "  return preg_match_all(\"/[AEIOUaeiou]/\",$s,$matches)\n\
    \    ? sizeof($matches[0])\n    : 0;\n}\n", "    $n = 0;\n    $len = strlen($s);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        $char = strtolower($s[$i]);\n  \
    \      if (!in_array($char, array('a', 'e', 'i', 'o', 'u')) || isset($char[$i])\
    \ || isset($char[$i - 1])) {\n            continue;\n        }\n        $n++;\n\
    \    }\n    return $n;\n}\n", "    $vowels = array('a','e','i','o','u');\n   \
    \ $s = strtoupper($s);\n    $uppers = str_split($s);\n    $count = 0;\n    $len\
    \ = strlen($s);\n\n    for($i = 0; $i < $len; $i++) {\n        if (in_array($uppers[$i],\
    \ $vowels)) {\n            $count++;\n        }\n    }\n\n    return $count;\n\
    }\n</code>\n<|/ a tags=performance,php,algorithm |>\n<| a dscore=2 tags=performance,php,algorithm\
    \ |>\nI came up with a slightly different solution.\n<code>", "    $n = 0;\n \
    \   for($i = 0; $i < strlen($s); $i += 2) {\n        if (ctype_upper($s[$i]) &&\
    \ ctype_upper($s[$i + 1])) {\n            $n += 2;\n        }\n    }\n    return\
    \ $n;\n}\n", "    $count = 0; $i = 0;\n    while ($i < strlen($s)) { $letter =\
    \ substr($s, $i, 1); $i += 2; $count += in_array($letter, array('a', 'e', 'i',\
    \ 'o', 'u')) ? 1 : 0; }\n    return $count;\n}\n", "    $n = 1;\n    $upper =\
    \ array();\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (isset($upper[$i\
    \ / 2])) {\n            $upper[$i / 2] += 1;\n        } else {\n            $upper[$i\
    \ / 2] = 1;\n        }\n    }\n\n    return array_sum($upper);\n}\n", "    $upper\
    \ = preg_match_all('/[A-Z]/', $s, $matches);\n    return $upper;\n}\n", "  $sum\
    \ = 0;\n  for ($i = 0; $i < strlen($s); $i += 2) {\n    $sum += (ord($s[$i]) >=\
    \ 65 && ord($s[$i]) <= 90) ? 1 : 0;\n  }\n  return $sum;\n}\n", "    $i = 0;\n\
    \    $count = 0; // number of uppercase letters in the string\n    while (isset($s[$i\
    \ + 1]) && ctype_upper($s[$i + 1]))\n        $i++;\n    while ($i < strlen($s))\n\
    \        if (isset($s[$i]))\n            $count++; // increment the count if the\
    \ current letter is uppercase\n        $i++;\n    return $count;\n}\n", "    $count\
    \ = preg_match_all('~([aeiou])~', $s, $matches);\n    $upper = count($matches[1])\
    \ - $count; // number of uppercase vowels\n\n    return $upper ? $upper : 0;\n\
    }\n", "  return preg_match_all('/[Ee]/', $s) ? substr_count($s, 'E') : 0;\n}\n\
    </code>\nThe function works by taking a string (in this case, our sample text\
    \ to be counted), and using preg_match_all to find all occurrences of vowels in\
    \ even indices, then calling substr_count to count the number of occurrences of\
    \ those vowels. Note that I used preg_match_all rather than preg_match to ensure\
    \ that the search continues up to the end of the string. Otherwise, the regex\
    \ would match on every single character in the string.\n<|/ a |>\n<| c |>\nWow,\
    \ that's really interesting. I was thinking of using `substr_count` but `preg_match_all`\
    \ is so much cleaner. Thanks\n<|/ c |>\n<| c |>\nI agree with you on this solution,\
    \ but as you said, your code is much more cleaner.  So I'm going to accept this\
    \ answer\n<|/ c |>\n<| a dscore=1 tags=regex,php |>\nI made a benchmark test with\
    \ a set of 100 strings and 100 iterations:\n<code>\n   100  0.00244 microseconds\n\
    \n 1 iteration:  0.17048 microseconds\n\n100 iterations:   0.17745 microseconds\n\
    </code>\nThe fastest code was the one proposed by Steven A. Wolfe\n<code>\n$upper\
    \ = 'A';\n$lower = 'a';\n$vowels = 'AEIOUaeiouy';\n\n$words = str_repeat('abc\
    \ ', 100);\n$count = preg_match_all('/[AEIOUaeiouy]/', $words, $m);\n$time = microtime(true)\
    \ - $start_time = microtime(true); // $start_time is set before\nfor ($i = 0;\
    \ $i < 100; $i++) {\n  $count = substr_count($words, 'A');\n}\n$time = microtime(true)\
    \ - $start_time;\n$time /= $i;\necho $time . ' microseconds';\n</code>\nBut there\
    \ are other ways to do it, using preg_match or preg_match_all. In the code below,\
    \ with preg_match_all I did it by building a regex expression out of vowels and\
    \ using it (as a string) as a pattern.\n<code>\n$words = str_repeat('abc ', 100);\n\
    $time = microtime(true) - $start_time = microtime(true); // $start_time is set\
    \ before\n$vowels = preg_quote('AEIOUaeiouy', '/');\n$regex = sprintf('~[%1$s]+~i',\
    \ $vowels);\nfor ($i = 0; $i < 100; $", "    $vowels = \"aeiouAEIOU\";\n    $n\
    \ = strlen($s);\n    $count = 0;\n    for ($i = 0; $i < $n; $i += 2) {\n     \
    \   if (strpos($vowels, $s[$i]) !== FALSE) {\n            $count ++;\n       \
    \ }\n    }\n    return $count;\n}\n", "    $count = 0;\n    for($i = 0; $i < strlen($s);\
    \ $i++){\n        if($s[$i] >= 'a' && $s[$i] <= 'z'){\n            $count++;\n\
    \        }\n        if($s[$i] >= 'A' && $s[$i] <= 'Z'){\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n", "    if (strlen($s) == 0) return\
    \ 0;\n    $upper = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (isUpper($s[$i]))\
    \ {\n            $upper++;\n        }\n    }\n    return $upper;\n}\n", "    //\
    \ Use a variable for counting rather than a function to speed up\n    // calculation.\n\
    \    $even_indexes = 0;\n    $vowel_count = 0;\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        if (preg_match('/[AEIOUaeiou]/', $s[$i])) {\n            $vowel_count++;\n\
    \        }\n        if (preg_match('/[aeiou]/', $s[$i])) {\n            $even_indexes++;\n\
    \        }\n    }\n    return $vowel_count - $even_indexes;\n}\n", "    $i = 0;\n\
    \    $upper = 0;\n    for ($j=0; $j<strlen($s); $j++) {\n        if ($s[$j]>='A'\
    \ && $s[$j]<='Z') {\n            $upper++;\n        } else if ($j%2==0 && $s[$j]>='a'\
    \ && $s[$j]<='z') {\n            $upper++;\n        }\n        $i++;\n    }\n\
    \    return $upper;\n}\n", "    $upper = 0;\n    $len = strlen($s);\n    for ($i\
    \ = 0; $i < $len; $i++) {\n        $upper = $upper + (ord($s[$i]) & 0xEF);\n \
    \   }\n    return $upper;\n}\n", "  $upper = 0; $i = 0;\n  while (isset($s[$i]))\
    \ {\n    $upper = ($upper + ord($s[$i])) >= 90 ? $upper + ord($s[$i]) - ord('a')\
    \ + 1 : $upper;\n    $i++;\n  }\n  return $upper;\n}\n", "  $count = 0;\n  for\
    \ ($i = 0; $i < strlen($s); $i++) {\n    if (ctype_upper($s[$i]) && $s[i] != \"\
    \\\\\") {\n      $count += 1;\n    }\n  }\n  return $count;\n}\n", "    $n = 0;\n\
    \    for ($i = 0; $i < strlen($s); $i++) {\n        if (strtoupper($s[$i]) ===\
    \ \"A\") {\n            $n++;\n        } elseif (strtoupper($s[$i]) === \"E\"\
    ) {\n            $n++;\n        } elseif (strtoupper($s[$i]) === \"I\") {\n  \
    \          $n++;\n        } elseif (strtoupper($s[$i]) === \"O\") {\n        \
    \    $n++;\n        } elseif (strtoupper($s[$i]) === \"U\") {\n            $n++;\n\
    \        } elseif (strtoupper($s[$i]) === \"a\") {\n            $n++;\n      \
    \  } elseif (strtoupper($s[$i]) === \"e\") {\n            $n++;\n        } elseif\
    \ (strtoupper($s[$i]) === \"i\") {\n            $n++;\n        } elseif (strtoupper($s[$i])\
    \ === \"o\") {\n            $n++;\n        } elseif (strtoupper($s[$i]) === \"\
    u\") {\n            $n++;\n        }\n    }\n    return $n;\n}\n", "  $vowels\
    \ = \"aeiouAEIOU\";\n  $count = 0; // number of uppercase vowels found\n  for\
    \ ($i = 0; $i < strlen($s); $i++) {\n    $char =  $s[$i];\n    $c = strtoupper($char);\n\
    \    if (strpos($vowels, $c) !== false) {\n      $count++;\n    }\n  }\n  return\
    \ $count;\n}", "    $counter = array();\n    $i = 0;\n    while (isset($s[$i]))\
    \ {\n        $char = strtolower($s[$i]);\n        if (isset($counter[$char]))\
    \ {\n            $counter[$char] = $counter[$char] + 1;\n        }\n        else\
    \ {\n            $counter[$char] = 1;\n        }\n        $i += 1;\n    }\n  \
    \  return array_filter($counter, function($value) { return $value == 1; }) + 0;\n\
    }\n", "    if ($s === '') return 0;\n    $i = 0;\n    while ($s[i] >= 'A' && $s[i]\
    \ <= 'Z') {\n        $i++;\n    }\n    return ($i / 2) + ($i & 1);\n}", "    return\
    \ preg_match_all('/([bcdfghjklmnpqrstvwxyz])/',$s,$matches) ? $matches[1][0] :\
    \ 0;\n}", "    $counts = array_fill(0, count($s)-1, 0);\n    for($i = 0; $i <\
    \ count($s); $i++) {\n        $c = $s[$i];\n        if($c == 'E') {\n        \
    \    $counts[$i] = 0;\n        } else if($c == 'E') {\n            $counts[$i+1]\
    \ = 0;\n        }\n        $counts[$i]++;\n    }\n    return $counts;\n}\n", " \
    \ $vowels = \"aeiouAEIOU\";\n  $i = 0;\n  $len = strlen($s);\n  while ($i < $len)\
    \ {\n    // For each index, see if it is an even index.\n    $is_even = ($i %\
    \ 2 == 0);\n    $count = (substr($s, $i, 1) === $vowels[$is_even]);\n    $i +=\
    \ 1;\n    return $count;\n  }\n  return false;\n}", "    $sum = 0;\n    $len =\
    \ strlen($s);\n    for ($i = 0; $i < $len; $i++) {\n        if (isset($s[$i]))\
    \ {\n            $char = strtoupper($s[$i]);\n            if ($char == 'A' ||\
    \ $char == 'E') {\n                ++$sum;\n            }\n        }\n    }\n\
    \    return $sum;\n}\n", "    return $s[$s[0]] <= 'Z' ? ($s[$s[0]] - 'A' + 'a')\
    \ : 0;\n}\n", "  foreach (str_split($s) as $i => $c) {\n    if ($i % 2 == 0 &&\
    \ ctype_upper($c)) {\n      return $i + 1;\n    }\n  }\n  return 0;\n}\n", " \
    \   $count = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($s[$i]\
    \ >= 'A' && $s[$i] <= 'Z') {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\n", "    $count = 0;\n    $len = strlen($s);\n    for ($i = 0; $i\
    \ < $len; $i++) {\n        if ($s[$i] === \"A\" || $s[$i] === \"a\") {\n     \
    \       $count++;\n        }\n    }\n    return $count;\n}\n", "    $count_upper\
    \ = -1;\n    $i = 0;\n    foreach(str_split($s) as $letter) {\n        // If the\
    \ current letter of the string is an uppercase letter, increase the count by 1.\n\
    \        if (ctype_upper($letter)) {\n            $count_upper++;\n        }\n\
    \n        // If the current letter of the string is an uppercase letter, stop\
    \ counting uppercase letters and jump to the next letter.\n        if (ctype_upper($letter))\
    \ {\n            $i = 0;\n        }\n    }\n\n    // Return the count of the number\
    \ of uppercase letters in the string.\n    return $count_upper;\n}\n", "  $vowels\
    \ = \"aeiou\";\n  $uppers = 0;\n  for ($i = 0; $i < strlen($s); $i++) {\n    if\
    \ (preg_match(\"/[\" . $vowels . \"]/i\", substr($s, $i, 1))) {\n      $uppers++;\n\
    \    }\n  }\n  return $uppers;\n}\n", "  $u = 0;\n  for ($i = 0; $i < strlen($s);\
    \ ++$i) {\n    if (ctype_upper($s[$i]) && $s[$i] != \"X\") {\n      $u++;\n  \
    \  }\n  }\n  return $u;\n}\n", "  $num_upper = 0;\n  for ($i=0; $i<strlen($s);\
    \ $i++) {\n    if ($s[$i] == 'A' || $s[$i] == 'E' || $s[$i] == 'I' || $s[$i] ==\
    \ 'O' || $s[$i] == 'U' || $s[$i] == 'Y')\n      $num_upper++;\n  }\n  return $num_upper;\n\
    }", "  $count = 0;\n  $len = strlen($s);\n  for ($i = 0; $i < $len; $i++) {\n\
    \    $char = strtoupper($s[$i]);\n    if ($char == 'A' || $char == 'E' || $char\
    \ == 'I' || $char == 'O' || $char == 'U') {\n      $count++;\n    }\n  }\n  return\
    \ $count;\n}\n", "  return preg_match('~(?:(?<!^)(?<!\\pL)[A-Z]\\p{Lu})~u', $s)\
    \ ? 1 : 0;\n}\n", "  return preg_match_all('/[aeiou]/i', $s, $m);\n}", "    $counter\
    \ = 0;\n    $length = strlen($s);\n    for ($i = 0; $i < $length; $i+=2)\n   \
    \     if (strtoupper($s[$i]) eq $s[$i+1])\n            $counter++;\n    return\
    \ $counter;\n}\n", "    $count = 0;\n    $char_list = str_split($s);\n    for\
    \ ($i = 0; $i < count($char_list); $i++) {\n        if ($i % 2 == 0) {\n     \
    \       $count += strpos($char_list[$i], \"AEIOUaeiou\")/strlen($char_list[$i]);\n\
    \        }\n    }\n    return $count;\n}\n", "  $even = [];\n  for ($i = 0; $i\
    \ < strlen($s); $i += 2) {\n    if (ctype_upper($s[$i])) {\n      $even[] = $s[$i];\n\
    \    }\n  }\n  return count($even);\n}\n", "  // Count the number of vowels starting\
    \ at even indices.\n  $count = 0;\n  $len = strlen($s);\n  for ($i = 0; $i < $len;\
    \ $i++) {\n    $char = strtolower($s[$i]);\n    if ($char === 'a' || $char ===\
    \ 'e' || $char === 'i' || $char === 'o' || $char === 'u') {\n      $count++;\n\
    \    }\n  }\n  return $count;\n}\n", "  return preg_match_all('~(?=($s))\\1(?!\\\
    1)~', $s, $m) ? $m[0][0] ? 1 : 0;\n}\n</code>\nThe first step to solving the problem\
    \ is to write a regular expression that matches an even indexed character. Then\
    \ write a function to test whether a character is a vowel and a function that\
    \ counts the number of vowels.\nThe second step is to write two functions, the\
    \ first to determine whether a character is a vowel and the second to count the\
    \ number of vowels. Use the two functions to write a function that tests whether\
    \ a string contains only vowels.\n<|/ a dscore=1 |>\n<| c |>\nNice use of a lookahead\
    \ to eliminate the vowel character in conjunction with `preg_match_all`. That\
    \ way `count_upper` can be written without an `if`/`else`.\n<|/ c |>\n<| c |>\n\
    : Very nice. I hadn't heard of the lookahead operator before. Thanks!\n<|/ c |>\n\
    <| a tags=php,preg-match-all,regex |>\nHow about:\n<code>\n$pattern = \"/(^|[^aeiou])[AEIOUaeiou]+/\"\
    ; \n$string = \"abcdefg\";\n\npreg_match_all($pattern, $string, $matches);\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThat's an interesting pattern, but it doesn't take\
    \ into account the fact that \"a\" and \"e\" are both vowels.\n<|/ c |>\n<| c\
    \ |>\n: Yes, I suppose it could have been simplified to `/([^aeiou])[aeiou]+/`\
    \ but the OP didn't say which vowels to allow.\n<|/ c |>\n<| a dscore=0 |>\nTry\
    \ this:\n<code>\n/[a-z]+|[aeiou][a-z]+/g\n</code>\n<|/ a tags=php,preg-match-all,regex\
    \ |>\n<| a tags=php,preg-match-all,regex dscore=0 |>\nHere is some code to determine\
    \ if the string contains only letters and that every letter appears exactly twice.\
    \ \n<code>\n$string = 'the quick brown fox jumped over the lazy dog';\n$string\
    \ =preg_replace('/[^a-z]/i', '', $string);\n\n$letters = preg_grep('/[a-z]/',\
    \ str_split($string));\n$letters = array_count_values($letters);\n$letters = array_diff_key($letters,\
    \ array_flip($letters));\n\nif(count($letters) == 2) {\n    echo 'string is all\
    \ letters appearing twice", "    $n = count($s) - 1;\n    $a = array();\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        if (!isset($s[$i + 1])) {\n            return\
    \ 0;\n        }\n        $a[$s[i]] = 1;\n    }\n    $upper = 0;\n    foreach ($a\
    \ as $k => $v) {\n        if ($k[0] === 'U') {\n            $upper++;\n      \
    \  }\n    }\n    return $upper;\n}\n", "  $evens = array_filter($s, 'strlen');\n\
    \  return array_sum(array_map('strlen', $evens)) - count($s) % 2;\n}\n", "   \
    \ $vowels = 'aeiouAEIOU';\n    $upper = 0;\n    for ($i=0; $i<strlen($s); $i++)\
    \ {\n        if (!ctype_upper($s[$i])) {\n            continue;\n        }\n \
    \       if (preg_match('~^[' . $vowels . ']+$~', $s[$i])) {\n            $upper++;\n\
    \        }\n    }\n    return $upper;\n}\n\n$a = 'aBCdEf';\n$vowels = 'aeiouAEIOU';\n\
    var_dump(preg_match('~^[' . $vowels . ']+$~', $a));\nvar_dump(preg_match('~^['\
    \ . $vowels . ']+$~', 'aBCdEf'));\nvar_dump(preg_match('~^[' . $vowels . ']+$~',\
    \ 'aBCdEf', 1));\nvar_dump(preg_match('~^[' . $vowels . ']+$~', 'aBCdEf', 1, PREG_PATTERN_ORDER));\n\
    \n$a = 'aBCdEf';\n$vowels = 'aeiouAEIOU';\nvar_dump(preg_match('~^[' . $vowels\
    \ . ']+$~', $a, 1));\nvar_dump(preg_match('~^[' . $vowels . ']+$~', $a, 1, PREG_PATTERN_ORDER));\n\
    \nvar_dump(preg_match_all('~^[' . $vowels . ']+$~', $a, 1));\nvar_dump(preg_match_all('~^['\
    \ . $vowels . ']+$~', $a, 1, PREG_PATTERN_ORDER));\n\nvar_dump(preg_match('~^[^aeiouAEIOU]+$~',\
    \ $a));\nvar_dump(preg_match('~^[^aeiouAEIOU]+$~', 'aBCdEf'));\nvar_dump(preg_match('~^[^aeiouAEIOU]+$~',\
    \ 'aBCdEf', 1));\nvar_dump(preg_match('~^[^aeiouAEIOU]+$~', 'aBCdEf', 1, PREG_PATTERN_ORDER));\n\
    \nvar_dump(preg_match('~[^aeiouAEIOU]+$~', $a, 1));\nvar_dump(preg_match('~[^aeiouAEIOU]+$~',\
    \ $a, 1, PREG_PATTERN_ORDER));\n\nvar_dump(preg_match_all('~[^aeiouAEIOU]+$~',\
    \ $a, 1));\nvar_dump(preg_match_all('", "    $count = count(str_split($s));\n\
    \    foreach (str_split($s) as $i) {\n        if ($i === 'A' || $i === 'a') {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nBut this doesn't return \"number of vowels in the second string\"\
    \ as requested\n<|/ c |>\n<| a |>\nI believe the answer you seek is as follows\
    \ :\n<code>\n<?php\n$s1 = 'aBCdEf';\n$s2 = 'abcdefg';\necho count(preg_match('/[aeiouAEIOU]/i',\
    \ $s1)) . ' ' . count(preg_match('/[aeiouAEIOU]/i', $s2));\n</code>\nThe above\
    \ code will output :\n<code>\n0 1\n</code>\n<|/ a tags=php,string dscore=2 |>\n\
    <| a tags=php,string |>\nThis would work for you:\n<code>", "    $upper = 0;\n\
    \    for ($i = 0; $i < strlen($s); $i++) {\n        if ($s[$i] >= 'a' && $s[$i]\
    \ <= 'z') {\n            $upper++;\n        } else if ($s[$i] >= 'A' && $s[$i]\
    \ <= 'Z') {\n            $upper++;\n        }\n    }\n    return $upper;\n}\n",
  "  $even = 0;\n  $odd = 0;\n  for ($i = 0; $i < strlen($s); $i += 2) {\n    $letter\
    \ = $s[$i];\n    if ($letter == 'A' || $letter == 'a') {\n      $even++;\n   \
    \ } else {\n      $odd++;\n    }\n  }\n  return $even - $odd;\n}\n", "  // We\
    \ could use a hash or a binary search, but since we're doing this for\n  // the\
    \ sake of learning, we go with a simple linear search.\n  for ($i = 0, $len =\
    \ strlen($s); $i < $len; $i++) {\n    if (!ctype_upper($s[$i])) {\n      break;\n\
    \    }\n    if ($s[$i] === \"A\" && $s[$i + 1] === \"B\") {\n      return 1;\n\
    \    }\n    if ($s[$i] === \"a\" && $s[$i + 1] === \"b\") {\n      return 1;\n\
    \    }\n    if ($s[$i] === \"D\" && $s[$i + 1] === \"B\") {\n      return 1;\n\
    \    }\n    if ($s[$i] === \"d\" && $s[$i + 1] === \"b\") {\n      return 1;\n\
    \    }\n  }\n  return 0;\n}\n", "  $len = strlen($s);\n  $vowels = \"aeiou\";\n\
    \  $upper = 0;\n  for ($i = 0; $i < $len; $i++) {\n    if (strpos($vowels, $s[$i])\
    \ !== false) {\n      if ($i % 2 == 0) {\n        $upper++;\n      }\n    }\n\
    \  }\n  return $upper;\n}\n", "    $count = 0;\n    for ($i = 0; $i < strlen($s);\
    \ $i += 2) {\n        $count += 1 if (ctype_upper($s[$i]) && ctype_upper($s[$i\
    \ + 1]));\n    }\n    return $count;\n}\n", "  // Your code here.\n}\n</cell>\n\
    <text>\nTest your Code\nRun the cell below to test your code.\n\nThe function\
    \ count_upper takes two strings as arguments, and returns the number of uppercase\
    \ vowels in the first string.\n\n\n</text>\n<cell>", "  return array_count_values(preg_split('//u',\
    \ $s));\n}", "    $count = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n   \
    \     $c = substr($s, $i, 1);\n        if (ctype_upper($c)) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n", "    $upper = 0;\n    for ($i = 0;\
    \ $i < strlen($s); $i++) {\n        if (ord($s[$i]) >= 65 && ord($s[$i]) <= 90)\n\
    \            $upper++;\n    }\n    return $upper;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
