name: HumanEval_29_filter_by_prefix
language: php
prompt: "<?php\n// Filter an input array of strings only for ones that start with\
  \ a given prefix.\n// >>> filter_by_prefix(array(), \"a\")\n// array()\n// >>> filter_by_prefix(array(\"\
  abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n// array(\"abc\", \"array\")\nfunction\
  \ filter_by_prefix($strings, $prefix) {\n"
tests: "function candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\",\
  \ \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\"\
  , \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $result = array();\n  foreach($strings as $string) {\n    if(strncmp($string,\
    \ $prefix, strlen($prefix)) == 0) {\n      $result[] = $string;\n    }\n  }\n\
    \  return $result;\n}\n", "    foreach ($strings as $key => $value) {\n      \
    \  if (strlen($value) > strlen($prefix) && substr($value, 0, strlen($prefix))\
    \ == $prefix) {\n            unset($strings[$key]);\n        }\n    }\n    return\
    \ $strings;\n}\n", "    return array_filter($strings, function ($string) use ($prefix)\
    \ {\n        return strncmp($string, $prefix, strlen($prefix)) == 0;\n    });\n\
    }", "    return array_filter($strings, function($string) {\n        return strncmp($string,\
    \ $prefix, strlen($prefix)) == 0;\n    });\n}\n", "    $out = array();\n    foreach\
    \ ($strings as $string) {\n        if (substr($string, 0, strlen($prefix)) ==\
    \ $prefix) {\n            $out[] = $string;\n        }\n    }\n    return $out;\n\
    }\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (substr($string,\
    \ 0, strlen($prefix)) == $prefix) {\n      $filtered[] = $string;\n    }\n  }\n\
    \  return $filtered;\n}\n", "  $filtered = array();\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a |>\n<| c |>\nIf there aren't\
    \ too many strings to deal with, your solution could be the best one.\n<|/ c |>\n\
    <| a dscore=3 tags=php,arrays,sorting |>\nHere is another solution.\n<code>\n\
    $prefixes = [\n    \"ABC\",\n    \"DEF\",\n    \"GHI\"\n];\n\n$input = array(\n\
    \    \"B\",\n    \"C\",\n    \"A\",\n    \"E\",\n    \"D\",\n    \"F\",\n    \"\
    G\",\n    \"H\",\n    \"I\"\n);\n\n$output = [];\nforeach($input as $value) {\n\
    \    $index = 0;\n    foreach($prefixes as $prefix) {\n        if(strpos($value,\
    \ $prefix) !== false) {\n            $output[$index] = $value;\n            break;\n\
    \        }\n        $index++;\n    }\n}\n</code>\n<|/ a |>\n<| a dscore=2 |>\n\
    Use uasort or arsort. It lets you sort based on a key that you can then use to\
    \ identify which entry should go above others.\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a tags=php,arrays,sorting |>\nYou can try this\n<code>\n$strings = array('B','C','A','E','D','F','G','H','I');\n\
    $filtered = array();\nforeach($strings as $s){\n    foreach($strings as $s2){\n\
    \        if($s2 != $s){\n            if(strpos($s,$s2) !== false){\n         \
    \       $filtered[] = $s2;\n            }\n        }\n    }\n}\nprint_r($filtered);\n\
    </code>\n<|/ a dscore=2 |>\n<| a |>\nHere's a little function I wrote. Basically\
    \ it goes through each element in the array and compares it to the one before\
    \ it. \n<code>", "  $result = array();\n  foreach ($strings as $s) {\n    if (strncmp($prefix,\
    \ $s, strlen($prefix)) === 0) {\n      $result[] = $s;\n    }\n  }\n  return $result;\n\
    }\n", "  $strings = array_filter($strings, function($string) use ($prefix) {\n\
    \    return strncmp($string, $prefix, strlen($prefix)) == 0;\n  });\n  return\
    \ $strings;\n}\n", "  if (strlen($prefix) === 0)\n    return $strings;\n  $ret\
    \ = [];\n  foreach ($strings as $str) {\n    if (substr($str, 0, strlen($prefix))\
    \ == $prefix)\n      $ret[] = $str;\n  }\n  return $ret;\n}\n", "  $matches =\
    \ array();\n  foreach ($strings as $string) {\n    if (substr($string, 0, strlen($prefix))\
    \ == $prefix) {\n      $matches[] = $string;\n    }\n  }\n  return $matches;\n\
    }", "  return array_filter($strings, function($s) {\n    return strpos($s, $prefix)\
    \ === 0;\n  });\n}\n", "  $matches = array();\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $prefix) === 0) {\n      $matches[] = $string;\n\
    \    }\n  }\n  return $matches;\n}", "    foreach ($strings as $string) {\n  \
    \      if (strpos($string, $prefix) === 0) {\n            $results[] = $string;\n\
    \        }\n    }\n    return $results;\n}\n", "  $prefix_length = strlen($prefix);\n\
    \n  if ($prefix_length == 0) {\n    return $strings;\n  }\n\n  return array_filter($strings,\
    \ function ($value) use ($prefix_length) {\n    return strncmp($value, $prefix,\
    \ $prefix_length) === 0;\n  });\n}\n", "    $result = array();\n    foreach ($strings\
    \ as $i => $string) {\n        if (strpos($string, $prefix) === 0) {\n       \
    \     $result[] = $string;\n        }\n    }\n    return $result;\n}\n", "  foreach\
    \ ($strings as $string) {\n    if (strlen($string) === 0 || strpos($string, $prefix)\
    \ === 0) {\n      unset($strings[$i]);\n    }\n  }\n\n  return $strings;\n}\n\
    </code>\nIf your $strings array has non-sequential indices, you can use the array_filter\
    \ function instead of the foreach loop:\n<code>", "\t$filtered_strings = array();\n\
    \tforeach ($strings as $string) {\n\t\tif (strpos($string, $prefix) === 0) {\n\
    \t\t\t$filtered_strings[] = $string;\n\t\t}\n\t}\n\treturn $filtered_strings;\n\
    }", "    return array_filter($strings, function($string) use ($prefix) {\n   \
    \     return substr($string, 0, strlen($prefix)) == $prefix;\n    });\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI like this idea. Although I ended up implementing something\
    \ similar in my own application. Thanks!\n<|/ c |>\n<| a |>\nUse this for PHP:\n\
    <code>", "  return array_filter($strings, function($s) use ($prefix) {\n    return\
    \ strpos($s, $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    This code works for me: `$strings = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n$prefix = \"a\";\nvar_dump(filter_by_prefix($strings, $prefix));` I get \"\
    array(3) { [0]=> string(3) \"abc\" [1]=> string(3) \"array\" [2]=> string(3) \"\
    array\" }\n<|/ c |>\n<| c |>\nThis code does not work for me, returns an empty\
    \ array\n<|/ c |>\n<| c |>\n`array_filter` returns the filtered array and removes\
    \ every element that does not satisfy the condition given in the second parameter.\
    \ This means all elements that do not start with the given prefix are gone. Try\
    \ it yourself by printing `print_r(filter_by_prefix($strings, $prefix));` before\
    \ the return.\n<|/ c |>\n<| c |>\nThanks for your answer but it doesn't work if\
    \ I have an array and I only want to filter specific indexes and not all indexes.\
    \ Can you please provide an example with arrays and indexes? Thanks!\n<|/ c |>\n\
    <| c |>\nTo filter only specific indexes, use `array_filter($strings, function($s,\
    \ $i) use ($prefix) {return $i != 2 && strpos($s, $prefix) === 0;})`\n<|/ c |>\n\
    <| a tags=php,array-filter,arrays,string |>\nAn alternative solution is to use\
    \ array_udiff to subtract the second array from the first. The result is the entries\
    \ that are in the first array and not in the second:\n<code>\n$result = array_udiff(array(\"\
    a\", \"bc\", \"cde\"), array(\"a\", \"ab\", \"cd\"), \"strcasecmp\");\nprint_r($result);\n\
    </code>\noutput\n<code>\nArray\n(\n    [2] => cde\n    [3] => array\n)\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nI like this better than the accepted answer as it's\
    \ more readable IMO\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Easy,\
    \ straightforward, no loops, no other functions. No functions to install. Just\
    \ a nice one-liner.\n<|/ c |>\n<| c |>\nGreat solution, though I would change\
    \ this line to `array_udiff($array1, $array2, \"strcasecmp\")`, since the second\
    \ array is going to be an array of values, not an actual array.\n<|/ c |>\n",
  "    $filtered_strings = array();\n    foreach ($strings as $string) {\n       \
    \ if (substr($string, 0, strlen($prefix)) === $prefix) {\n            $filtered_strings[]\
    \ = $string;\n        }\n    }\n    return $filtered_strings;\n}\n", "  $filtered_strings\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered_strings[] = $string;\n    }\n  }\n  return $filtered_strings;\n\
    }", "    if (empty($strings)) return array();\n    if (empty($prefix)) return\
    \ array();\n    if (strpos($prefix, $strings[0]) === 0) {\n        return array($strings[0]);\n\
    \    }\n\n    $prefix_length = strlen($prefix);\n    $length = strlen($strings[0]);\n\
    \    $filtered = array();\n    for ($i = 0; $i < $length; $i++) {\n        if\
    \ (substr($strings[0], $i, $prefix_length) === $prefix) {\n            $filtered[]\
    \ = $strings[0];\n        }\n    }\n    return $filtered;\n}\n</code>\n<|/ a dscore=4\
    \ |>\n<| a tags=arrays,php |>\nThis should work for you:\n<code>", "    $strings\
    \ = array_values($strings);\n    return array_filter($strings, function ($string)\
    \ use ($prefix) {\n        return strpos($string, $prefix) === 0;\n    });\n}\n\
    </code>\nThe benefit of this is that it does so without needing to create or call\
    \ a function, is more readable and more maintainable (as compared to writing and\
    \ maintaining a filter function per possible prefix) and is still quite efficient.\n\
    <|/ a |>\n<| c |>\nAgreed, this is much better, but it is more of a hack. Just\
    \ use array_filter with a closure.\n<|/ c |>\n<| c |>\nYeah, this is much better\
    \ :)\n<|/ c |>\n<| c |>\nThis doesn't work if the prefix contains special characters\
    \ like \"-\". For example, try this: `$strings = array(\"\", \"-\", \"-hello\"\
    , \"-hello-world\");\n$prefix = \"\";\nprint_r(filter_by_prefix($strings, $prefix));`\n\
    <|/ c |>\n<| c |>\nThanks. I didn't think of that. That's a very good point. I've\
    \ updated the answer and included a function for dealing with those cases.\n<|/\
    \ c |>\n<| a tags=arrays,php |>\nI find that the most convenient way to do this\
    \ is with a filter function.\n<code>\n<?php\n$array = ['abc', 'def', 'ghi', 'jkl'];\n\
    $prefix = 'c';\n$filtered = array_filter($array, function($value) use ($prefix)\
    \ {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/ a dscore=3 |>\n\
    <| c |>\nNot a bad idea, but I don't think this can be used in this case because\
    \ the string in the array is unknown, it's coming from a DB.\n<|/ c |>\n<| c |>\n\
    It doesn't matter where it's coming from, all you do is make a new variable called\
    \ `$filtered` that contains all the values that have a prefix of `c`.\n<|/ c |>\n\
    <| c |>\nI agree. The example I gave is very simple, in reality it's actually\
    \ a DB query and I need the whole array back so I'm just trying to get the array\
    \ back from that function. Anyway I got this to work using this approach, so thanks\
    \ :)\n<|/ c |>\n<| a tags=arrays,php |>\n<code>", "  if ($prefix === '') {\n \
    \   return array();\n  }\n\n  // Create an array of lowercase prefix and suffix\
    \ arrays.\n  foreach ($strings as $key => $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      // If the current prefix exists in the string...\n\
    \      $results[] = array($string);\n      // ... and the suffix does not already\
    \ exist...\n      if (in_array($suffix . $prefix, $strings)) {\n        // ...\
    \ then delete this suffix from the array.\n        unset($strings[$key]);\n  \
    \    }\n    }\n  }\n\n  // Return our filtered result.\n  return $results;\n}",
  "  return array_filter(\n    $strings,\n    function ($str) use ($prefix) {\n  \
    \    return strncmp($str, $prefix, strlen($prefix)) == 0;\n    }\n  );\n}\n\n\
    /**\n * Given a list of \"tags\" separated by comma, turns it into\n * a correctly\
    \ formatted \"tag\" string.\n *\n * @param array $tags_list List of tags to format.\n\
    \ * @return string Formatted list of tags.\n */", "  foreach ($strings as $string)\
    \ {\n    if (strncmp($prefix, $string, strlen($prefix)) === 0) {\n      $strings[]\
    \ = $string;\n    }\n  }\n  return $strings;\n}\n", "  $result = [];\n  foreach\
    \ ($strings as $string) {\n    if (substr($string, 0, strlen($prefix)) == $prefix)\
    \ {\n      $result[] = $string;\n    }\n  }\n  return $result;\n}\n</code>\nThe\
    \ second function filter_by_prefix is essentially the inverse of filter_array,\
    \ where it filters an array based on whether or not it starts with a given prefix.\n\
    <|/ a dscore=5 |>\n<| c |>\nWhat is $array in your example? It is a string that\
    \ needs to be split up?\n<|/ c |>\n<| c |>\nYou're right, I was using it incorrectly.\
    \ I've edited the answer to make it a bit clearer.\n<|/ c |>\n<| c |>\nI do not\
    \ agree with this approach, as it requires too much knowledge of array data structures.\
    \ Why should a function know about arrays internals? For example `array_filter`\
    \ can filter by any predicate (it even can do more complex stuff), while this\
    \ function can filter by only some specific predicates, not others.\n<|/ c |>\n\
    <| c |>\nThe reason this approach is \"too much knowledge of array data structures\"\
    \ is because these functions only operate on arrays. You can easily extend them\
    \ to work on other types of structures. For example, `filter_by_prefix` could\
    \ work on a multidimensional array, allowing you to filter by prefix.\n<|/ c |>\n\
    <| c |>\nYour answer was helpful, even if it was not the exact question I was\
    \ looking for, I used it anyway since I needed a way to filter an array and display\
    \ some of the elements. Your answer was extremely helpful in explaining how to\
    \ do it.\n<|/ c |>\n<| a |>\nFor simple array you can use a foreach loop:\n<code>\n\
    $array = array('hello', 'world', 'foo', 'bar', 'foo', 'bar');\n\nforeach($array\
    \ as $key => $value) {\n   if(strpos($value, 'foo') === 0) {\n        unset($array[$key]);\n\
    \   }\n}\n\nvar_dump($array);\n</code>\n<|/ a tags=php,arrays,filter dscore=4\
    \ |>\n<| a dscore=3 |>\nI know this is a bit late, but I thought I'd share the\
    \ solution I came up with.\n<code>", "  return array_filter($strings, function\
    \ ($value) use ($prefix) {\n    return 0 === strpos($value, $prefix);\n  });\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| a |>\nI took this from another StackOverflow\
    \ answer that uses callbacks as well as array_filter. \n<code>", "  if (!is_array($strings))\
    \ {\n    $strings = array($strings);\n  }\n\n  foreach ($strings as $string) {\n\
    \    if (!is_string($string)) {\n      continue;\n    }\n\n    if (strncmp($string,\
    \ $prefix, strlen($prefix)) === 0) {\n      unset($strings[array_search($string,\
    \ $strings)]);\n    }\n  }\n\n  return $strings;\n}", "  $filtered_strings = array();\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n\
    \      $filtered_strings[] = $string;\n    }\n  }\n  return $filtered_strings;\n\
    }\n</code>\nI tested the above function in the following way:\n<code>\n<?php",
  "  foreach ($strings as $key => $value) {\n    if (strncmp($prefix, $value, strlen($prefix))\
    \ == 0) {\n      unset($strings[$key]);\n    }\n  }\n  return $strings;\n}\n",
  "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strncmp($prefix,\
    \ $string, 0) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a |>\n<| a dscore=4 |>\nI really like and prefer the following\
    \ method (written in Clojure) based upon's answer\n<code>\n(defn filter-prefix\
    \ [prefix strings]\n  (filter #(starts-with? % prefix) strings))\n</code>\nHere\
    \ are some tests\n<code>\n(filter-prefix \"apple\" \"apple and orange\")\n; ->\
    \ \"apple and orange\"\n\n(filter-prefix \"app\" \"apple and orange\")\n; -> \"\
    apple and orange\"\n\n(filter-prefix \"a\" \"apple and orange\")\n; -> \"apple\
    \ and orange\"\n\n(filter-prefix \"app\" \"apple and orange\")\n; -> \"apple and\
    \ orange\"\n\n(filter-prefix \"apple\" \"apple and orange\")\n; -> \"apple and\
    \ orange\"\n\n(filter-prefix \"app\" \"apple and orange\")\n; -> \"apple and orange\"\
    \n\n(filter-prefix \"a\" \"apple and orange\")\n; -> \"apple and orange\"\n</code>\n\
    <|/ a tags=arrays,filter,php,sorting |>\n<| a |>\nThis is a bit slower than the\
    \ Clojure based solution (which has already been posted and accepted, but doesn't\
    \ have all the checks to make sure that the prefix isn't being filtered in a way\
    \ you don't want to filter), but still pretty simple.\n<code>", "  $filtered =\
    \ array();\n  foreach($strings as $string) {\n    if(substr($string, 0, strlen($prefix))\
    \ == $prefix) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }", "    if (is_array($strings)) {\n        $new_array = array();\n        foreach\
    \ ($strings as $key => $value) {\n            if (substr($value, 0, strlen($prefix))\
    \ == $prefix) {\n                $new_array[$key] = $value;\n            }\n \
    \       }\n        return $new_array;\n    }\n\n    return $strings;\n}\n", " \
    \   $filtered_strings = array();\n    foreach ($strings as $str) {\n        if\
    \ (0 === strpos($str, $prefix)) {\n            $filtered_strings[] = $str;\n \
    \       }\n    }\n    return $filtered_strings;\n}\n", "  $output = array();\n\
    \  $prefix_length = strlen($prefix);\n\n  foreach ($strings as $string) {\n  \
    \  if (strncmp($string, $prefix, $prefix_length) == 0) {\n      $output[] = $string;\n\
    \    }\n  }\n\n  return $output;\n}\n", "  if (!is_array($strings)) {\n    return\
    \ array();\n  }\n\n  return array_filter($strings, function ($s) {\n    return\
    \ strncmp($s, $prefix, strlen($prefix)) == 0;\n  });\n}\n", "  $found = array();\n\
    \  foreach ($strings as $s) {\n    if (strncmp($prefix, $s, strlen($prefix))===\
    \ 0) {\n      $found[] = $s;\n    }\n  }\n  return $found;\n}\n", "  $filtered\
    \ = array();\n\n  foreach ($strings as $str) {\n    if (strncmp($prefix, $str,\
    \ strlen($prefix)) == 0) {\n      $filtered[] = $str;\n    }\n  }\n\n  return\
    \ $filtered;\n}", "  return array_filter(\n      $strings,\n      function ($item)\
    \ {\n        return strpos($item, $prefix) === 0;\n      }\n  );\n}", "    if\
    \ (!is_array($strings)) {\n        $strings = array($strings);\n    }\n    return\
    \ array_filter($strings, function($s) use ($prefix) {\n        return substr($s,\
    \ 0, strlen($prefix)) == $prefix;\n    });\n}\n</code>\n<|/ a dscore=4 |>\n<|\
    \ a dscore=3 |>\n<code>", "  $filtered_array = array();\n  foreach ($strings as\
    \ $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered_array[$string]\
    \ = $string;\n    }\n  }\n  return $filtered_array;\n}", "  return array_filter($strings,\
    \ function($item) use ($prefix) {\n    return strncmp($item, $prefix, strlen($prefix))\
    \ == 0;\n  });\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI would go about\
    \ this by first searching the array for values that start with 'word' and then\
    \ remove these from the array. Something like this:\n<code>\n<?php\n$array = array('a',\
    \ 'b', 'c', 'd', 'e');\n\n$start = 'w';\n\n$result = array_filter($array, function($value)\
    \ {\n    return (substr($value, 0, strlen($start)) === $start);\n});\n</code>\n\
    <|/ a tags=arrays,php,multidimensional-array |>\n<| a dscore=1 tags=arrays,php,multidimensional-array\
    \ |>\n<code>\n$array = array(\n    array('a', 'b'),\n    array('c'),\n    array('d'),\n\
    \    array('e'),\n    array('f', 'g'),\n    array('h')\n);\n\n$prefix = 'a';\n\
    \n$result = array();\nforeach ($array as $values) {\n    foreach ($values as $value)\
    \ {\n        if (substr($value, 0, strlen($prefix)) === $prefix) {\n         \
    \   $result[] = $value;\n        }\n    }\n}\n\nvar_dump($result);\n</code>\n\
    <|/ a |>\n<| c |>\nYour code works, but if you add `array('f', 'h'),` the result\
    \ becomes unusable. Try it with a prefix of 'f' and an input of 'af'.\n<|/ c |>\n\
    <| a dscore=1 |>\nYou could use array_filter\n<code>\n$array = array(\n    array('a',\
    \ 'b'),\n    array('c'),\n    array('d'),\n    array('e'),\n    array('f', 'g'),\n\
    \    array('h')\n);\n$filter = $array[0];\n", "  return array_filter($strings,\
    \ function($s) use ($prefix) {\n    return strpos($s, $prefix) === 0;\n  });\n\
    }\n", "  if (!$strings) return array();\n  $result = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $result[] =\
    \ $string;\n    }\n  }\n  return $result;\n}", "  return array_filter($strings,\
    \ function($string) {\n    return strncmp($string, $prefix, strlen($prefix)) ==\
    \ 0;\n  });\n}", "  if (!$strings)\n    return array();\n  $filtered = array();\n\
    \  foreach ($strings as $string) {\n    if (strncmp($prefix, $string, strlen($prefix))\
    \ === 0)\n      $filtered[] = $string;\n  }\n  return $filtered;\n}\n", "  if\
    \ ($prefix !== \"\" && !is_array($strings)) {\n    $strings = array($strings);\n\
    \  }\n  $out = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $out[] = $string;\n    }\n  }\n  return $out;\n}\n",
  "  if (!$strings) {\n    return array();\n  }\n  return array_filter(\n    $strings,\n\
    \    function ($value) use ($prefix) {\n      return 0 === strncmp($value, $prefix,\
    \ strlen($prefix));\n    },\n    ARRAY_FILTER_USE_BOTH\n  );\n}\n", "  if (empty($strings))\
    \ return array();\n  return array_intersect_key($strings, array_flip(preg_grep(\"\
    /^$prefix/\", $strings)));\n}", "  // Return an empty array if the given array\
    \ is empty.\n  if (empty($strings)) {\n    return array();\n  }\n\n  // Filter\
    \ the input strings array and return a subset that starts with the given prefix.\n\
    \  return array_filter($strings, function ($s) {\n    return substr($s, 0, strlen($prefix))\
    \ === $prefix;\n  });\n}\n</code>\n<|/ a tags=php,arrays,substr |>\n<| c |>\n\
    Thank you! This worked for me. I also had to fix a couple other things, such as\
    \ missing a return statement in the first if statement. \n\nreturn substr($s,\
    \ 0, strlen($prefix)) === $prefix;\n\nshould be changed to:\n\nreturn substr($s,\
    \ 0, strlen($prefix)) == $prefix;\n<|/ c |>\n<| c |>\n, No you don't.  This is\
    \ because `===` means \"same type\" whereas `==` means \"same value\" (which would\
    \ be a more accurate description).\n<|/ c |>\n<| a dscore=0 tags=php,arrays,substr\
    \ |>\n<code>\n<?php\n$testArray = array('abc', 'abc', 'def', 'def', 'abc', 'ghi',\
    \ 'ghi');\nvar_dump($testArray);\n\n$filteredArray = array();\n$filteredArray\
    \ = array_filter($testArray,\n    function ($value) use (&$filteredArray) {\n\
    \        $matched = false;\n        foreach ($filteredArray as $key => $value)\
    \ {\n            if (substr($value, 0, 3) == $value) {\n                $filteredArray[$key]\
    \ = false;\n                $matched = true;\n                break;\n       \
    \     }\n        }\n        return $matched;\n    }\n);\n\nvar_dump($filteredArray);\n\
    </code>\n<|/ a |>\n<| c |>\nWhile this code snippet may solve the question, [including\
    \ an explanation](http://meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers)\
    \ really helps to improve the quality of your post. Remember that you are answering\
    \ the question for readers in the future, and those people might not know the\
    \ reasons for your code suggestion.\n<|/ c |>\n<| a dscore=0 |>\nUse array_filter\
    \ \n<code>\n$data = array('abc', 'abc', 'def', 'def', 'abc', 'ghi', 'ghi');\n\
    $filtered = array_filter($data, function($value) {\n    return substr($value,\
    \ 0, 3) === 'abc';\n});\n\nvar_dump($filtered);\n</code>\nOutput:\n<code>\narray(3)\
    \ {\n  [0]=>\n  string(3) \"abc\"\n  [1]=>\n  string(3) \"abc", "  $prefix_len\
    \ = strlen($prefix);\n  return array_filter($strings, function ($string) use ($prefix_len)\
    \ {\n    return (substr($string, 0, $prefix_len) === $prefix);\n  });\n}\n", " \
    \ $filtered = array();\n  foreach ($strings as $string) {\n    if (strncmp($string,\
    \ $prefix, strlen($prefix))) {\n      continue;\n    }\n    $filtered[] = $string;\n\
    \  }\n  return $filtered;\n}\n", "  foreach ($strings as $key => $value) {\n \
    \   if (strpos($value, $prefix) === 0) {\n      unset($strings[$key]);\n    }\n\
    \  }\n  return $strings;\n}\n</code>\n<|/ a |>\n<| a dscore=2 |>\n<code>\n<?php\n\
    \n$strings = array(\"abcd\", \"efg\", \"hij\", \"klm\", \"nop\");\n$strings =\
    \ array_filter(\n    $strings,\n    function($string) { return strpos($string,\
    \ \"a\") !== false; }\n);\n\nprint_r($strings);\n", "    return array_filter($strings,\
    \ function($s) {\n        return strncmp($s, $prefix, strlen($prefix)) == 0;\n\
    \    });\n}", "    $result = [];\n\n    foreach ($strings as $str) {\n       \
    \ if (substr($str, 0, strlen($prefix)) == $prefix) {\n            $result[] =\
    \ $str;\n        }\n    }\n\n    return $result;\n}\n</code>\n<|/ a tags=php,codeigniter,arrays\
    \ dscore=2 |>\n<| c |>\nThis works for my question, thanks a lot\n<|/ c |>\n<|\
    \ c |>\nYou're welcome. If it does answer your question you can accept it as the\
    \ answer with the green check mark. Otherwise let us know what else you need so\
    \ we can help.\n<|/ c |>\n<| a tags=php,codeigniter,arrays |>\nTry this : \n<code>\n\
    $array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n\nforeach($array as $key=>$value)\n\
    {\n    if(strpos($value,'a') !== false)\n    {\n        unset($array[$key]);\n\
    \    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,codeigniter,arrays dscore=0\
    \ |>\nI suggest you to use preg_grep. It will give you the correct result.  \n\
    <code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n\n$result = preg_grep(\"\
    /^a/\", $array);\n\nprint_r($result);\n</code>\n<|/ a |>\n<| a tags=php,codeigniter,arrays\
    \ |>\nYou can use the array_filter() method. The callback function can return\
    \ true or false, true means that an element should be kept, and false means the\
    \ element should be removed from the array.\n<code>\n$array = array(\"abc\", \"\
    bcd\", \"cde\", \"array\");\n$new_array = array_filter($array, 'filter_fun');\n",
  "  return array_filter($strings, function($string) use ($prefix) {\n    return strncmp($prefix,\
    \ $string, 0) === 0;\n  });\n}", "  if (!is_array($strings)) {\n    return array();\n\
    \  }\n  if (!is_string($prefix)) {\n    return $strings;\n  }\n  $keys = array();\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n\
    \      $keys[] = $string;\n    }\n  }\n  return $keys;\n}\n", "  // If the prefix\
    \ is empty, return all strings.\n  if (empty($prefix)) {\n    return $strings;\n\
    \  }\n\n  // If no strings are in the list, return an empty list.\n  if (count($strings)\
    \ === 0) {\n    return array();\n  }\n\n  // Build a regular expression to match\
    \ the prefix.\n  $pattern = sprintf('#^%s#', $prefix);\n\n  // Filter the strings\
    \ only if the prefix matches the regular expression.\n  return array_filter(\n\
    \    $strings,\n    function($item) use ($pattern) {\n      return preg_match($pattern,\
    \ $item);\n    },\n    ARRAY_FILTER_USE_BOTH\n  );\n}\n\n/**\n * Maps a key from\
    \ one associative array to another.\n *\n * @param $array1 Array to map from.\n\
    \ * @param $array2 Array to map to.\n * @param $key Key to map.\n * @param $value\
    \ Value to map.\n * @return $array2 Mapped array.\n */", "  foreach ($strings\
    \ as $key => $value) {\n    if (!empty($prefix) && strpos($value, $prefix) ===\
    \ 0) {\n      unset($strings[$key]);\n    }\n  }\n\n  return $strings;\n}\n",
  "  foreach ($strings as $s) {\n    if (strncmp($prefix, $s, strlen($prefix)) ===\
    \ 0) {\n      unset($strings[$i]);\n    }\n  }\n  return $strings;\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a |>\nIf your array always has the same structure\
    \ and you only need the keys, you can get all the keys using array_keys.\n<code>\n\
    $keys = array_keys($your_array);\n</code>\nYou can then filter your keys using\
    \ the preg_grep function.\n<code>\n$keys = preg_grep('/^(myprefix)/', $keys);\n\
    </code>\n<|/ a tags=php,arrays dscore=3 |>\n<| c |>\nHaven't tested it, but doesn't\
    \ preg_grep return an array? If so, why would you call array_keys on it?\n<|/\
    \ c |>\n<| c |>\npreg_grep returns an array, but the function array_keys does\
    \ not return an array, it returns an array with the keys of the given array.\n\
    <|/ c |>\n<| c |>\npreg_grep returns array, array_keys returns array.\n<|/ c |>\n\
    <| a tags=php,arrays |>\n<code>\n$array = array(\n    array('key1' => 'value1',\
    \ 'key2' => 'value2'),\n    array('key3' => 'value3', 'key4' => 'value4'),\n \
    \   array('key5' => 'value5', 'key6' => 'value6'),\n);\n\n$result = array();\n\
    \nforeach ($array as $key => $value) {\n    if (preg_match('/key/', $key)) {\n\
    \        $result[] = $key;\n    }\n}\n\nprint_r($result);\n</code>\n<|/ a dscore=3\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$arr1 = array('key1' => 'value1', 'key2'\
    \ => 'value2');\n$arr2 = array('key3' => 'value3', 'key4' => 'value4');\n\n$arrays\
    \ = array($arr1, $arr2);\n$keys = array_map(function($val) { return key($val);\
    \ }, $arrays);\n\n$result = array_intersect($keys, array_map(function($val) {\
    \ return $val[0]; }, $arrays));\n\nprint_r($result);\n</code>\n<|/ a dscore=3\
    \ |>\n<| a tags=php,arrays |>\n<code>", "    $filtered = array();\n    foreach\
    \ ($strings as $string) {\n        if (substr($string, 0, strlen($prefix)) ===\
    \ $prefix) {\n            $filtered[] = $string;\n        }\n    }\n    return\
    \ $filtered;\n}\n</code>\n<|/ a dscore=2 tags=arrays,php,sorting |>\n<| c |>\n\
    Thanks for the quick reply. Would you be able to elaborate on how this would work\
    \ with my example above?\n<|/ c |>\n<| a tags=arrays,php,sorting |>\nIf your array\
    \ is always of arrays with same size you can do this:\n<code>\n$array = array();\n\
    $array[] = array('name' => 'Donald', 'gender' => 'male');\n$array[] = array('name'\
    \ => 'Susan', 'gender' => 'female');\n$array[] = array('name' => 'Max', 'gender'\
    \ => 'female');\n$array[] = array('name' => 'Bill', 'gender' => 'male');\n$array[]\
    \ = array('name' => 'John', 'gender' => 'male');\n$array[] = array('name' => 'Frank',\
    \ 'gender' => 'male');\n", "  if (!is_array($strings)) {\n    return array();\n\
    \  }\n  if (!is_string($prefix)) {\n    return array();\n  }\n  return array_filter($strings,\
    \ function($string) {\n    return strncmp($string, $prefix, strlen($prefix)) ==\
    \ 0;\n  });\n}", "    $result = array();\n    foreach ($strings as $string) {\n\
    \        if (strpos($string, $prefix) === 0) {\n            $result[] = $string;\n\
    \        }\n    }\n    return $result;\n}\n", "    if (empty($strings) || empty($prefix))\
    \ {\n        return array();\n    }\n    $retval = array();\n    foreach ($strings\
    \ as $string) {\n        if (strncmp($prefix, $string, strlen($prefix)) == 0)\
    \ {\n            $retval[] = $string;\n        }\n    }\n    return $retval;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks, I've tested it but the result\
    \ is a bit different than I expected. Here the array:\n\n`array\n  0 => string\
    \ 'Mario (1980)' (length=11)\n  1 => string 'Mario (1980) (2000)' (length=16)\n\
    \  2 => string 'Mario (1980) (2000)' (length=16)\n  3 => string 'Mario (1980)\
    \ (2000)' (length=16)\n  4 => string 'Mario (1980) (2000)' (length=16)\n  5 =>\
    \ string 'Mario (1980) (2000)' (length=16)\n  6 => string 'Mario (1980) (2000)'\
    \ (length=16)\n  7 => string 'Mario (1980) (2000)' (length=16)\n  8 => string\
    \ 'Mario (1980) (2000)' (length=16)\n  9 => string 'Mario (1980) (2000)' (length=16)\n\
    \  10 => string 'Mario (1980) (2000)' (length=16)\n  11 => string 'Mario (1980)\
    \ (2000)' (length=16)\n  12 => string 'Mario (1980) (2000)' (length=16)\n  13\
    \ => string 'Mario (1980) (2000)' (length=16)\n  14 => string 'Mario (1980) (2000)'\
    \ (length=16)\n  15 => string 'Mario (1980) (2000)' (length=16)\n  16 => string\
    \ 'Mario (1980) (2000)' (length=16)\n  17 => string 'Mario (1980) (2000)' (length=16)\n\
    \  18 => string 'Mario (1980) (2000)' (length=16)\n  19 => string 'Mario (1980)\
    \ (2000)' (length=16)\n  20 => string 'Mario (1980) (2000)' (length=16)\n  21\
    \ => string 'Mario (1980) (2000)' (length=16)\n  22 => string 'Mario (1980) (2000)'\
    \ (length=16)\n  23 => string 'Mario (1980) (2000)' (length=16)\n  24 => string\
    \ 'M", "    if (empty($strings)) {\n        return array();\n    }\n    $filtered\
    \ = array();\n    foreach ($strings as $string) {\n        if (strpos($string,\
    \ $prefix) === 0) {\n            $filtered[] = $string;\n        }\n    }\n  \
    \  return $filtered;\n}\n</code>\nAnd then we can write a function that can add\
    \ an item to a list of items if it is not in the list:\n<code>", "  return array_filter(\n\
    \    $strings,\n    function($string) use ($prefix) {\n      return strlen($string)\
    \ >= strlen($prefix) && substr($string, 0, strlen($prefix)) == $prefix;\n    }\n\
    \  );\n}", "  return array_filter($strings, function($str) use ($prefix) {\n \
    \   return strpos($str, $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 tags=php |>\nI came here looking for a solution to this problem,\
    \ and found that it's actually a pretty simple one. Let's say you have a string\
    \ that looks like this:\n<code>\n$string = \"The quick brown fox jumped over the\
    \ lazy dog.\";\n</code>\nYou can find the position of the first letter of the\
    \ string by using the substr function:\n<code>\n$pos = strpos(strtolower($string),\
    \ 'a');\n</code>\nIt returns a position number like so:\n<code>\n$pos = 22\n</code>\n\
    The position number can be used to offset the position of the next letter by adding\
    \ 1 to it:\n<code>\n$pos = 22 + 1; // 22 is our previous position number\n</code>\n\
    And then finally you can get the actual position of the next letter:\n<code>\n\
    $next_pos = strpos(strtolower($string), ' ', ($pos + 1)); // +1 because we're\
    \ offsetting the position of the next character by 1\n</code>\nThe above method\
    \ works for strings even if the string contains multiple words because the offset\
    \ is based off of the start of the string and therefore it starts from the first\
    \ letter and moves forward until it reaches a space. The above method works well\
    \ with sentences, but not so much with paragraphs (where it's really difficult\
    \ to know what the next space character will be for the string 'the'.\n<|/ a |>\n\
    <| c |>\nThis is wrong as it only works for single letters only\n<|/ c |>\n<|\
    \ c |>\nI know, it's been a long time since I asked this, but I came back to this\
    \ and thought that I had it working in quite a way that would work for more than\
    \ single letters now. I will update my answer to fix the mistake.\n<|/ c |>\n\
    <| a tags=php |>\nUse mb_strpos() function, like so:\n<code>\n<?php\n$string =\
    \ \"The quick brown fox jumped over the lazy dog.\";\n\n$pos = mb_strpos($string,\
    \ \"a\"); // Position of first character \"a\" in string\n$pos = $pos + mb_strlen($string);\
    \ // Offset position of first character \"a\" in string\n\n$pos = $pos + 1; //\
    \ Position of second character \"a\" in string\n$pos = mb_strpos($string, \" \"\
    , $pos); // Position of first character \" \" after position $pos\n\necho \"First\
    \ character position in string: $pos\\n\"; // Position of first character \"a\"\
    \necho \"Second character position in string: $pos\\n\"; // Position of second\
    \ character \"a\"\necho \"", "  foreach ($strings as $s) {\n    if (strlen($prefix)\
    \ && substr($s, 0, strlen($prefix)) == $prefix) {\n      unset($strings[$i]);\n\
    \    }\n  }\n  return $strings;\n}\n</code>\n<|/ a tags=arrays,multidimensional-array,php,arraylist\
    \ |>\n<| a dscore=3 tags=arrays,multidimensional-array,php,arraylist |>\n<code>\n\
    $array = array(\n    0 => array(\n        'name' => 'bob',\n        'title' =>\
    \ 'Mr.'\n    ),\n    1 => array(\n        'name' => 'bob',\n        'title' =>\
    \ 'Mr.'\n    ),\n    2 => array(\n        'name' => 'tom',\n        'title' =>\
    \ 'Mr.'\n    ),\n    3 => array(\n        'name' => 'bob',\n        'title' =>\
    \ 'Mr.'\n    ),\n);\n$array2 = array();\n\nforeach ($array as $key => $val) {\n\
    \    if (in_array('bob', $val)) {\n        $array2[] = $val;\n    }\n}\n\nvar_dump($array2);\n\
    </code>\n<|/ a |>\n<| c |>\nthis solution is better than the accepted answer.\
    \ because array_filter will iterate over the entire array. this solution will\
    \ stop as soon as you find an element that meets the condition, and since we are\
    \ iterating over the entire array this will be fastest\n<|/ c |>\n<| c |>\nThe\
    \ accepted answer also does this. However the accepted answer will also modify\
    \ the source array, as this example shows it. So the solutions here will not have\
    \ side effects. But I agree this solution is more readable in most cases. So +1\
    \ from me.\n<|/ c |>\n<| a tags=arrays,multidimensional-array,php,arraylist |>\n\
    I personally prefer array_walk() for this kind of thing. It allows one to easily\
    \ manipulate the data before it's passed into the callback. Example:\n<code>\n\
    $array = array(\n    0 => array(\n        'name' => 'bob',\n        'title' =>\
    \ 'Mr.'\n    ),\n    1 => array(\n        'name' => 'bob',\n        'title' =>\
    \ 'Mr.'\n    ),\n    2 => array(\n        'name' => 'tom',\n        'title' =>\
    \ 'Mr.'\n    ),\n    3 => array(\n        'name' => 'bob',\n        'title' =>\
    \ 'Mr.'\n    ),\n);\n\narray_walk($array, function($a, $b) use (&$result) { \n\
    \    if($a['name'] == 'bob') {\n        $result[] = $b;\n    }\n}, $result = []);\n\
    \n", "  $prefix_length = strlen($prefix);\n  return array_filter($strings, function($value)\
    \ {\n    return strncmp($value, $prefix, $prefix_length) === 0;\n  });\n}", " \
    \ return array_filter($strings, function ($string) use ($prefix) {\n    return\
    \ strpos($string, $prefix) === 0;\n  });\n}\n", "  if (!is_array($strings)) {\n\
    \    return array();\n  }\n  $result = array();\n  foreach ($strings as $string)\
    \ {\n    if (strncmp($prefix, $string, strlen($prefix)) === 0) {\n      $result[]\
    \ = $string;\n    }\n  }\n  return $result;\n}\n", "  $ret = [];\n  foreach ($strings\
    \ as $s) {\n    if (strncmp($prefix, $s, strlen($prefix)) == 0) {\n      $ret[]\
    \ = $s;\n    }\n  }\n  return $ret;\n}\n", "  foreach ($strings as $string) {\n\
    \    if (strncmp($prefix, $string, strlen($prefix)) == 0) {\n      $result[] =\
    \ $string;\n    }\n  }\n  return $result;\n}\n", "  $filtered = array();\n  foreach\
    \ ($strings as $string) {\n    if (substr($string, 0, strlen($prefix)) == $prefix)\
    \ {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n", "  return\
    \ array_filter($strings, function($item) use ($prefix) { return 0 === strpos($item,\
    \ $prefix); });\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n$array\
    \ = array(\"foo\", \"bar\", \"baz\");\n$array2 = array(\"foo\", \"bar\", \"foobar\"\
    , \"barfoo\");\n$array3 = array(\"bar\");\n\n$array4 = array_unique($array);\n\
    $array5 = array_unique($array2);\n$array6 = array_unique($array3);\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a dscore=0 |>\nuse array_diff and array_intersect\
    \ to solve this problem.\n<|/ a tags=php,arrays |>\n<| c |>\nThanks for you answer,\
    \ but that does not solve the problem. I need to get an array that contains all\
    \ values that are not in the other arrays (not only unique values). I need an\
    \ array that contains all values that are in the other arrays but not in all arrays.\n\
    <|/ c |>\n<| c |>\nPlease add some commentary to your code when answering a question\
    \ like this.\n<|/ c |>\n<| a tags=php,arrays |>\nHere's a function that will do\
    \ the job:\n<code>\n<?php\n    function array_diff($array1, $array2) {\n     \
    \   $array2 = array_values($array2);\n        $array1 = array_values($array1);\n\
    \        foreach ($array2 as $key => $value) {\n            if (in_array($value,\
    \ $array1)) {\n                unset($array1[$key]);\n            }\n        }\n\
    \        return array_values($array1);\n    }", "    $result = array();\n    foreach\
    \ ($strings as $s) {\n        if (strncmp($prefix, $s, strlen($prefix)) == 0)\
    \ {\n            $result[] = $s;\n        }\n    }\n    return $result;\n}", " \
    \ if (!is_string($prefix)) {\n    throw new Exception(\"filter expects a valid\
    \ prefix.\");\n  }\n  $prefix_length = strlen($prefix);\n  $filtered = array();\n\
    \  foreach ($strings as $string) {\n    if (strncmp($string, $prefix, $prefix_length)\
    \ == 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n",
  "    if (empty($strings)) return array();\n\n    foreach ($strings as $string) {\n\
    \        if (!strncmp($string, $prefix, strlen($prefix))) {\n            yield\
    \ $string;\n        }\n    }\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI thought\
    \ about using array_filter, but that would require me to iterate over the entire\
    \ array, which could take minutes. I thought about a recursive function, but I\
    \ believe there could be a more efficient way using PHP itself without having\
    \ to iterate over the entire array twice.\n<|/ c |>\n<| a |>\nUsing array_reduce()\n\
    <code>", "  $result = array();\n  foreach ($strings as $string) {\n    if (substr($string,\
    \ 0, strlen($prefix)) == $prefix) {\n      $result[] = $string;\n    }\n  }\n\
    \  return $result;\n}\n", "  return array_filter($strings, function($value) use\
    \ ($prefix) {\n    return strpos($value, $prefix) === 0;\n  });\n}\n", "  $filtered\
    \ = array();\n\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n\n  return $filtered;\n\
    }\n</code>\nThe second example is easier, because you can just filter out the\
    \ strings that don't start with that prefix. \n<code>", "  return array_filter($strings,\
    \ function ($string) use ($prefix) { return 0 === strpos($string, $prefix); });\n\
    }\n", "  return array_filter(\n    $strings,\n    function ($value) use ($prefix)\
    \ {\n      return strncmp($value, $prefix, strlen($prefix)) == 0;\n    }\n  );\n\
    }\n</code>\n<|/ a tags=php,arrays,string,filter,search |>\n<| c |>\nThe OP wants\
    \ to filter the array **on** the `prefix` value and not just looking for it on\
    \ its own.\n<|/ c |>\n<| a |>\nIf you don't want to use array_filter you can use\
    \ array_map like this\n<code>\n$arr1 = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n$arr2 = array(\"xyz\", \"abcd\", \"defg\", \"array\");\n$arr3 = array(\"abc\"\
    , \"bcd\", \"cde\", \"array\");\n$arr4 = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n$arr5 = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$arr6 = array(\"abc\"\
    , \"bcd\", \"cde\", \"array\");\n$arr7 = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n\n$arr1 = array_map(function ($value){\n    return strpos($value,'abc') ===\
    \ 0?$value:null;\n}, $arr1);\n\n$arr2 = array_map(function ($value){\n    return\
    \ strpos($value,'xyz') === 0?$value:null;\n}, $arr2);\n\n$arr3 = array_map(function\
    \ ($value){\n    return strpos($value,'abc') === 0?$value:null;\n}, $arr3);\n\n\
    $arr4 = array_map(function ($value){\n    return strpos($value,'abc') === 0?$value:null;\n\
    }, $arr4);\n\n$arr5 = array_map(function ($value){\n    return strpos($value,'abc')\
    \ === 0?$value:null;\n}, $arr5);\n\n$arr6 = array_map(function ($value){\n   \
    \ return strpos($value,'abc') === 0?$value:null;\n}, $arr6);\n\n$arr7 = array_map(function\
    \ ($value){\n    return strpos($value,'abc') === 0?$value:null;\n}, $arr7);\n\n\
    print_r($arr1);\nprint_r($arr2);\nprint_r($arr3);\nprint_r($arr4);\nprint_r($arr5);\n\
    print_r($arr6);\nprint_r($arr7);\n</code>\nThe output\n<code>\nArray\n(\n    [0]\
    \ => abc\n    [1] => array\n)\nArray\n(\n    [0] => xyz\n    [1] => array\n)\n\
    Array\n(\n", "  $filtered = array();\n  foreach ($strings as $s) {\n    if (strpos($s,\
    \ $prefix) === 0) {\n      $filtered[$s] = 1;\n    }\n  }\n  return array_keys($filtered);\n\
    }\n", "  if (!$strings) return array();\n  if ($prefix === '') return $strings;\n\
    \  $strings = array_map('strtolower', $strings);\n  return array_filter(array_map(function\
    \ ($string) use ($prefix) { return strpos($string, $prefix) === 0; }, $strings));\n\
    }\n</code>\n<|/ a |>\n<| a tags=php,arrays,array-unique |>\nIt appears you've\
    \ done some research into this before asking this question. Anyway, I went ahead\
    \ and added an example of how to do this with the array_filter function.\n<code>\n\
    <?php\n$names = array('Mary', 'Bob', 'Mary', 'John', 'Mary', 'Bob');\n$result\
    \ = array_filter($names, 'checkName');\n", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a tags=arrays,php dscore=5 |>\n<| c |>\nThis is definitely the best way to\
    \ achieve what I asked for, thanks a lot.\n<|/ c |>\n<| c |>\nYou said \"filter\
    \ out\" instead of \"filter\" in the last sentence. This answer doesn't filter\
    \ out anything, and does not filter the elements that don't start with the prefix.\
    \ It filters them out. Perhaps you meant \"filter out\"?\n<|/ c |>\n<| c |>\n\
    It filters them out, yes. Sorry for the confusion.\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\nI personally don't think it's more efficient but here's another way to do\
    \ it by looking at the first character in the string:\n<code>", "    return array_filter($strings,\
    \ function($string) use ($prefix) {\n        return strpos($string, $prefix) ===\
    \ 0;\n    });\n}\n", "    $output = array();\n    foreach ($strings as $string)\
    \ {\n        if (strncmp($prefix, $string, strlen($prefix)) == 0) {\n        \
    \    $output[] = $string;\n        }\n    }\n    return $output;\n}", "  if (!$strings)\
    \ {\n    return array();\n  }\n\n  return array_filter(\n    $strings,\n    function($string)\
    \ use ($prefix) {\n      return strpos($string, $prefix) === 0;\n    }\n  );\n\
    }\n", "  if (is_array($strings) && count($strings)) {\n    $new = [];\n    foreach\
    \ ($strings as $s) {\n      if (strpos($s, $prefix) === 0) {\n        $new[] =\
    \ $s;\n      }\n    }\n    return $new;\n  }\n  return array();\n}\n", "  $filtered\
    \ = array();\n  foreach($strings as $s) {\n    if (substr($s, 0, strlen($prefix))\
    \ === $prefix) {\n      $filtered[] = $s;\n    }\n  }\n  return $filtered;\n}",
  "  $output = array();\n  foreach ($strings as $string) {\n    if (strncmp($prefix,\
    \ $string, strlen($prefix)) === 0) {\n      $output[] = $string;\n    }\n  }\n\
    \  return $output;\n}\n\n/**\n * Filter an array of strings to remove all occurances\
    \ of a given string.\n * Useful for removing substrings that appear in strings\
    \ like URLs.\n * >>> filter_remove_all(\"http://foo\", array(\"http://foo\", \"\
    http://bar\"))\n * \"http://bar\"\n */", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strncmp($prefix, $string, strlen($prefix)) === 0) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n", "  foreach\
    \ ($strings as $key => $string) {\n    if (strpos($string, $prefix) === 0) {\n\
    \      $results[$key] = $string;\n    }\n  }\n  return $results;\n}\n", "  return\
    \ array_filter($strings, function($str) use ($prefix) { return 0 === strpos($str,\
    \ $prefix); });\n}", "  return array_filter($strings, function($string) use ($prefix)\
    \ {\n    return substr($string, 0, strlen($prefix)) == $prefix;\n  });\n}\n\n\
    /**\n * Get a numeric argument from the query string.\n *\n * If a non-numeric\
    \ value is provided as an argument, the query string will be\n * unmodified.\n\
    \ *\n * @param string\n *  The name of the argument.\n * @param int\n *  The number\
    \ of times to repeat the argument if it is not numeric.\n * @param int\n *  A\
    \ minimum allowed value of the argument.\n *\n * @return\n *  The value of the\
    \ argument or NULL if the argument was not provided.\n */", "  return array_filter($strings,\
    \ function ($s) use ($prefix) {\n    return strpos($s, $prefix) === 0;\n  });\n\
    }\n</code>\n<|/ a |>\n<| c |>\nIf speed is an issue (and you really need to go\
    \ through all that effort to make this work), consider using [array_walk](http://php.net/array_walk)\
    \ as well.\n<|/ c |>\n<| a tags=string,arrays,php,filter |>\n<code>\n$prefix =\
    \ \"b\";\n$strings = array(\"a\", \"b\", \"c\", \"bcd\", \"efg\", \"hij\", \"\
    klm\", \"nop\", \"qrs\", \"tuv\");\n\n$filtered = array_filter($strings, function($s){\n\
    \    return strpos($s, $prefix) === 0;\n});\n\nprint_r($filtered);\n</code>\n\
    The output:\n<code>\nArray\n(\n    [0] => bcd\n    [1] => efg\n    [2] => hij\n\
    \    [3] => klm\n    [4] => nop\n    [5] => qrs\n)\n</code>\n<|/ a dscore=3 |>\n\
    <| c |>\nYou have to pass `str_starts_with` a callback function, not an array.\n\
    <|/ c |>\n<| a dscore=3 tags=string,arrays,php,filter |>\n<code>", "    return\
    \ array_filter($strings, function ($item) use ($prefix) {\n        return strpos($item,\
    \ $prefix) === 0;\n    });\n}\n", "  return array_filter($strings, function ($str)\
    \ use ($prefix) {\n    return strncmp($prefix, $str, strlen($prefix)) == 0;\n\
    \  });\n}\n", "  $filtered_array = array();\n\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $prefix) === 0) {\n      $filtered_array[] = $string;\n\
    \    }\n  }\n\n  return $filtered_array;\n}\n", "    if (empty($strings)) {\n\
    \        return array();\n    }\n    $prefix_length = strlen($prefix);\n    $filtered_strings\
    \ = array();\n    foreach ($strings as $string) {\n        if (strncmp($prefix,\
    \ $string, $prefix_length) == 0) {\n            $filtered_strings[] = $string;\n\
    \        }\n    }\n    return $filtered_strings;\n}", "  return array_filter($strings,\
    \ function ($s) use ($prefix) {\n    return strncmp($s, $prefix, strlen($prefix))\
    \ == 0;\n  });\n}\n", "    if (!is_array($strings)) {\n        return $strings;\n\
    \    }\n    $filtered = array();\n    foreach ($strings as $string) {\n      \
    \  if (substr($string, 0, strlen($prefix)) == $prefix) {\n            $filtered[$string]\
    \ = $string;\n        }\n    }\n    return $filtered;\n}\n", "  return array_filter($strings,\
    \ function ($string) use ($prefix) {\n    return strncmp($prefix, $string, 0)\
    \ == 0;\n  });\n}", "  $filtered_strings = array();\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $prefix) === 0) {\n      $filtered_strings[] = $string;\n\
    \    }\n  }\n  return $filtered_strings;\n}\n</code>\nTo keep it easy to understand,\
    \ you could write it like this:\n<code>\n<?php", "  if (empty($strings)) {\n \
    \   return array();\n  }\n\n  if (empty($prefix)) {\n    return $strings;\n  }\n\
    \n  $matches = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $matches[] = $string;\n    }\n  }\n  return $matches;\n\
    }", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (substr($string,\
    \ 0, strlen($prefix)) == $prefix) {\n      $filtered[] = $string;\n    }\n  }\n\
    \  return $filtered;\n}\n</code>\n<|/ a tags=sorting,php,arrays dscore=2 |>\n\
    <| a dscore=1 |>\nIf you have PHP 5.5+, you can use array_filter():\n<code>\n\
    $new_array = array_filter(\n  $old_array,\n  function($item) use ($prefix) {\n\
    \    return strpos($item, $prefix) === 0;\n  }\n);\n</code>\nOtherwise, you can\
    \ create a custom array_filter() function that uses an anonymous function:\n<code>",
  "  return array_filter(\n    $strings,\n    function ($str) use ($prefix) {\n  \
    \    return (substr($str, 0, strlen($prefix)) == $prefix);\n    }\n  );\n}\n",
  "  return array_filter($strings, function($item) use ($prefix) {\n    return substr($item,\
    \ 0, strlen($prefix)) === $prefix;\n  });\n}\n</code>\nAnd now you can write your\
    \ filter like so:\n<code>\n<?php ", "  return array_filter($strings, function\
    \ ($s) use ($prefix) {\n    return strpos($s, $prefix) === 0;\n  });\n}\n", " \
    \   foreach ($strings as $key => $val) {\n        if (substr($val, 0, strlen($prefix))\
    \ == $prefix) {\n            unset($strings[$key]);\n        }\n    }\n    return\
    \ $strings;\n}\n</code>\n<|/ a |>\n<| c |>\nThis would be much faster if I didn't\
    \ have an array of about 500 elements but that would be a lot of memory usage.\
    \ Does this solution work better though?\n<|/ c |>\n<| c |>\nI agree. This solution\
    \ is better for the example given in the question. But it only filters the strings\
    \ in the array. He doesn't need to keep the whole array in memory. Your example\
    \ is very simple. Still I thought it was a good idea to show an alternative in\
    \ case the array were much bigger. It would be interesting to compare the memory\
    \ usage of this solution and mine.\n<|/ c |>\n<| a |>\nHow about this code?\n\
    <code>\n<?php\n\n$strings[] = array('abcd', 'abdd');\n$strings[] = array('abcd',\
    \ 'abdd');\n$strings[] = array('abcd', 'abdd');\n$strings[] = array('abcd', 'abdd');\n\
    $strings[] = array('abcd', 'abdd');\n$strings[] = array('abcd', 'abdd');\n$strings[]\
    \ = array('abcd', 'abdd');\n$strings[] = array('abcd', 'abdd');\n$strings[] =\
    \ array('abcd', 'abdd');\n$strings[] = array('abcd', 'abdd');\n$strings[] = array('abcd',\
    \ 'abdd');\n$strings[] = array('abcd', 'abdd');\n$strings[] = array('abcd', 'abdd');\n\
    $strings[] = array('abcd', 'abdd');\n$strings[] = array('abcd', 'abdd');\n$strings[]\
    \ = array('abcd', 'abdd');\n$strings[] = array('abcd', 'abdd');\n$strings[] =\
    \ array('abcd', 'abdd');\n$strings[] = array('abcd', 'abdd');\n$strings[] = array('abcd',\
    \ 'abdd');\n$strings[] = array('abcd', 'abdd');\n$strings[] = array('abcd', 'abdd');\n\
    $strings[] = array('abcd', 'abdd');\n$strings[] = array('abcd', 'abdd');\n$strings[]\
    \ = array('abcd', 'abdd');\n$strings[] = array('abcd', 'abdd');\n$strings[] =\
    \ array('abcd', 'abdd');\n$strings[] = array('", "  $filtered = array();\n  foreach($strings\
    \ as $str) {\n    if (strpos($str, $prefix) === 0) {\n      $filtered[] = $str;\n\
    \    }\n  }\n  return $filtered;\n}", "    $return = array();\n    foreach($strings\
    \ as $string) {\n        if (strpos($string, $prefix) === 0) {\n            $return[]\
    \ = $string;\n        }\n    }\n    return $return;\n}\n", "  $prefixlen = strlen($prefix);\n\
    \n  return array_filter($strings, function ($string) use ($prefixlen) {\n    return\
    \ strlen($string) >= $prefixlen;\n  }\n  );\n}\n", "  if (!$strings) return array();\n\
    \  return array_filter(\n    $strings,\n    function ($s) use ($prefix) {\n  \
    \    return strpos($s, $prefix) === 0;\n    }\n  );\n}\n", "  $filtered_strings\
    \ = array();\n  foreach ($strings as $string) {\n    if (substr($string, 0, strlen($prefix))\
    \ == $prefix) {\n      $filtered_strings[] = $string;\n    }\n  }\n  return $filtered_strings;\n\
    }\n</code>\n<|/ a tags=php,arrays dscore=0 |>\n<| a tags=php,arrays |>\nAs others\
    \ have said, preg_grep is the way to go.  However, your description doesn't seem\
    \ to match your example.  I think you just want to filter out an array entry if\
    \ it doesn't start with the prefix.  So you probably need something like this:\n\
    <code>", "    if (!is_array($strings)) return $strings;\n\n    $filtered = array();\n\
    \    foreach ($strings as $string) {\n        if (0 === strpos($string, $prefix))\
    \ $filtered[] = $string;\n    }\n    return $filtered;\n}\n", "  $filtered = array();\n\
    \  foreach ($strings as $string) {\n    if (strncmp($string, $prefix, strlen($prefix))\
    \ == 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n",
  "  if (empty($strings) || !is_array($strings)) {\n    return $strings;\n  }\n  $output\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $output[] = $string;\n    }\n  }\n  return $output;\n}\n\n/**\n\
    \ * Sort an array of string elements.\n *\n * Sort an array of string elements,\
    \ based on their length.\n *\n * Usage:\n * $array = array(\n *   \"abc\", //\
    \ 11\n *   \"ab\",  // 2\n *   \"abcde\", // 5\n *   \"abcde\", // 6\n *   \"\
    abcde\", // 7\n *   \"abcde\", // 8\n *   \"abcde\", // 9\n * );\n * sort_by_length($array);\n\
    \ * print_r($array);\n * array (\n *   0 => 'abc',\n *   1 => 'ab',\n *   2 =>\
    \ 'abcde',\n *   3 => 'abcde',\n *   4 => 'abcde',\n *   5 => 'abcde',\n *   6\
    \ => 'abcde',\n *   7 => 'abcde',\n *   8 => 'abcde',\n *   9 => 'abcde',\n *\
    \ )\n */", "  $filtered = array();\n  foreach ($strings as $str) {\n    if (substr($str,\
    \ 0, strlen($prefix)) == $prefix) {\n      $filtered[] = $str;\n    }\n  }\n \
    \ return $filtered;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nthis one is\
    \ a little more elegant, but will give me a fatal error if I try to filter something\
    \ starting with something that doesn't exist in the array\n<|/ c |>\n<| c |>\n\
    : You can add a test to see if the `$prefix` starts with a digit (or a letter),\
    \ then if not, add it before the `substr()` call. I added an example above.\n\
    <|/ c |>\n<| a |>\n<code>", "  $result = array();\n  foreach ($strings as $string)\
    \ {\n    if (strlen($string) > strlen($prefix)) {\n      $result[] = $string;\n\
    \    }\n  }\n  return $result;\n}\n", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (substr($string, 0, strlen($prefix)) == $prefix) {\n \
    \     $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n", "    foreach\
    \ ($strings as $s) {\n        if (strpos($s, $prefix) === 0) {\n            yield\
    \ $s;\n        }\n    }\n}\n\n/**\n * Given a number, returns a string representing\
    \ the number using the most significant decimal digit only.\n * \n * @param int\
    \ $num The number to stringify\n * @return string The number as a formatted string\n\
    \ */", "  $filtered = [];\n  foreach ($strings as $key => $value) {\n    if (strpos($value,\
    \ $prefix) === 0) {\n      $filtered[$key] = $value;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $output = array();\n  foreach ($strings as $str) {\n    if (strpos($str,\
    \ $prefix) === 0) {\n      $output[] = $str;\n    }\n  }\n  return $output;\n\
    }\n</code>\nYou can apply that to your code with something like this:\n<code>\n\
    <?php\n$output = [];\n", "  $filtered = array();\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n", "    $filtered = array();\n    foreach\
    \ ($strings as $string) {\n        if (strpos($string, $prefix) === 0) {\n   \
    \         $filtered[] = $string;\n        }\n    }\n    return $filtered;\n}\n\
    </code>\n<|/ a |>\n<| a dscore=2 |>\nYou can use  preg_grep to find all matches\
    \ of a pattern in a string. \n<code>\n$string = 'this is some test string';\n\
    $search = 'some';\npreg_grep('/' . preg_quote($search, '/') . '/i', $string);\n\
    </code>\n<|/ a tags=php,string,arrays |>\n<| c |>\nYes but this doesn't do what\
    \ the OP asked.\n<|/ c |>\n<| a tags=php,string,arrays |>\n<code>", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n",
  "  return array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nHere\
    \ is an example with some added comments.\n<code>\n<?php", "  if (!is_array($strings))\
    \ return $strings;\n  $out = [];\n  foreach ($strings as $s) {\n    if (substr($s,\
    \ 0, strlen($prefix)) == $prefix) $out[] = $s;\n  }\n  return $out;\n}\n", " \
    \ return array_filter($strings, function($string) use ($prefix) {\n    return\
    \ substr($string, 0, strlen($prefix)) == $prefix;\n  });\n}\n</code>\n<|/ a dscore=4\
    \ tags=php |>\n<| c |>\n+1 for the most concise solution. I was hoping there'd\
    \ be a one-liner or something, but this works great for me.\n<|/ c |>\n<| c |>\n\
    I guess you could use array_filter with an anonymous function using substr and\
    \ strlen.\n<|/ c |>\n<| c |>\nI added a version using `array_filter`.\n<|/ c |>\n\
    <| c |>\n+1 for elegant solution - I love the way you break the problem down and\
    \ then use array_filter.  Very elegant solution.\n<|/ c |>\n<| c |>\nWhy is the\
    \ string length check necessary? Does it not work just with `return substr($string,\
    \ 0, strlen($prefix))`?\n<|/ c |>\n<| a tags=php dscore=3 |>\nThis is how I would\
    \ do it:\n<code>", "  if (!is_string($prefix)) {\n    throw new InvalidArgumentException(\"\
    $prefix must be a string\");\n  }\n  $return = array();\n  foreach ($strings as\
    \ $string) {\n    if (substr($string, 0, strlen($prefix)) === $prefix) {\n   \
    \   $return[] = $string;\n    }\n  }\n  return $return;\n}\n\n/**\n * Filter and\
    \ remove a list of strings.\n *\n * @param string $str\n * @param array|string\
    \ $keys\n * @return array|string\n */", "  if (empty($strings)) return array();\n\
    \  return array_filter(\n    $strings,\n    function ($item) use ($prefix) {\n\
    \      return strpos($item, $prefix) === 0;\n    }\n  );\n}\n</code>\nOr alternatively:\n\
    <code>\n<?php", "  $filtered = array();\n  foreach ($strings as $string) {\n \
    \   if (strncmp($string, $prefix, strlen($prefix)) == 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n", "    $prefixLen = strlen($prefix);\n\
    \n    return array_filter(\n        $strings,\n        function ($str) use ($prefixLen)\
    \ {\n            return (strlen($str) > $prefixLen);\n        }\n    );\n}\n",
  "  return array_filter(\n    array_map(\n      function($string) use ($prefix) {\n\
    \        return strncmp($string, $prefix, strlen($prefix)) == 0;\n      },\n \
    \     $strings\n    ),\n    function($string) {\n      return $string;\n    }\n\
    \  );\n}\n", "    foreach ($strings as $key => $value) {\n        if (strncmp($prefix,\
    \ $value, strlen($prefix)) == 0) {\n            unset($strings[$key]);\n     \
    \   }\n    }\n    return $strings;\n}\n", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a tags=php,arrays\
    \ dscore=2 |>\n<| a dscore=1 tags=php,arrays |>\nYou could always use a foreach\
    \ loop\n<code>\nforeach($array as $index => $value) {\n    if (strpos($value,\
    \ \"sometext\") !== false) {\n       unset($array[$index]);\n    }\n}\n</code>\n\
    <|/ a |>\n<| a tags=php,arrays |>\n<code>\n$a = array();\n$a[] = 'abc';\n$a[]\
    \ = 'def';\n\n$str = implode(\" \",$a); //abcdef\n$str = str_replace('abcdef',\
    \ '', $str); //abc\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is not the most\
    \ efficient method as it requires iterating over every single item in the array.\n\
    <|/ c |>\n<| c |>\nYes I agree with you, but I am not sure about what he's trying\
    \ to do with the array, hence I suggested this method\n<|/ c |>\n<| a dscore=0\
    \ |>\ntry this\n<code>\n$array = array();\n$array[] = 'abc';\n$array[] = 'def';\n\
    \n$string = 'abcdef';\n$string2 = 'abc';\n$result = preg_replace('/\\b[a-z]+\\\
    b/i', '', $string);\n$result2 = preg_replace('/\\b[a-z]+\\b/i', '', $string2);\n\
    \nvar_dump($result);\nvar_dump($result2);\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a dscore=0 |>\n<code>\n$a = array();\n$a[] = 'abc';\n$a[] = 'def';\n\n$str\
    \ = implode(\" \",$a); //abcdef\n$str = str_replace('abcdef', '', $str); //abc\n\
    </code>\n<|/ a tags=php,arrays |>\n<| c |>\nPlease add explanation what your code\
    \ does.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$arr=array();\n$arr[]=\"abc\";\n\
    $arr[]=\"def\";\n$arr[]=\"ghi\";\n$arr[]=\"jkl\";\n$arr[]=\"mno\";\n$arr[]=\"\
    pqr\";\n$arr[]=\"stu\";\n$arr[]=\"vwx\";", "  $filtered = array();\n  foreach\
    \ ($strings as $str) {\n    if (strncmp($prefix, $str, strlen($prefix)) == 0)\
    \ {\n      $filtered[] = $str;\n    }\n  }\n  return $filtered;\n}\n", "  $result\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $result[] = $string;\n    }\n  }\n  return $result;\n}\n", " \
    \ if ($prefix === \"\") {\n    return $strings;\n  }\n\n  // We need to do some\
    \ filtering here as we cannot use array_filter() since\n  // it won't work with\
    \ our callback\n  $filtered_strings = array();\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $prefix) === 0) {\n      $filtered_strings[] = $string;\n\
    \    }\n  }\n  return $filtered_strings;\n}\n\n/**\n * Convert a timestamp to\
    \ a human readable date string.\n */", "  $filtered_strings = array();\n\n  foreach\
    \ ($strings as $string) {\n    if (substr($string, 0, strlen($prefix)) === $prefix)\
    \ {\n      $filtered_strings[] = $string;\n    }\n  }\n\n  return $filtered_strings;\n\
    }\n</code>\nNow you only need to call that function with the input array and the\
    \ prefix, and get the results you need.\n<|/ a tags=php,mysql,html |>\n<| c |>\n\
    So will this work in all cases as I cannot use input arrays? So I still need the\
    \ loop?\n<|/ c |>\n<| c |>\nIt should, I tested it. `filter_by_prefix` is just\
    \ a single function, no looping required. Just call it with the prefix string\
    \ you want and all the strings and you get the results. If you want some more\
    \ help than that, try posting the code you've tried and we'll see what we can\
    \ do there.\n<|/ c |>\n<| c |>\nI updated my question to include the code you\
    \ requested.\n<|/ c |>\n<| c |>\nIt works great. Thank you so much! Now I just\
    \ have to figure out how to echo the results from each array in to the HTML.\n\
    <|/ c |>\n<| c |>\nYou don't need a loop. Just do `echo implode($array_name);`\
    \ to display the array.\n<|/ c |>\n<| a |>\nYou can try this:\n<code>\n$query\
    \ = mysql_query(\"SELECT * FROM `wp_posts` WHERE `post_status` = 'publish' ORDER\
    \ BY `post_title` DESC\");\n\n$query_array = array();\nwhile ($row = mysql_fetch_assoc($query))\
    \ {\n    $query_array[] = $row;\n}\n\n$myarray=array('abc','def','ghi');\n$filterd_query\
    \ = array_filter($query_array, function($elem) use ($myarray){\n    return in_array($elem['post_title'],$myarray);\n\
    });\nprint_r($filterd_query);\n</code>\nOutput\n<code>\nArray\n(\n    [0] => Array\n\
    \        (\n            [ID] => 1\n            [post_author] => \n           \
    \ [post_date] => 2014-07-26 14:25:52\n            [post_date_gmt] => 2014-07-26\
    \ 14:25:52\n            [post_content] =>\n            [post_title] => hello\n\
    \            [post_excerpt] =>\n            [post_status] => publish\n       \
    \     [comment_status] => open\n            [ping_status] => open\n          \
    \  [post_password] =>\n            [post_name] => hello\n            [to_ping]\
    \ =>\n            [pinged] =>\n            [post_modified] => 2014-07-27 08:08:",
  "  return array_filter($strings, function ($string) use ($prefix) {\n    return\
    \ strpos($string, $prefix) === 0;\n  });\n}\n", "    return array_filter($strings,\
    \ function ($string) use ($prefix) {\n        return strpos($string, $prefix)\
    \ === 0;\n    });\n}\n", "  $filtered = array();\n  foreach($strings as $str)\
    \ {\n    if (strncmp($prefix, $str, 0) == 0) {\n      $filtered[] = $str;\n  \
    \  }\n  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\ni need\
    \ to filter by $prefix and $str. how can i do that with this code?\n<|/ c |>\n\
    <| c |>\n: Added two versions.\n<|/ c |>\n<| a tags=php |>\nTry this:\n<code>\n\
    if($prefix) {\n    $result = array_filter($array,function($var) use ($prefix)\
    \ {\n        return strpos($var, $prefix) === 0;\n    });\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\nUse preg_grep() to get only elements that match the given regex\n\
    <code>\n$result = preg_grep('/'.$prefix.'/', $array);\n</code>\n<|/ a dscore=0\
    \ tags=php |>\n<| c |>\nThanks for you answer, but its not what i was looking\
    \ for. My question was how can i use array_filter with multiple parameters $prefix\
    \ and $str\n<|/ c |>\n<| c |>\nI didn't get what you mean with $str and $prefix.\
    \ Can you please explain it a bit more\n<|/ c |>\n<| c |>\n$prefix is the string\
    \ that i need to filter out from $array. $str is a string that i need to check\
    \ if this string is in array or not. how can i make array_filter to work with\
    \ multiple parameters?\n<|/ c |>\n<| a dscore=0 |>\nTry this one,\n<code>\n$result\
    \ = array_filter($array, function($var){\n  return strpos($var, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=php |>\n<| a tags=php dscore=0 |>\nYou can use array_map\
    \ and array_filter\n<code>\n$result = array_filter(array_map(function($v){\n \
    \   return strpos($v,$prefix) === 0;\n},$arr));\n</code>\n<|/ a |>\n<| c |>\n\
    The `array_filter` part is redundant here.\n<|/ c |>\n<| c |>\nOh yeah I see now.\
    \ Thanks.\n<|/ c |>\n<| a dscore=0 tags=php |>\ntry array_filter:\n<code>\n$arr\
    \ = array('abc', 'def', 'ghi');\n$result = array_filter($arr,function($v){\n \
    \   return str", "  if (!is_array($strings)) return $strings;\n  return array_filter($strings,\
    \ function($s) use ($prefix) {\n    return strpos($s, $prefix) === 0;\n  });\n\
    }\n", "    $prefix_length = strlen($prefix);\n    $matches = array();\n\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) >= $prefix_length && substr($string,\
    \ 0, $prefix_length) == $prefix) {\n            $matches[] = $string;\n      \
    \  }\n    }\n\n    return $matches;\n}\n</code>\nI made some minor changes to\
    \ your function to make it more efficient, and I added another function to make\
    \ the code more readable and easy to use. Hopefully this helps you out a bit.\
    \ Feel free to post your solution if you like it :)\n<|/ a dscore=0 |>\n<| c |>\n\
    This works great, thank you! I'm going to implement it now and see if I can make\
    \ it more efficient and readable. I was thinking there might be a way to make\
    \ this function a one-liner, but I think that's too much for such a simple function.\n\
    <|/ c |>\n<| a |>\nHere is what I was able to come up with. It is a little bit\
    \ more complex, but I think it makes the function easier to understand, and it\
    \ does what I need it to do. Thanks for the help!\n<code>", "    $filtered = array();\n\
    \    foreach ($strings as $string) {\n        if (strpos($string, $prefix) ===\
    \ 0) {\n            $filtered[] = $string;\n        }\n    }\n    return $filtered;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nVery nice, but could you please add the original\
    \ code to the post? I understand this might be a bit \"cheating\" but it would\
    \ be nice to see how it actually works since it isn't obvious to me (I'm fairly\
    \ new to PHP). Thanks!\n<|/ c |>\n<| c |>\nSure, I've added the code to the answer\
    \ now. I've also added a link to a [good SO answer](http://stackoverflow.com/questions/47736/how-do-you-remove-empty-elements-from-an-array-in-php)\
    \ with a nice function to filter out empty elements\n<|/ c |>\n<| c |>\nThanks\
    \ for the clarification, I appreciate it.\n<|/ c |>\n<| a tags=php,arrays |>\n\
    <code>\n<?php\n\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$array\
    \ = array_diff($array, array(''));\n</code>\narray_diff \u2014 Computes the difference\
    \ of arrays\n<|/ a dscore=3 |>\n<| c |>\nThis is very useful but it will remove\
    \ `array('')` as well.\n<|/ c |>\n<| c |>\n: no, it will not. array_diff is smart\
    \ enough to understand that `array('')` is equal to an empty string.\n<|/ c |>\n\
    <| c |>\n: You should be able to confirm this easily by running this code: `$a\
    \ = array('abc', array('', array()), array('bcd', array('')), 'cde', 'array');`\n\
    <|/ c |>\n<| c |>\n- You should be able to verify this easily by running this\
    \ code: `$a = array('abc', array('', array()), array('bcd', array('')), 'cde',\
    \ 'array');`\n<|/ c |>\n<| c |>\n: Yes, but you'll get three empty arrays. Try\
    \ this instead: `$a = array('abc', array('', array()), array('bcd', array('')),\
    \ 'cde', 'array'); $a = array_filter($a, function($value) { return !is_array($value);\
    \ });`\n<|/ c |>\n<| a dscore=3 tags=php,arrays |>\nIf you just want to remove\
    \ all empty values from the array then use the array_filter function\n<code>\n\
    $array= array_filter($array);\n</code>\n<|/ a |>\n<| a ", "  foreach ($strings\
    \ as $key => $value) {\n    if (strpos($value, $prefix) === 0) {\n      unset($strings[$key]);\n\
    \    }\n  }\n  return $strings;\n}", "    if (!is_array($strings)) {\n       \
    \ return array();\n    }\n    $out = array();\n    foreach ($strings as $s) {\n\
    \        if (!strncmp($prefix, $s, strlen($prefix))) {\n            $out[] = $s;\n\
    \        }\n    }\n    return $out;\n}\n", "    $filtered = array();\n    foreach\
    \ ($strings as $string) {\n        if (strpos($string, $prefix) === 0) {\n   \
    \         $filtered[] = $string;\n        }\n    }\n    return $filtered;\n}\n",
  "  // Filter the string array by using the prefix as the search key\n  return array_intersect_key($strings,\
    \ array_flip(array_keys($strings)));\n}", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strlen($string) >= strlen($prefix)) {\n      // Strip\
    \ the prefix from the string and only use its length\n      // as the filter's\
    \ upper bound.\n      $filtered[] = substr($string, 0, strlen($prefix));\n   \
    \ }\n  }\n  return $filtered;\n}\n", "  $result = array();\n  foreach ($strings\
    \ as $string) {\n    if (!strncmp($prefix, $string, 0)) {\n      $result[] = $string;\n\
    \    }\n  }\n  return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your\
    \ answer. Your example code was very helpful.\n<|/ c |>\n<| a dscore=0 |>\nA simple\
    \ way is to use array_filter() with the callback:\n<code>", "    return array_filter($strings,\
    \ function($string) use ($prefix) {\n        return strncmp($string, $prefix,\
    \ strlen($prefix)) == 0;\n    });\n}\n</code>\n<|/ a tags=filtering,php,arrays,function\
    \ |>\n<| a dscore=1 |>\nTry array_filter\n<code>", "  $filtered = array();\n \
    \ foreach ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n", "  return\
    \ array_filter($strings, function($item) use ($prefix) {\n    return strpos($item,\
    \ $prefix) === 0;\n  });\n}\n</code>\nIt doesn't do exactly what you asked for,\
    \ but it's not hard to extend. For example:\n<code>\n$users = array(\n    'joe'\
    \ => 'Jonathan Joe',\n    'pete' => 'Peter Pete',\n    'bob'  => 'Bob Bobbins',\n\
    \    'jim'  => 'Jim Jimbo',\n);\n$search = 'joe';\n$matches = filter_by_prefix($users,\
    \ $search);\n</code>\nThe above code will match any user name that begins with\
    \ the search string. The first two arguments are the array of search strings and\
    \ the third is the search string. The resulting $matches array will contain 'joe'.\n\
    <|/ a tags=php,arrays,multidimensional-array,search dscore=1 |>\n<| a |>\nThis\
    \ should do it:\n<code>\n$result = array();\nforeach ($array as $key => $value)\
    \ {\n    if (strpos($value, 'searchword') === 0) {\n        $result[] = $key;\n\
    \    }\n}\n</code>\n$result will contain only the keys, which contain searchword\
    \ in its string value.\n<|/ a dscore=1 tags=php,arrays,multidimensional-array,search\
    \ |>\n<| c |>\nYou forgot to filter out the subarrays which don't contain the\
    \ substring in their element names.\n<|/ c |>\n<| c |>\nThank you for pointing\
    \ that out. I've edited my answer.\n<|/ c |>\n<| a tags=php,arrays,multidimensional-array,search\
    \ |>\nTry this:\n<code>\n$array = array(\n    array(\n        0 => 'John',\n \
    \       1 => 'Doe',\n        2 => 'Joe',\n        3 => 'Doe',\n        4 => 'John',\n\
    \        5 => 'Doe'\n    ),\n    array(\n        0 => 'John',\n        1 => 'John',\n\
    \        2 => 'John',\n        3 => 'John',\n        4 => 'John',\n        5 =>\
    \ 'John',\n        6 => 'John',\n        7 => 'John',\n        8 => 'John',\n\
    \        9 => 'John',\n        10 => 'John'\n    ),\n    array(\n        0 =>\
    \ 'John',\n        1 => 'John',\n        2 => 'John',\n        3 => 'John',\n\
    \        4 => 'John',\n        5 => 'John',\n        6 => 'John',\n        7 =>\
    \ 'John',\n        8 => 'John',\n        9 => 'John", "  $filtered = array();\n\
    \  foreach ($strings as $s) {\n    if (substr($s, 0, strlen($prefix)) === $prefix)\
    \ {\n      $filtered[] = $s;\n    }\n  }\n  return $filtered;\n}", "  $new_strings\
    \ = array();\n  foreach ($strings as $str) {\n    if (substr($str, 0, strlen($prefix))\
    \ === $prefix) {\n      $new_strings[] = $str;\n    }\n  }\n  return $new_strings;\n\
    }\n</code>\n<|/ a tags=arrays,php |>\n<| a |>\nA little function I made, which\
    \ just filters an array using a given filter:\n<code>", "    return array_filter($strings,\
    \ function ($value) use ($prefix) {\n        return strpos($value, $prefix) ===\
    \ 0;\n    });\n}\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php dscore=2\
    \ |>\n<code>\n$arr = array(\"abc\", \"def\", \"ghi\");\n$newArr = array();\n\n\
    foreach ($arr as $key => $value) {\n    if (strpos($value, 'ghi') === 0) {\n \
    \       $newArr[] = $value;\n    }\n}\n\nvar_dump($newArr);\n</code>\n<|/ a |>\n\
    <| c |>\nIf you want this to be faster you'd better use array_filter with callback\
    \ function and checking for \"ghi\" with strpos, because array_filter is doing\
    \ it behind the scenes.\n<|/ c |>\n<| a tags=arrays,php |>\nI wanted to add that\
    \ this is probably the most efficient way to do it.  \n<code>\narray_filter(\n\
    \    $yourArray,\n    function($string) {\n        return substr($string, 0, 3)==\"\
    abc\";\n    }\n);\n</code>\nThis will give you the substring starting at position\
    \ 0.  You then compare that against the string you are searching for with \"abc\"\
    .\n<|/ a dscore=2 |>\n<| a |>\n<code>\n$array = array(\"abc\", \"def\", \"ghi\"\
    );\n$result = array_filter($array, function($value) {\n    return strpos($value,\
    \ \"ghi\") === 0;\n});\n</code>\n<|/ a dscore=2 tags=arrays,php |>\n<| a |>\n\
    If you want to match just \"ghi\", and not \"ghifoo\", this would do it.\n<code>",
  "  if (!is_array($strings)) throw new Exception(\"The strings parameter must be\
    \ an array.\");\n  $result = array();\n  foreach ($strings as $key => $value)\
    \ {\n    if (strncmp($value, $prefix, strlen($prefix)) == 0) {\n      $result[$key]\
    \ = $value;\n    }\n  }\n  return $result;\n}", "  $filtered = array();\n  foreach\
    \ ($strings as $s) {\n    if (substr($s, 0, strlen($prefix)) == $prefix) {\n \
    \     $filtered[$s] = 1;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=3\
    \ tags=string,php,arrays,sorting |>\n<| c |>\nI actually had to make it a bit\
    \ more generic with optional arguments. This way I can also use \"prefix1\", \"\
    prefix2\", \"prefix3\", \"prefix4\", \"prefixX\" where X can either be any number\
    \ from 0 to X-1\n<|/ c |>\n<| a dscore=2 tags=string,php,arrays,sorting |>\nHere's\
    \ a quick function that will do what you want:\n<code>", "    $filtered = array();\n\
    \    foreach ($strings as $string) {\n        if (0 === strpos($string, $prefix))\
    \ {\n            $filtered[] = $string;\n        }\n    }\n    return $filtered;\n\
    }", "  $filtered_array = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered_array[] = $string;\n    }\n  }\n  return\
    \ $filtered_array;\n}\n", "  $filtered = array();\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n", "    if (empty($strings)) {\n        return\
    \ array();\n    }\n    if (!is_string($prefix)) {\n        $prefix = gettype($prefix);\n\
    \        trigger_error('filter_by_prefix() expects parameter 1 to be of type string\
    \ or null, ' . gettype($prefix) . ' given', E_USER_WARNING);\n        return array();\n\
    \    }\n    if (strpos($prefix, '<') !== false) {\n        $prefix = preg_quote($prefix,\
    \ '/');\n    }\n    $matches = array();\n    foreach ($strings as $s) {\n    \
    \    if (strpos($s, $prefix) === 0) {\n            $matches[] = $s;\n        }\n\
    \    }\n    return $matches;\n}\n", "  $ret = [];\n  foreach ($strings as $i =>\
    \ $string) {\n    if (strncmp($prefix, $string, 0) === 0) {\n      $ret[] = $strings[$i];\n\
    \    }\n  }\n  return $ret;\n}\n", "  // Build a pattern to do a case-insensitive\
    \ search from the prefix\n  $pattern = preg_quote($prefix, '/');\n  // Return\
    \ an empty array if $strings is empty\n  if(!$strings) return array();\n  // Return\
    \ an empty array if $prefix is empty\n  if($prefix == '') return array();\n  //\
    \ Create a local array to be returned\n  $result = array();\n  foreach($strings\
    \ as $string) {\n    // Check if $string starts with the prefix we want\n    if(preg_match(\"\
    /^\" . $pattern . \"/i\", $string)) {\n      // Add to our result array\n    \
    \  $result[] = $string;\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a tags=arrays,php\
    \ dscore=1 |>\n<| a tags=arrays,php |>\n<code>\n<?php\n", "  return array_filter($strings,\
    \ function ($str) use ($prefix) {\n    return strpos($str, $prefix) === 0;\n \
    \ });\n}\n", "  return array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strncmp($string, $prefix, strlen($prefix)) == 0;\n  });\n}\n",
  "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }", "    return array_filter($strings, function ($item) use ($prefix) {\n    \
    \    return strpos($item, $prefix) === 0;\n    });\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a tags=arrays,php |>\nAnother solution using array_filter():\n<code>\n\
    $array = array('a', 'b', 'c', 'd');\n$prefix = 'c';\n\n$result = array_filter($array,\
    \ function($item) use ($prefix) {\n    return strpos($item, $prefix) === 0;\n\
    });\n\nprint_r($result);\n</code>\n<|/ a dscore=4 |>\n<| c |>\nI love this solution\
    \ and it allows me to pass `null` instead of `strpos`'ing all items in the array,\
    \ so it can be used for multi-dimensional arrays\n<|/ c |>\n<| c |>\nIf you're\
    \ using `strpos` make sure to use `===` instead of `==`.\n<|/ c |>\n<| a |>\n\
    Here's a simple solution that uses array_filter() and strpos():\n<code>", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (substr($string, 0, strlen($prefix))\
    \ === $prefix) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a tags=php |>\n<| a dscore=2 tags=php |>\n<code>\n<?php\n$a =\
    \ \"abcdefghijk\";\n$b = \"1234567890\";\n", "    return array_filter($strings,\
    \ function ($s) use ($prefix) {\n        return strpos($s, $prefix) === 0;\n \
    \   });\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer, but your\
    \ code does not work as intended for me.\n<|/ c |>\n<| c |>\n: I added a working\
    \ example that shows how it works. I only replaced `array_walk` with `array_filter`.\n\
    <|/ c |>\n<| a tags=arrays,php dscore=0 |>\n<code>\n<?php\n$fruits = array(\"\
    lemon\", \"orange\", \"banana\", \"apple\");\n\n$result = array();\n\nforeach($fruits\
    \ as $fruit) {\n    if($fruit == \"banana\" || $fruit == \"apple\") {\n      \
    \  $result[] = $fruit;\n    }\n}\n\nprint_r($result);", "  return array_filter($strings,\
    \ function($value) use ($prefix) {\n    return strpos($value, $prefix) === 0;\n\
    \  });\n}\n</code>\nThe function filter_by_prefix uses a closure to test if each\
    \ element in the array starts with the given prefix.\nThe filter function array_filter\
    \ returns an array containing all the items that pass the test - in this case,\
    \ if the prefix is present in the array, the string is returned.\n<|/ a |>\n<|\
    \ a |>\nIn case you wanted to keep using explode(), you can do something like\
    \ this : \n<code>\n$arr = [];\n$array = explode(\" \", $string);\nforeach($array\
    \ as $key => $value){\n    if ($value == 'abc'){\n        $arr[] = $value;\n \
    \   }\n}\n\nprint_r($arr);\n</code>\n<|/ a dscore=1 tags=php,arrays,explode |>\n\
    <| c |>\nI don't think explode will work for OP's case, as it seems like the array\
    \ may contain more than one space\n<|/ c |>\n<| c |>\nNo, if you use explode it\
    \ will separate each word with spaces. I used space to demonstrate that the string\
    \ should only contain the desired words.\n<|/ c |>\n<| c |>\nYes it will, but\
    \ for that example you should have given explode(\",\", $string) where there can\
    \ be more spaces than just one in the string\n<|/ c |>\n<| c |>\nOh, I see, you\
    \ are right. I have updated the answer thanks for pointing that out.\n<|/ c |>\n\
    <| a dscore=1 |>\nYou can use array_filter to filter your array and use the callback\
    \ as an anonymous function. Inside this anonymous function you can check for the\
    \ first occurence of an element of your filter and then add this element to the\
    \ array if the occurence is found.\n<code>\n$string = '123 abc abc abc abc 123\
    \ abc abc 123 abc';\n$array = explode(\" \", $string);\n$filtered = array_filter($array,\
    \ function($value){\n    $first = array_shift(explode(\" \", $value));\n    return\
    \ in_array($first, \"abc\");\n});\n\nprint_r($filtered);\n</code>\n<|/ a tags=php,arrays,explode\
    \ |>\n<| a dscore=1 |>\n<code>\n$string = '123 abc abc abc abc 123 abc abc 123\
    \ abc';\n$array = explode(\" \", $string);\n$final = array_filter($array, function($val){\n\
    \    return strpos($val", "    foreach ($strings as $string) {\n        if (strpos($string,\
    \ $prefix) === 0) {\n            $result[] = $string;\n        }\n    }\n    return\
    \ $result;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThanks Kevin. I'm now\
    \ trying to understand what's going on in the foreach statement :)\n<|/ c |>\n\
    <| a |>\nI really like this answer here, but I needed one that worked recursively\
    \ on nested arrays (i.e. it also returns an array of the nested arrays so you\
    \ can iterate over them if you like).\nHere's my modified version:\n<code>\n$array_items\
    \ = array_filter(\n    array_map(\n        function($element) {\n            return\
    \ ($element instanceof Traversable) ? $element : array($element);\n        },\n\
    \        array_filter(\n            $array,\n            function($element) {\n\
    \                return (is_array($element) && is_array($element[0])) ? $element\
    \ : array($element);\n            }\n        )\n    ),\n    function($element)\
    \ {\n        return is_array($element);\n    }\n);\n</code>\nEDIT:\nAfter some\
    \ more thought, I've realized that this is probably not the most efficient way\
    \ to do this, but I figure it might be a useful reference for someone.\n<|/ a\
    \ tags=php,arrays dscore=2 |>\n<| a dscore=1 tags=php,arrays |>\nI think this\
    \ should do it :-)\n<code>", "  $output = array();\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $prefix) === 0) {\n      $output[] = $string;\n \
    \   }\n  }\n  return $output;\n}\n", "  $matches = array();\n  foreach ($strings\
    \ as $string) {\n    if (strncmp($prefix, $string, strlen($prefix)) == 0) {\n\
    \      $matches[] = $string;\n    }\n  }\n  return $matches;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nNice one! It does seem a bit overkill. Also, I believe the OP\
    \ wants to search by prefix (not just substring), so you might want to change\
    \ `strncmp($prefix, $string, strlen($prefix)) == 0` to `strncmp($string, $prefix,\
    \ strlen($prefix)) == 0`\n<|/ c |>\n<| c |>\n: You're absolutely right. `strncmp`\
    \ needs the \"needle\" to be the very same length as the haystack. In my defense,\
    \ I was thinking in terms of \"substring\" because of the example in the OP's\
    \ original question where it also matches starting at \"a\" and matching \"ab\"\
    , but \"needle\" is actually just \"prefix\" because of the way the question was\
    \ written.\n<|/ c |>\n<| c |>\nOk, thank you for clarifying the difference between\
    \ prefix and substring. I didn't realize `strncmp` could be used this way.\n<|/\
    \ c |>\n<| a dscore=2 |>\nMy solution was to use the PHP regex functions.  Here's\
    \ an example:\n<code>\n$search = \"a\";\n\n$arr = array(\"abc\", \"bcd\", \"cde\"\
    , \"array\");\n\n$results = (preg_grep(\"/^$search/\", $arr));\n</code>\nThe $results\
    \ array will contain the elements that start with $search.\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=1 tags=php,arrays |>\nYou can do it with array_filter() like\
    \ this:\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$array2\
    \ = array(\"a\", \"aaa\", \"ab\");\n$array = array_filter($array, function($var)\
    \ use ($array2){\n    return strpos($var, $array2) !== false;\n});\nprint_r($array);\n\
    </code>\n<|/ a |>\n<| c |>\nHm, this returns an empty array for me...\n<|/ c |>\n\
    <| c |>\nIt was just copy/paste error on my part, fixed now, it should be working\
    \ now.\n<|/ c |>\n<| c |>\nOk, your answer works now that I fixed the error. However\
    \ it's not quite what I was looking for. My question was intended to be more general,\
    \ and to not have to explicitly state the needle and the ", "    if (empty($strings))\
    \ {\n        return array();\n    }\n\n    $matched = array();\n    foreach ($strings\
    \ as $string) {\n        if (strlen($prefix) && substr($string, 0, strlen($prefix))\
    \ == $prefix) {\n            $matched[] = $string;\n        }\n    }\n\n    return\
    \ $matched;\n}\n</code>\n<|/ a tags=php,arrays dscore=2 |>\n<| c |>\nNot my vote,\
    \ but I like the answer. I'd use \"if (preg_match('/^'.$prefix.'/', $string))\
    \ { $matched[] = $string; }\" instead of \"if (strlen($prefix) && substr($string,\
    \ 0, strlen($prefix)) == $prefix) {\".\n<|/ c |>\n<| a dscore=2 tags=php,arrays\
    \ |>\nI would go for something like this. \n<code>\n$array = array(\"foo\", \"\
    bar\", \"baz\");\n$prefix = \"bar\";\n\n$matched = array();\nforeach ($array as\
    \ $value) {\n  if (substr($value, 0, strlen($prefix)) != $prefix) {\n    continue;\n\
    \  }\n  $matched[] = $value;\n}\n\nprint_r($matched);\n</code>\n<|/ a |>\n<| c\
    \ |>\nYour answer doesn't match your description of the requirements as well as\
    \ your code. `var_dump($matched);` outputs `array(1) { [0]=> string(3) \"foo\"\
    \ }` because your code is matching `bar` and not `barfoo`\n<|/ c |>\n<| a |>\n\
    This works:\n<code>\n$array = array(\"foo\", \"bar\", \"baz\");\n$prefix = \"\
    bar\";\n\n$matched = array();\nforeach ($array as $value) {\n    if (strlen($prefix)\
    \ && !strpos($value, $prefix)) {\n        continue;\n    }\n    $matched[] = $value;\n\
    }\n\nvar_dump($matched);\n</code>\n<|/ a tags=php,arrays dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array(\"foo\", \"bar\", \"baz\");\n$prefix = \"bar\";\n\
    \n$matched = array();\nforeach ($array as $value) {\n    if (substr($value, 0,\
    \ strlen($prefix)) == $prefix) {\n        $matched[] = $value;\n    }\n}\n\nvar_dump($matched);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays dscore=1 |>\nThis should\
    \ do it:\n<code>", "    if (empty($strings)) return array();\n    $results = array();\n\
    \    foreach ($strings as $key => $value) {\n        if (strpos($value, $prefix)\
    \ === 0) {\n            $results[] = $value;\n        }\n    }\n    return $results;\n\
    }\n", "  if (is_null($prefix)) {\n    return $strings;\n  }\n\n  $result = array();\n\
    \  foreach ($strings as $s) {\n    if (strpos($s, $prefix) === 0) {\n      $result[]\
    \ = $s;\n    }\n  }\n\n  return $result;\n}\n</code>\n<|/ a tags=php,codeigniter,arrays\
    \ dscore=1 |>\n<| c |>\nHi there, thanks for your answer. I've tried out your\
    \ solution and I've discovered that it's throwing an error for me when I try to\
    \ filter an input array of strings. Do you know why?\n<|/ c |>\n<| c |>\nwhat\
    \ error are you getting?  What is the value of the `$string` parameter to the\
    \ `filter_by_prefix()` function?\n<|/ c |>\n<| c |>\nIt just says **Message: Use\
    \ of undefined constant FILTER_SANITIZE_STRING - assumed 'FILTER_SANITIZE_STRING'**\
    \ and **Message: Use of undefined constant FILTER_SANITIZE_STRING - assumed 'FILTER_SANITIZE_STRING'**\n\
    <|/ c |>\n<| c |>\nAh yeah, I forgot to `define()` the constant -- that has been\
    \ fixed now\n<|/ c |>\n<| c |>\nHi there, sorry for the late response. The function\
    \ now seems to be working fine for me. The only problem I'm having now is that\
    \ the array keys are getting lost when I use the function and I'm trying to get\
    \ them back. Do you have any idea how I could do that? I've posted an example\
    \ of the array I'm having trouble with in my original post. Thanks!\n<|/ c |>\n\
    <| a dscore=0 |>\nThe array_search function returns an integer if the array key\
    \ exists. In your case it will return an integer instead of a boolean.\nTry using\
    \ array_key_exists function instead:\n<code>\n$key_exists = array_key_exists($string,\
    \ $array);\nif ($key_exists)\n{\n  echo \"The key $string exists in $array\";\n\
    }\n</code>\n<|/ a tags=php,codeigniter,arrays |>\n<| c |>\nHi, thanks for your\
    \ answer. I've tried your code and I'm still getting an error when I try to filter\
    \ an input array of strings. Do you know why this is happening? Thanks!\n<|/ c\
    \ |>\n<| a dscore=0 tags=php,codeigniter,arrays |>\nYou are trying to access an\
    \ array index (integer) when a string is expected.\n<code>\n$key = array_search('abc',\
    \ $array);\n$string = 'abc';\n", "  $matches = array();\n  foreach ($strings as\
    \ $string) {\n    if (substr($string, 0, strlen($prefix)) == $prefix) {\n    \
    \  $matches[] = $string;\n    }\n  }\n  return $matches;\n}", "    if (!$strings)\
    \ {\n        return array();\n    }\n\n    $result = [];\n    foreach ($strings\
    \ as $string) {\n        if (substr($string, 0, strlen($prefix)) == $prefix) {\n\
    \            $result[] = $string;\n        }\n    }\n    return $result;\n}\n",
  "  if (strlen($prefix) > 0 && substr($prefix, 0, 1) !== false) {\n    $prefix =\
    \ '0' . $prefix;\n  }\n  $result = [];\n  foreach ($strings as $string) {\n  \
    \  if (strpos($string, $prefix) === 0) {\n      $result[] = $string;\n    }\n\
    \  }\n  return $result;\n}\n", "  $filtered = array();\n  foreach ($strings as\
    \ $s) {\n    if (strncmp($prefix, $s, 0) === 0) {\n      $filtered[] = $s;\n \
    \   }\n  }\n  return $filtered;\n}", "  $prefix = strtolower($prefix);\n  if (!isset($prefix[0]))\
    \ {\n    return array();\n  }\n  return array_filter(\n    $strings,\n    function\
    \ ($value) use ($prefix) {\n      return strpos($value, $prefix) === 0;\n    }\n\
    \  );\n}\n</code>\n<|/ a dscore=3 |>\n<| a |>\n<code>\n$array = [];\nforeach($array2\
    \ as $key => $value) {\n    if (strpos($value, $needle) === 0) {\n        $array[]\
    \ = $array2[$key];\n    }\n}\n</code>\n<|/ a tags=arrays,php,string dscore=2 |>\n\
    <| c |>\nI agree that it's easier to understand this way. But the efficiency is\
    \ different. Anyway, I've found that `array_filter()` is more efficient than `foreach`.\n\
    <|/ c |>\n<| c |>\nI haven't tested it but i think foreach has a better performance\
    \ as array_filter doesn't need to check if the element exists in the array.\n\
    <|/ c |>\n<| a tags=arrays,php,string |>\nThis works with PHP 5.6+:\n<code>\n\
    $array2 = array_filter(\n  array_map(\n    function($item) {\n      return substr($item,\
    \ 0, strpos($item, $needle));\n    },\n    $array\n  ),\n  function($item) {\n\
    \    return false !== strpos($item, $needle);\n  }\n);\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 tags=arrays,php,string |>\n<code>", "  foreach ($strings as\
    \ $string) {\n    if (strpos($string, $prefix) === 0) {\n      unset($strings[$i]);\n\
    \    }\n  }\n  return $strings;\n}\n", "  if (is_null($prefix)) {\n    return\
    \ $strings;\n  }\n\n  return array_filter(\n    $strings,\n    function ($string)\
    \ use ($prefix) {\n      return 0 === strncmp($prefix, $string, strlen($prefix));\n\
    \    }\n  );\n}\n\n/**\n * Revert an array order to the given array.\n *\n * @param\
    \ array $array Array of strings to be reversed.\n *\n * @return array\n */", " \
    \ $return = [];\n\n  foreach ($strings as $string) {\n    if (strncmp($prefix,\
    \ $string, strlen($prefix)) == 0) {\n      $return[] = $string;\n    }\n  }\n\n\
    \  return $return;\n}", "    return array_filter($strings, function($value) use\
    \ ($prefix) {\n        return strpos($value, $prefix) === 0;\n    });\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nYou forgot to add the $prefix var in the use part.\n\
    <|/ c |>\n<| c |>\nI wrote a more versatile function using array_filter. Check\
    \ the answer I just posted.\n<|/ c |>\n<| a dscore=4 tags=filter,arrays,php,multidimensional-array,search\
    \ |>\n<code>", "  return array_filter($strings, function($s) use ($prefix) {\n\
    \    return strpos($s, $prefix) === 0;\n  });\n}\n", "  $results = array();\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n\
    \      $results[] = $string;\n    }\n  }\n  return $results;\n}\n", "  // Make\
    \ sure the prefix is lowercase (if it's uppercase, we want to match it\n  // anyway,\
    \ and we don't want duplicates)\n  $prefix = strtolower($prefix);\n  $filtered\
    \ = array();\n\n  // Build a lookup table to quickly check whether a string starts\
    \ with an\n  // existing prefix. We could use a hashmap, but since we only have\
    \ a few\n  // strings to compare against, this should be faster.\n  $prefix_len\
    \ =\n    strlen($prefix) - strlen($prefix{0}); $prefix_len = strlen($prefix_len);\n\
    \  $lookup = str_pad('', $prefix_len, '0');\n  for ($i = 0; $i < $prefix_len;\
    \ ++$i) {\n    $lookup[$prefix{$i}] = $i;\n  }\n\n  // Loop over the strings and\
    \ add them to the filtered array if they\n  // match the prefix string.\n  foreach\
    \ ($strings as $string) {\n    if (strlen($string) == 0) { continue; }\n    if\
    \ (strpos($string, $prefix) !== 0) { continue; }\n    $filtered[] = $string;\n\
    \  }\n\n  return $filtered;\n}", "  $strings = array_filter($strings, function($s)\
    \ use($prefix) {\n    return substr($s, 0, strlen($prefix)) == $prefix;\n  });\n\
    \  return $strings;\n}\n", "  return array_filter($strings, function($v) use ($prefix)\
    \ {\n    return strpos($v, $prefix) === 0;\n  });\n}\n", "    if (!is_array($strings)\
    \ || empty($strings)) {\n        return array();\n    }\n    $out = array();\n\
    \    foreach ($strings as $string) {\n        if (strpos($string, $prefix) ===\
    \ 0) {\n            $out[] = $string;\n        }\n    }\n    return $out;\n}",
  "  $filtered = array();\n  foreach ($strings as $string) {\n    if (substr($string,\
    \ 0, strlen($prefix)) == $prefix) {\n      $filtered[] = $string;\n    }\n  }\n\
    \  return $filtered;\n}\n", "  if (empty($strings)) return array();\n  if (empty($prefix))\
    \ return $strings;\n\n  return array_filter(\n    $strings,\n    function ($string)\
    \ use ($prefix) {\n      return substr($string, 0, strlen($prefix)) === $prefix;\n\
    \    }\n  );\n}\n\n/**\n * Gets the first element of a multi-dimensional array\
    \ that has a particular key.\n *\n * @param  array  $array\n * @param  string\
    \ $key\n * @return mixed\n */"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
