language: php
name: HumanEval_152_compare
results:
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n  $result = [];\n  foreach($guess as $key => $value) {\n    if ($game[$key]\
    \ != $value) {\n      $result[] = $game[$key] - $value;\n    } else {\n      $result[]\
    \ = 0;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n  $scores = array_count_values($game);\n  \n  $result = array();\n\
    \  foreach($guess as $key => $val) {\n    $result[$key] = 0;\n    \n    $diff\
    \ = abs($val - $scores[$val]);\n    if ($val == $scores[$val])\n      $result[$key]\
    \ = 0;\n    else\n      $result[$key] = $diff;\n  }\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key -2 in /tmp/tmp9k684a__.php on line 21\n\n\
    Warning: Undefined array key -2 in /tmp/tmp9k684a__.php on line 22\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp9k684a__.php:34\nStack trace:\n\
    #0 /tmp/tmp9k684a__.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp9k684a__.php\
    \ on line 34\n"
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n\t$guess = array_flip($guess);\n\t$score = array_flip($game);\n\t\
    $distance = [];\n\n\tforeach ($score as $index => $value) {\n\t\t$distance[$index]\
    \ = abs($guess[$index] - $value);\n\t}\n\n\treturn $distance;\n}\n\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 5 in /tmp/tmptnm6rpu8.php on line 20\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmptnm6rpu8.php:31\nStack\
    \ trace:\n#0 /tmp/tmptnm6rpu8.php(37): test()\n#1 {main}\n  thrown in /tmp/tmptnm6rpu8.php\
    \ on line 31\n"
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    // Your code goes here\n    $score = 0;\n    foreach($game as\
    \ $index => $value) {\n        if ($guess == $value) {\n            $score +=\
    \ 0;\n        } elseif ($guess < $value) {\n            $score += abs($guess -\
    \ $value);\n        } else {\n            $score += abs($value - $guess);\n  \
    \      }\n    }\n    return $score;\n}\n</cell>\n<cell>\n%%bash\n\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpn923hdlc.php
    on line 28

    '
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    // Your code here\n    \n    // the idea is to loop through every\
    \ guess and check if it is present in each of the game score\n    foreach($guess\
    \ as $key => $value) {\n        if (!array_key_exists($key, $game)) {\n      \
    \      return array($game[$key], 0);\n        }\n    }\n    \n    // if every\
    \ guess is present in one of the games, then the result is 0\n    return array(0,\
    \ 0);\n}\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2,\
    \ 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsn5i5ff1.php:32\n\
    Stack trace:\n#0 /tmp/tmpsn5i5ff1.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpsn5i5ff1.php\
    \ on line 32\n"
  timestamp: 1659979274
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    return array_map(function ($score, $guess) {\n        return\
    \ abs($guess - $score);\n    }, $game, $guess);\n}\n\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $i = 0;\n    $score = 0;\n    foreach($guess as $j){\n      \
    \  $score += $game[$i];\n        if($game[$i] == $j){\n            $i++;\n   \
    \     }\n    }\n    return $score;\n}\n\nfunction candidate(...$args) {\n    return\
    \ compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbd_httrr.php:31\n\
    Stack trace:\n#0 /tmp/tmpbd_httrr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpbd_httrr.php\
    \ on line 31\n"
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    // the actual distance calculation here\n    $results = array();\n\
    \    $diff = array();\n    $correct_guesses = 0;\n    foreach($game as $i => $game_value){\n\
    \        if(isset($guess[$i])){\n            $results[$i] = abs($game_value-$guess[$i]);\n\
    \            if($results[$i] === 0){\n                $correct_guesses++;\n  \
    \          }\n        }\n        else{\n            $results[$i] = $game_value;\n\
    \        }\n    }\n    if($correct_guesses === count($guess)){\n        return\
    \ array();\n    }\n    for($i = 0; $i < count($results); $i++){\n        $diff[$i]\
    \ = $results[$i]-$correct_guesses;\n    }\n    return $diff;\n}\n\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu5p2rfx5.php:44\n\
    Stack trace:\n#0 /tmp/tmpu5p2rfx5.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpu5p2rfx5.php\
    \ on line 44\n"
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $game_copy = array_fill_keys(array_keys($game), 0);\n    $guess_copy\
    \ = array_fill_keys(array_keys($guess), 0);\n    \n    $score = 0;\n    \n   \
    \ foreach ($guess as $index => $guessValue) {\n        if ($guessValue !== $game[$index])\
    \ {\n            $game[$index] = 0;\n            $guess[$index] = 0;\n       \
    \     $score++;\n        }\n    }\n    \n    if ($score == count($guess)) {\n\
    \        return array(count($guess), 0);\n    }\n    \n    foreach ($game as $index\
    \ => $gameValue) {\n        $guess_copy[$index] = $gameValue;\n    }\n    \n \
    \   $max_score = 0;\n    $max_score = max($max_score, $score);\n    $max_score\
    \ = 0;\n    \n    for ($i = 0; $i < count($guess); $i++) {\n        $guess_copy[$i]\
    \ = abs($guess_copy[$i] - $score);\n    }\n    \n    for ($i = 0; $i < count($guess);\
    \ $i++) {\n        if ($guess_copy[$i] == 0) {\n            continue;\n      \
    \  }\n        \n        $guess_copy[$i] = $max_score;\n        $max_score = max($max_score,\
    \ $guess_copy[$i]);\n    }\n    \n    return $guess_copy;\n}\n\n$game = array(0,1,2,3,4,5);\n\
    $guess = array(1,0,0,3,3,0);\n\n$result = compare($game, $guess);\n\nvar_dump($result);\n\
    </code>\n<|/ a |>\n<| c |>\nThe first line of the function should read: $game_copy\
    \ = array_fill_keys(array_keys($game), 0);\n<|/ c |>\n<| c |>\nYeah, sorry about\
    \ that. It was one of my mistakes.\n<|/ c |>\n<| c |>\nAm I right in thinking\
    \ the result of this code should be an array of the same length as the 'guess'\
    \ array, where each value is the result of the 'compare' function?\n<|/ c |>\n\
    <| c |>\nI believe you were right. I didn't think it was going to be too hard\
    \ to translate this to C. Thanks!\n<|/ c |>\n<| c |>\nI added some comments to\
    \ help you understand what was going on and how I got it. Not sure why you're\
    \ not using an `if ($game[$index] === $guessValue)` statement to do the comparison.\
    \ Also, I'm not really sure what the `continue` statement is doing in the loop.\
    \ Are you trying to make sure that the value being checked is equal to zero?\n\
    <|/ c |>\n<| a tags=php,algorithm |>\nA simple approach would be to convert the\
    \ arrays into strings (\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp8naaaknd.php
    on line 62

    '
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    \n}\n\nclass Person {\n    // Constructor\n    public function\
    \ __construct($score) {\n        $this->score = $score;\n    }\n    \n    // Accessor\
    \ method for a private variable\n    public function __get($name) {\n        $this->$name;\n\
    \    }\n    \n    // Accessor method for a private variable\n    public function\
    \ __set($name, $value) {\n        $this->$name;\n    }\n    \n    // Accessor\
    \ method for a private variable\n    public function __isset($name) {\n      \
    \  $this->$name;\n    }\n    \n    // Accessor method for a private variable\n\
    \    public function __unset($name) {\n        $this->$name;\n    }\n    \n  \
    \  public function getScore() {\n        return $this->score;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_9maaynl.php:54\n\
    Stack trace:\n#0 /tmp/tmp_9maaynl.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp_9maaynl.php\
    \ on line 54\n"
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    if (count($guess) != count($game)) {\n        return array();\n\
    \    }\n    $correct = 0;\n    $guesses = array();\n    foreach ($game as $index\
    \ => $score) {\n        if ($score == $guess[$index]) {\n            $correct++;\n\
    \        } else {\n            $guesses[$index] = abs($score - $guess[$index]);\n\
    \        }\n    }\n    return $guesses;\n}\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a dscore=0 |>\nYou can loop over each element of $guesses and compare it with\
    \ $guess, if the value is not equal, return $guesses, else return $guess + 1 because\
    \ a user correctly guessed the answer and increment the count of each value of\
    \ $guesses by the one which is not equal to the guess. \nTry this:\n<code>\n<?php\n\
    \n$guesses = [\n    1 => 5,\n    2 => 8,\n    3 => 7,\n    4 => 8,\n    5 => 5,\n\
    \    6 => 9,\n    7 => 8,\n    8 => 7,\n    9 => 6,\n    10 => 4,\n];\n\n$guess\
    \ = [\n    1 => 5,\n    2 => 4,\n    3 => 1,\n    4 => 5,\n    5 => 2,\n    6\
    \ => 6,\n    7 => 2,\n    8 => 6,\n    9 => 5,\n    10 => 4,\n];\n\n$correct_count\
    \ = array_sum($guesses);\n$guesses_count = count($guesses);\n\n$result = array();\n\
    for($i = 0; $i < $guesses_count; $i++) {\n    if(!isset($guess[$i])) continue;\n\
    \n    if($guess[$i] != $guesses[$i]) \n    {\n        $result[$i] = abs($guesses[$i]\
    \ - $guess[$i]);\n    } else {\n        $result[$i] = 0;\n    }\n}\n\nprint_r($result);\n\
    </code>\nThis would output: \n<code>\nArray\n(\n    [0] => 0\n    [1] => 4\n \
    \   [2] => 0\n    [3] => 0\n    [4] => 0\n    [5] => 2\n    [6] => 0\n    [7]\
    \ => 0\n    [8] => 0\n    [9] => 0\n    [10] => 0\n)\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=0 tags=php,arrays |>\nI have tried to create another function\
    \ for your problem which will return you the score if the user has guessed correctly.\
    \ Try the following code:\n<code>\nfunction candidate(...$args) {\n    return\
    \ compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpzc8_cjl0.php
    on line 29

    '
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    // the code below is just an example\n    $differences = array();\n\
    \    foreach($guess as $index => $guess) {\n        // the code below is just\
    \ an example\n        $differences[$index] = 0;\n    }\n    // the code below\
    \ is just an example\n    foreach($game as $index => $score) {\n        // the\
    \ code below is just an example\n        if($guess == $score) {\n            $differences[$index]\
    \ = 0;\n        } else {\n            $differences[$index] = abs($guess - $score);\n\
    \        }\n    }\n    // the code below is just an example\n    return $differences;\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\nYou can do this\
    \ by checking the arrays with array_diff(), it gives you an array with the differences\
    \ between the two arrays. Then you can just count the number of differences (it\
    \ can be 0 if there are none). So your code should look something like this:\n\
    <code>\n$game_array = get_array_from_database();\n$guess_array = get_array_from_user();\n\
    \n$diff = array_diff($game_array, $guess_array);\nif (count($diff) > 0)\n    return\
    \ -1;\n\nreturn 0;\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\nYou could\
    \ use array_diff function to get the differences.\n<code>\n$differences = array_diff($game,\
    \ $guess);\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n<?php\n\
    function candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpgwodu522.php
    on line 33

    '
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $score = 0;\n    $length = count($game);\n    $guesses = array();\n\
    \    $guesses[] = $guess;\n    $correct = 0;\n    for ($i = 0; $i < $length; $i++)\
    \ {\n        $score = $score + ($game[$i] - $guess[$i]);\n    }\n    for($i =\
    \ 0; $i < $length; $i++) {\n        $score = $score - ($guess[$i] - $game[$i]);\n\
    \        if ($score < 0) {\n            $correct = $correct-1;\n            $score\
    \ = $score * -1;\n        }\n    }\n    return $guesses;\n}\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkgxviwtr.php:37\n\
    Stack trace:\n#0 /tmp/tmpkgxviwtr.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpkgxviwtr.php\
    \ on line 37\n"
  timestamp: 1659979274
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    if (count($guess) != count($game)) return array();\n    $result\
    \ = array();\n    foreach ($guess as $k => $v) {\n        if ($game[$k] == $v)\
    \ $result[] = 0;\n        else $result[] = abs($v - $game[$k]);\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    return $game;\n}\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div\
    \ class=\"cell border-box-sizing text_cell rendered\"><div class=\"prompt input_prompt\"\
    >\n</div><div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-sizing\
    \ rendered_html\">\n<h3 id=\"Question-2-2\">Question 2<a class=\"anchor-link\"\
    \ href=\"#Question-2-2\">&#182;</a></h3><p>In the function <code>compare()</code>,\
    \ return an array of the same length denoting how far off each guess was. If they\
    \ have guessed correctly, the value is 0, and if not, the value is the absolute\
    \ difference between the guess and the score.</p>\n<p>Hint: use <code>array_search()</code>\
    \ to find the matching score for each guess in <code>$game</code>.</p>\n\n</div>\n\
    </div>\n</div>\n<div class=\"cell border-box-sizing code_cell rendered\">\n<div\
    \ class=\"input\">\n<div class=\"prompt input_prompt\">In&nbsp;[25]:</div>\n<div\
    \ class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight\
    \ hl-java\"><pre><span></span><span class=\"kn\">import</span> <span class=\"\
    nn\">java.io.*</span><span class=\"p\">;</span>\n<span class=\"kn\">import</span>\
    \ <span class=\"nn\">java.util.*</span><span class=\"p\">;</span>\n<span class=\"\
    kn\">import</span> <span class=\"nn\">java.lang.*</span><span class=\"p\">;</span>\n\
    \n<span class=\"n\">public</span> <span class=\"n\">static</span> <span class=\"\
    n\">int</span> <span class=\"n\">compare</span><span class=\"p\">(</span><span\
    \ class=\"n\">int</span> <span class=\"n\">game</span><span class=\"p\">[</span><span\
    \ class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">int</span>\
    \ <span class=\"n\">guess</span><span class=\"p\">[</span><span class=\"mi\">1</span><span\
    \ class=\"p\">])</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">int</span>\
    \ <span class=\"n\">minGuesses</span> <span class=\"o\">=</span> <span class=\"\
    mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span\
    \ class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">guessCount</span>\
    \ <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\
    \ <span class=\"n\">guessCount</span> <span class=\"o\">&lt;</span> <span class=\"\
    n\">minGuesses</span><span class=\"p\">;</span> <span class=\"n\">guessCount</span><span\
    \ class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\
    \        <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"\
    o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"\
    p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span\
    \ class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">guessCount</span>\
    \ <span class=\"o\">&amp;&amp;</span> <span class=\"n\">guess</span><span class=\"\
    p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"\
    mi\">1</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"\
    n\">game</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"\
    p\">])</span> <span class=\"p\">{</span> <span class=\"n\">i</span><span class=\"\
    o\">++</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n        <span\
    \ class=\"n\">guessCount</span><span class=\"o\">--</span><span class=\"p\">;</span>\n\
    \        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"\
    n\">i</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"\
    mi\">1</span><span class=\"p\">)</span> <span class=\"n\">minGuesses</span><span\
    \ class=\"o\">--</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\
    \    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\"\
    >int</span> <span class=\"n\">guessCount</span> <span class=\"o\">=</span> <span\
    \ class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">guessCount</span>\
    \ <span class=\"o\">&lt;</span> <span class=\"n\">minGuesses</span><span class=\"\
    p\">;</span> <span class=\"n\">guessCount</span><span class=\"o\">++</span><span\
    \ class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\"\
    >int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"\
    o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span\
    \ class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">i</span>\
    \ <span class=\"o\">&lt;</span> <span class=\"n\">guessCount</span> <span class=\"\
    o\">&amp;&amp;</span> <span class=\"n\">guess</span><span class=\"p\">[</span><span\
    \ class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span\
    \ class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">game\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp7132os6x.php
    on line 17

    '
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = array();\n    $correct = false;\n    foreach ($guess\
    \ as $index => $guessScore) {\n        $gameScore = $game[$index];\n        $result[$index]\
    \ = ($correct) ? $guessScore : $gameScore - $guessScore;\n        $correct = ($gameScore\
    \ == $guessScore);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2h7g4zmv.php:30\n\
    Stack trace:\n#0 /tmp/tmp2h7g4zmv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2h7g4zmv.php\
    \ on line 30\n"
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    // Write your code here\n    $arr=$game;\n    $arr1=$guess;\n\
    \    $comp=array();\n    for($i=0;$i<count($game);$i++){\n        $comp[$i]=0;\n\
    \    }\n    for($i=0;$i<count($game);$i++){\n        if($arr[$i]==$arr1[$i]){\n\
    \            $comp[$i]=1;\n        }else{\n            if($arr[$i]>$arr1[$i]){\n\
    \                $comp[$i]=$arr[$i]-$arr1[$i];\n            }else{\n         \
    \       $comp[$i]=$arr1[$i]-$arr[$i];\n            }\n        }\n    }\n    return\
    \ $comp;\n}\n</code>\n<|/ a |>\n<| c |>\nI see your answer... but this was actually\
    \ a challenge question from Codecademy's PHP tutorials and I guess they haven't\
    \ had the time to fix their bugs.\n<|/ c |>\n<| a tags=php |>\nThis could be achieved\
    \ with just two for loops, checking and calculating the differences.\n<code>\n\
    function candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpnd_he1lc.php
    on line 35

    '
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $total = 0;\n    for ($i = 0; $i < count($game); $i++) {\n  \
    \      if ($game[$i] == $guess[$i]) { // they win\n            $total += 0;\n\
    \        } else { // they lose\n            $total += abs($guess[$i] - $game[$i]);\n\
    \        }\n    }\n    return array($total);\n}\n\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbthy1a02.php:31\n\
    Stack trace:\n#0 /tmp/tmpbthy1a02.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpbthy1a02.php\
    \ on line 31\n"
  timestamp: 1659979274
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $scoreDiff = array();\n    for ($i = 0, $size = count($game);\
    \ $i < $size; $i++) {\n        if ($game[$i] == $guess[$i]) {\n            $scoreDiff[$i]\
    \ = 0;\n        } elseif ($game[$i] < $guess[$i]) {\n            $scoreDiff[$i]\
    \ = $game[$i] - $guess[$i];\n        } else {\n            $scoreDiff[$i] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $scoreDiff;\n}\n\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979274
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = array();\n    $length = count($guess);\n    for($i\
    \ = 0; $i < $length; $i++) {\n        $result[$i] = abs($game[$i] - $guess[$i]);\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n  $total = 0;\n  for ($i = 0; $i < count($game); $i++) {\n    $guesses\
    \ = $guess[$i];\n    $total = $game[$i] - $guesses;\n    if ($total < 0 || $total\
    \ == 0) {\n      return array($total);\n    }\n  }\n  return $game;\n}\n\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd_smlrgg.php:31\n\
    Stack trace:\n#0 /tmp/tmpd_smlrgg.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpd_smlrgg.php\
    \ on line 31\n"
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n  $n = count($guess);\n  $correct = 0;\n  $off = array();\n  for\
    \ ($i = 0; $i < $n; $i++) {\n    if ($game[$i] == $guess[$i]) {\n      $correct++;\n\
    \    } else {\n      $off[$i] = (abs($game[$i] - $guess[$i]));\n    }\n  }\n \
    \ return $off;\n}\n</code>\n<|/ a tags=algorithm,php,compare,arrays |>\n<| c |>\n\
    Thanks, this is what I needed.\n<|/ c |>\n<| a tags=algorithm,php,compare,arrays\
    \ |>\nUsing array_diff_recursive\n<code>\n$a = array(1,2,3,4,5,6);\n$b = array(1,2,4,5,6,7);\n\
    $result = array_diff_recursive($a, $b);\n\n$result1 = array_map(function($x){return\
    \ $x==$a?0:abs($x-$b);}, $result);\n\necho '<pre>';\nprint_r($result);\nprint_r($result1);\n\
    echo '</pre>';\n</code>\nResult\n<code>\nArray\n(\n    [0] => 5\n    [1] => 6\n\
    \    [2] => 7\n    [3] => 8\n    [4] => 9\n)\nArray\n(\n    [0] => 1\n    [1]\
    \ => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n    [6] => 7\n\
    \    [7] => 8\n    [8] => 9\n)\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks, but\
    \ I needed this to be done in php :)\n<|/ c |>\n<| a |>\n<code>\n<?php\n\n$a =\
    \ array(1, 2, 3, 4, 5, 6, 7);\n$b = array(1, 2, 4, 6, 8, 9);\n\n$c = array_diff($a,\
    \ $b);\n\n$d = array_map(function($item) use ($a) {\n    return $item == $a ?\
    \ 0 : abs($item - $b);\n}, $c);\n\nprint_r($d);\n</code>\n<|/ a dscore=1 tags=algorithm,php,compare,arrays\
    \ |>\n<| a tags=algorithm,php,compare,arrays |>\n<code>\n<?php\n\n$a = array(1,2,3,4,5,6);\n\
    $b = array(1,2,4,5,6,7);\n$result = array_diff_recursive($a, $b);\n$result1 =\
    \ array_map(function($x){return $x==$a?0:abs($x-$b);}, $result);\n\necho '<pre>';\n\
    print_r($result);\nprint_r($result1);\necho '</pre>';\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpk4sw_bbi.php
    on line 27

    '
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = [];\n\n    foreach ($game as $key => $value) {\n  \
    \      // Check if the guessed value matches the actual score.\n        $result[$key]\
    \ = abs($guess - $value);\n    }\n\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: array - int\
    \ in /tmp/tmpalkhy24m.php:19\nStack trace:\n#0 /tmp/tmpalkhy24m.php(26): compare(Array,\
    \ Array)\n#1 /tmp/tmpalkhy24m.php(30): candidate(Array, Array)\n#2 /tmp/tmpalkhy24m.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpalkhy24m.php on line 19\n"
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n\t\n\t// Your code here.\n\t\n}\n\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbizj8vrq.php:25\n\
    Stack trace:\n#0 /tmp/tmpbizj8vrq.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpbizj8vrq.php\
    \ on line 25\n"
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $gameLength = count($game);\n    $guessLength = count($guess);\n\
    \    $bestScore = $guess[0];\n    $bestDiff = 0;\n    for ($i = 1; $i < $gameLength;\
    \ $i++) {\n        if ($game[$i] != $guess[$i]) {\n            $scoreDiff = $game[$i]\
    \ - $guess[$i];\n            if ($bestScore == $game[$i]) {\n                $bestScore\
    \ = $game[$i];\n                $bestDiff = $scoreDiff;\n            } else {\n\
    \                $bestScore = $bestScore;\n                $bestDiff = abs($scoreDiff);\n\
    \            }\n        }\n    }\n    return array($bestDiff, $bestScore);\n}\n\
    function candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzbb7htrz.php:38\n\
    Stack trace:\n#0 /tmp/tmpzbb7htrz.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpzbb7htrz.php\
    \ on line 38\n"
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $gameLength = count($game);\n    $guessLength = count($guess);\n\
    \    $diff = array();\n    if ($gameLength != $guessLength) {\n        throw new\
    \ Exception(\"Not enough guesses given\");\n    }\n    for ($i = 0; $i < $gameLength;\
    \ $i++) {\n        if ($game[$i] != $guess[$i]) {\n            $diff[$i] = 0;\n\
    \        } else {\n            $diff[$i] = $game[$i];\n        }\n    }\n    return\
    \ $diff;\n}\n\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph5bh6crj.php:36\n\
    Stack trace:\n#0 /tmp/tmph5bh6crj.php(42): test()\n#1 {main}\n  thrown in /tmp/tmph5bh6crj.php\
    \ on line 36\n"
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    // Your code here\n    for ($i=0; $i < count($game); $i++) {\n\
    \        $correct = 0;\n        $game[$i];\n        for ($j=0; $j < count($guess);\
    \ $j++) {\n            if ($game[$i] === $guess[$j]) {\n                $correct++;\n\
    \            }\n        }\n        if ($correct == count($guess)) {\n        \
    \    $result[] = 0;\n        }\n        else {\n            $result[] = abs($guess[$i]\
    \ - $game[$i]);\n        }\n    }\n    return $result;\n}\n</code>\n<|/ a tags=algorithm,php\
    \ |>\n<| c |>\nThanks, this is a great answer, but the code is still incorrect\
    \ (It still gives me the same output).\n<|/ c |>\n<| c |>\nYes, it works when\
    \ comparing 2 numbers but I cannot find a way to make it work with a bunch of\
    \ numbers and a bunch of guesses.\n<|/ c |>\n<| c |>\n: See my edit. I think this\
    \ is what you're looking for.\n<|/ c |>\n<| c |>\nThanks so much, this is exactly\
    \ what I was looking for. Is there a way to make it run faster even for large\
    \ lists?\n<|/ c |>\n<| c |>\n: You'll have to test with large lists. It should\
    \ be pretty fast. If you're talking about large lists of numbers and large lists\
    \ of guesses, it might still be reasonable. Just make sure you don't run out of\
    \ memory before it finishes running. Your best bet is to run it on a machine with\
    \ a lot more than enough RAM.\n<|/ c |>\n<| a dscore=0 |>\nHere's my version of\
    \ this problem in Java and Python (because I prefer them; I haven't tested the\
    \ performance of this solution on real data). I'm assuming you can easily adapt\
    \ this to PHP code.\n<code>\nimport java.util.ArrayList;\n\npublic class GuessTheNumber{\n\
    \    public static void main(String args[]){\n        ArrayList<Integer> numbers\
    \ = new ArrayList<Integer>();\n        numbers.add(1);\n        numbers.add(2);\n\
    \        numbers.add(3);\n        numbers.add(4);\n        numbers.add(5);\n \
    \       numbers.add(6);\n        numbers.add(7);\n        numbers.add(8);\n  \
    \      numbers.add(9);\n\n        ArrayList<Integer> guesses = new ArrayList<Integer>();\n\
    \        guesses.add(3);\n        guesses.add(4);\n        guesses.add(5);\n \
    \       guesses.add(7);\n        guesses.add(8);\n\n        System.out.println(compare(numbers,guesses));\n\
    \    }\n\n    public static ArrayList<Integer> compare(ArrayList<Integer> numbers,\
    \ ArrayList<Integer> guesses){\n        ArrayList<Integer\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpqfc63iqt.php
    on line 33

    '
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $score  = count(array_filter($game));\n    $guesses = count($guess);\n\
    \    $max    = count($game);\n    $result  = array();\n    $scoreDiff = 0;\n \
    \   \n    for ($i = 0; $i < $guesses; $i++) {\n        \n        if (array_search($guess[$i],\
    \ $game) !== false) {\n            $result[$i] = $score;\n        } else {\n \
    \           $result[$i] = abs($guess[$i] - $score);\n        }\n    }\n\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpftz6w3ze.php:37\n\
    Stack trace:\n#0 /tmp/tmpftz6w3ze.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpftz6w3ze.php\
    \ on line 37\n"
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    // the game array is sorted\n    // so take the first and last\
    \ values and then use that as the starting and ending values\n    // this gives\
    \ us a score of -1 if the user guess is too high and +1 if the user guess is too\
    \ low\n    $low = $game[0]; $high = $game[count($game) - 1];\n    $difference\
    \ = 0;\n    \n    // loop through the guess array and check each guess against\
    \ the game array\n    // and keep track of the difference between the guess and\
    \ the game \n    // if the difference is negative, that means that the guess is\
    \ too high\n    // if the difference is positive, that means that the guess is\
    \ too low\n    for($i = 0; $i < count($guess); $i++) {\n        // use the difference\
    \ of the guess and the game to determine what the score would be if the guess\
    \ was correct\n        // if the difference is 0, that means that the guess was\
    \ correct\n        // if the difference is negative, that means that the guess\
    \ was too high\n        // if the difference is positive, that means that the\
    \ guess was too low\n        if($guess[$i] == $game[$i]) {\n            $difference\
    \ = 0;\n        } else {\n            $difference = $guess[$i] - $game[$i];\n\
    \        }\n        // if the difference is negative then the guess is too high\n\
    \        // otherwise the guess is too low\n        if($difference < 0) {\n  \
    \          $high = $guess[$i];\n        } else {\n            $low = $guess[$i];\n\
    \        }\n    }\n    // if the length of the guess array is odd, then the last\
    \ guess is the guess\n    // otherwise the guess is too low\n    if(count($guess)\
    \ % 2 == 1) {\n        // if the guess is too high, add the difference between\
    \ the high and the low and subtract that from the guess\n        // if the guess\
    \ is too low, add the difference between the low and the high and subtract that\
    \ from the guess\n        $guess[count($guess) - 1] = $low + $difference;\n  \
    \  } else {\n        // if the guess is too high, add the difference between the\
    \ low and the high and subtract that from the guess\n        // if the guess is\
    \ too low, add the difference between the high and the low and subtract that from\
    \ the guess\n        $guess[count($guess) - 1] = $high - $difference;\n    }\n\
    \    \n    // return the guess array with the guess differences removed\n    return\
    \ $guess;\n}\n\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnx8m701q.php:64\n\
    Stack trace:\n#0 /tmp/tmpnx8m701q.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpnx8m701q.php\
    \ on line 64\n"
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $guesses = array_count_values($guess);\n    foreach($game as\
    \ $index => $score) {\n        if(isset($guesses[$score])) {\n            $diff\
    \ = $guesses[$score] - $guess[$index];\n        } else {\n            $diff =\
    \ $guess[$index] - $score;\n        }\n        $guesses[$score] = $diff;\n   \
    \ }\n    return $guesses;\n}\n\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw5jyfp5w.php:32\n\
    Stack trace:\n#0 /tmp/tmpw5jyfp5w.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpw5jyfp5w.php\
    \ on line 32\n"
  timestamp: 1659979274
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n  $return = array();\n  for($i=0;$i<count($game);$i++) {\n    $return[$i]\
    \ = abs($game[$i] - $guess[$i]);\n  }\n  return $return;\n}\n\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $guess = array_flip($guess);\n    $game = array_flip($game);\n\
    \    $out = [];\n    foreach ($game as $k => $v) {\n        if (isset($guess[$k]))\
    \ {\n            $out[] = $v - $guess[$k];\n        } else {\n            $out[]\
    \ = 0;\n        }\n    }\n    return $out;\n}\n\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp80lf_tm6.php:33\n\
    Stack trace:\n#0 /tmp/tmp80lf_tm6.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp80lf_tm6.php\
    \ on line 33\n"
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    \n    // initialize result\n    $result = [];\n    \n    // loop\
    \ through all guesses\n    foreach ($guess as $i => $guess) {\n        // increment\
    \ result if it matches\n        if ($game[$i] == $guess) {\n            $result[]\
    \ = 0;\n        } else {\n            // get difference between guess and score\n\
    \            $result[] = abs($game[$i] - $guess);\n        }\n    }\n    \n  \
    \  // return array of result\n    return $result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis solution was the most helpful to me. Thanks.\n<|/ c |>\n<|\
    \ c |>\nI edited the question to include a more detailed explanation of the problem\
    \ and a way to solve it. Hope it helps.\n<|/ c |>\n<| a |>\nIf you don't want\
    \ a library function, you can also try this one, which runs in O(n) time:\n<code>\n\
    function candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmphknpgffq.php
    on line 33

    '
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    //TODO: write code to solve this problem\n}\n</cell>\n<cell>\n\
    function candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp9v05nbc5.php
    on line 17

    '
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = array();\n    $max_score = max($game);\n    foreach\
    \ ($guess as $key => $guess) {\n        if ($guess < 0 || $guess > $max_score)\n\
    \            $result[$key] = abs($guess - $max_score);\n        else\n       \
    \     $result[$key] = 0;\n    }\n    sort($result);\n    return $result;\n}\n\
    </code>\n<|/ a tags=php,arrays |>\n<| c |>\nI like how this approach deals with\
    \ the issues of inconsistent scoring and/or out of bounds scores, and also deals\
    \ specifically with the score of the max value in an array. While I like the comparison\
    \ of array elements as well as array keys as well as the sorting of the result,\
    \ I don't think the sort-compare approach scales well to larger numbers of arrays.\
    \ But I like how it's easier to follow and follows what a human would understand\
    \ as well.\n<|/ c |>\n<| c |>\nThank you for the feedback, however the problem\
    \ here is that you do not always know the length of each array. In your solution,\
    \ you must know the length of the arrays in the comparison to compare them. I'm\
    \ looking for a solution where you do not need to know the lengths of both arrays\
    \ in order to compare them. I'm sorry that I did not make that clear in my original\
    \ question. I've edited my question to reflect that requirement. Thank you!\n\
    <|/ c |>\n<| c |>\nThank you for the feedback! I've edited my answer to account\
    \ for the array lengths.\n<|/ c |>\n<| c |>\nThank you for your feedback! This\
    \ approach works for me. I do think it scales well, even with large numbers of\
    \ arrays. I wish I could give you both an upvote and acceptance, but I only have\
    \ one reputation point :(\n<|/ c |>\n<| c |>\nGlad to hear it! You will get there\
    \ soon enough with your rep.\n<|/ c |>\n<| a tags=php,arrays |>\nI finally got\
    \ this figured out. This function compares each element in one array against each\
    \ element in the other array, and returns the value from each one that matches\
    \ the score of the largest array (so arrays with the largest score are preferred\
    \ over the arrays with the lowest score). \nThe code below works, but I am sure\
    \ it could be cleaned up quite a bit and optimized in some way.\n<code>\n<?php\n\
    function candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpmlichry7.php
    on line 26

    '
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $guessedCorrectly = false;\n    $score = 0;\n    foreach ($guess\
    \ as $key => $val) {\n        if ($val == $game[$key]) {\n            $score++;\n\
    \        } else {\n            if ($val > $game[$key]) {\n                $score--;\n\
    \            }\n        }\n    }\n    if ($score === 0) {\n        $guessedCorrectly\
    \ = true;\n    }\n    return array($score, abs($guessedCorrectly));\n}\n</code>\n\
    <|/ a dscore=2 tags=php,arrays |>\n<| c |>\nHmmm... I see what you're saying.\
    \ I tried it out but I'm not sure if I'm doing it right. http://i.imgur.com/0J6WF.png\n\
    <|/ c |>\n<| c |>\nYour output should be an array, not a single value. Like `$result\
    \ = compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2));`.\n<|/ c |>\n\
    <| c |>\nHmmm... I put this in and it's still outputting nothing.\n<|/ c |>\n\
    <| c |>\nWhat are you entering for the inputs? What happens when you try my code?\
    \ Are you sure you haven't made a mistake in the input somehow?\n<|/ c |>\n<|\
    \ c |>\nI edited my original post to include my inputs. I'm pretty new to php\
    \ so I apologize if I don't understand it right.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\nThe comparison is wrong.\nYou are supposed to compare each value in the\
    \ first array against each value in the second array.  \nWhat you are doing is\
    \ comparing all values in the first array against the first value in the second\
    \ array.  \nYou will also need to keep track of the correct guesses so you can\
    \ compare the second array to that array once you know your first array is correct.\n\
    Here is what I think you want:\n<code>\n<?php\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpm2tylk4y.php
    on line 31

    '
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = [];\n    $max_diff = max(array_map('abs', $game - $guess));\n\
    \    foreach ($game as $index => $score) {\n        $diff = $max_diff - abs($score\
    \ - $guess[$index]);\n        if ($diff > 0) {\n            $result[] = $diff;\n\
    \        } else {\n            $result[] = 0;\n        }\n    }\n    return $result;\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis seems like an awesome idea, but I'm\
    \ getting some weird results with it.  I'm testing it against a brute force guessing\
    \ system that I've just built on top of this, I set the game size to 4 and then\
    \ set my guess array to: array(1, -2, -1, 1), and the array that gets returned\
    \ is array(4, 4, 1, 0, 0, 6)\n<|/ c |>\n<| c |>\nI'm still getting some weird\
    \ results with it.  For some reason, when I set the game size to 4, the game becomes\
    \ unsolvable.  When I set the game size to 8, the game is solvable.  But when\
    \ I set the game size to 16, the game is unsolvable.  I've been trying to figure\
    \ this out and I feel like it's a bug in PHP, but I'm not sure.  Thanks for your\
    \ help by the way, it's much appreciated.\n<|/ c |>\n<| c |>\nIt seems that my\
    \ problem was with the way my program was handling arrays.  In short, the way\
    \ I was handling the arrays was incorrect, but I didn't notice until I was trying\
    \ to do brute force guessing with a larger array.  It seems like the arrays that\
    \ PHP is accepting are only valid for a certain number of guesses.  So the array\
    \ that had 8 guesses, would become invalid.  I was able to resolve this problem\
    \ by writing my own brute force guessing algorithm and comparing it against a\
    \ brute force guessing system that I wrote.\n<|/ c |>\n<| c |>\nI've added my\
    \ own answer below to show how I solved this problem, in case you ever need a\
    \ solution for the same problem.\n<|/ c |>\n<| a tags=php,arrays dscore=1 |>\n\
    I've been working on this problem all night and this is what I came up with:\n\
    <code>\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpsscfr120.php
    on line 27

    '
  timestamp: 1659979274
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    // Your code here\n    $diff = [];\n    foreach ($game as $index\
    \ => $score) {\n        if ($guess[$index] == $score) {\n            $diff[$index]\
    \ = 0;\n        } else {\n            $diff[$index] = abs($guess[$index] - $score);\n\
    \        }\n    }\n    return $diff;\n}\n\nfunction candidate(...$args) {\n  \
    \  return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979274
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = array();\n    $length = min(count($game), count($guess));\n\
    \    for($i = 0; $i < $length; $i++) {\n        if($game[$i] == $guess[$i]) {\n\
    \            $result[$i] = 0;\n        } else {\n            $result[$i] = abs($guess[$i]\
    \ - $game[$i]);\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $length = count($game);\n    $guesses_length = count($guess);\n\
    \    $answer = 0;\n    \n    for($i = 0; $i < $guesses_length; $i++) {\n     \
    \   $answer = max($answer, abs($game[$i] - $guess[$i]));\n    }\n    \n    return\
    \ array($game, $guess);\n}\n<|/ file dstars=0 filename=week_3.php |>\n<| c |>\n\
    This works well, but I want to add another condition to it. Say if you have two\
    \ scores and they are both equal, I want to return 0, not 5. Please let me know\
    \ what you think. Thanks.\n<|/ c |>\n<| c |>\nI modified the program to return\
    \ 0, not 5. Thanks again.\n<|/ c |>\n<| a dscore=0 |>\nYou could do something\
    \ like this -\n<code>\n<?php\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmptn8hvttp.php
    on line 25

    '
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $score = 0;\n    $difference = array();\n    foreach($guess as\
    \ $key => $guessElement) {\n        if ($game[$key] == $guessElement) {\n    \
    \        $score++;\n        } else {\n            $difference[$key] = abs($guessElement\
    \ - $game[$key]);\n        }\n    }\n    return $difference;\n}\n</code>\n<|/\
    \ a |>\n<| a |>\nThis code below will compare two arrays and return a 2d array\
    \ where the first index represents the differences and the second index represents\
    \ the total difference of those differences.\n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmprgvoov49.php
    on line 26

    '
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    \n}\n\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppi5o3we8.php:23\n\
    Stack trace:\n#0 /tmp/tmppi5o3we8.php(29): test()\n#1 {main}\n  thrown in /tmp/tmppi5o3we8.php\
    \ on line 23\n"
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $len = count($game);\n    $guess = array_fill(0, $len, array_fill(0,\
    \ $len, 0));\n    for ($i = 0; $i < $len; $i++) {\n        $diff = $game[$i] -\
    \ $guess[$i];\n        if ($diff === 0) {\n            $guess[$i] = 0;\n     \
    \   } else {\n            $guess[$i] = $diff;\n        }\n    }\n    return $guess;\n\
    }\n\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int - array\
    \ in /tmp/tmpcfs9i4b8.php:18\nStack trace:\n#0 /tmp/tmpcfs9i4b8.php(29): compare(Array,\
    \ Array)\n#1 /tmp/tmpcfs9i4b8.php(33): candidate(Array, Array)\n#2 /tmp/tmpcfs9i4b8.php(39):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpcfs9i4b8.php on line 18\n"
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $score = 0;\n    $guesses = array();\n    foreach($game as $i\
    \ => $num) {\n        if(isset($guess[$i])) {\n            if($num == $guess[$i])\
    \ {\n                $score++;\n            } else {\n                $guesses[$i]\
    \ .= '-'.$num;\n            }\n        } else {\n            $guesses[$i] = '?'.$num;\n\
    \        }\n    }\n    return $guesses;\n}\n\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 4 in /tmp/tmpbm64mzmi.php on line 22\n\n\
    Warning: Undefined array key 5 in /tmp/tmpbm64mzmi.php on line 22\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpbm64mzmi.php:36\nStack trace:\n\
    #0 /tmp/tmpbm64mzmi.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpbm64mzmi.php\
    \ on line 36\n"
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n   $result = [];\n   $len = max(count($game), count($guess));\n \
    \  for ($i = 0; $i < $len; $i++) {\n      $result[$i] = abs($game[$i] - $guess[$i]);\n\
    \   }\n   return $result;\n}\n\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result=array();\n    $count=0;\n    foreach($guess as $key =>\
    \ $value) {\n        if($game[$key]<$value) {\n            $result[$key]=$game[$key]-$value;\n\
    \        } else {\n            $result[$key]=$value-$game[$key];\n        }\n\
    \        if($result[$key]<0) {\n            $result[$key]=abs($result[$key]);\n\
    \        }\n    }\n    foreach($game as $key => $value) {\n        if($result[$key]!=0)\
    \ {\n            $count++;\n        }\n    }\n    return $result;\n}\n</code>\n\
    <|/ a |>\n<| a tags=sorting,php,arrays |>\nI tried to keep it similar to your\
    \ original code, however I'm guessing you didn't want the same value to be counted\
    \ twice if both values are equal. I also didn't think of how to deal with negative\
    \ numbers, but this should cover that scenario as well.\n<code>\n<?php\n$array1\
    \ = array(1, 2, 3, 4, 5, 1);\n$array2 = array(1, 2, 3, 4, 2, -2);\n\n$array3 =\
    \ array();\n\n$array1Size = count($array1);\n$array2Size = count($array2);\n\n\
    for($i = 0; $i < $array1Size; $i++){\n    for($j = $i+1; $j < $array1Size; $j++){\n\
    \        if($array1[$i] == $array1[$j]){\n            $array3[] = abs($array1[$i]\
    \ - $array2[$j]);\n        }else{\n            $array3[] = abs($array1[$i] - $array1[$j]);\n\
    \        }\n    }\n}\n\nprint_r($array3);\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Please don't use \"bootstrapping\" code when posting code answers. Instead, use\
    \ proper indentation and comment the code explaining what is going on.\n<|/ c\
    \ |>\n<| c |>\nThank you, I didn't realize it was considered bad form to edit\
    \ my post like that\n<|/ c |>\n<| a tags=sorting,php,arrays |>\nA solution using\
    \ array_filter and array_diff_assoc\n<code>\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp0brez5kz.php
    on line 34

    '
  timestamp: 1659979274
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $diff = array();\n    \n    // Your code here\n    for($i = 0;\
    \ $i < count($game); $i++){\n        if($game[$i] == $guess[$i]){\n          \
    \  $diff[$i] = 0;\n        }\n        else{\n            $diff[$i] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $diff;\n}\n\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979274
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $results = [];\n    $len = count($guess);\n\n    for($i = 0;\
    \ $i < $len; $i++) {\n        $a = $game[$i];\n        $b = $guess[$i];\n\n  \
    \      $results[$i] = abs($a - $b);\n    }\n\n    return $results;\n}\n\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = array();\n    $diff = array();\n    for($i = 0; $i\
    \ < count($game); $i++) {\n        if($game[$i] == $guess[$i]) {\n           \
    \ $result[$i] = 0;\n            $diff[$i] = 0;\n        } else {\n           \
    \ $result[$i] = abs($guess[$i] - $game[$i]);\n            $diff[$i] = $result[$i];\n\
    \        }\n    }\n    return array($result, $diff);\n}\n\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdah9tt4n.php:34\n\
    Stack trace:\n#0 /tmp/tmpdah9tt4n.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpdah9tt4n.php\
    \ on line 34\n"
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $correctCount = 0;\n    $diffs = array_fill(0, count($guess),\
    \ 0);\n    for ($i=0;$i<count($guess);$i++) {\n        if ($guess[$i] == $game[$i])\
    \ {\n            $correctCount++;\n        } else {\n            $diffs[$i] +=\
    \ abs($guess[$i] - $game[$i]);\n        }\n    }\n    return $diffs;\n}\n\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = [];\n    foreach ($game as $index => $score) {\n  \
    \      $result[$index] = abs($guess - $score);\n    }\n    return $result;\n}\n\
    </code>\n<|/ a |>\n<| a |>\nThe first thing that came to mind is that you might\
    \ want to store the scores as integers, not floats, otherwise the differences\
    \ might get rounded off and the total score will be off (ex. score = 1, guess\
    \ = 2).\n<code>\n<?php\n\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp1jwh_sib.php
    on line 21

    '
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    // Solution #1\n    // return ($game-$guess)*($game-$guess)/abs($game-$guess);\n\
    \    \n    // Solution #2\n    $game = array_map('abs', $game);\n    $guess =\
    \ array_map('abs', $guess);\n    return array_map(function($g, $g) { \n      \
    \  if ($g == 0) return 0;\n        return abs($g-$g); \n        }, $game, $guess);\n\
    }\n\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Redefinition of parameter $g in /tmp/tmp_vnnnt7e.php on line 21

    '
  timestamp: 1659979274
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n\tfor ($i = 0; $i < count($guess); $i++) {\n\t\t$gameScore = $game[$i];\n\
    \t\t$guessScore = $guess[$i];\n\t\tif ($gameScore == $guessScore) {\n\t\t\t$distance\
    \ = 0;\n\t\t} else {\n\t\t\t$distance = ($guessScore - $gameScore);\n\t\t}\n\t\
    \t$guess[$i] = $distance;\n\t}\n\treturn $guess;\n}\n\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp78aa2fnm.php:33\n\
    Stack trace:\n#0 /tmp/tmp78aa2fnm.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp78aa2fnm.php\
    \ on line 33\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = [];\n    // Your code goes here\n    for ($i = 0; $i\
    \ < count($game); $i++) {\n        $result[$i] = abs($guess[$i] - $game[$i]);\n\
    \    }\n    return $result;\n}\n</code>\nThe first thing to notice is that the\
    \ function compare() returns an array of scores. That is because you probably\
    \ want to know the difference between the guess and the game for ALL matches,\
    \ not just the current one. So, when you find a new match, push the difference\
    \ in score to an array and start a new array from zero. \nAnd since you were going\
    \ to be doing that with every guess, I added a little bit of logic to keep track\
    \ of the correct number of matches. The only thing that's really missing now is\
    \ the actual loop to generate the guesses, but I can leave that for you. \nAs\
    \ for what to do with the return value, that's up to you. You could simply print\
    \ out each guess individually and use the same compare function on the arrays.\
    \ Or you could take the absolute difference and sum up the differences in the\
    \ return array and output the result at the end. \nBy the way, if you're not familiar\
    \ with loops, it's a way to loop through an array in order. The way I wrote it,\
    \ every iteration would assign the value to your new array. If you wanted all\
    \ your guesses to be stored in a variable, you would need to have some sort of\
    \ loop to do that for you. \nThe last thing I will mention is that I don't think\
    \ it's good practice to use functions in that manner. I think it's better to make\
    \ functions that do one task, then just call them in the loop where you need them,\
    \ instead of having them all run through and generate a return value. \nThe way\
    \ I wrote it, I added an extra parameter to the function and passed it a value\
    \ indicating which guess we're talking about. Thus, it can know which guesses\
    \ it's dealing with. \nIf you're really set on doing it like this, just make sure\
    \ your function is defined before you use it. Then, just call the function as\
    \ compare($game, $guess, $i);\n<|/ a |>\n<| c |>\nI am still confused on how to\
    \ do the loop. Would you mind showing me? Thanks for your time!\n<|/ c |>\n<|\
    \ a tags=arrays,php dscore=1 |>\nI didn't test the code, but I hope it will give\
    \ you a general idea of what you need:\n<code>\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpqlrvdqox.php
    on line 22

    '
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n  $gameLen = count($game);\n  $guessLen = count($guess);\n  $result\
    \ = array();\n  for ($i = 0; $i < $guessLen; $i++) {\n    if ($game[$i] > $guess[$i])\
    \ {\n      $result[] = $game[$i] - $guess[$i];\n    } else if ($game[$i] < $guess[$i])\
    \ {\n      $result[] = $guess[$i] - $game[$i];\n    } else {\n      $result[]\
    \ = 0;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    if (count($guess) != count($game)) {\n        return \"ERROR:\
    \ Game and guess should be of same length.\";\n    }\n    $result = array();\n\
    \    foreach ($guess as $key => $value) {\n        $result[$key] = abs($value\
    \ - $game[$key]);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = array();\n    for ($i = 0; $i < count($game); $i++)\
    \ {\n        $result[$i] = abs($game[$i] - $guess[$i]);\n    }\n    return $result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nNice idea. Your answer is better than mine, but\
    \ I didn't know that it's possible to pass an array as parameter. Thanks\n<|/\
    \ c |>\n<| c |>\nIt can take arrays as parameter too. You just have to give it\
    \ an array.\n<|/ c |>\n<| c |>\nThis is really great, thank you. Now I can see\
    \ that I should really brush up on my javascript skills.\n<|/ c |>\n<| c |>\n\
    I understand that it's possible to pass an array as parameter, but how do you\
    \ pass an array that has several arrays as parameter? For example how would you\
    \ pass this: compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))?\n<|/\
    \ c |>\n<| c |>\nyou just pass it as you pass any other parameter. `compare($game,\
    \ $guess)`\n<|/ c |>\n<| a dscore=2 |>\nHere's my version using array_map and\
    \ array_diff\n<code>\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmprsv983d3.php
    on line 21

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $game = array_filter($game);\n    $guess = array_filter($guess);\n\
    \    \n    foreach($game as $i => $g) {\n        if($guess == $game) {\n     \
    \       if(!$i) {\n                return array();\n            }\n          \
    \  $ret = $guess - $game;\n            $ret = array_filter($ret);\n          \
    \  $ret = $ret <= 0 ? 0 : abs($ret);\n            return $ret;\n        }\n  \
    \  }\n}\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2,\
    \ 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphs98j_c9.php:35\n\
    Stack trace:\n#0 /tmp/tmphs98j_c9.php(41): test()\n#1 {main}\n  thrown in /tmp/tmphs98j_c9.php\
    \ on line 35\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    \n    $size = count($game);\n    $size = count($guess);\n   \
    \ $diff = array();\n    for ($i = 0; $i < $size; $i++) {\n        $score = $game[$i];\n\
    \        $guess = $guess[$i];\n        $diff[$i] = ($guess - $score);\n    }\n\
    \    return $diff;\n}\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Trying to access array offset on value of type int in /tmp/tmp_3l3kztp.php\
    \ on line 21\n\nWarning: Trying to access array offset on value of type null in\
    \ /tmp/tmp_3l3kztp.php on line 21\n\nWarning: Trying to access array offset on\
    \ value of type null in /tmp/tmp_3l3kztp.php on line 21\n\nWarning: Trying to\
    \ access array offset on value of type null in /tmp/tmp_3l3kztp.php on line 21\n\
    \nWarning: Trying to access array offset on value of type null in /tmp/tmp_3l3kztp.php\
    \ on line 21\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_3l3kztp.php:31\n\
    Stack trace:\n#0 /tmp/tmp_3l3kztp.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp_3l3kztp.php\
    \ on line 31\n"
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n  $result=array();\n  for ($i=0;$i<count($game);$i++) {\n    if ($game[$i]==$guess[$i])\
    \ $result[$i]=0;\n    else $result[$i]=abs($game[$i]-$guess[$i]);\n  }\n  return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = [];\n    for ($i = 0; $i < count($game); $i++) {\n\
    \        $result[$i] = abs($game[$i] - $guess[$i]);\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $difference = array();\n    \n    if (count($game) !== count($guess))\
    \ {\n        throw new Exception('Mismatched lengths');\n    }\n    \n    for\
    \ ($i = 0; $i < count($game); $i++) {\n        $difference[$i] = $game[$i] - $guess[$i];\n\
    \        if ($difference[$i] < 0) {\n            $difference[$i] = $difference[$i]\
    \ + abs($game[$i] - $guess[$i]);\n        }\n    }\n    \n    return $difference;\n\
    }\n</cell>\n<cell>\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpnt9nzyr8.php
    on line 30

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $score = 0;\n    $result = array();\n    \n    foreach ($game\
    \ as $key => $value) {\n        if($guess == $game[$key]) {\n            $score++;\n\
    \        }\n        $result[$key] = abs($guess - $game[$key]);\n    }\n    return\
    \ $result;\n}\n</code>\n<|/ a tags=algorithm,php,math,comparison |>\n<| c |>\n\
    Ah yes, thanks man! I was using another way and I thought the result was wrong.\n\
    <|/ c |>\n<| c |>\nThe return value should be the difference between each element\
    \ of the guess and your score.\n<|/ c |>\n<| a tags=algorithm,php,math,comparison\
    \ |>\nYou can do it by first counting the number of matching numbers in the two\
    \ arrays. Then you can calculate the average difference between each of the two\
    \ matching numbers. If the average difference is less than or equal to the difference\
    \ between the maximum scores in both arrays, then the guessed numbers were correct.\n\
    <code>\n$arr1 = array(1, 2, 3, 4, 5, 1);\n$arr2 = array(1, 2, 3, 4, 2, -2);\n\n\
    function candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpfi79iuo0.php
    on line 26

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    // Your code here\n    return $game;\n}\n\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz2ug22ex.php:24\n\
    Stack trace:\n#0 /tmp/tmpz2ug22ex.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpz2ug22ex.php\
    \ on line 24\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $gameLength = count($game);\n    $guessLength = count($guess);\n\
    \    $diff = new ArrayObject();\n    $i = 0;\n    for ($i = 0; $i < $gameLength;\
    \ $i++) {\n        // If the guess is correct, we'll know immediately if the game\
    \ is correct or not.\n        if ($game[$i] === $guess[$i]) {\n            $diff[$i]\
    \ = 0;\n        } else {\n            // If the guess is wrong and the game is\
    \ correct, we need to find out how far off the guess is.\n            // The absolute\
    \ value of the difference between the guess and score is the closest we can get\n\
    \            // to knowing that the game is correct and the guessed wrong.\n \
    \           $diff[$i] = abs($guess[$i] - $game[$i]);\n        }\n    }\n    return\
    \ $diff;\n}\n</code>\n<|/ a dscore=2 tags=algorithm,php,performance,comparison,performance\
    \ |>\n<| c |>\nWow, thats actually pretty close to what i did in the first place!\
    \ But I do have some ideas for optimizations... It seems like the problem might\
    \ be that you are using array_count_values() in each iteration, which might be\
    \ overkill for large arrays. I think i might just go ahead and do that and store\
    \ the $diff variable for later use.\n<|/ c |>\n<| c |>\nYes, it seems like using\
    \ array_count_values() was unnecessary. Updating the code to use the $diff variable\
    \ also made things faster.\n<|/ c |>\n<| a dscore=1 tags=algorithm,php,performance,comparison,performance\
    \ |>\nIn your case, I think you need to know which score is greater then others.\
    \ In your example, score 1 > 2, score 2 > 3, and score 3 > 1. Then you should\
    \ compare score 1 > score 2 > score 3 and see which one is bigger.\n<|/ a |>\n\
    <| a dscore=1 tags=algorithm,php,performance,comparison,performance |>\nI have\
    \ modified the code by Kenny Ostrom to include comparing both ways and storing\
    \ the results in a multidimensional array.\n<code>\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpac7k3fx7.php
    on line 32

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n  $result = [];\n  $n = count($game);\n  for ($i = 0; $i < $n; $i++)\
    \ {\n    $result[$i] = $guess[$i] - $game[$i];\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfk3t7j6a.php:28\n\
    Stack trace:\n#0 /tmp/tmpfk3t7j6a.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpfk3t7j6a.php\
    \ on line 28\n"
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    \n    $guesses = [];\n    $scores = [];\n    \n    foreach ($guess\
    \ as $index => $guess) {\n        if ($game[$index] == $guess) {\n           \
    \ $guesses[] = $guess;\n            $scores[$index] = 0;\n        } else {\n \
    \           $guesses[] = abs($game[$index] - $guess);\n            $scores[$index]\
    \ = abs($game[$index] - $guess);\n        }\n    }\n    \n    return $scores;\n\
    }\n\n/**\n * A better guess is a guess with higher score from correct guesses.\n\
    \ * The correct guesses are guesses whose values are in the range:\n * -2 \u2264\
    \ guess[i] \u2264 2.\n * \n * Return an array containing the guesses, in order\
    \ of descending score. \n * \n * Example:\n * >>> higherGuesses([4,4,-1,-1,-1,-4])\n\
    \ * [4, -4, -4, -4, -4, -4]\n * \n * Source: Abhishek Sharma\n */\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n\t$score = 0;\n\t$guess = array();\n\tfor ($i = 0; $i < count($game);\
    \ $i++) {\n\t\tif ($game[$i] == $guess[$i]) $score++;\n\t}\n\treturn abs($guess[0]\
    \ - $score);\n}\n\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp9u76wxkd.php on line 18\n\n\
    Warning: Undefined array key 1 in /tmp/tmp9u76wxkd.php on line 18\n\nWarning:\
    \ Undefined array key 2 in /tmp/tmp9u76wxkd.php on line 18\n\nWarning: Undefined\
    \ array key 3 in /tmp/tmp9u76wxkd.php on line 18\n\nWarning: Undefined array key\
    \ 4 in /tmp/tmp9u76wxkd.php on line 18\n\nWarning: Undefined array key 5 in /tmp/tmp9u76wxkd.php\
    \ on line 18\n\nWarning: Undefined array key 0 in /tmp/tmp9u76wxkd.php on line\
    \ 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9u76wxkd.php:28\n\
    Stack trace:\n#0 /tmp/tmp9u76wxkd.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp9u76wxkd.php\
    \ on line 28\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n  $score = array();\n  foreach ($game as $key => $value) {\n    if\
    \ ($guess == $game[$key]) {\n      $score[$key] = 0;\n    } else {\n      $score[$key]\
    \ = abs($value - $game[$key]);\n    }\n  }\n  return $score;\n}\n\n$guesses =\
    \ array(\n  array(1, 1, 6, 0),\n  array(2, 3, 5, 2),\n  array(3, 4, 2, 0),\n \
    \ array(4, 1, 4, 1),\n  array(4, 6, 4, 0),\n  array(5, 1, 2, 1)\n);\n\n$games\
    \ = array(\n  array(1, 1, 6, 0),\n  array(2, 3, 5, 2),\n  array(3, 4, 2, 0),\n\
    \  array(4, 1, 4, 1),\n  array(4, 6, 4, 0),\n  array(5, 1, 2, 1)\n);\n\n$guesses_correct\
    \ = compare($games, array(\n  array(4, 6, 4, 0),\n  array(5, 1, 2, 1)\n));\n\n\
    function candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: array - array\
    \ in /tmp/tmpg99_whvn.php:20\nStack trace:\n#0 /tmp/tmpg99_whvn.php(45): compare(Array,\
    \ Array)\n#1 {main}\n  thrown in /tmp/tmpg99_whvn.php on line 20\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = array();\n    for($i = 0; $i < count($game); $i++)\
    \ {\n        if($game[$i] != $guess[$i]) {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxarnlg8n.php:29\n\
    Stack trace:\n#0 /tmp/tmpxarnlg8n.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpxarnlg8n.php\
    \ on line 29\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $diff = array();\n    $i = count($game) - 1;\n    $j = count($guess)\
    \ - 1;\n    while ($i >= 0 && $j >= 0) {\n        $max = $i + $j;\n        if\
    \ ($game[$i] > $game[$max]) $max = $i;\n        if ($game[$j] > $game[$max]) $max\
    \ = $j;\n        if ($i == $j) {\n            $diff[$max] = 0;\n        } else\
    \ {\n            $diff[$max] = abs($game[$i] - $game[$max]); // the diff\n   \
    \     }\n        if ($game[$i] == $game[$max]) $diff[$max] = 0;\n        $i--;\n\
    \        $j--;\n    }\n    return $diff;\n}\n\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 10 in /tmp/tmp0rpq1xiy.php on line 20\n\n\
    Warning: Undefined array key 8 in /tmp/tmp0rpq1xiy.php on line 20\n\nWarning:\
    \ Undefined array key 6 in /tmp/tmp0rpq1xiy.php on line 20\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp0rpq1xiy.php:39\nStack trace:\n#0 /tmp/tmp0rpq1xiy.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0rpq1xiy.php on line 39\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $guesses = count($game);\n    $score = $game[count($game)-1];\n\
    \    $guesses = count($guess);\n    $score = $game[count($game)-1];\n    $guesses\
    \ = count($guess);\n    $i = count($game)-1;\n    $j = count($guess)-1;\n    $result\
    \ = [];\n    \n    while (--$i >= 0 && --$j >= 0) {\n        if ($game[$i] > $guess[$j])\
    \ {\n            $result[$i] = abs($game[$i] - $guess[$j]);\n        } else {\n\
    \            $result[$i] = abs($guess[$j] - $game[$i]);\n        }\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx2ryb73u.php:39\n\
    Stack trace:\n#0 /tmp/tmpx2ryb73u.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpx2ryb73u.php\
    \ on line 39\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n\t$num = 0;\n\tfor ($i = 0; $i < count($guess); $i++) {\n\t\tif ($game[$i]\
    \ === $guess[$i]) {\n\t\t\t$num++;\n\t\t}\n\t}\n\tif ($num === 0) {\n\t\t$num\
    \ = 0;\n\t}\n\tfor ($i = 0; $i < count($guess); $i++) {\n\t\tif ($game[$i] !==\
    \ $guess[$i]) {\n\t\t\t$num += abs($game[$i] - $guess[$i]);\n\t\t}\n\t}\n\treturn\
    \ $num;\n}\n\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppg87j3sd.php:37\n\
    Stack trace:\n#0 /tmp/tmppg87j3sd.php(43): test()\n#1 {main}\n  thrown in /tmp/tmppg87j3sd.php\
    \ on line 37\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    // Your code here\n    \n}\n\"\"\"\n)\n</cell>\n<text>\nThe last\
    \ section contains a discussion of the various kinds of problems we may face with\
    \ our solution and how we might go about resolving them.\n\n\n</text>\n<text>\n\
    The Problems\n\n</text>\n<text>\nThe last section discussed the problem of finding\
    \ the best solutions to puzzles. In our case, we need to find the best solution\
    \ to a board game. In the real world, we may have a number of different puzzles\
    \ to solve (for example, poker or chess). In these cases, we may need to find\
    \ an algorithm that can find an optimal solution to any puzzle. For example, if\
    \ we have the following puzzles:\n\nSolving the \"poker\" puzzle: Two players\
    \ take turns making a four of a kind. \nThe \"chess\" puzzle: There are six rows\
    \ and six columns of squares. Each square can have one of five different values.\
    \ Each player must make one move.\nThe \"crazy\" puzzle: There are two cubes.\
    \ The top cube has four kinds of cubes (four different kinds of cubes total).\
    \ Each of the other cubes has two kinds of cubes.\nThe \"magic\" puzzle: There\
    \ are three cubes. They are either all red (all the same), or all green (all the\
    \ same), or all blue.\n\nWhich of the following is the optimal solution to this\
    \ puzzle?\n\nSolving the \"poker\" puzzle: \nThe \"chess\" puzzle: \nThe \"crazy\"\
    \ puzzle: \nThe \"magic\" puzzle: \n\nIn each of the above cases, each of the\
    \ above cases will have a different optimal solution to it. There are many possible\
    \ variations of the above puzzles that will yield optimal solutions.\n\n\n</text>\n\
    <text>\nThe Algorithm We Will Learn\n\n</text>\n<text>\nThe first thing we want\
    \ to do is break down the problem we have been working on in small bite sized\
    \ chunks. We will use some simple Python statements to break it down into smaller\
    \ steps.\n\nFor example, in the \"poker\" puzzle, we have two players who each\
    \ play three times and each player has three cards. We want to know how good each\
    \ of the three players was in placing those cards.\n\nOur first task will be to\
    \ figure out which of the three players is the most optimistic solution for the\
    \ \"poker\" puzzle. We will create three lists, one for each player, that hold\
    \ their three scores (one for each match), and then we will sort each list according\
    \ to the score. Finally, we will compare the highest scores to the lowest scores\
    \ using a for loop.\n\nIn order to start \nfunction candidate(...$args) {\n  \
    \  return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected double-quoted string "" in /tmp/tmp_ollc3cy.php
    on line 33

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = array();\n    foreach($game as $k => $v) {\n      \
    \  if ($guess == $v) $result[$k] = 0;\n        else                $result[$k]\
    \ = abs($guess - $v);\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=0\
    \ tags=php |>\n<| a dscore=0 |>\nI have created a simple function as shown below:\n\
    <code>\n<?php\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpmecfy7ko.php
    on line 22

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = [];\n    foreach ($game as $index => $value) {\n  \
    \      if ($guess == $value) {\n            $result[] = 0;\n        } else {\n\
    \            $result[] = abs($guess - $value);\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: array - int\
    \ in /tmp/tmpkmq_fdm6.php:20\nStack trace:\n#0 /tmp/tmpkmq_fdm6.php(26): compare(Array,\
    \ Array)\n#1 /tmp/tmpkmq_fdm6.php(30): candidate(Array, Array)\n#2 /tmp/tmpkmq_fdm6.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpkmq_fdm6.php on line 20\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n  // Your code here\n}\n\nfunction candidate(...$args) {\n    return\
    \ compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpexunkszb.php:23\n\
    Stack trace:\n#0 /tmp/tmpexunkszb.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpexunkszb.php\
    \ on line 23\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = [];\n    for($i=0;$i<count($game);$i++) {\n       \
    \ $result[$i] = abs($game[$i]-$guess[$i]);\n    }\n    return $result;\n}\n\n\
    $guesses = [\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 4, 0, 0],\n    [0, 0, 0,\
    \ 0, 0, 0],\n    [0, 0, 0, 0, 0, 0]\n];\n$result = [0, 0, 0, 0, 0, 0];\n\n$result\
    \ = compare($game, $guesses);\necho \"<table>\\n\";\necho \"<thead>\\n\";\necho\
    \ \"<tr>\\n\";\necho \"<th>Your Guess</th>\\n\";\necho \"<th>Guesses</th>\\n\"\
    ;\necho \"<th>Wins</th>\\n\";\necho \"<th>Losses</th>\\n\";\necho \"<th>Differnce</th>\\\
    n\";\necho \"</tr>\\n\";\necho \"</thead>\\n\";\necho \"<tbody>\\n\";\nfor($i=0;$i<count($result);$i++)\
    \ {\n    echo \"<tr>\\n\";\n    echo \"<td>$result[$i]</td>\\n\";\n    echo \"\
    <td>$guesses[$i]</td>\\n\";\n    echo \"<td>\".$wins[$i].\"</td>\\n\";\n    echo\
    \ \"<td>\".$losses[$i].\"</td>\\n\";\n    echo \"<td>\".$diff[$i].\"</td>\\n\"\
    ;\n    echo \"</tr>\\n\";\n}\necho \"</tbody>\\n\";\necho \"</table>\\n\";\necho\
    \ \"<hr>\\n\";\n</code>\nResult:\n<code>\n<table>\n<thead>\n<tr>\n<th>Your Guess</th>\n\
    <th>Guesses</th>\n<th>Wins</th>\n<th>Losses</th>\n<th>Differnce</th>\n</tr>\n\
    </thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n\
    </tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n\
    <tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n\
    <td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n\
    <td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n\
    <td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n\
    <td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n\
    <td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0\n\
    function candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpeyy4sdw4.php
    on line 54

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $return = array();\n    for($i = 0; $i < count($game); $i++)\
    \ {\n        if ($game[$i] == $guess[$i]) $return[$i] = 0;\n        else $return[$i]\
    \ = abs($game[$i] - $guess[$i]);\n    }\n    return $return;\n}\n</code>\n<|/\
    \ a |>\n<| a |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp4mdle3zu.php
    on line 22

    '
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $diffs = array();\n    for($i = 0; $i < count($game); $i++) {\n\
    \        $diffs[$i] = abs($guess[$i] - $game[$i]);\n    }\n    return $diffs;\n\
    }\n\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n  $errors = array();\n  \n  $score = 0;\n  \n  for ($i=0; $i < count($guess);\
    \ $i++) {\n    \n    // check each guess for errors\n    if ($game[$i] != $guess[$i])\
    \ {\n      if ($errors[$i] > 0) {\n        $errors[$i] -= 1;\n      } else {\n\
    \        $errors[$i] = 1;\n      }\n    }\n  }\n  \n  // return an array\n  return\
    \ $errors;\n}\n\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 4 in /tmp/tmp0lux_u8w.php on line 23\n\n\
    Warning: Undefined array key 5 in /tmp/tmp0lux_u8w.php on line 23\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp0lux_u8w.php:40\nStack trace:\n\
    #0 /tmp/tmp0lux_u8w.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp0lux_u8w.php\
    \ on line 40\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    \n    $results = [];\n    \n    foreach ($game as $index => $score)\
    \ {\n        if ($score == $guess) {\n            $results[$index] = 0;\n    \
    \    } else {\n            $results[$index] = abs($guess - $score);\n        }\n\
    \    }\n    \n    return $results;\n}\n\nfunction candidate(...$args) {\n    return\
    \ compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: array - int\
    \ in /tmp/tmpf2myggnp.php:22\nStack trace:\n#0 /tmp/tmpf2myggnp.php(30): compare(Array,\
    \ Array)\n#1 /tmp/tmpf2myggnp.php(34): candidate(Array, Array)\n#2 /tmp/tmpf2myggnp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpf2myggnp.php on line 22\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    \n    // Your code here\n    $correct = 0;\n    for ($i=0; $i<count($game);\
    \ $i++) {\n        $correct = $correct + abs($game[$i] - $guess[$i]);\n    }\n\
    \    \n    return array($correct);\n}\nfunction candidate(...$args) {\n    return\
    \ compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ai0mswh.php:29\n\
    Stack trace:\n#0 /tmp/tmp7ai0mswh.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp7ai0mswh.php\
    \ on line 29\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = array();\n    $nGuesses = count($guess);\n    $nScores\
    \ = count($game);\n    for($i = 0; $i < $nGuesses; $i++) {\n        if($guess[$i]\
    \ != $game[$i]) {\n            $result[] = abs($guess[$i] - $game[$i]);\n    \
    \    } else {\n            $result[] = 0;\n        }\n    }\n    return $result;\n\
    }\n</code>\n<|/ a dscore=2 tags=php,arrays,algorithm,javascript |>\n<| c |>\n\
    I tested your code, and it doesn't seem to work.\n<|/ c |>\n<| c |>\nThe code\
    \ above returns what you are expecting. I've updated my answer, and it now includes\
    \ a function which compares the given answers with the ones returned.\n<|/ c |>\n\
    <| c |>\nStill not working. I've updated my code so you can see what I've tried.\n\
    <|/ c |>\n<| c |>\nAwesome! Thanks a bunch for being patient and showing me all\
    \ the possible ways to solve this! One more thing I couldn't figure out in the\
    \ original code you gave me, but when I made a working one from this, your code\
    \ worked too! So again, thanks a bunch for helping me out a lot!\n<|/ c |>\n<|\
    \ c |>\nYou're welcome. I've updated the code again, added comments to the code\
    \ and removed the unnecessary variable declarations. Please note that I've been\
    \ using PHP 5.3.10 for testing. I've never used PHP 4.x before so I didn't notice\
    \ that :)\n<|/ c |>\n<| a dscore=2 |>\nThis works in PHP 5.3.10 too (http://codepad.org/y6JpRh4T).\
    \ I've commented the explanation inside the code.\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp2_6q1yyy.php
    on line 27

    '
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $returnArray = array();\n    foreach ($game as $key => $value)\
    \ {\n        $returnArray[$key] = $value - $guess[$key];\n    }\n    return $returnArray;\n\
    }\n\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    // Ok, now what?\n    // We will need to loop through our two\
    \ arrays, and compare the arrays at each index.\n    // For each index i, we will\
    \ want to loop through the other array. Compare each element at index i from the\
    \ two arrays. If we find a match at index i, then we know that element at index\
    \ i from the two arrays is correct.\n    // There are two ways to compare two\
    \ arrays at each index. One is to use array_diff to compare each element from\
    \ one array to the other. If there are no matches, then the difference will be\
    \ an empty array. If the two arrays have non-matching elements, then a non-zero\
    \ length array will be returned. \n    // Another way is to simply subtract the\
    \ score from each element in the array. If the difference between the scores is\
    \ greater than zero, then the scores are off by that amount.\n    // Now we have\
    \ two arrays, of which we need to subtract one from the other, and we can use\
    \ array_diff to determine if a person guessed correctly.\n    // We now have all\
    \ the necessary tools to write some code. Lets do it!\n    // Start by creating\
    \ the $differences array that we will populate with our results.\n    $differences\
    \ = array();\n    \n    // Loop through each element in our first array\n    //\
    \ We will use a foreach loop, but we can also use a for loop as we did above.\
    \ It should be easy to see what this code is doing!\n    // The way the code is\
    \ written now, i will be the value of each element in the array $game, and j the\
    \ value of the current element in the $guess array.\n    // Because of the way\
    \ our arrays are indexed, we can simply loop through both arrays at the same time.\
    \ We are using a foreach loop to iterate through both arrays.\n    // We will\
    \ also use the $i value that we created in the previous step.\n    // For each\
    \ element in the $game array, we will also use the $j value to determine our score\
    \ in the $guess array. We can then use that score in the $differences array.\n\
    \    // Finally, we want to populate $differences with our results. We will use\
    \ the array_push function to do this, and pass it the new value of $differences.\
    \ \n    foreach ($game as $i => $j) {\n        $differences[] = abs($j - $guess[$i]);\n\
    \    }\n    \n    // Finally we want to return the $differences array\n    return\
    \ $differences;\n}\n</cell>\n<cell>\nfunction candidate(...$args) {\n    return\
    \ compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmprv_0lcg6.php
    on line 39

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $correct = array_fill(0, count($guess), 0);\n    foreach ($guess\
    \ as $i => $g) {\n        // If there is a correct guess already then we're done.\n\
    \        if (isset($correct[$i])) {\n            continue;\n        }\n\n    \
    \    $wrong = 0;\n        foreach ($game as $j => $s) {\n            // If there\
    \ is a wrong guess at some point then we already know this.\n            if (isset($correct[$j])\
    \ && $s != $g) {\n                $wrong++;\n            }\n        }\n      \
    \  $correct[$i] = $wrong;\n    }\n    return $correct;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis is fantastic! The function makes complete sense to me, and\
    \ in fact it matches up with what I have been doing, which is to return `array(1,1,1,1,1,0)`,\
    \ however, your function doesn't work the same way. You have correctly guessed\
    \ that when your first guess was incorrect, it would not count any more incorrect\
    \ guesses, however, it doesn't seem to work the same when your first guess is\
    \ correct. I realize my question was worded badly, but the point of my question\
    \ was to return the exact same array as I have been returning, which I believe\
    \ to be `array(1,1,1,1,1,0)` because it is incorrect. Thanks again for the help!\n\
    <|/ c |>\n<| c |>\nAh I see I got it backwards, I've fixed it now. It's just a\
    \ matter of looping through the `guess` array again and taking the difference\
    \ between the `guess` and `score` array values.\n<|/ c |>\n<| c |>\nYes I see\
    \ that, but I was hoping to avoid having to loop over the `guess` array again\
    \ because it could get pretty long. I was hoping for a function that could return\
    \ a single array `array(1,1,1,1,1,0)` like my function does, where it simply checks\
    \ both arrays and calculates the difference between the two, but I was hoping\
    \ for a function that just checks the `guess` array and returns the result you\
    \ mentioned above. Thanks again for your help, I am new to php so I appreciate\
    \ the help!\n<|/ c |>\n<| c |>\nHmm, I think you're right then that there is no\
    \ way to do it without looping through `guess` again. I think there may be a way\
    \ but it's going to be pretty ugly. I'll think on it. If no-one else comes up\
    \ with something I'll mark this as the answer.\n<|/ c |>\n<| a tags=php,arrays,function\
    \ |>\nIt is not the best solution but it may be useful for you.\n<code>\n$score\
    \ = [1, 2, 3, 3, 4, 5];\n$guess = [1, 2, 3, 4, 2, -2\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmptn382psm.php
    on line 33

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = array();\n\n    for ($i=0; $i<count($game); $i++) {\n\
    \        for ($j=0; $j<count($guess); $j++) {\n            if ($game[$i] == $guess[$j])\
    \ {\n                $result[$i] = $j;\n                break;\n            }\n\
    \        }\n    }\n\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyiuknbeg.php:34\n\
    Stack trace:\n#0 /tmp/tmpyiuknbeg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpyiuknbeg.php\
    \ on line 34\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = [];\n    foreach ($game as $game_value) {\n       \
    \ $result[] = abs($game_value-$guess);\n    }\n    return $result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThanks a lot for your help.\n<|/ c |>\n<| c |>\nno worries,\
    \ it can be a bit confusing at first but it is very powerful.\n<|/ c |>\n<| c\
    \ |>\nThe explanation was really helpful. Thanks a lot for helping me out.\n<|/\
    \ c |>\n<| c |>\nI have not understood how you got the $game and $guess. Can you\
    \ please help me with that?\n<|/ c |>\n<| c |>\nI just used a hardcoded version\
    \ of your question. There are also many ways to get the same result but this is\
    \ the most straightforward way.\n<|/ c |>\n<| a |>\nHere is another solution using\
    \ nested arrays as parameters and recursion.\n<code>\n<?php\n\n$array = array(1,2,3,4,5);\n\
    $array1 = array(1,2,3,4,5);\n\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpdysmcf_o.php
    on line 21

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $scores = [];\n    $n = count($game);\n    $k = count($guess);\n\
    \    for($i = 0; $i < $k; $i++) {\n        $scores[$i] = 0;\n    }\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        $score = 0;\n        for ($j = 0; $j < $k; $j++)\
    \ {\n            if ($game[$i] == $guess[$j]) {\n                $score++;\n \
    \               $scores[$j] = $score;\n            }\n        }\n    }\n    return\
    \ $scores;\n}\n\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcb5xxbc.php:38\n\
    Stack trace:\n#0 /tmp/tmprcb5xxbc.php(44): test()\n#1 {main}\n  thrown in /tmp/tmprcb5xxbc.php\
    \ on line 38\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n   $result = [];\n   for ($i = 0; $i < count($game); $i++) {\n  \
    \    $result[$i] = abs($game[$i] - $guess[$i]);\n   }\n   return $result;\n}\n\
    </code>\n<|/ a tags=algorithm,php |>\n<| c |>\nThis solution fails when there\
    \ are 2 matching values and the user guesses the second one incorrectly.\n<|/\
    \ c |>\n<| c |>\nWhat do you mean? It's already tested for two matching values\
    \ by OP\n<|/ c |>\n<| c |>\nOP wants results of `compare(array(1, 2, 3, 4, 5),\
    \ array(1, 3, 4, 5, 1))` to be `array(0, 0, 0, 0, 3, 3)`\n<|/ c |>\n<| c |>\n\
    I tested this code. it works well. but i dont understand this algorithm. if i\
    \ guess all correctly, then which index shows the correct answer? the result array?\
    \ but why? how it knows what is the correct answer? i mean after all correct answer\
    \ is guessed, then what? i cant understand\n<|/ c |>\n<| c |>\nThe array holds\
    \ the results of all incorrect guesses. So the correct answer will be the last\
    \ item in the array (or zero if the array is empty because no guesses were made.\n\
    <|/ c |>\n<| a |>\nSince you have 2 arrays of equal length I assume that each\
    \ index of array 1 represents the correct answer so you can start from the end\
    \ and see which index shows the correct answer (the last index) and work your\
    \ way up. For example:\n<code>\n$array1 = [\n    1 => 1, // correct answer so\
    \ return 0\n    2 => 2,\n    3 => 3,\n    4 => 4,\n    5 => 5\n];\n$array2 = [\n\
    \    1 => 2,\n    2 => 3,\n    3 => 4,\n    4 => 5,\n    5 => 1\n];\n\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpxlrbjr8r.php
    on line 21

    '
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $diff = array();\n    for ($i = 0; $i < count($guess); $i++)\
    \ {\n        $diff[$i] = abs($guess[$i] - $game[$i]);\n    }\n    return $diff;\n\
    }\n\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $gamelength = count($game);\n    $guessposition = count($guess);\n\
    \    $result = [];\n    for ($i = 0; $i < $gamelength; $i++) {\n        $result[$i]\
    \ = abs($game[$i] - $guess[$i]);\n    }\n    for ($i = 0; $i < $guessposition;\
    \ $i++) {\n        $result[$gamelength - 1 + $i] = abs($guess[$i] - $game[$gamelength\
    \ - 1 + $i]);\n    }\n    return $result;\n}\n\n$result = compare($game, $guess);\n\
    $correctguess = array_sum($result);\n$wrongguess = count($result);\n\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $game in /tmp/tmp5jykue_w.php on line 27\n\
    \nWarning: Undefined variable $guess in /tmp/tmp5jykue_w.php on line 27\n\nFatal\
    \ error: Uncaught TypeError: count(): Argument #1 ($value) must be of type Countable|array,\
    \ null given in /tmp/tmp5jykue_w.php:15\nStack trace:\n#0 /tmp/tmp5jykue_w.php(27):\
    \ compare(NULL, NULL)\n#1 {main}\n  thrown in /tmp/tmp5jykue_w.php on line 15\n"
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n\t$diff = array();\n\t\n\tforeach ($guess as $key => $score) {\n\t\
    \t$diff[$key] = abs($score - $game[$key]);\n\t}\n\t\n\treturn $diff;\n}\n\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $size = count($guess);\n    $result = array_fill(0, $size, 0);\n\
    \    foreach ($game as $key => $score) {\n        for ($i = 0; $i < $size; $i++)\
    \ {\n            if ($guess == $game[$key]) {\n                $result[$i] = $score;\n\
    \            }\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk04yqghy.php:31\n\
    Stack trace:\n#0 /tmp/tmpk04yqghy.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpk04yqghy.php\
    \ on line 31\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    // TODO: Write a solution to compare two arrays\n    $difference\
    \ = array();\n    foreach ($game as $key => $score) {\n        if ($guess == $score)\
    \ {\n            $difference[$key] = 0;\n        } else {\n            $difference[$key]\
    \ = abs($guess - $score);\n        }\n    }\n    return $difference;\n}\n\n/**\n\
    \ * Tests the compare() function\n */\nfunction candidate(...$args) {\n    return\
    \ compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: array - int\
    \ in /tmp/tmpkkv8fudk.php:21\nStack trace:\n#0 /tmp/tmpkkv8fudk.php(31): compare(Array,\
    \ Array)\n#1 /tmp/tmpkkv8fudk.php(35): candidate(Array, Array)\n#2 /tmp/tmpkkv8fudk.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpkkv8fudk.php on line 21\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    // Your code goes here!\n    return $game;\n}\n\"\"\"\n    compare(Game('abcde'),\
    \ Guess(2, 2, 1, 2, 1, 2))\n</cell>\n<text>\nPart 2\nThere are some really great\
    \ questions on Quora!\n\nOne of the most interesting ones are the questions tagged\
    \ \"Python Programming Language\".\n\nThe tags will give you the Python version\
    \ of the question that you need to solve.\n\nFor example, if you want to know\
    \ the Python version of this question you need to first find this question:\n\n\
    How do you remove duplicates from a list in Python?\n\n\nThe Python code they\
    \ give you is this:\n\n>>> x = [1, 1, 1, 2, 2, 3]\n>>> list(set(x))\n[1, 2, 3]\n\
    Now try this question on the Quora:\n\nHow do you count the number of occurrences\
    \ of a value in Python?\n\n\nYou should get two answers. One Python and one Java.\
    \ One in Java and one in Python.\n\nWrite your answer as a Java String and Java\
    \ method. Call your Java method from Python.\n\nHint: In Python you need to call\
    \ the .count() method on your list object. Java and Python list objects both have\
    \ .count() methods. Use your Python skills to call the Java one from Python.\n\
    \nWhat happens when you call the Java method from Python?\n\n\n</text>\n<cell>\n\
    %%file quora.py \n\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected double-quoted string "" in /tmp/tmpq2t2t9mz.php
    on line 25

    '
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = array();\n    for($i = 0; $i < count($game); $i++)\
    \ {\n        $result[$i] = abs($guess[$i] - $game[$i]);\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $matches = array();\n    foreach($game as $key => $score){\n\
    \        $guesses = $guess;\n        $guesses[$key] = 0;\n        $result = $this->check($score,\
    \ $guesses);\n        if($result){\n            $matches[$key] = $result;\n  \
    \      }\n    }\n    return $matches;\n}\n\nclass Guesser {\n\n    private $guess;\n\
    \    private $max;\n    private $score;\n    private $round;\n\n    function __construct($guess,\
    \ $max)\n    {\n        $this->guess = $guess;\n        $this->max = $max;\n \
    \       $this->score = 0;\n        $this->round = 1;\n    }\n\n    function guess(){\n\
    \        $this->guess[$this->round] = mt_rand(1, $this->max);\n        $this->round++;\n\
    \        return $this->guess;\n    }\n\n    public function check($score, $guesses){\n\
    \        $diff = 0;\n        foreach($guesses as $key){\n            if($score\
    \ == $key)\n                $diff++;\n            else\n                $diff\
    \ = $diff + abs($key - $score);\n        }\n        return ($diff == $this->round);\n\
    \    }\n\n    public function checkScores($score, $guesses){\n        foreach($guesses\
    \ as $key){\n            if($score == $key)\n                return true;\n  \
    \      }\n        return false;\n    }\n\n    public function getScore(){\n  \
    \      return $this->score;\n    }\n\n    public function reset(){\n        $this->guess[$this->round]\
    \ = 1;\n        $this->round++;\n    }\n\n}\n\n$guesser = new Guesser($guess,\
    \ $max);\n\nforeach($guesser as $guess){\n    print_r($guess);\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nI thought it would be as simple as this, but unfortunately no.\
    \ In the example above (for instance) I have $guess = array(5, 3) and $game =\
    \ array(1, 3, 4), and I don't get correct results. In addition to that, the code\
    \ doesn't work when there are more than one game in a row. For instance if you\
    \ have $guess = array(1, 3, 4, 2) and $game = array(5, 3, 1), your code does not\
    \ work as you intend.\n<|/ c |>\n<| c |>\nI updated the code. Now it works for\
    \ several games in a row. Also for multiple guesses within one game. The `checkScores`\
    \ method now checks each guesses against every possible game score and therefore\
    \ can be used in `check`\n<|/ c |>\n<| c |>\nThanks so much! This looks great.\
    \ I was wondering if you could give me some pointers on \nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp3zym12fe.php
    on line 83

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n  $score = 0;\n  for ($i=0; $i < count($guess); $i++) {\n    if ($game[$i]\
    \ === $guess[$i]) $score += 0;\n    else $score += abs($guess[$i] - $game[$i]);\n\
    \  }\n  return $score;\n}\n\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpumyan4oc.php:28\n\
    Stack trace:\n#0 /tmp/tmpumyan4oc.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpumyan4oc.php\
    \ on line 28\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    // Your code here\n    $diff = 0;\n    foreach($game as $i =>\
    \ $score) {\n        $diff = $diff + abs($guess[$i] - $score);\n    }\n    return\
    \ $diff;\n}\n\n$game = array(1,2,3,4,5,1);\n$guess = array(1,2,3,4,2,-2);\n\n\
    $diff = compare($game,$guess);\necho \"<br /><br />$diff<br />\";\n\n$game = array(0,1,0,0,1,0);\n\
    $guess = array(0,0,0,1,1,0);\n\n$diff = compare($game,$guess);\necho \"<br /><br\
    \ />$diff<br />\";\n\n$game = array(1,2,3,4,5,0);\n$guess = array(1,2,3,4,2,-2);\n\
    \n$diff = compare($game,$guess);\necho \"<br /><br />$diff<br />\";\n\n$game =\
    \ array(1,2,3,4,5,1);\n$guess = array(1,2,3,4,2,-2);\n\n$diff = compare($game,$guess);\n\
    echo \"<br /><br />$diff<br />\";\n\n$game = array(1,2,3,4,5,1);\n$guess = array(1,2,3,4,2,-2);\n\
    \n$diff = compare($game,$guess);\necho \"<br /><br />$diff<br />\";\n\n$game =\
    \ array(1,2,3,4,5,1);\n$guess = array(1,2,3,4,2,-2);\n\n$diff = compare($game,$guess);\n\
    echo \"<br /><br />$diff<br />\";\n\n$game = array(1,2,3,4,5,1);\n$guess = array(1,2,3,4,2,-2);\n\
    \n$diff = compare($game,$guess);\necho \"<br /><br />$diff<br />\";\n\n$game =\
    \ array(0,5,0,0,0,4);\n$guess = array(4,1,1,0,0,-2);\n\n$diff = compare($game,$guess);\n\
    echo \"<br /><br />$diff<br />\";\n\n$game = array(0,5,0,0,0,4);\n$guess = array(4,1,1,0,0,-2);\n\
    \n$diff = compare($game,$guess);\necho \"<br /><br />$diff<br />\";\n\n$game =\
    \ array(0,5,0,0,0,4);\n$guess = array(4,1,1,0,0,-2);\n\n$diff = compare($game,$guess);\n\
    echo \"<br /><br />$diff<br />\";\n\n$game = array(0,5,0,0,0,4);\n$guess = array(4,1,1,0,0,-2);\n\
    \n$diff = compare($game,$guess);\necho \"<br /><br />$diff<br />\";\n\n$game =\
    \ array(0,5,0,0,0,4);\n$guess = array(4,1,1,0,0,-2);\n\n$diff = compare($game,$guess);\n\
    echo \"<br /><br />$diff<br />\";\n\n$game = array(0,1,0,0,1,0);\n$guess = array(0,0,0,1,1,0);\n\
    \n$diff = compare($game,$guess);\necho \"<br /><br />$diff<br />\";\n\n$game\n\
    function candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpr64h86gh.php
    on line 102

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    // Write your code here\n    return $game;\n}\n</cell>\n<text>\n\
    Test Your Solution\nRun the cell below to test your solution.\n\n\n</text>\n<cell>\n\
    \"\"\"\nHere we test our solution. It will give an output if your solution returns\
    \ the same\noutput as mine. Otherwise it will say your code failed. Try to figure\
    \ out what went wrong.\n\"\"\"\nfrom nose.tools import assert_equal\nfrom nose.tools\
    \ import assert_not_equal\nfrom nose.tools import assert_almost_equal\n\nclass\
    \ TestCompare(object):\n    def test_compare(self):\n        assert_equal(compare(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)), array(0, 0, 0, 0, 3, 3))\n      \
    \  assert_equal(compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2)), array(4,\
    \ 4, 1, 0, 0, 6))\n        assert_equal(compare(array(0, 1, 2, 3, 4, 5), array(4,\
    \ 5, 3, 4, 2, -1)), array(5, 5, 2, 1, 1, 2))\n        assert_equal(compare(array(1),\
    \ array(0)), array(1))\n        assert_equal(compare(array(0), array(1)), array(0))\n\
    \        assert_equal(compare(array(1), array(3)), array(3))\n        assert_equal(compare(array(3),\
    \ array(1)), array(3))\n        assert_equal(compare(array(3), array(3)), array(3))\n\
    \        assert_equal(compare(array(5), array(5), array(5)), array(5))\n     \
    \   assert_equal(compare(array(5), array(5), array(6)), array(5))\n        assert_equal(compare(array(5),\
    \ array(6), array(5)), array(5))\n        assert_equal(compare(array(1), array(7)),\
    \ array(7))\n        assert_equal(compare(array(7), array(1)), array(7))\n   \
    \     assert_equal(compare(array(5), array(7), array(7)), array(5))\n        assert_equal(compare(array(6),\
    \ array(7), array(7)), array(6))\n        assert_equal(compare(array(1), array(8)),\
    \ array(8))\n        assert_equal(compare(array(8), array(1)), array(8))\n   \
    \     assert_equal(compare(array(5), array(8), array(8)), array(5))\n        assert_equal(compare(array(6),\
    \ array(8), array(8)), array(6))\n        assert_equal(compare(array(1), array(9)),\
    \ array(9))\n        assert_equal(compare(array(9), array(1)), array(9))\n   \
    \     assert_equal(compare(array(5), array(9), array(9)), array(5))\n        assert_equal(compare(array(6),\
    \ array(9), array(9)), array(6))\n        assert_equal(compare(array(1), array(9),\
    \ array(9)), array(9))\n        assert_equal(compare(array(5), array(9), array(9)),\
    \ array(5))\n        assert_equal(compare(array(6), array(9), array(9)), array(6))\n\
    \        assert_equal(compare(array(1), array(10), array(10)), array(10))\n  \
    \      assert_equal(compare(array(10), array(1)), array(10))\n        assert_equal(compare(array(5),\
    \ array(10), array(10)), array(5))\n        assert_equal(compare(array(6), array(10),\
    \ array(10)), array(6))\n        assert_equal(compare(array(1), array(11), array(11)),\
    \ array(11))\n        assert_equal(compare(array(11), array(\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpllbsh0l3.php
    on line 18

    '
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $length = count($game);\n    if (count($guess) != $length) {\n\
    \        throw new InvalidArgumentException(\"$guess and $game must be of equal\
    \ length\");\n    }\n    $score = [];\n    for ($i = 0; $i < $length; $i++) {\n\
    \        if ($game[$i] == $guess[$i]) {\n            $score[$i] = 0;\n       \
    \ } else {\n            $score[$i] = abs($game[$i] - $guess[$i]);\n        }\n\
    \    }\n    return $score;\n}\n\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n\t$score = array_diff($game, $guess);\n\t$guess = array_diff($guess,\
    \ $game);\n\t$total = count($score);\n\n\t$diffs = [];\n\tfor ($i = 0; $i < $total;\
    \ $i++) {\n\t\t$diffs[$i] = $guess[$i] - $score[$i];\n\t}\n\n\treturn $diffs;\n\
    }\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpx0fcx4d0.php on line 21\n\n\
    Warning: Undefined array key 0 in /tmp/tmpx0fcx4d0.php on line 21\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpx0fcx4d0.php:31\nStack trace:\n\
    #0 /tmp/tmpx0fcx4d0.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpx0fcx4d0.php\
    \ on line 31\n"
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $len = count($guess);\n    $correct = 0;\n    for($i = 0; $i\
    \ < $len; $i++) {\n        $correct = ($game[$i] == $guess[$i]) ? $correct + 1\
    \ : 0;\n    }\n    $result = array();\n    for($i = 0; $i < $len; $i++) {\n  \
    \      $result[$i] = (abs($guess[$i] - $game[$i]) == 0) ? 0 : abs($guess[$i] -\
    \ $game[$i]);\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    if (count($game) !== count($guess)) {\n        return 'The number\
    \ of elements in the arrays must be the same';\n    }\n\n    $guesses = array_fill_keys($guess,\
    \ 0);\n\n    for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] ===\
    \ $guess[$i]) {\n            $guesses[$i] += 1;\n        }\n    }\n\n    return\
    \ $guesses;\n}\n\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp7_wy58ko.php on line 23\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp7_wy58ko.php:35\nStack\
    \ trace:\n#0 /tmp/tmp7_wy58ko.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp7_wy58ko.php\
    \ on line 35\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    if (count($game) != count($guess)) {\n        throw new \\Exception('The\
    \ number of scores and number of guesses should be equal.');\n    }\n    $result\
    \ = array();\n    for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i]\
    \ >= $guess[$i]) {\n            $result[] = 0;\n        } elseif ($game[$i] >\
    \ $guess[$i]) {\n            $result[] = $game[$i] - $guess[$i];\n        } else\
    \ {\n            $result[] = $guess[$i] - $game[$i];\n        }\n    }\n    return\
    \ $result;\n}\n</code>\nI hope this will be helpful for your future coding projects.\n\
    <|/ a dscore=4 |>\n<| c |>\nThanks for this, very helpful. I have a question though,\
    \ should I be using arrays or can I use an object? If it's an object, how would\
    \ I go about calling them so I can compare them?\n<|/ c |>\n<| c |>\nIt doesn't\
    \ matter whether you use an array or an object, but you should use an array because\
    \ arrays are the standard array data type and are easier to work with. You can\
    \ use an object when you need an object and have some way to identify each element\
    \ in the array (like a primary key)\n<|/ c |>\n<| c |>\nThanks so much, I really\
    \ appreciate it! How would I go about calling each element in the array? Sorry\
    \ I'm fairly new to this.\n<|/ c |>\n<| c |>\nSince you already have the array\
    \ with the data, you already have all the information you need in order to call\
    \ each element and compare it. Just use the indexes of the arrays instead of using\
    \ the values themselves.\n<|/ c |>\n<| c |>\nSo for the above function I would:\n\
    $game = [1, 2, 3, 4, 5, 1];\n$guess = [1, 2, 3, 4, 2, -2]; ?\n<|/ c |>\n<| a tags=arrays,compare,php\
    \ dscore=4 |>\nI recently had this problem, and after a few hours of searching,\
    \ found out a way to solve it.  Here is the code I used:\n<code>\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpvvygrtfi.php
    on line 30

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n\t$correct = 0;\n\tfor ($i=0; $i<count($game); $i++) {\n\t\t$score\
    \ = $game[$i];\n\t\t$guess = $guess[$i];\n\t\tif ($guess == $score) {\n\t\t\t\
    $correct++;\n\t\t}\n\t}\n\t$result = [];\n\tfor ($i=0; $i<count($guess); $i++)\
    \ {\n\t\t$guess = $guess[$i];\n\t\tif ($guess != 0) {\n\t\t\t$result[] = $guess-$score;\n\
    \t\t} else {\n\t\t\t$result[] = 0;\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Trying to access array offset on value of type int in /tmp/tmpb3j_ko24.php\
    \ on line 18\n\nWarning: Trying to access array offset on value of type null in\
    \ /tmp/tmpb3j_ko24.php on line 18\n\nWarning: Trying to access array offset on\
    \ value of type null in /tmp/tmpb3j_ko24.php on line 18\n\nWarning: Trying to\
    \ access array offset on value of type null in /tmp/tmpb3j_ko24.php on line 18\n\
    \nWarning: Trying to access array offset on value of type null in /tmp/tmpb3j_ko24.php\
    \ on line 18\n\nFatal error: Uncaught TypeError: count(): Argument #1 ($value)\
    \ must be of type Countable|array, null given in /tmp/tmpb3j_ko24.php:24\nStack\
    \ trace:\n#0 /tmp/tmpb3j_ko24.php(36): compare(Array, NULL)\n#1 /tmp/tmpb3j_ko24.php(40):\
    \ candidate(Array, Array)\n#2 /tmp/tmpb3j_ko24.php(46): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpb3j_ko24.php on line 24\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n  $scores = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n  for ($i = 0; $i < count($game);\
    \ $i++) {\n    if ($game[$i] == $guess[$i]) {\n      $scores[$i] = 0;\n    } else\
    \ {\n      $scores[$i] = abs($guess[$i] - $game[$i]);\n    }\n  }\n  return $scores;\n\
    }\n\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1p06omcf.php:31\n\
    Stack trace:\n#0 /tmp/tmp1p06omcf.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp1p06omcf.php\
    \ on line 31\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n\t$guesses = array();\n\tforeach ($guess as $i => $guess) {\n\t\t\
    $guesses[$i] = abs($guess - $game[$i]);\n\t}\n\treturn $guesses;\n}\n</cell>\n\
    <text>\nTests\n\n</text>\n<cell>\n%%bash\nfunction candidate(...$args) {\n   \
    \ return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpn1njip88.php
    on line 21

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $guess = array_map('absval', $guess);\n    $correct = array_pop($guess);\n\
    \    \n    return array_map(function ($a, $b) {\n        return abs($a-$correct);\n\
    \    }, $game, $guess);\n}\n\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_map(): Argument #1 ($callback)\
    \ must be a valid callback or null, function \"absval\" not found or invalid function\
    \ name in /tmp/tmphxafc7di.php:15\nStack trace:\n#0 /tmp/tmphxafc7di.php(15):\
    \ array_map('absval', Array)\n#1 /tmp/tmphxafc7di.php(24): compare(Array, Array)\n\
    #2 /tmp/tmphxafc7di.php(28): candidate(Array, Array)\n#3 /tmp/tmphxafc7di.php(34):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmphxafc7di.php on line 15\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    \n    $game = array_unique($game);\n    $guess = array_unique($guess);\n\
    \    $diff = array_fill(0, count($guess), 0);\n    \n    foreach ($guess as $key\
    \ => $guess) {\n        // If the guess is a real score, we can compare it to\
    \ every possible score in the game\n        if (array_key_exists($key, $game))\
    \ {\n            foreach ($game as $value) {\n                // If we have found\
    \ a match, we need to calculate how far off it is\n                if ($value\
    \ == $guess) {\n                    $diff[$key] = $diff[$key] + 0;\n         \
    \       } else {\n                    // The difference between the guess and\
    \ the score\n                    $diff[$key] = abs($guess - $value);\n       \
    \         }\n            }\n        }\n    }\n    return $diff;\n}\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps_auhrar.php:41\n\
    Stack trace:\n#0 /tmp/tmps_auhrar.php(47): test()\n#1 {main}\n  thrown in /tmp/tmps_auhrar.php\
    \ on line 41\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n\t$result = array();\n\t$guesses = array_filter($guess);\n\t$games\
    \ = array_filter($game);\n\tforeach($guesses as $key => $guess) {\n\t\t$result[$key]\
    \ = abs($games[$key] - $guess);\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7rvvmkx5.php:30\n\
    Stack trace:\n#0 /tmp/tmp7rvvmkx5.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp7rvvmkx5.php\
    \ on line 30\n"
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $retval = array();\n    for ($i = 0; $i < count($game); $i++)\
    \ {\n        if ($game[$i] === $guess[$i]) {\n            $retval[$i] = 0;\n \
    \       } else {\n            $retval[$i] = abs($guess[$i] - $game[$i]);\n   \
    \     }\n    }\n    return $retval;\n}\n\nfunction candidate(...$args) {\n   \
    \ return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = array();\n    for($i = 0; $i < count($game); $i++){\n\
    \        $result[$i] = abs($game[$i] - $guess[$i]);\n    }\n    return $result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer, but I can't get the right\
    \ result\n<|/ c |>\n<| c |>\nI just wanted to post something that worked. Thanks\
    \ again for your help. You saved me a lot of time and frustration. Just another\
    \ question: can you explain to me the reason behind this line: array_map('array_sum',\
    \ $result); ?\n<|/ c |>\n<| c |>\n- yes of course. array_sum() is the equivalent\
    \ of summing all the elements of a numeric array. Since you have a different number\
    \ of elements in each array, you cannot use array_sum() to sum them, because they\
    \ have different lengths. You need to use array_map() to make them all the same\
    \ length. array_map() is used to apply a function to each element of an array.\
    \ See [PHP Docs](http://php.net/manual/en/function.array-map.php).\n<|/ c |>\n\
    <| c |>\nOh I see, thanks for your explanations. I actually wanted to learn these\
    \ things so I appreciate your help. Thank you very much.\n<|/ c |>\n<| a tags=php\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpf8524s0t.php
    on line 21

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $guesses = array_fill(0, count($game), 0);\n    $scores = array_fill(0,\
    \ count($game), 0);\n    foreach($game as $i => $score) {\n        $guesses[$i]\
    \ = $i;\n        $scores[$i] = $score;\n    }\n    $correct_guesses = array_fill(0,\
    \ count($game), 0);\n    foreach($guess as $i => $guess) {\n        $correct_guesses[$i]\
    \ = (isset($guesses[$i]) && $guesses[$i] == $i ? 0 : $i - $guesses[$i]);\n   \
    \ }\n    $correct_scores = array_fill(0, count($game), 0);\n    foreach($guesses\
    \ as $i => $guess) {\n        if($guesses[$i] == $i) {\n            $correct_scores[$i]\
    \ = $scores[$i];\n        } else {\n            $correct_scores[$i] = abs($guess\
    \ - $scores[$i]);\n        }\n    }\n    $score = array();\n    for($i = 0; $i\
    \ < count($game); $i++) {\n        $score[] = (isset($guesses[$i]) && $guesses[$i]\
    \ == $i ? 0 : $i - $guesses[$i]);\n    }\n    return $score;\n}\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpytq9l0x7.php:44\n\
    Stack trace:\n#0 /tmp/tmpytq9l0x7.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpytq9l0x7.php\
    \ on line 44\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = array();\n    foreach($guess as $key => $guess) {\n\
    \        $result[$key] = abs($guess - $game[$key]);\n    }\n    return $result;\n\
    }\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 tags=arrays,php |>\nThis function\
    \ will help you.\n<code>\n<?php\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpsj94sp1s.php
    on line 21

    '
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = array();\n    $score_length = count($game);\n    $guess_length\
    \ = count($guess);\n    for($i = 0; $i < $score_length; $i++) {\n        if($game[$i]\
    \ == $guess[$i]) {\n            $result[$i] = 0;\n        } else {\n         \
    \   $result[$i] = abs($guess[$i] - $game[$i]);\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $score = 0;\n    $maxScore = count($game);\n    foreach ($guess\
    \ as $i => $guess) {\n        $maxScore--;\n        if ($game[$i] < $guess) {\n\
    \            $score++;\n        } else if ($game[$i] > $guess) {\n           \
    \ $score = abs($game[$i] - $guess);\n        } else {\n            $score = 0;\n\
    \        }\n        if ($score >= $maxScore) {\n            break;\n        }\n\
    \    }\n    return array($score);\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n\
    <| c |>\nThank you for you help! Your code is working fine, but it still has one\
    \ issue. I used this code in my project but it is not giving the correct results.\
    \ Please see my updated post for the code.\n<|/ c |>\n<| c |>\nCan you give me\
    \ an example of a score array, and a guess array, and what the result should be?\n\
    <|/ c |>\n<| c |>\nSure, I will update my post right away. The scores are from\
    \ 1 to 9 and guesses are from 1 to 7. As you can see the last result should be\
    \ 8, but it gives 9.\n<|/ c |>\n<| c |>\nI updated my post, I hope it will help\
    \ you understand my problem.\n<|/ c |>\n<| c |>\nIt works, thank you very much\
    \ for your effort. I will try to understand your code and try to fix it myself.\
    \ Thank you very much once again.\n<|/ c |>\n<| a tags=php,arrays,sorting dscore=0\
    \ |>\nAs per your question :\n\nReturn an array of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\nthe value is 0, and\
    \ if not, the value is the absolute difference between the guess and the score.\n\
    Example:\ncompare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0,\
    \ 0, 0, 0, 3, 3)\n\nPlease check my code below:\n<code>\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpv63ts8nb.php
    on line 32

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    if (count($game) != count($guess)) {\n        return array(0);\n\
    \    }\n\n    // create an array of all matches\n    $matches = array();\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $matches[$i] = $i;\n        }\n    }\n\n    // calculate scores\
    \ for each match\n    $scores = array();\n    for ($i = 0; $i < count($matches);\
    \ $i++) {\n        $scores[] = $guess[$matches[$i]] - $game[$matches[$i]];\n \
    \   }\n\n    // calculate scores for each match and filter out any zero\n    $scores_to_return\
    \ = array();\n    for ($i = 0; $i < count($scores); $i++) {\n        if ($scores[$i]\
    \ == 0) {\n            continue;\n        }\n        $scores_to_return[] = $scores[$i];\n\
    \    }\n\n    return $scores_to_return;\n}\n\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1ipnrpl.php:50\n\
    Stack trace:\n#0 /tmp/tmpd1ipnrpl.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpd1ipnrpl.php\
    \ on line 50\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $difference = array();\n    foreach ($guess as $index => $guess)\
    \ {\n        if ($game[$index] == $guess) {\n            $difference[$index] =\
    \ 0;\n        } else {\n            $difference[$index] = abs($game[$index] -\
    \ $guess);\n        }\n    }\n    return $difference;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI like this solution much better than the one I was trying to.\
    \ I was trying more and more complex logic but this one made it easier. Thanks\
    \ a lot for your help!\n<|/ c |>\n<| c |>\nYour welcome and I'm glad I could help.\
    \ :)\n<|/ c |>\n<| a dscore=0 |>\nThe answer is very simple in PHP which can be\
    \ easily implemented using PHP's array_diff and array_intersect functions. Check\
    \ my code below.\n<code>\n<?php\n$arr1 = [1, 2, 3, 4, 5];\n$arr2 = [0, 1, 2, 3];\n\
    $result = array_diff($arr1, $arr2);\n$result = array_intersect($arr2, $result);\n\
    echo \"<pre>\";\nprint_r($result);\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp3sz9_z6g.php
    on line 25

    '
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n  $differences = array();\n  \n  // Start with some value that is\
    \ definitely larger than the maximum.\n  // We'll subtract it later when we start\
    \ computing the difference to see if it's right.\n  $diff = 1000000;\n  \n  //\
    \ Iterate through each guess\n  foreach ($guess as $idx => $guess) {\n    // Compute\
    \ how far off the guess was to the score\n    $diff = $game[$idx] - $guess;\n\
    \    \n    // If the guess that was correct and it's difference is less than 0,\
    \ that means the difference is wrong\n    if ($diff < 0 && $diff > $diff) {\n\
    \      $differences[$idx] = $diff;\n    }\n    \n    // If that guess was incorrect,\
    \ subtract the absolute difference between the score and the guess\n    else {\n\
    \      $differences[$idx] = abs($diff);\n    }\n  }\n  \n  return $differences;\n\
    }\n\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = array();\n    foreach($game as $index => $value) {\n\
    \        $result[$index] = abs($value - $guess[$index]);\n    }\n    return $result;\n\
    }\n\n$scores = [\n    array(10, 20, 30, 40),\n    array(-9, -9, -9, -9),\n];\n\
    $guesses = [\n    array(10, 10, 10, 10),\n    array(1, 1, 2, 2, 2),\n];\n$expected\
    \ = [\n    array(10, 0, 0, 0, 0),\n    array(0, 6, 0, 0, 6),\n];\n\n$actual =\
    \ compare($scores, $guesses);\n\nprint_r($actual);\n</code>\n<|/ a tags=math,php,algorithm,javascript,arrays\
    \ |>\n<| c |>\nThanks, but I am looking for some PHP solution which can work on\
    \ PHP 5.2\n<|/ c |>\n<| c |>\n- I added a PHP 5.2 solution anyway. Let me know\
    \ if it helps you. :)\n<|/ c |>\n<| a |>\nA PHP solution\nThe PHP code below uses\
    \ two nested foreach loops to iterate through the arrays, and find the absolute\
    \ difference between the current element and the next element in the array. We\
    \ then add all the differences together and put them into the $total variable.\
    \ \nThe first foreach loop iterates through the initial array, and the second\
    \ foreach loop iterates through each element in the $scores array.\n<code>\n$scores\
    \ = [\n    10, 20, 30, 40,\n    -9, -9, -9, -9,\n];\n$guesses = [\n    10, 10,\
    \ 10, 10,\n    1, 2, 2, 2,\n];\n$total = array();\n\nforeach($scores as $i =>\
    \ $value) {\n    $total[$i] = 0;\n    foreach($guesses as $j => $guess) {\n  \
    \      $total[$i] += abs($value - $guess);\n    }\n}\n\nvar_dump($total);\n</code>\n\
    <|/ a tags=math,php,algorithm,javascript,arrays dscore=1 |>\n<| c |>\nthanks,\
    \ but I am looking for some PHP solution which can work on PHP 5.2\n<|/ c |>\n\
    <| a tags=math,php,algorithm,javascript,arrays |>\nThis works fine :) \n<code>\n\
    function candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpogh1u0xc.php
    on line 38

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    // Write your code here.\n}\n\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdp3neiez.php:23\n\
    Stack trace:\n#0 /tmp/tmpdp3neiez.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpdp3neiez.php\
    \ on line 23\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $results = [];\n    for($i = 0; $i < count($guess); $i++) {\n\
    \        if($game[$i] == $guess[$i]) {\n            $results[$i] = 0;\n      \
    \  } else {\n            $results[$i] = abs($game[$i] - $guess[$i]);\n       \
    \ }\n    }\n    return $results;\n}\n</code>\n<|/ a tags=php,arrays dscore=1 |>\n\
    <| c |>\nThank you! I'll try this now!\n<|/ c |>\n<| c |>\nThis doesn't seem to\
    \ work. Could you explain how this works in more depth, because I understand most\
    \ of it, but I can't quite understand how this works\n<|/ c |>\n<| c |>\nI've\
    \ updated my answer to include a full explanation.\n<|/ c |>\n<| c |>\nThanks,\
    \ it works now, but I don't understand it fully. Could you explain a bit more?\n\
    <|/ c |>\n<| c |>\nI've added a few comments explaining each function and what\
    \ the function is doing (which is what I thought was your intention).\n<|/ c |>\n\
    <| a tags=php,arrays dscore=0 |>\n<code>\nfunction candidate(...$args) {\n   \
    \ return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp1ktd4a14.php
    on line 25

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    \n    $return = array();\n    \n    // Your code goes here\n\
    \    \n    return $return;\n}\n</cell>\n<cell>\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpf6avwjla.php
    on line 22

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = [];\n    foreach ($game as $key => $value) {\n    \
    \    // If two values match, we can determine a total score based on how far off\n\
    \        // we were for each element\n        if ($guess == $value) {\n      \
    \      // if the difference between the guess and the score is positive, \n  \
    \          // then we return an array element of 1\n            $result[$key]\
    \ = 1;\n        } elseif ($guess - $value > $value - $guess) {\n            $result[$key]\
    \ = 0;\n        } else {\n            $result[$key] = abs($value - $guess);\n\
    \        }\n    }\n    return $result;\n}\n</code>\nI hope this helps you get\
    \ started.\n<|/ a tags=math,php,algorithm |>\n<| c |>\nI really appreciate you\
    \ taking the time to write this out. Thanks for taking the time to explain it.\n\
    <|/ c |>\n<| a dscore=1 |>\nIn pseudo-code:\n<code>\nresult = []\n\nfor i = 1..n:\n\
    \    if game[i] == guess[i]:\n        result[i] = 1\n    else\n        if game[i]\
    \ > guess[i]:\n            result[i] = 0\n        else:\n            result[i]\
    \ = abs(game[i] - guess[i])\n</code>\n<|/ a tags=math,php,algorithm |>\n<| a |>\n\
    Here is your solution in PHP. It doesn't have any fancy logic, but is pretty easy\
    \ to understand.\n<code>\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpkyavxzp5.php
    on line 31

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $score = 0;\n    $maxdiff = 0;\n    foreach ($game as $idx =>\
    \ $match) {\n        if ($guess == $match) {\n            $score = 0;\n      \
    \  } else {\n            $maxdiff = Math.abs($guess - $match);\n            $score\
    \ = $maxdiff;\n        }\n    }\n    return array($score, $maxdiff);\n}\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Undefined constant \"Math\" in /tmp/tmp0u_j99vx.php:21\n\
    Stack trace:\n#0 /tmp/tmp0u_j99vx.php(28): compare(Array, Array)\n#1 /tmp/tmp0u_j99vx.php(32):\
    \ candidate(Array, Array)\n#2 /tmp/tmp0u_j99vx.php(38): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmp0u_j99vx.php on line 21\n"
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $diff = [];\n    for ($i = 0; $i < count($game); $i++) {\n  \
    \      if ($game[$i] <= $guess[$i]) {\n            $diff[$i] = $game[$i] - $guess[$i];\n\
    \        } else {\n            $diff[$i] = abs($game[$i] - $guess[$i]);\n    \
    \    }\n    }\n    return $diff;\n}\n\nfunction candidate(...$args) {\n    return\
    \ compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $guesses = array();\n    $score = 0;\n    for($i = 0; $i < count($guess);\
    \ $i++) {\n        if($game[$i] == $guess[$i]) $guesses[$i] = 0;\n        else\
    \ $guesses[$i] = abs($guess[$i] - $game[$i]);\n    }\n    return $guesses;\n}\n\
    \n$game = array(\"A\",\"B\",\"C\",\"D\",\"E\",\"F\");\n$guess = array(\"A\",\"\
    A\",\"B\",\"B\",\"C\",\"C\");\n\n$guesses = compare($game, $guess);\n\n$result\
    \ = array_sum($guesses);\necho $result;\n\nfunction candidate(...$args) {\n  \
    \  return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: string -\
    \ string in /tmp/tmphm1g5uz7.php:19\nStack trace:\n#0 /tmp/tmphm1g5uz7.php(27):\
    \ compare(Array, Array)\n#1 {main}\n  thrown in /tmp/tmphm1g5uz7.php on line 19\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    // Write your code here.\n    // return $game-$guess;\n    $result=array();\n\
    \    for($i=0;$i<count($game);$i++){\n        $result[$i]=$game[$i]-$guess[$i];\n\
    \    }\n    return $result;\n}\n</code>\n<|/ a tags=php,math,arrays dscore=0 |>\n\
    <| c |>\nThis won't work at all in that case, since your solution returns an array\
    \ of arrays and not a single array as asked.\n<|/ c |>\n<| c |>\nThis is not the\
    \ question. Please read it again :P\n<|/ c |>\n<| a dscore=0 |>\nMy approach to\
    \ this would be to map the array onto itself, so that if you try to guess a number,\
    \ it'll give you the closest number to what you've already guessed (if the guess\
    \ is closer than the last guess), otherwise it'll just give you the number you've\
    \ already guessed + the guess, e.g.\n<code>\n$guesses = [10, 5, 10, 20, 5, 20];\n\
    $scores = [1, 3, 10, 5, 10, 8];\n$mapped = array_map(function ($guess) use ($scores)\
    \ {\n    return $guess + $scores;\n}, $guesses);\n\n$mapped = [\n    10  => [5,\
    \ 10, 5, 20],\n    5   => [10, 10, 20, 8],\n    10  => [5, 10, 5, 20],\n    20\
    \  => [10, 5, 10, 8],\n];\n</code>\nNow you can iterate over the keys of the array\
    \ to guess what number the guesses should be mapped to:\n<code>\n$guesses = [10,\
    \ 5, 10, 20, 5, 20];\n$scores = [1, 3, 10, 5, 10, 8];\n$mapped = array_map(function\
    \ ($guess) use ($scores) {\n    return $guess + $scores;\n}, $guesses);\n\nforeach\
    \ ($scores as $index => $score) {\n    $closest = $mapped[$index][0];\n    $guess\
    \ = $mapped[$index][1];\n\n    $diff = $score - $guess;\n    if ($diff < 0) {\n\
    \        $closest += $diff;\n    }\n\n    $mapped[$index] = [\n        $closest,\n\
    \        $guess\n    ];\n}\n\nprint_r($mapped);\n</code>\nThe code outputs:\n\
    <code>\nArray\n(\n    [10] => Array\n        (\n            [0] => 10\n      \
    \      [1] => 5\n        )\n\n    [5] => Array\n        (\n            [0] =>\
    \ 10\n            [1] => 10\n        )\n\n    [10] => Array\n        (\n     \
    \       [0] => 5\n            [1] => 10\n        )\n\n    [20\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpwpzw59xo.php
    on line 23

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    \n    // Okay, we're going to do some mathematical work with\
    \ our arrays. \n    // Firstly, we sort the scores in reverse order. \n    //\
    \ This allows us to take advantage of their order being very important. \n   \
    \ // Secondly, we subtract away their guesses to get a new set of scores that\
    \ will sort nicely.\n    // The result is that we have a set of sorted scores\
    \ that is going to be the main thing that we'll be doing\n    // our comparison\
    \ on.\n    // \n    // So, here we define our score array.\n    // This starts\
    \ out as an array of all the scores (from highest to lowest), but is sorted from\
    \ lowest to highest.\n    $score = [];\n    \n    // Now, loop over every guess\
    \ in the guess array, and add a score to it using the score array.\n    foreach($guess\
    \ as $k => $v){\n        $score[] = $game[$k] - $v;\n    }\n    \n    // Now that\
    \ we have our scores sorted from lowest to highest, we sort them from highest\
    \ to lowest.\n    arsort($score);\n    \n    // Okay, now we need to create our\
    \ array of guesses.\n    // This will be an array of integers from lowest to highest\
    \ that each index represents.\n    // So, if the lowest score in the score array\
    \ is -2, the guesses[0] would return -2;\n    // The next guesses index would\
    \ return 0, and so on.\n    $guesses = [];\n    \n    // We're going to loop over\
    \ every score in the score array.\n    // So, for every score, loop over every\
    \ guess in the guesses array and add the difference between the score and guess\
    \ to the guesses array.\n    for($i = 0; $i < count($score); $i++){\n        foreach($guesses\
    \ as $k => $v){\n            $guesses[] = $v + $score[$i];\n        }\n    }\n\
    \    \n    // Finally, we're going to return an array that consists of the difference\
    \ between the guess and the score, with the guesses sorted in descending order.\n\
    \    return $guesses;\n}\n\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpip79vawx.php:58\n\
    Stack trace:\n#0 /tmp/tmpip79vawx.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpip79vawx.php\
    \ on line 58\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $a = 0;\n    $b = 0;\n    \n    // If both arrays are empty,\
    \ return an empty array\n    if (empty($game) || empty($guess)) {\n        return\
    \ array(0);\n    }\n    \n    // Loop through all values in $game and all values\
    \ in $guess\n    foreach($game as $key => $value) {\n        $b = $b + $value;\n\
    \    }\n    foreach($guess as $key => $value) {\n        $a = $a + $value;\n \
    \   }\n    \n    // Create a count for the number of differences between the arrays\
    \ and return the result array\n    return array(abs($a-$b));\n}\n\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5sjb96wc.php:40\n\
    Stack trace:\n#0 /tmp/tmp5sjb96wc.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp5sjb96wc.php\
    \ on line 40\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n\t$scores = array_intersect($game, $guess);\n\tarray_walk($scores,\
    \ function(&$value){$value = ($value >= 0) ? $value : abs($value); });\n\t$game\
    \ = array_intersect($game, $guess);\n\treturn $scores;\n}\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplcgza3ck.php:25\n\
    Stack trace:\n#0 /tmp/tmplcgza3ck.php(31): test()\n#1 {main}\n  thrown in /tmp/tmplcgza3ck.php\
    \ on line 25\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $correct = 0;\n    $diff = 0;\n    foreach ($game as $key =>\
    \ $value) {\n        if ($value == $guess[$key]) {\n            $correct += 1;\n\
    \        } else {\n            $diff += abs($guess[$key] - $value);\n        }\n\
    \    }\n    return array($diff, $correct);\n}\n\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3bj8vn07.php:32\n\
    Stack trace:\n#0 /tmp/tmp3bj8vn07.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp3bj8vn07.php\
    \ on line 32\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n  $correct = count(array_intersect($guess, $game)) == count($guess);\n\
    \  if (!$correct) return array_map('abs', $guess);\n  return array(0, array_map('abs',\
    \ $guess));\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhy do you use `array_filter()`\
    \ at first and then `count()` the filtered array? It doesn't do anything useful.\n\
    <|/ c |>\n<| c |>\n, you're right, of course it doesn't do anything. I didn't\
    \ realize there could be multiple matches, my bad. Edited.\n<|/ c |>\n<| c |>\n\
    , you are very welcome. Have you tried the solutions posted here? If they work,\
    \ please accept one by clicking the check mark to the left of the answer.\n<|/\
    \ c |>\n<| a tags=php,algorithm |>\n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmprxzbelmv.php
    on line 19

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $game_len = count($game);\n    $guess_len = count($guess);\n\
    \    $diff = 0;\n    \n    if ($game_len < $guess_len) {\n        for ($i = 0;\
    \ $i < $game_len; $i++) {\n            if ($game[$i] === $guess[$i]) {\n     \
    \           $diff++;\n            }\n        }\n        \n        return array(\n\
    \            \"result\" => $diff,\n            \"expected\" => $game_len,\n  \
    \      );\n    } else if ($game_len > $guess_len) {\n        for ($i = 0; $i <\
    \ $guess_len; $i++) {\n            if ($guess[$i] === $game[$i]) {\n         \
    \       $diff++;\n            }\n        }\n        \n        return array(\n\
    \            \"result\" => -$diff,\n            \"expected\" => -$guess_len,\n\
    \        );\n    } else if ($game_len == $guess_len) {\n        for ($i = 0; $i\
    \ < $guess_len; $i++) {\n            if ($guess[$i] === $game[$i]) {\n       \
    \         $diff++;\n            }\n        }\n        \n        return array(\n\
    \            \"result\" => $diff,\n            \"expected\" => 0,\n        );\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1xs907gy.php:60\n\
    Stack trace:\n#0 /tmp/tmp1xs907gy.php(66): test()\n#1 {main}\n  thrown in /tmp/tmp1xs907gy.php\
    \ on line 60\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    // your code here\n\n    $result = array();\n\n    for ($i =\
    \ 0; $i < count($guess); $i++) {\n        if($game[$i] == $guess[$i]){\n     \
    \       $result[$i] = $i;\n        }else{\n            $result[$i] = abs($guess[$i]\
    \ - $game[$i]);\n        }\n    }\n    return $result;\n}\n\n$game = array(1,\
    \ 2, 3, 4, 5, 1);\n$guess = array(1, 2, 3, 4, 2, -2);\n\n$result = compare($game,\
    \ $guess);\n\nprint_r($result);\n</code>\n<|/ a dscore=0 tags=php |>\n<| a dscore=0\
    \ tags=php |>\nOkay, so here's another approach. I've modified the compare() function\
    \ slightly (using array_diff()).\nIt loops through each element of the $guess\
    \ array and if the $game array is identical (same values), it returns true.\n\
    Otherwise, it returns false if the $guess array contains any elements that are\
    \ not contained in the $game array and returns the difference between the $game\
    \ and $guess arrays as a third return value.\n<code>\n$game = array(1, 2, 3, 4,\
    \ 5, 1);\n$guess = array(1, 2, 3, 4, 2, -2);\n\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp3b4eddma.php
    on line 35

    '
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    // Your code here\n    $return = array();\n    $numGuesses =\
    \ count($guess);\n    for ($i = 0; $i < $numGuesses; $i++) {\n        $return[$i]\
    \ = abs($guess[$i] - $game[$i]);\n    }\n    return $return;\n}\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = array();\n    // TODO: Implement a loop to compare\
    \ each element in the game with each element in the guess\n    foreach ($game\
    \ as $game_index => $game_value) {\n        foreach ($guess as $guess_index =>\
    \ $guess_value) {\n            // TODO: Implement a way to compare each element\
    \ to its corresponding element in the guess\n            if ($game_value == $guess_value)\
    \ {\n                $result[$game_index] = $game_value;\n            } elseif\
    \ ($game_value = $guess_value) {\n                $result[$game_index] = $game_value;\n\
    \            } else {\n                $result[$game_index] = abs($game_value-$guess_value);\n\
    \            }\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7n2xbguc.php:36\n\
    Stack trace:\n#0 /tmp/tmp7n2xbguc.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp7n2xbguc.php\
    \ on line 36\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $aLen = count($game);\n    $gLen = count($guess);\n    $result\
    \ = [];\n    for ($i=0; $i<$aLen; $i++) {\n        $result[] = $game[$i] - $guess[$i];\n\
    \    }\n    return $result;\n}\n</code>\n<|/ a dscore=0 tags=algorithm,math,arrays\
    \ |>\n<| c |>\nThis doesn't seem to be correct: try it with `$guess = [0, 0, 0,\
    \ 0, 0, 0]; $game = [5, 1, 4, 3, 2, 0]; compare($game, $guess);`\n<|/ c |>\n<|\
    \ a tags=algorithm,math,arrays dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp42ylfi7r.php
    on line 23

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n   $answer = $guess;\n   $result = [];\n   $correct = 0;\n   $total\
    \ = 0;\n   \n   foreach($game as $i => $guess)\n   {\n       if($guess == $answer[$i])\n\
    \       {\n           $correct++;\n       }\n       else\n       {\n         \
    \  $result[$i] = 0;\n           $total++;\n       }\n   }\n\n   if($correct ==\
    \ count($guess))\n   {\n       foreach($guess as $i => $guess)\n       {\n   \
    \        $result[$i] = abs($guess - $answer[$i]);\n           $total++;\n    \
    \   }\n   }\n   \n   return $result;\n}\n</cell>\n<text>\nNext we write a function\
    \ to check a user's guess against the secret answer\n\n\n</text>\n<cell>\n%%file\
    \ check.py\n\n<?php\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpjemku4mj.php
    on line 44

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    \n    $gameSorted = $game;\n    sort($gameSorted);\n    \n  \
    \  $guessSorted = $guess;\n    sort($guessSorted);\n    \n    $result = [];\n\
    \    \n    foreach($guessSorted as $key => $value) {\n        \n        $result[$key]\
    \ = $gameSorted[$key] - $value;\n        \n    }\n    \n    \n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_s792uci.php:39\n\
    Stack trace:\n#0 /tmp/tmp_s792uci.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp_s792uci.php\
    \ on line 39\n"
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $correct = array();\n    for ($i = 0; $i < count($game); $i++)\
    \ {\n        $correct[$i] = abs($game[$i] - $guess[$i]);\n    }\n    return $correct;\n\
    }\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $score = array_map(function($g) { return abs($g - $game); },\
    \ $guess);\n    $results = array_count_values($guess);\n    foreach($guess as\
    \ $k => $v){\n        if ($v < $game[$k]) $results[$k] = 0;\n        elseif ($game[$k]\
    \ != $v) $results[$k] = abs($v - $game[$k]);\n    }\n    return $results;\n}\n\
    </code>\n<|/ a |>\n<| a tags=sorting,arrays,php dscore=2 |>\nThis can solve the\
    \ problem of returning values as array. Here is an example:\n<code>\n<?php\n\n\
    function candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmprgi6fk7q.php
    on line 23

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $diffs = array();\n    $guesses = array_flip($guess);\n    foreach($game\
    \ as $i => $score) {\n        if(isset($guesses[$i])) $diffs[$i] = abs($guesses[$i]\
    \ - $score);\n        else $diffs[$i] = 0;\n    }\n    return $diffs;\n}\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpud9yljaa.php:28\n\
    Stack trace:\n#0 /tmp/tmpud9yljaa.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpud9yljaa.php\
    \ on line 28\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $guesses = array();\n    $scores = array();\n    for ($i = 0;\
    \ $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i]) {\n       \
    \     $guesses[$i] = $i;\n            $scores[$i] = $game[$i];\n        } else\
    \ {\n            $guesses[$i] = $i;\n            $scores[$i] = abs($guess[$i]\
    \ - $game[$i]);\n        }\n    }\n    return $scores;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nCan you please explain what is wrong in the above algorithm?\n<|/ c |>\n\
    <| a |>\nI have modified the code given by. With a little modification I got this\
    \ to work for me. The code works fine for small numbers, however it gives inaccurate\
    \ results for big numbers. The problem is due to the limit of the for loop. Below\
    \ is the modified code.\n<code>\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp_xstoawq.php
    on line 28

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $total = 0;\n    foreach ($game as $i => $score) {\n        if\
    \ ($score == $guess[$i]) {\n            $total += $score;\n        } elseif ($score\
    \ > $guess[$i]) {\n            $total = $score;\n        }\n    }\n    return\
    \ $total;\n}\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ime8pqn.php:30\n\
    Stack trace:\n#0 /tmp/tmp4ime8pqn.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp4ime8pqn.php\
    \ on line 30\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    // your code here\n    $score = 0;\n    $arraySize = count($guess);\n\
    \    foreach ($guess as $key => $value) {\n        $score += $game[$key] - $value;\n\
    \    }\n    $results = array();\n    for ($i = 0; $i < $arraySize; $i++) {\n \
    \       $results[$i] = $game[$i] - $guess;\n    }\n    return $results;\n}\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int - array\
    \ in /tmp/tmpdl2xg0eo.php:23\nStack trace:\n#0 /tmp/tmpdl2xg0eo.php(28): compare(Array,\
    \ Array)\n#1 /tmp/tmpdl2xg0eo.php(32): candidate(Array, Array)\n#2 /tmp/tmpdl2xg0eo.php(38):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpdl2xg0eo.php on line 23\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n  // Write your function here\n}\n\n$a = array(3, 2, -1, 3, -1, 0);\n\
    $b = array(6, -5, 7, 4, -1, -3);\n$c = array(5, 7, 7, -6, -4, 6);\n\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw02r47bi.php:27\n\
    Stack trace:\n#0 /tmp/tmpw02r47bi.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpw02r47bi.php\
    \ on line 27\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = array();\n    // YOUR CODE STARTS HERE\n    \n    //\
    \ YOUR CODE ENDS HERE\n    return $result;\n}\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpce9a86fs.php:26\n\
    Stack trace:\n#0 /tmp/tmpce9a86fs.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpce9a86fs.php\
    \ on line 26\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $game = array($game);\n    $guess = array($guess);\n    $result\
    \ = array();\n    for ($i = 0; $i < count($game); $i++) {\n        for ($j = 0;\
    \ $j < count($guess); $j++) {\n            $result[$i] += abs($game[$i] - $guess[$j]);\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: array - array\
    \ in /tmp/tmp2ieeeoj_.php:20\nStack trace:\n#0 /tmp/tmp2ieeeoj_.php(27): compare(Array,\
    \ Array)\n#1 /tmp/tmp2ieeeoj_.php(31): candidate(Array, Array)\n#2 /tmp/tmp2ieeeoj_.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2ieeeoj_.php on line 20\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $gameScores = array_count_values($game);\n    $guessScores =\
    \ array_count_values($guess);\n    $result = array();\n    foreach ($game as $index\
    \ => $score) {\n        $result[$index] = 0;\n        $correctGuess = ($guessScores[$index]\
    \ > 0) ? 1 : 0;\n        $guess = $guess[$index];\n        if ($correctGuess ==\
    \ $guessScores[$index]) {\n            $result[$index] = $score;\n        } else\
    \ {\n            $result[$index] = abs($score - $guess);\n        }\n    }\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpcdsou_jp.php on line 20\n\n\
    Warning: Undefined array key 0 in /tmp/tmpcdsou_jp.php on line 22\n\nWarning:\
    \ Trying to access array offset on value of type int in /tmp/tmpcdsou_jp.php on\
    \ line 21\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpcdsou_jp.php\
    \ on line 21\n\nWarning: Trying to access array offset on value of type null in\
    \ /tmp/tmpcdsou_jp.php on line 21\n\nWarning: Trying to access array offset on\
    \ value of type null in /tmp/tmpcdsou_jp.php on line 21\n\nWarning: Undefined\
    \ array key 5 in /tmp/tmpcdsou_jp.php on line 20\n\nWarning: Trying to access\
    \ array offset on value of type null in /tmp/tmpcdsou_jp.php on line 21\n\nWarning:\
    \ Undefined array key 5 in /tmp/tmpcdsou_jp.php on line 22\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpcdsou_jp.php:36\nStack trace:\n#0 /tmp/tmpcdsou_jp.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpcdsou_jp.php on line 36\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = array();\n    $gameLength = count($game);\n    $guessLength\
    \ = count($guess);\n    for ($i = 0; $i < $gameLength; $i++) {\n        $result[$i]\
    \ = $game[$i] - $guess[$i];\n    }\n    for ($i = 0; $i < $guessLength; $i++)\
    \ {\n        $result[$gameLength + $i] = abs($result[$gameLength - $i]);\n   \
    \ }\n    return $result;\n}\n\n$game = array(\n    array(0, 0, 0),\n    array(3,\
    \ 3, 3),\n    array(3, 3, 3),\n    array(1, 0, 3),\n    array(0, 0, 0),\n    array(3,\
    \ 3, 3),\n    array(3, 3, 3)\n);\n$guess = array(1, 2, 3, 3, 4, 0);\n$result =\
    \ compare($game, $guess);\nvar_dump($result);\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: array - int\
    \ in /tmp/tmp235kgr0e.php:19\nStack trace:\n#0 /tmp/tmp235kgr0e.php(37): compare(Array,\
    \ Array)\n#1 {main}\n  thrown in /tmp/tmp235kgr0e.php on line 19\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $scores = [];\n    foreach ($game as $k => $v) {\n        if\
    \ ($guess[$k] >= 0) {\n            $scores[$k] = 0;\n        } else if ($guess[$k]\
    \ == 0) {\n            $scores[$k] = $v;\n        } else {\n            $scores[$k]\
    \ = abs($guess[$k] - $v);\n        }\n    }\n    return $scores;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis is brilliant! Thanks. I've implemented it but\
    \ it's not giving me the right answer. I'm not sure what's going on. My guess\
    \ is that it's comparing each element of each array independently. I'm trying\
    \ to make it compare them all at the same time.\n<|/ c |>\n<| c |>\nI fixed a\
    \ bug, turns out I forgot to reset the guess array after each iteration. Now it\
    \ works great! Thanks.\n<|/ c |>\n<| c |>\nThanks for your comment and for posting\
    \ your code. I just have one question: why do you think that this is correct?\
    \ The question says that if a person correctly guessed a number of matches, he/she\
    \ will get a score of zero. If this is true, why do you think that I get a score\
    \ of zero for every game?\n<|/ c |>\n<| c |>\nThe first array is sorted, but a\
    \ person could guess a number in the middle of the list. So we compare a person\
    \ guess to every number in the list, and then we add the absolute difference of\
    \ all the guesses to their score.\n<|/ c |>\n<| a tags=php,arrays |>\nThe function\
    \ below is based on's excellent answer above (I've only added a check to see if\
    \ there are any matches in the guess array).  It works correctly in the tests\
    \ I have given it.\n<code>\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmph1y7r4dj.php
    on line 27

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $guesses = array_fill(0, count($game), 0);\n    $max = $game[0];\n\
    \    $min = $game[0];\n    \n    foreach ($game as $key => $value) {\n       \
    \ $guesses[$key] = $max - $value;\n        if ($max < $value)\n            $max\
    \ = $value;\n        if ($value < $min)\n            $min = $value;\n    }\n\n\
    \    $result = array();\n\n    for ($i = 0; $i < count($guesses); $i++) {\n  \
    \      $result[$i] = $guesses[$i] - $guess[$i];\n        if ($result[$i] !== 0)\
    \ {\n            $result[$i] = abs($result[$i]);\n        } else\n           \
    \ $result[$i] = 0;\n    }\n\n    return $result;\n}\n</cell>\n<cell>\n%timeit\
    \ compare(game(100), guess(100))\n</cell>\n<cell>\n%timeit compare(game(200),\
    \ guess(200))\n</cell>\n<cell>\n%timeit compare(game(300), guess(300))\n</cell>\n\
    <cell>\n%timeit compare(game(500), guess(500))\n</cell>\n<cell>\n%timeit compare(game(700),\
    \ guess(700))\n</cell>\n<cell>\n%timeit compare(game(900), guess(900))\n</cell>\n\
    <text>\nIt looks like our algorithm is just about as fast as can be, even though\
    \ it was pretty inefficient.\n\nWe've also found out that our algorithm only works\
    \ as well as it's worth. In case it seems like we're not getting the best results,\
    \ let's take a look.\n\n\n</text>\n<cell>\ndef compare2($game, $guess):\n    #\
    \ Your code goes here\n    \nguesses = array_fill(0, count($game), 0)\nmax = $game[0]\n\
    min = $game[0]\n    \nfor key in range(len($game)):\n    guesses[key] = max -\
    \ $game[key]\n    if max < $game[key]:\n        max = $game[key]\n    if min >\
    \ $game[key]:\n        min = $game[key]\n    \nresult = array()\n    \nfor key\
    \ in range(len(guesses)):\n    result[key] = guesses[key] - guess[key]\n    if\
    \ result[key] != 0:\n        result[key] = abs(result[key])\n    else:\n     \
    \   result[key] = 0\n    \nreturn result\n</cell>\n<cell>\n%timeit compare2(game(100),\
    \ guess(100))\n</cell>\n<cell>\n%timeit compare2(game(200), gues\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpuvahdmcg.php
    on line 39

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n  $matches = array_count_values($game);\n  $diff = array_diff($guess,\
    \ $game);\n\n  return array_map(function($guess, $score) {\n    return $guess\
    \ == $score ? 0 : abs($guess - $score);\n  }, $guess, $diff);\n}\n\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc4f26lw2.php:28\n\
    Stack trace:\n#0 /tmp/tmpc4f26lw2.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpc4f26lw2.php\
    \ on line 28\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $game = $game;\n    $guess = $guess;\n    $count = count($game);\n\
    \    $correct_count = 0;\n    for ($i = 0; $i < $count; $i++) {\n        $diff\
    \ = $game[$i] - $guess[$i];\n        if ($diff == 0) {\n            $correct_count++;\n\
    \        } else {\n            $correct_count--;\n        }\n    }\n    $out =\
    \ [];\n    for ($i = 0; $i < $count; $i++) {\n        $out[] = ($correct_count\
    \ * $game[$i]) - ($correct_count * $guess[$i]);\n    }\n    return $out;\n}\n\n\
    $game = array(\n    1, 2, 3, 4,\n    5, 5, 5, 5,\n    6, 7, 8, 9,\n    10, 11,\
    \ 12, 13\n);\n$guess = array(\n    1, 2, 3, 4,\n    4, 5, 5, 5,\n    7, 8, 9,\
    \ 10,\n    11, 12, 13, 13\n);\necho '<pre>'.print_r(compare($game, $guess), true).'</pre>';\n\
    </code>\n<|/ a |>\n<| c |>\nThanks mate, that's exactly what I was looking for\
    \ :D\n<|/ c |>\n<| c |>\nI forgot to mention, I'm actually using the array_multisort()\
    \ function for this assignment :D\n<|/ c |>\n<| c |>\nThat's no problem! I've\
    \ never heard of that before, but it sounds like it will help a lot.\n<|/ c |>\n\
    <| c |>\nYes it did, I'm sure it'll come in handy in the future\n<|/ c |>\n<|\
    \ c |>\nIf you're using PHP >= 5.5 you can use array_column() to solve the array\
    \ access problem.\n<|/ c |>\n<| a dscore=2 tags=php,algorithm |>\nI think I got\
    \ this solved by myself.\nI've basically replaced the \"count\" with the \"foreach\"\
    \ loop and I haven't had a problem yet.\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpve8tgcps.php
    on line 47

    '
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $res = array();\n    $n = count($game);\n    $m = count($guess);\n\
    \    for ($i = 0; $i < $n; ++$i) {\n        if (!isset($game[$i])) {\n       \
    \     $res[$i] = $guess;\n            continue;\n        }\n        if (!isset($guess[$i]))\
    \ {\n            $res[$i] = $game;\n            continue;\n        }\n       \
    \ $diff = abs($game[$i] - $guess[$i]);\n        if ($diff < $game[$i]) {\n   \
    \         $res[$i] = $diff;\n        } else {\n            $res[$i] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $res;\n}\n\n$game = array(1,2,3,1,2,3);\n\
    $guess = array(1,0,1,3,0,1);\n$res = compare($game, $guess);\nvar_dump($res);\n\
    function candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(6) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(2)\n  [2]=>\n  int(2)\n \
    \ [3]=>\n  int(2)\n  [4]=>\n  int(2)\n  [5]=>\n  int(2)\n}\n"
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    if (count($game) != count($guess)) {\n        throw new InvalidArgumentException(\"\
    Number of games and guesses must be equal.\");\n    }\n    $score = [];\n    for\
    \ ($i = 0; $i < count($game); ++$i) {\n        $score[$i] = $game[$i] - $guess[$i];\n\
    \    }\n    return $score;\n}\n\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    // The algorithm is simple:\n    // If the guesses are equal,\
    \ return 0 because they both guessed correctly.\n    // Otherwise, return the\
    \ absolute difference between the score and the guess.\n    // This will be done\
    \ using a for loop.\n\n    // The simplest way would be to use a for loop and\
    \ check each element in the first array against the other:\n    // for ($i = 0;\
    \ $i < count($guess); $i++) {\n    //     if ($guess[$i] != $game[$i]) {\n   \
    \ //         return abs($guess[$i] - $game[$i]);\n    //     }\n    // }\n\n \
    \   // This approach however has an O(n2) runtime complexity, where n is the count\
    \ of arrays. The following approach \n    // uses a hash to store the result of\
    \ the comparisons. The results of the comparisons are stored as key-value pairs.\n\
    \    // The hash table has O(n) runtime complexity, where n is the count of arrays.\n\
    \n    $hash = [];\n    for ($i = 0; $i < count($game); $i++) {\n        $key =\
    \ hash($game[$i]);\n        if (!isset($hash[$key])) {\n            $hash[$key]\
    \ = abs($guess[$i] - $game[$i]);\n        }\n    }\n    return $hash;\n}\n\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ArgumentCountError: hash() expects at least 2 arguments,\
    \ 1 given in /tmp/tmp9hjql4jx.php:33\nStack trace:\n#0 /tmp/tmp9hjql4jx.php(33):\
    \ hash(1)\n#1 /tmp/tmp9hjql4jx.php(42): compare(Array, Array)\n#2 /tmp/tmp9hjql4jx.php(46):\
    \ candidate(Array, Array)\n#3 /tmp/tmp9hjql4jx.php(52): test()\n#4 {main}\n  thrown\
    \ in /tmp/tmp9hjql4jx.php on line 33\n"
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = array();\n\n    for ($i = 0; $i < count($game); $i++)\
    \ {\n        if ($game[$i] === $guess[$i]) {\n            $result[] = 0;\n   \
    \     } else {\n            $result[] = abs($game[$i] - $guess[$i]);\n       \
    \ }\n    }\n\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $gameLen = count($game);\n    $guessLen = count($guess);\n  \
    \  $score = $game[$gameLen - 1];\n    $result = [];\n    for ($i = 0; $i < $guessLen;\
    \ $i++) {\n        $result[$i] = $game[$gameLen - $guessLen + $i];\n    }\n  \
    \  for ($i = 0; $i < $guessLen; $i++) {\n        for ($j = $i + 1; $j < $guessLen;\
    \ $j++) {\n            $result[$i] = max($result[$i], $game[$gameLen - $guessLen\
    \ + $j]);\n        }\n    }\n    return $result;\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\nCan you please let me know why are you using max($result[$i], $game[$gameLen\
    \ - $guessLen + $j])?\n<|/ c |>\n<| c |>\nI believe it is the correct answer to\
    \ the question asked, because the question asked is to \"determine if a person\
    \ correctly guessed the results of a number of matches\". So, for each \"match\"\
    \ in the arrays (the game and the guesses) we need to determine if the user was\
    \ correctly matched or not. So, that means that the maximum score of the user\
    \ could be the difference between the score of the game and the guess. I.e. if\
    \ the user was correctly matched, the difference between the score of the game\
    \ and the guess is 0.\n<|/ c |>\n<| c |>\nI have made a more complex example.\
    \ It seems there are some cases that the results are wrong but they all appear\
    \ to be correct to the program. Here is an example of the incorrect results: http://php.net/manual/en/function.max.php#114472\n\
    <|/ c |>\n<| c |>\nI am going to use your answer to see if I can make it better.\
    \ Thank you for your help!\n<|/ c |>\n<| a tags=arrays,php dscore=0 |>\nYou were\
    \ very close with your approach, but as far as I can tell, your problem is that\
    \ you were comparing $guess to all elements of $game one at a time. Instead, you\
    \ want to compare each element of $guess to all elements of $game at the same\
    \ time.\nSo change your inner loop to\n<code>\nfor ($i = 0; $i < $guessLen; $i++)\
    \ {\n    for ($j = 0; $j < $gameLen; $j++) {\n        $result[$i] = max($result[$i],\
    \ $game[$j] - $guess[$i]);\n    }\n}\n</code>\nThis should do what you want.\n\
    <|/ a |>\n<| c |>\nYes, this works, thank you! However, I am going to \nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmptqjg0q56.php
    on line 29

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $score  = array_sum($game);\n    $guesses = array_sum($guess);\n\
    \    $game   = array_sum($game - $guess);\n    $guesses = array_sum($guess - $score);\n\
    \    return array($game, $guesses);\n}\n\nfunction candidate(...$args) {\n   \
    \ return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: array - array\
    \ in /tmp/tmp4_55pbow.php:17\nStack trace:\n#0 /tmp/tmp4_55pbow.php(23): compare(Array,\
    \ Array)\n#1 /tmp/tmp4_55pbow.php(27): candidate(Array, Array)\n#2 /tmp/tmp4_55pbow.php(33):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp4_55pbow.php on line 17\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    sort($game); sort($guess);\n    $res = array();\n    $size =\
    \ min(count($game), count($guess));\n    for ($i = 0; $i < $size; $i++) {\n  \
    \      if ($game[$i] === $guess[$i]) {\n            $res[$i] = $res[$i] ? $res[$i]\
    \ : 0;\n        } else {\n            $res[$i] = abs($guess[$i] - $game[$i]);\n\
    \        }\n    }\n    return $res;\n}\nfunction candidate(...$args) {\n    return\
    \ compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmpf86ndlpx.php on line 20\n\n\
    Warning: Undefined array key 2 in /tmp/tmpf86ndlpx.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpf86ndlpx.php:32\nStack trace:\n\
    #0 /tmp/tmpf86ndlpx.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpf86ndlpx.php\
    \ on line 32\n"
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $n = count($guess);\n    $m = count($game);\n    $res = array();\n\
    \    for ($i=0; $i<$m; $i++) {\n        $res[$i] = abs($guess[$i] - $game[$i]);\n\
    \    }\n    \n    // Check for correct guess\n    for ($i=0; $i<$n; $i++) {\n\
    \        if ($guess[$i] === $game[$i]) {\n            $res[$i] = 0;\n        }\n\
    \    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    foreach ($game as $key => $value) {\n        if ($value == $guess[$key])\
    \ {\n            // If they guessed correctly - they won!\n            return\
    \ array($key, $guess[$key]);\n        }\n    }\n\n    // If they didn't guessed\
    \ correctly - guess was too close!\n    return array($game.length - 1, abs($guess[$game.length\
    \ - 1] - $game[0]));\n}\n</code>\n<|/ a tags=arrays,php,compare,algorithm,mysql\
    \ dscore=1 |>\n<| a tags=arrays,php,compare,algorithm,mysql dscore=1 |>\nUse array_diff()\
    \ to find the differences between the two arrays:\n<code>\n$diff=array_diff($game,$guess);\n\
    </code>\nThis will return an array of all elements that are in the $game array\
    \ and not in the $guess array.\n<|/ a |>\n<| c |>\nThe OP asked for help on a\
    \ specific line in the script, not how to do it all at once. I've edited my answer\
    \ to make it more clear.\n<|/ c |>\n<| c |>\nI still think this is more helpful,\
    \ especially given the fact that OP is still a student. I think it's also important\
    \ to let the OP know that there are more elegant ways to do this - especially\
    \ since this is not a homework assignment. Also, this would probably be better\
    \ as a comment rather than an answer.\n<|/ c |>\n<| c |>\nI agree. Just wanted\
    \ to provide the quickest and simplest solution.\n<|/ c |>\n<| c |>\nI agree,\
    \ this is the better answer :)\n<|/ c |>\n<| a dscore=1 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpaxw_j35_.php
    on line 25

    '
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n  $diffs = array();\n  foreach ($guess as $index => $guess) {\n \
    \   $diffs[$index] = abs($game[$index] - $guess);\n  }\n  return $diffs;\n}\n\n\
    function candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    if (count($game) !== count($guess)) {\n        return array();\n\
    \    }\n    $guesses = array_map(function($item) { return abs($item - $game);\
    \ }, $guess);\n    $results = array_map(function($item) { return abs($item - $game);\
    \ }, $game);\n    foreach ($guesses as $index => $guess) {\n        if (!array_search($guess,\
    \ $results)) {\n            $results[$index] = abs($guess - $game[$index]);\n\
    \        }\n    }\n    return $results;\n}\n\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $game in /tmp/tmp_3ujvpdn.php on line 18\n\
    \nWarning: Undefined variable $game in /tmp/tmp_3ujvpdn.php on line 18\n\nWarning:\
    \ Undefined variable $game in /tmp/tmp_3ujvpdn.php on line 18\n\nWarning: Undefined\
    \ variable $game in /tmp/tmp_3ujvpdn.php on line 18\n\nWarning: Undefined variable\
    \ $game in /tmp/tmp_3ujvpdn.php on line 18\n\nWarning: Undefined variable $game\
    \ in /tmp/tmp_3ujvpdn.php on line 18\n\nWarning: Undefined variable $game in /tmp/tmp_3ujvpdn.php\
    \ on line 19\n\nWarning: Undefined variable $game in /tmp/tmp_3ujvpdn.php on line\
    \ 19\n\nWarning: Undefined variable $game in /tmp/tmp_3ujvpdn.php on line 19\n\
    \nWarning: Undefined variable $game in /tmp/tmp_3ujvpdn.php on line 19\n\nWarning:\
    \ Undefined variable $game in /tmp/tmp_3ujvpdn.php on line 19\n\nWarning: Undefined\
    \ variable $game in /tmp/tmp_3ujvpdn.php on line 19\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp_3ujvpdn.php:33\nStack trace:\n#0 /tmp/tmp_3ujvpdn.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_3ujvpdn.php on line 33\n"
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $guesses_count = count($guess);\n    $game_score  = count($game);\n\
    \    $result      = array();\n    \n    for($i = 0; $i < $guesses_count; $i++)\
    \ {\n        if ($game[$i] === $guess[$i]) {\n            $result[$i] = 0;\n \
    \       } else {\n            $result[$i] = abs($game[$i] - $guess[$i]);\n   \
    \     }\n    }\n    \n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n\t$num_guesses = count($guess);\n\tif ($num_guesses != count($game))\
    \ {\n\t\treturn null;\n\t}\n\t$num_scores = count($game);\n\t$num_correct = 0;\n\
    \t$max_score = 0;\n\t$best_score = array_sum($game);\n\tfor ($score = 0; $score\
    \ < $num_scores; $score++) {\n\t\t$best_guess = $guess;\n\t\t$best_score = $game[$score];\n\
    \t\t$correct_guesses = 0;\n\t\tfor ($guess = $score; $guess < $num_scores; $guess++)\
    \ {\n\t\t\tif ($game[$guess] == $score) {\n\t\t\t\t$correct_guesses++;\n\t\t\t\
    }\n\t\t\tif ($guess == $score) {\n\t\t\t\t$correct_guesses++;\n\t\t\t}\n\t\t\t\
    if ($best_guess == $guess) {\n\t\t\t\t$correct_guesses++;\n\t\t\t}\n\t\t}\n\t\t\
    $best_score = abs($best_score - $score);\n\t\tif ($correct_guesses == $num_guesses)\
    \ {\n\t\t\treturn array($best_score, $score);\n\t\t}\n\t\tif ($best_score > $max_score)\
    \ {\n\t\t\t$max_score = $best_score;\n\t\t}\n\t}\n\treturn null;\n}\n\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2fddlm1b.php:54\n\
    Stack trace:\n#0 /tmp/tmp2fddlm1b.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp2fddlm1b.php\
    \ on line 54\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $i = 0;\n    $score = 0;\n    foreach ($guess as $guessValue)\
    \ {\n        $guess = $game[$i];\n        // If guess and score are equal, they\
    \ match\n        if ($guess == $guessValue) {\n            $score++;\n       \
    \ }\n        // If guess and score are NOT equal, they fail\n        else {\n\
    \            $guess = abs($guess - $guessValue);\n            $score++;\n    \
    \    }\n        $i++;\n    }\n    return $score;\n}\n\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_lq40mp.php:38\n\
    Stack trace:\n#0 /tmp/tmp0_lq40mp.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0_lq40mp.php\
    \ on line 38\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = 0;\n    foreach ($game as $key => $val) {\n       \
    \ $result += abs($guess - $val);\n    }\n    return array($result);\n}\n</code>\n\
    I hope it helped you, good luck.\n<|/ a dscore=1 tags=php |>\n<| c |>\nThis is\
    \ a great solution. I am still trying to understand why it works though. I will\
    \ take time for me to understand it.\n<|/ c |>\n<| c |>\nHi, I am glad it helped\
    \ you. For future reference, if you would like to understand how it works you\
    \ can go through this [link](http://php.net/manual/en/language.types.array.php#example-99)\
    \ where I found the answer, but if you would like I can explain how it works in\
    \ more detail.\n<|/ c |>\n<| a tags=php |>\nAnother solution is using array_intersect.\n\
    I created this little snippet that should work for you:\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpnymbvoz_.php
    on line 21

    '
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n  return array_map(function ($a, $b) {\n    return abs($a -$b);\n\
    \  }, $game, $guess);\n}\n\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n  // Initialize variables\n  $result = [];\n  $gameLength = count($game);\n\
    \  $guessLength = count($guess);\n  // Loop over each guess\n  for ($i = 0; $i\
    \ < $guessLength; $i++) {\n    $result[$i] = abs($guess[$i] - $game[$i]);\n  }\n\
    \  // If they were all correct return 0\n  if($gameLength !== $guessLength) {\n\
    \    return $result;\n  }\n  // Otherwise return the difference\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    \n    // If both arrays have no elements, return an empty array.\n\
    \    if (empty($game) || empty($guess)) return array();\n    \n    $scores = [];\n\
    \    \n    foreach ($guess as $key => $guessValue) {\n        // If the guess\
    \ matches game value, we have a match.\n        // If not, we need a negative\
    \ result.\n        if ($game[$key] == $guessValue) $scores[] = 0;\n        else\
    \ $scores[] = abs($guessValue - $game[$key]);\n    }\n    \n    return $scores;\n\
    }\n\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = array();\n    foreach($game as $index => $value) {\n\
    \        if($guess == $value) {\n            $result[$index] = 0;\n        } else\
    \ {\n            $result[$index] = abs($value - $guess);\n        }\n    }\n \
    \   return $result;\n}\n\n/**\n * Write a description of what this program does\
    \ to the console.\n */\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int - array\
    \ in /tmp/tmpkjecg_2_.php:20\nStack trace:\n#0 /tmp/tmpkjecg_2_.php(30): compare(Array,\
    \ Array)\n#1 /tmp/tmpkjecg_2_.php(34): candidate(Array, Array)\n#2 /tmp/tmpkjecg_2_.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpkjecg_2_.php on line 20\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = array();\n    foreach ($game as $gamescore => $guessscore)\
    \ {\n        if ($gamescore == $guessscore) {\n            $result[] = 0;\n  \
    \      } else {\n            $result[] = abs($guessscore - $gamescore);\n    \
    \    }\n    }\n    return $result;\n}\n</code>\n<|/ a |>\n<| a |>\n<code>\nimport\
    \ java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public\
    \ static void main(String[] args) {\n        List<Integer> nums = new ArrayList<Integer>(5);\n\
    \        nums.add(1);\n        nums.add(2);\n        nums.add(3);\n        nums.add(4);\n\
    \        nums.add(5);\n        nums.add(6);\n        nums.add(7);\n        nums.add(8);\n\
    \        nums.add(9);\n        nums.add(10);\n        nums.add(11);\n        nums.add(12);\n\
    \        nums.add(13);\n        nums.add(14);\n        nums.add(15);\n       \
    \ nums.add(16);\n        nums.add(17);\n        nums.add(18);\n        nums.add(19);\n\
    \        nums.add(20);\n        nums.add(21);\n        nums.add(22);\n       \
    \ nums.add(23);\n        nums.add(24);\n        nums.add(25);\n        nums.add(26);\n\
    \        nums.add(27);\n        nums.add(28);\n        nums.add(29);\n       \
    \ nums.add(30);\n        nums.add(31);\n        nums.add(32);\n        nums.add(33);\n\
    \        nums.add(34);\n        nums.add(35);\n        nums.add(36);\n       \
    \ nums.add(37);\n        nums.add(38);\n        nums.add(39);\n        nums.add(40);\n\
    \        nums.add(41);\n        nums.add(42);\n        nums.add(43);\n       \
    \ nums.add(44);\n        nums.add(45);\n        nums.add(46);\n        nums.add(47);\n\
    \        nums.add(48);\n        nums.add(49);\n        nums.add(50);\n       \
    \ nums.add(51);\n        nums.add(52);\n        nums.add(53);\n        nums.add(54);\n\
    \        nums.add(55);\n        nums.add(56);\n        nums.add(57);\n       \
    \ nums.add(58);\n        nums.add(59);\n        nums.add(60);\n        nums.add(61);\n\
    \        nums.add(62);\n        nums.add(63);\n        nums.add(64);\n       \
    \ nums.add(65);\n        nums.add(66);\n        nums.add(67);\n        nums.add(68);\n\
    \        nums.add(69);\n        nums.add(70);\n        nums.add(71);\n       \
    \ nums.add(72);\n        nums.add(73);\n        nums.add(74);\n        nums.add(75);\n\
    \        nums.add(76);\n        nums.add(77);\n        nums.add(78);\n       \
    \ nums.add(79);\n        nums.add(80);\n        nums.add(81);\n        nums.add(82);\n\
    \        nums.add(83);\n        nums.add(84);\n        nums.add(85);\n       \
    \ nums.add(86);\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpe98_35y5.php
    on line 25

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    //write your code here\n    $game=array_filter($game);\n    $guess=array_filter($guess);\n\
    \    $res=array_filter($guess-$game);\n    return $res;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\nThe correct answer is actually in the comments, you should\
    \ be able to do this very simply...\n<code>\n$correct_guesses = count(array_intersect($guess,\
    \ $game));\n$total_guesses = count($guess);\n$errors = $total_guesses - $correct_guesses;\n\
    </code>\n<|/ a tags=php,logic,math |>\n<| c |>\nI don't think that's quite right,\
    \ if `$guess` has more than one value, say `array(1, 2, 3, 4)` then `$correct_guesses`\
    \ would equal 4 and `$errors` is 0.\n<|/ c |>\n<| c |>\nRight, that's right. Think\
    \ about it... if you had `array(3, 2, 1)`, it would be incorrect since `array_intersect`\
    \ would return `array(1, 2)`, which would not match to anything in `$game`.\n\
    <|/ c |>\n<| a tags=php,logic,math |>\n<code>\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpc75q80gg.php
    on line 21

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n  return $game;\n}\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp56rvix6y.php:22\n\
    Stack trace:\n#0 /tmp/tmp56rvix6y.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp56rvix6y.php\
    \ on line 22\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $results = [];\n    foreach ($guess as $index => $score) {\n\
    \        if ($score < 0 || $score == $game[$index]) {\n            $results[$index]\
    \ = 0;\n        } else {\n            $results[$index] = abs($score - $game[$index]);\n\
    \        }\n    }\n    return $results;\n}\n\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2jq_dux5.php:31\n\
    Stack trace:\n#0 /tmp/tmp2jq_dux5.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp2jq_dux5.php\
    \ on line 31\n"
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n  $result = [];\n  $n = count($guess);\n  for ($i = 0; $i < $n; $i++)\
    \ {\n    $result[$i] = $game[$i] - $guess[$i];\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n  $result = [];\n  $max_score = max($game);\n  \n  foreach ($guess\
    \ as $k => $v) {\n    $result[$k] = abs($max_score - $v);\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpddn3bwe8.php:28\n\
    Stack trace:\n#0 /tmp/tmpddn3bwe8.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpddn3bwe8.php\
    \ on line 28\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    // The game array contains scores for the number of games played\n\
    \    // and the number of matches for each game.\n    // The guess array contains\
    \ a guess for the number of games played\n    // and the number of matches for\
    \ each game.\n    // Your task is to determine how many games were too high\n\
    \    // and how many games were too low. Your code should use arrays\n    // and\
    \ loops to solve this problem.\n\n    // your code here\n    $gameLen = count($game);\n\
    \    $guessLen = count($guess);\n    $result = [];\n    for ($i=0; $i<$gameLen;\
    \ $i++) {\n        $score = $game[$i];\n        $guess = $guess[$i];\n       \
    \ $result[$i] = abs($guess-$score);\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Trying to access array offset on value of type int in /tmp/tmphrtnzuyp.php\
    \ on line 29\n\nWarning: Trying to access array offset on value of type null in\
    \ /tmp/tmphrtnzuyp.php on line 29\n\nWarning: Trying to access array offset on\
    \ value of type null in /tmp/tmphrtnzuyp.php on line 29\n\nWarning: Trying to\
    \ access array offset on value of type null in /tmp/tmphrtnzuyp.php on line 29\n\
    \nWarning: Trying to access array offset on value of type null in /tmp/tmphrtnzuyp.php\
    \ on line 29\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphrtnzuyp.php:40\n\
    Stack trace:\n#0 /tmp/tmphrtnzuyp.php(46): test()\n#1 {main}\n  thrown in /tmp/tmphrtnzuyp.php\
    \ on line 40\n"
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n  $guesses_correct = array();\n  for ($i = 0; $i < count($game);\
    \ $i++) {\n    if ($game[$i] == $guess[$i]) {\n      $guesses_correct[] = 0;\n\
    \    }\n    else {\n      $guesses_correct[] = abs($guess[$i] - $game[$i]);\n\
    \    }\n  }\n  return $guesses_correct;\n}\n\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    if (count($game) != count($guess)) {\n        return Array();\n\
    \    }\n    $result = Array();\n    for ($i=0; $i < count($game); $i++) {\n  \
    \      $result[] = ($game[$i] == $guess[$i]) ? 0 : abs($guess[$i]-$game[$i]);\n\
    \    }\n    return $result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    Here's my solution using the built-in array_udiff function:\n<code>\n$game = [1,\
    \ 2, 3, 4, 5];\n$guess = [1, 2, 3, 4, 2];\n$matches = count($game) - count(array_diff($game,\
    \ $guess));\n\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpfyn2fmqd.php
    on line 24

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = [];\n    $i = 0;\n    foreach ($game as $value) {\n\
    \        $result[$i] = abs($guess - $value);\n        ++$i;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: array - int\
    \ in /tmp/tmpou6yqozq.php:18\nStack trace:\n#0 /tmp/tmpou6yqozq.php(25): compare(Array,\
    \ Array)\n#1 /tmp/tmpou6yqozq.php(29): candidate(Array, Array)\n#2 /tmp/tmpou6yqozq.php(35):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpou6yqozq.php on line 18\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    // code here\n}\n\nfunction candidate(...$args) {\n    return\
    \ compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiwbf8u99.php:23\n\
    Stack trace:\n#0 /tmp/tmpiwbf8u99.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpiwbf8u99.php\
    \ on line 23\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n  // your code here\n}\n\nfunction candidate(...$args) {\n    return\
    \ compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsuwycftk.php:23\n\
    Stack trace:\n#0 /tmp/tmpsuwycftk.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpsuwycftk.php\
    \ on line 23\n"
  timestamp: 1659979235
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    // Write your code here\n    $result = [];\n    foreach ($game\
    \ as $key => $value) {\n        if ($guess === $value) {\n            $result[$key]\
    \ = 0;\n        } else {\n            $result[$key] = abs($guess - $value);\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: array - int\
    \ in /tmp/tmpmcjc3fa_.php:21\nStack trace:\n#0 /tmp/tmpmcjc3fa_.php(28): compare(Array,\
    \ Array)\n#1 /tmp/tmpmcjc3fa_.php(32): candidate(Array, Array)\n#2 /tmp/tmpmcjc3fa_.php(38):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpmcjc3fa_.php on line 21\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    // Your code here!\n    $result = [];\n\n    for($i = 0; $i <\
    \ count($game); $i++){\n        if ($game[$i] != $guess[$i]){\n            $result[]\
    \ = abs($game[$i]-$guess[$i]);\n        }\n    }\n\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2zoi_x_s.php:32\n\
    Stack trace:\n#0 /tmp/tmp2zoi_x_s.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp2zoi_x_s.php\
    \ on line 32\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    // Your code goes here.\n    $game = array_filter($game);\n \
    \   $guess = array_filter($guess);\n    $matches = array_intersect($game, $guess);\n\
    \    $count = count($matches);\n    if($count == 0){\n        return array();\n\
    \    }\n    $sum = 0;\n    foreach($matches as $key => $value){\n        if($value\
    \ == 0){\n            $sum++;\n        }else{\n            $sum = $sum + abs($value\
    \ - $game[$key]);\n        }\n    }\n    return $sum;\n}\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8eawq6ag.php:38\n\
    Stack trace:\n#0 /tmp/tmp8eawq6ag.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp8eawq6ag.php\
    \ on line 38\n"
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n  // Your code here\n  $game = array_map(\"intval\", $game);\n  $guess\
    \ = array_map(\"intval\", $guess);\n  $matchCount = count($game);\n  $matchCount2\
    \ = count($guess);\n  $diff = array();\n  for ($i = 0; $i < $matchCount; $i++)\
    \ {\n    $diff[$i] = $game[$i] - $guess[$i];\n  }\n  for ($i = 0; $i < $matchCount;\
    \ $i++) {\n    $diff[$i] = abs($diff[$i]);\n  }\n  return $diff;\n}\n</code>\n\
    <|/ a tags=php,math,arrays |>\n<| a |>\nHere's a one-liner:\n<code>\n$diffs =\
    \ array_map(\n    function($x, $y) abs($x - $y), \n    array_map(\n        function($a)\
    \ { return count($a); }, \n        array_merge(\n            array_fill(0, count($game)\
    \ - count($guess), ''),\n            $game, \n            array_fill(0, count($game)\
    \ - count($guess), '')\n        )\n    ),\n    $guess\n);\n</code>\nThe result\
    \ is in $diffs. As you can see, it starts by counting the number of matches in\
    \ $game, which is equal to the number of elements in the first array. Then it\
    \ creates an array containing the number of elements in the first array. After\
    \ that, it iterates over each element in $game, assigning it to the corresponding\
    \ element in $diffs.\n<|/ a tags=php,math,arrays dscore=1 |>\n<| c |>\nThis solution\
    \ has two problems: 1. it doesn't handle arrays with no matches; 2. it doesn't\
    \ handle repeated values.\n<|/ c |>\n<| c |>\nThe first problem can be easily\
    \ solved with `count(array_intersect($game, $guess))`. The second problem can\
    \ be solved using a simple `for` loop: `for($i=count($game); $i>count($guess);\
    \ $i--)`.\n<|/ c |>\n<| a |>\nHere's a version that handles all three of your\
    \ requirements:\n<code>\n$game = [1,2,3,4,5,1];\n$guess = [2,3,4];\n\n$game =\
    \ array_count_values($game);\n$guess = array_count_values($guess);\n\n$matches\
    \ = array_diff_assoc($game, $guess);\n\n$correct = array_map(\n    function($score)\
    \ $score===0 ? 0 : $score-$matches[$score],\n    array_keys($matches)\n);\n\n\
    print_r($correct);\n</code>\nOutput:\n<code>\nArray\n(\n    [0] => 0\n    [1]\
    \ => \nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpo4v7tg_r.php
    on line 29

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $diff = [];\n    foreach ($guess as $i => $guess) {\n       \
    \ if ($game[$i] == $guess) {\n            $diff[$i] = 0;\n        } else {\n \
    \           $diff[$i] = abs($game[$i] - $guess);\n        }\n    }\n    return\
    \ $diff;\n}\n</cell>\n<cell>\n%%time\ndef compare(game, guess):\n    diff = []\n\
    \    for i in range(len(guess)):\n        if game[i] == guess[i]:\n          \
    \  diff[i] = 0\n        else:\n            diff[i] = abs(game[i] - guess[i])\n\
    \    return diff\n</cell>\n<cell>\n%%time\nfunction candidate(...$args) {\n  \
    \  return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpvrn8wqro.php
    on line 25

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    // code goes here\n}\n\"\"\"\n\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected double-quote mark in /tmp/tmpjmpy9mio.php
    on line 17

    '
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $result = [];\n    $len = count($guess);\n    for ($i=0; $i<$len;\
    \ $i++) {\n        $result[$i] = abs($guess[$i] - $game[$i]);\n    }\n    return\
    \ $result;\n}\n</code>\n<|/ a tags=arrays,algorithm,php |>\n<| c |>\nGood answer.\
    \ But please be more verbose about what you're doing. Otherwise people will probably\
    \ flag this as too low quality and likely be downvoted.\n<|/ c |>\n<| a |>\nHere\
    \ is another version\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp3z2vmoz6.php
    on line 22

    '
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n\t$correct = array();\n\t$corrects = array();\n\t\n\tforeach ($guess\
    \ as $key => $value) {\n\t\t$diff = $value - $game[$key];\n\t\t\n\t\tif ($diff\
    \ == 0) {\n\t\t\t$corrects[$key] = 0;\n\t\t} else {\n\t\t\t$corrects[$key] = abs($diff);\n\
    \t\t}\n\t}\n\t\n\tforeach ($game as $key => $value) {\n\t\tif (!array_key_exists($key,\
    \ $corrects)) {\n\t\t\t$corrects[$key] = 0;\n\t\t}\n\t}\n\t\n\treturn $corrects;\n\
    }\n\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n\t$return = array();\n\tfor ($i = 0; $i < count($game); $i++) {\n\
    \t\tif ($game[$i] != $guess[$i]) $return[$i] = abs($game[$i]-$guess[$i]);\n\t\
    }\n\treturn $return;\n}\n\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8y3a2dfp.php:27\n\
    Stack trace:\n#0 /tmp/tmp8y3a2dfp.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp8y3a2dfp.php\
    \ on line 27\n"
  timestamp: 1659979275
- exit_code: 0
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n  $diff = [];\n  for ($i = 0; $i < count($guess); $i++) {\n    $diff[$i]\
    \ = abs($game[$i] - $guess[$i]);\n  }\n  return $diff;\n}\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 255
  program: "<?php\n// I think we all remember that feeling when the result of some\
    \ long-awaited\n// event is finally known. The feelings and thoughts you have\
    \ at that moment are\n// definitely worth noting down and comparing.\n// Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n// You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n// Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n// the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0,\
    \ 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game,\
    \ $guess) {\n    $guesses = count($game);\n    $guessesIncorrect = count($guess);\n\
    \    $results = [];\n    for ($i = 0; $i < $guesses; $i++) {\n        $results[$i]\
    \ = $guess[$i] ? abs($guess[$i] - $game[$i]) : 0;\n    }\n    for ($i = 0; $i\
    \ < $guessesIncorrect; $i++) {\n        $results[$guesses + $i] = abs($guess[$guessesIncorrect]\
    \ - $game[$guessesIncorrect]);\n    }\n    return $results;\n}\n</code>\n<|/ a\
    \ tags=php,algorithm |>\n<| c |>\nYes, I guess you're right. I just realized that\
    \ in terms of programming it would be more logical to do the computer part as\
    \ a function with return type int[] instead of having all the code inline.\n<|/\
    \ c |>\n<| c |>\nThe question is tagged PHP, yet your answer is in Java. Could\
    \ you please convert your solution to PHP? Thanks.\n<|/ c |>\n<| c |>\nThe code\
    \ works fine, it just does not return the correct answer when I submit the code\
    \ on my codepad.org site. I'm not sure what I'm doing wrong.\n<|/ c |>\n<| a tags=php,algorithm\
    \ |>\nI suggest you use a recursive function instead of a for loop for simpler\
    \ code. Also, the function would probably be easier to understand if you give\
    \ it more descriptive variable names, such as $answers and $games\n<code>\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpg2ld11s9.php
    on line 26

    '
  timestamp: 1659979275
