name: HumanEval_134_check_if_last_char_is_a_letter
language: php
prompt: "<?php\n// Create a function that returns true if the last character\n// of\
  \ a given string is an alphabetical character and is not\n// a part of a word, and\
  \ false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n\
  // Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n//\
  \ >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"\
  apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\n\
  function check_if_last_char_is_a_letter($txt) {\n"
tests: "function candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !== false)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\") !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie \"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
  \ pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  eeeee e \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    return substr($txt, -1) === ' ' &&\n        !in_array(substr($txt,\
    \ strlen($txt) - 1, 1), array('a', 'e', 'i', 'o', 'u'))\n}\n", "  $str = strtolower($txt);\n\
    \  return $str[strlen($str)-1] != ' ';\n}", "  $txt = strtoupper($txt);\n  return\
    \ $txt[strlen($txt)-1] != ' ' &&\n         !preg_match('/\\W/', $txt);\n}\n",
  "    if ($txt == '')\n        return false;\n    if (strlen($txt)>1)\n        $last_char\
    \ = substr($txt, -1, 1);\n    else\n        $last_char = substr($txt, 0, 1);\n\
    \    return is_alphabetical($last_char);\n}\n", "    $txt = trim($txt);\n    $txt\
    \ = preg_replace('/\\s+/', '', $txt);\n    if (strlen($txt) > 0) {\n        $txt\
    \ = substr($txt, -1);\n        if (preg_match('/[a-zA-Z]+/', $txt)) {\n      \
    \      return true;\n        }\n    }\n    return false;\n}\n", "  // Your code\
    \ here\n  return strlen($txt) > 0 && ctype_alpha($txt[strlen($txt)-1]);\n}\n</code>\n\
    The other method is to split the string into words and check to see if the last\
    \ word ends in a letter:\n<code>", "  if (empty($txt) || strlen($txt) <= 0) {\n\
    \    return false;\n  }\n\n  return ctype_alpha($txt[strlen($txt) - 1]);\n}\n",
  "  // If the length of the given text is 0, then the result is\n  // false.\n  if\
    \ (strlen($txt) == 0) {\n    return false;\n  }\n  // If it is the last character\
    \ of the given text,\n  // then the result will be true.\n  $last = substr($txt,\
    \ -1);\n  return ($last != '\\0' && ctype_alpha($last));\n}", "  $last = substr($txt,\
    \ -1, 1);\n  if (!is_numeric($last)) {\n    return TRUE;\n  }\n  else {\n    $last\
    \ = substr($txt, -1, 1);\n    $words = explode(' ', $txt);\n    $word = $words[count($words)\
    \ - 1];\n    $words[count($words) - 1] = substr($word, 0, strlen($word) - 1);\n\
    \    $words = implode(' ', $words);\n    $words = str_replace($word, $last, $words);\n\
    \    $words = explode(' ', $words);\n    $word = $words[count($words) - 1];\n\
    \    return !is_numeric($last) && !is_numeric($word);\n  }\n}\n", "  return is_string($txt)\
    \ && $txt[strlen($txt) - 1] != \" \";\n}", "    return preg_match('/[^A-Za-z]+$/',\
    \ $txt);\n}", "\treturn (is_string($txt) && $txt[strlen($txt)-1] != ' ') ? false\
    \ : true;\n}\n", "\t$lastChar = substr($txt, -1, 1, 1);\n\tif ($lastChar != '\
    \ ') return true;\n\t$words = explode(\" \", $txt);\n\tforeach ($words as $word)\
    \ {\n\t\tif ($word[strlen($word) - 1] == $lastChar)\n\t\t\treturn false;\n\t}\n\
    \treturn true;\n}\n", "  if ($txt) {\n    return (mb_strlen($txt, \" \") - (mb_strlen($txt,\
    \ \" \") % 3)) % 3 == 0;\n  }\n  return false;\n}\n", "  if (is_null($txt)) return\
    \ false;\n  $txt = trim($txt);\n  if ( strlen($txt) == 0 ) return false;\n  return\
    \ ( substr($txt, -1, 1, strtoupper(substr($txt, 0, -1))) == \" \");\n}\n", " \
    \   return substr($txt,-1) != ' ' && \n            preg_match('/[a-z ]+$/i', $txt);\n\
    }\n</code>\n<|/ a tags=php |>\n<| c |>\nthis solution also not working when we\
    \ have more than two space in string.\n<|/ c |>\n<| a tags=php |>\n<code>\n<?php\n\
    $str = preg_replace(\"/[^0-9]/\", \"\", $string);\n$res = preg_replace(\"/\\s/\"\
    , \"\\n\", $str);\necho $res;", "  if (strlen($txt) != 0)\n    return $txt[strlen($txt)-1]\
    \ != ' ';\n  else\n    return false;\n}\n", "  return preg_match('/\\s([^A-Za-z])$/',\
    \ $txt);\n}\n", "    if (is_string($txt)) {\n        if (strlen($txt) < 2)\n \
    \           return false;\n        $last_char = substr($txt, -1);\n        $last_char_was_a_letter\
    \ = false;\n        for ($i = 0; $i < strlen($last_char); $i++) {\n          \
    \  if (ctype_alpha($last_char[$i]))\n                $last_char_was_a_letter =\
    \ true;\n        }\n        return !$last_char_was_a_letter;\n    }\n}\n", " \
    \   if (!$txt) {\n        return false;\n    }\n    if (substr($txt, -1, 1) !=\
    \ \" \") {\n        return false;\n    }\n    $char = substr($txt, -1, 1);\n \
    \   $pattern = '/^[a-zA-Z]+$/';\n    return (preg_match($pattern, $char) == 1);\n\
    }\n", "    // Remove all non-alphabetic characters and spaces from text\n    $txt\
    \ = preg_replace('~[^a-z ]+~i', '', $txt);\n    // If text is not empty and all\
    \ characters are alphabetic characters,\n    // return true.\n    if ($txt) {\n\
    \        return true; // is true for empty text\n    } else {\n        return\
    \ false;\n    }\n}\n", "  return (strlen($txt) && ctype_alpha($txt[strlen($txt)-1]))\
    \ ? true : false;\n}\n", "    return preg_match(\"/^[a-zA-Z][a-zA-Z ]+[a-zA-Z]$/\"\
    , $txt);\n}", "\t$len = strlen($txt);\n\treturn (substr($txt, $len-1, 1) == 'a'\
    \ &&\n\t\t\tsubstr($txt, 0, $len-1) != 'a');\n}\n", "  $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n  return (strlen($txt) > 1 && $txt[strlen($txt)-1] == \" \");\n\
    }\n", "    $txt = trim($txt);\n    return isset($txt[$txt.length - 1]) && ctype_alpha($txt[$txt.length\
    \ - 1]);\n}", "    return end($txt) === $txt[strlen($txt) - 1] ? true : false;\n\
    }\n", "\t$last_letter = substr($txt, -1, 1);\n\t$words = explode(\" \", $txt);\n\
    \tforeach ($words as $word) {\n\t\tif (substr($word, $last_letter) == $last_letter)\
    \ {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n", "    // Remove trailing\
    \ whitespace\n    $txt = trim($txt);\n    $last_char = substr($txt, -1, 1);\n\
    \    return preg_match(\"/[a-z]/\", $last_char);\n}", "    if (is_null($txt))\
    \ return false;\n    $len = strlen($txt);\n    return $len > 0 && ctype_alpha($txt[($len\
    \ - 1)]);\n}\n", "    return !preg_match('~^[^A-Za-z0-9]$~', $txt);\n}\n", " \
    \ return preg_match('/[^\\s]\\z/', $txt) && preg_match('/[^a-z]+$/i', $txt);\n\
    }", "    $txt = preg_replace(\"/[^a-zA-Z]$/\", \"\", $txt);\n    return ((substr($txt,\
    \ -1, 1) == ' ') && !is_word($txt));\n}\n", "    // Your code goes here\n    $txt=\
    \ strtoupper($txt);\n    $txt= str_replace(' ','',$txt);\n    for($i=count($txt)-1;$i>=0;$i--){\n\
    \        if(preg_match('/^[a-zA-Z]$/',$txt[$i])==1){\n            return true;\n\
    \        }else{\n            return false;\n        }\n    }\n}", "  return substr($txt,\
    \ -1) != ' ' && substr($txt, -1) != '$';\n}\n", "  return substr($txt, -1, 1)\
    \ != \" \" && preg_match(\"/^[a-z]+$/i\", $txt);\n}\n", "    return substr($txt,-1)\
    \ == ' ' && preg_match('/[^a-zA-Z]$/',$txt);\n}", "    $last_char = $txt[strlen($txt)-1];\n\
    \    if (preg_match('/[a-z ]/i', $last_char))\n        return 1;\n    return 0;\n\
    }\n", "    if (substr($txt,strlen($txt)-1,1) != \" \") {\n        return false;\
    \ // string is not all alphanumeric\n    }\n    $strarr = preg_split('//', $txt,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n    $len = count($strarr);\n    for ($i = 0; $i <\
    \ $len; $i++) {\n        $word = $strarr[$i];\n        if (preg_match('/[a-z]/i',\
    \ $word) == 0) {\n            return false; // string has one or more letter\n\
    \        }\n    }\n    return true;\n}\n", "  // Split string on space\n  $words=explode(\"\
    \ \", $txt);\n  // If length is longer than 1, return false\n  if (count($words)>1)\
    \ return false;\n  // If last character is letter, return true\n  if (end($words)==substr($words[count($words)-1],\
    \ 0,1)) \n    return true;\n  return false;\n}", "  if (!empty($txt)) {\n    $txt\
    \ = substr($txt, -1);\n    if (ctype_alpha($txt)) {\n      return !preg_match('/\\\
    \\W/', $txt);\n    }\n  }\n  return false;\n}\n\n/**\n * A function to check if\
    \ the first letter of a string is a letter.\n * \n * @access public\n * @return\
    \ boolean\n */", "  return substr($txt, -1, 1, '') != '' && ctype_alpha(substr($txt,\
    \ -1, 1));\n}", "    $txt = strtolower($txt);\n    if ($txt) {\n        $txt =\
    \ substr($txt, -1);\n    }\n    return !preg_match(\"/^[a-z]*$/\", $txt);\n}",
  "  $length = strlen($txt);\n  if ($length > 0) {\n    $last = strtolower(substr($txt,\
    \ $length - 1, 1));\n    return !is_numeric($last);\n  }\n  return false;\n}\n",
  "  if($txt == \"\") return false;\n  return substr($txt, -1) != \" \";\n}\n$str\
    \ = check_if_last_char_is_a_letter(\"apple pi e\");", "\t$last = substr($txt,\
    \ -1, 1);\n\treturn preg_match('/^[a-zA-Z]$/', $last);\n}", "    $txt = trim($txt);\n\
    \    if ($txt) {\n        $last = strtolower($txt[strlen($txt) - 1]);\n      \
    \  if (($last >= 'a') && ($last <= 'z')) {\n            return true;\n       \
    \ }\n    }\n    return false;\n}\n", "\treturn preg_match(\"/\\b[a-z]$/i\", $txt);\n\
    }\n", "    $txt = trim($txt);\n    $last = substr($txt, -1, 1);\n    return (bool)\
    \ preg_match(\"~^[A-Za-z]$~\", $last);\n}", "    global $last_char;\n    return\
    \ preg_match('/[a-z]$/i', $txt) && $last_char !== ' ';\n}\n", "    return preg_match(\"\
    /[a-zA-Z]+$/\", $txt) && preg_replace(\"/[^a-z]/\", \"\", $txt) != $txt;\n}\n",
  "    if(!$txt) {\n        return false;\n    }\n    $txt = strtolower($txt);\n \
    \   return strrpos($txt, \" \") === false &&\n           $txt[strlen($txt) - 1]\
    \ != \" \";\n}\n", "\treturn strlen($txt)>=1 && preg_match('/^[a-z]$/i', $txt[strlen($txt)-1])\
    \ ? true : false;\n}\n", "    return substr($txt, -1) === ' ' &&\n        !preg_match('~^[^\\\
    s]+\\s[^\\s]+$~', $txt);\n}\n", "  $txt = trim($txt);\n  return !preg_match(\"\
    /\\w$/\", substr($txt, -1));\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n\
    I would suggest you to use this approach, which is much more easy and understandable.\n\
    <code>\n$string = \"apple pie\";\n", "    $txt = preg_replace(\"/[^a-zA-Z ]/\"\
    , \"\", $txt);\n    return strlen($txt) != strlen($txt.\" \");\n}\n", "    if\
    \ (strlen($txt) >= 1) {\n        $last = strtolower(substr($txt, -1));\n     \
    \   if (preg_match('/^[a-z]$/', $last)) {\n            return true;\n        }\n\
    \    }\n\n    return false;\n}\n", "    if (strlen($txt) > 0) {\n        $txt\
    \ = strtolower($txt);\n        return substr($txt, -1, 1) == 'a' && strstr(\"\
    \ \", $txt, -1);\n    }\n    return false;\n}", "  return end($txt) == $txt{strlen($txt)\
    \ - 1} && ctype_alpha(substr($txt, -1))\n    ? true\n    : false;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nIf you're going to post an answer, at least make an effort\
    \ to write good code. Remember, this is a Q&A site, so don't be obliged to post\
    \ your code in the answers section, just edit your question and add what you've\
    \ tried so far.\n<|/ c |>\n<| c |>\nThank you for writing such a detailed answer.\
    \ I didn't know about ctype_alpha or how it works. But I will keep your advice\
    \ in mind and try and write good code next time.\n<|/ c |>\n<| c |>\nYou're welcome,\
    \ I'm glad it helped you out. Yeah, don't forget to upvote and accept. Welcome\
    \ to Stack Overflow. :-)\n<|/ c |>\n<| a |>\nThis doesn't work if the last character\
    \ is not a letter, such as \".\" for a file extension.\n<code>\nif (strtolower(substr($string,\
    \ -2)) != strtolower(substr($string, -1)))\n{\n  // It's not a letter\n}\n</code>\n\
    <|/ a tags=validation,regex,php dscore=1 |>\n<| c |>\nThanks for pointing that\
    \ out, I've corrected it. But why does this fail?\n<|/ c |>\n<| c |>\nI believe\
    \ this fails because if the last character is not a letter (i.e \".\" in file\
    \ extensions) then the substring will cut off the last character and strtolower\
    \ will fail because it will not be a letter. Hope that makes sense.\n<|/ c |>\n\
    <| c |>\nThanks for the explanation. I've edited my answer to include your comment.\n\
    <|/ c |>\n<| a tags=validation,regex,php |>\nYou can use the following pattern:\n\
    <code>\npreg_match(\"/^[A-Za-z ]+$/\", $subject);\n</code>\n<|/ a dscore=0 |>\n\
    <| a |>\nThis expression would match any string that starts with a letter and\
    \ contains only letters and spaces:\n<code>\n/([A-Za-z ])/\n</code>\n<|/ a tags=validation,regex,php\
    \ dscore=0 |>\n<| a |>\nTry this \n<code>\nif(preg_match(\"/^[a-zA-Z\\s]+$/i\"\
    , $string))\n</code>\n<|/ a dscore=0 tags=validation,regex,php |>\n<| c |>\nThis\
    \ would match strings that contain spaces as well.\n<|/", "  $len = strlen($txt);\n\
    \  if ($len < 1) {\n    return false;\n  }\n  $char = $txt[$len-1];\n  if ($char\
    \ !== \" \" && $char !== \"\\n\" && $char !== \"\\r\" && $char !== \"\\t\") {\n\
    \    return false;\n  }\n  return true;\n}\n", "    $txt = trim($txt);\n    return\
    \ substr($txt, -1, 1) != \" \" && !preg_match('/[a-zA-Z]+$/', $txt);\n}", "  \
    \  if (empty($txt) || !is_string($txt)) {\n        return false;\n    }\n\n  \
    \  $last_char = substr($txt, strlen($txt) - 1, 1);\n    return in_array($last_char,\
    \ (array) str_split($txt));\n}\n", "    return (strlen($txt) > 0) && preg_match('/[a-z]+$/i',\
    \ $txt);\n}\n", "    $txt = (string)$txt;\n    return ( $txt[strlen($txt) - 1]\
    \ == ' ' ) &&\n         ( ctype_alpha($txt[strlen($txt) - 1]) == false );\n}\n",
  "  return substr($txt, -1, 1, '') !== ' ';\n}\n", "    if ($txt == '' || $txt ==\
    \ null) {\n        return false;\n    }\n    if (substr($txt, -1, 1) == ' ') {\n\
    \        // Last char was space, therefore not a letter\n        return false;\n\
    \    }\n    $last_char = substr($txt, -1);\n    // Check first letter\n    $is_first_letter\
    \ = preg_match('/^[a-z]$/', $last_char);\n    if ($is_first_letter == false) {\n\
    \        // Last char was NOT a letter\n        return false;\n    }\n    // Now\
    \ check other letters starting at the end\n    for ($i = strlen($txt) - 2; $i\
    \ >= 0; $i--) {\n        $char = substr($txt, $i, 1);\n        $is_letter = preg_match('/^[a-z]$/',\
    \ $char);\n        if ($is_letter == false) {\n            // $char was not a\
    \ letter after all\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "    if ($txt != \"\") {\n        return substr($txt, -1, 1, '') !== \"\
    \ \";\n    } else {\n        return false;\n    }\n}\n", "    $len = strlen($txt);\n\
    \    $last_char = substr($txt, $len - 1, 1);\n    $last_char_no_space = substr($txt,\
    \ $len - 2, 1);\n    $last_char_no_space_2 = substr($txt, $len - 3, 1);\n    if\
    \ ($last_char != ' ') {\n        // Not a letter and space\n        return false;\n\
    \    } elseif ($last_char_no_space != ' ') {\n        // Not a letter, space,\
    \ no space\n        return false;\n    } elseif ($last_char_no_space_2 != ' ')\
    \ {\n        // Not a letter, space, no space\n        return false;\n    } else\
    \ {\n        return true;\n    }\n}", "    $len = strlen($txt);\n    if ($len\
    \ >= 1) {\n        $lastChar = $txt[$len-1];\n        if (!($lastChar >= \"a\"\
    \ && $lastChar <= \"z\") && !($lastChar >= \"A\" && $lastChar <= \"Z\")) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n", "    return\
    \ substr($txt, -1, 1, \" \"){0}==$txt{strlen($txt)-1};\n}\n", "  $r = preg_replace('/[^A-Za-z]/',\
    \ '', $txt);\n  return !empty($r);\n}\n", "  if (strlen($txt)==0) return false;\n\
    \  $last_char = substr($txt, -1, 1);\n  return ctype_alpha($last_char) && !is_word_start($txt);\n\
    }\n", "    if (strlen($txt) > 0 && substr($txt, -1, 1) !== ' ') {\n        return\
    \ preg_match('/^[a-z]+$/i', $txt);\n    } else {\n        return false;\n    }\n\
    }\n", "   return (preg_match('/^[^\\s].$/', $txt)) ? false : true;\n}", "    if\
    \ ($txt){\n        $last_char = substr($txt,-1,1);\n        if (preg_match(\"\
    /[a-z]/i\",$last_char) && preg_match(\"/ /\",$last_char)){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "    $last_character = substr($txt,\
    \ -1, 1);\n    $is_a_letter = preg_match(\"/^[a-zA-Z]$/\", $last_character);\n\
    \    return $is_a_letter;\n}\n", "  return preg_match(\"~[^a-z]$~i\", $txt);\n\
    }", "    if (strlen($txt) == 0) {\n        return false;\n    }\n    return !preg_match(\"\
    /[^A-Za-z]$/\", $txt);\n}", "    $txt = (string)$txt;\n    $txt = rtrim($txt);\n\
    \    $last_char = substr($txt, -1, 1);\n\n    return $last_char !== ' ' &&\n \
    \       ctype_alpha($last_char);\n}\n</code>\n<|/ a |>\n<| c |>\nThank you for\
    \ the effort, but this doesn't actually answer the question as it doesn't use\
    \ PHP at all. I'm looking for a general solution that would work regardless of\
    \ how the string is split.\n<|/ c |>\n<| a dscore=0 |>\nTry this regular expression:\n\
    <code>\n/\\w$/\n</code>\nThis matches any \"word\" character (a-z, A-Z, 0-9 and\
    \ _) at the end of the string.\nTry it out here:\nhttps://regex101.com/r/cJ3iH0/1\n\
    <|/ a tags=string,regex,php |>\n<| c |>\nThanks for the effort, but this doesn't\
    \ actually answer the question as it doesn't use PHP at all. I'm looking for a\
    \ general solution that would work regardless of how the string is split.\n<|/\
    \ c |>\n<| c |>\nIt doesn't require PHP. I've updated my answer to include a JavaScript\
    \ example. If you could update your question to include your real use case, then\
    \ I can update this answer to be more specific.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work because the word is supposed to be split by a space and spaces aren't counted\
    \ for splitting the string.\n<|/ c |>\n<| c |>\nYou're right, I'll update my answer\n\
    <|/ c |>\n<| a dscore=0 tags=string,regex,php |>\nTry using preg_match():\n<code>\n\
    $string = 'one two three four';\npreg_match('/.{3}$/', $string, $matches);\n$finalString\
    \ = substr($matches[0], 0, 3);\nvar_dump($finalString);\n</code>\nThis would give\
    \ you\n<code>\nstring 'one two' (length=7)\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work because the word is supposed to be split by a space and spaces aren't counted\
    \ for splitting the string.\n<|/ c |>\n<| c |>\nThe `$matches[0]` would give you\
    \ the desired string, then\n<|/ c |>\n<| c |>\nNo. The $matches[0] would give\
    \ you \"one two three\". How would you split that into \"one two\" and \"three\"\
    ?\n<|/ c |>\n<| c |>\nThen just use `explode()` the string you got from `$matches[0]`\n\
    <|/ c |>\n<| a tags=string,regex,php d", "    $length = strlen($txt);\n    $last_char\
    \ = substr($txt, $length - 1);\n    if (is_array($last_char)) {\n        $last_char\
    \ = $last_char[0];\n    }\n    if (!preg_match('/^[a-z]+$/i', $last_char)) {\n\
    \        return false;\n    }\n    return true;\n}", "    if (strlen($txt) > 0\
    \ ) {\n        if ( !ctype_alpha(substr($txt, -1))) {\n            return false;\n\
    \        }\n        $words = explode(\" \", $txt);\n        foreach ($words as\
    \ $w) {\n            if ( !ctype_alpha($w)) {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}", "  if(empty($txt)) {\n\
    \    return false;\n  }\n  return !preg_match('/[^A-Z]$/', $txt);\n}", "  if (empty($txt))\
    \ {\n    return false;\n  }\n\n  $last = substr($txt, -1, 1, 'UTF-8');\n  return\
    \ !(strpos(strtolower($txt), strtolower($last)) === false);\n}\n", "    return\
    \ preg_match('/^[a-z]+$/i', $txt) && substr_count($txt, ' ') === 0;\n}\n", " \
    \ $len = strlen($txt);\n  if($len <= 0) {\n    return false;\n  }\n  $last_char\
    \ = substr($txt, $len - 1, 1);\n  return ($last_char !='a' && $last_char !='b'\
    \ && $last_char !='c' && $last_char !='d' && $last_char !='e' &&\n      $last_char\
    \ !='f' && $last_char !='g' && $last_char !='h' && $last_char !='i' && $last_char\
    \ !='j' &&\n      $last_char !='k' && $last_char !='l' && $last_char !='m' &&\
    \ $last_char !='n' && $last_char !='o' &&\n      $last_char !='p' && $last_char\
    \ !='q' && $last_char !='r' && $last_char !='s' && $last_char !='t' &&\n     \
    \ $last_char !='u' && $last_char !='v' && $last_char !='w' && $last_char !='x'\
    \ && $last_char !='y' &&\n      $last_char !='z');\n}\n", "  // Define variable\
    \ that will hold the answer.\n  $result = false;\n  // If the string is not empty,\
    \ get the last character of the string.\n  if (strlen($txt) > 0) {\n    // If\
    \ the last character is not a space, true, otherwise false.\n    $result = $txt[strlen($txt)\
    \ - 1] != ' ';\n  }\n  // Return the result of the function.\n  return $result;\n\
    }\n", "    $txt = trim($txt);\n    if (empty($txt) || strlen($txt) < 2) {\n  \
    \      return false;\n    }\n    $txt = strtolower($txt);\n    return substr($txt,\
    \ -1, 1, ' ') != $txt;\n}\n", "\t// get last char of string\n\t$last_char = $txt{strlen($txt)\
    \ - 1}; // last char of string\n\t// if last char is not an alphabet and is not\
    \ part of a word\n\t// return false\n\tif($last_char !== \"a\" && $last_char !==\
    \ \"A\" && $last_char !== \"e\" && $last_char !== \"E\" && $last_char !== \"i\"\
    \ && $last_char !== \"I\" && $last_char !== \"o\" && $last_char !== \"O\" && $last_char\
    \ !== \"u\" && $last_char !== \"U\"){\n\t\treturn false;\n\t}\n\treturn true;\n\
    }\n", "  // If text is blank, return false\n  if (!$txt) {\n    return false;\n\
    \  }\n\n  // Use rtrim to get rid of whitespace\n  $txt = trim($txt);\n\n  //\
    \ If text is blank, return false\n  if (!$txt) {\n    return false;\n  }\n\n \
    \ // Use strrpos to get the last character position\n  $last_char = strrpos($txt,\
    \ ' ');\n\n  // If text is blank, return false\n  if (!$last_char) {\n    return\
    \ false;\n  }\n\n  // Check if the last character is alphabetical and is not a\
    \ part of a word\n  $letter_is_letter = preg_match('/[^A-Za-z]$/', $txt[$last_char]);\n\
    \n  // Return true if last character is alphabetical and is not a part of a word\n\
    \  return !$letter_is_letter;\n}\n</code>\n<|/ a |>\n<| a |>\nHere's a solution\
    \ to your problem using regex:\n<code>\n$input = \"I like applepie\";\nif (preg_match('/^[a-z]*[a-z]*[a-z]*$/',\
    \ $input)) {\n    echo \"Success!\";\n} else {\n    echo \"Failed!\";\n}\n</code>\n\
    See it work here: http://ideone.com/UhEYz3\nThe regex says:\n\nStarts with zero\
    \ or more characters a to z\nThen ends with zero or more characters a to z\nThen\
    \ ends with zero or more characters a to z\n<|/ a tags=preg-match,php,regex dscore=0\
    \ |>\n<| c |>\nThis fails for `Apple pie` which should return true.\n<|/ c |>\n\
    <| c |>\nThat's true, but that's not what the OP asked for.\n<|/ c |>\n<| a tags=preg-match,php,regex\
    \ dscore=0 |>\nIf all you want to check is whether the last character is an alphabet\
    \ or not then you can use the following to check if the last character is a alphabet:\n\
    <code>\n<?php\n$test = \"abc 123\";\n$test = ltrim($test);\n\nif(substr($test,\
    \ -1, 1) == \"a\" || substr($test, -1, 1) == \"b\" || substr($test, -1, 1) ==\
    \ \"c\" || substr($test, -1, 1) == \"d\" || substr($test, -1, 1) == \"e\" || substr($test,\
    \ -1, 1) == \"f\" || substr($test, -1, 1) == \"g\" || substr($test, -1, 1) ==\
    \ \"h\" || substr($test, -1, 1) == \"i\" || substr($test, -1, 1) == \"j\" || substr($test,\
    \ -1, 1) == \"k\" || substr($test, -1, 1) == \"l\" || substr($test, -1, 1) ==\
    \ \"m\" || substr($test, -1, 1) == \"n\" || substr($test, -1, ", "    if (is_null($txt))\
    \ {\n        return false;\n    }\n    if ($txt{0} != \"\") {\n        return\
    \ false;\n    }\n    $last_char = $txt{strlen($txt)-1};\n    $first_char = strtolower($txt{0});\n\
    \    return (bool)ctype_alpha($first_char);\n}\n", "    $txt = trim($txt);\n \
    \   $lastChar = substr($txt,-1,1);\n    if($lastChar != ' ') {\n        return\
    \ $lastChar;\n    }\n    else {\n        return substr($txt,0,-1);\n    }\n}\n",
  "    $length = strlen($txt);\n    $last_char = substr($txt, $length - 1);\n\n  \
    \  // Check if last character is not part of the word.\n    if (is_string($last_char)\
    \ && $last_char !='-' && !preg_match('/\\w/', $last_char)) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}", "  $last_char = $txt[ strlen($txt)-1\
    \ ];\n  $is_letter = ctype_alpha($last_char);\n  $is_word_end = ctype_space($last_char);\n\
    \  $is_not_word_end = !($is_word_end);\n  if(!$is_letter && !$is_word_end) {\n\
    \    // No characters and last character is not a letter or space character\n\
    \    return false;\n  }\n  if($is_letter && $is_not_word_end) {\n    // Last character\
    \ is a letter and is not part of a word\n    return false;\n  }\n  return true;\n\
    }\n", "  $last = substr($txt, -1, 1);\n  return !preg_match('/^[a-zA-Z]$/', $last);\n\
    }\n", "    return preg_match('/[^a-z]+$/i', $txt);\n}", "   $txt_len = strlen($txt);\n\
    \   $i = $txt_len-1;\n   while ($i >= 0) {\n      $c = $txt[$i];\n      if ($c\
    \ != ' ' && $c != '\\t' && $c != '\\n' && $c != '\\r' && $c != '\\0' && $c !=\
    \ ',')\n         break;\n      $i--;\n   }\n   if ($i == 0 && $c == ' ')\n   \
    \   return true;\n   else\n      return false;\n}", "    $txt = trim($txt);\n\
    \    return substr($txt, -1) != substr($txt, 0, -1);\n}\n", "  $last = substr($txt,\
    \ -1);\n  if ($last == ' ' || $last == '-' || $last == '.' || $last == '\\'' ||\
    \ $last == '\\\\' || $last == '?' || $last == '!' || $last == '*' || $last ==\
    \ '+' || $last == '$')\n    return FALSE;\n  else\n    return TRUE;\n}", "  return\
    \ substr($txt, -1, 1) != ' '\n}\n", "    if (strlen($txt) >= 1) {\n        return\
    \ ((substr($txt, strlen($txt)-1, 1) == \"a\") || (substr($txt, strlen($txt)-1,\
    \ 1) == \"b\") || (substr($txt, strlen($txt)-1, 1) == \"c\") || (substr($txt,\
    \ strlen($txt)-1, 1) == \"d\") || (substr($txt, strlen($txt)-1, 1) == \"e\") ||\
    \ (substr($txt, strlen($txt)-1, 1) == \"f\") || (substr($txt, strlen($txt)-1,\
    \ 1) == \"g\") || (substr($txt, strlen($txt)-1, 1) == \"h\") || (substr($txt,\
    \ strlen($txt)-1, 1) == \"i\") || (substr($txt, strlen($txt)-1, 1) == \"j\") ||\
    \ (substr($txt, strlen($txt)-1, 1) == \"k\") || (substr($txt, strlen($txt)-1,\
    \ 1) == \"l\") || (substr($txt, strlen($txt)-1, 1) == \"m\") || (substr($txt,\
    \ strlen($txt)-1, 1) == \"n\") || (substr($txt, strlen($txt)-1, 1) == \"o\") ||\
    \ (substr($txt, strlen($txt)-1, 1) == \"p\") || (substr($txt, strlen($txt)-1,\
    \ 1) == \"q\") || (substr($txt, strlen($txt)-1, 1) == \"r\") || (substr($txt,\
    \ strlen($txt)-1, 1) == \"s\") || (substr($txt, strlen($txt)-1, 1) == \"t\") ||\
    \ (substr($txt, strlen($txt)-1, 1) == \"u\") || (substr($txt, strlen($txt)-1,\
    \ 1) == \"v\") || (substr($txt, strlen($txt)-1, 1) == \"w\") || (substr($txt,\
    \ strlen($txt)-1, 1) == \"x\") || (substr($txt, strlen($txt)-1, 1) == \"y\") ||\
    \ (substr($txt, strlen($txt)-1, 1) == \"z\") || (substr($txt, strlen($txt)-1,\
    \ 1) == \"A\") || (substr($txt, strlen($txt)-1, 1) == \"B\") || (substr($txt,\
    \ strlen($txt)-1, 1) == \"C\") || (substr($txt, strlen($txt)-1, 1) == \"D\") ||\
    \ (substr($txt, strlen($txt)-1, 1) == \"E\") || (substr($txt, strlen($txt)-1,\
    \ 1) == \"F\") || (substr($txt, strlen($txt)-1, 1) == \"G\") || (substr($txt,\
    \ strlen($", "  return preg_match('/\\W$/', $txt) && preg_match('/[^A-Za-z]$/',\
    \ $txt);\n}\n", "    return (substr($txt, -1) != \" \" && !preg_match(\"/^[a-zA-Z]+$/\"\
    , $txt));\n}", "    // Make sure the string is non-empty\n    if ($txt === '')\
    \ return false;\n    $txt = strtolower($txt);\n    // Make sure the string ends\
    \ with a letter\n    if (!$txt[strlen($txt) - 1]) return false;\n    // Make sure\
    \ the string doesn't contain any letters followed by a space\n    return !preg_match('/[^a-z\
    \ ]+$/', $txt);\n}\n", "  // Only get last character in string.\n  $last_char\
    \ = $txt[strlen($txt)-1];\n  // If last character is not an alphabetical character,\
    \ return false.\n  if (!preg_match('/^[a-zA-Z]$/', $last_char)) {\n    return\
    \ false;\n  }\n  // If last character is a alphabetical character, return true.\n\
    \  return true;\n}", "   return preg_match('/[a-z]$/i', $txt);\n}\n", "  // Only\
    \ proceed if $txt is not an empty string:\n  if (!$txt) {\n    return false;\n\
    \  }\n\n  // Create an array of the last letter of each word in $txt:\n  $letters\
    \ = preg_split('/\\s+/', $txt, -1, PREG_SPLIT_NO_EMPTY);\n\n  // Return true if\
    \ the last letter in each word is a letter:\n  return end($letters) === $letters[count($letters)\
    \ - 1];\n}", "    // Remove whitespace from start and end of $txt.\n    $txt =\
    \ trim($txt);\n    // Use substr() to get the last character of the string.\n\
    \    $lastChar = substr($txt, -1);\n    // If the last character is a letter,\
    \ return true.\n    if ($lastChar === ' ' || !is_letter($lastChar)) {\n      \
    \  return true;\n    } else {\n        return false;\n    }\n}\n", "  if (strlen($txt)\
    \ <= 0) {\n    return false;\n  }\n  $lastchar = substr($txt, strlen($txt) - 1,\
    \ 1);\n  if (ctype_alpha($lastchar)) {\n    return false;\n  }\n  $txt = trim(preg_replace('/\\\
    s+/', ' ', $txt));\n  return preg_match(\"/$txt$/i\", $txt);\n}", "  $last_char\
    \ = $txt[strlen($txt) - 1];\n  $is_a_letter = false;\n  for($i=0;$i<strlen($txt);$i++)\
    \ {\n    $char = strtolower(substr($txt,$i,1));\n    if(!isset($char[1])) {\n\
    \      $is_a_letter = $is_a_letter || ($char == $last_char);\n      break;\n \
    \   }\n  }\n  return $is_a_letter;\n}", "  $last_char = $txt[strlen($txt) - 1];\n\
    \  if ( strlen($last_char) > 1 ) {\n    if ( preg_match('/[^a-zA-Z]/', $last_char)\
    \ ) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  return $txt[strlen($txt)\
    \ - 1] == ' ';\n}\n", "  $last = strrpos($txt,' ');\n  if($last === false) return\
    \ false;\n  $last = strlen($txt) - 1;\n  while($last > 0){\n    if($txt[$last]\
    \ != ' ') break;\n    $last--;\n  }\n  if($last == 0) return false;\n  $last++;\n\
    \  while($last < strlen($txt)){\n    if($txt[$last] != ' ') break;\n    $last++;\n\
    \  }\n  return isalpha($txt[$last]);\n}\n", "    if(strlen($txt)==0)\n       \
    \ return false;\n    return (preg_match(\"/\\A([^a-z]*[a-z]+[a-z]*|[a-z]*[^a-z]*[a-z]+|[a-z]+)[a-z]$/i\"\
    ,$txt));\n}", "    $txt_ar = explode(\" \", $txt);\n    if ($txt_ar[count($txt_ar)-1]\
    \ == \"\") {\n        return false;\n    }\n    $last_char = substr($txt_ar[count($txt_ar)-1],\
    \ -1);\n    if (ord($last_char) > 64 && ord($last_char) < 91) {\n        return\
    \ true;\n    }\n    return false;\n}", "  // If the last character is a letter,\
    \ return true.\n  // Otherwise, return false.\n  return preg_match('/^[a-zA-Z]+$/',\
    \ $txt);\n}\n", "    return !preg_match('/[^A-Za-z]$/', $txt) && preg_match('/([A-Za-z])$/',\
    \ $txt);\n}", "    if(strlen($txt) > 0) {\n        return (substr($txt, -1) !=\
    \ \" \") &&\n            (ctype_alpha(substr($txt, -1)) == false);\n    }\n  \
    \  return false;\n}", "    if (strlen($txt) > 0)\n        if (ctype_alpha($txt[strlen($txt)-1]))\n\
    \            return true;\n    return false;\n}\n", "  return preg_match('/[a-z]$/i',\
    \ $txt);\n}", "    if (strlen($txt) != 0) {\n        $last_char = substr($txt,\
    \ strlen($txt) - 1, 1);\n        if (preg_match(\"/[a-z]/\", $last_char)) {\n\
    \            return true;\n        }\n    }\n    return false;\n}", "    $last_char\
    \ = $txt[strlen($txt)-1];\n    return preg_match('/[a-z]$/i', $last_char);\n}",
  "    // Your code here\n    $words = explode(\" \", $txt);\n    foreach($words as\
    \ $word) {\n        $word = trim($word);\n        if($word) {\n            $letters\
    \ = str_split($word);\n            if($letters[count($letters)-1]==$word[strlen($word)-1])\
    \ {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;\n}", "    return preg_match(\"/[a-z]+/\", substr($txt, -1));\n}", " \
    \   $last_char = substr($txt, -1, 1);\n    if ($last_char == ' ') {\n        //\
    \ Last char is a space. Don't check further.\n        return false;\n    } elseif\
    \ (ctype_alpha($last_char)) {\n        // Last char is alphabetical. Don't check\
    \ further.\n        return false;\n    } else {\n        // Last char is not alphabetical,\
    \ do check further.\n        return true;\n    }\n}\n", "  if (strlen($txt) >\
    \ 0)\n    {\n      $lastchar = substr($txt, strlen($txt) - 1, 1);\n      if (preg_match('/\\\
    s/', $lastchar))\n        {\n          return false;\n        }\n      return\
    \ true;\n    }\n  return false;\n}\n", "    if (empty($txt)) {\n        return\
    \ false;\n    }\n    $lastChar = substr($txt, -1, 1, true);\n    if (is_array($lastChar)\
    \ || is_object($lastChar)) {\n        if (is_object($lastChar)) {\n          \
    \  $lastChar = $lastChar->name;\n        }\n        $lastChar = strtolower($lastChar);\n\
    \        return in_array($lastChar, array('a', 'e', 'i', 'o', 'u'));\n    } else\
    \ {\n        return strtolower($lastChar) == 'a';\n    }\n}\n", "    if ($txt\
    \ === '') {\n        return false;\n    }\n    $txt = trim($txt);\n    $last =\
    \ strtoupper(substr($txt, -1));\n    return ($last === 'A' && !in_array($last,\
    \ $word)) || $last === 'E';\n}\n", "  return (strlen($txt) > 0 && ! preg_match('/^[a-zA-Z]$/',\
    \ $txt));\n}\n", "  return preg_match(\"/\\A[a-z]$/\", $txt);\n}\n", "  $txt =\
    \ str_replace(array(\"\\r\", \"\\n\"), \" \", $txt);\n  $txt = ucwords($txt);\n\
    \  $result = preg_match('/\\w$/', $txt);\n  return !$result;\n}", "    if (strlen($txt)\
    \ <= 0)\n        return false;\n    return ctype_alpha($txt[strlen($txt) - 1]);\n\
    }", "    global $wpdb;\n    \n    // Convert string to lower case\n    $txt =\
    \ strtolower($txt);\n    \n    // Convert string to lower case\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n\n    // Return the length\n    return (strlen($txt) == 1);\n}\n",
  "    $length = strlen($txt);\n    if ($length == 0)\n        return false;\n   \
    \ return (\n            $txt[($length-1)] >= 'a' && $txt[($length-1)] <= 'z' &&\n\
    \            $txt[($length-1)] != 'A' && $txt[($length-1)] != 'Z'\n    );\n}",
  "    $txt = trim($txt);\n    $lastChar = substr($txt, -1);\n    $lastCharLower =\
    \ strtolower($lastChar);\n    if (in_array($lastCharLower, array('a','e','i','o','u')))\
    \ {\n        return false;\n    }\n    $words = explode(\" \", $txt);\n    foreach($words\
    \ as $word) {\n        $wordLower = strtolower($word);\n        if (in_array($wordLower,\
    \ array('a','e','i','o','u'))) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array,arrays\
    \ |>\n<| c |>\nI added a comment in my original post explaining why i needed to\
    \ check more than the first char\n<|/ c |>\n<| c |>\nIn that case, what is the\
    \ criteria for what is a word, like \"I\" and \"you\" would be a word, but \"\
    My\" and \"your\" would not?\n<|/ c |>\n<| c |>\nIm assuming its the space between\
    \ words only\n<|/ c |>\n<| c |>\n, yes.  I made that assumption in my answer and\
    \ added it to a comment on your question.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    if(strlen($sentence) > 0)\n{\n    $words = explode(' ', $sentence);\n    foreach\
    \ ($words as $key => $word)\n    {\n        if(strlen($word) > 0)\n        {\n\
    \            if($key==0)\n            {\n                echo \"The First word\
    \ was {$word}\";\n            }\n            else\n            {\n           \
    \     echo \"The last word was {$word}\";\n            }\n        }\n    }\n}\n\
    </code>\nI hope that helps!\n<|/ a tags=php,arrays,multidimensional-array,arrays\
    \ |>\n<| c |>\nI need to be able to check more than the first word\n<|/ c |>\n\
    <| a tags=php,arrays,multidimensional-array,arrays |>\nYou can explode each string\
    \ then loop through the array with array_map\n<code>\n<?php\n$sentence = 'I\\\
    'm a happy man, I like apples, I like oranges, I hate bananas';\n$words = explode('\
    \ ', $sentence);\n\n$words = array_map(function($a) {\n    return is_array($a)\
    \ ? $a : explode($a);\n}, $words);\n\n$lastword = array_pop($words);\n$lastword\
    \ = array_map('implode', $lastword);\n\necho $lastword;\n</code>\nhttp://sandbox.",
  "    $txt = strtolower($txt);\n    return !strlen($txt) || $txt[strlen($txt)-1]\
    \ != ' ';\n}\n", "    if ($txt===\"\") {\n        return false;\n    }\n\n   \
    \ // Count how many spaces there are in the string\n    $spaces = strspn($txt,\
    \ \" \", strlen($txt));\n\n    // If the last space was followed by a letter,\
    \ then it is not\n    // a letter anymore\n    if ($spaces == 1 && !is_letter(substr($txt,\
    \ -1))) {\n        return true;\n    }\n\n    return false;\n}\n", "  if ($txt)\
    \ {\n    // Get last character from string.\n    $last_char = $txt[strlen($txt)\
    \ - 1];\n    // Check if last character is alphabetic.\n    if (is_alpha($last_char))\
    \ {\n      // If so return true.\n      return true;\n    } else {\n      // Else\
    \ return false.\n      return false;\n    }\n  }\n}\n", "    return (strlen($txt)\
    \ > 0)\n            && is_alpha($txt[strlen($txt)-1]);\n}\n", "    return preg_match('/[^a-zA-Z\
    \ ]+$/', $txt);\n}\n", "  return preg_match('/[^A-Za-z]$/', $txt);\n}", "  return\
    \ preg_match(\"/^[A-Za-z]$/\", substr($txt, -1, 1));\n}\n</code>\nThen call your\
    \ functions with preg_replace:\n<code>\necho preg_replace(\"/ +/\", \" \", $txt);\n\
    </code>\n<|/ a tags=regex,php,preg-replace |>\n<| a tags=regex,php,preg-replace\
    \ |>\n<code>\npreg_replace('/[ ]+/', ' ', preg_replace('/(^|\\s)(\\w)/', '$1 $2',\
    \ $yourString));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease explain your answer\
    \ a bit. This looks like a code-only answer, but it could use some explanation.\n\
    <|/ c |>\n<| c |>\nIn short, remove all spaces and add one space after each word.\n\
    <|/ c |>\n<| a dscore=0 tags=regex,php,preg-replace |>\n<code>\n<?php\n$string\
    \ = 'some text here\nwith spaces between words and end\nwith a lot of space after';\n\
    \necho preg_replace('/(\\w)/', \"$1 \", $string);", "    return ($txt[strlen($txt)\
    \ - 1] == ' ') ? false : true;\n}\n", "\t$last_char = $txt[$txt.length - 1];\n\
    \t$words = explode(\" \", $txt);\n\tforeach($words as $word) {\n\t\t$word = trim($word);\n\
    \t\tif($word) {\n\t\t\tif($last_char == $word[$word.length - 1]) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}", "  // If the string is empty\
    \ or null, it's false\n  if ($txt == '') return FALSE;\n\n  // Get the length\
    \ of the string\n  $length = strlen($txt);\n\n  // If it's only 1 character, it's\
    \ false\n  if ($length < 1) return FALSE;\n\n  // Get the last character\n  $last_char\
    \ = substr($txt, $length - 1, 1);\n\n  // If the last character is NOT a letter\n\
    \  if ( ! preg_match('/[A-Z]/', $last_char) ) {\n    // Return false\n    return\
    \ FALSE;\n  }\n\n  // Return true\n  return TRUE;\n}\n</code>\n<|/ a |>\n<| a\
    \ tags=php dscore=2 |>\n<code>\nif(preg_match('~^([a-z])[^a-z]*?$~', $str)){\n\
    \    // your code\n}\n</code>\n<|/ a |>\n<| c |>\nI don't want to be rude, but\
    \ I don't understand your regexp. This doesn't work either. Surely you meant `if\
    \ (preg_match('~^([a-z])[^a-z]*?$~', $str)) { ...`? But even that doesn't seem\
    \ to work - it returns true even for strings like \"applepie\" or \"apple pie\"\
    .\n<|/ c |>\n<| a |>\n<code>", "    $len = strlen($txt);\n    if ($len > 0)\n\
    \    {\n        $last_char = substr($txt, $len-1, 1);\n        if (preg_match('/[a-z]/i',\
    \ $last_char))\n        {\n            return false;\n        }\n    }\n    return\
    \ false;\n}\n", "  return (strlen($txt) && ctype_alpha($txt[strlen($txt) - 1]));\n\
    }\n", "  return substr($txt, strlen($txt) - 1, 1)!=\" \";\n}", "  if ($txt ===\
    \ \"\") {\n    return false;\n  }\n  $last_char = substr($txt, -1, 1);\n  // check\
    \ if the last character is a letter\n  $is_letter = preg_match(\"/^[a-z_]/\",\
    \ $last_char);\n  return $is_letter;\n}", "  // Your code here\n  return (strlen($txt)>0)\
    \ && ($txt[strlen($txt)-1] >= 65 && $txt[strlen($txt)-1] <= 90 && !preg_match(\"\
    ~([a-z])$~i\", $txt));\n}\n", "  return substr($txt, -1, 1) != substr($txt, -1,\
    \ 1); \n}\n", "    $txt = trim($txt);\n    $last = substr($txt, -1, 1);\n    return\
    \ in_array($last, array(' ','.','_'), true);\n}", "    return preg_match(\"/^[a-z]$/i\"\
    , $txt) && !preg_match(\"/[a-z]{2,}/i\", $txt);\n}\n", "  $txt = trim($txt);\n\
    \  $txt = strtolower($txt);\n  if (empty($txt)) {\n    return false;\n  }\n  if\
    \ (preg_match(\"/^[a-zA-Z]$/\", $txt)) {\n    return preg_match(\"/^[a-zA-Z]$/\"\
    , substr($txt, -1));\n  } else {\n    return false;\n  }\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=regex,php,preg-match,str-replace,string dscore=1 |>\nYou can use\
    \ this regex:\n<code>\n^[^a-z0-9]+$\n</code>\nRegEx Demo\nPHP code:\n<code>\n\
    $str = \"This is my first post\";\n\nif (preg_match('/^[^a-z0-9]+$/', $str)) {\n\
    \    echo $str; // => This is my first post\n} else {\n    echo $str; // => This\
    \ is my first post\n}\n</code>\n<|/ a |>\n<| a tags=regex,php,preg-match,str-replace,string\
    \ dscore=0 |>\n<code>\n<?php\n$str = \"This is my first post\";\n$pattern = '/[^a-z0-9]+/i';\n\
    $replacement = \"-\";\necho preg_replace($pattern, $replacement, $str);", "  \
    \  return substr($txt, -1) == \" \" && preg_match(\"/^[a-z]+$/i\", $txt) != 1;\n\
    }\n", "    $txtlen = strlen($txt);\n    return $txtlen > 0 &&\n        ($txt[($txtlen\
    \ - 1)] >= 'a' && $txt[($txtlen - 1)] <= 'z') &&\n        !in_array($txt[($txtlen\
    \ - 1)], \" \");\n}\n", "    $txt = trim($txt);\n    if (!$txt) {\n        return\
    \ false;\n    }\n    if (substr($txt,-1,1) != \" \") {\n        return true;\n\
    \    }\n    $txt = substr($txt,0,-1);\n    return is_alphabetic($txt);\n}\n",
  "    // Get the last character of the string.\n    $last_char = $txt[strlen($txt)\
    \ - 1];\n\n    // Check the last character.\n    if ($last_char === ' ') {\n \
    \       // The last character is a space character.\n        // If the string\
    \ does not end with a word character,\n        // then the last character must\
    \ be a letter or space.\n        return false;\n    } else {\n        // The last\
    \ character is not a space character.\n        // If the string ends with a word\
    \ character,\n        // then the last character must be a letter.\n        return\
    \ preg_match('/^[a-z ]+$/', $txt[strlen($txt) - 1]);\n    }\n}\n", "    // Return\
    \ false if the last character is not a letter and true\n    // otherwise.\n  \
    \  if (substr($txt, -1, 1) != ' ') {\n        return false; \n    }\n    \n  \
    \  // Return true if the last character is a letter and not a\n    // part of\
    \ a word (e.g.: \"apple pi e \").\n    $txt = strtolower($txt);\n    $txt = explode(\"\
    \ \", $txt);\n    \n    return ($txt[count($txt) - 1] != $txt[count($txt) - 2]);\n\
    }\n", "    return substr($txt, -1, 1) != ' ' &&\n        substr($txt, -1, 1) !=\
    \ '\\n';\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n function is_last ($arr){\n\
    \    $last = array_pop ($arr);\n    foreach ($arr as $item){\n        if ($item\
    \ === $last){\n            return true;\n        }\n    }\n    return false;\n\
    }\n</code>\n<|/ a dscore=0 tags=arrays,php,substring |>\n<| a |>\nThis function\
    \ will return true if the last element is a letter and not a digit\n<code>", " \
    \   $last = strrchr(trim($txt), ' ');\n    if ($last) {\n        $last = $last[0];\n\
    \    }\n    return !isalpha($last);\n}", "    if(empty($txt)) {\n        return\
    \ false;\n    }\n    $len = strlen($txt);\n    $last_letter = substr($txt, $len\
    \ - 1, 1);\n    if($last_letter == \"e\" || $last_letter == \"\xE8\" || $last_letter\
    \ == \"\xEB\") {\n        $last_letter = \"e\";\n    } else {\n        $last_letter\
    \ = \"\xE8\";\n    }\n    $last_letter = strtolower($last_letter);\n    $last_letter\
    \ = \"\xE8e\xEB\xE8\xE0\xE8\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC", "    $is_last_letter\
    \ = FALSE;\n    $last_char = $txt[strlen($txt) - 1];\n    if(preg_match('/[a-z]$/i',\
    \ $last_char)) {\n        $is_last_letter = TRUE;\n    }\n    return $is_last_letter;\n\
    }\n", "    return substr($txt, -1) != ' ' &&\n           substr($txt, -1, 1) !=\
    \ ' ' &&\n           preg_match('/[a-zA-Z]/', $txt);\n}\n", "    return (strlen($txt)>0\
    \ && preg_match('/^[a-z]+$/i', $txt));\n}", "  return substr($txt, -1) != \" \"\
    \ &&\n         !preg_match('/[^A-Z ]/i', $txt);\n}\n</code>\n<|/ a tags=regex,php\
    \ |>\n<| c |>\nI think you meant `!preg_match('/[^A-Z ]/', $txt);`, since this\
    \ also covers spaces.\n<|/ c |>\n<| a |>\nIt looks like you want to check if the\
    \ last character is NOT a space?\n<code>\n<?php\nif(substr($str, -1) != \" \"\
    )\n{\n  echo \"Last character is not a space\";\n}", "    $last_char = substr($txt,\
    \ -1);\n    if (preg_match('/^[A-Za-z]$/', $last_char)) {\n        return false;\n\
    \    }\n    return true;\n}\n", "    if (empty($txt)) {\n        return false;\n\
    \    }\n\n    $char_at_end = substr($txt, -1);\n    $last_char_not_in_word = $char_at_end\
    \ === ' ' || $char_at_end === '?';\n    return !$last_char_not_in_word;\n}\n",
  "  if (strlen($txt)>0){\n    if (ctype_alpha($txt[strlen($txt)-1])){\n      return\
    \ true;\n    }\n  }\n  return false;\n}", "  $txt = strtolower($txt);\n  $lastChar\
    \ = substr($txt, -1, 1);\n  $lastChar = strtoupper($lastChar);\n  if ($lastChar\
    \ != ' ') return true;\n  $words = explode(' ', $txt);\n  foreach ($words as $word)\
    \ {\n    if (substr($word, 0, -1) == $lastChar)\n      return false;\n  }\n  return\
    \ true;\n}\n", "    return preg_match('/^[a-z]+$/i', $txt);\n}\n", "\tif ($txt)\
    \ {\n\t\t$last_char = $txt[strlen($txt)-1];\n\t\t$words = explode(\" \", $txt);\n\
    \t\tforeach ($words as $word) {\n\t\t\tif (strlen($word) > 1 && substr($word,-1)\
    \ == $last_char) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t\
    }\n\treturn false;\n}\n", "    // If the text is empty, return false.\n    if\
    \ ($txt == \"\") {\n        return false;\n    }\n\n    // Otherwise, return the\
    \ last character of the text and see if it is a letter.\n    return substr($txt,\
    \ -1, 1) == ' ';\n}", "  $length = strlen($txt);\n  if ($length < 1)\n    return\
    \ false;\n  $last_character = substr($txt, $length - 1, 1);\n  if (!preg_match(\"\
    /^\\p{L}+$/u\", $last_character))\n    return true;\n  return false;\n}\n", " \
    \   // Get the last character from $txt\n    $last_char = substr($txt, strlen($txt)-1,\
    \ 1);\n    // If last character is alphanumeric\n    if (preg_match(\"/^[a-z0-9]+$/i\"\
    , $last_char)) {\n        // The last character is not followed or preceeded\n\
    \        // by space or punctuation marks\n        if (preg_match(\"/^[^a-z0-9]+$|^[^a-z0-9].*[^a-z0-9]$/i\"\
    , $txt)) {\n            // The last character is alphabetical\n            return\
    \ false;\n        }\n    }\n    // Otherwise the last character is NOT alphabetical\n\
    \    return true;\n}\n", "    if (preg_match('/([a-zA-Z]+)/', $txt))\n    {\n\
    \        return FALSE;\n    }\n    else\n    {\n        return TRUE;\n    }\n}",
  "    $last_char = $txt[ strlen($txt) - 1 ];\n    return !is_alphabetical($last_char);\n\
    }\n", "    if (strlen($txt) < 2)\n        return false;\n\n    $last_char = substr($txt,\
    \ -1);\n    if (ord($last_char) >= ord('0') && ord($last_char) <= ord('9'))\n\
    \        return true;\n\n    $words = explode(' ', $txt);\n    $last_word = $words[count($words)\
    \ - 1];\n    return strlen($last_word) == 1 && !is_numeric($last_word[0]);\n}\n",
  "    return substr($txt, -1, 1) == 'a' || substr($txt, -1, 1) == 'e' || substr($txt,\
    \ -1, 1) == 'i' || substr($txt, -1, 1) == 'o' || substr($txt, -1, 1) == 'u' ||\
    \ substr($txt, -1, 1) == 'y';\n}", "  return preg_match(\"/[a-zA-Z]+$/\", $txt);\n\
    }\n", "  $last_char = $txt[strlen($txt)-1];\n  // If the last character is a letter,\
    \ and it is a part of\n  // a word, then return true.\n  return preg_match(\"\
    /[a-zA-Z]+/\", $last_char) ? true : false;\n}", "\t// If the text is empty, return\
    \ false\n\tif(!$txt || strlen($txt) == 0) {\n\t\treturn false;\n\t}\n\t// Get\
    \ the last character and store it in a variable\n\t$last = substr($txt, strlen($txt)-1,\
    \ 1);\n\t// Return true if the last character is NOT an alphabetical character\n\
    \treturn !preg_match(\"/^[a-zA-Z ]$/\", $last);\n}", "    if (empty($txt)) {\n\
    \        return false;\n    }\n    $len = strlen($txt);\n    if ($len === 0) {\n\
    \        return false;\n    }\n    if (substr($txt, ($len - 1), 1) === ' ') {\n\
    \        $txt = substr($txt, 0, $len - 1);\n    }\n    if (ctype_alpha($txt))\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n", "\t\
    // Only check for the first character\n\t$first_letter = strtoupper($txt[0]);\n\
    \t$last_letter = strtolower($txt[strlen($txt) - 1]);\n\t\n\t// If it has an alphabet\n\
    \tif (preg_match(\"/^[a-z]+$/i\", $txt)) {\n\t\treturn (strpos($txt, $last_letter)\
    \ === strlen($txt) - 1);\n\t}\n\t\n\t// If it has no alphabets\n\treturn false;\n\
    }\n", "    return preg_match('/([a-z])$/i', $txt) && strrchr($txt, ' ') === '';\n\
    }\n", "   $lastChar = substr($txt, -1, 1);\n   $lastChar = strtolower($lastChar);\n\
    \   return (preg_match(\"/[a-z]$/i\", $lastChar) == 0) ? true : false;\n}", " \
    \ global $last_char;\n  return $last_char === false ||\n         ($last_char ===\
    \ '' && ctype_space($txt[$txt- 1])) ||\n         !ctype_alpha($txt[$txt- 1]);\n\
    }\n", "\treturn strlen($txt) > 0 && ctype_alpha(substr($txt, -1)) ? false : true;\n\
    }\n", "  return substr($txt, -1, 1, '') !== substr($txt, -1);\n}\n$result = preg_replace(\"\
    /\".preg_quote('\\<\\w*\\w*\\w*\\w*\\w*\\w*\\>', \"/\").\"/\", $txt, $txt);\n\
    echo \"$result\";", "    $txt = trim($txt);\n    if (!$txt) {\n        return\
    \ false;\n    }\n\n    return preg_match('/^[A-Za-z]$/', $txt);\n}\n", "  $txt\
    \ = strtoupper($txt);\n  return substr($txt,-1)!='P'\n         && !strpos($txt,'\
    \ ');\n}\n\n$fh = fopen(\"php://stdin\",\"r\");\n$data = fread($fh, filesize(\"\
    php://stdin\"));\nfclose($fh);\n\n$txt = strtoupper($data);\necho \"$txt $is_last_letter\\\
    n\";", "  if (strlen($txt) > 0 && ctype_alpha($txt{strlen($txt)-1})) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n", "    $last_char = substr($txt,-1);\n\
    \    return ( is_alpha($last_char) && ! preg_match(\"~[\\\\p{Z}\\\\p{C}]*$~u\"\
    , $last_char) );\n}", "    // Check to see if the string ends in space\n    if\
    \ (substr($txt, strlen($txt) - 1, 1) == \" \")\n        return false;\n    //\
    \ Check to see if the last character is a letter\n    return (isset($txt[strlen($txt)\
    \ - 1])) && (ctype_alpha($txt[strlen($txt) - 1]));\n}", "    $last_char = substr($txt,\
    \ -2, 1);\n    if (in_array($last_char, array(\"a\", \"e\", \"i\", \"o\", \"u\"\
    ))) {\n        return false;\n    }\n    return true;\n}\n", "    $txt = trim($txt);\n\
    \    $txt = preg_replace('/[^A-Z ]/', '', $txt);\n    return strlen($txt) > 0;\n\
    }\n", "    $len = strlen($txt);\n    if ($len > 0) {\n        $lastChar = substr($txt,\
    \ $len - 1, 1);\n        if ($lastChar != ' ' && $lastChar != '-') {\n       \
    \     return true;\n        }\n    }\n    return false;\n}", "    if ($txt ===\
    \ '') {\n        return false;\n    }\n    $txt = preg_replace(\"/[^A-Za-z]$/\"\
    , '', $txt);\n    return is_string($txt);\n}\n", "    return substr($txt, -1,\
    \ 1) === ' ' && substr($txt, 0, -1) !==\n            ' ' && preg_match('/[^a-z]+$/i',\
    \ $txt);\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nThis is not a PHP specific\
    \ question, but a general programming question.\nTo be honest, I'm surprised that\
    \ no one has mentioned regular expressions.\nBut I do have some experience with\
    \ regular expressions and I think it is an elegant solution.\nFirst of all, let\
    \ me give a little bit of an explanation about regular expressions.\nThe regular\
    \ expression language can be defined by different kinds of rules. There are also\
    \ different kind of syntax and different types of quantifiers. In your example\
    \ I use the regular expression \"word\" to be the whole word (at least 1 character\
    \ and 1 whitespace) and a quantifier that is zero or more times. The syntax of\
    \ regular expressions allows some features that makes it easier to understand\
    \ the problem. But a regular expression can be expressed in multiple different\
    \ ways.\nThe regular expression language is defined in the formal specification\
    \ and has a certain syntax (sometimes more than one). The syntax is called regular\
    \ expression. In the case of regular languages you always have quantifiers (+,\
    \ *, ? ...) which match patterns and there are some features that aren't supported\
    \ by regular expressions. Examples are:\n\nThe regex engine may interpret some\
    \ characters as characters or as meta-characters.\nIn some cases you may have\
    \ to use the escape character \\.\nA regular expression can match a string which\
    \ contains characters or meta-characters. So you may want to use a character class\
    \ \\s.\n\nRegular expressions are used to match patterns in strings. A pattern\
    \ can be a string or a regular expression. A pattern may contain character ranges\
    \ like [a-z] for all characters from ASCII a-z.\nIf you want to match a string\
    \ that contains a word boundary (a word which is not followed by a non-word character\
    \ or another word boundary) you can use \\b which represents a word boundary.\
    \ \\b is represented by the special character \\b.\nHere is a little code example\
    \ to show that you can match a word boundary, which is a word character which\
    \ is not a word character:\n<code>\n<?php\n\n/**\n * string $string\n * bool\n\
    \ */", "    global $alpha;\n\n    $txt = str_replace(\" \", \"\", $txt);\n   \
    \ if (substr($txt, -1, 1) === $alpha) {\n        $txt = substr($txt, 0, -1);\n\
    \    }\n    return (strlen($txt) == 1);\n}\n", "  if ( !empty($txt) && mb_strlen($txt)\
    \ > 0 )\n  {\n    $txt = mb_substr($txt, -1); // Get the last character only.\n\
    \    return ( !preg_match('/^\\W/', $txt) ); \n  }\n  return false;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
