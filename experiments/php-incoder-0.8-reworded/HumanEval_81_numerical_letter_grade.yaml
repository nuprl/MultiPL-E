name: HumanEval_81_numerical_letter_grade
language: php
prompt: "<?php\n// It is the last week of the semester and the teacher has to give\
  \ the grades\n// to students. The teacher has been making her own algorithm for\
  \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
  // She has given you an array of GPAs for some students and you have to write \n\
  // a function that can output an array of letter grades using the following table:\n\
  // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7             \
  \   A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7      \
  \          B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
  \                C\n// > 1.3                C-\n// > 1.0                D+ \n//\
  \ > 0.7                D \n// > 0.0                D-\n// 0.0                E\n\
  // Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n// array(\"A+\"\
  , \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades) {\n"
tests: "function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
  \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
  )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
  \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"E\", \"D-\"))\
  \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $grades = array_map('round',$grades);\n    $grades = array_map('intval',$grades);\n\
    \    $grades = array_map('round',$grades);\n    $grades = array_fill(0,8,$grades);\n\
    \    sort($grades);\n    $grades = array_reverse($grades);\n    $grades = array_slice($grades,0,3);\n\
    \    $grades = array_slice($grades,3,1);\n    $grades = array_slice($grades,1,3);\n\
    \    $grades = array_slice($grades,0,3);\n    $grades = array_slice($grades,0,3);\n\
    \    return array_map(function($x) { return chr(65+$x); },$grades);\n}\n$grades\
    \ = array(4.0, 3.7, 3.3, 3.0, 1, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0);\nprint_r(numerical_letter_grade($grades));",
  "\t\n\t$output = array();\n\t\n\tforeach ($grades as $grade) {\n\t\t\n\t\t$index\
    \ = 0;\n\t\t\n\t\twhile ($index < count($output)) {\n\t\t\t\n\t\t\tif ($grades[$index]\
    \ > $grades[$index + 2]) {\n\t\t\t\t\n\t\t\t\t$output[] = 'A+';\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\t\n\t\t\tif ($grades[$index] > $grades[$index + 3]) {\n\t\t\t\t\n\
    \t\t\t\t$output[] = 'A';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif ($grades[$index]\
    \ > $grades[$index + 5]) {\n\t\t\t\t\n\t\t\t\t$output[] = 'A-';\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\t\n\t\t\tif ($grades[$index] > $grades[$index + 7]) {\n\t\t\t\t\n\
    \t\t\t\t$output[] = 'B+';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif ($grades[$index]\
    \ > $grades[$index + 8]) {\n\t\t\t\t\n\t\t\t\t$output[] = 'B';\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\t\n\t\t\tif ($grades[$index] > $grades[$index + 10]) {\n\t\t\t\t\
    \n\t\t\t\t$output[] = 'B-';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif ($grades[$index]\
    \ > $grades[$index + 12]) {\n\t\t\t\t\n\t\t\t\t$output[] = 'C+';\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\t\n\t\t\tif ($grades[$index] > $grades[$index + 13]) {\n\t\t\t\t\
    \n\t\t\t\t$output[] = 'C';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif ($grades[$index]\
    \ > $grades[$index + 15]) {\n\t\t\t\t\n\t\t\t\t$output[] = 'C-';\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\t\n\t\t\tif ($grades[$index] > $grades[$index + 18]) {\n\t\t\t\t\
    \n\t\t\t\t$output[] = 'D+';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif ($grades[$index]\
    \ > $grades[$index + 19]) {\n\t\t\t\t\n\t\t\t\t$output[] = 'D';\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\t\n\t\t\tif ($grades[$index] > $grades[$index + 22]) {\n\t\t\t\t\
    \n\t\t\t\t$output[] = 'D-';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif ($grades[$index]\
    \ > $grades[$index + 23]) {\n\t\t\t\t\n\t\t\t\t$output[] = 'E';\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\t\n\t\t\t$index++;\n\t\t}\n\t}\n\t\n\treturn $output;\n}", "   \
    \ $gpas_of_students = array();\n    foreach($grades as $grade) {\n        $gpas_of_students[]\
    \ = $grade;\n    }\n    return grade_equation($gpas_of_students);\n}\n\n$grades\
    \ = array(4.0, 3, 1.7, 2, 3.5);\n$grades = numerical_letter_grade($grades);\n\
    print_r($grades);\n", "  // Add your solution here\n  \n}\n", "  // Your code\
    \ goes here.\n}", "  $grades = array_map('round', array_map( 'trim', array($grades)\
    \ ) );\n  $grades = array_filter( $grades );\n  $grades = array_map('floatval',\
    \ $grades);\n\n  return array_map('numerical_letter_grade', $grades);\n}\n", " \
    \   \n    $grades = array_map('round', array_chunk($grades, 2));\n    \n    $grades\
    \ = array_filter($grades, function ($a) { return $a != 0; });\n    \n    $grades\
    \ = array_combine(range(1, count($grades)), $grades);\n    \n    $grades = array_flip($grades);\n\
    \    \n    return array_map(function ($letter, $grade) {\n        return $letter\
    \ + $grade;\n    }, array_flip(range('A+', 'E')), array_values($grades));\n}",
  "  $grades = array_filter($grades);\n  if (count($grades) === 0) {\n    return array('E');\n\
    \  }\n  $max = $grades[0];\n  $result = '';\n  for ($i = 0; $i < count($grades);\
    \ ++$i) {\n    if ($grades[$i] > $max) {\n      $max = $grades[$i];\n    }\n \
    \ }\n  $grades = array_filter($grades, function ($v) use ($max) {\n    return\
    \ $v > $max;\n  });\n  foreach ($grades as $key => $grade) {\n    $result .= $grades[$key];\n\
    \    if ($key < (count($grades) - 1)) {\n      $result .= '+';\n    }\n  }\n \
    \ return array($result);\n}\n\n/**\n * Given an array of GPAs and a letter grade,\
    \ return the letter grade.\n * \n * @param array $grades array of GPAs for some\
    \ students\n * @param string $letter letter grade (A, B, C, D, E, F)\n * @return\
    \ string the letter grade\n */", "    $grades = array_reverse($grades);\n    foreach\
    \ ($grades as $value) {\n        if ($value >= 0 && $value <= 9) $grades[] = chr($value\
    \ + ord('a')); \n        else if ($value >= 10 && $value <= 19) $grades[] = chr($value\
    \ - 10 + ord('a')); \n        else if ($value >= 20 && $value <= 29) $grades[]\
    \ = chr($value - 20 + ord('a')); \n        else if ($value >= 30 && $value <=\
    \ 39) $grades[] = chr($value - 30 + ord('a')); \n        else if ($value >= 40\
    \ && $value <= 49) $grades[] = chr($value - 40 + ord('a')); \n        else if\
    \ ($value >= 50 && $value <= 59) $grades[] = chr($value - 50 + ord('a')); \n \
    \       else if ($value >= 60 && $value <= 69) $grades[] = chr($value - 60 + ord('a'));\
    \ \n        else if ($value >= 70 && $value <= 79) $grades[] = chr($value - 70\
    \ + ord('a')); \n        else if ($value >= 80 && $value <= 89) $grades[] = chr($value\
    \ - 80 + ord('a')); \n        else if ($value >= 90 && $value <= 99) $grades[]\
    \ = chr($value - 90 + ord('a')); \n        else if ($value >= 100) $grades[] =\
    \ chr($value - 100 + ord('a')); \n        else if ($value <= 0) $grades[] = chr($value\
    \ - 50 + ord('a'));\n    }\n    return $grades;\n}", "\tfor($i = 0; $i < sizeof($grades);\
    \ $i++) {\n\t\tif ($grades[$i] <= 3.0) {\n\t\t\t$grades[$i] = 'A+';\n\t\t}\n\t\
    \tif ($grades[$i] >= 3.0 && $grades[$i] <= 3.7) {\n\t\t\t$grades[$i] = 'A';\n\t\
    \t}\n\t\tif ($grades[$i] >= 3.7 && $grades[$i] <= 3.3) {\n\t\t\t$grades[$i] =\
    \ 'A-';\n\t\t}\n\t\tif ($grades[$i] >= 3.3 && $grades[$i] <= 3.0) {\n\t\t\t$grades[$i]\
    \ = 'B+';\n\t\t}\n\t\tif ($grades[$i] >= 3.0 && $grades[$i] <= 2.7) {\n\t\t\t\
    $grades[$i] = 'B';\n\t\t}\n\t\tif ($grades[$i] >= 2.7 && $grades[$i] <= 2.3) {\n\
    \t\t\t$grades[$i] = 'B-';\n\t\t}\n\t\tif ($grades[$i] >= 2.3 && $grades[$i] <=\
    \ 2.0) {\n\t\t\t$grades[$i] = 'C+';\n\t\t}\n\t\tif ($grades[$i] >= 2.0 && $grades[$i]\
    \ <= 1.7) {\n\t\t\t$grades[$i] = 'C';\n\t\t}\n\t\tif ($grades[$i] >= 1.7 && $grades[$i]\
    \ <= 1.3) {\n\t\t\t$grades[$i] = 'C-';\n\t\t}\n\t\tif ($grades[$i] >= 1.3 && $grades[$i]\
    \ <= 1.0) {\n\t\t\t$grades[$i] = 'D+';\n\t\t}\n\t\tif ($grades[$i] >= 1.0 && $grades[$i]\
    \ <= 0.7) {\n\t\t\t$grades[$i] = 'D';\n\t\t}\n\t\tif ($grades[$i] >= 0.7 && $grades[$i]\
    \ <= 0.0) {\n\t\t\t$grades[$i] = 'D-';\n\t\t}\n\t\tif ($grades[$i] == 0.0) {\n\
    \t\t\t$grades[$i] = 'E';\n\t\t}\n\t}\n\treturn $grades;\n}", "    $grades_array\
    \ = array(\n        \"4.0\" => \"A+\",\n        \"3.7\" => \"A\", \n        \"\
    3.3\" => \"A-\",\n        \"3.0\" => \"B+\",\n        \"2.7\" => \"B\",\n    \
    \    \"2.3\" => \"B-\",\n        \"2.0\" => \"C+\",\n        \"1.7\" => \"C\"\
    ,\n        \"1.3\" => \"C-\",\n        \"1.0\" => \"D+\",\n        \"0.7\" =>\
    \ \"D\",\n        \"0.0\" => \"D-\",\n        \"0.0\" => \"E\",\n    );\n    return\
    \ $grades_array[$grades];\n}\n", "    $letters = array('A','B','C','D','E');\n\
    \    $grade = 0;\n    foreach($grades as $g) {\n        $grade += $g;\n    }\n\
    \    $grade = array_pop($grades);\n    $grade += $grade % 10;\n    $grade = array_pop($grades);\n\
    \    $grade += $grade % 10;\n    $grade = array_pop($grades);\n    $grade += $grade\
    \ % 10;\n    $grade = array_pop($grades);\n    $grade += $grade % 10;\n    $grade\
    \ = array_pop($grades);\n    $grade += $grade % 10;\n    $grade = array_pop($grades);\n\
    \    $grade = array_pop($grades);\n    $grade = array_pop($grades);\n    $grade\
    \ = array_pop($grades);\n    $grade = array_pop($grades);\n    $grade = array_pop($grades);\n\
    \    $grade = array_pop($grades);\n    $grade = array_pop($grades);\n    $grade\
    \ = array_pop($grades);\n    $grade = array_pop($grades);\n    $grade = array_pop($grades);\n\
    \    $grade = array_pop($grades);\n    $grade = array_pop($grades);\n    $grade\
    \ = array_pop($grades);\n    $grade = array_pop($grades);\n    $grade = array_pop($grades);\n\
    \    $grade = array_pop($grades);\n    $grade = array_pop($grades);\n    $grade\
    \ = array_pop($grades);\n    $grade = array_pop($grades);\n    $grade = array_pop($grades);\n\
    \    $grade = array_pop($grades);\n    $grade = array_pop($grades);\n    $grade\
    \ = array_pop($grades);\n    $grade = array_pop($grades);\n    $grade = array_pop($grades);\n\
    \    $grade = array_pop($grades);\n    $grade = array_pop($grades);\n    $grade\
    \ = array_pop($grades);\n    $grade = array_pop($grades);\n    $grade = array_pop($grades);\n\
    \    $grade = array_pop($grades);\n    $grade = array_pop($grades);\n    $grade\
    \ = array_pop($grades);\n    $grade = array_pop($grades);\n    $grade = array_pop($grades);\n\
    \    $grade = array_pop($grades);\n    $grade = array_pop($grades);\n    $grade\
    \ = array_pop($grades);\n    $grade = array_pop($grades);\n    $grade = array_pop($grades);\n\
    \    $grade = array_pop($grades);\n    $", "  $grades = array_map('round', array_map('intval',\
    \ array_map('strval', $grades)));\n  return array_map(function ($grade) {\n  \
    \  if ($grade > 3.0) {\n      return $grade >= 4.0 ? \"A+\" : $grade >= 3.7 ?\
    \ \"A\" : $grade >= 3.3 ? \"A-\" : $grade >= 3.0 ? \"B+\" : $grade >= 2.7 ? \"\
    B\" : $grade >= 2.3 ? \"B-\" : $grade >= 2.0 ? \"C+\" : $grade >= 1.7 ? \"C\"\
    \ : $grade >= 1.3 ? \"C-\" : $grade >= 1.0 ? \"D+\" : $grade >= 0.7 ? \"D\" :\
    \ $grade >= 0.0 ? \"D-\" : \"E\";\n    } else {\n      return $grade >= 4.0 ?\
    \ \"A\" : $grade >= 3.7 ? \"A+\" : $grade >= 3.3 ? \"A-\" : $grade >= 3.0 ? \"\
    B\" : $grade >= 2.7 ? \"B+\" : $grade >= 2.3 ? \"B-\" : $grade >= 2.0 ? \"C\"\
    \ : $grade >= 1.7 ? \"C+\" : $grade >= 1.3 ? \"C-\" : $grade >= 1.0 ? \"D\" :\
    \ $grade >= 0.7 ? \"D+\" : $grade >= 0.0 ? \"D-\" : \"E\";\n    }\n  }, $grades);\n\
    }\n\necho implode(\" \", array_map(function ($letter) use ($grades) {\n  return\
    \ \"<li>{$letter}</li>\";\n}, numerical_letter_grade($grades)));\n</code>\nResult:\n\
    <code>\nA+ B C- C A- B+ B C+ C\n</code>\n<|/ a |>\n<| c |>\nThanks for the effort.\
    \ Can you please explain, what this line is doing:\n\n$grades = array_map('round',\
    \ array_map('intval', array_map('strval', $grades)));\n<|/ c |>\n<| c |>\nIt rounds\
    \ the numbers to nearest integers and then converts them to strings. Then `strval`\
    \ converts them back to strings.\n<|/ c |>\n<| c |>\nI understand. But, I tried\
    \ and it's not giving me right result. I am providing you the output of array\
    \ as I explained above in question.\n<|/ c |>\n<| c |>\nI see the problem now.\
    \ It should be `strval` instead of `intval`. Will edit my answer.\n<|/ c |>\n\
    <| c |>\nThis is what I got: A+ B- C", "\t$grades = array_map('intval', $grades);\n\
    \t$letters = array(\"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\"\
    , \"D+\", \"D\", \"D-\", \"E\");\n\t$grades_sum = array_sum($grades);\n\t$grades_sum_div\
    \ = $grades_sum / count($grades);\n\t$i = 0;\n\twhile ($grades_sum_div > 0) {\n\
    \t\t$grades_sum -= $grades[$i];\n\t\t$grades_sum_div -= $grades_sum / count($grades);\n\
    \t\t$i++;\n\t}\n\treturn array_slice($letters, 0, $i); \n}", "\t$grades = $grades;\n\
    \t$grades_count = count($grades);\n\t$grades_percentage = round(($grades_count\
    \ - 1) * 100 / ($grades_count + 1), 1);\n\t$grades_percentage = ceil($grades_percentage);\n\
    \t$grades_percentage = $grades_percentage * 0.01;\n\t$grades_percentage = floor($grades_percentage);\n\
    \t$grades_percentage = $grades_percentage + 0.000001;\n\n\t$grades_array = \"\
    array\";\n\t$grades_array = array(\n\t\t\"A+\" => \"4.0\",\n\t\t\"A\" => \"3.7\"\
    ,\n\t\t\"A-\" => \"3.3\",\n\t\t\"B+\" => \"3.3\",\n\t\t\"B\" => \"3.0\",\n\t\t\
    \"B-\" => \"2.7\",\n\t\t\"C+\" => \"2.7\",\n\t\t\"C\" => \"2.0\",\n\t\t\"C-\"\
    \ => \"1.7\",\n\t\t\"D+\" => \"1.7\",\n\t\t\"D\" => \"1.0\",\n\t\t\"D-\" => \"\
    0.7\",\n\t\t\"E\" => \"0.0\"\n\t);\n\n\tif ($grades_percentage <= 3.00) {\n\t\t\
    $grades_array = array(\n\t\t\t\"A+\" => \"4.0\",\n\t\t\t\"A\" => \"3.7\",\n\t\t\
    \t\"A-\" => \"3.3\",\n\t\t\t\"B+\" => \"3.3\",\n\t\t\t\"B\" => \"3.0\",\n\t\t\t\
    \"B-\" => \"2.7\",\n\t\t\t\"C+\" => \"2.7\",\n\t\t\t\"C\" => \"2.0\",\n\t\t\t\"\
    C-\" => \"1.7\",\n\t\t\t\"D+\" => \"1.7\",\n\t\t\t\"D\" => \"1.0\",\n\t\t\t\"\
    D-\" => \"0.7\",\n\t\t\t\"E\" => \"0.0\"\n\t\t);\n\t\t$grades_percentage = \"\
    3.00\";\n\t}\n\n\tif ($grades_percentage <= 3.70) {\n\t\t$grades_array = array(\n\
    \t\t\t\"A+\" => \"4.0\",\n\t\t\t\"A\" => \"3.7\",\n\t\t\t\"A-\" => \"3.3\",\n\t\
    \t\t\"B+\" => \"3.3\",\n\t\t\t\"B\" => \"3.0\",\n\t\t\t\"B-\" => \"2.7\",\n\t\t\
    \t\"C+\" => \"2.7\",\n\t\t\t\"C\" => \"2.0\",\n\t\t\t\"C-\" => \"1.7\",\n\t\t\t\
    \"D+\" => \"1.7\",\n\t\t\t\"D\" => \"1.0\",\n\t\t\t\"D-\" => \"0.7\",\n\t\t\t\"\
    E\" => \"0.0\"\n\t\t);\n\t\t$grades_percentage = \"3.70\";\n\t}\n\n\tif ($grades_percentage\
    \ <= 3.30) {\n\t\t$grades_array = array(\n\t\t\t\"A+\" => \"4.0\",\n\t\t\t\"A\"\
    \ => \"3.7\",\n\t\t\t\"A-\" => \"3.3\",\n\t\t\t\"B+\" => \"3.3\",\n\t\t\t\"B\"\
    \ => \"3.0\",\n\t\t\t\"B-\" => \"2.7\",\n\t\t\t\"C+\" => \"2.7\",\n\t\t\t\"C",
  "    $letter_grades = array(\n        \"A\" => \"+\",\n        \"B\" => \"-\",\n\
    \        \"C\" => \"\",\n        \"D\" => \"\",\n        \"E\" => \"\"\n    );\n\
    \    \n    // The letter is A - B + C\n    $letter_grades[\"A-\"] = $letter_grades[\"\
    B\"] . $letter_grades[\"C\"];\n    \n    // The letter is A + B - C\n    $letter_grades[\"\
    A+\"] = $letter_grades[\"A\"] . $letter_grades[\"B\"] . ($letter_grades[\"C\"\
    ] ? \"-\" : \"\");\n    \n    // The letter is A - B - C\n    $letter_grades[\"\
    A-\"] = $letter_grades[\"A\"] . $letter_grades[\"B\"] . ($letter_grades[\"C\"\
    ] ? \"-\" : \"\");\n    \n    // The letter is B - C\n    $letter_grades[\"B+\"\
    ] = $letter_grades[\"B\"] . $letter_grades[\"C\"];\n    \n    // The letter is\
    \ B + C\n    $letter_grades[\"B\"] = $letter_grades[\"B\"] . $letter_grades[\"\
    C\"];\n    \n    // The letter is B\n    $letter_grades[\"B-\"] = $letter_grades[\"\
    B\"];\n    \n    // The letter is C\n    $letter_grades[\"C+\"] = $letter_grades[\"\
    C\"];\n    \n    // The letter is C\n    $letter_grades[\"C\"] = $letter_grades[\"\
    C\"];\n    \n    // The letter is C - D\n    $letter_grades[\"C-\"] = $letter_grades[\"\
    C\"] . $letter_grades[\"D\"];\n    \n    // The letter is C + D\n    $letter_grades[\"\
    C+\"] = $letter_grades[\"C\"] . $letter_grades[\"D\"];\n    \n    // The letter\
    \ is C - D\n    $letter_grades[\"C-\"] = $letter_grades[\"C\"] . $letter_grades[\"\
    D\"];\n    \n    // The letter is C + D\n    $letter_grades[\"C+\"] = $letter_grades[\"\
    C\"] . $letter_grades[\"D\"];\n    \n    // The letter is C - D - E\n    $letter_grades[\"\
    C-\"] = $letter_grades[\"C\"] . ($letter_grades[\"D\"] ? \"-\" : \"\") . ($letter_grades[\"\
    E\"] ? \"-\" : \"\");\n    \n    // The letter is C + D - E\n    $letter_grades[\"\
    C+\"] = $letter_grades[\"C\"] . ($letter_grades[\"D\"] ? \"-\" : \"\") . ($letter_grades[\"\
    E\"] ? \"-\" : \"\");\n    \n    // The letter is C - D", "    $grades = array_map(function\
    \ ($grade) {\n        return $grade > 0 ? $grade : -$grade;\n    }, $grades);\n\
    \    $grades = array_map(function ($grade) {\n        $result = [];\n        if\
    \ ($grade == 0) {\n            $result[] = 'E';\n        } elseif ($grade < 0)\
    \ {\n            $result[] = 'D';\n        } elseif ($grade <= 0.7) {\n      \
    \      $result[] = 'C';\n        } elseif ($grade <= 1.0) {\n            $result[]\
    \ = 'B';\n        } elseif ($grade <= 2.0) {\n            $result[] = 'A';\n \
    \       } elseif ($grade <= 3.0) {\n            $result[] = 'A+';\n        } elseif\
    \ ($grade <= 3.7) {\n            $result[] = 'A';\n        } elseif ($grade <=\
    \ 4.0) {\n            $result[] = 'A+';\n        } elseif ($grade > 4.0 && $grade\
    \ <= 4.7) {\n            $result[] = 'A-';\n        } elseif ($grade > 4.7) {\n\
    \            $result[] = 'B+';\n        }\n        return $result;\n    }, $grades);\n\
    \    $grades = array_map(function ($grade) {\n        return $grade ? '+'.$grade.'-'\
    \ : '';\n    }, $grades);\n    return implode('', $grades);\n}\n", "  $grades\
    \ = array_filter($grades);\n  $num_grades = count($grades);\n  $letter_grades\
    \ = array();\n\n  foreach($grades as $key => $value) {\n    if ($key > 0) {\n\
    \      $grades[$key - 1] = \"{$grades[$key - 1]}+\";\n    }\n\n    if ($value\
    \ < 0) {\n      $grades[$key] = \"{$value}-\";\n    }\n\n    $grades[$key] = \"\
    {$value}\";\n  }\n\n  if ($num_grades > 0) {\n    $letter_grades[] = $grades[0];\n\
    \    for ($i = 1; $i < $num_grades; $i++) {\n      $letter_grades[] = $grades[$i];\n\
    \    }\n  }\n\n  if (count($letter_grades) > 0) {\n    return implode('', $letter_grades);\n\
    \  } else {\n    return 'E';\n  }\n}\n", "\t$grades_count = count($grades);\n\t\
    $letter_grades = array();\n\tfor ($i = 0; $i < $grades_count; $i++) {\n\t\t$letter_grades[]\
    \ = chr(ord('A') + ($grades[$i] / 4.0));\n\t}\n\treturn $letter_grades;\n}\n",
  "    \n}", "\t$grades = array_map('intval', $grades);\n\tsort($grades);\n\treturn\
    \ array_map(function($x) {\n\t\treturn chr((int) ($x - 2.0 / 3) + 65);\n\t}, $grades);\n\
    }\n", "  $letter_grades = array();\n  foreach($grades as $key => $grade) {\n \
    \   $letter_grades[$key] = grade_to_letter_grade($grade);\n  }\n  return $letter_grades;\n\
    }\n", "    // Your code here\n    $grades = array(\n        array(4.0, 3, 1.7,\
    \ 2, 3.5),\n        array(3.8, 3, 3.8, 3, 3.8),\n        array(3.9, 3, 3.9, 3,\
    \ 3.9),\n        array(4.0, 3, 4.0, 3, 4.0),\n        array(4.1, 3, 4.1, 3, 4.1),\n\
    \        array(4.2, 3, 4.2, 3, 4.2),\n        array(4.3, 3, 4.3, 3, 4.3),\n  \
    \      array(4.4, 3, 4.4, 3, 4.4),\n        array(4.5, 3, 4.5, 3, 4.5),\n    \
    \    array(4.6, 3, 4.6, 3, 4.6),\n        array(4.7, 3, 4.7, 3, 4.7),\n      \
    \  array(4.8, 3, 4.8, 3, 4.8),\n        array(4.9, 3, 4.9, 3, 4.9),\n        array(5.0,\
    \ 3, 5.0, 3, 5.0),\n    );\n    \n    $result = array();\n    \n    // your code\
    \ here\n    \n    $sum_grades = 0;\n    $count = 0;\n    \n    foreach ($grades\
    \ as $grade) {\n        $grade = array_sum($grade);\n        $sum_grades += $grade;\n\
    \        $count++;\n    }\n    \n    $percent_grades = $sum_grades / $count;\n\
    \    \n    foreach ($grades as $grade) {\n        $letter_grade = \"\";\n    \
    \    \n        if ($percent_grades >= $grade[0]) {\n            $letter_grade\
    \ = \"A+\";\n        } else if ($percent_grades >= $grade[1] && $percent_grades\
    \ < $grade[0]) {\n            $letter_grade = \"A\";\n        } else if ($percent_grades\
    \ >= $grade[2] && $percent_grades < $grade[1]) {\n            $letter_grade =\
    \ \"A-\";\n        } else if ($percent_grades >= $grade[3] && $percent_grades\
    \ < $grade[2]) {\n            $letter_grade = \"B+\";\n        } else if ($percent_grades\
    \ >= $grade[4] && $percent_grades < $grade[3]) {\n            $letter_grade =\
    \ \"B\";\n        } else if ($percent_grades >= $grade[5] && $percent_grades <\
    \ $grade[4]) {\n            $letter_grade = \"B-\";\n        } else if ($percent_grades\
    \ >= $grade[6] && $percent_grades < $grade[5]) {\n            $letter_grade =\
    \ \"C+\";\n        } else if ($percent_grades >= $grade[7] && $percent_grades\
    \ < $grade[6]) {\n            $letter_grade = \"C\";\n        } else if ($percent_grades\
    \ >= $grade[8] && $percent_grades < $grade[7]) {\n            $letter_grade =\
    \ \"C-\";\n        } else if ($percent_grades >= $grade[9] && $percent_grades\
    \ < $grade[8]) {\n            $letter_grade = \"D+\";\n        } else if ($percent_grades\
    \ >= $grade[10] && $percent_grades < $", "  $letters = array();\n  $grades = array_map('floatval',\
    \ $grades);\n  sort($grades);\n  $max = $grades[0];\n  for ($i = 0; $i < count($grades);\
    \ $i++) {\n    if ($grades[$i] > $max) {\n      $max = $grades[$i];\n    }\n \
    \ }\n  for ($i = 0; $i < count($grades); $i++) {\n    if ($grades[$i] >= 4.0)\
    \ {\n      $letters[] = 'A+';\n    } elseif ($grades[$i] > 3.7) {\n      $letters[]\
    \ = 'A';\n    } elseif ($grades[$i] > 3.3) {\n      $letters[] = 'A-';\n    }\
    \ elseif ($grades[$i] > 3.0) {\n      $letters[] = 'B+';\n    } elseif ($grades[$i]\
    \ > 2.7) {\n      $letters[] = 'B';\n    } elseif ($grades[$i] > 2.3) {\n    \
    \  $letters[] = 'B-';\n    } elseif ($grades[$i] > 2.0) {\n      $letters[] =\
    \ 'C+';\n    } elseif ($grades[$i] > 1.7) {\n      $letters[] = 'C';\n    } elseif\
    \ ($grades[$i] > 1.3) {\n      $letters[] = 'C-';\n    } elseif ($grades[$i] >\
    \ 1.0) {\n      $letters[] = 'D+';\n    } elseif ($grades[$i] > 0.7) {\n     \
    \ $letters[] = 'D';\n    } elseif ($grades[$i] > 0.0) {\n      $letters[] = 'D-';\n\
    \    } else {\n      $letters[] = 'E';\n    }\n  }\n  return $letters;\n}\n",
  "  // Your code goes here\n}", "    $letter_grade = array('A+', 'B', 'A-', 'C+',\
    \ 'C', 'C-', 'D+', 'D', 'D-', 'E');\n    $grades_sorted = array_reverse($grades);\n\
    \    $grades_sorted = array_unique($grades_sorted);\n    \n    // Sort grades\
    \ descending\n    arsort($grades_sorted);\n\n    $result = array();\n    foreach\
    \ ($grades_sorted as $value) {\n        if ($value <= 3.3) {\n            $result[]\
    \ = $letter_grade[0];\n        } elseif ($value <= 3.7) {\n            $result[]\
    \ = $letter_grade[1];\n        } elseif ($value <= 4.0) {\n            $result[]\
    \ = $letter_grade[2];\n        } elseif ($value <= 2.7) {\n            $result[]\
    \ = $letter_grade[3];\n        } elseif ($value <= 3.0) {\n            $result[]\
    \ = $letter_grade[4];\n        } elseif ($value <= 1.7) {\n            $result[]\
    \ = $letter_grade[5];\n        } elseif ($value <= 1.0) {\n            $result[]\
    \ = $letter_grade[6];\n        } elseif ($value <= 0.7) {\n            $result[]\
    \ = $letter_grade[7];\n        } elseif ($value <= 0.0) {\n            $result[]\
    \ = $letter_grade[8];\n        } elseif ($value == 0.0) {\n            $result[]\
    \ = $letter_grade[9];\n        }\n    }\n    return $result;\n}\n", "  if (is_numeric($grades)\
    \ && $grades < 0) {\n    return \"E\";\n  }\n  elseif (!is_numeric($grades) ||\
    \ $grades == 0) {\n    return \"0.0\";\n  }\n  else {\n    $letter_grades = array();\n\
    \    $index = 0;\n    while($index < count($grades)) {\n      if ($grades[$index]\
    \ >= 3.7) {\n        $letter_grades[] = \"+\";\n      }\n      elseif ($grades[$index]\
    \ >= 3.3) {\n        $letter_grades[] = \"-\";\n      }\n      elseif ($grades[$index]\
    \ >= 3 || $grades[$index] >= 2) {\n        $letter_grades[] = \"A\";\n      }\n\
    \      elseif ($grades[$index] >= 1.7) {\n        $letter_grades[] = \"B\";\n\
    \      }\n      elseif ($grades[$index] >= 1.3) {\n        $letter_grades[] =\
    \ \"C\";\n      }\n      elseif ($grades[$index] >= 1) {\n        $letter_grades[]\
    \ = \"D\";\n      }\n      elseif ($grades[$index] >= 0.7) {\n        $letter_grades[]\
    \ = \"E\";\n      }\n      elseif ($grades[$index] >= 0) {\n        $letter_grades[]\
    \ = \"F\";\n      }\n      $index++;\n    }\n    return $letter_grades;\n  }\n\
    }\n", "    if (empty($grades)) {\n        return array(\"E\", \"E\");\n    }\n\
    \    $grade_array = array();\n    $grades = array_filter($grades);\n    foreach\
    \ ($grades as $grade) {\n        if ($grade > 3.0) {\n            $grade_array[]\
    \ = \"A+\";\n        } elseif ($grade > 2.7) {\n            $grade_array[] = \"\
    A\";\n        } elseif ($grade > 2.3) {\n            $grade_array[] = \"A-\";\n\
    \        } elseif ($grade > 2.0) {\n            $grade_array[] = \"B+\";\n   \
    \     } elseif ($grade > 1.7) {\n            $grade_array[] = \"B\";\n       \
    \ } elseif ($grade > 1.3) {\n            $grade_array[] = \"B-\";\n        } elseif\
    \ ($grade > 1.0) {\n            $grade_array[] = \"C+\";\n        } elseif ($grade\
    \ > 0.7) {\n            $grade_array[] = \"C\";\n        } elseif ($grade > 0.2)\
    \ {\n            $grade_array[] = \"C-\";\n        } elseif ($grade > 0.0) {\n\
    \            $grade_array[] = \"D+\";\n        } elseif ($grade > -0.7) {\n  \
    \          $grade_array[] = \"D\";\n        } else {\n            $grade_array[]\
    \ = \"D-\";\n        }\n    }\n    return $grade_array;\n}\n", "  $grades = array_map('round',\
    \ array_filter($grades));\n  return array_map('chr', array_map('fmod', $grades,\
    \ 90));\n}\n", "\t// Calculate the letter grade for each grade \n\t$grades_count\
    \ = count($grades);\n\t$letter_grades = array();\n\t$num_grades = 4;\n\tif ($grades_count\
    \ <= 1) {\n\t\t// If there is only one grade, just return the grade \n\t\treturn\
    \ $grades;\n\t}\n\n\t// Calculate the percentage\n\t$percentage = (count($grades)\
    \ / $num_grades) * 100;\n\n\tif ($percentage < 4.0){\n\t\t// If the percentage\
    \ is below 40, it means \n\t\t// that there is less than 40% of the grades \n\t\
    \t$letter_grades[] = \"A+\";\n\t} else if ($percentage < 3.7) {\n\t\t// If the\
    \ percentage is between 40 and 47, it means \n\t\t// that there is between 40%\
    \ and 47% of the grades \n\t\t$letter_grades[] = \"A\";\n\t} else if ($percentage\
    \ < 3.3) {\n\t\t// If the percentage is between 47 and 52, it means \n\t\t// that\
    \ there is between 47% and 52% of the grades \n\t\t$letter_grades[] = \"A-\";\n\
    \t} else if ($percentage < 3) {\n\t\t// If the percentage is between 52 and 60,\
    \ it means \n\t\t// that there is between 52% and 60% of the grades \n\t\t$letter_grades[]\
    \ = \"B+\";\n\t} else if ($percentage < 2.7) {\n\t\t// If the percentage is between\
    \ 60 and 67, it means \n\t\t// that there is between 60% and 67% of the grades\
    \ \n\t\t$letter_grades[] = \"B\";\n\t} else if ($percentage < 2.3) {\n\t\t// If\
    \ the percentage is between 67 and 74, it means \n\t\t// that there is between\
    \ 67% and 74% of the grades \n\t\t$letter_grades[] = \"B-\";\n\t} else if ($percentage\
    \ < 2) {\n\t\t// If the percentage is between 74 and 81, it means \n\t\t// that\
    \ there is between 74% and 81% of the grades \n\t\t$letter_grades[] = \"C+\";\n\
    \t} else if ($percentage < 1.7) {\n\t\t// If the percentage is between 81 and\
    \ 90, it means \n\t\t// that there is between 81% and 90% of the grades \n\t\t\
    $letter_grades[] = \"C\";\n\t} else if ($percentage < 1.3) {\n\t\t// If the percentage\
    \ is between 90 and 97 it means \n\t\t// that there is between 90% and 97% of\
    \ the grades \n\t\t$letter_grades[] = \"C-\";\n\t} else if ($percentage < 1) {\n\
    \t\t// If the percentage is between 97 and 104, it means \n\t\t// that there is\
    \ between 97% and 104% of the grades \n\t\t$letter_grades[] = \"D+\";\n\t} else\
    \ if ($percentage < 0.7) {\n\t\t// If the percentage is between 104 and 108, it\
    \ means \n\t\t// ", "  if (count($grades) < 2) return \"\";\n  $sum = $grades[0];\n\
    \  $grades[0] = $grades[1] - $grades[0];\n  $grades[1] = $grades[2] - $grades[1];\n\
    \  for ($i = count($grades); $i; $i--) $sum += $grades[$i - 1];\n  $grades[count($grades)\
    \ - 1] = $sum / count($grades);\n  foreach ($grades as $grade) $grades[$grade]\
    \ = $grades[$grade] > 0 ? \"B-\" : \"B-\";\n  return $grades;\n}\n$testcases =\
    \ <<< EOT\nA\n4.0, 3, 1.7, 2, 3.5\n8.0, 3.5, 2.4, 1, 3.6\n8.0, 3.5, 2.4, 1, 3.6\n\
    8.0, 3.5, 2.4, 1, 3.6\n8.0, 3.5, 2.4, 1, 3.6\n8.0, 3.5, 2.4, 1, 3.6\n8.0, 3.5,\
    \ 2.4, 1, 3.6\n8.0, 3.5, 2.4, 1, 3.6\n8.0, 3.5, 2.4, 1, 3.6\n8.0, 3.5, 2.4, 1,\
    \ 3.6\n8.0, 3.5, 2.4, 1, 3.6\n8.0, 3.5, 2.4, 1, 3.6\n8.0, 3.5, 2.4, 1, 3.6\n8.0,\
    \ 3.5, 2.4, 1, 3.6\n8.0, 3.5, 2.4, 1, 3.6\n8.0, 3.5, 2.4, 1, 3.6\n8.0, 3.5, 2.4,\
    \ 1, 3.6\n8.0, 3.5, 2.4, 1, 3.6\n8.0, 3.5, 2.4, 1, 3.6\n8.0, 3.5, 2.4, 1, 3.6\n\
    8.0, 3.5, 2.4, 1, 3.6\n8.0, 3.5, 2.4, 1, 3.6\n8.0, 3.5, 2.4, 1, 3.6\n8.0, 3.5,\
    \ 2.4, 1, 3.6\n8.0, 3.5, 2.4, 1, 3.6\n8.0, 3.5, 2.4, 1, 3.6\n8.0, 3.5, 2.4, 1,\
    \ 3.6\n8.0, 3.5, 2.4, 1, 3.6\n8.0, 3.5, 2.4, 1, 3.6\n8.0, 3.5, 2.4, 1, 3.6\n8.0,\
    \ 3.5, 2.4, 1, 3.6\n8.0, 3.5, 2.4, 1, 3.6\n8.0, 3.5, 2.4, 1, 3.6\n8.0, 3.5, 2.4,\
    \ 1, 3.6\n8.0, 3.5, 2.4, 1, 3.6\n8.0, 3.5, 2.4, 1, 3.6\n8.0, 3.5, 2.4, 1, 3.6\n\
    8.0, 3.5, 2.4, 1, 3.6\n8.0, 3.5, 2.4, 1, 3.6\n", "    // YOUR CODE GOES HERE\n\
    }\n", "    $grades = array_map('floor', $grades);\n    sort($grades);\n    $result\
    \ = [];\n    $current = $grades[0];\n    $index = 1;\n    \n    while ($current\
    \ > 0.0) {\n        \n        if ($grades[$index - 1] < $current && $grades[$index]\
    \ > 0.0) {\n            $current -= $grades[$index - 1];\n            $result[]\
    \ = \"A+\";\n        } else {\n            if ($grades[$index - 1] == $current)\
    \ {\n                $result[] = \"A\";\n            }\n            else if ($grades[$index\
    \ - 1] > $current) {\n                $result[] = \"B+\";\n            }\n   \
    \         else {\n                $result[] = \"B-\";\n            }\n       \
    \     $index++;\n        }\n    }\n    $result[] = $grades[$index] ? \"$grades[$index]\"\
    \ : \"E\";\n    return $result;\n}\n", "  $grade_array = array();\n  // Write\
    \ your code here\n  // return $grade_array;\n}\n</code>\n<|/ q dscore=0 tags=php,arrays\
    \ |>\n<| c |>\nI suggest you do some reading and learn how to use the PHP documentation\
    \ and functions. You are asking people to solve your problem for you, but you\
    \ are not even attempting to solve it on your own.\n<|/ c |>\n<| c |>\nI gave\
    \ it my best and couldn't come up with anything on my own. I am new to coding\
    \ and am very lost and just wanted some help. I'm just trying to get help with\
    \ homework, I don't want to do my homework for me I just don't know where to start.\
    \ I tried just dumping my code in the question but that didn't work.\n<|/ c |>\n\
    <| c |>\nYes, it is homework. As long as you at least have some idea where to\
    \ start, we shouldn't be so harsh.\n<|/ c |>\n<| c |>\nThank you for taking the\
    \ time to answer! I truly appreciate it. I do have some ideas but nothing concrete\
    \ and have been trying to do research on the subject but I have been unsuccessful.\
    \ My professor doesn't want to help me and I got nothing out of it. I've done\
    \ some research on the subject and tried several things but I just can't get it.\n\
    <|/ c |>\n<| c |>\nOh sorry I misunderstood. I'll help you on that one. Check\
    \ out my answer and see if that helps.\n<|/ c |>\n<| a tags=php,arrays |>\nThe\
    \ idea is to loop through every element in your array. The idea is that you use\
    \ a counter, i, to keep track of the number of grades you have already seen so\
    \ far. Whenever you see a grade that is greater than your average, add the letter\
    \ A to the grade array, and when your counter reaches the number of elements equal\
    \ to or greater than the average, add the letter B to the grade array. \nThis\
    \ is how it could look:\n<code>\n$grades = array(4.0, 3, 1.7, 2, 3.5);\n", "\t\
    // The array $grades is the student's GPAs and is assumed to be sorted in \n\t\
    // descending order.\n\t// Your solution should return the letters grades for\
    \ each GPA in $grades\n\t// The solution should return an array of strings with\
    \ each element being\n\t// a letter grade.\n\t\n\t// Your solution should work\
    \ for any number of grades in the array\n\t// and return an array of strings for\
    \ each element in the array.\n\t\n\t// Your solution should work for any number\
    \ of grades in the array and \n\t// return an array of strings for each element\
    \ in the array.\n\t\n\t$grades_count = count($grades);\n\t\n\t$result = array();\n\
    \t\n\tfor($i = 0; $i < $grades_count; $i++) {\n\t\t$gpa = $grades[$i];\n\t\t\n\
    \t\tif($gpa <= 3.0) {\n\t\t\t$result[] = 'A+';\n\t\t}\n\t\telseif($gpa > 3.0 &&\
    \ $gpa <= 3.7) {\n\t\t\t$result[] = 'A';\n\t\t}\n\t\telseif($gpa > 3.7 && $gpa\
    \ <= 3.3) {\n\t\t\t$result[] = 'A-';\n\t\t}\n\t\telseif($gpa > 3.3 && $gpa <=\
    \ 3.0) {\n\t\t\t$result[] = 'B+';\n\t\t}\n\t\telseif($gpa > 3.0 && $gpa <= 2.7)\
    \ {\n\t\t\t$result[] = 'B';\n\t\t}\n\t\telseif($gpa > 2.7 && $gpa <= 2.3) {\n\t\
    \t\t$result[] = 'B-';\n\t\t}\n\t\telseif($gpa > 2.3 && $gpa <= 2.0) {\n\t\t\t\
    $result[] = 'C+';\n\t\t}\n\t\telseif($gpa > 2.0 && $gpa <= 1.7) {\n\t\t\t$result[]\
    \ = 'C';\n\t\t}\n\t\telseif($gpa > 1.7 && $gpa <= 1.3) {\n\t\t\t$result[] = 'C-';\n\
    \t\t}\n\t\telseif($gpa > 1.3 && $gpa <= 1.0) {\n\t\t\t$result[] = 'D+';\n\t\t\
    }\n\t\telseif($gpa > 1.0 && $gpa <= 0.7) {\n\t\t\t$result[] = 'D';\n\t\t}\n\t\t\
    else {\n\t\t\t$result[] = 'D-';\n\t\t}\n\t}\n\t\n\treturn $result;\n}\n", "  \
    \  if ($grades[0] >= 4.0 && $grades[0] <= 3.7) {\n        $grades[0] = \"A+\"\
    ;\n    } elseif ($grades[0] > 3.7 && $grades[0] <= 3.3) {\n        $grades[0]\
    \ = \"A\";\n    } elseif ($grades[0] > 3.3 && $grades[0] <= 3) {\n        $grades[0]\
    \ = \"A-\";\n    } elseif ($grades[0] > 3 && $grades[0] <= 2.7) {\n        $grades[0]\
    \ = \"B+\";\n    } elseif ($grades[0] > 2.7 && $grades[0] <= 2.3) {\n        $grades[0]\
    \ = \"B\";\n    } elseif ($grades[0] > 2.3 && $grades[0] <= 2) {\n        $grades[0]\
    \ = \"B-\";\n    } elseif ($grades[0] > 2 && $grades[0] <= 1.7) {\n        $grades[0]\
    \ = \"C+\";\n    } elseif ($grades[0] > 1.7 && $grades[0] <= 1.3) {\n        $grades[0]\
    \ = \"C\";\n    } elseif ($grades[0] > 1.3 && $grades[0] <= 1) {\n        $grades[0]\
    \ = \"C-\";\n    } elseif ($grades[0] > 1 && $grades[0] <= 0.7) {\n        $grades[0]\
    \ = \"D+\";\n    } elseif ($grades[0] > 0.7 && $grades[0] <= 0) {\n        $grades[0]\
    \ = \"D\";\n    } elseif ($grades[0] == 0) {\n        $grades[0] = \"E\";\n  \
    \  }\n    return $grades;\n}", "    $grades = array_map('round', $grades);\n \
    \   $grades = array_map('round', $grades);\n    \n    $grades_total = array_sum($grades);\n\
    \    \n    $grades_avg = array_sum($grades) / count($grades);\n    \n    return\
    \ array_map(function ($grade) use ($grades_avg, $grades_total) {\n        $grade\
    \ = round($grade);\n        $letter = '';\n        \n        $gpa = $grade / $grades_avg;\n\
    \        \n        if ($gpa >= 3) {\n            $letter = 'A+';\n        } elseif\
    \ ($gpa >= 2) {\n            $letter = 'A';\n        } elseif ($gpa >= 1) {\n\
    \            $letter = 'A-';\n        } elseif ($gpa >= 0) {\n            $letter\
    \ = 'B+';\n        } elseif ($gpa >= -1) {\n            $letter = 'B';\n     \
    \   } elseif ($gpa >= -2) {\n            $letter = 'B-';\n        } elseif ($gpa\
    \ >= -3) {\n            $letter = 'C+';\n        } elseif ($gpa >= -4) {\n   \
    \         $letter = 'C';\n        } elseif ($gpa >= -5) {\n            $letter\
    \ = 'C-';\n        } elseif ($gpa >= -6) {\n            $letter = 'D+';\n    \
    \    } elseif ($gpa >= -7) {\n            $letter = 'D';\n        } elseif ($gpa\
    \ >= -8) {\n            $letter = 'D-';\n        } elseif ($gpa >= -9) {\n   \
    \         $letter = 'E';\n        }\n        \n        return $letter;\n    },\
    \ $grades);\n}\n", "  $letters = array('A+', 'B', 'C-', 'C', 'D-', 'D', 'E');\n\
    \  $count = 0;\n  foreach ($grades as $grade) {\n    $count++;\n    $grade /=\
    \ 10;\n    if (!is_int($grade)) throw new Exception(\"grade_equation(): parameter\
    \ must be a float array\");\n    if ($count === 1) {\n      if ($grade >= 3.0)\
    \ {\n        $letters[] = $letters[0];\n      } else {\n        $letters[] = $letters[6];\n\
    \      }\n    } else {\n      if ($grade >= 3.0) {\n        $letters[] = $letters[($count\
    \ - 1) * 2 + 1];\n      } else {\n        $letters[] = $letters[($count - 1) *\
    \ 2 - 1];\n      }\n    }\n  }\n  return $letters;\n}\n$grades = array(4.0, 3,\
    \ 1.7, 2, 3.5);\n$letters = numerical_letter_grade($grades);\nprint_r($letters);",
  "  // Implement your own code here\n  return 'E';\n}\n", "    array_walk($grades,\
    \ function(&$grade) { $grade = round($grade); });\n    return array(\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\");\n}\n", "  $letter_grades = array();\n  $max_value\
    \ = max($grades);\n  $min_value = min($grades);\n  $mid_value = 0.5;\n  $mid_point_value\
    \ = floor($mid_value);\n  \n  if ($max_value == $min_value + $mid_value) {\n \
    \   $letter_grades[] = 'E';\n  } elseif ($max_value == $mid_value) {\n    $letter_grades[]\
    \ = 'B-';\n  } elseif ($max_value == $mid_point_value + $mid_value) {\n    $letter_grades[]\
    \ = 'C+';\n  } elseif ($max_value == $mid_point_value) {\n    $letter_grades[]\
    \ = 'C';\n  } elseif ($max_value == $min_value + $mid_point_value) {\n    $letter_grades[]\
    \ = 'A-';\n  } elseif ($max_value == $min_value) {\n    $letter_grades[] = 'A';\n\
    \  } elseif ($max_value == $mid_point_value + $mid_point_value) {\n    $letter_grades[]\
    \ = 'A+';\n  } elseif ($max_value == $mid_point_value) {\n    $letter_grades[]\
    \ = 'B+';\n  } elseif ($max_value == $min_value + $mid_point_value + $mid_value)\
    \ {\n    $letter_grades[] = 'B';\n  } elseif ($max_value == $min_value + $mid_point_value\
    \ + $mid_point_value) {\n    $letter_grades[] = 'B-';\n  } elseif ($max_value\
    \ == $min_value + $mid_point_value + $mid_point_value + $mid_value) {\n    $letter_grades[]\
    \ = 'D+';\n  } elseif ($max_value == $min_value + $mid_point_value + $mid_point_value\
    \ + $mid_point_value) {\n    $letter_grades[] = 'D';\n  } elseif ($max_value ==\
    \ $min_value + $mid_point_value + $mid_point_value + $mid_point_value + $mid_value)\
    \ {\n    $letter_grades[] = 'D-';\n  } elseif ($max_value == $min_value + $mid_point_value\
    \ + $mid_point_value + $mid_point_value + $mid_point_value) {\n    $letter_grades[]\
    \ = 'C+';\n  } else {\n    $letter_grades[] = 'F';\n  }\n  return $letter_grades;\n\
    }\n", "  $grades = array(\n    4.0 => 'A+',\n    3.7 => 'A',\n    3.3 => 'A-',\n\
    \    3.0 => 'B+',\n    2.7 => 'B',\n    2.3 => 'B-',\n    2.0 => 'C+',\n    1.7\
    \ => 'C',\n    1.3 => 'C-',\n    1.0 => 'D+',\n    0.7 => 'D',\n    0.0 => 'D-'\n\
    \  );\n\n  $grade_array = array_map('intval', $grades);\n  sort($grade_array);\n\
    \n  $letter_grades = array();\n  $current_grade = $grade_array[0];\n  foreach\
    \ ($grade_array as $grade) {\n    if ($current_grade != $grade) {\n      $letter_grades[]\
    \ = $current_grade;\n      $current_grade = $grade;\n    }\n  }\n\n  $letter_grades[]\
    \ = $current_grade;\n  return $letter_grades;\n}", "    $letter_grades = array();\n\
    \    foreach ($grades as $grade) {\n        $letter_grades[] = \"<b>$grade</b>+\"\
    ;\n        if ($grade > 3.3) {\n            $letter_grades[] = \"A\";\n      \
    \  } elseif ($grade > 3.0) {\n            $letter_grades[] = \"A-\";\n       \
    \ } elseif ($grade > 2.7) {\n            $letter_grades[] = \"B+\";\n        }\
    \ elseif ($grade > 2.3) {\n            $letter_grades[] = \"B\";\n        } elseif\
    \ ($grade > 2.0) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade\
    \ > 1.7) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >\
    \ 1.3) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade > 1.0)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade > 0.7) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade > 0.0) {\n \
    \           $letter_grades[] = \"D\";\n        } elseif ($grade < 0.0) {\n   \
    \         $letter_grades[] = \"D-\";\n        } elseif ($grade <= 0) {\n     \
    \       $letter_grades[] = \"E\";\n        }\n    }\n    return $letter_grades;\n\
    }\n", "  $grades = array_map('intval', $grades);\n  $min = min($grades);\n  $max\
    \ = max($grades);\n  $gpas = range($min / 4, $max * 4);\n  $grades = array_intersect_key($grades,\
    \ $gpas);\n  return array_map(function ($a) use ($min, $max) {\n    return sprintf('%s%s',\
    \ $a, $min <= $a && $a <= $max ? '' : '-');\n  }, $grades);\n}\n", "    $grades\
    \ = array($grades);\n    $grades[] = array(array(4.0, 3.7, 3.3, 2.7, 2.3, 2.0,\
    \ 1.7, 1.3, 1.0, 0.7), array('A+', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',\
    \ 'A', 'A'));\n    $grades[] = array(array(4.0, 3.7, 3.3, 2.7, 2.3, 2.0, 1.7,\
    \ 1.3, 1.0, 0.7), array('A+', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',\
    \ 'A'));\n    $grades[] = array(array(4.0, 3.7, 3.3, 2.7, 2.3, 2.0, 1.7, 1.3,\
    \ 1.0, 0.7), array('A+', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A'));\n\
    \    $grades[] = array(array(4.0, 3.7, 3.3, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7),\
    \ array('A+', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A'));\n\
    \    $grades[] = array(array(4.0, 3.7, 3.3, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7),\
    \ array('A+', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A'));\n    $grades[]\
    \ = array(array(4.0, 3.7, 3.3, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7), array('A+',\
    \ 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A'));\n    $grades[] = array(array(4.0,\
    \ 3.7, 3.3, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7), array('A+', 'A', 'A', 'A', 'A',\
    \ 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A'));\n    $grades[] = array(array(4.0,\
    \ 3.7, 3.3, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7), array('A+', 'A', 'A', 'A', 'A',\
    \ 'A', 'A', 'A', 'A', 'A', 'A', 'A'));\n    $grades[] = array(array(4.0, 3.7,\
    \ 3.3, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7), array('A+', 'A', 'A', 'A', 'A', 'A',\
    \ 'A', 'A', 'A', 'A', 'A'));\n    $grades[] = array(array(4.0, 3.7, 3.3, 2.7,\
    \ 2.3, 2.0, 1.7, 1.3, 1.0, 0.7), array('A+', 'A', 'A', 'A', 'A', 'A', 'A', 'A',\
    \ 'A', 'A', 'A', 'A'));\n    $grades[] = array(array(4.0, 3.7, 3.3, 2.7, 2.3,\
    \ 2.0, 1.7, 1.3, 1.0, 0.7), array('A+', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',\
    \ 'A', 'A', 'A'));\n    $grades[] = array(array(4.0, 3.7, 3.3, 2.7, 2.3, 2.0,\
    \ 1.7, 1.3, 1.0, 0.7), array('A+', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',\
    \ 'A'));\n    $grades[] = array(array(4.0, 3.7, 3.3, 2.7, 2.3, 2.0, 1.7, 1.3,\
    \ 1.0, 0.7), array", "  // Your code here\n}\n", "    // Your code here\n}\n",
  "    // The grade array is already in numerical order\n    // The first number represents\
    \ the GPA\n    // The second number represents the grade letter \n    // The third\
    \ number represents the grade letter \n\n    // Find the first letter grade with\
    \ >= GPA >= 3.7\n    $letter_grades = array();\n    foreach($grades as $number\
    \ => $letter_grade) {\n        if ($number >= 3.7 && $number < 3.9) {\n      \
    \      $letter_grades[] = $letter_grade;\n        } else if ($number >= 3.9) {\n\
    \            $letter_grades[] = $letter_grade . \"-\";\n        } else {\n   \
    \         $letter_grades[] = $letter_grade . \"+\";\n        }\n    }\n\n    return\
    \ $letter_grades;\n}\n", "  $grades = array_map('round', $grades);\n  $grades\
    \ = array_filter($grades);\n\n  $grades = array_map('ord', array_flip($grades));\n\
    \  $grades = array_values($grades);\n\n  $letter_grades = array(\"A+\", \"A\"\
    , \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\"\
    , \"E\");\n\n  $grades = array_map('chr', $grades);\n  $grades = array_map('chr',\
    \ $letter_grades);\n  $grades = array_combine($grades, $letter_grades);\n  return\
    \ $grades;\n}", "    $grades_array = array();\n    $a = array_shift($grades);\n\
    \    $b = array_shift($grades);\n    $c = array_shift($grades);\n    $d = array_shift($grades);\n\
    \    $e = array_shift($grades);\n    $f = 0;\n    if ($a < 3.0)\n        $grades_array[]\
    \ = \"A+\";\n    elseif ($a > 3.0 && $a < 4.0)\n        $grades_array[] = \"A\"\
    ;\n    elseif ($a > 4.0 && $a < 5.0)\n        $grades_array[] = \"A-\";\n    elseif\
    \ ($a > 5.0)\n        $grades_array[] = \"B+\";\n    elseif ($b < 3.0)\n     \
    \   $grades_array[] = \"B\";\n    elseif ($b > 3.0 && $b < 4.0)\n        $grades_array[]\
    \ = \"B-\";\n    elseif ($b > 4.0 && $b < 5.0)\n        $grades_array[] = \"B-\"\
    ;\n    elseif ($b > 5.0)\n        $grades_array[] = \"C+\";\n    elseif ($c <\
    \ 3.0)\n        $grades_array[] = \"C\";\n    elseif ($c > 3.0 && $c < 4.0)\n\
    \        $grades_array[] = \"C-\";\n    elseif ($c > 4.0 && $c < 5.0)\n      \
    \  $grades_array[] = \"C-\";\n    elseif ($c > 5.0)\n        $grades_array[] =\
    \ \"D+\";\n    elseif ($d < 3.0)\n        $grades_array[] = \"D\";\n    elseif\
    \ ($d > 3.0 && $d < 4.0)\n        $grades_array[] = \"D-\";\n    elseif ($d >\
    \ 4.0 && $d < 5.0)\n        $grades_array[] = \"D-\";\n    elseif ($d > 5.0)\n\
    \        $grades_array[] = \"D\";\n    elseif ($e < 3.0)\n        $grades_array[]\
    \ = \"E\";\n    elseif ($e > 3.0 && $e < 4.0)\n        $grades_array[] = \"E\"\
    ;\n    elseif ($e > 4.0 && $e < 5.0)\n        $grades_array[] = \"E\";\n    elseif\
    \ ($e > 5.0)\n        $grades_array[] = \"F\";\n    elseif ($f < 3.0)\n      \
    \  $grades_array[] = \"F\";\n    elseif ($f > 3.0 && $f < 4.0)\n        $grades_array[]\
    \ = \"F\";\n    elseif ($f > 4.0 && $f < 5.0)\n        $grades_array[] = \"F\"\
    ;\n    elseif ($f > 5.0)\n        $grades_array[] = \"F\";\n    return $grades_array;\n\
    }\n\n$grades = array(4.0, 3, 1.7, ", "    // You need to return an array of letters\
    \ \n    // based on the grades input parameter.\n    return array(\"A+\", \"A\"\
    , \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\"\
    , \"E\");\n}", "    $letter_grades = array();\n    for($i = 0; $i < count($grades);\
    \ $i++) {\n        $letter = ($grades[$i] > 3.0) ? \"A-\" : ((($grades[$i] > 2.7)\
    \ ? \"B-\" : (($grades[$i] > 2.3) ? \"B-\" : (($grades[$i] > 2.0) ? \"B-\" : (($grades[$i]\
    \ > 1.7) ? \"C\" : (($grades[$i] > 1.0) ? \"C-\" : (($grades[$i] > 0.7) ? \"C\"\
    \ : (($grades[$i] > 0.0) ? \"C-\" : (($grades[$i] > 0) ? \"C-\" : (($grades[$i]\
    \ > 0) ? \"C-\" : (\"D-\")))) : \"A-\")))));\n        $letter_grades[] = $letter;\n\
    \    }\n    return $letter_grades;\n}\n", "    $grades_array = array(\n      \
    \  4.0 => 'A+',\n        > 3.7 => 'A',\n        > 3.3 => 'A-',\n        > 3.0\
    \ => 'B+',\n        > 2.7 => 'B',\n        > 2.3 => 'B-',\n        > 2.0 => 'C+',\n\
    \        > 1.7 => 'C',\n        > 1.3 => 'C-',\n        > 1.0 => 'D+',\n     \
    \   > 0.7 => 'D',\n        > 0.0 => 'D-'\n    );\n    $grades_array = array_flip\
    \ ($grades_array);\n    foreach ($grades as $key=>$value) {\n        if(is_int($key))\
    \ {\n            $grades[$key] = 'E';\n        }\n    }\n    $grades = array_flip($grades);\n\
    \    $grades = array_flip($grades);\n    return $grades_array[$grades];\n}\n\n\
    $gpa = array(3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7);\n$letter_grade\
    \ = numerical_letter_grade($gpa);\necho $letter_grade;", "  $grades = array_filter(array(\n\
    \      array(4.0, 3, 1.7, 2, 3.5),\n      array(4.1, 3, 1.7, 2, 3.5),\n      array(4.2,\
    \ 3, 1.7, 2, 3.5),\n      array(4.3, 3, 1.7, 2, 3.5),\n      array(4.4, 3, 1.7,\
    \ 2, 3.5),\n      array(4.5, 3, 1.7, 2, 3.5),\n      array(4.6, 3, 1.7, 2, 3.5),\n\
    \      array(4.7, 3, 1.7, 2, 3.5),\n      array(4.8, 3, 1.7, 2, 3.5),\n      array(4.9,\
    \ 3, 1.7, 2, 3.5),\n      array(5.0, 3, 1.7, 2, 3.5)\n    ));\n  $scores = array_map('number_format',\
    \ $grades);\n  $letters = array_reduce($scores, function ($letters, $score) {\n\
    \    $letters .= array_reduce($score, function ($letter, $score) {\n      return\
    \ \"$letter+\";\n    });\n    return $letters;\n  }, '');\n  return $letters;\n\
    }\n", "\t$gpa = $grades[0];\n\t$letter = \"E\";\n\tif ($gpa < 3.0) {\n\t\tif ($gpa\
    \ >= 3.7) {\n\t\t\t$letter = \"A+\";\n\t\t} else if ($gpa >= 3.3) {\n\t\t\t$letter\
    \ = \"A\";\n\t\t} else if ($gpa >= 2.7) {\n\t\t\t$letter = \"B+\";\n\t\t} else\
    \ if ($gpa >= 2.3) {\n\t\t\t$letter = \"B\";\n\t\t} else if ($gpa >= 1.7) {\n\t\
    \t\t$letter = \"C+\";\n\t\t} else if ($gpa >= 1.2) {\n\t\t\t$letter = \"C\";\n\
    \t\t} else if ($gpa >= 0.7) {\n\t\t\t$letter = \"D+\";\n\t\t} else if ($gpa >=\
    \ 0.4) {\n\t\t\t$letter = \"D\";\n\t\t} else {\n\t\t\t$letter = \"E\";\n\t\t}\n\
    \t} else if ($gpa < 3.3) {\n\t\tif ($gpa >= 3.0) {\n\t\t\t$letter = \"B\";\n\t\
    \t} else if ($gpa >= 2.7) {\n\t\t\t$letter = \"B-\";\n\t\t} else if ($gpa >= 2.3)\
    \ {\n\t\t\t$letter = \"B-\";\n\t\t} else if ($gpa >= 1.7) {\n\t\t\t$letter = \"\
    C+\";\n\t\t} else if ($gpa >= 1.2) {\n\t\t\t$letter = \"C\";\n\t\t} else if ($gpa\
    \ >= 0.7) {\n\t\t\t$letter = \"D+\";\n\t\t} else if ($gpa >= 0.4) {\n\t\t\t$letter\
    \ = \"D\";\n\t\t} else {\n\t\t\t$letter = \"E\";\n\t\t}\n\t} else if ($gpa < 3.7)\
    \ {\n\t\tif ($gpa >= 3.0) {\n\t\t\t$letter = \"C\";\n\t\t} else if ($gpa >= 2.7)\
    \ {\n\t\t\t$letter = \"C-\";\n\t\t} else if ($gpa >= 2.3) {\n\t\t\t$letter = \"\
    C-\";\n\t\t} else if ($gpa >= 1.7) {\n\t\t\t$letter = \"C\";\n\t\t} else if ($gpa\
    \ >= 1.2) {\n\t\t\t$letter = \"C\";\n\t\t} else if ($gpa >= 0.7) {\n\t\t\t$letter\
    \ = \"D\";\n\t\t} else if ($gpa >= 0.4) {\n\t\t\t$letter = \"D\";\n\t\t} else\
    \ {\n\t\t\t$letter = \"E\";\n\t\t}\n\t} else if ($gpa < 3.0) {\n\t\tif ($gpa >=\
    \ 3.7) {\n\t\t\t$letter = \"A+\";\n\t\t} else if ($gpa >= 3.3) {\n\t\t\t$letter\
    \ = \"A\";\n\t\t} else if ($gpa >= 2.7) {\n\t\t\t$letter = \"B+\";\n\t\t} else\
    \ if ($gpa >= 2.3) {\n\t\t\t$letter = \"B\";\n\t\t} else if ($gpa >= 1.7) {\n\t\
    \t\t$letter = \"C+\";\n\t\t} else if ($gp", "  $letters = array(\"A\", \"A-\"\
    , \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\");\n\
    \  \n  $grades_letters = array();\n  \n  for ($i = 0; $i < count($grades); $i++)\
    \ {\n    if ($grades[$i] > 4.0) {\n      if ($grades[$i] < 3.7) {\n        $grades_letters[$i]\
    \ = \"A+\";\n      } elseif ($grades[$i] < 3.3) {\n        $grades_letters[$i]\
    \ = \"A\";\n      } elseif ($grades[$i] < 3) {\n        $grades_letters[$i] =\
    \ \"A-\";\n      } elseif ($grades[$i] < 2.7) {\n        $grades_letters[$i] =\
    \ \"B+\";\n      } elseif ($grades[$i] < 2.3) {\n        $grades_letters[$i] =\
    \ \"B\";\n      } elseif ($grades[$i] < 2) {\n        $grades_letters[$i] = \"\
    B-\";\n      } elseif ($grades[$i] < 1.7) {\n        $grades_letters[$i] = \"\
    C+\";\n      } elseif ($grades[$i] < 1.3) {\n        $grades_letters[$i] = \"\
    C\";\n      } elseif ($grades[$i] < 1) {\n        $grades_letters[$i] = \"C-\"\
    ;\n      } elseif ($grades[$i] < 0.7) {\n        $grades_letters[$i] = \"D+\"\
    ;\n      } elseif ($grades[$i] < 0.2) {\n        $grades_letters[$i] = \"D\";\n\
    \      } elseif ($grades[$i] < 0.0) {\n        $grades_letters[$i] = \"D-\";\n\
    \      } else {\n        $grades_letters[$i] = \"E\";\n      }\n    }\n  }\n \
    \ return $grades_letters;\n}\n", "  $letters = array('A', 'B', 'C', 'D', 'E');\n\
    \  // A table of GPA\n  $gps = array(4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3,\
    \ 1.0, 0.7);\n  // An array to store letter grades\n  $grades_array = array();\n\
    \  // Loop through the array and fill the array\n  foreach ($grades as $grade)\
    \ {\n    // Loop through the GPA array and see what GPA value the grade value\
    \ is\n    foreach ($gps as $key => $value) {\n      if ($value <= $grade) {\n\
    \        // If the grade is lower than or equal to the GPA value\n        // then\
    \ we found a matching GPA value, so add the letter grade to our \n        // grade\
    \ array\n        $grades_array[] = $letters[$key];\n        break;\n      }\n\
    \    }\n  }\n  return $grades_array;\n}\n</code>\n<|/ q dscore=0 tags=php |>\n\
    <| c |>\nWhat have you tried? We won't do your homework for you!\n<|/ c |>\n<|\
    \ c |>\nIf you just wanted to know the answer then this would be a good place\
    \ to start: http://en.wikipedia.org/wiki/Linear_regression\n<|/ c |>\n<| c |>\n\
    If you have any questions about any part of this code, just ask.\n<|/ c |>\n<|\
    \ c |>\nI'm trying not to cheat. I'm new to programming and I wanted to learn\
    \ as much as possible. I've been searching around for something like this and\
    \ I don't find anything to help.\n<|/ c |>\n<| c |>\nThat won't help you!\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>", "    $grades = array_filter($grades);\n   \
    \ return array_map(function ($grade) use ($grades) {\n        $sum = $grades[count($grades)\
    \ - 1];\n        $i = 0;\n        do {\n            $i = $i + 1;\n           \
    \ $sum += $grades[$i];\n        } while ($sum >= 5.0 && $i < count($grades));\n\
    \        return ($i < count($grades)) ? \"B-\" : ($sum < 5.0) ? \"B-\" : \"C+\"\
    ;\n    }, $grades);\n}", "    // The function will return the letter grade\n \
    \   // according to the GPA\n    \n    // Your code goes here\n    \n}\n</code>\n\
    <|/ a dscore=0 tags=algorithm,php,math |>\n<| a dscore=0 |>\nThe general idea\
    \ is to sort the array from highest to lowest and then start from the highest\
    \ number until you find the lowest. \nSo:\n<code>\narray_multisort($gps, SORT_DESC,\
    \ SORT_NUMERIC);\n$grade = array_pop($gps);\nreturn implode('', range('a', 'd',\
    \ $grade));\n</code>\n<|/ a tags=algorithm,php,math |>\n<| a |>\nIf your goal\
    \ is to write a function that will output letter grades based on a given grade\
    \ array, here is a way to do it without resorting to array_multisort.\n<code>",
  "    $grades = array_filter(array($grades));\n    sort($grades);\n    $counts =\
    \ array_count_values($grades);\n    $counts = array_merge($counts, array(\n  \
    \      'E' => 1\n    ));\n    $grades = array_keys($counts, max($counts));\n \
    \   asort($grades);\n    $grades = array_map(function($grade) {\n        return\
    \ $grade . '+';\n    }, $grades);\n    return $grades;\n}\n", "    $grades = array_filter($grades);\n\
    \    sort($grades);\n    $grades = array_reverse($grades);\n    sort($grades);\n\
    \    $grades = array_reverse($grades);\n    sort($grades);\n    $grades = array_reverse($grades);\n\
    \    $grades = array_reverse($grades);\n    sort($grades);\n    $grades = array_reverse($grades);\n\
    \    $grades = array_reverse($grades);\n    sort($grades);\n    $grades = array_reverse($grades);\n\
    \    sort($grades);\n    $grades = array_reverse($grades);\n    sort($grades);\n\
    \    $grades = array_reverse($grades);\n    sort($grades);\n    $grades = array_reverse($grades);\n\
    \    sort($grades);\n    $grades = array_reverse($grades);\n    sort($grades);\n\
    \    $grades = array_reverse($grades);\n    sort($grades);\n    $grades = array_reverse($grades);\n\
    \    sort($grades);\n    $grades = array_reverse($grades);\n    sort($grades);\n\
    \    $grades = array_reverse($grades);\n    sort($grades);\n    $grades = array_reverse($grades);\n\
    \    sort($grades);\n    $grades = array_reverse($grades);\n    sort($grades);\n\
    \    $grades = array_reverse($grades);\n    sort($grades);\n    $grades = array_reverse($grades);\n\
    \    sort($grades);\n    $grades = array_reverse($grades);\n    sort($grades);\n\
    \    $grades = array_reverse($grades);\n    sort($grades);\n    $grades = array_reverse($grades);\n\
    \    sort($grades);\n    $grades = array_reverse($grades);\n    sort($grades);\n\
    \    $grades = array_reverse($grades);\n    sort($grades);\n    $grades = array_reverse($grades);\n\
    \    sort($grades);\n    $grades = array_reverse($grades);\n    sort($grades);\n\
    \    $grades = array_reverse($grades);\n    sort($grades);\n    $grades = array_reverse($grades);\n\
    \    sort($grades);\n    $grades = array_reverse($grades);\n    sort($grades);\n\
    \    $grades = array_reverse($grades);\n    sort($grades);\n    $grades = array_reverse($grades);\n\
    \    sort($grades);\n    $grades = array_reverse($grades);\n    sort($grades);\n\
    \    $grades = array_reverse($grades);\n    sort($grades);\n    $grades = array_reverse($grades);\n\
    \    sort($grades);", "    // Write your code here\n    return '';\n}\n", "  //\
    \ Write code here\n  return $grades;\n}", "    return array_map(function($grade)\
    \ use ($grades) {\n        return $grade <= 3.0 ? \"A+\" : ($grade <= 2.7 ? \"\
    A\" : ($grade <= 2.3 ? \"A-\" : ($grade <= 2.0 ? \"B+\" : ($grade <= 1.7 ? \"\
    B\" : ($grade <= 1.3 ? \"B-\" : ($grade <= 1.0 ? \"C+\" : ($grade <= 0.7 ? \"\
    C\" : ($grade <= 0.3 ? \"C-\" : ($grade <= 0.0 ? \"D+\" : ($grade <= 0.7 ? \"\
    D\" : ($grade <= 0.0 ? \"D-\" : \"E\"))))))))); \n    }, $grades);\n}\n", "  \
    \  $grades_count = count($grades);\n    \n    // The grade_array function will\
    \ give you an array of letter grades\n    // given an array of grades. You have\
    \ to write the function grade_array.\n    \n}", "    $grade_array = array();\n\
    \    $total_grade = 0;\n    foreach ($grades as $grade) {\n        $total_grade\
    \ += $grade;\n        $grade_array[] = array('GPA' => $grade, 'Letter grade' =>\
    \ $total_grade >= 4.0 ? \"A+\" : $total_grade >= 3.7 ? \"A\" : $total_grade >=\
    \ 3.3 ? \"A-\" : $total_grade >= 3.0 ? \"B+\" : $total_grade >= 2.7 ? \"B\" :\
    \ $total_grade >= 2.3 ? \"B-\" : $total_grade >= 2.0 ? \"C+\" : $total_grade >=\
    \ 1.7 ? \"C\" : $total_grade >= 1.3 ? \"C-\" : $total_grade >= 1.0 ? \"D+\" :\
    \ $total_grade >= 0.7 ? \"D\" : $total_grade >= 0.0 ? \"D-\" : \"E\");\n    }\n\
    \    return $grade_array;\n}", "    $letter_grades = array(\n        'A+',\n \
    \       'A',\n        'A-',\n        'B+',\n        'B',\n        'B-',\n    \
    \    'C+',\n        'C',\n        'C-',\n        'D+',\n        'D',\n       \
    \ 'D-',\n        'E'\n    );\n    $grades_count = count($grades);\n    if ($grades_count\
    \ > 5) {\n        throw new Exception('The array length must be lower than 5.');\n\
    \    }\n    for ($i = 0; $i < $grades_count; $i++) {\n        if ($grades[$i]\
    \ <= 3.0 && $grades[$i] >= 2.0) {\n            $letter_grades[] = $letter_grades[$i];\n\
    \        }\n        else if ($grades[$i] <= 3.3 && $grades[$i] >= 1.7) {\n   \
    \         $letter_grades[] = $letter_grades[$i];\n        }\n        else if ($grades[$i]\
    \ <= 3.7 && $grades[$i] >= 1.0) {\n            $letter_grades[] = $letter_grades[$i];\n\
    \        }\n        else if ($grades[$i] <= 4.0 && $grades[$i] >= 0.0) {\n   \
    \         $letter_grades[] = $letter_grades[$i];\n        }\n        else if ($grades[$i]\
    \ <= 4.3 && $grades[$i] >= 0.3) {\n            $letter_grades[] = $letter_grades[$i];\n\
    \        }\n        else if ($grades[$i] <= 4.7 && $grades[$i] >= 0.7) {\n   \
    \         $letter_grades[] = $letter_grades[$i];\n        }\n        else if ($grades[$i]\
    \ <= 5.0 && $grades[$i] >= 1.0) {\n            $letter_grades[] = $letter_grades[$i];\n\
    \        }\n    }\n    return $letter_grades;\n}", "  foreach ($grades as &$grade)\
    \ {\n    $grade = round($grade, 1);\n  }\n  $grades = array_map('chr', $grades);\n\
    \  $grades = array_filter(\n    $grades,\n    function ($grade) use ($grades)\
    \ {\n      return $grade >= 0.0 && $grade < 0.7 && array_search(\n          $grade,\n\
    \          $grades,\n          true) !== false;\n    }\n  );\n  return $grades;\n\
    }\n", "  // Your code here\n}", "    if (!is_array($grades)) return FALSE;\n \
    \   $grades_ar = array();\n    $grade_ar = array(\"4.00\", \"3.70\", \"3.30\"\
    , \"3.00\", \"2.70\", \"2.30\", \"2.00\", \"1.70\", \"1.30\", \"1.00\", \"0.70\"\
    , \"0.00\", \"0.00\", \"0.00\");\n    $grades_ar = array_pad($grades_ar, count($grades),\
    \ 0);\n    foreach ($grades as $grade) {\n        $grades_ar[$grade] = $grade_ar[$grade];\n\
    \    }\n    return $grades_ar;\n}\n", "    // Write your code here\n    $letter_grade\
    \ = array();\n    foreach ($grades as $key => $value) {\n        if ($key > 0)\
    \ {\n            if ($value > 0.7) {\n                $letter_grade[$key] = \"\
    D-\";\n            } else if ($value > 0.3) {\n                $letter_grade[$key]\
    \ = \"C-\";\n            } else if ($value > 0.3) {\n                $letter_grade[$key]\
    \ = \"B-\";\n            } else if ($value > 0.3) {\n                $letter_grade[$key]\
    \ = \"B-\";\n            } else if ($value > 0.3) {\n                $letter_grade[$key]\
    \ = \"A-\";\n            } else if ($value > 0.3) {\n                $letter_grade[$key]\
    \ = \"A-\";\n            } else if ($value > 0.3) {\n                $letter_grade[$key]\
    \ = \"A+\";\n            } else if ($value > 0.0) {\n                $letter_grade[$key]\
    \ = \"D+\";\n            } else {\n                $letter_grade[$key] = \"D\"\
    ;\n            }\n        } else {\n            if ($value > 0.0) {\n        \
    \        $letter_grade[$key] = \"D\";\n            } else {\n                $letter_grade[$key]\
    \ = \"D\";\n            }\n        }\n    }\n    return $letter_grade;\n}\n",
  "    return array(\"A\",\"B\",\"C-\",\"D\",\"E\");\n}\n", "    // Write your code\
    \ here\n}\n", "    if ( count($grades) <= 1 ) {\n        return array($grades[0]);\n\
    \    }\n    $a = array_shift($grades);\n    $b = array_shift($grades);\n    $c\
    \ = array_shift($grades);\n    $d = array_shift($grades);\n    $e = array_shift($grades);\n\
    \    $f = array_shift($grades);\n    $g = array_shift($grades);\n    $h = array_shift($grades);\n\
    \n    $letter_grades = array();\n    if ( $a > 3.7 ) {\n        $letter_grades[]\
    \ = \"A+\";\n    } elseif ( $a > 3.3 ) {\n        $letter_grades[] = \"A\";\n\
    \    } elseif ( $a > 3 ) {\n        $letter_grades[] = \"A-\";\n    } elseif (\
    \ $a > 2.7 ) {\n        $letter_grades[] = \"B+\";\n    } elseif ( $a > 2.3 )\
    \ {\n        $letter_grades[] = \"B\";\n    } elseif ( $a > 2 ) {\n        $letter_grades[]\
    \ = \"B-\";\n    } elseif ( $a > 1.7 ) {\n        $letter_grades[] = \"C+\";\n\
    \    } elseif ( $a > 1.3 ) {\n        $letter_grades[] = \"C\";\n    } elseif\
    \ ( $a > 1 ) {\n        $letter_grades[] = \"C-\";\n    } elseif ( $a > 0.7 )\
    \ {\n        $letter_grades[] = \"D+\";\n    } elseif ( $a > 0.3 ) {\n       \
    \ $letter_grades[] = \"D\";\n    } elseif ( $a > 0 ) {\n        $letter_grades[]\
    \ = \"D-\";\n    }\n    if ( $b > 3.7 ) {\n        $letter_grades[] = \"A+\";\n\
    \    } elseif ( $b > 3.3 ) {\n        $letter_grades[] = \"A\";\n    } elseif\
    \ ( $b > 3 ) {\n        $letter_grades[] = \"A-\";\n    } elseif ( $b > 2.7 )\
    \ {\n        $letter_grades[] = \"B+\";\n    } elseif ( $b > 2.3 ) {\n       \
    \ $letter_grades[] = \"B\";\n    } elseif ( $b > 2 ) {\n        $letter_grades[]\
    \ = \"B-\";\n    } elseif ( $b > 1.7 ) {\n        $letter_grades[] = \"C+\";\n\
    \    } elseif ( $b > 1.3 ) {\n        $letter_grades[] = \"C\";\n    } elseif\
    \ ( $b > 1 ) {\n        $letter_grades[] = \"C-\";\n    } elseif ( $b > 0.7 )\
    \ {\n        $letter_grades[] = \"D+\";\n    } elseif ( $b > 0.3 ) {\n       \
    \ $letter_grades[] = \"D\";\n    } elseif ( $b > 0 ) {", "    $letters = array(\"\
    A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"\
    D\", \"D-\", \"E\");\n    foreach ($letters as $letter) {\n        if ($grade\
    \ >= 4.0) {\n            $grade = $grade + 3;\n        }\n        if ($grade >\
    \ 3.7) {\n            $grade = $grade - 3;\n        }\n        if ($grade > 3.3)\
    \ {\n            $grade = $grade - 2;\n        }\n        if ($grade > 3.0) {\n\
    \            $grade = $grade - 1;\n        }\n        if ($grade > 2.7) {\n  \
    \          $grade = $grade + 1;\n        }\n        if ($grade > 2.3) {\n    \
    \        $grade = $grade + 0;\n        }\n        if ($grade > 2.0) {\n      \
    \      $grade = $grade + 2;\n        }\n        if ($grade > 1.7) {\n        \
    \    $grade = $grade + 3;\n        }\n        if ($grade > 1.3) {\n          \
    \  $grade = $grade + 4;\n        }\n        if ($grade > 1.0) {\n            $grade\
    \ = $grade + 5;\n        }\n        if ($grade > 0.7) {\n            $grade =\
    \ $grade + 6;\n        }\n        if ($grade > 0.0) {\n            $grade = $grade\
    \ + 7;\n        }\n    }\n    return $letters[$grade];\n}\n", "\tglobal $num_grades;\n\
    \t$sum = 0;\n\tforeach ($grades as $grade) {\n\t\t$sum += $grade;\n\t}\n\t$gpa\
    \ = $sum / count($grades);\n\t$num_grades[] = $gpa;\n\t$grade_array = array();\n\
    \t$grade_array[] = '';\n\tfor ($i = 0; $i < count($grades); $i++) {\n\t\t$grade_array[]\
    \ = ($gpa - $num_grades[$i]) * 100 . \"% $num_grades[$i]\";\n\t}\n\treturn $grade_array;\n\
    }\n", "    $grades_sum = array_sum($grades);\n    $letter_grades = array();\n\
    \    $letter_grades[] = letter_grade(array_sum($grades), $grades_sum);\n    $grades\
    \ = array_reverse($grades); // sort in descending order\n    foreach ($grades\
    \ as $i => $grade) {\n        $letter_grades[] = letter_grade($grade, $grades_sum);\n\
    \    }\n    return $letter_grades;\n}\n", "    $grades_array = array();\n    $i\
    \ = 0;\n    while ($i < count($grades)) {\n        if ($grades[$i] > 3.0 && $grades[$i]\
    \ != 0.0) {\n            $grades_array[] = \"A+\";\n        } else if ($grades[$i]\
    \ > 2.7) {\n            $grades_array[] = \"B\";\n        } else if ($grades[$i]\
    \ > 2.3) {\n            $grades_array[] = \"B-\";\n        } else if ($grades[$i]\
    \ > 2.0) {\n            $grades_array[] = \"C+\";\n        } else if ($grades[$i]\
    \ > 1.7) {\n            $grades_array[] = \"C\";\n        } else if ($grades[$i]\
    \ > 1.2) {\n            $grades_array[] = \"C-\";\n        } else if ($grades[$i]\
    \ > 1.0) {\n            $grades_array[] = \"D+\";\n        } else if ($grades[$i]\
    \ > 0.7) {\n            $grades_array[] = \"D\";\n        } else if ($grades[$i]\
    \ > 0.3) {\n            $grades_array[] = \"D-\";\n        } else if ($grades[$i]\
    \ > 0.0) {\n            $grades_array[] = \"E\";\n        }\n        $i++;\n \
    \   }\n    return $grades_array;\n}\n", "    $letters = array(\n        'A+' =>\
    \ 4,\n        'A' => 3,\n        'A-' => 2,\n        'B+' => 3,\n        'B' =>\
    \ 2,\n        'B-' => 1,\n        'C+' => 2,\n        'C' => 1,\n        'C-'\
    \ => 0,\n        'D+' => 1,\n        'D' => 0,\n        'D-' => 0,\n        'E'\
    \ => 0,\n    );\n    $grades_array = (is_array($grades) ? $grades : array($grades));\n\
    \    $grades_array = array_filter($grades_array, 'is_numeric');\n    $grades_array\
    \ = array_map('round', $grades_array);\n    asort($grades_array);\n    $grades_array\
    \ = array_reverse($grades_array);\n    $grades_array = array_map('strrev', $grades_array);\n\
    \    $grades_array = array_merge($grades_array);\n    $grades_array = array_merge($grades_array,\
    \ array(0));\n    $grades_array = array_values($grades_array);\n    $grades_array\
    \ = array_pad($grades_array, count($grades_array), 0);\n    $grades_array = array_count_values($grades_array);\n\
    \    $grades_array = array_merge($grades_array, array(0));\n    foreach ($grades_array\
    \ as $key => $value) {\n        $grades_array[$key] = $letters[$value];\n    }\n\
    \    return $grades_array;\n}", "    if ($grades == 0) {\n        return [\"E\"\
    ];\n    }\n    $lettergrades = array();\n    foreach ($grades as $grade) {\n \
    \       if ($grade >= 3.0) {\n            $lettergrades[] = 'C+';\n        } else\
    \ if ($grade >= 2.7) {\n            $lettergrades[] = 'C';\n        } else if\
    \ ($grade >= 2.3) {\n            $lettergrades[] = 'B-';\n        } else if ($grade\
    \ >= 2.0) {\n            $lettergrades[] = 'B';\n        } else if ($grade >=\
    \ 1.7) {\n            $lettergrades[] = 'B-';\n        } else if ($grade >= 1.0)\
    \ {\n            $lettergrades[] = 'B+';\n        } else if ($grade >= 0.7) {\n\
    \            $lettergrades[] = 'D';\n        } else if ($grade >= 0.0) {\n   \
    \         $lettergrades[] = 'D+';\n        } else if ($grade >= 0) {\n       \
    \     $lettergrades[] = 'A';\n        } else {\n            $lettergrades[] =\
    \ 'A+';\n        }\n    }\n    return $lettergrades;\n}\n", "    // TODO\n}",
  "  $grades = $grades + 0.5;\n  return array(\"A+\", \"A\", \"A-\", \"B+\", \"B\"\
    , \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\");\n}\n", "    //\
    \ Your code here\n    $grades_array = array(\n        'A+' => 4,\n        'A'\
    \ => 3.7,\n        'A-' => 3.3,\n        'B+' => 3,\n        'B' => 2.7,\n   \
    \     'B-' => 2.3,\n        'C+' => 2,\n        'C' => 1.7,\n        'C-' => 1.3,\n\
    \        'D+' => 1,\n        'D' => 0.7,\n        'D-' => 0,\n        'E' => 0\n\
    \    );\n    $array_keys = array_keys($grades_array);\n    $grades_array_keys\
    \ = array_flip($array_keys);\n    $array_values = array_values($grades_array);\n\
    \n    $grades_array_keys = array_flip($array_keys);\n    $grades_array_values\
    \ = array_values($grades_array);\n    return array_map(function ($grade) use ($grades_array_keys)\
    \ {\n        return $grades_array_keys[$grade] . \"+\";\n    }, $grades_array_values);\n\
    }\n", "    $grades = array_map(function ($e) { return (float) $e; }, $grades);\n\
    \    $minGrade = min($grades);\n    $maxGrade = max($grades);\n    $min = floor($minGrade\
    \ / 1.7);\n    $max = ceil($maxGrade / 1.7);\n    $grades = array_map(function\
    \ ($e) use ($min, $max) {\n        $grade =\n            (($e < $min) ? \"D-\"\
    \ : ($e > $max) ? \"D+\" : ($e == $min) ? \"D\" : ((floor($e) == $min) ? \"D+\"\
    \ : ($e == $max) ? \"D-\" : \"C\")); \n        return $grade; \n    }, $grades);\n\
    \    return $grades;\n}\n", "  // Write your code here\n}", "    $lettergrades\
    \ = array();\n    foreach ($grades as $grade) {\n        if ($grade > 4.0) {\n\
    \            $lettergrades[] = \"A+\";\n        } else if ($grade > 3.7) {\n \
    \           $lettergrades[] = \"A\";\n        } else if ($grade > 3.3) {\n   \
    \         $lettergrades[] = \"A-\";\n        } else if ($grade > 3.0) {\n    \
    \        $lettergrades[] = \"B+\";\n        } else if ($grade > 2.7) {\n     \
    \       $lettergrades[] = \"B\";\n        } else if ($grade > 2.3) {\n       \
    \     $lettergrades[] = \"B-\";\n        } else if ($grade > 2.0) {\n        \
    \    $lettergrades[] = \"C+\";\n        } else if ($grade > 1.7) {\n         \
    \   $lettergrades[] = \"C\";\n        } else if ($grade > 1.3) {\n           \
    \ $lettergrades[] = \"C-\";\n        } else if ($grade > 1.0) {\n            $lettergrades[]\
    \ = \"D+\";\n        } else if ($grade > 0.7) {\n            $lettergrades[] =\
    \ \"D\";\n        } else if ($grade > 0.0) {\n            $lettergrades[] = \"\
    D-\";\n        } else if ($grade == 0.0) {\n            $lettergrades[] = \"E\"\
    ;\n        }\n    }\n    return $lettergrades;\n}", "    $grades_letters = array();\n\
    \    $index = 0;\n    while (array_search($grades[$index], $grades_letters) ===\
    \ false) {\n        if ($grades[$index] >= 3.0) {\n            $grades_letters[$index]\
    \ = 'A+';\n            $index++;\n        } elseif ($grades[$index] >= 3.0 &&\
    \ $grades[$index] < 3.7) {\n            $grades_letters[$index] = 'A';\n     \
    \       $index++;\n        } elseif ($grades[$index] >= 3.7 && $grades[$index]\
    \ < 3.3) {\n            $grades_letters[$index] = 'A-';\n            $index++;\n\
    \        } elseif ($grades[$index] >= 3.3 && $grades[$index] < 3.0) {\n      \
    \      $grades_letters[$index] = 'B+';\n            $index++;\n        } elseif\
    \ ($grades[$index] >= 3.0 && $grades[$index] < 3.7) {\n            $grades_letters[$index]\
    \ = 'B';\n            $index++;\n        } elseif ($grades[$index] >= 3.7 && $grades[$index]\
    \ < 3.3) {\n            $grades_letters[$index] = 'B-';\n            $index++;\n\
    \        } elseif ($grades[$index] >= 3.3 && $grades[$index] < 3.0) {\n      \
    \      $grades_letters[$index] = 'C+';\n            $index++;\n        } elseif\
    \ ($grades[$index] >= 3.0 && $grades[$index] < 3.7) {\n            $grades_letters[$index]\
    \ = 'C';\n            $index++;\n        } elseif ($grades[$index] >= 3.7 && $grades[$index]\
    \ < 3.3) {\n            $grades_letters[$index] = 'C-';\n            $index++;\n\
    \        } elseif ($grades[$index] >= 3.3 && $grades[$index] < 3.0) {\n      \
    \      $grades_letters[$index] = 'D+';\n            $index++;\n        } elseif\
    \ ($grades[$index] >= 3.0 && $grades[$index] < 3.7) {\n            $grades_letters[$index]\
    \ = 'D';\n            $index++;\n        } elseif ($grades[$index] >= 3.7 && $grades[$index]\
    \ < 3.3) {\n            $grades_letters[$index] = 'D-';\n            $index++;\n\
    \        } elseif ($grades[$index] >= 3.3 && $grades[$index] < 3.0) {\n      \
    \      $grades_letters[$index] = 'E';\n            $index++;\n        } else {\n\
    \            $grade", "    $grades_array = array();\n    \n    foreach($grades\
    \ as $grade) {\n        $grades_array[] = $grade;\n    }\n    \n    $grades_array\
    \ = array_unique($grades_array);\n    \n    if (count($grades_array) > 0) {\n\
    \        $grades_array = array_values($grades_array);\n        $grades_array =\
    \ array_unique($grades_array);\n    }\n    \n    $length = count($grades_array);\n\
    \    \n    for ($i = 0; $i < $length; $i++) {\n        $grades_array[$i] = chr(($grades_array[$i]>0)?65:66);\n\
    \        $grades_array[$i] = chr(($grades_array[$i]+$i)%26+65);\n    }\n    \n\
    \    return $grades_array;\n}\n\n$grades_array = grade_equation(array(4.0, 3,\
    \ 1.7, 2, 3.5));\nprint_r($grades_array);", "    $grades = array_map('floatval',\
    \ $grades);\n    \n    $grades = array_filter($grades);\n    \n    if (empty($grades))\
    \ {\n        return array();\n    }\n    $grades = array_map('round', $grades);\n\
    \    \n    if (empty($grades)) {\n        return array();\n    }\n    \n    $grades\
    \ = array_map('floor', $grades);\n    \n    $grades = array_map('array_filter',\
    \ $grades);\n    \n    $grades = array_map('array_map', $grades);\n    \n    $grades\
    \ = array_map('array_reduce', $grades);\n    \n    $grades = array_map('array_filter',\
    \ $grades);\n    \n    $grades = array_map('array_map', $grades);\n    \n    $grades\
    \ = array_map('array_reduce', $grades);\n    \n    $grades = array_map('array_filter',\
    \ $grades);\n    \n    $grades = array_map('array_map', $grades);\n    \n    $grades\
    \ = array_map('array_reduce', $grades);\n    \n    $grades = array_map('array_filter',\
    \ $grades);\n    \n    $grades = array_map('array_map', $grades);\n    \n    $grades\
    \ = array_map('array_reduce', $grades);\n    \n    $grades = array_map('array_filter',\
    \ $grades);\n    \n    $grades = array_map('array_map', $grades);\n    \n    $grades\
    \ = array_map('array_reduce', $grades);\n    \n    $grades = array_map('array_filter',\
    \ $grades);\n    \n    $grades = array_map('array_map', $grades);\n    \n    $grades\
    \ = array_map('array_reduce', $grades);\n    \n    $grades = array_map('array_filter',\
    \ $grades);\n    \n    $grades = array_map('array_map', $grades);\n    \n    $grades\
    \ = array_map('array_reduce', $grades);\n    \n    $grades = array_map('array_filter',\
    \ $grades);\n    \n    $grades = array_map('array_map', $grades);\n    \n    $grades\
    \ = array_map('array_reduce', $grades);\n    \n    $grades = array_map('array_filter',\
    \ $grades);\n    \n    $grades = array_map('array_map', $grades);\n    \n    $grades\
    \ = array_map('array_reduce', $grades);\n    \n    $grades = array_map('array_filter',\
    \ $grades);\n    \n    $grades = array_map('array_map', $grades);\n    \n    $grades\
    \ = array_map('array_reduce', $grades);\n    \n    $grades = array_map('array_filter',\
    \ $grades);\n    \n    $", "    if (!is_array($grades)) {\n        die(\"Invalid\
    \ grades array\");\n    }\n    $letter_grades = array();\n    $count = count($grades);\n\
    \    $current_grade = 0;\n    $final_grade = 0;\n    foreach ($grades as $grade)\
    \ {\n        if ($current_grade === 0) {\n            $final_grade = $grade;\n\
    \        } else {\n            $final_grade = $grade - $current_grade;\n     \
    \   }\n        $current_grade = $grade;\n        array_push($letter_grades, $final_grade);\n\
    \    }\n    return $letter_grades;\n}", "  $grades = array_map(function ($value)\
    \ {\n    return ($value < 3.0) ? \"B+\" : ((3.0 >= $value) && ($value >= 2.7))\
    \ ? \"B\" : ((2.7 >= $value) && ($value >= 1.7)) ? \"B-\" : ((1.7 >= $value) &&\
    \ ($value >= 1.3) ? \"C+\" : ((1.3 >= $value) && ($value >= 0.7)) ? \"C\" : ((0.7\
    \ >= $value) && ($value >= 0.0) ? \"C-\" : ((0.0 >= $value) ? \"D-\" : (\"D+\"\
    )));\n  }, $grades);\n  $grades = array_unique($grades);\n  return $grades;\n\
    }\n", "    $grades = array_map(function($grade) {\n        if($grade > 3.7) {\n\
    \            return 'A+';\n        } elseif($grade > 3.3) {\n            return\
    \ 'A';\n        } elseif($grade > 3) {\n            return 'A-';\n        } elseif($grade\
    \ > 2.7) {\n            return 'B+';\n        } elseif($grade > 2.3) {\n     \
    \       return 'B';\n        } elseif($grade > 2) {\n            return 'B-';\n\
    \        } elseif($grade > 1.7) {\n            return 'C+';\n        } elseif($grade\
    \ > 1.3) {\n            return 'C';\n        } elseif($grade > 1) {\n        \
    \    return 'C-';\n        } elseif($grade > 0.7) {\n            return 'D+';\n\
    \        } elseif($grade > 0) {\n            return 'D';\n        } else {\n \
    \           return 'E';\n        }\n    }, $grades);\n    return $grades;\n}\n",
  "\t$letter_grade = array();\n\tforeach ($grades as $grade) {\n\t\t$letter_grade[]\
    \ = array(\n\t\t\t'GPA' => $grade,\n\t\t\t'Letter grade' => array(\n\t\t\t\t'A+'\
    \ => 4.0,\n\t\t\t\t'A' => 3.7,\n\t\t\t\t'A-' => 3.3,\n\t\t\t\t'B+' => 3.0,\n\t\
    \t\t\t'B' => 2.7,\n\t\t\t\t'B-' => 2.3,\n\t\t\t\t'C+' => 2.0,\n\t\t\t\t'C' =>\
    \ 1.7,\n\t\t\t\t'C-' => 1.3,\n\t\t\t\t'D+' => 1.0,\n\t\t\t\t'D' => 0.7,\n\t\t\t\
    \t'D-' => 0.0,\n\t\t\t\t'E' => 0.0,\n\t\t\t)[$grade]\n\t\t);\n\t}\n\treturn $letter_grade;\n\
    }\n", "    $grades = array_filter($grades);\n    \n    $gpa = array_sum($grades);\n\
    \    \n    if ($gpa >= 4.0) {\n        $grades[] = \"+\";\n    }\n    if ($gpa\
    \ >= 3.7) {\n        $grades[] = \"A\";\n    }\n    if ($gpa >= 3.3) {\n     \
    \   $grades[] = \"A-\";\n    }\n    if ($gpa >= 3) {\n        $grades[] = \"B+\"\
    ;\n    }\n    if ($gpa >= 2.7) {\n        $grades[] = \"B\";\n    }\n    if ($gpa\
    \ >= 2.3) {\n        $grades[] = \"B-\";\n    }\n    if ($gpa >= 2) {\n      \
    \  $grades[] = \"C+\";\n    }\n    if ($gpa >= 1.7) {\n        $grades[] = \"\
    C\";\n    }\n    if ($gpa >= 1.3) {\n        $grades[] = \"C-\";\n    }\n    if\
    \ ($gpa >= 1) {\n        $grades[] = \"D+\";\n    }\n    if ($gpa >= 0.7) {\n\
    \        $grades[] = \"D\";\n    }\n    if ($gpa >= 0) {\n        $grades[] =\
    \ \"D-\";\n    }\n    if ($gpa > 0) {\n        $grades[] = \"E\";\n    }\n   \
    \ \n    return $grades;\n}\n", "    foreach ($grades as $index => $grade) {\n\
    \        if ($grade > 0) {\n            $grades[$index] = $grade > 3 ? $grade\
    \ : $grade - 1;\n        } elseif ($grade < 0) {\n            $grades[$index]\
    \ = $grade > 0 ? $grade : -$grade;\n        }\n    }\n    return array_map(function\
    \ ($grade) { return $grade >= 0 ? $grade >= 0.7 ? 'D+' : 'D' : 'D-';}, $grades);\n\
    }\n", "    $grades = array_filter($grades);\n    $grades = array_slice($grades,\
    \ 0, 10);\n    $grades = array_map('round', $grades);\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_unique($grades);\n    $grades = array_unique($grades,\
    \ SORT_NUMERIC);\n    sort($grades);\n    $grades = array_reverse($grades);\n\
    \    $grades = array_slice($grades, 0, 10);\n    $grades = array_map(function($x)\
    \ {\n        return array_shift(array_intersect(array('A', 'B+', 'C-', 'C', 'D+',\
    \ 'D', 'A-', 'E'), $x));\n    }, $grades);\n    return $grades;\n}\n", "    $gpa_sum\
    \ = array_sum($grades);\n    $letter_grade = array();\n    $letter_grade[0] =\
    \ \"D+\";\n    $letter_grade[1] = \"D\";\n    $letter_grade[2] = \"C-\";\n   \
    \ $letter_grade[3] = \"C\";\n    $letter_grade[4] = \"A-\";\n    $letter_grade[5]\
    \ = \"A\";\n    $letter_grade[6] = \"B+\";\n    $letter_grade[7] = \"B\";\n  \
    \  $letter_grade[8] = \"B-\";\n    $letter_grade[9] = \"B\";\n    $letter_grade[10]\
    \ = \"C+\";\n    $letter_grade[11] = \"C\";\n    $letter_grade[12] = \"None\"\
    ;\n    $letter_grade[13] = \"D-\";\n    $letter_grade[14] = \"D\";\n    $letter_grade[15]\
    \ = \"E\";\n    if ($gpa_sum >= 4.0 && $gpa_sum < 4.5) {\n        $letter_grade[0]\
    \ .= \"A+\";\n    }\n    if ($gpa_sum >= 3.7 && $gpa_sum < 4.0) {\n        $letter_grade[1]\
    \ .= \"A\";\n    }\n    if ($gpa_sum >= 3.3 && $gpa_sum < 3.7) {\n        $letter_grade[2]\
    \ .= \"A- \";\n    }\n    if ($gpa_sum >= 3.0 && $gpa_sum < 3.3) {\n        $letter_grade[3]\
    \ .= \"B+\";\n    }\n    if ($gpa_sum >= 2.7 && $gpa_sum < 3.0) {\n        $letter_grade[4]\
    \ .= \"B\";\n    }\n    if ($gpa_sum >= 2.3 && $gpa_sum < 2.7) {\n        $letter_grade[5]\
    \ .= \"B-\";\n    }\n    if ($gpa_sum >= 2.0 && $gpa_sum < 2.3) {\n        $letter_grade[6]\
    \ .= \"C+\";\n    }\n    if ($gpa_sum >= 1.7 && $gpa_sum < 2.0) {\n        $letter_grade[7]\
    \ .= \"C\";\n    }\n    if ($gpa_sum >= 1.3 && $gpa_sum < 1.7) {\n        $letter_grade[8]\
    \ .= \"C-\";\n    }\n    if ($gpa_sum >= 1.0 && $gpa_sum < 1.3) {\n        $letter_grade[9]\
    \ .= \"D+\";\n    }\n    if ($gpa_sum >= 0.7 && $gpa_sum < 1.0) {\n        $letter_grade[10]\
    \ .= \"D\";\n    }\n    if ($gpa_sum >= 0.0 && $gpa_sum < 0.7) {\n        $letter_grade[11]\
    \ .= \"D-\";\n    }\n    if ($gpa_sum > 0.0 && ", "    $grades = array_map(function\
    \ ($grade_number) {\n        return ($grade_number > 0) ? '+'.$grade_number :\
    \ $grade_number;\n    }, $grades);\n    $grades = array_filter($grades);\n   \
    \ $grades = array_map(function ($grade_number) {\n        $grade_number = floatval($grade_number);\n\
    \        if ($grade_number > 0 && $grade_number < 4) {\n            $letter =\
    \ 'A';\n        } elseif ($grade_number >= 4 && $grade_number < 7) {\n       \
    \     $letter = 'B';\n        } elseif ($grade_number >= 7 && $grade_number <\
    \ 8) {\n            $letter = 'C';\n        } elseif ($grade_number >= 8) {\n\
    \            $letter = 'D';\n        } else {\n            $letter = 'E';\n  \
    \      }\n        return $letter;\n    }, $grades);\n    return $grades;\n}\n\n\
    /**\n * Write a function that can output an array of letter grades for a single\
    \ student\n * using the following table:\n * GPA       |    Letter grade\n * 4.0\
    \                A+\n * > 3.7                A \n * > 3.3                A- \n\
    \ * > 3.0                B+\n * > 2.7                B \n * > 2.3            \
    \    B-\n * > 2.0                C+\n * > 1.7                C\n * > 1.3     \
    \           C-\n * > 1.0                D+ \n * > 0.7                D \n * >\
    \ 0.0                D-\n * 0.0                E\n * Example:\n * >>> single_student_grade_func(4.0)\n\
    \ * array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\n * \n * Note:\n * This function\
    \ should NOT print out any grades. \n * Instead, it should return an array containing\
    \ all the grades \n * for that student. \n *\n * @param float $student_grade a\
    \ numeric value for a student\n * @return array containing all the grades for\
    \ that student\n */", "    foreach($grades as $index => $grade) {\n        if\
    \ ($grade >= 4.0) {\n            $grades[$index] = \"A+\";\n        } elseif ($grade\
    \ > 3.7) {\n            $grades[$index] = \"A\";\n        } elseif ($grade > 3.3)\
    \ {\n            $grades[$index] = \"A-\";\n        } elseif ($grade > 3) {\n\
    \            $grades[$index] = \"B+\";\n        } elseif ($grade > 2.7) {\n  \
    \          $grades[$index] = \"B\";\n        } elseif ($grade > 2.3) {\n     \
    \       $grades[$index] = \"B-\";\n        } elseif ($grade > 2) {\n         \
    \   $grades[$index] = \"C+\";\n        } elseif ($grade > 1.7) {\n           \
    \ $grades[$index] = \"C\";\n        } elseif ($grade > 1.3) {\n            $grades[$index]\
    \ = \"C-\";\n        } elseif ($grade > 1) {\n            $grades[$index] = \"\
    D+\";\n        } elseif ($grade > 0.7) {\n            $grades[$index] = \"D\"\
    ;\n        } elseif ($grade > 0) {\n            $grades[$index] = \"D-\";\n  \
    \      }\n    }\n    return $grades;\n}\n", "\tif ($grades === null) {\n\t\treturn\
    \ null;\n\t}\n\t$grades = array(4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0,\
    \ 0.7);\n\t$len = count($grades);\n\tif ($len > 0) {\n\t\t$gpa = array_shift($grades);\n\
    \t\t$first = true;\n\t\tfor ($i = 0; $i < $len; $i++) {\n\t\t\tif ($i === 0) {\n\
    \t\t\t\tif ($first === true) {\n\t\t\t\t\t$grade = grade_letter($gpa);\n\t\t\t\
    \t\t$first = false;\n\t\t\t\t} else {\n\t\t\t\t\t$grade = grade_letter($grades[$i\
    \ - 1]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$grade = grade_letter($grades[$i]);\n\
    \t\t\t}\n\t\t\t$grades[$i] = $grade . $grade;\n\t\t}\n\t} else {\n\t\t$grades\
    \ = array('E');\n\t}\n\treturn $grades;\n}\n", "  $grades = array_unique($grades);\n\
    \  $letter_grades = array();\n  foreach ($grades as $grade_number => $grade_letter)\
    \ {\n    foreach ($grade_letter as $letter) {\n      $letter_grades[$letter][]\
    \ = $grade_number;\n    }\n  }\n  foreach ($letter_grades as $letter => $grades)\
    \ {\n    $letter_grades[$letter] = array_flip($grades);\n  }\n  $letter_grades\
    \ = array_filter(\n    $letter_grades,\n    function($grade_array) {\n      return\
    \ !empty($grade_array);\n    }\n  );\n  return $letter_grades;\n}\n", "    //\
    \ TODO: Implement this function\n    $array = array();\n    $array[0] = \"A+\"\
    ;\n    $array[1] = \"A\";\n    $array[2] = \"A-\";\n    $array[3] = \"B+\";\n\
    \    $array[4] = \"B\";\n    $array[5] = \"B-\";\n    $array[6] = \"C+\";\n  \
    \  $array[7] = \"C\";\n    $array[8] = \"C-\";\n    $array[9] = \"D+\";\n    $array[10]\
    \ = \"D\";\n    $array[11] = \"D-\";\n    $array[12] = \"E\";\n    $array[$grades]\
    \ = \"E\";\n    return $array;\n}\n", "    if (!is_array($grades)) return FALSE;\n\
    \n    foreach ($grades as $i => $grade) {\n        // Get the GPA for the grade\n\
    \        $gpa = $grades[$i];\n\n        // Only accept positive values\n     \
    \   if ($gpa < 0 || $gpa > 5) continue;\n\n        // Output letter grade for\
    \ grade \n        // Calculation: (GPA - 1) * 10 + 1\n        $letter_grade =\
    \ ($gpa - 1) * 10 + $grades[$i] + 1;\n\n        // Output letter grade for GPA\n\
    \        $letter_grades[$gpa] = $letter_grade;\n    }\n\n    return $letter_grades;\n\
    }\n", "  $letter_grades = array(\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\",\
    \ \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\");\n  foreach ($grades as\
    \ $key => $value) {\n    $letter_grades[$key] = $letter_grades[$key] . str_replace(\"\
    +\", \"\", preg_replace(\"/./\", \"?\", round($value)));\n  }\n  return $letter_grades;\n\
    }\n", "  $grades = array_reverse($grades);\n  $grades = array_filter($grades,\
    \ function($grade) use ($grades) {\n    foreach ($grades as $i => $grade) {\n\
    \      if ($grade == $i) {\n        unset($grades[$i]);\n      }\n    }\n    return\
    \ count($grades) <= 0;\n  });\n  $grades = array_reverse($grades);\n  foreach\
    \ ($grades as $i => $grade) {\n    $grades[$i] = strtoupper(chr((int) $grade));\n\
    \  }\n  return $grades;\n}", "\t$grade_array = \"\";\n\t$grades_array = array(4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7);\n\tforeach($grades as $grade\
    \ => $gpa) {\n\t\tif($gpa >= 3.9) {\n\t\t\t$grade_array .= \"+\";\n\t\t}\n\t\t\
    else if($gpa >= 3.0 && $gpa < 3.7) {\n\t\t\t$grade_array .= \"A\";\n\t\t}\n\t\t\
    else if($gpa >= 2.7 && $gpa < 3.3) {\n\t\t\t$grade_array .= \"A-\";\n\t\t}\n\t\
    \telse if($gpa >= 2.3 && $gpa < 3) {\n\t\t\t$grade_array .= \"B+\";\n\t\t}\n\t\
    \telse if($gpa >= 1.7 && $gpa < 2.3) {\n\t\t\t$grade_array .= \"B\";\n\t\t}\n\t\
    \telse if($gpa >= 1.3 && $gpa < 1.7) {\n\t\t\t$grade_array .= \"B-\";\n\t\t}\n\
    \t\telse if($gpa >= 1.0 && $gpa < 1.3) {\n\t\t\t$grade_array .= \"C+\";\n\t\t\
    }\n\t\telse if($gpa >= 0.7 && $gpa < 1.0) {\n\t\t\t$grade_array .= \"C\";\n\t\t\
    }\n\t\telse if($gpa >= 0.3 && $gpa < 0.7) {\n\t\t\t$grade_array .= \"C-\";\n\t\
    \t}\n\t\telse if($gpa >= 0.0) {\n\t\t\t$grade_array .= \"D+\";\n\t\t}\n\t\telse\
    \ {\n\t\t\t$grade_array .= \"D\";\n\t\t}\n\t}\n\treturn $grade_array;\n}\n", " \
    \ if (is_array($grades) && !empty($grades)) {\n    return array_map(function ($grade)\
    \ {\n      if ($grade < 4.0) {\n        return 'A+';\n      } else if ($grade\
    \ > 3.7) {\n        return 'A';\n      } else if ($grade > 3.3) {\n        return\
    \ 'A';\n      } else if ($grade > 3.0) {\n        return 'B+';\n      } else if\
    \ ($grade > 2.7) {\n        return 'B';\n      } else if ($grade > 2.3) {\n  \
    \      return 'B';\n      } else if ($grade > 2.0) {\n        return 'C+';\n \
    \     } else if ($grade > 1.7) {\n        return 'C';\n      } else if ($grade\
    \ > 1.3) {\n        return 'C';\n      } else if ($grade > 1.0) {\n        return\
    \ 'D+';\n      } else if ($grade > 0.7) {\n        return 'D';\n      } else {\n\
    \        return 'E';\n      }\n    }, $grades);\n  } else {\n    return false;\n\
    \  }\n}", "    // Your code here\n    $gpa =array(4.0, 3.7, 3.3, 3.0, 2.7, 2.3,\
    \ 2.0, 1.7, 1.3, 1.0, 0.7);\n    $letters = array(\"A\", \"A\", \"A\", \"B\",\
    \ \"B\", \"B\", \"C\", \"C\", \"C\", \"D\", \"D\", \"D\", \"D\", \"E\");\n   \
    \ \n    foreach($grades as $grade){\n        for($i = 0; $i < count($gpa); $i++){\n\
    \            if($gpa [$i] >= $grade){\n                if($gpa [$i] >= 3.7){\n\
    \                    $letters[] = \"A+\";\n                } else if ($gpa [$i]\
    \ >= 3.3){\n                    $letters[] = \"A-\";\n                } else if\
    \ ($gpa [$i] >= 3.0){\n                    $letters[] = \"B+\";\n            \
    \    } else if ($gpa [$i] >= 2.7){\n                    $letters[] = \"B\";\n\
    \                } else if ($gpa [$i] >= 2.3){\n                    $letters[]\
    \ = \"B-\";\n                } else if ($gpa [$i] >= 2.0){\n                 \
    \   $letters[] = \"C+\";\n                } else if ($gpa [$i] >= 1.7){\n    \
    \                $letters[] = \"C\";\n                } else if ($gpa [$i] >=\
    \ 1.3){\n                    $letters[] = \"C-\";\n                } else if ($gpa\
    \ [$i] >= 1.0){\n                    $letters[] = \"D+\";\n                } else\
    \ if ($gpa [$i] >= 0.7){\n                    $letters[] = \"D\";\n          \
    \      } else {\n                    $letters[] = \"D-\";\n                }\n\
    \                \n                break;\n            }\n        }\n    }\n \
    \   return $letters;\n}", "  $letters = array();\n  foreach ($grades as $grade)\
    \ {\n    if ($grade >= 4.0) {\n      $letters[] = \"A+\";\n    } elseif ($grade\
    \ > 3.7 && $grade < 4.0) {\n      $letters[] = \"A\";\n    } elseif ($grade >\
    \ 3.3 && $grade < 3.7) {\n      $letters[] = \"A-\";\n    } elseif ($grade > 3.0\
    \ && $grade < 3.3) {\n      $letters[] = \"B+\";\n    } elseif ($grade > 2.7 &&\
    \ $grade < 3.0) {\n      $letters[] = \"B\";\n    } elseif ($grade > 2.3 && $grade\
    \ < 2.7) {\n      $letters[] = \"B-\";\n    } elseif ($grade > 2.0 && $grade <\
    \ 2.3) {\n      $letters[] = \"C+\";\n    } elseif ($grade > 1.7 && $grade < 2.0)\
    \ {\n      $letters[] = \"C\";\n    } elseif ($grade > 1.3 && $grade < 1.7) {\n\
    \      $letters[] = \"C-\";\n    } elseif ($grade > 1.0 && $grade < 1.3) {\n \
    \     $letters[] = \"D+\";\n    } elseif ($grade > 0.7 && $grade < 1.0) {\n  \
    \    $letters[] = \"D\";\n    } elseif ($grade > 0.0 && $grade < 0.7) {\n    \
    \  $letters[] = \"D-\";\n    } else {\n      $letters[] = \"E\";\n    }\n  }\n\
    \  return $letters;\n}\n", "    // Write your code here\n    // $grades = array\
    \ (4.0, 3, 1.7, 2, 3.5);\n    $grades = array(4.0, 3, 1.7, 2, 3.5);\n    $gradesArray\
    \ = array_map('round',$grades);\n    $sum = 0;\n    $gradesArray = array_filter($gradesArray,\
    \ 'is_numeric');\n\n    foreach ($gradesArray as $grade) {\n        $sum += $grade;\n\
    \    }\n    foreach ($gradesArray as $grade) {\n        if ($grade >= 4.0)\n \
    \           $result[$grade] = 'A+';\n        else if ($grade >= 3.7 && $grade\
    \ <= 4.0)\n            $result[$grade] = 'A';\n        else if ($grade >= 3.3\
    \ && $grade <= 3.7)\n            $result[$grade] = 'A-';\n        else if ($grade\
    \ >= 3.0 && $grade <= 3.3)\n            $result[$grade] = 'B+';\n        else\
    \ if ($grade >= 2.7 && $grade <= 3.0)\n            $result[$grade] = 'B';\n  \
    \      else if ($grade >= 2.3 && $grade <= 2.7)\n            $result[$grade] =\
    \ 'B-';\n        else if ($grade >= 2.0 && $grade <= 2.3)\n            $result[$grade]\
    \ = 'C+';\n        else if ($grade >= 1.7 && $grade <= 2.0)\n            $result[$grade]\
    \ = 'C';\n        else if ($grade >= 1.3 && $grade <= 1.7)\n            $result[$grade]\
    \ = 'C-';\n        else if ($grade >= 1.0 && $grade <= 1.3)\n            $result[$grade]\
    \ = 'D+';\n        else if ($grade >= 0.7 && $grade <= 1.0)\n            $result[$grade]\
    \ = 'D';\n        else\n            $result[$grade] = 'D-';\n    }\n    $gradesArray\
    \ = array_filter($gradesArray, 'is_numeric');\n    foreach ($gradesArray as $grade)\
    \ {\n        if ($grade >= 4.0)\n            $result[$grade] = 'A+';\n       \
    \ else if ($grade >= 3.7 && $grade <= 4.0)\n            $result[$grade] = 'A';\n\
    \        else if ($grade >= 3.3 && $grade <= 3.7)\n            $result[$grade]\
    \ = 'A-';\n        else if ($grade >= 3.0 && $grade <= 3.3)\n            $result[$grade]\
    \ = 'B+';\n        else if ($grade >= 2.7 && $grade <= 3.0)\n            $result[$grade]\
    \ = 'B';\n        else if ($grade >= 2.3 && $grade <= 2.7)\n            $result[$grade]\
    \ = 'B-", "    return array_map(function($value){\n        $diff = abs($value\
    \ - 3.5);\n        return $diff == 0 ? 'D-' : ($diff < 0.5 ? 'C-' : (($diff >=\
    \ 0.9) ? 'B-' : 'B-'));\n    }, $grades);\n}", "    $grades = array_map('round',\
    \ $grades);\n    $grades = array_filter($grades);\n    \n    foreach($grades as\
    \ $i => $grade) {\n        if ($grade == 0) {\n            $grades[$i] = \"D\"\
    ;\n        } else if ($grade < 3.0) {\n            $grades[$i] = \"C\";\n    \
    \    } else if ($grade >= 3.0 && $grade < 3.7) {\n            $grades[$i] = \"\
    B-\";\n        } else if ($grade >= 3.7) {\n            $grades[$i] = \"B\";\n\
    \        } else if ($grade > 3.7 && $grade < 4.0) {\n            $grades[$i] =\
    \ \"A-\";\n        } else if ($grade >= 4.0 && $grade < 4.7) {\n            $grades[$i]\
    \ = \"A\";\n        } else if ($grade >= 4.7) {\n            $grades[$i] = \"\
    A+\";\n        } else {\n            $grades[$i] = \"D+\";\n        }\n    }\n\
    \    return $grades;\n}", "    $grades_array = array_map(function($g) { return\
    \ $g / 4.0; }, $grades);\n    $letter_grades = [];\n    $i = 0;\n    while ($i\
    \ < count($grades_array)) {\n        if ($grades_array[$i] >= 3.3) {\n       \
    \     $letter_grades[] = \"+\";\n        } else if ($grades_array[$i] >= 2.7)\
    \ {\n            $letter_grades[] = \"-\";\n        } else if ($grades_array[$i]\
    \ >= 2.3) {\n            $letter_grades[] = \"C+\";\n        } else if ($grades_array[$i]\
    \ >= 1.7) {\n            $letter_grades[] = \"C\";\n        } else if ($grades_array[$i]\
    \ >= 1.0) {\n            $letter_grades[] = \"D+\";\n        } else if ($grades_array[$i]\
    \ >= 0.7) {\n            $letter_grades[] = \"D\";\n        } else if ($grades_array[$i]\
    \ >= 0.0) {\n            $letter_grades[] = \"D-\";\n        } else {\n      \
    \      $letter_grades[] = \"E\";\n        }\n        $i++;\n    }\n    return\
    \ $letter_grades;\n}\n", "  $grades_array = array($grades);\n  for($i = 0; $i\
    \ < count($grades); $i++) {\n    $temp = $grades_array[$i];\n    $temp -= $grades[0];\n\
    \    $grades_array[$i] = $temp;\n  }\n  return $grades_array;\n}\n", "    $grade_array\
    \ = array(\n        array(4.0,'A+'),\n        array(3.7,'A'),\n        array(3.3,'A-'),\n\
    \        array(3.0,'B+'),\n        array(2.7,'B'),\n        array(2.3,'B-'),\n\
    \        array(2.0,'C+'),\n        array(1.7,'C'),\n        array(1.3,'C-'),\n\
    \        array(1.0,'D+'),\n        array(0.7,'D'),\n        array(0.0,'D-')\n\
    \    );\n    $letter_grades = array();\n    foreach ($grade_array as $grade) {\n\
    \        foreach ($grades as $i) {\n            if ($grade > $i) {\n         \
    \       if ($i==$grade) {\n                    $letter_grades[] = $grade_array[$grade_array[$i][0]][2];\n\
    \                } else {\n                    $letter_grades[] = $grade_array[$grade_array[$i][0]][2];\n\
    \                }\n            } else if ($grade < $i) {\n                if\
    \ ($i==$grade) {\n                    $letter_grades[] = $grade_array[$grade_array[$i][0]][1];\n\
    \                } else {\n                    $letter_grades[] = $grade_array[$grade_array[$i][0]][1];\n\
    \                }\n            }\n        }\n    }\n    return $letter_grades;\n\
    }", "    $grades_array = array(4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0,\n        1.7,\
    \ 1.3, 1.0, 0.7);\n    $letters = array('A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+',\
    \ 'C', 'C-', 'D+', 'D', 'D-', 'E');\n    return array_slice(array_intersect($letters,\
    \ $grades), 0, count($grades));\n}\n", "  $gpa = $grades[0];\n  $letter_grades\
    \ = array();\n  for($i = 1; $i <= $gpa; ++$i) {\n    $letter_grades[] = ('A+'\
    \ > $grades[$i] && 'A' <= $grades[$i] ? 'A' : \n        ('A+' > $grades[$i] &&\
    \ 'A+' <= $grades[$i] ? 'A-' : \n        ('A' > $grades[$i] && 'A' <= $grades[$i]\
    \ ? 'B+' : \n        ('A' > $grades[$i] && 'A+' <= $grades[$i] ? 'B-' : \n   \
    \     ('B+' > $grades[$i] && 'B' <= $grades[$i] ? 'B' : \n        ('B+' > $grades[$i]\
    \ && 'B+' <= $grades[$i] ? 'B-' : \n        ('B' > $grades[$i] && 'B' <= $grades[$i]\
    \ ? 'C+' : \n        ('B' > $grades[$i] && 'B+' <= $grades[$i] ? 'C-' : \n   \
    \     ('C+' > $grades[$i] && 'C' <= $grades[$i] ? 'C' : \n        ('C+' > $grades[$i]\
    \ && 'C+' <= $grades[$i] ? 'C-' : \n        ('C' > $grades[$i] && 'C' <= $grades[$i]\
    \ ? 'D+' : \n        ('C' > $grades[$i] && 'C+' <= $grades[$i] ? 'D-' : \n   \
    \     ('D+' > $grades[$i] && 'D' <= $grades[$i] ? 'D' : \n        ('D+' > $grades[$i]\
    \ && 'D+' <= $grades[$i] ? 'D-' : \n        ('D' > $grades[$i] && 'D' <= $grades[$i]\
    \ ? 'E' : ''))))))))));\n  }\n  return $letter_grades;\n}", "  $grades = array_map('intval',\
    \ $grades);\n  sort($grades);\n  $grades = array_reverse($grades);\n  $letter_grades\
    \ = array();\n  foreach($grades as $grade) {\n    if ($grade <= 3.0) {\n     \
    \ $letter_grades[] = '+';\n    } else if ($grade <= 3.7) {\n      $letter_grades[]\
    \ = 'A';\n    } else if ($grade <= 4.0) {\n      $letter_grades[] = 'A-';\n  \
    \  } else if ($grade <= 4.7) {\n      $letter_grades[] = 'B+';\n    } else if\
    \ ($grade <= 5.0) {\n      $letter_grades[] = 'B';\n    } else if ($grade <= 5.7)\
    \ {\n      $letter_grades[] = 'B-';\n    } else if ($grade <= 6.7) {\n      $letter_grades[]\
    \ = 'C+';\n    } else if ($grade <= 7.0) {\n      $letter_grades[] = 'C';\n  \
    \  } else if ($grade <= 7.7) {\n      $letter_grades[] = 'C-';\n    } else if\
    \ ($grade <= 8.7) {\n      $letter_grades[] = 'D+';\n    } else if ($grade <=\
    \ 9.7) {\n      $letter_grades[] = 'D';\n    } else {\n      $letter_grades[]\
    \ = 'D-';\n    }\n  }\n  return $letter_grades;\n}\n", "    $grades = array_filter($grades);\n\
    \    $letters = array();\n    foreach ($grades as $grade) {\n        if ($grade\
    \ > 0 && $grade < 4) {\n            $letters[] = 'A+';\n        } elseif ($grade\
    \ > 4 && $grade < 7) {\n            $letters[] = 'A';\n        } elseif ($grade\
    \ > 7 && $grade < 8) {\n            $letters[] = 'A-';\n        } elseif ($grade\
    \ > 8 && $grade < 10) {\n            $letters[] = 'B+';\n        } elseif ($grade\
    \ > 9 && $grade < 11) {\n            $letters[] = 'B';\n        } elseif ($grade\
    \ > 11 && $grade < 12) {\n            $letters[] = 'B-';\n        } elseif ($grade\
    \ > 12 && $grade < 13) {\n            $letters[] = 'C+';\n        } elseif ($grade\
    \ > 13 && $grade < 15) {\n            $letters[] = 'C';\n        } elseif ($grade\
    \ > 15 && $grade < 16) {\n            $letters[] = 'C-';\n        } elseif ($grade\
    \ > 16) {\n            $letters[] = 'D+';\n        } elseif ($grade > 17) {\n\
    \            $letters[] = 'D';\n        } elseif ($grade > 17) {\n           \
    \ $letters[] = 'D-';\n        } elseif ($grade > 17) {\n            $letters[]\
    \ = 'E';\n        }\n    }\n    return $letters;\n}\n", "    // Here we take care\
    \ of the \"No grades\" case\n    if ($grades[0] == 0) {\n        return array(\"\
    E\");\n    }\n    $grades_sorted = array_reverse($grades);\n    sort($grades_sorted);\n\
    \    // This array will hold the letter grades for all the students\n    $grades\
    \ = array();\n    foreach ($grades_sorted as $key => $grade) {\n        if ($grade\
    \ == 0) {\n            $grades[] = array(\"E\");\n            continue;\n    \
    \    }\n        $grades[] = array(\"A\");\n        $grades[] = array(\"B\");\n\
    \        $grades[] = array(\"C\");\n        $grades[] = array(\"D\");\n      \
    \  $grades[] = array(\"E\");\n        $grades[] = array(\"F\");\n        $grades[]\
    \ = array(\"G\");\n        $grades[] = array(\"H\");\n        $grades[] = array(\"\
    I\");\n        $grades[] = array(\"J\");\n        $grades[] = array(\"K\");\n\
    \        $grades[] = array(\"L\");\n        $grades[] = array(\"M\");\n      \
    \  $grades[] = array(\"N\");\n        $grades[] = array(\"O\");\n        $grades[]\
    \ = array(\"P\");\n        $grades[] = array(\"Q\");\n        $grades[] = array(\"\
    R\");\n        $grades[] = array(\"S\");\n        $grades[] = array(\"T\");\n\
    \        $grades[] = array(\"U\");\n        $grades[] = array(\"V\");\n      \
    \  $grades[] = array(\"W\");\n        $grades[] = array(\"X\");\n        $grades[]\
    \ = array(\"Y\");\n        $grades[] = array(\"Z\");\n    }\n    $grades[] = array(\"\
    A\");\n    $grades[] = array(\"B\");\n    $grades[] = array(\"C\");\n    $grades[]\
    \ = array(\"D\");\n    $grades[] = array(\"E\");\n    $grades[] = array(\"F\"\
    );\n    $grades[] = array(\"G\");\n    $grades[] = array(\"H\");\n    $grades[]\
    \ = array(\"I\");\n    $grades[] = array(\"J\");\n    $grades[] = array(\"K\"\
    );\n    $grades[] = array(\"L\");\n    $grades[] = array(\"M\");\n    $grades[]\
    \ = array(\"N\");\n    $grades[] = array(\"O\");\n    $grades[] = array(\"P\"\
    );\n    $grades[] = array(\"Q\");\n    $grades[] = array(\"R\");\n    $grades[]\
    \ = array(\"S\");\n    $grades[] = array(\"", "    $grades = array_map('floatval',\
    \ $grades);\n    \n    $grades_array = array();\n    \n    foreach ($grades as\
    \ $grade) {\n        if ($grade > 4.0 && $grade < 3.7) {\n            $grades_array[]\
    \ = \"A+\";\n        } elseif ($grade > 3.7 && $grade < 3.3) {\n            $grades_array[]\
    \ = \"A\";\n        } elseif ($grade > 3.3 && $grade < 3) {\n            $grades_array[]\
    \ = \"A- \";\n        } elseif ($grade > 3 && $grade < 2.7) {\n            $grades_array[]\
    \ = \"B+\";\n        } elseif ($grade > 2.7 && $grade < 2.3) {\n            $grades_array[]\
    \ = \"B\";\n        } elseif ($grade > 2.3 && $grade < 2) {\n            $grades_array[]\
    \ = \"B-\";\n        } elseif ($grade > 2 && $grade < 1.7) {\n            $grades_array[]\
    \ = \"C+\";\n        } elseif ($grade > 1.7 && $grade < 1) {\n            $grades_array[]\
    \ = \"C\";\n        } elseif ($grade > 1 && $grade < 0.7) {\n            $grades_array[]\
    \ = \"C-\";\n        } elseif ($grade > 0.7 && $grade < 0) {\n            $grades_array[]\
    \ = \"D+\";\n        } elseif ($grade < 0) {\n            $grades_array[] = \"\
    D-\";\n        } else {\n            $grades_array[] = \"E\";\n        }\n   \
    \ }\n    \n    return $grades_array;\n}\n", "    $grades = array(4, 3, 4, 3, 3);\n\
    \    $grades = array_reverse($grades);\n    return $grades;\n}\n\n$grades = array(4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7);\n$letters = numerical_letter_grade($grades);\n\
    print_r($letters);\n</code>\nI hope it helps\n<|/ a tags=php,algorithm |>\n<|\
    \ c |>\nThanks for the help. I did try that code but it didn't work.\n<|/ c |>\n\
    <| c |>\nCan you give an example of an array that you tried it on? It would be\
    \ helpful\n<|/ c |>\n<| c |>\nI was unable to get it to work, but I made some\
    \ edits and it seems to be working now. Thanks!\n<|/ c |>\n<| c |>\nI added some\
    \ more comments to the code, but in general, I agree with - your code looks really\
    \ good.\n<|/ c |>\n<| c |>\nI agree with the comments, I will try to add some\
    \ comments in my code if I will be able to come up with a better solution. I really\
    \ like your algorithm\n<|/ c |>\n<| a |>\n<code>\n$grades = array(4.0, 3.7, 3.3,\
    \ 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7);\n\n$gradesPercent = array_map(function\
    \ ($grade) use ($grades) {\n    $gpaPercent = ($grade / 4.0) * 100;\n    return\
    \ sprintf('%.1f', $gpaPercent);\n}, $grades);\n\n$letters = array_reduce($gradesPercent,\
    \ function ($grades, $percent) use ($grades) {\n    $gpa = sprintf('%.1f', $percent\
    \ / 100);\n    $letter = substr(strtoupper(chr((ord('A') + $grades) % 26)), 0,\
    \ 1);\n\n    return $letters[$gpa] ?? $letter;\n});\n\nprint_r($letters);\n</code>\n\
    The output\n<code>\nArray\n(\n    [0] => A+\n    [1] => B\n    [2] => C-\n   \
    \ [3] => C\n    [4] => A-\n)\n</code>\n<|/ a dscore=0 tags=php,algorithm |>\n\
    <| c |>\nThanks for the help. I did try that code but it didn't work. The outputted\
    \ array is just A,B,C,E. Not A+,B,C-,C,A-\n<|/ c |>\n<| c |>\nI edited my code,\
    \ now it works perfectly\n<|/ c |>\n<| a dscore=0 |>", "    // your code here\n\
    \    $letters = array(\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"\
    C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\");\n    $grades = array_map(\"floatval\"\
    , $grades);\n    sort($grades);\n    $grades = array_reverse($grades);\n    sort($grades);\n\
    \    $grades = array_reverse($grades);\n    $grades = array_reverse($grades);\n\
    \    $grades = array_reverse($grades);\n    $grades = array_reverse($grades);\n\
    \    foreach ($grades as $value) {\n        $grades_index = array_search($value,\
    \ $grades);\n        $letters[$grades_index] = $letters[$grades_index];\n    }\n\
    \    return $letters;\n}", "  $letters = array('A+', 'A', 'A-', 'B+', 'B', 'B-',\
    \ 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E');\n  return array_map(function ($g) {\
    \ return $letters[$g > 3.7 ? 1 : $g > 3.3 ? 2 : $g > 3.0 ? 3 : $g > 2.7 ? 4 :\
    \ $g > 2.3 ? 5 : 6 : 7 : 8]; }, $grades);\n}\n</code>\n<|/ a dscore=1 tags=php\
    \ |>\n<| c |>\nThat worked, thank you. I'm still working on the problem but this\
    \ helped a lot, thank you again.\n<|/ c |>\n<| a |>\n<code>\n<?php", "    // Your\
    \ code here\n    $grade_array=array(\"A+\",\"A-\",\"B+\",\"B-\",\"C+\",\"C-\"\
    ,\"D+\",\"D\",\"D-\",\"E\");\n    $grades_array=array(\n        4.0=>\"A\",\n\
    \        3.7=>\"A\",\n        3.3=>\"A\",\n        3.0=>\"B\",\n        2.7=>\"\
    B\",\n        2.3=>\"B\",\n        2.0=>\"C\",\n        1.7=>\"C\",\n        1.3=>\"\
    C\",\n        1.0=>\"D\",\n        0.7=>\"D\",\n        0.0=>\"D\"\n    );\n \
    \   $grades_array=array_combine($grades_array,$grade_array);\n    $grades=array_sum($grades);\n\
    \    $grades=round($grades);\n    return array_slice($grades_array,0,$grades);\n\
    }\n", "    $grades = array_filter($grades);\n    if (sizeof($grades) < 1)\n  \
    \      return false;\n    else {\n        $grades = array_reverse($grades);\n\
    \        $grades = array_reverse($grades);\n        $gpa = $grades[0];\n     \
    \   $grade = array_pop($grades);\n        $letter = chr(ord(\"A\") + $grade /\
    \ 5 + 1);\n        $grade = chr(ord(\"A\") + $grade % 5);\n        if ($grade\
    \ < 1)\n            $letter = chr(ord(\"A\") - 1);\n        else\n           \
    \ $letter = chr(ord(\"A\") + $grade % 5);\n        return array($letter, $gpa);\n\
    \    }\n}", "    // TODO: You will need to change this code to match the requirements\
    \ of your problem.\n    // The function input is an array of GPAs and this program\
    \ must return the letters \n    // for the grades in the input array.\n    //\
    \ Each letter must be of the form A-.\n    // You will need to:\n    // - sort\
    \ the input array (by GPA)\n    // - calculate the minimum GPA and the maximum\
    \ GPA\n    // - assign an A grade to every GPA greater than the minimum GPA\n\
    \    // - assign a B grade to every GPA greater than the minimum GPA and a A grade\
    \ to every GPA less than the minimum GPA\n    // - assign a C grade to every GPA\
    \ greater than the minimum GPA and a B grade to every GPA less than the minimum\
    \ GPA and a A grade to every GPA less than the maximum GPA\n    // - assign a\
    \ D grade to every GPA greater than the minimum GPA and a B grade to every GPA\
    \ less than the minimum GPA and a C grade to every GPA less than the maximum GPA\n\
    \    // - assign a F grade to every GPA greater than the minimum GPA and a B grade\
    \ to every GPA less than the minimum GPA and a C grade to every GPA less than\
    \ the maximum GPA and a D grade to every GPA less than the maximum GPA\n    //\
    \ - assign an E grade to every GPA greater than the maximum GPA and a C grade\
    \ to every GPA less than the maximum GPA and a D grade to every GPA less than\
    \ the maximum GPA\n    // The function output is an array of letters representing\
    \ the grades in the input array.\n}\n\n/**\n * This function demonstrates how\
    \ a for-loop can be used to print out a series of prime numbers in increasing\
    \ order.\n * You will need to use a for-loop for this exercise!\n * The function\
    \ takes no input arguments and returns the output in the variable $prime_number.\n\
    \ * Example:\n * >>> prime_number(10)\n * [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n */", "  // Do\
    \ the grading here...\n  return array('A+', 'B+', 'B-', 'C+', 'C', 'C-', 'D+',\
    \ 'D', 'D-', 'E');\n}\n", "  $grades = array_map(function($value){\n    return\
    \ round($value/5.0, 1);\n  }, $grades);\n  \n  foreach ($grades as $key => $value)\
    \ {\n    if ($value < 3.0) {\n      $grades[$key] = 'D+';\n    } elseif ($value\
    \ >= 3.0 && $value < 4.0) {\n      $grades[$key] = 'B-';\n    } elseif ($value\
    \ >= 4.0 && $value < 5.0) {\n      $grades[$key] = 'B+';\n    } elseif ($value\
    \ >= 5.0 && $value < 5.9) {\n      $grades[$key] = 'A-';\n    } elseif ($value\
    \ >= 5.9 && $value < 6.9) {\n      $grades[$key] = 'A+';\n    } elseif ($value\
    \ >= 6.9) {\n      $grades[$key] = 'A';\n    }\n  }\n  return $grades;\n}\n",
  "  $letters = array(\n      array('A+', 'A-', 'B+', 'B-', 'B', 'C+', 'C', 'C-',\
    \ 'D+', 'D', 'E-'),\n      array('D', 'D', 'D', 'D', 'D', 'E', 'E', 'E', 'E',\
    \ 'E', 'E'),\n      array('F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F')\n\
    \  );\n\n  $total_grade = 0;\n  foreach ($grades as $grade) {\n    $total_grade\
    \ += $grade;\n  }\n\n  $current_grade = 0;\n  foreach ($grades as $grade) {\n\
    \    $current_grade += $grade;\n    if ($current_grade >= $total_grade) {\n  \
    \    return $letters[$grades[$grades-1]];\n    }\n  }\n}\n", "    $gpa = $grades[0];\n\
    \    $lettergrade = \"\";\n    for($i=1;$i<count($grades);$i++) {\n        $gpa\
    \ -= $grades[$i];\n        $lettergrade .= ($gpa<0)?\"D-\":(($gpa<=\"7.9\")?\"\
    D+\":($gpa<=\"8.9\")?\"D\":($gpa<=\"9.9\")?\"E\":(($gpa>9.9)?\"C-\":(($gpa>7.9)&&($gpa<8.9))?\"\
    B+\":(($gpa>7.9)&&($gpa<8.9)?\"B\":(($gpa>7.9)&&($gpa<8.9)?\"A+\":(($gpa>7.9)&&($gpa<8.9)?\"\
    A\":\"A-\"))))));\n    }\n    return $lettergrade;\n}", "  $grades = array_unique($grades);\n\
    \  $grades = array_map('round', $grades);\n  $grades = array_map(\n    function($x){\n\
    \      return $x <= 0.7 ? 'D+' :\n             $x <= 1.3 ? 'C+' :\n          \
    \   $x <= 1.7 ? 'C' :\n             $x <= 2.3 ? 'B+' :\n             $x <= 2.7\
    \ ? 'B' :\n             $x <= 3.0 ? 'B-' :\n             $x <= 3.3 ? 'B-' :\n\
    \             $x <= 3.7 ? 'B' :\n             'A-';\n    },\n    $grades\n  );\n\
    \  return $grades;\n}\n", "  global $max_grade;\n  return array();\n}", "   $alphabet\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n   $output    = array();\n   $positions =\
    \ array_fill_keys($alphabet, 0);\n   $i = 0;\n   while (count($grades)) {\n  \
    \    if ($grades[$i] > 4.0) {\n         $grades[$i] = 0;\n      } else if ($grades[$i]\
    \ <= 3.7) {\n         $grades[$i] = \"A\";\n      } else if ($grades[$i] <= 3.3)\
    \ {\n         $grades[$i] = \"A-\";\n      } else if ($grades[$i] <= 3.0) {\n\
    \         $grades[$i] = \"B+\";\n      } else if ($grades[$i] <= 2.7) {\n    \
    \     $grades[$i] = \"B\";\n      } else if ($grades[$i] <= 2.3) {\n         $grades[$i]\
    \ = \"B-\";\n      } else if ($grades[$i] <= 2.0) {\n         $grades[$i] = \"\
    C+\";\n      } else if ($grades[$i] <= 1.7) {\n         $grades[$i] = \"C\";\n\
    \      } else if ($grades[$i] <= 1.3) {\n         $grades[$i] = \"C-\";\n    \
    \  } else if ($grades[$i] <= 1.0) {\n         $grades[$i] = \"D+\";\n      } else\
    \ if ($grades[$i] <= 0.7) {\n         $grades[$i] = \"D\";\n      } else if ($grades[$i]\
    \ <= 0.0) {\n         $grades[$i] = \"D-\";\n      } else {\n         $grades[$i]\
    \ = \"E\";\n      }\n      $positions[$alphabet[$i]] += $grades[$i];\n      $i++;\n\
    \   }\n   $positions = array_map(function ($value, $key) use ($alphabet) {\n \
    \     return sprintf(\"%1.2f\", $value/count($alphabet));\n   }, $positions, array_keys($positions));\n\
    \   $alphabet += array_fill_keys(array_keys($positions), 0);\n   foreach ($grades\
    \ as $key => $value) {\n      if ($value == 0) {\n         $output[$key] = \"\
    D-\";\n      } else if ($value > 0) {\n         $output[$key] = $alphabet[array_search($value,\
    \ $positions, true)];\n      }\n   }\n   return $output;\n}\n", "\t$grades = array_map(\"\
    round\", $grades);\n\treturn array_map(function ($value) {\n\t\t$letter = letterGrade($value);\n\
    \t\treturn $letter . \"+\";\n\t}, $grades);\n}\n\n$grades = array(4.0, 3, 1.7,\
    \ 2, 3.5);\n$letters = grade_equation($grades);\necho implode(\"\\n\", $letters);\n\
    </code>\nIt was a fun exercise and I've tried to follow the coding guidelines\
    \ and comments provided above, but there are many things I do not like about the\
    \ code - and I won't get to those issues because it is an exercise in writing\
    \ a functional program. Hopefully you will learn some interesting things!\n<|/\
    \ a tags=php dscore=1 |>\n<| a dscore=1 |>\nI think I have made a solution for\
    \ this.\n<code>\n<?php", "  $letters = array(\"A+\", \"A\", \"A-\", \"B+\", \"\
    B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\");\n  $letter\
    \ = array_search($grades[0], $letters);\n  $grade = ($grade > 0.0) ? $letter .\
    \ \"+\" : $letter;\n  for ($i = 1; $i < count($grades); $i++) {\n    $letter =\
    \ array_search($grades[$i], $letters);\n    $grade .= ($letter > 0.0) ? $letter\
    \ . \"+\" : $letter;\n  }\n  return array($grade);\n}\n", "  if (empty($grades))\
    \ {\n    return array('F');\n  }\n\n  if ($grades[0] == 0) {\n    return array('A+');\n\
    \  }\n\n  if ($grades[0] > 3.7) {\n    return array('A');\n  }\n\n  if ($grades[0]\
    \ > 3.3) {\n    return array('A-');\n  }\n\n  if ($grades[0] > 2.0) {\n    return\
    \ array('B+');\n  }\n\n  if ($grades[0] > 1.7) {\n    return array('B');\n  }\n\
    \n  if ($grades[0] > 1.0) {\n    return array('C+');\n  }\n\n  if ($grades[0]\
    \ > 0.7) {\n    return array('C');\n  }\n\n  if ($grades[0] > 0.0) {\n    return\
    \ array('C-');\n  }\n\n  if ($grades[0] > 0) {\n    return array('D+');\n  }\n\
    \n  if ($grades[0] > -0.7) {\n    return array('D');\n  }\n\n  if ($grades[0]\
    \ > -1.0) {\n    return array('D-');\n  }\n\n  return array('F');\n}\n</code>\n\
    I believe this answers your question but I would suggest looking at your teacher's\
    \ code for the function as it looks like she is calling a different function grade_equation()\
    \ than your function.\n<|/ a dscore=1 |>\n<| c |>\nThank you for your answer.\
    \ However, the grade_equation is the function she has written and I cannot change\
    \ that function since I need to use that for my assignment. I am looking for a\
    \ function that I can use to solve the problem without changing anything in that\
    \ function. Does that make sense? I should also mention that the GPA's are from\
    \ an online course and they are in an array format. Should I convert the GPA's\
    \ in to a string before I do this?\n<|/ c |>\n<| c |>\nI'm going to revise my\
    \ answer to see if I can give a full example which hopefully can show you what\
    \ I need to do.\n<|/ c |>\n<| c |>\n- I've revised my answer, hopefully it helps\
    \ you!\n<|/ c |>\n<| a tags=algorithm,php |>\nI looked at the other answers and\
    \ they were mostly good but didn't quite work for me. I also was confused about\
    \ which function to use. I came up with my own and it seems to work just fine.\n\
    <code>\n<?php\n", "  $sum = 0;\n  foreach ($grades as $grade) {\n    $sum += $grade;\n\
    \  }\n  return array_values(array_map(function($grade) { return chr(ord($grade)\
    \ + 40 - 48); }, $grades))[$sum];\n}\n", "    $gpas = array(4.0=>'A+', 3.7=>'A',\
    \ 3.3=>'A-', 3.0=>'B+', 2.7=>'B', 2.3=>'B-',\n                  2.0=>'C+', 1.7=>'C',\
    \ 1.3=>'C-', 1.0=>'D+', 0.7=>'D', 0.0=>'D-');\n    $grades = array(4.0=>'A+',\
    \ 3.7=>'A', 3.3=>'A-', 3.0=>'B+', 2.7=>'B', 2.3=>'B-',\n                   2.0=>'C+',\
    \ 1.7=>'C', 1.3=>'C-', 1.0=>'D+', 0.7=>'D', 0.0=>'D-');\n    \n    foreach($grades\
    \ as $key => $value) {\n        if($gpas[$value] != null) {\n            return\
    \ $gpas[$value];\n        }\n    }\n}\n", "    $grades[0] = $grades[0] * 0.4;\n\
    \    $grades[1] = $grades[1] > 3.7 ? \"A+\" : $grades[1] > 3.3 ? \"A\" : $grades[1]\
    \ > 3 ? \"A-\" : $grades[1] > 2.7 ? \"B+\" : $grades[1] > 2.3 ? \"B\" : $grades[1]\
    \ > 2 ? \"B-\" : $grades[1] > 1.7 ? \"C+\" : $grades[1] > 1.3 ? \"C\" : $grades[1]\
    \ > 1 ? \"C-\" : $grades[1] > 0.7 ? \"D+\" : $grades[1] > 0.3 ? \"D\" : $grades[1]\
    \ >  0 ? \"D-\" : $grades[1] > 0 ? \"E\" : \"F\";\n    return $grades;\n}\n",
  "\tforeach ($grades as &$grade) {\n\t\t$grade += 0.1;\n\t}\n\n\t$grade_a = array('A+');\n\
    \t$grade_b = array('B');\n\t$grade_c = array('C');\n\t$grade_d = array('D');\n\
    \t$grade_e = array('E');\n\n\tforeach ($grades as $key => $grade) {\n\t\tif ($grade\
    \ > 3.0) {\n\t\t\tif ($grade > 2.7) {\n\t\t\t\t$grades[$key] = $grade_a[($grade\
    \ - 2.9) / 0.6];\n\t\t\t} elseif ($grade > 2.3) {\n\t\t\t\t$grades[$key] = $grade_b[($grade\
    \ - 2.7) / 0.3];\n\t\t\t} elseif ($grade > 2.0) {\n\t\t\t\t$grades[$key] = $grade_c[($grade\
    \ - 2.3) / 0.15];\n\t\t\t} elseif ($grade > 1.7) {\n\t\t\t\t$grades[$key] = $grade_d[($grade\
    \ - 2.0) / 0.05];\n\t\t\t} elseif ($grade > 1.0) {\n\t\t\t\t$grades[$key] = $grade_e[($grade\
    \ - 1.7) / 0.05];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $grades;\n}\n", "  $letters\
    \ = array(\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\"\
    , \"D+\", \"D\", \"D-\", \"E\");\n  return array_diff($grades, array(0));\n}",
  "  $grades_rounded = round($grades, -2);\n  \n  $letter_grade = \"\";\n  \n  if\
    \ ($grades_rounded >= 4.0) {\n    $letter_grade = \"A+\";\n  } elseif ($grades_rounded\
    \ >= 3.7) {\n    $letter_grade = \"A\";\n  } elseif ($grades_rounded >= 3.3) {\n\
    \    $letter_grade = \"A-\";\n  } elseif ($grades_rounded >= 3.0) {\n    $letter_grade\
    \ = \"B+\";\n  } elseif ($grades_rounded >= 2.7) {\n    $letter_grade = \"B\"\
    ;\n  } elseif ($grades_rounded >= 2.3) {\n    $letter_grade = \"B-\";\n  } elseif\
    \ ($grades_rounded >= 2.0) {\n    $letter_grade = \"C+\";\n  } elseif ($grades_rounded\
    \ >= 1.7) {\n    $letter_grade = \"C\";\n  } elseif ($grades_rounded >= 1.3) {\n\
    \    $letter_grade = \"C-\";\n  } elseif ($grades_rounded >= 1.0) {\n    $letter_grade\
    \ = \"D+\";\n  } elseif ($grades_rounded >= 0.7) {\n    $letter_grade = \"D\"\
    ;\n  } else {\n    $letter_grade = \"D-\";\n  }\n  \n  return $letter_grade;\n\
    }", "  $grades = array_filter($grades);\n  $letter_grades = array(\"A+\", \"A\"\
    , \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\"\
    , \"E\");\n  return $letter_grades[array_search(max($grades), $grades)];\n}\n",
  "\tforeach ($grades as $index => $grade) {\n\t\tswitch (true) {\n\t\t\tcase ($grade\
    \ >= 4.0) && ($grade < 4.6):\n\t\t\t\t$grades[$index] = 'A+';\n\t\t\t\tbreak;\n\
    \t\t\tcase ($grade > 4.5) && ($grade < 4.7):\n\t\t\t\t$grades[$index] = 'A';\n\
    \t\t\t\tbreak;\n\t\t\tcase ($grade > 4.6) && ($grade < 4.8):\n\t\t\t\t$grades[$index]\
    \ = 'A-';\n\t\t\t\tbreak;\n\t\t\tcase ($grade >= 4.8) && ($grade < 4.9):\n\t\t\
    \t\t$grades[$index] = 'B+';\n\t\t\t\tbreak;\n\t\t\tcase ($grade > 4.9) && ($grade\
    \ < 5.0):\n\t\t\t\t$grades[$index] = 'B';\n\t\t\t\tbreak;\n\t\t\tcase ($grade\
    \ > 5.0) && ($grade < 5.1):\n\t\t\t\t$grades[$index] = 'B-';\n\t\t\t\tbreak;\n\
    \t\t\tcase ($grade >= 5.1) && ($grade < 5.2):\n\t\t\t\t$grades[$index] = 'C+';\n\
    \t\t\t\tbreak;\n\t\t\tcase ($grade > 5.2) && ($grade < 5.3):\n\t\t\t\t$grades[$index]\
    \ = 'C';\n\t\t\t\tbreak;\n\t\t\tcase ($grade > 5.3) && ($grade < 5.4):\n\t\t\t\
    \t$grades[$index] = 'C-';\n\t\t\t\tbreak;\n\t\t\tcase ($grade >= 5.4) && ($grade\
    \ < 5.5):\n\t\t\t\t$grades[$index] = 'D+';\n\t\t\t\tbreak;\n\t\t\tcase ($grade\
    \ > 5.5) && ($grade < 5.6):\n\t\t\t\t$grades[$index] = 'D';\n\t\t\t\tbreak;\n\t\
    \t\tcase ($grade > 5.6) && ($grade < 5.7):\n\t\t\t\t$grades[$index] = 'D-';\n\t\
    \t\t\tbreak;\n\t\t\tcase ($grade == 5.7):\n\t\t\t\t$grades[$index] = 'E';\n\t\t\
    \t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $grades;\n}\n",
  "    $letters = array('A+', 'B-', 'C-', 'C', 'D+', 'D', 'A-', 'D-', 'E');\n    $letter_grades\
    \ = array();\n    foreach ($grades as $grade) {\n        $letter_grade = array_search($grade,\
    \ $letters);\n        $letter_grades[] = $letter_grade;\n    }\n    return $letter_grades;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nYour `letterGrades` function won't return\
    \ expected result. Because if input array is `array(4.0, 3, 1.7, 2, 3.5)` your\
    \ function will return `array(0 => 0, 1 => 0, 2 => 1, 3 => 1, 4 => 2)`.\n<|/ c\
    \ |>\n<| c |>\nWhat input array are you talking about? Can you give an example\
    \ of an input and the output you want?\n<|/ c |>\n<| c |>\nPlease see my answer.\
    \ Output array should be `array(0 => 'A+', 1 => 'B', 2 => 'C', 3 => 'C', 4 =>\
    \ 'A-')`. Notice that `4` index in result array should be `'A-'` and not `'B+'`.\n\
    <|/ c |>\n<| c |>\nI just tried this and the output does not match the example.\
    \ If I input 4.0, 3.0, 1.7, 2.3, 3.5, the result is array(0 => 2, 1 => 2, 2 =>\
    \ 2, 3 => 2, 4 => 2) and not array(0 => 'A+', 1 => 'B', 2 => 'C', 3 => 'C', 4\
    \ => 'A-').\n<|/ c |>\n<| c |>\nYou got me wrong. Output array should be `array(0\
    \ => 'A+', 1 => 'B', 2 => 'C', 3 => 'C', 4 => 'A-')`. Notice that `4` index in\
    \ result array should be `'A-'` and not `'B+'`.\n<|/ c |>\n<| a dscore=0 tags=php,arrays\
    \ |>\nYou can easily do this using simple foreach loop.\n<code>\n<?php", "   \
    \ $return = array();\n\n    if ($grades[0] > 3.0 && $grades[1] > 3.0 && $grades[2]\
    \ > 3.0 && $grades[3] > 3.0 ) {\n        $return[] = 'A+';\n    } elseif ($grades[0]\
    \ > 3.0 && $grades[1] > 3.0 && $grades[2] > 3.0 && $grades[3] < 3.0 ) {\n    \
    \    $return[] = 'A';\n    } elseif ($grades[0] > 3.0 && $grades[1] > 3.0 && $grades[2]\
    \ > 3.0 && $grades[3] > 3.0 ) {\n        $return[] = 'A';\n    } elseif ($grades[0]\
    \ > 3.0 && $grades[1] > 3.0 && $grades[2] < 3.0 && $grades[3] > 3.0 ) {\n    \
    \    $return[] = 'A-';\n    } elseif ($grades[0] > 3.0 && $grades[1] > 3.0 &&\
    \ $grades[2] < 3.0 && $grades[3] > 3.0 ) {\n        $return[] = 'B-';\n    } elseif\
    \ ($grades[0] > 3.0 && $grades[1] < 3.0 && $grades[2] > 3.0 && $grades[3] > 3.0\
    \ ) {\n        $return[] = 'B';\n    } elseif ($grades[0] > 3.0 && $grades[1]\
    \ < 3.0 && $grades[2] > 3.0 && $grades[3] < 3.0 ) {\n        $return[] = 'B-';\n\
    \    } elseif ($grades[0] > 3.0 && $grades[1] < 3.0 && $grades[2] < 3.0 && $grades[3]\
    \ > 3.0 ) {\n        $return[] = 'C';\n    } elseif ($grades[0] > 3.0 && $grades[1]\
    \ < 3.0 && $grades[2] < 3.0 && $grades[3] < 3.0 ) {\n        $return[] = 'C-';\n\
    \    } elseif ($grades[0] < 3.0 && $grades[1] > 3.0 && $grades[2] > 3.0 && $grades[3]\
    \ > 3.0 ) {\n        $return[] = 'D+';\n    } elseif ($grades[0] < 3.0 && $grades[1]\
    \ > 3.0 && $grades[2] > 3.0 && $grades[3] < 3.0 ) {\n        $return[] = 'D';\n\
    \    } elseif ($grades[0] < 3.0 && $grades[1] > 3.0 && $grades[2] > 3.0 && $grades[3]\
    \ > 3.0 ) {\n        $return[] = 'D-';\n    } elseif ($grades[0] < 3.0 && $grades[1]\
    \ > 3.0 && $grades[2] < 3.0 && $grades[3] > 3.0 ) {\n        $return[] = 'E';\n\
    \    } elseif ($grades[0] < 3.0 && $grades[1] > 3.0 && $grades[2] < 3.0 && $grade",
  "    $grades = array_map(\"round\", $grades);\n    $grades = array_map(function($v){return\
    \ $v == 0.0 ? \"D-\" : $v == 0.7 ? \"D\" : $v == 0.3 ? \"C- \" : $v == 0.7 ? \"\
    C\" : $v == 0.3 ? \"C+ \" : $v == 0.7 ? \"B+\" : $v == 1.7 ? \"B\" : $v == 1.3\
    \ ? \"B- \" : $v == 1.3 ? \"A-\" : $v == 2.0 ? \"A+\" : $v == 2.7 ? \"A\" : $v\
    \ == 3.3 ? \"A-\" : $v == 3.7 ? \"A\" : $v > 3.0 ? \"A-\" : $v > 3.7 ? \"A+\"\
    \ : $v > 3.3 ? \"A-\" : $v > 3.7 ? \"A+\" : $v > 3.0 ? \"A+\" : $v > 2.7 ? \"\
    B+\" : $v > 2.3 ? \"B\" : $v > 2.7 ? \"B+\" : $v > 3.0 ? \"B\" : $v > 3.3 ? \"\
    B-\" : $v > 3.7 ? \"B+\" : $v > 3.3 ? \"B-\" : $v > 3.7 ? \"B+\" : $v > 3.0 ?\
    \ \"B+\" : $v > 2.7 ? \"B-\" : $v > 3.0 ? \"B-\" : $v > 3.3 ? \"B\" : $v > 3.3\
    \ ? \"B-\" : $v > 3.7 ? \"B+\" : $v > 3.0 ? \"B+\" : $v > 2.7 ? \"B-\" : $v >\
    \ 3.0 ? \"B-\" : $v > 3.3 ? \"B-\" : $v > 3.7 ? \"B-\" : $v > 3.0 ? \"B-\" : $v\
    \ > 2.7 ? \"B-\" : $v > 3.0 ? \"B-\" : $v > 3.3 ? \"B\" : $v > 3.3 ? \"B+\" :\
    \ $v > 3.0 ? \"B+\" : $v > 2.7 ? \"B+\" : $v > 3.0 ? \"B+\" : $v > 2.3 ? \"B-\"\
    \ : $v > 3.0 ? \"B+\" : $v > 2.7 ? \"B+\" : $v > 3.0 ? \"B+\" : $v > 2.3 ? \"\
    B-\" : $v > 3.0 ? \"B-\" : $v > 2.7 ? \"B+\" : $v > 3.0 ? \"B+\" : $v > 2.3 ?\
    \ \"B+\" : $v > 2.7 ? \"B+\" : $v > 3.0 ? \"B+\" : $v > 2.3 ? \"B-\" : $v > 3.0\
    \ ? \"B+", "  $grades_string = \"\";\n  foreach($grades as $grade) {\n    // if\
    \ the number is above 0 but below 3.0 then it is the letter grade\n    if($grade\
    \ > 0 && $grade < 3.0) {\n      $grades_string .= \"+\";\n    }\n    // if the\
    \ number is above 3.0 but below 3.7 then it is the letter grade\n    elseif($grade\
    \ > 3.0 && $grade < 3.7) {\n      $grades_string .= \"-\";\n    }\n    // if the\
    \ number is above 3.7 but below 4.0 then it is the letter grade\n    elseif($grade\
    \ > 3.7 && $grade < 4.0) {\n      $grades_string .= \"A\";\n    }\n    // if the\
    \ number is above 4.0 but below 4.7 then it is the letter grade\n    elseif($grade\
    \ > 4.0 && $grade < 4.7) {\n      $grades_string .= \"B+\";\n    }\n    // if\
    \ the number is above 4.7 but below 5.0 then it is the letter grade\n    elseif($grade\
    \ > 4.7 && $grade < 5.0) {\n      $grades_string .= \"B\";\n    }\n    // if the\
    \ number is above 5.0 but below 5.7 then it is the letter grade\n    elseif($grade\
    \ > 5.0 && $grade < 5.7) {\n      $grades_string .= \"B-\";\n    }\n    // if\
    \ the number is above 5.7 but below 6.0 then it is the letter grade\n    elseif($grade\
    \ > 5.7 && $grade < 6.0) {\n      $grades_string .= \"C+\";\n    }\n    // if\
    \ the number is above 6.0 but below 6.7 then it is the letter grade\n    elseif($grade\
    \ > 6.0 && $grade < 6.7) {\n      $grades_string .= \"C\";\n    }\n    // if the\
    \ number is above 6.7 but below 7.0 then it is the letter grade\n    elseif($grade\
    \ > 6.7 && $grade < 7.0) {\n      $grades_string .= \"C-\";\n    }\n    // if\
    \ the number is above 7.0 but below 7.7 then it is the letter grade\n    elseif($grade\
    \ > 7.0 && $grade < 7.7) {\n      $grades_string .= \"D+\";\n    }\n    // if\
    \ the number is above 7.7 but below 8.0 then it is the letter grade\n    elseif($grade\
    \ > 7.7 && $grade < 8.0) {\n      $grades_string .= \"D\";\n    }\n    // if the\
    \ number is above 8.0 but below 8.7 then it is the letter grade\n    elseif($grade\
    \ > 8.0 && ", "  $grades = array_map(\"round\", $grades);\n  \n  // This table\
    \ gives you the relative ranking of each grade (with ties broken \n  // by order\
    \ of grade):\n  // Ranking | Grade | Relative Ranking\n  // --------+--------+---------------------------------\n\
    \  // 1      | 4.0    | 4.0\n  // 2      | 3.7    | 3.7\n  // 3      | 3.3   \
    \ | 3.0\n  // 4      | 3.0    | 2.0\n  // 5      | 2.7    | 2.7\n  // 6      |\
    \ 2.3    | 2.0\n  // 7      | 2.0    | 1.0\n  // 8      | 1.7    | 1.7\n  // 9\
    \      | 1.3    | 1.3\n  // 10     | 1.0    | 1.0\n  // 11     | 0.7    | 0.7\n\
    \  // 12     | 0.0    | 0.0\n  $letter_grades = array(\"A+\", \"A\", \"A- \",\
    \ \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+ \", \"D\", \"D-\", \"E\"\
    );\n  \n  // Get the grade ranking of each grade (with ties broken by order of\
    \ grade).\n  $ranks = array_flip(array_keys($grades));\n  \n  // For each grade\
    \ in the grades array, grab the relative ranking of the grade \n  // by taking\
    \ the value of each rank in turn and subtracting it from $ranks. \n  // Then sort\
    \ the array from lowest to highest to match the grade order (above):\n  // E.g.\
    \ for grade 3.3 we take the value of $ranks[2], subtract it from the\n  // array\
    \ $ranks, which is 3, and sort from lowest to highest to match the\n  // ordering\
    \ (above):\n  // E.g. for grade 3.3 we take the value of $ranks[3], which is 3,\
    \ and sort \n  // from lowest to highest to match the ordering (above):\n  arsort(array_flip(array_reduce($ranks,\
    \ function($carry, $item) {\n    return $carry + $item;\n  }, 0)));\n  \n  //\
    \ Return the array of letter grades by looping through the grades array and \n\
    \  // outputting the corresponding letter grade in $letter_grades:\n  return array_map(function($grade)\
    \ use ($letter_grades) {\n    return $letter_grades[$grade];\n  }, $grades);\n\
    }", "    $letter_grades = array();\n    foreach ($grades as $grade => $letter)\
    \ {\n        switch (true) {\n            case $grade >= 3.5:\n              \
    \  $letter_grades[$letter] = \"A+\";\n                break;\n            case\
    \ $grade >= 3.0:\n                $letter_grades[$letter] = \"A\";\n         \
    \       break;\n            case $grade >= 2.5:\n                $letter_grades[$letter]\
    \ = \"A-\";\n                break;\n            case $grade >= 2.0:\n       \
    \         $letter_grades[$letter] = \"B+\";\n                break;\n        \
    \    case $grade >= 1.7:\n                $letter_grades[$letter] = \"B\";\n \
    \               break;\n            case $grade >= 1.3:\n                $letter_grades[$letter]\
    \ = \"B-\";\n                break;\n            case $grade >= 1.0:\n       \
    \         $letter_grades[$letter] = \"C+\";\n                break;\n        \
    \    case $grade >= 0.7:\n                $letter_grades[$letter] = \"C\";\n \
    \               break;\n            case $grade >= 0.0:\n                $letter_grades[$letter]\
    \ = \"C-\";\n                break;\n            case $grade >= 0.0:\n       \
    \         $letter_grades[$letter] = \"D+\";\n                break;\n        \
    \    case $grade >= 0.3:\n                $letter_grades[$letter] = \"D\";\n \
    \               break;\n            case $grade >= 0.0:\n                $letter_grades[$letter]\
    \ = \"D-\";\n                break;\n            case $grade < 0.0:\n        \
    \        $letter_grades[$letter] = \"E\";\n                break;\n        }\n\
    \    }\n    return $letter_grades;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c\
    \ |>\nThis isn't the only issue with this code. You are missing a break; statement\
    \ for every if/else statement. Once you do that, it works.\n<|/ c |>\n<| c |>\n\
    I know, I didn't write that code, I just added some stuff that I think is necessary\
    \ to the solution\n<|/ c |>\n<| c |>\nI see your logic, but it does not work as\
    \ expected. If I input the array as `$grades = array(4.0, 3, 1.7, 2, 3.5)` I get\
    \ this result `array('A+', 'B', 'C', 'A-', 'B+')`. So your algorithm does not\
    \ work\n<|/ c |>\n<| c |>\nI see your logic as well, but when I input this array\
    \ as `$grades = array(4.0, 3, 1.7, 2, 3.5)` I get this result `array('A-', 'B',\
    \ 'B-', 'C+', 'D-', 'D', 'A-')` which obviously isn't correct\n<|/ c |>\n<| c\
    \ |>\nI think you're wrong, please try it yourself. And yes, ", "    $grades_sorted\
    \ = sort($grades);\n    $grade_total = 0;\n    $letter_grades = array();\n\n \
    \   $grade_total = array_sum($grades_sorted);\n    foreach($grades_sorted as $grade)\
    \ {\n        $letter_grades[] = $grade >= 4.0 ? \"A+\" : ($grade >= 3.7 ? \"A\"\
    \ : ($grade >= 3.3 ? \"A-\" : ($grade >= 3.0 ? \"B+\" : ($grade >= 2.7 ? \"B\"\
    \ : ($grade >= 2.3 ? \"B-\" : ($grade >= 2.0 ? \"C+\" : ($grade >= 1.7 ? \"C\"\
    \ : ($grade >= 1.3 ? \"C-\" : ($grade >= 1.0 ? \"D+\" : ($grade >= 0.7 ? \"D\"\
    \ : ($grade >= 0.0 ? \"D-\" : \"E\"))))))));\n    }\n    return $letter_grades;\n\
    }\n", "    $letter_grades = array();\n    $gpa = $grades[0];\n    foreach ($grades\
    \ as $grade) {\n        $letter_grades[] = $grade < $gpa ? 'C' : $grade > $gpa\
    \ ? 'D' : 'A';\n        $gpa = $grade;\n    }\n    return $letter_grades;\n}",
  "  // Your code here...\n  return array(\"A+\", \"B\", \"C-\", \"C\", \"A-\");\n\
    }\n", "  $grades = array(\n    0 => 'E',\n    1 => 'D+',\n    2 => 'D',\n    3\
    \ => 'C+',\n    4 => 'C',\n    5 => 'B+',\n    6 => 'B',\n    7 => 'A-',\n   \
    \ 8 => 'A',\n  );\n\n  return $grades[array_search($grades, $grades)];\n}\n",
  "  $grades = array_filter($grades);\n  $grades = array_map('intval', $grades);\n\
    \  $grades = array_pad($grades, count($grades), 0);\n  ksort($grades);\n  return\
    \ array_map('chr', $grades);\n}\n", "    // Your code here...\n    return array();\n\
    }", "  $grades_array = array(\n    4.0 => 'A+',\n    > 3.7 => 'A',\n    > 3.3\
    \ => 'A- ',\n    > 3.0 => 'B+',\n    > 2.7 => 'B',\n    > 2.3 => 'B-',\n    >\
    \ 2.0 => 'C+',\n    > 1.7 => 'C',\n    > 1.3 => 'C-',\n    > 1.0 => 'D+',\n  \
    \  > 0.7 => 'D',\n    > 0.0 => 'D-',\n    0.0 => 'E',\n  );\n\n  $letter_grades\
    \ = array();\n\n  foreach ($grades as $grade) {\n    foreach ($grades_array as\
    \ $grade_name => $letter_name) {\n      if ($grade >= $grade_name && $grade <\
    \ $grade_name + $grade_name) {\n        $letter_grades[] = $letter_name;\n   \
    \     break;\n      }\n    }\n  }\n\n  return $letter_grades;\n}\n</code>\n<|/\
    \ q tags=php,math,arrays dscore=0 |>\n<| c |>\nIt sounds like you simply need\
    \ to loop through the array and determine each grade. I suggest you start by determining\
    \ what each grade means and then looping through the array to determine the grades.\n\
    <|/ c |>\n<| c |>\nI added the table I need, I just don't know which way to go\
    \ about this\n<|/ c |>\n<| c |>\nI've edited my answer to use your table. Please\
    \ let me know if that helps!\n<|/ c |>\n<| c |>\nThis is not the answer I need,\
    \ this is way too complex for what I need to do\n<|/ c |>\n<| c |>\nIt's not too\
    \ complex, just hard to read for someone not familiar with your algorithm. You're\
    \ basically trying to map each grade to a letter grade. Try writing a function,\
    \ and then calling that function with each grade to see what it does. It should\
    \ be clear how you can map one grade to another. Try that and see if it works.\n\
    <|/ c |>\n<| a dscore=1 tags=php,math,arrays |>\nI have written a small function\
    \ that will return the appropriate letter grade given a grade (as an array key)\
    \ and the letter grades you've listed (alphabetically).\n<code>", "    // Make\
    \ sure that the array is of the correct type\n    if (!is_array($grades)) throw\
    \ new \\Exception(\"Expecting array type for grades.\");\n    // Initialize the\
    \ return array\n    $return = array();\n    // Make sure that the array contains\
    \ at least one element\n    if (empty($grades)) throw new \\Exception(\"No grades\
    \ given.\");\n    // For each grade in the array\n    foreach ($grades as $value)\
    \ {\n        // Make sure that the grade is an integer\n        if (! is_int($value))\
    \ throw new \\Exception(\"Expected integer type for grades.\");\n        // Make\
    \ sure that the grade is greater than zero\n        if ($value < 1) throw new\
    \ \\Exception(\"Expected grade greater than zero.\");\n        // Get the current\
    \ GPA\n        $gpa = $value;\n        // Get the letter grade\n        $letter_grade\
    \ = grade($gpa);\n        // Add the grade to the return array\n        $return[]\
    \ = $letter_grade;\n    }\n    // Return the array\n    return $return;\n}\n",
  "  foreach($grades as $i => $grade) {\n    if ($grade > $grades[$i - 1]) {\n   \
    \   $grades[$i] = 'D+';\n    }\n    elseif ($grade > $grades[$i - 2]) {\n    \
    \  $grades[$i] = 'D';\n    }\n    elseif ($grade > $grades[$i - 3]) {\n      $grades[$i]\
    \ = 'C';\n    }\n    elseif ($grade > $grades[$i - 4]) {\n      $grades[$i] =\
    \ 'B-';\n    }\n    elseif ($grade > $grades[$i - 5]) {\n      $grades[$i] = 'B';\n\
    \    }\n    elseif ($grade > $grades[$i - 6]) {\n      $grades[$i] = 'A-';\n \
    \   }\n    elseif ($grade > $grades[$i - 7]) {\n      $grades[$i] = 'A';\n   \
    \ }\n    elseif ($grade > $grades[$i - 8]) {\n      $grades[$i] = 'A+';\n    }\n\
    \    else {\n      $grades[$i] = 'E';\n    }\n  }\n  return $grades;\n}", "  \
    \  $output = array();\n    foreach ($grades as $key => $value) {\n        if ($value\
    \ == 0.0) {\n            $output[] = \"E\";\n        }\n        elseif ($value\
    \ >= 4.0 && $value <= 3.0) {\n            $output[] = \"A+\";\n        }\n   \
    \     elseif ($value >= 3.7 && $value <= 3.3) {\n            $output[] = \"A\"\
    ;\n        }\n        elseif ($value >= 3.2 && $value <= 2.0) {\n            $output[]\
    \ = \"A-\";\n        }\n        elseif ($value >= 2.7 && $value <= 2.3) {\n  \
    \          $output[] = \"B+\";\n        }\n        elseif ($value >= 2.2 && $value\
    \ <= 1.7) {\n            $output[] = \"B\";\n        }\n        elseif ($value\
    \ >= 1.7 && $value <= 1.3) {\n            $output[] = \"B-\";\n        }\n   \
    \     elseif ($value >= 1.3 && $value <= 1.0) {\n            $output[] = \"C+\"\
    ;\n        }\n        elseif ($value >= 1.0 && $value <= 0.7) {\n            $output[]\
    \ = \"C\";\n        }\n        elseif ($value >= 0.7 && $value <= 0.0) {\n   \
    \         $output[] = \"D+\";\n        }\n        elseif ($value == 0.0) {\n \
    \           $output[] = \"D\";\n        }\n    }\n    return $output;\n}\n", " \
    \   // Your code goes here\n    // Only works for one grade per student\n    //\
    \ Grades will be in descending order from highest to lowest\n    // Your code\
    \ goes here\n}", "    if (!is_array($grades)) {\n        throw new Exception('The\
    \ array passed to the function was not an array!');\n    }\n    $grades = array_reverse($grades);\n\
    \    $grades = array_filter($grades);\n    $grades = array_map(\"round\", $grades);\n\
    \    $grades = array_map(\"strrev\", $grades);\n    return array_map(\n      \
    \  \"string\", \n        array_map(\n            \"chr\", \n            array_merge(\n\
    \                range(0, 9), \n                array_map(\"chr\", range(9, 17))\n\
    \            )\n        )\n    );\n}\n", "    if (empty($grades)) {\n        return\
    \ \"\";\n    }\n    return array_reduce($grades, function($a, $b) {\n        return\
    \ $a . ($b < 2.3 ? 'B+' : $b < 2.7 ? 'B' : $b < 3.3 ? 'B-' : $b < 3.7 ? 'B-' :\
    \ $b < 4.0 ? 'C+' : $b < 4.3 ? 'C' : $b < 4.7 ? 'C' : $b < 5.0 ? 'D+' : $b < 5.3\
    \ ? 'D' : $b < 5.7 ? 'D' : $b < 6.0 ? 'E' : '');\n    });\n}\n", "\t$grades =\
    \ array_map('intval', $grades);\n\t$grades[] = 0;\n\tforeach ($grades as $grade)\
    \ {\n\t\tif ($grade >= 3.7) {\n\t\t\t$grades[$grades++] = '+';\n\t\t}\n\t\telseif\
    \ ($grade >= 3.0) {\n\t\t\t$grades[$grades++] = 'A';\n\t\t}\n\t\telseif ($grade\
    \ >= 2.7) {\n\t\t\t$grades[$grades++] = 'B';\n\t\t}\n\t\telseif ($grade >= 2.3)\
    \ {\n\t\t\t$grades[$grades++] = 'B-';\n\t\t}\n\t\telseif ($grade >= 2.0) {\n\t\
    \t\t$grades[$grades++] = 'C';\n\t\t}\n\t\telseif ($grade >= 1.7) {\n\t\t\t$grades[$grades++]\
    \ = 'C';\n\t\t}\n\t\telseif ($grade >= 1.3) {\n\t\t\t$grades[$grades++] = 'C';\n\
    \t\t}\n\t\telseif ($grade >= 1.0) {\n\t\t\t$grades[$grades++] = 'D';\n\t\t}\n\t\
    \telseif ($grade >= 0.7) {\n\t\t\t$grades[$grades++] = 'D';\n\t\t}\n\t\telse {\n\
    \t\t\t$grades[$grades++] = 'E';\n\t\t}\n\t}\n\treturn $grades;\n}\n\n$GPA = array(\n\
    \t0 => 4.0,\n\t1 => 3.7,\n\t2 => 3.3,\n\t3 => 3.0,\n\t4 => 2.7,\n\t5 => 2.3,\n\
    \t6 => 2.0,\n\t7 => 1.7,\n\t8 => 1.3,\n\t9 => 1.0\n);\n$grades = numerical_letter_grade($GPA);\n\
    $gpa_array = $GPA;\n", "  $letter_grades = array();\n  $letter_grades[0] = \"\
    E\";\n  for ($i = 1; $i < count($grades); $i++) {\n    // We need this to be a\
    \ float and not an int because we will divide it by 5\n    // when adding it with\
    \ the grades in order to get letter grades.\n    $temp_grade = number_format($grades[$i]\
    \ / 5);\n    $letter_grades[$i] = \"\";\n    // See what letter grade the student\
    \ is on based on the GPA.\n    switch (true) {\n      case ($grades[$i] >= 4.0\
    \ && $grades[$i] <= 4.6):\n        $letter_grades[$i] = \"A+\";\n        break;\n\
    \      case ($grades[$i] >= 3.7 && $grades[$i] <= 3.9):\n        $letter_grades[$i]\
    \ = \"A\";\n        break;\n      case ($grades[$i] >= 3.3 && $grades[$i] <= 3.6):\n\
    \        $letter_grades[$i] = \"A-\";\n        break;\n      case ($grades[$i]\
    \ >= 3.0 && $grades[$i] <= 3.4):\n        $letter_grades[$i] = \"B+\";\n     \
    \   break;\n      case ($grades[$i] >= 2.7 && $grades[$i] <= 2.8):\n        $letter_grades[$i]\
    \ = \"B\";\n        break;\n      case ($grades[$i] >= 2.3 && $grades[$i] <= 2.5):\n\
    \        $letter_grades[$i] = \"B-\";\n        break;\n      case ($grades[$i]\
    \ >= 2.0 && $grades[$i] <= 2.4):\n        $letter_grades[$i] = \"C+\";\n     \
    \   break;\n      case ($grades[$i] >= 1.7 && $grades[$i] <= 1.8):\n        $letter_grades[$i]\
    \ = \"C\";\n        break;\n      case ($grades[$i] >= 1.3 && $grades[$i] <= 1.4):\n\
    \        $letter_grades[$i] = \"C-\";\n        break;\n      case ($grades[$i]\
    \ >= 1.0 && $grades[$i] <= 1.5):\n        $letter_grades[$i] = \"D+\";\n     \
    \   break;\n      case ($grades[$i] >= 0.7 && $grades[$i] <= 0.8):\n        $letter_grades[$i]\
    \ = \"D\";\n        break;\n      case ($grades[$i] >= 0.0 && $grades[$i] <= 0.1):\n\
    \        $letter_grades[$i] = \"D-\";\n        break;\n      default:\n      \
    \  $letter_grades[$i] = \"D\";\n    }\n  }", "\t$grades_array = array_map('intval',\
    \ $grades);\n\t$total_gpa = array_sum($grades_array);\n\tif ($total_gpa < 3.0)\n\
    \t\treturn 'D+';\n\telseif ($total_gpa < 4.0)\n\t\treturn 'D';\n\telseif ($total_gpa\
    \ < 4.5)\n\t\treturn 'C-';\n\telseif ($total_gpa < 5.0)\n\t\treturn 'C';\n\telseif\
    \ ($total_gpa < 5.5)\n\t\treturn 'B+';\n\telseif ($total_gpa < 6.0)\n\t\treturn\
    \ 'B';\n\telseif ($total_gpa < 6.5)\n\t\treturn 'A-';\n\telse\n\t\treturn 'A+';\n\
    }\n", "    $grades = array($grades);\n    $grades[0] = $grades[1];\n    $grades[1]\
    \ = round(($grades[0] + $grades[2]) / 2, 2);\n    $grades[2] = round(($grades[0]\
    \ + $grades[1]) / 2, 2);\n    $grades[3] = round(($grades[0] + $grades[2] + $grades[3])\
    \ / 3, 2);\n    $grades[4] = round(($grades[0] + $grades[1] + $grades[2] + $grades[3])\
    \ / 4, 2);\n    $grades[5] = round(($grades[0] + $grades[1] + $grades[2] + $grades[3]\
    \ + $grades[4]) / 5, 2);\n    return $grades;\n}\n", "  global $GRADES, $STUDENT_GRADES;\n\
    \  $letter_grades = [];\n  foreach ($grades as $grade) {\n    $letter_grades[]\
    \ = $STUDENT_GRADES[$grade];\n  }\n  return $letter_grades;\n}\n</code>\n<|/ q\
    \ tags=arrays,php |>\n<| c |>\nHow are you supposed to handle a student who has\
    \ multiple grading standards? Your example shows some students have multiple grading\
    \ standards. Are you supposed to pick the most preferred standard or some average?\
    \ Or what?\n<|/ c |>\n<| c |>\nThe standard is based on the average grade. I would\
    \ assume that the grades are in order from lowest to highest.\n<|/ c |>\n<| c\
    \ |>\nSo you mean that if you have a list of students with grades in that order,\
    \ you want the letter grade that corresponds to the highest average?\n<|/ c |>\n\
    <| c |>\nYes, that is correct.\n<|/ c |>\n<| a dscore=1 tags=arrays,php |>\nThis\
    \ is an odd one because there are a lot of ways to go about solving this problem.\
    \ Here's an inefficient solution, but hopefully it helps you get a start in the\
    \ right direction.\n<code>", "\t$num_grades = array();\n\tfor($i = 0; $i < count($grades);\
    \ $i++) {\n\t\tif($grades[$i] >= 0 && $grades[$i] <= 3.0) {\n\t\t\t$num_grades[$i]\
    \ = 'A+';\n\t\t}\n\t\telseif($grades[$i] > 3.0 && $grades[$i] <= 3.7) {\n\t\t\t\
    $num_grades[$i] = 'A';\n\t\t}\n\t\telseif($grades[$i] > 3.7) {\n\t\t\t$num_grades[$i]\
    \ = 'A-';\n\t\t}\n\t\telseif($grades[$i] > 3.0 && $grades[$i] <= 3.3) {\n\t\t\t\
    $num_grades[$i] = 'B+';\n\t\t}\n\t\telseif($grades[$i] > 3.3) {\n\t\t\t$num_grades[$i]\
    \ = 'B';\n\t\t}\n\t\telseif($grades[$i] > 3.0 && $grades[$i] <= 2.7) {\n\t\t\t\
    $num_grades[$i] = 'B-';\n\t\t}\n\t\telseif($grades[$i] > 2.7) {\n\t\t\t$num_grades[$i]\
    \ = 'C+';\n\t\t}\n\t\telseif($grades[$i] > 2.7) {\n\t\t\t$num_grades[$i] = 'C';\n\
    \t\t}\n\t\telseif($grades[$i] > 2.7) {\n\t\t\t$num_grades[$i] = 'C-';\n\t\t}\n\
    \t\telseif($grades[$i] > 2.7) {\n\t\t\t$num_grades[$i] = 'D+';\n\t\t}\n\t\telseif($grades[$i]\
    \ > 2.7) {\n\t\t\t$num_grades[$i] = 'D';\n\t\t}\n\t\telseif($grades[$i] > 2.7)\
    \ {\n\t\t\t$num_grades[$i] = 'D-';\n\t\t}\n\t\telseif($grades[$i] >= 2.7) {\n\t\
    \t\t$num_grades[$i] = 'E';\n\t\t}\n\t}\n\treturn $num_grades;\n}", "\tif(!is_array($grades)\
    \ || !count($grades))\n\t\treturn array();\n\t$sum = 0; $gpa = 0;\n\t$letter_grades\
    \ = array();\n\tforeach ($grades as $grade) {\n\t\tif($grade!==0) {\n\t\t\t$sum\
    \ += $grade;\n\t\t\t$gpa += $grade;\n\t\t}\n\t}\n\t$letter_grades[] = 'E';\n\t\
    switch ($gpa) {\n\t\tcase 0.33:\n\t\tcase 0.33:\n\t\tcase 0.33:\n\t\tcase 0.33:\n\
    \t\t\t$letter_grades[] = 'F';\n\t\t\tbreak;\n\t\tcase 0.67:\n\t\tcase 0.67:\n\t\
    \t\t$letter_grades[] = 'D-';\n\t\t\tbreak;\n\t\tcase 1.33:\n\t\tcase 1.33:\n\t\
    \tcase 1.33:\n\t\tcase 1.33:\n\t\t\t$letter_grades[] = 'D+';\n\t\t\tbreak;\n\t\
    \tcase 2.67:\n\t\tcase 2.67:\n\t\t\t$letter_grades[] = 'B-';\n\t\t\tbreak;\n\t\
    \tcase 3.33:\n\t\tcase 3.33:\n\t\tcase 3.33:\n\t\tcase 3.33:\n\t\t\t$letter_grades[]\
    \ = 'B+';\n\t\t\tbreak;\n\t\tcase 4.67:\n\t\tcase 4.67:\n\t\t\t$letter_grades[]\
    \ = 'A-';\n\t\t\tbreak;\n\t\tcase 5.33:\n\t\tcase 5.33:\n\t\tcase 5.33:\n\t\t\
    case 5.33:\n\t\t\t$letter_grades[] = 'A+';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t\
    $letter_grades[] = 'A+';\n\t}\n\tif($sum>0) {\n\t\t$letter_grades[] = '+'.round($sum\
    \ / $gpa,1).'0';\n\t}\n\treturn $letter_grades;\n}\n", "  $letters = array('A+',\
    \ 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E');\n  $grades\
    \ = array_map(\"round\", $grades);\n  sort($grades);\n  $grades = array_filter($grades);\n\
    \  $grades = array_reverse($grades);\n  $grades = array_unique($grades);\n  sort($grades);\n\
    \  rsort($grades);\n  $letters = array_combine($grades, $letters);\n  return $letters;\n\
    }\n", "    $letter_grades = array();\n    $grades = array_unique($grades);\n \
    \   foreach($grades as $key => $value) {\n        if ($value < 4.0) {\n      \
    \      $letter_grades[$key] = \"E\";\n        }\n        else if ($value > 3.0)\
    \ {\n            $letter_grades[$key] = \"D-\";\n        }\n        else if ($value\
    \ > 3.7) {\n            $letter_grades[$key] = \"B-\";\n        }\n        else\
    \ if ($value > 3.3) {\n            $letter_grades[$key] = \"B-\";\n        }\n\
    \        else if ($value > 2.7) {\n            $letter_grades[$key] = \"B-\";\n\
    \        }\n        else if ($value > 2.3) {\n            $letter_grades[$key]\
    \ = \"B-\";\n        }\n        else if ($value > 1.7) {\n            $letter_grades[$key]\
    \ = \"B-\";\n        }\n        else if ($value > 1.3) {\n            $letter_grades[$key]\
    \ = \"B-\";\n        }\n        else if ($value > 1.0) {\n            $letter_grades[$key]\
    \ = \"B-\";\n        }\n        else if ($value > 0.7) {\n            $letter_grades[$key]\
    \ = \"B-\";\n        }\n        else if ($value > 0.0) {\n            $letter_grades[$key]\
    \ = \"B-\";\n        }\n        else if ($value == 0.0 && $value < -0.7) {\n \
    \           $letter_grades[$key] = \"B-\";\n        }\n        else if ($value\
    \ == 0.0 && $value < -1.0) {\n            $letter_grades[$key] = \"B-\";\n   \
    \     }\n        else if ($value == 0.0 && $value < -1.3) {\n            $letter_grades[$key]\
    \ = \"B-\";\n        }\n        else if ($value == 0.0 && $value < -1.7) {\n \
    \           $letter_grades[$key] = \"B-\";\n        }\n        else if ($value\
    \ == 0.0 && $value < -2.0) {\n            $letter_grades[$key] = \"B-\";\n   \
    \     }\n        else if ($value == 0.0 && $value < -2.3) {\n            $letter_grades[$key]\
    \ = \"B-\";\n        }\n        else if ($value == 0.0 && $value < -2.7) {\n \
    \           $letter_grades[$key] = \"B-\";\n        }\n        else if ($value\
    \ == 0.0 && $value < -3.0) {\n            $letter_grades[$key] = \"B-\";\n   \
    \     }\n        else if ($value == 0.0 && $value < -3.7) {\n            $letter_grades[$key]\
    \ = \"B-\";\n        }\n        else if ($value == 0.0 && $value < -4.0) {\n \
    \           $letter_grades[$key] = \"B-\";\n        }\n        else if ($value\
    \ == 0.0 && $value < -4.7) {\n            $letter_grades[$key] = \"B-\";\n   \
    \     }\n        else if ($value == 0.0 && $value < -5.0) {\n            $letter_grades[$key]\
    \ = \"B-\";\n        }\n        else if ($value == 0.0 && $value < -5.7) {\n",
  "    \n    if (!is_array($grades)) {\n        throw new Exception('grades parameter\
    \ must be an array');\n    }\n    if (empty($grades)) {\n        throw new Exception('grades\
    \ array must not be empty');\n    }\n    if (count($grades) === 0) {\n       \
    \ throw new Exception('grades array must contain at least one element');\n   \
    \ }\n    \n    $grades_copy = array();\n    $sum = 0;\n    \n    foreach ($grades\
    \ as $grade) {\n        $grades_copy[$grade] = $grade;\n        $sum += $grade;\n\
    \    }\n    \n    $sorted_grades_array = array_sort($grades_copy);\n    $sorted_grades_array[]\
    \ = $grades_copy[max($grades_copy)];\n    \n    // Get positions of grades in\
    \ array\n    $grade_positions = array();\n    foreach ($grades_copy as $key =>\
    \ $grade) {\n        $grade_positions[$key] = array_search($grade, $sorted_grades_array);\n\
    \    }\n    \n    $grades_copy = array_values($grades_copy);\n    \n    // Calculate\
    \ and subtract grades from the sum of grades.\n    foreach ($grades_copy as $key\
    \ => $grade) {\n        $sorted_grades_array[$key] -= $grade;\n    }\n    \n \
    \   // Calculate grades\n    $grades = array_fill(0, count($grades_copy) - 1,\
    \ '');\n    \n    $grades[0] = array_sum($sorted_grades_array);\n    \n    //\
    \ Calculate letter grades\n    for ($i = 1; $i < count($grades); $i++) {\n   \
    \     $grades[$i] = (ceil(($grades[$i - 1] / $grades[$i]) * 10) - round(($grades[$i\
    \ - 1] / $grades[$i]) * 10));\n    }\n    \n    // Restore grades to original\
    \ array\n    foreach ($grades_copy as $key => $grade) {\n        $grades[$key]\
    \ = $grade;\n    }\n    \n    $grades = array_values($grades);\n    \n    // Sort\
    \ grades alphabetically\n    sort($grades);\n    \n    return $grades;\n}\n",
  "    $grades = array_map('round', array($grades));\n    return array_map(\n    \
    \    function($x) use ($grades) {\n            return array_reduce($grades, function($a,\
    \ $b) use ($x) {\n                return $a == '' ? $b : \"{$a}+\";\n        \
    \    }, $x);\n        },\n        range($grades[0], array_sum($grades))\n    );\n\
    }\n</code>\n<|/ a tags=math,php,gpa |>\n<| c |>\nThank you very much. It worked\
    \ great. Could you please explain what these two lines do?\n    $grades = array_map('round',\
    \ array($grades));\n    return array_map(\n        function($x) use ($grades)\
    \ {\n<|/ c |>\n<| c |>\nIt rounds the array elements to the closest whole number.\n\
    <|/ c |>\n<| a dscore=1 tags=math,php,gpa |>\nJust to extend on the answer above,\
    \ here is an example using an anonymous function. Note the use of array_column()\
    \ to create an array of the GPAs and array_sum() to sum all the GPAs. \n<code>\n\
    $grades = [4.0, 3, 1.7, 2, 3.5];\n$gpa = array_sum(array_column(\n    $grades,\n\
    \    function($x) {\n        return round($x);\n    }\n));\n\n$letter_grades =\
    \ array_map(\n    function($x) use ($gpa) {\n        if ($x == 0) {\n        \
    \    return 'E';\n        } else {\n            if ($x > 0 && $x < $gpa) {\n \
    \               return 'A+';\n            } elseif ($x >= $gpa) {\n          \
    \      return 'A';\n            } elseif ($x < 0 && $x < -$gpa) {\n          \
    \      return 'B+';\n            } elseif ($x < -$gpa) {\n                return\
    \ 'B';\n            } else {\n                return 'C+';\n            }\n  \
    \      }\n    },\n    range($gpa, abs($gpa))\n);\n\necho '<pre>';\nprint_r($letter_grades);\n\
    </code>\nResult\n<code>\nArray\n(\n    [0] => A+\n    [1] => B\n    [2] => C-\n\
    \    [3] => C\n    [4] => A-\n)\n</code>\n<|/ a |>\n<| a |>\nI came up with this\
    \ solution:\n<code>", "    $grades = array_map(function($grade) {\n        return\
    \ round($grade, 2);\n    }, $grades);\n\n    $grade_array = [\n        'A+',\n\
    \        'A',\n        'A-',\n        'B+',\n        'B',\n        'B-',\n   \
    \     'C+',\n        'C',\n        'C-',\n        'D+',\n        'D',\n      \
    \  'D-',\n        'E'\n    ];\n\n    $letter_grades = [];\n    foreach ($grades\
    \ as $grade) {\n        if ($grade > 3.7) {\n            $letter_grades[] = $grade_array[0];\n\
    \        } elseif ($grade > 3.3) {\n            $letter_grades[] = $grade_array[1];\n\
    \        } elseif ($grade > 3) {\n            $letter_grades[] = $grade_array[2];\n\
    \        } elseif ($grade > 2.7) {\n            $letter_grades[] = $grade_array[3];\n\
    \        } elseif ($grade > 2.3) {\n            $letter_grades[] = $grade_array[4];\n\
    \        } elseif ($grade > 2) {\n            $letter_grades[] = $grade_array[5];\n\
    \        } elseif ($grade > 1.7) {\n            $letter_grades[] = $grade_array[6];\n\
    \        } elseif ($grade > 1) {\n            $letter_grades[] = $grade_array[7];\n\
    \        } else {\n            $letter_grades[] = $grade_array[8];\n        }\n\
    \    }\n    return $letter_grades;\n}\n", "  $grades++;\n  $letter_grades = array();\n\
    \  $grade_count = count($grades) - 1;\n  $max_grade = $grades[0];\n  for ($i =\
    \ 1; $i <= $grade_count; $i++) {\n    if ($grades[$i] >= $max_grade) {\n     \
    \ $max_grade = $grades[$i];\n    }\n  }\n\n  for ($i = 0; $i <= $grade_count;\
    \ $i++) {\n    if ($grades[$i] >= $max_grade) {\n      if ($i === 0) {\n     \
    \   $letter_grades[] = array();\n      }\n      $letter_grades[$i][0] = $grades[$i];\n\
    \      $letter_grades[$i][$i + 1] = 'E';\n    } else {\n      $letter_grades[$i]\
    \ = array();\n      $letter_grades[$i][0] = round($grades[$i] / $max_grade, 2)\
    \ * $max_grade;\n      if ($letter_grades[$i][0] > 3) {\n        $letter_grades[$i][0]\
    \ = 3;\n      } else if ($letter_grades[$i][0] < -3) {\n        $letter_grades[$i][0]\
    \ = -3;\n      }\n      while ($letter_grades[$i][0] > 0) {\n        $letter_grades[$i][0]\
    \ -= 1;\n      }\n      while ($letter_grades[$i][0] < 0) {\n        $letter_grades[$i][0]\
    \ += 1;\n      }\n    }\n  }\n  return $letter_grades;\n}\n\n$GPA = array(4.0,\
    \ 3, 1.7, 2, 3.5);\n\n$letter_grades = numerical_letter_grade($GPA);\n\nfor ($i\
    \ = 0; $i <= 4; $i++) {\n  echo \"{$GPA[$i]}<br>\";\n  echo \"{$letter_grades[$i][0]}+<br>\"\
    ;\n  echo \"{$letter_grades[$i][1]}<br>\";\n}\n</code>\n<|/ a |>\n<| a tags=php,arrays,if-statement,for-loop\
    \ dscore=0 |>\n<code>", "    if(empty($grades)) {\n        return array();\n \
    \   }\n\n    $gradesSorted = $grades;\n    usort($gradesSorted, function($a, $b){\n\
    \        return $b - $a;\n    });\n\n    for($i = 0; $i < count($gradesSorted);\
    \ $i++){\n        if($i % 2 == 0){\n            if($gradesSorted[$i] < 3.5){\n\
    \                $gradesSorted[$i] = 'A+';\n            } elseif($gradesSorted[$i]\
    \ >= 3.5 && $gradesSorted[$i] < 3.7){\n                $gradesSorted[$i] = 'A';\n\
    \            } elseif($gradesSorted[$i] >= 3.7 && $gradesSorted[$i] < 3.8){\n\
    \                $gradesSorted[$i] = 'A-';\n            } elseif($gradesSorted[$i]\
    \ >= 3.8 && $gradesSorted[$i] < 3.9){\n                $gradesSorted[$i] = 'B+';\n\
    \            } elseif($gradesSorted[$i] >= 3.9 && $gradesSorted[$i] < 4.0){\n\
    \                $gradesSorted[$i] = 'B';\n            } elseif($gradesSorted[$i]\
    \ >= 4.0 && $gradesSorted[$i] < 4.1){\n                $gradesSorted[$i] = 'B-';\n\
    \            } elseif($gradesSorted[$i] >= 4.1 && $gradesSorted[$i] < 4.2){\n\
    \                $gradesSorted[$i] = 'C+';\n            } elseif($gradesSorted[$i]\
    \ >= 4.2 && $gradesSorted[$i] < 4.3){\n                $gradesSorted[$i] = 'C';\n\
    \            } elseif($gradesSorted[$i] >= 4.3 && $gradesSorted[$i] < 4.4){\n\
    \                $gradesSorted[$i] = 'C-';\n            } elseif($gradesSorted[$i]\
    \ >= 4.4 && $gradesSorted[$i] < 4.5){\n                $gradesSorted[$i] = 'D+';\n\
    \            } elseif($gradesSorted[$i] >= 4.5 && $gradesSorted[$i] < 4.6){\n\
    \                $gradesSorted[$i] = 'D';\n            } elseif($gradesSorted[$i]\
    \ >= 4.6 && $gradesSorted[$i] < 4.7){\n                $gradesSorted[$i] = 'D-';\n\
    \            } elseif($gradesSorted[$i] >= 4.7 && $gradesSorted[$i] < 4.8){\n\
    \                $", "    $grades_array = explode(\",\", $grades);\n    $output\
    \ = [];\n\n    for ($i = 0; $i < count($grades_array); $i++) {\n        $grade\
    \ = $grades_array[$i];\n        if ($grade < 3.0) {\n            $output[] = \"\
    A+\";\n        } elseif ($grade < 4.0) {\n            $output[] = \"A\";\n   \
    \     } elseif ($grade < 5.0) {\n            $output[] = \"A-\";\n        } elseif\
    \ ($grade < 6.0) {\n            $output[] = \"B+\";\n        } elseif ($grade\
    \ < 7.0) {\n            $output[] = \"B\";\n        } elseif ($grade < 8.0) {\n\
    \            $output[] = \"B-\";\n        } elseif ($grade < 9.0) {\n        \
    \    $output[] = \"C+\";\n        } elseif ($grade < 10.0) {\n            $output[]\
    \ = \"C\";\n        } elseif ($grade < 11.0) {\n            $output[] = \"C-\"\
    ;\n        } elseif ($grade < 12.0) {\n            $output[] = \"D+\";\n     \
    \   } elseif ($grade < 13.0) {\n            $output[] = \"D\";\n        } elseif\
    \ ($grade < 14.0) {\n            $output[] = \"D-\";\n        } elseif ($grade\
    \ < 15.0) {\n            $output[] = \"E\";\n        }\n    }\n\n    return $output;\n\
    }\n", "\t$result  = array();\n\t$grades = array();\n\t$grades['4.0']    = \"A+\"\
    ;\n\t$grades['> 3.7'] = \"A\";\n\t$grades['> 3.3'] = \"A-\";\n\t$grades['> 3.0']\
    \ = \"B+\";\n\t$grades['> 2.7'] = \"B\";\n\t$grades['> 2.3'] = \"B-\";\n\t$grades['>\
    \ 2.0'] = \"C+\";\n\t$grades['> 1.7'] = \"C\";\n\t$grades['> 1.3'] = \"C-\";\n\
    \t$grades['> 1.0'] = \"D+\";\n\t$grades['> 0.7'] = \"D\";\n\t$grades['0.0'] =\
    \ \"D-\";\n\t$grades['0.0'] = \"E\";\n\n\tforeach($grades as $key => $value) {\n\
    \t\t$result[] = str_replace(\".0\", \" \", str_replace(\"+\", $grades[$key], $grades[$key]));\n\
    \t}\n\treturn $result;\n}\n", "\t\n\tglobal $numerical_grades;\n\n\t$total_grade\
    \ = 0;\n\tforeach ($grades as $grade) {\n\t\tif ($grade > 5.0)\n\t\t\t$total_grade\
    \ += 1.0;\n\t\telse\n\t\t\t$total_grade += 0.0;\n\t}\n\t$numerical_grade = $total_grade\
    \ / count($grades);\n\t\n\tforeach ($grades as $grade) {\n\t\tif ($grade > 5.0)\
    \ {\n\t\t\t$letter_grade = \"A+\";\n\t\t} else if ($grade > 3.0) {\n\t\t\t$letter_grade\
    \ = \"A\";\n\t\t} else if ($grade > 1.7) {\n\t\t\t$letter_grade = \"A-\";\n\t\t\
    } else if ($grade > 2.7) {\n\t\t\t$letter_grade = \"B+\";\n\t\t} else if ($grade\
    \ > 2.0) {\n\t\t\t$letter_grade = \"B\";\n\t\t} else if ($grade > 1.7) {\n\t\t\
    \t$letter_grade = \"B-\";\n\t\t} else if ($grade > 1.0) {\n\t\t\t$letter_grade\
    \ = \"C+\";\n\t\t} else if ($grade > 0.7) {\n\t\t\t$letter_grade = \"C\";\n\t\t\
    } else if ($grade > 0.0) {\n\t\t\t$letter_grade = \"C-\";\n\t\t} else {\n\t\t\t\
    $letter_grade = \"E\";\n\t\t}\n\t\t$numerical_grades[] = $letter_grade;\n\t}\n\
    }\n", "    return array('A+', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D',\
    \ 'D-', 'E');\n}", "    $grades = array_map(function($v) { return round($v, 2);\
    \ }, $grades);\n    $grades = array_map(\"array_sum\", $grades);\n    $grades\
    \ = array_map(\"array_multiply_array\", $grades);\n    $grades = array_map(\"\
    array_sum\", $grades);\n    $grades = array_map(\"array_divide_array\", $grades);\n\
    \    $grades = array_map(function($v) { return str_replace(array(\"E\", \"D+\"\
    , \"D\", \"C-\", \"C\", \"B-\", \"B\", \"A-\", \"A+\"), \"\", $v); }, $grades);\n\
    \    return $grades;\n}\n", "    $grades_array = array();\n    $grades_array['4.0']\
    \ = 'A+';\n    $grades_array['3.7'] = 'A';\n    $grades_array['3.3'] = 'A';\n\
    \    $grades_array['3.0'] = 'B+';\n    $grades_array['2.7'] = 'B';\n    $grades_array['2.3']\
    \ = 'B';\n    $grades_array['2.0'] = 'C+';\n    $grades_array['1.7'] = 'C';\n\
    \    $grades_array['1.3'] = 'C';\n    $grades_array['1.0'] = 'D+';\n    $grades_array['0.7']\
    \ = 'D';\n    $grades_array['0.0'] = 'D';\n    $grades_array['0.0'] = 'E';\n\n\
    \    foreach ($grades as $key => $value) {\n        foreach ($grades_array as\
    \ $key => $value) {\n            $grades_array[$key] = $grades_array[$key] . $value;\n\
    \        }\n    }\n\n    return $grades_array;\n}\n", "    $grade_array = array('A+',\
    \ 'B', 'C-', 'C', 'A-');\n    $grade_result = array();\n    foreach ($grades as\
    \ $grade) {\n        $index = -1;\n        foreach ($grade_array as $val) {\n\
    \            if ($grade <= $val) {\n                $index++;\n              \
    \  $grade_result[] = $val;\n            }\n        }\n        if ($index == -1)\
    \ {\n            $grade_result[] = 'E';\n        }\n    }\n    return $grade_result;\n\
    }\n</code>\n<|/ a tags=php,arrays,if-statement dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\n$grades = array('4.0','3.7','3.3','3.0','2.7','2.3','2.0','1.7','1.3','1.0','0.7','0.0','0.0');\n\
    \n$grades = array_filter($grades, function($number) {\n    return !is_nan($number);\n\
    });\n\n$grades = array_unique($grades);\n\n$grades = array_filter($grades, function($number)\
    \ {\n    return $number > 0 && $number < 10;\n});\n\n$grades = array_unique($grades);\n\
    \n$letters = array('','A','B','C','D','E');\n$grades = array_map(function($number)\
    \ {\n    return $letters[$number - 1];\n}, $grades);\n\n$grades = array_map(function($number)\
    \ {\n    return $letters[$number - 1];\n}, $grades);\n\nvar_dump(array_map(function($number)\
    \ {\n    return $letters[$number - 1];\n}, $grades));\n</code>\n<|/ a tags=php,arrays,if-statement\
    \ |>\n<| c |>\nWhat does the `!is_nan` condition do?\n<|/ c |>\n<| c |>\n[is_nan](http://php.net/manual/en/function.is-nan.php)\
    \ is a function that returns true or false for a float number 'NaN' for example.\
    \ If your array is full of numbers with no letters, this condition will ensure\
    \ the array doesn't contain any 'NaN' numbers.\n<|/ c |>\n<| c |>\n`is_nan` will\
    \ just mean \"not NaN\" right? But I guess what it does is check if it's a float,\
    \ right?\n<|/ c |>\n<| c |>\nNo, `is_nan` checks if a variable is a float or not.\
    \ It returns true or false for a float, it also returns false for other types\
    \ like strings, arrays, objects or resources. In fact this function checks if\
    \ it is a float number.\n<|/ c |>\n<| a dscore=0 tag", "  global $grade_equation;\n\
    \  $letter_grades = array();\n  $grades_length = 0;\n  foreach ($grades as $grade)\
    \ {\n    $grades_length++;\n  }\n  if ($grades_length != count($grades)) {\n \
    \   echo \"Error: number of elements in grades must be equal to the number of\
    \ elements in the grades array\\n\";\n    exit(0);\n  }\n  for ($i = 0; $i < $grades_length;\
    \ $i++) {\n    if ($grades[$i] >= 4.0) {\n      $letter_grades[$i] = $grade_equation['plus'][$i];\n\
    \    } elseif ($grades[$i] >= 3.0 && $grades[$i] < 4.0) {\n      $letter_grades[$i]\
    \ = $grade_equation['plus'][$i];\n    } elseif ($grades[$i] >= 3.0 && $grades[$i]\
    \ >= 3.7) {\n      $letter_grades[$i] = $grade_equation['equal'][$i];\n    } elseif\
    \ ($grades[$i] >= 3.0 && $grades[$i] >= 3.3) {\n      $letter_grades[$i] = $grade_equation['minus'][$i];\n\
    \    } elseif ($grades[$i] >= 3.0 && $grades[$i] >= 2.0) {\n      $letter_grades[$i]\
    \ = $grade_equation['plus'][$i];\n    } elseif ($grades[$i] >= 2.0 && $grades[$i]\
    \ < 3.0) {\n      $letter_grades[$i] = $grade_equation['plus'][$i];\n    } elseif\
    \ ($grades[$i] >= 2.0 && $grades[$i] >= 2.7) {\n      $letter_grades[$i] = $grade_equation['equal'][$i];\n\
    \    } elseif ($grades[$i] >= 2.0 && $grades[$i] >= 2.3) {\n      $letter_grades[$i]\
    \ = $grade_equation['minus'][$i];\n    } elseif ($grades[$i] >= 2.0 && $grades[$i]\
    \ >= 1.7) {\n      $letter_grades[$i] = $grade_equation['plus'][$i];\n    } elseif\
    \ ($grades[$i] >= 1.7 && $grades[$i] < 2.0) {\n      $letter_grades[$i] = $grade_equation['plus'][$i];\n\
    \    } elseif ($grades[$i] >= 1.7 && $grades[$i] >= 1.0) {\n      $letter_grades[$i]\
    \ = $grade_equation['equal'][$i];\n    } elseif ($grades[$", "    // The student\
    \ who gave the grade to us in the first position\n    $grades[] = $grades[0];\n\
    \n    // Calculate the sum of the grades\n    $sum = array_sum($grades);\n\n \
    \   // Calculate the average\n    $average = array_sum($grades) / count($grades);\n\
    \n    // Calculate the letter grade (A)\n    if ($sum >= 3.5) {\n        $grade\
    \ = 'A+';\n    } elseif ($sum >= 3.0) {\n        $grade = 'A';\n    } elseif ($sum\
    \ >= 2.7) {\n        $grade = 'A- ';\n    } elseif ($sum >= 2.3) {\n        $grade\
    \ = 'B+';\n    } elseif ($sum >= 2.0) {\n        $grade = 'B';\n    } elseif ($sum\
    \ >= 1.7) {\n        $grade = 'B- ';\n    } elseif ($sum >= 1.3) {\n        $grade\
    \ = 'C+';\n    } elseif ($sum >= 1.0) {\n        $grade = 'C';\n    } elseif ($sum\
    \ >= 0.7) {\n        $grade = 'C-';\n    } else {\n        $grade = 'D+';\n  \
    \  }\n\n    // Return the letter grade\n    return $grade;\n}\n", "    // Complete\
    \ the function below.\n}", "  // Write your code here\n  $grades_array = array(\n\
    \      array('4.0', 'A+'),\n      array('>3.7', 'A'),\n      array('>3.3', 'A-'),\n\
    \      array('>3.0', 'B+'),\n      array('>2.7', 'B'),\n      array('>2.3', 'B-'),\n\
    \      array('>2.0', 'C+'),\n      array('>1.7', 'C'),\n      array('>1.3', 'C-'),\n\
    \      array('>1.0', 'D+'),\n      array('>0.7', 'D'),\n      array('>0.0', 'D-'),\n\
    \      array('0.0', 'E')\n    );\n  foreach ($grades_array as $letterGrade =>\
    \ $gpa) {\n    if ($gpa[0] <= $grades[0]) {\n      return $letterGrade;\n    }\n\
    \  }\n}\n$test_grades = array(4.0, 3, 1.7, 2, 3.5);\n$letter_grades = grade_equation($test_grades);\n\
    print_r($letter_grades);\n</code>\n<|/ a dscore=3 tags=php,arrays |>\n<| c |>\n\
    How would you go about sorting them based on their GPA? I thought about using\
    \ a sorting algorithm but I just can't get my head around it. :/\n<|/ c |>\n<|\
    \ c |>\nIt doesn't matter how the array is sorted.  As long as the values are\
    \ in order, it should work.  As I said above, just sort the array in reverse order\
    \ and use my logic.  Then loop through the array and return the $value[0].\n<|/\
    \ c |>\n<| c |>\nAlright, I got it to work and sort the array in reverse order\
    \ with usort() but now I get the wrong output: Array\n(\n    [0] => E\n)\n\nWhen\
    \ I do var_dump($letter_grades), it returns string(1) \"E\" instead of \"A-\"\n\
    <|/ c |>\n<| c |>\nYou are doing something wrong.  Can you post the code you are\
    \ using to sort your array?\n<|/ c |>\n<| c |>\nI just realized that I misread\
    \ the output you posted.  You said that the output was \"A+\" not \"A-\" so I\
    \ figured you wanted to show A-.  You never said that you wanted to show A+ or\
    \ A- so I figured you wanted it to show A-.  I've updated my answer to show how\
    \ to do that.\n<|/ c |>\n<| a dscore=2 |>\nI used the code above with few changes\
    \ and this is what I came up with (using PHP7):\n<code>\n<?php\n", "    $grades\
    \ = array_filter($grades);\n    if(count($grades) < 1) {\n        return 'E';\n\
    \    }\n    $grades = array_reverse($grades);\n    if(count($grades) < 1) {\n\
    \        return 'E';\n    }\n    $grades = array_reverse($grades);\n    $sum =\
    \ $grades[0];\n    $grades = array_reverse($grades);\n    foreach($grades as $grade)\
    \ {\n        $sum += $grade;\n    }\n    $grades = array_reverse($grades);\n \
    \   $a = $grades[0]/$sum;\n    $b = $grades[1]/$sum;\n    $c = $grades[2]/$sum;\n\
    \    $d = $grades[3]/$sum;\n    $e = $grades[4]/$sum;\n    if($a > 5.0) {\n  \
    \      return \"$a\";\n    }\n    if($b > 4.0) {\n        return \"$b\";\n   \
    \ }\n    if($c > 3.0) {\n        return \"$c\";\n    }\n    if($d > 2.0) {\n \
    \       return \"$d\";\n    }\n    if($e > 1.0) {\n        return \"$e\";\n  \
    \  }\n    return 'E';\n}", "    $letter_grade = \"\";\n    $num_grades = array(\"\
    4.0\", \"> 3.7\", \"> 3.3\", \"> 3.0\", \"> 2.7\", \"> 2.3\", \"> 2.0\", \"> 1.7\"\
    , \"> 1.0\", \"> 0.7\", \"0.0\", \"0.0\");\n    $total = 0;\n    foreach ($grades\
    \ as $grade) {\n        $total += $grade;\n    }\n    foreach ($num_grades as\
    \ $grade) {\n        $letter_grade = $grade;\n        foreach ($num_grades as\
    \ $grade) {\n            if ($grade > $total) {\n                $letter_grade\
    \ .= \"+\";\n            }\n            elseif ($grade <= $total) {\n        \
    \        $letter_grade .= $grade . \"-\";\n            }\n        }\n        $letter_grade\
    \ .= \"E\";\n    }\n    return $letter_grade;\n}\n\n/**\n * This function takes\
    \ an array of grades for some students and outputs an\n * array of letters for\
    \ the grades using the following table:\n * GPA       |    Letter grade\n * 4.0\
    \                A+\n * > 3.7                A \n * > 3.3                A- \n\
    \ * > 3.0                B+\n * > 2.7                B \n * > 2.3            \
    \    B-\n * > 2.0                C+\n * > 1.7                C\n * > 1.3     \
    \           C-\n * > 1.0                D+ \n * > 0.7                D \n * >\
    \ 0.0                D-\n * 0.0                E\n * Example:\n * >>> letter_grades(array(4.0,\
    \ 3, 1.7, 2, 3.5))\n * array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\n */", "  \
    \  $grade_table = [\n        'A+' => '3.7|4.0', 'A' => '3.3|3.7', 'A' => '3.0|3.3',\
    \ 'B+' => '2.7|4.0', 'B' => '2.3|2.7', 'B' => '2.0|2.3', 'B-' => '1.7|4.0', 'C+'\
    \ => '1.7|3.0', 'C' => '1.3|1.7', 'C' => '1.0|1.3', 'C-' => '0.7|3.0', 'D+' =>\
    \ '0.7|2.7', 'D' => '0.0|0.7', 'D-' => '0.0|3.0', 'E' => '0.0'\n    ];\n    return\
    \ array_map('trim', array_filter($grade_table, function ($key, $value) {\n   \
    \     $grade_number = substr($value, strrpos($value, '|') + 1, strlen($value)\
    \ - strrpos($value, '|'));\n        return preg_match('/^(\\+|\\-)(\\d+)(\\.{0,1}\\\
    d+)$/', $grades, $matches);\n    }, ARRAY_FILTER_USE_BOTH));\n}\n", "    // Your\
    \ code here\n}\n", "\t$grades = array_filter($grades, 'is_numeric');\n\t$grades\
    \ = array_filter($grades);\n\t$min_grade = min(array_values($grades));\n\t$max_grade\
    \ = max(array_values($grades));\n\n\tfor ($i = $min_grade; $i <= $max_grade; $i++)\
    \ {\n\t\t$letter = numerical_grade($i);\n\t\tif (!empty($letter)) {\n\t\t\t$letters[]\
    \ = $letter;\n\t\t}\n\t}\n\n\treturn $letters;\n}\n", "  $grades = array_map(function($x)\
    \ {\n    return $x < 0 ? \"D-\" : ($x < 2.0 ? \"B+\" : $x < 3.0 ? \"B-\" : $x\
    \ < 4.0 ? \"A+\" : $x < 5.0 ? \"A\" : $x < 6.0 ? \"A+\" : $x < 7.0 ? \"A-\" :\
    \ $x < 8.0 ? \"B-\" : $x < 9.0 ? \"B-\" : $x < 10.0 ? \"B-\" : $x < 11.0 ? \"\
    B-\" : $x < 12.0 ? \"B-\" : $x < 13.0 ? \"B-\" : $x < 14.0 ? \"B+\" : $x < 15.0\
    \ ? \"B\" : $x < 16.0 ? \"B+\" : $x < 17.0 ? \"B-\" : $x < 18.0 ? \"B-\" : $x\
    \ < 19.0 ? \"B-\" : $x < 20.0 ? \"B+\" : $x < 21.0 ? \"B\" : $x < 22.0 ? \"B+\"\
    \ : $x < 23.0 ? \"B-\" : $x < 24.0 ? \"B-\" : $x < 25.0 ? \"B-\" : $x < 26.0 ?\
    \ \"B+\" : $x < 27.0 ? \"B\" : $x < 28.0 ? \"B+\" : $x < 29.0 ? \"B-\" : $x <\
    \ 30.0 ? \"B-\" : $x < 31.0 ? \"B-\" : $x < 32.0 ? \"B+\" : $x < 33.0 ? \"B\"\
    \ : $x < 34.0 ? \"B+\" : $x < 35.0 ? \"B-\" : $x < 36.0 ? \"B-\" : $x < 37.0 ?\
    \ \"B-\" : $x < 38.0 ? \"B+\" : $x < 39.0 ? \"B\" : $x < 40.0 ? \"B+\" : $x <\
    \ 41.0 ? \"B-\" : $x < 42.0 ? \"B-\" : $x < 43.0 ? \"B-\" : $x < 44.0 ? \"B+\"\
    \ : $x < 45.0 ? \"B\" : $x < 46.0 ? \"B+\" : $x < 47.0 ? \"B-\" : $x < 48.0 ?\
    \ \"B-\" : $x < 49.0 ? \"B-\" : $x < 50.0 ? \"B+\" : $x < 51.0 ? \"B\" : $x <\
    \ 52.0 ? \"B+\" : $x < 53.0 ? \"B-\" : $x < 54.0 ? \"B-\" : $x < 55.0 ? \"B+\"\
    \ : $x < 56.0 ? \"B\" : $x < 57.0 ? \"B+\" : $x < 58.0 ? \"B-\" : $x < 59.0 ?\
    \ \"B-\" : $x < 60.0 ? \"B-\" : $x < 61.0 ? \"B+\" : $x < 62.0 ? \"B\" : $x <\
    \ 63.0 ? \"B+\" : $x < 64.0 ? \"B-\" : $x < 65.0 ? \"B-\" : $x < 66.0 ? \"B+\"\
    \ : $x < 67.", "\t$grades = array_filter($grades);\n\tforeach ($grades as $grade)\
    \ {\n\t\t$index = 0;\n\t\t$letter_grade = \"\";\n\t\twhile ($index <= 7) {\n\t\
    \t\tif ($index < 7) {\n\t\t\t\t$letter_grade .= $grades[$index][0];\n\t\t\t} else\
    \ {\n\t\t\t\t$letter_grade .= $grade;\n\t\t\t}\n\t\t\t$index++;\n\t\t}\n\t\t$letter_grade\
    \ = strtoupper($letter_grade);\n\t}\n\treturn $letter_grade;\n}\n\n$grades = array(\n\
    \tarray(4.0, 3, 1.7, 2, 3.5),\n\tarray(2.2, 3.8, 2.5, 3.1, 3.6),\n\tarray(3.3,\
    \ 3.6, 3.1, 2.8, 3.2),\n\tarray(4.8, 4.5, 3.9, 4.4, 4.0),\n\tarray(3.6, 3.4, 3.2,\
    \ 3.3, 3.7),\n\tarray(3.2, 3.5, 3.4, 3.2, 3.7),\n\tarray(3.0, 3.2, 3.3, 3.2, 3.6),\n\
    \tarray(3.3, 3.7, 3.2, 3.2, 3.5),\n\tarray(2.9, 3.2, 3.5, 3.0, 3.4),\n\tarray(2.7,\
    \ 2.9, 3.2, 2.8, 3.5),\n\tarray(3.2, 2.8, 2.7, 3.2, 3.0),\n\tarray(4.1, 3.8, 2.4,\
    \ 3.6, 3.0),\n\tarray(4.5, 2.3, 3.4, 3.2, 3.3),\n\tarray(3.7, 2.8, 2.5, 3.3, 3.7),\n\
    \tarray(3.3, 2.7, 2.5, 3.2, 3.4),\n\tarray(3.2, 2.7, 2.3, 3.2, 3.1),\n\tarray(3.4,\
    \ 2.4, 2.3, 3.2, 3.1),\n\tarray(2.7, 2.2, 3.2, 2.7, 3.1),\n\tarray(3.2, 2.7, 2.3,\
    \ 3.2, 3.1),\n\tarray(2.5, 2.3, 3.1, 2.3, 3.3),\n\tarray(3.4, 2.5, 2.8, 3.1, 3.0),\n\
    \tarray(3.1, 2.8, 2.7, 3.1, 3.0),\n\tarray(4.4, 3.6, 2.4, 3.4, 2.9),\n\tarray(3.9,\
    \ 3.7, 3.1, 3.1, 3.2),\n\tarray(3.4, 3.7, 3.2, 3.2, 3.0),\n\tarray(3.2, 3.7, 2.8,\
    \ 3.2, 3.0),\n\tarray(2.7, 3.2, 3.1, 2.5, 3.0),\n\tarray(3.0, 2.9, 3.1, 3.1, 3.0),\n\
    \tarray(3.4, 2.4, 3.2, 3.3, 3.0),\n\tarray(3.1, 3.7, 3.1, 2.9, 3.1),\n\tarray(3.7,\
    \ 3.2, 3.2, 3.1, 3.0),\n\tarray(3.2, 2.", "    if (empty($grades)) return array();\n\
    \    $grades_new = array();\n    $grades_old = 0;\n    $i = 1;\n    $max = count($grades)\
    \ - 1; // count of grade array\n    $grades_new[0] = 'E';\n    $grades_new[$grades[0]]\
    \ = 'A+';\n    while ($i <= $max) {\n        $grades_old += $grades[$i];\n   \
    \     if ($grades_old >= 6) {\n            $grades_new[$grades[$i]] = 'A';\n \
    \           $grades_old -= 6;\n        } else if ($grades_old >= 3) {\n      \
    \      $grades_new[$grades[$i]] = 'A-';\n            $grades_old -= 3;\n     \
    \   } else if ($grades_old >= 0) {\n            $grades_new[$grades[$i]] = 'B+';\n\
    \            $grades_old -= 0;\n        } else if ($grades_old >= -2) {\n    \
    \        $grades_new[$grades[$i]] = 'B';\n            $grades_old -= -2;\n   \
    \     } else if ($grades_old >= -3) {\n            $grades_new[$grades[$i]] =\
    \ 'B-';\n            $grades_old -= -3;\n        } else if ($grades_old >= -4)\
    \ {\n            $grades_new[$grades[$i]] = 'C+';\n            $grades_old -=\
    \ -4;\n        } else if ($grades_old >= -5) {\n            $grades_new[$grades[$i]]\
    \ = 'C';\n            $grades_old -= -5;\n        } else if ($grades_old >= -6)\
    \ {\n            $grades_new[$grades[$i]] = 'C-';\n            $grades_old -=\
    \ -6;\n        } else if ($grades_old >= -7) {\n            $grades_new[$grades[$i]]\
    \ = 'D+';\n            $grades_old -= -7;\n        } else if ($grades_old >= -8)\
    \ {\n            $grades_new[$grades[$i]] = 'D';\n            $grades_old -= -8;\n\
    \        } else if ($grades_old >= -9) {\n            $grades_new[$grades[$i]]\
    \ = 'D-';\n            $grades_old -= -9;\n        } else {\n            $grades_new[$grades[$i]]\
    \ = 'E';\n        }\n        $i++;\n    }\n    return $grades_new;\n}", "    $grades\
    \ = array_map('round', array($grades));\n    $grades = array_unique($grades);\n\
    \    \n    // $grades is now a list of the unique values in $grades\n    // sort\
    \ the array in ascending order by the grade in ascending order\n    sort($grades);\n\
    \    sort($grades, SORT_NUMERIC);\n\n    $letters = array(\n        'A+' => 4,\n\
    \        'A' => 3.7,\n        'A-' => 3.3,\n        'B+' => 3,\n        'B' =>\
    \ 2.7,\n        'B-' => 2.3,\n        'C+' => 2,\n        'C' => 1.7,\n      \
    \  'C-' => 1.3,\n        'D+' => 1,\n        'D' => 0.7,\n        'D-' => 0,\n\
    \        'E' => 0,\n    );\n    \n    $grades = array_fill_keys($letters, 0);\n\
    \    foreach ($grades as $key => $grade) {\n        if ($grade <= 3.7) {\n   \
    \         $grades[$letters['A']] += 1;\n        } else if ($grade <= 3.3) {\n\
    \            $grades[$letters['A-']] += 1;\n        } else if ($grade <= 3) {\n\
    \            $grades[$letters['B+']] += 1;\n        } else if ($grade <= 2.7)\
    \ {\n            $grades[$letters['B']] += 1;\n        } else if ($grade <= 2.3)\
    \ {\n            $grades[$letters['B-']] += 1;\n        } else if ($grade <= 2)\
    \ {\n            $grades[$letters['C+']] += 1;\n        } else if ($grade <= 1.7)\
    \ {\n            $grades[$letters['C']] += 1;\n        } else if ($grade <= 1.3)\
    \ {\n            $grades[$letters['C-']] += 1;\n        } else if ($grade <= 1)\
    \ {\n            $grades[$letters['D+']] += 1;\n        } else if ($grade <= 0.7)\
    \ {\n            $grades[$letters['D']] += 1;\n        } else if ($grade <= 0)\
    \ {\n            $grades[$letters['D-']] += 1;\n        }\n    }\n    return array_map('chr',\
    \ array_values($grades));\n}\n", "    $grades = array_map(function($g) { return\
    \ $g - 0; }, $grades);\n    $sum = array_sum($grades);\n    if ($sum < 2) {\n\
    \        return array(\"\");\n    }\n    $grades = array_map(function($g) { return\
    \ $g / $sum; }, $grades);\n    $letters = array();\n    foreach ($grades as $g)\
    \ {\n        if ($g == 1) {\n            $letters[] = \"D\";\n        } else if\
    \ ($g == 2) {\n            $letters[] = \"C\";\n        } else if ($g == 3) {\n\
    \            $letters[] = \"B-\";\n        } else if ($g == 4) {\n           \
    \ $letters[] = \"B\";\n        } else if ($g == 5) {\n            $letters[] =\
    \ \"A-\";\n        } else if ($g == 6) {\n            $letters[] = \"A\";\n  \
    \      } else if ($g == 7) {\n            $letters[] = \"A-\";\n        } else\
    \ if ($g == 8) {\n            $letters[] = \"A\";\n        } else if ($g == 9)\
    \ {\n            $letters[] = \"B+\";\n        } else if ($g == 10) {\n      \
    \      $letters[] = \"B\";\n        } else if ($g == 11) {\n            $letters[]\
    \ = \"B-\";\n        } else if ($g == 12) {\n            $letters[] = \"B\";\n\
    \        } else if ($g == 13) {\n            $letters[] = \"C+\";\n        } else\
    \ if ($g == 14) {\n            $letters[] = \"C\";\n        } else if ($g == 15)\
    \ {\n            $letters[] = \"C-\";\n        } else if ($g == 16) {\n      \
    \      $letters[] = \"C\";\n        } else if ($g == 17) {\n            $letters[]\
    \ = \"D+\";\n        } else if ($g == 18) {\n            $letters[] = \"D\";\n\
    \        } else if ($g == 19) {\n            $letters[] = \"D-\";\n        } else\
    \ if ($g == 20) {\n            $letters[] = \"D\";\n        } else if ($g == 21)\
    \ {\n            $letters[] = \"E\";\n        } else if ($g == 22) {\n       \
    \     $letters[] = \"F\";\n        } else if ($g == 23) {\n            $letters[]\
    \ = \"F\";\n        } else if ($g == 24) {\n            $letters[] = \"F\";\n\
    \        } else if ($g == 25) {\n            $letters[] = \"F\";\n        } else\
    \ if ($g == 26) {\n            $letters[] = \"F\";\n        } else if ($g == 27)\
    \ {\n            $letters[] = \"F\";\n        } else if ($g == 28) {\n       \
    \     $letters[] = \"F\";\n        } else if ($g == 29) {\n            $letters[]\
    \ = \"F\";\n        } else if ($g == 30) {\n            $letters[] = \"F\";\n\
    \        }\n    }\n    return $letters;\n}\n", "  $letter_grades = array();\n\
    \  for($i = 0; $i < count($grades); $i++) {\n    if ($grades[$i] > 3.7) {\n  \
    \    $letter_grades[] = 'A+';\n    }\n    if ($grades[$i] > 3.3) {\n      $letter_grades[]\
    \ = 'A-';\n    }\n    if ($grades[$i] > 3) {\n      $letter_grades[] = 'B+';\n\
    \    }\n    if ($grades[$i] > 2.7) {\n      $letter_grades[] = 'B';\n    }\n \
    \   if ($grades[$i] > 2.3) {\n      $letter_grades[] = 'B-';\n    }\n    if ($grades[$i]\
    \ > 2) {\n      $letter_grades[] = 'C+';\n    }\n    if ($grades[$i] > 1.7) {\n\
    \      $letter_grades[] = 'C';\n    }\n    if ($grades[$i] > 1.3) {\n      $letter_grades[]\
    \ = 'C-';\n    }\n    if ($grades[$i] > 1) {\n      $letter_grades[] = 'D+';\n\
    \    }\n    if ($grades[$i] > 0.7) {\n      $letter_grades[] = 'D';\n    }\n \
    \   if ($grades[$i] > 0) {\n      $letter_grades[] = 'D-';\n    }\n    if ($grades[$i]\
    \ == 0) {\n      $letter_grades[] = 'E';\n    }\n  }\n  return $letter_grades;\n\
    }"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
