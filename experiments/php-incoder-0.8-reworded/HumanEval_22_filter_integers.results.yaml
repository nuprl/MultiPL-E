language: php
name: HumanEval_22_filter_integers
results:
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $results = array();\n    foreach ($values as $i => $value) {\n      \
    \  if (is_int($value)) {\n            $results[] = $value;\n        }\n    }\n\
    \    return $results;\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  $values = array_filter($values, function($value) {\n    return is_int($value);\n\
    \  });\n  return $values;\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7f8wxpa5.php:20\n\
    Stack trace:\n#0 /tmp/tmp7f8wxpa5.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp7f8wxpa5.php\
    \ on line 20\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    if (!is_array($values)) return $values;\n\n    $values = array_filter($values,\
    \ 'is_numeric');\n\n    // Remove empty values\n    $values = array_filter($values);\n\
    \n    // Remove values less than zero\n    $values = array_filter($values, function($value)\
    \ {\n        return $value >= 0;\n    });\n\n    return $values;\n}\n\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfcj01gn.php:29\n\
    Stack trace:\n#0 /tmp/tmphfcj01gn.php(33): test()\n#1 {main}\n  thrown in /tmp/tmphfcj01gn.php\
    \ on line 29\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter(array_map('intval', $values), 'is_int');\n}\n\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_b0ghgy.php:17\n\
    Stack trace:\n#0 /tmp/tmpa_b0ghgy.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpa_b0ghgy.php\
    \ on line 17\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  return array_filter($values, function ($value) {\n    return is_integer($value);\n\
    \  });\n}\n</code>\n<|/ a |>\n<| a |>\nI have found a very nice solution:\n<code>\n\
    <?php\n\nclass StringValidator {\n\n    private $maxValue = null;\n\n    public\
    \ function __construct($maxValue) {\n        $this->maxValue = $maxValue;\n  \
    \  }\n\n    public function isAcceptable($string) {\n        if ($string != ''\
    \ && $string != false && $string != null && $string != null && $this->maxValue\
    \ != null && $string > $this->maxValue) {\n            return false;\n       \
    \ }\n        return true;\n    }\n\n}\n\n$validator = new StringValidator('100');\n\
    \nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp7_zh97j2.php
    on line 12

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter($values, function ($value) {\n        return is_integer($value);\n\
    \    });\n}\n\n/**\n * Returns a list of keys from the given multidimensional\
    \ array\n */\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfmg4cgu6.php:22\n\
    Stack trace:\n#0 /tmp/tmpfmg4cgu6.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpfmg4cgu6.php\
    \ on line 22\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n\t$integer_values = array();\n\tforeach ($values as $value) {\n\t\tif (is_numeric($value))\
    \ {\n\t\t\t$integer_values[] = $value;\n\t\t}\n\t}\n\treturn $integer_values;\n\
    }\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpunqz_wdo.php:23\n\
    Stack trace:\n#0 /tmp/tmpunqz_wdo.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpunqz_wdo.php\
    \ on line 23\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  return array_filter($values, function($value) {\n    return is_int($value);\n\
    \  });\n}\n\n/**\n * Filter an array of booleans.\n * If the array has at least\
    \ one value other than false and true, return it\n * Otherwise, return an empty\
    \ array\n *\n * @param array $values\n * @return array\n */\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj11rp5ic.php:27\n\
    Stack trace:\n#0 /tmp/tmpj11rp5ic.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpj11rp5ic.php\
    \ on line 27\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter($values, 'is_int');\n}\n</code>\nThis works for any\
    \ type of data including arrays and associative arrays or even nested arrays.\n\
    <|/ a dscore=5 tags=php,arrays,filtering |>\n<| c |>\nYes, this is perfect! It\
    \ would be great to have a more universal solution than this. But maybe I should\
    \ just rethink my code...\n<|/ c |>\n<| c |>\nIt's not universal, because it requires\
    \ that you know the type of data you're working with and therefore what function\
    \ you might use to filter the data. `is_int` will filter out most numeric data\
    \ types and `is_string` will filter out any kind of string data. The two conditions\
    \ might be combined with `is_numeric` but that will also filter out `bool`, `null`\
    \ and anything else that is not `numeric`. To make this truly universal you would\
    \ need an additional function that would tell you the type of a variable or value.\
    \ This is why I suggested implementing a class that extends `ArrayObject` and\
    \ implements the magic methods `__set` and `__get`.\n<|/ c |>\n<| c |>\nThis solution\
    \ is great when you need to filter an array of objects. I was looking for this\
    \ exact same thing - filtering an array of integers only. Thanks!\n<|/ c |>\n\
    <| c |>\nThis should be the accepted answer. Very clean and elegant solution.\n\
    <|/ c |>\n<| c |>\nIt's a very clean solution. Thanks. I combined it with array_values()\
    \ to reset the keys. `return array_values(array_filter($values, 'is_int'));`\n\
    <|/ c |>\n<| a tags=php,arrays,filtering |>\nHere's a solution that works for\
    \ any data type - it's somewhat complicated to use ArrayObject because it requires\
    \ defining magic methods to enable its use in objects.\n<code>\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpv31xojkm.php
    on line 10

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $ints = array_filter($values, function($value) {\n        return !is_string($value)\
    \ && (is_integer($value) || is_float($value));\n    });\n    return count($ints)\
    \ ? $ints : array(0);\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzwca01yz.php:19\n\
    Stack trace:\n#0 /tmp/tmpzwca01yz.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpzwca01yz.php\
    \ on line 19\n"
  timestamp: 1660028270
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $filtered = array();\n    foreach ($values as $value) {\n        if (is_int($value))\
    \ {\n            $filtered[] = $value;\n        }\n    }\n    return $filtered;\n\
    }\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    if (is_array($values)) {\n        $keys = array_keys($values);\n    \
    \    $length = count($values);\n        $filtered = array();\n        foreach\
    \ ($keys as $key) {\n            if (is_int($key)) {\n                $filtered[]\
    \ = $values[$key];\n            }\n        }\n        return $filtered;\n    }\n\
    \    return $values;\n}\n</code>\n<|/ a |>\n<| a |>\nI use the following function:\n\
    <code>\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpqy71nh0n.php
    on line 21

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $filtered = array();\n\n    foreach ($values as $key => $value) {\n \
    \       if (is_int($value)) {\n            $filtered[$key] = $value;\n       \
    \ }\n    }\n\n    return $filtered;\n}\n\nfunction candidate(...$args) {\n   \
    \ return filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphvtsdoic.php:25\n\
    Stack trace:\n#0 /tmp/tmphvtsdoic.php(29): test()\n#1 {main}\n  thrown in /tmp/tmphvtsdoic.php\
    \ on line 25\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  return array_filter(\n    $values,\n    function ($value) {\n      return\
    \ is_int($value);\n    },\n    ARRAY_FILTER_USE_BOTH\n  );\n}\n</code>\nIn PHP\
    \ you can only filter out array values, not remove them. That's why you get an\
    \ empty array after removing the last two elements from the array\n<|/ a |>\n\
    <| c |>\nOh, yeah, you are correct, I just tested it and it works as intended.\
    \ Still not sure why array_filter behaves differently than my function though...\n\
    <|/ c |>\n<| c |>\nThe function doesn't behave differently, because you use array_filter\
    \ wrong. Read the documentation https://secure.php.net/manual/en/function.array-filter.php\n\
    <|/ c |>\n<| c |>\nI read that documentation but couldn't really understand how\
    \ to use it for this specific case. As you said, array_filter removes any item\
    \ that matches a condition and returns a new array. That's exactly what I want\
    \ to do. How is my function not correct?\n<|/ c |>\n<| c |>\nWhen you remove an\
    \ element from an array with unset($array[index]) it's also removed from all other\
    \ elements of $array\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpsxiwbzj6.php
    on line 16

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  return array_filter($values, function($value) {\n    return is_integer($value);\n\
    \  });\n}\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuzu2_8rz.php:18\n\
    Stack trace:\n#0 /tmp/tmpuzu2_8rz.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpuzu2_8rz.php\
    \ on line 18\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n\treturn array_filter($values, function($value) {\n\t\treturn is_int($value);\n\
    \t});\n}\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuu0rdgpr.php:18\n\
    Stack trace:\n#0 /tmp/tmpuu0rdgpr.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpuu0rdgpr.php\
    \ on line 18\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    foreach ($values as $v) {\n        if (is_int($v)) {\n            $result[]\
    \ = $v;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $result in /tmp/tmp9inl7u4y.php on line 13\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9inl7u4y.php:21\nStack\
    \ trace:\n#0 /tmp/tmp9inl7u4y.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9inl7u4y.php\
    \ on line 21\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $ret = [];\n    foreach ($values as $value) {\n        if (is_int($value))\
    \ {\n            $ret[] = $value;\n        }\n    }\n    return $ret;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI like the idea, but unfortunately my arrays are too\
    \ large (~1000+ elements) and I have no idea how long it will take to process.\
    \ I just wanted to give a heads up to the people that said a for loop is the only\
    \ way for this problem. +1 anyway\n<|/ c |>\n<| c |>\nYou can do it with looping,\
    \ just use `foreach` instead of `for` loop.  But yes, if you have large data set,\
    \ it won't be feasible to do it without breaking out every element\n<|/ c |>\n\
    <| c |>\nYeah I meant looping through them by for or foreach is what I wanted\
    \ to do. Just wanted to be sure I wasn't missing something.\n<|/ c |>\n<| a tags=arrays,php,search\
    \ |>\nThe best way to do that is with foreach.\n<code>\n<?php\n\n$array = [\n\
    \    \"hello\",\n    \"hello world\",\n    \"hello\",\n    \"hello\",\n    \"\
    hello world\"\n];\n\n$needle = \"hello\";\n\n$found = array();\n\nforeach($array\
    \ as $value) {\n    if(strpos($value, $needle) !== false) {\n        $found[]\
    \ = $value;\n    }\n}\n\nprint_r($found);\n\nfunction candidate(...$args) {\n\
    \    return filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpjs7d4k8k.php
    on line 16

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter(\n        $values,\n        function($value) {\n\
    \            return is_int($value);\n        }\n    );\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp88lhpxdf.php:22\n\
    Stack trace:\n#0 /tmp/tmp88lhpxdf.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp88lhpxdf.php\
    \ on line 22\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter(\n        $values,\n        function($value) {\n\
    \            return is_int($value);\n        }\n    );\n}\n\n/**\n * Given an\
    \ array of any phpthon values remove any nulls and strings\n * >>> filter_null_strings(array(\"\
    a\", 3.14, null, \"b\", null, \"c\", null, array()))\n * array(1, 3.14, null,\
    \ 2, null, 3, null)\n */\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdvv_2kc3.php:27\n\
    Stack trace:\n#0 /tmp/tmpdvv_2kc3.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpdvv_2kc3.php\
    \ on line 27\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  if ($values === null) return $values;\n  $result = array();\n  foreach\
    \ ($values as $value) {\n    if (is_string($value) && !is_numeric($value)) {\n\
    \      $result[] = $value;\n    } else if (is_array($value)) {\n      $result\
    \ = array_merge($result, filter_integers($value));\n    } else {\n      $result[]\
    \ = $value;\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=4 tags=arrays,multidimensional-array,php\
    \ |>\n<| c |>\nthis does not work if some array value contains commas.\n<|/ c\
    \ |>\n<| c |>\nHow about using array_walk_recursive. https://php.net/manual/en/function.array-walk-recursive.php\n\
    <|/ c |>\n<| a tags=arrays,multidimensional-array,php |>\nFor php versions < 5.6,\
    \ you can do the following:\n<code>\n$newArray = array();\nforeach ($array1 as\
    \ $k => $v) {\n    $newArray[$k] = is_array($v) ? array_filter($v) : $v;\n}\n\
    </code>\n<|/ a dscore=3 |>\n<| c |>\nThis is not working and doesn't work for\
    \ me. Using PHP 5.6.15 and I get an empty array.\n<|/ c |>\n<| c |>\nThis also\
    \ does not work if some array value contains commas\n<|/ c |>\n<| c |>\nI think\
    \ you should update your answer to use `is_array($v)` instead of `is_string($v)`\
    \ because your original answer doesn't work for multi-dimensional arrays with\
    \ commas.\n<|/ c |>\n<| a |>\nPHP 7 has array_column\n<code>\n$newArray = array_column($array1,\
    \ null);\n</code>\n<|/ a tags=arrays,multidimensional-array,php dscore=2 |>\n\
    <| a tags=arrays,multidimensional-array,php |>\n<code>\n<?php\n$array1 = array(\n\
    \    'id' => array(\n        '0' => 'value',\n        '1' => 'value',\n      \
    \  '2' => 'value',\n        '3' => 'value',\n        '4' => 'value',\n    ),\n\
    \    'name' => array(\n        '0' => 'value',\n        '1' => 'value',\n    \
    \    '2' => 'value',\n        '3' => 'value',\n        '4' => 'value',\n    ),\n\
    );\n$newArray = array();\nforeach ($array1 as $k => $v) {\n    if(is_array($v))\n\
    \        $newArray[$k] = array_filter($v);\n    else\n        $newArray[$k] =\
    \ $v;\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpsft6f41o.php
    on line 21

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter(\n        $values,\n        function ($value) {\n\
    \            return is_integer($value);\n        }\n    );\n}\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgublioo6.php:21\n\
    Stack trace:\n#0 /tmp/tmpgublioo6.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgublioo6.php\
    \ on line 21\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n\treturn array_filter($values, function ($value) {\n\t\treturn is_integer($value);\n\
    \t});\n}\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp06imyenm.php:18\n\
    Stack trace:\n#0 /tmp/tmp06imyenm.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp06imyenm.php\
    \ on line 18\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n\tif (!is_array($values)) return $values;\n\t$integer = array_filter(array_map('intval',\
    \ $values));\n\treturn $integer;\n}\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp33pozuor.php:18\n\
    Stack trace:\n#0 /tmp/tmp33pozuor.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp33pozuor.php\
    \ on line 18\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    foreach ($values as &$value) {\n        if (is_integer($value)) {\n \
    \           $value = $value;\n        } else {\n            $value = null;\n \
    \       }\n    }\n    return $values;\n}\n\nfunction candidate(...$args) {\n \
    \   return filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsnzva7wj.php:24\n\
    Stack trace:\n#0 /tmp/tmpsnzva7wj.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpsnzva7wj.php\
    \ on line 24\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter(\n        $values,\n        function ($value) {\n\
    \            return is_int($value);\n        }\n    );\n}\n</code>\n<|/ a tags=php,filtering,arrays\
    \ |>\n<| c |>\nThis is much cleaner than the others\n<|/ c |>\n<| c |>\nBut it\
    \ doesn't work when an array element has more than one numeric value in it (e.g\
    \ `filter_integers([1, 2.3, 5])` returns `array(2.3)` which is wrong)\n<|/ c |>\n\
    <| a tags=php,filtering,arrays |>\nYou can use array_filter with a callback function\
    \ that checks whether each element is an integer or not:\n<code>\n$array = [1,\
    \ \"abc\", true, \"1\"];\n$filtered = array_filter($array, function ($v) { return\
    \ is_int($v); });\n</code>\nDemo: https://3v4l.org/7WpIe\n<|/ a dscore=5 |>\n\
    <| c |>\nThis also works with multi-dimensional arrays, e.g. `array_filter($array,\
    \ function ($v) { return is_int($v); });`\n<|/ c |>\n<| c |>\nThis should be the\
    \ top answer.\n<|/ c |>\n<| a dscore=5 |>\nThe most elegant way is probably to\
    \ use array_walk which takes a callback that gets called on each element of the\
    \ array:\n<code>\narray_walk($array, \"filter_integers\");\n</code>\n<|/ a tags=php,filtering,arrays\
    \ |>\n<| c |>\nThis is the only one that worked for me when trying to filter out\
    \ a null value from an array in PHP. array_filter() wouldn't work, array_walk()\
    \ was the only thing that worked after searching for hours.\n<|/ c |>\n<| c |>\n\
    If you only need to filter the elements that are integers, you can just use array_filter().\
    \ Example: `array_filter($array, function($v) { return is_int($v); });`\n<|/ c\
    \ |>\n<| c |>\nIf you want an associative array, but want to remove certain keys,\
    \ you can use the example below: `array_filter($array, \"filter_integers\", ARRAY_FILTER_USE_BOTH);`\n\
    <|/ c |>\n<| a tags=php,filtering,arrays dscore=5 |>\nIf you need to filter out\
    \ non-numeric elements, use array_filter() instead of array_walk().\n<code>\n\
    $array = [1, \"abc\", true, \"1\"];\n\n$filtered = array_filter($array, function\
    \ ($v) { return is_int($v); });\n\nprint_r($filtered);\n</code>\nResult:\n<code>\n\
    Array\n(\n    [1] => 1\n)\n</code>\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpw14wkc21.php
    on line 15

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  return array_filter($values, function ($value) use ($values) {\n    return\
    \ is_int($value);\n  });\n}\n</code>\n<|/ a |>\n<| c |>\nThis is a great idea,\
    \ thank you! I wish I could give it more votes up but I'm not allowed to :)\n\
    <|/ c |>\n<| c |>\nNo worries. I used the answer from Jonathan Wakely. He used\
    \ PHPs own array_filter function, which I find more convenient. Using a custom\
    \ function will also allow the user to specify the key to use for the filtering.\
    \ I don't know why I didn't use that.\n<|/ c |>\n<| a |>\nI like 's answer but\
    \ I will add here a solution which does not use array_filter().\n<code>\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp4yx1vecc.php
    on line 12

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    foreach ($values as $k => $v) {\n        if (!is_integer($v)) {\n   \
    \         unset($values[$k]);\n        }\n    }\n    return $values;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=integer,arrays,php |>\nYou can use a simple array\
    \ filter:\n<code>\n$input = array(\"a\" => 1, \"b\" => 2, \"c\" => 3.0);\n$output\
    \ = array_filter($input, function($var) { return is_int($var); });\n</code>\n\
    If there are any other values, they will be filtered out.\n<|/ a dscore=0 |>\n\
    <| a dscore=0 tags=integer,arrays,php |>\nA simple function using is_int function\
    \ :\n<code>\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmplt9v9pln.php
    on line 15

    '
  timestamp: 1660028270
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    if (!is_array($values)) {\n        return $values;\n    }\n\n    $return\
    \ = array();\n    foreach ($values as $value) {\n        if (is_int($value)) {\n\
    \            $return[] = $value;\n        }\n    }\n\n    return $return;\n}\n\
    \nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $values = [];\n    foreach ($values as $value) {\n        if (is_integer($value))\
    \ {\n            $values[] = $value;\n        } else {\n            if (is_array($value))\
    \ {\n                $values = array_merge($values, $value);\n            } else\
    \ {\n                $values[] = $value;\n            }\n        }\n    }\n  \
    \  return $values;\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgchqxawm.php:29\n\
    Stack trace:\n#0 /tmp/tmpgchqxawm.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpgchqxawm.php\
    \ on line 29\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter(\n        $values,\n        function ($value) {\n\
    \            return is_int($value);\n        }\n    );\n}\n</code>\n<|/ a tags=arrays,php,filter\
    \ |>\n<| a tags=arrays,php,filter |>\nI think it's more efficient to just use\
    \ array_filter() since it does just that. It creates an array that only contains\
    \ values which match the condition you pass to array_filter().\nHowever, if you\
    \ really want to use array_filter() you can use the following code:\n<code>\n\
    $array = array(\n    \"a\" => 2,\n    \"b\" => 0,\n    \"c\" => 4,\n    \"d\"\
    \ => 10,\n    \"e\" => 0\n);\n\n$array = array_filter($array, function ($v) {\n\
    \    return $v != 0;\n});\n\nprint_r($array);\n</code>\nResult:\n<code>\nArray\n\
    (\n    [c] => 4\n    [d] => 10\n)\n</code>\nIt works by passing all the values\
    \ to array_filter() and then use the callback function to determine which values\
    \ to keep. \nYou were also using array_search() incorrectly. The way it works\
    \ is that if the array contains the value you're looking for, it returns the key\
    \ of the array where the value is, otherwise it returns false. Thus the code below\
    \ will work:\n<code>\n$array = array(\n    \"a\" => 2,\n    \"b\" => 0,\n    \"\
    c\" => 4,\n    \"d\" => 10,\n    \"e\" => 0\n);\n\n$key_of_the_matching_value\
    \ = array_search(2, $array);\n\nif ($key_of_the_matching_value) {\n    echo \"\
    Value is at key {$key_of_the_matching_value}\";\n}\n</code>\n<|/ a dscore=3 |>\n\
    <| c |>\nThis won't filter out all the null values.\n<|/ c |>\n<| c |>\n`array_filter`\
    \ will filter out all the null values when used with `strict comparison`, since\
    \ `0 == null` returns true. If you wanted to filter out all null values, then\
    \ use `array_filter($array, function ($v) { return $v != null; });`\n<|/ c |>\n\
    <| a tags=arrays,php,filter |>\n<code>\n$array = array(\n    \"a\" => 2,\n   \
    \ \"b\" => 0,\n    \"c\" => 4,\n    \"d\" => 10,\n    \"e\" => 0\n);\n\n$result\
    \ = array_filter($array, function($v) { return $v != 0; });\n\nprint_r($result);\n\
    </code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\narray_search() returns the key of\
    \ the array it searches the value in. This will not work because you cannot have\
    \ an array \nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp68vr40cp.php
    on line 15

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  foreach($values as $value) {\n    if (is_integer($value)) {\n      $values[]\
    \ = $value;\n    }\n  }\n  return $values;\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyk80hei9.php:22\n\
    Stack trace:\n#0 /tmp/tmpyk80hei9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpyk80hei9.php\
    \ on line 22\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter(\n        $values,\n        function ($item) {\n\
    \            return is_int($item);\n        }\n    );\n}\n\n/**\n * Test if given\
    \ array contains any phpthon values.\n *\n * @param $value\n * array\n * bool\n\
    \ */\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps00v2mgn.php:29\n\
    Stack trace:\n#0 /tmp/tmps00v2mgn.php(33): test()\n#1 {main}\n  thrown in /tmp/tmps00v2mgn.php\
    \ on line 29\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    if (!is_array($values))\n        $values = preg_split('/\\s*,\\s*/',\
    \ trim($values), -1, PREG_SPLIT_NO_EMPTY);\n    $output = array();\n    foreach\
    \ ($values as $value) {\n        if (preg_match('/^\\s*(\\d+)\\s*$/', $value,\
    \ $match))\n            $output[] = $match[1];\n        else\n            $output[]\
    \ = $value;\n    }\n    return $output;\n}\n\nfunction candidate(...$args) {\n\
    \    return filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: preg_match(): Argument #2 ($subject)\
    \ must be of type string, array given in /tmp/tmplee41z1s.php:12\nStack trace:\n\
    #0 /tmp/tmplee41z1s.php(12): preg_match('/^\\\\s*(\\\\d+)\\\\s*$/', Array, Array)\n\
    #1 /tmp/tmplee41z1s.php(21): filter_integers(Array)\n#2 /tmp/tmplee41z1s.php(26):\
    \ candidate(Array)\n#3 /tmp/tmplee41z1s.php(30): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmplee41z1s.php on line 12\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    if (is_array($values)) {\n        $results = array();\n        foreach\
    \ ($values as $value) {\n            $results[] = filter_integers($value);\n \
    \       }\n        return $results;\n    }\n\n    return is_int($values) ? $values\
    \ : false;\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp27fqtsr.php:25\n\
    Stack trace:\n#0 /tmp/tmpp27fqtsr.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpp27fqtsr.php\
    \ on line 25\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter($values, function($value) {\n        return is_integer($value);\n\
    \    });\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nif($your_array[$i]\
    \ > 100 && $your_array[$i] < 250){\n   $your_array[$i] = '200';\n}elseif($your_array[$i]\
    \ > 250 && $your_array[$i] < 300){\n   $your_array[$i] = '300';\n}elseif($your_array[$i]\
    \ > 300){\n   $your_array[$i] = '400';\n}\n</code>\n<|/ a tags=arrays,php |>\n\
    <| a dscore=0 tags=arrays,php |>\n<code>\n$my_array = array(\n    'A'=>'1',\n\
    \    'B'=>'2',\n    'C'=>'3',\n    'D'=>'4',\n    'E'=>'5',\n    'F'=>'6'\n);\n\
    $my_array = array(\n    'A'=>'200',\n    'B'=>'300',\n    'C'=>'400',\n    'D'=>'500',\n\
    \    'E'=>'600',\n    'F'=>'700'\n);\n\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpj9cdlp97.php
    on line 12

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  $integer = array_filter($values, function($value) {\n    return (bool)$value\
    \ === (int)$value;\n  });\n\n  if (empty($integer))\n    return array();\n\n \
    \ return array_map(function($value) {\n    return (int)$value;\n  }, $integer);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\nThis code will return all array elements\
    \ that are integers, even the empty ones.\n<code>\n$intArray = array(1,2,3,4,5,'',6);\n\
    function candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpey3dr1oj.php
    on line 19

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  foreach($values as &$value) {\n    if (is_integer($value)) {\n      $value\
    \ = $value;\n    }\n  }\n  return $values;\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8cfjq_em.php:22\n\
    Stack trace:\n#0 /tmp/tmp8cfjq_em.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp8cfjq_em.php\
    \ on line 22\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter($values, function ($value) {\n        return is_integer($value);\n\
    \    });\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcx9jrdpn.php:19\n\
    Stack trace:\n#0 /tmp/tmpcx9jrdpn.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpcx9jrdpn.php\
    \ on line 19\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    foreach ($values as &$value) {\n        if (is_integer($value)) {\n \
    \           $value = $value;\n        } else {\n            return false;\n  \
    \      }\n    }\n    return $values;\n}\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpytrf1897.php:23\n\
    Stack trace:\n#0 /tmp/tmpytrf1897.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpytrf1897.php\
    \ on line 23\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter($values, 'is_int');\n}\n</code>\nFor float values:\n\
    <code>\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmptphzk4j4.php
    on line 10

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n\treturn array_filter($values, 'is_int');\n}\nadd_filter( 'post_thumbnail_html',\
    \ 'filter_integers', 10, 2 );\nadd_filter( 'post_thumbnail_html', 'filter_integers',\
    \ 10, 2 );\n</code>\n<|/ a |>\n<| a dscore=4 |>\nI solved this in my WordPress\
    \ plugin with\n<code>\nadd_filter('wp_kses_allowed_html', array('wp_kses_allowed_html',\
    \ 'filter_integers'));\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpofwfes11.php
    on line 12

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter(\n        $values,\n        function ($value) {\n\
    \            if ($value === false) {\n                return false;\n        \
    \    }\n\n            return is_numeric($value) ? filter_var($value, FILTER_VALIDATE_INT)\
    \ : false;\n        }\n    );\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis also\
    \ doesn't filter out empty strings, so the array could have a mix of strings and\
    \ non-strings in it.\n<|/ c |>\n<| a |>\nI know this question is already answered\
    \ but just to add the filter function as a global one will help the OP save a\
    \ few lines.\n<code>\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpcc3gadj2.php
    on line 19

    '
  timestamp: 1660028270
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  $filtered = array();\n\n  foreach ($values as $value) {\n    if (is_int($value))\
    \ {\n      $filtered[] = $value;\n    }\n  }\n  return $filtered;\n}\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    if (!is_array($values)) {\n        return array();\n    }\n    foreach\
    \ ($values as $k => $v) {\n        if (!is_int($v)) {\n            unset($values[$k]);\n\
    \        }\n    }\n    return $values;\n}\n\n/**\n * Get current user's groups\
    \ as an array of objects with name and ID\n *\n * @return array\n */\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq0d60no2.php:30\n\
    Stack trace:\n#0 /tmp/tmpq0d60no2.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpq0d60no2.php\
    \ on line 30\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $filtered = array();\n    foreach ($values as $value) {\n        if (!is_integer($value))\
    \ continue;\n        $filtered[] = $value;\n    }\n    return $filtered;\n}\n\
    </code>\n<|/ a tags=php,json dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$json\
    \ = '{\"a\":[\"b\":[\"c\":1],\"d\":2]}';\n$data = json_decode($json,true);\n$newArray\
    \ = array();\nforeach($data as $key => $value)\n{\n    if(is_array($value)) {\n\
    \        foreach($value as $key2 => $value2)\n        {\n            if(is_array($value2))\n\
    \            {\n                foreach($value2 as $key3 => $value3)\n       \
    \         {\n                    if(is_array($value3))\n                    {\n\
    \                        $newArray[$key][$key2][$key3] = $value3;\n          \
    \          }\n                    else\n                    {\n              \
    \          $newArray[$key][$key2][$key3] = array();\n                    }\n \
    \               }\n            }\n            else\n            {\n          \
    \      $newArray[$key][$key2] = array();\n            }\n        }\n    }\n  \
    \  else\n    {\n        $newArray[$key] = array();\n    }\n}\necho '<pre>';\n\
    print_r($newArray);\necho '</pre>';\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpez6h6t2a.php
    on line 15

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n\tforeach ($values as &$value) {\n\t\tif (is_int($value)) {\n\t\t\t$value\
    \ = $value;\n\t\t}\n\t}\n\treturn $values;\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpedbv46z_.php:22\n\
    Stack trace:\n#0 /tmp/tmpedbv46z_.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpedbv46z_.php\
    \ on line 22\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter(\n        $values,\n        function ($value) {\n\
    \            if (is_int($value)) {\n                return $value;\n         \
    \   }\n        }\n    );\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg1gykfct.php:24\n\
    Stack trace:\n#0 /tmp/tmpg1gykfct.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpg1gykfct.php\
    \ on line 24\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter($values, function($value) {\n        return is_int($value);\n\
    \    });\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=3 |>\n<code>\n<?php\n\
    $arr = [1, 2, 3.14, 'abc', 4, 5, []];\nvar_dump(array_filter(\n    $arr,\n   \
    \ function($val) use ($arr) {\n        return !is_array($val) || !in_array($val,\
    \ $arr);\n    }\n));\n</code>\nOutputs:\n<code>\narray(5) {\n  [2]=>\n  string(1)\
    \ \"3\"\n  [3]=>\n  string(1) \"4\"\n  [4]=>\n  string(3) \"abc\"\n  [5]=>\n \
    \ int(5)\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\nUsing\
    \ array_diff\n<code>\n<?php\n$ar1 = array(\"a\" => 1, \"b\" => 2, \"c\" => 3,\
    \ \"d\" => 4);\n$ar2 = array(\"a\" => 1, \"b\" => 4, \"e\" => 5);\n$result = array_diff($ar1,\
    \ $ar2);\nprint_r($result);\n</code>\n<|/ a dscore=3 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\n    1 => 0,\n    2 => 1,\n    3 => 1,\n    4 =>\
    \ 2,\n    5 => 3\n);\n\n$array = array_filter($array, function($i) {\n    if (in_array($i,\
    \ array_keys($array))) {\n        return true;\n    }\n    return false;\n});\n\
    \nprint_r($array);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays |>\nYou can\
    \ use the function array_filter and in_array:\n<code>\n$array1 = array(1,2,3,4,5,6,7,8,9);\n\
    $array2 = array(1,2,3,4,5,6,7,8,9);\n\n$array3 = array_filter($array1, function($array1){\n\
    \  return !in_array($array1,$array2);\n});\n\nprint_r($array3);\n</code>\nIt will\
    \ output\n<code>\nArray\n(\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4]\
    \ => 5\n    [5] => 6\n    [6] => 7\n    [7] => 8\n    [8] => 9\n)\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$array1 = array(1,2,3,4,5,6,7,8,9);\n\
    $array2 = array(1,2,3,4,5,6,7,8,9);\n$array3 = array();\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmppz4rftgd.php
    on line 12

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n\treturn array_filter($values, \"is_int\");\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgxi56efl.php:17\n\
    Stack trace:\n#0 /tmp/tmpgxi56efl.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpgxi56efl.php\
    \ on line 17\n"
  timestamp: 1660028227
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    // Return empty array if empty\n    if (count($values) == 0) {\n    \
    \    return array();\n    }\n    $result = array();\n    foreach ($values as $value)\
    \ {\n        if (is_numeric($value)) {\n            $result[] = $value;\n    \
    \    }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqgbqzwa.php:27\n\
    Stack trace:\n#0 /tmp/tmphqgbqzwa.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphqgbqzwa.php\
    \ on line 27\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter(array_map('intval', $values));\n}\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmsm1f2go.php:16\n\
    Stack trace:\n#0 /tmp/tmpmsm1f2go.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpmsm1f2go.php\
    \ on line 16\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    foreach ($values as $v) {\n        if (is_int($v)) {\n            $values[]\
    \ = $v;\n        }\n    }\n    return $values;\n}\n</code>\n<|/ a dscore=2 tags=php,arrays\
    \ |>\n<| c |>\nThe return value of the filter function is the value that will\
    \ be stored in the result of the filter function, so this solution doesn't really\
    \ work. `filter_integers` returns the filtered array, but the array it returns\
    \ is never stored.\n<|/ c |>\n<| c |>\nI updated the answer, now it returns filtered\
    \ array and stores it back in `$values`.\n<|/ c |>\n<| c |>\nThis is an elegant\
    \ solution, however it has the drawback of returning an array containing all values\
    \ that match the conditions, rather than just leaving those that match. `filter_integers`\
    \ may seem a useful function but it is actually more of an anti-pattern than one\
    \ that needs to be used.\n<|/ c |>\n<| a tags=php,arrays |>\nYou could use the\
    \ array_filter() function\n<code>\n$array = array(1, 2, 3, 4, 5);\n$filtered =\
    \ array_filter($array, 'is_integer');\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\narray_filter($array, 'is_int');\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays dscore=1 |>\nThis may help you:\n<code>\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpfbgficyf.php
    on line 15

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    foreach ($values as $key => $value) {\n        if (is_int($value)) {\n\
    \            $results[] = $key;\n        }\n    }\n    return $results;\n}\n\n\
    function candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $results in /tmp/tmpxmbnnzsf.php on line\
    \ 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxmbnnzsf.php:21\n\
    Stack trace:\n#0 /tmp/tmpxmbnnzsf.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpxmbnnzsf.php\
    \ on line 21\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    if (!is_array($values)) return array();\n    return array_filter(\n \
    \       $values,\n        function($val) {\n            return is_int($val);\n\
    \        }\n    );\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphjdup8s8.php:23\n\
    Stack trace:\n#0 /tmp/tmphjdup8s8.php(27): test()\n#1 {main}\n  thrown in /tmp/tmphjdup8s8.php\
    \ on line 23\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  return array_filter($values, function($value) {\n    if (is_integer($value))\
    \ {\n      return true;\n    }\n    return false;\n  });\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9uo1eedk.php:22\n\
    Stack trace:\n#0 /tmp/tmp9uo1eedk.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9uo1eedk.php\
    \ on line 22\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter($values, 'is_int');\n}\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpskfki0ww.php:16\n\
    Stack trace:\n#0 /tmp/tmpskfki0ww.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpskfki0ww.php\
    \ on line 16\n"
  timestamp: 1659823721
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  $output = array();\n  foreach ($values as $value) {\n    if (is_integer($value))\
    \ {\n      $output[] = $value;\n    }\n  }\n  return $output;\n}\n\n/**\n * Checks\
    \ $value's type and converts it to an array.\n * If it's a string then it does\
    \ a split().\n * If it's an array then it returns itself.\n * If it's null then\
    \ it returns array().\n *\n * >>> array_type(null)\n * array()\n * >>> array_type(\"\
    a\")\n * array(\"a\")\n * >>> array_type(array(\"a\", \"b\"))\n * array(\"a\"\
    , \"b\")\n * >>> array_type(array(\"a\", array(\"b\",\"c\")))\n * array(\"a\"\
    , \"b\", \"c\")\n */\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  if (empty($values)) {\n    return array();\n  }\n  return array_filter(\n\
    \    $values,\n    function ($value) {\n      return is_numeric($value);\n   \
    \ },\n    ARRAY_FILTER_USE_BOTH\n  );\n}\n\nfunction candidate(...$args) {\n \
    \   return filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ijoysor.php:26\n\
    Stack trace:\n#0 /tmp/tmp0ijoysor.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp0ijoysor.php\
    \ on line 26\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter($values, 'is_int');\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuc2obm6n.php:17\n\
    Stack trace:\n#0 /tmp/tmpuc2obm6n.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpuc2obm6n.php\
    \ on line 17\n"
  timestamp: 1660028227
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter($values, function($value) {\n        return is_integer($value);\n\
    \    });\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp65iy4hj_.php:19\n\
    Stack trace:\n#0 /tmp/tmp65iy4hj_.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp65iy4hj_.php\
    \ on line 19\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  if (is_null($values)) return $values;\n  foreach ($values as $value) {\n\
    \    if (is_string($value) && is_numeric($value)) {\n      $values[] = intval($value);\n\
    \    }\n  }\n  return $values;\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpitms6bat.php:23\n\
    Stack trace:\n#0 /tmp/tmpitms6bat.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpitms6bat.php\
    \ on line 23\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter(\n        $values,\n        function ($value) {\n\
    \            return is_int($value);\n        }\n    );\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpffqnqfne.php:22\n\
    Stack trace:\n#0 /tmp/tmpffqnqfne.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpffqnqfne.php\
    \ on line 22\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $values = array_map('intval', $values);\n    return array_filter($values,\
    \ 'is_int');\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn2m778ln.php:18\n\
    Stack trace:\n#0 /tmp/tmpn2m778ln.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpn2m778ln.php\
    \ on line 18\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $integers = array_filter($values, 'is_numeric');\n    return array_filter($integers);\n\
    }\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprs1vnhf6.php:18\n\
    Stack trace:\n#0 /tmp/tmprs1vnhf6.php(22): test()\n#1 {main}\n  thrown in /tmp/tmprs1vnhf6.php\
    \ on line 18\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $result = [];\n    foreach ($values as $v) {\n        $v = (int) $v;\n\
    \        if ($v) {\n            $result[] = $v;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4r0zbgvt.php:24\n\
    Stack trace:\n#0 /tmp/tmp4r0zbgvt.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp4r0zbgvt.php\
    \ on line 24\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    if (!is_array($values)) {\n        return $values;\n    }\n\n    $result\
    \ = [];\n    foreach ($values as $val) {\n        if (is_numeric($val)) {\n  \
    \          $result[] = $val;\n        }\n    }\n\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4y7ifjrw.php:28\n\
    Stack trace:\n#0 /tmp/tmp4y7ifjrw.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp4y7ifjrw.php\
    \ on line 28\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $result = [];\n    foreach ($values as $value) {\n        if (!is_int($value))\
    \ {\n            throw new \\Exception(\"Value must be an integer\");\n      \
    \  }\n        $result[] = $value;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Value must be an integer in /tmp/tmps4cib3vo.php:11\n\
    Stack trace:\n#0 /tmp/tmps4cib3vo.php(19): filter_integers(Array)\n#1 /tmp/tmps4cib3vo.php(24):\
    \ candidate(Array)\n#2 /tmp/tmps4cib3vo.php(28): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmps4cib3vo.php on line 11\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    foreach ($values as &$value) {\n        if (is_int($value)) {\n     \
    \       $value = intval($value);\n        }\n    }\n    return $values;\n}\n\n\
    function candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps_e33omk.php:22\n\
    Stack trace:\n#0 /tmp/tmps_e33omk.php(26): test()\n#1 {main}\n  thrown in /tmp/tmps_e33omk.php\
    \ on line 22\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $output = array();\n    foreach ($values as $value) {\n        if (is_int($value))\
    \ {\n            $output[] = $value;\n        }\n    }\n    return $output;\n\
    }\n</code>\nYou can obviously improve this by making a custom filter for your\
    \ desired type or whatever.\n<|/ a dscore=0 |>\n<| c |>\nThis is not an answer\
    \ to his question and as such should be a comment instead.\n<|/ c |>\n<| a dscore=0\
    \ |>\nI was looking for a similar solution and found a way using PHP namespaces.\
    \ \nI put this in the global namespace (I added it to the top of my script so\
    \ it applies to all files I require). \nThis allowed me to create my own filter\
    \ in one file and just call it from a second file using my namespace.\nHere's\
    \ the code:\n<code>\nnamespace MyNamespace\\Core\\Filter;\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpw74q1wge.php
    on line 16

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n\tif (!is_array($values)) $values = array($values);\n\t$values = array_filter($values,\
    \ function($value){\n\t\t$value = trim($value); // Trim whitespace and convert\
    \ non-int to bool\n\t\treturn !is_null($value) && is_numeric($value) && intval($value);\n\
    \t});\n\treturn $values;\n}\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: trim(): Argument #1 ($string) must be\
    \ of type string, array given in /tmp/tmpov8huslf.php:10\nStack trace:\n#0 /tmp/tmpov8huslf.php(10):\
    \ trim(Array)\n#1 [internal function]: {closure}(Array)\n#2 /tmp/tmpov8huslf.php(12):\
    \ array_filter(Array, Object(Closure))\n#3 /tmp/tmpov8huslf.php(16): filter_integers(Array)\n\
    #4 /tmp/tmpov8huslf.php(21): candidate(Array)\n#5 /tmp/tmpov8huslf.php(25): test()\n\
    #6 {main}\n  thrown in /tmp/tmpov8huslf.php on line 10\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter($values, function($value) {\n        return is_numeric($value);\n\
    \    });\n}\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp56trtt5q.php:18\n\
    Stack trace:\n#0 /tmp/tmp56trtt5q.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp56trtt5q.php\
    \ on line 18\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter($values, function ($value) {\n        return !is_null($value)\
    \ && !is_numeric($value);\n    });\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a\
    \ dscore=0 tags=php,arrays |>\n<code>\n$array = array(1, 2, 3, '4', '5', null,\
    \ '6', '7', '8');\n$result = array_filter($array, 'is_not_null');\n\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp5e8i3dvj.php
    on line 12

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  return array_filter($values, function ($value) {\n    return (is_integer($value));\n\
    \  });\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI think your `filter_integers`\
    \ should use `in_array` instead of `isset`.\n<|/ c |>\n<| c |>\nI believe that\
    \ `isset` is sufficient since `in_array` would return `false` for empty arrays\
    \ and `null` values.\n<|/ c |>\n<| c |>\nActually, `isset` would be enough, because\
    \ `is_int` will return `false` for an empty array or null. `in_array` doesn't\
    \ check for that.\n<|/ c |>\n<| c |>\n`isset` is sufficient because `isset` returns\
    \ `false` for empty arrays and `null` values, but `is_int` will also return `false`\
    \ for an empty array or null.\n<|/ c |>\n<| c |>\n, I have updated my answer to\
    \ include `is_int` in the `filter_integers` function.\n<|/ c |>\n<| a |>\nA shorter\
    \ solution would be to use array_filter\n<code>\n$arr = array(1,2,\"test\",4,5,6,7);\n\
    $res = array_filter($arr,function($v) {\n  return !is_int($v);\n});\nprint_r($res);\n\
    </code>\nOr you could use array_map() like so:\n<code>\n$arr = array(1,2,\"test\"\
    ,4,5,6,7);\n$res = array_map(function($v){\n    return is_int($v) ? $v : $v;\n\
    },$arr);\nprint_r($res);\n</code>\n<|/ a tags=arrays,php dscore=1 |>\n<| a |>\n\
    You can use array_filter() and is_int():\n<code>\n<?php\n$array = [ 1, 2, \"test\"\
    , 4, 5, 6, 7 ];\n\n$array = array_filter($array, function ($var) {\n    return\
    \ is_int($var);\n});\n</code>\n<|/ a tags=arrays,php dscore=1 |>\n<| a dscore=0\
    \ |>\nTry this\n<code>\n$array = array(1,2,\"test\",4,5,6,7);\nprint_r(array_filter($array,function($i){\n\
    \    return is_int($i);\n}));\n</code>\n<|/ a tags=arrays,php |>\n<| a |>\n<code>\n\
    <?php\n$arr = [1, 2, 3, 4, 5];\n\nforeach($arr as $key => $value) {\n    if(!is_int($value))\
    \ {\n        unset($arr[$key]);\n    }\n}\n\nprint_r($arr);\n</code>\n<|/ a tags=arrays,\n\
    function candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpbyktfae5.php
    on line 12

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  return array_filter($values, 'is_int');\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwpelyndv.php:17\n\
    Stack trace:\n#0 /tmp/tmpwpelyndv.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpwpelyndv.php\
    \ on line 17\n"
  timestamp: 1660028227
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $integers = array();\n    foreach($values as $value) {\n        if (is_int($value))\
    \ {\n            $integers[] = $value;\n        }\n    }\n    return $integers;\n\
    }\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  return array_filter(\n    $values,\n    function ($value) {\n      return\
    \ is_int($value);\n    },\n    ARRAY_FILTER_USE_BOTH\n  );\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnofwtkjo.php:23\n\
    Stack trace:\n#0 /tmp/tmpnofwtkjo.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpnofwtkjo.php\
    \ on line 23\n"
  timestamp: 1660028270
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n\t$filtered = array();\n\tforeach ($values as $value) {\n\t\t$type = is_int($value)\
    \ ? \"int\" : gettype($value);\n\t\tif (in_array($type, array(\"int\", \"integer\"\
    ))) {\n\t\t\t$filtered[] = $value;\n\t\t}\n\t}\n\treturn $filtered;\n}\n\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  $filtered = array();\n  foreach ($values as $value) {\n    if (is_integer($value))\
    \ {\n      $filtered[] = $value;\n    }\n  }\n  return $filtered;\n}\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $integers = array();\n    foreach ($values as $value) {\n        if (is_int($value))\
    \ {\n            $integers[] = $value;\n        }\n    }\n    return $integers;\n\
    }\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028227
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $filtered = array();\n    foreach($values as $value) {\n        if(is_int($value))\
    \ {\n            $filtered[] = $value;\n        }\n    }\n    return $filtered;\n\
    }\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcws1skkh.php:19\n\
    Stack trace:\n#0 /tmp/tmpcws1skkh.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpcws1skkh.php\
    \ on line 19\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  return array_filter($values, function($value) {\n    return is_numeric($value);\n\
    \  });\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplp9pjkbh.php:19\n\
    Stack trace:\n#0 /tmp/tmplp9pjkbh.php(23): test()\n#1 {main}\n  thrown in /tmp/tmplp9pjkbh.php\
    \ on line 19\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    if (!is_array($values)) {\n        return $values;\n    }\n\n    $filtered\
    \ = array();\n    foreach ($values as $key => $value) {\n        if (is_numeric($value))\
    \ {\n            $filtered[$key] = $value;\n        }\n    }\n\n    return $filtered;\n\
    }\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nI like this one - very compact\
    \ and useful to quickly check if an item is in a list. Very clean and simple.\
    \ Thanks!\n<|/ c |>\n<| a tags=arrays,php |>\nAs suggested by Chris, you can use\
    \ the array_filter() function. array_filter() iterates through each item in the\
    \ array and removes all items that don't return true (in this case, it checks\
    \ if the item is a number, returning false if not).\n<code>\n$array = array(\"\
    a\" => 1, \"b\" => \"2\", \"c\" => 3, \"d\" => 4, 5, \"e\" => 6, \"f\" => \"7\"\
    );\n$newarray = array_filter(\n  $array,\n  function($item) { return is_numeric($item);\
    \ }\n);\n\nprint_r($newarray);\n</code>\nOutput:\n<code>\nArray (\n  [4] => 4\n\
    \  [5] => 5\n  [6] => 6\n)\n</code>\nIf you need to keep the original array structure,\
    \ you can use the following code instead:\n<code>\n$array = array(\"a\" => 1,\
    \ \"b\" => \"2\", \"c\" => 3, \"d\" => 4, 5, \"e\" => 6, \"f\" => \"7\");\n$newarray\
    \ = array();\n\nforeach ($array as $key => $value) {\n  if (is_numeric($value))\
    \ {\n    $newarray[$key] = $value;\n  }\n}\n\nprint_r($newarray);\n</code>\nOutput:\n\
    <code>\nArray (\n  [4] => 4\n  [5] => 5\n  [6] => 6\n)\n</code>\n<|/ a dscore=3\
    \ |>\n<| c |>\nNice! array_filter is probably what I was looking for. Thank you!\n\
    <|/ c |>\n<| c |>\nNo worries, glad I could help!\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\nYou could use array_filter:\n<code>\n$arr = [\n    'a' => '1',\n    'b'\
    \ => '2',\n    'c' => '3',\n    'd' => '4',\n    'e' => '5',\n    'f' => '6',\n\
    ];\n\nvar_dump(array_filter($arr, 'is_numeric'));\n</code>\nOutput\n<code>\narray(2)\
    \ {\n  [\"a\"]=>\n  string(1) \"1\"\n  [\"\nfunction candidate(...$args) {\n \
    \   return filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp13wxx9at.php
    on line 21

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  if(!is_array($values)) return $values;\n  \n  foreach ($values as $key\
    \ => $value) {\n    // Check for strings and integers\n    if(!is_array($value))\
    \ {\n      if(is_numeric($value)) return array($value);\n    }\n  }\n  \n  return\
    \ $values;\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjyj9unuj.php:26\n\
    Stack trace:\n#0 /tmp/tmpjyj9unuj.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpjyj9unuj.php\
    \ on line 26\n"
  timestamp: 1660028270
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_values(array_filter($values, 'is_int'));\n}\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    foreach ($values as $key => $value) {\n        if (is_integer($value))\
    \ {\n            unset($values[$key]);\n        }\n    }\n    return $values;\n\
    }\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj35_vmnz.php:22\n\
    Stack trace:\n#0 /tmp/tmpj35_vmnz.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpj35_vmnz.php\
    \ on line 22\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    if (!is_array($values)) {\n        return $values;\n    }\n\n    $ints\
    \ = array();\n    foreach ($values as $i => $v) {\n        if (is_int($v)) {\n\
    \            $ints[] = $v;\n            unset($values[$i]);\n        } elseif\
    \ (is_array($v)) {\n            $values[$i] = filter_integers($v);\n        }\n\
    \    }\n\n    return $values + $ints;\n}\n\nfunction candidate(...$args) {\n \
    \   return filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpubca_ixv.php:31\n\
    Stack trace:\n#0 /tmp/tmpubca_ixv.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpubca_ixv.php\
    \ on line 31\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  if (empty($values)) {\n    return $values;\n  }\n  $filtered = [];\n  foreach\
    \ ($values as $key => $value) {\n    if (is_numeric($value) && $value == (int)$value)\
    \ {\n      $filtered[] = $value;\n    }\n  }\n  return $filtered;\n}\n</code>\n\
    <|/ a tags=php |>\n<| c |>\nThanks for your effort, but this won't filter out\
    \ arrays containing only strings.\n<|/ c |>\n<| a tags=php |>\nFor a recursive\
    \ solution that will convert any type of array to an array:\n<code>\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpt29ltlis.php
    on line 19

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n\treturn array_filter($values, function($value) {\n\t\treturn is_int($value);\n\
    \t});\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb435omze.php:19\n\
    Stack trace:\n#0 /tmp/tmpb435omze.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpb435omze.php\
    \ on line 19\n"
  timestamp: 1659823721
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $values = is_array($values) ? $values : array($values);\n    return array_filter($values,\
    \ function($value) {\n        return !is_numeric($value);\n    });\n}\n</code>\n\
    <|/ a dscore=3 tags=php,arrays |>\n<| c |>\nThanks, it seems to work. But it still\
    \ leaves me with a problem when trying to filter the values of `float` arrays\n\
    <|/ c |>\n<| c |>\nIf you have `float` array, just use `filter_integers` function\
    \ from my answer.\n<|/ c |>\n<| c |>\nI think I'm still missing something here.\
    \ I've updated the OP to show how it works on the original array `array(array(\"\
    a\", 3.14, 5), array(1, 2, 3, \"abc\", array(), array()))` but when I run it on\
    \ the nested array `array(array(\"a\", 3.14, 5), array(1, 2, 3, \"abc\", array(),\
    \ array()), array())` I get this error `Warning: array_filter() expects parameter\
    \ 1 to be array, integer given`.\n<|/ c |>\n<| c |>\nI've revised my answer and\
    \ added the example with `float` arrays. Can you check it?\n<|/ c |>\n<| c |>\n\
    Thanks, I figured it out. :)\n<|/ c |>\n<| a dscore=2 |>\nTry this:\n<code>\n\
    $array = array(\n        array(\"a\", 3.14, 5), \n        array(1, 2, 3, \"abc\"\
    , array(), array())\n    );\n\n$array = array_filter($array, 'strval');\n</code>\n\
    This will filter all the numeric strings in the array.\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays dscore=2 |>\n<code>\n$array = array(\n    array(\"\
    a\", 3.14, 5),\n    array(1, 2, 3, \"abc\", array(), array()),\n    array('a'=>3.14,b=>'5'),\n\
    \    array(array(\"a\", 3.14, 5), array(1, 2, 3, \"abc\", array(), array())),\n\
    );\n\n$result = array_filter(\n    $array,\n    function($arr){\n        if(is_array($arr))\n\
    \            return array_filter(\n                $arr,\n                function($item){\n\
    \                    if(is_array($item) && array_filter($item, 'is_string'))\n\
    \                        return false;\n                    return true;\n   \
    \             }\n            );\n        return false;\n    }\n);\n\nvar_dump($result);\n\
    </code>\n<|/ a |>\n<| c |>\nThanks for the effort! But I managed to figure it\
    \ out myself :D\n<|/ c |>\n<| c |>\nYou can post your \nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp2pz3qoq2.php
    on line 13

    '
  timestamp: 1660028270
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $filterd_values = array();\n    foreach ($values as $value) {\n     \
    \   if (is_int($value)) {\n            $filterd_values[] = $value;\n        }\n\
    \    }\n    return $filterd_values;\n}\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  return array_values(array_filter($values, function($value) {\n    return\
    \ is_integer($value);\n  }));\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter($values, function($value) {\n        return (is_numeric($value));\n\
    \    });\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdvtgqf7o.php:19\n\
    Stack trace:\n#0 /tmp/tmpdvtgqf7o.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpdvtgqf7o.php\
    \ on line 19\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  return array_filter($values, function($value) { return filter_var($value,\
    \ FILTER_VALIDATE_INT, FILTER_NULL_ON_FAILURE) !== false; });\n}\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbymiauyg.php:16\n\
    Stack trace:\n#0 /tmp/tmpbymiauyg.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpbymiauyg.php\
    \ on line 16\n"
  timestamp: 1660028270
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $integers = array();\n    foreach ($values as $value) {\n        if (is_integer($value))\
    \ {\n            $integers[] = $value;\n        }\n    }\n    return $integers;\n\
    }\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028227
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  if (!is_array($values)) {\n    return array();\n  }\n\n  $values = array_values($values);\n\
    \  $integers = array();\n  foreach ($values as $value) {\n    if (is_int($value))\
    \ {\n      $integers[] = $value;\n    }\n  }\n\n  return $integers;\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nNice but a little slow.\n<|/ c |>\n<| c |>\n: it seems\
    \ that this is one of the most common PHP questions.\n<|/ c |>\n<| c |>\n: It's\
    \ not really slow. It's just an ugly code with many unnecessary loops :)\n<|/\
    \ c |>\n<| c |>\n: But it also isn't very readable.\n<|/ c |>\n<| c |>\nThanks\
    \ Mike! That did the trick for me :) I added an answer with my refactored code.\n\
    <|/ c |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpl241oh8s.php
    on line 22

    '
  timestamp: 1660028270
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  $return = array();\n  foreach ($values as $value) {\n    if (is_int($value))\
    \ {\n      $return[] = $value;\n    }\n  }\n  return $return;\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n</code>\n<|/ a |>\n<| c |>\nThe performance of array_filter() is\
    \ not great, especially if the array is large\n<|/ c |>\n<| a |>\nIf you are using\
    \ PHP 5.3 or above, you can try array_reduce():\n<code>\n$arr = [\n    'some'\
    \ => 'value',\n    'other' => [\n        'item' => 42,\n    ],\n    'and' => ['another'\
    \ => 'value']\n];\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmph4enl0y7.php
    on line 12

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter(\n        $values,\n        function ($value) {\n\
    \            if (is_integer($value)) {\n                return $value;\n     \
    \       } else {\n                throw new InvalidArgumentException(\n      \
    \              'The values must be integers');\n            }\n        }\n   \
    \ );\n}\n\n/**\n * Filter given array for any phpthon values only for strings\n\
    \ * >>> filter_str(array(\"a\", 3.14, 5))\n * array(array(\"a\", 3.14, 5))\n *\
    \ >>> filter_str(array(1, 2, 3, \"abc\", array(), array()))\n * array(array(1,\
    \ 2, 3, \"abc\"), array())\n * >>> filter_str(array(1, 2, 3, \"abc\", array(),\
    \ \"abc\"))\n * array(array(1, 2, 3, \"abc\", \"abc\"))\n *\n * @param array $values\n\
    \ * @return array\n */\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught InvalidArgumentException: The values must be integers\
    \ in /tmp/tmpsmw_fh6e.php:14\nStack trace:\n#0 [internal function]: {closure}(Array)\n\
    #1 /tmp/tmpsmw_fh6e.php(17): array_filter(Array, Object(Closure))\n#2 /tmp/tmpsmw_fh6e.php(34):\
    \ filter_integers(Array)\n#3 /tmp/tmpsmw_fh6e.php(39): candidate(Array)\n#4 /tmp/tmpsmw_fh6e.php(43):\
    \ test()\n#5 {main}\n  thrown in /tmp/tmpsmw_fh6e.php on line 14\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $filtered = array();\n    $i = 0;\n    foreach ($values as $value) {\n\
    \        if (is_int($value)) {\n            $filtered[$i] = $value;\n        }\n\
    \        $i++;\n    }\n    return $filtered;\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvduqcglg.php:25\n\
    Stack trace:\n#0 /tmp/tmpvduqcglg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvduqcglg.php\
    \ on line 25\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  if (count($values) < 1) {\n    return $values;\n  }\n\n  $new_values =\
    \ array();\n  foreach ($values as $val) {\n    if (is_int($val)) {\n      $new_values[]\
    \ = $val;\n    }\n  }\n  return $new_values;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    The question asks for a function that returns an array of only integers, not an\
    \ array of all integers. It also only accepts an array. This answer does nothing\
    \ to that requirement at all, it only returns the array as is. It doesn't even\
    \ try to remove floats, because it does nothing to floats. It doesn't even try\
    \ to *cast* the array to a string and parse it back to a array anyway.\n<|/ c\
    \ |>\n<| c |>\nYou're right, the answer is wrong. I just posted it for the case\
    \ when all elements are integers, not just some of them are. I fixed the answer\
    \ to make it more clear and added another example.\n<|/ c |>\n<| a dscore=5 |>\n\
    If you're using array_filter(), you can use the following:\n<code>\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpb9lcx0l6.php
    on line 20

    '
  timestamp: 1660028270
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  $integers = array();\n  foreach ($values as $value) {\n    if (is_int($value))\
    \ {\n      $integers[] = $value;\n    }\n  }\n  return $integers;\n}\n\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  if (count($values) === 0)\n    return array();\n  $retVal = array();\n\
    \  foreach ($values as $value)\n    if (!is_numeric($value))\n      $retVal[]\
    \ = $value;\n  return $retVal;\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf7de79f7.php:23\n\
    Stack trace:\n#0 /tmp/tmpf7de79f7.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpf7de79f7.php\
    \ on line 23\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    foreach ($values as $key => $value) {\n        if (is_integer($value))\
    \ {\n            $values[$key] = $value;\n        }\n    }\n    return $values;\n\
    }\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ifexuno.php:22\n\
    Stack trace:\n#0 /tmp/tmp0ifexuno.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp0ifexuno.php\
    \ on line 22\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  if (!is_array($values)) {\n    return $values;\n  }\n\n  $filtered = [];\n\
    \  foreach ($values as $value) {\n    if (is_integer($value)) {\n      $filtered[]\
    \ = $value;\n    }\n  }\n\n  return $filtered;\n}\n\n/**\n * Filter given array\
    \ of any phpthon values only for strings\nfunction candidate(...$args) {\n   \
    \ return filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 22 in /tmp/tmpz57iti20.php on
    line 22

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    if (is_array($values) && count($values) > 0) {\n        foreach ($values\
    \ as $value) {\n            if (is_string($value)) {\n                $values[$value]\
    \ = 0;\n            } elseif (is_int($value)) {\n                $values[$value]\
    \ = 0;\n            } elseif (is_float($value)) {\n                $values[$value]\
    \ = 0;\n            } else {\n                $values[$value] = $value;\n    \
    \        }\n        }\n    }\n    return $values;\n}\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Illegal offset type in /tmp/tmpft_6kfqn.php:17\n\
    Stack trace:\n#0 /tmp/tmpft_6kfqn.php(24): filter_integers(Array)\n#1 /tmp/tmpft_6kfqn.php(29):\
    \ candidate(Array)\n#2 /tmp/tmpft_6kfqn.php(33): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpft_6kfqn.php on line 17\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  if (is_array($values)) {\n    return array_values(array_filter(array_map('intval',\
    \ $values)));\n  }\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nJust to mention that\
    \ this doesn't do any checking of the value you are trying to filter and that\
    \ could be dangerous for some values as well as other values like strings and\
    \ array and so on. This will convert all values into integers and remove any empty\
    \ values, so not only numbers but also all kinds of values like strings and arrays\
    \ and so on. Just as a side note. :)\n<|/ c |>\n<| a |>\nIf you are looking for\
    \ a PHP function like PHP's filter_var function but for integers, you can do it\
    \ like this\n<code>\n$value = filter_var($_POST['value'], FILTER_VALIDATE_INT);\n\
    </code>\n<|/ a dscore=4 tags=integer,php |>\n<| c |>\nThis doesn't work, at least\
    \ not for strings or empty arrays\n<|/ c |>\n<| c |>\nThat's not correct, see\
    \ the documentation for `FILTER_VALIDATE_INT`: https://secure.php.net/manual/en/filter.filters.validate.php\n\
    <|/ c |>\n<| a |>\nUse filter_var:\n<code>\n$var = filter_var($var, FILTER_VALIDATE_INT);\n\
    </code>\n<|/ a dscore=4 tags=integer,php |>\n<| a tags=integer,php |>\nI used\
    \ this function and it worked for me \n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpf2h1e0_x.php
    on line 12

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  return array_filter($values, function ($value) {\n    return is_int($value);\n\
    \  });\n}\n\n/**\n * Filter given array for any phpthon values except empty array\
    \ and null\n * >>> filter_null(array(null))\n * array(null)\n * >>> filter_null(array())\n\
    \ * array()\n * >>> filter_null(array(\"a\"))\n * array(\"a\")\n * >>> filter_null(array(\"\
    a\", null, \"c\"))\n * array(\"a\", \"c\")\n * >>> filter_null(array(\"a\", null,\
    \ \"c\", array()))\n * array(\"a\", \"c\")\n * >>> filter_null(array(\"a\", \"\
    c\"))\n * array(\"a\", \"c\")\n */\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp84dw7t5y.php:34\n\
    Stack trace:\n#0 /tmp/tmp84dw7t5y.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp84dw7t5y.php\
    \ on line 34\n"
  timestamp: 1660028270
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  $filtered = array();\n  foreach ($values as $value) {\n    if (is_integer($value))\
    \ {\n      $filtered[] = $value;\n    }\n  }\n  return $filtered;\n}\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    foreach ($values as $v) {\n        $is_integer = filter_is_integer($v);\n\
    \        if (!$is_integer) {\n            return $values;\n        }\n    }\n\
    \    return $values;\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function filter_is_integer()\
    \ in /tmp/tmphlytcis9.php:9\nStack trace:\n#0 /tmp/tmphlytcis9.php(18): filter_integers(Array)\n\
    #1 /tmp/tmphlytcis9.php(23): candidate(Array)\n#2 /tmp/tmphlytcis9.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmphlytcis9.php on line 9\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  foreach ($values as $key => $value) {\n    if (is_int($value)) {\n    \
    \  $values[$key] = $value;\n    }\n  }\n  return $values;\n}\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5smojjst.php:21\n\
    Stack trace:\n#0 /tmp/tmp5smojjst.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp5smojjst.php\
    \ on line 21\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  return array_filter($values, function ($value) {\n    return is_int($value);\n\
    \  });\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5f3p41ba.php:19\n\
    Stack trace:\n#0 /tmp/tmp5f3p41ba.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp5f3p41ba.php\
    \ on line 19\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  return array_filter($values, function ($value) use ($values) {\n    return\
    \ is_numeric($value);\n  });\n}\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8k1l9w0o.php:18\n\
    Stack trace:\n#0 /tmp/tmp8k1l9w0o.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp8k1l9w0o.php\
    \ on line 18\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  if (!is_array($values) || count($values) < 1) return $values;\n  $numeric\
    \ = array();\n  foreach ($values as $value) {\n    if (is_numeric($value)) $numeric[]\
    \ = $value;\n  }\n  return $numeric;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    Nice. Thanks for sharing. Your function returns \"0\" if no elements are numeric,\
    \ which is probably a bug. Just remove the `&& is_numeric` condition inside the\
    \ `if` condition and it should work fine.\n<|/ c |>\n<| c |>\nThis works beautifully.\
    \ To my surprise though, I had to change `if(is_numeric($value))` for `if(is_numeric($value)\
    \ && !is_string($value))`. Otherwise numbers like 3.14 would get returned as well.\n\
    <|/ c |>\n<| c |>\nI love it. Just add this to the php file and you're done. It\
    \ works for all kind of values - strings, arrays, etc.\n<|/ c |>\n<| c |>\nNice\
    \ solution. I was just looking for a simple and elegant way of doing it. Thanks!\n\
    <|/ c |>\n<| c |>\nI used this as a starting point and modified it quite a bit.\
    \ Now it allows floats as well, allowing them to be passed through unaltered.\
    \ https://github.com/danielkurkowski/php-filters\n<|/ c |>\n<| a dscore=5 |>\n\
    I know this has been answered, but here's an alternative way of doing it. It's\
    \ a lot less code and does the exact same thing.\n<code>\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpahw4ssxg.php
    on line 15

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  return array_filter($values, \"is_int\");\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpisxp4jbb.php:17\n\
    Stack trace:\n#0 /tmp/tmpisxp4jbb.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpisxp4jbb.php\
    \ on line 17\n"
  timestamp: 1660028227
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter($values, function($value) {\n        return (bool)\
    \ filter_var($value, FILTER_VALIDATE_INT);\n    });\n}\n</code>\n<|/ a tags=php,filter,multidimensional-array\
    \ dscore=0 |>\n<| a tags=php,filter,multidimensional-array dscore=0 |>\nYou can\
    \ use this recursive solution:\n<code>\n$arr = array(\n    0 => array(\"id\" =>\
    \ \"1245\", \"name\" => \"David\", \"age\" => 12),\n    1 => array(\"id\" => \"\
    1246\", \"name\" => \"Amy\", \"age\" => 12),\n    2 => array(\"id\" => \"1247\"\
    , \"name\" => \"Nick\", \"age\" => 12),\n    3 => array(\"id\" => \"1248\", \"\
    name\" => \"Kate\", \"age\" => 13),\n    4 => array(\"id\" => \"1249\", \"name\"\
    \ => \"Sally\", \"age\" => 12),\n    5 => array(\"id\" => \"1250\", \"name\" =>\
    \ \"John\", \"age\" => 12)\n);\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp5tkngapj.php
    on line 12

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    if (!is_array($values)) return $values;\n    $integers = array();\n \
    \   foreach ($values as $value) {\n        if (is_string($value)) $integers[]\
    \ = (int) $value;\n    }\n    return $integers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgfhuwfko.php:22\n\
    Stack trace:\n#0 /tmp/tmpgfhuwfko.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpgfhuwfko.php\
    \ on line 22\n"
  timestamp: 1660028270
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  $values = array_filter($values, \"is_int\");\n  return array_values($values);\n\
    }\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  $ints = array();\n  foreach($values as $value) {\n    if(is_int($value))\
    \ {\n      $ints[] = $value;\n    }\n  }\n  return $ints;\n}\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n\t$filtered = [];\n\tforeach ($values as $value) {\n\t\tif (is_integer($value))\
    \ {\n\t\t\t$filtered[] = $value;\n\t\t}\n\t}\n\treturn $filtered;\n}\n\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $integers = array();\n    foreach($values as $value) {\n        if (is_int($value))\
    \ {\n            $integers[] = $value;\n        }\n    }\n    return $integers;\n\
    }\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter($values, function ($value) {\n        return filter_var($value,\
    \ FILTER_VALIDATE_INT) !== false;\n    });\n}\n</code>\n<|/ a dscore=4 |>\n<|\
    \ c |>\nGreat function. I've been looking for something like this for a while.\n\
    <|/ c |>\n<| a |>\nI recently used the following function in production and it\
    \ works great. The only thing is it doesn't allow you to pass NULL values but\
    \ that's not an issue for me.\n<code>\n/**\n * Filters array values using PHP's\
    \ filter function\n * \n *  array   $values\n *  array   $filters\n * \n * array\n\
    \ */\nprotected function filterArrayValues($values, $filters) {\n    if (!is_array($values))\
    \ {\n        return $values;\n    }\n\n    return array_filter(\n        $values,\n\
    \        function ($value) use ($filters) {\n            $key = array_search($value,\
    \ $filters);\n\n            if ($key !== false) {\n                return true;\n\
    \            }\n\n            return false;\n        }\n    );\n}\n</code>\n<|/\
    \ a dscore=4 tags=arrays,filtering,php |>\n<| c |>\nThis answer uses 2 functions:\
    \ array_filter and array_search. array_search is very slow, as it loops through\
    \ the array each time. So if you're filtering an array with 10 items, and you're\
    \ using array_search on 2 of the items, you'll be looping through your array 10\
    \ times instead of 2. To fix this, you just have to break out of the search early:\
    \ `if ($key !== false) { return true; }`\n<|/ c |>\n<| c |>\nThis solution also\
    \ removes the keys from the array.\n<|/ c |>\n<| a dscore=3 |>\nI used the code\
    \ below to solve a similar problem. It allows you to filter array data by specific\
    \ keys or values (in arrays) or both.\n<code>\nfunction candidate(...$args) {\n\
    \    return filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmphirdaitt.php
    on line 12

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  return array_filter($values, function ($value) {\n    return is_int($value);\n\
    \  });\n}\n</code>\n<|/ a dscore=1 tags=php,arrays |>\n<| c |>\nThat would filter\
    \ out *non-integers* too though, no? You want `is_int` to be true, not just an\
    \ integer.\n<|/ c |>\n<| c |>\nThanks, I've made the edit.\n<|/ c |>\n<| c |>\n\
    This is great to know.  I've never seen anything like that done in PHP.  Good\
    \ answer.\n<|/ c |>\n<| a tags=php,arrays |>\nI wrote this function to filter\
    \ out any string type values from the array and just leave integers and doubles\
    \ (floats as well)\n<code>\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpztu717af.php
    on line 12

    '
  timestamp: 1660028270
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $filtered = array();\n    foreach ($values as $value) {\n        if (is_int($value))\
    \ {\n            $filtered[] = $value;\n        }\n    }\n    return $filtered;\n\
    }\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    if (empty($values)) {\n        return array();\n    }\n    return array_filter($values,\
    \ 'is_int');\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp11mcx1ao.php:20\n\
    Stack trace:\n#0 /tmp/tmp11mcx1ao.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp11mcx1ao.php\
    \ on line 20\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $values = array_filter(array_map('intval', $values));\n    return array_values($values);\n\
    }\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkipa4wg9.php:18\n\
    Stack trace:\n#0 /tmp/tmpkipa4wg9.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpkipa4wg9.php\
    \ on line 18\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  $filtered = array();\n  foreach ($values as $value) {\n    if (is_numeric($value))\
    \ {\n      $filtered[] = $value;\n    }\n  }\n  return $filtered;\n}\n\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpotz56r7h.php:23\n\
    Stack trace:\n#0 /tmp/tmpotz56r7h.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpotz56r7h.php\
    \ on line 23\n"
  timestamp: 1660028270
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    if (!is_array($values)) {\n        return $values;\n    }\n    $ret =\
    \ array();\n    foreach($values as $v) {\n        if (is_int($v)) {\n        \
    \    $ret[] = $v;\n        }\n    }\n    return $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter($values, function ($value) {\n        if ($value\
    \ === null || $value === \"\") return null;\n        return filter_var($value,\
    \ FILTER_VALIDATE_INT);\n    });\n}\n</code>\n<|/ a dscore=5 tags=arrays,php,filter\
    \ |>\n<| c |>\nIf $value is array then how would you use array_filter?\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work well with multidimensional arrays. It only filters\
    \ the first array level.\n<|/ c |>\n<| c |>\nThis won't work if you're trying\
    \ to filter an `array` of values which themselves have an `array` as one of their\
    \ values. Only the outermost array will be filtered.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for multi dimensional arrays, as per the answer above this does.\n\
    <|/ c |>\n<| c |>\nWhy not use native `filter` method which is much faster (`array_filter`\
    \ takes about 4ms now and 3 or 4 times slower in previous versions).\n<|/ c |>\n\
    <| a dscore=5 |>\n<code>\n$a = array(\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\"\
    \ => array(\"e\" => array(\"f\" => 3)));\nfunction candidate(...$args) {\n   \
    \ return filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp00irtb_e.php
    on line 13

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  if (is_null($values)) {\n    return $values;\n  }\n  if (is_string($values))\
    \ {\n    $values = preg_split(\"/[, ]/\", $values);\n  }\n  foreach ($values as\
    \ $key => $value) {\n    if (is_string($value)) {\n      if (!preg_match(\"/^-?\\\
    d+$/\", $value)) {\n        unset($values[$key]);\n      }\n    }\n  }\n  return\
    \ $values;\n}\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_g_f__7_.php:29\n\
    Stack trace:\n#0 /tmp/tmp_g_f__7_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp_g_f__7_.php\
    \ on line 29\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n\treturn array_filter(\n\t\t$values,\n\t\tfunction ($value) {\n\t\t\treturn\
    \ is_int($value);\n\t\t}\n\t);\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0wn_1tw5.php:22\n\
    Stack trace:\n#0 /tmp/tmp0wn_1tw5.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp0wn_1tw5.php\
    \ on line 22\n"
  timestamp: 1660028270
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $integers = array();\n    foreach($values as $value) {\n        if (is_int($value))\
    \ {\n            $integers[] = $value;\n        }\n    }\n    return $integers;\n\
    }\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  return array_filter($values, function ($value) {\n    if (is_string($value))\
    \ {\n      return false;\n    }\n    return is_integer($value);\n  });\n}\n\n\
    function candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp891sbjxs.php:22\n\
    Stack trace:\n#0 /tmp/tmp891sbjxs.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp891sbjxs.php\
    \ on line 22\n"
  timestamp: 1660028270
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  $integers = array();\n  foreach ($values as $value) {\n    if (is_int($value))\
    \ {\n      $integers[] = $value;\n    }\n  }\n  return $integers;\n}\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter(\n        $values,\n        function ($value) {\n\
    \            return filter_var($value, FILTER_VALIDATE_INT) !== false;\n     \
    \   }\n    );\n}\n</code>\n<|/ a |>\n<| a tags=php,multidimensional-array,arrays\
    \ dscore=1 |>\nI had a similar problem, I needed a function that was capable of\
    \ filtering out unwanted data in a multidimensional array, and I found myself\
    \ using the following approach, which works well for me. It filters out empty\
    \ elements, removes empty elements, removes duplicates, removes duplicate values,\
    \ etc.\n<code>\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpz33i4xqs.php
    on line 15

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter($values, 'is_int');\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuc2obm6n.php:17\n\
    Stack trace:\n#0 /tmp/tmpuc2obm6n.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpuc2obm6n.php\
    \ on line 17\n"
  timestamp: 1660028227
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter($values, 'is_int');\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuc2obm6n.php:17\n\
    Stack trace:\n#0 /tmp/tmpuc2obm6n.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpuc2obm6n.php\
    \ on line 17\n"
  timestamp: 1660028227
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  $filtered = array();\n  foreach($values as $value) {\n    if(is_numeric($value))\
    \ {\n      $filtered[] = $value;\n    }\n  }\n  return $filtered;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI like this solution a lot because it doesn't rely on any sort\
    \ of filtering, however I went ahead and added my filter_integers function to\
    \ my question.  Your solution would work as well, just not sure if that'll be\
    \ of any use.\n<|/ c |>\n<| c |>\nThanks for the update, I'd have gone with a\
    \ custom filter like that if I was doing anything more than simple integers and\
    \ floats, but you have a better solution to that problem.\n<|/ c |>\n<| c |>\n\
    I just added an explanation to the answer, hope this clears things up a bit.\n\
    <|/ c |>\n<| a dscore=0 |>\nI think this is what you want:\n<code>\nif(is_array($numbers)\
    \ && is_array($numbers[0])) {\n  $numbers = array_map(function($number) { return\
    \ (int)$number; }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\n\
    I don't see this as being different than using filter_integers to return an array.\
    \  If this was a matter of just filtering integers, I would have accepted this\
    \ as the answer, but this solution returns an array of ints instead.\n<|/ c |>\n\
    <| c |>\nI didn't think of that, I thought you just wanted the numeric values\
    \ of the array.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpv4dhkvnk.php
    on line 16

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n\tforeach($values as $key => $value) {\n\t\tif (is_numeric($value)) unset($values[$key]);\n\
    \t}\n\treturn $values;\n}\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dam982s.php:19\n\
    Stack trace:\n#0 /tmp/tmp6dam982s.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp6dam982s.php\
    \ on line 19\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  return array_filter($values, \"is_int\");\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a |>\nI know this is a old question, but there is an other simple and fast\
    \ solution with array_walk\n<code>\narray_walk($array, function(&$value) {\n \
    \   if(is_int($value)){\n        $value = 0;\n    }\n});\n</code>\n<|/ a tags=php\
    \ dscore=2 |>\n<| c |>\nA small improvement: `array_walk($array, function(&$value)\
    \ { if (is_int($value)) { $value = 0; } });` This way you don't need to check\
    \ the type twice.\n<|/ c |>\n<| a dscore=1 |>\nFor me the accepted answer didn't\
    \ work for me, as it didn't change integers to floats, but it did work for all\
    \ values I tested with. \nI found this post which helped me to find a solution:\n\
    PHP - Sort arrays with string and numeric values at same time\n<code>\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpoixepb84.php
    on line 10

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  return array_filter($values, 'is_int');\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwpelyndv.php:17\n\
    Stack trace:\n#0 /tmp/tmpwpelyndv.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpwpelyndv.php\
    \ on line 17\n"
  timestamp: 1660028227
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  return array_filter($values, function ($value) {\n    return filter_var($value,\
    \ FILTER_VALIDATE_INT) !== false;\n  });\n}\n</code>\n<|/ a tags=arrays,php,multidimensional-array\
    \ dscore=4 |>\n<| a dscore=2 |>\nA simple foreach should do the trick:\n<code>\n\
    $ints = array_filter($ints, function($item) {\n    return is_int($item);\n});\n\
    </code>\n<|/ a tags=arrays,php,multidimensional-array |>\n<| c |>\nThat doesn't\
    \ work when there is an array inside.  For instance, \"array(1,2,3)\" will fail\
    \ the filter.\n<|/ c |>\n<| c |>\n: I haven't tested the code myself, I just copy-pasted\
    \ it from the question.\n<|/ c |>\n<| c |>\nI posted a working example; however,\
    \ it didn't handle nested arrays.  I modified it to be recursive.\n<|/ c |>\n\
    <| a dscore=1 tags=arrays,php,multidimensional-array |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpzqdkgfyc.php
    on line 12

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcws1skkh.php:19\n\
    Stack trace:\n#0 /tmp/tmpcws1skkh.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpcws1skkh.php\
    \ on line 19\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n\tif(!is_array($values)) return $values;\n\t$result = array();\n\tforeach($values\
    \ as $value) {\n\t\tif(is_numeric($value)) {\n\t\t\t$result[] = $value;\n\t\t\
    }\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb137mg78.php:24\n\
    Stack trace:\n#0 /tmp/tmpb137mg78.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpb137mg78.php\
    \ on line 24\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $integers = array();\n    foreach ($values as $key => $value) {\n   \
    \     if (!is_int($value)) {\n            continue;\n        }\n        $integers[]\
    \ = $key;\n    }\n    return $integers;\n}\nfunction candidate(...$args) {\n \
    \   return filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptssoucx0.php:23\n\
    Stack trace:\n#0 /tmp/tmptssoucx0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmptssoucx0.php\
    \ on line 23\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter(\n        $values,\n        function($value) {\n\
    \            return is_numeric($value) && intval($value) == $value;\n        }\n\
    \    );\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2c03g_li.php:22\n\
    Stack trace:\n#0 /tmp/tmp2c03g_li.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp2c03g_li.php\
    \ on line 22\n"
  timestamp: 1660028270
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $result = [];\n    foreach ($values as $value) {\n        if (is_integer($value))\
    \ {\n            $result[] = $value;\n        }\n    }\n    return $result;\n\
    }\n\n/**\n * Returns the provided value if an 'isset' condition passes, otherwise\
    \ returns false.\n *\n * @param mixed $value Value to return.\n * @return mixed\
    \ Value if isset condition is true; otherwise return false.\n */\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n\tforeach($values as $value) {\n\t\tif (is_int($value)) {\n\t\t\t$values[]\
    \ = $value;\n\t\t}\n\t}\n\treturn $values;\n}\nfunction candidate(...$args) {\n\
    \    return filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl6snneqc.php:21\n\
    Stack trace:\n#0 /tmp/tmpl6snneqc.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpl6snneqc.php\
    \ on line 21\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  $integers = array();\n  foreach ($values as $value) {\n    $integer = intval($value);\n\
    \    if (!empty($integer)) {\n      $integers[] = $integer;\n    }\n  }\n  return\
    \ $integers;\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpee7obumk.php:24\n\
    Stack trace:\n#0 /tmp/tmpee7obumk.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpee7obumk.php\
    \ on line 24\n"
  timestamp: 1660028270
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $integers = array();\n    foreach ($values as $value) {\n        if (is_integer($value))\
    \ {\n            $integers[] = $value;\n        }\n    }\n\n    return $integers;\n\
    }\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  if (is_null($values)) {\n    return $values;\n  }\n  if (is_int($values))\
    \ {\n    return array($values);\n  }\n  if (is_string($values) && preg_match('/^[0-9]+$/',\
    \ $values)) {\n    return array($values);\n  }\n  return $values;\n}\n\n/**\n\
    \ * Returns true if the given value is an integer.\n */\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphnqyuf3x.php:29\n\
    Stack trace:\n#0 /tmp/tmphnqyuf3x.php(33): test()\n#1 {main}\n  thrown in /tmp/tmphnqyuf3x.php\
    \ on line 29\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter($values, function ($value) {\n        return (float)\
    \ $value == (int) $value;\n    });\n}\n</code>\n<|/ a tags=php,arrays dscore=3\
    \ |>\n<| c |>\nNot sure why, but your function throws an error for me...\n`array_filter():\
    \ Argument #2 should be an array`\n<|/ c |>\n<| c |>\nThis one has `Undefined\
    \ offset` error for me, please check it again\n<|/ c |>\n<| c |>\nI fixed the\
    \ undefined offset error, but now it gives me `Undefined offset` error for all\
    \ the values.\n<|/ c |>\n<| c |>\nI have updated the answer, I tested it and it\
    \ works for me now.\n<|/ c |>\n<| c |>\nGreat! That fixed the issue with the undefined\
    \ offset errors. Now I just need to get the filter_integers() function working\
    \ correctly. Thank you very much for your help!\n<|/ c |>\n<| a dscore=3 tags=php,arrays\
    \ |>\nThis is a nice way to do it :\n<code>\n<?php\n$myArray = array(1, \"test\"\
    , 3, false, true, null, array(\"test\" => 1, \"foo\" => \"bar\", false), array(\"\
    test\" => 1, \"foo\" => \"bar\", false));\n\n$myArray = array_filter(array_map(function($value)\
    \ { return (is_string($value) && !is_numeric($value)) ? null : $value; }, $myArray));\n\
    \nprint_r($myArray);\n</code>\nThe output :\n<code>\nArray\n(\n    [2] => test\n\
    \    [4] => foo\n)\n</code>\n<|/ a |>\n<| c |>\nThis works. You can use a [closure](http://php.net/manual/en/functions.anonymous.php)\
    \ for simplicity.\n<|/ c |>\n<| a tags=php,arrays |>\nI ended up using this code\
    \ to filter an array for integers:\n<code>\n$array = array(2, 5, 'foo', 6, 7.1,\
    \ array('string' => 'string', 'bar' => 'baz', 'foo' => array()));\n\n$filtered\
    \ = array_filter($array, function ($value) {\n    return is_numeric($value);\n\
    });\n</code>\nWhich outputs:\n<code>\nArray\n(\n    [2] => 2\n    [3] => 5\n \
    \   [6] => 6\n    [7] => 7.1\n)\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n\
    Here's a slightly simpler solution:\n<code>\n$array = array(2, 3, \"foo\", 4,\
    \ 5.5, array(\"string\" => \"string\", \"bar\" \nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpwwh_5pqc.php
    on line 12

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    foreach($values as &$value) {\n        if (is_int($value)) {\n      \
    \      $value = intval($value);\n        }\n    }\n\n    return $values;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nYou can use array_walk and in_array\
    \ for this.\n<code>\narray_walk($arr, function(&$val, $key) {\n  if(is_numeric($val))\
    \ {\n    $val = intval($val);\n  }\n});\n</code>\n<|/ a tags=php,filter,arrays\
    \ |>\n<| c |>\nI agree. This should be the accepted answer. Much simpler than\
    \ the recursive function I was trying to create.\n<|/ c |>\n<| a dscore=1 |>\n\
    How about array_walk_recursive with a callback? \n<code>\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp5f6tpopd.php
    on line 16

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n\treturn array_filter($values, \"is_int\");\n}\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg4_6k1np.php:16\n\
    Stack trace:\n#0 /tmp/tmpg4_6k1np.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpg4_6k1np.php\
    \ on line 16\n"
  timestamp: 1660028227
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter(\n        $values,\n        function ($value) {\n\
    \            return filter_var($value, FILTER_VALIDATE_INT) !== false;\n     \
    \   }\n    );\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzb9ifume.php:22\n\
    Stack trace:\n#0 /tmp/tmpzb9ifume.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpzb9ifume.php\
    \ on line 22\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $values = (array)$values;\n    foreach ($values as $value) {\n      \
    \  if (is_numeric($value)) {\n            $values[] = $value;\n        }\n   \
    \ }\n    return $values;\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4q_o0rqr.php:23\n\
    Stack trace:\n#0 /tmp/tmp4q_o0rqr.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp4q_o0rqr.php\
    \ on line 23\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $values = array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n    return $values;\n}\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt7j9u5uo.php:19\n\
    Stack trace:\n#0 /tmp/tmpt7j9u5uo.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpt7j9u5uo.php\
    \ on line 19\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter($values, function($value) { return is_numeric($value);\
    \ });\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\nThe accepted answer will filter\
    \ strings as well, as they do not have a numeric value property.\nI came up with\
    \ the following function which uses is_numeric to check each value individually:\n\
    <code>\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpqhliknet.php
    on line 10

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  return array_filter(\n    $values,\n    function ($value) {\n      return\
    \ is_integer($value);\n    }\n  );\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\nThe\
    \ first example is working as expected. The second one doesn't because is_array($value)\
    \ returns false when $value is an array.\n<code>\n<?php\n$values = [1, 2, 3, 4,\
    \ 5];\n$values2 = [1, 2, \"foo\", \"bar\", 6];\n\n$values3 = [1, 2, 3, \"foo\"\
    , \"bar\", 6];\n\nvar_dump(filter_is_integer($values));\nvar_dump(filter_is_integer($values2));\n\
    var_dump(filter_is_integer($values3));\n\nfunction candidate(...$args) {\n   \
    \ return filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpkze4j1h9.php
    on line 15

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  return array_filter(\n    $values,\n    function ($value) {\n      return\
    \ is_int($value);\n    }\n  );\n}\n</code>\n<|/ a |>\n<| a tags=arrays,php,array-filter,multidimensional-array\
    \ |>\nYou can filter out only integer values by using array_filter()\n<code>\n\
    <?php\n$array = [\n    'a' => '1',\n    'b' => '2',\n    'c' => '3',\n    'd'\
    \ => 4,\n    'e' => 5,\n];\n\n$int_array = array_filter($array, function ($value)\
    \ {\n    return is_int($value);\n});\n\nprint_r($int_array);\n</code>\n<|/ a dscore=5\
    \ |>\n<| a tags=arrays,php,array-filter,multidimensional-array |>\nYou can apply\
    \ array_filter() to the array.\n<code>\n$array = array(\n    0 => 'test',\n  \
    \  1 => 'test1',\n    2 => 'test2',\n    3 => 'test3',\n    4 => 'test4',\n  \
    \  5 => 'test5',\n);\n$result = array_filter($array, 'is_numeric');\nprint_r($result);\n\
    </code>\n<|/ a dscore=5 |>\n<| a |>\nFor PHP 7.4 use array_filter with type hinting:\n\
    <code>\n$filtered = array_filter($array, function (?int $value) {\n    return\
    \ is_numeric($value);\n});\n</code>\n<|/ a tags=arrays,php,array-filter,multidimensional-array\
    \ dscore=5 |>\n<| c |>\nThis should be the right answer, as the other answers\
    \ are using PHP 7.4 type hinting\n<|/ c |>\n<| c |>\nIf you use $filtered = array_filter($array,\
    \ function (?int $value) {\n    return is_numeric($value);\n});\n<|/ c |>\n<|\
    \ a dscore=5 |>\nThe most efficient and simple way is to use array_filter() with\
    \ an anonymous function in PHP 5.3+:\n<code>\n$filtered = array_filter($array,\
    \ function($value) { return is_numeric($value); });\n</code>\n<|/ a tags=arrays,php,array-filter,multidimensional-array\
    \ |>\n<| a dscore=5 |>\n<code>\n$a = array('a'=>1, 'b'=>2, 'c'=>'3','d'=>4);\n\
    $filtered = array_filter($a, 'is_int');\n</code>\nThe function is_int is defined\
    \ in the PHP manual as this:\n<code>\nbool is_int ( mixed $var )\n</code>\nThe\
    \ function expects an array as first parameter and a callback that returns true\
    \ for values that are integers. A simple array is returned in this case.\nThe\
    \ filtered array will \nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp96xyw6l4.php
    on line 15

    '
  timestamp: 1660028270
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $result = [];\n    foreach ($values as $value) {\n        if (is_int($value))\
    \ {\n            $result[] = $value;\n        }\n    }\n    return $result;\n\
    }\n\n/**\n * Return the current system timestamp.\n * @return integer timestamp\n\
    \ */\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter($values, function($value) {\n        return is_int($value);\n\
    \    });\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\nYou can simply use in_array()\
    \ method\n<code>\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpo6q7cto8.php
    on line 12

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $result = array();\n    foreach ($values as $value) {\n        if (is_integer($value))\
    \ {\n            $result[] = $value;\n        }\n    }\n    return $result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI really like this approach. I actually had no\
    \ idea you could use PHP filters. Thanks!\n<|/ c |>\n<| a dscore=1 tags=php,arrays\
    \ |>\nYou could use a PHP script like this to output the array as a JSON string:\n\
    <code>\n<?php\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp45hiel3q.php
    on line 16

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n\tforeach ($values as &$value) {\n\t\tif (!is_numeric($value)) $value = null;\n\
    \t}\n\treturn array_values($values);\n}\n\nfunction candidate(...$args) {\n  \
    \  return filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp08f5788u.php:20\n\
    Stack trace:\n#0 /tmp/tmp08f5788u.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp08f5788u.php\
    \ on line 20\n"
  timestamp: 1660028270
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $integers = array();\n    foreach ($values as $value) {\n        if (is_int($value))\
    \ {\n            $integers[] = $value;\n        }\n    }\n\n    return $integers;\n\
    }\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $results = array();\n    foreach ($values as $value) {\n        if (is_int($value))\
    \ {\n            $results[] = $value;\n        }\n    }\n    return $results;\n\
    }\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028227
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  $integers = array();\n  foreach ($values as $value) {\n    if (is_int($value))\
    \ {\n      $integers[] = $value;\n    }\n  }\n  return $integers;\n}\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  foreach ($values as $value) {\n    if (is_int($value)) {\n      $values[]\
    \ = $value;\n    }\n  }\n\n  return $values;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    It's not just integers, it's strings and numeric values as well. Try with array(1,\
    \ \"a\", 3.14) you will get array as result\n<|/ c |>\n<| c |>\nYes, the code\
    \ is just an example to point the idea of a filter function for any kind of values/array/scalar\
    \ you pass to it. The only thing is to implement it for numeric values only.\n\
    <|/ c |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpk4wrs2y7.php
    on line 16

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  return array_filter($values, 'is_numeric');\n}\n</code>\n<|/ a tags=filter,arrays,php\
    \ |>\n<| a tags=filter,arrays,php |>\n<code>\nfunction candidate(...$args) {\n\
    \    return filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpnghczeym.php
    on line 10

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n</code>\n<|/ a tags=php,arrays,filter |>\n<| a tags=php,arrays,filter\
    \ dscore=1 |>\nHere is another solution using array_walk:\n<code>\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpe0bakeok.php
    on line 12

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter($values, function($value) {\n        return is_int($value);\n\
    \    });\n}\n</code>\n<|/ a tags=filtering,php,arrays |>\n<| a dscore=4 tags=filtering,php,arrays\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpqvg5z2i0.php
    on line 12

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter($values, function($value){\n        return !is_null($value)\
    \ && is_int($value);\n    });\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo4xwn1ul.php:19\n\
    Stack trace:\n#0 /tmp/tmpo4xwn1ul.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpo4xwn1ul.php\
    \ on line 19\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter($values, 'is_int');\n}\n</code>\n<|/ a dscore=1 tags=php,arrays\
    \ |>\n<| a dscore=1 |>\nThe question seems to want to remove all elements of a\
    \ certain type, whether they are strings or not.\nThe function array_filter can\
    \ achieve this by passing the callback function filter_integers to it.\n<code>\n\
    function candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpqorjk4eb.php
    on line 10

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter(\n        $values,\n        function($value) {\n\
    \            return (is_int($value));\n        }\n    );\n}\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoyn_hebn.php:21\n\
    Stack trace:\n#0 /tmp/tmpoyn_hebn.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpoyn_hebn.php\
    \ on line 21\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    if (!is_array($values)) {\n        $values = array($values);\n    }\n\
    \    $values = array_filter($values, 'is_int');\n    return $values;\n}\n\n/**\n\
    \ * Sort given array of any phpthon values only for integers\n * >>> filter_integers(array(\"\
    a\", 3.14, 5))\n * array(5)\n * >>> filter_integers(array(1, 2, 3, \"abc\", array(),\
    \ array()))\n * array(1, 2, 3)\n * @param mixed $values List of values\n * @return\
    \ array List of integers\n */\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3x3h5mne.php:30\n\
    Stack trace:\n#0 /tmp/tmp3x3h5mne.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp3x3h5mne.php\
    \ on line 30\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    if (!$values) return [];\n    $out = [];\n    $integers = [];\n    foreach\
    \ ($values as $value) {\n        $is_integer = is_numeric($value);\n        if\
    \ ($is_integer) {\n            $integers[] = $value;\n        } else {\n     \
    \       $out[] = $value;\n        }\n    }\n    return $integers ? array_unique($integers)\
    \ : [];\n}\n</code>\n<|/ a dscore=3 |>\n<| a |>\nHere's a variation that would\
    \ work for both string and numeric values, and allows you to use any number of\
    \ array elements:\n<code>\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpsv7874g_.php
    on line 21

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  return array_filter(array_map('intval', $values), function($value) {\n\
    \    return is_int($value);\n  });\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7dxbw95k.php:19\n\
    Stack trace:\n#0 /tmp/tmp7dxbw95k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp7dxbw95k.php\
    \ on line 19\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n\treturn array_filter($values, \"is_numeric\");\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbs2a4ros.php:17\n\
    Stack trace:\n#0 /tmp/tmpbs2a4ros.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpbs2a4ros.php\
    \ on line 17\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter(\n        $values,\n        function ($value) use\
    \ ($values) {\n            return filter_var($value, FILTER_VALIDATE_INT, FILTER_NULL_ON_FAILURE);\n\
    \        }\n    );\n}\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpynzsscmw.php:21\n\
    Stack trace:\n#0 /tmp/tmpynzsscmw.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpynzsscmw.php\
    \ on line 21\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    if (!is_array($values)) {\n        return $values;\n    }\n\n    // Return\
    \ only integer values\n    $filtered = array_filter(\n        $values,\n     \
    \   function ($value) {\n            return is_integer($value);\n        }\n \
    \   );\n    return $filtered;\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdu01x3fx.php:28\n\
    Stack trace:\n#0 /tmp/tmpdu01x3fx.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpdu01x3fx.php\
    \ on line 28\n"
  timestamp: 1660028270
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  $newValues = array();\n  foreach ($values as $value) {\n    if (is_int($value))\
    \ {\n      $newValues[] = $value;\n    }\n  }\n  return $newValues;\n}\n\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    if (!is_array($values)) return $values;\n    return array_filter($values,\
    \ \"is_int\");\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprftrj0r8.php:18\n\
    Stack trace:\n#0 /tmp/tmprftrj0r8.php(22): test()\n#1 {main}\n  thrown in /tmp/tmprftrj0r8.php\
    \ on line 18\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  if (!is_array($values)) return $values;\n  foreach ($values as $value)\
    \ {\n    if (!is_numeric($value) && !is_string($value)) {\n      return $values;\n\
    \    }\n  }\n  return $values;\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_g9g54o0.php:23\n\
    Stack trace:\n#0 /tmp/tmp_g9g54o0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp_g9g54o0.php\
    \ on line 23\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  $new_values = [];\n  foreach ($values as $value) {\n    // If value is\
    \ not an array (integer), then just keep it\n    if (is_array($value)) {\n   \
    \   $new_values = array_merge($new_values, filter_integers($value));\n      continue;\n\
    \    }\n    // If value is integer, then store it (convert any other values to\
    \ integers)\n    if (is_numeric($value)) {\n      $new_values[] = $value;\n  \
    \  }\n  }\n  return $new_values;\n}\n\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdcqtw6bh.php:29\n\
    Stack trace:\n#0 /tmp/tmpdcqtw6bh.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpdcqtw6bh.php\
    \ on line 29\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  return array_filter($values, 'is_int');\n}\n</code>\n<|/ a dscore=5 |>\n\
    <| a dscore=5 |>\nIn php 7 you can use the null coalescing operator. Something\
    \ like this :\n<code>\n$array = [1, null, 3, 'abc', null, null, null];\n\n$filtered\
    \ = array_filter(\n    $array, \n    fn($el) use ($defaultValue) {\n        return\
    \ $el ?? $defaultValue;\n    }\n);\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\n\
    This is awesome, thanks. I've been using it in various places to convert null\
    \ strings to empty strings when working with form data.\n<|/ c |>\n<| c |>\nThis\
    \ is a really nice solution - I like to use this in conjunction with array_filter\
    \ with array_key_exists so I can default only on values that exist.\n<|/ c |>\n\
    <| c |>\nNice solution. Also works great if you want to filter an array with a\
    \ function that checks whether an element exists and you dont want to modify the\
    \ original array.\n<|/ c |>\n<| c |>\nVery useful, very compact, thanks. I suggest\
    \ to add the `null` value at the start of the array to avoid `false` being returned\
    \ as an item of the filtered array.\n<|/ c |>\n<| c |>\nI believe you mean `$el\
    \ ?? $defaultValue;` and not `$el ? $defaultValue : $default;`\n<|/ c |>\n<| a\
    \ tags=php,arrays |>\nI believe there is a simple way to do this:\n<code>\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp5yn1dmod.php
    on line 10

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    if (!is_array($values)) {\n        return $values;\n    }\n    return\
    \ array_filter($values, \"is_int\");\n}\n\n/**\n * Filters given array of any\
    \ phpthon values only for floats\n * >>> filter_floats(array(\"a\", 3.14, 5))\n\
    \ * array(3.14)\n * >>> filter_floats(array(1, 2, 3, \"abc\", array(), array()))\n\
    \ * array(1.2, 2.3, 3.14)\n *\n * @param   mixed $values Array to filter values\n\
    \ * @return  array       Filtered values array\n */\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkq7ptjob.php:30\n\
    Stack trace:\n#0 /tmp/tmpkq7ptjob.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpkq7ptjob.php\
    \ on line 30\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    $results = array();\n    foreach($values as $value) {\n        $is_integer\
    \ = is_numeric($value);\n        if($is_integer) {\n            $results[] = $value;\n\
    \        }\n    }\n    return $results;\n}\n\nfunction candidate(...$args) {\n\
    \    return filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjzkr71hu.php:24\n\
    Stack trace:\n#0 /tmp/tmpjzkr71hu.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpjzkr71hu.php\
    \ on line 24\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  global $db;\n  $result = array();\n\n  foreach($values as $value) {\n \
    \   if (is_numeric($value)) {\n      $result[] = $value;\n    }\n  }\n\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjrx92wof.php:26\n\
    Stack trace:\n#0 /tmp/tmpjrx92wof.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpjrx92wof.php\
    \ on line 26\n"
  timestamp: 1660028270
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    if (is_array($values)) {\n        $values = array_filter($values, function($value)\
    \ {\n            return is_int($value);\n        });\n        return array_values($values);\n\
    \    }\n\n    return array();\n}\n\n/**\n * Recursively search all children and\
    \ return all child elements as array.\n * If array is empty return empty array.\n\
    \ *\n * @param $value\n * @param $recursive\n *\n * @return array\n */\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter(\n        $values,\n        function ($item) {\n\
    \            return is_integer($item);\n        }\n    );\n}\n\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz5pdmkyk.php:22\n\
    Stack trace:\n#0 /tmp/tmpz5pdmkyk.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpz5pdmkyk.php\
    \ on line 22\n"
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    foreach ($values as $v) {\n        if (is_int($v)) {\n            $values[]\
    \ = $v;\n        } elseif (is_string($v)) {\n            $values[] = filter_var($v,\
    \ FILTER_VALIDATE_INT);\n        }\n    }\n    return $values;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nThe downside is that this is less flexible than just\
    \ validating the array in the view itself (which is better practice anyway)\n\
    <|/ c |>\n<| a |>\nI created an abstract filter that you can use to validate any\
    \ given input value. It works with any type of input.\n<code>\nabstract class\
    \ AbstractFilter\n{\n    /**\n     * InputInterface\n     */\n    protected $input;\n\
    \n    public function __construct(InputInterface $input = null)\n    {\n     \
    \   $this->input = $input;\n    }\n\n    public function validateInput(array $input)\n\
    \    {\n        $errors = [];\n\n        foreach ($input as $key => $value) {\n\
    \            $valid = $this->validateValue($value);\n            if (!$valid)\
    \ {\n                $errors[$key] = $this->getErrorMessage($value);\n       \
    \     }\n        }\n\n        return $errors;\n    }\n\n    public abstract function\
    \ validateValue(mixed $value);\n\n    protected function getErrorMessage(mixed\
    \ $value)\n    {\n        return \"\";\n    }\n\n    public function getInput()\n\
    \    {\n        return $this->input;\n    }\n}\n</code>\nAnd use it like this:\n\
    <code>\nclass IntegerFilter extends AbstractFilter\n{\n    public function validateValue($value)\n\
    \    {\n        if (!is_int($value)) {\n            return false;\n        }\n\
    \n        return true;\n    }\n\n    public function getErrorMessage($value)\n\
    \    {\n        return \"Integer value expected\";\n    }\n}\n</code>\nAnd then\
    \ use it like this:\n<code>\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp5fyvcl5n.php
    on line 17

    '
  timestamp: 1660028270
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n\t$filtered = [];\n\tforeach ($values as $value) {\n\t\tif (is_int($value))\
    \ $filtered[] = $value;\n\t}\n\treturn $filtered;\n}\nfunction candidate(...$args)\
    \ {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4,\
    \ 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"\
    c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    if (!is_array($values)) return $values;\n    if (count($values) < 1)\
    \ return $values;\n    foreach ($values as &$value) {\n        if (is_array($value))\
    \ {\n            $value = array_filter($value);\n        }\n        elseif (!is_int($value)\
    \ && $value !== null) {\n            $value = 0;\n        }\n    }\n    return\
    \ $values;\n}\n</code>\n<|/ a |>\n<| c |>\n`filter_integers` returns `false` when\
    \ an empty array is passed: `filter_integers(array())` returns `array(0)`. To\
    \ get around this, you can do `if(count($values)) {...`\n<|/ c |>\n<| a dscore=4\
    \ |>\nI have created a PHP function that works quite well for me:\n<code>\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp98vf1jpx.php
    on line 20

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n  $filtered = array();\n  foreach($values as $value) {\n    if (is_numeric($value))\
    \ {\n      $filtered[] = $value;\n    }\n  }\n  return $filtered;\n}\n\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1qoeig57.php:23\n\
    Stack trace:\n#0 /tmp/tmp1qoeig57.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp1qoeig57.php\
    \ on line 23\n"
  timestamp: 1660028270
- exit_code: 0
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    if (!is_array($values)) {\n        return array();\n    }\n    $out =\
    \ array();\n    foreach ($values as $value) {\n        if (is_int($value)) {\n\
    \            $out[] = $value;\n        }\n    }\n    return $out;\n}\n\nfunction\
    \ candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
    )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter($values, function($value) {\n        return is_int($value);\n\
    \    });\n}\n</code>\n<|/ a |>\n<| a |>\nI needed something similar and I ended\
    \ up using array_walk and array_map as follows:\n<code>\n<?php\n$array = array(\"\
    hello\", \"world\", \"123\", \"abc\");\narray_walk($array, function($element,\
    \ $key) use (&$filtered) {\n    if (is_string($element)) {\n        if ($element\
    \ == 'abc') {\n            $filtered[$key] = $element;\n        }\n    }\n});\n\
    var_dump($filtered);\n</code>\n<|/ a dscore=2 tags=arrays,php,filtering,key,arrays\
    \ |>\n<| a |>\nUse array_filter instead:\n<code>\n$filtered = array_filter($array,\
    \ function($item) {\n    return $item == 'abc';\n});\n</code>\nThis works by passing\
    \ a callback function to the array_filter function. Inside the function, you check\
    \ the item and if it matches, you remove it.\n<|/ a dscore=2 tags=arrays,php,filtering,key,arrays\
    \ |>\n<| a dscore=2 |>\nI needed to filter out array values not in the keys. array_filter()\
    \ was perfect but only worked on string values. What I needed was a way to filter\
    \ out array values that weren't the key, so i did this:\n<code>\n$filtered = array_filter($array);\n\
    foreach($filtered as $key => $value) {\n    if ($value != $key) unset($array[$key]);\n\
    }\n</code>\nI needed this because I was using array_filter() on an array that\
    \ contained objects i needed to keep and array_filter() only worked with string\
    \ values. \nThis was a super simple example, but for anyone else who may find\
    \ it useful:\n<code>\n$filtered = array_filter($array, function ($value) {\n \
    \   if ($value->getId() === $id) {\n        return $value;\n    }\n});\n</code>\n\
    <|/ a tags=arrays,php,filtering,key,arrays |>\n<| a tags=arrays,php,filtering,key,arrays\
    \ |>\nYou can achieve this using array_filter and in_array functions:\n<code>\n\
    $filteredArray = array_filter($array, function($value){\n  return in_array($value,\
    \ 'abc');\n});\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n$filtered = array_filter($array,\
    \ function($key) use ($keyArray) {\n    if($key === $keyArray[0]) {\n        return\
    \ true;\n    }\n    return false;\n});\n</code>\n<|/ a tags=arrays,php,filtering,key,arrays\
    \ dscore=1 \nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpkkjhblch.php
    on line 12

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    foreach($values as &$value) {\n        if(!is_int($value)) {\n      \
    \      return false;\n        }\n    }\n    return $values;\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| c |>\nHow about `filter_input`? http://stackoverflow.com/questions/207655/how-do-i-parse-the-post-data-in-a-php-script\n\
    <|/ c |>\n<| c |>\n`filter_input` would also not work because it only deals with\
    \ GET and POST data\n<|/ c |>\n<| c |>\nBut `filter_input` has its uses. And its\
    \ not my question :)\n<|/ c |>\n<| c |>\nAnd you even didn't mention it ;) But\
    \ anyway, good answer. Thanks.\n<|/ c |>\n<| c |>\nYeah, but it would also not\
    \ work for this purpose anyway, so `filter_input` would be just fine. Of course\
    \ `filter_input` would not work for every usecase, so it would be a good idea\
    \ to define what is allowed (and what not)\n<|/ c |>\n<| a |>\nThe above answers\
    \ are correct, but I thought I'd add one more:\nPHP has a function called filter_var()\
    \ which is great for filtering strings.  It will return a boolean value if the\
    \ variable matches the criteria.\n<code>\n<?php\n\n$number = '3.14159';\n\nif(\
    \ filter_var( $number, FILTER_VALIDATE_FLOAT ) )\n{\n  echo \"It's a float!\"\
    ;\n}\n\nif( filter_var( $number, FILTER_VALIDATE_INT ) )\n{\n  echo \"It's an\
    \ integer!\";\n}\n</code>\n<|/ a tags=validation,filter,php,integer dscore=2 |>\n\
    <| c |>\nThe downside is that it also filters valid floats: `\"123abc\"` is valid.\
    \ However `\"0.123\"` is not.\n<|/ c |>\n<| c |>\nGood point!  I'll add in a note\
    \ to the answer.\n<|/ c |>\n<| a dscore=2 |>\nI guess this is the best way to\
    \ do this without using regex.\n<code>\nfunction candidate(...$args) {\n    return\
    \ filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !==\
    \ array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpn9kr8iqw.php
    on line 15

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter($values, 'is_int');\n}\n</code>\nThe is_int function\
    \ (from http://www.php.net/manual/en/function.is-int.php)\n<code>\n/**\n * Checks\
    \ if a value is a valid integer\n *\n *   mixed $var Value to check\n * bool\n\
    \ */\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmppjqt8s5y.php
    on line 10

    '
  timestamp: 1660028270
- exit_code: 255
  program: "<?php\n// Filter given array of any phpthon values only for integers\n\
    // >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1,\
    \ 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values)\
    \ {\n    return array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n\nfunction candidate(...$args) {\n    return filter_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(),\
    \ 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcws1skkh.php:19\n\
    Stack trace:\n#0 /tmp/tmpcws1skkh.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpcws1skkh.php\
    \ on line 19\n"
  timestamp: 1660028270
