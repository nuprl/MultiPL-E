language: php
name: HumanEval_26_remove_duplicates
results:
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  if (empty($numbers)) {\n    return array();\n  }\n  $result = array();\n\
    \  // Track how many times the element is in input.\n  $count = array();\n  foreach\
    \ ($numbers as $number) {\n    $count[$number] += 1;\n  }\n  foreach ($count as\
    \ $number => $count) {\n    if ($count == 1) {\n      $result[] = $number;\n \
    \   }\n  }\n  return $result;\n}\n\n/**\n * Remove duplicates from $array and\
    \ return new array.\n * @param  array $array Array to remove duplicates from\n\
    \ * @return array New array with duplicates removed.\n */\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 1 in /tmp/tmpktqneqb4.php on line 14


    Warning: Undefined array key 2 in /tmp/tmpktqneqb4.php on line 14


    Warning: Undefined array key 3 in /tmp/tmpktqneqb4.php on line 14


    Warning: Undefined array key 4 in /tmp/tmpktqneqb4.php on line 14


    Warning: Undefined array key 1 in /tmp/tmpktqneqb4.php on line 14


    Warning: Undefined array key 2 in /tmp/tmpktqneqb4.php on line 14


    Warning: Undefined array key 3 in /tmp/tmpktqneqb4.php on line 14


    Warning: Undefined array key 4 in /tmp/tmpktqneqb4.php on line 14


    Warning: Undefined array key 5 in /tmp/tmpktqneqb4.php on line 14

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $indexed = [];\n  foreach($numbers as $number) {\n    $indexed[$number]\
    \ = $number;\n  }\n  return array_filter($indexed);\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx0p2kuwr.php:19\n\
    Stack trace:\n#0 /tmp/tmpx0p2kuwr.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpx0p2kuwr.php\
    \ on line 19\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  // Create a new empty result array.\n  $results = array();\n\n  // Loop\
    \ through all input numbers. If an number has already been added,\n  // ignore\
    \ it.\n  foreach($numbers as $number) {\n    // If the number has not already\
    \ been added, add it.\n    if(!in_array($number, $results)) {\n      $results[]\
    \ = $number;\n    }\n  }\n\n  // Return the new array.\n  return $results;\n}\n\
    </code>\n<|/ a tags=arrays,php,sorting,algorithm |>\n<| c |>\nI guess you just\
    \ forgot to add `array_unique` at the end.\n<|/ c |>\n<| c |>\nNope, it is the\
    \ right answer. This is a common problem in many programming languages. BTW, `array_count_values()`\
    \ also has a `sort` parameter that allows you to reverse the order of the values.\n\
    <|/ c |>\n<| a |>\nHere's my solution. I think it's fairly efficient (O(n) on\
    \ average and O(nlogn) on worst case). Of course, it doesn't use array_count_values.\
    \ But it's very simple.\n<code>\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpzv6_c5ky.php
    on line 22

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $counts = array_count_values($numbers);\n  $filtered = array();\n  foreach\
    \ ($numbers as $number) {\n    if ( !empty($counts[$number]) && $counts[$number]\
    \ > 1 ) {\n      $filtered[] = $number;\n    }\n  }\n  return $filtered;\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8d5_8x99.php:22\n\
    Stack trace:\n#0 /tmp/tmp8d5_8x99.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp8d5_8x99.php\
    \ on line 22\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $duplicates = array();\n  foreach ($numbers as $number) {\n    if (in_array($number,\
    \ $duplicates)) {\n      unset($numbers[array_search($number, $duplicates)]);\n\
    \    } else {\n      $duplicates[] = $number;\n    }\n  }\n  return $numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl78szbjd.php:25\n\
    Stack trace:\n#0 /tmp/tmpl78szbjd.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpl78szbjd.php\
    \ on line 25\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $output = array();\n  foreach ($numbers as $i => $number) {\n    if (!isset($output[$number]))\
    \ {\n      $output[$number] = 1;\n    } else {\n      $output[$number]++;\n  \
    \  }\n  }\n  return array_filter(array_keys($output));\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps8nm357a.php:25\n\
    Stack trace:\n#0 /tmp/tmps8nm357a.php(28): test()\n#1 {main}\n  thrown in /tmp/tmps8nm357a.php\
    \ on line 25\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$counts = array_count_values($numbers);\n\t$result = [];\n\tforeach ($counts\
    \ as $number => $count) {\n\t\tif ($count > 1) {\n\t\t\t$result[] = $number;\n\
    \t\t}\n\t}\n\treturn $result;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph5fmjy6m.php:22\n\
    Stack trace:\n#0 /tmp/tmph5fmjy6m.php(26): test()\n#1 {main}\n  thrown in /tmp/tmph5fmjy6m.php\
    \ on line 22\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $uniques = [];\n  foreach ($numbers as $key => $number) {\n    if (! in_array($number,\
    \ $uniques, true)) {\n      $uniques[] = $number;\n    }\n  }\n  return $uniques;\n\
    }\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_122ae6i.php:22\n\
    Stack trace:\n#0 /tmp/tmp_122ae6i.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_122ae6i.php\
    \ on line 22\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $number) {\n    if (!isset($result[$number]))\
    \ {\n      $result[$number] = true;\n    } else {\n      unset($result[$number]);\n\
    \    }\n  }\n\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm7hie_1c.php:25\n\
    Stack trace:\n#0 /tmp/tmpm7hie_1c.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpm7hie_1c.php\
    \ on line 25\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  return array_filter(\n    $numbers,\n    function ($item) use ($numbers)\
    \ {\n      // If the value has been seen already or is equal to the current value,\n\
    \      // ignore this item.\n      if (isset($items) || !in_array($item, $numbers))\
    \ {\n        return TRUE;\n      }\n      // Otherwise, mark this item as seen,\
    \ and return TRUE.\n      $numbers[] = $item;\n      return FALSE;\n    }\n  );\n\
    }\n</code>\n<|/ a tags=php |>\n<| c |>\nI got this error: \"Warning: array_map():\
    \ Argument #2 should be an array in\" when I tried to use your function. Can you\
    \ help me out why is that ?\n<|/ c |>\n<| c |>\nIt looks like you called `array_map`\
    \ with an invalid argument, e.g. `$array = \"one\", \"two\", \"three\", \"one\"\
    ` instead of `$array = array(\"one\", \"two\", \"three\", \"one\")`\n<|/ c |>\n\
    <| c |>\nThank you for the answer, I already found a solution using array_unique\
    \ but I'm curious why this error happened, I'm sure I already used array_map like\
    \ this and it worked fine. Can you please explain the problem ?\n<|/ c |>\n<|\
    \ a tags=php dscore=2 |>\nI ran into this problem when trying to use array_unique\
    \ on a string which contained an \"&\" which was causing it to fail.\n<code>\n\
    $string = ' &';\n$arr = array_unique($string);\n</code>\nSo for anyone else that\
    \ runs into this problem, I would recommend using html_entity_decode() before\
    \ you run array_unique().\n<|/ a |>\n<| a dscore=1 |>\nI found the solution after\
    \ debugging.\nI was trying to run the function like so\n<code>\n$var1 = remove_duplicates(array(1,\
    \ 2, 3, 2, 4));\n</code>\nand that's what I did to make it work\n<code>\n$var1\
    \ = remove_duplicates(array(1,2,3,2));\n</code>\nAnd that's why it didn't work.\n\
    Sorry if my question was silly, I only started learning php recently and I didn't\
    \ know how to debug this so I wasn't really sure what was causing the problem.\n\
    <|/ a tags=php |>\n<| c |>\nThis is actually a very good debugging technique!\
    \ You can find these bugs in literally hundreds of lines of code, all over the\
    \ web, all over the Internet. Just google \"how to debug php\" and you'll be on\
    \ your way. Good luck!\n<|/ c |>\n<| a tags=php |>\nI ran into a similar issue\
    \ (array_unique was failing because my array contained \"&\" \nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp3pv6t1dx.php
    on line 21

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    // First, group by value\n    $grouped = array();\n    foreach ($numbers\
    \ as $number) {\n        $grouped[$number] = $number;\n    }\n\n    // Next, sort\
    \ the values by key\n    ksort($grouped);\n\n    // Finally, return the values\
    \ corresponding to the keys\n    return array_values($grouped);\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa0p7idzw.php:27\n\
    Stack trace:\n#0 /tmp/tmpa0p7idzw.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpa0p7idzw.php\
    \ on line 27\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  return array_reduce($numbers, 'array_merge', array());\n}\n</code>\n<|/\
    \ a dscore=5 |>\n<| a dscore=3 |>\nIn case you want to remove duplicates from\
    \ a multidimensional array, here is an example:\n<code>\n$arr = array(\n   0 =>\
    \ array('email' => '', 'name' => 'John Doe'),\n   1 => array('email' => '', 'name'\
    \ => 'Jane Doe'),\n   2 => array('email' => '', 'name' => 'John Doe'),\n);\n\n\
    $arr = array_map(\"unserialize\", array_unique(array_map(\"serialize\", $arr)));\n\
    </code>\n<|/ a tags=php,arrays |>\n<| a dscore=3 |>\nYou could use array_unique()\
    \ and serialize() to convert array values to strings and compare them with another\
    \ array:\n<code>\n$a = array(\n    array('email' => '', 'name' => 'John Doe'),\n\
    \    array('email' => '', 'name' => 'Jane Doe'),\n    array('email' => '', 'name'\
    \ => 'John Doe')\n);\n$b = array();\nforeach ($a as $k=>$v) {\n    $c = serialize($v);\n\
    \    if (in_array($c, $b)) {\n        unset($a[$k]);\n    } else {\n        $b[]\
    \ = $c;\n    }\n}\n$a = array_unique($a);\nprint_r($a);\n</code>\nOutput:\n<code>\n\
    Array\n(\n    [0] => Array\n        (\n            [email] => \n            [name]\
    \ => John Doe\n        )\n\n    [2] => Array\n        (\n            [email] =>\
    \ \n            [name] => Jane Doe\n        )\n\n)\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nIf you do array_unique on $a, you will lose the keys of the original\
    \ array. That's a drawback of using array_unique for multidimensional arrays.\
    \ So I thought I'd mention it here!\n<|/ c |>\n<| c |>\n: I guess the problem\
    \ was in fact that you wanted to preserve the keys. I'll update my answer.\n<|/\
    \ c |>\n<| c |>\nActually array_unique won't work on multidimensional arrays.\
    \ You can see it here http://codepad.viper-7.com/LrXp7i\n<|/ c |>\n<| c |>\n:\
    \ That's interesting, it works fine for me. Did you test it on multiple versions\
    \ of PHP? I tested on 5.5 and 5.6 and it worked fine.\n<|/ c |>\n<| c |>\nThe\
    \ link you provided was the correct one. I tested it on \nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpbxcqnt21.php
    on line 9

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  // Create a copy so we don't affect original array.\n  $numbers = array_values($numbers);\n\
    \  // Loop through input array and remember index of number we've seen.\n  //\
    \ If the number hasn't been seen before, add it to the output array.\n  $index\
    \ = -1;\n  foreach ($numbers as $number) {\n    if ($index == -1) {\n      $index\
    \ = $number;\n    }\n    if ($index != $number) {\n      $numbers[] = $index;\n\
    \    }\n  }\n  return $numbers;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp04r7xsn5.php:28\n\
    Stack trace:\n#0 /tmp/tmp04r7xsn5.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp04r7xsn5.php\
    \ on line 28\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $number) {\n    if (!isset($result[$number]))\
    \ {\n      $result[$number] = 1;\n    } else {\n      $result[$number]++;\n  \
    \  }\n  }\n  return array_filter($result);\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ c |>\nWhy do you pass `1` as the second argument of `array_search`?\n<|/ c |>\n\
    <| c |>\nI rewrote it a bit.\n<|/ c |>\n<| a tags=php,arrays,arrays dscore=1 |>\n\
    You can use this function also,\n<code>\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpjsn6767k.php
    on line 17

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $nodupes = [];\n\n  foreach ($numbers as $number) {\n    if (in_array($number,\
    \ $nodupes)) {\n      continue;\n    }\n    $nodupes[] = $number;\n  }\n\n  return\
    \ $nodupes;\n}\n</code>\n<|/ a |>\n<| a dscore=3 tags=arrays,php,duplicates |>\n\
    array_count_values will work for most situations. But for associative arrays you'll\
    \ need to write some more code. For instance:\n<code>\n$array = [\n    1 => 2,\n\
    \    1 => 5,\n    3 => 4,\n    3 => 5,\n    5 => 2,\n];\n\n$result = array_filter($array,\
    \ function($value, $key) use (&$result) {\n    if (isset($result[$key])) {\n \
    \       $result[$key] += $value;\n        return true;\n    }\n\n    $result[$key]\
    \ = $value;\n    return false;\n});\n\nprint_r($result);\n</code>\nThis outputs:\n\
    <code>\nArray\n(\n    [1] => 3\n    [2] => 2\n    [3] => 4\n    [5] => 2\n)\n\
    </code>\n<|/ a |>\n<| c |>\n`array_count_values` isn't really what you want. It\
    \ counts duplicates by value, not the value by key. You would need to use an associative\
    \ array to count by key\n<|/ c |>\n<| a dscore=3 |>\nI've found this one useful:\n\
    <code>\n$input = array(\n    array('id'=>1, 'name'=>'foo'),\n    array('id'=>2,\
    \ 'name'=>'bar'),\n    array('id'=>3, 'name'=>'foo'),\n);\n\n$output = [];\n\n\
    foreach ($input as $row) {\n    $rowId = $row['id'];\n    if (isset($output[$rowId]))\
    \ {\n        $output[$rowId]++;\n    } else {\n        $output[$rowId] = 1;\n\
    \    }\n}\n\nprint_r($output);\n</code>\n<|/ a tags=arrays,php,duplicates |>\n\
    <| a dscore=2 |>\nAnother way I wrote it in one line:\n<code>\n$array = array_count_values(array_map(function\
    \ ($el) {\n    return $el[0];\n}, $array));\n</code>\n<|/ a tags=arrays,php,duplicates\
    \ |>\n<| a dscore=2 tags=arrays,php,duplicates |>\n<code>\n$input_array = array(\n\
    \    array(1, \"A\"),\n    array(2, \"A\"),\n    array(3, \"B\"),\n    array(4,\
    \ \"A\"),\n);\n\n$output_array = array();\n\nforeach ($input_array as $key \n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpvfrrhucp.php
    on line 18

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $result)) {\n      $result[] = $number;\n    }\n  }\n  return $result;\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgum09ubg.php:22\n\
    Stack trace:\n#0 /tmp/tmpgum09ubg.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgum09ubg.php\
    \ on line 22\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $unique = [];\n  $duplicates = [];\n  foreach ($numbers as $number) {\n\
    \    if (in_array($number, $unique)) {\n      $duplicates[] = $number;\n    }\
    \ else {\n      $unique[] = $number;\n    }\n  }\n  return $unique;\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbqjya74g.php:26\n\
    Stack trace:\n#0 /tmp/tmpbqjya74g.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbqjya74g.php\
    \ on line 26\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$unique_numbers = array();\n\tforeach($numbers as $number) {\n\t\tif (in_array($number,\
    \ $unique_numbers)) {\n\t\t\tunset($numbers[array_search($number, $unique_numbers)]);\n\
    \t\t} else {\n\t\t\t$unique_numbers[] = $number;\n\t\t}\n\t}\n\treturn $numbers;\n\
    }\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2g4extm8.php:24\n\
    Stack trace:\n#0 /tmp/tmp2g4extm8.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp2g4extm8.php\
    \ on line 24\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    // copy numbers so we don't damage original array\n    $numbers = $numbers\
    \ + array();\n    $result = array();\n    foreach ($numbers as $number) {\n  \
    \      if (in_array($number, $result)) {\n            continue;\n        }\n \
    \       $result[] = $number;\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc3hj2omd.php:25\n\
    Stack trace:\n#0 /tmp/tmpc3hj2omd.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpc3hj2omd.php\
    \ on line 25\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $numbers = array_values($numbers);\n    $results = [];\n    $seen = [];\n\
    \    foreach ($numbers as $number) {\n        if (!in_array($number, $seen)) {\n\
    \            $seen[] = $number;\n            $results[] = $number;\n        }\n\
    \    }\n    return $results;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjetr5fg0.php:26\n\
    Stack trace:\n#0 /tmp/tmpjetr5fg0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjetr5fg0.php\
    \ on line 26\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    sort($numbers);\n\n    // First pass, remove all duplicates while preserving\
    \ order\n    $result = array();\n    foreach ($numbers as $num) {\n        if\
    \ (!in_array($num, $result)) {\n            $result[] = $num;\n        }\n   \
    \ }\n\n    // Second pass, rebuild input array\n    return array_diff_key($numbers,\
    \ $result);\n}\n</code>\n<|/ a |>\n<| a |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpna7hwicx.php
    on line 20

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  return array_filter(array_count_values($numbers), function ($count) {\n\
    \    return $count > 1;\n  });\n}\n</code>\nThis can be combined with array_map\
    \ to produce a result array:\n<code>\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpr6s923jw.php
    on line 11

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $return = array();\n\n    $count = array_count_values($numbers);\n\n\
    \    foreach ($count as $number => $count2) {\n        if ($count2 > 1) {\n  \
    \          $return[] = $number;\n        }\n    }\n\n    return $return;\n}\n\
    </code>\n<|/ a tags=arrays,php |>\n<| c |>\nNice! But how do I use it with my\
    \ array? How do I put that function in my array? It still returns an empty array\n\
    <|/ c |>\n<| c |>\nWhat do you mean? `remove_duplicates(array(1,2,1,2,4,5))` returns\
    \ `array(1,2,4,5)`.\n<|/ c |>\n<| c |>\nIt's a function that receives an array\
    \ of integers and removes duplicate elements.  I updated my answer with how to\
    \ use it.\n<|/ c |>\n<| a dscore=1 |>\nYou can use array_count_values to count\
    \ the array and remove elements if the count is greater than one:\n<code>\n$array\
    \ = [1,2,1,2,4,5,6,2,7,8,9,1,10,11,12,13,14];\n$counts = array_count_values($array);\n\
    \nforeach ($counts as $num => $val) {\n    if ($val > 1) {\n        unset($array[$num]);\n\
    \    }\n}\n\nprint_r($array);\n</code>\nOutput:\n<code>\nArray\n(\n    [0] =>\
    \ 1\n    [1] => 2\n    [2] => 4\n    [3] => 5\n    [4] => 6\n    [5] => 7\n  \
    \  [6] => 8\n    [7] => 9\n    [8] => 10\n    [9] => 11\n    [10] => 12\n    [11]\
    \ => 13\n    [12] => 14\n)\n</code>\nDemo on 3v4l.org\n<|/ a tags=arrays,php |>\n\
    <| a tags=arrays,php |>\nYou can use array_reduce() which iterates over the array\
    \ only once, and it creates a new array. Just make sure you return $newArr and\
    \ set the accumulator to an empty array $acc = [].\n<code>\n$arr = [1,2,1,2,4,5,6,2,7,8,9,1,10,11,12,13,14];\n\
    \n$newArr = array_reduce($arr, function($acc, $num) {\n    return !isset($acc[$num])\
    \ ? [$num] : [];\n}, []);\n\nprint_r($newArr);\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a |>\nUse array_filter:\n<code>\n$arr = [1,2,1,2,4,5,6,2,7,8,9,1,10,11,12,13,14];\n\
    \n$result = array_filter($arr, function($value){\n    return !in_array($value,\
    \ $result);\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp40w8n0u4.php
    on line 19

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $numbers = array_unique($numbers);\n  asort($numbers);\n  return $numbers;\n\
    }\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnx73cwtk.php:18\n\
    Stack trace:\n#0 /tmp/tmpnx73cwtk.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpnx73cwtk.php\
    \ on line 18\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = array();\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $result)) {\n            $result[] = $number;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0clzbs5l.php:23\n\
    Stack trace:\n#0 /tmp/tmp0clzbs5l.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp0clzbs5l.php\
    \ on line 23\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    foreach ($numbers as $key => $value) {\n        if (in_array($value,\
    \ $numbers)) {\n            unset($numbers[$key]);\n        }\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl_12ozat.php:21\n\
    Stack trace:\n#0 /tmp/tmpl_12ozat.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpl_12ozat.php\
    \ on line 21\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    // Sort the numbers in descending order\n    sort($numbers);\n    $uniqueNumbers\
    \ = array();\n    $uniqueNumbersCount = array();\n\n    foreach ($numbers as $number)\
    \ {\n        if ($number != 1) {\n            $uniqueNumbers[] = $number;\n  \
    \          $uniqueNumbersCount[$number]++;\n        }\n    }\n\n    foreach ($uniqueNumbers\
    \ as $number => $count) {\n        if ($count == 1) {\n            unset($uniqueNumbers[$number]);\n\
    \            unset($uniqueNumbersCount[$number]);\n        }\n    }\n\n    return\
    \ array_values($uniqueNumbers);\n}\n</code>\n<|/ a dscore=2 tags=arrays,php |>\n\
    <| a tags=arrays,php |>\n<code>\n$array = [1,1,2,2,3,3];\n\n$result = array_filter($array,\
    \ function($v){\n    return !in_array($v, $array);\n});\n</code>\n<|/ a dscore=2\
    \ |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpscrrxq0n.php
    on line 28

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $index = array();\n  $count = array();\n  // Sort the input in reverse\
    \ order and start at the first element\n  rsort($numbers);\n  foreach ($numbers\
    \ as $i => $num) {\n    if (!isset($index[$num])) {\n      $index[$num] = $i;\n\
    \      $count[$num] = 1;\n    } else {\n      $count[$num]++;\n    }\n  }\n  //\
    \ Remove from input elements until a non-duplicate element is found\n  for ($i\
    \ = count($numbers) - 1; $i >= 0; $i--) {\n    if ($count[$i] === 1) {\n     \
    \ unset($numbers[$index[$numbers[$i]]]);\n    }\n  }\n  return $numbers;\n}\n\n\
    $numbers = array(\n  \"1\",\"1\",\"1\",\"2\",\"2\",\"2\",\"3\",\"3\",\"3\",\"\
    4\",\"4\",\"4\",\"5\",\"5\",\"5\",\"6\",\"6\",\n  \"7\",\"7\",\"8\",\"9\",\"10\"\
    ,\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\n  \"\
    21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"\
    32\",\"33\",\"34\",\n  \"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\"\
    ,\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\n  \"49\",\"50\",\"51\",\"52\",\"\
    53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\n  \"63\"\
    ,\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\"\
    ,\"75\",\"76\",\n  \"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"\
    85\",\"86\",\"87\",\"88\",\"89\",\"90\",\n  \"91\",\"92\",\"93\",\"94\",\"95\"\
    ,\"96\",\"97\",\"98\",\"99\",\"100\",\"101\",\"102\",\"103\",\n  \"104\",\"105\"\
    ,\"106\",\"107\",\"108\",\"109\",\"110\",\"111\",\"112\",\"113\",\"114\",\"115\"\
    ,\n  \"116\",\"117\",\"118\",\"119\",\"120\",\"121\",\"122\",\"123\",\"124\",\"\
    125\",\"126\",\"127\",\n  \"128\",\"129\",\"130\",\"131\",\"132\",\"133\",\"134\"\
    ,\"135\",\"136\",\"137\",\"138\",\"139\",\n  \"140\",\"141\",\"142\",\"143\",\"\
    144\",\"145\",\"146\",\"147\",\"148\",\"149\",\"150\",\"151\",\n  \"152\",\"153\"\
    ,\"154\",\"155\",\"156\",\"\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Test", expecting ")" in /tmp/tmpkusw_urv.php
    on line 47

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  if (count($numbers) < 2) return $numbers;\n  $sorted = array_keys(array_flip($numbers));\n\
    \  return array_merge(array_diff($numbers, $sorted), $sorted);\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2wnwk2qa.php:19\n\
    Stack trace:\n#0 /tmp/tmp2wnwk2qa.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp2wnwk2qa.php\
    \ on line 19\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $counts = array_count_values($numbers);\n  $result = [];\n  foreach ($numbers\
    \ as $number) {\n    if ($counts[$number] > 1) {\n      $result[] = $number;\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9035gf3_.php:23\n\
    Stack trace:\n#0 /tmp/tmp9035gf3_.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp9035gf3_.php\
    \ on line 23\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  foreach ($numbers as $key => $number) {\n    if ($numbers[$key] == $number)\
    \ {\n      unset($numbers[$key]);\n    }\n  }\n  return $numbers;\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpan6y7i4z.php:21\n\
    Stack trace:\n#0 /tmp/tmpan6y7i4z.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpan6y7i4z.php\
    \ on line 21\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $results = [];\n    $seen = [];\n    foreach ($numbers as $number) {\n\
    \        $seen[$number] = true;\n        $results[$number] = $number;\n    }\n\
    \    return $results;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo4g82kr.php:22\n\
    Stack trace:\n#0 /tmp/tmpqo4g82kr.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpqo4g82kr.php\
    \ on line 22\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  sort($numbers);\n  $result = array();\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $result)) {\n      $result[] = $number;\n    }\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbcbmsgsp.php:24\n\
    Stack trace:\n#0 /tmp/tmpbcbmsgsp.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpbcbmsgsp.php\
    \ on line 24\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  // Return an empty array if null is passed in.\n  if (!is_array($numbers))\
    \ {\n    return array();\n  }\n\n  // Use a list to maintain the order of the\
    \ input numbers.\n  $list = array();\n  foreach ($numbers as $number) {\n    if\
    \ (!in_array($number, $list)) {\n      $list[] = $number;\n    }\n  }\n\n  //\
    \ Return an array with duplicate values removed.\n  return $list;\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpza3uogxl.php:31\n\
    Stack trace:\n#0 /tmp/tmpza3uogxl.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpza3uogxl.php\
    \ on line 31\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  // Use an associative array, so the order doesn't get messed up while we\n\
    \  // filter it.\n  $result = array();\n  foreach ($numbers as $number) {\n  \
    \  $result[$number] = $number;\n  }\n\n  // Remove all the keys (that are still\
    \ present).\n  unset($result);\n\n  // Now reorder all the values.\n  ksort($result);\n\
    \n  // Return the result.\n  return $result;\n}\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nNice and simple, but I think it could be slightly optimized by removing\
    \ `$numbers` from `array_count_values`.  As it is an expensive operation (it needs\
    \ to iterate over the entire array), it might not be a good idea to call it on\
    \ every call.\n<|/ c |>\n<| c |>\nIt probably doesn't make much difference, but\
    \ it's good to have the option in case someone wants to remove duplicates whilst\
    \ maintaining the order. :)\n<|/ c |>\n<| c |>\nI like the way you set this up\
    \ to use an associative array for $results. I used an array and it seems to work\
    \ fine. Though I had to change `$result[$number]` to `$result[$number] = $number`\
    \ to make it work. Thanks!\n<|/ c |>\n<| c |>\nNice solution. Thanks :)\n<|/ c\
    \ |>\n<| c |>\nGreat solution. Could I use this for associative arrays of non-numerical\
    \ keys as well?\n<|/ c |>\n<| a tags=php dscore=5 |>\nTo remove duplicates from\
    \ a multidimensional array (where arrays have the same keys), you can use a custom\
    \ function, like this:\n<code>\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpz7_695kz.php
    on line 23

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $numbers = array_values($numbers);\n    $result = [];\n    $size = count($numbers);\n\
    \    for ($i = 0; $i < $size; $i++) {\n        $result[$i] = $numbers[$i];\n \
    \       for ($j = ($i+1); $j < $size; $j++) {\n            if ($numbers[$i] ==\
    \ $numbers[$j]) {\n                unset($numbers[$j]);\n            } else {\n\
    \                break;\n            }\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1k_jvb7e.php:30\n\
    Stack trace:\n#0 /tmp/tmp1k_jvb7e.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1k_jvb7e.php\
    \ on line 30\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  return array_filter($numbers, function ($number) {\n    return count($numbers)\
    \ == 1 || $numbers[$number-1] != $number;\n  });\n}\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThanks for your input. This is similar to my original code. I'm sure\
    \ this was the first answer, however, I posted mine since it came first. Thanks\
    \ for the help!\n<|/ c |>\n<| c |>\nI agree. Mine was an example of a more efficient\
    \ way to write it, but I thought it was the point of the question to demonstrate\
    \ how to use `array_reduce`. I only added a comment to that effect.\n<|/ c |>\n\
    <| a tags=arrays,sorting,php |>\n<code>\n$array1 = array(3,5,2,1,6,4,3,2,5);\n\
    $array2 = array(6,5,4,1,5,2,5,6);\n$array3 = array(7,8,9);\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmph4uwdfus.php
    on line 11

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $num) {\n    if (!isset($result[$num]))\
    \ {\n      $result[$num] = 1;\n    } else {\n      $result[$num]++;\n    }\n \
    \ }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnxeb6_jc.php:24\n\
    Stack trace:\n#0 /tmp/tmpnxeb6_jc.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpnxeb6_jc.php\
    \ on line 24\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    $seen = [];\n\n    foreach ($numbers as $number) {\n\
    \        if (!isset($seen[$number])) {\n            $seen[$number] = true;\n \
    \           $result[] = $number;\n        }\n    }\n\n    return $result;\n}\n\
    </code>\n<|/ a dscore=1 tags=php,algorithm,arrays |>\n<| a |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp_lejz_zw.php
    on line 19

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = array();\n\n    foreach ($numbers as $number) {\n        if\
    \ (!in_array($number, $result)) {\n            $result[] = $number;\n        }\n\
    \    }\n\n    return $result;\n}\n</code>\nAs for why this solution works, you\
    \ can be sure that by putting a print_r($numbers) before the return $numbers;\
    \ line, the code would behave exactly as expected. \nBy comparing the $result\
    \ with the $numbers array before inserting into the array, you ensure that the\
    \ array $numbers is a unique array and hence the duplicates would not be included\
    \ in $result. By comparing the $result with the $numbers array before inserting\
    \ the numbers into $result, you ensure that the array $result has all the numbers\
    \ in it as unique numbers, since we are inserting them into the $result array\
    \ from $numbers via array_push() function, they do not have to be repeated. This\
    \ ensures that when an element is inserted into the array $result, it is not inserted\
    \ into the array $numbers or vice-versa.\n<code>\nprint_r($numbers);\n\nprint_r($result);\n\
    \nforeach ($numbers as $number) {\n    if (!in_array($number, $result)) {\n  \
    \      $result[] = $number;\n    }\n}\n\nprint_r($result);\n</code>\nThis is how\
    \ it works: \nThe first print_r() before return $numbers; would print the array\
    \ $numbers, which is as follows:\n<code>\nArray\n(\n    [0] => 1\n    [1] => 2\n\
    \    [2] => 3\n    [3] => 2\n    [4] => 4\n)\n</code>\nAfter the return $numbers\
    \ line, the array $numbers is as follows:\n<code>\nArray\n(\n    [0] => 1\n  \
    \  [1] => 2\n    [2] => 3\n    [3] => 2\n    [4] => 4\n)\n</code>\nThe second\
    \ print_r() after return $numbers; would print the array $result. As you can see\
    \ from the previous print_r($numbers), even though the duplicated numbers are\
    \ included in this array, the duplicates themselves are not shown as duplicates\
    \ in the array, as shown by print_r($result). \nAs the $result array contains\
    \ all the numbers in it as unique numbers, we do not need to add them again to\
    \ $numbers as they are already unique numbers. Hence, we remove the duplicates\
    \ before inserting them into $result array.\n<code>\nprint_r($numbers);\n\nprint_r($result);\n\
    \nforeach ($numbers as $number) {\n    if (!in_array($number, $result)) {\n  \
    \      $result[] = $number;\n    }\n}\n\nprint_r($result);\n</code>\nThis time,\
    \ when the duplicated numbers are included in $result array, they are not duplicated\
    \ in $numbers and hence the duplicates appear in $\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpbcvfy22g.php
    on line 17

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    foreach($numbers as $n) {\n        if (in_array($n,\
    \ $result)) {\n            continue;\n        }\n        $result[] = $n;\n   \
    \ }\n    return $result;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbu6ecbcv.php:23\n\
    Stack trace:\n#0 /tmp/tmpbu6ecbcv.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpbu6ecbcv.php\
    \ on line 23\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $seen = array();\n  return array_filter($numbers, function($number) {\n\
    \    if (in_array($number, $seen)) {\n      return false;\n    }\n    $seen[]\
    \ = $number;\n    return true;\n  });\n}\n</code>\n<|/ a tags=php,arrays dscore=2\
    \ |>\n<| c |>\nThanks for pointing that out. I updated the answer to include the\
    \ original code.\n<|/ c |>\n<| a |>\nYou can use a foreach loop with in_array()\
    \ like this:\n<code>\n$array1 = array();\n$array2 = array();\n\nforeach ($array1\
    \ as $key => $value) {\n    if (in_array($value, $array2)) {\n        unset($array1[$key]);\n\
    \    } else {\n        $array2[] = $value;\n    }\n}\n</code>\n<|/ a tags=php,arrays\
    \ dscore=0 |>\n<| c |>\nThanks, I added an explanation of why this won't work.\n\
    <|/ c |>\n<| a tags=php,arrays dscore=0 |>\nYou should be able to use array_search\
    \ to get the index of each value, and then use unset to remove those values from\
    \ $array1.\n<code>\n$array1 = array(1,2,2,3,4,4);\n\nforeach($array1 as $index\
    \ => $value) {\n    if($array2 = array_search($value, $array1)) { \n        unset($array1[$index]);\n\
    \    }\n}\n</code>\n<|/ a |>\n<| c |>\nThanks, I added an explanation of why this\
    \ won't work.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$array1 = array(1,2,2,3,4,4);\n\
    \nforeach($array1 as $value) {\n  if(in_array($value, $array2)) {\n    unset($array1[$value]);\n\
    \  }\n}\n\nprint_r($array1);\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpccchp5cz.php
    on line 16

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  $count = count($numbers);\n  for ($i = 0; $i < $count;\
    \ $i++) {\n    $x = $numbers[$i];\n    if (!isset($result[$x])) {\n      $result[$x]\
    \ = $x;\n    } else {\n      unset($numbers[$i]);\n    }\n  }\n  return $result;\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis solution only works if the\
    \ input is strictly an array. As soon as you start adding objects, like in this\
    \ case: `$numbers = [new StdClass(), new StdClass()]`, it won't work.\n<|/ c |>\n\
    <| c |>\nThis solution assumes you are only dealing with integers though. If you\
    \ want a solution which deals with other types of values (strings, objects, etc),\
    \ you can look at this answer: https://stackoverflow.com/a/9276444/11138917\n\
    <|/ c |>\n<| a tags=php,arrays |>\nThe simple way\n<code>\n$arr = [\"1\" => 1,\
    \ \"2\" => 2, \"3\" => 3, \"4\" => 4];\n$arr2 = [];\nforeach ($arr as $key =>\
    \ $value) {\n    if ( !isset($arr2[$value]) ) {\n        $arr2[$value] = $key;\n\
    \    }\n}\n\n$arr2 = array_values($arr2);\nprint_r($arr2);\n</code>\n<|/ a dscore=4\
    \ |>\n<| a dscore=4 |>\nA simple one:\n<code>\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp_nqt5ofx.php
    on line 19

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  return array_reduce($numbers, function ($result, $element) {\n    if (!in_array($element,\
    \ $result)) {\n      $result[] = $element;\n    }\n    return $result;\n  }, array());\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4a9fnvhf.php:22\n\
    Stack trace:\n#0 /tmp/tmp4a9fnvhf.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp4a9fnvhf.php\
    \ on line 22\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  $last_value = null;\n  foreach ($numbers as $value) {\n\
    \    if ($value === $last_value) {\n      continue;\n    }\n    $result[] = $value;\n\
    \    $last_value = $value;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbcyiq743.php:26\n\
    Stack trace:\n#0 /tmp/tmpbcyiq743.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbcyiq743.php\
    \ on line 26\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $noDupes = array();\n\n  foreach($numbers as $number) {\n    if ( ! in_array($number,\
    \ $noDupes)) {\n      $noDupes[] = $number;\n    }\n  }\n\n  return $noDupes;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphjqpixwx.php:25\n\
    Stack trace:\n#0 /tmp/tmphjqpixwx.php(28): test()\n#1 {main}\n  thrown in /tmp/tmphjqpixwx.php\
    \ on line 25\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    return array_filter(array_count_values($numbers), function ($count) {\n\
    \        return $count > 1;\n    });\n}\n</code>\nIf you want your array to be\
    \ ordered by the first occurrence, then use ksort:\n<code>\n$input = array(2,\
    \ 3, 5, 7, 2, 2, 5);\n$input = ksort($input);\nprint_r($input);\n</code>\nOutput:\n\
    <code>\nArray\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n    [3] => 5\n   \
    \ [4] => 7\n    [5] => 5\n)\n</code>\n<|/ a dscore=5 |>\n<| c |>\nHow about if\
    \ the input is `array(1, 2, 3, 2, 2, 4, 4)`?\n<|/ c |>\n<| c |>\n: I updated the\
    \ answer. It now works for your example too.\n<|/ c |>\n<| c |>\n: I changed my\
    \ answer a little bit\n<|/ c |>\n<| c |>\n: Oops, I didn't noticed that. I removed\
    \ my comments because they aren't relevant anymore.\n<|/ c |>\n<| c |>\nIt will\
    \ also remove all elements except the first\n<|/ c |>\n<| a dscore=5 tags=php\
    \ |>\nTry something like:\n<code>\n$arr = array(1, 2, 3, 2, 2, 4, 4);\n$arr =\
    \ array_count_values($arr);\n$arr = array_filter($arr, function ($item) {\n  \
    \  return $item > 1;\n});\n</code>\n<|/ a |>\n<| c |>\nWhat about if the input\
    \ array is `array(1, 2, 3, 2, 2, 4, 4)`?\n<|/ c |>\n<| c |>\nIt will also remove\
    \ all elements except the first\n<|/ c |>\n<| c |>\nIt will remove all elements\
    \ but the first and all subsequent elements have only 1 occurence. So, in this\
    \ case it will remove all except `array(2)`\n<|/ c |>\n<| c |>\nThis does not\
    \ work as expected in case there is more than 1 occurence for a number like 1,1,2,2.\
    \ In the result will be the second number - 1.\n<|/ c |>\n<| a tags=php |>\nYou\
    \ can use array_count_values and array_filter to remove all elements which have\
    \ less than or equal to 1 occurence\n<code>\n$data = array(1,2,2,3,3,4,5,5,5,5,6,7,7,7,7,8);\n\
    \n$result = array_count_values($data);\n$result = array_filter($result, function\
    \ ($value) {\n    return $value < 2;\n});\n\nprint_r($result);\n</code>\n<|/ a\
    \ dscore=4 |>\n<| a tags=php \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpubl6dlv1.php
    on line 11

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $new_array = array();\n    foreach ($numbers as $number) {\n        if\
    \ (!in_array($number, $new_array)) {\n            $new_array[] = $number;\n  \
    \      }\n    }\n    return $new_array;\n}\n\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcauj5n_9.php:23\n\
    Stack trace:\n#0 /tmp/tmpcauj5n_9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpcauj5n_9.php\
    \ on line 23\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  // Sort input in increasing order.\n  sort($numbers);\n\n  // Use a boolean\
    \ to keep track of the numbers we have seen already.\n  $seen = [];\n\n  // Now\
    \ loop over the numbers.\n  foreach ($numbers as $number) {\n    // If the number\
    \ has already been seen, skip it\n    if (isset($seen[$number]) && $seen[$number])\
    \ {\n      unset($seen[$number]);\n      continue;\n    }\n\n    // If we haven't\
    \ seen the number yet, add it.\n    $seen[$number] = 1;\n    $numbers[] = $number;\n\
    \  }\n\n  return $numbers;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5gzi7z87.php:34\n\
    Stack trace:\n#0 /tmp/tmp5gzi7z87.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp5gzi7z87.php\
    \ on line 34\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $filtered = array();\n    foreach($numbers as $num) {\n        if (!in_array($num,\
    \ $filtered)) {\n            $filtered[] = $num;\n        }\n    }\n    return\
    \ $filtered;\n}\n</code>\n<|/ a |>\n<| c |>\nThis seems to work perfectly for\
    \ me!  It also keeps the original order of the original input array.\n<|/ c |>\n\
    <| c |>\nGreat! But you should consider using array_unique() as suggested below.\
    \ Because it can save you a lot of time.\n<|/ c |>\n<| c |>\nThe order of `array_unique`\
    \ is inconsistent when it is used with objects or arrays that contain the value\
    \ as a member variable, e.g. `$x = ['a' => $b]; array_unique($x);` would not preserve\
    \ the order of the array in the source code.\n<|/ c |>\n<| c |>\n`array_unique`\
    \ can not be used here because its behavior differs from `array_unique` when used\
    \ with objects. But I think your comment should be put in answer.\n<|/ c |>\n\
    <| c |>\nThe reason `array_unique` doesn't work here is that it relies on some\
    \ very specific behaviour of PHP objects: that they implement `__toString` and\
    \ an internal `_getLastError` function that is called before `array_unique` gets\
    \ called.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$input = array( 1 => 1, 2 => 2,\
    \ 3 => 1, 4 => 4, 5 => 5, 6 => 5, 7 => 6 );\n$input = array_unique( $input );\n\
    </code>\nWill give you\n<code>\nArray ( \n    [0] => 1 \n    [2] => 2 \n    [3]\
    \ => 4 \n    [4] => 5 \n    [6] => 5 \n    [7] => 6 \n)\n</code>\n<|/ a tags=php,arrays,unique\
    \ |>\n<| c |>\nBut will it keep the order of the original input array?\n<|/ c\
    \ |>\n<| c |>\nIt will keep the same order\n<|/ c |>\n<| c |>\nYes it will keep\
    \ the original order\n<|/ c |>\n<| c |>\nBut it will also remove duplicated elements.\n\
    <|/ c |>\n<| c |>\nIt keeps the original order but removes duplicated elements.\n\
    <|/ c |>\n<| a dscore=5 tags=php,arrays,unique |>\n<code>\n$input = [\n    1 =>\
    \ 1,\n    2 => 2,\n    3 => 1,\n    4 => 4,\n    5 => 5,\n    6 => 5,\n    7 =>\
    \ \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp_kqfy2pr.php
    on line 15

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $unique = [];\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $unique)) {\n      $unique[] = $number;\n    }\n  }\n  return $unique;\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf99nez7_.php:22\n\
    Stack trace:\n#0 /tmp/tmpf99nez7_.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpf99nez7_.php\
    \ on line 22\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $unique_numbers = array();\n\n  foreach ($numbers as $number) {\n    if\
    \ (array_search($number, $unique_numbers) === false) {\n      $unique_numbers[]\
    \ = $number;\n    }\n  }\n\n  return $unique_numbers;\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8fgmyu0s.php:24\n\
    Stack trace:\n#0 /tmp/tmp8fgmyu0s.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp8fgmyu0s.php\
    \ on line 24\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  return array_filter($numbers, function($number) {\n    return count($numbers)\
    \ == 1 || count($numbers) == 0;\n  });\n}\nfunction candidate(...$args) {\n  \
    \  return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $numbers in /tmp/tmpg4rotx2w.php on line\
    \ 8\n\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, null given in /tmp/tmpg4rotx2w.php:8\nStack trace:\n\
    #0 [internal function]: {closure}(1)\n#1 /tmp/tmpg4rotx2w.php(9): array_filter(Array,\
    \ Object(Closure))\n#2 /tmp/tmpg4rotx2w.php(12): remove_duplicates(Array)\n#3\
    \ /tmp/tmpg4rotx2w.php(17): candidate(Array)\n#4 /tmp/tmpg4rotx2w.php(21): test()\n\
    #5 {main}\n  thrown in /tmp/tmpg4rotx2w.php on line 8\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    return array_filter($numbers, function($value) use (&$numbers) {\n  \
    \      if (in_array($value, $numbers)) {\n            array_splice($numbers, array_search($value,\
    \ $numbers), 1);\n        }\n    });\n}\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2\
    \ |>\nYou can use array_filter with an anonymous function as callback:\n<code>\n\
    $numbers = array(1,2,3,2,4,5,5,6,7);\n$uniques = array_filter($numbers, function($n){\n\
    \    return count($numbers) == count(array_filter($numbers, function($n){\n  \
    \      return $n == $n;\n    }));\n});\nprint_r($uniques);\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a tags=arrays,php dscore=1 |>\nYou can use the array_filter function\
    \ with a closure and keep count of duplicate entries.\n<code>\n$numbers = array(1,2,3,2,4,5,5,6,7);\n\
    $duplicates = array_filter($numbers, function($item) use(&$count) {\n    global\
    \ $count;\n    $count++;\n    return $item == $item;\n});\n</code>\nThe use keyword\
    \ keeps a \"global\" count of the duplicates.\n<|/ a |>\n<| a tags=arrays,php\
    \ dscore=1 |>\nThis works by checking if each element in the array has already\
    \ been seen before or not. By using a temporary array it works in O(n) time and\
    \ O(1) space, where n is the number of elements in the input array\n<code>\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpdvlroxuy.php
    on line 13

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  return array_filter(\n    $numbers,\n    function ($number) {\n      return\
    \ !isset($results[$number]);\n    },\n    ARRAY_FILTER_USE_BOTH\n  );\n}\n</code>\n\
    <|/ a tags=php dscore=4 |>\n<| c |>\nThis is an excellent answer. I would suggest\
    \ also adding a bit of explanation, to clarify how this works.\n<|/ c |>\n<| c\
    \ |>\nThe array is passed by reference, meaning that any changes to the variable\
    \ will be reflected in the original array.  It will still be available after the\
    \ `array_unique` as `array_unique` returns a new array.  See http://php.net/manual/en/language.references.pass.php.\n\
    <|/ c |>\n<| a |>\n<code>\n$arr = array();\n$arr[] = '1';\n$arr[] = '2';\n$arr[]\
    \ = '2';\n$arr[] = '3';\n$arr[] = '4';\n$arr[] = '5';\n$arr[] = '5';\n$arr[] =\
    \ '6';\n$arr[] = '7';\n$arr[] = '8';\n$arr[] = '8';\n$arr[] = '9';\n$arr[] = '9';\n\
    \n$arr = array_unique($arr);\n$arr = array_merge($arr, array_count_values($arr));\n\
    $arr = array_filter($arr);\n$arr = array_values($arr);\n\necho '<pre>';\nprint_r($arr);\n\
    </code>\n<|/ a dscore=4 tags=php |>\n<| a |>\nTry this:\n<code>\n$result = array_unique(array_merge($arr1,\
    \ $arr2));\n</code>\nThe above code should do the trick.\n<|/ a dscore=4 tags=php\
    \ |>\n<| a tags=php |>\nUse array_unique and array_count_values\n<code>\n$arr\
    \ = array(1, 2, 3, 2, 3, 4);\n$arr2 = array(5, 2, 7, 8, 8, 7);\n$arr = array_count_values(array_unique($arr));\n\
    print_r($arr);\n</code>\n<|/ a dscore=4 |>\n<| a tags=php |>\nIf your array is\
    \ numerically indexed this should do the trick:\n<code>\n$array1 = array(1, 2,\
    \ 3);\n$array2 = array(4, 5, 6);\n\n$new_array = array_merge($array1, $array2);\n\
    $new_array = array_unique($new_array);\n$new_array = array_values($new_array);\n\
    </code>\n<|/ a dscore=3 |>\n<| a tags=php |>\nHere is another one that doesn't\
    \ use array_count_values and \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpxp36jocw.php
    on line 15

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $unique = array();\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $unique)) {\n      $unique[] = $number;\n    }\n  }\n  return $unique;\n}\n\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq6n2v8a2.php:23\n\
    Stack trace:\n#0 /tmp/tmpq6n2v8a2.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpq6n2v8a2.php\
    \ on line 23\n"
  timestamp: 1659978687
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $arraySize = count($numbers);\n    $return = array();\n    for ($i =\
    \ 0; $i < $arraySize; $i++) {\n        for ($j = $i; $j < $arraySize; $j++) {\n\
    \            if ($numbers[$i] == $numbers[$j]) {\n                unset($numbers[$j]);\n\
    \            }\n        }\n        if (count($numbers) <= 1) {\n            return\
    \ $numbers;\n        }\n    }\n    return $return;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp_2ux6i4z.php on line 11\n\n\
    Warning: Undefined array key 0 in /tmp/tmp_2ux6i4z.php on line 11\n\nWarning:\
    \ Undefined array key 0 in /tmp/tmp_2ux6i4z.php on line 11\n\nWarning: Undefined\
    \ array key 1 in /tmp/tmp_2ux6i4z.php on line 11\n\nWarning: Undefined array key\
    \ 1 in /tmp/tmp_2ux6i4z.php on line 11\n\nWarning: Undefined array key 2 in /tmp/tmp_2ux6i4z.php\
    \ on line 11\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_2ux6i4z.php:28\n\
    Stack trace:\n#0 /tmp/tmp_2ux6i4z.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_2ux6i4z.php\
    \ on line 28\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $output = [];\n    $hash = [];\n    foreach ($numbers as $number) {\n\
    \        if (!isset($hash[$number])) {\n            $output[] = $number;\n   \
    \         $hash[$number] = true;\n        }\n    }\n    return $output;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI didn't know that `array_unique` uses `==` instead of `===`.\
    \ Nice one!\n<|/ c |>\n<| c |>\nThe array_unique function will work only with\
    \ associative arrays. So you should convert you array to associative by adding\
    \ `array_change_key_case` to the beginning of the function like this `$numbers\
    \ = array_change_key_case(array_unique($numbers));`\n<|/ c |>\n<| a |>\nA very\
    \ simple way would be\n<code>\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp05rk8psr.php
    on line 17

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  return array_filter(\n    $numbers,\n    function ($number) {\n      return\
    \ count($numbers) == 1 || in_array($number, $numbers);\n    }\n  );\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nGreat function! Unfortunately, the OP was asked to\
    \ not use `array_filter()`.\n<|/ c |>\n<| c |>\n- I disagree. `array_filter` is\
    \ perfectly good for this task. No need to reinvent the wheel.\n<|/ c |>\n<| c\
    \ |>\nYeah, it definitely is - but I believe he wants to avoid the additional\
    \ function call in the `in_array()` check, which is what `array_filter()` provides.\
    \ I agree that this is the best answer for this particular problem, but the OP\
    \ specifically said he didn't want to use `array_filter()`.\n<|/ c |>\n<| c |>\n\
    I agree. `array_filter` should definitely be used for this!\n<|/ c |>\n<| c |>\n\
    \"`array_filter()` provides\" - what does that mean? `array_filter` calls `in_array`\
    \ internally.\n<|/ c |>\n<| a dscore=1 |>\nYou want to use a counter for this.\n\
    <code>\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpozrh5vmh.php
    on line 14

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = array();\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $result)) {\n            $result[] = $number;\n        }\n    }\n    return\
    \ $result;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nIf you have an array of ints,\
    \ how do you do this? `array(1, 2, 3, 2, 4)` gives me `Warning: in_array() expects\
    \ parameter 2 to be array, int given`\n<|/ c |>\n<| c |>\nThis is very old but\
    \ i think the answer is better than the accepted one.\n<|/ c |>\n<| c |>\nSure,\
    \ the accepted one is better but this one is more elegant and works in PHP 5.2+\n\
    <|/ c |>\n<| c |>\nGreat answer. Nice solution. :)\n<|/ c |>\n<| c |>\nThe accepted\
    \ answer is not working for me, when trying to use this on an array of strings.\n\
    <|/ c |>\n<| a tags=arrays,php |>\nA simple way to remove duplicates in php is\
    \ to use the array_unique function.\nIf you have an array of strings you need\
    \ to apply a little function to the array before you use array_unique.\n<code>\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpptp446bo.php
    on line 15

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $results = [];\n  foreach ($numbers as $number) {\n    if (!isset($results[$number]))\
    \ {\n      $results[$number] = $number;\n    }\n  }\n  return $results;\n}\n</code>\n\
    <|/ a tags=php,arrays,sorting |>\n<| c |>\nThe first solution worked for me. Just\
    \ want to say that for PHP 7 replace `array_unique()` with `array_column()`\n\
    <|/ c |>\n<| c |>\nThis should really be the accepted answer. Nice and simple.\n\
    <|/ c |>\n<| a dscore=5 |>\nMy version :\n<code>\n$unique = array_diff(array_values($array),\
    \ array_unique($array));\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\n\
    This answer should be the accepted answer, this is by far the easiest to understand\
    \ solution.\n<|/ c |>\n<| a |>\nIf your array has just one or two elements, then\
    \ you can use this code to remove all duplicate values:\n<code>\n$array = array_unique($array);\n\
    </code>\nIf you have multiple elements you can use this:\n<code>\n$array = array_intersect($array,\
    \ $array_unique);\n</code>\n<|/ a dscore=5 tags=php,arrays,sorting |>\n<| c |>\n\
    The second solution works in case you have more than one item to be removed from\
    \ the original array. Thanks!\n<|/ c |>\n<| c |>\nI think this is the best answer\
    \ because it's clean. array_filter could have caused confusion if you added an\
    \ additional array and you wanted to keep them all.\n<|/ c |>\n<| c |>\n`array_intersect`\
    \ has two issues 1) it only works if the array is sorted, which may be undesirable\
    \ 2) it only returns the first match. Both can be solved by using `array_udiff`\
    \ instead\n<|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>\n$array = [\n   \
    \ 'test' => 'test',\n    'test1' => 'test1',\n    'test2' => 'test2',\n];\n\n\
    $result = array_unique(array_merge($array, array_values($array)));\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\n`array_unique` will remove all duplicates, not just\
    \ consecutive duplicates.\n<|/ c |>\n<| a tags=php,arrays,sorting |>\nIf your\
    \ array has numeric keys and want to preserve the numeric keys, then you can use\
    \ array_filter function and pass your array as the filter argument\n<code>\n$a\
    \ = ['cat', 'dog', '\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp8htb4tsq.php
    on line 15

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $output = array();\n  foreach ($numbers as $number) {\n    if (in_array($number,\
    \ $output)) {\n      continue;\n    }\n    $output[] = $number;\n  }\n  return\
    \ $output;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfijfx3n7.php:23\n\
    Stack trace:\n#0 /tmp/tmpfijfx3n7.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpfijfx3n7.php\
    \ on line 23\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    $numbers_count = array_count_values($numbers);\n \
    \   foreach ($numbers_count as $number => $count) {\n        if ($count == 1)\
    \ {\n            $result[] = $number;\n        }\n    }\n    return $result;\n\
    }\n</code>\n<|/ a tags=arrays,php,algorithm |>\n<| c |>\nNice solution, I forgot\
    \ about `array_count_values`.  But this doesn't keep the order of input values\
    \ from the original array.  I wouldn't have thought of using `array_count_values`,\
    \ but it's very handy!\n<|/ c |>\n<| c |>\nI guess the order is left to right\
    \ as shown in the input example. But I guess if the order is important just use\
    \ `array_reverse` before returning\n<|/ c |>\n<| c |>\nIf order matters you could\
    \ use [array_filter](http://php.net/manual/en/function.array-filter.php), like\
    \ this: `return array_filter($numbers, function($v, $k) use ($numbers_count) {\
    \ return $numbers_count[$k] == 1; }, 'SORT_REGULAR');`\n<|/ c |>\n<| a dscore=2\
    \ tags=arrays,php,algorithm |>\nMy take is this - \n<code>\n$array = array(1,\
    \ 2, 2, 2, 2, 3, 3);\n$new_array = array_unique($array);\nsort($new_array);\n\
    print_r($new_array);\n</code>\n<|/ a |>\n<| c |>\nThis works, but it's inefficient\
    \ since it does two passes over the array. [Here's a demo](https://3v4l.org/J5hKq)\n\
    <|/ c |>\n<| c |>\nThis does not preserve order. `3` will be at the end.\n<|/\
    \ c |>\n<| a dscore=2 |>\nThis is a simple solution that I came up with. It's\
    \ a combination of array_filter and array_count_values:\n<code>\n$a = array(1,\
    \ 2, 2, 2, 2, 3, 3);\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpum_s5f8f.php
    on line 16

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  return array_count_values($numbers);\n}\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbgei3hlh.php:15\n\
    Stack trace:\n#0 /tmp/tmpbgei3hlh.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpbgei3hlh.php\
    \ on line 15\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $unique = array();\n  foreach ($numbers as $n) {\n    if (!in_array($n,\
    \ $unique)) {\n      $unique[] = $n;\n    }\n  }\n  return $unique;\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a tags=php,arrays dscore=2 |>\nTry this\n<code>\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpexlue7l5.php
    on line 15

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $numbers = array_unique($numbers);\n    $count = count($numbers);\n\n\
    \    for ($i = 0; $i < $count; $i++) {\n        if ($numbers[$i] != $numbers[$i\
    \ - 1]) {\n            unset($numbers[$i - 1]);\n        }\n    }\n    return\
    \ $numbers;\n}\n</code>\nThe reason this works is because array_unique will preserve\
    \ the order of its elements, meaning that duplicates that are not consecutive\
    \ in the input are preserved as an arbitrary number of consecutive duplicate values.\
    \ We simply remove elements from the input that are not equal to the previous\
    \ element (as long as that element is different from itself).\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\nThis answer does not preserve the original order, as asked by the\
    \ OP.\n<|/ c |>\n<| c |>\nThanks Dave.  That is true.  It will preserve the original\
    \ order as long as there are no duplicates.  If there is an additional requirement\
    \ for order, it is easy enough to modify the function.\n<|/ c |>\n<| a tags=arrays,php\
    \ dscore=3 |>\n<code>\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpudlr8zk1.php
    on line 17

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $new_numbers = array();\n  $count_array = array();\n  foreach ($numbers\
    \ as $number) {\n    $count_array[$number] = isset($count_array[$number]) ? $count_array[$number]\
    \ + 1 : 1;\n  }\n  foreach ($count_array as $number => $count) {\n    if ($count\
    \ > 1) {\n      $new_numbers[$number] = $number;\n    }\n  }\n  return $new_numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppr1vdmr0.php:26\n\
    Stack trace:\n#0 /tmp/tmppr1vdmr0.php(30): test()\n#1 {main}\n  thrown in /tmp/tmppr1vdmr0.php\
    \ on line 26\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  // Create a hashmap of all the numbers, ignoring any duplicates\n  $hashmap\
    \ = [];\n  foreach ($numbers as $number) {\n    $hashmap[$number] = 1;\n  }\n\n\
    \  // Create an array to hold the sorted numbers, and keep a count of the numbers\n\
    \  $sorted_numbers = [];\n  $count = 0;\n\n  // Go through each item in the hashmap,\
    \ see if it's already been added, and remove it if so.\n  foreach ($hashmap as\
    \ $key => $value) {\n    if ($value == 1) {\n      unset($hashmap[$key]);\n  \
    \  } else {\n      $sorted_numbers[$count++] = $key;\n    }\n  }\n\n  // Return\
    \ an array with all the unique numbers and the count of how many times each one\
    \ occurred.\n  return array($sorted_numbers, $hashmap);\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2pyy5vei.php:35\n\
    Stack trace:\n#0 /tmp/tmp2pyy5vei.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp2pyy5vei.php\
    \ on line 35\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    sort($numbers);\n    $result = array();\n    $done = array();\n    $pos\
    \ = 0;\n\n    foreach ($numbers as $number) {\n        if (!isset($done[$number]))\
    \ {\n            $done[$number] = 1;\n            $result[$pos++] = $number;\n\
    \        }\n    }\n\n    return $result;\n}\n</code>\n<|/ a tags=arrays,php |>\n\
    <| c |>\nThis doesn't work for duplicate values greater than 1. For e.g. \n`remove_duplicates([1,2,3,3,3,4])`\
    \ returns `[1, 2, 3, 4]`\n<|/ c |>\n<| c |>\nYes, it does work. You just need\
    \ to do some additional work to account for duplicate values greater than 1. I'll\
    \ post a modified function to the answer.\n<|/ c |>\n<| c |>\nThanks for the edit,\
    \ I edited the answer to include a function that accounts for duplicate values\
    \ greater than 1.\n<|/ c |>\n<| c |>\nThanks Josh, exactly what I was looking\
    \ for.\n<|/ c |>\n<| c |>\nGreat solution, thank you. I've modified it so it ignores\
    \ numbers that are not unique by adding an extra check on `$done[$number]`. This\
    \ means that if you have a duplicate number it will still appear in the result\
    \ array. Also added a check to see if the array is empty - if it's empty it just\
    \ returns an empty array as the result (you can remove this if you're always returning\
    \ an empty array as your result).\n<|/ c |>\n<| a dscore=2 |>\nYou can use array_unique(),\
    \ but you need to create an array with duplicates removed before it can be passed\
    \ to array_unique().\n<code>\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpkuqlwn54.php
    on line 21

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $new_numbers = [];\n  $counts = array_count_values($numbers);\n  foreach\
    \ ($numbers as $number) {\n    if ($counts[$number] == 1) {\n      $new_numbers[]\
    \ = $number;\n    }\n  }\n  return $new_numbers;\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\nHow about using array_diff()? That would make it a one-liner\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have strings in your array\n<|/ c\
    \ |>\n<| c |>\nGood call. I overlooked that in my answer. Fixed.\n<|/ c |>\n<|\
    \ c |>\n: I don't want to get into the whole \"one-liner\" debate here, but `array_diff`\
    \ does seem to assume you're just comparing integer values. You could still use\
    \ it, just change `$numbers == $numbers[$i]` to `is_int($numbers[$i])`\n<|/ c\
    \ |>\n<| c |>\nYeah, it's kind of unfortunate, but you can't use `array_diff`\
    \ directly on strings. `array_diff($array, ['1', '2', '3'])` won't work because\
    \ it will compare each array value against each value of the string array.\n<|/\
    \ c |>\n<| a dscore=5 tags=arrays,php |>\narray_count_values is the function you\
    \ are looking for:\n<code>\n$numbers = array(1,2,3,3,2,4,4,4,4);\n$counts = array_count_values($numbers);\n\
    \nprint_r($counts);\n</code>\nOutput:\n<code>\nArray\n(\n    [1] => 2\n    [2]\
    \ => 4\n    [3] => 2\n)\n</code>\n<|/ a |>\n<| c |>\nNice, but how do you remove\
    \ a value if its count is more than one?\n<|/ c |>\n<| c |>\n: use `array_filter`:\
    \ `$numbers = array_filter($numbers, function($value) { return $value>1; });`\n\
    <|/ c |>\n<| a tags=arrays,php |>\nYou could also do this:\n<code>\n<?php\n  \
    \  $array = [1,1,2,2,3,3,3];\n    $newArray = array_intersect($array,array_unique($array));\n\
    \n    echo '<pre>';\n    var_dump($newArray);\n    echo '</pre>';\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp7icl1wj9.php
    on line 16

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $newList = array();\n\n    $lookup = array_count_values($numbers);\n\
    \    foreach($numbers as $number) {\n        if($lookup[$number] > 0) {\n    \
    \        $newList[] = $number;\n            $lookup[$number]--;\n        }\n \
    \   }\n    return $newList;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks but\
    \ I need a PHP code that uses native PHP.\n<|/ c |>\n<| a tags=arrays,php |>\n\
    <code>\n<?php\n$arr = [1, 2, 4, 3, 3, 6, 6, 6];\n$newArr = array();\n\nforeach\
    \ ($arr as $key => $value) {\n    if ($value == $newArr[$key]) {\n        continue;\n\
    \    }\n    $newArr[$key] = $value;\n}\n\nprint_r($newArr);\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpc9gzyjpl.php
    on line 18

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $new_array = array();\n  foreach ($numbers as $key => $value) {\n    if\
    \ (!in_array($value, $new_array)) {\n      $new_array[$key] = $value;\n    }\n\
    \  }\n  return $new_array;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppilp54gt.php:22\n\
    Stack trace:\n#0 /tmp/tmppilp54gt.php(25): test()\n#1 {main}\n  thrown in /tmp/tmppilp54gt.php\
    \ on line 22\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = array();\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $result)) {\n            $result[] = $number;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0clzbs5l.php:23\n\
    Stack trace:\n#0 /tmp/tmp0clzbs5l.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp0clzbs5l.php\
    \ on line 23\n"
  timestamp: 1659823541
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $results = array();\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $results)) {\n      $results[] = $number;\n    }\n  }\n  return $results;\n\
    }\n</code>\n<|/ a |>\n<| a dscore=1 |>\n<code>\n<?php\n  $arr = array(1,1,2,3,5,5,6,7,8,8);\n\
    \  $temp1 = array_count_values($arr);\n  arsort($temp1);\n  $arr = array();\n\
    \  foreach ($temp1 as $key=>$value) {\n    $arr[] = $key;\n  }\n  print_r($arr);\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp2nwuji91.php
    on line 15

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $numbers = array_unique($numbers);\n  sort($numbers);\n  return $numbers;\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThe code doesn't remove duplicate values.\n\
    <|/ c |>\n<| c |>\nIt doesn't remove duplicates, but it preserves order (as mentioned)\n\
    <|/ c |>\n<| c |>\nI agree with you that duplicate values are preserved in the\
    \ order of appearance. However, I do not agree that your answer does not do exactly\
    \ what the OP wants. If you run `remove_duplicates([1, 3, 1, 2, 3])` you will\
    \ get `array(1, 3)` whereas he wants `array(1, 3, 2, 3)`.\n<|/ c |>\n<| c |>\n\
    Yes, you have the right answer for the first example. But if you change this example\
    \ to `remove_duplicates([1, 2, 3, 1, 2, 3])` you'll get `array(2)`\n<|/ c |>\n\
    <| c |>\nHa, thanks for catching that, I can't believe I missed that. I've updated\
    \ the code to fix it.\n<|/ c |>\n<| a tags=php,arrays,sorting dscore=2 |>\nHere\
    \ is a little function that does that:\n<code>\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp3ugyfisf.php
    on line 11

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  return array_filter($numbers, function($number) {\n    return !in_array($number,\
    \ $numbers);\n  });\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI made a small adjustment\
    \ to prevent duplicates getting reordered. This way `array(1, 2, 2, 3, 3, 4, 4)`\
    \ becomes `array(1, 2, 3, 4)` as expected.\n<|/ c |>\n<| c |>\nI like the use\
    \ of `!in_array()`, I wonder why it's not the most popular answer... I guess it's\
    \ a problem with people expecting something more general than what they really\
    \ want.\n<|/ c |>\n<| c |>\nIf you have an array with duplicate values, this solution\
    \ will return an array of only unique values. `[1, 1]` will return `[1, 1]`.\n\
    <|/ c |>\n<| c |>\nIf you have an array with duplicate values, this solution will\
    \ return an array of only unique values. `[1, 1]` will return `[1, 1]`.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't keep the order. It only removes duplicates.\n<|/ c\
    \ |>\n<| a dscore=5 |>\nI believe the following is much more efficient:\n<code>\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpyv0vpbzs.php
    on line 11

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $lookup = array();\n  foreach($numbers as $number) {\n    $lookup[$number]\
    \ = $number;\n  }\n  $unique = array();\n  foreach($lookup as $number => $dummy)\
    \ {\n    if(isset($unique[$number])) {\n      continue;\n    }\n    $unique[$number]\
    \ = $number;\n  }\n  return $unique;\n}\n</code>\n<|/ a tags=php,arrays,algorithm\
    \ |>\n<| c |>\nI like that solution, thank you! It seems to be the best option.\
    \ I was looking for something more \"native\" like `array_unique()`, but it's\
    \ actually quite simple.\n<|/ c |>\n<| c |>\nIf anyone is interested, I've made\
    \ a slightly modified version of this which also allows removing duplicate elements.\
    \ https://github.com/huntercollins/PHP-Array-Remove-Duplicates-Function/blob/master/remove_duplicates.php\n\
    <|/ c |>\n<| c |>\n: Can you give me a concrete example of where it does not work?\
    \ I am pretty sure it should.\n<|/ c |>\n<| c |>\n: I added a more complex example\
    \ to my answer.\n<|/ c |>\n<| c |>\n: Thank you! I added another more complex\
    \ example to my answer and you mentioned a bug in it. My bad! Thank you for your\
    \ solution, it's working perfectly.\n<|/ c |>\n<| a tags=php,arrays,algorithm\
    \ |>\nTry this\n<code>\n$array = array(1,3,4,6,7,3,8,7,9);\n$unique=array();\n\
    for($i=0;$i<count($array);$i++){\n    if(!in_array($array[$i],$unique)){\n   \
    \     $unique[]=$array[$i];\n    }\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThat\
    \ is not working as expected. Try it with an input array consisting of all 0s,\
    \ a small set of numbers, and a large set of numbers. You will see that it doesn't\
    \ work correctly.\n<|/ c |>\n<| c |>\nThis works perfectly for me with arrays\
    \ like the OP asked in my comment. The only issue I see is if the input array\
    \ contains two elements that are equal, it won't eliminate it.\n<|/ c |>\n<| c\
    \ |>\nThis is a great solution, except for the edge case where the numbers are\
    \ unique, unlike what the OP asked for. As stated in the original question, if\
    \ the input array contains two equal numbers, they are both removed. In a comment\
    \ below, the OP asks for the removal of only one of them. In the comment \nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpvz_4idie.php
    on line 20

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $filtered = array();\n    $result = array();\n    foreach ($numbers as\
    \ $number) {\n        if (!in_array($number, $filtered)) {\n            $filtered[]\
    \ = $number;\n            $result[] = $number;\n        }\n    }\n    return $result;\n\
    }\n</code>\n<|/ a |>\n<| a tags=php,arrays,multidimensional-array,duplicates |>\n\
    You might be looking for array_count_values().\n<|/ a dscore=5 |>\n<| c |>\nThis\
    \ does work, but only as long as the array itself has no duplicate values.\n<|/\
    \ c |>\n<| c |>\nThis would have been the correct answer, but I wanted to remove\
    \ duplicate values from my array. To do this, array_count_values() won't work.\
    \ array_count_values would only return an array with each key being the value\
    \ of each array item and a value being the number of times the item appeared in\
    \ the array.\n<|/ c |>\n<| a dscore=5 tags=php,arrays,multidimensional-array,duplicates\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpuome89n5.php
    on line 17

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  return array_filter($numbers, 'array_unique');\n}\n\n/**\n * Formats the\
    \ given number according to the given decimal point and thousand separator.\n\
    \ * Example:\n * number_format_i18n( 1234.56, 2, '.', ',' ) => '123.46'\n * number_format_i18n(\
    \ 1234.56, 2, '.', ',' ) => '12,346'\n * number_format_i18n( 1234.56, 2, ',',\
    \ '.' ) => '12,34.560'\n *\n * @param $number\n * @param $decimal\n * @param $decimal_point\n\
    \ * @param $thousand_point\n *\n * @return string\n */\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_unique(): Argument #1 ($array)\
    \ must be of type array, int given in /tmp/tmpdzus8azt.php:7\nStack trace:\n#0\
    \ [internal function]: array_unique(1)\n#1 /tmp/tmpdzus8azt.php(7): array_filter(Array,\
    \ 'array_unique')\n#2 /tmp/tmpdzus8azt.php(25): remove_duplicates(Array)\n#3 /tmp/tmpdzus8azt.php(30):\
    \ candidate(Array)\n#4 /tmp/tmpdzus8azt.php(34): test()\n#5 {main}\n  thrown in\
    \ /tmp/tmpdzus8azt.php on line 7\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    // Clone array.\n    $numbers = array_map(null, $numbers);\n\n    $numbers\
    \ = array_count_values($numbers);\n    $numbers = array_filter($numbers, function($value)\
    \ {\n        return $value > 1;\n    });\n    return array_keys($numbers);\n}\n\
    </code>\n<|/ a dscore=5 tags=php,arrays,duplicates,unique,multidimensional-array\
    \ |>\n<| c |>\nWas going to post this exact solution and came back to answer with\
    \ a slightly different array syntax to mine and came back here. Thanks!\n<|/ c\
    \ |>\n<| c |>\nHow would you do this in Java?\n<|/ c |>\n<| c |>\n: this works\
    \ great in Python, but doesn't seem to be working in PHP.  I have tried it with\
    \ PHP 5.5.10 and PHP 7.0.14 and it fails on PHP 7.0.14.  It fails when I use an\
    \ `array()` instead of `[]`.\n<|/ c |>\n<| c |>\nThis answer works best on multidimensional\
    \ arrays where you have an array of arrays. If you have an array of objects, you'll\
    \ need to apply the same logic but call array_map on each of the objects in the\
    \ array to get a numerical array instead of a numerical array.\n<|/ c |>\n<| c\
    \ |>\nTo be clear, this answer is not dependent on PHP version - it works just\
    \ fine on PHP 5 and higher. The other answers fail in PHP 5.5 and PHP 5.6+ because\
    \ they don't take advantage of array_count_values.\n<|/ c |>\n<| a |>\n<code>\n\
    $ar = array();\nforeach($a1 as $a2)\n{\n  $ar[$a2]=$a2;\n}\n$ar2 = array_count_values($ar);\n\
    $ar3 = array_keys($ar2);\n</code>\nI hope this helps.\n<|/ a dscore=5 tags=php,arrays,duplicates,unique,multidimensional-array\
    \ |>\n<| c |>\nThis seems to be the only solution that does not require a second\
    \ copy of the array.\n<|/ c |>\n<| c |>\nThis is not the fastest for large arrays,\
    \ see the other answers.\n<|/ c |>\n<| c |>\nActually, it is faster than the accepted\
    \ answer, because it does not require the second array to be created. See http://codepad.org/fzLZz5jJ\
    \ for comparison of speeds.\n<|/ c |>\n<| c |>\nI tested this on a 3M element\
    \ array, this answer took 0.038 seconds, this answer took 1.1 seconds, this answer\
    \ took 8.8 seconds. Slightly faster than \nfunction candidate(...$args) {\n  \
    \  return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp0kdqki6i.php
    on line 16

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $hash = [];\n    foreach ($numbers as $number) {\n        $hash[$number]++;\n\
    \    }\n    return array_keys($hash);\n}\n\nfunction candidate(...$args) {\n \
    \   return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmpvccuie7t.php on line 9\n\n\
    Warning: Undefined array key 2 in /tmp/tmpvccuie7t.php on line 9\n\nWarning: Undefined\
    \ array key 3 in /tmp/tmpvccuie7t.php on line 9\n\nWarning: Undefined array key\
    \ 4 in /tmp/tmpvccuie7t.php on line 9\n\nWarning: Undefined array key 1 in /tmp/tmpvccuie7t.php\
    \ on line 9\n\nWarning: Undefined array key 2 in /tmp/tmpvccuie7t.php on line\
    \ 9\n\nWarning: Undefined array key 3 in /tmp/tmpvccuie7t.php on line 9\n\nWarning:\
    \ Undefined array key 4 in /tmp/tmpvccuie7t.php on line 9\n\nWarning: Undefined\
    \ array key 5 in /tmp/tmpvccuie7t.php on line 9\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpvccuie7t.php:21\nStack trace:\n#0 /tmp/tmpvccuie7t.php(24):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvccuie7t.php on line 21\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $number) {\n    if (!isset($result[$number]))\
    \ {\n      $result[$number] = true;\n    }\n  }\n  return array_keys($result);\n\
    }\n</code>\n<|/ a |>\n<| a tags=php,algorithm,array-unique dscore=0 |>\nIn Javascript:\n\
    <code>\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp2wxfs12r.php
    on line 15

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n  foreach ($numbers as $value) {\n    if (!in_array($value,\
    \ $result)) {\n      $result[] = $value;\n    }\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfefbth33.php:23\n\
    Stack trace:\n#0 /tmp/tmpfefbth33.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpfefbth33.php\
    \ on line 23\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $unique = array();\n  foreach($numbers as $key => $number) {\n    if (!array_key_exists($number,\
    \ $unique)) {\n      $unique[$number] = $number;\n    }\n  }\n  return $unique;\n\
    }\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwjg7zfzs.php:21\n\
    Stack trace:\n#0 /tmp/tmpwjg7zfzs.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpwjg7zfzs.php\
    \ on line 21\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $output = [];\n  foreach ($numbers as $n) {\n    if (!isset($output[$n]))\
    \ {\n      $output[$n] = $n;\n    }\n  }\n  return $output;\n}\n</code>\n<|/ a\
    \ tags=arrays,sorting,php dscore=4 |>\n<| a tags=arrays,sorting,php dscore=4 |>\n\
    You can use array_count_values() to count the frequency of each element, with\
    \ array_filter() to remove any that appear more than once, and then use array_values()\
    \ to get the array in the original order:\n<code>\n$counts = array_count_values($input);\n\
    $output = array_filter($counts);\n$output = array_values($output);\n</code>\n\
    <|/ a |>\n<| a |>\nYou can try this with array_count_values(), array_filter()\
    \ and array_values() functions.\n<code>\n$arr = [1, 2, 3, 1, 2, 3, 2];\n\n$counts\
    \ = array_count_values($arr);\n$result = array_filter($counts);\n$result = array_values($result);\n\
    \necho '<pre>';\nprint_r($result);\n</code>\nOutput:\n<code>\nArray\n(\n    [0]\
    \ => 1\n    [1] => 3\n    [2] => 2\n)\n</code>\n<|/ a tags=arrays,sorting,php\
    \ dscore=3 |>\n<| a dscore=3 |>\n<code>\n$arr = [1,2,3,1,2,3];\n$result = array_count_values($arr);\n\
    $result = array_filter($result);\n$result = array_values($result);\nprint_r($result);\n\
    </code>\n<|/ a tags=arrays,sorting,php |>\n<| c |>\nWhile this code may answer\
    \ the question, providing additional context regarding why and/or how this code\
    \ answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=2\
    \ |>\nTry with array_count_values and array_filter.\n<code>\n$arr = [1, 2, 3,\
    \ 1, 2, 3, 2];\n\n$counts = array_count_values($arr);\n$result = array_filter($counts);\n\
    $result = array_values($result);\n</code>\n<|/ a tags=arrays,sorting,php |>\n\
    <| a |>\nYou can use this function : \n<code>\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmps8p66c64.php
    on line 15

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  return array_filter(array_count_values($numbers), function ($count) { return\
    \ $count > 1; });\n}\n</code>\nIf it makes any difference to you, I've included\
    \ a complete code snippet below.\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpt0s60mez.php
    on line 9

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $seen = array();\n  return array_filter($numbers, function($v) use (&$seen)\
    \ {\n    if (!isset($seen[$v])) $seen[$v] = true;\n    return true;\n  });\n}\n\
    \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5vmscecn.php:21\n\
    Stack trace:\n#0 /tmp/tmp5vmscecn.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp5vmscecn.php\
    \ on line 21\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $unique = array();\n  $dupes = array();\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($unique[$number])) {\n      $unique[$number] = $number;\n\
    \    } else {\n      $dupes[] = $number;\n    }\n  }\n  return $dupes;\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| c |>\nThank you.  This is a little above my level.  I am\
    \ going to give it a try.\n<|/ c |>\n<| c |>\nIt works great.  Thanks for that\
    \ code.  I love the way it works :-)\n<|/ c |>\n<| c |>\nYou're welcome. Sorry\
    \ it took so long to help. I think it could be a little simpler, but I wasn't\
    \ sure what data you were dealing with.\n<|/ c |>\n<| c |>\nNo problem.  Thanks\
    \ for your help!!\n<|/ c |>\n<| c |>\nNo problem, thanks for your help.  It works\
    \ great and helped me out immensely.\n<|/ c |>\n<| a |>\nYou can do this in O(n)\
    \ time. The below code uses hashing to find duplicates at O(1) time instead of\
    \ O(n) time.\n<code>\n<?php\n$numbers = array(1,2,2,3,4,5,6,6,7,7,7,8,9,9,9,9,10,11,11,11,11,11,12,12,12,12,13,13,13,13,13,13,14,14,14,14,14,14,14);\n\
    $counts = array_count_values($numbers);\n$keys = array_keys($counts);\n$duplicates\
    \ = array_diff($keys, array_flip($counts));\n</code>\nOutput\n<code>\nArray\n\
    (\n    [0] => 0\n    [3] => 4\n    [5] => 7\n    [7] => 10\n    [9] => 13\n  \
    \  [11] => 15\n    [12] => 16\n    [13] => 17\n    [14] => 18\n)\n</code>\n<|/\
    \ a tags=duplicates,php,arrays dscore=2 |>\n<| c |>\nThe question is specifically\
    \ asking for a PHP solution.\n<|/ c |>\n<| c |>\nYes and this is PHP code only\n\
    <|/ c |>\n<| c |>\nThanks for the reply.  This code will work for my original\
    \ array, but not for my new one.  The original array is an array of objects. \
    \ My new array is an array of integers (see original post).  Your code throws\
    \ an error: Warning: array_count_values(): Can only count STRING and INTEGER values!\
    \ in .... on line 3.  This is because the original array is an array of objects\
    \ and my new \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpad1id_kg.php
    on line 18

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $result)) {\n      $result[] = $number;\n    }\n  }\n  return $result;\n}\n\
    </code>\nThe above function will do what you asked, but is not very efficient\
    \ (it scans the array for each item to see if it already exists).  In general\
    \ you should be using an associative array (a map) where the key is the item and\
    \ the value is the count.\n<|/ a tags=php,arrays dscore=1 |>\n<| a tags=php,arrays\
    \ |>\nYou asked for a more \"functional\" way, so here is a more \"functional\"\
    \ way:\n<code>\n$array = array_count_values(array_map('htmlentities',$array));\n\
    $array = array_filter($array,'strlen');\n</code>\nFirst step is to get rid of\
    \ HTML entities like your original function, but we end up with a \"count\" array\
    \ of what we want.\nNext, filter out any entries where the key is a number less\
    \ than 1 -- because they can't actually be \"removed\" because their key is the\
    \ count value -- and the value is the same as the key.  Because we are using the\
    \ key as the value and the value as key, our value will \"count\" towards the\
    \ key (so they can't get removed).\nAnd lastly, if all else fails, return the\
    \ whole thing.\n<|/ a dscore=1 |>\n<| c |>\nYour first step won't remove the duplicates.\
    \ You'd need to run it through `array_unique` afterwards.\n<|/ c |>\n<| c |>\n\
    Oops. I didn't see it as an option on the OP's original question.\n<|/ c |>\n\
    <| c |>\n`array_unique` will eliminate any duplicate values, but that's not what\
    \ the OP wants anyway, so your first step is probably the way to go. +1\n<|/ c\
    \ |>\n<| c |>\nThe question is \"remove all elements that occur more than once.\"\
    \  In that case, you would want to use `array_unique` (or a modified version)\
    \ after `array_count_values`.\n<|/ c |>\n<| c |>\nI believe that `array_unique`\
    \ is more efficient than `array_diff` because it doesn't have to compare every\
    \ element against every other element to see if it can be removed.\n<|/ c |>\n\
    <| a tags=php,arrays dscore=0 |>\n<code>\n$input = array(1, 2, 2, 3, 4);\n\n$output\
    \ = array();\nforeach($input as $v) {\n   if(!isset($output[$v])) $output[$v]\
    \ = 1;\n   else $output[$v]++;\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpy24_vwvk.php
    on line 15

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  return array_filter($numbers, function($number) {\n    return in_array($number,\
    \ $numbers);\n  });\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $numbers in /tmp/tmp4zhf8a1b.php on line\
    \ 8\n\nFatal error: Uncaught TypeError: in_array(): Argument #2 ($haystack) must\
    \ be of type array, null given in /tmp/tmp4zhf8a1b.php:8\nStack trace:\n#0 /tmp/tmp4zhf8a1b.php(8):\
    \ in_array(1, NULL)\n#1 [internal function]: {closure}(1)\n#2 /tmp/tmp4zhf8a1b.php(9):\
    \ array_filter(Array, Object(Closure))\n#3 /tmp/tmp4zhf8a1b.php(12): remove_duplicates(Array)\n\
    #4 /tmp/tmp4zhf8a1b.php(17): candidate(Array)\n#5 /tmp/tmp4zhf8a1b.php(21): test()\n\
    #6 {main}\n  thrown in /tmp/tmp4zhf8a1b.php on line 8\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    $i = 0;\n    foreach ($numbers as $n) {\n        if\
    \ ($result[$i] && $n === $result[$i]) {\n            ++$i;\n        } else {\n\
    \            $result[$i] = $n;\n        }\n    }\n    return $result;\n}\n</code>\n\
    The code above is very readable. Another method would be:\n<code>\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpg4tkh0d0.php
    on line 18

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    // use PHP native function\n    return array_intersect(array_unique($numbers),\
    \ $numbers);\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9m0c9cxd.php:17\n\
    Stack trace:\n#0 /tmp/tmp9m0c9cxd.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp9m0c9cxd.php\
    \ on line 17\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$count = array_count_values($numbers);\n\t$result = array();\n\n\tforeach\
    \ ($count as $key => $value) {\n\t\tif ($value > 1) {\n\t\t\t$result[$key] = $key;\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6cset682.php:24\n\
    Stack trace:\n#0 /tmp/tmp6cset682.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp6cset682.php\
    \ on line 24\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  $numbers = array_values($numbers);\n  sort($numbers);\n\
    \  $count = count($numbers);\n  for ($i = 0; $i < $count; $i++) {\n    if ($numbers[$i]\
    \ == $numbers[($i + 1)]) {\n      unset($numbers[$i]);\n    }\n  }\n  return $numbers;\n\
    }\n\n/**\n * Gets the length of a string.\n *\n * @param string $str\n *\n * @return\
    \ int\n */\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 4 in /tmp/tmp2lt913g4.php on line 12\n\n\
    Warning: Undefined array key 7 in /tmp/tmp2lt913g4.php on line 12\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp2lt913g4.php:33\nStack trace:\n\
    #0 /tmp/tmp2lt913g4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2lt913g4.php\
    \ on line 33\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n\n  for ($i = 0, $length = count($numbers); $i < $length;\
    \ $i++) {\n    $value = $numbers[$i];\n\n    if (!isset($result[$value])) {\n\
    \      $result[$value] = $value;\n    }\n  }\n\n  return $result;\n}\n</code>\n\
    <|/ a tags=php,arrays dscore=2 |>\n<| c |>\nI think that the solution is good\
    \ but it doesn't remove duplicates from input array, it just remove from output\
    \ array\n<|/ c |>\n<| a |>\nHere is a simple one-liner solution:\n<code>\n<?php\n\
    \n$input = [1,2,3,2,4,5,5,5,6,7,8,8,8];\n\n$output = array_unique(array_filter($input));\n\
    \nvar_dump($output);\n</code>\nOutput:\n<code>\narray(8) {\n  [0]=>\n  int(1)\n\
    \  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n  [3]=>\n  int(4)\n  [4]=>\n  int(5)\n\
    \  [5]=>\n  int(6)\n  [6]=>\n  int(7)\n  [7]=>\n  int(8)\n}\n</code>\n<|/ a tags=php,arrays\
    \ dscore=2 |>\n<| c |>\nThe original question stated that duplicate elements should\
    \ remain the same.\n<|/ c |>\n<| c |>\nYes this works but I need the first element\
    \ in the input array to remain unchanged\n<|/ c |>\n<| c |>\nOh I see, my bad,\
    \ I misunderstood that part of the question. You are right that my solution doesn't\
    \ preserve the order of elements in the input array, however, it does preserve\
    \ the order of elements in the output.\n<|/ c |>\n<| c |>\nI believe that my solution\
    \ preserves the order of elements in the input.\n<|/ c |>\n<| c |>\nYour solution\
    \ is very clever but unfortunately it only works for the input array I provided.\
    \ In my actual problem, the duplicates array is different from mine. Any suggestions?\n\
    <|/ c |>\n<| a dscore=0 tags=php,arrays |>\nI got this from php.net:\n<code>\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp1p602qou.php
    on line 19

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    foreach ($numbers as $number) {\n        if (isset($result[$number]))\
    \ {\n            $result[$number]++;\n        } else {\n            $result[$number]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n</code>\nThis algorithm has\
    \ O(n) worst-case complexity, since it only iterates over the input set once.\
    \ On average, though, its O(n) complexity can be better, especially on long input\
    \ sets.\n<|/ a tags=arrays,algorithm,php |>\n<| c |>\nThis solution is perfect\
    \ but i had to change it to fit my code thanks.\n<|/ c |>\n<| c |>\nYou're welcome!\
    \ I hope this works for you too. Feel free to ask if you need any clarifications.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n$arr = [2, 3, 3, 8, 8, 4, 10, 10];\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp2j7vby20.php
    on line 17

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    sort($numbers);\n    $new_numbers = array();\n    foreach ($numbers as\
    \ $number) {\n        $new_numbers[] = $number;\n    }\n    return array_values($new_numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuqgqk92w.php:22\n\
    Stack trace:\n#0 /tmp/tmpuqgqk92w.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpuqgqk92w.php\
    \ on line 22\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n\n  foreach ($numbers as $number) {\n    $result[$number]\
    \ = true;\n  }\n\n  return array_keys($result);\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nYou don't need that `array_keys()` at all - you can pass the array directly\
    \ into `array_filter()` as the second parameter.\n<|/ c |>\n<| c |>\nThanks, I\
    \ knew it could be done with just one line of code, but I thought this would also\
    \ work to show it can done in several ways.\n<|/ c |>\n<| a dscore=1 tags=arrays,php\
    \ |>\nA simple and easy way to do it using array_walk and array_unique (using\
    \ anonymous functions):\n<code>\n$array = [\n    'a' => 1,\n    'b' => 1,\n  \
    \  'c' => 2,\n    'd' => 2,\n    'e' => 3,\n];\n\narray_walk($array, function(&$val,\
    \ $key){\n    $val = array_unique($val);\n});\n\nprint_r($array);\n</code>\nOutput:\n\
    <code>\nArray\n(\n    [a] => 1\n    [b] => 1\n    [c] => 2\n    [d] => 2\n   \
    \ [e] => 3\n)\n</code>\n<|/ a |>\n<| a tags=arrays,php |>\n<code>\n$array = array();\n\
    \n$array['a'] = 1;\n$array['b'] = 1;\n$array['c'] = 2;\n$array['d'] = 2;\n$array['e']\
    \ = 3;\n\narray_walk($array,function(&$value, $key){\n    $value = array_unique($value);\n\
    });\n\nprint_r($array);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 tags=arrays,php\
    \ |>\nA little more elegant solution:\n<code>\narray_walk($array, function (&$val,\
    \ $key) use (&$result) {\n    $val = array_unique($val);\n});\n</code>\n<|/ a\
    \ |>\n<| a |>\nI think this could be done with array_unique()\n<|/ a dscore=0\
    \ tags=arrays,php |>\n<| c |>\nYes, but I don't want to remove duplicates, I want\
    \ to keep the same order. I can see now how array_unique would keep the order,\
    \ I'm looking for a way to keep the same order from the original array\n<|/ c\
    \ |>\n<| c |>\nYou want a function that removes duplicates from an array and keeps\
    \ the order of the elements, right?\n<|/ c |>\n<| c |>\nNo, I'm looking for an\
    \ easy way to do it, not necessarily the best way. I can see now \nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpnjqef754.php
    on line 15

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $uniques = [];\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $uniques)) {\n      $uniques[] = $number;\n    }\n  }\n  return $uniques;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\nThe original solution that worked well\
    \ for me (thank you Martin), was as follows:\n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp1niqnmm0.php
    on line 15

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n  $counts = array();\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($counts[$number])) {\n      $result[] = $number;\n      $counts[$number]\
    \ = 1;\n    } else {\n      $counts[$number]++;\n    }\n  }\n  return $result;\n\
    }\n</code>\n<|/ a dscore=0 tags=php,arrays |>\n<| a dscore=0 |>\nHere's a slightly\
    \ different version of's answer using a foreach loop and in_array():\n<code>\n\
    $result = array();\nforeach ($numbers as $number) {\n    if (!in_array($number,\
    \ $result)) {\n        $result[] = $number;\n    }\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a |>\nYou could do this in a few ways. One way is to use array_unique.\n\
    <code>\n$numbers = [1, 2, 3, 2, 4];\n$result = array_unique($numbers);\n\nprint_r($result);\n\
    </code>\nhttp://sandbox.onlinephpfunctions.com/code/5edafe7d70dcfb69bfa9cf01887ede977aed0d2d\n\
    Another way to do this would be to loop over the array and check if the number\
    \ exists already or not.\n<code>\n$numbers = [1, 2, 3, 2, 4];\n$result = array();\n\
    foreach ($numbers as $number) {\n    if (!in_array($number, $result)) {\n    \
    \    $result[] = $number;\n    }\n}\n\nprint_r($result);\n</code>\nhttp://sandbox.onlinephpfunctions.com/code/33e3bf7cc479754ceb24eed9fe73d7d1b615fbb\n\
    <|/ a tags=php,arrays dscore=0 |>\n<| a dscore=0 tags=php,arrays |>\n<code>\n\
    <?php\n  $numbers = [1, 2, 3, 2, 4];\n  $result = [];\n  foreach($numbers as $number){\n\
    \     if (in_array($number, $result))\n       continue;\n     $result[] = $number;\n\
    \  }\n  print_r($result);\n</code>\n<|/ a |>\n<| a tags=php,arrays |>\nJust to\
    \ show different ways \n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp3bvemxyf.php
    on line 19

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  return array_count_values($numbers);\n}\n$numbers = array(1,1,2,2,3);\n\
    $duplicates = remove_duplicates($numbers);\necho \"Number of duplicates is $duplicates\\\
    n\";\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmp4h_qfg0f.php on line 11\n\
    Number of duplicates is Array\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp4h_qfg0f.php:18\nStack trace:\n#0 /tmp/tmp4h_qfg0f.php(22): test()\n\
    #1 {main}\n  thrown in /tmp/tmp4h_qfg0f.php on line 18\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  return array_filter(\n      array_count_values($numbers),\n      function\
    \ ($count) {\n        return $count > 1;\n      }\n  );\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThanks but it doesn't work. I am getting this error \"Fatal error: Call\
    \ to undefined function array_count_values() in /home/a8749859/public_html/test.php\
    \ on line 11\"\n<|/ c |>\n<| c |>\ntry again. i forgot the `[]` in front of `array_count_values`\n\
    <|/ c |>\n<| a |>\n<code>\n<?php\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpywf685xy.php
    on line 14

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    return array_filter($numbers, function ($value, $key) use ($numbers)\
    \ {\n        return !in_array($value, $numbers);\n    });\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a |>\nThis is my solution:\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpagq22iy2.php
    on line 11

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $unique = [];\n  $occurances = [];\n  foreach ($numbers as $key => $number)\
    \ {\n    if (in_array($number, $occurances)) {\n      unset($numbers[$key]);\n\
    \    } else {\n      $occurances[] = $number;\n      $unique[$number] = $number;\n\
    \    }\n  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg9rs2tct.php:26\n\
    Stack trace:\n#0 /tmp/tmpg9rs2tct.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpg9rs2tct.php\
    \ on line 26\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $number) {\n    if (!isset($result[$number]))\
    \ {\n      $result[$number] = $number;\n    }\n  }\n  return array_values($result);\n\
    }\n</code>\n<|/ a dscore=0 tags=php,arrays,duplicates |>\n<| a tags=php,arrays,duplicates\
    \ dscore=0 |>\nAs mentioned in the other answers, array_count_values() will work\
    \ quite well for most cases but will break as soon as you pass it an array of\
    \ objects. It won't care about object equality so if you pass it the output of\
    \ print_r(), print_r() will always return a flat array of arrays. \nFor this specific\
    \ case though, it is trivial to fix it by converting all the values to strings.\
    \ That way the string representation of an object will always be the same, and\
    \ therefore will be counted as the same value. \n<code>\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp8nuj8cju.php
    on line 15

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $uniques = [];\n  foreach ($numbers as $number) {\n    if (in_array($number,\
    \ $uniques)) {\n      continue;\n    }\n    $uniques[] = $number;\n  }\n  return\
    \ $uniques;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvyof1du.php:23\n\
    Stack trace:\n#0 /tmp/tmpcvyof1du.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpcvyof1du.php\
    \ on line 23\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $result)) {\n      $result[] = $number;\n    }\n  }\n  return $result;\n}\n\
    </code>\n<|/ a tags=arrays,php,sorting |>\n<| c |>\nWow, this is a very thorough\
    \ answer, I really appreciate it!\n<|/ c |>\n<| a tags=arrays,php,sorting |>\n\
    <code>\n$arr = [1, 2, 3, 2, 3, 4];\n$temp = array_count_values($arr);\n$res =\
    \ array();\nforeach ($temp as $k => $v) {\n    if ($v > 1) $res[] = $k;\n}\nsort($res);\n\
    print_r($res);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 tags=arrays,php,sorting\
    \ |>\nAnother option using array_reduce() and array_unique()\n<code>\n<?php\n\n\
    $arr = [1, 2, 3, 2, 3, 4];\n\n$temp = array_reduce($arr, function($a,$e){\n  \
    \  return $a + (array_search($e, array_unique($a)) == $e ? 0 : 1);\n}, 0);\n\n\
    print_r($temp);\n</code>\nOutput:\n<code>\n4\n</code>\n<|/ a |>\n<| a tags=arrays,php,sorting\
    \ |>\nFor your case a simple for loop will do the trick. Just iterate through\
    \ the array and keep track of the numbers you've already found and don't add them\
    \ to the result.\n<code>\n$array = [1, 2, 3, 2, 3, 4];\n$result = [];\n\nfor ($i\
    \ = 0; $i < count($array); $i++) {\n  if (!in_array($array[$i], $result)) {\n\
    \    $result[] = $array[$i];\n  }\n}\n\nprint_r($result);\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\nYou can use array_count_values() to get the count of values\
    \ and their occurrences in an array. Then, simply filter out the occurrences greater\
    \ than one:\n<code>\n$input = array(1, 2, 3, 2, 3, 4);\n$result = array_filter($input,\
    \ function ($value) use (&$input) {\n    $count = array_count_values($input);\n\
    \    return $count[$value] > 1;\n});\n</code>\n<|/ a tags=arrays,php,sorting |>\n\
    <| a |>\n<code>\n$array = array(1,2,3,3,3,3,4,5);\n$count=array_count_values($array);\n\
    $key=array_keys($count,array_filter($count));\n</code>\n<|/ a dscore=0 tags=arrays,php,sorting\
    \ |>\n<| a tags=arrays,php,sorting |>\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp8t84k2as.php
    on line 15

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$result = array();\n\tforeach ($numbers as $number) {\n\t\tif (in_array($number,\
    \ $result)) {\n\t\t\tcontinue;\n\t\t}\n\t\t$result[] = $number;\n\t}\n\treturn\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2jf7aswi.php:24\n\
    Stack trace:\n#0 /tmp/tmp2jf7aswi.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp2jf7aswi.php\
    \ on line 24\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $lookup = array();\n  foreach ($numbers as $number) {\n    if (empty($lookup[$number]))\
    \ {\n      $lookup[$number] = 1;\n    } else {\n      $lookup[$number]++;\n  \
    \  }\n  }\n  $numbers = array_keys($lookup);\n  return $numbers;\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptjn5o88d.php:26\n\
    Stack trace:\n#0 /tmp/tmptjn5o88d.php(29): test()\n#1 {main}\n  thrown in /tmp/tmptjn5o88d.php\
    \ on line 26\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n  foreach ($numbers as $key => $value) {\n    if (in_array($value,\
    \ $result)) {\n      unset($numbers[$key]);\n    } else {\n      $result[] = $value;\n\
    \    }\n  }\n  return $numbers;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppssa4qic.php:25\n\
    Stack trace:\n#0 /tmp/tmppssa4qic.php(28): test()\n#1 {main}\n  thrown in /tmp/tmppssa4qic.php\
    \ on line 25\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $output = array();\n    $occurrences = array();\n\n    foreach($numbers\
    \ as $number) {\n        if (!array_key_exists($number, $occurrences)) {\n   \
    \         $output[] = $number;\n            $occurrences[$number] = 1;\n     \
    \   } else {\n            $occurrences[$number]++;\n        }\n    }\n\n    return\
    \ $output;\n}\n</code>\nThe above function will return a new array, with the same\
    \ keys as the original array except where they have duplicates removed.  This\
    \ is why array_unique is a good choice here.  It will compare the values and remove\
    \ from the array if they are the same.\nIf you want to preserve the original keys,\
    \ you will have to build a new array with the duplicates removed using the original\
    \ keys as keys and a value of true, or false to signify that an element was deleted.\
    \  Then use array_filter to remove the false values:\n<code>\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp8bf26soi.php
    on line 21

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  foreach ($numbers as $key => $number) {\n    if (in_array($number, $numbers))\
    \ unset($numbers[$key]);\n  }\n  return $numbers;\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkab4dfzx.php:18\n\
    Stack trace:\n#0 /tmp/tmpkab4dfzx.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpkab4dfzx.php\
    \ on line 18\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    foreach ($numbers as $number) {\n        if (array_search($number,\
    \ $result) === false) {\n            $result[] = $number;\n        }\n    }\n\
    \    return $result;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpydj8bf6k.php:22\n\
    Stack trace:\n#0 /tmp/tmpydj8bf6k.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpydj8bf6k.php\
    \ on line 22\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  return array_filter($numbers, function($value) {\n    return !in_array($value,\
    \ $numbers);\n  });\n}\n\n/**\n * Return the number of elements in a multidimensional\
    \ array.\n *\n * multidimensionalArray([1, 2, 3], 2) -> 3\n */\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $numbers in /tmp/tmpltdj_drd.php on line\
    \ 8\n\nFatal error: Uncaught TypeError: in_array(): Argument #2 ($haystack) must\
    \ be of type array, null given in /tmp/tmpltdj_drd.php:8\nStack trace:\n#0 /tmp/tmpltdj_drd.php(8):\
    \ in_array(1, NULL)\n#1 [internal function]: {closure}(1)\n#2 /tmp/tmpltdj_drd.php(9):\
    \ array_filter(Array, Object(Closure))\n#3 /tmp/tmpltdj_drd.php(18): remove_duplicates(Array)\n\
    #4 /tmp/tmpltdj_drd.php(23): candidate(Array)\n#5 /tmp/tmpltdj_drd.php(27): test()\n\
    #6 {main}\n  thrown in /tmp/tmpltdj_drd.php on line 8\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    return array_filter(\n        $numbers,\n        function ($value) use\
    \ (&$numbers) {\n            $counts = array_count_values($numbers);\n       \
    \     foreach ($numbers as $k => $v) {\n                if ($counts[$k] > 1) {\n\
    \                    unset($numbers[$k]);\n                }\n            }\n\
    \            return count($numbers);\n        }\n    );\n}\n</code>\nThis assumes\
    \ that the input numbers are already sorted, and that they are unique.  It also\
    \ assumes that the input is valid (no zeroes, no negative numbers, no NaNs, etc.).\
    \  It also assumes that you aren't using PHP's built-in sort function, which makes\
    \ this a pretty general solution that can work on arrays of different sizes (but\
    \ always sorts them in descending order before removing duplicates).\n<|/ a dscore=4\
    \ tags=php,arrays |>\n<| c |>\nThis is the best answer I have seen for this question.\
    \ Thanks.\n<|/ c |>\n<| c |>\nYeah I like it. I've used this before as well, but\
    \ I didn't think to check for duplicates. I was thinking about using `array_unique()`\n\
    <|/ c |>\n<| c |>\nIf you have an associative array with a key that contains the\
    \ number value you're looking for, this won't work. `$numbers[$k] =& $numbers[$k];`\
    \ It will break it.\n<|/ c |>\n<| c |>\nThis is good, but for associative arrays\
    \ I suggest using array_column instead of array_filter\n<|/ c |>\n<| c |>\nCan\
    \ you please give an example of how the function would work, when an associative\
    \ array is passed in? I don't quite understand how your associative array would\
    \ look like.\n<|/ c |>\n<| a tags=php,arrays |>\nHere is a recursive version:\n\
    <code>\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp7k7x4zxd.php
    on line 20

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $new = [];\n    $done = [];\n    foreach ($numbers as $number) {\n  \
    \      if (!array_key_exists($number, $done)) {\n            $new[] = $number;\n\
    \            $done[$number] = 1;\n        }\n    }\n    return $new;\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphb0s77zv.php:25\n\
    Stack trace:\n#0 /tmp/tmphb0s77zv.php(28): test()\n#1 {main}\n  thrown in /tmp/tmphb0s77zv.php\
    \ on line 25\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $count = array_count_values($numbers);\n  foreach ($count as $key => $number)\
    \ {\n    if ($number > 1) {\n      unset($numbers[$key]);\n    }\n  }\n  return\
    \ $numbers;\n}\n\n$string = 'hello, world';\n$array = explode(',', $string);\n\
    $array = remove_duplicates($array);\n$array = implode(',', $array);\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptbmhouon.php:27\n\
    Stack trace:\n#0 /tmp/tmptbmhouon.php(30): test()\n#1 {main}\n  thrown in /tmp/tmptbmhouon.php\
    \ on line 27\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  return array_filter($numbers, function($v) {\n    return count($v) == 1;\n\
    \  });\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, int given in /tmp/tmp6i4galde.php:8\nStack trace:\n\
    #0 [internal function]: {closure}(1)\n#1 /tmp/tmp6i4galde.php(9): array_filter(Array,\
    \ Object(Closure))\n#2 /tmp/tmp6i4galde.php(12): remove_duplicates(Array)\n#3\
    \ /tmp/tmp6i4galde.php(17): candidate(Array)\n#4 /tmp/tmp6i4galde.php(21): test()\n\
    #5 {main}\n  thrown in /tmp/tmp6i4galde.php on line 8\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  return array_filter(\n    $numbers,\n    function ($number) {\n      return\
    \ count($numbers) > 0 && $number == array_shift($numbers);\n    }\n  );\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp9922z6sh.php
    on line 14

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    sort($numbers);\n    return array_filter(\n        $numbers,\n      \
    \  function ($number) {\n            return $number !== array_shift($numbers);\n\
    \        }\n    );\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_shift(): Argument #1 ($array)\
    \ must be of type array, null given in /tmp/tmpuza3perv.php:11\nStack trace:\n\
    #0 /tmp/tmpuza3perv.php(11): array_shift(NULL)\n#1 [internal function]: {closure}(1)\n\
    #2 /tmp/tmpuza3perv.php(12): array_filter(Array, Object(Closure))\n#3 /tmp/tmpuza3perv.php(17):\
    \ remove_duplicates(Array)\n#4 /tmp/tmpuza3perv.php(22): candidate(Array)\n#5\
    \ /tmp/tmpuza3perv.php(26): test()\n#6 {main}\n  thrown in /tmp/tmpuza3perv.php\
    \ on line 11\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    return array_filter($numbers, function ($number) {\n        return in_array($number,\
    \ $numbers);\n    });\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $numbers in /tmp/tmpkhfrtwhw.php on line\
    \ 8\n\nFatal error: Uncaught TypeError: in_array(): Argument #2 ($haystack) must\
    \ be of type array, null given in /tmp/tmpkhfrtwhw.php:8\nStack trace:\n#0 /tmp/tmpkhfrtwhw.php(8):\
    \ in_array(1, NULL)\n#1 [internal function]: {closure}(1)\n#2 /tmp/tmpkhfrtwhw.php(9):\
    \ array_filter(Array, Object(Closure))\n#3 /tmp/tmpkhfrtwhw.php(13): remove_duplicates(Array)\n\
    #4 /tmp/tmpkhfrtwhw.php(18): candidate(Array)\n#5 /tmp/tmpkhfrtwhw.php(22): test()\n\
    #6 {main}\n  thrown in /tmp/tmpkhfrtwhw.php on line 8\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = array();\n    foreach ($numbers as $n) {\n        if (!isset($result[$n]))\
    \ {\n            $result[$n] = 1;\n        } else {\n            $result[$n]++;\n\
    \        }\n    }\n    return array_keys($result);\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3lf03syu.php:24\n\
    Stack trace:\n#0 /tmp/tmp3lf03syu.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp3lf03syu.php\
    \ on line 24\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    sort($numbers);\n    $result = [];\n    $lastNumber = null;\n    foreach\
    \ ($numbers as $number) {\n        if ($number != $lastNumber) {\n           \
    \ $result[] = $number;\n            $lastNumber = $number;\n        }\n    }\n\
    \    return $result;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw3g64pq6.php:25\n\
    Stack trace:\n#0 /tmp/tmpw3g64pq6.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpw3g64pq6.php\
    \ on line 25\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $newArray = array();\n  foreach ($numbers as $value) {\n    if (!in_array($value,\
    \ $newArray)) {\n      $newArray[] = $value;\n    }\n  }\n  return $newArray;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nNice, but unfortunately this will not remove the\
    \ duplicates from the original array or create a new array with the removed duplicates.\
    \ So the output of this method would still be `array(1, 2, 3, 4)`.\n<|/ c |>\n\
    <| c |>\n: Yes, it will. You just need to pass it the original array instead of\
    \ `$numbers`.\n<|/ c |>\n<| c |>\nYeah, I see what you mean. Although it seems\
    \ like it would be pretty easy to modify the function above to create and return\
    \ the new array with the removed duplicates.\n<|/ c |>\n<| c |>\n: Yep, that's\
    \ what I was thinking. I haven't tried it out so I don't know for sure how it\
    \ compares to my answer (except that it should probably be faster than mine),\
    \ but if anyone else has any thoughts on the speed and efficiency of this method\
    \ I'd be curious to know too.\n<|/ c |>\n<| c |>\n: Thanks for your answers. I\
    \ appreciate everyone's comments. This is probably the best solution, but I wanted\
    \ to try and avoid looping through the array twice (once for the in_array() and\
    \ then again to do the array_slice()) because I'm trying to understand what the\
    \ code is doing.\n<|/ c |>\n<| a |>\nThis is how I did it (my array is indexed\
    \ from 0 to 500).\nI created a new array and looped through the old array and\
    \ used the in_array() function to check if the current value is in the new array\
    \ before I added it to it.\n<code>\n$newArray = array();\nfor($i=0;$i<=500;$i++)\n\
    {\n    if(!in_array($array[$i], $newArray))\n    {\n        $newArray[] = $array[$i];\n\
    \    }\n}\n</code>\n<|/ a tags=php,arrays dscore=2 |>\n<| c |>\nThis works great\
    \ but if the array is large it will cause the script to become very slow.  It\
    \ would be better to loop through the array once and store the values that don't\
    \ have a duplicate.  That way the script will only have to loop through the array\
    \ a minimum of 500 times.\n<|/ c |>\n<| c |>\nWell, that depends on how many duplicates\
    \ there are. My array had around ~100 duplicate values, this solution was faster\
    \ than looping through it 500 times (tested this with a smaller array - 100 -\
    \ and it \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpr41u47_8.php
    on line 15

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $nums = $numbers;\n  sort($nums);\n  $nums = array_reverse($nums);\n  $new\
    \ = $nums[0];\n  $new_numbers = array();\n  $i = 1;\n  foreach ($nums as $num)\
    \ {\n    if ($num != $new) {\n      $new_numbers[] = $new;\n      $new = $num;\n\
    \    }\n    else\n      $i++;\n  }\n  $new_numbers[] = $new;\n  return $new_numbers;\n\
    }\n</code>\n<|/ a tags=arrays,php,unique |>\n<| a |>\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp1j37nniz.php
    on line 24

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $done = array();\n    foreach($numbers as $number)\n        if (!in_array($number,\
    \ $done))\n            $done[] = $number;\n\n    return $done;\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8e6h112x.php:21\n\
    Stack trace:\n#0 /tmp/tmp8e6h112x.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp8e6h112x.php\
    \ on line 21\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $results = [];\n    $results[] = array_shift($numbers);\n\n    while\
    \ ($numbers) {\n        $current = array_shift($numbers);\n        foreach ($results\
    \ as $key => $value) {\n            if ($value == $current) {\n              \
    \  unset($results[$key]);\n            }\n        }\n        $results[] = $current;\n\
    \    }\n\n    return $results;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwikdcaa9.php:27\n\
    Stack trace:\n#0 /tmp/tmpwikdcaa9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpwikdcaa9.php\
    \ on line 27\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $unique = array();\n  $dupes = array();\n  foreach ($numbers as $number)\
    \ {\n    if (!array_key_exists($number, $unique)) {\n      $unique[$number] =\
    \ 1;\n    } else {\n      $dupes[$number] = $number;\n    }\n  }\n  return $dupes;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyfmsy0h3.php:25\n\
    Stack trace:\n#0 /tmp/tmpyfmsy0h3.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpyfmsy0h3.php\
    \ on line 25\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $results = array();\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $results)) {\n      $results[] = $number;\n    }\n  }\n  return $results;\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nWhat about a case where you don't want\
    \ to remove duplicates? Like when you're iterating and want to keep order, but\
    \ remove duplicates based on some condition (e.g. duplicate based on ID).\n<|/\
    \ c |>\n<| c |>\n: Yes, that's the point of doing this, to remove duplicates,\
    \ if there are any.\n<|/ c |>\n<| a dscore=5 tags=php,arrays |>\nOne more solution\
    \ using array_count_values.\n<code>\n$arr = array(1,2,3,2,2,4,5,5,5);\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpqkjtx970.php
    on line 15

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $cleaned = [];\n    $seen = [];\n\n    foreach ($numbers as $number)\
    \ {\n        if (!in_array($number, $seen)) {\n            $cleaned[] = $number;\n\
    \            $seen[] = $number;\n        }\n    }\n\n    return $cleaned;\n}\n\
    </code>\n<|/ a tags=php,multidimensional-array |>\n<| c |>\nThis solution is O(n^2)\n\
    <|/ c |>\n<| c |>\nYes, I didn't check it against other answers; it may just be\
    \ what I was looking for. However this solution is more elegant in it's use of\
    \ array_filter() instead of my use of array_diff().\n<|/ c |>\n<| a tags=php,multidimensional-array\
    \ |>\nYou can use this approach\n<code>\n$new_array = array();\n$array_temp =\
    \ array(\n        array('name' => 'John', 'email' => '', 'age' => '28'),\n   \
    \     array('name' => 'Mary', 'email' => '', 'age' => '23'),\n        array('name'\
    \ => 'Steve', 'email' => '', 'age' => '35'),\n        array('name' => 'Paul',\
    \ 'email' => '', 'age' => '28'),\n        array('name' => 'Roger', 'email' =>\
    \ '', 'age' => '28'),\n        array('name' => 'Max', 'email' => '', 'age' =>\
    \ '34'),\n);\nforeach ($array_temp as $key => $value) {\n   $new_array[$key] =\
    \ $value; \n}\nforeach($array_temp as $key2 => $value2){\n    $new_array[$key2]['email']\
    \ = $value2['email'];\n}\nvar_dump($new_array);\n</code>\nOutput\n<code>\n   \
    \ array (size=3)\n  0 => \n    array (size=3)\n      'name' => string 'John' (length=3)\n\
    \      'email' => string '' (length=16)\n      'age' => string '28' (length=2)\n\
    \  1 => \n    array (size=3)\n      'name' => string 'Mary' (length=3)\n     \
    \ 'email' => string '' (length=16)\n      'age' => string '23' (length=2)\n  2\
    \ => \n    array (size=3)\n      'name' => string 'Steve' (length=4)\n      'email'\
    \ => string '' (length=16)\n      'age' => string '35' (length=2)\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n$arr = array(\narray(\n    \"\
    name\" => \"John\",\n    \"email\" => \"\",\n    \"age\" => \"28\",\n    \"gender\"\
    \ => \"male\",\n    \"country\" => \"\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpbrt60wce.php
    on line 19

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $seen = array();\n  return array_filter($numbers, function ($num) use ($seen)\
    \ {\n    if ( !isset($seen[$num])) {\n      $seen[$num] = true;\n      return\
    \ true;\n    }\n  });\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp544yjzmx.php:22\n\
    Stack trace:\n#0 /tmp/tmp544yjzmx.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp544yjzmx.php\
    \ on line 22\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $count = array_count_values($numbers);\n  $result = array_filter($numbers,\
    \ function ($value) use ($count) {\n    return $count[$value] === 1;\n  });\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfqtb3s0i.php:21\n\
    Stack trace:\n#0 /tmp/tmpfqtb3s0i.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpfqtb3s0i.php\
    \ on line 21\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $result)) {\n            $result[] = $number;\n        }\n    }\n\n    return\
    \ $result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nBut if your array have duplicates\
    \ then it will not work. Because `in_array()` function checks the array for matching\
    \ values and returns true if a value was found. I think we should check for duplicate\
    \ first and then remove them.\n<|/ c |>\n<| a dscore=1 tags=arrays,php |>\nYou\
    \ can try this.\n<code>\n$a = array_unique($b);\n</code>\n<|/ a |>\n<| c |>\n\
    But if your array have duplicates then it will not work. Because `in_array()`\
    \ function checks the array for matching values and returns true if a value was\
    \ found. I think we should check for duplicate first and then remove them.\n<|/\
    \ c |>\n<| a tags=arrays,php dscore=0 |>\nUse array_unique() function\n<code>\n\
    $a = array(1,2,3,1,2);\n$result = array_unique($a);\nprint_r($result);\n</code>\n\
    OUTPUT :\n<code>\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\nThe array unique method is not suitable in your case.\
    \ The array_unique method will remove the duplicate values from an array and return\
    \ the array. \nThe array_unique method removes duplicate values from an array\
    \ and returns the remaining values from the input array. \nYou have to perform\
    \ it before you perform array_walk.\n<code>\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpbxlhl8gy.php
    on line 16

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $hash     = array_count_values($numbers);\n    $result   = array();\n\
    \    foreach ($hash as $number => $count) {\n        if ($count > 1) {\n     \
    \       $result[] = $number;\n        }\n    }\n    return $result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\nIf you want a one liner you can use this\
    \ one:\n<code>\n$numbers = array(5,5,10,10,30,30);\n$uniqueNumbers = array_unique($numbers);\n\
    </code>\n<|/ a tags=php |>\n<| c |>\nThis will result in: array(10, 30). Not what\
    \ OP wanted.\n<|/ c |>\n<| c |>\nHe wants to remove duplicates, but keep the order\
    \ of the initial array.\n<|/ c |>\n<| a tags=php |>\n<code>\n$numbers = array(5,5,10,10,30,30);\n\
    $uniqueNumbers = array_unique($numbers);\n</code>\nResult: array(10, 30);\n<|/\
    \ a dscore=0 |>\n<| a tags=php |>\nYou can use array_unique\n<code>\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpor0beswb.php
    on line 16

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n\n  foreach($numbers as $num) {\n    if (!in_array($num,\
    \ $result)) {\n      $result[] = $num;\n    }\n  }\n\n  return $result;\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nI think this is great but i can't figure out how to\
    \ get the total count of all the numbers, can you help me with that too?\n<|/\
    \ c |>\n<| a |>\nI used array_count_values, but I found it too hard to use. I\
    \ couldn't find any documentation on array_count_values. I did find a blog post\
    \ that explains how it works, and how I used it instead.\n<code>\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpd2r_k3ju.php
    on line 17

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n\n  // Build a lookup table of the values seen so far by\n\
    \  // building a lookup table of values seen, each index\n  // representing how\
    \ many times it appears in the input.\n  $lookup = [];\n  foreach ($numbers as\
    \ $number) {\n    if (array_key_exists($number, $lookup)) {\n      $lookup[$number]\
    \ += 1;\n    } else {\n      $lookup[$number] = 1;\n    }\n  }\n\n  foreach ($lookup\
    \ as $number => $count) {\n    if ($count > 1) {\n      $result[] = $number;\n\
    \    }\n  }\n\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\n\
    I agree, your code is better than the accepted answer.\n<|/ c |>\n<| a dscore=5\
    \ tags=php,arrays |>\nHere is a solution that is easy to read and easy to understand.\n\
    <code>\n<?php\n$array = [1,2,3,4,5,6,2,1,3,4];\n$unique = array_unique(array_filter($array));\n\
    print_r($unique);\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpja25pv3_.php
    on line 29

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  return array_filter($numbers, function($number) {\n    return count($numbers)\
    \ == 1 || count($numbers) == 0;\n  });\n}\nfunction candidate(...$args) {\n  \
    \  return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $numbers in /tmp/tmpg4rotx2w.php on line\
    \ 8\n\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, null given in /tmp/tmpg4rotx2w.php:8\nStack trace:\n\
    #0 [internal function]: {closure}(1)\n#1 /tmp/tmpg4rotx2w.php(9): array_filter(Array,\
    \ Object(Closure))\n#2 /tmp/tmpg4rotx2w.php(12): remove_duplicates(Array)\n#3\
    \ /tmp/tmpg4rotx2w.php(17): candidate(Array)\n#4 /tmp/tmpg4rotx2w.php(21): test()\n\
    #5 {main}\n  thrown in /tmp/tmpg4rotx2w.php on line 8\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $numbers = array_count_values($numbers);\n    return array_filter($numbers,\
    \ function ($n) use ($numbers) {\n        return $n > 1;\n    }, ARRAY_FILTER_USE_KEY);\n\
    }\n</code>\n<|/ a tags=php,arrays dscore=3 |>\n<| c |>\nThis does not work if\
    \ you have a multidimensional array\n<|/ c |>\n<| c |>\n`array_filter` does not\
    \ support multidimensional arrays. See [this SO answer](http://stackoverflow.com/a/11596778/1927206)\
    \ for more information\n<|/ c |>\n<| c |>\n: That's because you misunderstood\
    \ what `array_filter` does. It does not filter anything out. It filters elements\
    \ from the input array that satisfy a specific criterion. It's not intended to\
    \ filter out all duplicates. It is not intended to delete items from a multi-dimensional\
    \ array. It's not intended to filter *out* duplicates. It is not intended to delete\
    \ duplicates in a multi-dimensional array. It's not intended to delete items from\
    \ a multi-dimensional array that match a certain criterion. It's not intended\
    \ to delete all duplicates. It's not intended to remove all duplicates from *any*\
    \ array. It's not intended to remove duplicates from *any* array in any way. It's\
    \ not intended to delete all duplicates from a multi-dimensional array that match\
    \ a certain criterion.\n<|/ c |>\n<| c |>\n: So what exactly are you trying to\
    \ do? Please post an example of what you want to do. Just saying you want to remove\
    \ duplicates does not tell me what you want to do.\n<|/ c |>\n<| c |>\nThe example\
    \ was already there but anyway I think what he wants is the output you see in\
    \ his example. That's why I wrote the code to do that.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\nI see that there is already a very good answer by Ian Roberts, though it\
    \ is missing a couple of things.\nFirst, the example array does not contain an\
    \ index with the keys to unset values, so array_filter() will fail.\nSecond, array_filter()\
    \ does not remove all duplicates, only values that match the criterion given in\
    \ the second parameter. It does not matter which of the values that match the\
    \ criterion will be removed, only that they will be removed.\nTo remove all duplicates,\
    \ you should use array_unique() instead.\nAdditionally, the array_count_values()\
    \ function requires an array to work with, so array_filter() will not work with\
    \ an multi-dimensional array. Instead, you will have to loop through the array\
    \ and count each key individually to output a unique array that has the same keys\
    \ and values.\nHere is an example of the full code:\n<code>\n<?php\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmprwf6neeb.php
    on line 12

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $numbers = array_values($numbers);\n  $numbers = array_filter($numbers,\
    \ function($x) {\n    return !array_search($x, $numbers);\n  });\n  return $numbers;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI'm not a PHP expert, but my intuition\
    \ tells me that this algorithm is `O(n^2)`; it's `O(n)` because `array_unique`\
    \ sorts the array and `array_search` looks for a value in it - but `array_search`\
    \ also has to iterate over each element in the array, so it's `O(n * log(n))`.\n\
    <|/ c |>\n<| a dscore=0 |>\nA simple solution without loop is using array_unique\
    \ and array_search combined with a foreach loop:\n<code>\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp_ql481_w.php
    on line 13

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $output = array();\n  foreach ($numbers as $number) {\n    if (!array_search($number,\
    \ $output)) {\n      $output[] = $number;\n    }\n  }\n  return $output;\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdgrklyv4.php:22\n\
    Stack trace:\n#0 /tmp/tmpdgrklyv4.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpdgrklyv4.php\
    \ on line 22\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $counts = array_count_values($numbers);\n  foreach ($counts as $number\
    \ => $count) {\n    if ($count > 1) {\n      unset($numbers[$number]);\n    }\n\
    \  }\n  return $numbers;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4_lvk9sg.php:23\n\
    Stack trace:\n#0 /tmp/tmp4_lvk9sg.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp4_lvk9sg.php\
    \ on line 23\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    foreach ($numbers as $key => $value) {\n        if\
    \ (in_array($value, $result))\n            unset($numbers[$key]);\n        else\n\
    \            $result[] = $value;\n    }\n    return $numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqbhjfxkp.php:24\n\
    Stack trace:\n#0 /tmp/tmpqbhjfxkp.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqbhjfxkp.php\
    \ on line 24\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $number) {\n    if (in_array($number,\
    \ $result)) {\n      continue;\n    }\n    $result[] = $number;\n  }\n  return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb2d_5n3z.php:23\n\
    Stack trace:\n#0 /tmp/tmpb2d_5n3z.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpb2d_5n3z.php\
    \ on line 23\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $seen = array();\n  foreach ($numbers as $number) {\n    if (array_key_exists($number,\
    \ $seen)) {\n      unset($seen[$number]);\n    } else {\n      $seen[$number]\
    \ = $number;\n    }\n  }\n  return $seen;\n}\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu38l9abu.php:23\n\
    Stack trace:\n#0 /tmp/tmpu38l9abu.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpu38l9abu.php\
    \ on line 23\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $seen = array();\n  $output = array();\n  foreach ($numbers as $key =>\
    \ $value) {\n    if (!array_key_exists($value, $seen)) {\n      $seen[$value]\
    \ = $key;\n      $output[$value] = $value;\n    }\n  }\n  return $output;\n}\n\
    \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp98u4svi6.php:24\n\
    Stack trace:\n#0 /tmp/tmp98u4svi6.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp98u4svi6.php\
    \ on line 24\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $occurance = array_count_values($numbers);\n  $results = array();\n  foreach($numbers\
    \ as $number) {\n    if(!isset($occurance[$number])) {\n      $results[] = $number;\n\
    \    }\n  }\n  return $results;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp186j_39g.php:23\n\
    Stack trace:\n#0 /tmp/tmp186j_39g.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp186j_39g.php\
    \ on line 23\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $return = array();\n  $seen = array();\n  foreach ($numbers as $number)\
    \ {\n    if (!array_key_exists($number, $seen)) {\n      $return[] = $number;\n\
    \      $seen[$number] = $number;\n    }\n  }\n  return $return;\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz18rzcde.php:25\n\
    Stack trace:\n#0 /tmp/tmpz18rzcde.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpz18rzcde.php\
    \ on line 25\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    return array_count_values($numbers);\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpboi_u6ru.php:15\n\
    Stack trace:\n#0 /tmp/tmpboi_u6ru.php(19): test()\n#1 {main}\n  thrown in /tmp/tmpboi_u6ru.php\
    \ on line 15\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = array();\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $result)) {\n            $result[] = $number;\n        }\n    }\n    return\
    \ $result;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks. This is an elegant solution\
    \ for PHP 5.6+. `array_unique` will also work for PHP 5.5+ too.\n<|/ c |>\n<|\
    \ c |>\nThis is very helpful for me. Thank you!\n<|/ c |>\n<| a |>\nI wrote an\
    \ article that explains how to achieve this in PHP:\nhttp://php-for-beginners.blogspot.com/2012/10/unique-array-with-objects-in-php.html\n\
    <code>\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpvm6_85c5.php
    on line 15

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $numbers = array_values(array_unique($numbers));\n  foreach ($numbers as\
    \ $key => $number) {\n    if ($number === $numbers[$key - 1]) {\n      unset($numbers[$key]);\n\
    \    }\n  }\n\n  return $numbers;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key -1 in /tmp/tmpm1fy0783.php on line 9\n\n\
    Warning: Undefined array key -1 in /tmp/tmpm1fy0783.php on line 9\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpm1fy0783.php:24\nStack trace:\n\
    #0 /tmp/tmpm1fy0783.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpm1fy0783.php\
    \ on line 24\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $numbers = array_values($numbers);\n    $unique_numbers = array();\n\n\
    \    foreach ($numbers as $number) {\n        if (!in_array($number, $unique_numbers))\
    \ {\n            $unique_numbers[] = $number;\n        }\n    }\n\n    return\
    \ $unique_numbers;\n}\n</code>\n<|/ a tags=arrays,php dscore=0 |>\n<| c |>\nthis\
    \ does not work, because it removes all duplicates except one that comes first.\
    \ For example, if array is `[1, 2, 2, 3, 4, 4]` - result will be `[1, 2, 3, 4]`\n\
    <|/ c |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpm298hbu4.php
    on line 18

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$result = array();\n\t$numbers_count = count($numbers);\n\tfor ($i = 0;\
    \ $i < $numbers_count; $i++) {\n\t\tif (isset($result[$numbers[$i]]))\n\t\t\t\
    continue;\n\t\t$result[$numbers[$i]] = $numbers[$i];\n\t}\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rny1cg_.php:23\n\
    Stack trace:\n#0 /tmp/tmp6rny1cg_.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp6rny1cg_.php\
    \ on line 23\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    foreach ($numbers as $number) {\n        $results[] = $number;\n    }\n\
    \    return $results;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $results in /tmp/tmprc2uo7qj.php on line\
    \ 10\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprc2uo7qj.php:18\n\
    Stack trace:\n#0 /tmp/tmprc2uo7qj.php(23): test()\n#1 {main}\n  thrown in /tmp/tmprc2uo7qj.php\
    \ on line 18\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  return array_filter($numbers, function($value) use (&$numbers) {\n    return\
    \ !in_array($value, $numbers);\n  });\n}\n\nfunction candidate(...$args) {\n \
    \   return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ytbgn_0.php:18\n\
    Stack trace:\n#0 /tmp/tmp9ytbgn_0.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp9ytbgn_0.php\
    \ on line 18\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $return = array();\n  foreach ($numbers as $key => $value) {\n    if (in_array($value,\
    \ $return)) {\n      unset($numbers[$key]);\n    }\n    elseif (!isset($numbers[$key]))\
    \ {\n      $return[] = $value;\n    }\n  }\n  return $return;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptcf83q90.php:25\n\
    Stack trace:\n#0 /tmp/tmptcf83q90.php(29): test()\n#1 {main}\n  thrown in /tmp/tmptcf83q90.php\
    \ on line 25\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $hash   = array();\n    $result = array();\n\n    foreach ($numbers as\
    \ $number) {\n        // If we haven't seen this number yet, add it to the result\
    \ array and\n        // add it to the hash array.\n        if (!isset($hash[$number]))\
    \ {\n            $result[] = $number;\n            $hash[$number] = true;\n  \
    \      }\n    }\n\n    return $result;\n}\n</code>\n<|/ a tags=php,arrays,unique\
    \ dscore=0 |>\n<| a tags=php,arrays,unique dscore=0 |>\nYou could sort it and\
    \ only keep the elements which are equal to their neighbour:\n<code>\n$unique\
    \ = array_unique(array_diff(\n    array_map(function($x, $y) {\n        return\
    \ $x == $y - 1 || $x == $y + 1 ? 1 : 0;\n    }, \n    array_chunk($array, 2),\n\
    \    array_chunk($array, 2)\n), \narray_flip(array_map(function($x) {\n    return\
    \ $x - 1;\n}, $array)));\n</code>\n<|/ a |>\n<| a tags=php,arrays,unique |>\n\
    A short and simple solution:\n<code>\n$unique = array_filter(\n    array_unique(\n\
    \        array_map(\n            function($i,$j) {\n                return (abs($i)==abs($j))?0:1;\n\
    \            },\n            array_keys($array),\n            array_keys($array)\n\
    \        )\n    )\n);\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays,unique\
    \ |>\n<code>\n<?php\n    $array = [2,4,1,3,2];\n    for($i=0; $i < count($array);\
    \ $i++){\n        for($j=$i+1; $j < count($array); $j++){\n            if($array[$i]\
    \ == $array[$j]){\n                unset($array[$j]);\n            }\n       \
    \ }\n    }\n    print_r($array);\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpvs3ayh7t.php
    on line 21

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  if (empty($numbers)) {\n    return array();\n  }\n  $seen = array();\n\
    \  $out = array();\n  foreach ($numbers as $i => $num) {\n    if (!isset($seen[$num]))\
    \ {\n      $seen[$num] = 1;\n      $out[$i] = $num;\n    }\n  }\n  return $out;\n\
    }\n\n/**\n * Remove items from a list that occur more than once.\n * Given $numbers\
    \ = array(1, 2, 3, 2, 4, 5) and $numbers_to_delete = array(1, 3),\n * this would\
    \ return array(1, 4, 5).\n * Note: This does not preserve key order.\n *\n * @param\
    \ $numbers\n *   The array of numbers that may contain duplicates.\n * @param\
    \ $numbers_to_delete\n *   The array of numbers to remove.\n * @return\n *   An\
    \ array of numbers containing no duplicates of $numbers_to_delete\n */\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dzr8p_f.php:41\n\
    Stack trace:\n#0 /tmp/tmp6dzr8p_f.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp6dzr8p_f.php\
    \ on line 41\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = array();\n  foreach ($numbers as $number) {\n    if (in_array($number,\
    \ $result)) {\n      continue;\n    }\n    $result[] = $number;\n  }\n  return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprpjt2zcy.php:23\n\
    Stack trace:\n#0 /tmp/tmprpjt2zcy.php(26): test()\n#1 {main}\n  thrown in /tmp/tmprpjt2zcy.php\
    \ on line 23\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $count = array_count_values($numbers);\n\n  // Sort the array.\n  arsort($count);\n\
    \n  return array_keys($count);\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\n`array_count_values`\
    \ returns a multidimensional array, with each value as an array index. Something\
    \ like `array( 0 => 1, 1 => 2, ...)`\n<|/ c |>\n<| c |>\nThanks for pointing that\
    \ out. I have updated my answer to fix that.\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ that out. I had made a mistake as I have updated the answer. The above code\
    \ now works for me.\n<|/ c |>\n<| c |>\nIt's not a big deal, but the code doesn't\
    \ work with `remove_duplicates([1,2,3,2,3,4,5,2])`.\n<|/ c |>\n<| c |>\nIn case\
    \ it wasn't obvious enough, `array_count_values` will produce a count of values\
    \ with the value \"1\" as `1`, not as the value `1`. This means that any subsequent\
    \ `array_values()` will produce a count of 1s for each unique value, instead of\
    \ just counting the number of times each value occurs.\n<|/ c |>\n<| a dscore=5\
    \ |>\nYou can count the occurrences of each element using the following function:\n\
    <code>\n$array = array(1,1,2,3,3,3,3,3);\n\n$counts = array_count_values($array);\n\
    \nprint_r($counts);\n</code>\nOutput\n<code>\nArray\n(\n    [1] => 3\n    [2]\
    \ => 2\n    [3] => 2\n)\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=5 |>\n\
    <code>\n<?php\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp18n9f3u_.php
    on line 14

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  // Sort the array so that duplicate elements are next to each other.\n\
    \  sort($numbers);\n  // Create a hash of each value to find out if it has already\
    \ been encountered.\n  $unique_numbers = array_flip($numbers);\n  // Loop over\
    \ the array and skip elements that have already been seen.\n  foreach ($numbers\
    \ as $number) {\n    if (isset($unique_numbers[$number])) {\n      unset($unique_numbers[$number]);\n\
    \    }\n  }\n  // Return array in original order.\n  return $numbers;\n}\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp29mbtt5r.php:27\n\
    Stack trace:\n#0 /tmp/tmp29mbtt5r.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp29mbtt5r.php\
    \ on line 27\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$result = array();\n\n\tforeach($numbers as $num) {\n\t\tif (!in_array($num,\
    \ $result)) {\n\t\t\t$result[] = $num;\n\t\t}\n\t}\n\n\treturn $result;\n}\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprr3qhz42.php:24\n\
    Stack trace:\n#0 /tmp/tmprr3qhz42.php(27): test()\n#1 {main}\n  thrown in /tmp/tmprr3qhz42.php\
    \ on line 24\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $uniques = array();\n  foreach ($numbers as $number) {\n    if (!array_key_exists($number,\
    \ $uniques)) {\n      $uniques[$number] = $number;\n    }\n  }\n  return array_values($uniques);\n\
    }\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp99mwdadz.php:22\n\
    Stack trace:\n#0 /tmp/tmp99mwdadz.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp99mwdadz.php\
    \ on line 22\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $unique = [];\n  $sorted = $numbers;\n\n  do {\n    $unique = array_merge($unique,\
    \ $sorted);\n    $sorted = array_diff($sorted, $unique);\n  } while ($sorted);\n\
    \n  return $unique;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nNot sure how\
    \ you think this is different from the accepted answer which also uses `array_intersect`?\n\
    <|/ c |>\n<| c |>\nThe accepted answer is using two arrays, one containing the\
    \ current positions of the elements to be removed, the other containing the numbers\
    \ to be removed. So basically they are the same. `array_intersect` just gives\
    \ us the unique numbers. Since he was looking for an answer that didn't use two\
    \ arrays, I think my solution was the correct answer. Since my solution also does\
    \ not use two arrays, it works faster than the `array_intersect` solution.\n<|/\
    \ c |>\n<| a tags=php,arrays |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp625dyaeq.php
    on line 17

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n\n    foreach ($numbers as $number) {\n        $found\
    \ = false;\n\n        foreach ($result as $key => $value) {\n            if ($value\
    \ == $number) {\n                $found = true;\n                break;\n    \
    \        }\n        }\n\n        if (!$found) {\n            $result[] = $number;\n\
    \        }\n    }\n\n    return $result;\n}\n</code>\nI hope this helps.\n<|/\
    \ a tags=php |>\n<| c |>\nThis should be the accepted answer. Simple, efficient,\
    \ works even with a nested array.\n<|/ c |>\n<| a |>\nIf you want the most efficient\
    \ method (no looping through the array), then use array_count_values() on every\
    \ element in the array, and rebuild the array based on the results. \nIn one line:\
    \ \n<code>\n$arrayToCount = array_count_values($array);\n$array = $arrayToCount;\n\
    </code>\n<|/ a dscore=3 tags=php |>\n<| a |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpbjs1gn3v.php
    on line 26

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  // Use PHP's array filter function instead of a loop.\n  return array_filter($numbers,\
    \ function($el) {\n    // Use isset instead of array_key_exists - isset returns\
    \ false if the\n    // key is not in the array (which would be the case if it\
    \ was empty or\n    // falsey which would be a good thing to check for).\n   \
    \ return !isset($results[$el]);\n  });\n}\nfunction candidate(...$args) {\n  \
    \  return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprs5zqo_u.php:22\n\
    Stack trace:\n#0 /tmp/tmprs5zqo_u.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprs5zqo_u.php\
    \ on line 22\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  return array_unique($numbers);\n}\n\nfunction candidate(...$args) {\n \
    \   return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf91pqktt.php:17\n\
    Stack trace:\n#0 /tmp/tmpf91pqktt.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpf91pqktt.php\
    \ on line 17\n"
  timestamp: 1659978687
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $number_counts = array_count_values($numbers);\n    $return = array();\n\
    \    foreach ($number_counts as $number => $count) {\n        if ($count == 1)\
    \ {\n            $return[] = $number;\n        }\n    }\n    return $return;\n\
    }\n\n/**\n * Returns an array of all elements in an array that do not occur in\
    \ the second array.\n * Returns an empty array if there are no such elements.\n\
    \ * >>> array_diff_key(array(1, 2, 3), array(1, 3, 3))\n * array()\n * >>> array_diff_key(array(1,\
    \ 2, 3), array(1, 3, 2))\n * array(2)\n */\nfunction candidate(...$args) {\n \
    \   return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $result)) {\n      $result[] = $number;\n    }\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj0gcpzmy.php:23\n\
    Stack trace:\n#0 /tmp/tmpj0gcpzmy.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpj0gcpzmy.php\
    \ on line 23\n"
  timestamp: 1659978713
- exit_code: 0
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $number) {\n    if (!isset($result[$number]))\
    \ {\n      $result[$number] = 1;\n    } else {\n      $result[$number]++;\n  \
    \  }\n  }\n  foreach ($result as $number => $count) {\n    if ($count > 1) {\n\
    \      unset($result[$number]);\n    }\n  }\n  return array_keys($result);\n}\n\
    \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $uniques = [];\n\n  foreach ($numbers as $number) {\n    if (in_array($number,\
    \ $uniques)) continue;\n    $uniques[] = $number;\n  }\n\n  return $uniques;\n\
    }\n</code>\n<|/ a |>\n<| a tags=php,arrays,sorting dscore=2 |>\nYou can do that\
    \ with array_count_values() function.\n<|/ a |>\n<| c |>\narray_count_values()\
    \ is a PHP 5 function introduced in PHP 5\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ dscore=2 |>\nI like Alex's answer. However, it seems like the built-in function\
    \ array_count_values() is also going to be useful for this particular problem.\n\
    <code>\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp7g6u79w6.php
    on line 16

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    return array_filter($numbers, function ($number) {\n        return !in_array($number,\
    \ array_slice($numbers, array_search($number, $numbers)));\n    });\n}\n</code>\n\
    <|/ a dscore=4 |>\n<| a dscore=3 tags=arrays,duplicates,php |>\n<code>\n<?php\n\
    $array = array(1, 1, 2, 3, 4, 4, 6, 2);\n$uniques = array_unique($array);\n$count\
    \ = array_count_values($array);\n$dupes = array_diff_assoc($uniques, $count);\n\
    print_r($dupes);\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp4vl9j__b.php
    on line 11

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    sort($numbers);\n    $results = [];\n    $currentKey = null;\n    $lastKey\
    \ = null;\n    foreach ($numbers as $number) {\n        if ($number == $currentKey)\
    \ {\n            continue;\n        }\n        if ($currentKey !== null) {\n \
    \           $results[] = $currentKey;\n        }\n        $currentKey = $number;\n\
    \        $lastKey = $number;\n    }\n    if ($currentKey !== null) {\n       \
    \ $results[] = $currentKey;\n    }\n    return $results;\n}\n</code>\n<|/ a dscore=0\
    \ tags=php,sorting |>\n<| a tags=php,sorting |>\nThe accepted answer isn't quite\
    \ correct, since it doesn't sort in-place.\nTry this:\n<code>\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpy_euj8a2.php
    on line 26

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $clean = [];\n  foreach ($numbers as $key => $value) {\n    if (!isset($clean[$value]))\
    \ {\n      $clean[$value] = $value;\n    }\n  }\n  return $clean;\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3arb8f49.php:22\n\
    Stack trace:\n#0 /tmp/tmp3arb8f49.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp3arb8f49.php\
    \ on line 22\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  // TODO: this can be done in O(N) time\n  $numbers = array_values($numbers);\n\
    \  $last_value = $numbers[0];\n  return array_filter(\n    $numbers,\n    function($value)\
    \ use ($last_value) {\n      if ($value === $last_value) {\n        return FALSE;\n\
    \      }\n      if ($last_value === 0) {\n        $last_value = $value;\n    \
    \    return TRUE;\n      }\n      return ($value !== $last_value) ? FALSE : TRUE;\n\
    \    }\n  );\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpvrgeo_z8.php on line 9\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpvrgeo_z8.php:31\nStack\
    \ trace:\n#0 /tmp/tmpvrgeo_z8.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpvrgeo_z8.php\
    \ on line 31\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $numbers = array_unique($numbers);\n    sort($numbers);\n    $count =\
    \ count($numbers);\n    for ($i=0; $i<$count; $i++) {\n        $numbers[$i] =\
    \ $i;\n    }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp682poyvb.php:22\n\
    Stack trace:\n#0 /tmp/tmp682poyvb.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp682poyvb.php\
    \ on line 22\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    $occurance = [];\n    foreach ($numbers as $number)\
    \ {\n        if (empty($occurance[$number])) {\n            $occurance[$number]\
    \ = 1;\n            $result[] = $number;\n        } else {\n            $occurance[$number]++;\n\
    \        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnvtid4uv.php:26\n\
    Stack trace:\n#0 /tmp/tmpnvtid4uv.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpnvtid4uv.php\
    \ on line 26\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    return array_unique(array_filter($numbers));\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8gych70u.php:17\n\
    Stack trace:\n#0 /tmp/tmp8gych70u.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp8gych70u.php\
    \ on line 17\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    return array_filter($numbers, function($value, $key) {\n        return\
    \ !in_array($value, $numbers);\n    });\n}\n</code>\n<|/ a |>\n<| c |>\nWhat if\
    \ $numbers is a large array and some of its values are the same? In this case\
    \ all duplicates will be removed.\n<|/ c |>\n<| c |>\nThen it would be the opposite,\
    \ to keep all duplicates\n<|/ c |>\n<| a tags=arrays,php |>\nIn PHP 7 you can\
    \ do this:\n<code>\n$numbers = [1, 2, 3, 2, 4];\n$numbers = array_filter($numbers,\
    \ function($v, $k) {\n    return $v === $k;\n});\n\nprint_r($numbers);\n</code>\n\
    Outputs:\n<code>\nArray ( [0] => 1 [1] => 3 [2] => 4 )\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nYeah, this works with PHP 7. Be aware that if the array has multiple\
    \ copies of the same value, this will filter out all of them (as if by `unset($value)`).\
    \ If you want to keep the array as-is, you can use `if($v === $k) unset($numbers[$k]);`\
    \ instead.\n<|/ c |>\n<| a dscore=4 tags=arrays,php |>\nUsing a foreach loop and\
    \ comparing if the current item is in the array (in_array):\n<code>\n$numbers\
    \ = [1,2,3,4,4,4,6];\nforeach($numbers as $key => $number) {\n    if(in_array($number,\
    \ $numbers)) {\n        unset($numbers[$key]);\n    }\n}\n</code>\n<|/ a |>\n\
    <| a dscore=4 |>\n<code>\n$numbers = [1,2,3,4,4,4,6];\n$numbers = array_filter($numbers,\
    \ function($number) {\n    return in_array($number, $numbers);\n});\n</code>\n\
    <|/ a tags=arrays,php |>\n<| c |>\nThis answer was already given earlier by someone\
    \ else but I don't see any reason to repeat it. He could have added it as a comment\
    \ to's answer. Hence I added my answer for others who might have same question.\n\
    <|/ c |>\n<| c |>\nAgain - this answer was given earlier by someone else but I\
    \ don't see any reason to repeat it. He could have added it as a comment to's\
    \ answer. Hence I added my answer for others who might have same question.\n<|/\
    \ c |>\n<| c |>\nI understand what you mean but I thought that it would be helpful\
    \ to explain why it is done the way it is.\nfunction candidate(...$args) {\n \
    \   return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpmnglvsz1.php
    on line 11

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $result)) {\n            $result[] = $number;\n        }\n    }\n    return\
    \ $result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is a great solution if you do\
    \ not need the array to be ordered.\n<|/ c |>\n<| a dscore=5 |>\nAs an alternative\
    \ to other methods you can simply sort array using array_unique()\n<code>\n$arr\
    \ = ['1','2','3','1','4'];\n$arr = array_unique($arr);\n</code>\nIt will remove\
    \ duplicate values from array and leave the order as is.\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\nBut `array_unique` doesn't guarantee order will be preserved\n\
    <|/ c |>\n<| c |>\nIt will preserve order and if array contains numeric keys it\
    \ will preserve numeric keys.\n<|/ c |>\n<| c |>\nIt preserves the key order,\
    \ but if you have array like `[0] => 3`, `[1] => 3`, `[2] => 5`, `[3] => 8` then\
    \ it will be rearranged to `[0] => 3`, `[1] => 5`, `[2] => 8`. https://3v4l.org/Rq5Nq\n\
    <|/ c |>\n<| c |>\nIt works well but can u tell me that what is the problem of\
    \ array_unique($arr);\n<|/ c |>\n<| c |>\nIf you have array like `[0] => 3`, `[1]\
    \ => 3`, `[2] => 5`, `[3] => 8` then it will be rearranged to `[0] => 3`, `[1]\
    \ => 5`, `[2] => 8`. https://3v4l.org/Rq5Nq\n<|/ c |>\n<| a tags=arrays,php |>\n\
    In case if you don't want to use any extra functions or methods like array_unique(),\
    \ you can simply use array_count_values() to get count of each element of an array\
    \ and then use array_filter() to get an array of unique elements from given array.\n\
    <code>\n$arr = [1,2,2,3,4];\n\n$counts = array_count_values($arr);\n$unique =\
    \ array_filter($arr, function($value) use ($counts) {\n    return isset($counts[$value]);\n\
    });\n\nprint_r($unique);\n</code>\nOutput\n<code>\nArray\n(\n    [0] => 1\n  \
    \  [2] => 3\n)\n</code>\n<|/ a dscore=5 |>\n<| c |>\narray_filter is more efficient\
    \ than other solutions i found on this page\n<|/ c |>\n<| c |>\nThis should be\
    \ the correct answer to the \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp2jrqsqk6.php
    on line 15

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $n) {\n    if (array_search($n, $result)\
    \ === false) {\n      $result[] = $n;\n    }\n  }\n\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5fbq0g0h.php:24\n\
    Stack trace:\n#0 /tmp/tmp5fbq0g0h.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp5fbq0g0h.php\
    \ on line 24\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  return array_filter($numbers, function ($item) {\n    return count($numbers)\
    \ == count(array_unique($numbers));\n  });\n}\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $numbers in /tmp/tmpjw03iqio.php on line\
    \ 8\n\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, null given in /tmp/tmpjw03iqio.php:8\nStack trace:\n\
    #0 [internal function]: {closure}(1)\n#1 /tmp/tmpjw03iqio.php(9): array_filter(Array,\
    \ Object(Closure))\n#2 /tmp/tmpjw03iqio.php(12): remove_duplicates(Array)\n#3\
    \ /tmp/tmpjw03iqio.php(17): candidate(Array)\n#4 /tmp/tmpjw03iqio.php(21): test()\n\
    #5 {main}\n  thrown in /tmp/tmpjw03iqio.php on line 8\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $unique = array();\n\n    foreach ($numbers as $number) {\n        if\
    \ (!in_array($number, $unique)) {\n            $unique[] = $number;\n        }\n\
    \    }\n\n    return $unique;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz2mvklrk.php:25\n\
    Stack trace:\n#0 /tmp/tmpz2mvklrk.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpz2mvklrk.php\
    \ on line 25\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach ($numbers as $number) {\n    if (in_array($number,\
    \ $result)) {\n      continue;\n    }\n    $result[] = $number;\n  }\n  return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb2d_5n3z.php:23\n\
    Stack trace:\n#0 /tmp/tmpb2d_5n3z.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpb2d_5n3z.php\
    \ on line 23\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  foreach ($numbers as $key => $number) {\n    if (isset($numbers[$key +\
    \ 1])) {\n      if ($number == $numbers[$key + 1]) {\n        unset($numbers[$key]);\n\
    \      }\n    }\n  }\n  return $numbers;\n}\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9mchve0d.php:23\n\
    Stack trace:\n#0 /tmp/tmp9mchve0d.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9mchve0d.php\
    \ on line 23\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $seen = array();\n    return array_filter($numbers, function($num) use\
    \ (&$seen) {\n        if (in_array($num, $seen)) {\n            return false;\n\
    \        }\n        $seen[] = $num;\n        return true;\n    });\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph9_w9x4r.php:24\n\
    Stack trace:\n#0 /tmp/tmph9_w9x4r.php(27): test()\n#1 {main}\n  thrown in /tmp/tmph9_w9x4r.php\
    \ on line 24\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n\n  foreach ($numbers as $number) {\n    if (in_array($number,\
    \ $result)) {\n      continue;\n    }\n\n    $result[] = $number;\n  }\n\n  return\
    \ $result;\n}\n</code>\nThis code uses a function that is specifically designed\
    \ to do this kind of thing.  It has several advantages:\n\nIt is efficient and\
    \ fast (tested with 1,000,000 iterations).\nIt uses no memory (tested with 10,000,000\
    \ iterations).\nIt doesn't mutate the original array.\nIt doesn't use any temporary\
    \ variables.\n\nThe code is also a bit more readable than some other solutions.\n\
    <|/ a tags=php,arrays dscore=0 |>\n<| a tags=php,arrays |>\nI realized that most\
    \ of these answers don't work, because the keys are also removed and duplicates\
    \ are removed.\nTry this: \n<code>\n$unique = array();\n$duplicates = array();\n\
    \nforeach ($arr as $key => $val)\n{\n    if (!in_array($val, $unique))\n    {\n\
    \        $unique[$key] = $val;\n    }\n    else\n    {\n        $duplicates[$key]\
    \ = $val;\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    \n$arr = array(1,2,3,4,1,2,3,4,5,6,7,7,7);\n\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmps8e7kz2f.php
    on line 19

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  // Create a new array and keep track of the numbers that we've already\
    \ seen\n  $new_array = array();\n  $seen_numbers = array();\n  foreach ($numbers\
    \ as $number) {\n    // If we've never seen this number before, or we see it again,\
    \ add it to the new array\n    if ( ! in_array($number, $seen_numbers) || in_array($number,\
    \ $new_array)) {\n      $new_array[] = $number;\n    }\n    // Update our seen\
    \ numbers\n    $seen_numbers[] = $number;\n  }\n  // Return the new array\n  return\
    \ $new_array;\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nIt's good answer, but `in_array`\
    \ can be slow\n<|/ c |>\n<| a |>\nThis can help you :\n<code>\n$arr = array(1,\
    \ 4, 1, 8, 4, 8);\n$new = array();\nforeach($arr as $v) {\n    if(!isset($new[$v]))\
    \ $new[$v] = 0;\n    $new[$v]++;\n}\n</code>\n<|/ a dscore=2 tags=php,arrays |>\n\
    <| c |>\nThis will work, but I don't think it answers the question. OP wants the\
    \ unique elements in the array to be *first*, not the occurrences.\n<|/ c |>\n\
    <| c |>\n: I didnt get your point ?\n<|/ c |>\n<| c |>\n: I thought he wants unique\
    \ elements, not only occurrence.\n<|/ c |>\n<| c |>\nI think he wants unique elements,\
    \ not only occurrence. Try this array with duplicate values: `$arr = array(1,\
    \ 4, 1, 8, 4, 8);`\n<|/ c |>\n<| c |>\n: But its not unique array. it is repeated\
    \ values only, but in original array there are different values\n<|/ c |>\n<|\
    \ a dscore=2 tags=php,arrays |>\nIf your PHP version is >= 5.5:\n<code>\narray_count_values($numbers);\n\
    </code>\n<|/ a |>\n<| a tags=php,arrays dscore=1 |>\n<code>\n$arr = array(1, 4,\
    \ 1, 8, 4, 8);\n$new = $arr;\n$counts = array();\nforeach ($new as $k => $v)\n\
    {\n  if (!isset($counts[$v]))\n  {\n    $counts[$v] = 0;\n  }\n  $counts[$v]++;\n\
    }\n$result = array();\nforeach ($new as $v => $count) {\n  if ($count > 1)\n \
    \ {\n    $result[] = $v;\n  }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpwn3djjdh.php
    on line 21

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach($numbers as $number) {\n    if (!isset($result[$number]))\
    \ {\n      $result[$number] = 1;\n    } else {\n      $result[$number]++;\n  \
    \  }\n  }\n  return $result;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\n\
    I knew there was a more efficient way to do this!\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\nYou could use array_unique and array_count_values:\n<code>\n$unique = array_unique($numbers);\n\
    $counts = array_count_values($numbers);\n</code>\nand then iterate over each unique\
    \ value to create an array of all occurrences:\n<code>\n$result = [];\nforeach($unique\
    \ as $number){\n    $result[$number] = isset($counts[$number]) ? $counts[$number]\
    \ : 0;\n}\n</code>\n<|/ a dscore=3 |>\n<| a tags=arrays,php |>\nHere is a simple\
    \ approach if you have access to PHP 5.5+:\n<code>\n$input = [1, 2, 3, 2, 4, 5,\
    \ 1];\n\n$result = array_count_values($input);\n\n$output = [];\nforeach($result\
    \ as $num => $count) {\n    $output[$num] = $count;\n}\n\nprint_r($output);\n\
    </code>\nWill output:\n<code>\nArray\n(\n    [1] => 2\n    [2] => 3\n    [3] =>\
    \ 4\n    [4] => 1\n)\n</code>\n<|/ a dscore=3 |>\n<| a |>\nYou can make use of\
    \ array_count_values.\n<code>\n$array = [1, 2, 3, 2, 4, 5, 1];\n\nforeach($array\
    \ as $value) {\n    $counts[$value]++;\n}\n\nprint_r($counts);\n</code>\n<|/ a\
    \ dscore=3 tags=arrays,php |>\n<| a dscore=2 |>\n<code>\n$result = array();\n\
    foreach($numbers as $number) {\n  if(array_key_exists($number, $result)) {\n \
    \   $result[$number]++;\n  } else {\n    $result[$number] = 1;\n  }\n}\n</code>\n\
    <|/ a tags=arrays,php |>\n<| a tags=arrays,php dscore=2 |>\n<code>\n<?php\n\n\
    $numbers = array(1, 2, 3, 2, 4, 5, 1);\n$result = array();\nforeach ($numbers\
    \ as $number)\n{\n    if (!array_key_exists($number, $result))\n    {\n      \
    \  $result[$number] = 1;\n    }\n    else\n    {\n        $result[$number]++;\n\
    \    }\n}\n</code>\n$result will be a count of occurrences\n<|/ a |>\n<|\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp0gjg_679.php
    on line 17

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = [];\n    $numbers = array_filter($numbers);\n    foreach ($numbers\
    \ as $number) {\n        if (!isset($result[$number])) {\n            $result[$number]\
    \ = $number;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn0b_y67t.php:23\n\
    Stack trace:\n#0 /tmp/tmpn0b_y67t.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpn0b_y67t.php\
    \ on line 23\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $unique = array();\n  $duplicates = array();\n  foreach($numbers as $number)\
    \ {\n    if (in_array($number, $unique)) {\n      $duplicates[] = $number;\n \
    \   } else {\n      $unique[] = $number;\n    }\n  }\n  return array_values($duplicates);\n\
    }\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw0kdsrpm.php:25\n\
    Stack trace:\n#0 /tmp/tmpw0kdsrpm.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpw0kdsrpm.php\
    \ on line 25\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $uniques = [];\n\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $uniques)) {\n      $uniques[] = $number;\n    }\n  }\n\n  return $uniques;\n\
    }\n</code>\n<|/ a tags=php,multidimensional-array dscore=0 |>\n<| c |>\nPlease\
    \ don't just post a chunk of code. Explain what you are doing and why. Otherwise\
    \ this is not a good answer to the question.\n<|/ c |>\n<| a dscore=0 |>\nHere\
    \ is a solution using array_reduce()\n<code>\n$input = array(\n    array(1,2,3,4),\n\
    \    array(5,6,7,8),\n    array(9,10,11,12)\n);\n\n$output = array_reduce($input,\
    \ function($carry, $item) {\n    $carry += array_sum($item);\n    return $carry;\n\
    }, 0);\n\nvar_dump($output);\n</code>\nSee https://3v4l.org/B3UgC\n<|/ a tags=php,multidimensional-array\
    \ |>\n<| c |>\nHi , thank you for your response , i need the sum of the subarrays\
    \ to calculate the total , can you help me to do that ? if possible with your\
    \ code ?\n<|/ c |>\n<| c |>\nJust change `array_sum($item)` to `array_sum($item)+$carry`.\
    \ See https://3v4l.org/HaMdN\n<|/ c |>\n<| a tags=php,multidimensional-array |>\n\
    Here is my solution\n<code>\n$array = array(\n    array(\n        'product_id'\
    \ => 1,\n        'quantity' => 1,\n        'price' => 15,\n    ),\n    array(\n\
    \        'product_id' => 2,\n        'quantity' => 1,\n        'price' => 20,\n\
    \    ),\n    array(\n        'product_id' => 3,\n        'quantity' => 1,\n  \
    \      'price' => 15,\n    ),\n    array(\n        'product_id' => 4,\n      \
    \  'quantity' => 1,\n        'price' => 15,\n    ),\n    array(\n        'product_id'\
    \ => 5,\n        'quantity' => 1,\n        'price' => 20,\n    ),\n    array(\n\
    \        'product_id' => 6,\n        'quantity' => 1,\n        'price' => 15,\n\
    \    )\n);\n\n$arrResult = [];\nforeach ($array as $key => $value) {\n    if (!in_array($value['product_id'],\
    \ $arrResult)) {\n        $arrResult[$value['product_id']] = $value['quantity'];\n\
    \    } else {\n        $arrResult[$value['product_id']] += $value['quantity'];\n\
    \    }\n}\n\nforeach ($arrResult as $key => $value) {\n    if ($value == 0) {\n\
    \        unset($\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpf61ukmph.php
    on line 17

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $result = [];\n  foreach($numbers as $number) {\n    if (!in_array($number,\
    \ $result)) {\n      $result[] = $number;\n    }\n  }\n  return $result;\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnp4rsozw.php:22\n\
    Stack trace:\n#0 /tmp/tmpnp4rsozw.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpnp4rsozw.php\
    \ on line 22\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  return array_filter($numbers, function($number) {\n    return in_array($number,\
    \ array_keys($numbers), true);\n  });\n}\nfunction candidate(...$args) {\n   \
    \ return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $numbers in /tmp/tmpb2vqf8e5.php on line\
    \ 8\n\nFatal error: Uncaught TypeError: array_keys(): Argument #1 ($array) must\
    \ be of type array, null given in /tmp/tmpb2vqf8e5.php:8\nStack trace:\n#0 /tmp/tmpb2vqf8e5.php(8):\
    \ array_keys(NULL)\n#1 [internal function]: {closure}(1)\n#2 /tmp/tmpb2vqf8e5.php(9):\
    \ array_filter(Array, Object(Closure))\n#3 /tmp/tmpb2vqf8e5.php(12): remove_duplicates(Array)\n\
    #4 /tmp/tmpb2vqf8e5.php(17): candidate(Array)\n#5 /tmp/tmpb2vqf8e5.php(21): test()\n\
    #6 {main}\n  thrown in /tmp/tmpb2vqf8e5.php on line 8\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  // Create a result array, with duplicate elements removed and ordered\n\
    \  // from left-to-right.\n  $result = array();\n  foreach ($numbers as $number)\
    \ {\n    // Check if this element has already been seen before\n    if (!array_key_exists($number,\
    \ $result)) {\n      // If it hasn't been seen, add it to the result array\n \
    \     $result[$number] = $number;\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzxvvxe_y.php:26\n\
    Stack trace:\n#0 /tmp/tmpzxvvxe_y.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzxvvxe_y.php\
    \ on line 26\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $seen = [];\n  return array_filter($numbers, function($number) use (&$seen)\
    \ {\n    if (! in_array($number, $seen)) {\n      $seen[] = $number;\n      return\
    \ true;\n    }\n    return false;\n  });\n}\n</code>\n<|/ a tags=php,arrays |>\n\
    <| c |>\nYes, this is the best solution. But it is good to note that it can take\
    \ longer to run (especially on longer arrays).\n<|/ c |>\n<| c |>\nI guess I wasn't\
    \ quite clear on how this would work. I'll edit my question to show what I mean.\n\
    <|/ c |>\n<| c |>\nAdded an example with explanation\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$arr = [1,2,2,2,3,3,4,4,5,5];\n$ar = array_count_values($arr);\n\
    $ar = array_filter($ar);\n$arr = array_keys($ar);\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis solution is more efficient.\n<|/ c |>\n<| c |>\nGreat! I needed\
    \ array_keys($ar) to be sorted as well.\n<|/ c |>\n<| a |>\n<code>\narray_count_values($array);\n\
    </code>\nFrom the php manual:\n<code>\n<?php\n$array = array('hello', 5, array('bye'));\n\
    print_r(array_count_values($array));\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpzgodviud.php
    on line 16

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n\t$array = array();\n\tforeach ($numbers as $number) {\n\t\tif (in_array($number,\
    \ $array)) {\n\t\t\tcontinue;\n\t\t}\n\t\t$array[] = $number;\n\t}\n\treturn $array;\n\
    }\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp121a5zwf.php:23\n\
    Stack trace:\n#0 /tmp/tmp121a5zwf.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp121a5zwf.php\
    \ on line 23\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n  $sorted = array();\n  $nums = array();\n  foreach ($numbers as $num) {\n\
    \    if ($num in $nums) {\n      unset($numbers[$num]);\n    } else {\n      $sorted[]\
    \ = $num;\n    }\n  }\n  return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "in" in /tmp/tmpdtok1m1g.php
    on line 10

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $result = array();\n    foreach ($numbers as $number) {\n        $found\
    \ = false;\n        foreach ($result as $k => $value) {\n            if ($number\
    \ == $value) {\n                $found = true;\n                break;\n     \
    \       }\n        }\n        if (!$found) {\n            $result[] = $number;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9w87e5bz.php:30\n\
    Stack trace:\n#0 /tmp/tmp9w87e5bz.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp9w87e5bz.php\
    \ on line 30\n"
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    return array_filter(\n        $numbers,\n        function ($value) {\n\
    \            return !in_array($value, $numbers);\n        }\n    );\n}\n</code>\n\
    <|/ a tags=php,arrays,unique |>\n<| c |>\nThe `array_unique` does _not_ preserve\
    \ the order of elements. `array_unique` removes duplicate *values*, which means\
    \ the order is lost. If the order is important, you would need to call `array_values`\
    \ on the resulting array before `array_unique`.\n<|/ c |>\n<| c |>\narray_unique()\
    \ preserves order if the same elements are encountered twice in the array; and\
    \ that is the desired behavior here.\n<|/ c |>\n<| c |>\n: You're right, that's\
    \ what I was getting at. `array_unique` does *not* preserve the order of duplicate\
    \ values, but it *does* preserve the order of elements. As I said, if the OP wants\
    \ order, then he needs to use `array_values` on the result of the `array_unique`\
    \ call.\n<|/ c |>\n<| c |>\nYou're right. I was misinterpreting the phrasing in\
    \ the documentation and assumed that it preserved order in the sense that it preserves\
    \ the order of the input array unless the input array was sorted first. I'll rewrite\
    \ the answer to be clearer.\n<|/ c |>\n<| a tags=php,arrays,unique |>\nIt depends\
    \ on the type of data you want to keep.  Do you just want to keep the strings\
    \ and discard the numbers, or do you want to keep the numbers as they appear in\
    \ the original array?\n<code>\n<?php\n\n$array = array(\n    array(\"cat\", 1),\
    \ array(\"dog\", 2), array(\"cat\", 3), array(\"cat\", 1),\n    array(\"dog\"\
    , 2), array(\"dog\", 3), array(\"fish\", 4), array(\"fish\", 5)\n);\n\nprint_r(array_unique($array));\n\
    \nprint_r($array);\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpjzclpue6.php
    on line 14

    '
  timestamp: 1659978713
- exit_code: 255
  program: "<?php\n// From an array of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\n// >>>\
    \ remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers)\
    \ {\n    $output = array();\n    foreach($numbers as $number) {\n        if(in_array($number,\
    \ $output)) continue; // Already found this number\n        $output[] = $number;\n\
    \    }\n    return $output;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hnvpjmv.php:21\n\
    Stack trace:\n#0 /tmp/tmp6hnvpjmv.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp6hnvpjmv.php\
    \ on line 21\n"
  timestamp: 1659978713
