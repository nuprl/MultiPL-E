language: php
name: HumanEval_158_find_max
results:
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Write your logic here\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ifc68tj.php:21\n\
    Stack trace:\n#0 /tmp/tmp2ifc68tj.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2ifc68tj.php\
    \ on line 21\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $unique = array();\n  $max\
    \ = 0;\n  $word = \"\";\n  foreach ($words as $word) {\n    $unique[$word] = 0;\n\
    \  }\n  foreach ($unique as $key => $value) {\n    if ($value == 1) {\n      $word\
    \ = $key;\n    }\n    $max = $value > $max ? $value : $max;\n  }\n  return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw2ueffpa.php:34\n\
    Stack trace:\n#0 /tmp/tmpw2ueffpa.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpw2ueffpa.php\
    \ on line 34\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  // Write your code here\n\
    }\n\n$strings = [\n  \"name of a string\",\n  \"enam game\",\n  \"aaaaaaa bb cc\"\
    ,\n];\nforeach($strings as $string) {\n  echo find_max($string), \"\\n\";\n}\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7_aigmsa.php:29\n\
    Stack trace:\n#0 /tmp/tmp7_aigmsa.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp7_aigmsa.php\
    \ on line 29\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    arsort($words);\n   \
    \ return reset($words);\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1m3enfgp.php:22\n\
    Stack trace:\n#0 /tmp/tmp1m3enfgp.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1m3enfgp.php\
    \ on line 22\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = '';\n    $max_cnt\
    \ = 0;\n    foreach ($words as $w) {\n        $l = strlen($w);\n        if ($max_cnt\
    \ < $l) {\n            $max_cnt = $l;\n            $max = $w;\n        }\n   \
    \ }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppr4tw_oa.php:31\n\
    Stack trace:\n#0 /tmp/tmppr4tw_oa.php(42): test()\n#1 {main}\n  thrown in /tmp/tmppr4tw_oa.php\
    \ on line 31\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Write your PHP implementation\
    \ here.\n    $arr = array_count_values($words);\n    $max = $words[0];\n    foreach\
    \ ($arr as $word => $count) {\n        if ($count > $max) {\n            $max\
    \ = $count;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpne3ausby.php:29\n\
    Stack trace:\n#0 /tmp/tmpne3ausby.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpne3ausby.php\
    \ on line 29\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_chars = 0;\n   \
    \ $max_word = \"\";\n    foreach ($words as $word) {\n        $chars = count_chars($word);\n\
    \        if ($chars > $max_chars) {\n            $max_chars = $chars;\n      \
    \      $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpobm72xoy.php:30\n\
    Stack trace:\n#0 /tmp/tmpobm72xoy.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpobm72xoy.php\
    \ on line 30\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Your code here\n \
    \   $unique_chars = [];\n    foreach ($words as $word) {\n        foreach (str_split($word)\
    \ as $char) {\n            if (!array_key_exists($char, $unique_chars)) {\n  \
    \              $unique_chars[$char] = 0;\n            }\n            $unique_chars[$char]++;\n\
    \        }\n    }\n    return array_keys($unique_chars, max($unique_chars))[0];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhy would you convert `$words` into a\
    \ string just to split it? Just loop `$words`. Also this code is not correct,\
    \ as it returns \"aaaaaaa\" when it should return \"bb\".\n<|/ c |>\n<| c |>\n\
    I did it because OP asked for \"the word with maximum number of unique characters\"\
    \ not just one \"word\". \nIf OP just wants first word, then just remove `implode()`\n\
    <|/ c |>\n<| c |>\nYou're right I overlooked that fact. Maybe I should delete\
    \ this answer because it's incorrect?\n<|/ c |>\n<| c |>\nNo, my answer is correct.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$words = 'name of a string';\n\n$words\
    \ = str_replace(' ', '', $words);\n$words = str_replace(\" \", '', $words);\n\
    $words = explode(\" \", $words);\n\n$uniqueChars = [];\nforeach ($words as $word)\
    \ {\n    $uniqueChars[] = str_split($word);\n}\n$uniqueChars = array_count_values($uniqueChars);\n\
    arsort($uniqueChars);\n\n$word = array_keys($uniqueChars)[0];\n\necho $word;\n\
    </code>\nOutput\n<code>\nstring\n</code>\n<|/ a tags=php |>\n<| c |>\nYour output\
    \ will be wrong if the string contains multiple words with same number of unique\
    \ characters. Try it with `array(\"aaa\", \"bbb\", \"ccc\")`.\n<|/ c |>\n<| c\
    \ |>\nthanks for pointing out, will update my answer\n<|/ c |>\n<| a tags=php\
    \ dscore=0 |>\n<code>\n$string = 'name of a string';\n\n$string  = str_replace('\
    \ ', '', $string);\n$string  = str_replace(\" \", '', $string);\n\n$arr  = explode(\"\
    \ \", $string);\n\n$uniqueChars = [];\nforeach ($arr as $word) {\n    $uniqueChars[]\
    \ = str_split($word);\n}\narsort($uniqueChars);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpulyb01zj.php
    on line 25

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $arr = array();\n   \
    \ foreach($words as $word) {\n        $chars = array_count_values(str_split($word));\n\
    \        $sorted_array = array();\n        foreach($chars as $char => $count)\
    \ {\n            $sorted_array[$char] = $count;\n        }\n        ksort($sorted_array);\n\
    \        $sorted_array = array_reverse($sorted_array);\n        $arr[] = $sorted_array;\n\
    \    }\n    $max = max(array_column($arr, max(array_column($arr, 'count'))));\n\
    \    foreach($arr as $i => $arr) {\n        foreach($arr as $key => $value) {\n\
    \            if($value['count'] == $max) {\n                return $words[$i];\n\
    \            }\n        }\n    }\n}\n</code>\n<|/ a |>\n<| a tags=arrays,php |>\n\
    I believe that the following is what you are looking for.\n<code>\n$array = array(\"\
    aaaaaaa\", \"bb\", \"cc\");\nusort($array, function($a, $b) {\n    // compare\
    \ the length first and if same compare alphabetically\n    return strlen($a) -\
    \ strlen($b) <=> strcmp($a, $b);\n});\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpfdpr5mf_.php
    on line 33

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Write your code here\n\
    \    $wordCounts = array_count_values($words);\n    $maxCount = max($wordCounts);\n\
    \    return array_search(max($wordCounts), $wordCounts, true);\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1ohzj0g.php:24\n\
    Stack trace:\n#0 /tmp/tmpd1ohzj0g.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpd1ohzj0g.php\
    \ on line 24\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // write your code here\n\
    }\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaqbaa1om.php:20\n\
    Stack trace:\n#0 /tmp/tmpaqbaa1om.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpaqbaa1om.php\
    \ on line 20\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Your code here\n \
    \   $chars=array();\n    $counts=array();\n    foreach($words as $w){\n      \
    \  $chars[]= strlen($w);\n        $counts[]= count($w);\n    }\n    usort($counts,\
    \ \"str_compare_int\");\n    for($i=0;$i<count($counts);$i++){\n        if($counts[$i]==1){\n\
    \            continue 2;\n        }\n    }\n    for($i=0;$i<count($counts);$i++){\n\
    \        if($counts[$i]>1){\n            continue 2;\n        }\n    }\n    $max=$words[0];\n\
    \    for($i=0;$i<count($chars);$i++){\n        if($chars[$i]==count($max)){\n\
    \            $max=$words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Cannot ''continue'' 2 levels in /tmp/tmp4pdc40uh.php on line 23

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $chars = array_count_values($words);\n\
    \    $max = key($chars);\n    foreach ($chars as $index => $value) {\n       \
    \ if ($value == $max) {\n            return $words[$index];\n        }\n    }\n\
    \    return $words[0];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjo7j9hd0.php:28\n\
    Stack trace:\n#0 /tmp/tmpjo7j9hd0.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpjo7j9hd0.php\
    \ on line 28\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Your code here\n \
    \   return $words[0];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps43qe1kl.php:22\n\
    Stack trace:\n#0 /tmp/tmps43qe1kl.php(34): test()\n#1 {main}\n  thrown in /tmp/tmps43qe1kl.php\
    \ on line 22\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $str =\
    \ '';\n    foreach ($words as $word) {\n        $length = count($str);\n     \
    \   for ($i = 0; $i < $length; ++$i) {\n            $str .= $word[$i];\n     \
    \   }\n        if (strlen($str) > $max) {\n            $str = '';\n        }\n\
    \        $length++;\n    }\n    return $str;\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmpy75esfer.php:16\nStack trace:\n\
    #0 /tmp/tmpy75esfer.php(28): find_max(Array)\n#1 /tmp/tmpy75esfer.php(32): candidate(Array)\n\
    #2 /tmp/tmpy75esfer.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpy75esfer.php\
    \ on line 16\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Write your solution\
    \ here\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1s26t_ee.php:20\n\
    Stack trace:\n#0 /tmp/tmp1s26t_ee.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp1s26t_ee.php\
    \ on line 20\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Write your solution\
    \ here\n    $maxes = [];\n    foreach ($words as $word) {\n        foreach(str_split($word)\
    \ as $character) {\n            $count = $maxes[$character] ?? 0;\n          \
    \  $maxes[$character] = $count + 1;\n        }\n    }\n    arsort($maxes);\n \
    \   return key($maxes);\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpebup6dba.php:30\n\
    Stack trace:\n#0 /tmp/tmpebup6dba.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpebup6dba.php\
    \ on line 30\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $arr = array_count_values($words);\n\
    \  return array_search((max($arr) + 1), $arr);\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyegdjt5j.php:22\n\
    Stack trace:\n#0 /tmp/tmpyegdjt5j.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpyegdjt5j.php\
    \ on line 22\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $result = array();\n  $word_count\
    \ = array();\n  foreach ($words as $word) {\n    $word_count[$word] = 0;\n  }\n\
    \n  // Scan through array\n  foreach ($words as $word) {\n    foreach ($words\
    \ as $key => $value) {\n      if ($value == $word) {\n        continue;\n    \
    \  }\n\n      // Compare words and increment word count if they have the same\
    \ number of characters.\n      if (strlen($word) == strlen($value)) {\n      \
    \  $word_count[$word] += 1;\n        $word_count[$value]++;\n        if ($word_count[$word]\
    \ > $word_count[$value]) {\n          $result[] = $word;\n        }\n      }\n\
    \    }\n  }\n\n  // Check if word with most characters is first.\n  foreach ($word_count\
    \ as $word => $count) {\n    if ($count > count($result)) {\n      $result = $word;\n\
    \    }\n  }\n\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_7q1uch4.php:52\n\
    Stack trace:\n#0 /tmp/tmp_7q1uch4.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp_7q1uch4.php\
    \ on line 52\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    sort($words);\n    $words[]\
    \ = \"\";\n    $max = $words[0]; // init the max value\n    $i = 0; // init the\
    \ index\n    foreach ($words as $word) {\n        if ($word == \"\") continue;\n\
    \        $count = 0; // init the count for the word\n        $temp = \"\";\n \
    \       for ($i = 0; $i < strlen($word); $i++) {\n            $temp .= $word[$i];\n\
    \            $count++;\n        }\n        if ($count > $max) {\n            $max\
    \ = $count;\n        }\n        if ($count == $max) {\n            $temp .= \"\
    \";\n        }\n        if ($temp > $max) {\n            $max = $temp;\n     \
    \   }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpudgdwt94.php:44\n\
    Stack trace:\n#0 /tmp/tmpudgdwt94.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpudgdwt94.php\
    \ on line 44\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  // Write your code here\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkv793fhb.php:21\n\
    Stack trace:\n#0 /tmp/tmpkv793fhb.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpkv793fhb.php\
    \ on line 21\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  // Initialize your answer\
    \ here\n  $answer = \"0\";\n  $len = count($words);\n  // Loop through the array\
    \ and add each word to your answer if its length\n  // has maximum characters.\n\
    \  for ($i = 0; $i < $len; $i++) {\n    if (strlen($words[$i]) > $answer) {\n\
    \      $answer = strlen($words[$i]);\n    }\n  }\n  // Compare length of answer\
    \ with every word in the array\n  for ($i = 0; $i < $len; $i++) {\n    if (strlen($words[$i])\
    \ == $answer) {\n      // If length of string is equal to the answer, then check\
    \ which\n      // word comes first alphabetically\n      if ($words[$i] < $words[$i\
    \ + 1]) {\n        $answer = $words[$i];\n      }\n    }\n  }\n  return $answer;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 3 in /tmp/tmpxh98c4w4.php on line 28\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpxh98c4w4.php:41\nStack\
    \ trace:\n#0 /tmp/tmpxh98c4w4.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpxh98c4w4.php\
    \ on line 41\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $unique = array();\n  $max_unique\
    \ = count($words);\n\n  for ($i = 0; $i < count($words); $i++) {\n    for ($j\
    \ = $i + 1; $j < count($words); $j++) {\n      $unique[$words[$i]] += $words[$j];\n\
    \    }\n  }\n\n  uasort($unique, 'strnatcmp');\n\n  foreach ($unique as $key =>\
    \ $value) {\n    if ($value == $max_unique) {\n      return $key;\n    }\n  }\n\
    \n  return '';\n}\n\n$result = find_max($words);\necho $result;\n</code>\n<|/\
    \ a dscore=2 tags=sorting,arrays,php |>\n<| c |>\nNice answer! I'm curious how\
    \ long your function takes to run.\n<|/ c |>\n<| c |>\nThis solution works well\
    \ for me in 5.6.24, but in 7.0.17 I get the following error `Warning: uasort()\
    \ expects parameter 2 to be a valid callback, function 'strnatcmp' not found or\
    \ invalid function name`. I tried replacing `'strnatcmp'` with `'strnatcasecmp'`,\
    \ which didn't throw an error but didn't sort the array either.\n<|/ c |>\n<|\
    \ a tags=sorting,arrays,php |>\nHere is one more solution: \n<code>\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp1zkj0bpz.php
    on line 35

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    if (!is_array($words)\
    \ or count($words) < 1) {\n        return false;\n    }\n    $wordCount = array();\n\
    \    foreach ($words as $word) {\n        if (!isset($wordCount[$word])) {\n \
    \           $wordCount[$word] = 0;\n        }\n        $wordCount[$word]++;\n\
    \    }\n\n    arsort($wordCount);\n    $max = reset($wordCount);\n    return $wordCount[$max];\n\
    }\n</code>\n<|/ a |>\n<| a |>\n<code>\n<?php\n\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpntu6oefd.php
    on line 28

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = null;\n    $current_max\
    \ = null;\n    foreach ($words as $w) {\n        if (is_null($current_max) ||\
    \ count($w) == count($current_max)) {\n            $current_max = count($w) >\
    \ count($current_max) ? $w : $current_max;\n        } else {\n            $current_max\
    \ = count($w) > count($current_max) ? $w : $current_max;\n        }\n    }\n \
    \   return $current_max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmp38qktqqy.php:17\nStack trace:\n\
    #0 /tmp/tmp38qktqqy.php(26): find_max(Array)\n#1 /tmp/tmp38qktqqy.php(30): candidate(Array)\n\
    #2 /tmp/tmp38qktqqy.php(42): test()\n#3 {main}\n  thrown in /tmp/tmp38qktqqy.php\
    \ on line 17\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $counts = array_count_values($words);\n\
    \  arsort($counts);\n  return array_keys($counts)[0];\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnj_v2dzm.php:23\n\
    Stack trace:\n#0 /tmp/tmpnj_v2dzm.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpnj_v2dzm.php\
    \ on line 23\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Your code here\n}\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_wen4i53.php:20\n\
    Stack trace:\n#0 /tmp/tmp_wen4i53.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_wen4i53.php\
    \ on line 20\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $count = 0;\n    $max_word_len\
    \ = 0;\n    foreach ($words as $word) {\n        $count = str_split($word);\n\
    \        $word_len = count($count);\n        if ($word_len > $max_word_len) {\n\
    \            $max_word_len = $word_len;\n        }\n    }\n    foreach ($words\
    \ as $word) {\n        $count = str_split($word);\n        $word_len = count($count);\n\
    \        if ($word_len == $max_word_len) {\n            $index = array_search($count,\
    \ array_count_values($count));\n            $word = $words[$index];\n        }\n\
    \    }\n    return $word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvni3jb5x.php:38\n\
    Stack trace:\n#0 /tmp/tmpvni3jb5x.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpvni3jb5x.php\
    \ on line 38\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  // code here\n}\nprint(find_max(array(\"\
    name\", \"of\", \"string\")));\nprint(find_max(array(\"name\", \"enam\", \"game\"\
    )));\nprint(find_max(array(\"aaaaaaa\", \"bb\", \"cc\")));\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr6t54nd5.php:23\n\
    Stack trace:\n#0 /tmp/tmpr6t54nd5.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpr6t54nd5.php\
    \ on line 23\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    asort($words);\n    $ret\
    \ = 0;\n    foreach ($words as $word) {\n        if (strlen($word) == 0) {\n \
    \           $ret++;\n        }\n        else {\n            $ret = max($ret, strlen($word));\n\
    \        }\n    }\n    return $words[count($words) - 1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7yrr76ip.php:32\n\
    Stack trace:\n#0 /tmp/tmp7yrr76ip.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp7yrr76ip.php\
    \ on line 32\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  // Write your code in PHP\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_v_65e5r.php:21\n\
    Stack trace:\n#0 /tmp/tmp_v_65e5r.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp_v_65e5r.php\
    \ on line 21\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $word\
    \ = \"\";\n    foreach ($words as $word) {\n        $temp = str_split($word);\n\
    \        $temp_count = count($temp);\n        $temp_max = max($temp_count);\n\
    \        $temp_word = \"\";\n        for ($i = 0; $i < $temp_max; $i++) {\n  \
    \          $temp_word .= $temp[$i];\n        }\n        if ($temp_count > $max)\
    \ {\n            $max = $temp_count;\n            $word = $temp_word;\n      \
    \  }\n    }\n    return $word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: max(): Argument #1 ($value) must be\
    \ of type array, int given in /tmp/tmpzcw1vkvk.php:18\nStack trace:\n#0 /tmp/tmpzcw1vkvk.php(18):\
    \ max(4)\n#1 /tmp/tmpzcw1vkvk.php(32): find_max(Array)\n#2 /tmp/tmpzcw1vkvk.php(36):\
    \ candidate(Array)\n#3 /tmp/tmpzcw1vkvk.php(48): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmpzcw1vkvk.php on line 18\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    \n    $max = 1;\n   \
    \ $word_with_smallest_max = array();\n    \n    foreach ($words as $word) {\n\
    \        \n        if (strlen($word) > $max) {\n            $max = strlen($word);\n\
    \            $word_with_smallest_max = $word;\n        }\n    }\n    \n    return\
    \ $word_with_smallest_max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzfz9aipb.php:34\n\
    Stack trace:\n#0 /tmp/tmpzfz9aipb.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpzfz9aipb.php\
    \ on line 34\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    sort($words);\n    $count\
    \ = array_count_values($words);\n    foreach ($count as $key => $value) {\n  \
    \      if($value > 1) {\n            return $key;\n        }\n    }\n    return\
    \ $words[0];\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4iaqf08u.php:27\n\
    Stack trace:\n#0 /tmp/tmp4iaqf08u.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp4iaqf08u.php\
    \ on line 27\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $words = array_flip($words);\n\
    \    asort($words);\n    $words[0] = 0;\n    $result = $words[0];\n    $count\
    \ = 1;\n    foreach ($words as $key => $value) {\n        $count = $count;\n \
    \       if ($value > $result) {\n            $result = $key;\n        }\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpog7do_71.php:32\n\
    Stack trace:\n#0 /tmp/tmpog7do_71.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpog7do_71.php\
    \ on line 32\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  // Write your code here\n\
    \  $words = array_count_values($words);\n  arsort($words);\n  $max = reset($words);\n\
    \  foreach($words as $word => $count) {\n    if($count > $max) {\n      $max =\
    \ $count;\n    }\n  }\n  return $max;\n}\n</code>\n<|/ a |>\n<| a |>\n<code>\n\
    $arr= array('aaaaaaa', 'bbbbbb', 'cccc', 'ddddddd');\n\n$max = count($arr);\n\
    $counts = array_count_values($arr);\nforeach($counts as $key => $value){\n   \
    \ if($value > $max){\n        $max = $value;\n    }\n}\n\necho 'Maximum number\
    \ of unique characters is '.$max;\n</code>\n<|/ a dscore=0 tags=php,unique,arrays\
    \ |>\n<| a |>\nYou can do it this way:\n<code>\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp6ll5a86h.php
    on line 24

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max = -99999;\n  $word\
    \ = \"\";\n  $uniqueChars = 0;\n  $index = 0;\n  for ($x = 0; $x < count($words);\
    \ $x++) {\n    $words[$x] = trim($words[$x]);\n    $word = substr($words[$x],\
    \ 0, 1);\n    if ($word == \"\") {\n      break;\n    }\n    $index = strpos($words,\
    \ $word);\n    if ($index == false || $index < 0) {\n      break;\n    }\n   \
    \ if ($words[$index] == $word) {\n      continue;\n    }\n    if ($word == \"\"\
    ) {\n      break;\n    }\n    $uniqueChars = substr_count($words[$index], $word);\n\
    \    if ($uniqueChars > $max) {\n      $max = $uniqueChars;\n      $words[$index]\
    \ = $word;\n      $word = \"\";\n    }\n  }\n  if ($word == \"\") {\n    return\
    \ $words[$index];\n  }\n  return $word;\n}\nfunction candidate(...$args) {\n \
    \   return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: strpos(): Argument #1 ($haystack) must\
    \ be of type string, array given in /tmp/tmphos6uhdr.php:23\nStack trace:\n#0\
    \ /tmp/tmphos6uhdr.php(23): strpos(Array, 'n')\n#1 /tmp/tmphos6uhdr.php(46): find_max(Array)\n\
    #2 /tmp/tmphos6uhdr.php(50): candidate(Array)\n#3 /tmp/tmphos6uhdr.php(62): test()\n\
    #4 {main}\n  thrown in /tmp/tmphos6uhdr.php on line 23\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  // Write your solution\
    \ here\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt1j4o0ms.php:20\n\
    Stack trace:\n#0 /tmp/tmpt1j4o0ms.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpt1j4o0ms.php\
    \ on line 20\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = null;\n    $max_count\
    \ = 0;\n    foreach ($words as $word) {\n        $count = str_word_count($word);\n\
    \        if ($count > $max_count) {\n            $max = $word;\n            $max_count\
    \ = $count;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr19kjr39.php:30\n\
    Stack trace:\n#0 /tmp/tmpr19kjr39.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpr19kjr39.php\
    \ on line 30\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  // Initialize max number\
    \ to zero and current position as zero.\n  $max_number = 0;\n  $current_position\
    \ = 0;\n  // Loop through all the words.\n  foreach ($words as $word) {\n    //\
    \ Get number of unique characters in the current word.\n    $unique_characters\
    \ = strlen($word);\n    // If number of unique characters is bigger than current\
    \ max number,\n    // update max number with current position and current word.\n\
    \    if ($unique_characters > $max_number) {\n      $max_number = $unique_characters;\n\
    \      $current_position = 0;\n    }\n    // If number of unique characters is\
    \ same as current max number,\n    // increment current position by 1.\n    if\
    \ ($unique_characters == $max_number) {\n      $current_position++;\n    }\n \
    \ }\n  // Return word with max number of unique characters in lexicographical\
    \ order.\n  return $words[$current_position];\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7br0r1nx.php:40\n\
    Stack trace:\n#0 /tmp/tmp7br0r1nx.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp7br0r1nx.php\
    \ on line 40\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = null;\n    foreach\
    \ ($words as $word) {\n        if (!is_string($word)) {\n            throw new\
    \ \\InvalidArgumentException('Expected an array of strings');\n        }\n\n \
    \       $counter = array();\n        foreach ($word as $c) {\n            if (!isset($counter[$c]))\
    \ {\n                $counter[$c] = 0;\n            }\n            $counter[$c]++;\n\
    \        }\n\n        if ($max === null || $counter['c'] > $max['c']) {\n    \
    \        $max = $counter;\n        }\n    }\n\n    return $max;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: foreach() argument must be of type array|object, string given\
    \ in /tmp/tmpxa8pn2xg.php on line 20\n\nWarning: foreach() argument must be of\
    \ type array|object, string given in /tmp/tmpxa8pn2xg.php on line 20\n\nWarning:\
    \ Undefined array key \"c\" in /tmp/tmpxa8pn2xg.php on line 27\n\nWarning: Undefined\
    \ array key \"c\" in /tmp/tmpxa8pn2xg.php on line 27\n\nWarning: foreach() argument\
    \ must be of type array|object, string given in /tmp/tmpxa8pn2xg.php on line 20\n\
    \nWarning: Undefined array key \"c\" in /tmp/tmpxa8pn2xg.php on line 27\n\nWarning:\
    \ Undefined array key \"c\" in /tmp/tmpxa8pn2xg.php on line 27\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpxa8pn2xg.php:40\nStack trace:\n\
    #0 /tmp/tmpxa8pn2xg.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpxa8pn2xg.php\
    \ on line 40\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  foreach($words as $word)\
    \ {\n    foreach($word as $char) {\n      $count[$char]++;\n    }\n  }\n  $max\
    \ = -1;\n  $word = \"\";\n  foreach($count as $char => $count) {\n    if ($count\
    \ > $max) {\n      $max = $count;\n      $word = $char;\n    }\n  }\n  return\
    \ $word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: foreach() argument must be of type array|object, string given\
    \ in /tmp/tmpg2ao4e7v.php on line 14\n\nWarning: foreach() argument must be of\
    \ type array|object, string given in /tmp/tmpg2ao4e7v.php on line 14\n\nWarning:\
    \ foreach() argument must be of type array|object, string given in /tmp/tmpg2ao4e7v.php\
    \ on line 14\n\nWarning: Undefined variable $count in /tmp/tmpg2ao4e7v.php on\
    \ line 20\n\nWarning: foreach() argument must be of type array|object, null given\
    \ in /tmp/tmpg2ao4e7v.php on line 20\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpg2ao4e7v.php:34\nStack trace:\n#0 /tmp/tmpg2ao4e7v.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpg2ao4e7v.php on line 34\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $counts = [];\n    foreach\
    \ ($words as $word) {\n        $counts[$word] = 0;\n    }\n    foreach ($words\
    \ as $word) {\n        ++$counts[$word];\n    }\n    asort($counts);\n    return\
    \ key($counts);\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm1fcff_0.php:28\n\
    Stack trace:\n#0 /tmp/tmpm1fcff_0.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpm1fcff_0.php\
    \ on line 28\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $counter = array();\n\
    \n    foreach ($words as $word) {\n        if (!isset($counter[$word])) {\n  \
    \          $counter[$word] = 0;\n        }\n        $counter[$word] += 1;\n  \
    \  }\n\n    foreach ($counter as $word => $count) {\n        if ($count > 1) {\n\
    \            $letters = str_split($word);\n            $max_letter = null;\n \
    \           $max_letters = array();\n\n            foreach ($letters as $letter)\
    \ {\n                if ($max_letter === null || $max_letters[$letter] > $max_letter)\
    \ {\n                    $max_letters[$letter] = $max_letter;\n              \
    \      $max_letter = $letter;\n                }\n            }\n\n          \
    \  return $word;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe07arefr.php:45\n\
    Stack trace:\n#0 /tmp/tmpe07arefr.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpe07arefr.php\
    \ on line 45\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Your code here\n \
    \   $sorted = array_count_values($words);\n    $max = $sorted[$words[0]];\n  \
    \  foreach($sorted as $key => $value){\n        if($value > $max){\n         \
    \   $max = $value;\n        }\n    }\n    return $words[$key];\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"string\" in /tmp/tmp6t_03blh.php on line\
    \ 21\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6t_03blh.php:28\n\
    Stack trace:\n#0 /tmp/tmp6t_03blh.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp6t_03blh.php\
    \ on line 28\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  // Write your code here\n\
    \  return $words[0];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkotndyvm.php:22\n\
    Stack trace:\n#0 /tmp/tmpkotndyvm.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpkotndyvm.php\
    \ on line 22\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    foreach($words as $word){\n\
    \        $chars = str_split($word);\n        $counts = array_count_values($chars);\n\
    \        $maxKey = array_search($counts, $counts);\n        if($maxKey > 0){\n\
    \            return $word;\n        }\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvlvfr5n5.php:28\n\
    Stack trace:\n#0 /tmp/tmpvlvfr5n5.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpvlvfr5n5.php\
    \ on line 28\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  // Your code here\n  $max\
    \ = array_count_values($words);\n  arsort($max);\n  echo reset($max);\n}\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptvn5s4px.php:23\n\
    Stack trace:\n#0 /tmp/tmptvn5s4px.php(35): test()\n#1 {main}\n  thrown in /tmp/tmptvn5s4px.php\
    \ on line 23\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $sorted = $words;\n \
    \   sort($sorted, SORT_STRING);\n    $longest = null;\n    $max_count = 0;\n \
    \   foreach ($sorted as $w) {\n        if (strlen($w) > $max_count) {\n      \
    \      $longest = $w;\n            $max_count = strlen($w);\n        }\n    }\n\
    \    return $longest;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc5991cc2.php:38\n\
    Stack trace:\n#0 /tmp/tmpc5991cc2.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpc5991cc2.php\
    \ on line 38\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $count = array();\n  foreach($words\
    \ as $word) {\n    $unique = array_count_values(str_split($word));\n    $count[$word]\
    \ = $unique;\n  }\n  arsort($count);\n  $highest = key(array_slice($count, 0,\
    \ 1));\n  return $highest == count($count) ? $highest : $highest;\n}\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6398i8ap.php:28\n\
    Stack trace:\n#0 /tmp/tmp6398i8ap.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp6398i8ap.php\
    \ on line 28\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $count = array_count_values($words);\n\
    \  arsort($count);\n  return array_keys($count)[0];\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp40z8fq52.php:22\n\
    Stack trace:\n#0 /tmp/tmp40z8fq52.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp40z8fq52.php\
    \ on line 22\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max = \"\";\n  $num =\
    \ 0;\n  foreach ($words as $word) {\n    $length = 0;\n    $letters = \"\";\n\
    \    foreach ($word as $c) {\n      $letters .= $c;\n      $length++;\n    }\n\
    \    if ($length > $num) {\n      $max = $word;\n      $num = $length;\n    }\n\
    \  }\n  return $max;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't seem to work\
    \ as well. `find_max` returns \"enam\" instead of \"game\"\n<|/ c |>\n<| c |>\n\
    I changed the code - now it finds multiple words with the maximum number of unique\
    \ chars. Now it works with your test cases.\n<|/ c |>\n<| c |>\nAh yeah, I see\
    \ what I did now. Thanks!\n<|/ c |>\n<| c |>\nThis doesn't work for me. When I\
    \ put it into my code, it returns \"enam\" instead of \"game\". I also tried it\
    \ with different words and it still returns \"enam\" instead of \"game\".\n<|/\
    \ c |>\n<| c |>\nOh, yeah, I tested it with different words - now it works.\n\
    <|/ c |>\n<| a dscore=1 |>\nUsing a custom comparison function will make the whole\
    \ process much easier and less verbose. Try this:\n<code>\n$words = ['name', 'of',\
    \ 'string'];\n$max = $words[0];\nforeach ($words as $word) {\n    if ($word ==\
    \ $max) {\n        continue;\n    }\n    if ($wordCount($word) > $max) {\n   \
    \     $max = $word;\n    }\n}\necho $max;\n\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpqoukmer1.php
    on line 29

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $count = array_count_values($words);\n\
    \  arsort($count);\n  $word  = $words[0];\n  $count = $count[$word];\n  unset($words[0]);\n\
    \  foreach ($words as $word) {\n    $count += $count[$word];\n  }\n  return $word;\n\
    }\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Trying to access array offset on value of type int in /tmp/tmpp9vm5hcv.php\
    \ on line 19\n\nWarning: Trying to access array offset on value of type int in\
    \ /tmp/tmpp9vm5hcv.php on line 19\n\nWarning: Trying to access array offset on\
    \ value of type int in /tmp/tmpp9vm5hcv.php on line 19\n\nWarning: Trying to access\
    \ array offset on value of type int in /tmp/tmpp9vm5hcv.php on line 19\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpp9vm5hcv.php:29\nStack trace:\n\
    #0 /tmp/tmpp9vm5hcv.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpp9vm5hcv.php\
    \ on line 29\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  // Write your code in PHP.\
    \ Return the word with maximum number of unique characters.\n  $count = array();\n\
    \  foreach ($words as $word) {\n    $count[$word] = 0;\n  }\n  foreach ($words\
    \ as $word) {\n    foreach ($count as $k => $v) {\n      if ($v >= strlen($word))\
    \ {\n        $count[$k] = $v;\n      }\n    }\n  }\n  $max = max($count);\n  foreach\
    \ ($count as $k => $v) {\n    if ($v == $max) {\n      return $k;\n    }\n  }\n\
    \  return NULL;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu8pfofyw.php:39\n\
    Stack trace:\n#0 /tmp/tmpu8pfofyw.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpu8pfofyw.php\
    \ on line 39\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $count = array();\n  $words\
    \ = array_count_values($words);\n  arsort($words);\n\n  foreach ($words as $word\
    \ => $count) {\n    break;\n  }\n\n  foreach ($words as $word => $count) {\n \
    \   break;\n  }\n\n  return $word;\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpicodi_wy.php:32\n\
    Stack trace:\n#0 /tmp/tmpicodi_wy.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpicodi_wy.php\
    \ on line 32\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $hash = [];\n    foreach\
    \ ($words as $w) {\n        $length = count($w);\n        for ($i = 0; $i < $length;\
    \ $i++) {\n            $hash[$i] += $w[$i];\n        }\n    }\n    arsort($hash);\n\
    \    return reset($hash);\n}\n</code>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmptzyoqo70.php
    on line 23

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    return min($words);\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8jv4gnwt.php:21\n\
    Stack trace:\n#0 /tmp/tmp8jv4gnwt.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp8jv4gnwt.php\
    \ on line 21\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    if (count($words) ===\
    \ 0) {\n        throw new Exception('No words specified');\n    }\n\n    // This\
    \ map will hold the words with maximum length\n    $longest = [];\n    foreach\
    \ ($words as $word) {\n        // Count the number of unique characters in the\
    \ word\n        $length = count(str_split($word));\n        $longest[$length]\
    \ = $word;\n    }\n\n    // This map will hold the words with maximum number of\
    \ unique characters\n    $result = $longest;\n    foreach ($longest as $length\
    \ => $word) {\n        // Iterate through the rest of the words and find one that\
    \ has maximum unique characters\n        $i = 1;\n        while (isset($longest[$length])\
    \ && $i <= $length) {\n            $length++;\n            while (isset($longest[$length])\
    \ && $i <= $length) {\n                $i++;\n            }\n\n            $result[$length]\
    \ = $word;\n        }\n    }\n    return key($result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkmv4d77t.php:47\n\
    Stack trace:\n#0 /tmp/tmpkmv4d77t.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpkmv4d77t.php\
    \ on line 47\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  // This code assumes that\
    \ all of the input words have the same length.\n  // This is not the case if some\
    \ words are longer than others, or if some words have\n  // different lengths.\
    \ It's also not an error or warning if input words are empty\n  // or just contain\
    \ one word.\n  // Write code here!\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppzbl_g99.php:24\n\
    Stack trace:\n#0 /tmp/tmppzbl_g99.php(36): test()\n#1 {main}\n  thrown in /tmp/tmppzbl_g99.php\
    \ on line 24\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    foreach ($words as $word)\
    \ {\n        $unique = array_count_values(str_split($word));\n        $max_key\
    \ = array_keys($unique, max($unique));\n        sort($max_key);\n        if ($max_key[0]\
    \ == $word[0]) {\n            return $max_key[0];\n        }\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0k0vngwx.php:28\n\
    Stack trace:\n#0 /tmp/tmp0k0vngwx.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp0k0vngwx.php\
    \ on line 28\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    return max(array_count_values($words),\
    \ function($count) {\n        return $count['strlen'];\n    });\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nIf there are more than two distinct words, then \"\
    string\" will come first, because of the alphabetical order. But \"string\" is\
    \ not the maximum word. So I don't think this is a correct solution.\n<|/ c |>\n\
    <| c |>\nYou are right. I had the wrong logic initially, but I have corrected\
    \ it. I think the answer is still correct now.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for \"string\". It still returns \"name\" and not \"string\"\n<|/ c |>\n\
    <| a tags=algorithm,php,arrays |>\nHere is my solution. No loops needed.\n<code>\n\
    <?php\n\n$words = ['string', 'name', 'game', 'enam'];\n\n$sorted = array_count_values($words);\n\
    \narsort($sorted);\n\n$max = $sorted['string'];\n\necho $max;\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpv6p8bn6a.php
    on line 17

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_count = -1;\n  \
    \  $max_word = null;\n    foreach ($words as $word) {\n        $count = count(array_unique(str_split($word)));\n\
    \        if ($count > $max_count) {\n            $max_count = $count;\n      \
    \      $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprv41j5ju.php:31\n\
    Stack trace:\n#0 /tmp/tmprv41j5ju.php(42): test()\n#1 {main}\n  thrown in /tmp/tmprv41j5ju.php\
    \ on line 31\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Write your code here\n\
    \n    $maxes = 0;\n    $max = 0;\n    $array = $words;\n\n    foreach ($array\
    \ as $word) {\n        $count = 0;\n        $maxword = $word;\n\n        foreach\
    \ ($array as $word) {\n            if ($word==$maxword) {\n                $count++;\n\
    \            }\n        }\n\n        if ($count>$max) {\n            $max = $count;\n\
    \            $maxword = $word;\n        }\n    }\n\n    if ($max>$maxes) {\n \
    \       return $maxword;\n    } else {\n        return false;\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7pn2ys9k.php:47\n\
    Stack trace:\n#0 /tmp/tmp7pn2ys9k.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp7pn2ys9k.php\
    \ on line 47\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $result = array();\n\
    \    $char_map = array();\n    $char_count = array();\n    $wordcount = count($words);\n\
    \    foreach ($words as $word) {\n        $char_count = array();\n        foreach\
    \ (str_split($word) as $char) {\n            $char_count[$char] = isset($char_count[$char])\
    \ ? $char_count[$char] + 1 : 1;\n        }\n        $char_map[] = $char_count;\n\
    \    }\n    $max = -1;\n    $pos = 0;\n    while (count($char_map) > 0) {\n  \
    \      $char = array_shift($char_map);\n        if (isset($char[$max])) {\n  \
    \          continue;\n        }\n        $pos++;\n        $max = $char[$max] =\
    \ $pos;\n    }\n    return $words[$max];\n}\n</code>\n<|/ a tags=algorithm,php\
    \ dscore=2 |>\n<| a dscore=2 tags=algorithm,php |>\nHere is my solution. I think\
    \ it's not very efficient but simple.\n<code>\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp1r8ej8uj.php
    on line 36

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Return the word with\
    \ maximum number of unique characters.\n    $max = $words[0];\n    $count = 1;\n\
    \    foreach ($words as $word) {\n        $char = mb_substr($word, 0, 1);\n  \
    \      $pos = mb_strpos($word, $char);\n        if ($pos === false) {\n      \
    \      $count = 1;\n        } else {\n            $count = $pos + 1;\n       \
    \ }\n        if ($count > $max) {\n            $max = $count;\n        }\n   \
    \ }\n    return $max;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_substr() in\
    \ /tmp/tmpojy01ay1.php:17\nStack trace:\n#0 /tmp/tmpojy01ay1.php(31): find_max(Array)\n\
    #1 /tmp/tmpojy01ay1.php(35): candidate(Array)\n#2 /tmp/tmpojy01ay1.php(47): test()\n\
    #3 {main}\n  thrown in /tmp/tmpojy01ay1.php on line 17\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $chars = array();\n  foreach\
    \ ($words as $word) {\n    if (strlen($word) > 0) {\n      $chars[] = $word;\n\
    \    }\n  }\n\n  usort($chars, function($a, $b) {\n    return strlen($b) - strlen($a);\n\
    \  });\n\n  return $chars[0];\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkkutne9s.php:33\n\
    Stack trace:\n#0 /tmp/tmpkkutne9s.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkkutne9s.php\
    \ on line 33\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_len = array_reduce($words,\
    \ function($a, $b) {\n        return max($a, $b);\n    });\n    $words_in_len\
    \ = array_count_values($words);\n    $max_words = array_keys($words_in_len, $max_len);\n\
    \    return $max_words[0] ?? false;\n}\n\nfunction candidate(...$args) {\n   \
    \ return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeg2sxye_.php:26\n\
    Stack trace:\n#0 /tmp/tmpeg2sxye_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpeg2sxye_.php\
    \ on line 26\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  foreach ($words as $word)\
    \ {\n    $count = 1;\n    foreach ($words as $w) {\n      if ($word === $w) {\n\
    \        $count++;\n      }\n    }\n    if ($count > 1) {\n      return $word;\n\
    \    }\n  }\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm03rs1_x.php:30\n\
    Stack trace:\n#0 /tmp/tmpm03rs1_x.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpm03rs1_x.php\
    \ on line 30\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  return $words[0];\n}\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwnyo9gr3.php:20\n\
    Stack trace:\n#0 /tmp/tmpwnyo9gr3.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpwnyo9gr3.php\
    \ on line 20\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = -PHP_INT_MAX;\n\
    \    $curr = 0;\n    foreach ($words as $word) {\n        $curr += strlen($word);\n\
    \        if ($curr > $max) {\n            $max = $curr;\n            $word = $word;\n\
    \        }\n    }\n    return $word;\n}\n\nfunction candidate(...$args) {\n  \
    \  return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk4cfy6kf.php:31\n\
    Stack trace:\n#0 /tmp/tmpk4cfy6kf.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpk4cfy6kf.php\
    \ on line 31\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Write your PHP code\
    \ here\n    $max_elements = array();\n    foreach ($words as $key => $value) {\n\
    \        $unique_chars = count($value) - 1;\n        $max_elements[$unique_chars]\
    \ = $words[$key];\n    }\n    usort($max_elements);\n    return $max_elements[0];\n\
    }\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmp1zdh9oag.php:16\nStack trace:\n\
    #0 /tmp/tmp1zdh9oag.php(23): find_max(Array)\n#1 /tmp/tmp1zdh9oag.php(27): candidate(Array)\n\
    #2 /tmp/tmp1zdh9oag.php(39): test()\n#3 {main}\n  thrown in /tmp/tmp1zdh9oag.php\
    \ on line 16\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Write your code here\n\
    \    $max = $words[0];\n    foreach($words as $word){\n        $count=0;\n   \
    \     $count_array = preg_split('//', $word);\n        foreach($count_array as\
    \ $char){\n            $count+=1;\n        }\n        if($count>$max){\n     \
    \       $max = $count;\n        }\n    }\n    return $max;\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiggv_mqs.php:32\n\
    Stack trace:\n#0 /tmp/tmpiggv_mqs.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpiggv_mqs.php\
    \ on line 32\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    return count(array_unique(array_map(\"\
    strlen\", $words))) ==\n           count($words) ? max($words) : find_max(array_values($words));\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpjd09a68d.php on line 13

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = -1;\n    foreach\
    \ ($words as $word) {\n        $current_max = count($word);\n        if ($current_max\
    \ > $max) {\n            $max = $current_max;\n        }\n    }\n\n    foreach\
    \ ($words as $word) {\n        $current_max = count($word);\n        if ($current_max\
    \ != $max) {\n            return $word;\n        }\n    }\n\n    return $words[0];\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays dscore=1 |>\nYou can\
    \ get unique keys of an array with array_keys and then sort it with the array_sort\
    \ function.\nExample:\n<code>\n$words = [\"aaaaaaa\", \"bb\", \"cc\", \"aaaaaaa\"\
    ];\n$uniqueKeys = array_keys($words);\nsort($uniqueKeys);\nprint_r($uniqueKeys);\n\
    </code>\n<|/ a |>\n<| c |>\nI think OP wants all the unique values not the keys.\n\
    <|/ c |>\n<| c |>\nyes you are right, I got confused with the question.... but\
    \ still, the answer is correct.\n<|/ c |>\n<| a dscore=1 |>\nPHP array sorting\
    \ help:\n<code>\n$array = array('a', 'b', 'c', 'b', 'b');\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp0hsuwr7u.php
    on line 30

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $maxCount = 0;\n    $maxWord\
    \ = \"\";\n    foreach ($words as $word) {\n        if (strlen($word) == 0) {\n\
    \            continue;\n        }\n        $count = count($word);\n        if\
    \ ($count > $maxCount) {\n            $maxCount = $count;\n            $maxWord\
    \ = $word;\n        }\n    }\n    return $maxWord;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmp2f2ohhcw.php:19\nStack trace:\n\
    #0 /tmp/tmp2f2ohhcw.php(29): find_max(Array)\n#1 /tmp/tmp2f2ohhcw.php(33): candidate(Array)\n\
    #2 /tmp/tmp2f2ohhcw.php(45): test()\n#3 {main}\n  thrown in /tmp/tmp2f2ohhcw.php\
    \ on line 19\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $unique_chars = array();\n\
    \    foreach ($words as $word) {\n        $unique_chars[$word] = 0;\n    }\n \
    \   uasort($unique_chars, function($a, $b) {\n        return strlen($a) - strlen($b);\n\
    \    });\n    $max = null;\n    foreach ($unique_chars as $char => $count) {\n\
    \        if (null === $max || $max < $count) {\n            $max = $count;\n \
    \       }\n    }\n    return $words[array_search($max, $unique_chars)];\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThat is amazing. But I cannot understand it at all. Can you\
    \ please explain it to me?\n<|/ c |>\n<| c |>\n: I've added a short explanation.\n\
    <|/ c |>\n<| a dscore=1 |>\nHere's a one-liner:\n<code>\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmppp2zw8hy.php
    on line 28

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t$max_count = 0;\n\t$max_word\
    \ = \"\";\n\tforeach ($words as $word) {\n\t\t$current_count = 1;\n\t\tforeach\
    \ (str_split($word) as $char) {\n\t\t\t$current_count += substr_count($char, \"\
    a\");\n\t\t}\n\t\tif ($current_count > $max_count) {\n\t\t\t$max_count = $current_count;\n\
    \t\t\t$max_word = $word;\n\t\t}\n\t}\n\treturn $max_word;\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgmp875jx.php:32\n\
    Stack trace:\n#0 /tmp/tmpgmp875jx.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpgmp875jx.php\
    \ on line 32\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $hash = [];\n    foreach\
    \ ($words as $word) {\n        $h = 0;\n        foreach (str_split($word) as $c)\
    \ {\n            $h += array_key_exists($c, $hash) ? $hash[$c] : 0;\n        \
    \    $hash[$c] = $h;\n        }\n    }\n    arsort($hash);\n    return reset($hash);\n\
    }\n</code>\nThis solution is very fast. It uses O(n) time complexity and O(n)\
    \ space. Since it is sorted, it is also O(nlogn) time complexity and O(n) space.\n\
    <|/ a dscore=1 |>\n<| a dscore=0 tags=algorithm,php,sorting |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp66hegi70.php
    on line 24

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    \n    // Write your code\
    \ here\n    $max_word_len = array();\n    \n    foreach ($words as $word) {\n\
    \        $length = strlen($word);\n        if (!isset($max_word_len[$length]))\
    \ {\n            $max_word_len[$length] = 1;\n        } else {\n            $max_word_len[$length]\
    \ += 1;\n        }\n    }\n    \n    $sorted_max_word_len = arsort($max_word_len);\n\
    \    \n    return $words[$sorted_max_word_len[0]];\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Trying to access array offset on value of type bool in /tmp/tmp0s9t0xtw.php\
    \ on line 28\n\nWarning: Undefined array key \"\" in /tmp/tmp0s9t0xtw.php on line\
    \ 28\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0s9t0xtw.php:35\n\
    Stack trace:\n#0 /tmp/tmp0s9t0xtw.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp0s9t0xtw.php\
    \ on line 35\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $chars = array_count_values($words);\n\
    \  arsort($chars);\n  return key($chars);\n}\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ works like a charm, thank you. Although, I don't understand how this works.\
    \ Could you please elaborate?\n<|/ c |>\n<| c |>\nThe [array_count_values manual](http://php.net/array_count_values)\
    \ is pretty clear about how it works.\n<|/ c |>\n<| c |>\nThe function returns\
    \ the word with maximum count of unique characters, not character that comes first\
    \ in lexicographical order.\n<|/ c |>\n<| c |>\nI suppose I misunderstood the\
    \ question. I am not at all sure if \"string\" is supposed to be the first word\
    \ as alphabetical ordering would put \"of\" before \"string\" in the alphabet.\n\
    <|/ c |>\n<| c |>\nYes, that's exactly the problem. The first word has most unique\
    \ characters.\n<|/ c |>\n<| a tags=php dscore=0 |>\nThe solution is quite complicated,\
    \ although it works, is quite slow. \nThis code finds the first word with maximum\
    \ unique characters, that is the first word that comes first in lexicographical\
    \ order after sorting of unique characters:\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpwjssni2e.php
    on line 17

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Your code here\n \
    \   $max = 0;\n    $result = '';\n\n    foreach ($words as $word) {\n        //\
    \ Count the number of occurences\n        $word_count = array_count_values(str_split($word));\n\
    \n        // Store the word with the highest number of occurences\n        if\
    \ (isset($word_count[$max])) {\n            $result = $word;\n        }\n    \
    \    $max++;\n    }\n\n    return $result;\n}\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd866ekk.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd866ekk.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpfd866ekk.php\
    \ on line 35\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $hash = [];\n    foreach\
    \ ($words as $word) {\n        if (!isset($hash[$word])) {\n            $hash[$word]\
    \ = 1;\n        } else {\n            $hash[$word]++;\n        }\n    }\n    ksort($hash);\n\
    \    $max = $hash[0];\n    $word = null;\n    foreach ($hash as $num => $count)\
    \ {\n        if ($count > $max) {\n            $max = $count;\n            $word\
    \ = $words[$num];\n        }\n    }\n    return $word;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=arrays,php,algorithm dscore=1 |>\nI came across this problem and\
    \ I solved it in PHP by first getting an array of the unique words and then sorting\
    \ this array.\nHere is the code:\n<code>\nfunction candidate(...$args) {\n   \
    \ return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpfiv9ijsw.php
    on line 32

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $arr = array_count_values($words);\n\
    \  $max = -1;\n  foreach ($arr as $word => $count) {\n    if ($count > $max) {\n\
    \      $max = $count;\n      $result = $word;\n    }\n  }\n  return $result;\n\
    }\n</code>\n<|/ a |>\n<| a tags=php |>\nHere is another solution:\n<code>\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpzedwwq4q.php
    on line 23

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Write your implementation\
    \ here.\n    $count = array_count_values($words);\n    krsort($count);\n    return\
    \ reset($count);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n`ksort()` works fine\
    \ on associative arrays. `array_count_values()` works on both associative and\
    \ numeric arrays. Neither is required by the OP's question.\n<|/ c |>\n<| c |>\n\
    Thanks for the answer! But I still don't understand how I should use it. I'm not\
    \ a pro, I'm learning from books and googling, but what code should I write in\
    \ my case?\n<|/ c |>\n<| c |>\nThanks for the answer! But I still don't understand\
    \ how I should use it. I'm not a pro, I'm learning from books and googling, but\
    \ what code should I write in my case? I mean what code I should put in the \"\
    write your implementation here.\"?\n<|/ c |>\n<| c |>\n, I have added the code.\
    \ Hope that helps\n<|/ c |>\n<| c |>\nGreat thanks for all the answers. But I\
    \ still don't understand how I should use it. I'm not a pro, I'm learning from\
    \ books and googling, but what code should I write in my case? I mean what code\
    \ I should put in the \"write your implementation here.\"?\n<|/ c |>\n<| a dscore=0\
    \ tags=arrays,sorting,php |>\n<code>\n<?php\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp5xg9yj03.php
    on line 18

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    foreach ($words as $key\
    \ => $value) {\n        $words[$key] = strtolower($value);\n    }\n    $count\
    \ = array_count_values($words);\n    $max = max($count);\n    foreach ($count\
    \ as $key => $value) {\n        if ($value == $max) {\n            return $key;\n\
    \        }\n    }\n    return \"\";\n}\n\nfunction candidate(...$args) {\n   \
    \ return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpws2i6qv2.php:31\n\
    Stack trace:\n#0 /tmp/tmpws2i6qv2.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpws2i6qv2.php\
    \ on line 31\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $result = array();\n  foreach\
    \ ($words as $word) {\n    $result[$word] = array_count_values(str_split($word))[count($result[$word])\
    \ - 1];\n  }\n  return max($result);\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"name\" in /tmp/tmpv9aqfstd.php on line\
    \ 15\n\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, null given in /tmp/tmpv9aqfstd.php:15\nStack trace:\n\
    #0 /tmp/tmpv9aqfstd.php(20): find_max(Array)\n#1 /tmp/tmpv9aqfstd.php(24): candidate(Array)\n\
    #2 /tmp/tmpv9aqfstd.php(36): test()\n#3 {main}\n  thrown in /tmp/tmpv9aqfstd.php\
    \ on line 15\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $words = array_count_values($words);\n\
    \    krsort($words);\n    $max = key($words);\n    foreach ($words as $k => $v)\
    \ {\n        if ($v == $max) {\n            continue;\n        }\n        if ($v\
    \ > $max) {\n            $max = $k;\n        }\n    }\n    return $words[$max];\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_zpvmmb_.php:32\n\
    Stack trace:\n#0 /tmp/tmp_zpvmmb_.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp_zpvmmb_.php\
    \ on line 32\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    return $words[array_search(strnatcmp($words[0],\
    \ '0'), $words)];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpemxmt0x9.php:21\n\
    Stack trace:\n#0 /tmp/tmpemxmt0x9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpemxmt0x9.php\
    \ on line 21\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_word = \"\";\n \
    \   $max_char_count = array();\n    foreach ($words as $word) {\n        $count\
    \ = 0;\n        foreach (str_split($word) as $c) {\n            $count += strlen($c);\n\
    \        }\n        if ($count > count($max_char_count)) {\n            $max_word\
    \ = $word;\n            $max_char_count = $count;\n        }\n    }\n    return\
    \ $max_word;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php dscore=0\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpe7bn4hbs.php
    on line 27

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\t$count = 0;\n\t$best_word\
    \ = \"\";\n\tforeach ($words as $word) {\n\t\t$char = strlen($word);\n\t\t$unique_chars\
    \ = 0;\n\t\t$total_chars = 0;\n\t\tfor ($i = 0; $i < $char; $i++) {\n\t\t\t$total_chars\
    \ += $word[$i];\n\t\t\t$unique_chars += $word[$i];\n\t\t}\n\t\tif ($total_chars\
    \ > $count) {\n\t\t\t$count = $total_chars;\n\t\t\t$best_word = $word;\n\t\t}\n\
    \t}\n\treturn $best_word;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmpv7vu41t5.php:20\nStack trace:\n#0 /tmp/tmpv7vu41t5.php(31): find_max(Array)\n\
    #1 /tmp/tmpv7vu41t5.php(35): candidate(Array)\n#2 /tmp/tmpv7vu41t5.php(47): test()\n\
    #3 {main}\n  thrown in /tmp/tmpv7vu41t5.php on line 20\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = null;\n    $count\
    \ = null;\n\n    foreach($words as $word) {\n        if (is_null($count)) {\n\
    \            $count = 1;\n            $max = $word;\n        } else {\n      \
    \      if (strlen($word) == $count) {\n                $count++;\n           \
    \ } else {\n                $count = strlen($word);\n                $max = $word;\n\
    \            }\n        }\n    }\n\n    return $max;\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8j3s0vgv.php:39\n\
    Stack trace:\n#0 /tmp/tmp8j3s0vgv.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp8j3s0vgv.php\
    \ on line 39\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_word = \"\";\n  $max_count\
    \ = 0;\n  foreach ($words as $word) {\n    $word_count = str_word_count($word);\n\
    \    if ($word_count > $max_count) {\n      $max_word = $word;\n      $max_count\
    \ = $word_count;\n    }\n  }\n  return $max_word;\n}\n</code>\n<|/ a dscore=2\
    \ tags=php |>\n<| a dscore=1 tags=php |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpk4zxqmxc.php
    on line 24

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $letters = array();\n\
    \    foreach ($words as $word) {\n        foreach (str_split($word) as $letter)\
    \ {\n            $letters[$letter]++;\n        }\n    }\n    arsort($letters);\n\
    \    return reset($letters);\n}\n</code>\n<|/ a tags=algorithm,php,string dscore=5\
    \ |>\n<| a dscore=3 |>\n<code>\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp87rplrr3.php
    on line 22

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $index\
    \ = 0;\n    $length = count($words);\n    foreach ($words as $word) {\n      \
    \  if (count($word) == $max) {\n            $index = $i;\n        }\n        $max\
    \ = count($word);\n    }\n    return $words[$index];\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmpii64xr9_.php:17\nStack trace:\n\
    #0 /tmp/tmpii64xr9_.php(26): find_max(Array)\n#1 /tmp/tmpii64xr9_.php(30): candidate(Array)\n\
    #2 /tmp/tmpii64xr9_.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpii64xr9_.php\
    \ on line 17\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Create an empty array.\n\
    \    $characters = array();\n\n    // For each word in the array.\n    foreach\
    \ ($words as $word) {\n        // Get the number of unique characters in the word.\n\
    \        $characters[] = count_chars($word);\n    }\n\n    // Sort the characters\
    \ in the array in descending order.\n    arsort($characters);\n\n    // The word\
    \ with maximum number of unique characters is stored in\n    // the variable.\n\
    \    $max = 0;\n\n    // Iterate through the characters in the array.\n    for\
    \ ($i = 0; $i < count($characters); $i++) {\n        // If the current character\
    \ is greater than the maximum number of unique\n        // characters stored in\
    \ the variable, store the new maximum value.\n        if ($characters[$i] > $max)\
    \ {\n            $max = $characters[$i];\n        }\n    }\n\n    // Return the\
    \ word with the maximum number of unique characters.\n    return $words[array_search($max,\
    \ $characters)];\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpebcauyp1.php:46\n\
    Stack trace:\n#0 /tmp/tmpebcauyp1.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpebcauyp1.php\
    \ on line 46\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Write your code here\n\
    \    $count = array();\n    foreach ($words as $word) {\n        $letters = str_split($word);\n\
    \        $char_count = array_count_values($letters);\n        $count[] = $char_count;\n\
    \    }\n    arsort($count);\n    foreach ($count as $item) {\n        $max = array_slice($item,\
    \ 0);\n    }\n    return $max[0];\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmppoh426he.php on line 24\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmppoh426he.php:32\nStack\
    \ trace:\n#0 /tmp/tmppoh426he.php(44): test()\n#1 {main}\n  thrown in /tmp/tmppoh426he.php\
    \ on line 32\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  // TODO: Write your code\
    \ in PHP. Make sure you pass the tests in the\n  // block below.\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfmnuqfcs.php:22\n\
    Stack trace:\n#0 /tmp/tmpfmnuqfcs.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpfmnuqfcs.php\
    \ on line 22\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // TODO: Implement find_max()\
    \ function\n    $letters = array_map(\"utf8_encode\", $words);\n    $freq = array_count_values($letters);\n\
    \    return null;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9xwurbrg.php:23\n\
    Stack trace:\n#0 /tmp/tmp9xwurbrg.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp9xwurbrg.php\
    \ on line 23\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    return $words[array_search(max(array_count_values($words)),\
    \ array_count_values($words))];\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"name\" in /tmp/tmpdumovwsk.php on line\
    \ 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdumovwsk.php:21\n\
    Stack trace:\n#0 /tmp/tmpdumovwsk.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpdumovwsk.php\
    \ on line 21\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  // Initialize a $count\
    \ variable to 0.\n  $count = 0;\n  // Initialize a $max_count variable to null.\n\
    \  $max_count = null;\n  // Initialize an array to hold max count words.\n  $words_with_max_count\
    \ = 0;\n  foreach($words as $word) {\n    // Increment $count.\n    $count +=\
    \ strlen($word);\n    // If the current $count is greater than the $max_count,\
    \ update $max_count\n    // and add current word to $words_with_max_count.\n \
    \   if($count > $max_count) {\n      $max_count = $count;\n      $words_with_max_count[]\
    \ = $word;\n    }\n  }\n  // Return the $words_with_max_count array with max count\
    \ word.\n  return $words_with_max_count[0];\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Cannot use a scalar value as an array in\
    \ /tmp/tmpmwf4z__n.php:26\nStack trace:\n#0 /tmp/tmpmwf4z__n.php(34): find_max(Array)\n\
    #1 /tmp/tmpmwf4z__n.php(38): candidate(Array)\n#2 /tmp/tmpmwf4z__n.php(50): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmwf4z__n.php on line 26\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  return array_reduce($words,\
    \ function ($carry, $word) {\n    return max($carry, array_count_values(str_split($word)));\n\
    \  });\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb0wgj203.php:22\n\
    Stack trace:\n#0 /tmp/tmpb0wgj203.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpb0wgj203.php\
    \ on line 22\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  // Initialize max and count\
    \ with first element.\n  $max = $words[0];\n  $count = 0;\n\n  // Find the longest\
    \ string in $words.\n  foreach ($words as $word) {\n    // Increment count if\
    \ current word has maximum number of unique characters.\n    if (strlen($word)\
    \ > strlen($max)) {\n      $max = $word;\n      $count = count($max);\n    }\n\
    \  }\n\n  // If all strings had the same number of unique characters, return the\n\
    \  // first string with lexicographical order.\n  if ($count == count($max)) {\n\
    \    return $max;\n  }\n\n  // If count > 1, then return the word which comes\
    \ first.\n  return $count > 1 ? $words[0] : $max;\n}\n</code>\n<|/ a dscore=2\
    \ tags=string,php,arrays,sorting |>\n<| a |>\nYou can try this one also,\n<code>\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp_lthftqw.php
    on line 35

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    if (count($words) ==\
    \ 1) {\n        return $words[0];\n    }\n    $counts = array();\n    foreach\
    \ ($words as $word) {\n        if (!isset($counts[$word])) {\n            $counts[$word]\
    \ = 0;\n        }\n        $counts[$word]++;\n    }\n    arsort($counts);\n  \
    \  return $words[0];\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpswp5y8z9.php:31\n\
    Stack trace:\n#0 /tmp/tmpswp5y8z9.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpswp5y8z9.php\
    \ on line 31\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    return max(array_count_values($words),\
    \ function ($counts) {\n        return $counts['string'];\n    });\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3zxamkor.php:23\n\
    Stack trace:\n#0 /tmp/tmp3zxamkor.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp3zxamkor.php\
    \ on line 23\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = null;\n    foreach\
    \ ($words as $word) {\n        $counts[] = count(array_unique(str_split($word)));\n\
    \    }\n    foreach ($counts as $count) {\n        if ($count > count($counts)\
    \ || !$max) {\n            $max = $count;\n            $word = $words[$count];\n\
    \        }\n    }\n    return $word;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    Nice. Nice use of `array_reduce`. I like that this is using O(n) space and not\
    \ `O(k)` space.\n<|/ c |>\n<| c |>\nthanks that's a great solution! My solution\
    \ is still O(n) space but O(n) time!\n<|/ c |>\n<| a tags=arrays,php |>\nHere's\
    \ a recursive solution using arrays:\n<code>\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpt6alkkid.php
    on line 25

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  if (empty($words)) {\n\
    \    return null;\n  }\n  $words = array_unique($words);\n  if (count($words)\
    \ == 1) {\n    return $words[0];\n  }\n  sort($words);\n  $max = array_shift($words);\n\
    \  foreach ($words as $word) {\n    if (count($word) > strlen($max)) {\n     \
    \ $max = substr($max, 0, -1);\n    }\n  }\n  return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmpepnl075b.php:23\nStack trace:\n\
    #0 /tmp/tmpepnl075b.php(31): find_max(Array)\n#1 /tmp/tmpepnl075b.php(35): candidate(Array)\n\
    #2 /tmp/tmpepnl075b.php(47): test()\n#3 {main}\n  thrown in /tmp/tmpepnl075b.php\
    \ on line 23\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $unique_chars = [];\n \
    \ foreach ($words as $word) {\n    $unique_chars = array_merge(array_count_values(str_split($word)),\
    \ $unique_chars);\n  }\n\n  $sorted_unique_chars = array_keys($unique_chars, max($unique_chars));\n\
    \  return $sorted_unique_chars[0];\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcm4y112t.php:26\n\
    Stack trace:\n#0 /tmp/tmpcm4y112t.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpcm4y112t.php\
    \ on line 26\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Write your PHP implementation\
    \ here.\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxak51cvb.php:21\n\
    Stack trace:\n#0 /tmp/tmpxak51cvb.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxak51cvb.php\
    \ on line 21\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = -99999; // -ve\
    \ number indicates no word has a max number of unique chars\n    $maxWord = null;\n\
    \    foreach($words as $word) {\n        $numChars = count($word);\n        if($numChars\
    \ > $max) {\n            $maxWord = $word;\n            $max = $numChars;\n  \
    \      } elseif($numChars == $max) {\n            $maxWord = $word;\n        }\n\
    \    }\n    return $maxWord;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmpsrur1asa.php:16\nStack trace:\n\
    #0 /tmp/tmpsrur1asa.php(28): find_max(Array)\n#1 /tmp/tmpsrur1asa.php(32): candidate(Array)\n\
    #2 /tmp/tmpsrur1asa.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpsrur1asa.php\
    \ on line 16\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $result = \"\";\n   \
    \ $word_count = count($words);\n    for($i = 0; $i < $word_count; $i++) {\n  \
    \      if($i == 0) {\n            $result = $words[$i];\n        } else {\n  \
    \          $unique_char_count = 0;\n            $prev_char = \"\";\n         \
    \   $unique_char_index = 0;\n            for($j = $i; $j < $word_count; $j++)\
    \ {\n                if($words[$j] == $prev_char) {\n                    $unique_char_count++;\n\
    \                } else {\n                    $unique_char_count = 0;\n     \
    \               break;\n                }\n                $prev_char = $words[$j];\n\
    \                $unique_char_index++;\n            }\n            if($unique_char_count\
    \ == $unique_char_index) {\n                $result = $words[$i];\n          \
    \  }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkplrevq2.php:46\n\
    Stack trace:\n#0 /tmp/tmpkplrevq2.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpkplrevq2.php\
    \ on line 46\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    return array_reduce($words,\
    \ function ($count, $word) {\n        $count[$word] = count($count);\n       \
    \ return $count;\n    }, [\"-\"]);\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp411cq8oh.php:24\n\
    Stack trace:\n#0 /tmp/tmp411cq8oh.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp411cq8oh.php\
    \ on line 24\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  if (count($words) == 0)\
    \ {\n    return \"\";\n  }\n  $max = 1;\n  $first_pos = 0;\n  foreach ($words\
    \ as $word) {\n    if (strlen($word) > $max) {\n      $maxstr = $word;\n     \
    \ $max_pos = 0;\n    }\n    foreach (str_split($word) as $pos) {\n      if ($pos\
    \ == $first_pos) {\n        $first_pos++;\n      }\n      if ($pos + 1 > $max_pos)\
    \ {\n        $max_pos = $pos + 1;\n      }\n    }\n  }\n  return $maxstr;\n}\n\
    \nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: string +\
    \ int in /tmp/tmpxgwp8j82.php:27\nStack trace:\n#0 /tmp/tmpxgwp8j82.php(36): find_max(Array)\n\
    #1 /tmp/tmpxgwp8j82.php(40): candidate(Array)\n#2 /tmp/tmpxgwp8j82.php(52): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxgwp8j82.php on line 27\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_word = \"\";\n \
    \   $max_count = 0;\n    foreach ($words as $word) {\n        if (count(array_count_values(str_split($word)))\
    \ > $max_count) {\n            $max_count  = count(array_count_values(str_split($word)));\n\
    \            $max_word  = $word;\n        }\n    }\n    return $max_word;\n}\n\
    </code>\n<|/ a tags=algorithm,php,string,arrays |>\n<| c |>\nI didn't downvote\
    \ this answer, but I think it's because this does not produce the expected results.\
    \ Please try `find_max(array(\"aaaaaaa\", \"bbbb\", \"cc\"))`. The answer is \"\
    bbbb\", which is clearly not the expected result.\n<|/ c |>\n<| c |>\nThanks for\
    \ pointing this out. I edited my answer and it's now working.\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work for \"aaaaaaa\", \"bb\", \"ccc\" but \"aaaaaaa\", \"bbbbb\"\
    , \"cc\".  I believe it needs to be: count(array_count_values(str_split($word)))\
    \ > $max_count\n<|/ c |>\n<| c |>\nThanks, you are right. I've edited the answer\
    \ and now it's working.\n<|/ c |>\n<| a tags=algorithm,php,string,arrays dscore=2\
    \ |>\n<code>\n<?php\n$arr=array();\n$arr[0] = \"aaa\";\n$arr[1] = \"bb\";\n$arr[2]\
    \ = \"bbb\";\n$arr[3] = \"cc\";\n$arr[4] = \"ccc\";\n$arr[5] = \"aa\";\n\n$arrSort\
    \ = sort($arr);\n$highest_value = array_pop($arrSort);\n$highest_count = count($arr);\n\
    $highest_word_index = 0;\nfor ($i=0; $i<count($arr); $i++) {\n    if($arr[$i]\
    \ == $highest_value) {\n        $highest_count--;\n        if($highest_count ===\
    \ 0) {\n            $highest_word_index = $i;\n        }\n    }\n}\necho \"Highest\
    \ count word: \".$highest_value.\", occuring at: \".$highest_word_index;\n</code>\n\
    <|/ a |>\n<| a dscore=2 |>\nTry this.\n<code>\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpchaynuuo.php
    on line 23

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $count = array_count_values($words);\n\
    \  arsort($count);\n  return key($count);\n}\n</code>\n<|/ a tags=php,arrays |>\n\
    <| c |>\nOh, sorry, I misread the OP's expected output. I'll edit the answer.\n\
    <|/ c |>\n<| c |>\nNice one +1 for the elegant solution\n<|/ c |>\n<| c |>\n+1\
    \ Nice solution I like it\n<|/ c |>\n<| a |>\nYou could use array_count_values,\
    \ arsort, and then get the last element.\n<code>\n$array = array(\"words\", \"\
    are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"are\", \"great\"\
    , \"words\", \"are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"\
    are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"are\", \"great\"\
    , \"words\", \"are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"\
    are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"are\", \"great\"\
    , \"words\", \"are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"\
    are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"are\", \"great\"\
    , \"words\", \"are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"\
    are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"are\", \"great\"\
    , \"words\", \"are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"\
    are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"are\", \"great\"\
    , \"words\", \"are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"\
    are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"are\", \"great\"\
    , \"words\", \"are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"\
    are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"are\", \"great\"\
    , \"words\", \"are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"\
    are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"are\", \"great\"\
    , \"words\", \"are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"\
    are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"are\", \"great\"\
    , \"words\", \"are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"\
    are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"are\", \"great\"\
    , \"words\", \"are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"\
    are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"are\", \"great\"\
    , \"words\", \"are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"\
    are\", \"great\", \"words\", \"are\", \"great\", \"words\", \"are\", \"great\"\
    , \"words\", \"are\", \"great\", \"words\", \"are\", \"great\", \"\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpcelohv6p.php
    on line 17

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $chars = [];\n    $counts\
    \ = [];\n    foreach ($words as $word) {\n        foreach ($chars as $char) {\n\
    \            $counts[$char] = isset($counts[$char]) ? $counts[$char] + 1 : 1;\n\
    \            if ($counts[$char] > 1) {\n                continue 2;\n        \
    \    }\n        }\n        $chars[] = $word[0];\n    }\n    return $chars[array_search(max($counts),\
    \ $counts)];\n}\n</code>\nThe above function returns an array of unique characters\
    \ and the position of the maximum in that array. \nThen, it just returns the first\
    \ element of that array with the highest number of unique characters.\nThe above\
    \ function can be tested here:\nhttps://3v4l.org/FhGkE\n<|/ a dscore=1 tags=sorting,string,php,unique\
    \ |>\n<| a tags=sorting,string,php,unique |>\n<code>\n<?php\n$string = \"hello\
    \ my name is sunny sun sun sun sun sunny sun sun\";\n$words = explode(\" \", $string);\n\
    $result = array_count_values($words);\n$result = $result[0];\n$result = $result[0];\n\
    var_dump($result);\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpektvi1bw.php
    on line 26

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $index\
    \ = 0;\n    $result = false;\n    $letters = array_fill(0, 26, -1);\n\n    foreach\
    \ ($words as $word) {\n        foreach (str_split($word) as $letter) {\n     \
    \       $letters[$letter] = $letters[$letter] + 1;\n        }\n\n        if ($letters[$letter]\
    \ > $max) {\n            $index = 0;\n            $max = $letters[$letter];\n\
    \            $result = $word;\n        } else if ($letters[$letter] == $max) {\n\
    \            $index = 0;\n            $result = $word;\n        }\n    }\n\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"n\" in /tmp/tmpc2mx6xgt.php on line 20\n\
    \nWarning: Undefined array key \"a\" in /tmp/tmpc2mx6xgt.php on line 20\n\nWarning:\
    \ Undefined array key \"m\" in /tmp/tmpc2mx6xgt.php on line 20\n\nWarning: Undefined\
    \ array key \"e\" in /tmp/tmpc2mx6xgt.php on line 20\n\nWarning: Undefined array\
    \ key \"o\" in /tmp/tmpc2mx6xgt.php on line 20\n\nWarning: Undefined array key\
    \ \"f\" in /tmp/tmpc2mx6xgt.php on line 20\n\nWarning: Undefined array key \"\
    s\" in /tmp/tmpc2mx6xgt.php on line 20\n\nWarning: Undefined array key \"t\" in\
    \ /tmp/tmpc2mx6xgt.php on line 20\n\nWarning: Undefined array key \"r\" in /tmp/tmpc2mx6xgt.php\
    \ on line 20\n\nWarning: Undefined array key \"i\" in /tmp/tmpc2mx6xgt.php on\
    \ line 20\n\nWarning: Undefined array key \"g\" in /tmp/tmpc2mx6xgt.php on line\
    \ 20\n\nWarning: Undefined array key \"n\" in /tmp/tmpc2mx6xgt.php on line 20\n\
    \nWarning: Undefined array key \"a\" in /tmp/tmpc2mx6xgt.php on line 20\n\nWarning:\
    \ Undefined array key \"m\" in /tmp/tmpc2mx6xgt.php on line 20\n\nWarning: Undefined\
    \ array key \"e\" in /tmp/tmpc2mx6xgt.php on line 20\n\nWarning: Undefined array\
    \ key \"g\" in /tmp/tmpc2mx6xgt.php on line 20\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpc2mx6xgt.php:42\nStack trace:\n#0 /tmp/tmpc2mx6xgt.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpc2mx6xgt.php on line 42\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    foreach ($words as $key\
    \ => $value) {\n        if (strlen($value) > strlen($words[$key])) {\n       \
    \     $words[$key] = $value;\n        }\n    }\n    arsort($words);\n    return\
    \ $words[0];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg0kx8136.php:27\n\
    Stack trace:\n#0 /tmp/tmpg0kx8136.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpg0kx8136.php\
    \ on line 27\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    foreach ($words as $key\
    \ => $word) {\n        $unique = array_count_values(str_split($word));\n     \
    \   $maxValue = $unique[max($unique)];\n        if ($maxValue > count($words[$key]))\
    \ {\n            return $words[$key];\n        }\n    }\n}\n</code>\n<|/ a |>\n\
    <| a tags=algorithm,php |>\nTry this\n<code>\n<?php\n$words = array('abc', 'aac',\
    \ 'bac');\n$wordslength = count($words);\nforeach ($words as $key => $word) {\n\
    \    foreach (str_split($word) as $character) {\n        $counts[$character]++;\n\
    \    }\n    $max = $counts[max($counts)];\n    $keys[$key] = $words[$key];\n \
    \   if ($max === count($word)) {\n        break;\n    }\n}\nif (count($keys) ===\
    \ $wordslength) {\n    echo 'Word not found';\n} else {\n    echo 'Word is ' .\
    \ $keys[array_search(max($counts), $counts)];\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp3fdge0pd.php
    on line 21

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = $words[0];\n \
    \   foreach ($words as $word) {\n        if (strlen($word) > strlen($max)) {\n\
    \            $max = $word;\n        }\n    }\n    return $max;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp62jik8q.php:28\n\
    Stack trace:\n#0 /tmp/tmpp62jik8q.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpp62jik8q.php\
    \ on line 28\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $result = \"\";\n   \
    \ foreach ($words as $word) {\n        $count = 1;\n        for ($i = 1; $i <\
    \ strlen($word); $i++) {\n            $current_char = $word[$i];\n           \
    \ foreach ($words as $other) {\n                $other_char = $other[$i];\n  \
    \              if ($current_char == $other_char) {\n                    $count++;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     if ($count > strlen($result)) {\n            $result = $word;\n        }\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Uninitialized string offset 2 in /tmp/tmp8f2c7wdv.php on line\
    \ 19\n\nWarning: Uninitialized string offset 3 in /tmp/tmp8f2c7wdv.php on line\
    \ 19\n\nWarning: Uninitialized string offset 4 in /tmp/tmp8f2c7wdv.php on line\
    \ 19\n\nWarning: Uninitialized string offset 4 in /tmp/tmp8f2c7wdv.php on line\
    \ 19\n\nWarning: Uninitialized string offset 5 in /tmp/tmp8f2c7wdv.php on line\
    \ 19\n\nWarning: Uninitialized string offset 5 in /tmp/tmp8f2c7wdv.php on line\
    \ 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8f2c7wdv.php:38\n\
    Stack trace:\n#0 /tmp/tmp8f2c7wdv.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp8f2c7wdv.php\
    \ on line 38\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $unique = [];\n  $count\
    \ = 0;\n\n  foreach ($words as $word) {\n    if (in_array($word, $unique)) {\n\
    \      $count++;\n    } else {\n      $unique[$count] = $word;\n    }\n  }\n\n\
    \  arsort($unique);\n  return $unique[0];\n}\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm49fc3_h.php:33\n\
    Stack trace:\n#0 /tmp/tmpm49fc3_h.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpm49fc3_h.php\
    \ on line 33\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    if (count($words) ==\
    \ 0) return 0;\n    $max = 0;\n    $letters = array();\n    foreach ($words as\
    \ $word) {\n        $letters = array_merge($letters, preg_split('//', $word, -1,\
    \ PREG_SPLIT_NO_EMPTY));\n    }\n    $letters = array_unique($letters);\n    foreach\
    \ ($letters as $letter) {\n        if (count($words) >= $max && strlen($words[$max])\
    \ <= strlen($letter)) {\n            $max = $max;\n        } else if (count($words)\
    \ >= $max) {\n            $max = count($words);\n        }\n    }\n    return\
    \ $words[$max];\n}\n</code>\n<|/ a |>\n<| a tags=string,arrays,php,sorting dscore=0\
    \ |>\nHere is a very basic solution that just checks if the string contains duplicates\
    \ and returns the longest one. You can use preg_match_all() to do the actual counting\
    \ of letters. This is what I have so far and it works fine for me:\n<code>\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpmcrk3f8r.php
    on line 29

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Write your code here\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdvlur8j4.php:21\n\
    Stack trace:\n#0 /tmp/tmpdvlur8j4.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpdvlur8j4.php\
    \ on line 21\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    if (!is_array($words))\
    \ {\n        throw new InvalidArgumentException(\"The input is not an array\"\
    );\n    }\n    \n    $length = count($words);\n    if ($length == 0) {\n     \
    \   return null;\n    }\n    \n    $max = 0;\n    $max_word = null;\n    \n  \
    \  for ($i = 0; $i < $length; $i++) {\n        $word = strtolower($words[$i]);\n\
    \        $count = array_count_values(str_split($word));\n        $counts = array_map('strlen',\
    \ array_keys($count));\n        $counts = array_filter($counts);\n        if ($max\
    \ < count($counts)) {\n            $max = count($counts);\n            $max_word\
    \ = $word;\n        }\n    }\n    \n    return $max_word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1k5erbv4.php:45\n\
    Stack trace:\n#0 /tmp/tmp1k5erbv4.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp1k5erbv4.php\
    \ on line 45\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $unique_lengths = array_count_values($words);\n\
    \    arsort($unique_lengths);\n    $highest_index = array_keys($unique_lengths)[0];\n\
    \    return $words[$highest_index];\n}\n\nfunction candidate(...$args) {\n   \
    \ return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"name\" in /tmp/tmps3xv2o9k.php on line\
    \ 16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps3xv2o9k.php:24\n\
    Stack trace:\n#0 /tmp/tmps3xv2o9k.php(36): test()\n#1 {main}\n  thrown in /tmp/tmps3xv2o9k.php\
    \ on line 24\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $result = [];\n    foreach($words\
    \ as $word) {\n        $chars = count($word);\n        $counts = array_count_values($word);\n\
    \        $sorted = [];\n        ksort($counts);\n        foreach($counts as $key\
    \ => $value) {\n            $sorted[$key] = $value;\n        }\n        $result\
    \ = $word != $sorted[0] ? $word : max($result, $sorted);\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmpty1izmsh.php:15\nStack trace:\n\
    #0 /tmp/tmpty1izmsh.php(28): find_max(Array)\n#1 /tmp/tmpty1izmsh.php(32): candidate(Array)\n\
    #2 /tmp/tmpty1izmsh.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpty1izmsh.php\
    \ on line 15\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $counter = array();\n \
    \ foreach ($words as $word) {\n    $counter[$word] = count($word);\n  }\n  return\
    \ $counter = array_keys($counter, $counter[0]);\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis doesn't work because `'aaa'` is less than `'a'` because it is `'a'`\
    \ but with a lowercase `a`. So the count function returns the string with the\
    \ lowest length and therefore `'aaa'` is returned before `'aaa'` because it has\
    \ 2 `a`s. I suggest changing `count($word)` to `strlen($word)`.\n<|/ c |>\n<|\
    \ c |>\nI fixed that bug in code thanks for noticing. `strlen` function returns\
    \ number of characters in string so it works as charcount.\n<|/ c |>\n<| c |>\n\
    Still doesn't work as expected for multiple words. `find_max(array(\"name\", \"\
    of\", \"name\"))` returns `\"name\"` instead of `\"of\"`\n<|/ c |>\n<| a dscore=1\
    \ |>\nA more readable version of my answer:\n<code>\n$myarray = [\n    \"name\"\
    \ => \"Jimmy\",\n    \"of\" => \"Guns worn by people in battle\",\n    \"string\"\
    \ => \"This is an example string for testing the function\",\n    \"string2\"\
    \ => \"This is another string for testing the function\",\n];\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpaavesus4.php
    on line 19

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    return max($words, function\
    \ ($elem) {\n        return count(array_unique(str_split($elem)));\n    });\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ug7zndw.php:23\n\
    Stack trace:\n#0 /tmp/tmp8ug7zndw.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp8ug7zndw.php\
    \ on line 23\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $counts = array_count_values($words);\n\
    \  $key = array_search(max($counts), $counts);\n  return $key?$words[$key]:\"\
    No strings have unique characters\";\n}\n\n$words = [\n  \"to\", \"the\", \"of\"\
    , \"and\", \"a\", \"in\", \"at\", \"of\", \"and\", \"the\", \"to\",\n  \"in\"\
    , \"at\", \"of\", \"and\", \"the\", \"to\", \"in\", \"at\", \"of\", \"and\", \"\
    the\",\n  \"to\", \"in\", \"at\", \"of\", \"and\", \"the\", \"to\", \"in\", \"\
    at\", \"of\", \"and\",\n  \"the\", \"to\", \"in\", \"at\", \"of\", \"and\", \"\
    the\", \"to\", \"in\", \"at\", \"of\",\n  \"and\", \"the\", \"to\", \"in\", \"\
    at\", \"of\", \"and\", \"the\", \"to\", \"in\", \"at\",\n  \"of\", \"and\", \"\
    the\", \"to\", \"in\", \"at\", \"of\", \"and\", \"the\", \"to\", \"in\",\n  \"\
    at\", \"of\", \"and\", \"the\", \"to\", \"in\", \"at\", \"of\", \"and\", \"the\"\
    , \"to\",\n  \"in\", \"at\", \"of\", \"and\", \"the\", \"to\", \"in\", \"at\"\
    , \"of\", \"and\", \"the\",\n  \"to\", \"in\", \"at\", \"of\", \"and\", \"the\"\
    , \"to\", \"in\", \"at\", \"of\", \"and\",\n  \"the\", \"to\", \"in\", \"at\"\
    , \"of\", \"and\", \"the\", \"to\", \"in\", \"at\", \"of\",\n  \"and\", \"the\"\
    , \"to\", \"in\", \"at\", \"of\", \"and\", \"the\", \"to\", \"in\", \"at\",\n\
    \  \"of\", \"and\", \"the\", \"to\", \"in\", \"at\", \"of\", \"and\", \"the\"\
    , \"to\", \"in\",\n  \"at\", \"of\", \"and\", \"the\", \"to\", \"in\", \"at\"\
    , \"of\", \"and\", \"the\", \"to\",\n  \"in\", \"at\", \"of\", \"and\", \"the\"\
    , \"to\", \"in\", \"at\", \"of\", \"and\", \"the\",\n  \"to\", \"in\", \"at\"\
    , \"of\", \"and\", \"the\", \"to\", \"in\", \"at\", \"of\", \"and\",\n  \"the\"\
    , \"to\", \"in\", \"at\", \"of\", \"and\", \"the\", \"to\", \"in\", \"at\", \"\
    of\",\n  \"and\", \"the\", \"to\", \"in\", \"at\", \"of\", \"and\", \"the\", \"\
    to\", \"in\", \"at\",\n  \"of\", \"and\", \"the\", \"to\", \"in\", \"at\", \"\
    of\", \"and\", \"the\", \"to\", \"in\",\n  \"at\", \"of\", \"and\", \"the\", \"\
    to\", \"in\", \"at\", \"of\", \"and\", \"the\", \"to\",\n  \"in\", \"at\", \"\
    of\", \"and\", \"the\", \"\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "name", expecting "]" in /tmp/tmptslb6d33.php
    on line 44

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Write your PHP code\
    \ here.\n    sort($words);\n    $max = 0;\n    $temp = \"\";\n    foreach ($words\
    \ as $w) {\n        $len = strlen($w);\n        if ($len > $max) {\n         \
    \   $temp = $w;\n            $max = $len;\n        } elseif ($len == $max) {\n\
    \            $temp = substr($w, 0, $max);\n        }\n    }\n    return $temp;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpysk15gtp.php:35\n\
    Stack trace:\n#0 /tmp/tmpysk15gtp.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpysk15gtp.php\
    \ on line 35\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    foreach\
    \ ($words as $word) {\n        if (strlen($word) > $max) {\n            $max =\
    \ strlen($word);\n        }\n    }\n\n    foreach ($words as $word) {\n      \
    \  $unique = 0;\n        for ($i = 0; $i < $max; $i++) {\n            if (strpos($word,\
    \ $words[$i]) === FALSE) {\n                $unique++;\n            }\n      \
    \  }\n        if ($unique > $max) {\n            return $word;\n        }\n  \
    \  }\n    return $words[0];\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI'm really\
    \ sorry for my incovenience, but I tried to run this code and I got this \"Parse\
    \ error: syntax error, unexpected '[' in /home/.../find_max.php on line 7\". Can\
    \ you fix it? Thanks.\n<|/ c |>\n<| c |>\nsorry about the typo in the array declaration\
    \ (it should be `$words = array(\"name\", \"of\", \"string\");`). I don't have\
    \ the error you mentioned (but have another issue with the algorithm itself).\
    \ I will post my code with the appropriate error when I have the time to test\
    \ it properly.\n<|/ c |>\n<| c |>\nThank you so much for your help! I really appreciate\
    \ it :)\n<|/ c |>\n<| c |>\nsorry for another question: how do I get the return\
    \ value of this code? I mean, how do I print it? I tried `echo find_max($words);`\
    \ but it's giving me a syntax error.\n<|/ c |>\n<| c |>\nI updated my answer to\
    \ add another possible implementation\n<|/ c |>\n<| a dscore=0 |>\nThis should\
    \ work\n<code>\n$words = array(\"name\", \"of\", \"string\");\n$max = 0;\nforeach\
    \ ($words as $word) {\n    if (strlen($word) > $max) {\n        $max = strlen($word);\n\
    \    }\n}\n\nforeach ($words as $word) {\n    $unique = 0;\n    for ($i = 0; $i\
    \ < $max; $i++) {\n        if (strpos($word, $words[$i]) === FALSE) {\n      \
    \      $unique++;\n        }\n    }\n    if ($unique > $max) {\n        echo $words[$i];\n\
    \    }\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nI tried to run this code\
    \ and I got this \"Parse error: syntax error, unexpected '[' in /home/.../find_max.php\
    \ on line 7\". Can you fix it? Thanks.\n<|/ c |>\n<| a dscore=\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpqwl2xt0g.php
    on line 33

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $counter = array();\n\
    \    foreach ($words as $word) {\n        if (!isset($counter[$word])) {\n   \
    \         $counter[$word] = 0;\n        }\n        $counter[$word]++;\n    }\n\
    \    arsort($counter);\n    return $counter;\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp13mnighl.php:28\n\
    Stack trace:\n#0 /tmp/tmp13mnighl.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp13mnighl.php\
    \ on line 28\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Write your code in\
    \ PHP\n    $wordList = array();\n    foreach($words as $word){\n        foreach(str_split($word)\
    \ as $letter){\n            $wordList[$letter]++;\n        }\n    }\n    ksort($wordList);\n\
    \    foreach ($wordList as $key => $value) {\n        if ($value > count($words))\
    \ return $key;\n    }\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"n\" in /tmp/tmpi9qz_dh3.php on line 17\n\
    \nWarning: Undefined array key \"a\" in /tmp/tmpi9qz_dh3.php on line 17\n\nWarning:\
    \ Undefined array key \"m\" in /tmp/tmpi9qz_dh3.php on line 17\n\nWarning: Undefined\
    \ array key \"e\" in /tmp/tmpi9qz_dh3.php on line 17\n\nWarning: Undefined array\
    \ key \"o\" in /tmp/tmpi9qz_dh3.php on line 17\n\nWarning: Undefined array key\
    \ \"f\" in /tmp/tmpi9qz_dh3.php on line 17\n\nWarning: Undefined array key \"\
    s\" in /tmp/tmpi9qz_dh3.php on line 17\n\nWarning: Undefined array key \"t\" in\
    \ /tmp/tmpi9qz_dh3.php on line 17\n\nWarning: Undefined array key \"r\" in /tmp/tmpi9qz_dh3.php\
    \ on line 17\n\nWarning: Undefined array key \"i\" in /tmp/tmpi9qz_dh3.php on\
    \ line 17\n\nWarning: Undefined array key \"g\" in /tmp/tmpi9qz_dh3.php on line\
    \ 17\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi9qz_dh3.php:30\n\
    Stack trace:\n#0 /tmp/tmpi9qz_dh3.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpi9qz_dh3.php\
    \ on line 30\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    sort($words);\n    $max\
    \ = count($words);\n    $count = 1;\n    foreach ($words as $word) {\n       \
    \ if (count($word) > $count) {\n            $max = count($word);\n           \
    \ $count = 1;\n        }\n        $count++;\n    }\n    if ($count > $max) {\n\
    \        return $words[$max-1];\n    } else {\n        return $words[0];\n   \
    \ }\n}\n</code>\nThe same example works in PHP\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\nHere's an algorithm that takes your input and sorts it in descending order,\
    \ starting at the largest word and counting the number of characters in each word.\
    \ After it's finished, it returns the word that comes first (alphabetically).\n\
    <code>\n<?php\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpy8lgg51_.php
    on line 29

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    return $words[0];\n}\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4lmvqgh5.php:20\n\
    Stack trace:\n#0 /tmp/tmp4lmvqgh5.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp4lmvqgh5.php\
    \ on line 20\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $unique = array();\n\
    \    $counter = 0;\n    foreach ($words as $word) {\n        if (!array_key_exists($word,\
    \ $unique)) {\n            $unique[$word] = 0;\n            $counter++;\n    \
    \    }\n        $unique[$word]++;\n    }\n    arsort($unique);\n    $max = $words[0];\n\
    \    foreach ($unique as $key => $count) {\n        if ($count > $max) {\n   \
    \         $max = $count;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjnpl5_fk.php:37\n\
    Stack trace:\n#0 /tmp/tmpjnpl5_fk.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpjnpl5_fk.php\
    \ on line 37\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_count = 0;\n  $res\
    \ = '';\n  foreach($words as $word) {\n    $count = count(array_count_values(str_split($word)));\n\
    \    if ($count > $max_count) {\n      $res = $word;\n      $max_count = $count;\n\
    \    }\n  }\n  return $res;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjl6u7251.php:31\n\
    Stack trace:\n#0 /tmp/tmpjl6u7251.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpjl6u7251.php\
    \ on line 31\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  // Write your code here\n\
    \  for($i = 0; $i < count($words); $i++)\n  {\n    $count[$i] = count(array_unique($words[$i]));\n\
    \  }\n  $max = 0;\n  for($i = 0; $i < count($words); $i++)\n  {\n    if($count[$i]\
    \ > $max)\n    {\n      $max = $count[$i];\n    }\n  }\n  $first_value = array_search($max,\
    \ $count);\n  return $words[$first_value];\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_unique(): Argument #1 ($array)\
    \ must be of type array, string given in /tmp/tmpmfrkm6xy.php:16\nStack trace:\n\
    #0 /tmp/tmpmfrkm6xy.php(16): array_unique('name')\n#1 /tmp/tmpmfrkm6xy.php(31):\
    \ find_max(Array)\n#2 /tmp/tmpmfrkm6xy.php(35): candidate(Array)\n#3 /tmp/tmpmfrkm6xy.php(47):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmpmfrkm6xy.php on line 16\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Write your code here\n\
    }\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbbhfz_yg.php:20\n\
    Stack trace:\n#0 /tmp/tmpbbhfz_yg.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpbbhfz_yg.php\
    \ on line 20\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $unique_chars = array_count_values($words);\n\
    \    arsort($unique_chars);\n    return $unique_chars[reset($unique_chars)];\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmpvjzc8t4_.php on line 15\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpvjzc8t4_.php:23\nStack\
    \ trace:\n#0 /tmp/tmpvjzc8t4_.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpvjzc8t4_.php\
    \ on line 23\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $wordCount = array();\n\
    \    foreach($words as $word) {\n        $wordCount[$word] = 0;\n    }\n    foreach($words\
    \ as $word) {\n        foreach($wordCount as $key => $count) {\n            if(strcasecmp($word,\
    \ $key) === 0) {\n                $wordCount[$key] += 1;\n                break;\n\
    \            }\n        }\n    }\n    foreach($wordCount as $key => $count) {\n\
    \        if($count > $wordCount[$key]) {\n            $max = $key;\n        }\n\
    \    }\n    return $max;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is awesome! I wasn't\
    \ aware of the string sorting functions.\n<|/ c |>\n<| c |>\nGreat answer, however,\
    \ I'm getting some errors with it for larger strings. It's throwing errors on\
    \ every line with strpos and stripos functions. Any idea why that is?\n<|/ c |>\n\
    <| c |>\nI figured out the problem. It was because I was using an old version\
    \ of PHP. It didn't like some of the new function calls I used (strpos and stripos)\
    \ so I changed it to substr and it works just fine.\n<|/ c |>\n<| c |>\nI see\
    \ now, the error was actually an error in my code. You're right, those functions\
    \ were indeed outdated and no longer supported.\n<|/ c |>\n<| c |>\nI did some\
    \ performance tests, and this method doesn't take into account cases with multiple\
    \ words with the same maximum length. It only checks the longest word. The following\
    \ test is valid: `$words = array(\"word\", \"word\");\n$words = array($words);\n\
    var_dump(find_max($words));`\n<|/ c |>\n<| a tags=php,string |>\nA variation on\
    \ a theme of's answer but just to give an alternative to the OP I thought I'd\
    \ put it up:\n<code>\n$words = array(\"word\", \"word\");\n$words = array($words);\n\
    var_dump(find_max($words));\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpktqd5fj7.php
    on line 32

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $chars = array_count_values($words);\n\
    \  arsort($chars);\n  return key($chars);\n}\n\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3q36xxpt.php:23\n\
    Stack trace:\n#0 /tmp/tmp3q36xxpt.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp3q36xxpt.php\
    \ on line 23\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = null;\n    $max_len\
    \ = 0;\n    foreach ($words as $word) {\n        $counts = array_count_values(str_split($word));\n\
    \        if ($counts['a'] > $counts['b']) {\n            if ($counts['b'] > $counts['c'])\
    \ {\n                $max = $word;\n                $max_len = $counts['a'];\n\
    \            } else {\n                $max = $word;\n                $max_len\
    \ = $counts['b'];\n            }\n        } else if ($counts['b'] > $counts['c'])\
    \ {\n            $max = $word;\n            $max_len = $counts['b'];\n       \
    \ } else {\n            $max = $word;\n            $max_len = $counts['c'];\n\
    \        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n   \
    \ return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"b\" in /tmp/tmp7agzsvvx.php on line 17\n\
    \nWarning: Undefined array key \"b\" in /tmp/tmp7agzsvvx.php on line 18\n\nWarning:\
    \ Undefined array key \"c\" in /tmp/tmp7agzsvvx.php on line 18\n\nWarning: Undefined\
    \ array key \"b\" in /tmp/tmp7agzsvvx.php on line 23\n\nWarning: Undefined array\
    \ key \"a\" in /tmp/tmp7agzsvvx.php on line 17\n\nWarning: Undefined array key\
    \ \"b\" in /tmp/tmp7agzsvvx.php on line 17\n\nWarning: Undefined array key \"\
    b\" in /tmp/tmp7agzsvvx.php on line 25\n\nWarning: Undefined array key \"c\" in\
    \ /tmp/tmp7agzsvvx.php on line 25\n\nWarning: Undefined array key \"c\" in /tmp/tmp7agzsvvx.php\
    \ on line 30\n\nWarning: Undefined array key \"a\" in /tmp/tmp7agzsvvx.php on\
    \ line 17\n\nWarning: Undefined array key \"b\" in /tmp/tmp7agzsvvx.php on line\
    \ 17\n\nWarning: Undefined array key \"b\" in /tmp/tmp7agzsvvx.php on line 25\n\
    \nWarning: Undefined array key \"c\" in /tmp/tmp7agzsvvx.php on line 25\n\nWarning:\
    \ Undefined array key \"c\" in /tmp/tmp7agzsvvx.php on line 30\n\nWarning: Undefined\
    \ array key \"b\" in /tmp/tmp7agzsvvx.php on line 17\n\nWarning: Undefined array\
    \ key \"b\" in /tmp/tmp7agzsvvx.php on line 18\n\nWarning: Undefined array key\
    \ \"c\" in /tmp/tmp7agzsvvx.php on line 18\n\nWarning: Undefined array key \"\
    b\" in /tmp/tmp7agzsvvx.php on line 23\n\nWarning: Undefined array key \"b\" in\
    \ /tmp/tmp7agzsvvx.php on line 17\n\nWarning: Undefined array key \"b\" in /tmp/tmp7agzsvvx.php\
    \ on line 18\n\nWarning: Undefined array key \"c\" in /tmp/tmp7agzsvvx.php on\
    \ line 18\n\nWarning: Undefined array key \"b\" in /tmp/tmp7agzsvvx.php on line\
    \ 23\n\nWarning: Undefined array key \"b\" in /tmp/tmp7agzsvvx.php on line 17\n\
    \nWarning: Undefined array key \"b\" in /tmp/tmp7agzsvvx.php on line 18\n\nWarning:\
    \ Undefined array key \"c\" in /tmp/tmp7agzsvvx.php on line 18\n\nWarning: Undefined\
    \ array key \"b\" in /tmp/tmp7agzsvvx.php on line 23\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp7agzsvvx.php:42\nStack trace:\n#0 /tmp/tmp7agzsvvx.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp7agzsvvx.php on line 42\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    foreach ($words as $word)\
    \ {\n        $char = array();\n        $unique = array_count_values(str_split($word));\n\
    \        arsort($unique);\n        $max = current($unique);\n        $count =\
    \ count($unique);\n        if ($count > $max) {\n            $max = $count;\n\
    \            $word = $word;\n        }\n    }\n    return $word;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppk6fxi36.php:33\n\
    Stack trace:\n#0 /tmp/tmppk6fxi36.php(44): test()\n#1 {main}\n  thrown in /tmp/tmppk6fxi36.php\
    \ on line 33\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Write your implementation\
    \ here\n\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo162fldl.php:21\n\
    Stack trace:\n#0 /tmp/tmpo162fldl.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpo162fldl.php\
    \ on line 21\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = $words[0];\n \
    \   foreach ($words as $word) {\n        $c = count($word);\n        if ($c >\
    \ strlen($max))\n            $max = $word;\n    }\n    return $max;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmpo1eiylbz.php:15\nStack trace:\n\
    #0 /tmp/tmpo1eiylbz.php(23): find_max(Array)\n#1 /tmp/tmpo1eiylbz.php(27): candidate(Array)\n\
    #2 /tmp/tmpo1eiylbz.php(39): test()\n#3 {main}\n  thrown in /tmp/tmpo1eiylbz.php\
    \ on line 15\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $arr = array();\n   \
    \ foreach ($words as $word) {\n        if (!isset($arr[$word])) {\n          \
    \  $arr[$word] = 1;\n        } else {\n            $arr[$word]++;\n        }\n\
    \    }\n    arsort($arr);\n    return $arr[0];\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp0pf_9mr2.php on line 22\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp0pf_9mr2.php:30\nStack\
    \ trace:\n#0 /tmp/tmp0pf_9mr2.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0pf_9mr2.php\
    \ on line 30\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $unique_count = array_count_values($words);\n\
    \    $max_count = max($unique_count);\n    foreach ($unique_count as $k => $v)\
    \ {\n        if ($v == $max_count) {\n            return $words[$k];\n       \
    \ }\n    }\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"name\" in /tmp/tmp8ibrke0c.php on line\
    \ 17\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ibrke0c.php:26\n\
    Stack trace:\n#0 /tmp/tmp8ibrke0c.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8ibrke0c.php\
    \ on line 26\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $freq = array_count_values($words);\n\
    \    $max = $freq[0];\n    foreach ($freq as $key => $value) {\n        if ($value\
    \ == $max) {\n            $max = $key;\n        }\n    }\n    return $words[$max];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\nUsing array_count_values you can do it\
    \ as:\n<code>\n<?php\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp8t73d5fv.php
    on line 22

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // initialize count to\
    \ zero\n    $count = 0;\n    // initialize max to zero\n    $max = 0;\n    //\
    \ initialize max to zero\n    $maxWord = \"\";\n    // traverse through each word\n\
    \    foreach ($words as $word) {\n        // increase count by 1\n        $count\
    \ += 1;\n        // compare the count to the maximum\n        if ($count > $max)\
    \ {\n            // if the count is greater than maximum\n            // assign\
    \ count to maximum and keep the word with maximum count\n            $max = $count;\n\
    \            $maxWord = $word;\n        }\n    }\n    // return the maximum word\n\
    \    return $maxWord;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpas2_7bfx.php:41\n\
    Stack trace:\n#0 /tmp/tmpas2_7bfx.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpas2_7bfx.php\
    \ on line 41\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // initialize variables\n\
    \    $max_lenght = 0;\n    $word_found = null;\n    $max_char_count = 0;\n\n \
    \   // loop through the words\n    foreach ($words as $word) {\n        // get\
    \ the word length\n        $word_len = strlen($word);\n\n        // check word\
    \ length\n        if ($word_len > $max_lenght) {\n            $max_lenght = $word_len;\n\
    \            $word_found = $word;\n        } else if ($word_len == $max_lenght)\
    \ {\n            // if the word is the same length as the previous one\n     \
    \       // check how many unique characters it has\n            $char_count_array\
    \ = array_count_values(str_split($word));\n\n            // if there is more then\
    \ one unique character\n            // choose the one which comes first\n    \
    \        if (count($char_count_array) > 1) {\n                ksort($char_count_array);\n\
    \n                $max_char_count = end($char_count_array);\n            } else\
    \ {\n                // there is only one unique character\n                //\
    \ and it's the most frequent one\n                $max_char_count = end($char_count_array);\n\
    \            }\n        }\n    }\n\n    // return the most frequent word\n   \
    \ return $word_found;\n}\n</code>\n<|/ a dscore=0 tags=php,arrays |>\n<| c |>\n\
    This only works for single character words. Try running it on this array: `array(\"\
    name\", \"of\", \"string\", \"and\", \"game\")` and it will not return the correct\
    \ output.\n<|/ c |>\n<| c |>\nPlease read the question again: *\"Return words\
    \ which have maximum number of unique characters\"*.\n<|/ c |>\n<| c |>\nOh, sorry,\
    \ didn't see that. I just assumed OP meant \"word\" instead of \"character\" because\
    \ that's how I read it.\n<|/ c |>\n<| c |>\n: Thank you for pointing that out,\
    \ I've updated my answer accordingly.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    \nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp5m_mmv02.php
    on line 49

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = $words[0];\n \
    \   $count = 0;\n    foreach($words as $word) {\n        if (count(array_count_values(str_split($word)))\
    \ > $count) {\n            $max = strtolower($word);\n            $count  = count(array_count_values(str_split($word)));\n\
    \        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n   \
    \ return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkf9ol83w.php:30\n\
    Stack trace:\n#0 /tmp/tmpkf9ol83w.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpkf9ol83w.php\
    \ on line 30\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_value = count($words);\n\
    \  $max_key = null;\n  foreach ($words as $key => $value) {\n    if ($value ==\
    \ $max_value) {\n      $max_key = $key;\n    }\n  }\n  return $words[$max_key];\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,algorithm dscore=2 |>\nYou can use\
    \ array_count_values and find the maximum.\n<code>\n$words = array(\"name\",\"\
    of\",\"string\");\n$count = array_count_values($words);\n$max = max($count);\n\
    </code>\n<|/ a |>\n<| c |>\nAnd if there are two or more words with the same max\
    \ count? :)\n<|/ c |>\n<| c |>\nthen sort by values and pick the first one as\
    \ the result\n<|/ c |>\n<| a dscore=0 |>\nTry this function\n<code>\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpanov17tk.php
    on line 22

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0; // Maximum\
    \ number of unique characters\n    $result = '.'; // Word with maximum number\
    \ of unique characters\n    foreach ($words as $word) {\n        $unique_chars\
    \ = countUniqueChars($word);\n        if ($unique_chars > $max) {\n          \
    \  $max = $unique_chars;\n            $result = $word;\n        }\n    }\n   \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function countUniqueChars()\
    \ in /tmp/tmppjt5s9ux.php:16\nStack trace:\n#0 /tmp/tmppjt5s9ux.php(26): find_max(Array)\n\
    #1 /tmp/tmppjt5s9ux.php(30): candidate(Array)\n#2 /tmp/tmppjt5s9ux.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmppjt5s9ux.php on line 16\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  // Initialize a variable\
    \ to store the number of unique characters.\n  $num_chars = 0;\n  // Initialize\
    \ a variable to store the most frequent word.\n  $word = \"\";\n  // Iterate over\
    \ the array elements.\n  for ($i = 0; $i < count($words); $i++) {\n    // Get\
    \ the number of unique characters in the current word.\n    $num_chars += substr_count($words[$i],\
    \ \".\") + 1;\n    // If the number of unique characters has increased since last\
    \ word,\n    // then update the most frequent word.\n    if ($num_chars > $words[$i])\
    \ {\n      $word = $words[$i];\n    }\n  }\n  return $word;\n}\n</code>\n<|/ a\
    \ tags=arrays,php,sorting dscore=1 |>\n<| c |>\nI think he wants to get words\
    \ with max unique chars regardless of the order\n<|/ c |>\n<| c |>\nYes, I see\
    \ that now. I've updated the answer to accommodate that.\n<|/ c |>\n<| a tags=arrays,php,sorting\
    \ |>\n<code>\n$words = array(\n    'abbc',\n    'abcd',\n    'abc',\n    'bb',\n\
    \    'cc',\n    'c',\n    '',\n    'abcd',\n    'abc',\n    'aabc',\n    'abcd',\n\
    \    'abbc',\n    'abc'\n);\n$count = array();\nforeach($words as $word)\n   \
    \ $count[$word] = substr_count($word, '.');\n\nasort($count);\n\nvar_dump(array_shift($count));\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nI think he wants to get words with max unique\
    \ chars regardless of the order\n<|/ c |>\n<| c |>\nThanks for your feedback!\n\
    <|/ c |>\n<| c |>\nThanks for your feedback! Your code works but there is another\
    \ case. Suppose I have an array with 'aaaaaa', 'bb','cc'. When I put this array\
    \ into your code the output would be 'abcd'. I want it to return 'aaaaaa'\n<|/\
    \ c |>\n<| c |>\n, just remove the asort() function call\n<|/ c |>\n<| c |>\n\
    Sorry I wasn't clear enough. I mean the output should be 'aaaaaa' because I want\
    \ the one with more unique characters first and the one with fewer unique characters\
    \ last.\n<|/ c |>\n<| a tags=arrays,php,sorting |>\nWhat you are asking is quite\
    \ similar to what people do in their dictionary to find the longest word in the\
    \ \nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp848rlzvc.php
    on line 29

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $count = array_count_values($words);\n\
    \    ksort($count);\n    $biggest = key($count);\n    foreach ($count as $key\
    \ => $value) {\n        if ($value == $biggest) {\n            return $key;\n\
    \        }\n    }\n    return $biggest;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\nYou can use PHP's preg_match_all to find the word with maximum number of\
    \ occurrences. \n<code>\n$string = \"Join me with the Join me with the Join me\
    \ with the Join me with the Join me with the Join me with the Join me with the\
    \ Join me with the Join me with the Join me with the Join me with the Join me\
    \ with the Join me with the Join me with the Join me with the Join me with the\
    \ Join me with the Join me with the Join me with the Join me with the Join me\
    \ with the Join me with the Join me with the Join me with the Join me with the\
    \ Join me with the Join me with the Join me with the Join me with the Join me\
    \ with the Join me with the Join me with the Join me with the Join me with the\
    \ Join me with the Join me with the Join me with the Join me with the Join me\
    \ with the Join me with the Join me with the Join me with the Join me with the\
    \ Join me with the Join me with the Join me with the Join me with the Join me\
    \ with the Join me with the Join me with the Join me with the Join me with the\
    \ Join me with the Join me with the Join me with the Join me with the Join me\
    \ with the Join me with the Join me with the Join me with the Join me with the\
    \ Join me with the Join me with the Join me with the Join me with the Join me\
    \ with the Join me with the Join me with the Join me with the Join me with the\
    \ Join me with the Join me with the Join me with the Join me with the Join me\
    \ with the Join me with the Join me with the Join me with the Join me with the\
    \ Join me with the Join me with the Join me with the Join me with the Join me\
    \ with the Join me with the Join me with the Join me with the Join me with the\
    \ Join me with the Join me with the Join me with the Join me with the Join me\
    \ with the Join me with the Join me with the Join me with the Join me with the\
    \ Join me with the Join me with the Join me with the Join me with the Join me\
    \ with the Join me with the Join me with the Jo\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpmaa9_n8j.php
    on line 23

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $count = array_count_values($words);\n\
    \  $max = -1;\n  $key = '';\n  foreach ($count as $w => $c) {\n    if ($c > $max)\
    \ {\n      $max = $c;\n      $key = $w;\n    }\n  }\n  return $key;\n}\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptrqd4w3w.php:29\n\
    Stack trace:\n#0 /tmp/tmptrqd4w3w.php(41): test()\n#1 {main}\n  thrown in /tmp/tmptrqd4w3w.php\
    \ on line 29\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Code here\n    $result\
    \ = \"\";\n    $lengths = array();\n    foreach($words as $word) {\n        $words\
    \ = str_split($word);\n        $word_length = count($words);\n        $lengths[$word_length]\
    \ = isset($lengths[$word_length]) ? $lengths[$word_length]+1 : 1;\n        $length\
    \ = max($lengths[$word_length]);\n        $result = ($word_length == $length)\
    \ ? $word : $result;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: max(): Argument #1 ($value) must be\
    \ of type array, int given in /tmp/tmpqybaaufm.php:20\nStack trace:\n#0 /tmp/tmpqybaaufm.php(20):\
    \ max(1)\n#1 /tmp/tmpqybaaufm.php(27): find_max(Array)\n#2 /tmp/tmpqybaaufm.php(31):\
    \ candidate(Array)\n#3 /tmp/tmpqybaaufm.php(43): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmpqybaaufm.php on line 20\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    sort($words);\n    $max_count\
    \ = 0;\n    $max_word = $words[0];\n    foreach ($words as $word) {\n        $count\
    \ = count($word);\n        if ($max_count < $count) {\n            $max_count\
    \ = $count;\n            $max_word = $word;\n        }\n    }\n    return $max_word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmp35ixu1mc.php:17\nStack trace:\n\
    #0 /tmp/tmp35ixu1mc.php(27): find_max(Array)\n#1 /tmp/tmp35ixu1mc.php(31): candidate(Array)\n\
    #2 /tmp/tmp35ixu1mc.php(43): test()\n#3 {main}\n  thrown in /tmp/tmp35ixu1mc.php\
    \ on line 17\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $counter = array();\n\
    \    foreach ($words as $word) {\n        $counter[$word] = 0;\n    }\n    foreach\
    \ ($words as $word) {\n        $counter[$word]++;\n    }\n    foreach ($words\
    \ as $word) {\n        if (!isset($counter[$word])) {\n            return $word;\n\
    \        }\n    }\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nGreat idea with the\
    \ counter. My first solution used a map with strings as keys and counts as values,\
    \ but your solution is more elegant\n<|/ c |>\n<| c |>\nI like this answer as\
    \ well as it allows me to keep the original order of the words. Thank you.\n<|/\
    \ c |>\n<| c |>\nThis doesn't return the correct answer when an array with two\
    \ of the same words comes in (e.g., `find_max(array('hello', 'hello'))`).\n<|/\
    \ c |>\n<| c |>\nAgree with, the solution by Nick works better - just tested it\
    \ - it returns the first word where all the counts are the same.\n<|/ c |>\n<|\
    \ c |>\nYou just need a `break;` inside the `foreach` loop to return the first\
    \ result rather than just looping through the rest of the array.\n<|/ c |>\n<|\
    \ a dscore=3 |>\nAnother way to accomplish this with PHP 7.\n<code>\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp98yvhgbt.php
    on line 26

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $num_uniq = array();\n\
    \n    foreach ($words as $word) {\n        $num_uniq[$word] = 0;\n\n        foreach\
    \ ($words as $other_word) {\n            if ($word !== $other_word &&\n      \
    \          strlen($word) > strlen($other_word) &&\n                strpos($word,\
    \ $other_word) === false\n            ) {\n                $num_uniq[$word]++;\n\
    \            }\n        }\n    }\n\n    arsort($num_uniq);\n\n    return key($num_uniq);\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 |>\nHere is a solution using PHP preg_replace\
    \ and array_count_values():\n<code>\n$wordsArr = array(\"name\", \"of\", \"string\"\
    );\n$wordsStr = implode(\" \", $wordsArr);\n\n$wordsStr = preg_replace(\"/\\s/\"\
    , \" \", $wordsStr);\n$wordsArr = explode(\" \", $wordsStr);\n$wordsArr = array_filter($wordsArr,\
    \ \"strlen\");\n$wordsArr = array_count_values($wordsArr);\n\n$maxKey = array_search(max($wordsArr),\
    \ $wordsArr);\n$maxKey = $wordsArr[$maxKey];\n\necho \"The word with maximum number\
    \ of unique characters is {$maxKey}\";\n</code>\n<|/ a tags=php,arrays |>\n<|\
    \ c |>\nYeah but i need to find the word that has maximum number of unique characters.\n\
    <|/ c |>\n<| c |>\nI have updated my answer to also find the word with maximum\
    \ number of unique characters.\n<|/ c |>\n<| c |>\nI guess i didn't explained\
    \ well. but i want the first word that has maximum number of unique characters.\n\
    <|/ c |>\n<| c |>\nThen you can simply use `array_search` in the updated answer.\n\
    <|/ c |>\n<| a |>\nThis should do it. It should be O(n) time complexity.\n<code>\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp1auy2e_d.php
    on line 32

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $wordCount = array_count_values($words);\n\
    \    $sortedWords = array_keys($wordCount);\n    asort($sortedWords);\n    return\
    \ $sortedWords[0];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzgcpy4j6.php:24\n\
    Stack trace:\n#0 /tmp/tmpzgcpy4j6.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpzgcpy4j6.php\
    \ on line 24\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Write your code here\n\
    \    $chars = array_count_values($words);\n    arsort($chars);\n    $vals = array_keys($chars);\n\
    \    return $vals[0];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiucij3gr.php:25\n\
    Stack trace:\n#0 /tmp/tmpiucij3gr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpiucij3gr.php\
    \ on line 25\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Your code here\n}\n\
    </cell>\n<cell>\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpus28vct9.php
    on line 15

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $unique_characters =\
    \ [];\n    foreach ($words as $word) {\n        $unique_characters[] = count($word);\n\
    \    }\n    return $unique_characters[array_search(max($unique_characters), $unique_characters)];\n\
    }\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmpqrad1xrl.php:15\nStack trace:\n\
    #0 /tmp/tmpqrad1xrl.php(20): find_max(Array)\n#1 /tmp/tmpqrad1xrl.php(24): candidate(Array)\n\
    #2 /tmp/tmpqrad1xrl.php(36): test()\n#3 {main}\n  thrown in /tmp/tmpqrad1xrl.php\
    \ on line 15\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $word_count = array_count_values($words);\n\
    \    arsort($word_count);\n    return key($word_count);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis code will also not work for \"aardvark\" and \"airplane\"\
    . As those two strings have only one character that occurs in both strings. It\
    \ will always return \"aardvark\" as string. Which is not correct.\n<|/ c |>\n\
    <| a |>\n<code>\n<?php\n\nclass UniqueCount{\n    public $word;\n    public $count;\n\
    \    public function __construct($word){\n        $this->word = $word;\n     \
    \   $this->count = 1;\n    }\n    public function __toString(){\n        if($this->count\
    \ > 1){\n            return $this->word;\n        }else{\n            return '';\n\
    \        }\n    }\n    public function increment(){\n        $this->count++;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpg7pdnfbn.php
    on line 17

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 1;\n    $found\
    \ = false;\n    foreach ($words as $word) {\n        if ($words[$max] <> $word)\
    \ {\n            $found = true;\n            $max = $words[$max];\n        } elseif\
    \ ($words[$max] == $word) {\n            $max++;\n        }\n    }\n    return\
    \ $found ? $max : $words[0];\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"of\" in /tmp/tmp1n_rlh0_.php on line 16\n\
    \nWarning: Undefined array key \"of\" in /tmp/tmp1n_rlh0_.php on line 18\n\nWarning:\
    \ Undefined array key \"\" in /tmp/tmp1n_rlh0_.php on line 16\n\nWarning: Undefined\
    \ array key \"\" in /tmp/tmp1n_rlh0_.php on line 18\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp1n_rlh0_.php:30\nStack trace:\n#0 /tmp/tmp1n_rlh0_.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1n_rlh0_.php on line 30\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_count = -1; // start\
    \ with impossible count\n  $best_word = ''; // start with impossible word\n  foreach\
    \ ($words as $word) {\n    // calculate the word's count and whether it is the\
    \ best so far\n    $count = count($word);\n    if ($max_count < $count) {\n  \
    \    $max_count = $count;\n      $best_word = $word;\n    } else if ($max_count\
    \ === $count) {\n      $best_word = $word;\n    }\n  }\n  return $best_word;\n\
    }\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmppz3ndxbk.php:17\nStack trace:\n\
    #0 /tmp/tmppz3ndxbk.php(28): find_max(Array)\n#1 /tmp/tmppz3ndxbk.php(32): candidate(Array)\n\
    #2 /tmp/tmppz3ndxbk.php(44): test()\n#3 {main}\n  thrown in /tmp/tmppz3ndxbk.php\
    \ on line 17\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = null;\n    $count\
    \ = 0;\n    foreach($words as $word) {\n        $count++;\n        $length = strlen($word);\n\
    \        $max = isset($max)? max($max, $count, $length): $count;\n    }\n    return\
    \ $max;\n}\n\n$words = [\n    'game',\n    'enam',\n    'of',\n    'string',\n\
    \    'name',\n    'of',\n    'string',\n    'string'\n];\n$max = find_max($words);\n\
    $count = $words[array_search($max, $words)];\necho \"max count {$max}, word count\
    \ {$count}\\n\";\n</code>\n<|/ a dscore=0 |>\n<| c |>\nthank you so much, your\
    \ solution is very similar to mine, with some little difference, i made a little\
    \ modification in my code to compare the results of both your solution. here is\
    \ my code:\n\n$words = array('game', 'enam', 'of', 'string', 'name', 'of', 'string',\
    \ 'string', 'string');\n$max = find_max($words);\n$count = $words[array_search($max,\
    \ $words)];\necho \"max count {$max}, word count {$count}\\n\";\n\ni think i found\
    \ my mistake. i forgot that i need to include all the words in my array (because\
    \ they contain 'name' for example) and also in the second parameter i need to\
    \ use array_search to compare the word with the array (because array_search can\
    \ search any element in the array). thanks again :)\n<|/ c |>\n<| c |>\nIf you\
    \ want a unique function you can find it [here](http://stackoverflow.com/a/14078778/6805601).\n\
    <|/ c |>\n<| a tags=php,word,arrays,count,string |>\nYour code is not working\
    \ because you are using $count in your array_search and $max variable in both\
    \ array_search and max function and that leads to wrong result.\nYou can use something\
    \ like that:\n<code>\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpi2yet2jq.php
    on line 36

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    return $words[count($words)\
    \ - 1];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_9b_bndm.php:22\n\
    Stack trace:\n#0 /tmp/tmp_9b_bndm.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp_9b_bndm.php\
    \ on line 22\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $words = array_count_values($words);\n\
    \  $sorted_keys = array_keys($words);\n  arsort($sorted_keys);\n  $max_key = array_pop($sorted_keys);\n\
    \  foreach ($sorted_keys as $key => $val) {\n    if ($val == $max_key) {\n   \
    \   return $words[$key];\n    }\n  }\n}\n</code>\n<|/ a dscore=0 tags=sorting,arrays,php\
    \ |>\n<| c |>\nI added a comment in the code where it says \"// Write a function\
    \ that accepts an array of strings.\"\n<|/ c |>\n<| c |>\nThe question is about\
    \ string array, so I did not include anything about sorting array values.\n<|/\
    \ c |>\n<| c |>\nMy point was that if you wanted to sort an array of strings based\
    \ on the occurrence counts you could use array_count_values to do that for you\
    \ instead of writing a custom function.\n<|/ c |>\n<| c |>\nIf you read my comment\
    \ carefully, I said \"// Write a function that accepts an array of strings\".\
    \ Not about sorting array values.\n<|/ c |>\n<| a dscore=0 tags=sorting,arrays,php\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp523q3x5_.php
    on line 23

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Write your code here\n\
    \n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbcqumuck.php:22\n\
    Stack trace:\n#0 /tmp/tmpbcqumuck.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbcqumuck.php\
    \ on line 22\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    sort($words);\n    $counts\
    \ = [];\n    $word = null;\n    foreach ($words as $word) {\n        if (isset($counts[$word]))\
    \ {\n            $counts[$word]++;\n        }\n        else {\n            $counts[$word]\
    \ = 1;\n        }\n    }\n    foreach ($counts as $count => $word) {\n       \
    \ if ($count > count($words)) {\n            $word = reset($counts);\n       \
    \     break;\n        }\n    }\n    return $word;\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfv6wzga9.php:37\n\
    Stack trace:\n#0 /tmp/tmpfv6wzga9.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpfv6wzga9.php\
    \ on line 37\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    sort($words);\n    $count\
    \ = array_count_values($words);\n    $max = $words[0];\n    for ($i = 1; $i <\
    \ count($words); $i++) {\n        if ($count[$words[$i]] > $count[$max]) {\n \
    \           $max = $words[$i];\n        }\n    }\n    return $max;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj0bxfdvc.php:29\n\
    Stack trace:\n#0 /tmp/tmpj0bxfdvc.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpj0bxfdvc.php\
    \ on line 29\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $maxLenght = 0;\n  $word\
    \ = \"\";\n  foreach ($words as $w) {\n    $wordLenght = count($w);\n    if ($wordLenght\
    \ > $maxLenght) {\n      $maxLenght = $wordLenght;\n      $word = $w;\n    }\n\
    \  }\n  sort($words);\n  foreach ($words as $w) {\n    $words[$i] = substr($w,\
    \ 0, $maxLenght);\n  }\n  return $words[0];\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmpfrnjtq6g.php:16\nStack trace:\n\
    #0 /tmp/tmpfrnjtq6g.php(30): find_max(Array)\n#1 /tmp/tmpfrnjtq6g.php(34): candidate(Array)\n\
    #2 /tmp/tmpfrnjtq6g.php(46): test()\n#3 {main}\n  thrown in /tmp/tmpfrnjtq6g.php\
    \ on line 16\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_chars = array();\n\
    \  foreach($words as $word) {\n    $chars = count_chars($word);\n    $char = max($chars);\n\
    \    $max_chars[$char] = $chars;\n  }\n  ksort($max_chars);\n  return key($max_chars);\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsie2fox.php:28\n\
    Stack trace:\n#0 /tmp/tmpbsie2fox.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpbsie2fox.php\
    \ on line 28\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $word_count = array_count_values($words);\n\
    \    arsort($word_count);\n    $max = key($word_count);\n    $index = 0;\n   \
    \ foreach ($word_count as $key => $value) {\n        if ($value > $word_count[$max])\
    \ {\n            $max = $key;\n            $index = 1;\n        }\n        if\
    \ ($word_count[$max] == $value) {\n            $index = 0;\n        }\n    }\n\
    \    return $words[$max];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"name\" in /tmp/tmpge0hvwd3.php on line\
    \ 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpge0hvwd3.php:34\n\
    Stack trace:\n#0 /tmp/tmpge0hvwd3.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpge0hvwd3.php\
    \ on line 34\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // code here\n}\n</cell>\n\
    <text>\nReturn Phase: Write a function to get the longest common prefix of two\
    \ given strings.\n\n</text>\n<cell>\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpnyuka906.php
    on line 15

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = array();\n   \
    \ $i = 0;\n    $count_array = [];\n    foreach ($words as $word) {\n        if\
    \ (!array_key_exists($word, $count_array)) {\n            $count_array[$word]\
    \ = 0;\n        }\n        $count_array[$word]++;\n    }\n    foreach ($count_array\
    \ as $word => $count) {\n        if ($count > 1) {\n            $max[$i] = $word;\n\
    \            array_push($max, $word);\n            $i++;\n        }\n    }\n \
    \   if (count($max) > 1) {\n        $max = min($max);\n    }\n    return $max;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0y5sw26h.php:40\n\
    Stack trace:\n#0 /tmp/tmp0y5sw26h.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp0y5sw26h.php\
    \ on line 40\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $result = \"\";\n   \
    \ foreach($words as $word) {\n        $tmp = \"\";\n        $count = 0;\n    \
    \    for($i = 0; $i < strlen($word); $i++) {\n            $tmp = substr($word,\
    \ $i, 1) . substr($tmp, strlen($tmp), 1);\n            $count++;\n        }\n\
    \        $tmp =  $tmp . $word;\n        if($count > strlen($result)) {\n     \
    \       $result = $tmp;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpanywby8o.php:33\n\
    Stack trace:\n#0 /tmp/tmpanywby8o.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpanywby8o.php\
    \ on line 33\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $word_count = array_count_values($words);\n\
    \    arsort($word_count);\n    return key($word_count);\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwzzdxtiv.php:23\n\
    Stack trace:\n#0 /tmp/tmpwzzdxtiv.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpwzzdxtiv.php\
    \ on line 23\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_count = -1;\n  foreach\
    \ ($words as $word) {\n    $count = count($word);\n    if ($max_count < $count)\
    \ {\n      $max_count = $count;\n      $max_word = $word;\n    }\n  }\n  return\
    \ $max_word;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 tags=arrays,php |>\n\
    Here's another solution using array_count_values():\n<code>\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp4sfr11q2.php
    on line 23

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  // Your code here\n}\n\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfayiesr.php:21\n\
    Stack trace:\n#0 /tmp/tmphfayiesr.php(33): test()\n#1 {main}\n  thrown in /tmp/tmphfayiesr.php\
    \ on line 21\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $count = array();\n\n \
    \ foreach($words as $word) {\n    if(!isset($count[$word])) {\n      $count[$word]\
    \ = 0;\n    }\n\n    $count[$word]++;\n  }\n\n  ksort($count);\n\n  return key($count);\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1uoe760e.php:33\n\
    Stack trace:\n#0 /tmp/tmp1uoe760e.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp1uoe760e.php\
    \ on line 33\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_len = -1; // The maximum\
    \ number that a string has in unique characters.\n  $max_len_index; // Index of\
    \ the string that has maximum number of unique characters.\n  foreach($words as\
    \ $index => $word) {\n    // Count the number of unique characters in the current\
    \ string.\n    $unique_count = count_unique_chars($word);\n    // If this string\
    \ doesn't have maximum number of unique characters, continue.\n    if($unique_count\
    \ != $max_len) {\n      continue;\n    }\n    // If the number of unique characters\
    \ is equal to the maximum number of\n    // unique characters, return this string.\n\
    \    if($unique_count == $max_len) {\n      $max_len_index = $index;\n      $max_len\
    \ = $unique_count;\n    }\n  }\n  return $words[$max_len_index];\n}\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpdvjd2y5l.php:17\nStack trace:\n#0 /tmp/tmpdvjd2y5l.php(32): find_max(Array)\n\
    #1 /tmp/tmpdvjd2y5l.php(36): candidate(Array)\n#2 /tmp/tmpdvjd2y5l.php(48): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdvjd2y5l.php on line 17\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = array();\n   \
    \ $unique = array();\n    foreach ($words as $word) {\n        $unique[$word]\
    \ = 0;\n    }\n    $lengths = array_count_values($words);\n    foreach ($lengths\
    \ as $length => $count) {\n        $length = abs($length);\n        if (isset($unique[$length]))\
    \ {\n            $unique[$length] += $count;\n        } else {\n            $unique[$length]\
    \ = $count;\n        }\n    }\n    $highest = null;\n    $highestKey = array_search(max($unique),\
    \ $unique);\n    if ($highestKey) {\n        $highestKey = $unique[$highestKey];\n\
    \        $highest = $words[$highestKey];\n    }\n    foreach ($unique as $length\
    \ => $count) {\n        if ($count === $highestKey) {\n            $highest =\
    \ $words[$count];\n        }\n    }\n    return $highest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: abs(): Argument #1 ($num) must be of\
    \ type int|float, string given in /tmp/tmpcx6eg9do.php:20\nStack trace:\n#0 /tmp/tmpcx6eg9do.php(20):\
    \ abs('name')\n#1 /tmp/tmpcx6eg9do.php(42): find_max(Array)\n#2 /tmp/tmpcx6eg9do.php(46):\
    \ candidate(Array)\n#3 /tmp/tmpcx6eg9do.php(58): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmpcx6eg9do.php on line 20\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max_unique = array();\n\
    \  $highest_nr = array();\n  foreach ($words as $word) {\n    // Count the number\
    \ of unique chars in each string.\n    $nr = countUniqueChars($word);\n    //\
    \ If the number of unique chars has the max number in the array,\n    // store\
    \ the words with the highest number of unique chars.\n    if ($nr == $max_unique[$nr\
    \ - 1]) {\n      $highest_nr[$nr] = $word;\n    }\n    // If no word has a max\
    \ number of unique chars, store the word with the\n    // highest number of unique\
    \ chars.\n    elseif ($nr > $max_unique[$nr - 1]) {\n      $max_unique[$nr] =\
    \ $word;\n    }\n  }\n  if (count($highest_nr) == 1) {\n    return $highest_nr[0];\n\
    \  }\n  // Otherwise, return the word with the lowest number of unique chars.\n\
    \  return $max_unique[array_search($max_unique, array_reverse($highest_nr))];\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function countUniqueChars()\
    \ in /tmp/tmphxsg9dxe.php:17\nStack trace:\n#0 /tmp/tmphxsg9dxe.php(37): find_max(Array)\n\
    #1 /tmp/tmphxsg9dxe.php(41): candidate(Array)\n#2 /tmp/tmphxsg9dxe.php(53): test()\n\
    #3 {main}\n  thrown in /tmp/tmphxsg9dxe.php on line 17\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Only change code below\
    \ this line\n    \n    \n    return $words[0];\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7vqfkp_3.php:24\n\
    Stack trace:\n#0 /tmp/tmp7vqfkp_3.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp7vqfkp_3.php\
    \ on line 24\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $max = 0;\n  $word = \"\
    \";\n\n  foreach ($words as $w) {\n    if (strlen($w) > $max) {\n      $max =\
    \ (int) strlen($w);\n      $word = $w;\n    }\n  }\n\n  return $word;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzsxxelre.php:32\n\
    Stack trace:\n#0 /tmp/tmpzsxxelre.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpzsxxelre.php\
    \ on line 32\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = '';\n    $count\
    \ = -1;\n    foreach ($words as $word) {\n        if ($count == 0) {\n       \
    \     $max = $word;\n            $count = 1;\n        } else if ($count > 1) {\n\
    \            if (strlen($max) < strlen($word)) {\n                $max = $word;\n\
    \            }\n        } else if (strlen($word) > strlen($max)) {\n         \
    \   $max = $word;\n            $count = 1;\n        }\n    }\n    return $max;\n\
    }\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkhnpv2el.php:36\n\
    Stack trace:\n#0 /tmp/tmpkhnpv2el.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpkhnpv2el.php\
    \ on line 36\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $chars = array_count_values($words);\n\
    \  $max = max($chars);\n  return $max ? key($chars) : NULL;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 |>\nYou can use a function like that:\n<code>\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpao36clv2.php
    on line 17

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $chars_count = array();\n\
    \  $max = null;\n  foreach ($words as $word) {\n    $count = count($word);\n \
    \   $chars_count[$word] = $count;\n    if (!$max) {\n      $max = $count;\n  \
    \  } elseif ($count > $max) {\n      $max = $count;\n    }\n  }\n  $max_key =\
    \ array_search($max, $chars_count);\n  return $words[$max_key];\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmpt64ktva2.php:16\nStack trace:\n\
    #0 /tmp/tmpt64ktva2.php(28): find_max(Array)\n#1 /tmp/tmpt64ktva2.php(32): candidate(Array)\n\
    #2 /tmp/tmpt64ktva2.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpt64ktva2.php\
    \ on line 16\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Your code here\n \
    \   $unique_words = array_count_values($words);\n    arsort($unique_words);\n\
    \    $word = null;\n    $max_count = 0;\n    $max_word = null;\n    foreach ($unique_words\
    \ as $w => $c) {\n        $cur_count = $c;\n        if ($c > $max_count) {\n \
    \           $word = $w;\n            $max_count = $c;\n        } else if ($c ==\
    \ $max_count) {\n            $word = $w;\n        }\n    }\n\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_xbdyzua.php:38\n\
    Stack trace:\n#0 /tmp/tmp_xbdyzua.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp_xbdyzua.php\
    \ on line 38\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  // Your code here\n}\n\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfayiesr.php:21\n\
    Stack trace:\n#0 /tmp/tmphfayiesr.php(33): test()\n#1 {main}\n  thrown in /tmp/tmphfayiesr.php\
    \ on line 21\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    sort($words);\n    $max_count\
    \ = 1;\n    $best_word = \"\";\n    $best_word_length = strlen($best_word);\n\
    \    for ($i = 0; $i < count($words); $i++) {\n        $char = substr($words[$i],\
    \ 0, 1);\n        $count = substr_count($words[$i], $char);\n        if ($count\
    \ > $max_count) {\n            $best_word = $words[$i];\n            $best_word_length\
    \ = $best_word_length - 1;\n            $max_count = $count;\n        }\n    }\n\
    \    return substr($best_word, 0, $best_word_length);\n}\n</code>\n<|/ a tags=algorithm,php,sorting\
    \ |>\n<| c |>\nI dont think that works, it just puts 1 into the string and only\
    \ returns it.\n<|/ c |>\n<| c |>\nAh my bad I didn't see the need to put in that\
    \ extra function. I will try this out now\n<|/ c |>\n<| c |>\nNice and simple,\
    \ and works great. Just a note to the OP: you may want to change `$best_word =\
    \ $words[$i];` to `$best_word = substr($words[$i], 0, $best_word_length);`. That\
    \ way you can pass it to `substr_count()` without having to recalculate the length\
    \ of `$best_word` every time. Also, your function will fail if the array is empty\
    \ or contains no words that contain unique characters: `find_max(array())` returns\
    \ an empty string, whereas `find_max(array(\"abc\"))` returns `\"abc\"`.\n<|/\
    \ c |>\n<| a tags=algorithm,php,sorting |>\nTry this:\n<code>\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpbqgv84u1.php
    on line 28

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $result = array();\n  $max_chars\
    \ = array();\n  foreach($words as $word) {\n    $words = str_word_count($word);\n\
    \    $words = array_count_values($words);\n    $keys = array_keys($words);\n \
    \   foreach($keys as $key) {\n      if ($words[$key] > $max_chars[$key]) $max_chars[$key]\
    \ = $words[$key];\n    }\n  }\n  foreach($words as $word) {\n    $words = str_word_count($word);\n\
    \    $words = array_count_values($words);\n    $keys = array_keys($words);\n \
    \   foreach($keys as $key) {\n      if ($words[$key] == $max_chars[$key]) $result[]\
    \ = $word;\n    }\n  }\n  return count($result) == 1 ? $result[0] : array_keys($max_chars,\
    \ max($max_chars))[0];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_count_values(): Argument #1 ($array)\
    \ must be of type array, int given in /tmp/tmpz7wecwpx.php:17\nStack trace:\n\
    #0 /tmp/tmpz7wecwpx.php(17): array_count_values(1)\n#1 /tmp/tmpz7wecwpx.php(35):\
    \ find_max(1)\n#2 /tmp/tmpz7wecwpx.php(39): candidate(Array)\n#3 /tmp/tmpz7wecwpx.php(51):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmpz7wecwpx.php on line 17\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $result = array();\n\
    \    foreach ($words as $word) {\n        $result = array_merge($result, find_unique_characters($word));\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function find_unique_characters()\
    \ in /tmp/tmpgngcbyz_.php:15\nStack trace:\n#0 /tmp/tmpgngcbyz_.php(21): find_max(Array)\n\
    #1 /tmp/tmpgngcbyz_.php(25): candidate(Array)\n#2 /tmp/tmpgngcbyz_.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgngcbyz_.php on line 15\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    // Your code here\n}\n\
    \nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfks4dq42.php:21\n\
    Stack trace:\n#0 /tmp/tmpfks4dq42.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpfks4dq42.php\
    \ on line 21\n"
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $result = array();\n\
    \    $max = $number = 0;\n    foreach ($words as $word) {\n        $count = count($word);\n\
    \        if ($count > $number) {\n            $number = $count;\n            $result\
    \ = $word;\n        }\n    }\n    return $result;\n}\n</code>\n<|/ a |>\n<| c\
    \ |>\nI think you made a typo mistake in line 6. Should be `count(array_count_values($words)[$word]);`\
    \ not `count($word);`\n<|/ c |>\n<| a tags=arrays,php |>\nThis might help. It\
    \ counts the letters occurring in the string and returns an array with the most\
    \ frequent letters, in alphabetical order.\n<code>\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpjskq1cdy.php
    on line 24

    '
  timestamp: 1659980014
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings.\n// The array\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\n// >>> find_max(array(\"\
    name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"\
    enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"\
    cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n  $words = array_count_values($words);\n\
    \  arsort($words);\n  $word = key($words);\n  return $word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_9g8usyi.php:24\n\
    Stack trace:\n#0 /tmp/tmp_9g8usyi.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_9g8usyi.php\
    \ on line 24\n"
  timestamp: 1659980014
