language: php
name: HumanEval_91_is_bored
results:
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  $boredom_count\
    \ = 0; // initialise your count\n\n  foreach(explode('.',$S) as $word){ //loop\
    \ through each word\n    if($word[0] == 'I'){ //check if it starts with 'I' word\n\
    \      $boredom_count++; // increment your count by 1\n    }\n  }\n  return $boredom_count;\n\
    }\n</code>\n<|/ a tags=php,html |>\n<| a dscore=1 tags=php,html |>\nThe main problem\
    \ I see here is that your algorithm only checks one word at a time. Consider this:\n\
    <code>\nThe sky is blue.\n</code>\nYour code will only match against the first\
    \ word, and only return 1 (as that's what is_bored will return).\nIn order to\
    \ match a sentence across more than one word, you'll need to explode the string\
    \ into an array of words, and then loop over those words.\n<|/ a |>\n<| a dscore=1\
    \ |>\nThe problem is you aren't doing anything with the exploded string - you're\
    \ just iterating through each word and returning the count.\nInstead, you should\
    \ return the exploded string and then iterate through the array counting the boredoms.\n\
    <code>\n$boredoms = explode(\".\", $sentence);\n$boredom_count = 0;\n\nforeach($boredoms\
    \ as $boredom)\n{\n    if($boredom[0] == 'I')\n    {\n        $boredom_count++;\n\
    \    }\n}\n\nreturn $boredom_count;\n</code>\n<|/ a tags=php,html |>\n<| a tags=php,html\
    \ |>\n<code>\n<?php \n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpmbzd43nb.php
    on line 20

    '
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredoms\
    \ = 0;\n    $wordCount = 0;\n    $words = explode(\".\", $S);\n    foreach ($words\
    \ as $word) {\n        $wordCount += substr_count($word, \"I\");\n    }\n    if\
    \ ($wordCount == 0)\n        $boredoms = 0;\n    else if ($wordCount == 1)\n \
    \       $boredoms = 1;\n    else\n        $boredoms = 2;\n    return $boredoms;\n\
    }\nfunction candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0311rvtl.php:31\n\
    Stack trace:\n#0 /tmp/tmp0311rvtl.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp0311rvtl.php\
    \ on line 31\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredoms\
    \ = array(\"I\",\"you\",\"you're\",\"we\",\"us\",\"our\",\"ours\",\"ourselves\"\
    ,\"you've\",\"you'll\",\"you'd\",\"you'd\",\"you'll\",\"you're\",\"you've\",\"\
    you'll\",\"you'll\",\"you've\",\"you're\",\"you've\",\"you've\",\"you'll\",\"\
    you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"\
    you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"\
    you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"\
    you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"\
    you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"\
    you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"\
    you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"\
    you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"\
    you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"\
    you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"\
    you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"\
    you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"\
    you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"\
    you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"\
    you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"you'll\",\"\
    you'll\",\"you'll\",\"\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Hello", expecting ")" in /tmp/tmpasuk6mqe.php
    on line 17

    '
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $S1=explode(\"\
    . \",$S);\n    $a=0;\n    $a1=0;\n    foreach($S1 as $a) {\n        if (strpos($a,'I')!==false){\n\
    \            $a1+=$a1;\n        }\n    }\n    return $a1;\n}\n$S=\"The sky is\
    \ blue. The sun is shining. I love this weather\";\n$S1=explode(\". \",$S);\n\
    $a=0;\n$a1=0;\nforeach($S1 as $a) {\n    if (strpos($a,'I')!==false){\n      \
    \  $a1+=$a1;\n    }\n}\necho $a1;\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n\
    This is what I came up with:\n<code>\n<?php\nfunction candidate(...$args) {\n\
    \    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp26g3icg0.php
    on line 31

    '
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $tokens\
    \ = explode('.',$S);\n    $word = $tokens[0];\n    $boredoms = 0;\n    for($i=1;$i<count($tokens);$i++)\
    \ {\n        if( $tokens[$i] == \"I\" ) $boredoms++;\n    }\n    return $boredoms;\n\
    }\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpslbbz5pm.php:27\n\
    Stack trace:\n#0 /tmp/tmpslbbz5pm.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpslbbz5pm.php\
    \ on line 27\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredom_words\
    \ = [\"I\"];\n    $boredom_words = array_merge($boredom_words, explode(\".\",\
    \ $S));\n    $boredom_words = array_merge($boredom_words, explode(\"?\", $S));\n\
    \    $boredom_words = array_merge($boredom_words, explode(\"!\", $S));\n    $boredom_words\
    \ = array_unique($boredom_words);\n    $boredom_words[] = '?';\n    $boredom_words[]\
    \ = '!';\n    $boredom_words[] = '!?';\n    $boredom_words[] = '!?!';\n    $boredom_words[]\
    \ = '!?!?!';\n    $boredom_words[] = '!?!?!?!';\n    $boredom_words[] = '!?!?!?!?!';\n\
    \    $boredom_words[] = '!?!?!?!?!?!';\n    $boredom_words[] = '!?!?!?!?!?!?!';\n\
    \    $boredom_words[] = '!?!?!?!?!?!?!?!';\n    $boredom_words[] = '!?!?!?!?!?!?!?!?!';\n\
    \    $boredom_words[] = '!?!?!?!?!?!?!?!?!?!';\n    $boredom_words[] = '!?!?!?!?!?!?!?!?!?!';\n\
    \    $boredom_words[] = '!?!?!?!?!?!?!?!?!?!?!';\n    $boredom_words[] = '!?!?!?!?!?!?!?!?!?!?!?!';\n\
    \    $boredom_words[] = '!?!?!?!?!?!?!?!?!?!?!?!?!';\n    $boredom_words[] = '!?!?!?!?!?!?!?!?!?!?!?!?!?!';\n\
    \    $boredom_words[] = '!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!';\n    $boredom_words[]\
    \ = '!?!?!?!?!\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "!?!?!?!?!" in /tmp/tmppmugxi_k.php
    on line 34

    '
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    global\
    \ $boredom;\n    $boredom = 0;\n    $S = explode('.',$S);\n    foreach ($S as\
    \ $value) {\n        if ($value[0]==\"I\") {\n            $boredom++;\n      \
    \  }\n    }\n    return $boredom;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpegh6htd5.php:28\n\
    Stack trace:\n#0 /tmp/tmpegh6htd5.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpegh6htd5.php\
    \ on line 28\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $count\
    \ = 0;\n    $explode_split = explode('.',$S);\n    foreach ($explode_split as\
    \ $value) {\n        \n        if ($value[0] == 'I') {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpce6qtir5.php:27\n\
    Stack trace:\n#0 /tmp/tmpce6qtir5.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpce6qtir5.php\
    \ on line 27\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredoms\
    \ = explode(\"I\",$S);\n    return count($boredoms);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5z3fde4.php:20\n\
    Stack trace:\n#0 /tmp/tmpn5z3fde4.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpn5z3fde4.php\
    \ on line 20\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $bored\
    \ = 0;\n    foreach (explode(\".\",$S) as $word) {\n        if (preg_match(\"\
    /^I/\",$word)) {\n            $bored++;\n        }\n    }\n    return $bored;\n\
    }\nfunction candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm3fn1wr6.php:25\n\
    Stack trace:\n#0 /tmp/tmpm3fn1wr6.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpm3fn1wr6.php\
    \ on line 25\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredoms\
    \ = explode('.', $S);\n    foreach($boredoms as $word){\n        if (strpos($word,\
    \ 'I') === 0) {\n            return 1;\n        }\n    }\n    return 0;\n}\n\n\
    function candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4_3ra18q.php:26\n\
    Stack trace:\n#0 /tmp/tmp4_3ra18q.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4_3ra18q.php\
    \ on line 26\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  $I\
    \ = \"I\";\n  $F = \"F\";\n  $I = \"I\";\n  $I = \"I\";\n  $J = \"J\";\n  $Q =\
    \ \"Q\";\n  $T = \"T\";\n  $W = \"W\";\n  $T = \"T\";\n  $E = \"E\";\n  $Y = \"\
    Y\";\n  $I = \"I\";\n  \n  $count = 0;\n  \n  $S = preg_replace(\"!\\.\\.!\",\
    \ \" \", $S);\n  $S = preg_replace(\"/(^[\\s\\?!])/\", \" \", $S);\n  $S = preg_replace(\"\
    /([\\s\\?!])$/\", \" \", $S);\n  $S = preg_replace(\"/(^[\\s\\?!])/\", \" \",\
    \ $S);\n  $S = preg_replace(\"/([\\s\\?!])$/\", \" \", $S);\n  $S = preg_replace(\"\
    /(^[\\s\\?!])/\", \" \", $S);\n  $S = preg_replace(\"/([\\s\\?!])$/\", \" \",\
    \ $S);\n  $S = preg_replace(\"/(^[\\s\\?!])/\", \" \", $S);\n  $S = preg_replace(\"\
    /([\\s\\?!])$/\", \" \", $S);\n  $S = preg_replace(\"/(^[\\s\\?!])/\", \" \",\
    \ $S);\n  $S = preg_replace(\"/([\\s\\?!])$/\", \" \", $S);\n  $S = preg_replace(\"\
    /(^[\\s\\?!])/\", \" \", $S);\n  $S = preg_replace(\"/([\\s\\?!])$/\", \" \",\
    \ $S);\n  $S = preg_replace(\"/(^[\\s\\?!])/\", \" \", $S);\n  $S = preg_replace(\"\
    /([\\s\\?!])$/\", \" \", $S);\n  $S = preg_replace(\"/(^[\\s\\?!])/\", \" \",\
    \ $S);\n  $S = preg_replace(\"/([\\s\\?!])$/\", \" \", $S);\n  $S = preg_replace(\"\
    /(^[\\s\\?!])/\", \" \", $S);\n  $S = preg_replace(\"/([\\s\\?!])$/\", \" \",\
    \ $S);\n  $S = preg_replace(\"/(^[\\s\\?!])/\", \" \", $S);\n  $S = preg_replace(\"\
    /([\\s\\?!])$/\", \" \", $\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmp0e1zdwfl.php on line 47

    '
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boreds\
    \ = preg_split('/[\\.?!]/');\n    $count = 0;\n    foreach($boreds as $bored)\
    \ {\n        if (strpos($S, $bored) == 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ArgumentCountError: preg_split() expects at least\
    \ 2 arguments, 1 given in /tmp/tmpm5bnvzcj.php:11\nStack trace:\n#0 /tmp/tmpm5bnvzcj.php(11):\
    \ preg_split('/[\\\\.?!]/')\n#1 /tmp/tmpm5bnvzcj.php(22): is_bored('Hello world')\n\
    #2 /tmp/tmpm5bnvzcj.php(26): candidate('Hello world')\n#3 /tmp/tmpm5bnvzcj.php(34):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmpm5bnvzcj.php on line 11\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    //\
    \ Your code here...\n    $count = 0;\n    foreach (explode('.', $S) as $word)\
    \ {\n        $pos = strpos($word, 'I');\n        if($pos === false) {\n      \
    \      $count++;\n        }\n    }\n    return $count;\n}\n</code>\n<|/ a tags=php,function,if-statement\
    \ dscore=1 |>\n<| c |>\nThanks for that, I really appreciate your help!\n<|/ c\
    \ |>\n<| a |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpkmfayvzi.php
    on line 21

    '
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredoms\
    \ = preg_match('/^[I]/',$S);\n    return $boredoms;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxyg1hjg.php:21\n\
    Stack trace:\n#0 /tmp/tmpbxyg1hjg.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpbxyg1hjg.php\
    \ on line 21\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    return\
    \ preg_match('~^[i.!?]\\s~',$S,$match) ? $match[0] : 0;\n}\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7uub24hm.php:20\n\
    Stack trace:\n#0 /tmp/tmp7uub24hm.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp7uub24hm.php\
    \ on line 20\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $count_boredoms\
    \ = 0;\n    // split the sentence into words by '.', '?' or '!'\n    $sentence_words\
    \ = explode(\".,!?\",$S);\n    foreach($sentence_words as $sentence_word){\n \
    \      if ($sentence_word == 'I') {\n          $count_boredoms++;\n       }\n\
    \    }\n    return $count_boredoms;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg90f68kn.php:29\n\
    Stack trace:\n#0 /tmp/tmpg90f68kn.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpg90f68kn.php\
    \ on line 29\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    //\
    \ your code here\n    $bored = 0;\n    if (strpos($S, 'I') === 0) {\n        $bored\
    \ = 1;\n    }\n    return $bored;\n}\n</code>\n<|/ a tags=php,function dscore=0\
    \ |>\n<| c |>\nThe question asked for \"how to write that function\", your example\
    \ shows how to \"count\" the number of words in a string. Can you explain how\
    \ your answer solves the question?\n<|/ c |>\n<| a dscore=0 tags=php,function\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpz95z5s_3.php
    on line 18

    '
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $count_bored\
    \ = 0;\n    $count_bored_char = 0;\n    $count_bored_dot = 0;\n    $count_bored_question\
    \ = 0;\n    $count_bored_exclamation = 0;\n    $count_bored_newline = 0;\n   \
    \ \n    for ($i=0; $i<strlen($S); $i++){\n        $char = $S[$i];\n        if\
    \ ($char === \".\"){\n            $count_bored_dot++;\n        }else if ($char\
    \ === \"?\"){\n            $count_bored_question++;\n        }else if ($char ===\
    \ \"!\"){\n            $count_bored_exclamation++;\n        }else if ($char ===\
    \ \"\\n\" || $char === \"\\r\"){\n            $count_bored_newline++;\n      \
    \  }else{\n            $count_bored++;\n        }\n    }\n    \n    if ($count_bored\
    \ === 1){\n        return 0;\n    }else if ($count_bored === 2){\n        return\
    \ 1;\n    }else if ($count_bored === 3){\n        return 2;\n    }else if ($count_bored\
    \ === 4){\n        return 3;\n    }else if ($count_bored === 5){\n        return\
    \ 4;\n    }else if ($count_bored === 6){\n        return 5;\n    }else if ($count_bored\
    \ === 7){\n        return 6;\n    }else if ($count_bored === 8){\n        return\
    \ 7;\n    }else if ($count_bored === 9){\n        return 8;\n    }else{\n    \
    \    return 9;\n    }\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi_reyose.php:61\n\
    Stack trace:\n#0 /tmp/tmpi_reyose.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpi_reyose.php\
    \ on line 61\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredoms\
    \ = 0;\n    for ($i = 0; $i < count($S); $i++){\n        $pos = strpos($S, \"\
    I\", $i);\n        if ($pos === false){\n            $boredoms++;\n        }\n\
    \        $i = $pos;\n    }\n    return $boredoms;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmp67y2gyvc.php:12\nStack trace:\n\
    #0 /tmp/tmp67y2gyvc.php(23): is_bored('Hello world')\n#1 /tmp/tmp67y2gyvc.php(27):\
    \ candidate('Hello world')\n#2 /tmp/tmp67y2gyvc.php(35): test()\n#3 {main}\n \
    \ thrown in /tmp/tmp67y2gyvc.php on line 12\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  $boredoms\
    \ = [\n      'I',\n      'me',\n      'my',\n      'mine',\n      'myself',\n\
    \      'you',\n      'your',\n      'yours',\n      'yourself',\n      'yourselves',\n\
    \      'he',\n      'him',\n      'his',\n      'himself',\n      'she',\n   \
    \   'her',\n      'hers',\n      'herself',\n      'it',\n      'its',\n     \
    \ 'itself',\n      'they',\n      'them',\n      'their',\n      'theirs',\n \
    \     'themselves',\n      'what',\n      'which',\n      'who',\n      'whom',\n\
    \      'this',\n      'that',\n      'these',\n      'those',\n      'am',\n \
    \     'is',\n      'are',\n      'was',\n      'were',\n      'be',\n      'being',\n\
    \      'have',\n      'has',\n      'had',\n      'having',\n      'do',\n   \
    \   'does',\n      'did',\n      'doing',\n      'a',\n      'an',\n      'the',\n\
    \      'and',\n      'but',\n      'if',\n      'or',\n      'because',\n    \
    \  'as',\n      'until',\n      'while',\n      'of',\n      'at',\n      'by',\n\
    \      'for',\n      'with',\n      'about',\n      'against',\n      'between',\n\
    \      'into',\n      'through',\n      'during',\n      'before',\n      'after',\n\
    \      'above',\n      'below',\n      'to',\n      'from',\n      'up',\n   \
    \   'down',\n      'in',\n      'out',\n      'on',\n      'off',\n      'over',\n\
    \      'under',\n      'again',\n      'further',\n      'then',\n      'once',\n\
    \      'here',\n      'there',\n      'when',\n      'where',\n      'why',\n\
    \      'how',\n      'all',\n      'any',\n      'both',\n      'each',\n    \
    \  'few',\n      'more',\n      'most',\n      'other',\n      'some',\n     \
    \ 'such',\n      'no',\n      'nor',\n      'not',\n      'only',\n      'own',\n\
    \      'same',\n      'so',\n      'than',\n      'too',\n      'very',\n    \
    \  's',\n      't',\n      'can',\n      'will',\n      'just',\n      'don',\n\
    \      'should',\n      'now'\n  ];\n  $words = [];\n  foreach (\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpwyudn7y5.php on line 138

    '
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $bored\
    \ = false;\n    $S = str_replace(['.', '?', '!'], [' ', '', ' '], $S);\n    $arr\
    \ = explode(' ', $S);\n    foreach ($arr as $key => $value) {\n        $word =\
    \ str_replace(['I', 'you', 'he', 'she', 'we', 'they'], ['', '', '', '', '', ''],\
    \ $value);\n        if ( $word == 'I' || $word == 'you' || $word == 'he' || $word\
    \ == 'she' || $word == 'we' || $word == 'they' )\n            $bored = $bored\
    \ + 1;\n    }\n    return $bored;\n}\n</code>\n<|/ a dscore=3 tags=php,string\
    \ |>\n<| c |>\nI suggest you use `strpos` instead of `stripos` because `stripos`\
    \ will require the string to match the whole word, whereas `strpos` will require\
    \ the string to be a substring of another string. e.g. `strpos('abc', 'ac')` returns\
    \ `1` whereas `stripos('abc', 'ac')` returns `false`\n<|/ c |>\n<| c |>\nAlso\
    \ `strpos` will only match a single character in the string, whereas `stripos`\
    \ will match multiple characters (i.e. `'ac'.stripos('abc')` returns `1`). And\
    \ finally, `stripos` will return the position as a string, whereas `strpos` will\
    \ return a number (the position as a number when used in a calculation will often\
    \ be used). This last point is why `strpos` should be preferred over `stripos`\n\
    <|/ c |>\n<| c |>\nI suggest that `$words` should be `$arr`\n<|/ c |>\n<| a dscore=2\
    \ |>\nI have one more solution with strpos, it works well. \n<code>\nfunction\
    \ candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"I feel good today. I will be productive.\
    \ will kill It\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    You and I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp2u295qy6.php
    on line 21

    '
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $S\
    \ = explode(\".\",$S);\n    $boredom = 0;\n    foreach ($S as $word)\n    {\n\
    \        if (strpos($word,\"I\")!==false) $boredom++;\n    }\n    return $boredom;\n\
    }\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2zfkel_8.php:26\n\
    Stack trace:\n#0 /tmp/tmp2zfkel_8.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2zfkel_8.php\
    \ on line 26\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $A\
    \ = explode('.',$S);\n    $B = explode('.',$S);\n    if ( $A[0] == \"I\" ) {\n\
    \        $B[0] = \"I\";\n        $n = 1;\n    }\n    else {\n        $B[0] = \"\
    I\";\n        $n = 0;\n    }\n    for($i=1; $i < sizeof($A); $i++) {\n       \
    \ if ( $A[$i] == \"?\" ) {\n            $B[$i]=\"?\";\n            $n+=1;\n  \
    \      }\n        else if ( $A[$i] == \"!\" ) {\n            $B[$i]=\"!\";\n \
    \           $n+=1;\n        }\n        else if ( $A[$i] == \".\" ) {\n       \
    \     $B[$i]=\".\";\n        }\n    }\n    if ( $B == $A ) {\n        $n+=1;\n\
    \    }\n    return $n;\n}\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphp6myx4n.php:46\n\
    Stack trace:\n#0 /tmp/tmphp6myx4n.php(52): test()\n#1 {main}\n  thrown in /tmp/tmphp6myx4n.php\
    \ on line 46\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  global\
    \ $boredomcount;\n  $words = explode(\".\",$S);\n  $boredomcount = 0;\n  foreach($words\
    \ as $word) {\n    if(strpos($word, \"I\")===0) $boredomcount++;\n  }\n  return\
    \ $boredomcount;\n}\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu_2tdf5n.php:25\n\
    Stack trace:\n#0 /tmp/tmpu_2tdf5n.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpu_2tdf5n.php\
    \ on line 25\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    foreach(explode('.',\
    \ $S) as $w) {\n        if ('I' == $w[0]) {\n            return 1;\n        }\n\
    \    }\n    return 0;\n}\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeq5xmh5w.php:24\n\
    Stack trace:\n#0 /tmp/tmpeq5xmh5w.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpeq5xmh5w.php\
    \ on line 24\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $Is\
    \ = array();\n    $tokens = explode('.', $S);\n    foreach ($tokens as $t) {\n\
    \        $t = explode('.', $t);\n        $Is[$t[0]] = $t[1];\n    }\n    $Is =\
    \ array_count_values($Is);\n    foreach ($Is AS $k => $v) if ($v == 'I') return\
    \ $k;\n    return 0;\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmpwx_vg_yh.php on line 15\n\n\
    Warning: array_count_values(): Can only count string and integer values, entry\
    \ skipped in /tmp/tmpwx_vg_yh.php on line 17\n\nWarning: Undefined array key 1\
    \ in /tmp/tmpwx_vg_yh.php on line 15\n\nWarning: array_count_values(): Can only\
    \ count string and integer values, entry skipped in /tmp/tmpwx_vg_yh.php on line\
    \ 17\n\nWarning: Undefined array key 1 in /tmp/tmpwx_vg_yh.php on line 15\n\n\
    Warning: array_count_values(): Can only count string and integer values, entry\
    \ skipped in /tmp/tmpwx_vg_yh.php on line 17\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpwx_vg_yh.php:29\nStack trace:\n#0 /tmp/tmpwx_vg_yh.php(35):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpwx_vg_yh.php on line 29\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n\t$N\
    \ = 0;\n\tfor($i = strlen($S) - 1; $i >= 0; $i--) {\n\t\tswitch($S[$i]) {\n\t\t\
    \tcase 'I':\n\t\t\t\t$N++;\n\t\t\t\tbreak;\n\t\t\tcase '!':\n\t\t\t\t$N++;\n\t\
    \t\t\tbreak;\n\t\t\tcase '?':\n\t\t\t\t$N++;\n\t\t\t\tbreak;\n\t\t\tcase '.':\n\
    \t\t\t\t$N++;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\
    return $N;\n}\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj7vfq0zr.php:38\n\
    Stack trace:\n#0 /tmp/tmpj7vfq0zr.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpj7vfq0zr.php\
    \ on line 38\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n\tpreg_match_all(\"\
    /([I].*[!.?])/\",$S,$matches);\n\treturn sizeof($matches)/2;\n}\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5dd4nd7r.php:19\n\
    Stack trace:\n#0 /tmp/tmp5dd4nd7r.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp5dd4nd7r.php\
    \ on line 19\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredom\
    \ = 0;\n    $A = explode('.', $S);\n    foreach($A as $word){\n        if($word[0]=='I'){\n\
    \            $boredom++;\n        }\n    }\n    return $boredom;\n}\n</code>\n\
    <|/ a tags=php,explode |>\n<| a dscore=0 tags=php,explode |>\nThis is a good job\
    \ for preg_match. Since your boredom is always one character, you can use the\
    \ character group {1} which stands for the first character in the string.\n<code>\n\
    $boredom = preg_match('/I{1}/', $S);\n</code>\n<|/ a |>\n<| a tags=php,explode\
    \ |>\nIn your specific case, the shortest solution would be:\n<code>\n$boredom\
    \ = preg_match('/\\bI\\b/', \"The sky is blue. The sun is shining. I love this\
    \ weather\")\n</code>\nThis returns 1 since it begins with I as you requested.\n\
    Explanation:\n\n\\b match at a word boundary\nI match the literal I\n\\b match\
    \ at a word boundary\n\nNote that this is very basic and will not match all of\
    \ your boredom questions, as they are far more complex than what you described\
    \ here. More complex boredoms require a full fledged boredom checker.\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n\n$boredom = preg_match('/(?:^|\\s)I\\\
    b/', $s);\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpdsj3wedh.php
    on line 20

    '
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $count\
    \  = 0;\n    $dot    = '.';\n    $question     = \"?\";\n    $exclamation  = '!';\n\
    \    $wordArray = explode($dot, $S);\n    foreach($wordArray as $word){\n    \
    \    $count++;\n        if (substr($word, 0, 1) == $question){\n            $count++;\n\
    \        }\n        else if (substr($word, 0, 1) == $exclamation){\n         \
    \   $count--;\n        }\n    }\n    return $count;\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nThank you for this! Very helpful :)\n<|/ c |>\n<| a dscore=1 |>\nThis\
    \ code will count each word if it contains either 'I' or 'a':\n<code>\n$text =\
    \ 'Is a good day. Is a good day.';\n$words = explode('.', $text);\n\n$count =\
    \ array_reduce($words, 'count', 0);\necho $count;\n</code>\n<|/ a tags=php |>\n\
    <| a tags=php |>\n<code>\n$text = 'Hello world. Hello world.';\n$array = explode('.',\
    \ $text);\n\nforeach ($array as $key => $value) {\n    if(strpos($value, 'I')\
    \ !== false){\n        $bored++;\n    }\n}\n\necho $bored;\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\nYou can do something like:\n<code>\n$str = 'Hello world.\
    \ Hello world.';\npreg_match_all('/\\W/', $str, $matches);\n$count = 0;\nforeach\
    \ ($matches[0] as $match) {\n    if (strpos($match, 'I') !== false || strpos($match,\
    \ 'a') !== false) {\n        $count++;\n    }\n}\n</code>\n$count will contain\
    \ number of bored words.\n<|/ a tags=php |>\n<| c |>\nYes. Just realized, that\
    \ you are already looping over the whole sentence and each time `preg_match_all`\
    \ will give you an array with all the matches, just use `count()` on that array\
    \ to get the result.\n<|/ c |>\n<| a tags=php dscore=1 |>\nThis may be the most\
    \ efficient way to do that:\n<code>\nfunction candidate(...$args) {\n    return\
    \ is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpwdao7pe_.php
    on line 27

    '
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    //\
    \ Your code here...\n    $sentences = explode('.',$S);\n    $boredoms = count(array_filter($sentences,\
    \ function($sentence) use ($sentences, $str) {\n        return strpos($sentence,\
    \ $str) === 0;\n    }));\n    return $boredoms;\n}\n</code>\n<|/ a tags=php |>\n\
    <| c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post - you can always\
    \ comment on your own posts, and once you have sufficient [reputation](http://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](http://stackoverflow.com/help/privileges/comment).\n\
    <|/ c |>\n<| c |>\nI agree, this does **not** provide an answer. Perhaps you can\
    \ edit it to help make it more clear what to change and why.\n<|/ c |>\n<| c |>\n\
    Thank you for your answer. I have edited the question to make it easier to understand\
    \ what I'm trying to do.\n<|/ c |>\n<| a dscore=0 |>\nThis solution is a bit heavyweight\
    \ than Brandon's but it's still pretty concise, and it's also a bit easier to\
    \ read. Since there's some ambiguity in the question, I'll try to cover all possibilities\
    \ I see.\n<code>\n<?php\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpsb6ey26w.php
    on line 18

    '
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    return\
    \ preg_match_all('/^[Ii]/', $S);\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7rcl_dwy.php:20\n\
    Stack trace:\n#0 /tmp/tmp7rcl_dwy.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp7rcl_dwy.php\
    \ on line 20\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  //\
    \ Split the string into an array of words\n  $splitted_S = explode(\".\", $S);\n\
    \  $boredoms = 0;\n  foreach ($splitted_S as $word) {\n    if (strpos($word, \"\
    I\") === 0) {\n      $boredoms++;\n    }\n  }\n  return $boredoms;\n}\nfunction\
    \ candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"I feel good today. I will be productive.\
    \ will kill It\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    You and I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpekzljzn4.php:27\n\
    Stack trace:\n#0 /tmp/tmpekzljzn4.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpekzljzn4.php\
    \ on line 27\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n\t$S=strtolower($S);\n\
    \t$N=strlen($S);\n\t$T=preg_match(\"/\\bi\\b/i\",$S);\n\treturn $T?$T/$N:0;\n\
    }\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjl27uo67.php:24\n\
    Stack trace:\n#0 /tmp/tmpjl27uo67.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpjl27uo67.php\
    \ on line 24\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredoms\
    \ = explode('.', $S);\n    $boredoms = array_filter($boredoms, create_function('$S','return\
    \ strpos($S,\"I\") === 0;'));\n    $boredoms = array_filter($boredoms, create_function('$S','return\
    \ strpos($S,\"!\") === 0;'));\n    $boredoms = array_filter($boredoms, create_function('$S','return\
    \ strpos($S,\"?\") === 0;'));\n    $boredoms = array_filter($boredoms, create_function('$S','return\
    \ strpos($S,\".\") === 0;'));\n    $boredoms = array_count_values($boredoms);\n\
    \    return $boredoms;\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function create_function()\
    \ in /tmp/tmpm2mnztdb.php:12\nStack trace:\n#0 /tmp/tmpm2mnztdb.php(21): is_bored('Hello\
    \ world')\n#1 /tmp/tmpm2mnztdb.php(25): candidate('Hello world')\n#2 /tmp/tmpm2mnztdb.php(33):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpm2mnztdb.php on line 12\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    //\
    \ return your answer here\n    $S=explode('.',$S);\n    for($i=0;$i<count($S);$i++){\n\
    \        if(strpos($S[$i],\"I\")===0){\n            $bored++;\n        }\n   \
    \ }\n    return $bored;\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $bored in /tmp/tmpozh_o0jv.php on line 18\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpozh_o0jv.php:26\nStack\
    \ trace:\n#0 /tmp/tmpozh_o0jv.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpozh_o0jv.php\
    \ on line 26\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  if\
    \ ( empty($S) ) return false;\n  $S = explode('.',$S);\n  $I = $S[0];\n  $count\
    \ = 0;\n  for($i=1; $i<count($S); $i++) {\n    if (strncmp($S[$i], 'I',1) ===\
    \ 0) {\n      $count++;\n    }\n  }\n  return $count;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThe reason I used the explode function was because the sentence could\
    \ have any number of sentences in it. Thanks for the answer though!\n<|/ c |>\n\
    <| c |>\nThen use explode('.',$S); as you said, but with $S as $string = \"hello.world\"\
    ;\n<|/ c |>\n<| c |>\nI didn't realize you were checking for multiple sentences.\
    \ You can't count the number of sentences in a single string, unless you keep\
    \ track of sentences. I edited my answer to show how I would do it.\n<|/ c |>\n\
    <| c |>\nI think I'll just have to go with the way I was doing it. Thanks for\
    \ the help though!\n<|/ c |>\n<| a tags=php |>\n<code>\n$words = explode(\" \"\
    , $text);\n$wordCount = count($words);\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This doesn't take into account sentences.\n<|/ c |>\n<| c |>\nAhh yeah, I didn't\
    \ think of that case. I'll try to think of a better solution but for now I'm thinking\
    \ of just adding a new line to each sentence. Thanks for the help though!\n<|/\
    \ c |>\n<| a dscore=1 |>\nI think you should use \n<code>\n$wordCount = preg_match_all('/(^|\\\
    s)(I)/', $text, $m);\n</code>\nThe pattern /(^|\\s)(I)/, will match an I at the\
    \ beginning of the line (at the beginning of the line) or a whitespace character.\
    \ The flag s is a modifier that causes . to also match newlines.\n<|/ a tags=php\
    \ |>\n<| a tags=php |>\nYou could also just check the first character of the sentence.\n\
    <code>\n$sentence = strtok($input, \" .!?\");\n$sentenceCount = 1;\nwhile($sentence\
    \ != \"\")\n{\n    $sentence = strtok(\".!?\");\n    $sentenceCount++;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php |>\nYou could count the number of spaces:\n<code>\n\
    $words = explode(' ', $text);\n$wordCount = count($words);\n</code>\nor use the\
    \ explo\nfunction candidate(...$args) {\n    return is_bored(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love It\
    \ !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmppspsbgaq.php
    on line 22

    '
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $n\
    \ = count(explode(\".\",$S));\n    for($i=0; $i<$n; $i++) {\n        if($S[($i+1)]\
    \ == \" \") {\n            $i++;\n        }\n        if($S[($i+2)] == \" \" &&\
    \ $S[($i+3)] == \" \") {\n            $i += 4;\n        }\n        if($S[($i+3)]\
    \ == \" \") {\n            $i++;\n        }\n        if($S[($i+4)] == \" \" &&\
    \ $S[($i+5)] == \" \") {\n            $i += 7;\n        }\n        if($S[($i+5)]\
    \ == \" \") {\n            $i++;\n        }\n        if($S[($i+6)] == \" \" &&\
    \ $S[($i+7)] == \" \") {\n            $i += 9;\n        }\n    }\n    return $n;\n\
    }\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkmus0d3f.php:40\n\
    Stack trace:\n#0 /tmp/tmpkmus0d3f.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpkmus0d3f.php\
    \ on line 40\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $S\
    \ = preg_replace('%\\.|\\?|!%', '', $S);\n    $Scount = str_word_count($S);\n\
    \    array_shift($Scount);\n    foreach($Scount as $k => $val) {\n        if ($val\
    \ == 'I') return $k;\n    }\n    return 0;\n}\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ looks like a great way to do it. I actually prefer the simpler solution above\
    \ but this is very good too!\n<|/ c |>\n<| c |>\nI do like the simpler solution\
    \ but it does take some time to write since you have to split the text into words\
    \ first and then count the boredoms.\n<|/ c |>\n<| a tags=php |>\nI hope this\
    \ helps someone:\n<code>\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpec0zsbfc.php
    on line 19

    '
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredoms\
    \ = 0;\n    foreach (explode('.', $S) as $part) {\n        if ($part[0] == 'I')\n\
    \            $boredoms++;\n    }\n    return $boredoms;\n}\n</code>\n<|/ a tags=python,php,algorithm\
    \ |>\n<| a dscore=0 tags=python,php,algorithm |>\nHere is a PHP version:\n<code>\n\
    function candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpluz57dsb.php
    on line 18

    '
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredom\
    \ = 0;\n    $S = preg_replace('/[^.!?]+/', '', $S);\n    $S = \"I \".$S;\n   \
    \ $S = explode('.', $S);\n    foreach($S as $word) {\n        if (strpos($word,\
    \ 'I') !== false) {\n            $boredom++;\n        }\n    }\n    return $boredom;\n\
    }\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgf1l_veo.php:28\n\
    Stack trace:\n#0 /tmp/tmpgf1l_veo.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpgf1l_veo.php\
    \ on line 28\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  return\
    \ preg_match(\"/^I /\", $S);\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk5qc7ga4.php:23\n\
    Stack trace:\n#0 /tmp/tmpk5qc7ga4.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpk5qc7ga4.php\
    \ on line 23\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredom\
    \ = explode('.',$S);\n    $boredoms = array_map('strlen',$boredom);\n    sort($boredoms);\n\
    \    if($boredoms[0] == 1 && $boredoms[1] == 1 && $boredoms[2] == 1)\n    {\n\
    \        return 1;\n    }\n    return 0;\n}\nfunction candidate(...$args) {\n\
    \    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6d33hmzj.php:27\n\
    Stack trace:\n#0 /tmp/tmp6d33hmzj.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp6d33hmzj.php\
    \ on line 27\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n\t$s\
    \ = explode(\".\", $S);\n\t$boredoms = 0;\n\tforeach($s as $i){\n\t\tif ($i ==\
    \ \"I\"){\n\t\t\t$boredoms = $boredoms + 1;\n\t\t}\n\t}\n\treturn $boredoms;\n\
    }\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaia_jgf4.php:28\n\
    Stack trace:\n#0 /tmp/tmpaia_jgf4.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpaia_jgf4.php\
    \ on line 28\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredom\
    \ = 0;\n    $words = explode('.', $S);\n    foreach ($words as $word) {\n    \
    \    if (strpos($word, \"I\") === 0) {\n            $boredom += 1;\n        }\n\
    \    }\n    return $boredom;\n}\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyhygwyl2.php:26\n\
    Stack trace:\n#0 /tmp/tmpyhygwyl2.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpyhygwyl2.php\
    \ on line 26\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $sentences\
    \ = explode('.', $S);\n    $bored = 0;\n    foreach ($sentences as $sentence)\
    \ {\n        $sentence_tokens = explode(' ', $sentence);\n        $sentence_tokens\
    \ = array_filter($sentence_tokens);\n        if (in_array('I', $sentence_tokens))\
    \ {\n            $bored++;\n        }\n    }\n    return $bored;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"I feel good today. I will be productive.\
    \ will kill It\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    You and I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplos3puut.php:33\n\
    Stack trace:\n#0 /tmp/tmplos3puut.php(36): test()\n#1 {main}\n  thrown in /tmp/tmplos3puut.php\
    \ on line 33\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredoms\
    \ = 0;\n    foreach (preg_split('/\\.|\\?|!/', $S) as $word) {\n        if ($word\
    \ == \"I\") {\n            $boredoms++;\n        }\n    }\n    return $boredoms;\n\
    }\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy1t__acn.php:27\n\
    Stack trace:\n#0 /tmp/tmpy1t__acn.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpy1t__acn.php\
    \ on line 27\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredom\
    \ = 0;\n    $boredomcount = explode(\".\",$S);\n    foreach ($boredomcount as\
    \ $bore) {\n        if($bore == \"I\") $boredom++;\n    }\n    return $boredom;\n\
    }\nfunction candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8zzr2pw0.php:25\n\
    Stack trace:\n#0 /tmp/tmp8zzr2pw0.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8zzr2pw0.php\
    \ on line 25\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $bored\
    \ = 0;\n    $S = preg_replace('/([.!?])/', \"$1 \", $S);\n    $words = explode('\
    \ ', $S);\n    foreach ($words as $word)\n        if (strncmp($word, \"I\", 1)\
    \ === 0) $bored += 1;\n    return $bored;\n}\n</code>\n<|/ a |>\n<| a |>\nHere's\
    \ a solution that will take care of words with punctuation in them (. and ?).\
    \ It also takes into consideration the fact that you can have multiple boredoms\
    \ in a row (e.g. \"I love this weather\" vs. \"This weather is so cool.\")\n<code>\n\
    function candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp207mcnoq.php
    on line 18

    '
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $bored\
    \ = 0;\n    $S = explode('.', $S);\n    foreach ($S as $word)\n        if ($word[0]\
    \ === 'I') $bored += 1;\n    return $bored;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgtefjh5j.php:24\n\
    Stack trace:\n#0 /tmp/tmpgtefjh5j.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpgtefjh5j.php\
    \ on line 24\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $s\
    \ = explode('.',$S);\n    $d = explode('.',$S);\n    $t = explode('.',$S);\n \
    \   $i = explode('.',$S);\n    \n    \n    $bored = 0;\n    \n    \n    $bored1\
    \ = preg_match('/[I].*\\.$/',$s[0]);\n    $bored2 = preg_match('/[I].*\\.$/',$d[0]);\n\
    \    $bored3 = preg_match('/[I].*\\.$/',$t[0]);\n    $bored4 = preg_match('/[I].*\\\
    .$/',$i[0]);\n    \n    \n    if($bored1 == 1)\n    {\n        $bored++;\n   \
    \ }\n    if($bored2 == 1)\n    {\n        $bored++;\n    }\n    if($bored3 ==\
    \ 1)\n    {\n        $bored++;\n    }\n    if($bored4 == 1)\n    {\n        $bored++;\n\
    \    }\n    \n    \n    return($bored);\n}\nfunction candidate(...$args) {\n \
    \   return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3x3xtrkj.php:53\n\
    Stack trace:\n#0 /tmp/tmp3x3xtrkj.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp3x3xtrkj.php\
    \ on line 53\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $words\
    \ = explode('.', $S);\n    $boredoms = 0;\n    $boredoms += (preg_match('/I/',\
    \ $words[0]));\n    $boredoms += (preg_match('/i/', $words[0]));\n    $boredoms\
    \ += (preg_match('/I/', $words[1]));\n    $boredoms += (preg_match('/i/', $words[1]));\n\
    \    return $boredoms;\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmpmlh3leu2.php on line 15\n\n\
    Deprecated: preg_match(): Passing null to parameter #2 ($subject) of type string\
    \ is deprecated in /tmp/tmpmlh3leu2.php on line 15\n\nWarning: Undefined array\
    \ key 1 in /tmp/tmpmlh3leu2.php on line 16\n\nDeprecated: preg_match(): Passing\
    \ null to parameter #2 ($subject) of type string is deprecated in /tmp/tmpmlh3leu2.php\
    \ on line 16\n\nWarning: Undefined array key 1 in /tmp/tmpmlh3leu2.php on line\
    \ 15\n\nDeprecated: preg_match(): Passing null to parameter #2 ($subject) of type\
    \ string is deprecated in /tmp/tmpmlh3leu2.php on line 15\n\nWarning: Undefined\
    \ array key 1 in /tmp/tmpmlh3leu2.php on line 16\n\nDeprecated: preg_match():\
    \ Passing null to parameter #2 ($subject) of type string is deprecated in /tmp/tmpmlh3leu2.php\
    \ on line 16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmlh3leu2.php:26\n\
    Stack trace:\n#0 /tmp/tmpmlh3leu2.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpmlh3leu2.php\
    \ on line 26\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $S\
    \ = trim($S);\n    $count = 0; $flag = 0;\n    $arrs = explode('.',$S); $length\
    \ = count($arrs);\n    for($i=0; $i<$length-1; $i++){\n        if(strtolower($arrs[$i])\
    \ == \"i\"){\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nWelcome to SO! Please provide some comments on your\
    \ answer. Especially, why you chose to use `explode()` over regexes here, and\
    \ why you chose to use a regex to solve this problem. Thanks.\n<|/ c |>\n<| a\
    \ tags=php,count |>\nYou can use:\n<code>\nfunction candidate(...$args) {\n  \
    \  return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp0l1yu723.php
    on line 21

    '
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $bored\
    \ = 0;\n    $arr = explode('.', $S);\n    foreach ($arr as $x) {\n        if ($x[0]\
    \ == 'I') {\n            $bored++;\n        }\n    }\n    return $bored;\n}\n\
    function candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoxxf4vh8.php:26\n\
    Stack trace:\n#0 /tmp/tmpoxxf4vh8.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpoxxf4vh8.php\
    \ on line 26\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n\t$bored\
    \ = 0;\n\tfor ($i = 0; $i < strlen($S); $i++) {\n\t\tif (\"I\" == substr($S, $i,\
    \ 1)) {\n\t\t\t$bored++;\n\t\t}\n\t}\n\treturn $bored;\n}\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqyjhoyj6.php:25\n\
    Stack trace:\n#0 /tmp/tmpqyjhoyj6.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpqyjhoyj6.php\
    \ on line 25\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $A\
    \ = explode('.', $S);\n    $B = explode('.', $A[0]);\n    $C = $B[0];\n    $B\
    \ = $B[1];\n    echo $C; echo $B; echo $C; echo\"<br>\";\n    // $C = $C[0][0];\n\
    \    // $B = $B[0][1];\n    // $C = $C[1][0];\n    // $B = $B[1][1];\n    // echo\
    \ $C;\n    // echo $B;\n    // echo $C;\n}\nfunction candidate(...$args) {\n \
    \   return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmpfn9lxze3.php on line 14\nHello\
    \ worldHello world<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfn9lxze3.php:29\n\
    Stack trace:\n#0 /tmp/tmpfn9lxze3.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpfn9lxze3.php\
    \ on line 29\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredom\
    \ = array(\"the\", \"is\", \"a\", \"I\", \"an\", \"boredom\");\n    $S = preg_replace(\"\
    /[^\\.\\?\\!]*[\\.\\?\\!]/\", \"\", $S);\n    $count = 0;\n    foreach($boredom\
    \ as $bore){\n        if(strpos($S, $bore) > 0){\n            $count++;\n    \
    \    }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return\
    \ is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp017soz6n.php:28\n\
    Stack trace:\n#0 /tmp/tmp017soz6n.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp017soz6n.php\
    \ on line 28\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    return\
    \ substr_count($S, 'I');\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_v6hw3_l.php:20\n\
    Stack trace:\n#0 /tmp/tmp_v6hw3_l.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp_v6hw3_l.php\
    \ on line 20\n"
  timestamp: 1659822393
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $bored\
    \ = 0;\n    $boredCount = count_chars($S,\"boredom\");\n    $boredCount2 = count_chars($S,'boredom');\n\
    \    $boredCount3 = count_chars($S,'bored');\n    $boredCount4 = count_chars($S,'bore');\n\
    \    $boredCount5 = count_chars($S,'bore');\n    $boredCount6 = count_chars($S,'bo');\n\
    \    $boredCount7 = count_chars($S,'bo');\n    $boredCount8 = count_chars($S,'bo');\n\
    \    $boredCount9 = count_chars($S,'b');\n    $boredCount10 = count_chars($S,'bo');\n\
    \    $boredCount11 = count_chars($S,'bo');\n    $boredCount12 = count_chars($S,'b');\n\
    \    $boredCount13 = count_chars($S,'bo');\n    $boredCount14 = count_chars($S,'b');\n\
    \    $boredCount15 = count_chars($S,'bo');\n    $boredCount16 = count_chars($S,'b');\n\
    \    $boredCount17 = count_chars($S,'bo');\n    $boredCount18 = count_chars($S,'bo');\n\
    \    $boredCount19 = count_chars($S,'bo');\n    $boredCount20 = count_chars($S,'bo');\n\
    \    $boredCount21 = count_chars($S,'b');\n    $boredCount22 = count_chars($S,'bo');\n\
    \    $boredCount23 = count_chars($S,'bo');\n    $boredCount24 = count_chars($S,'b');\n\
    \    $boredCount25 = count_chars($S,'bo');\n    $boredCount26 = count_chars($S,'bo');\n\
    \    $boredCount27 = count_chars($S,'b');\n    $boredCount28 = count_chars($S,'bo');\n\
    \    $boredCount29 = count_chars($S,'bo');\n    $boredCount30 = count_chars($S,'bo');\n\
    \    $boredCount31 = count_chars($S,'bo');\n    $boredCount32 = count_chars($S,'bo');\n\
    \    $boredCount33 = count_chars($S,'bo');\n    $boredCount34 = count_chars($S,'bo');\n\
    \    $boredCount35 = count_chars($S,'bo');\n    $boredCount36 = count_chars($S,'bo');\n\
    \    $boredCount37 = count_chars($\nfunction candidate(...$args) {\n    return\
    \ is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmp0_lb2osb.php on line 49

    '
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredoms\
    \ = 0;\n    $arr = explode('.',$S);\n    $arr = explode('?',$arr);\n    $arr =\
    \ explode('!',$arr);\n    $arr2 = array();\n    foreach($arr as $val) {\n    \
    \    if (strpos($val,\"I\") === 0)\n            $boredoms++;\n    }\n    return\
    \ $boredoms;\n}\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: explode(): Argument #2 ($string) must\
    \ be of type string, array given in /tmp/tmpfikpaqhx.php:13\nStack trace:\n#0\
    \ /tmp/tmpfikpaqhx.php(13): explode('?', Array)\n#1 /tmp/tmpfikpaqhx.php(23):\
    \ is_bored('Hello world')\n#2 /tmp/tmpfikpaqhx.php(27): candidate('Hello world')\n\
    #3 /tmp/tmpfikpaqhx.php(35): test()\n#4 {main}\n  thrown in /tmp/tmpfikpaqhx.php\
    \ on line 13\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  $boredom_words\
    \ = array('I');\n  $boredom_words = array_merge($boredom_words, explode('.', $S));\n\
    \  $boredom_words = array_merge($boredom_words, explode('?', $S));\n  $boredom_words\
    \ = array_merge($boredom_words, explode('!', $S));\n  \n  $boredom_count = count(array_filter($boredom_words,\
    \ function($word) {\n    return (strpos($word, 'I') === 0);\n  }));\n  return\
    \ $boredom_count;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis code is wrong\
    \ because it gives false positives. You should add some more words that should\
    \ count as boredom. One word is good enough: `is_bored('I am the borer of the\
    \ world')` gives 1, which is wrong (because it starts with \"I\")\n<|/ c |>\n\
    <| c |>\n: I agree. I've now included some more examples. Thank you for your suggestion.\n\
    <|/ c |>\n<| c |>\nYou are now correct, my bad. Your code is still wrong: `is_bored(\"\
    I'm bored\")` returns 0, which is wrong. You've done a great job at correcting\
    \ the code. However your example is still wrong. Try this: `is_bored('I love this\
    \ weather.')` returns 0, which is wrong. Check my edit for the correct solution.\n\
    <|/ c |>\n<| c |>\n: Your example is still wrong. I believe you meant to write\
    \ `is_bored(\"I love this weather.\")` with 1 sentence. Otherwise it would return\
    \ 0 because the sentence starts with \"I\".\n<|/ c |>\n<| c |>\nYes, you are right.\
    \ My mistake. I've corrected my post and have also added the correct solution\
    \ to my answer.\n<|/ c |>\n<| a tags=php,regex |>\nThis is a very simple regex,\
    \ but it's very easy. I don't know if it's more efficient than a full PHP implementation,\
    \ but here's a regex that only uses 1 function call.\n<code>\n$boredom = preg_match('/[Ii]/',\
    \ $string);\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThat will also match `IiiiIiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\n\
    function candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpgb_o43nh.php
    on line 21

    '
  timestamp: 1660028134
- exit_code: -1
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n   $bored\
    \ = 0;\n   $i = 1;\n   while ($i < strlen($S)) {\n      if ($S[$i] == '.') {\n\
    \         $bored++;\n      }\n      else if ($S[$i] == '?') {\n         $bored++;\n\
    \      }\n      else if ($S[$i] == '!') {\n         $bored++;\n      }\n     \
    \ else {\n         $i++;\n      }\n   }\n   return $bored;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028139
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $bored\
    \ = 0;\n    $words = explode('.',$S);\n    foreach($words as $w){\n        if(strpos($w,'I')\
    \ !== false){\n            $bored++;\n        }\n    }\n    return $bored;\n}\n\
    \nfunction candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv7ip16ib.php:27\n\
    Stack trace:\n#0 /tmp/tmpv7ip16ib.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpv7ip16ib.php\
    \ on line 27\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredoms\
    \ = 0;\n    $words = explode('.',$S);\n    foreach($words as $w) {\n        if($w\
    \ == \"I\") $boredoms++;\n    }\n    return $boredoms;\n}\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmk7qm88v.php:25\n\
    Stack trace:\n#0 /tmp/tmpmk7qm88v.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpmk7qm88v.php\
    \ on line 25\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    if\
    \ (preg_match(\"/(^|\\.)(I)(\\.|\\?|!)\\b/i\", $S)) {\n        return 1;\n   \
    \ } else {\n        return 0;\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkir5k23z.php:24\n\
    Stack trace:\n#0 /tmp/tmpkir5k23z.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpkir5k23z.php\
    \ on line 24\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  if\
    \ (preg_match(\"/\\./\", $S)) {\n    return 1;\n  }\n  if (preg_match(\"/\\?/\"\
    , $S)) {\n    return 2;\n  }\n  if (preg_match(\"/\\!/\", $S)) {\n    return 3;\n\
    \  }\n  return 0;\n}\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo6uyjlvj.php:28\n\
    Stack trace:\n#0 /tmp/tmpo6uyjlvj.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpo6uyjlvj.php\
    \ on line 28\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  $boredom\
    \ = array();\n  $boredom['I'] = 0;\n  $boredom['.'] = 1;\n  $boredom['?'] = 1;\n\
    \  $boredom['!'] = 1;\n\n  $words = explode('.', $S);\n\n  foreach ($words as\
    \ $word) {\n    if (strpos($word, 'I') === 0) {\n      $boredom['I'] = $boredom['I']\
    \ + 1;\n    }\n  }\n\n  return $boredom['I'];\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nHmm, I wonder why this was downvoted. +1 to counter the -1 by someone\
    \ who thought this was a good solution. :)\n<|/ c |>\n<| c |>\n, I'm not sure\
    \ what was wrong with my answer. I thought it was pretty good, and I wrote the\
    \ function so it should be easy enough to understand and get it working. Could\
    \ you give me some feedback?\n<|/ c |>\n<| a dscore=1 tags=php,function,string\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpdlbz7owl.php
    on line 27

    '
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n\t$bored\
    \ = 0;\n\tpreg_match(\"/(^|[\\.\\?\\!])(I)/\", $S, $matches);\n\t$bored = $matches[1]\
    \ ? 1 : 0;\n\treturn $bored;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmps1kco5e_.php on line 13\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmps1kco5e_.php:24\nStack\
    \ trace:\n#0 /tmp/tmps1kco5e_.php(30): test()\n#1 {main}\n  thrown in /tmp/tmps1kco5e_.php\
    \ on line 24\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $B=0;\n\
    \    $A=explode('.',$S);\n    $L=count($A);\n    for($i=0;$i<$L;$i++) {\n    \
    \    $B+=($A[$i]==\"I\");\n    }\n    return $B;\n}\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv7yqka2b.php:26\n\
    Stack trace:\n#0 /tmp/tmpv7yqka2b.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpv7yqka2b.php\
    \ on line 26\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredoms\
    \ = array(\"I\");\n    $count_boredoms = 0;\n    $S = str_replace(',', '.', $S);\n\
    \    $S = str_replace('.', '?', $S);\n    $S = str_replace('!', '?', $S);\n  \
    \  $S = explode('.', $S);\n    foreach ($S as $word) {\n        if (in_array($word,\
    \ $boredoms)) {\n            $count_boredoms++;\n        }\n    }\n    return\
    \ $count_boredoms;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\npublic function\
    \ boredom($string) {\n    $boredoms = array(\"I\");\n    $count_boredoms = 0;\n\
    \    $string = str_replace(',', '.', $string);\n    $string = str_replace('.',\
    \ '?', $string);\n    $string = str_replace('!', '?', $string);\n    $string =\
    \ explode('.', $string);\n    foreach ($string as $word) {\n        if (in_array($word,\
    \ $boredoms)) {\n            $count_boredoms++;\n        }\n    }\n    return\
    \ $count_boredoms;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nPlease add some explanation\
    \ to your answer.\n<|/ c |>\n<| a tags=php |>\nPlease follow below code:\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpifkke2v8.php
    on line 24

    '
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredoms\
    \ = array(\n        '!' => 0,\n        '?' => 0,\n        '.' => 0,\n        'I'\
    \ => 0,\n    );\n    $S=strtolower($S);\n    $S = str_replace(\"\\n\", \"\", $S);\n\
    \    $S = preg_replace(\"/([\\.\\?\\!])/\", \"\", $S);\n    $sentences = explode('.',\
    \ $S);\n    foreach ($sentences as $sentence){\n        $sentence = preg_replace(\"\
    /([\\.\\?\\!])/\", \"\", $sentence);\n        if(strpos($sentence, 'I') !== false){\n\
    \            $boredoms['I'] = 1;\n        }\n        if(strpos($sentence, '.')\
    \ !== false){\n            $boredoms['.'] = 1;\n        }\n        if(strpos($sentence,\
    \ '?') !== false){\n            $boredoms['?'] = 1;\n        }\n        if(strpos($sentence,\
    \ '!') !== false){\n            $boredoms['!'] = 1;\n        }\n    }\n    arsort($boredoms);\n\
    \    return reset($boredoms);\n}\n</code>\n<|/ a tags=php,if-statement |>\n<|\
    \ c |>\nIf there is only a boredom, this will return 1, rather than 0, as `strpos`\
    \ returns `0` if it can't find anything.\n<|/ c |>\n<| c |>\n: I didn't see your\
    \ answer, but thanks! It's a much cleaner way of doing it!\n<|/ c |>\n<| a dscore=1\
    \ |>\nThis should do the trick:\n<code>\nfunction candidate(...$args) {\n    return\
    \ is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp0rfbw6m5.php
    on line 39

    '
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    //\
    \ Split up the string into an array of strings (sentences).\n    // The 'explode()'\
    \ function splits a string into an array.\n    $explode = explode('.',$S);\n\n\
    \    // For each sentence,\n    foreach ($explode as $sentence) {\n        //\
    \ Explode the sentence into an array of words (words).\n        // The 'explode()'\
    \ function splits a string into an array.\n        $explode = explode('?',$sentence);\n\
    \n        // For each word,\n        foreach ($explode as $word) {\n         \
    \   // Explode the word into an array of letters (letters).\n            // The\
    \ 'explode()' function splits a string into an array.\n            $explode =\
    \ explode('!',$word);\n\n            // For each letter (letter),\n          \
    \  foreach ($explode as $letter) {\n                // Check if the letter is\
    \ \"I\" (the boredom).\n                if ($letter == \"I\") {\n            \
    \        // The letter \"I\" is a boredom.\n                    // If the length\
    \ of the sentence is greater than 0, \n                    // then it is a boredom\
    \ sentence.\n                    if (strlen($sentence) > 0) {\n              \
    \          return 1;\n                    }\n                }\n            }\n\
    \        }\n    }\n    return 0;\n}\n</code>\n<|/ a |>\n<| c |>\nThank you for\
    \ the answer. However, the number of boredoms in your example is 0 when it should\
    \ be 1. Also, can you please explain the code so i understand it better?\n<|/\
    \ c |>\n<| c |>\nI rewrote my answer with comments. Let me know if that helps.\n\
    <|/ c |>\n<| a tags=php,string |>\nI suggest you to use Regular Expressions to\
    \ solve this problem. Here is an example:\n<code>\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp7xp535yu.php
    on line 43

    '
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $bored\
    \ = 0;\n    foreach (explode('.?!', $S) as $word) {\n        if (substr($word,\
    \ 0, 1) == \"i\")\n            $bored += 1;\n    }\n    return $bored;\n}\nfunction\
    \ candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"I feel good today. I will be productive.\
    \ will kill It\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    You and I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6vfr13yt.php:25\n\
    Stack trace:\n#0 /tmp/tmp6vfr13yt.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp6vfr13yt.php\
    \ on line 25\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $S\
    \ = preg_replace('/\\W|\\./', '', $S);\n    $S=str_replace('? ','!',$S);\n   \
    \ $S=str_replace('.?!','!',$S);\n    $S=str_replace('.','.?!','!',$S);\n    $S=str_replace('?\
    \ ','!',$S);\n    $S=str_replace('.','.?!','!',$S);\n    $S=str_replace('!','.?!',$S);\n\
    \    $S=str_replace('.','.?!','!',$S);\n    $S=str_replace('.','.?!','!',$S);\n\
    \    $S=str_replace('.','.?!','!',$S);\n    $S=str_replace('.','.?!','!',$S);\n\
    \    $S=str_replace('.','.?!','!',$S);\n    $S=str_replace('.','.?!','!',$S);\n\
    \    $S=str_replace('.','.?!','!',$S);\n    $S=str_replace('.','.?!','!',$S);\n\
    \    $S=str_replace('.','.?!','!',$S);\n    $S=str_replace('.','.?!','!',$S);\n\
    \    $S=str_replace('.','.?!','!',$S);\n    $S=str_replace('.','.?!','!',$S);\n\
    \    $S=str_replace('.','.?!','!',$S);\n    $S=str_replace('.','.?!','!',$S);\n\
    \    $S=str_replace('.','.?!','!',$S);\n    $S=str_replace('.','.?!','!',$S);\n\
    \    $S=str_replace('.','.?!','!',$S);\n    $S=str_replace('.','.?!','!',$S);\n\
    \    $S=str_replace('.','.?!','!',$S);\n    $S=str_replace('.','.?!','!',$S);\n\
    \    $S=str_replace('.','.?!','!',$S);\n    $S=str_replace('.','.?!','!',$S);\n\
    \    $S=str_replace('.','.?!','!',$S);\n    $S=str_replace('.','.?!','!',$S);\n\
    \    $S=str_replace('.','.?!','!',$S);\n    $S=str_replace('.','.?!\nfunction\
    \ candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"I feel good today. I will be productive.\
    \ will kill It\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    You and I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content ".?!", expecting ")" in /tmp/tmpsq5i54li.php
    on line 43

    '
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    return\
    \ count((explode('.',$S)));\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphkbz2iqi.php:19\n\
    Stack trace:\n#0 /tmp/tmphkbz2iqi.php(27): test()\n#1 {main}\n  thrown in /tmp/tmphkbz2iqi.php\
    \ on line 19\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $S\
    \ = preg_replace(\"/[^\\.?!]+/i\", \"\", $S);\n    $S1 = preg_replace(\"/[\\.?!]/\"\
    , \"\", $S);\n    if (preg_match(\"/I{$S1}/i\", $S) == 1) {\n        return 1;\n\
    \    } else {\n        return 0;\n    }\n}\nfunction candidate(...$args) {\n \
    \   return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc144juno.php:26\n\
    Stack trace:\n#0 /tmp/tmpc144juno.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpc144juno.php\
    \ on line 26\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $s\
    \ = preg_split('/([.!?]\\s+)/', $S, 2);\n    $n = count($s);\n    $i = 0;\n  \
    \  foreach ($s as $w) {\n        $i += preg_match('/^i/', $w);\n    }\n    return\
    \ $n;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI would suggest counting\
    \ the number of occurrences of \"I\" in each word, then add them up using array_sum().\n\
    <code>\nfunction candidate(...$args) {\n    return is_bored(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love It\
    \ !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpde1dorwi.php
    on line 19

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredoms\
    \ = array();\n    $boredoms[] = explode('.',$S);\n    $boredoms[] = explode('?',$S);\n\
    \    $boredoms[] = explode('!',$S);\n\n    foreach($boredoms as $boredom){\n \
    \       if(strstr($boredom,'I'))\n            return $boredoms[0];\n    }\n  \
    \  return 0;\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: strstr(): Argument #1 ($haystack) must\
    \ be of type string, array given in /tmp/tmp89grluaf.php:17\nStack trace:\n#0\
    \ /tmp/tmp89grluaf.php(17): strstr(Array, 'I')\n#1 /tmp/tmp89grluaf.php(24): is_bored('Hello\
    \ world')\n#2 /tmp/tmp89grluaf.php(28): candidate('Hello world')\n#3 /tmp/tmp89grluaf.php(36):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmp89grluaf.php on line 17\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $words\
    \ = explode('.', $S);\n    foreach ($words as $w) {\n        if ($w == 'I') {\n\
    \            return 1;\n        }\n    }\n    return 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptrgy04ic.php:27\n\
    Stack trace:\n#0 /tmp/tmptrgy04ic.php(33): test()\n#1 {main}\n  thrown in /tmp/tmptrgy04ic.php\
    \ on line 27\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $S\
    \ = preg_replace(\"/[^\\.\\?\\!]+/\", \"\", $S);\n    $bored=0;\n    foreach (explode(\"\
    .\", $S) as $chunk) {\n        if (!strstr($chunk, \"I\"))\n            $bored++;\n\
    \    }\n    return $bored;\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoj09uhtn.php:25\n\
    Stack trace:\n#0 /tmp/tmpoj09uhtn.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpoj09uhtn.php\
    \ on line 25\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n\t$bored=array('I','.','?','!');\n\
    \tforeach ($bored as $b) {\n\t\t$t=strpos($S, $b);\n\t\tif ($t>0) {\n\t\t\t$S=substr($S,\
    \ 0, $t).\"bored\".substr($S, $t+strlen($b));\n\t\t\treturn ($S==$T);\n\t\t}\n\
    \t}\n\treturn ($S==$T);\n}\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $T in /tmp/tmpnvzyn98y.php on line 19\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpnvzyn98y.php:26\nStack\
    \ trace:\n#0 /tmp/tmpnvzyn98y.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpnvzyn98y.php\
    \ on line 26\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $I\
    \ = explode('.', $S);\n    $I = explode('?', $I);\n    $I = explode('!', $I);\n\
    \n    $I = count(array_filter(\n        array_map(\n            function ($I)\
    \ {\n                return $I[0] == 'I';\n            }, $I\n        )\n    ));\n\
    \n    return $I;\n}\n</code>\nAnd then to test it:\n<code>\n$tests = array(\n\
    \    \"Hello world\" => 0,\n    \"The sky is blue. The sun is shining. I love\
    \ this weather.\" => 1,\n    \"I love this weather\" => 1,\n);\nforeach($tests\
    \ as $T => $I) {\n    echo $T . \"\\t\" . is_bored($T) . \"\\n\";\n}\n</code>\n\
    Which yields:\n<code>\nHello world    0\nThe sky is blue. The sun is shining.\
    \ I love this weather.    1\nI love this weather    1\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI like your idea of using explode, but wouldn't it require me to\
    \ split the sentence in to words, which would not be what i'm trying to do. I'm\
    \ basically looking for the number of sentences starting with \"I\"\n<|/ c |>\n\
    <| c |>\nThe first sentence starts with I.  The second sentence starts with I.\
    \  The third sentence starts with I.  The fourth sentence starts with I.  The\
    \ fifth sentence starts with I.  The sixth sentence starts with I.  The seventh\
    \ sentence starts with I.  The eighth sentence starts with I.  The ninth sentence\
    \ starts with I.  The tenth sentence starts with I.  The eleventh sentence starts\
    \ with I.  The twelfth sentence starts with I.  The thirteenth sentence starts\
    \ with I.  The fourteenth sentence starts with I.  All of those start with I.\
    \  So the function I wrote will do that.  It counts the number of sentences starting\
    \ with I.\n<|/ c |>\n<| c |>\nI've updated my answer to show how it can be used.\n\
    <|/ c |>\n<| a tags=arrays,php |>\nYou don't need explode. Just compare the first\
    \ letter of the string with 'I':\n<code>\n<?php\n$tests = array(\n    \"Hello\
    \ world\",\n    \"The sky is blue. The sun is shining. I love this weather.\"\
    ,\n    \"I love this weather\",\n);\n\nforeach ($tests as $s) {\n    if ($s[0]\
    \ == 'I') {\n        echo \"$s is bored\\n\";\n    }\n}\n</code>\nOutput:\n\n\
    function candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpbnklamyk.php
    on line 25

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredoms\
    \ = \"I, you, you, I, I, you, you, you, you, you, you, you, you, you, you, you,\
    \ you, you, you, you, you, you, you, you, you, you, you, you, you, you, you, you,\
    \ you, you, you, you, you, you, you, you, you, you, you, you, you, you, you, you,\
    \ you, you, you, you, you, you, you, you, you, you, you, you, you, you, you, you,\
    \ you, you, you, you, you, you, you, you, you, you, you, you, you, you, you, you,\
    \ you, you, you, you, you, you, you, you, you, you, you, you, you, you, you, you,\
    \ you, you, you, you, you, you, you, you, you, you, you, you, you, you, you, you,\
    \ you, you, you, you, you, you, you, you, you, you, you, you, you, you, you, you,\
    \ you, you, you, you, you, you, you, you, you, you, you, you, you, you, you, you,\
    \ you, you, you, you, you, you, you, you, you, you, you, you, you, you, you, you,\
    \ you, you, you, you, you, you, you, you, you, you, you, you, you, you, you, you,\
    \ you, you, you, you, you, you, you, you, you, you, you, you, you, you, you, you,\
    \ you, you, you, you, you, you, you, you, you, you, you, you, you, you, you, you,\
    \ you, you, you, you, you, you, you, you, you, you, you, you, you, you, you, you,\
    \ you, you, you, you, you, you, you, you, you, you, you, you, you, you, you, you,\
    \ you, you, you, you, you, you, you, you, you, you, you, you, you, you, you, \n\
    function candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Hello" in /tmp/tmpu5am43jx.php
    on line 17

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredom_count\
    \ = 0; \n    $words = explode(\" \", $S);\n    foreach($words as $word) {\n  \
    \      if(strpos($word, \"I\") === 0){\n            $boredom_count++;\n      \
    \  }\n    }\n    return $boredom_count;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpii51hfgf.php:27\n\
    Stack trace:\n#0 /tmp/tmpii51hfgf.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpii51hfgf.php\
    \ on line 27\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $count\
    \ = preg_match_all('/\\bI\\b/', $S);\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu78hiyjr.php:24\n\
    Stack trace:\n#0 /tmp/tmpu78hiyjr.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpu78hiyjr.php\
    \ on line 24\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $arr\
    \ = explode('.',$S);\n    if(is_array($arr)) {\n        $count = 0;\n        foreach\
    \ ($arr as $word) {\n            if(strpos($word,'I') === 0) {\n             \
    \   $count += 1;\n            }\n        }\n        return $count;\n    }\n}\n\
    function candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx772wlsk.php:28\n\
    Stack trace:\n#0 /tmp/tmpx772wlsk.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpx772wlsk.php\
    \ on line 28\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  $S\
    \ = explode('.',$S);\n  for($i=0; $i < sizeof($S); $i++){\n    if (substr($S[$i],\
    \ 0, 1) == \"I\") {\n      $B = 1;\n    } else {\n      $B = 0;\n    }\n  }\n\
    \  return $B;\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoz3o9ln0.php:28\n\
    Stack trace:\n#0 /tmp/tmpoz3o9ln0.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpoz3o9ln0.php\
    \ on line 28\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $words\
    \ = explode(\".\",$S);\n    $bored = 0;\n    $flag = false;\n    foreach($words\
    \ as $word){\n        if ($word==\"I\") {\n            $flag = true;\n       \
    \ }\n        else{\n            if ($flag){\n                $bored++;\n     \
    \           $flag = false;\n            }\n        }\n    }\n    return $bored;\n\
    }\n</code>\nAnd here's the same solution but without using a function. \n<code>\n\
    function candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp9e_p3_av.php
    on line 27

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n\t$i\
    \ = 1;\n\t$is_bored = FALSE;\n\twhile ($i <= strlen($S)) {\n\t\tif ($S[($i-1)]\
    \ == \".\") {\n\t\t\t$i++;\n\t\t\tif ($S[($i-1)] == \".\") {\n\t\t\t\t$i++;\n\t\
    \t\t\tif ($S[($i-1)] == \"!\") {\n\t\t\t\t\t$is_bored = FALSE;\n\t\t\t\t\tbreak;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ($S[($i-1)] == \".\") {\n\t\t\t$i++;\n\t\t\t\
    if ($S[($i-1)] == \".\") {\n\t\t\t\t$is_bored = FALSE;\n\t\t\t\tbreak;\n\t\t\t\
    }\n\t\t}\n\t\tif ($S[($i-1)] == \"?\") {\n\t\t\t$i++;\n\t\t\tif ($S[($i-1)] ==\
    \ \"!\") {\n\t\t\t\t$is_bored = FALSE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif\
    \ ($S[($i-1)] == \"!\") {\n\t\t\t$i++;\n\t\t\tif ($S[($i-1)] == \".\") {\n\t\t\
    \t\t$is_bored = FALSE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t$i++;\n\t}\n\treturn\
    \ $is_bored;\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcjfgv4k7.php:55\n\
    Stack trace:\n#0 /tmp/tmpcjfgv4k7.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpcjfgv4k7.php\
    \ on line 55\n"
  timestamp: 1660028134
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredoms\
    \ = explode('.', $S);\n    $boredom_count = count($boredoms);\n    $boredom_count\
    \ = 0;\n    foreach ($boredoms as $boredom) {\n        if ($boredom[0] == 'I')\
    \ {\n            $boredom_count++;\n        }\n    }\n    return $boredom_count;\n\
    }\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyuodsopn.php:28\n\
    Stack trace:\n#0 /tmp/tmpyuodsopn.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpyuodsopn.php\
    \ on line 28\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredom_array\
    \ = array('.', '?', '!');\n    $boredom_count = 0;\n    foreach($boredom_array\
    \ as $boredom) {\n        if (strpos($S, $boredom) !== false) {\n            $boredom_count++;\n\
    \        }\n    }\n    return $boredom_count;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a |>\nThis should work:\n<code>\n$sentence = \"I love the sky is blue. She\
    \ is nice!\";\n\n$boredom = preg_match(\"/^I(.*?[^\\.\\?!])/\", $sentence);\n\n\
    if ($boredom) {\n    echo \"$boredom boredoms found\";\n} else {\n    echo \"\
    No boredom found\";\n}\n</code>\n<|/ a tags=php,regex dscore=0 |>\n<| a dscore=0\
    \ |>\nThis is not an answer to your question but a way to do it in the way you\
    \ asked.\nI suggest you to use explode function to split the sentence into sentences\
    \ and then just count how many of them contain \"I\".\n<code>\n$sentence = \"\
    I love the sky is blue. She is nice!\";\n$splitSentence = explode(\".\", $sentence);\n\
    \n$boredoms = count(array_filter(\n    $splitSentence,\n    function($e) use ($splitSentence)\
    \ {\n        return stripos($e, \"I\") !== false;\n    }\n));\n\necho $boredoms;\n\
    </code>\n<|/ a tags=php,regex |>\n<| a dscore=0 tags=php,regex |>\nMy answer is\
    \ quite similar to others, but it might be more efficient. I don't think that\
    \ preg_match can be replaced by regex. Using regex might be more efficient, though.\n\
    <code>\n$sentence = \"I love the sky is blue. She is nice!\";\n\npreg_match(\"\
    /^I[\\s\\S]*?[^\\.\\?!]/\", $sentence, $boredom);\n\nif (isset($boredom[0])){\n\
    \  echo \"$boredom[0] boredoms found\";\n} else {\n  echo \"No boredom found\"\
    ;\n}\n</code>\n<|/ a |>\n<| c |>\nI think this is actually the fastest way to\
    \ do it.\n<|/ c |>\n<| c |>\nI made a benchmark test on a large array of 10000\
    \ sentences, and the regex is significantly slower.\n<|/ c |>\n<| a |>\nAs you\
    \ didn't specify a concrete input, I \nfunction candidate(...$args) {\n    return\
    \ is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp89wz_6mz.php
    on line 20

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $count\
    \ = 0; # count the boredoms here\n    $words = explode('.', $S);\n    $words =\
    \ explode('?', $S);\n    $words = explode('!', $S);\n    $words[] = 'I';\n   \
    \ foreach($words as $w){\n        if(preg_match('/\\b'.$w.'\\b/i',$S)){\n    \
    \        $count++;\n        }\n    }\n    return $count;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=php,string,preg-match-all dscore=2 |>\nThe best way to achieve\
    \ this is to split it into sentences and then check each word for boredom:\n<code>\n\
    $str = 'The sky is blue. The sun is shining. I love this weather';\n$sentences\
    \ = explode('.', $str);\n$sentences = explode('!', $str);\n$sentences = explode('?',\
    \ $str);\n$sentences[] = 'I';\n$boredom = 0;\nforeach ($sentences as $sentence)\
    \ {\n    if (stristr($sentence, 'I') !== false) {\n        $boredom++;\n    }\n\
    }\n</code>\n<|/ a |>\n<| a tags=php,string,preg-match-all |>\n<code>\n<?php\n\n\
    $string = \"The sky is blue. The sun is shining. I love this weather\";\n$boredoms\
    \ = preg_match_all('!((I|i)(\\.|!|!\\.|\\.\\?|\\?\\))!',$string,$matches);\n\n\
    echo $boredoms;\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmptzgi3epx.php
    on line 23

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n\t$words\
    \ = explode('.', $S);\n\tforeach ($words as $word) {\n\t\tif ($word[0] == 'I')\
    \ {\n\t\t\treturn 1;\n\t\t}\n\t}\n\treturn 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe1f15iv6.php:26\n\
    Stack trace:\n#0 /tmp/tmpe1f15iv6.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpe1f15iv6.php\
    \ on line 26\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $A=explode('.',$S);\n\
    \    $B=explode('.',$S);\n    $C=explode('?',$S);\n    $D=explode('!',$S);\n \
    \   $i=0;\n    $C=array_count_values($C);\n    $D=array_count_values($D);\n  \
    \  $S=array_count_values($B);\n    foreach ($A as $a){\n        if($S[$i]==$a){\n\
    \            $i++;\n        }\n    }\n    if(isset($C[$a])){\n        $i++;\n\
    \    }\n    if(isset($D[$a])){\n        $i++;\n    }\n    if($i==0){\n       \
    \ return 0;\n    }\n    return 1;\n}\n</code>\n<|/ a tags=php,nlp dscore=2 |>\n\
    <| a dscore=1 |>\nI believe this to be the simplest way of doing this without\
    \ using any loops or any complex regex.\n<code>\n<?php\n$boredoms = count(array_filter($boredoms,\
    \ create_function('$boredom', 'return (strpos($boredom, \"I\") !== false);')));\n\
    </code>\n<|/ a tags=php,nlp |>\n<| c |>\nThis does not work, at least not with\
    \ the sample input given in the original post.\n<|/ c |>\n<| a dscore=1 |>\nAs\
    \ far as I know, there is no simple way to do this. However, you can do it with\
    \ some string functions and loops, as follows:\n<code>\n$string = \"The sky is\
    \ blue. The sun is shining. I love this weather.\";\n$matches = array();\n$matches\
    \ = preg_match_all(\"/(?:I|\\b)(\\w+)\\b(?:\\.|!|?)\\b(?:I|\\b)/\", $string, $matches);\n\
    $boredoms = count($matches[0]);\n</code>\nThe $matches variable will contain the\
    \ number of boredoms in the $string variable. You can do more tests to get what\
    \ you want.\n<|/ a tags=php,nlp |>\n<| a tags=php,nlp |>\n<code>\n$string = \"\
    The sky is blue. The sun is shining. I love this weather.\";\n$boredoms = preg_match_all('/\\\
    bI\\b/', $string, $matches);\necho $boredoms;\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=php,nlp |>\nI believe this to be the simplest way of doing this without\
    \ using any loops or any complex regex.\n<code>\n$string = \"The \nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpbuggitip.php
    on line 35

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $I\
    \ = (strpos($S,\"I\") === 0);\n    $S=explode(\".\",$S);\n    foreach ($S as $i)\
    \ {\n        $i=trim($i);\n        if ($I && $i <> \"I\")\n            return\
    \ 0;\n        if (!$I && $i <> \"I\")\n            return 0;\n    }\n    return\
    \ 1;\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love It\
    \ !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp04i0448e.php:30\n\
    Stack trace:\n#0 /tmp/tmp04i0448e.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp04i0448e.php\
    \ on line 30\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  if\
    \ (preg_match(\"/^I[!.]?.*/\", $S) == 0) {\n    return 0;\n  }\n  else {\n   \
    \ return 1;\n  }\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpds0swqwy.php:25\n\
    Stack trace:\n#0 /tmp/tmpds0swqwy.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpds0swqwy.php\
    \ on line 25\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  global\
    \ $boredom;\n  $boredom=0;\n  $words=explode(\" \",$S);\n  foreach($words as $word)\
    \ {\n    if (substr($word,0,1)==\"I\") {\n      $boredom++;\n    }\n  }\n  return\
    \ $boredom;\n}\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_dsdma1z.php:27\n\
    Stack trace:\n#0 /tmp/tmp_dsdma1z.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp_dsdma1z.php\
    \ on line 27\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  //\
    \ Split S\n  $bored = explode('.',$S);\n\n  // count bored sentences\n  $boredCount\
    \ = 0;\n  foreach($bored as $B){\n    if($B == \"I\"){\n      if($boredCount ==\
    \ 0){\n        $boredCount = 1;\n      }\n      else {\n        $boredCount =\
    \ $boredCount+1;\n      }\n    }\n  }\n  return $boredCount;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpipwukppk.php:36\n\
    Stack trace:\n#0 /tmp/tmpipwukppk.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpipwukppk.php\
    \ on line 36\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    list($bored,$boredcount,$S,$bored,$boredcount,$S,$bored,$boredcount,$S)=explode('.',$S,4);\n\
    \    return ($bored=='I') ? $boredcount : false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmpgyxx77u7.php on line 11\n\n\
    Warning: Undefined array key 2 in /tmp/tmpgyxx77u7.php on line 11\n\nWarning:\
    \ Undefined array key 3 in /tmp/tmpgyxx77u7.php on line 11\n\nWarning: Undefined\
    \ array key 4 in /tmp/tmpgyxx77u7.php on line 11\n\nWarning: Undefined array key\
    \ 5 in /tmp/tmpgyxx77u7.php on line 11\n\nWarning: Undefined array key 6 in /tmp/tmpgyxx77u7.php\
    \ on line 11\n\nWarning: Undefined array key 7 in /tmp/tmpgyxx77u7.php on line\
    \ 11\n\nWarning: Undefined array key 8 in /tmp/tmpgyxx77u7.php on line 11\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpgyxx77u7.php:20\nStack\
    \ trace:\n#0 /tmp/tmpgyxx77u7.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpgyxx77u7.php\
    \ on line 20\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredoms\
    \ = preg_match('/^I[\\. !?]/i', $S);\n    return $boredoms;\n}\n</code>\n<|/ a\
    \ |>\n<| a dscore=2 |>\nI would go about this with a regex and a loop.\n<code>\n\
    function candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp77iymm95.php
    on line 14

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    //\
    \ Declare a variable to hold the count of boredoms.\n    $count = 0;\n    // Declare\
    \ a variable to hold the last letter of the word.\n    $last_letter = '';\n  \
    \  // Loop through each word in the string.\n    foreach (explode('.', $S) as\
    \ $w) {\n        // If the word starts with a boredom, increment the count.\n\
    \        if (strpos($w, \"I\") === 0) {\n            $count++;\n        }\n  \
    \      // Remember the last letter of the word.\n        $last_letter = $w[0];\n\
    \    }\n    // Return the count.\n    return $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0v9uxua_.php:34\n\
    Stack trace:\n#0 /tmp/tmp0v9uxua_.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp0v9uxua_.php\
    \ on line 34\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  $arr1\
    \ = explode('.', $S);\n  $arr2 = explode('?', $S);\n  $arr3 = explode('!', $S);\n\
    \  return $arr1[0] == \"I\" || $arr2[0] == \"I\" || $arr3[0] == \"I\";\n}\n\n\
    function candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsagm3mdw.php:22\n\
    Stack trace:\n#0 /tmp/tmpsagm3mdw.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpsagm3mdw.php\
    \ on line 22\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    foreach\
    \ ($S as $i)\n        if ($i{0} == 'I')\n            return 1;\n    return 0;\n\
    }\nfunction candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Array and string offset access syntax with curly braces is no longer
    supported in /tmp/tmp4a0hfdzd.php on line 12

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  $bored\
    \ = false;\n  $words = explode(\".\", $S);\n  foreach($words as $word) {\n   \
    \ if($word == \"I\") {\n      $bored++;\n    }\n  }\n  return $bored;\n}\n</code>\n\
    <|/ a tags=php,math |>\n<| c |>\nthank you, I see now why i was having so much\
    \ trouble with it being so complicated. I appreciate your help and thank you for\
    \ the example!\n<|/ c |>\n<| c |>\nJust an FYI: this solution is not perfect,\
    \ as it misses the word \"I\" in the beginning of a sentence.  For example, `is_bored(\"\
    Hello world\")` is 0, whereas `is_bored(\"The sky is blue. Ilove this weather\"\
    )` is 1.\n<|/ c |>\n<| a dscore=0 |>\nHere's a pure regex solution using preg_match_all():\n\
    <code>\nfunction candidate(...$args) {\n    return is_bored(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love It\
    \ !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpbg_l2pnj.php
    on line 20

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $pattern\
    \ = \"/^I\\s?love\\s?this\\s?(.*\\.)/\";\n    if (preg_match($pattern, $S) > 0)\
    \ {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"I feel good today. I will be productive.\
    \ will kill It\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    You and I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjr6lg379.php:26\n\
    Stack trace:\n#0 /tmp/tmpjr6lg379.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpjr6lg379.php\
    \ on line 26\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n\treturn\
    \ strpos($S, \"I\") === 0;\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ksm6elw.php:19\n\
    Stack trace:\n#0 /tmp/tmp0ksm6elw.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp0ksm6elw.php\
    \ on line 19\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $bored\
    \ = 0;\n    for ($i = 0; $i < strlen($S); $i++) {\n        $bored += ($S[$i] ==\
    \ \"I\") * 1;\n    }\n    return $bored;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgq6wbkis.php:24\n\
    Stack trace:\n#0 /tmp/tmpgq6wbkis.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpgq6wbkis.php\
    \ on line 24\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredoms\
    \ = explode('.', preg_replace('~([?!])~', '$1'.\"\\n\", $S));\n    $boredoms =\
    \ array_filter(explode(\"\\n\", $boredoms));\n    $boredoms = array_unique($boredoms);\n\
    \    $boredoms = array_map('trim', $boredoms);\n    $boredoms = array_filter($boredoms);\n\
    \    if (count($boredoms)) {\n        $boredoms = array_pop($boredoms);\n    \
    \    return strlen($boredoms);\n    }\n    return 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: explode(): Argument #2 ($string) must\
    \ be of type string, array given in /tmp/tmptjxwxi1_.php:12\nStack trace:\n#0\
    \ /tmp/tmptjxwxi1_.php(12): explode('\\n', Array)\n#1 /tmp/tmptjxwxi1_.php(24):\
    \ is_bored('Hello world')\n#2 /tmp/tmptjxwxi1_.php(28): candidate('Hello world')\n\
    #3 /tmp/tmptjxwxi1_.php(36): test()\n#4 {main}\n  thrown in /tmp/tmptjxwxi1_.php\
    \ on line 12\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n\t$boredom_counts\
    \ = 0;\n\t$S = str_replace(\"?\", \".\", $S);\n\t$S = str_replace(\"!\", \".\"\
    , $S);\n\t$S = explode(\".\", $S);\n\tforeach ($S as $word) {\n\t\tif ($word ==\
    \ \"I\") {\n\t\t\t$boredom_counts++;\n\t\t}\n\t}\n\treturn $boredom_counts;\n\
    }\nfunction candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8zxf8pfo.php:29\n\
    Stack trace:\n#0 /tmp/tmp8zxf8pfo.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp8zxf8pfo.php\
    \ on line 29\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $arr=explode('.',$S);\n\
    \    $boredom=0;\n    $boredom=1;\n    $boredom=count(array_filter($arr,'strcmp',array('I')));\n\
    \    return $boredom;\n}\n</code>\n<|/ a tags=php |>\n<| a |>\nYou can use a regex:\n\
    <code>\n$str = \"The sky is blue. The sun is shining. I love this weather\";\n\
    preg_match_all('/(?<=\\.|\\?|!).+?\\b/i', $str, $matches);\n$count = count($matches[0]);\n\
    </code>\nThe regex is based on the fact that words ending in one of these characters\
    \ are sentences, and that the sentences are delimited by these characters. \\\
    b means that a word boundary is required in order for the expression to match.\
    \ You can read about it in the documentation.\n<|/ a tags=php dscore=2 |>\n<|\
    \ c |>\nOh, I did not know about the `\\b` word boundary. I'll read up on it.\
    \ Thank you! :)\n<|/ c |>\n<| c |>\n`\\b` means _word boundary_; i.e. the end\
    \ of a word. http://stackoverflow.com/questions/22937618/reference-what-does-this-regex-mean\n\
    <|/ c |>\n<| c |>\nOh, so you mean that `\\b` means that a word boundary is required.\
    \ I've never heard of that before. Thank you! :)\n<|/ c |>\n<| c |>\nYes. I suggest\
    \ you take a look at [this](http://www.regular-expressions.info/wordboundaries.html)\
    \ article which explains it in great detail.\n<|/ c |>\n<| a dscore=2 |>\nUsing\
    \ explode(), you could do something like this if you wanted to use an array to\
    \ store the sentence counts:\n<code>\n$str = \"The sky is blue. The sun is shining.\
    \ I love this weather\";\n\n$arrSentences = explode(\".?!\", $str);\n\n$boredomCount\
    \ = 0;\n\nforeach($arrSentences as $sentence)\n{\n    if($sentence[0] === \"I\"\
    )\n        $boredomCount++;\n}\n\necho \"There are \" . $boredomCount . \" boredom(s)\"\
    ;\n</code>\n<|/ a tags=php |>\n<| c |>\nThis isn't really what he asked for, though,\
    \ as he already has a working solution, he's trying to learn how it works :P\n\
    <|/ c |>\n<| a |>\nSince explode() splits the string into an array you can do\
    \ the following:\n<code>\n$str = \"The sky is \nfunction candidate(...$args) {\n\
    \    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpqctuzxgj.php
    on line 17

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    return\
    \ preg_match(\"/\\.\\?|\\!\\./\", $S);\n}\n\nfunction candidate(...$args) {\n\
    \    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwu4uxh7p.php:21\n\
    Stack trace:\n#0 /tmp/tmpwu4uxh7p.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpwu4uxh7p.php\
    \ on line 21\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n\t$bored\
    \ = 0;\n\tfor ($i=0; $i < strlen($S); $i++) {\n\t\t$S2 = substr($S, $i, strlen($S));\n\
    \t\t$pos = strpos($S2, 'I');\n\t\tif ($pos > 0) {\n\t\t\t$bored++;\n\t\t}\n\t\
    }\n\treturn $bored;\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp83smujr3.php:29\n\
    Stack trace:\n#0 /tmp/tmp83smujr3.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp83smujr3.php\
    \ on line 29\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredomCount\
    \ = 0;\n    $sentence = explode('.',$S);\n    $boredomCount = count(array_filter($sentence,\n\
    \                                  function($elem) {\n                       \
    \             return $elem[0] == 'I';\n                                  }\n \
    \   ));\n    return $boredomCount;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\nUse preg_match_all with word boundaries \\b:\n<code>\n<?php\n\n$strings\
    \ = [\n    'The sky is blue. The sun is shining. I love this weather.',\n    'Hello\
    \ world'\n];\n\n$pattern = '~\\bI\\b~';\n\nforeach ($strings as $string) {\n \
    \   if (preg_match_all($pattern, $string, $matches)) {\n        echo \"Found \"\
    \ . count($matches[0]) . \" matches for \" . $string;\n    }\n}\n</code>\nOutput:\n\
    <code>\nFound 1 matches for The sky is blue. The sun is shining. I love this weather.\n\
    Found 1 matches for Hello world\n</code>\nLive demo\n<|/ a tags=php,explode,arrays\
    \ |>\n<| a tags=php,explode,arrays |>\nHow about using regex? The following code\
    \ works for me.\n<code>\n$string = 'The sky is blue. The sun is shining. I love\
    \ this weather.';\n$pattern = '/\\bI\\b/';\npreg_match_all($pattern, $string,\
    \ $matches);\necho count($matches[0]);\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,explode,arrays\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp69r9bjtv.php
    on line 20

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    return\
    \ substr_count($S, 'I');\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_v6hw3_l.php:20\n\
    Stack trace:\n#0 /tmp/tmp_v6hw3_l.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp_v6hw3_l.php\
    \ on line 20\n"
  timestamp: 1659822393
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredoms\
    \ = 0;\n    $S1 = explode(\".\", $S);\n    for ($i = 1; $i < count($S1); $i++)\
    \ {\n        if ($S1[$i][0] == \"I\")\n            $boredoms = $boredoms + 1;\n\
    \    }\n    return $boredoms;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\n\
    Thanks for the help but this answer doesn't solve the problem of counting the\
    \ number of sentences.\n<|/ c |>\n<| c |>\nI added an alternative solution using\
    \ a loop.\n<|/ c |>\n<| c |>\nThanks so much for that answer. This actually works\
    \ so I'll accept your answer.\n<|/ c |>\n<| a tags=arrays,php |>\nYou can use\
    \ the explode method to split your sentence into an array based on a character:\n\
    <code>\n$sentence = 'The sky is blue. The sun is shining. I love this weather.\
    \ Today is sunny. Have a good day!';\n$sentenceArray = explode('.', $sentence);\n\
    </code>\nThen you just need to loop over this array and count the occurrences\
    \ of \"I\" as the first word of each sentence.\n<code>\n$boredoms = count($sentenceArray);\n\
    for($i=0; $i<$boredoms; $i++){\n    if($sentenceArray[$i][0] == 'I'){\n      \
    \  $boredoms++;\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php dscore=0\
    \ |>\nYou can do it in one line with array_filter :\n<code>\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpj6v7i8zp.php
    on line 19

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  //\
    \ Your code goes here.\n  $boredom = array();\n  $boredom[$S[0]] = 0;\n  for ($i\
    \ = 1; $i < strlen($S); $i++) {\n    if ($S[$i-1] == \"I\") {\n      $boredom[$S[$i]]\
    \ = $boredom[$S[$i - 1]] + 1;\n    }\n  }\n  return max($boredom);\n}\n</code>\n\
    <|/ a |>\n<| a |>\n<code>\n<?php\n$string = 'The sky is blue. The sun is shining.\
    \ I love this weather';\n$boredoms = explode('.',preg_replace('/[^A-Z0-9]+/',\
    \ '', $string));\n\n$boredoms = array_count_values($boredoms);\n\necho '<pre>';\n\
    print_r($boredoms);\necho '</pre>';\nfunction candidate(...$args) {\n    return\
    \ is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpp_jmjgyp.php
    on line 21

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $N\
    \ = count(explode(\".\", $S));\n    $count = 0;\n    foreach (explode(\".\", $S)\
    \ as $word) {\n        if (substr($word, 0, 1) == \"I\") {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n \
    \   return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp49v7ou0m.php:27\n\
    Stack trace:\n#0 /tmp/tmp49v7ou0m.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp49v7ou0m.php\
    \ on line 27\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    if\
    \ (preg_match('/^\\bj/i', $S)) return 0;\n    if (preg_match('/\\./', $S)) return\
    \ 0;\n    if (preg_match('/\\?/', $S)) return 0;\n    if (preg_match('/!/', $S))\
    \ return 0;\n    return 1;\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphml6couq.php:23\n\
    Stack trace:\n#0 /tmp/tmphml6couq.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphml6couq.php\
    \ on line 23\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n\t$boredoms\
    \ = array(\n\t\t\"I\",\n\t\t\"I.\",\n\t\t\"!\",\n\t\t\"!\",\n\t\t\".\",\n\t\t\"\
    .\",\n\t\t\"?\",\n\t\t\"?\",\n\t\t\"!\",\n\t\t\"!\",\n\t);\n\t$boredom_count =\
    \ 0;\n\tforeach($boredoms as $boredom) {\n\t\tif(strpos($S, $boredom) !== false)\
    \ {\n\t\t\t$boredom_count++;\n\t\t}\n\t}\n\treturn $boredom_count;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"I feel good today. I will be productive.\
    \ will kill It\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    You and I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp60vzx89c.php:38\n\
    Stack trace:\n#0 /tmp/tmp60vzx89c.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp60vzx89c.php\
    \ on line 38\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $S=explode('.',$S);\n\
    \    $i=0;\n    foreach ($S as $k=>$v){\n        if($v=='I'){\n            $i++;\n\
    \        }\n    }\n    return $i;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2gwwqyf.php:28\n\
    Stack trace:\n#0 /tmp/tmpg2gwwqyf.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpg2gwwqyf.php\
    \ on line 28\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    foreach\
    \ (explode('.',$S) as $a) {\n        if ($a == \"I\" || $a == \"I'm\" || $a ==\
    \ \"I'd\")\n            return 0;\n    }\n    return 1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpanp0ea48.php:23\n\
    Stack trace:\n#0 /tmp/tmpanp0ea48.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpanp0ea48.php\
    \ on line 23\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredoms\
    \ = explode(\".\", $S);\n    $bored = 0;\n    foreach ($boredoms as $boredom)\
    \ {\n        if (strpos($boredom, \"i\") === 0) {\n            $bored += 1;\n\
    \        }\n    }\n    return $bored;\n}\n\nfunction candidate(...$args) {\n \
    \   return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph_xjcwlj.php:28\n\
    Stack trace:\n#0 /tmp/tmph_xjcwlj.php(34): test()\n#1 {main}\n  thrown in /tmp/tmph_xjcwlj.php\
    \ on line 28\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredoms\
    \ = explode('.', $S);\n    $boredomsCount = count($boredoms);\n    $boredomsCounter\
    \ = 0;\n    foreach($boredoms as $boredom) {\n        $boredomsCounter += strpos($boredom,\
    \ 'I');\n    }\n    return $boredomsCount == $boredomsCounter;\n}\n</code>\n<|/\
    \ a tags=php,count,arrays |>\n<| c |>\nthank you very much for the answer and\
    \ sorry for the late reply. I was a bit busy with other projects. I haven't tested\
    \ your answer, but I am sure it will work. I am very glad to see someone else\
    \ taking the time to help a beginner. I'm sorry I took so long to select this\
    \ as the best answer.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpa9erp6oa.php
    on line 19

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  $count\
    \ = 0;\n  $array = explode(\".\", $S);\n  foreach ($array as $value) {\n    if\
    \ (substr($value, 0, 4) == \"I\") {\n      $count++;\n    }\n  }\n  return $count;\n\
    }\nfunction candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqyekta0d.php:27\n\
    Stack trace:\n#0 /tmp/tmpqyekta0d.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpqyekta0d.php\
    \ on line 27\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $S\
    \ = explode(\".\", $S);\n    $N = count($S);\n    \n    for($i = 0; $i < $N; $i++){\n\
    \        $word = $S[$i];\n        $boredom = strpos($word, \"I\");\n        if($boredom\
    \ !== false){\n            $boredom++;\n            return $boredom;\n       \
    \ }\n    }\n    return 0;\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0s8w3xi.php:31\n\
    Stack trace:\n#0 /tmp/tmpp0s8w3xi.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpp0s8w3xi.php\
    \ on line 31\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $I\
    \ = 0;\n    $I = 0;\n    for($i=0; $i<strlen($S); $i++){\n        if($S[$i] ==\
    \ '.'){\n            if(($S[$i-1]=='?' || $S[$i-1]=='!') && ($S[$i]=='I'))\n \
    \               $I++;\n        }\n    }\n    return $I;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeafsn1l6.php:29\n\
    Stack trace:\n#0 /tmp/tmpeafsn1l6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpeafsn1l6.php\
    \ on line 29\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $S\
    \ = str_replace(\" .\", \". \", $S); // Replace repeated punctuation with single\
    \ period.\n    $S = str_replace(\" ?\", \"? \", $S); // Replace repeated punctuation\
    \ with single question.\n    $S = str_replace(\" !\", \"! \", $S); // Replace\
    \ repeated punctuation with single exclamation.\n    $S = preg_replace('/\\s+/',\
    \ ' ', $S); // Replace repeated spaces with single space.\n    $S = preg_replace('/([^A-Za-z0-9])+/',\
    \ '', $S); // Remove all non-alphanumeric characters.\n    $S = preg_replace('/\\\
    b[a-z]{3,}\\b/', '', $S); // Remove all words 3-6 letters long.\n    $S = preg_replace('/\\\
    b[A-Z][a-z]{2,}\\b/', '', $S); // Remove all words 2-3 letters long.\n    $S =\
    \ preg_replace('/\\b[a-z]{4,}\\b/', '', $S); // Remove all words 4-6 letters long.\n\
    \    $S = preg_replace('/\\.$/', '', $S); // Remove trailing period.\n    $S =\
    \ preg_replace('/\\.\\.$/', '', $S); // Remove any double period at the end of\
    \ the sentence.\n    $S = preg_replace('/\\s\\?\\!\\s/', '', $S); // Remove ?\
    \ or ! at the end of the sentence.\n    $S = preg_replace('/\\s+/', ' ', $S);\
    \ // Replace repeated spaces with single space.\n    $boredom_array = explode('.',\
    \ $S); // Split on period.\n    $boredoms = count($boredom_array); // Count number\
    \ of boredoms.\n    return $boredoms;\n}\n\nfunction candidate(...$args) {\n \
    \   return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsq6vnbwp.php:33\n\
    Stack trace:\n#0 /tmp/tmpsq6vnbwp.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpsq6vnbwp.php\
    \ on line 33\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  $S\
    \ = preg_replace(\"/[^\\.\\?\\!]+/\",\"\",$S);\n  return substr_count($S,\"I\"\
    )/strlen($S) < 0.5;\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Division by zero in /tmp/tmpjfvzn4ov.php:12\n\
    Stack trace:\n#0 /tmp/tmpjfvzn4ov.php(16): is_bored('')\n#1 /tmp/tmpjfvzn4ov.php(20):\
    \ candidate('Hello world')\n#2 /tmp/tmpjfvzn4ov.php(28): test()\n#3 {main}\n \
    \ thrown in /tmp/tmpjfvzn4ov.php on line 12\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  $S=explode('.',$S);\n\
    \  $S=explode('?',$S);\n  $S=explode('!',$S);\n  foreach($S as $w)\n    if($w=='I')\n\
    \      return 1;\n  return 0;\n}\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: explode(): Argument #2 ($string) must\
    \ be of type string, array given in /tmp/tmpumqcl42a.php:12\nStack trace:\n#0\
    \ /tmp/tmpumqcl42a.php(12): explode('?', Array)\n#1 /tmp/tmpumqcl42a.php(20):\
    \ is_bored(Array)\n#2 /tmp/tmpumqcl42a.php(24): candidate('Hello world')\n#3 /tmp/tmpumqcl42a.php(32):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmpumqcl42a.php on line 12\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  global\
    \ $bored_sentences;\n  global $bored_words;\n  // Initialize the variables\n \
    \ $bored_words = $bored_sentences = 0;\n  // Loop through the sentence and check\
    \ for bored words\n  foreach (explode(\".\", $S) as $word)\n    $bored_words +=\
    \ (substr($word, 0, 1) == \"I\") ? 1 : 0;\n  // If the count is zero there is\
    \ no bored sentence\n  return $bored_words == 0;\n}\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcbgibx_2.php:26\n\
    Stack trace:\n#0 /tmp/tmpcbgibx_2.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpcbgibx_2.php\
    \ on line 26\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  $S\
    \ = preg_replace('/([.?!])/', '', $S);\n  $N = preg_match_all('/[I]/', '', $S);\n\
    \  return $N;\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpemfgtbmc.php:23\n\
    Stack trace:\n#0 /tmp/tmpemfgtbmc.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpemfgtbmc.php\
    \ on line 23\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  $i\
    \ = 0; $B = 0;\n  $S = explode('.', $S);\n  $B = count($S);\n  for($i; $i < $B;\
    \ $i++) {\n    if ($S[$i][0] != 'I') {\n      $B = 0;\n      break;\n    }\n \
    \ }\n  return $B;\n}\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppxrbv0mu.php:28\n\
    Stack trace:\n#0 /tmp/tmppxrbv0mu.php(35): test()\n#1 {main}\n  thrown in /tmp/tmppxrbv0mu.php\
    \ on line 28\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    global\
    \ $boredom;\n    $boredom = 0;\n    $boredom = explode(\".\",$S);\n    for($i=0;$i<sizeof($boredom);$i++)\
    \ {\n        if ($boredom[$i] === 'I' && substr($boredom[$i+1],0,1) == 'I'){\n\
    \            $boredom[$i+1] = $boredom[$i];\n        }\n    }\n    $boredom =\
    \ array_count_values($boredom);\n    return $boredom[\"I\"];\n}\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"I\" in /tmp/tmp66m1ffhq.php on line 20\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp66m1ffhq.php:27\nStack\
    \ trace:\n#0 /tmp/tmp66m1ffhq.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp66m1ffhq.php\
    \ on line 27\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $I\
    \ = 0;\n    $A = 'I';\n    $S2 = explode('.', $S);\n    foreach ($S2 as $key =>\
    \ $s) {\n        if (strpos($s, $A) === 0) {\n            $I++;\n        }\n \
    \   }\n    return $I;\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp10q3lx5i.php:28\n\
    Stack trace:\n#0 /tmp/tmp10q3lx5i.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp10q3lx5i.php\
    \ on line 28\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  $words=explode('.',$S);\n\
    \  foreach ($words as $word)\n    if (strstr($word,'I')) return 1;\n  return 0;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nHere's a solution using preg_match()\
    \ in PHP.\n<code>\n<?php\n$sentence = \"The sky is blue. The sun is shining. I\
    \ love this weather.\";\nif (preg_match('/\\bI\\b/u', $sentence)) {\n    echo\
    \ \"Found 'I' in sentence.\\n\";\n} else {\n    echo \"Did not find 'I' in sentence.\\\
    n\";\n}\n</code>\nOutput:\n<code>\nFound 'I' in sentence.\n</code>\nThe /u modifier\
    \ tells preg_match() to treat $sentence as a Unicode string.  PHP 5.3.6+ is required\
    \ for this to work.\n<|/ a tags=php |>\n<| a |>\nI came across a similar question\
    \ and found a solution on the PHP forum here. The script below is tested with\
    \ PHP 5.6.\nThe only difference is that my code does not use array_map(), as suggested\
    \ in the other answers.\n<code>\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpmr76xryz.php
    on line 16

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  $S\
    \ = trim($S);\n  $s = explode('.', $S);\n  if($s[0] !== 'I'){\n    return 0;\n\
    \  }\n  $s = explode('.', $S);\n  if($s[1] !== '?'){\n    return 0;\n  }\n  return\
    \ 1;\n}\nfunction candidate(...$args) {\n    return is_bored(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love It\
    \ !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp20gbsljc.php:29\n\
    Stack trace:\n#0 /tmp/tmp20gbsljc.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp20gbsljc.php\
    \ on line 29\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    if\
    \ ($S == '')\n        return 0;\n    list($a, $b) = explode('.', $S);\n    $first\
    \ = ($a=='I');\n    $second = ($b=='I');\n    $third = (substr($a, 0, 1)=='I');\n\
    \    $fourth = (substr($b, 0, 1)=='I');\n    $first2third = (strpos($S, 'I', $first+1)!=FALSE);\n\
    \    $second2third = (strpos($S, 'I', $second+1)!=FALSE);\n    $third2fourth =\
    \ (strpos($S, 'I', $third+1)!=FALSE);\n    $fourth2fifth = (strpos($S, 'I', $fourth+1)!=FALSE);\n\
    \    if ($first2third)\n        $first2third = is_bored(substr($S, $first+1));\n\
    \    if ($second2third)\n        $second2third = is_bored(substr($S, $second+1));\n\
    \    if ($third2fourth)\n        $third2fourth = is_bored(substr($S, $third+1));\n\
    \    if ($fourth2fifth)\n        $fourth2fifth = is_bored(substr($S, $fourth+1));\n\
    \    if ($first2third && $second2third && $third2fourth && $fourth2fifth)\n  \
    \      return 1;\n    return 0;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Warning: Undefined array key 1 in /tmp/tmprbv8zlz1.php on line 13


    Deprecated: substr(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmprbv8zlz1.php on line 17


    Warning: Undefined array key 1 in /tmp/tmprbv8zlz1.php on line 13


    Deprecated: substr(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmprbv8zlz1.php on line 17


    Warning: Undefined array key 1 in /tmp/tmprbv8zlz1.php on line 13


    Deprecated: substr(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmprbv8zlz1.php on line 17


    Warning: Undefined array key 1 in /tmp/tmprbv8zlz1.php on line 13


    Deprecated: substr(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmprbv8zlz1.php on line 17


    Warning: Undefined array key 1 in /tmp/tmprbv8zlz1.php on line 13


    Deprecated: substr(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmprbv8zlz1.php on line 17


    Warning: Undefined array key 1 in /tmp/tmprbv8zlz1.php on line 13


    Deprecated: substr(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmprbv8zlz1.php on line 17


    Warning: Undefined array key 1 in /tmp/tmprbv8zlz1.php on line 13


    Deprecated: substr(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmprbv8zlz1.php on line 17


    Warning: Undefined array key 1 in /tmp/tmprbv8zlz1.php on line 13


    Deprecated: substr(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmprbv8zlz1.php on line 17


    Warning: Undefined array key 1 in /tmp/tmprbv8zlz1.php on line 13


    Deprecated: substr(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmprbv8zlz1.php on line 17


    Warning: Undefined array key 1 in /tmp/tmprbv8zlz1.php on line 13


    Deprecated: substr(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmprbv8zlz1.php on line 17


    Warning: Undefined array key 1 in /tmp/tmprbv8zlz1.php on line 13


    Deprecated: substr(): Passing null to parameter #1'
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredom\
    \ = array('.', '?', '!');\n    $count = count(explode('.', $S)) - count(explode('?',\
    \ $S)) - count(explode('!', $S));\n    \n    return ($boredom[$count] === \"I\"\
    );\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your answer but I'm\
    \ still a little confused. Is my code correct? Why are you taking the average\
    \ of the count (which would return 0 for any number of sentences) and comparing\
    \ it to 0? What would you do if the average was greater than 0? Thanks again for\
    \ your help!\n<|/ c |>\n<| c |>\nAhh I see what you did there. Thank you for this!\
    \ I'm going to try this and let you know if it works\n<|/ c |>\n<| c |>\nI've\
    \ tried this but unfortunately, the code returns 0 on every input string. Any\
    \ ideas why this may be happening?\n<|/ c |>\n<| c |>\nThanks for your help but\
    \ I'm still getting the same output. Any ideas as to why?\n<|/ c |>\n<| c |>\n\
    I added my code with the changes you have suggested. It still is returning 0 every\
    \ time.\n<|/ c |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp7jw78s4d.php
    on line 16

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $bored\
    \ = 0;\n    $bored_char = array('.', '?', '!');\n    $words = explode('.', $S);\n\
    \    foreach ($words as $word) {\n        if ($word[0] === \"I\") {\n        \
    \    $bored++;\n        }\n    }\n    return $bored;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp45muqnzp.php:28\n\
    Stack trace:\n#0 /tmp/tmp45muqnzp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp45muqnzp.php\
    \ on line 28\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $bored\
    \ = 0;\n    $sentences = explode(\".\",$S);\n    foreach($sentences as $sentence)\
    \ {\n        if($sentence == \"I\") {\n            $bored++;\n        }\n    }\n\
    \    return $bored;\n}\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4pvwwws1.php:27\n\
    Stack trace:\n#0 /tmp/tmp4pvwwws1.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4pvwwws1.php\
    \ on line 27\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    global\
    \ $boredcount, $boredoms;\n\n    $S = preg_replace('/[\\.\\?\\!]+/', \" \", $S);\n\
    \    $S = explode(\" \", $S);\n    $S = preg_replace('/[\\.\\?\\!]+/', '', $S);\n\
    \n    foreach ($S as $s) {\n        if (strcmp($s, \"I\") == 0)\n            $boredcount++;\n\
    \    }\n\n    if ($boredcount > 0) {\n        $boredoms[] = $S;\n    }\n\n   \
    \ return $boredcount;\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_7kz85qu.php:34\n\
    Stack trace:\n#0 /tmp/tmp_7kz85qu.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp_7kz85qu.php\
    \ on line 34\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredoms\
    \ = 0;\n    foreach(explode('.', trim($S)) as $s) {\n        if (substr($s, 0,\
    \ 1) == \"I\") $boredoms += 1;\n    }\n    return $boredoms;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThanks for that - I understand how to implement the\
    \ is_bored() method but I'm really struggling to figure out how to incorporate\
    \ that into the function I need to create to find boredoms on my website - I'm\
    \ currently learning php/mysql/javascript and am really struggling. I'm sorry\
    \ if I'm not explaining this clearly - I'm really struggling to put my questions\
    \ right in the world of php.\n<|/ c |>\n<| c |>\nSo you have a website with a\
    \ user database, and you want to find how many people bore a particular topic.\
    \ You'd use php to grab the text from the database and pass it to your javascript\
    \ function.  I'll edit the answer to show you how\n<|/ c |>\n<| c |>\nOk, thanks\
    \ for that - I understand how to do it that way, but I'm struggling to figure\
    \ out how to incorporate the php into my existing javascript function. I really\
    \ appreciate your help on this - I'm just not getting it\n<|/ c |>\n<| c |>\n\
    If you're struggling with php and javascript, I'd suggest finding a javascript\
    \ course - it's going to help you understand the problem you're having, rather\
    \ than just writing a quick answer here on StackOverflow\n<|/ c |>\n<| c |>\n\
    thanks - I did buy a javascript course a couple of years back and am doing it\
    \ again. It's all pretty confusing for me! I'm really struggling with it - I think\
    \ I'm just really missing something obvious here - my knowledge of php and javascript\
    \ is pretty limited.\n<|/ c |>\n<| a dscore=0 tags=php,javascript |>\nThe issue\
    \ you are having is you are not returning anything from your function.\nThis would\
    \ be your function rewritten to include the $boredoms variable being returned\
    \ to the javascript function from the php script which calls it.\n<code>\n<?php\n\
    function candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpegz0n4sn.php
    on line 17

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $bored\
    \ = false;\n    $sentence_array = explode(\".\",$S);\n    foreach ($sentence_array\
    \ as $value) {\n        if (strpos($value,\"I\") === 0){\n            $bored =\
    \ true;\n        }\n    }\n    return $bored;\n}\n</code>\n<|/ a |>\n<| a dscore=1\
    \ |>\nYou could do something like this\n<code>\n<?php\n$input = \"Hello world.\"\
    ;\n\n$words = explode(' ', $input);\n$boredWordCount = 0;\n\nforeach ($words as\
    \ $word) {\n  if (strpos($word, 'I') === 0) {\n    $boredWordCount++;\n  }\n}\n\
    \necho $boredWordCount;\n</code>\n<|/ a tags=php,count |>\n<| c |>\nThank you\
    \ for your help :)\n<|/ c |>\n<| a tags=php,count |>\nYou can count the words\
    \ and filter out empty strings (empty spaces with no words inside) and count the\
    \ occurrences of the letter 'I'. \n<code>\n$boredWords = array_count_values(preg_grep('/^\\\
    S+$/i', $string));\n$boredWords['I']; // count the occurrences of 'I'\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\nYou could use array_count_values(). This\
    \ function will make a new array containing all of the counts of your given array.\
    \ So, for example:\n<code>\n$string = \"Hello World\";\n\n$array = array(\"Hello\"\
    , \"World\");\n\n$newArray = array_count_values($array);\n\nprint_r($newArray);\n\
    </code>\nWould print something like this:\n<code>\nArray\n(\n    [Hello] => 1\n\
    \    [World] => 1\n)\n</code>\nI hope this helps.\n<|/ a tags=php,count |>\n<|\
    \ a dscore=0 tags=php,count |>\n<code>\n<?php\n    $string = \"Hello world.\"\
    ;\n\n    // Use explode with space as delimter \n    $words = explode(' ', $string);\n\
    \n    // Count number of words in your sentence\n    $count = count($words);\n\
    \n    // If count is greater than 0\n    if ($count > 0) {\n        // Count number\
    \ of I in your sentence\n        $boredWordCount = count(array_count_values($words));\n\
    \n        // If count is greater than 0\n        if ($boredWordCount > 0) {\n\
    \            // Return it\n            return $boredWordCount;\n        }\n  \
    \  }\n\n    return 0;\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp_0afgq4_.php
    on line 20

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $words\
    \ = explode('.', $S);\n    $count = 0;\n    foreach($words as $word) {\n     \
    \   if($word == \"I\") {\n            $count ++;\n        }\n    }\n    return\
    \ $count;\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi7qapm33.php:28\n\
    Stack trace:\n#0 /tmp/tmpi7qapm33.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpi7qapm33.php\
    \ on line 28\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n\t$words=explode(\"\
    .\", $S);\n\tforeach ($words as $word) {\n\t\tforeach ($words as $word2) {\n\t\
    \t\tif ($word2 != $word) {\n\t\t\t\tif (($word == \"I\") || ($word == \"i\") ||\
    \ ($word == \"you\") || ($word == \"you're\") || ($word == \"we're\") || ($word\
    \ == \"we'll\") || ($word == \"you've\") || ($word == \"you'll\") || ($word ==\
    \ \"we've\") || ($word == \"i've\")) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn 0;\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcu_dhjab.php:31\n\
    Stack trace:\n#0 /tmp/tmpcu_dhjab.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpcu_dhjab.php\
    \ on line 31\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  $boredoms\
    \ = 0;\n  $words = explode('.', $S);\n  foreach($words as $word) {\n    $boredoms\
    \ += (strpos($word, 'I') !== false) ? 1 : 0;\n  }\n  return $boredoms;\n}\n</code>\n\
    In your other PHP scripts, you will use the function is_bored() like this:\n<code>\n\
    $count = get_boredoms_count($S);\n</code>\nThe function get_boredoms_count() should\
    \ look like this:\n<code>\n<?php\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp8yo9fpv4.php
    on line 18

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $result\
    \ = array_map(function ($word) { return (stripos($word, \"I\")) ? 1 : 0;}, explode(\"\
    . ? !\", $S));\n    return array_sum($result);\n}\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpie_431zk.php:21\n\
    Stack trace:\n#0 /tmp/tmpie_431zk.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpie_431zk.php\
    \ on line 21\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n\tglobal\
    \ $bored,$count;\n\t$bored = 0;\n\t$count = 0;\n\t$S = preg_replace('/[\\.\\?!]/','',$S);\n\
    \tforeach(explode('.',$S) as $sentence) {\n\t\tforeach(explode('!',$sentence)\
    \ as $word) {\n\t\t\tif($word[0]=='I') {\n\t\t\t\t$bored++;\n\t\t\t\t$count++;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn $bored;\n}\n\nfunction candidate(...$args) {\n \
    \   return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp172t7p0n.php:32\n\
    Stack trace:\n#0 /tmp/tmp172t7p0n.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp172t7p0n.php\
    \ on line 32\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  return\
    \ substr_count($S,'I')>0;\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppyodqgt4.php:19\n\
    Stack trace:\n#0 /tmp/tmppyodqgt4.php(27): test()\n#1 {main}\n  thrown in /tmp/tmppyodqgt4.php\
    \ on line 19\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  $count\
    \ = preg_match(\"/(^I.*\\.|I.*\\?.*|I.*!.*)/\", $S);\n  return $count;\n}\nfunction\
    \ candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"I feel good today. I will be productive.\
    \ will kill It\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    You and I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpycpeeofg.php:20\n\
    Stack trace:\n#0 /tmp/tmpycpeeofg.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpycpeeofg.php\
    \ on line 20\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredom_count=0;\n\
    \    $S=explode(\".\", $S);\n    for($i = 0; $i < count($S); $i++) {\n       \
    \ if($S[$i] == \"I\" && $i == 0) {\n            $boredom_count++;\n        }\n\
    \    }\n    return $boredom_count;\n}\nfunction candidate(...$args) {\n    return\
    \ is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphae8bbh3.php:27\n\
    Stack trace:\n#0 /tmp/tmphae8bbh3.php(33): test()\n#1 {main}\n  thrown in /tmp/tmphae8bbh3.php\
    \ on line 27\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredoms\
    \ = 0;\n    $bored = explode(\".\", $S);\n    foreach ($bored as $boredSentence)\
    \ {\n        if (strpos($boredSentence, \"I\") === 0) {\n            $boredoms\
    \ += 1;\n        }\n    }\n    return $boredoms;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgn_iymvn.php:27\n\
    Stack trace:\n#0 /tmp/tmpgn_iymvn.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpgn_iymvn.php\
    \ on line 27\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  $boredoms\
    \ = 0;\n  $lines = explode('.', $S);\n  foreach ($lines as $line){\n    if( $line{0}\
    \ === 'I'){\n      $boredoms++;\n    }\n  }\n  return $boredoms;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"I feel good today. I will be productive.\
    \ will kill It\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    You and I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Array and string offset access syntax with curly braces is no longer
    supported in /tmp/tmp5bmrhwu4.php on line 14

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $bored\
    \ = 0;\n    $str = preg_replace('/\\./', '', $S);\n    $str = preg_replace('/\\\
    ?/', '', $str);\n    $str = preg_replace('/\\!/', '', $str);\n    foreach (explode('.',\
    \ $str) as $word) {\n        if ($word == \"I\") {\n            $bored++;\n  \
    \      }\n    }\n    return $bored;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps66o23e9.php:30\n\
    Stack trace:\n#0 /tmp/tmps66o23e9.php(36): test()\n#1 {main}\n  thrown in /tmp/tmps66o23e9.php\
    \ on line 30\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    return\
    \ count(preg_grep('/^[I]/', explode('.', $S)));\n}\n</code>\n<|/ a |>\n<| c |>\n\
    This seems to work. Unfortunately, I'm not very proficient with regex. Is there\
    \ any good book or resource for learning regex?\n<|/ c |>\n<| c |>\nCheck out\
    \ http://www.regular-expressions.info/\n<|/ c |>\n<| c |>\nIf you don't know regex\
    \ then don't use it! It's a powerful tool, but it's too complex for most people\
    \ and probably won't help you understand your code. There are lots of online regex\
    \ testers where you can experiment with different patterns and test out different\
    \ cases.\n<|/ c |>\n<| c |>\nBy the way, the function you were given above seems\
    \ to give a false positive for something like \"What a beautiful day it is.\"\n\
    <|/ c |>\n<| c |>\nHmm, that is strange, it works fine for me at http://www.phpliveregex.com\n\
    <|/ c |>\n<| a dscore=0 tags=php,function,preg-match,arrays |>\nYour regexp should\
    \ look like this:\n<code>\n/(?:^|\\s)I\\S*/\n</code>\nI added \\s* to match any\
    \ amount of whitespace. Maybe that is what you are looking for. \nSo the full\
    \ function should look like this:\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpeo0mfr1m.php
    on line 13

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredoms\
    \ = explode('.', $S);\n    $counts = [];\n    foreach($boredoms as $boredom) {\n\
    \        if ($boredom == \"I\") {\n            $counts[] = 1;\n        }\n   \
    \ }\n    return count(array_unique($counts));\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx8wr6u5c.php:28\n\
    Stack trace:\n#0 /tmp/tmpx8wr6u5c.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpx8wr6u5c.php\
    \ on line 28\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    //\
    \ Implement Functions Here\n    $split = explode('.', $S);\n    $boredomCounter\
    \ = 0;\n    foreach ($split as $sentence) {\n        if (strpos($sentence, 'I')\
    \ === 0) {\n            $boredomCounter++;\n        }\n    }\n    return $boredomCounter;\n\
    }\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj9i0tex3.php:28\n\
    Stack trace:\n#0 /tmp/tmpj9i0tex3.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpj9i0tex3.php\
    \ on line 28\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n\t$S\
    \ = preg_replace('/[.?!]/', '\\\\$0', trim($S));\n\t$S = explode('.', $S);\n\t\
    $S = preg_replace('/^I$/', '', $S[0]);\n\t\n\tif (count($S) == 1) {\n\t\treturn\
    \ 0;\n\t}\n\t\n\treturn count(array_filter($S, 'is_word'));\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmpivvk6i4t.php:15\nStack trace:\n\
    #0 /tmp/tmpivvk6i4t.php(23): is_bored('Hello world')\n#1 /tmp/tmpivvk6i4t.php(27):\
    \ candidate('Hello world')\n#2 /tmp/tmpivvk6i4t.php(35): test()\n#3 {main}\n \
    \ thrown in /tmp/tmpivvk6i4t.php on line 15\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n\t$count\
    \ = 0;\n\tfor ($i = 0; $i < strlen($S); ++$i) {\n\t\tif ($S[$i] === \"I\" && $S[($i\
    \ + 1)] !== \".\" && $S[($i + 1)] !== \"?\" && $S[($i + 1)] !== \"!\" && $S[($i\
    \ + 2)] !== \"I\") {\n\t\t\t++$count;\n\t\t}\n\t}\n\treturn $count;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"I feel good today. I will be productive.\
    \ will kill It\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    You and I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp91n_vdwg.php:26\n\
    Stack trace:\n#0 /tmp/tmp91n_vdwg.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp91n_vdwg.php\
    \ on line 26\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $b\
    \ = 0;\n    $L = str_split($S, 1);\n    foreach($L as $L) {\n        if(strpos($L,\
    \ \"I\") === 0) {\n            $b = 1;\n            break;\n        }\n    }\n\
    \    return $b;\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk0as3c8x.php:28\n\
    Stack trace:\n#0 /tmp/tmpk0as3c8x.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpk0as3c8x.php\
    \ on line 28\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  $S\
    \ = explode(\".\", $S);\n  return count($S) > 1 ? count($S) > 2 ? count($S) >\
    \ 3 ? 1 : 0;\n}\n</code>\nThe first thing you have to do is figure out your delimiter.\
    \ In the above example, it's . . . but you also have to account for the possibility\
    \ that the delimiter is a question mark ! or exclamation mark ?. Or you can even\
    \ be more concise and just check if the first letter of the sentence starts with\
    \ the letter I like this:\n<code>\nfunction candidate(...$args) {\n    return\
    \ is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token ";" in /tmp/tmpqtcxhyb2.php on line
    12

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $S\
    \ = preg_replace(\"/(\\w*)(\\.|\\?|!)(\\w*)*/\", \" $3$2$1 \", $S);\n    $A =\
    \ explode('.',$S);\n    foreach ($A as $Ai) if ($Ai[0] == 'I') return 0;\n   \
    \ return 1;\n}\n\n/* ---------- Function ends ----------- */\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp652i8_oq.php:23\n\
    Stack trace:\n#0 /tmp/tmp652i8_oq.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp652i8_oq.php\
    \ on line 23\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $str\
    \ = explode('.', $S);\n    $count = 0;\n    foreach($str as $word)\n    {\n  \
    \      if(strpos($word, \"I\") === 0) {\n            $count++;\n        }\n  \
    \  }\n    return $count;\n}\n</code>\n<|/ a |>\n<| c |>\nWhy are you using `substr_count`\
    \ ?\n<|/ c |>\n<| c |>\nI edited my post to make the code easier to read. The\
    \ `substr_count` function just counts the number of times the substring appears\
    \ in the sentence. I needed a more complex test that only checked the start character\
    \ of the string.\n<|/ c |>\n<| c |>\nI did some benchmarking and the `substr_count`\
    \ function is the slowest, probably because of the `strpos` function call inside\
    \ the loop. [link](http://stackoverflow.com/questions/11186816/why-substr-count-is-the-fastest-solution)\n\
    <|/ c |>\n<| c |>\nHi Dave, Your code is working well. I am not able to understand\
    \ it fully. Can you please explain it a little bit.\n<|/ c |>\n<| c |>\nI recommend\
    \ learning about regular expressions. [This](http://www.regular-expressions.info/tutorial.html)\
    \ is a good place to start, but also read [this question](http://stackoverflow.com/questions/4736/learning-regular-expressions).\n\
    <|/ c |>\n<| a dscore=4 |>\nYou will need a regex to split the sentence in words,\
    \ and then count the boredoms:\n<code>\n$s = 'The sky is blue. The sun is shining.\
    \ I love this weather';\npreg_match_all('~\\b(I\\w*)\\b~', $s, $matches);\necho\
    \ count($matches[1]);\n</code>\nThe pattern \\b(I\\w*)\\b matches two words separated\
    \ by word boundaries \\b inside a larger word and captures both words in Group\
    \ 1.\nSee IDEONE demo\nOutput:\n<code>\n1\n</code>\nTo find all boredoms in a\
    \ string, just use\n<code>\npreg_match_all('~\\b(I\\w*)\\b~', $s, $matches);\n\
    print_r($matches[1]);\n</code>\nOutput:\n<code>\nArray\n(\n    [0] => Array\n\
    \        (\n            [0] => I\n            [1] => I\n        )\n\n    [1] =>\
    \ Array\n        (\n            [0] => I\n            [1] => I\n        )\n\n\
    )\n</code>\n<|/ a tags=regex,php |>\n<| c |>\nThis will not work if the sentence\
    \ contains more than 1 boredom.\n<|/ \nfunction candidate(...$args) {\n    return\
    \ is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpt31xhpwy.php
    on line 21

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredom=preg_match(\"\
    /^I/\",$S,$boredom);\n    return $boredom;\n}\nfunction candidate(...$args) {\n\
    \    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5q9946zh.php:20\n\
    Stack trace:\n#0 /tmp/tmp5q9946zh.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp5q9946zh.php\
    \ on line 20\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n\t$bored\
    \ = 0;\n\t$S = preg_replace(\"/ {2,}/\",\" \",$S);\n\t$S = preg_split(\"/[\\.\\\
    ?\\!]/\", $S);\n\tforeach($S as $s) {\n\t\tif(preg_match(\"/I/\",$s)) {\n\t\t\t\
    $bored++;\n\t\t}\n\t}\n\treturn $bored;\n}\nfunction candidate(...$args) {\n \
    \   return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpedg1er8x.php:27\n\
    Stack trace:\n#0 /tmp/tmpedg1er8x.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpedg1er8x.php\
    \ on line 27\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredom\
    \ = false;\n    $arr = explode(\".\",$S);\n    foreach ($arr as $str) {\n    \
    \    if ($str[0] == \"I\") {\n            $boredom = true;\n            break;\n\
    \        }\n    }\n    return $boredom;\n}\nfunction candidate(...$args) {\n \
    \   return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0soy2r7x.php:26\n\
    Stack trace:\n#0 /tmp/tmp0soy2r7x.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp0soy2r7x.php\
    \ on line 26\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  return\
    \ preg_match_all('/I/', $S);\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp582x2paf.php:20\n\
    Stack trace:\n#0 /tmp/tmp582x2paf.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp582x2paf.php\
    \ on line 20\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $A\
    \ = explode('.',$S);\n    $N = count($A);\n    for ($i = 1; $i <= $N; $i++)\n\
    \        if ($A[$i] === 'I')\n            return $i;\n    return FALSE;\n}\nfunction\
    \ candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"I feel good today. I will be productive.\
    \ will kill It\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    You and I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmpn3yb_knm.php on line 14\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpn3yb_knm.php:23\nStack\
    \ trace:\n#0 /tmp/tmpn3yb_knm.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpn3yb_knm.php\
    \ on line 23\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  $words\
    \ = explode(\".\", $S);\n  $boredomCount = 0;\n  foreach($words as $word) {\n\
    \    if(strpos($word, \"I\") === 0) {\n      $boredomCount++;\n    }\n  }\n  return\
    \ $boredomCount;\n}\n</cell>\n<text>\n2.2 Define a function that takes as input\
    \ a string of words and returns a list of all words that start with the letter\
    \ 'B'. Make sure your function works for all cases.\n\n\n</text>\n<cell>\nfunction\
    \ candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"I feel good today. I will be productive.\
    \ will kill It\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    You and I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpoev0cplm.php
    on line 20

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $S\
    \ = preg_replace(\"/ {2,}/\", \"\", $S);\n    $S = preg_replace(\"/\\.|\\?|\\\
    !/i\", \"\", $S);\n    if ($S[0] == \"I\") {\n        $S = \"1\";\n    }\n   \
    \ return $S;\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxibu6gzh.php:24\n\
    Stack trace:\n#0 /tmp/tmpxibu6gzh.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpxibu6gzh.php\
    \ on line 24\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredoms\
    \ = explode('.', $S);\n    $counter = count($boredoms);\n    for($i = 0; $i <\
    \ $counter; $i++){\n        if(preg_match('/^I/', $boredoms[$i])){\n         \
    \   $counter = $i;\n        }\n    }\n    return $counter;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nIf you're going to use regex, why not use preg_match()\
    \ instead of foreach?\n<|/ c |>\n<| c |>\nI didn't want to give the solution to\
    \ his problem, I was just trying to show him how to solve it using preg_match()\
    \ instead of foreach()\n<|/ c |>\n<| c |>\nOh! I see. But you really want to use\
    \ preg_match(), not foreach().\n<|/ c |>\n<| c |>\n`foreach` makes more sense\
    \ to me.  There's no need to return anything if the only thing you care about\
    \ is the counter.  I believe `preg_match` is faster than `strpos` but I'm not\
    \ that familiar with it.\n<|/ c |>\n<| a dscore=0 |>\nYou can find the index of\
    \ the first period in the sentence using strpos()\nhttp://php.net/manual/en/function.strpos.php\n\
    Then you can find the index of next period and if they match, return false\n<code>\n\
    function candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp6c4ju3bg.php
    on line 20

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $words\
    \ = explode('.',$S);\n    $length = count($words);\n    for($i=0;$i<$length;$i++)\
    \ {\n        if($words[$i]=='I')\n            $count++;\n    }\n    return $count;\n\
    }\nfunction candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $count in /tmp/tmptpkc15i6.php on line 17\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmptpkc15i6.php:24\nStack\
    \ trace:\n#0 /tmp/tmptpkc15i6.php(32): test()\n#1 {main}\n  thrown in /tmp/tmptpkc15i6.php\
    \ on line 24\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    return\
    \ count_boredom($S) > 0;\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_boredom()\
    \ in /tmp/tmp63jqhabc.php:11\nStack trace:\n#0 /tmp/tmp63jqhabc.php(15): is_bored('Hello\
    \ world')\n#1 /tmp/tmp63jqhabc.php(19): candidate('Hello world')\n#2 /tmp/tmp63jqhabc.php(27):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp63jqhabc.php on line 11\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  $boredoms\
    \ = 0;\n  // Start with space\n  $boredoms += substr_count(\" \", $S, 0);\n  //\
    \ If there's a period before \"I\", add one boredom\n  $boredoms += substr_count(\"\
    \ i \", $S, 1);\n  // If there's a question mark before \"I\", add one boredom\n\
    \  $boredoms += substr_count(\" ? \", $S, 1);\n  // If there's a exclamation mark\
    \ before \"I\", add one boredom\n  $boredoms += substr_count(\" ! \", $S, 1);\n\
    \  return $boredoms;\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4wtbfj1z.php:30\n\
    Stack trace:\n#0 /tmp/tmp4wtbfj1z.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp4wtbfj1z.php\
    \ on line 30\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredoms\
    \ = array(\"I\", \"am\", \"were\", \"that\", \"you\");\n    $boredoms = count(array_intersect(preg_split('/(\\\
    .|\\?|!)/', $S), $boredoms));\n    return $boredoms;\n}\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp33j603t1.php:22\n\
    Stack trace:\n#0 /tmp/tmp33j603t1.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp33j603t1.php\
    \ on line 22\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredoms\
    \ = array(\".\", \"?\", \"!\");\n    $count = 0;\n    foreach (explode('.', $S)\
    \ as $sentence) {\n        foreach ($boredoms as $boredom) {\n            if (substr($sentence,\
    \ 0, 1) === $boredom) {\n                $count++;\n            }\n        }\n\
    \    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppn5hzhtc.php:30\n\
    Stack trace:\n#0 /tmp/tmppn5hzhtc.php(36): test()\n#1 {main}\n  thrown in /tmp/tmppn5hzhtc.php\
    \ on line 30\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n\t\n\t\
    $bored = 0;\n\t$tokens = explode('.', $S);\n\t\n\tforeach($tokens as $token) {\n\
    \t\t\n\t\tif (strpos($token, \"I\") !== false) {\n\t\t\t\n\t\t\t$bored += 1;\n\
    \t\t\t\n\t\t}\n\t}\n\t\n\treturn $bored;\n}\nfunction candidate(...$args) {\n\
    \    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk68h8tsz.php:32\n\
    Stack trace:\n#0 /tmp/tmpk68h8tsz.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpk68h8tsz.php\
    \ on line 32\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredoms\
    \ = 0;\n    $words = explode('.', $S);\n    foreach ($words as $word) {\n    \
    \    if ($word == \"I\") {\n            $boredoms++;\n        }\n    }\n    return\
    \ $boredoms;\n}\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpptchf1xw.php:27\n\
    Stack trace:\n#0 /tmp/tmpptchf1xw.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpptchf1xw.php\
    \ on line 27\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $count_of_boredoms\
    \ = 0;\n    $S = preg_replace('/[.!?]/', '', $S); // remove punctuation\n    $S\
    \ = explode('.', $S);\n    foreach($S as $word) {\n        if($word[0] == 'I')\
    \ {\n            $count_of_boredoms++;\n        }\n    }\n    return $count_of_boredoms;\n\
    }\n</code>\n<|/ a |>\n<| a |>\nHere's a solution using the regexp function preg_split:\n\
    <code>\n$s = preg_split('/\\W+/', \"Hello world\");\n$boredoms = count(preg_grep('/^I/',\
    \ $s));\n</code>\nThe above code will split the string into \"words\", discarding\
    \ non-word characters. Then the preg_grep function will filter out any array elements\
    \ that start with \"I\". And the count function will give the number of elements\
    \ that match that condition.\n<|/ a tags=php dscore=1 |>\n<| c |>\nI like this\
    \ solution and I learned something from it. It's really useful and I was wondering\
    \ if I could do a similar thing with explode(). I'm thinking about using explode()\
    \ but I feel it would be a bit too complex.\n<|/ c |>\n<| c |>\n, If you were\
    \ to split on every character (as opposed to \"words\" as in 's answer), you would\
    \ lose all the non-word characters (e.g. `'Hell'` would not be matched by `/^I/`).\
    \ So splitting by non-word characters instead of words is definitely the better\
    \ solution.\n<|/ c |>\n<| a tags=php |>\nIf you were using regular expressions,\
    \ it would look like this:\n<code>\n$boredoms = preg_match_all(\"/^I\\b/\", $str,\
    \ $boredoms);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI didn't know that \\b would\
    \ match anything but it works. Thanks!\n<|/ c |>\n<| a |>\n<code>\n$string = \"\
    Hello world\";\n$words = explode(\" \",$string);\n\n$boredoms = count(array_filter($words,'is_bored'));\n\
    \nfunction candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpzky31uao.php
    on line 21

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  $boredoms\
    \ = preg_split(\"/([\\.\\?\\!])/\", $S);\n  $numboredoms = 0;\n  foreach ($boredoms\
    \ as $boredom) {\n    if ($boredom == \".\") $numboredoms++;\n    else if ($boredom\
    \ == \"I\") $numboredoms++;\n  }\n  return $numboredoms;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_o_mray.php:27\n\
    Stack trace:\n#0 /tmp/tmp5_o_mray.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp5_o_mray.php\
    \ on line 27\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $I\
    \ = $boredoms = 0;\n    $S = preg_replace(\"/[^.!?]/\",\"\",$S); // remove punctuation\n\
    \    $S = explode('.',$S); // explode into sentences \n    foreach ($S as $s)\
    \ { // loop through sentences\n        if (preg_match(\"/^I/\", $s)) { // if sentence\
    \ starts with \"I\"\n            $boredoms++; // increment number of boredoms\n\
    \        }\n    }\n    return $boredoms; // return answer\n}\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn05ggk04.php:28\n\
    Stack trace:\n#0 /tmp/tmpn05ggk04.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpn05ggk04.php\
    \ on line 28\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  $boredom\
    \ = 0;\n  foreach (explode('.', $S) as $s) {\n    if (strpos($s, \"I\") == 0)\
    \ {\n      $boredom++;\n    }\n  }\n  return $boredom;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nHey thanks for you answer, but this does not work for me either.\
    \ I just added a second example to my original post that shows what I am looking\
    \ for. I really appreciate your help! :)\n<|/ c |>\n<| c |>\nThank you, but I\
    \ need a solution that works for any amount of sentences or words in the string.\
    \ Does that make sense?\n<|/ c |>\n<| a tags=php,nlp,text,arrays |>\n<code>\n\
    function candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpai84eq9d.php
    on line 19

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n\t$bored\
    \ = 0;\n\t$words = explode(\".\", $S);\n\tforeach($words as $word) {\n\t\tif (preg_match(\"\
    /\\bI\\b/i\", $word)) {\n\t\t\t$bored += 1;\n\t\t}\n\t}\n\treturn $bored;\n}\n\
    function candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5tlzkzr6.php:30\n\
    Stack trace:\n#0 /tmp/tmp5tlzkzr6.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp5tlzkzr6.php\
    \ on line 30\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  list($sentence,$boredoms)=explode('.',$S,2);\n\
    \  if(strpos($sentence,'I')===FALSE) return 0;\n  return count(explode('.',$boredoms,2));\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI'm pretty sure that this is more difficult than\
    \ it needs to be (though I haven't tested it).\n<|/ c |>\n<| c |>\nNo, it isn't...\
    \ I've just coded it up... And I've tested it for various inputs, including some\
    \ invalid ones. The only thing I couldn't test was the case in which I got it\
    \ wrong. But, you are correct, it's probably more complicated than it needs to\
    \ be...\n<|/ c |>\n<| c |>\nYou can't return `$boredoms` at the end of this function\
    \ as it has not been declared `global`. The only other variable that is declared\
    \ `global` is `$boredoms`.\n<|/ c |>\n<| c |>\nOh yeah, of course... Though I'd\
    \ probably do that differently, just because that variable is actually global\
    \ for no reason... But, I'll change that now.\n<|/ c |>\n<| c |>\nThis is really\
    \ cool, but I find it quite hard to read. I'm going to try to rewrite it with\
    \ array_map and preg_match but I'm not sure how I'd use that to count the number\
    \ of boredoms.\n<|/ c |>\n<| a dscore=2 |>\nThis should work\n<code>\n$boredoms=\
    \ preg_match(\"/\\bI\\b/\", $string);\n</code>\n<|/ a tags=php,regex |>\n<| c\
    \ |>\nThat will match \"i love you\" but not \"I love you\".\n<|/ c |>\n<| a tags=php,regex\
    \ dscore=2 |>\n<code>\npreg_match('/\\bI\\b/', $string);\n</code>\nIf you don't\
    \ care about whitespace, you can use the following, which is more readable:\n\
    <code>\npreg_match('/\\bI\\b/', preg_replace('/ +/', ' ', $string));\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\nI guess this is what you're looking for:\n<code>\n\
    preg_match_all('/\\bI\\b/',$string,$matches);\necho $matches[1][0];\n</code>\n\
    <|/ a tags=php,regex |>\n<| a tags=php,regex dscore=0 |>\nI like using preg_match_all,\
    \ because it's more flexible:\n<code>\n$sentence = \"The sky is blue\nfunction\
    \ candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"I feel good today. I will be productive.\
    \ will kill It\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    You and I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp61bqk6ie.php
    on line 15

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    foreach\
    \ (preg_split(\"/[\\.\\?\\!]/\",$S) as $s) {\n        if ($s[0] == 'I') {\n  \
    \          return 0;\n        }\n    }\n    return 1;\n}\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo_v8hr6l.php:23\n\
    Stack trace:\n#0 /tmp/tmpo_v8hr6l.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpo_v8hr6l.php\
    \ on line 23\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $bored\
    \ = 0;\n    $s = explode('.', $S);\n    $s = array_filter($s);\n    $s = array_map('trim',\
    \ $s);\n    $s = array_map('strtolower', $s);\n    foreach ($s as $word) {\n \
    \       if (preg_match('/i(.*)/', $word, $matches)) {\n            $bored++;\n\
    \        }\n    }\n    return $bored;\n}\nfunction candidate(...$args) {\n   \
    \ return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkdwcopcr.php:29\n\
    Stack trace:\n#0 /tmp/tmpkdwcopcr.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpkdwcopcr.php\
    \ on line 29\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    return\
    \ preg_match('/^[I].*/', $S);\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8gqooqd6.php:20\n\
    Stack trace:\n#0 /tmp/tmp8gqooqd6.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp8gqooqd6.php\
    \ on line 20\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    global\
    \ $boredom;\n    $boredom = 0;\n    for($i=0; $i<strlen($S); $i++) {\n       \
    \ if(strpos($S,\".\",$i)) {\n            $boredom++;\n        }\n    }\n    for($i=0;\
    \ $i<strlen($S); $i++) {\n        if(strpos($S,\"?\",$i)) {\n            $boredom++;\n\
    \        }\n    }\n    for($i=0; $i<strlen($S); $i++) {\n        if(strpos($S,\"\
    !\",$i)) {\n            $boredom++;\n        }\n    }\n    return $boredom;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nHi there, I tried your code, and I am\
    \ getting an error: Fatal error: Call to undefined function strpos() in /var/www/html/bored.php\
    \ on line 5\n\nFatal error: Call to undefined function strlen() in /var/www/html/bored.php\
    \ on line 5\n<|/ c |>\n<| c |>\nAh, I didn't test my code before I posted it.\
    \  I forgot that strpos wasn't a PHP function.\n<|/ c |>\n<| c |>\nI've fixed\
    \ my answer.  Please try the new code I posted and see if it works.\n<|/ c |>\n\
    <| c |>\nI tried the new code, but now I am getting this error: \n\nParse error:\
    \ syntax error, unexpected 'else' (T_ELSE) in /var/www/html/bored.php on line\
    \ 17\n<|/ c |>\n<| c |>\nAh, my apologies.  I forgot that `if` statements need\
    \ a corresponding `end` statement.  I've updated my answer.  I added `end` statements\
    \ for your `if` statements, and also added `else` statements.\n<|/ c |>\n<| a\
    \ tags=strpos,php |>\nI recommend using strpos and preg_match here.  I did some\
    \ research on how they work and came up with this:\n<code>\n<?php\n\n$string =\
    \ 'Hello world. Hello world. Hello world.';\n$pattern = '/\\bI\\b/';\n\nif(strpos($string,\
    \ $pattern) !== false){\n    $bored++;\n}\n\nif(preg_match($pattern, $string,\
    \ $matches)){\n    $bored += count($matches[0]);\n}\n\necho \"$bored\\n\";\n\n\
    function candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpheevi19d.php
    on line 30

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  $boredoms\
    \ = 0;\n  if($S != '') {\n    $s = explode('.', $S);\n    foreach ($s as $word)\
    \ {\n      if(preg_match('/^I/', $word)) {\n        $boredoms = $boredoms + 1;\n\
    \      }\n    }\n  }\n  return $boredoms;\n}\nfunction candidate(...$args) {\n\
    \    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsbeqmjyw.php:28\n\
    Stack trace:\n#0 /tmp/tmpsbeqmjyw.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpsbeqmjyw.php\
    \ on line 28\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $words\
    \ = explode('.',$S);\n    $count=0;\n    for($i=0; $i<count($words)-1; $i++) {\n\
    \        if(strpos($words[$i],\"I\") === 0){\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\n</code>\n<|/ a dscore=1 tags=php,python,python-3.x,php\
    \ |>\n<| c |>\nThanks for the reply! But I don't get this part... if there are\
    \ multiple boredoms, will the $count only return the last one? Like in the example\
    \ I provided, how do I make it return both the boredom that has I in it?\n<|/\
    \ c |>\n<| c |>\nI edited my post, I hope it will answer your question\n<|/ c\
    \ |>\n<| c |>\nThe question is tagged `python-3.x`. What does `explode` mean in\
    \ this context?\n<|/ c |>\n<| c |>\nexplode is just to split the string into an\
    \ array of words, by '.', '?' or '!' characters\n<|/ c |>\n<| a dscore=1 tags=php,python,python-3.x,php\
    \ |>\nIn python, you could do:\n<code>\ns = 'The sky is blue. The sun is shining.\
    \ I love this weather'\n\nboredoms = s.split('.') + s.split('?') + s.split('!')\n\
    boredoms = [boredom[:boredom.index('I')] for boredom in boredoms]\n\nprint(len(set(boredoms)))\n\
    </code>\nOutput:\n<code>\n2\n</code>\n<|/ a |>\n<| c |>\nOops, I didn't see it\
    \ before.\n<|/ c |>\n<| c |>\nIt is a good answer, but what is the complexity\
    \ of this method?\n<|/ c |>\n<| c |>\nThe complexity is quadratic, as there will\
    \ be N number of `.`, `?` and `!`\n<|/ c |>\n<| c |>\nI guess this should be accepted\
    \ answer, because it is the best one and the most simple. Thank you for your answer\
    \ and your time.\n<|/ c |>\n<| a |>\nTry this one using regex\n<code>\n>>> import\
    \ re\n>>> s = '''The sky is blue. The sun is shining. I love this weather'''\n\
    >>> boredoms = s.split('.') + s.split('?') + s.split('!')\n>>> boredoms\n['The\
    \ sky is blue.', 'The sun is shining.', 'I love this weather']\n>>> boredoms =\
    \ [bore\nfunction candidate(...$args) {\n    return is_bored(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love It\
    \ !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmppw_qdhop.php
    on line 20

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $arr\
    \ = explode('.',$S);\n    $count = 0;\n    $length = count($arr);\n    for($i\
    \ = 0;$i < $length;$i++) {\n        $arr[$i] = strtolower($arr[$i]);\n       \
    \ if ($arr[$i] == 'i') {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpivnsurs1.php:30\n\
    Stack trace:\n#0 /tmp/tmpivnsurs1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpivnsurs1.php\
    \ on line 30\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n\t$arr\
    \ = explode(\".\", $S);\n\t$arr2 = explode(\".\", $arr[0]);\n\tif($arr2[0] ==\
    \ \"I\"){\n\t\t$arr2[1] = \".\";\n\t}\n\t\n\tforeach ($arr as $key => $value)\
    \ {\n\t\t$arr3 = explode(\".\", $value);\n\t\t\n\t\tforeach ($arr3 as $key2 =>\
    \ $value2) {\n\t\t\t$arr4 = explode(\".\", $value2);\n\t\t\t$count = $arr4[0];\n\
    \t\t\tif ($count == $arr2[1]) {\n\t\t\t\t$b = 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\
    return $b;\n}\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmp9hhwbpxl.php on line 23\n\n\
    Warning: Undefined variable $b in /tmp/tmp9hhwbpxl.php on line 29\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp9hhwbpxl.php:37\nStack trace:\n\
    #0 /tmp/tmp9hhwbpxl.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp9hhwbpxl.php\
    \ on line 37\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  if\
    \ ($S == \"\") {\n    return 0;\n  }\n  $I = $S = preg_replace(\"/[^.?!]+/\",\
    \ \" \", $S);\n  return preg_match(\"/^I\", $S);\n}\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: preg_match(): No ending delimiter '/' found in /tmp/tmpnrb8ep0h.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnrb8ep0h.php:22\n\
    Stack trace:\n#0 /tmp/tmpnrb8ep0h.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpnrb8ep0h.php\
    \ on line 22\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n\t$S\
    \ = preg_replace('/[^.?!]+/', ' ', $S); // replace anything that's not a . ? or\
    \ !\n\treturn (preg_match('/^I /', $S) ? 1 : 0);\n}\n$result = is_bored(\"Hello\
    \ world\");\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq8rk13a9.php:22\n\
    Stack trace:\n#0 /tmp/tmpq8rk13a9.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpq8rk13a9.php\
    \ on line 22\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredoms\
    \ = 0;\n    $str = explode('.', $S);\n    $str = explode('?', $str);\n    $str\
    \ = explode('!', $str);\n    foreach ($str as $w) {\n        if ($w[0] == 'I')\
    \ {\n            $boredoms = $boredoms + 1;\n        }\n    }\n    return $boredoms;\n\
    }\nfunction candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: explode(): Argument #2 ($string) must\
    \ be of type string, array given in /tmp/tmp_m3nws0p.php:13\nStack trace:\n#0\
    \ /tmp/tmp_m3nws0p.php(13): explode('?', Array)\n#1 /tmp/tmp_m3nws0p.php(23):\
    \ is_bored('Hello world')\n#2 /tmp/tmp_m3nws0p.php(27): candidate('Hello world')\n\
    #3 /tmp/tmp_m3nws0p.php(35): test()\n#4 {main}\n  thrown in /tmp/tmp_m3nws0p.php\
    \ on line 13\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $bored\
    \ = 0;\n    $boredom = 0;\n    $tokens = explode('.', $S);\n    $tokens[2] = trim($tokens[2]);\n\
    \    $tokens[3] = trim($tokens[3]);\n    foreach($tokens as $tok) {\n        if\
    \ (strtoupper($tok) == \"I\") {\n            $bored++;\n        }\n        if\
    \ (strtoupper($tok) == \"!\") {\n            $bored += $boredom;\n           \
    \ $boredom = 0;\n        }\n        if (strtoupper($tok) == \".\") {\n       \
    \     $bored += $boredom;\n            $boredom = 0;\n        }\n        if (strtoupper($tok)\
    \ == \"?\") {\n            $bored += $boredom;\n            $boredom = 0;\n  \
    \      }\n    }\n    return $bored;\n}\n</code>\n<|/ a dscore=0 tags=php |>\n\
    <| a dscore=0 |>\nA simple approach is this:\n<code>\nfunction candidate(...$args)\
    \ {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and\
    \ I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp_4ps12p7.php
    on line 35

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $words\
    \ = explode('.',$S);\n    $i = 0;\n    foreach($words as $word) {\n        if\
    \ ($word[0] == \"I\") {\n            ++$i;\n        }\n    }\n    return $i;\n\
    }\n\nfunction candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good\
    \ today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp60ccgwad.php:27\n\
    Stack trace:\n#0 /tmp/tmp60ccgwad.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp60ccgwad.php\
    \ on line 27\n"
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $bored\
    \ = 0;\n    foreach(explode('.',$S) as $word)\n        if(substr($word,0,4)==\"\
    I\")\n            $bored++;\n    return $bored;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a |>\nI've written a little script to detect bored sentences. I used a dictionary\
    \ of ~500 most common English words, some of them are bored. This method takes\
    \ 2 seconds each time it is executed, so for a 1 million sentences dictionary\
    \ it will take 5 seconds. I added it here because it may be useful for other people\
    \ :).\n<code>\n<?php\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmph8mbq62o.php
    on line 17

    '
  timestamp: 1660028135
- exit_code: 255
  program: "<?php\n// You'll be given a string of words, and your task is to count\
    \ the number\n// of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n//\
    \ >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n  $bored\
    \ = 0;\n  $bored_word = \"\";\n  $bored_char = \"\";\n  foreach (str_split($S)\
    \ as $w) {\n    if ($w == \"I\") {\n      $bored++;\n      $bored_word .= $w;\n\
    \      $bored_char = \"I\";\n    }\n  }\n  if ($bored_char != \"\") {\n    $bored++;\n\
    \  }\n  return $bored;\n}\nfunction candidate(...$args) {\n    return is_bored(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\")\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love\
    \ It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcdfaqhx8.php:32\n\
    Stack trace:\n#0 /tmp/tmpcdfaqhx8.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpcdfaqhx8.php\
    \ on line 32\n"
  timestamp: 1660028135
