name: HumanEval_8_sum_product
language: php
prompt: "<?php\n// For a given array of integers, return an array consisting of a\
  \ sum and a product of all the integers in an array.\n// Empty sum should be equal\
  \ to 0 and empty product should be equal to 1.\n// >>> sum_product(array())\n//\
  \ array(0, 1)\n// >>> sum_product(array(1, 2, 3, 4))\n// array(10, 24)\nfunction\
  \ sum_product($numbers) {\n"
tests: "function candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
  \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
  \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
  \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $sum = array_sum($numbers);\n    $product = array_product($numbers);\n\
    \    return array($sum, $product);\n}\n", "    $sum = 0;\n    $product = 1;\n\
    \    foreach ($numbers as $n) {\n        $sum += $n;\n        $product *= $n;\n\
    \    }\n    return array($sum, $product);\n}\n", "    if (empty($numbers)) {\n\
    \        return array(0, 1);\n    }\n    $total = array_sum($numbers);\n    return\
    \ array((float) $total, (float) array_sum(array_map(function ($item) {\n     \
    \   return $item * $total;\n    }, $numbers)));\n}\n\n/*", "    $sum = 0;\n  \
    \  $product = 1;\n    $count = 0;\n    foreach ($numbers as $number) {\n     \
    \   $sum += $number;\n        $product *= $number;\n        $count++;\n    }\n\
    \    $result = array();\n    $result[0] = $sum;\n    $result[1] = $product;\n\
    \    for ($i = 2; $i <= $count; $i++) {\n        $result[$i] = $sum - $result[$i\
    \ - 1] * $product;\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=4 |>\n\
    <| a dscore=4 |>\nFor Python 3.6+ you can use numpy cumsum and cumprod functions:\n\
    <code>\n>>> import numpy as np\n>>> x = np.array([1, 2, 3, -1])\n>>> x\narray([\
    \ 1,  2,  3, -1])\n>>> np.cumsum(x)\narray([1, 3, 6, 7])\n>>> np.cumprod(x)\n\
    array([ 1, 12, 123, 361])\n</code>\n<|/ a tags=algorithm,math,php |>\n<| a dscore=3\
    \ tags=algorithm,math,php |>\n<code>", "    $product = 1;\n    $sum = 0;\n   \
    \ foreach ($numbers as $number) {\n        $sum += $number;\n        $product\
    \ *= $number;\n    }\n    return array($sum, $product);\n}\n</code>\n<|/ a |>\n\
    <| c |>\nI love this solution, it is very elegant and simple to use, especially\
    \ if you are looking for something very simple. Thanks :)\n<|/ c |>\n<| a dscore=5\
    \ |>\nOne liners are often the best, though they are very unreadable\n<code>",
  "    if (empty($numbers)) {\n        return array(0, 1);\n    }\n\n    $sum = array_sum($numbers);\n\
    \n    $product = array_reduce($numbers, function($carry, $number) {\n        return\
    \ $carry * $number;\n    });\n\n    return array($sum, $product);\n}\n</code>\n\
    <|/ a tags=arrays,php,algorithm |>\n<| a dscore=1 |>\n<code>\n<?php\n$input=array(1,2,3,4,5,6,7,8,9,10);\n\
    $output=array();\n$index=0;\nfor($i=0;$i<count($input);$i++){\n    if($input[$i]\
    \ >= $input[0] && $input[$i] <= $input[$i+1]){\n        $output[$index]=$input[$i];\n\
    \        $index++;\n    }\n}\nprint_r($output);", "    // Your code here\n   \
    \ $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n        $sum\
    \ += $number;\n        $product *= $number;\n    }\n    return array($sum, $product);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you for your effort, but I don't\
    \ want you to solve this problem. I'm not asking for the solution but a guide\
    \ from where to start.\n<|/ c |>\n<| c |>\n: You asked for the directions, and\
    \ the answer is \"start with the first number, then add it to the sum and product\
    \ until there are no more\". So, how would you solve it if there were a variable\
    \ number of numbers?\n<|/ c |>\n<| c |>\nI know that there is a loop but I simply\
    \ don't know where to start or how to find my way through the loop. I know how\
    \ to use for loop and if statement but I don't know how to get from my current\
    \ situation to the desired solution. I'm really new to PHP so I'm sorry if this\
    \ is a really dumb question.\n<|/ c |>\n<| a tags=php,sum,arrays,math dscore=1\
    \ |>\nSo if you want only a function, here you go:\n<code>", "    $sum = array_sum($numbers);\n\
    \    $product = array_product($numbers);\n    return array($sum, $product);\n\
    }\n</code>\n<|/ a tags=php |>\n<| a tags=php |>\nTry this, just give the array\
    \ as input \n<code>\n$arr=array(1,2,3,4,5);\n$sum=array_sum($arr);\n$product=array_product($arr);\n\
    echo array_combine($arr,array($sum,$product));\n</code>\noutput\n<code>\nArray\n\
    (\n    [0] => 6\n    [1] => 15\n)\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\n<?php\n$arr=array(1,2,3,4,5);\n$sum=array_sum($arr);\n$product=array_product($arr);\n\
    $array=array_combine($arr,array($sum,$product));\nprint_r($array);\n</code>\n\
    <|/ a tags=php |>\n<| a dscore=1 |>\n<code>\n<?php\n\n$arr=array(1,2,3,4,5);\n\
    \n$sum=array_sum($arr);\n\n$product=array_product($arr);\n\n$array=array_combine($arr,array($sum,$product));\n\
    \nprint_r($array);\n</code>\n<|/ a tags=php |>\n<| a |>\n<code>\n<?php\n\n$arr\
    \ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n\n$sum = array_sum($arr);\n\n$product\
    \ = array_product($arr);\n\n$array = array_combine($arr,array($sum,$product));\n\
    \nprint_r($array);\n", "    if (empty($numbers)) {\n        return array(0, 1);\n\
    \    }\n\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number)\
    \ {\n        $sum += $number;\n        $product *= $number;\n    }\n\n    return\
    \ array($sum, $product);\n}\n</code>\n<|/ a tags=php,function,arrays |>\n<| c\
    \ |>\nThanks for helping me out, but my goal is to make a function that can handle\
    \ any number of arguments and print out the sum of each one. Also, I forgot to\
    \ mention that I can't use for-each loops, it must be for-loops.\n<|/ c |>\n<|\
    \ a |>\n<code>", "    $n = count($numbers);\n    $sum = 0;\n    $prod = 1;\n \
    \   for ($i = 0; $i < $n; $i++) {\n        $sum += $numbers[$i];\n        $prod\
    \ *= $numbers[$i];\n    }\n    return array($sum, $prod);\n}\n", "    $product\
    \ = array_sum($numbers);\n    $sum = array(0, $product);\n    foreach ($numbers\
    \ as $number) {\n        $sum[1] += $number;\n        $sum[0] *= $number;\n  \
    \  }\n    return $sum;\n}\n</code>\n<|/ a dscore=3 tags=php,algorithm |>\n<| c\
    \ |>\nNot sure why but this method doesn't seem to work for empty arrays or arrays\
    \ with only 1 element. Also, I don't understand why it's returning array() when\
    \ sum is 0 and product is 1.\n<|/ c |>\n<| c |>\nIt doesn't work for any empty\
    \ array, or arrays with one element. Try `var_dump(sum_product(array(), array()));`\
    \ and see what happens. Try it: it works.\n<|/ c |>\n<| c |>\nAwesome. Thanks.\n\
    <|/ c |>\n<| a dscore=2 tags=php,algorithm |>\nThis doesn't directly answer your\
    \ question, but it's related, and might come in handy in the future. I needed\
    \ to find the sum of the digits of an arbitrary number. For example, if I input\
    \ \"6\", I needed to get the sum of 6 and divide that by the products of all the\
    \ digits, which is 6. \nHere's how I did it:\n<code>\n$sum = 0;\n$prod = 0;\n\
    $input = strval($input);\nforeach(str_split($input) as $value) {\n    $sum +=\
    \ $value;\n    $prod *= $value;\n}\n$prod = $prod / $sum;\n</code>\n<|/ a |>\n\
    <| a dscore=1 |>\nThis may not be the most efficient, but here's my solution.\
    \ I was just using an array and using array_sum to find the sum of the array,\
    \ then multiplying it by the product of the array and dividing by it.\n<code>\n\
    <?php\n", "  foreach ($numbers as $number) {\n    $sum = array_sum($numbers);\n\
    \    $product = $sum * $number;\n    \n    return array(\"sum\" => $sum, \"product\"\
    \ => $product);\n  }\n}\n", "    $sum = array(0, 0);\n    $product = array(1,\
    \ 1);\n    foreach ($numbers as $number) {\n        $sum[0] += $number;\n    \
    \    $product[0] *= $number;\n    }\n    return array($sum, $product);\n}\n",
  "  if (empty($numbers)) {\n    return array(0, 1);\n  }\n  $sum = array_sum($numbers);\n\
    \  $product = 1;\n  foreach ($numbers as $num) {\n    $product *= $num;\n  }\n\
    \  return array($sum, $product);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ answer is missing its educational explanation.\n<|/ c |>\n<| c |>\nI believe\
    \ that it was self explaining, so I add comments for every line\n<|/ c |>\n<|\
    \ c |>\nThank you for the answer but the problem is I don't want to use any loop\
    \ in the program.\n<|/ c |>\n<| c |>\nPlease see my updated answer. It should\
    \ use less loop\n<|/ c |>\n<| c |>\nThis approach is still using a loop.\n<|/\
    \ c |>\n<| a tags=php dscore=0 |>\nThis is pretty much what we see in PHP OOP.\
    \ I think it might be the most readable way.\n<code>\nclass Product {\n    /**\n\
    \     * int\n     */\n    protected $sum = 0;\n\n    /**\n     * int\n     */\n\
    \    protected $product = 1;\n\n    /**\n     * array $numbers\n     */\n    public\
    \ function __construct(array $numbers) {\n        foreach ($numbers as $num) {\n\
    \            $this->sum += $num;\n            $this->product *= $num;\n      \
    \  }\n    }\n\n    /**\n     * int\n     */\n    public function getSum() {\n\
    \        return $this->sum;\n    }\n\n    /**\n     * int\n     */\n    public\
    \ function getProduct() {\n        return $this->product;\n    }\n}\n\n$product\
    \ = new Product([1, 2, 3, 4, 5]);\necho $product->getSum();", "  $sum = array_sum($numbers);\n\
    \  $product = array_product($numbers);\n  return [$sum, $product];\n}\n", "  $sum\
    \ = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum += $number;\n\
    \    $product *= $number;\n  }\n  return array($sum, $product);\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| a |>\n<code>\n<?php \n$myArray = array(1,2,3,5);\n$sum =\
    \ 0;\n$product = 1;\nforeach ($myArray as $key => $value) {\n    $sum += $value;\n\
    \    $product *= $value;\n}\necho \"The sum of the array is \".$sum.\" and the\
    \ product of the array is \".$product.\" <br />\";", "    $sum = array_sum($numbers);\n\
    \    $product = array_product($numbers);\n    return array($sum, $product);\n\
    }\n</code>\n<|/ a tags=php,algorithm,arrays dscore=2 |>\n<| c |>\n`array_sum`\
    \ is more efficient than `array_reduce`.\n<|/ c |>\n<| c |>\n`array_sum` doesn't\
    \ work if the array contains strings or integers with decimals. `array_reduce`\
    \ should be used in this case.\n<|/ c |>\n<| c |>\nThis doesn't work for negative\
    \ numbers, it will return `array(0,0)` instead of `array(1,1)`\n<|/ c |>\n<| a\
    \ tags=php,algorithm,arrays |>\nHere is a short and simple code:\n<code>\n$data\
    \ = [ 1,2,3,4,5 ];\n$sum = 0;\n$prod = 1;\n$length = count($data);\nfor($i = $length\
    \ - 1; $i >= 0; --$i) {\n    $sum+= $data[$i];\n    $prod *= $data[$i];\n}\necho\
    \ \"Sum: \" . $sum . \"<br/>\";\necho \"Product: \" . $prod;\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 tags=php,algorithm,arrays |>\nI did some benchmarking on these\
    \ answers, but the results were quite surprising. I was testing it on a ~25MB\
    \ CSV file, running PHP 7.2.4 on a Windows 10 Pro machine. These are the results\
    \ (milliseconds per iteration):\n\narray_reduce (from John Vrabch):\n<code>\n\
    Average time: 0.0019094\nAverage time per iteration: 0.0019094\nAverage time per\
    \ iteration vs array_sum:\nAverage time: 0.0019094\nAverage time per iteration:\
    \ 0.0019094\nAverage time per iteration vs array_product:\nAverage time: 0.0019094\n\
    Average time per iteration: 0.0019094\n</code>\narray_sum (from David Molle):\n\
    <code>\nAverage time: 0.0024883\nAverage time per iteration: 0.0024883\nAverage\
    \ time per iteration vs array_reduce:\nAverage time: 0.0024883\nAverage time per\
    \ iteration: 0.0024883\n</code>\narray_product (from John Vrabch):\n<code>\nAverage\
    \ time: 0.0024883\nAverage time per iteration: 0.0024883\nAverage time per iteration\
    \ vs array_reduce:\nAverage time: 0.0024883\nAverage time per iteration: 0.0024883\n\
    </code>\n\narray_reduce is certainly the way to go, and it comes out ", "    $sum\
    \ = array_sum($numbers);\n    $product = array_product($numbers);\n    return\
    \ array($sum, $product);\n}\n", "    $sum_sum = 0; $prod_product = 1;\n    foreach\
    \ ($numbers as $num) {\n        $sum_sum += $num; $prod_product *= $num;\n   \
    \ }\n    return array($sum_sum, $prod_product);\n}\n", "    $sum = 0;\n    $product\
    \ = 1;\n    foreach ($numbers as $number) {\n        $sum += $number;\n      \
    \  $product *= $number;\n    }\n    return array(\"sum\" => $sum, \"product\"\
    \ => $product);\n}\n", "    return array(\n        $numbers[0] === 0 ? 0 : $numbers[0]\
    \ * $numbers[1] + $numbers[0] + $numbers[1],\n        $numbers[0] === 0 ? 1 :\
    \ 1 * ($numbers[0] * $numbers[1] + $numbers[0] + $numbers[1])\n    );\n}\n</code>\n\
    <|/ a tags=php,algorithm,arrays,product dscore=5 |>\n<| c |>\nI've been trying\
    \ to wrap my head around this for a while now but I think you've got it. Thanks\
    \ for your help.\n<|/ c |>\n<| a tags=php,algorithm,arrays,product |>\n<code>",
  "  return array(array_sum($numbers), array_product($numbers));\n}\n</code>\n<|/\
    \ a dscore=1 tags=php,math |>\n<| c |>\nI love how your function can return the\
    \ sum and the product of all the elements in the array. This is a great solution\
    \ and I see you have a use for array_sum and array_product. Would you mind explaining\
    \ how this is useful?\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    $sum = 0;\n \
    \   $product = 1;\n    foreach ($numbers as $number) {\n        $sum += $number;\n\
    \        $product *= $number;\n    }\n    return array($sum, $product);\n}\n",
  "    $result = [0, 0];\n    foreach ($numbers as $number) {\n        $result[0]\
    \ += $number;\n        $result[1] *= $number;\n    }\n\n    return $result;\n\
    }\n</code>\n<|/ a tags=functional-programming,ruby,python,java,javascript dscore=2\
    \ |>\n<| c |>\nI like your example here. It makes good use of the functional programming\
    \ paradigm and the way you think about how to solve a problem.\n<|/ c |>\n<| a\
    \ |>\nHere is a solution which uses map and reduce:\n<code>\ndef sumProduct(numbers):\n\
    \  return numbers.map(lambda x: x*x).reduce(lambda x, y: x+y)\n</code>\nFor python:\n\
    <code>\ndef sumProduct(numbers):\n  return sum(map(lambda x: x*x, numbers))\n\
    </code>\nFor javascript:\n<code>", "    // initialize sum and product to 0\n \
    \   $sum = 0;\n    $product = 1;\n    foreach($numbers as $number) {\n       \
    \ // add number to sum\n        $sum += $number;\n        // multiply product\
    \ by number\n        $product *= $number;\n    }\n\n    return array(\n      \
    \  'sum' => $sum,\n        'product' => $product\n    );\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nGreat answer but this solution doesn't take in to consideration\
    \ the possibility of negative numbers.\n<|/ c |>\n<| c |>\n: Yes, I overlooked\
    \ the possibility of negative numbers. I edited my answer, but I think I did it\
    \ without thinking about negative numbers.\n<|/ c |>\n<| a |>\nThis should do\
    \ the trick!\n<code>\n$arr = array(0,1,2,3,4,5,6);\n$sum = $product = 1;\n\nforeach($arr\
    \ as $value) {\n    $sum = $sum + $value;\n    $product = $product * $value;\n\
    }\n$arr = array($sum, $product);\n</code>\n<|/ a tags=php,arrays dscore=0 |>\n\
    <| a dscore=0 |>\nI wrote a recursive function which can handle multiple arrays\
    \ as well.\n<code>", "    // Initialize both sum and product to 0.\n    $sum =\
    \ 0;\n    $product = 1;\n\n    // Traverse the array and sum the numbers starting\
    \ from the first one.\n    foreach ($numbers as $number) {\n        $sum += $number;\n\
    \    }\n\n    // Traverse the array and multiply the product by the number's value.\n\
    \    foreach ($numbers as $number) {\n        $product *= $number;\n    }\n\n\
    \    // Return the array consisting of the sum and the product.\n    return array($sum,\
    \ $product);\n}\n</code>\n<|/ a |>\n<| a tags=php,arrays,algorithm |>\n<code>",
  "  $sum = array_sum($numbers);\n  $product = array_product($numbers);\n\n  return\
    \ array($sum, $product);\n}\n</code>\n<|/ a dscore=4 tags=php,arrays |>\n<| a\
    \ |>\nSince PHP 5 there is array_reduce, which gives you the exact same return\
    \ values you were looking for.\n<|/ a dscore=2 tags=php,arrays |>\n<| a dscore=1\
    \ |>\n<code>\n<?php\n", "    $return = array(0,1);\n    foreach ($numbers as $number)\
    \ {\n        $return[0] += $number;\n        $return[1] *= $number;\n    }\n \
    \   return $return;\n}", "  $sum = 0;\n  $product = 1;\n\n  foreach ($numbers\
    \ as $number) {\n    $sum += $number;\n    $product *= $number;\n  }\n\n  return\
    \ array($sum, $product);\n}\n</code>\n<|/ a |>\n<| c |>\nAwesome solution!  Works\
    \ in PHP 7.2 without looping through the array twice as you did.  Thanks!\n<|/\
    \ c |>\n<| a tags=arrays,php dscore=2 |>\nYou can use array_reduce function:\n\
    <code>\n<?php\n$arr = array(1,2,3,4,5);\n$sum = array_reduce($arr, function($c,\
    \ $i){\n    return $c + $i;\n}, 0);\n$prod = array_reduce($arr, function($c, $i){\n\
    \    return $c * $i;\n}, 1);\necho \"Sum: \" . $sum . \"<br/>\";\necho \"Product:\
    \ \" . $prod . \"<br/>\";", "    return array(array_sum($numbers), array_product($numbers));\n\
    }", "    return array(array_sum($numbers), array_product($numbers));\n}\n</code>\n\
    <|/ a dscore=4 tags=math,algorithm,arrays,php |>\n<| c |>\nThis was extremely\
    \ helpful. Thank you.\n<|/ c |>\n<| c |>\nI like this answer, but just be aware\
    \ that `array_sum()` and `array_product()` are O(n) whereas `array_reduce()` is\
    \ O(n^2).\n<|/ c |>\n<| c |>\nI haven't looked at the PHP source, but if they\
    \ are indeed O(n), I believe a loop is still O(n).\n<|/ c |>\n<| a dscore=3 |>\n\
    <code>\n$arr = array(1,2,3,4);\n$sum = $prod = array();\nforeach($arr as $item){\n\
    \    $sum[] = $item;\n    $prod[] = $item * $item;\n}\n</code>\n<|/ a tags=math,algorithm,arrays,php\
    \ |>\n<| c |>\nThis works if the array is known to be sorted, but is O(n) otherwise.\
    \ Not bad, but I do think this is an important distinction.\n<|/ c |>\n<| c |>\n\
    : yes you're right that it's O(n) only when the array is sorted. This should be\
    \ the accepted answer.\n<|/ c |>\n<| c |>\nThe accepted answer is also O(n), but\
    \ has O(n^2) performance. It's a little better, but still not ideal. Even if the\
    \ array is known to be sorted, it still runs in O(n).\n<|/ c |>\n<| c |>\n: yes,\
    \ you're right and I didn't see that \"array_reduce\" was posted later. :)\n<|/\
    \ c |>\n<| c |>\nNo, this isn't O(n), since it runs in O(n^2) for sorted input,\
    \ and in O(n) for unsorted input.\n<|/ c |>\n<| a tags=math,algorithm,arrays,php\
    \ dscore=2 |>\n<code>\n$sum = array_sum($numbers);\n$product = array_product($numbers);\n\
    </code>\narray_sum and array_product can accept arrays as well as integers.\n\
    <|/ a |>\n<| c |>\nBut it doesn't produce the desired result - an empty product\
    \ should be equal to 1.\n<|/ c |>\n<| c |>\nAnd I really don't want to use an\
    \ O(n^2) algorithm.\n<|/ c |>\n<| c |>\n: No, it is O(n) in the general case.\n\
    <|/ c |>\n<| c |>\n", "    $total = $product = 1;\n\n    foreach ($numbers as\
    \ $number) {\n        $total *= $number;\n        $product *= $number;\n    }\n\
    \n    return array($total, $product);\n}\n</code>\n<|/ a dscore=5 tags=php |>\n\
    <| c |>\nThis was a very handy way to think about the problem. +1\n<|/ c |>\n\
    <| a tags=php dscore=5 |>\nFor anyone interested in doing this in a functional\
    \ style. \n<code>", "  return array($numbers[0] + $numbers[1], $numbers[0] * $numbers[1]);\n\
    }\n", "    sort($numbers);\n    $product_of_numbers = 1;\n    $sum_of_numbers\
    \ = 0;\n\n    $len = count($numbers);\n    for($i = 0; $i < $len; $i++) {\n  \
    \      $sum_of_numbers += $numbers[$i];\n        $product_of_numbers *= $numbers[$i];\n\
    \    }\n    return array('sum' => $sum_of_numbers, 'product' => $product_of_numbers);\n\
    }\n</code>\n<|/ a tags=php,arrays dscore=2 |>\n<| a dscore=2 |>\n<code>", "  \
    \  $total = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n     \
    \   $total = $total + $number;\n        $product = $product * $number;\n    }\n\
    \    return array((int)$total, (float)$product);\n}\n</code>\n<|/ a tags=php,sum,product,arrays,loops\
    \ |>\n<| c |>\nThis doesn't answer the question\n<|/ c |>\n<| c |>\nI answered\
    \ the question \"How do you find the sum and product of a given array?\" The question\
    \ was how to do it with a loop.\n<|/ c |>\n<| a tags=php,sum,product,arrays,loops\
    \ dscore=5 |>\nI know this is an old thread, but here are some more ways to do\
    \ this using built-in functions. All of them use array_reduce\n<code>\n$array\
    \ = [1, 2, 3, 10];\n$sum = array_sum($array);\n$product = array_reduce($array,\
    \ function($a, $b) {return $a * $b;}, 1);\necho $sum; // outputs 15\necho $product;\
    \ // outputs 120\n</code>\n<|/ a |>\n<| a dscore=5 |>\nMy solution using array_reduce\
    \ function and anonymous function:\n<code>\n$array = [1,2,3,4,5,6,7,8,9,10];\n\
    $sum = array_sum($array);\n$product = array_reduce($array, function($a, $b) {\
    \ return $a * $b; }, 1);\necho $sum;\necho $product;\n</code>\n<|/ a tags=php,sum,product,arrays,loops\
    \ |>\n<| a |>\n<code>", "  $sum = array_sum($numbers);\n  $product = array_product($numbers);\n\
    \  if (!$sum && $product) {\n    list($sum, $product) = array($product, 1);\n\
    \  }\n  return array($sum, $product);\n}\n</code>\n<|/ a dscore=4 tags=php,math,algorithm\
    \ |>\n<| c |>\n+1 for providing a useful answer to a programming problem. The\
    \ question is what to do about the empty list, however.\n<|/ c |>\n<| c |>\nAgreed.\
    \  Empty list means zero sum and zero product.\n<|/ c |>\n<| c |>\nThis algorithm\
    \ is wrong for large numbers. It's a perfect fit, but when you add numbers larger\
    \ than the largest integer (in this case, 2147483647) the sum becomes more than\
    \ the max integer and the product is larger than the max integer. Try adding 100000\
    \ to a list of 100000 numbers and you will see what I mean.\n<|/ c |>\n<| c |>\n\
    It is not wrong at all - you can add big numbers and have a correct answer. Or\
    \ you might add very small numbers and have a correct answer, and add them without\
    \ overflowing. But adding big numbers with a big product - that is a very bad\
    \ idea. One should use an algorithm that handles large numbers correctly.\n<|/\
    \ c |>\n<| a dscore=4 tags=php,math,algorithm |>\nHere's a PHP-based function\
    \ that will do what you're looking for by using the array_reduce function, which\
    \ lets you pass in two separate callbacks. The first one will run once for each\
    \ element in the array, and the second one will run after the entire array has\
    \ been reduced.\nThe array_reduce function will call the callback once for each\
    \ element in the array, and when it's done, call the callback with the sum and\
    \ the product of the remaining elements of the array. array_reduce is extremely\
    \ useful for reducing arrays, especially in combination with the array_map function\
    \ which lets you pass in multiple arrays and get their results in one array.\n\
    <code>", "    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number)\
    \ {\n        $sum += $number;\n        $product *= $number;\n    }\n\n    return\
    \ array($sum, $product);\n}\n</code>\n<|/ a |>\n<| c |>\n`echo` returns `void`,\
    \ so you won't be able to do `echo $a['sum'];` on the line above the function.\n\
    <|/ c |>\n<| c |>\nThank you, I've just fixed it.\n<|/ c |>\n<| a tags=arrays,php,sum\
    \ |>\n<code>\n<?php\n\n$sum=0;\n$product=1;\nforeach ($numbers as $number){\n\
    \    $sum+=$number;\n    $product*=$number;\n}\n\necho \"sum: \" . $sum;\necho\
    \ \"<br>product: \" . $product;\n", "    $sum = array_sum($numbers);\n    $prod\
    \ = 1;\n    foreach ($numbers as $number) {\n        $prod *= $number;\n    }\n\
    \n    return array($sum, $prod);\n}\n</code>\n<|/ a |>\n<| a |>\nI made my own\
    \ and I post it here.\n<code>", "  if (!$numbers) {\n    return array(0, 1);\n\
    \  }\n  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n    $product *= $number;\n  }\n  return array($sum, $product);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nCan you tell me how I can run this in php 7.3?\
    \ This works on php 7.2 but not on 7.3\n<|/ c |>\n<| c |>\nSorry, I missed that.\
    \ I've updated the answer, now it's PHP 7.2 compatible.\n<|/ c |>\n<| a dscore=2\
    \ |>\nI see people already have submitted an answer, but here is my 2 cents on\
    \ my solution (PHP 7.2+):\n<code>\n$sum = 0;\n$product = 1;\nforeach ($numbers\
    \ as $number) {\n    $sum += $number;\n    $product *= $number;\n}\n$sum = array_filter($numbers,\
    \ static function ($number) { return $number != 0; });\n$product = array_filter($numbers,\
    \ static function ($number) { return $number != 1; });\n</code>\n<|/ a tags=arrays,php,algorithm\
    \ |>\n<| a dscore=2 |>\nThis one is more \"functional\" but very simple:\n<code>\n\
    $sum = array_reduce(array_filter($numbers, static function ($number) { return\
    \ $number != 0; }), static function ($sum, $number) { return $sum + $number; });\n\
    $product = array_reduce(array_filter($numbers, static function ($number) { return\
    \ $number != 1; }), static function ($product, $number) { return $product * $number;\
    \ });\n</code>\n<|/ a tags=arrays,php,algorithm |>\n<| a tags=arrays,php,algorithm\
    \ |>\nThis works for me:\n<code>", "  return [\n    'sum' => array_sum($numbers),\n\
    \    'product' => array_reduce($numbers, function($product, $number) {\n     \
    \ return $product * $number;\n    })\n  ];\n}\n", "    $sum = array_sum($numbers);\n\
    \    $product = array_product($numbers);\n\n    return array($sum, $product);\n\
    }\n", "  $sum = array_sum($numbers);\n  $product = 1;\n\n  foreach ($numbers as\
    \ $number) {\n    $product *= $number;\n  }\n\n  return array($sum, $product);\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 tags=arrays,php,math |>\nHere's a\
    \ solution using array_reduce():\n<code>", "    $sum = 0;\n    $product = 1;\n\
    \    foreach ($numbers as $number) {\n        $sum += $number;\n        $product\
    \ *= $number;\n    }\n    return array($sum, $product);\n}\n", "    list($sum,\
    \ $product) = array(0, 1);\n    foreach ($numbers as $number) {\n        $sum\
    \ += $number;\n        $product *= $number;\n    }\n    return array($sum, $product);\n\
    }\n", "    $total = 0;\n    $product = 1;\n    foreach($numbers as $num){\n  \
    \      $total += $num;\n        $product *= $num;\n    }\n    return array(\"\
    sum\" => $total, \"product\" => $product);\n}\n</code>\n<|/ a |>\n<| a |>\nHere\
    \ is how I calculate the sum of all even numbers in a given array. \n<code>",
  "  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum += $number;\n\
    \    $product *= $number;\n  }\n  return array($sum, $product);\n}\n", "    $sum\
    \ = array_sum($numbers);\n    $product = 1;\n    foreach ($numbers as $number)\
    \ {\n        $product *= $number;\n    }\n    return array($sum, $product);\n\
    }\n", "  if (empty($numbers)) {\n    return array(0, 1);\n  }\n  $total = 0;\n\
    \  $product = 1;\n  foreach ($numbers as $number) {\n    $total += $number;\n\
    \    $product *= $number;\n  }\n  return array($total, $product);\n}\n", "  if\
    \ (empty($numbers)) {\n    return array(0, 1);\n  }\n  $sum = $product = 1;\n\
    \  foreach ($numbers as $number) {\n    $sum += $number;\n    $product *= $number;\n\
    \  }\n  return array($sum, $product);\n}", "  return [\n    array_sum($numbers),\n\
    \    array_product($numbers)\n  ];\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\nThis\
    \ was really tough to solve.\nThe easiest way is to find all the factors and then\
    \ multiply them together. \nHere is the code (I added the ability to choose which\
    \ ones to multiply, which you can change out as needed):\n<code>\n<?php ", " \
    \   if (empty($numbers)) {\n        return array(0, 1);\n    }\n\n    $sum = 0;\n\
    \    $prod = 1;\n\n    foreach ($numbers as $number) {\n        $sum += $number;\n\
    \        $prod *= $number;\n    }\n\n    return array($sum, $prod);\n}\n", "\t\
    $sum = 0;\n\t$product = 1;\n\t$len = count($numbers);\n\n\tif ($len == 0) {\n\t\
    \treturn array(0, 1);\n\t}\n\n\tfor ($i = 0; $i < $len; $i++) {\n\t\t$sum += $numbers[$i];\n\
    \t\t$product *= $numbers[$i];\n\t}\n\treturn array($sum, $product);\n}\n", " \
    \   foreach ($numbers as $key => $value) {\n        if (empty($value)) {\n   \
    \         $numbers[$key] = 0;\n        } else {\n            $numbers[$key] =\
    \ $value + $numbers[$key];\n        }\n    }\n    return $numbers;\n}\n\n$result\
    \ = sum_product($numbers);\necho \"Sum: {$result[0]} Product: {$result[1]}\";\n\
    </code>\n<|/ a dscore=0 tags=php,arrays |>\n<| a |>\nTo print sum of numbers in\
    \ array\n<code>\necho \"Sum: {$numbers[0]} Product: {$numbers[1]}\";\n</code>\n\
    To print product of numbers in array\n<code>\necho \"Sum: {$numbers[0]*$numbers[1]}\
    \ Product: {$numbers[0]*$numbers[1]}\";\n</code>\n<|/ a dscore=0 tags=php,arrays\
    \ |>\n<| c |>\nThank you so much. Could you tell me how I can get the sum of the\
    \ numbers in the array?\n<|/ c |>\n<| c |>\nyou can do like\n`$sum = 0;\nforeach($numbers\
    \ as $val){\n    $sum += $val;\n}`\n<|/ c |>\n<| c |>\nTo print the sum of numbers\
    \ in the array. Just do as you did before: echo the $result[0].\n<|/ c |>\n<|\
    \ a |>\nHere is a quick one liner that should work. I've made it for only positive\
    \ numbers in the array.\n<code>\necho array_sum(array_filter(array_map('intval',\
    \ $array)));\n</code>\n<|/ a tags=php,arrays dscore=0 |>\n<| c |>\n`array_sum(array_filter(array_map('intval',\
    \ $array)));`\n<|/ c |>\n<| c |>\nThanks for your reply. I have a question, how\
    \ will the array look like if I use an array like this?\n$array = [1 , 2 , 3 ,\
    \ 4 , 5 , 6 , 7 , 8 , 9 , 10];\n<|/ c |>\n<| c |>\n`$array = [1 , 2 , 3 , 4 ,\
    \ 5 , 6 , 7 , 8 , 9 , 10];\necho array_sum(array_filter(array_map('intval', $array)));`\
    \ gives you `55`. It's working like you wanted it to.\n<|/ c |>\n<| c |>\nI see.\
    \ But how will the array look like if I used this array:\n$array = [1 , 2 , 3\
    \ , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , ", "  $sum = array_sum($numbers);\n\
    \  $product = 1;\n  foreach ($numbers as $key => $value) {\n    $product *= $value;\n\
    \  }\n  return array($sum, $product);\n}\n", "  $result = [0 => 0, 1 => 1];\n\
    \  foreach($numbers as $number) {\n    $result[0] += $number;\n    $result[1]\
    \ *= $number;\n  }\n  return $result;\n}\n", "  $sum = 0;\n  $product = 1;\n \
    \ $size = sizeof($numbers);\n  for($i=0; $i<$size; $i++) {\n    $product = $product\
    \ * $numbers[$i];\n    $sum = $sum + $product;\n  }\n  return array($sum, $product);\n\
    }", "    // Write your code in PHP. You may want to use the $numbers array you\
    \ wrote in the first part of this problem.\n    $sum = 0;\n    $prod = 1;\n  \
    \  foreach ($numbers as $number) {\n        $sum = $sum + $number;\n        $prod\
    \ = $prod * $number;\n    }\n    return array(\"sum\" => $sum, \"product\" =>\
    \ $prod);\n}\n", "    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number)\
    \ {\n        $sum += $number;\n        $product *= $number;\n    }\n    return\
    \ array($sum, $product);\n}\n", "    $sum = 0;\n    $product = 1;\n\n    foreach\
    \ ($numbers as $number) {\n        $sum = $sum + $number;\n        $product =\
    \ $product * $number;\n    }\n\n    return array($sum, $product);\n}\n</code>\n\
    <|/ a tags=php |>\n<| c |>\nThis solution works well for an array of small integers.\
    \ But for larger arrays it doesn't. It results in infinity. e.g. [1,2,3,4,5,6,7]\
    \ gives [9,3,9] instead of [10,24,36].\n<|/ c |>\n<| c |>\nWhy would this not\
    \ work for a larger array? It's basically the definition of `product` - a product\
    \ of all the numbers in the array.\n<|/ c |>\n<| c |>\nI was mistaken: it does\
    \ work, but the results are wrong. I should have tested it properly. Sorry for\
    \ that. Your answer does work!\n<|/ c |>\n<| a |>\nMy simple solution:\n<code>",
  "    sort($numbers);\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as\
    \ $n) {\n        $sum += $n;\n        $product *= $n;\n    }\n    return array(\"\
    sum\" => $sum, \"product\" => $product);\n}\n", "    return array($numbers[0],\
    \ $numbers[1]);\n}", "    if (!empty($numbers)) {\n        return array($numbers[0],\
    \ $numbers[0]);\n    }\n    else {\n        return array(0, 1);\n    }\n}\n",
  "    if (!$numbers) {\n        return array(0, 1);\n    }\n    return array(array_sum($numbers),\
    \ array_product($numbers));\n}\n</code>\nI made a recursive function in php (a\
    \ while ago). As I recall, it iterates through the array and adds up the sums\
    \ and products, until it reaches the end. That is why it calls itself again for\
    \ the next set of numbers. I tested it out and it works.\n<|/ a dscore=2 |>\n\
    <| c |>\nThis is really impressive and efficient! Thank you for taking the time\
    \ to explain it to me.\n<|/ c |>\n<| a dscore=1 |>\nHere's a Python solution:\n\
    <code>\ndef product(lst):\n    if len(lst) == 0:\n        return 1, 0\n\n    a\
    \ = lst.pop()\n    return product(a) + product((a,))\n\ndef sum(lst):\n    if\
    \ len(lst) == 0:\n        return 0\n\n    a = lst.pop()\n    return a + sum((a,))\n\
    \ndef sum_product(lst):\n    total, _ = product(lst)\n    return sum(lst), total\n\
    \nif __name__ == '__main__':\n    print sum_product([1,2,3,4])\n    print sum_product([1,2])\n\
    </code>\nOutput:\n<code>\n(10, 24)\n(2, 2)\n</code>\n<|/ a tags=python |>\n<|\
    \ a tags=python |>\n<code>\ndef product(lst):\n  prod = 0\n  if lst:\n    lst.pop()\n\
    \    prod = lst[0]\n    lst.pop(0) # Removes first element from list so list is\
    \ empty\n    lst = lst + lst\n  return prod, lst[0]\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\nThis can be done in one line :\n<code>\na = [1, 2, 3, 4]\na,b\
    \ = [sum(a),sum(a*a)][len(a)>0]\n</code>\n<|/ a tags=python |>\n<| a |>\nThis\
    \ could be done with a while loop:\n<code>\nx = [1,2,3,4]\nwhile len(x):\n  x\
    \ = list(x[:])\n  x.append(x.pop(0)*x.pop(0))\n  print x\n</code>\n<|/ a dscore=0\
    \ tags=python |>\n<| c |>\nI dont think that is what he/she is looking for..\n\
    <|/ c |>\n<| c |>\nI'm looking for one statement that can calculate the product\
    \ and sum all items in a list at one time without needing to pop the list each\
    \ time. I think I need a recursive function but I can't seem to get it to work.\
    \ I'll keep trying and post the answer if I figure it out.\n<|/ c |>\n<| a |>\n\
    I came up with something simple like ", "    if (empty($numbers)) {\n        return\
    \ [\n            'sum' => 0,\n            'product' => 1,\n        ];\n    }\n\
    \n    $sum = array_sum($numbers);\n    $product = array_product($numbers);\n\n\
    \    return [\n        'sum' => $sum,\n        'product' => $product,\n    ];\n\
    }\n", "  if (empty($numbers)) {\n    return array(0, 1);\n  }\n\n  $result = array();\n\
    \  foreach ($numbers as $number) {\n    $result[] = $number + array_sum($numbers);\n\
    \  }\n  $result[] = array_sum($numbers);\n  return $result;\n}\n</code>\n<|/ a\
    \ tags=php,function,arrays,math |>\n<| c |>\nWhat would the code look like if\
    \ I had to implement this within a class?\n<|/ c |>\n<| c |>\nI'm sorry, but I\
    \ don't understand what you mean. Could you maybe edit your question to include\
    \ a code sample?\n<|/ c |>\n<| c |>\nNo problem. The function is within the same\
    \ class, but it's being called from the outside which makes it more complicated\
    \ than I thought it would be to implement. I'm trying not to complicate this as\
    \ much as possible. Thanks anyways.\n<|/ c |>\n<| a |>\n<code>", "    $sum = array_sum($numbers);\n\
    \    $product = array_product($numbers);\n    return array($sum, $product);\n\
    }\n", "    if (!is_array($numbers)) {\n        return array(0, 0);\n    }\n  \
    \  $sum = array_sum($numbers);\n    $product = 1;\n    foreach ($numbers as $n)\
    \ {\n        $product *= $n;\n    }\n    return array($sum, $product);\n}\n</code>\n\
    <|/ a dscore=5 tags=algorithm,php |>\n<| c |>\nYour answer is the only one that\
    \ worked for me. Thanks a lot!!\n<|/ c |>\n<| c |>\nThis algorithm is pretty simple\
    \ and effective.\n<|/ c |>\n<| a |>\nHere is the solution I ended up using:\n\
    <code>", "    $product_sum = 0;\n    foreach ($numbers as $number) {\n       \
    \ $product_sum += $number;\n    }\n    return array($product_sum, array_sum($numbers));\n\
    }\n", "    return ['sum' => array_sum($numbers), 'product' => array_product($numbers)];\n\
    }\n", "    $total = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n\
    \        $total = $total + $number;\n        $product = $product * $number;\n\
    \    }\n    return array(\"sum\" => $total, \"product\" => $product);\n}", " \
    \ if (!is_array($numbers)) {\n    return array(0, 1);\n  }\n  $sum = array_shift($numbers);\n\
    \  $product = array_shift($numbers);\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n    $product *= $number;\n  }\n  return array($sum, $product);\n\
    }\n</code>\n<|/ a dscore=2 tags=php,recursion |>\n<| a tags=php,recursion |>\n\
    <code>", "  if (empty($numbers)) {\n    return array(0, 1);\n  }\n  $total = 0;\n\
    \  $product = 1;\n  foreach ($numbers as $value) {\n    $total += $value;\n  \
    \  $product *= $value;\n  }\n  return array($total, $product);\n}\n", "  // Sum\n\
    \  $sum = 0;\n  $numbers = array_values($numbers);\n  foreach ($numbers as $num)\
    \ {\n    $sum += $num;\n  }\n  // Product\n  $product = 1;\n  foreach ($numbers\
    \ as $num) {\n    $product *= $num;\n  }\n  return array($sum, $product);\n}\n",
  "    $sum = 0;\n    $product = 1;\n    $length = count($numbers);\n    for ($i =\
    \ 0; $i < $length; $i++) {\n        $sum = $sum + $numbers[$i];\n        $product\
    \ = $product * $numbers[$i];\n    }\n    return array((int)$sum, (int)$product);\n\
    }\n", "    $sum = 0;\n    $product = 1;\n\n    foreach ($numbers as $number) {\n\
    \        $sum += $number;\n        $product *= $number;\n    }\n\n    return array($sum,\
    \ $product);\n}\n", "    if (empty($numbers)) {\n        return [0,1];\n    }\n\
    \    $result = [0,0];\n    $sum = 0;\n    foreach($numbers as $value) {\n    \
    \    $result[0] += $value;\n        $sum += $value;\n        $result[1] = $result[0]\
    \  * $sum;\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\n\
    Nice solution! I was just thinking about a solution with array_reduce, array_sum\
    \ and array_product\n<|/ c |>\n<| c |>\nI prefer this one for its readability.\
    \ The one below with foreach is more readable though (unless you use an IDE with\
    \ autocompletion ;))\n<|/ c |>\n<| c |>\n, array_reduce and array_sum and array_product\
    \ are also loops! The difference is that array_reduce is more efficient than a\
    \ for loop (but still loops internally), while the for loop is more readable and\
    \ faster. Personally I prefer array_reduce for its readability and readability\
    \ over performance, because the latter is more of an optimization concern\n<|/\
    \ c |>\n<| c |>\nI think this is one of the few solutions where the result is\
    \ always in the same order as the input, even if the input is not in the right\
    \ order. With this solution you need a temporary variable which must be created\
    \ and destroyed at every iteration. This solution has two iterations and a temporary\
    \ variable only has to be created once.\n<|/ c |>\n<| c |>\nYes, but if you look\
    \ at the code it is clear that $sum and $product are not being reused for each\
    \ iteration of the loop, so $sum can just be replaced by $product. I agree though\
    \ that this solution is less readable\n<|/ c |>\n<| a tags=php |>\n<code>\n$input\
    \ = array(1,2,3);\n$result = array_reduce($input,'myFunction');\n</code>", " \
    \   return array(array_sum($numbers), array_product($numbers));\n}\n", "  $product\
    \ = 1;\n  $sum = 0;\n  foreach ($numbers as $number) {\n    $sum += $number;\n\
    \    $product *= $number;\n  }\n  return array($sum, $product);\n}\n", "  $result\
    \ = array();\n  foreach ($numbers as $number) {\n    $sum = array_sum($number);\n\
    \    $product = array_product($number);\n    $result[] = array($sum, $product);\n\
    \  }\n  return $result;\n}", "    $result = [0, 0];\n    if (!empty($numbers))\
    \ {\n        $result[0] = $numbers[0];\n        $result[1] = 1;\n        $numbers\
    \ = array_slice($numbers, 1);\n        foreach ($numbers as $n) {\n          \
    \  $result[0] += $n;\n            $result[1] *= $n;\n        }\n    }\n    return\
    \ $result;\n}\n", "    $sum = 0;\n    $product = 1;\n    foreach ($numbers as\
    \ $number) {\n        $sum += $number;\n        $product *= $number;\n    }\n\n\
    \    return array($sum, $product);\n}", "    $sum = array_sum($numbers);\n   \
    \ $product = array_product($numbers);\n\n    return array($sum, $product);\n}\n",
  "    if (empty($numbers)) {\n        return array(0,1);\n    }\n    $sum = 0;\n\
    \    $product = 1;\n    foreach ($numbers as $number) {\n        $sum += $number;\n\
    \        $product *= $number;\n    }\n    return array($sum, $product);\n}\n",
  "  $result = [0, 1];\n  $product = 1;\n  foreach ($numbers as $number) {\n    if\
    \ ($number <= 0) {\n      $result[0] -= $product;\n      $product = 0;\n    }\
    \ else {\n      $product *= $number;\n    }\n    $result[1] += $product;\n  }\n\
    \  return $result;\n}\n", "    if (empty($numbers)) {\n        return array(0,\
    \ 1);\n    }\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number)\
    \ {\n        $sum += $number;\n        $product *= $number;\n    }\n    return\
    \ array($sum, $product);\n}\n</code>\n<|/ a tags=php,recursion dscore=1 |>\n<|\
    \ a tags=php,recursion |>\n<code>\n/**\n * array $numbers\n * int $sum\n * int\
    \ $product\n * int\n */", "    $sum = array_shift($numbers);\n    $product = array_shift($numbers);\n\
    \    foreach ($numbers as $number) {\n        $sum += $number;\n        $product\
    \ *= $number;\n    }\n    return array($sum, $product);\n}\n", "    $sum = 0;\n\
    \    $product = 1;\n    foreach ($numbers as $number) {\n        $sum = $sum +\
    \ $number;\n        $product = $product * $number;\n    }\n    return array($sum,\
    \ $product);\n}", "  if (empty($numbers)) {\n    return array(\n      'sum' =>\
    \ 0,\n      'product' => 1,\n    );\n  }\n\n  $result = [\n    'sum' => 0,\n \
    \   'product' => 1,\n  ];\n\n  $numbers = array_filter($numbers);\n  foreach ($numbers\
    \ as $number) {\n    $result['sum'] += $number;\n    $result['product'] *= $number;\n\
    \  }\n\n  return $result;\n}\n\n</code>\n<|/ a |>\n<| a dscore=1 |>\nHere's a\
    \ working function:\n<code>", "    $sum = 0;\n    $product = 1;\n    foreach ($numbers\
    \ as $number) {\n        $sum += $number;\n        $product *= $number;\n    }\n\
    \    return array($sum, $product);\n}\n", "    $sum = 0;\n    $product = 1;\n\
    \    foreach($numbers as $number)\n    {\n        $sum += $number;\n        $product\
    \ *= $number;\n    }\n    return array($sum, $product);\n}\n</code>\n<|/ a tags=php\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n", "    $sum = 0;\n    $product = 1;\n\
    \    foreach ($numbers as $number) {\n        $sum += $number;\n        $product\
    \ *= $number;\n    }\n    return array('sum' => $sum, 'product' => $product);\n\
    }\n", "    $sum = 0;\n    $product = 1;\n    foreach($numbers as $number) {\n\
    \        $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}\n", "  return array_map(function($sum, $product) use ($numbers)\
    \ {\n    return array( $sum + array_sum($numbers), $product*array_sum($numbers)\
    \ );\n  }, array(0,1), $numbers);\n}\n</code>\nHere's how it works:\nFirst, we\
    \ use array_map to pass both sum and product to our anonymous function where the\
    \ first argument is the sum, and the second argument is the product. We do this\
    \ because array_map requires that each element of the array be passed in as separate\
    \ arguments, and our array of sums and products is already structured as two separate\
    \ arguments.\nThen, we use array_sum to add all the numbers in the array into\
    \ a single sum.\nFinally, we multiply all the numbers in the array by the sum\
    \ of the array, and return the result. Here's a quick example:\n<code>\n$numbers\
    \ = array(3, 4, 2, 1);\n$sum = array_sum($numbers);\n$product = array_sum($numbers);\n\
    $results = array_map(function($sum, $product) use ($numbers) {\n  return array(\
    \ $sum + array_sum($numbers), $product*array_sum($numbers) );\n}, array($sum,\
    \ $product), $numbers);\n\nprint_r($results);\n</code>\nOutput:\n<code>\nArray\n\
    (\n    [0] => Array\n        (\n            [0] => 7\n            [1] => 4\n \
    \       )\n\n    [1] => Array\n        (\n            [0] => 9\n            [1]\
    \ => 16\n        )\n\n    [2] => Array\n        (\n            [0] => 15\n   \
    \         [1] => 4\n        )\n\n    [3] => Array\n        (\n            [0]\
    \ => 19\n            [1] => 16\n        )\n\n)\n</code>\n<|/ a tags=arrays,php,algorithm,multidimensional-array\
    \ dscore=2 |>\n<| c |>\nYour answer is better than mine but I think you didn't\
    \ read the question correctly\n<|/ c |>\n<| c |>\nYou're right. I'll fix it. Thanks.\n\
    <|/ c |>\n<| c |>\nWhat does `array_sum()` do?\n<|/ c |>\n<| c |>\nIt returns\
    \ **the sum** of all values in a given array.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer.\n<|/ c |>\n<| a |>\nMy first idea would be to traverse the array and\
    \ add an extra level of nesting. Something like this :\n<code>\n$result = array();\n\
    $prevSum = 0;\nforeach($numbers as $num) {\n    $sum += $num;\n    $product *=\
    \ $num;\n    $prevSum = $sum;\n    $result[] = array($sum, $product", "    $sum\
    \ = array_shift($numbers);\n    $product = array_shift($numbers);\n    while ($numbers)\
    \ {\n        $sum += array_shift($numbers);\n        $product *= array_shift($numbers);\n\
    \    }\n\n    return [$sum, $product];\n}\n</code>\n<|/ a tags=algorithm,arrays,math,php,math\
    \ |>\n<| a tags=algorithm,arrays,math,php,math |>\nThis works even though I am\
    \ not sure why it works.\n<code>", "    $sum = 0;\n    $product = 1;\n    foreach\
    \ ($numbers as $num) {\n        $sum += $num;\n        $product *= $num;\n   \
    \ }\n    return array($sum, $product);\n}\n", "    // Write your code here.\n\
    \    $sum = 0;\n    $prod = 1;\n    foreach ($numbers as $num) {\n        $sum\
    \ += $num;\n        $prod *= $num;\n    }\n    return array(\"sum\" => $sum, \"\
    prod\" => $prod);\n}\n", "    $product_of_numbers = 1;\n\n    $numbers_to_sum\
    \ = array_filter($numbers, function($number) {\n        return !empty($number);\n\
    \    });\n\n    foreach ($numbers_to_sum as $number) {\n        $product_of_numbers\
    \ = $product_of_numbers * $number;\n    }\n\n    return array('sum' => array_sum($numbers_to_sum),\
    \ 'product' => $product_of_numbers);\n}\n", "  if (empty($numbers)) {\n    return\
    \ array(array(), 1.0);\n  }\n\n  $sum = array();\n  $product = 1.0;\n\n  foreach\
    \ ($numbers as $number) {\n    $sum[] = $number;\n    $product *= $number;\n \
    \ }\n\n  return array($sum, $product);\n}\n", "    if (empty($numbers)) {\n  \
    \      return array(0.0, 1.0);\n    }\n    $sum = 0;\n    $product = 1;\n    foreach\
    \ ($numbers as $number) {\n        $sum += $number;\n        $product *= $number;\n\
    \    }\n    return array((float)$sum, (float)$product);\n}", "  $sum = 0;\n  $product\
    \ = 1;\n  foreach ($numbers as $number) {\n    $sum += $number;\n    $product\
    \ *= $number;\n  }\n  return array($sum, $product);\n}\n</code>\n<|/ a dscore=1\
    \ tags=arrays,function,php |>\n<| a dscore=1 |>\nYou don't need an extra variable.\
    \ Just sum and multiply your array elements:\n<code>", "    // Your code here\n\
    }\n$result = array();\n$result = sum_product($numbers);\nprint_r($result);", " \
    \ $sum = 0;\n  $product = 1;\n  $len = count($numbers);\n  for ($i = 0; $i < $len;\
    \ $i++) {\n    $sum += $numbers[$i];\n    $product *= $numbers[$i];\n  }\n  return\
    \ array($sum, $product);\n}\n</code>\n<|/ a tags=php,arrays dscore=1 |>\n<| c\
    \ |>\nThis doesn't work for negative numbers. I changed it to `(abs($numbers[$i]))`\
    \ and it works as expected.  Thanks!\n<|/ c |>\n<| c |>\nI see I misunderstood\
    \ the problem. Thanks for the feedback. I've updated the answer\n<|/ c |>\n<|\
    \ a dscore=0 tags=php,arrays |>\n<code>\n$array = array();\narray_walk($array,\
    \ function(&$item) { $item = $item + 1; });\n$product = $array[0];\n$sum = 0;\n\
    foreach ($array as $value) {\n   $sum += $value;\n   $product *= $value;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThis doesn't work for negative numbers. I changed\
    \ it to `(abs($numbers[$i]))` and it works as expected.  Thanks!\n<|/ c |>\n<|\
    \ a dscore=0 tags=php,arrays |>\nThis is a bit of a hack, but works :)\n<code>\n\
    $sum = array_reduce($arr, function($carry, $item) {\n    return $carry + $item;\n\
    }, 0);\n\n$product = array_reduce($arr, function($carry, $item) {\n    return\
    \ $carry + ($item * $item);\n}, 1);\n</code>\n<|/ a |>\n<| a dscore=0 tags=php,arrays\
    \ |>\n<code>\n$sum=0;\n$product=1;\nforeach($array as $value){\n    $sum+=$value;\n\
    \    $product*=$value;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. I changed it to `(abs($numbers[$i]))` and it works as expected.  Thanks!\n\
    <|/ c |>\n<| c |>\nThis is correct. `abs` is supposed to work because you are\
    \ adding positive and negative integers\n<|/ c |>\n<| c |>\nYes, but I was wrong\
    \ about that.  The accepted answer works as expected.  Thanks!\n<|/ c |>\n<| a\
    \ |>\n<code>\n$arr = array(1, 5, 12, 4, 1);\n$arr1 = array();\n$sum = 0;\n$product\
    \ = 1;\nforeach ($arr as $value) {\n    $", "    $sum = 0;\n    $prod = 1;\n\n\
    \    foreach ($numbers as $number) {\n        $sum += $number;\n        $prod\
    \ *= $number;\n    }\n\n    return array($sum, $prod);\n}\n</code>\n<|/ a dscore=2\
    \ tags=arrays,math,php |>\n<| c |>\nI don't think this is what the OP wants. He\
    \ said he wants to get the sum of all the elements in an array and that he wants\
    \ to get the product of all the elements in the array.\n<|/ c |>\n<| c |>\nAh,\
    \ I missed that. You are correct.\n<|/ c |>\n<| c |>\nThat is exactly what I needed.\
    \ Thank you. I'm still new to PHP but learning a lot about it now and will keep\
    \ this in mind for future use.\n<|/ c |>\n<| a |>\nYou can use a foreach loop\
    \ to add the values and use array_sum to get the sum and array_prod to get the\
    \ product:\n<code>\n$values = [];\nforeach ($array as $value) {\n    $values[]\
    \ = $value;\n}\n$sum = array_sum($values);\n$product = array_prod($values);\n\
    </code>\n<|/ a dscore=2 tags=arrays,math,php |>\n<| a tags=arrays,math,php |>\n\
    You can use array_reduce to find the sum and array_product to find the product\
    \ of the array:\n<code>\n$sum = array_reduce($array, function ($carry, $item)\
    \ { return $carry + $item; });\n$product = array_reduce($array, function ($carry,\
    \ $item) { return $carry * $item; });\n</code>\nSee http://php.net/array_reduce\
    \ for details on this function.\n<|/ a dscore=1 |>\n<| a tags=arrays,math,php\
    \ dscore=1 |>\n<code>\n$array=[1,2,3,4,5,6,7,8];\n$sum=0;\nforeach($array as $data){\n\
    \   $sum=$sum+$data;\n}\n$prod=$array[0]*$array[0]; //product of first element\n\
    foreach($array as $data){\n   $prod=$prod*$data;\n}\n\necho $sum;\necho $prod;\n\
    </code>\n<|/ a |>\n<| a |>\nThe sum can be calculated by using array_sum() function.\n\
    <code>\n$arr = array(1,2,3,4);\n$sum = array_sum($arr);\necho $sum;\n</code>\n\
    The product can be calculated by using array_prod() function.\n<code>\n$arr =\
    \ array(1,2,3,4);\n$prod = array_prod($arr);\necho $prod;\n</code>\n<|/ a tags=arrays,",
  "    $total = array(0, 1);\n    foreach ($numbers as $number) {\n        $total[0]\
    \ += $number;\n        $total[1] *= $number;\n    }\n    return $total;\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| c |>\nNice answer, but a little verbose. Would be great\
    \ if you could explain the algorithm a bit more, so that future people with the\
    \ same problem can understand it better.\n<|/ c |>\n<| a dscore=2 tags=php,arrays,math\
    \ |>\nA very easy way to do that in php is to use the array_map and array_sum\
    \ and array_product functions:\n<code>\n<?php\n\n$numbers = array(1,2,3,4,5);\n\
    \n$sumArray = array_sum(array_map('intval', $numbers));\n\n$productArray = array_product(array_map('intval',\
    \ $numbers));\n\n$result = $sumArray/$productArray;\n</code>\n<|/ a |>\n<| c |>\n\
    Thanks, this seems to be the simplest solution. I'm gonna leave this here for\
    \ future reference, even if it doesn't match the OP's requirements.\n<|/ c |>\n\
    <| a dscore=2 tags=php,arrays,math |>\nIf you want something that works without\
    \ any libraries you can use this:\n<code>\n$nums = array(1,2,3,4,5);\n$product\
    \ = 1;\n$sum = 1;\nforeach($nums as $num){\n    $product *= $num;\n    $sum +=\
    \ $num;\n}\necho \"$sum x $product\\n\";\n</code>\n<|/ a |>\n<| c |>\nI thought\
    \ that might be the case, I added an edit for clarification to my question, but\
    \ I didn't want to over complicate it too much. Thanks though!\n<|/ c |>\n<| c\
    \ |>\nAhh I see. Well for me the OP wasn't very clear as to what they wanted exactly,\
    \ so I thought I should give you an answer that uses less code :)\n<|/ c |>\n\
    <| c |>\nI edited my question to clarify. Thanks for the help!\n<|/ c |>\n<| a\
    \ |>\nThe first solution that comes to mind is using array_sum() and array_product().\
    \ But in this case it won't work.\nWhat you need is a more general solution. As\
    \ you know, any polynomial function can be expressed as a sum of products of its\
    \ coefficients.\nSo what you need to do is to create a function which can calculate\
    \ the sum of products of the coefficients of a polynomial function, and use it\
    \ with array_sum() and array_product()\n<code>", "  $sum = 0;\n  $product = 1;\n\
    \n  foreach ($numbers as $number) {\n    $sum += $number;\n    $product *= $number;\n\
    \  }\n\n  return array('sum' => $sum, 'product' => $product);\n}\n", "  if (empty($numbers))\
    \ {\n    return array(0, 1);\n  }\n\n  $sum = array_shift($numbers);\n\n  if (empty($numbers))\
    \ {\n    return array($sum, 1);\n  }\n\n  $product = 1;\n\n  foreach ($numbers\
    \ as $number) {\n    $product *= $number;\n  }\n\n  return array($sum, $product);\n\
    }", "  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n    $product *= $number;\n  }\n  return array( $sum, $product );\n\
    }", "  if (!is_array($numbers)) {\n    throw new InvalidArgumentException('The\
    \ given data must be an array.');\n  }\n  $sum = 0;\n  $product = 1;\n  foreach\
    \ ($numbers as $number) {\n    $sum += $number;\n    $product *= $number;\n  }\n\
    \  return array($sum, $product);\n}\n</code>\nThe solution above is O(n) time\
    \ complexity. There are no nested loops, just one loop over the array. The number\
    \ of loops is equal to the length of the array.\nIf you need more speed, you can\
    \ also use a library such as PHPExcel, which has very efficient implementations\
    \ for these kind of problems: http://phpexcel.codeplex.com/\n<|/ a |>\n<| a dscore=2\
    \ |>\n<code>", "    $sum = array_sum($numbers);\n    $prod = array_product($numbers);\n\
    \    return array($sum, $prod);\n}", "    $total = 0;\n    $prod = 1;\n\n    foreach($numbers\
    \ as $number) {\n        $total += $number;\n        $prod *= $number;\n    }\n\
    \n    return array('sum' => $total, 'product' => $prod);\n}\n", "  sort($numbers);\n\
    \  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum +=\
    \ $number;\n    $product *= $number;\n  }\n  return array($sum, $product);\n}\n\
    </code>\n<code>\n<?php", "  $sum = 0;\n  $product = 1;\n  if (is_array($numbers))\
    \ {\n    $count = (count($numbers) - 1);\n    foreach ($numbers as $key => $value)\
    \ {\n      $sum += $value;\n      $product *= $count;\n    }\n  }\n  return array($sum,\
    \ $product);\n}", "  $sum = 0;\n  $product = 1;\n  $length = count($numbers);\n\
    \n  for ($i = 0; $i < $length; $i++) {\n    $sum += $numbers[$i];\n    $product\
    \ *= $numbers[$i];\n  }\n\n  return array($sum, $product);\n}\n", "  $sum = 0;\
    \ $product = 1;\n  foreach ($numbers as $number) {\n    $sum = $sum + $number;\n\
    \    $product = $product * $number;\n  }\n  return array('sum' => $sum, 'product'\
    \ => $product);\n}\n", "    if (empty($numbers)) {\n        return array(0, 1);\n\
    \    }\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n\
    \        $sum = $sum + $number;\n        $product *= $number;\n    }\n    return\
    \ array($sum, $product);\n}", "    if (empty($numbers)) {\n        return array(0,\
    \ 1);\n    }\n    $sum = array_shift($numbers);\n    $product = 1;\n    foreach\
    \ ($numbers as $number) {\n        $product *= $number;\n        $sum += $number;\n\
    \    }\n    return array($sum, $product);\n}\n", "    $product = 1;\n    $sum\
    \ = 0;\n    foreach ($numbers as $number) {\n        $sum += $number;\n      \
    \  $product *= $number;\n    }\n    return array($sum, $product);\n}\n", "   \
    \ $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n        $sum\
    \ += $number;\n        $product *= $number;\n    }\n\n    return array($sum, $product);\n\
    }\n</code>\n<|/ a tags=php |>\n<| c |>\nPlease use an underscore for the first\
    \ variable in the function.  Otherwise you'll get errors in PHP 7\n<|/ c |>\n\
    <| c |>\nWhy did you not use `array_sum` and `array_product`?\n<|/ c |>\n<| c\
    \ |>\nBecause I thought it looked more elegant to implement in a single function,\
    \ but I guess that's probably a matter of taste. Thanks for pointing it out though.\n\
    <|/ c |>\n<| c |>\n, thanks. I've edited the answer accordingly.\n<|/ c |>\n<|\
    \ c |>\nJust wanted to add, the above works perfectly for my needs. Thanks for\
    \ taking the time to give your answer.\n<|/ c |>\n<| a tags=php dscore=4 |>\n\
    As of PHP 5.3 there is a new array_sum() and array_product() function that you\
    \ can use:\n<code>\n$sum     = array_sum($numbers);\n$product = array_product($numbers);\n\
    </code>\n<|/ a |>\n<| c |>\nIf you don't have `array_sum` (or equivalent) then\
    \ this is probably the best answer. Otherwise, just make your own!\n<|/ c |>\n\
    <| a dscore=4 |>\nYou can use the following snippet which i found on php.net\n\
    <code>\n<?php\n/* Returns the sum of an array of numbers */", "  // We must always\
    \ return an array with two elements, otherwise our function wouldn't be returning\
    \ a\n  // single result. Otherwise, we would have to return two variables, which\
    \ can just be arrays.\n  return [\n    $numbers[0] === 0 || $numbers[0] === null\
    \ ? 0 : 1,\n    array_sum($numbers) === 0 || array_sum($numbers) === null ? 1\
    \ : array_sum($numbers)\n  ];\n}\n</code>\n<|/ a dscore=0 tags=php,arrays |>\n\
    <| c |>\nI tested this solution and it seems to work well for small arrays, but\
    \ it seems like this is going to be very slow for larger arrays, as PHP has to\
    \ loop through all the numbers in your array twice. The other solutions below\
    \ are better than this one for larger arrays, because they don't need to iterate\
    \ through each number twice.\n<|/ c |>\n<| a dscore=0 |>\nI hope you meant this\
    \ - if not, please let me know.\n<code>", "    if (empty($numbers)) {\n      \
    \  $numbers = array(0);\n    }\n    $sum = 0;\n    $product = 1;\n    foreach\
    \ ($numbers as $number) {\n        $sum += $number;\n        $product *= $number;\n\
    \    }\n    return array($sum, $product);\n}\n", "    if (empty($numbers)) {\n\
    \        return array(array(0, 1));\n    }\n    $sum = 0;\n    $product = 1;\n\
    \    foreach ($numbers as $number) {\n        $sum += $number;\n        $product\
    \ *= $number;\n    }\n    return array($sum, $product);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks bro!! it works perfectly. I am going to study it more and\
    \ try to understand it.\n<|/ c |>\n<| c |>\nThanks to you too :) You will get\
    \ used to it soon enough! :-)\n<|/ c |>\n<| c |>\nIt works on some cases but fails\
    \ on others. For example, the following inputs:\n\n    `sum_product([1, 2, 3,\
    \ 4]);\n    sum_product([-1, 1]);\n    sum_product([1, 0, -2]);\n    sum_product([0,\
    \ 1, -1, -1]);`\n\nReturns the following output:\n\n    `array(2) {\n      [0]=>\n\
    \      int(-5)\n      [1]=>\n      int(0)\n    }`\n<|/ c |>\n<| c |>\nThe result\
    \ should be `array(2) {\n  [0]=>\n  int(6)\n  [1]=>\n  int(3)\n}`\n<|/ c |>\n\
    <| c |>\nAh yes, my bad, I've updated my answer accordingly. Sorry for misunderstanding\
    \ your question before.\n<|/ c |>\n<| a dscore=1 tags=php,algorithm |>\nYou can\
    \ use array_sum() and array_prod() functions to find sum and product of given\
    \ array. The function could be implemented like this:\n<code>", "  $product =\
    \ 1;\n  $sum = 0;\n  if (empty($numbers)) return array(0, $product);\n  foreach\
    \ ($numbers as $num) {\n    $sum += $num;\n    $product *= $num;\n  }\n  return\
    \ array( $sum, $product );\n}", "    sort($numbers);\n    $sum = 0;\n    $product\
    \ = 1;\n    $i = 1;\n    while ($i <= count($numbers)) {\n        $sum += $numbers[$i];\n\
    \        $product *= $numbers[$i];\n        $i++;\n    }\n    return array($sum,\
    \ $product);\n}\n", "    $result = array();\n    foreach ($numbers as $n) {\n\
    \        $sum = array_sum($numbers);\n        $product = array_product($numbers);\n\
    \        $result[] = array($sum, $product);\n    }\n    return $result;\n}\n</code>\n\
    <|/ a tags=php,arrays,sum dscore=5 |>\n<| c |>\nThis answer is awesome! I just\
    \ used this to calculate fibonacci sequences for my own project and it's very\
    \ elegant. Nice!\n<|/ c |>\n<| c |>\nThis one worked best for me. Thanks!\n<|/\
    \ c |>\n<| a |>\nI needed a function that returned the sum of all values in an\
    \ array:\n<code>", "  if (count($numbers) === 0) {\n    return array(0, 1);\n\
    \  }\n  $product = 1;\n  $sum = 0;\n  for ($i = 0; $i < count($numbers); $i++)\
    \ {\n    $sum += $numbers[$i];\n    $product *= $numbers[$i];\n  }\n  return array($sum,\
    \ $product);\n}\n", "    if (!$numbers) {\n        return array(0, 1);\n    }\n\
    \    // Convert array to an associative array with an integer key and value with\
    \ the key being the index.\n    $number_assoc = array();\n    foreach ($numbers\
    \ as $index => $number) {\n        $number_assoc[$index] = $number;\n    }\n \
    \   $sum = 0;\n    $product = 1;\n    foreach ($number_assoc as $index => $number)\
    \ {\n        $sum += $number;\n        $product *= $number;\n    }\n    return\
    \ array('sum' => $sum, 'product' => $product);\n}\n", "  if (empty($numbers))\
    \ {\n    return array(0, 1);\n  }\n  $sum = 0;\n  $product = 1;\n  foreach ($numbers\
    \ as $number) {\n    $sum += $number;\n    $product *= $number;\n  }\n  return\
    \ array($sum, $product);\n}\n", "  if (!is_array($numbers)) {\n    throw new InvalidArgumentException;\n\
    \  }\n\n  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum\
    \ += $number;\n    $product *= $number;\n  }\n\n  return array($sum, $product);\n\
    }\n", "  if (empty($numbers)) return array(0, 1);\n\n  $total = array_sum($numbers);\n\
    \  $product = array_reduce($numbers, function($product, $number) {\n    return\
    \ $product + $number;\n  });\n\n  return array('total' => $total, 'product' =>\
    \ $product);\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\nThe function below will\
    \ calculate the sum of the array and product of the array. It will also check\
    \ the length of array and will return an error if the array is empty. It also\
    \ checks for integers and will return an error if the array contains anything\
    \ other than integers. It will return an empty array if the array is empty.\n\
    <code>", "    $result = [0, 0];\n    if (empty($numbers)) {\n        return $result;\n\
    \    }\n    $sum = $result[0];\n    $product = $result[1];\n    for ($i = count($numbers)\
    \ - 1; $i >= 0; --$i) {\n        $sum += $numbers[$i];\n        $product *= $numbers[$i];\n\
    \    }\n    return $result;\n}\n", "    if (empty($numbers)) {\n        return\
    \ array(0, 1);\n    }\n    $total_product = 1;\n    $total_sum = 0;\n    foreach\
    \ ($numbers as $number) {\n        $total_product *= $number;\n        $total_sum\
    \ += $number;\n    }\n    return array($total_sum, $total_product);\n}\n</code>\n\
    <|/ a dscore=4 tags=php,math,algorithm |>\n<| c |>\nthanks, but i was looking\
    \ for a more general solution that doesn't require knowledge of the array to be\
    \ in order, like array_sum, array_product and array_combine (which is something\
    \ i know of).\n<|/ c |>\n<| c |>\n: array_combine and array_product are generic\
    \ functions. Not specific to any array.\n<|/ c |>\n<| c |>\n: In that case, why\
    \ are you accepting one answer when it comes down to doing the same thing with\
    \ an arbitrary array?\n<|/ c |>\n<| c |>\n: No offense intended, but you didn't\
    \ answer the question. You just described a way to do it with specific arrays,\
    \ and now you are saying it's just another way to do it with arbitrary arrays?\
    \ What is the problem with that?\n<|/ c |>\n<| c |>\n: You were asking for a more\
    \ general solution. One that would work for any arbitrary array (which this one\
    \ does). That's what you're asking for. Why are you not accepting it? It's not\
    \ a bad solution.\n<|/ c |>\n<| a |>\nFor generic arrays, you can try something\
    \ like this:\n<code>", "    $result = array(\n        'sum' => 0,\n        'product'\
    \ => 1,\n    );\n    if (empty($numbers)) {\n        return $result;\n    }\n\n\
    \    foreach ($numbers as $value) {\n        $result['sum'] += $value;\n     \
    \   $result['product'] *= $value;\n    }\n    return $result;\n}\n", "  if (count($numbers)\
    \ == 0) {\n    return array(0, 1);\n  }\n  $sum = 0;\n  $product = 1;\n  foreach\
    \ ($numbers as $number) {\n    $sum += $number;\n    $product *= $number;\n  }\n\
    \  return array($sum, $product);\n}", "    $sum = 0;\n    $product = 1;\n    foreach\
    \ ($numbers as $number) {\n        $sum = $sum + $number;\n        $product =\
    \ $product * $number;\n    }\n    return array($sum, $product);\n}\n", "    //\
    \ Write your code here\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers\
    \ as $number) {\n        $sum += $number;\n        $product *= $number;\n    }\n\
    \    return array($sum, $product);\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c\
    \ |>\nI agree with your solution, but it does not solve the actual problem. Your\
    \ code does not return 0 when the array is empty. The code also does not return\
    \ the correct result when the array contains negative integers (negative sum and\
    \ product will result in a negative result).\n<|/ c |>\n<| c |>\nI did not notice\
    \ that negative numbers were required. I will update my solution accordingly.\
    \ Thanks.\n<|/ c |>\n<| c |>\nNo problem. I'll upvote your solution too.\n<|/\
    \ c |>\n<| a |>\nFor positive numbers, you can just do:\n<code>", "    $sum =\
    \ 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n        $sum +=\
    \ $number;\n        $product *= $number;\n    }\n    return [\n        'sum' =>\
    \ $sum,\n        'product' => $product,\n    ];\n}\n", "  $sum = 0;\n  $product\
    \ = 1;\n\n  for ($i = 0; $i < count($numbers); $i++) {\n    $sum += $numbers[$i];\n\
    \    $product *= $numbers[$i];\n  }\n\n  return array($sum, $product);\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\nTry this\n<code>\n$array =\
    \ [\n    '0' => [\n        'title' => 'My First Post',\n        'content' => 'Lorem\
    \ ipsum dolor sit amet, consectetur adipisicing elit.',\n        'date' => '2017-01-13\
    \ 00:00:00',\n    ],\n    '1' => [\n        'title' => 'Second Post',\n      \
    \  'content' => 'Lorem ipsum dolor sit amet, consectetur adipisicing elit.',\n\
    \        'date' => '2017-01-13 00:00:00',\n    ],\n    '2' => [\n        'title'\
    \ => 'Third Post',\n        'content' => 'Lorem ipsum dolor sit amet, consectetur\
    \ adipisicing elit.',\n        'date' => '2017-01-13 00:00:00',\n    ],\n    '3'\
    \ => [\n        'title' => 'Fourth Post',\n        'content' => 'Lorem ipsum dolor\
    \ sit amet, consectetur adipisicing elit.',\n        'date' => '2017-01-13 00:00:00',\n\
    \    ],\n];\n\n$result = [];\n\narray_walk($array, function($a) use (&$result)\
    \ {\n    $result[] = $a['date'];\n});\n\n$result = array_unique($result);\n\n\
    $resultCount = count($result);\n\n$count = $resultCount / 3;\n\nif ($count < $resultCount)\
    \ {\n    $count = ceil($resultCount);\n} else {\n    $count = $resultCount;\n\
    }\n\n$result = [];\n\nfor ($i = 0; $i < $count; $i++) {\n    $result[($i * 3)]\
    \ = $array[($i * 3)];\n}\n\n$result = array_map(\"unserialize\", array_unique(array_map(\"\
    serialize\", $result)));\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n$array\
    \ = array( 0=>array('title'=>'My First Post','content'=>'Lorem ipsum dolor sit\
    \ amet, consectetur adipisicing elit.','date'=>'2017-01-13 00:00:00'),\n    1=>array('title'=>'Second\
    \ Post','content'=>'Lorem ipsum dolor sit amet, consectetur adipisicing elit.','date'=>'",
  "  return array(\n    array_sum($numbers),\n    array_reduce($numbers, function($sum,\
    \ $number) { return $sum + $number; });\n  );\n}\n</code>\n<|/ a dscore=2 tags=php,arrays,sum\
    \ |>\n<| a tags=php,arrays,sum dscore=1 |>\nAn improved version of code by Robert:\n\
    <code>", "  if (empty($numbers)) {\n    return array(0 => 0, 1 => 1);\n  }\n \
    \ $result = array(0 => 0, 1 => 1);\n  for ($i = 0; $i < count($numbers); $i++)\
    \ {\n    $result[0] += $numbers[$i];\n    $result[1] *= $numbers[$i];\n  }\n \
    \ return $result;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=1 tags=arrays,php\
    \ |>\nHere's another solution with less loops and less variables:\n<code>", " \
    \ $sum = array_shift($numbers);\n  $product = 1;\n\n  foreach($numbers as $number)\
    \ {\n    $product *= $number;\n    $sum += $number;\n  }\n\n  return array($sum,\
    \ $product);\n}\n</code>\n<|/ a |>\n<| a |>\n<code>\n<?php\n$arr = [1, 2, 3, 4,\
    \ 5];\n$sum = array_sum($arr);\n$prod = array_product($arr);\n</code>\n<|/ a dscore=5\
    \ tags=algorithm,math,php,arrays |>\n<| a dscore=4 |>\nFor PHP >=5.5.0 you can\
    \ use the native array_sum and array_product functions:\n<code>\n$arr = [1, 2,\
    \ 3, 4, 5];\n$sum  = array_sum($arr);\n$prod = array_product($arr);\n</code>\n\
    Or even shorter:\n<code>\n$sum  = array_sum(array(1, 2, 3, 4, 5));\n$prod = array_product(array(1,\
    \ 2, 3, 4, 5));\n</code>\n<|/ a tags=algorithm,math,php,arrays |>\n<| a |>\nIf\
    \ you want to find the sum of array elements and multiply them then you can use\
    \ below code:\n<code>\n<?php\n\n$arr = [1, 2, 3, 4, 5];\n\n$sum = array_sum($arr);\n\
    \n$prod = array_product($arr);\n\n$sum = $sum * $prod;\n\necho $sum;\n</code>\n\
    The output is:\n<code>\n15\n</code>\n<|/ a tags=algorithm,math,php,arrays dscore=4\
    \ |>\n<| a dscore=4 |>\nThe answer of Suman is correct but the code is not as\
    \ efficient as you might think:\n<code>\n<?php\n$arr = [1, 2, 3, 4, 5];\n$sum\
    \  = array_sum($arr);\n$prod = array_product($arr);\n$sum = $sum * $prod;\necho\
    \ $sum;\n</code>\nBecause of array_sum(), array_product() are iterating through\
    \ each element, so the function itself is O(n*m) where n is the length of array\
    \ and m is the length of array.\nBut array_sum() and array_product() are also\
    \ iterating through each element, so the complexity is O(n^2) or O(n*n) where\
    \ n is the length of array.\nTo reduce this problem, you need to find the sum\
    \ of array without iterating through each element by array_walk(), but then you\
    \ will need to do the division:\n<code>\n<?php\n$arr = [1, 2, 3, 4, 5];\narray_walk($arr,\
    \ function(&$v, $k){\n    $v = $v*$k;\n});\necho array_sum($arr);\n</code>\nThis\
    \ code is not O(n*m) anymore because array_", "    if (empty($numbers)) {\n  \
    \      return array(0, 1);\n    }\n\n    $sum = 0;\n    $product = 1;\n\n    foreach\
    \ ($numbers as $number) {\n        $sum += $number;\n        $product *= $number;\n\
    \    }\n\n    return array($sum, $product);\n}\n</code>\nAnd here is a version\
    \ that also works on multidimensional arrays:\n<code>", "    if (empty($numbers))\
    \ {\n        return array(array(0, 0));\n    }\n\n    $product = 1;\n    $sum\
    \ = array_shift($numbers);\n    $results = array();\n    foreach ($numbers as\
    \ $number) {\n        $product = $product * $number;\n        $results[] = array(\
    \ $sum + $product, $product );\n        $sum += $product;\n    }\n    return $results;\n\
    }\n</code>\nThe function is tested with this code:\n<code>\n$result = sum_product(array(12,\
    \ 45, 0, 99));\nprint_r($result);\n</code>\nAnd it outputs:\n<code>\nArray ( [0]\
    \ => Array ( [0] => 712 [1] => 0 ) [1] => Array ( [0] => 186 [1] => 1 ) ) \n</code>\n\
    <|/ a |>\n<| a tags=php,arrays,algorithm dscore=2 |>\nThe only thing i can think\
    \ of is using some kind of loops to achieve it...\n<code>\n<?php\n$numbers = [1,2,3,4,5,6,7,8,9,10];\n\
    \nforeach($numbers as $value){\n    for($i=1; $i<10; $i++){\n        $sum[] =\
    \ $value + $i;\n        $product[] = $value * $i;\n    }\n}\n\nvar_dump($sum);\n\
    var_dump($product);", "    return array(array_sum($numbers), array_product($numbers));\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nI like this, it could be made more\
    \ efficient.\n<|/ c |>\n<| a tags=php,arrays |>\nFor some reason this was the\
    \ first thing that popped in my head:\n<code>", "    $sum = 0;\n    $product =\
    \ 1;\n    foreach($numbers as $number) {\n        $sum += $number;\n        $product\
    \ *= $number;\n    }\n    return array($sum, $product);\n}\n", "  // Initialize\
    \ an empty sum and a product of 1.\n  $sum = array(0, 1);\n  $product = array_fill(1,\
    \ count($numbers), 1);\n  // Loop through the array, adding each element to sum\
    \ and product and returning both.\n  return array_map(function($value) use ($sum,\
    \ $product) {\n    return array($sum[0] + $value, $product[0] * $value);\n  },\
    \ $numbers);\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer but I want\
    \ the answer in PHP code\n<|/ c |>\n<| c |>\n, sorry then. I'm not too sure about\
    \ PHP, but maybe the answer here will help you a little bit? [PHP: Add elements\
    \ of a multidimensional array together, with conditions](https://stackoverflow.com/q/16094182/9662608)\n\
    <|/ c |>\n<| a tags=arrays,php |>\nYou can use a variable inside array_reduce\
    \ to keep track of the sum and product.\n<code>", "    $sum = 0;\n    $product\
    \ = 1;\n    foreach ($numbers as $number) {\n        $sum += $number;\n      \
    \  $product *= $number;\n    }\n    return array($sum, $product);\n}\n</code>\n\
    Now the problem is you're using $numbers as your main array, which is actually\
    \ a multi-dimensional array. Since you have no knowledge on how many dimensions\
    \ that array may have, you may have to do something like this:\n<code>", "   \
    \ if (empty($numbers)) {\n        return array(0, 1);\n    }\n    $sum = 0;\n\
    \    $product = 1;\n    foreach ($numbers as $number) {\n        $sum += $number;\n\
    \        $product *= $number;\n    }\n    return array($sum, $product);\n}\n</code>\n\
    <|/ a tags=function,arrays,php |>\n<| c |>\nThat's a really clever solution!\n\
    <|/ c |>\n<| c |>\nBut I wouldn't name this function `sumProduct`. A function\
    \ named `sumProduct` could mean two things: sum all numbers in a list or the product\
    \ of all numbers in a list. I'd call this function `sumListProduct` or `sumArrayProduct`\
    \ or something like that. Which brings us to my original point: Why bother? The\
    \ actual functionality is clearly `sumProduct` (and `product`).\n<|/ c |>\n<|\
    \ c |>\nGood point. I was in a rush and only just noticed it had been answered.\n\
    <|/ c |>\n<| a tags=function,arrays,php dscore=4 |>\n<code>\n$numbers = array(1,2,3,4);\n\
    echo array_sum($numbers);\n</code>\nor\n<code>\n$numbers = array(1,2,3,4);\narray_sum($numbers);\n\
    </code>\n<|/ a |>\n<| c |>\nNot a good solution, because it does not account for\
    \ empty arrays. E.g.\narray_sum(array()) // returns false\narray_sum(array(0,1,2,3))\
    \ // returns 0\n<|/ c |>\n<| c |>\nWhat happens if you pass empty arrays to array_sum?\
    \ What do you want it to return then? `null`, `0`, `false`?\n<|/ c |>\n<| c |>\n\
    Well, in that case, it returns false which is not a good solution for me.\n<|/\
    \ c |>\n<| c |>\n, `array_sum(array())` returns `null`\n<|/ c |>\n<| a tags=function,arrays,php\
    \ |>\n<code>", "    $return = array(array(), 1);\n    foreach ($numbers as $number)\
    \ {\n        $return[0][$number] += 1;\n        $return[1] *= $number;\n    }\n\
    \    return $return;\n}\n", "  $s = $product = 0;\n  foreach ($numbers as $n)\
    \ {\n    $s = $s + $n;\n    $product = $product * $n;\n  }\n  return array($s,\
    \ $product);\n}\n", "    $sum = 0;\n    $product = 1;\n\n    foreach ($numbers\
    \ as $number) {\n        $sum += $number;\n        $product *= $number;\n    }\n\
    \n    return array($sum, $product);\n}\n", "  $total = array_sum($numbers);\n\
    \  $product = array_product($numbers);\n  return array($total, $product);\n}",
  "    sort($numbers);\n    $sum_product = array();\n    $sum = 0;\n    foreach ($numbers\
    \ as $number) {\n        $product = 1;\n        for ($i = 0; $i < count($numbers);\
    \ $i++) {\n            $product *= $numbers[$i];\n        }\n        $sum += $number;\n\
    \        $sum_product[] = array($sum, $product);\n    }\n    if (empty($sum_product))\
    \ {\n        $sum_product = array(\n            0 => array(\n                'sum'\
    \ => 0,\n                'product' => 1,\n            ),\n        );\n    }\n\
    \    return $sum_product;\n}\n", "    if (empty($numbers)) {\n        return array(0,1);\n\
    \    }\n    $sum = array_sum($numbers);\n    $prod = array_product($numbers);\n\
    \    return array($sum,$prod);\n}", "    if (empty($numbers)) {\n        return\
    \ array(0, 1);\n    }\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers\
    \ as $number) {\n        $sum += $number;\n        $product *= $number;\n    }\n\
    \    return array($sum, $product);\n}\n</code>\nNow let's use it:\n<code>\n$arr\
    \ = [1, 3, 6, 10, 14];", "  $sum = 0;\n  $prod = 1;\n  if ($numbers !== NULL)\
    \ {\n    foreach ($numbers as $number) {\n      if (is_int($number)) {\n     \
    \   $sum = $sum + $number;\n        $prod = $prod * $number;\n      }\n    }\n\
    \  }\n  return array($sum, $prod);\n}", "    list($sum, $product) = [0, 1];\n\
    \    foreach ($numbers as $number) {\n        $sum += $number;\n        $product\
    \ *= $number;\n    }\n    return [\n        'sum' => $sum,\n        'product'\
    \ => $product,\n    ];\n}\n</code>\n<|/ a |>\n<| a tags=php,arrays,algorithm |>\n\
    Just keep a running total. You can do that with a simple loop over your array\
    \ of numbers.\n<code>\n$total = 0;\nforeach($nums as $n) {\n    $total += $n;\n\
    }\n</code>\nNow you can return $total, or whatever\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\nI believe this will do:\n<code>", "    if (empty($numbers)) {\n        return\
    \ array(\n            \"sum\" => 0,\n            \"product\" => 1,\n        );\n\
    \    }\n    $resultArray = array();\n    $resultArray[\"sum\"] = $resultArray[\"\
    product\"] = 0;\n    foreach ($numbers as $index => $number) {\n        $resultArray[\"\
    sum\"] += $number;\n        $resultArray[\"product\"] *= $number;\n    }\n   \
    \ return $resultArray;\n}\n", "    $total = array();\n    $product = 1;\n    foreach\
    \ ($numbers as $number) {\n        $total[] = array_sum($total) ? array_sum($total)\
    \ + $number : $number;\n        $product *= $number;\n    }\n    $total[] = 0;\n\
    \    return array('sum' => array_sum($total), 'product' => $product);\n}\n</code>\n\
    <|/ a |>\n<| c |>\nWhy `array_sum` and not `array_reduce`?\n<|/ c |>\n<| c |>\n\
    This is much simpler that previous answers\n<|/ c |>\n<| a tags=algorithm,php,math,arrays,performance\
    \ dscore=5 |>\nI know this is a little late to the party, but I thought I'd add\
    \ my solution here as another option. Because the other solutions require two\
    \ loops, they are O(n2) in complexity. Here is one that runs in O(n):\n<code>\n\
    $arr = [1,2,3,4,5];\n$sum = 0;\n$product = 1;\n\nforeach ($arr as $element) {\n\
    \    $product *= $element;\n    $sum += $element;\n}\n\necho $sum; // prints 25\n\
    echo $product; // prints 625\n</code>\n<|/ a |>\n<| c |>\nNice, but I'm having\
    \ some trouble following how this works exactly. Can you please explain what's\
    \ happening here?\n<|/ c |>\n<| c |>\n: this line `$product *= $element;` multiplies\
    \ each element in the array by its product, and then adds the element to the sum.\n\
    <|/ c |>\n<| c |>\n, I'm still confused how this works. My understanding was that\
    \ if you simply use `*= $element` each time through the loop you won't end up\
    \ with the correct sum and product. Can you explain how this works exactly?\n\
    <|/ c |>\n<| c |>\n, yes, I believe you are correct that `*= $element` isn't exactly\
    \ the correct way to go. As I said, I believe my solution is O(n), but I'm still\
    \ trying to understand what exactly is happening.\n<|/ c |>\n<| c |>\nThe idea\
    \ is that in the loop, the product is multiplied by the previous element and added\
    \ to the sum. So, in your example, `1*1 + 2*2 + 3*3 + 4*4 + 5*5` would become\
    \ `1*1 + 2*2 + 6*3 + 12*4 + 18*5`.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "   \
    \ $sum = 0;\n    $product = 1;\n    $size = count($numbers);\n    for ($i = 0;\
    \ $i < $size; $i++) {\n        $product = $product * $numbers[$i];\n        $sum\
    \ = $sum + $product;\n    }\n    return array($sum, $product);\n}\n", "  $result\
    \ = array(\n    'sum' => 0,\n    'product' => 1,\n  );\n\n  foreach ($numbers\
    \ as $number) {\n    if ($number) {\n      $result['sum'] += $number;\n      $result['product']\
    \ *= $number;\n    }\n  }\n\n  return $result;\n}\n</code>\n<|/ a |>\n<| a dscore=1\
    \ |>\n<code>", "  if (!$numbers) {\n    return array(0, 1);\n  }\n\n  $sum = 0;\n\
    \  $product = 1;\n  foreach ($numbers as $number) {\n    $sum += $number;\n  \
    \  $product *= $number;\n  }\n\n  return array(($sum), $product);\n}\n", "   \
    \ if (empty($numbers)) {\n        return array(\n            \"sum\" => 0,\n \
    \           \"product\" => 1\n        );\n    }\n\n    $sum = 0;\n    $product\
    \ = 1;\n\n    foreach ($numbers as $number) {\n        $sum += $number;\n    \
    \    $product *= $number;\n    }\n\n    return array(\n        \"sum\" => $sum,\n\
    \        \"product\" => $product\n    );\n}\n</code>\n<|/ a dscore=1 tags=arrays,php,math\
    \ |>\n<| c |>\nNot quite what I was expecting, but this is really a good start\
    \ - thanks :)\n<|/ c |>\n<| c |>\nSure, no problem. Have a look into the docs\
    \ (http://www.php.net/manual/en/language.types.array.php#example-351), there is\
    \ a lot of examples for array functions. Also, please accept the answer if you've\
    \ gotten the info you were looking for.\n<|/ c |>\n<| a dscore=0 tags=arrays,php,math\
    \ |>\n<code>\n$numbers = array(1,2,3,4,5);\n$sum = array_sum($numbers);\n$product\
    \ = array_product($numbers);\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $numbers = array(1,2,3,4,5);\n$numbers = array_sum($numbers);\n$numbers = array_product($numbers);\n\
    \necho 'Sum = '.$numbers.'<br />';\necho 'Product = '.$numbers;", "    $sum =\
    \ $product = 1;\n\n    // If the given array is empty, return an equal array.\n\
    \    if (empty($numbers)) {\n        return array($sum, $product);\n    }\n\n\
    \    foreach ($numbers as $number) {\n        // The product should only be incremented\
    \ for the numbers different from the current sum.\n        if ($number != $sum)\
    \ {\n            $product *= $number;\n        }\n\n        // The sum should\
    \ only be incremented for numbers different from the current product.\n      \
    \  if ($number != $product) {\n            $sum += $number;\n        }\n    }\n\
    \n    return array($sum, $product);\n}\n", "    // Sum all numbers\n    $sum =\
    \ array_sum($numbers);\n    $product = 1;\n\n    // For each number\n    foreach\
    \ ($numbers as $number) {\n        // Multiply that number with the current sum\n\
    \        $product *= $number;\n        // Add the current sum number to our product\n\
    \        $product += $sum;\n    }\n\n    // Return the arrays\n    return array($sum,\
    \ $product);\n}", "    $sum = 0;\n    $product = 1;\n    foreach ($numbers as\
    \ $number) {\n        $sum += $number;\n        $product *= $number;\n    }\n\
    \    return array('sum' => $sum, 'product' => $product);\n}", "    $sum = 0;\n\
    \    $product = 1;\n    foreach ($numbers as $number) {\n        $sum += $number;\n\
    \        $product *= $number;\n    }\n\n    return array('sum' => $sum, 'product'\
    \ => $product);\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nThis works but for large\
    \ arrays you might want to consider a slightly different algorithm: http://stackoverflow.com/a/34601010/2572176\n\
    <|/ c |>\n<| c |>\n- agreed, for large arrays your approach is better, but for\
    \ small arrays it will be slower that my implementation.\n<|/ c |>\n<| c |>\n\
    You don't need to use recursion for this, you could simply do `array_reduce($numbers,\
    \ function($carry, $number) { return $carry + $number; });` which works well for\
    \ short arrays. It's not particularly efficient for large arrays, though (O(n^2)).\n\
    <|/ c |>\n<| c |>\n- your solution works perfectly for large arrays, but if you\
    \ have some very large arrays, like `$numbers` could be a very long string or\
    \ a very long array of ints and you want the best possible performance you will\
    \ need to consider a different algorithm (see my answer below).\n<|/ c |>\n<|\
    \ c |>\n- for small arrays you should use [array_sum](http://php.net/array_sum)\
    \ rather than `array_reduce`.\n<|/ c |>\n<| a |>\nI used array_walk to iterate\
    \ the array and add the values. \n<code>\n$array = [1,2,3,4];\n$sum = 0;\n$product\
    \ = 1;\narray_walk($array, function(&$item, $key) use (&$sum, &$product) {\n \
    \   $sum += $item;\n    $product *= $item;\n});\n</code>\n<|/ a dscore=5 tags=php\
    \ |>\n<| c |>\nIf you don't need the array to be modified you probably don't need\
    \ to use array_walk. The array_sum function does the same thing and is faster\
    \ than array_walk for small arrays, O(n).\n<|/ c |>\n<| c |>\nIf you don't need\
    \ the array to be modified you probably don't need to use array_walk. The array_sum\
    \ function does the same thing and is faster than array_walk for small arrays,\
    \ O(n).\n<|/ c |>\n<| c |>\nAt the time of writing this comment, array_reduce\
    \ didn't exist, so this is still the best solution.\n<|/ c |>\n<| c |>\nOops looks\
    \ like `array_reduce` has been added since this comment :)\n<|/ c |>\n<| a |>\n\
    <code>\n$numbers = [1,2,3,4,5,6,", "  $total = array_sum($numbers);\n  $product\
    \ = array_product($numbers);\n\n  return array($total, $product);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nJust to point out that this requires PHP >= 5.5.\n\
    <|/ c |>\n<| c |>\nWhat does `array_sum` and `array_product` have to do with this?\n\
    <|/ c |>\n<| c |>\nI think its best to explain what this function does, then let\
    \ the OP decide how they want to use it\n<|/ c |>\n<| a tags=arrays,php |>\nHere's\
    \ another solution using array_reduce:\n<code>\n$arr = array(1, 2, 3, 4, 5);\n\
    $total = array_reduce($arr, function($total, $num) { \n    return $total + $num;\
    \ \n});\n$product = array_reduce($arr, function($product, $num) { \n    return\
    \ $product * $num; \n});\n</code>\n<|/ a dscore=1 |>\n<| a |>\nSince PHP5.5 there\
    \ is now array_reduce\n<code>\n$sum = array_reduce($arr, function($c, $v) { return\
    \ $c + $v; });\n$prod = array_reduce($arr, function($c, $v) { return $c * $v;\
    \ });\n</code>\n<|/ a tags=arrays,php dscore=0 |>\n<| a tags=arrays,php dscore=0\
    \ |>\nThis should work.\n<code>\n$array = [1,2,3,4,5,6,7,8,9];\n$sum = 0;\n$product\
    \ = 1;\nfor($i = 0; $i < sizeof($array); $i++) {\n    $sum += $array[$i];\n  \
    \  $product *= $array[$i];\n}\n\necho \"Sum: \" . $sum . \"<br>\";\necho \"Product:\
    \ \" . $product;\n</code>\n<|/ a |>\n<| a tags=arrays,php |>\nUsing array_sum()\
    \ and array_product() \n<code>\n$array = [1,2,3,4,5,6,7,8,9];\n$sum = 0;\n$product\
    \ = 1;\nforeach ($array as $k => $v) {\n  $sum += $v;\n  $product *= $v;\n}\n\
    echo \"Sum: \" . $sum . \"<br>\";\necho \"Product: \" . $product;\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\nTry this :\n<code>", "  $sum = 0;\n  $product\
    \ = 1;\n  foreach ($numbers as $number) {\n    $sum += $number;\n    $product\
    \ *= $number;\n  }\n  return array(\"sum\" => $sum, \"product\" => $product);\n\
    }\n</code>\n<|/ a tags=php,arrays,sum |>\n<| c |>\nPlease consider adding a short\
    \ explanation to your answer by editing it, since currently it only contains code\n\
    <|/ c |>\n<| a dscore=5 |>\nPHP has a nice array function called array_sum. It\
    \ can accept an array and add each element to a running total:\n<code>\n$sum=\
    \ array_sum($numbers);\n</code>\nIf you want a default value of zero to appear\
    \ if the array is empty, just use array_sum with a second parameter set to zero.\n\
    <|/ a tags=php,arrays,sum |>\n<| c |>\nI wouldn't use this approach. `array_sum()`\
    \ works only on numeric types. So if an array contains letters, it returns `0`\
    \ instead of `'a'`.\n<|/ c |>\n<| c |>\nThanks, array_sum() was what I needed.\
    \ I've added some more info below regarding how to deal with arrays with letters.\n\
    <|/ c |>\n<| a |>\nThere is also another way to get the sum of array elements.\
    \ This method doesn't require a loop. Just need to use array_sum().\n<code>\n\
    $sum = array_sum($numbers);\n</code>\n<|/ a tags=php,arrays,sum dscore=5 |>\n\
    <| a |>\nFor completeness, if your values are all integers, you can do the following:\n\
    <code>\narray_sum($numbers);\n</code>\n<|/ a tags=php,arrays,sum dscore=5 |>\n\
    <| c |>\nThis does _not_ work if your values aren't integers. `Warning: array_sum()\
    \ expects parameter 1 to be array, integer given`\n<|/ c |>\n<| c |>\nIf your\
    \ values are floats, `array_sum($numbers)` will return 0\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\n<?php\n$numbers = [1, 2, 3, 4];\n\n$total = array_sum($numbers);\n\
    echo \"The total of the array is \" . $total;\n\n$sum = array_sum($numbers, 0,\
    \ 0);\necho \"The sum of the array is \" . $sum;\n", "    $product_sum = 0;\n\
    \    $product_product = 1;\n    foreach ($numbers as $number) {\n        $product_sum\
    \ += $number;\n        $product_product *= $number;\n    }\n    return array($product_sum,\
    \ $product_product);\n}\n", "    $sum = array_shift($numbers);\n    $product =\
    \ 1;\n    foreach ($numbers as $number) {\n        $product *= $number;\n    \
    \    $sum += $number;\n    }\n    return array('sum' => $sum, 'product' => $product);\n\
    }\n</code>\n<|/ a tags=php |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = array();\n\
    for($i = 0; $i < 10; $i++)\n{\n$arr[] = rand(0, 10);\n}\n\n$sum = 0;\n$prod =\
    \ 1;\n\nforeach($arr as $key => $val)\n{\n$prod *= $val;\n$sum += $val;\n}\n\n\
    echo \"Sum is: \".$sum;\necho \"Product is: \".$prod;", "  $result = array();\n\
    \  $product = 1;\n  $sum = 0;\n  $len = count($numbers);\n  for ($i = 0; $i <\
    \ $len; $i++) {\n    $product = $product * $numbers[$i];\n    if ($numbers[$i])\
    \ {\n      $sum += $product;\n    }\n    $result[] = array('sum' => $sum, 'product'\
    \ => $product);\n  }\n  return $result;\n}\n", "  // Sum and product are initialized\
    \ to 0 and 1.\n  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n\
    \    $sum += $number;\n    $product *= $number;\n  }\n  return array($sum, $product);\n\
    }\n", "    if (!is_array($numbers)) {\n        return array(0, 0);\n    }\n  \
    \  return array(array_sum($numbers), array_product($numbers));\n}\n", "    $sum\
    \ = array_sum($numbers);\n    $product = array_product($numbers);\n    return\
    \ array($sum, $product);\n}\n\nprint_r(sum_product(array()));\nprint_r(sum_product(array(2,\
    \ 3, 4, 5)));\nprint_r(sum_product(array(2, 3, 0, 5)));\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 tags=php,arrays,sum |>\nIf this can be solved with just PHP,\
    \ this can be solved with just 3 lines of code.\n<code>\n$total = 0;\n$product\
    \ = 1;\nforeach ($arr as $number) {\n    $total = $total+$number;\n    $product\
    \ = $product*$number;\n}\n$sum = $total;\n</code>\n<|/ a |>\n<| c |>\nFor this\
    \ solution you need only 3 lines of code.\n<|/ c |>\n<| a |>\n<code>\n<?php\n\
    $array=array();\n$array[1]=10;\n$array[2]=20;\n$array[3]=30;\n$array[4]=40;\n\n\
    $product=array_product($array);\n", "  $numbers = array_filter($numbers);\n  if\
    \ (empty($numbers)) {\n    return array(0, 1);\n  }\n\n  $sum = array_shift($numbers);\n\
    \  return array($sum, (float)$sum * array_shift($numbers));\n}\n</code>\n<|/ a\
    \ tags=arrays,php |>\n<| a tags=arrays,php |>\nYou could use the following:\n\
    <code>\n$array = [1,2,3,4,5];\n$sum = array_sum($array);\n$prod = array_product($array);\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php |>\n<code>\n$arr = [1,2,3];\n\
    \nprint_r(array_product($arr));\nprint_r(array_sum($arr));\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nYou should explain your answer.\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\nUse array_product and array_sum in php\n<code>\n$arr = [1,2,3];\n$prod=\
    \ array_product($arr);\n$sum  = array_sum($arr);\n</code>\n<|/ a dscore=0 |>\n\
    <| a |>\n<code>\n$arr = [1,2,3];\n$sum = 0;\n$prod = 0;\nforeach ($arr as $key\
    \ => $value) {\n  $sum = $sum + $value;\n  $prod = $prod * $value;\n}\n</code>\n\
    <|/ a tags=arrays,php dscore=0 |>\n<| a |>\nTry this\n<code>\n$arr = [1,2,3];\n\
    $prod = array_product($arr);\n$sum = array_sum($arr);\n</code>\n<|/ a tags=arrays,php\
    \ dscore=0 |>\n<| c |>\nThe only thing that this answer lacks is the explanation\
    \ on how it works. If you add this information it will make your answer more complete.\n\
    <|/ c |>\n<| c |>\nWelcome to SO! Can you please elaborate on how this answer\
    \ is better than the other answers?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $arr = [1,2,3];\n$prod = array_product($arr);\n$sum = array_sum($arr);", "   \
    \ if (!is_array($numbers)) {\n        return array(0, 0);\n    }\n\n    $sum =\
    \ array_sum($numbers);\n    $product = array_product($numbers);\n\n    return\
    \ array($sum, $product);\n}\n", "    if (count($numbers) == 0) {\n        return\
    \ [0, 1];\n    }\n\n    $total = array_sum($numbers);\n    $product = array_product($numbers);\n\
    \n    return [\n        $total,\n        $product,\n    ];\n}\n", "    $sum =\
    \ 0;\n    $product = 1;\n\n    foreach ($numbers as $number) {\n        $sum +=\
    \ $number;\n        $product *= $number;\n    }\n\n    return array($sum, $product);\n\
    }\n", "    $numbers = array_filter($numbers);\n    if (empty($numbers)) {\n  \
    \      return array(0, 1);\n    }\n\n    $sum = $product = array_shift($numbers);\n\
    \    foreach ($numbers as $number) {\n        $sum += $number;\n        $product\
    \ *= $number;\n    }\n    return array($sum, $product);\n}\n", "    $product =\
    \ 1;\n    $sum = 0;\n    foreach ($numbers as $number) {\n        $sum += $number;\n\
    \        $product *= $number;\n    }\n    return array($sum, $product);\n}\n",
  "    return array_map(function ($number) {\n        return [$number + 0, $number\
    \ * 1];\n    }, array_sum($numbers));\n}\n</code>\n<|/ a dscore=4 tags=php,algorithm,language-agnostic,php-7\
    \ |>\n<| c |>\nIt should be noted that this is in O(n), whereas most of the other\
    \ answers are in O(n^2). Sort of. I guess it's good enough for most cases.\n<|/\
    \ c |>\n<| c |>\nThis doesn't answer the question.  It's possible to do this in\
    \ O(n) time and O(1) space.  See my answer.\n<|/ c |>\n<| c |>\nNice, but that\
    \ still has O(n^2) time. It doesn't matter much if the array is small, but you\
    \ get a speed boost if the array is large.\n<|/ c |>\n<| c |>\nYes, I agree, but\
    \ I think the performance improvement will be much smaller than `O(n^2)` for the\
    \ larger arrays. Though if you're concerned with efficiency, this answer is way\
    \ better than most of the other answers.\n<|/ c |>\n<| c |>\nYeah, I agree that\
    \ this is the better answer. I do wish I could upvote it more, though. I think\
    \ it's really hard to believe that there's a way to do this in O(1) space or O(n)\
    \ time.\n<|/ c |>\n<| a tags=php,algorithm,language-agnostic,php-7 dscore=4 |>\n\
    You can do it like this:\n<code>", "  if (!empty($numbers)) {\n    return array(array_sum($numbers),\
    \ array_product($numbers));\n  }\n\n  return array(0, 1);\n}\n</code>\nHope that\
    \ helps!\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work at all for negative numbers.\
    \ Also, the product of an empty array should equal 1 instead of 0.\n<|/ c |>\n\
    <| c |>\nMy comment above was posted when OP asked about empty arrays returning\
    \ 0 instead of 1.  I thought he could adapt it, but your comment is now gone.\
    \  I'll try and write something that does it for negative numbers and empty arrays.\n\
    <|/ c |>\n<| c |>\nThanks for the updated answer. I appreciate the effort! It\
    \ looks like the OP wants the array to contain at least one element or be empty\
    \ (I thought about deleting my answer but maybe that's against the rules)\n<|/\
    \ c |>\n<| c |>\nYeah, sorry about that - I hadn't seen your comment.  I guess\
    \ it's fine to leave it up - I'll leave it here for future readers.\n<|/ c |>\n\
    <| a tags=php |>\nThis does require you to add a bunch of if statements, but it\
    \ keeps the code in one spot.\n<code>\n<?php", "    $sum = array_sum($numbers);\n\
    \    $product = array_product($numbers);\n    if ($sum === 0 && $product === 0)\
    \ {\n        return array(\n            0,\n            1\n        );\n    }\n\
    \    return array($sum, $product);\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a\
    \ tags=php,arrays |>\nA solution with no foreach and no recursion:\n<code>", " \
    \ $sum = array_sum($numbers);\n  $product = 1;\n  foreach ($numbers as $number)\
    \ {\n    $product = $product * $number;\n  }\n  return array($sum, $product);\n\
    }", "    foreach($numbers as $key => $value) {\n        if (is_numeric($value))\
    \ {\n            $results[$key] = $value;\n        } else {\n            $results[$key]\
    \ = 0;\n        }\n    }\n\n    return $results;\n}", "    $total = array('sum'\
    \ => 0, 'product' => 1);\n    foreach ($numbers as $number) {\n        $total['sum']\
    \ += $number;\n        $total['product'] *= $number;\n    }\n    return $total;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nWhat a beautiful answer, very easy to understand\
    \ and very useful. Thanks!\n<|/ c |>\n<| a dscore=4 |>\nHere is my approach (I\
    \ thought I should share it):\n<code>\n$result=[];\nforeach($array as $num){\n\
    \    foreach($result as $key=>$val){\n        $result[$key]=$val+$num;\n     \
    \   $result[$key]*=$num;\n    }\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$result = [];\nforeach($array as $num){\n    $result[] = $num +\
    \ array_sum($result);\n}\n</code>\nor \n<code>\n$result = [];\nforeach($array\
    \ as $num){\n    $result[] = $num + array_sum(array_diff($result, [0]));\n}\n\
    </code>\n<|/ a dscore=3 |>\n<| a tags=php,arrays |>\n<code>\n$array = [1, 2, 3,\
    \ 4, 5];\n$sum = 0;\n\nforeach ($array as $val) {\n    $sum += $val;\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| a dscore=3 tags=php,arrays |>\nOne more approach with array_sum\
    \ and array_diff functions:\n<code>\n$array = [1, 2, 3, 4, 5];\n\n$sumOfArray\
    \ = array_sum($array);\n\n$diff = array_diff($array, array_fill(0, count($array),\
    \ $sumOfArray));\n\n$product = array_product($diff);\n</code>\n<|/ a |>\n<| c\
    \ |>\nThis is a really elegant solution.\n<|/ c |>\n<| a dscore=2 |>\nThis is\
    \ my solution.\n<code>\n<?php\n\n$array = array(\n    1,\n    2,\n    3,\n   \
    \ 4,\n    5,\n);\n\n$sum = array_sum($array);\n$diff = array_diff($array, array_fill(0,\
    \ count($array), $sum));\n\n$product = array_product($diff);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\nI like the following solution:\n<code>\n$result\
    \ = array_map(function ($v) { return $v + array_sum($v); }, $array);\n$result\
    \ = array_map(function ($", "  $sum = 0;\n  $prod = 1;\n  foreach ($numbers as\
    \ $value) {\n    $sum += $value;\n    $prod *= $value;\n  }\n  return [$sum, $prod];\n\
    }", "    // Your code goes here.\n    $sum = 0;\n    $product = 1;\n\n    foreach($numbers\
    \ as $number) {\n        $sum = $sum + $number;\n        $product = $product *\
    \ $number;\n    }\n\n    return array('sum' => $sum, 'product' => $product);\n\
    }\n\necho var_dump(sum_product(array()));\necho var_dump(sum_product(array(1,\
    \ 2, 3, 4)));", "  if (empty($numbers)) {\n    return array(0, 1);\n  }\n  $sum\
    \ = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n    $sum += $number;\n\
    \    $product *= $number;\n  }\n  return array($sum, $product);\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nThis solution uses more memory than is necessary.\n\
    <|/ c |>\n<| c |>\nCan you explain how that happens?\n<|/ c |>\n<| c |>\n, it's\
    \ more memory in total but only a constant proportion of the actual array elements.\
    \ And it's also more memory (CPU) usage because `array_fill` and `array_merge`\
    \ don't create new arrays, they just append the array elements to an existing\
    \ one. So if you have a lot of elements, you will get much more CPU usage and\
    \ much more memory usage in total. `array_reduce` is another approach that uses\
    \ less memory, but has a very different semantics, because it will only take the\
    \ first element and will process it on every iteration. As soon as you need the\
    \ next element you have to process it again.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n\
    array_sum($arr); \narray_product($arr); \n</code>\n<|/ a tags=php,arrays |>\n\
    <| c |>\nThis solution uses more memory than is necessary.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\nJust use array_sum and array_product\n<code>\narray_sum($arr);\narray_product($arr);\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis solution uses more memory than is necessary.\n\
    <|/ c |>\n<| a |>\nThis one uses less memory, but has a different semantics. If\
    \ you need to process all elements in the array then array_reduce is the better\
    \ solution. array_reduce will only process one element in the array at a time\
    \ and will then throw away every element after that.\narray_reduce will take the\
    \ first element and process it on every iteration of the loop.\narray_sum will\
    \ just sum the array and only process one element.\narray_product will just take\
    \ the product of the array and only process one element.\nAs soon as you need\
    \ another element, the next element will be processed and throw away. The memory\
    \ usage will be proportional to the total size of the array and the number of\
    \ elements in the array.\n<code>\n$arr = range(1, 5);", "  $sum = array_sum($numbers);\n\
    \  $product = array_reduce($numbers, function ($product, $number) { return $product\
    \ * $number; });\n  return array($sum, $product);\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ dscore=0 |>\n<| c |>\nThe question is about summing two arrays, not how to combine\
    \ arrays. I believe that answer is not correct.\n<|/ c |>\n<| c |>\n, you are\
    \ right, I was misreading it, I updated the answer with working code. Thanks.\n\
    <|/ c |>\n<| a |>\nI wanted to share the simplest way I found so far:\n<code>\n\
    <?php\n\n$array1 = array(1,2,3,4,5,6,7,8,9,10);\n$array2 = array(1,2,3,4,5,6,7,8,9,10);\n\
    $array3 = array(1,2,3,4,5,6,7,8,9,10);\n$array4 = array(1,2,3,4,5,6,7,8,9,10);\n\
    \n$result = [\n    array_sum($array1),\n    array_sum($array2),\n    array_sum($array3),\n\
    \    array_sum($array4)\n];\n\n$sum = array_sum($result);\n\nforeach ($result\
    \ as $key => $value) {\n    $result[$key] /= $sum;\n}\n\nprint_r($result);\n</code>\n\
    Result:\n<code>\nArray\n(\n    [0] => 1.5\n    [1] => 2\n    [2] => 2.5\n    [3]\
    \ => 3\n)\n</code>\n<|/ a dscore=0 tags=php,arrays,multidimensional-array |>\n\
    <| a dscore=0 |>\nThis worked for me:\n<code>", "    $sum = 0;\n    $product =\
    \ 1;\n    foreach ($numbers as $number) {\n        $sum += $number;\n        $product\
    \ *= $number;\n    }\n    return array(\"sum\" => $sum, \"product\" => $product);\n\
    }\n", "  if (empty($numbers)) {\n    return array(\n      'sum' => 0,\n      'product'\
    \ => 1,\n    );\n  }\n  $sum = array_shift($numbers);\n  $product = array_shift($numbers);\n\
    \  return array_merge(\n    array(\n      'sum' => $sum + $numbers,\n      'product'\
    \ => $product,\n    ),\n    sum_product($numbers)\n  );\n}\n</code>\n<|/ a tags=algorithm,php\
    \ |>\n<| c |>\nYeah, this is pretty much exactly what I ended up doing. Thanks\
    \ though, I'm still looking for a way to do this with recursion.\n<|/ c |>\n<|\
    \ c |>\nYou're welcome, I hope that your original question was clear to you. Let\
    \ me know if you have any other questions.\n<|/ c |>\n<| c |>\nSure thing. I appreciate\
    \ it. Thanks again!\n<|/ c |>\n<| a dscore=2 |>\nThe best way is to create a recursive\
    \ function and keep reducing the array until it's empty\n<code>", "    $sum =\
    \ 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n        $sum = $sum\
    \ + $number;\n        $product *= $number;\n    }\n    return array($sum, $product);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    $result = [0, 0];\n\
    \    foreach ($numbers as $key => $value) {\n        $result[0] += $value;\n \
    \       $result[1] += $value * $value;\n    }\n    return $result;\n}\n", "  \
    \  $product = 1;\n    $sum = 0;\n\n    foreach ($numbers as $number) {\n     \
    \   $sum += $number;\n        $product *= $number;\n    }\n\n    return [\n  \
    \      'sum' => $sum,\n        'product' => $product,\n    ];\n}\n</code>\nThe\
    \ second method is the \"lazy\" way of calculating this sum and product in one\
    \ single pass. It is similar to the first method, just that instead of doing the\
    \ addition separately, we instead add the product to the sum and then multiply\
    \ it by the number. So if the numbers array has n elements, then we only have\
    \ to calculate the n-1 numbers as we know the rest are just sums times product\
    \ of (sum of numbers minus 1) times the number. Note that the numbers array is\
    \ passed as a reference, so it can mutate during the calculation.\n<code>\n<?php",
  "    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n       \
    \ $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}\n", "    if (!is_array($numbers)) {\n        return false;\n \
    \   }\n    $sum = array_sum($numbers);\n    $product = 1;\n    foreach ($numbers\
    \ as $num) {\n        $product *= $num;\n    }\n    return array($sum, $product);\n\
    }\n", "    $product = 1;\n    $sum = 0;\n    $n = count($numbers);\n\n    for($i\
    \ = 0; $i < $n; $i++) {\n        if(!isset($numbers[$i])) {\n            $numbers[$i]\
    \ = $sum;\n            $product = $product*$sum;\n            $sum = 0;\n    \
    \        continue;\n        }\n\n        $sum = $sum+$numbers[$i];\n        $product\
    \ = $product*$sum;\n    }\n\n    return array(\"sum\" => $sum, \"product\" =>\
    \ $product);\n}\n", "    if (empty($numbers)) {\n        return array(0, 1);\n\
    \    }\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n\
    \        $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}", "    $result = [0, 0];\n    foreach ($numbers as $number) {\n\
    \        $result[0] += $number;\n        $result[1] += $number * $number;\n  \
    \  }\n    return $result;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
