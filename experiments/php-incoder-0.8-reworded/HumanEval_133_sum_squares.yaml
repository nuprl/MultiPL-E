name: HumanEval_133_sum_squares
language: php
prompt: "<?php\n// You are given an array of numbers.\n// You need to return the sum\
  \ of squared numbers in the given array,\n// round each element in the array to\
  \ the upper int(Ceiling) first.\n// Examples:\n// >>> lst(array(1.0, 2.0, 3.0))\n\
  // 14\n// >>> lst(array(1.0, 4.0, 9.0))\n// 98\n// >>> lst(array(1.0, 3.0, 5.0,\
  \ 7.0))\n// 84\n// >>> lst(array(1.4, 4.2, 0.0))\n// 29\n// >>> lst(array(-2.4,\
  \ 1.0, 1.0))\n// 6\nfunction sum_squares($lst) {\n"
tests: "function candidate(...$args) {\n    return sum_squares(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1.0, 2.0, 3.0)) !== 14) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0)) !== 14) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 3.0, 5.0, 7.0)) !==\
  \ 84) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.4, 4.2,\
  \ 0.0)) !== 29) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2.4,\
  \ 1.0, 1.0)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
  \ 1.0, 15.0, 2.0)) !== 10230) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(10000.0, 10000.0)) !== 200000000) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(-1.4, 4.6, 6.3)) !== 75) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-1.4, 17.9, 18.9, 19.9)) !== 1086) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== 0)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1.0)) !==\
  \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1.0, 1.0,\
  \ 0.0)) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $sum = 0;\n    foreach ($lst as $elem) {\n        $sum += pow($elem,\
    \ 2);\n    }\n    return round($sum, 0);\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ tags=php,arrays dscore=0 |>\nAs others have suggested, just use array_map().\
    \  I decided that array_map() was a bit too clever, so I made a foreach loop that\
    \ works exactly as you intend it to.  Here's a fiddle:\nhttp://phpfiddle.org/main/code/y6e-qjr\n\
    <code>\n<?php\n", "    $n = count($lst);\n    $sum = 0;\n\n    foreach ($lst as\
    \ $item) {\n        $sum += pow($item, 2);\n    }\n    return $sum;\n}\n", " \
    \   $i = 0;\n    $sum = 0;\n    foreach ($lst as $val) {\n        if (is_string($val))\
    \ {\n            $sum += $val;\n        }\n        if (is_float($val)) {\n   \
    \         $sum += $val * $val;\n        }\n        $sum += $val;\n        $i++;\n\
    \    }\n    return round($sum / $i, 2);\n}\n</code>\n<|/ a dscore=0 tags=php,arrays,algorithm\
    \ |>\n<| a dscore=0 tags=php,arrays,algorithm |>\nOk this took me a while to figure\
    \ out - but here is my solution - it uses array_map() to get the sum of the squared\
    \ values and the array_sum() to get the sum of the numbers. I then square and\
    \ multiply the numbers to get the sum of the squares.\n<code>\n<?php\n\n$input\
    \ = array(1.4, 2.7, 9.9);\n$result = array_map(function($a){\n    $a = round($a,\
    \ 2);\n    return pow($a, 2);\n}, $input);\n$result = array_sum($result);\n$result\
    \ *= $result;\necho $result;\n</code>\nThe output I get is:\n<code>\n72.80000000000003\n\
    </code>\n<|/ a |>\n<| a tags=php,arrays,algorithm dscore=0 |>\nI've been trying\
    \ all these answers and didn't get the exact result I was looking for. What I\
    \ found is pretty much the exact answer:\n<code>\n$a = [1.4, 2.7, 9.9];\n\n$sum\
    \ = 0;\n$sumSquares = 0;\nforeach($a as $value) {\n    $sum += $value;\n    $sumSquares\
    \ += pow($value, 2);\n}\n$result = $sumSquares;\n$result *= $result;\necho $result;\n\
    </code>\nThis gives the exact answer:\n72.80000000000003\nI tested it with a few\
    \ values too:\n<code>\n$a = [1.4, 2.7, 9.9, 1.3, 3.2, 5.6];\n\n$sum = 0;\n$sumSquares\
    \ = 0;\nforeach($a as $value) {\n    $sum += $value;\n    $sumSquares += pow($value,\
    \ 2);\n}\n$result = $sumSquares;\n$result *= $result;\necho $result;\n</code>\n\
    And now the result is 70.\n<|/ a |>\n<| a tags=php,arrays,algorithm |>\n<code>\n\
    <?php\n$array = [1.4, 2.7, 9.9];\n$sum = 0;\n$sumSquares=0;\nforeach($array as\
    \ $value){\n    $sum += $value;\n    $sumSquares += pow($value, 2);\n}\n$result\
    \ = $sumSquares;\n$result *= $result;\n", "    return round(array_sum(array_map(function($num)\
    \ {\n        return $num * $num;\n    }, $lst))); \n}", "    if ($lst == 0) {\n\
    \        return 0;\n    }\n    $x = $lst[0];\n    foreach ($lst as $val) {\n \
    \       $x *= $val;\n    }\n    return round($x, Ceiling);\n}\n$lst = array(1.4,\
    \ 4.2, 0.0, 2.1, 5.3, 6.5);\necho sum_squares($lst), \"\\n\";", "  $res = 0;\n\
    \  foreach($lst as $el) {\n    $res += pow($el, 2);\n  }\n  return $res;\n}\n",
  "    return array_sum(array_map(function($x){ return pow($x,2);}, $lst));\n}\n",
  "    foreach ($lst as $item) {\n        $temp = $item * $item;\n        $temp =\
    \ (int)round($temp);\n        $sum_squares += $temp;\n    }\n\n    return $sum_squares;\n\
    }\n", "    foreach ($lst as $val) {\n        $val = round($val);\n    }\n    return\
    \ array_sum(array_map(function($value) {\n        return pow($value, 2);\n   \
    \ }, $lst));\n}\n</code>\n<|/ a dscore=2 tags=php,algorithm,math |>\n<| c |>\n\
    You mean like [this](https://ideone.com/xDxVxQ)? But not that fast...\n<|/ c |>\n\
    <| c |>\nYes, like that. Was just thinking out loud. I haven't thought it through.\
    \ Do you think that I should make that even faster?\n<|/ c |>\n<| c |>\nYes, I\
    \ suppose so. Well, I don't think the array manipulations are the bottleneck,\
    \ but I could be wrong. My guess is it's going to be memory bound, so if you're\
    \ doing this a lot, you may want to consider writing a custom C extension (if\
    \ your server has that feature).\n<|/ c |>\n<| c |>\nYeah, I have never been very\
    \ good at optimizing code, but I haven't had any problems with this particular\
    \ code being slow (although there are some edge cases that make it a bit slower,\
    \ but I wouldn't expect it to be noticeable).\n<|/ c |>\n<| c |>\nI'm still not\
    \ sure about the memory bound. Do you mean the code or the algorithm? If it's\
    \ a memory bound, I'll try to write the extension, I'll let you know.\n<|/ c |>\n\
    <| a dscore=2 |>\nIf you have a large number of numbers, you can use the power\
    \ of logarithms. You can take log base 2 of the numbers, that is the same as taking\
    \ the power of 2 of the log of the numbers. Then subtract the log of the result\
    \ from log of the base 2 of the size of the numbers in question. \nSo you take\
    \ the log, base 2, and substract that from the log base 2 of the size of the input\
    \ numbers. \nFor example if you have 1000 numbers, take the log of 1000 (log(1000)).\
    \ Then take the log of log base 2 of 1000 (log(log(1000))). Then take the log\
    \ of log base 2 of (log(log(1000))-log(log(1000))). Now you can apply this result\
    \ to the numbers, and get your sum. \n<code>", "    $sum = 0;\n    foreach ($lst\
    \ as $value) {\n        $sum += pow($value, 2);\n    }\n    return round($sum);\n\
    }", "\tsort($lst);\n\t$sum = 0;\n\tforeach($lst as $v)\n\t\t$sum += $v*$v;\n\t\
    return round($sum, 0);\n}", "    $total = array();\n    foreach ($lst as $x) {\n\
    \        $x = round($x);\n        $total[] = $x * $x;\n    }\n    return $total;\n\
    }\n", "    sort($lst);\n    \n    // calculate the sum\n    $sum = 0;\n    foreach\
    \ ($lst as $n) {\n        $sum += ($n * ($n + 1));\n    }\n    \n    // square\
    \ each element in the array\n    foreach ($lst as $n) {\n        $lst[$n] = $n\
    \ * ($n + 1);\n    }\n    \n    // round each element to the ceiling\n    foreach\
    \ ($lst as &$n) {\n        $n = ceil($n);\n    }\n    \n    // return the sum\n\
    \    return $sum;\n}\n", "    $arr = array_map(\n        function($val) { return\
    \ ceil($val); },\n        $lst\n    );\n    return array_sum(\n        array_map(\n\
    \            function($val) { return pow($val, 2); },\n            $arr\n    \
    \    )\n    );\n}\n", "    $squares=array_map(function ($number) {\n        return\
    \ round($number*$number);\n    },$lst);\n    return array_sum($squares);\n}\n",
  "    $sum = 0;\n    foreach ($lst as $num) {\n        $sum += $num * $num;\n   \
    \ }\n    return $sum;\n}\n", "    $n = count($lst);\n    $sum = 0;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        $sum += $lst[$i] * $lst[$i];\n    }\n    return\
    \ round($sum);\n}\n</code>\n<|/ a tags=php,arrays dscore=1 |>\n<| c |>\nYou sir,\
    \ are a genius. Thanks so much for this. I understand it and have been trying\
    \ to figure this out for days now. Thanks again!\n<|/ c |>\n<| c |>\nNo problem!\
    \ It took me about a week to figure out how to do it. It's worth knowing that\
    \ when working with a function, you always need to check the arguments' values\
    \ before trying to use them in some way. :)\n<|/ c |>\n<| a dscore=0 |>\nYou could\
    \ just use array_sum and array_map functions to get the sum of square of numbers\
    \ in an array. Try this:\n<code>\n<?php\n\n$arr = [\n    [1,2,3],\n    [1,2,3],\n\
    \    [1,2,3]\n];\n\n$result = array_sum(array_map(function($a){\n    return pow($a,2);\n\
    }, $arr));\n\nprint_r($result);\n</code>\nWorking example here\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThe only reason why I didn't try this is because I knew it would\
    \ be some kind of loop involved. Thanks for your input though. I will keep that\
    \ in mind.\n<|/ c |>\n<| a |>\nI hope my answer helps, I have written some code\
    \ but its a little bit messy so please feel free to comment to improve it.\n<code>\n\
    <?php\n$arr1 = [1,2,3,4,5,6,7,8,9,10];\n$arr2 = [2,4,6,8,10];\n$arr3 = [1,3,5,7];\n\
    \n$finalArr = [];\n\nforeach($arr1 as $key => $arr){\n    foreach($arr as $i =>\
    \ $value){\n        array_push($finalArr, [$value, $value]);\n    }\n}\n\nforeach($arr2\
    \ as $key => $arr){\n    foreach($arr as $i => $value){\n        array_push($finalArr,\
    \ [$value, $value]);\n    }\n}\n\nforeach($arr3 as $key => $arr){\n    foreach($arr\
    \ as $i => $value){\n        array_push($finalArr, [$value, $value]);\n    }\n\
    }\n\n$sumOfSquares = 0;\n\nforeach($finalArr as $key => $arr){\n    foreach($arr",
  "    $sum = 0;\n    foreach ($lst as $x) {\n        $sum += $x ** 2;\n    }\n  \
    \  return round($sum);\n}\n", "    // Your code here...\n    $sum = 0;\n    foreach\
    \ ($lst as $num) {\n        $sum += pow($num,2);\n    }\n    return $sum;\n}\n\
    $lst = array(\n    array(1.0, 2.0, 3.0),\n    array(1.0, 4.0, 9.0),\n    array(1.0,\
    \ 3.0, 5.0, 7.0),\n    array(1.4, 4.2, 0.0),\n    array(-2.4, 1.0, 1.0),\n);\n\
    $ans = sum_squares($lst);\nprint \"The sum of squares is $ans.\\n\";", "\t$sum\
    \ = 0;\n\tforeach($lst as $val){\n\t\t$sum += $val*$val;\n\t}\n\treturn $sum;\n\
    }\n", "  $sum = 0;\n  foreach($lst as $num) {\n    $sum += $num * $num;\n  }\n\
    \  return round($sum);\n}", "    $sum = 0;\n    foreach ($lst as $l) {\n     \
    \   $sum += $l * $l;\n    }\n    return $sum;\n}\n", "  $sum = 0;\n  foreach($lst\
    \ as $num) {\n    $sum += $num*$num;\n  }\n  return $sum;\n}\n\n$lst = array(1.0,\
    \ 4.0, 9.0);\necho \"Sum squares \" . sum_squares($lst);\n</code>\n<|/ a dscore=1\
    \ tags=algorithm,php,numbers |>\n<| a tags=algorithm,php,numbers |>\nYou can use\
    \ array_sum function - it returns sum of all elements in the array. With this\
    \ array you can do some simple math and calculate squared sum.\n<code>\n$arr =\
    \ array(1.0, 4.0, 9.0);\necho array_sum($arr) * array_sum($arr);\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nThis is very inefficient, because it requires to recalculate\
    \ the sum for each element twice. Besides, you cannot use array_sum for non-numerical\
    \ arrays.\n<|/ c |>\n<| a tags=algorithm,php,numbers dscore=1 |>\nFor PHP 5.4\
    \ or above, the following will do it, but it could be made a little more efficient\
    \ by making $sum an array. Also, it will be slow if your array has many elements,\
    \ as it creates a temporary array $temp. \n<code>\n$arr = [1.0, 4.0, 9.0];\n$sum\
    \ = 0;\nforeach($arr as $num) {\n    $sum += $num * $num;\n}\n$final = round($sum,\
    \ 3);\n</code>\n<|/ a |>\n<| a dscore=1 |>\n<code>\n$arr=array(1,2,3,4,5,6,7,8,9,10);\n\
    \n$sum=0;\nforeach($arr as $num) {\n    $sum+=$num*$num;\n}\necho $sum;\n</code>\n\
    <|/ a tags=algorithm,php,numbers |>\n<| a dscore=0 tags=algorithm,php,numbers\
    \ |>\nIf you wanna stick to your solution:\n<code>\n<?php\n\n$lst = array(1.0,\
    \ 4.0, 9.0);\n$sum = pow($lst[0], 2) + pow($lst[1], 2) + pow($lst[2], 2);\necho\
    \ $sum;", "    if (empty($lst))\n        return 0;\n    sort($lst);\n    $i =\
    \ 0;\n    $sum = 0;\n    foreach ($lst as $val) {\n        $sum += $val * $val;\n\
    \        $i++;\n        if ($i > 1000)\n            break;\n    }\n    return\
    \ round($sum, 0);\n}\n</code>\n<|/ a tags=performance,math,php |>\n<| c |>\nThis\
    \ is an interesting approach, however, it seems like it would be faster to sort\
    \ then do a single loop. I also like the use of divide and conquer. I'm going\
    \ to try this out, and let you know the results.\n<|/ c |>\n<| c |>\nI decided\
    \ to test your code, and it runs faster than my solution. On a side note, I also\
    \ like the use of the break statement, thanks for sharing that too.\n<|/ c |>\n\
    <| c |>\nI ran some benchmarks using microtime, and your solution is about 3%\
    \ faster than mine. I think the break is nice and all, but I like your use of\
    \ array for looping as well and would like to give a +1 :)\n<|/ c |>\n<| c |>\n\
    Thanks. By the way, I see you already mentioned this in your question. I just\
    \ thought you might want to know about the break statement as well. :)\n<|/ c\
    \ |>\n<| c |>\n: You don't need to `sort` before looping: the array elements are\
    \ already in ascending order.\n<|/ c |>\n<| a |>\nI came up with a solution for\
    \ you. Its not so fast as others solutions, but faster than others.\n<code>",
  "    foreach($lst as $num) {\n        $lst_square[] = $num * $num;\n    }\n    return\
    \ $lst_square;\n}\n</code>\n<|/ a tags=php,python,java,javascript,c++ dscore=2\
    \ |>\n<| c |>\nThe OP specifically asked for sum_squares\n<|/ c |>\n<| a tags=php,python,java,javascript,c++\
    \ |>\n<code>", "    $result = 0.0;\n    $length = count($lst);\n    for ($i =\
    \ 0; $i < $length; $i++) {\n        $result += (ceil($lst[$i]) - floor($lst[$i]))\
    \ * (ceil($lst[$i]) - floor($lst[$i]));\n    }\n    return $result;\n}\n", " \
    \ sort($lst);\n  sort($lst);\n  $sum = 0;\n  $a = $b = $c = $d = $e = $f = $g\
    \ = $h = $i = $j = 0;\n  $lst_len = count($lst);\n  for($i = 0; $i < $lst_len;\
    \ $i++) {\n    $a = $lst[$i];\n    for($j = $i + 1; $j < $lst_len; $j++) {\n \
    \     $b = $lst[$j];\n      $c = $a + $b;\n      $sum += $c;\n    }\n  }\n  return\
    \ round($sum, 0);\n}\n</code>\n<|/ a |>\n<| c |>\nThis is a great solution (+1\
    \ from me). However, I think you mean `$a = $lst[$i]` instead of `$a = $b`, and\
    \ the same goes for the second loop.\n<|/ c |>\n<| c |>\nNo I meant that $a was\
    \ the previous sum, so the inner loop would just add each subsequent pair to the\
    \ previous pair.  Thanks :)\n<|/ c |>\n<| c |>\nThis solution also passes all\
    \ of the unit tests.\n<|/ c |>\n<| c |>\nThe only issue I have is with the $lst[$j]\
    \ variable not working as expected when there is a negative number.\n<|/ c |>\n\
    <| a dscore=4 |>\nOne way to do it is with recursion. Start by implementing a\
    \ function to add up the squares of a list. Then, write a wrapper that calls itself\
    \ recursively, passing it a list with one element less. That will give you the\
    \ sum of the squares of the first element, then you subtract that from the sum\
    \ of the squares of the second element, and so on until you finish the list. \n\
    For example, here is the recursive function to add up the squares of a list:\n\
    <code>", "    $sum = 0;\n    foreach($lst as $num) {\n        $sum += pow($num,\
    \ 2);\n    }\n    return $sum;\n}\n", "  foreach ($lst as $number) {\n    $number\
    \ = ceil($number);\n    $result[] = $number ** 2;\n  }\n  return array_sum($result);\n\
    }\n", "    // your code here\n    $sum = 0;\n    foreach ($lst as $value) {\n\
    \        $sum += ($value ** 2);\n    }\n    return round($sum, 0);\n}\n</code>\n\
    <|/ a |>\n<| a tags=php,math,arrays dscore=1 |>\nHere is a solution using array_reduce:\n\
    <code>\n<?php\n", "    $sum = 0;\n    foreach ($lst as $num) {\n        $sum +=\
    \ $num * $num;\n    }\n    return round($sum, 0);\n}", "  // Write your code here\n\
    \  return array_sum(array_map('ceil', array_map('sqrt', $lst)));\n}\n</code>\n\
    <|/ a dscore=2 tags=arrays,function,array-sum,php |>\n<| a dscore=2 |>\nIn case\
    \ you only need to add up integer elements, this is how I did it (it works for\
    \ float too):\n<code>\n$nums = [1, 2, 4, 6, 8];\n$total = array_sum(array_map(function($num)\
    \ { return $num; }, $nums));\n$total = round($total);\n</code>\n<|/ a tags=arrays,function,array-sum,php\
    \ |>\n<| a dscore=2 |>\nYou can use array_reduce.\n<code>\n$nums = [1, 2, 3, 5];\n\
    $total = array_reduce($nums, function ($a, $b) {\n    return $a + $b;\n}, 0);\n\
    </code>\n<|/ a tags=arrays,function,array-sum,php |>\n<| c |>\nThis answer is\
    \ wrong, try with array like `[1,2,3]` and you will get `6` and not `10`, you\
    \ need to use `array_reduce` with `$a + $b`\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ - it sums all the array elements, and not each element\n<|/ c |>\n<| c |>\n\
    You are right, I misunderstood the question, will edit my answer\n<|/ c |>\n<|\
    \ a tags=arrays,function,array-sum,php |>\n<code>", "  $sum = 0;\n  foreach($lst\
    \ as $number) {\n    $sum += $number * $number;\n  }\n  return $sum;\n}", "  //\
    \ write your code here\n  return array_reduce($lst, function ($sum, $number) {\n\
    \    return $sum + pow($number, 2);\n  }, 0);\n}\n", "  $sum = 0;\n  foreach($lst\
    \ as $number) {\n    $sum += pow($number,2);\n  }\n  return $sum;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php |>\n<code>\n<?php", "    // Write your code here\n\
    \    $sum = 0;\n    foreach ($lst as $key => $value) {\n        if ($value ==\
    \ 0) {\n            $sum += pow($key, 2);\n        }\n        $sum += $value **\
    \ 2;\n    }\n    return round($sum, -1);\n}\n", "    $sum_sq = 0;\n    foreach\
    \ ($lst as $number) {\n        $sum_sq += pow(int($number), 2);\n    }\n    return\
    \ $sum_sq;\n}\n", "  if (empty($lst)) {\n    return null;\n  }\n\n  // first number\n\
    \  $sum = 0;\n\n  // go through list and square\n  for ($i = 0; $i < count($lst);\
    \ $i++) {\n    $sum += pow($lst[$i], 2);\n  }\n\n  // round and return\n  return\
    \ round($sum);\n}\n", "  $sum = 0;\n  foreach ($lst as $num) {\n    $sum += ($num\
    \ * $num);\n  }\n  return round($sum, 0);\n}\n\n$arr = array(1.0, 2.0, 3.0, 4.0);\n\
    \necho \"Sum of Squares array: $sum_squares \\n\";\n\necho \"Sum of Squares array:\
    \ \" . sum_squares($arr) . \"\\n\";\n", "    return array_sum(array_map('pow',\
    \ array_map('intval', array_map('ceil', $lst)), $lst));\n}\n</code>\nIf you really\
    \ need performance, consider using floats instead of integers and truncating the\
    \ result with round() instead of using intval().\n<|/ a dscore=2 tags=algorithm,php\
    \ |>\n<| c |>\nThe time complexity of array_sum is O(n) where n is the number\
    \ of elements in the array. On average the time complexity is O(n/2) because array_sum\
    \ needs to do 2 passes on the array. So this solution is O(n). As you can see\
    \ in my solution the second array_map is O(n/2) too.\n<|/ c |>\n<| a dscore=2\
    \ |>\nHere is my solution (I didn't test it in PHP but I believe it will work):\n\
    <code>\n<?php\n", "  sort($lst);\n  $sum = 0;\n  for ($i = 0; $i < count($lst);\
    \ $i++) {\n    $sum += $lst[$i] * $lst[$i];\n  }\n  return $sum;\n}", "    $sum\
    \ = 0;\n    foreach ($lst as $x) {\n        $sum += $x * $x;\n    }\n    return\
    \ $sum;\n}", "    sort($lst);\n    $res = 0;\n    foreach ($lst as $x) {\n   \
    \     $res = $res + pow($x, 2);\n    }\n    return round($res, 0);\n}\n", "  \
    \  sort($lst);\n    $sum = 0;\n    foreach ($lst as $num) {\n        $sum += $num*$num;\n\
    \    }\n    return round($sum);\n}\n", "  return array_sum(array_map(function\
    \ ($x) { return pow(abs($x), 2); }, $lst));\n}\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\nThe idea is to use foreach loops to go through the array.  I hope this helps.\n\
    <code>\n<?php", "    $sum = 0;\n    foreach ($lst as $value) {\n        $sum +=\
    \ $value * $value;\n    }\n    return $sum;\n}\n\n$lst = array(1.4, 4.2, 0.0);\n\
    print \"The sum of squares for $lst is \" . sum_squares($lst) . \"\\n\";\n", " \
    \ $sum = 0;\n  for ($i = 0, $j = count($lst); $i < $j; ++$i) {\n    $sum += $lst[$i]\
    \ * ($lst[$i]);\n  }\n  return round($sum, 0);\n}", "    $sum = 0;\n    foreach\
    \ ($lst as $num) {\n        $sum += $num * $num;\n    }\n    return round($sum,\
    \ 0);\n}\n", "    $res = 0.0;\n    foreach ($lst as $a) {\n        $res += $a*$a;\n\
    \    }\n    return $res;\n}\n\n$lst = array(3.0, 2.0, 1.0);\n$res = sum_squares($lst);\n\
    echo \"Sum of squares of numbers is: \".$res;", "    if (!is_array($lst)) return\
    \ null;\n    $max = max($lst);\n    $min = min($lst);\n    $sum = 0;\n    foreach\
    \ ($lst as $num) {\n        $sum += ($num - $min) * ($num - $min);\n    }\n  \
    \  return round($sum);\n}\n", "    return round(array_sum(array_map('sqrt', $lst)))\
    \ + 0;\n}\n", "    if (count($lst) == 0) {\n        return 0;\n    }\n    return\
    \ array_sum(array_map(function($a) { return $a ** 2; }, $lst));\n}\n", "    $sum\
    \ = 0;\n    $size = sizeof($lst);\n    for ($i = 0; $i < $size; $i++) {\n    \
    \    $sum += $lst[$i] ** 2;\n    }\n    return round($sum);\n}\n", "    return\
    \ array_sum(array_map(function($x) { return pow($x, 2); }, $lst));\n}\n</code>\n\
    I tested the above with the following:\n<code>\n$arr1 = array(1.0, 2.0, 3.0);\n\
    $arr2 = array(1.0, 4.0, 9.0);\n$arr3 = array(1.0, 3.0, 5.0, 7.0);\n$arr4 = array(1.4,\
    \ 4.2, 0.0);\n$arr5 = array(-2.4, 1.0, 1.0);\n", "  foreach ($lst as $v)\n  {\n\
    \    $n = ceil($v);\n    $sumsq += $v * $v;\n  }\n  return $sumsq;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,arrays,algorithm dscore=0 |>\n<code>", "    $sum\
    \ = array_sum($lst);\n    foreach ($lst as $val){\n        $sum += $val * $val;\n\
    \    }\n    return round($sum, 0);\n}\n\n$lst = array(1.0, 2.0, 3.0);\nvar_dump(sum_squares($lst));",
  "    foreach ($lst as $i => $v) {\n        if ($i == 0) {\n            $ret = $v*$v;\n\
    \        } else {\n            $ret += $v*$v;\n        }\n    }\n    return round($ret,\
    \ 2);\n}", "    $sum = 0;\n    foreach ($lst as $num) {\n        $sum += pow($num,\
    \ 2);\n    }\n    return $sum;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=2\
    \ tags=php,arrays |>\nUse array_sum() function. It will do the job for you.\n\
    <|/ a |>\n<| c |>\nNo, it's not the solution to my problem. I edited my post with\
    \ a sample code of what I'm trying to do.\n<|/ c |>\n<| c |>\n: It isn't. But\
    \ you edited your post to show the solution. :-)\n<|/ c |>\n<| c |>\nWell, I guess\
    \ I didn't really make it clear, sorry. :)\n<|/ c |>\n<| c |>\n: It's okay. I\
    \ edited my post anyway. Just in case you want a good answer.\n<|/ c |>\n<| c\
    \ |>\nThanks, I guess the problem is that I didn't really know what to search\
    \ for. I was looking for something like \"sum array in php\" but didn't find it\
    \ on google. :)\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$sum = 0;\nforeach($array\
    \ as $i)\n{\n    $sum += $i * $i;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c\
    \ |>\n+1 for the `*`. I had forgotten about multiplication. :D\n<|/ c |>\n<| a\
    \ tags=php,arrays dscore=2 |>\n<code>", "    $squares    = array();\n    $nums\
    \       = array();\n    $nums_round = array();\n\n    foreach ($lst as $item)\
    \ {\n        $nums[] = round($item);\n    }\n\n    foreach ($nums as $num) {\n\
    \        if ($num < $nums[0]) {\n            $nums_round[] = ceil($num);\n   \
    \     } elseif ($num > $nums[0]) {\n            $nums_round[] = floor($num);\n\
    \        } else {\n            $nums_round[] = $num;\n        }\n    }\n\n   \
    \ foreach ($nums_round as $num) {\n        $squares[] = pow($num, $num);\n   \
    \ }\n\n    return array_sum($squares);\n}\n</code>\n<|/ a dscore=1 tags=performance,arrays,algorithm,php,sorting\
    \ |>\n<| a |>\nIf your array is not very large, you could do it in O(N) by just\
    \ iterating over the array once.\n<code>", "    // your code here\n    foreach($lst\
    \ as $k=>$v) {\n        $lst[$k] = ceil($v);\n    }\n    $sum = 0;\n    foreach\
    \ ($lst as $k=>$v) {\n        $sum += pow($k,2);\n    }\n    return $sum;\n}\n",
  "    $arr=array_map(function ($x) { return round($x); }, $lst);\n    return array_sum(array_map(function\
    \ ($x) { return pow($x, 2); }, $arr));\n}\n</code>\n<|/ a |>\n<| a tags=arrays,php,math\
    \ |>\nThe most efficient way I can think of is this:\n<code>\n$arr = array(2,5,7,8,1,9,3,7);\n",
  "  foreach ($lst as $num) {\n    $sum += $num * $num;\n  }\n  $rounded_num = ceil($sum);\n\
    \  return $rounded_num * $rounded_num;\n}", "  // Your code here\n}\nprint_r($lst);\n\
    $lst = array(1.3, 2.3, 3.3);\necho sum_squares($lst);\n$lst = array(1.3, 2.3,\
    \ 3.3, 9.3, 9.1, 3.1);\necho sum_squares($lst);\n$lst = array(1.3, 2.3, 3.3, 9.3,\
    \ 9.1, 3.1, 5.3);\necho sum_squares($lst);\n$lst = array(1.3, 2.3, 3.3, 9.3, 9.1,\
    \ 3.1, 5.3);\necho sum_squares($lst);\n$lst = array(1.3, 2.3, 3.3, 9.3, 9.1, 3.1,\
    \ 5.3);\necho sum_squares($lst);", "    $result = 0;\n    foreach ($lst as $num)\
    \ {\n        $result += $num * $num;\n    }\n    return round($result, 0);\n}\n\
    \n$nums = array(1.0, 2.0, 3.0, 4.0);\n$result = sum_squares($nums);\necho 'result\
    \ = ' . $result . \"\\n\";\n\n$nums = array(1.4, 4.2, 0.0, -4.3, 1.3, -4.6);\n\
    $result = sum_squares($nums);\necho 'result = ' . $result . \"\\n\";\n\n$nums\
    \ = array(1.4, 4.2, 0.0);\n$result = sum_squares($nums);\necho 'result = ' . $result\
    \ . \"\\n\";\n\n$nums = array(2.8, 7.2, 6.2, 1.3, 4.8);\n$result = sum_squares($nums);\n\
    echo 'result = ' . $result . \"\\n\";\n", "    $n = sizeof($lst);\n    $sum =\
    \ 0;\n\n    for ($i=0; $i < $n; ++$i) {\n        $sum += pow(doubleval($lst[$i]),\
    \ 2);\n    }\n\n    return round($sum);\n}\n</code>\n<|/ a |>\n<| a tags=php,arrays,list\
    \ |>\nMy solution with array_map() and array_sum()\n<code>\n<?php\n\n$lst = array(3.0,\
    \ 7.1, 5.9);\necho array_sum(array_map(function($e) { return pow($e, 2); }, $lst));\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\narray_reduce() will do the job for\
    \ you. \n<code>\narray_reduce($arr, function($a, $b) {\n    return $a + pow($b,\
    \ 2);\n}, 0);\n</code>\nFor your example it will return 14\n<|/ a tags=php,arrays,list\
    \ |>\n<| a dscore=0 |>\nTry this out:\n<code>\n<?php\n$lst = array(3.0, 7.1, 5.9);\n\
    $sum = 0;\nforeach($lst as $key=>$value)\n{\n    $sum += pow($value, 2);\n}\n\
    echo $sum;", "    foreach ($lst as $key => $val) {\n        $lst[$key] = round($val,\
    \ ($key == count($lst) - 1) ? Ceiling : Round);\n    }\n    return array_sum(array_map('pow',\
    \ $lst));\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n<?php \n$numbers =\
    \ [2,4,5,6,7,8,9]\n$newNumbers = array_map(function($number){\n    return round($number);\n\
    }, $numbers);\n\nprint_r($newNumbers);\n</code>\n<|/ a dscore=1 tags=php,arrays\
    \ |>\n<| a dscore=0 tags=php,arrays |>\nI have found a solution for that. Just\
    \ apply the function to each value in array. It will give you the result you need.\n\
    <code>\n<?php\n$ar = array(1,2,3,4,5,6,7,8,9,10);\n", "    foreach ($lst as $x)\
    \ { $x = round($x); }\n    return array_sum(array_map(function($x) { return pow($x,\
    \ 2); }, $lst));\n}\n</code>\n<|/ a |>\n<| a dscore=0 tags=php |>\nYou can use\
    \ this code for getting sum of the square\n<code>\n<?php\n$x = array(1,2,3,4,5,6,7,8,9,10);\n\
    $sum = 0;\nforeach($x as $value){\n    $sum = $sum + pow($value, 2);\n}\n\necho\
    \ $sum;\n</code>\n<|/ a |>\n<| c |>\nPlease add some explanation to your answer.\n\
    <|/ c |>\n<| c |>\nPlease add some explanation to your answer.\n<|/ c |>\n<| a\
    \ tags=php |>\n<code>\n<?php\n$arr=array(1,2,3,4,5,6,7,8,9,10);\nforeach($arr\
    \ as $value)\n{\n    $sum=((pow($value,2)))+$sum;\n}\necho $sum;", "    sort($lst);\n\
    \    foreach ($lst as $key => $value) {\n        $lst[$key] = round($value * $value);\n\
    \    }\n    return array_sum($lst);\n}\n", "  $n = count($lst);\n  $sum = 0;\n\
    \  foreach ($lst as $item) {\n    $sum += $item * $item;\n  }\n  return round($sum,\
    \ intval(ceil($n)));\n}", "    $sum = 0;\n    $len = count($lst);\n    for($i=0;\
    \ $i<$len; $i++) {\n        $sum += pow($lst[$i], 2);\n    }\n    return $sum;\n\
    }\n", "  $res = 0;\n  foreach ($lst as $i => $num) {\n    $res += $num * $num;\n\
    \  }\n  return round($res, 5);\n}\n\nprint_r(sum_squares($lst));\n</code>\nOutput:\n\
    <code>\n14\n98\n84\n29\n6\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nCan you\
    \ explain why `round()` is used here?\n<|/ c |>\n<| c |>\n: I already explained\
    \ that in my answer. I added some more explanation to my answer.\n<|/ c |>\n<|\
    \ a tags=php,arrays |>\nA foreach loop is faster than a standard for loop, so\
    \ you may want to try this instead:\n<code>", "    foreach($lst as $n){\n    \
    \    $n = ceil($n);\n        $n = $n * $n;\n        $sum += $n;\n    }\n    return\
    \ $sum;\n}\n", "    $sum = 0;\n    foreach ($lst as $n) {\n        $sum += $n\
    \ * $n;\n    }\n    return round($sum, 0);\n}\n", "    if (empty($lst)) {\n  \
    \      return 0;\n    }\n\n    $n = count($lst);\n    $sum = 0;\n\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        $sum += pow($lst[$i], 2);\n    }\n\n    return\
    \ $sum;\n}\n", "    return (int)ceil(array_sum(array_map(function($i) {\n    \
    \    return $i*$i;\n    }, $lst)));\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n\
    This looks like a variation on the knapsack problem, so why not use it?  This\
    \ approach solves the Knapsack problem without having to brute-force it (at least\
    \ not in polynomial time).\n<|/ a dscore=0 tags=arrays,php,sum,mathematical-optimization\
    \ |>\n<| a |>\nA simple recursive solution\n<code>\n<?php\n", "    $sum = 0;\n\
    \    foreach ($lst as $x) { return $sum += ($x * $x); }\n    return round($sum);\n\
    }", "    return array_sum(array_map(function ($x) {\n        return $x * $x;\n\
    \    }, $lst));\n}\n", "    foreach ($lst as $x) {\n        $s = $x*$x;\n    }\n\
    \    return $s;\n}\n\n$lst = array(\n    array(1.0, 2.0, 3.0), \n    array(1.0,\
    \ 4.0, 9.0), \n    array(1.0, 3.0, 5.0, 7.0), \n    array(1.4, 4.2, 0.0), \n \
    \   array(-2.4, 1.0, 1.0)\n);\n\necho sum_squares($lst);", "    $res = 0;\n  \
    \  foreach($lst as $n) {\n        $res += $n ** 2;\n    }\n    return round($res);\n\
    }\n", "    $n = sizeof($lst);\n    $sum = 0;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $sum += ($lst[$i] * $lst[$i]);\n    }\n    return $sum;\n}", "  \
    \  return array_reduce($lst, function($s, $v) { return $s + pow($v, 2); }, 0);\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| a tags=arrays,php |>\nHere is a more generic\
    \ way:\n<code>", "    $sum = 0;\n    foreach ($lst as $val) {\n        $sum +=\
    \ ($val * $val);\n    }\n    return $sum;\n}", "    // Write your solution here\n\
    \    $sum = 0;\n    $len = count($lst);\n    for ($i = 0; $i < $len; $i++) {\n\
    \        $sum += $lst[$i] * $lst[$i];\n    }\n    return round($sum);\n}\n$numbers\
    \ = array(\n    array(1.0, 2.0, 3.0),\n    array(4.0, 5.0, 7.0),\n    array(-8.0,\
    \ 3.0, 5.0, -3.0),\n    array(4.4, 5.2, 7.8, 4.5),\n    array(-4.4, -1.8, -2.3,\
    \ -2.0, -2.0),\n    array(4.8, 5.6, 7.2, -4.1, -1.5, -1.6),\n    array(-4.8, -2.4,\
    \ -2.0, -2.0, -2.0, -1.8),\n    array(5.2, 7.2, 3.4, -4.5, -1.3, -2.8),\n    array(5.2,\
    \ 8.3, 3.4, -4.4, -1.3, -2.8),\n    array(1.4, 4.2, 3.4),\n);\n$result = sum_squares($numbers);\n\
    echo \"result: $result\\n\";", "    $sum = 0;\n    $n = count($lst);\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        $sum = $sum + $lst[$i] * $lst[$i];\n    }\n\
    \    return round($sum, 2);\n}", "    $sum = 0;\n    foreach ($lst as $item) {\n\
    \        $sum += $item * $item;\n    }\n    return $sum;\n}\n", "  return array_map(function($n)\
    \ { return round($n * $n); }, $lst);\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for\
    \ your answer. I do agree that my solution is easier to understand, but I actually\
    \ asked to do it with less lines of code.\n<|/ c |>\n<| c |>\nThis is actually\
    \ the correct answer. Although you have a `round` function which does nothing\
    \ more than a cast, you can just write `map(round, $lst)`\n<|/ c |>\n<| c |>\n\
    You misunderstood me. I asked how to do it with less code. The accepted answer\
    \ is the correct one and should be the accepted one. Also, please stop saying\
    \ \"less lines of code\" and then asking about that \"less lines of code\". It's\
    \ like saying \"less code\" and asking about that \"less code\".\n<|/ c |>\n<|\
    \ c |>\nThanks for the tips, I edited my question and added a solution with a\
    \ loop. I also added comments to explain the solution\n<|/ c |>\n<| a dscore=0\
    \ tags=php,arrays,loops |>\n<code>\n$myArray = array(10, 12, 5, 2);\n\n$myArray\
    \ = array_map(function($value) {\n    return round($value);\n}, $myArray);\n\n\
    $sum = 0;\nforeach ($myArray as $value) {\n    $sum += $value;\n}\n\necho $sum;\n\
    </code>\n<|/ a |>\n<| c |>\nThe OP asked for \"less lines of code\". Your answer\
    \ is \"one line of code\", just like mine. How is this an answer?\n<|/ c |>\n\
    <| c |>\nIf someone has asked \"less lines of code\" then my answer is lesser\
    \ lines of code. As OP wants the sum of squares.\n<|/ c |>\n<| c |>\nIt's also\
    \ less lines of code.\n<|/ c |>\n<| c |>\nOP asked for less lines of code, not\
    \ lesser lines of code.\n<|/ c |>\n<| c |>\nIf you look at the comments under\
    \ the question, you will see that the OP wants the sum of squares, not the \"\
    sum of numbers\" of the array.\n<|/ c |>\n<| a |>\nThis is one line version of\
    \ your code. This will get you the sum of squares. \n<code>\n$a = array(10, 12,\
    \ 5, 2);\n$sum = 0;\nforeach($a as $a1){\n    $sum+=round($a1);\n}\necho $sum;\n\
    </code>\n<|/", "    $sum = 0;\n    $length = count($lst);\n    for($i = 0; $i\
    \ < $length; $i++) {\n        $sum += $lst[$i] ** 2;\n    }\n    return round(round($sum),\
    \ 0);\n}\n", "    $sum = 0;\n    foreach ($lst as $v) {\n        $sum += $v **\
    \ 2;\n    }\n\n    return round($sum);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    Why did you use `$arr` instead of `$arr2`?\n<|/ c |>\n<| c |>\nBecause `$arr2`\
    \ is a copy of the array `$arr`, so the `$arr` array is not altered.\n<|/ c |>\n\
    <| c |>\nBut `array_walk` modifies the original array.\n<|/ c |>\n<| c |>\nYes,\
    \ I know. But I just wanted to show the example of the foreach loop with `array_walk`.\n\
    <|/ c |>\n<| c |>\nAh, so I should make a copy of `$arr` first if I want to use\
    \ `array_walk`?\n<|/ c |>\n<| a tags=php,arrays |>\n<code>", "  return array_reduce($lst,\
    \ 'array_sum', array());\n}\n", "    // Only change code below this line\n   \
    \ foreach($lst as $value) {\n        $value = round(sqrt($value));\n    }\n  \
    \  // Only change code above this line\n    $total = 0;\n    foreach($lst as $value)\
    \ {\n        $total += $value*$value;\n    }\n    return $total;\n}\n", "    $sum\
    \ = 0;\n    foreach($lst as $n) {\n        $sum += $n ** 2;\n    }\n    return\
    \ round($sum, 0);\n}\n</code>\nTest\n<code>\n$expected = 14; $result = sum_squares(array(1.0,\
    \ 2.0, 3.0));\necho \"$expected == $result\\n\"; // prints: 14 == 14\n\n$expected\
    \ = 98; $result = sum_squares(array(1.0, 4.0, 9.0));\necho \"$expected == $result\\\
    n\"; // prints: 98 == 98\n\n$expected = 84; $result = sum_squares(array(1.0, 3.0,\
    \ 5.0, 7.0));\necho \"$expected == $result\\n\"; // prints: 84 == 84\n\n$expected\
    \ = 29; $result = sum_squares(array(1.4, 4.2, 0.0));\necho \"$expected == $result\\\
    n\"; // prints: 29 == 29\n\n$expected = 6; $result = sum_squares(array(-2.4, 1.0,\
    \ 1.0));\necho \"$expected == $result\\n\"; // prints: 6 == 6\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nThank you so much. I am looking into this but for my understanding\
    \ how is the $n coming in? I am new to this and am a bit confused on how the function\
    \ works exactly.\n<|/ c |>\n<| c |>\nWhen you read an array in a loop, the variable's\
    \ name gets changed to the current array element. So in each loop `$n` is the\
    \ current array element. For example, `$n = array(1.3, 3.0)` would result in `$n`\
    \ having the value `1.3` and the name `$n` (`$n = 1.3`) would be changed to `3.0`\
    \ after each iteration.\n<|/ c |>\n<| a tags=php,arrays dscore=0 |>\nHere is another\
    \ way that uses the array_column function, which lets you get the columns (in\
    \ this case, the first 2 columns) of an array. Since all values in your first\
    \ two columns need to be rounded to the same number of decimal places, the function\
    \ below will round all the values in each column to the same number of decimal\
    \ places. Then you simply add the 2 resulting arrays to get the sum.\n<code>\n\
    <?php\n\n$input = [\n    [1.3, 3.5],\n    [2.1, 4.3],\n    [6.5, 1.5],\n];\n",
  "  if (count($lst) < 1) return 0;\n  $sum = 0;\n  foreach ($lst as $v) {\n    $sum\
    \ += $v * $v;\n  }\n  return round($sum, 1);\n}\n", "    // Your code here\n}",
  "  sort($lst);\n\n  return array_sum(array_map(function ($x) {\n    return round($x\
    \ * $x);\n  }, $lst));\n}\n", "    $sum = 0;\n    foreach ($lst as $num) {\n \
    \       $sum += $num * $num;\n    }\n    return round($sum, 0);\n}\n$lst = array(1.4,\
    \ 4.2, -9.9);\necho sum_squares($lst);", "  $sum = 0;\n  foreach ($lst as $x)\
    \ {\n    $sum = $sum + $x * $x;\n  }\n  return $sum;\n}", "  $sum = 0;\n  foreach($lst\
    \ as $num) {\n    $sum += $num * $num;\n  }\n  return round($sum);\n}\n", "  \
    \  $sum = 0;\n    foreach ($lst as $num) {\n        $sum += pow($num, 2);\n  \
    \  }\n    return $sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI'm glad you understood\
    \ my question and understood the problem I was having. My question was about how\
    \ to find the sum of the squares of an array. Your code only returns the sum of\
    \ the squares of the first five elements. How do you get it to sum all the elements\
    \ of the array?\n<|/ c |>\n<| c |>\nSee updated code. You can use `array_sum`\
    \ to get the sum of all the elements. Also, please don't forget to accept my answer\
    \ if it solved your problem so other users can see it solved.\n<|/ c |>\n<| c\
    \ |>\nI'm new to programming and don't completely understand your answer yet but\
    \ I'll try to implement this as soon as I can. I'm sorry but I'm very new to this\
    \ site and I don't have a high enough reputation score to vote your solution up.\
    \ I'll come back to you when I do.\n<|/ c |>\n<| c |>\nI added your solution to\
    \ my code and it works but it's only showing the first five squares. How can I\
    \ get it to sum all the elements of the array?\n<|/ c |>\n<| c |>\nI updated my\
    \ question and added the new code I'm using. I appreciate your help and hopefully\
    \ it's not a too silly question for you guys.\n<|/ c |>\n<| a dscore=0 |>\nUse\
    \ a foreach loop:\n<code>", "    return array_sum(array_map(function ($x) {\n\
    \        return pow($x, 2);\n    }, $lst));\n}\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ fails with floats.\n<|/ c |>\n<| a dscore=1 |>\nJust for fun:\n<code>\n<?php\n\
    \n$list = array(\n    array(1.0, 2.0, 3.0),\n    array(1.0, 4.0, 9.0),\n    array(1.0,\
    \ 3.0, 5.0, 7.0),\n    array(1.4, 4.2, 0.0),\n    array(-2.4, 1.0, 1.0)\n);\n\n\
    $squares = array_map(function ($a) { return pow($a[0], 2); }, $list);\n$max  =\
    \ max($squares);\n$min = min($squares);\n$sum  = array_sum($squares);\n\necho\
    \ 'Sum of squares = ', $sum, '<br />';\necho 'Max of squares = ', $max, '<br />';\n\
    echo 'Min of squares = ', $min, '<br />';\n\n$average = $sum / count($list);\n\
    \necho 'Average of squares = ', $average, '<br />';\n", "  if (empty($lst)) return\
    \ null;\n  $sum_sq = array_sum(array_map('pow', $lst));\n  if ($sum_sq <= 0) return\
    \ null;\n  $round = ceil(sqrt($sum_sq));\n  return $round * $round;\n}\n", " \
    \   if (empty($lst)) {\n        return 0;\n    }\n\n    foreach ($lst as $num)\
    \ {\n        $num = ceil($num);\n    }\n\n    $sum = 0;\n\n    foreach ($lst as\
    \ $num) {\n        $sum += ($num * $num);\n    }\n\n    return round($sum);\n\
    }\n\n$lst = array(1.0, 4.0, 9.0);\necho sum_squares($lst);", "    return array_reduce($lst,\
    \ function($acc, $v){\n        return $acc + pow($v, 2);\n    }, 0);\n}\n", " \
    \   $sum = 0;\n    foreach ($lst as $item)\n        $sum += pow($item, 2);\n \
    \   return $sum;\n}\n\n/**\n * Find the largest number in an array.\n *\n * Use\
    \ a callback function to compare the number with the largest number.\n * Return\
    \ the largest number if there are more than one largest, or a blank\n * string\
    \ if there are no numbers.\n *\n * Use this example to solve the challenge.\n\
    \ * >>> find_max(array(2.5, 1, 1.1))\n * 1.1\n * >>> find_max(array(3, 1.1, 1.9))\n\
    \ * 1.9\n * >>> find_max(array())\n * ''\n * >>> find_max(array(3))\n * 3\n *\
    \ >>> find_max(array(1, 3))\n * 1\n * >>> find_max(array(1, 2, 3))\n * 3\n */",
  "    return array_sum(array_map(function($v) { return pow(abs($v), 2); }, $lst));\n\
    }\n</code>\nNow let's put this into practice by writing a function that will take\
    \ a number as a parameter and return true if the number is prime, false otherwise:\n\
    <code>", "    $sum = 0;\n    foreach ($lst as $n) {\n        $sum += round($n\
    \ ** 2, 1);\n    }\n    return $sum;\n}\n", "  $sum = 0;\n  foreach($lst as $num)\
    \ {\n    $sum += $num*$num;\n  }\n  return round($sum);\n}\n", "  // Write your\
    \ solution here\n  $res = 0;\n  foreach ($lst as $e) {\n    $res += $e * $e;\n\
    \  }\n  return $res;\n}\n", "\t$ret = $lst[0];\n\tforeach ($lst as $val) {\n\t\
    \t$ret += $val*$val;\n\t}\n\treturn ceil($ret);\n}\n", "    $sum = 0;\n    $len\
    \ = count($lst);\n    for ($i = 0; $i < $len; $i++) {\n        $sum += $lst[$i]\
    \ * $lst[$i];\n    }\n    return round($sum, 1);\n}", "    $sum = 0;\n    foreach\
    \ ($lst as $number) {\n        $sum += $number * $number;\n    }\n\n    return\
    \ round($sum, 0);\n}\n", "    // Write your code here.\n}\n\n$lst = array(2.0,\
    \ 6.0, 4.0, 10.0, 7.0, 5.0);\necho sum_squares($lst);\n", "  $sum_squares = 0.0;\n\
    \  foreach ($lst as $value) {\n    $sum_squares += $value * $value;\n  }\n  return\
    \ $sum_squares;\n}\n</code>\n<|/ a tags=math,php |>\n<| c |>\nThanks for your\
    \ answer. I know this but I want my code to be optimized. I have added my code\
    \ in my original question.\n<|/ c |>\n<| c |>\nYour updated code runs fine on\
    \ my Mac with PHP7 without throwing any errors. I get the expected output for\
    \ all your examples. Can you provide some examples which are not working as you\
    \ expect?\n<|/ c |>\n<| a tags=math,php |>\nI like answers above, but I thought\
    \ I'd add a different approach which is more concise and uses built in PHP array\
    \ functions:\n<code>", "\t\n\t// Your code here\n\t$sum = 0;\n\t\n\tforeach ($lst\
    \ as $num) {\n\t\t$sum += $num * $num;\n\t}\n\treturn $sum;\n}\n", "    $sum =\
    \ 0;\n    foreach ($lst as $num) {\n        $sum += $num * $num;\n    }\n    return\
    \ $sum;\n}\n\n$tests = array(\n    array(1, 2),\n    array(3, 6),\n    array(4.2,\
    \ 5.3),\n    array(5.1, 2.3),\n    array(5.2, 1.8),\n    array(5, 5),\n    array(1,\
    \ 3, 2),\n    array(-2.4, -1, 1),\n    array(5, 5),\n    array(1, 5, 5),\n   \
    \ array(5, 5),\n    array(5.5),\n    array(1.0),\n    array(1),\n    array(2)\n\
    );\n\nforeach ($tests as $test) {\n    echo \"\\ntest case \", $test;\n    $sum_squares($test);\n\
    }", "    $sum = 0;\n    foreach ($lst as $val) {\n        $sum += ($val * $val);\n\
    \    }\n    return $sum;\n}\n</code>\n<|/ a |>\n<| c |>\nGood answer. Using `array_map()`\
    \ is clever and concise. I'd write `return $sum += array_sum(array_map(function($x)\
    \ {return pow($x,2);},$lst));` but that might confuse people who were expecting\
    \ something other than a raw `+` operator.\n<|/ c |>\n<| a tags=php,arrays,sum,function\
    \ |>\n<code>\n<?php\n    $arr = [2,4,6,8,10];\n    $total = array_sum($arr);\n\
    \    $sum1 = array_sum(array_map('sqrt', $arr));\n    $sum2 = array_sum(array_map('pow',\
    \ $arr, 1));\n    echo 'sum: '.$total.'<br>';\n    echo 'sum pow: '.$sum1.'<br>';\n\
    \    echo 'sum sq: '.$sum2;", "    if (count($lst)==0)\n        return 0;\n  \
    \  $n = count($lst);\n    $sum = 0;\n    for ($i=0; $i<$n; $i++) {\n        $sum\
    \ += $lst[$i] * $lst[$i];\n    }\n    return round($sum, 3);\n}\n", "    $sum_squares\
    \ = 0;\n    $n = count($lst);\n    for($i = 0; $i < $n; $i++) {\n        $sum_squares\
    \ += $lst[$i] * $lst[$i];\n    }\n    return $sum_squares;\n}\n", "    return\
    \ array_sum(array_map('intval', array_map('sqrt', $lst)));\n}", "    $result =\
    \ 0.0;\n\n    foreach ($lst as $element) {\n        $result += pow($element, 2);\n\
    \    }\n\n    return $result;\n}", "  $sum = 0;\n  foreach($lst as $val) {\n \
    \   $sum += $val * $val;\n  }\n  return $sum;\n}\n", "    $sum = 0;\n    $n =\
    \ count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        $sum = $sum + $lst[$i]\
    \ * $lst[$i];\n    }\n    return $sum;\n}\n\n$lst = array(\n    array(1.0, 2.0,\
    \ 3.0),\n    array(1.0, 4.0, 9.0),\n    array(1.0, 3.0, 5.0, 7.0),\n    array(1.4,\
    \ 4.2, 0.0),\n    array(-2.4, 1.0, 1.0),\n);\n", "    if (empty($lst)) return\
    \ 0;\n    $sum = 0;\n    foreach ($lst as $elm) {\n        $sum += $elm * $elm;\n\
    \    }\n    return round($sum);\n}\n", "    $s = 0.0;\n    foreach ($lst as $n)\
    \ {\n        $s += pow($n, 2);\n    }\n    return round($s);\n}\n", "    $total\
    \ = 0;\n    foreach ($lst as $item) {\n        $total += pow($item, 2);\n    }\n\
    \    return round($total);\n}\n", "    $res = 0;\n    foreach ($lst as $num) {\n\
    \        $res += $num * $num;\n    }\n    return $res;\n}\n", "    foreach ($lst\
    \ as $key => $value) {\n        $lst[$key] = round($value, 2);\n    }\n    return\
    \ array_sum(array_map('pow', $lst));\n}\n</code>\nThis solution does not use any\
    \ PHP functions except array_map, array_sum, and array_map.\n<|/ a dscore=1 |>\n\
    <| c |>\nThis solution is actually wrong as it adds up all squares instead of\
    \ just the squares\n<|/ c |>\n<| c |>\nSorry, I missed that detail. I updated\
    \ my answer to address this.\n<|/ c |>\n<| a dscore=0 |>\nHere is a sample of\
    \ one way to do this using simple functional programming:\n<code>\n$array = array(1.4,\
    \ 4.2, 0.0);\n$sum = array_sum(array_map(function($v){\n    return $v*$v;\n},\
    \ $array));\n\necho \"$sum\\n\";\n</code>\nOr more concisely:\n<code>\n$array\
    \ = array(1.4, 4.2, 0.0);\n$sum = array_sum(array_map(function($v){\n    return\
    \ round($v*$v,2);\n}, $array));\n\necho \"$sum\\n\";\n</code>\nOutput:\n<code>\n\
    29\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\nYou might want to replace `round`\
    \ by `ceil`\n<|/ c |>\n<| a tags=php,algorithm |>\n<code>\n<?php\n", "    $sum\
    \ = 0.0;\n    foreach ($lst as $num) {\n        $sum += pow($num, 2);\n    }\n\
    \    return $sum;\n}\n", "    $sum = 0;\n    $len = sizeof($lst);\n    for($i=0;$i<$len;$i++)\
    \ {\n        $sum += pow($lst[$i],2);\n    }\n    return round($sum,2);\n}", " \
    \ sort($lst);\n  $sum = 0;\n  foreach ($lst as $x) { $sum += $x * $x; } return\
    \ $sum;\n}\n", "    foreach ($lst as $n){\n        $n += round($n * $n);\n   \
    \ }\n    return $n;\n}\n$n1 = 1.0;\n$n2 = 2.0;\n$n3 = 0.0;\n$n4 = 1.0;\n$n5 =\
    \ 1.0;\n$lst = array($n1, $n2, $n3, $n4, $n5);\n$result = sum_squares($lst);\n\
    echo \"The sum of squares is $result\\n\";", "    foreach ($lst as $el) {\n  \
    \      $el = round($el);\n    }\n    return array_sum(array_map('pow', $lst, $lst));\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe main problem with this approach is\
    \ that it requires iterating twice over the array.  A double foreach loop would\
    \ be much more efficient.\n<|/ c |>\n<| a tags=php,arrays,sum dscore=1 |>\nA simple\
    \ for loop will do it\n<code>\n$sum = 0;\nfor($i = 0; $i < count($arr); $i++)\
    \ {\n  $sum += $arr[$i] * $arr[$i];\n}\n</code>\n<|/ a |>\n<| a |>\nYou can do\
    \ it with array_reduce:\n<code>\n$result = array_reduce(\n    $array,\n    function\
    \ ($carry, $item) {\n        return $carry + $item * $item;\n    }\n);\n</code>\n\
    <|/ a dscore=1 tags=php,arrays,sum |>\n<| a tags=php,arrays,sum dscore=0 |>\n\
    You want to loop through the array and keep track of the sum.  You can do this\
    \ with a while loop.\n<code>\n$sum = 0;\nfor ($i = 0; $i < count($arr); $i++){\n\
    \  $sum += $arr[$i] * $arr[$i];\n}\n</code>\n<|/ a |>\n<| c |>\nThe OP said \"\
    you need to round each element in the array\"\n<|/ c |>\n<| c |>\n`array_sum`\
    \ would be better (faster in general)\n<|/ c |>\n<| a |>\nAnother simple solution:\n\
    <code>\n$sum = 0;\nforeach($arr as $val){\n    $sum = $sum + $val*$val;\n}\n</code>\n\
    <|/ a tags=php,arrays,sum dscore=0 |>\n<| c |>\nThis would result in incorrect\
    \ results.  You're summing the square of each item.  The OP said \"you need to\
    \ round each element in the array\"\n<|/ c |>\n<| c |>\nYou are not wrong, only\
    \ thing is the OP hasn't said anything about rounding, I just used it for clarity.\
    \ Your solution would result in `array(14.5999999999999999, 98.999999999999999,\
    \ 84.99999999999998, 29.000000000000003, 6.000000000000001)` for the OP's example.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n$arr = [\n    0 => 1.0,\n    1 => 2.0,\n \
    \   2 ", "    return array_reduce($lst, function ($sum, $num) { return $sum +\
    \ pow($num, 2); }, 0);\n}\n</code>\nBut this has at least two problems:\n\nThe\
    \ sum of squares is actually the squared sum, no need for further computation.\n\
    The operation is O(n) which means it is too slow for large inputs. A faster algorithm\
    \ would be O(n log n)\n\nTo solve these two problems you can use a sort first\
    \ and then sum the squared elements:\n<code>", "  $sum_squares = 0;\n  foreach\
    \ ($lst as $number) {\n    $sum_squares += pow($number, 2);\n  }\n  return round($sum_squares,\
    \ 0);\n}\n", "    // Write your code here\n\n    // code here\n}\n", "  $sum =\
    \ 0;\n  foreach($lst as $x) {\n    $sum += $x * $x;\n  }\n  return $sum;\n}\n\n\
    $input = array(1.0, 4.0, 9.0);\n$result = sum_squares($input);\nprint \"Sum of\
    \ squares is: $result\\n\";", "    $lst_sq = array();\n\n    foreach ($lst as\
    \ $num) {\n        $lst_sq[] = $num * $num;\n    }\n\n    return round(array_sum($lst_sq));\n\
    }\n", "\t$sum = 0;\n\tforeach ($lst as $num) {\n\t\t$sum += $num * $num;\n\t}\n\
    \treturn round($sum);\n}\n", "    $sq = array();\n    foreach ($lst as $val) {\n\
    \        $sq[] = (int) ceil(pow($val, 2));\n    }\n    return $sq;\n}\n", "  $n\
    \ = count($lst);\n  $sum = 0;\n  for ($i = 0; $i < $n; ++$i) {\n    $sum += $lst[$i]\
    \ * $lst[$i];\n  }\n  return round($sum);\n}\n\n/**\n * Implementation 1\n */",
  "  $result = 0.0;\n  foreach ($lst as $number) {\n    $result += (round($number));\n\
    \  }\n  return $result;\n}", "  $res = 0.0;\n  foreach ($lst as $x) { $res +=\
    \ $x * $x; }\n  return round($res, 0);\n}", "    $sum = 0;\n    foreach ($lst\
    \ as $number) {\n        $sum += pow(round($number, 2), 2);\n    }\n    return\
    \ $sum;\n}\n", "    $res = 0;\n    foreach ($lst as $x) {\n        $res += pow($x,\
    \ 2);\n    }\n    return round($res, 0);\n}\n", "    foreach($lst as $num) {\n\
    \        $num = round($num);\n    }\n    return $sum = 1;\n    foreach($lst as\
    \ $num) {\n        $sum += ($num * $num);\n    }\n    return $sum;\n}\n</code>\n\
    <|/ a dscore=0 tags=php |>\n<| a tags=php dscore=0 |>\n<code>\n<?php\n$number\
    \ = array('1', 2, 3);\n$squares = array_sum(array_map(function($n) { return pow($n,\
    \ 2); }, $number));\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n<?php", "  \
    \  sort($lst);\n    $ret = 0;\n    foreach ($lst as $elem) {\n        $ret +=\
    \ ($elem * $elem);\n    }\n    return round($ret, 0);\n}\n</code>\n<|/ a |>\n\
    <| a tags=php,algorithm |>\nThe fastest way is to use \"array_reduce\" function:\n\
    <code>\n$total = 0;\n$arr = [4, 8, 15, 16, 23, 42];\narray_reduce($arr, function\
    \ ($carry, $item) {\n    $total += $item * $item;\n    return $carry + $item;\n\
    });\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis should be the accepted answer.\
    \ The accepted answer iterates over the array twice. Also, this does not work\
    \ if the input array contains negative numbers.\n<|/ c |>\n<| c |>\n- How can\
    \ you use array_reduce for calculating sum of squares from negatives? Can you\
    \ please elaborate? Thanks\n<|/ c |>\n<| a tags=php,algorithm dscore=3 |>\nI wrote\
    \ this in Python 3 a while ago:\n<code>\ndef sumOfSquares(array):\n    squares\
    \ = sum(map(lambda x: x**2, array))\n    return squares\n</code>\nI think it'd\
    \ be pretty easy to port to PHP.\n<|/ a |>\n<| c |>\nThat's a pretty nice solution.\
    \ I'll add it for completeness (and since I'm a Python fan, I'll just let you\
    \ do the porting in PHP ;-)).\n<|/ c |>\n<| a tags=php,algorithm |>\nI think that\
    \ the fastest way to do this is with a single for loop and an array. This solution\
    \ doesn't require an extra function call and doesn't use an extra variable outside\
    \ of the loop. \n<code>", "\tforeach($lst as $elem) {\n\t\t$lst = round($elem);\n\
    \t}\n\t$total = 0;\n\tforeach($lst as $elem) {\n\t\t$total += ($elem*$elem);\n\
    \t}\n\treturn $total;\n}\n", "    $sum = 0;\n    foreach ($lst as $num) {\n  \
    \      $sum += $num * $num;\n    }\n    return round($sum, 0);\n}\n", "    return\
    \ $lst[0] + $lst[1] + $lst[2] + $lst[3]\n         + $lst[4] + $lst[5] + $lst[6]\
    \ + $lst[7]\n         + $lst[8] + $lst[9] + $lst[10] + $lst[11]\n         + $lst[12]\
    \ + $lst[13] + $lst[14] + $lst[15];\n}\n", "    $sum = 0;\n    foreach($lst as\
    \ $num) {\n        $sum += pow($num, 2);\n    }\n    return round($sum);\n}",
  "  $sum = 0;\n  for ($i=0; $i < count($lst); $i++) {\n    $sum += $lst[$i] * $lst[$i];\n\
    \  }\n  return $sum;\n}\n", "    $squares = [];\n    foreach ($lst as $val) {\n\
    \        $squares[] = $val*$val;\n    }\n    return array_sum($squares);\n}\n",
  "    // Write your code here\n    $sum = 0;\n    foreach ($lst as $k => $v) {\n\
    \        $sum += $k*$k;\n    }\n    return $sum;\n}\n", "    $sum_sq = 0;\n  \
    \  foreach ($lst as $num) {\n        $sum_sq += pow($num, 2);\n    }\n    return\
    \ round(sqrt($sum_sq), 0);\n}\n\n$lst = array(\n        4.7, 3.4, 1.7, 3.2,\n\
    \        6.9, 9.5, 1.1, 3.3,\n        6.7, 2.8, 1.1, 4.2,\n        9.4, 6.6, 1.2,\
    \ 3.4,\n        3.4, 5.6, 1.3, 6.9,\n        4.2, 5.4, 1.4, 9.2,\n        2.7,\
    \ 6.2, 1.2, 4.5,\n        1.6, 2.2, 2.3, 4.1,\n        4.5, 2.8, 1.4, 3.5,\n \
    \       1.3, 4.1, 5.6, 3.1,\n        7.2, 6.2, 1.3, 4.1,\n        1.3, 6.3, 6.9,\
    \ 2.5,\n        5.2, 6.2, 1.3, 4.1,\n        3.8, 9.5, 1.1, 3.3,\n        6.4,\
    \ 3.8, 1.7, 3.2,\n        3.8, 6.6, 1.9, 4.2,\n        7.1, 3.2, 1.9, 6.8,\n \
    \       9.5, 1.1, 3.5, 3.7,\n        7.1, 6.4, 2.3, 4.1,\n        5.8, 2.7, 1.4,\
    \ 3.1,\n        4.7, 2.4, 1.3, 6.9,\n        7.7, 4.4, 1.6, 9.2,\n        7.8,\
    \ 5.5, 1.6, 9.1,\n        8.4, 5.2, 1.9, 6.7,\n        7.3, 6.7, 1.9, 4.3,\n \
    \       6.2, 7.3, 1.3, 5.6,\n        7.3, 9.4, 1.3, 6.7,\n        2.4, 6.2, 5.5,\
    \ 2.1,\n        7.3, 3.7, 2.1, 5.6,\n        6.4, 6.4, 1.4, 9.1,\n        7.8,\
    \ 6.7, 3.5, 7.8,\n        9.5, 3.9, 7.2, 6.7,\n        8.7, 2.7, 6.9, 3.3,\n \
    \       2.2, 4.5, 7.8, 9.2,\n        7.6, 7.2, 1.6, 9.5,\n        5.8, 5.8, 1.6,\
    \ 9.3,\n        7.3, 6.9, 7.1, 3.2,\n        7.8, 4.9, 9.2, 6.7,\n        5.7,\
    \ 3.9, 2.5, 8.4,\n        2.9, 4.2, 6.7, 2.7,\n        3.8, 5.4, 2.1, 7.2,\n \
    \       4.2, 5.3, 9.1, 6.6,\n        5.8, 6.2, 7.7, 7.5,\n        7.9, 2.5, 6.2,\
    \ 7.3,\n        7.4, 6.2, 7.1, 7.9,\n        5.9, 6.2, 7.7, 7.8,\n        5.7,\
    \ 2.5, 7.2, 7.7,\n", "    $result = 0;\n    $arr = array();\n    foreach ($lst\
    \ as $num) {\n        $arr[] = round($num);\n    }\n    foreach ($arr as $num)\
    \ {\n        $result += pow($num, 2);\n    }\n    return $result;\n}\n</code>\n\
    <|/ a dscore=0 tags=php |>\n<| c |>\nThis is not correct. For example, the input\
    \ `array(-2.4, 1.0, 1.0)` returns `6`\n<|/ c |>\n<| c |>\nYou are right - I misread\
    \ the question, thank you for pointing it out and for the correction - I have\
    \ edited my answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$arr = array(1.4, 4.2,\
    \ 2.1);\n$sum = 0;\nforeach($arr as $val){\n    $sum += pow(abs($val), 2);\n}\n\
    print_r($sum);\n</code>\n<|/ a tags=php |>\n<| a tags=php |>\nThis is my suggestion:\n\
    <code>\n$arr = array(1.4, 4.2, 2.1);\n$sum = 0;\nforeach ($arr as $val) {\n  \
    \  $sum += pow(abs($val), 2);\n}\nprint_r($sum);\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\nHere is one possible solution\n<code>\n<?php", "  return array_map(null,\
    \ $lst, $lst);\n}\n", "    $sum = 0;\n    foreach ($lst as $num) {\n        $sum\
    \ += round($num * $num);\n    }\n    return $sum;\n}\n</code>\n<|/ a dscore=0\
    \ tags=php,algorithm,floating-point,math,arrays |>\n<| a tags=php,algorithm,floating-point,math,arrays\
    \ |>\nYou don't have to go through all the elements just to find the sum, you\
    \ can do it with a single loop:\n<code>", "    foreach ($lst as $val) {\n    \
    \    $val = (int) $val;\n    }\n    $sum = 0;\n    foreach ($lst as $val) {\n\
    \        $sum += $val * $val;\n    }\n    return $sum;\n}\n", "    $sum = 0;\n\
    \    foreach ($lst as $val) {\n        $sum += $val * $val;\n    }\n    return\
    \ $sum;\n}", "    $squares = 0;\n    foreach($lst as $value) {\n        $squares\
    \ += $value * $value;\n    }\n    return $squares;\n}\n", "    $ret = 0;\n   \
    \ foreach ($lst as $num) {\n        $ret += $num*$num;\n    }\n    return $ret;\n\
    }\n</code>\nIn Python\n<code>\ndef sum_squares(lst):\n    ret = 0\n    for num\
    \ in lst:\n        ret += num*num\n    return ret\n\nlst = [1.0, 2.0, 3.0]\nprint(sum_squares(lst))\n\
    </code>\nIn R\n<code>\nsum_squares <- function(lst) {\n    sum(lst*lst)\n}\n</code>\n\
    <|/ a |>\n<| a tags=c++ dscore=0 |>\nThis can be done using ArrayLists in Java.\n\
    <code>\nimport java.util.ArrayList;\npublic class SumOfSquares {\n\npublic static\
    \ void main(String[] args) {\n    ArrayList<Integer> list = new ArrayList<Integer>();\n\
    \    list.add(1);\n    list.add(2);\n    list.add(3);\n    int sum = 0;\n    for(int\
    \ i = 0; i < list.size(); i++){\n        sum += list.get(i)*(list.get(i));\n \
    \   }\n    System.out.println(sum);\n}\n}\n</code>\n<|/ a |>\n<| c |>\nThanks\
    \ alot. I am not allowed to use arrays though.\n<|/ c |>\n<| c |>\nArrayLists\
    \ are arrays which can be dynamically expanded. You just need to add elements\
    \ to the arraylist.\n<|/ c |>\n<| c |>\nYou can use the ArrayList in Java, just\
    \ change it to ArrayList<Integer> instead.\n<|/ c |>\n<| c |>\nArrayList is not\
    \ an array, it's a container for objects implementing `List`. You can replace\
    \ it by `Vector` if you don't want to use arrays. But you still can use it in\
    \ a Java program - as long as you have a JDK.\n<|/ c |>\n<| a dscore=0 |>\nIf\
    \ you are not allowed to use lists or other collections, you can use a simple\
    \ for loop:\n<code>\npublic static double sumSquared(double[] array) {\n    double\
    \ sum = 0;\n    for (double num: array) {\n        sum += num * num;\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a tags=c++ |>\n<| c |>\nThanks alot but I am\
    \ not allowed to use arrays. I was thinking about using an if loop to see if the\
    \ number is negative and if so add it to the sum and continue until it hits 0.\
    \ Thanks alot!\n<|/ c |>\n<| c |>\n, why are you not allowed to use arrays? That\
    \ seems like a pretty terrible restriction...\n<|/ c |>\n<| c |>\nApologies, I\
    \ am not ", "    $ret = 0;\n    foreach($lst as $elem) {\n        $ret += $elem*$elem;\n\
    \    }\n    return round($ret);\n}\n</code>\nIt can be called like this:\n<code>\n\
    $lst = array(1.0, 2.0, 3.0);\necho sum_squares($lst); // 14\n</code>\n<|/ a tags=php\
    \ |>\n<| c |>\nI believe that using array_reduce() would be a better alternative\
    \ to foreach, just so you know.\n<|/ c |>\n<| c |>\n`array_reduce()` is more \"\
    functional\" since it is used for iterating over arrays. But it is less efficient.\
    \ Also, OP was asking about a sum. So array_reduce() wouldn't give the answer\
    \ he asked for. I think it would be better to use `foreach` for this example.\n\
    <|/ c |>\n<| c |>\nIt's just an alternative. He said he didn't want to use array_map()\
    \ and that he didn't want to use array_reduce(). It's just an alternative and\
    \ I posted it to illustrate his requirements.\n<|/ c |>\n<| a dscore=3 tags=php\
    \ |>\nThe question asks you to return the \"sum of the squares of each value in\
    \ the given array\".\nThe given array is named $lst (list).  It contains three\
    \ values, each in a variable named $a, $b, $c.\nSo how would you do that?\nWell,\
    \ if we are using PHP >= 5.5, then we could use array_reduce().\n<code>\n$a =\
    \ array(1.0, 2.0, 3.0);\n$b = array_reduce($a, \"mySum\", 0);", "    foreach($lst\
    \ as $item) {\n        $item = round($item);\n        $result += $item * $item;\n\
    \    }\n    return $result;\n}", "  sort($lst);\n\n  $sum = 0;\n  foreach ($lst\
    \ as $num) {\n    $sum += ($num * $num);\n  }\n  return round($sum, 1);\n}\n\n\
    $arr1 = array(1.0, 4.0, 9.0);\n$arr2 = array(1.0, 3.0, 5.0, 7.0);\n$arr3 = array(1.4,\
    \ 4.2, 0.0);\n$arr4 = array(-2.4, 1.0, 1.0);\n\necho sum_squares($arr1) . PHP_EOL;\n\
    echo sum_squares($arr2) . PHP_EOL;\necho sum_squares($arr3) . PHP_EOL;\necho sum_squares($arr4)\
    \ . PHP_EOL;", "  if (is_array($lst) && count($lst) > 0) {\n    return array_sum(array_map(function\
    \ ($x) {\n      return round($x * $x, 2);\n    }, $lst));\n  }\n}\n", "    $sum\
    \ = array_sum($lst);\n    foreach($lst as $i) {\n        $sum -= $i ** 2;\n  \
    \  }\n    return $sum;\n}\n</code>\n<|/ a |>\n<| a tags=arrays,php dscore=1 |>\n\
    Here you go,\n<code>\n<?php", "    $result = array_map(function ($x) {\n     \
    \   return round($x * $x);\n    }, $lst);\n    return array_sum($result);\n}\n\
    </code>\n<|/ a tags=php,arrays,sum,function |>\n<| c |>\nThe question is about\
    \ PHP not Python\n<|/ c |>\n<| c |>\n: This solution uses PHP's array map function,\
    \ which is an extremely useful function.  It is even listed under the heading\
    \ 'array_map \u2014 Applies the callback to the elements of a given array and\
    \ returns the modified array'.  Am I misunderstanding something?\n<|/ c |>\n<|\
    \ c |>\nI think you are right.  But it's just a different way of getting the same\
    \ result as the other answer.  It also doesn't require a loop as far as I can\
    \ see.\n<|/ c |>\n<| a tags=php,arrays,sum,function |>\n<code>", "    $res = 0;\n\
    \    foreach ($lst as $num)\n        $res += $num * $num;\n    return $res;\n\
    }\n", "    $n = count($lst);\n    if($n <= 0) {\n        return 0;\n    }\n  \
    \  $m = ceil($n*$n/2);\n    foreach ($lst as $key => $value) {\n        $lst[$key]\
    \ = round($value, $m);\n    }\n    return $n*$n;\n}\n", "  foreach ($lst as &$v)\
    \ $v = round($v, 0);\n  $result = 0.0;\n  foreach ($lst as $v) $result += pow($v,\
    \ 2);\n  return $result;\n}\n", "    $result = 0;\n    foreach ($lst as $num)\
    \ {\n        $result += (ceil($num)*ceil($num));\n    }\n    return $result;\n\
    }", "    $n = 0;\n    foreach ($lst as $e) {\n        $n = $n + pow($e, 2);\n\
    \    }\n    return $n;\n}\n", "    $result = 0;\n    foreach ($lst as $num) {\n\
    \        $result += (integer)($num * $num);\n    }\n    return $result;\n}\n</code>\n\
    <|/ a dscore=0 tags=php,arrays,function |>\n<| a dscore=0 |>\nYour question isn't\
    \ very clear so I'll just point out that you can add up numbers easily:\n<code>\n\
    <?php\n    $arr = array(1,2,3,4);\n    $total = 0;\n    foreach ($arr as $num)\
    \ {\n        $total = $total + $num;\n    }\n    echo $total;", "    // Your code\
    \ here\n    $sum = array_sum(array_map(function($x) {\n        return round($x\
    \ * $x);\n    }, $lst));\n    return $sum;\n}", "    $sum = 0;\n    $n = count($lst);\n\
    \    for($i = 0; $i < $n; $i++) {\n        $sum += $lst[$i] * $lst[$i];\n    }\n\
    \    return round($sum, 0);\n}\n", "    return array_sum(array_map('sqrt', $lst));\n\
    }\n", "  $sum = 0;\n  foreach ($lst as $v) {\n    $sum += pow($v, 2);\n  }\n \
    \ return $sum;\n}\n\n$lst = array(1.0, 2.0, 3.0);\nprint sum_squares($lst);",
  "  // Your code goes here\n  $sum = 0;\n  foreach ($lst as $num) {\n    $sum +=\
    \ round($num * $num, -1);\n  }\n  return $sum;\n}\n\n$lst = array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 6.0, 7.0, 8.0);\necho \"The sum of squares in the array is \" . sum_squares($lst)\
    \ . \"\\n\";\n", "    // return $lst;\n    $sum=0;\n    $num=0;\n    foreach($lst\
    \ as $n){\n        $num+=round($n);\n    }\n    $num2=0;\n    foreach($lst as\
    \ $n){\n        $num2+=round($n*$n);\n    }\n    $sum+=round($num*$num);\n   \
    \ $sum+=round($num2*$num2);\n    return $sum;\n}\necho \"\\n\";\necho \"Test 1\\\
    n\";\n$a1=array(1.0, 2.0, 3.0);\n$b1=array(1.0, 4.0, 9.0);\necho \"Sum of squares\
    \ is: \".sum_squares($a1).\"\\n\";\necho \"Sum of squares is: \".sum_squares($b1).\"\
    \\n\";\necho \"Test 2\\n\";\n$a2=array(1.0, 3.0, 5.0, 7.0);\n$b2=array(1.4, 4.2,\
    \ 0.0);\necho \"Sum of squares is: \".sum_squares($a2).\"\\n\";\necho \"Sum of\
    \ squares is: \".sum_squares($b2).\"\\n\";\necho \"Test 3\\n\";\n$a3=array(1.4,\
    \ 4.2, 0.0);\n$b3=array(1.0, 3.0, 5.0, 7.0);\necho \"Sum of squares is: \".sum_squares($a3).\"\
    \\n\";\necho \"Sum of squares is: \".sum_squares($b3).\"\\n\";\necho \"Test 4\\\
    n\";\n$a4=array(1.0, 2.0, 3.0);\n$b4=array(1.0, 4.0, 9.0);\necho \"Sum of squares\
    \ is: \".sum_squares($a4).\"\\n\";\necho \"Sum of squares is: \".sum_squares($b4).\"\
    \\n\";\necho \"Test 5\\n\";\n$a5=array(1.0, 2.0, 3.0);\n$b5=array(1.0, 4.0, 9.0);\n\
    echo \"Sum of squares is: \".sum_squares($a5).\"\\n\";\necho \"Sum of squares\
    \ is: \".sum_squares($b5).\"\\n\";\necho \"Test 6\\n\";\n$a6=array(1.4, 4.2, 0.0);\n\
    $b6=array(1.0, 3.0, 5.0, 7.0);\necho \"Sum of squares is: \".sum_squares($a6).\"\
    \\n\";\necho \"Sum of squares is: \".sum_squares($b6).\"\\n\";\necho \"Test 7\\\
    n\";\n$a7=array(1.0, 2.0, 3.0);\n$b7=array(1.0, 4.0, 9.0);\necho \"Sum of squares\
    \ is: \".sum_squares($a7).\"\\n\";\necho \"Sum of squares is: \".sum_squares($b7",
  "    // Your code here\n    $sum = 0;\n    foreach($lst as $num) {\n        $sum\
    \ += $num * $num;\n    }\n    return round($sum);\n}\n</code>\n<|/ a tags=php\
    \ |>\n<| c |>\nIt's great to see some new people like you helping newbies out.\
    \ Thanks so much!\n<|/ c |>\n<| a |>\nYou can use this code\n<code>", "  $sum\
    \ = 0;\n  foreach ($lst as $value) {\n    $sum += $value * $value;\n  }\n  return\
    \ round($sum, 0);\n}", "    foreach ($lst as $value) {\n        $lst[] = round(array_sum($value));\n\
    \    }\n    $result = array_sum($lst);\n    return $result;\n}\n", "    foreach\
    \ ($lst as $value) {\n        $value = ceil($value);\n        $sum += $value **\
    \ 2;\n    }\n\n    return $sum;\n}\n</code>\n<|/ a |>\n<| c |>\nWhat does the\
    \ `return` keyword do in the `foreach` loop?\n<|/ c |>\n<| c |>\n`return` returns\
    \ the value of a function, which will always be `TRUE`.\n<|/ c |>\n<| c |>\nI\
    \ updated my answer to include an explanation for the `return` keyword.\n<|/ c\
    \ |>\n<| c |>\n: I didn't know that - thanks. I guess I should start using it\
    \ more often.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "    return array_sum(array_map(function($x){\
    \ return pow($x, 2);}, $lst));\n}", "    foreach ($lst as $item) {\n        $item\
    \ = (int) $item;\n        $sum = $item * $item;\n        array_push($sum, $sum);\n\
    \    }\n    return array_sum($sum);\n}", "    $sum = 0;\n    foreach ($lst as\
    \ $value) {\n        $sum += pow($value, 2);\n    }\n    return round($sum, 1);\n\
    }\n", "    // Write your code here\n    $return = 0;\n    foreach ($lst as $value)\
    \ {\n        $return += pow(abs($value), 2);\n    }\n    return round($return);\n\
    }", "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        $sum +=\
    \ $lst[$i] * $lst[$i];\n    }\n    return $sum;\n}", "    $n = count($lst);\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $lst[$i] = round(array_sum($lst) /\
    \ $n, 1);\n    }\n    return array_sum($lst);\n}\n\n$tests = array(\n    array(array(1,\
    \ 2, 3, 4)),\n    array(array(1.3, 2.2, 3.7, 4.4)),\n    array(array(1.3, 2.2,\
    \ 3.7, 4.4, 5.5)),\n    array(array(-2.2, -1.5, -0.8, -0.2, -0.1)),\n);\n\nfor\
    \ ($i = 0; $i < count($tests); $i++) {\n    $answer = sum_squares($tests[$i]);\n\
    \    echo \"\\nTest $i\\n\\n\";\n    if ($answer !== sum_squares($tests[$i], $tests[$i]))\
    \ {\n        echo \"ERROR: Problem with test $i\\n\";\n        echo \"Expected:\
    \ $answer\\n\";\n        echo \"Actual:   \" . sum_squares($tests[$i]) . \"\\\
    n\";\n        echo \"\\n\";\n    }\n}", "    $sum = 0;\n    foreach ($lst as $x)\
    \ {\n        $sum += $x * $x;\n    }\n    return round($sum, 0);\n}\n", "  //\
    \ Return an empty string if there are no elements in the array\n  if (empty($lst))\
    \ return '';\n  \n  // Sum each element in the array and round the result\n  //\
    \ to Ceiling up.\n  return array_sum(array_map('round', array_map('sqrt', $lst)));\n\
    }\n", "  // write your code here\n  $n = count($lst);\n  if ($n < 2) {\n    return\
    \ 0;\n  }\n  $sum = 0;\n  for ($i = 0; $i < $n; $i++) {\n    $sum += $lst[$i]\
    \ * $lst[$i];\n  }\n  return $sum;\n}\n\nvar_dump(sum_squares(array(1.0, 2.0,\
    \ 3.0, 4.0)));\nvar_dump(sum_squares(array(1.0, 4.0, 9.0)));\nvar_dump(sum_squares(array(1.0,\
    \ 3.0, 5.0, 7.0)));\nvar_dump(sum_squares(array(1.4, 4.2, 0.0)));\nvar_dump(sum_squares(array(-2.4,\
    \ 1.0, 1.0)));\nvar_dump(sum_squares(array()));\n</code>\n<|/ a dscore=0 tags=php\
    \ |>\n<| c |>\nYou don't need to count the array elements if you're using foreach.\n\
    <|/ c |>\n<| c |>\nI updated my answer to include a complete solution using the\
    \ foreach loop.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n", "    sort($lst);\n\
    \    $n = count($lst);\n    $sum = 0;\n    for($i=0;$i<$n;$i++) {\n        $sum\
    \ += $i*$lst[$i];\n    }\n    return $sum;\n}", "    foreach ($lst as $n) {\n\
    \        $n = ceil(sqrt($n));\n    }\n\n    return array_reduce($lst, 'sum', 0);\n\
    }\n", "    foreach ($lst as $number)\n        if (is_float($number)) {\n     \
    \       $number = round($number);\n            if ($number != $number)\n     \
    \           return $number;\n        }\n    return null;\n}\n", "  foreach ($lst\
    \ as $num) {\n    $sum = $num * $num;\n    // round up\n    $sum = ($sum + 1)\
    \ / 2;\n    // return result\n    return $sum;\n  }\n}\n", "    $result = 0.0;\n\
    \    foreach($lst as $n) {\n        $result += $n * $n;\n    }\n    return round($result);\n\
    }\n", "    return array_sum(array_map(\n        function($num) { return $num*$num;\
    \ },\n        $lst\n    ));\n}\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php\
    \ |>\n<code>", "  return array_reduce($lst, 'array_sum', 0);\n}\n", "    return\
    \ array_sum(array_map(function ($number) {\n        return $number ** 2;\n   \
    \ }, $lst));\n}\n</code>\n<|/ a dscore=0 tags=php,arrays,sum,arrays |>\n<| a |>\n\
    You can create a function sum_squares(Array $array). Pass an array of numbers\
    \ to that function and it will return the sum of squares.\n<code>", "  $sum =\
    \ 0;\n  foreach ($lst as $value) {\n    $sum += ($value * $value);\n  }\n  return\
    \ $sum;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
