language: php
name: HumanEval_68_pluck
results:
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $count = count($arr);\n    $even = array_filter(range(0, $count - 1), function($k)\
    \ use ($arr) {\n        return $arr[$k] % 2 === 0;\n    });\n    $smalest_val\
    \ = array_shift($even);\n    return $smalest_val ? [$smalest_val, array_shift($even)]\
    \ : [[]];\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nAwesome solution :)\
    \ Just one question. Is it possible to modify this code to handle cases where\
    \ a node has more than one odd value ? In this case, I want the index to just\
    \ pick the first one\n<|/ c |>\n<| c |>\nYes, of course, we can modify the code\
    \ to do that. I'm going to update my answer.\n<|/ c |>\n<| c |>\nThank you, works\
    \ beautifully !\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmptiywdewm.php
    on line 35

    '
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $min = min($arr);\n    foreach($arr as $key => $val) {\n        if ($val\
    \ === $min) {\n            return array($val, array_search($key, array_keys($arr)));\n\
    \        }\n    }\n    return array();\n}\nfunction candidate(...$args) {\n  \
    \  return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqpzxdkog.php:42\n\
    Stack trace:\n#0 /tmp/tmpqpzxdkog.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpqpzxdkog.php\
    \ on line 42\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $i = 0;\n    foreach ($arr as $node) {\n        $i += $node;\n    }\n   \
    \ if ($i % 2) {\n        return $i;\n    }\n    $res = array();\n    foreach ($arr\
    \ as $node) {\n        $res[$node] = $i;\n        $i += $node;\n    }\n    return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo4um610e.php:48\n\
    Stack trace:\n#0 /tmp/tmpo4um610e.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpo4um610e.php\
    \ on line 48\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $min = null;\n    $i = null;\n    foreach ($arr as $k => $v) {\n        if\
    \ ($v % 2 == 0) {\n            if ($min === null) {\n                $min = $v;\n\
    \                $i = $k;\n            } else {\n                $min = $v < $min\
    \ ? $v : $min;\n            }\n        }\n    }\n    return array($min, $i);\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4b2iaew9.php:48\n\
    Stack trace:\n#0 /tmp/tmp4b2iaew9.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp4b2iaew9.php\
    \ on line 48\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $result = array();\n    foreach ($arr as $v) {\n        $index = 0;\n   \
    \     for ($i = $arr[0]; $i > $v; $i /= 2)\n            $index++;\n        $result[$index]\
    \ = $v;\n    }\n    if ($arr != array())\n        return $result;\n    return\
    \ array();\n}\n</code>\n<|/ a |>\n<| a |>\nThis solution using array filter and\
    \ sort and finally a unset will solve your issue. This solution also has the advantage\
    \ that you can remove a specific value from the array by using the key (index\
    \ value)\n<code>\n<?php\n$arr = array(1,2,3,4,5,6,7);\n\nunset($arr[2]);\n$arr\
    \ = array_filter($arr,function($v){\n    return ($v & 1 ) === 0;\n});\n\nsort($arr);\n\
    \nvar_dump($arr);\n</code>\nOutput\n<code>\narray\n  4 => int 3\n  5 => int 6\n\
    \  6 => int 7\n</code>\n<|/ a tags=arrays,php,multidimensional-array dscore=1\
    \ |>\n<| a dscore=1 |>\nA simple solution would be to sort your array and then\
    \ use array_search to get the smallest index.\n<code>\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpf24nwuje.php
    on line 39

    '
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    sort($arr);\n    $len = count($arr);\n    if ($len === 0) {\n        return\
    \ [];\n    }\n    $min = $arr[$len - 1];\n    $index = array_search($min, $arr);\n\
    \    if ($index === false) {\n        return [];\n    }\n    foreach ($arr as\
    \ $i => $value) {\n        if ($value % 2 === 0) {\n            if ($value !==\
    \ $min) {\n                return [$value, $index];\n            }\n        }\n\
    \    }\n    return [];\n}\n</code>\n<|/ a dscore=0 tags=php,arrays |>\n<| c |>\n\
    Please add some explanation to your code so people can understand how it solves\
    \ the problem at hand. Code only answers are discouraged.\n<|/ c |>\n<| a tags=php,arrays\
    \ dscore=0 |>\nThis code can help you:\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp9muwi3v0.php
    on line 47

    '
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \  $largest = array();\n  $index = 0;\n  $result = [];\n\n  // Write your code\
    \ here\n  foreach ($arr as $value) {\n    if ($value % 2 == 0 && $value > 0) {\n\
    \      $index = 0;\n    }\n    $result[$value] = $value;\n    $largest[$value]\
    \ = $value;\n\n    foreach ($arr as $key => $value) {\n      if ($key > $index\
    \ && $value % 2 == 0 && $value > 0) {\n        $index++;\n      }\n\n      if\
    \ ($key > $index && $value % 2 == 0) {\n        $largest[$value] = $value;\n \
    \     }\n    }\n  }\n  return $largest;\n}\n\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb_9io3r6.php:58\n\
    Stack trace:\n#0 /tmp/tmpb_9io3r6.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpb_9io3r6.php\
    \ on line 58\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $smallest = min(array_filter($arr));\n    $even = array_filter($arr, function($el)\
    \ use ($smallest) {\n        return $el % 2 == 0;\n    });\n    return array_filter($even,\
    \ function($el) use ($smallest) {\n        return $el == $smallest;\n    });\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpex567ff1.php:41\n\
    Stack trace:\n#0 /tmp/tmpex567ff1.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpex567ff1.php\
    \ on line 41\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    sort($arr);\n    $evens = array_filter($arr, function($n) {\n        return\
    \ $n & 1; // return only even numbers in an array\n    });\n    if (count($evens)\
    \ > 0) {\n        $index = array_search(min($evens), $evens); // find the index\
    \ of the smallest even number in the array\n        return [$evens[$index], $index];\
    \ // return the smallest even number and its index\n    }\n    return array();\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbb6j2hwg.php:43\n\
    Stack trace:\n#0 /tmp/tmpbb6j2hwg.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpbb6j2hwg.php\
    \ on line 43\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    // Your code here\n    $result = [];\n    $values = [];\n    $index = 0;\n\
    \    foreach ($arr as $value) {\n        if ($value % 2 == 0) {\n            $values[$value]\
    \ = $value;\n        }\n    }\n    arsort($values);\n    foreach ($values as $key\
    \ => $value) {\n        if (isset($values[$key + 1]) && $value == $values[$key\
    \ + 1]) {\n            $result[] = [$value, $index];\n        }\n        $index++;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp42gskps9.php:52\n\
    Stack trace:\n#0 /tmp/tmp42gskps9.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp42gskps9.php\
    \ on line 52\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $count = count($arr);\n    if($count == 0) {\n        return [];\n    }\n\
    \    $min = $arr[0];\n    $minIndex = 0;\n    for($i = 1; $i < $count; $i++) {\n\
    \        if($min > $arr[$i]) {\n            $min = $arr[$i];\n            $minIndex\
    \ = $i;\n        }\n    }\n    return [\n        \"smalest_value\" => $minIndex,\n\
    \        \"its_index\" => $min\n    ];\n}\n\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplq1b5ec5.php:51\n\
    Stack trace:\n#0 /tmp/tmplq1b5ec5.php(61): test()\n#1 {main}\n  thrown in /tmp/tmplq1b5ec5.php\
    \ on line 51\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $min = $arr[0];\n    $min_index = 0;\n    $arrLength = count($arr);\n   \
    \ $odd_value = $min;\n    for ($i = 0; $i < $arrLength; $i++) {\n        $odd_value\
    \ = $arr[$i];\n        $odd_value = $odd_value % 2 == 0 ? $odd_value / 2 : $odd_value;\n\
    \        if ($odd_value == 0) {\n            if ($min_index == 0) {\n        \
    \        return $min;\n            }\n            $min_index = $i;\n         \
    \   $min = $arr[$min_index];\n            $min = $min % 2 == 0 ? $min / 2 : $min;\n\
    \        }\n    }\n    if ($min_index == $arrLength) {\n        return $min;\n\
    \    }\n    return array($min, $min_index);\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_l9lvvf.php:55\n\
    Stack trace:\n#0 /tmp/tmp1_l9lvvf.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp1_l9lvvf.php\
    \ on line 55\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    if (count($arr) == 0) return [];\n\n    $smalest_value = 0;\n    $smalest_index\
    \ = 0;\n\n    for ($i = 0; $i < count($arr); $i++) {\n        $value = $arr[$i];\n\
    \        $index = $i;\n\n        if ($value % 2 == 0) {\n            $smalest_value\
    \ = $value;\n            $smalest_index = $index;\n        }\n    }\n\n    return\
    \ array($smalest_value, $smalest_index);\n}\n\n/*\n * You are given an array of\
    \ non-empty integers, and are asked to sort it ascending.\n * Return an array\
    \ with integers arranged ascending (smallest to largest).\n * Your sorting algorithm\
    \ should run in O(n) complexity.\n * https://leetcode.com/problems/sort-array-ascending-descending/discuss/\n\
    \ * \n * Given an array of integers, return an array of sorted integers in the\
    \ same order.\n * Example 1:\n * Input: numbers = [1, 8, 2, 5, 3, 6]\n * Output:\
    \ [1, 2, 3, 5, 6, 8]\n * Example 2:\n * Input: numbers = [1, 3, 5]\n * Output:\
    \ [1, 3, 5]\n * Example 3:\n * Input: numbers = [1]\n * Output: [1, ]\n * \n */\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0lcla92y.php:72\n\
    Stack trace:\n#0 /tmp/tmp0lcla92y.php(79): test()\n#1 {main}\n  thrown in /tmp/tmp0lcla92y.php\
    \ on line 72\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $even = 0;\n    $small = 1;\n    $min = 0;\n    $max = $arr[0];\n    foreach\
    \ ($arr as $key => $value) {\n        $min = $key;\n        $max = $value;\n \
    \   }\n    while ($small <= $max) {\n        $tmp = $max / $small;\n        if\
    \ ($tmp == floor($tmp)) {\n            $even += $small;\n            $small++;\n\
    \        } else {\n            $even = $small;\n            break;\n        }\n\
    \    }\n    return array($even, $min);\n}\n\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd6v0oser.php:54\n\
    Stack trace:\n#0 /tmp/tmpd6v0oser.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpd6v0oser.php\
    \ on line 54\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    \n    // your solution here\n}\n\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplotd2yxe.php:37\n\
    Stack trace:\n#0 /tmp/tmplotd2yxe.php(47): test()\n#1 {main}\n  thrown in /tmp/tmplotd2yxe.php\
    \ on line 37\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    // write your code here\n    $evens = array_filter($arr, function($n){\n\
    \        return $n % 2 === 0;\n    });\n    $indexed = array_count_values($evens);\n\
    \    $smallest = min($indexed);\n    $result = null;\n    $smallest_val = $indexed[$smallest];\n\
    \    foreach($indexed as $key=>$val) {\n        if($key === $smallest) {\n   \
    \         $result = array($val, $key);\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmp1_mq8bsv.php on line 35\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp1_mq8bsv.php:49\nStack\
    \ trace:\n#0 /tmp/tmp1_mq8bsv.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp1_mq8bsv.php\
    \ on line 49\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $smallest = null;\n    $smallest_index = null;\n    foreach ($arr as $key\
    \ => $node) {\n        if ($smallest === null && $node % 2 === 0) {\n        \
    \    $smallest = $node;\n            $smallest_index = $key;\n        } else {\n\
    \            $smallest_value = $smallest;\n            if ($node % 2 !== 0) {\n\
    \                $smallest_value++;\n            }\n            if ($smallest_value\
    \ < $node) {\n                $smallest = $node;\n                $smallest_index\
    \ = $key;\n            }\n        }\n    }\n    if ($smallest !== null) {\n  \
    \      $arr[$smallest_index] = $smallest;\n    } else {\n        $arr = [];\n\
    \    }\n    return $arr;\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4z7bigkh.php:57\n\
    Stack trace:\n#0 /tmp/tmp4z7bigkh.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp4z7bigkh.php\
    \ on line 57\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    // init solution\n    $sol = [];\n    $smallest = 0;\n    \n    // find smallest\
    \ value\n    foreach ($arr as $i => $val) {\n        if($val < $smallest) {\n\
    \            $smallest = $val;\n        }\n    }\n    \n    // iterate through\
    \ array and add results to solution array if even value found\n    foreach ($arr\
    \ as $i => $val) {\n        if($val % 2 === 0) {\n            $sol[] = array(\"\
    value\" => $val, \"index\" => $i);\n        }\n    }\n    \n    // return solution\
    \ if even value found\n    if ($sol !== []) {\n        return $sol;\n    }\n \
    \   \n    // return empty solution if no even values found\n    return [];\n}\n\
    \n/**\n * Solution to https://app.codility.com/programmers/lessons/6-sorting/find_smallest_largest_element_with_an_array_of_arrays/\n\
    \ *\n * @param $array\n *\n * @return array\n */\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp92b48ww8.php:67\n\
    Stack trace:\n#0 /tmp/tmp92b48ww8.php(77): test()\n#1 {main}\n  thrown in /tmp/tmp92b48ww8.php\
    \ on line 67\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $evenValues = array_filter($arr, function ($v) {\n        return ($v & 1)\
    \ === 0;\n    });\n    if (!empty($evenValues)) {\n        $even = min($evenValues);\n\
    \        return $arr[$even];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp64rxcx88.php:42\n\
    Stack trace:\n#0 /tmp/tmp64rxcx88.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp64rxcx88.php\
    \ on line 42\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $result = array();\n    foreach ($arr as $key => $value) {\n        if (isEven($value))\
    \ {\n            $result[] = $key;\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isEven() in /tmp/tmpkm8oxqla.php:30\n\
    Stack trace:\n#0 /tmp/tmpkm8oxqla.php(38): pluck(Array)\n#1 /tmp/tmpkm8oxqla.php(42):\
    \ candidate(Array)\n#2 /tmp/tmpkm8oxqla.php(52): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpkm8oxqla.php on line 30\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $result = [];\n    $min_val = key($arr);\n    $min_key = 0;\n    for ($i\
    \ = 0; $i < count($arr); $i++) {\n        if ($arr[$i] % 2 == 0) {\n         \
    \   if ($min_val > $arr[$i]) {\n                $min_val = $arr[$i];\n       \
    \         $min_key = $i;\n            }\n        }\n    }\n    $result[0] = $min_val;\n\
    \    $result[1] = $min_key;\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl3f6uw8z.php:48\n\
    Stack trace:\n#0 /tmp/tmpl3f6uw8z.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpl3f6uw8z.php\
    \ on line 48\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $min = $max = -1;\n    $result = [];\n    for($i = 0, $len = count($arr);\
    \ $i < $len; ++$i) {\n        if($arr[$i] <= 0) {\n            continue;\n   \
    \     }\n        $tmp = $arr[$i];\n        if($min > $tmp) {\n            $min\
    \ = $tmp;\n            $tmp = $i;\n        }\n        if($max < $tmp) {\n    \
    \        $max = $tmp;\n        }\n    }\n    if($min === 0) {\n        $result[]\
    \ = $max;\n    } else {\n        $result[] = [ $min, $max ];\n    }\n    return\
    \ $result;\n}\n\"\"\"\n    solution = Solution()\n    actual = solution.pluck_nodes([[0,\
    \ 0], [0, 1], [1, 0]])\n    self.assertEqual(actual, [])\n    actual = solution.pluck_nodes([[1,\
    \ 0], [1, 1], [0, 1]])\n    self.assertEqual(actual, [0])\n\n  def test_pluck_nodes_3(self):\n\
    \    code = \"\"\"\nclass Solution {\npublic:\n  // Pre: array is sorted\n  //\
    \ Return: the node with the smallest even value\n  vector<int> pluck_nodes(vector<int>&\
    \ nums) {\n    vector<int> result;\n    vector<int> min;\n    vector<int> max;\n\
    \    for(int i = 0; i < nums.size(); ++i) {\n      if(nums[i] % 2 == 0) {\n  \
    \      result.push_back(nums[i]);\n        max.push_back(i);\n      } else {\n\
    \        min = nums[i];\n      }\n    }\n    for(int i = 0; i < nums.size(); ++i)\
    \ {\n      if(nums[i] < min) {\n        min.push_back(nums[i]);\n      }\n   \
    \   if(nums[i] > max) {\n        max.push_back(nums[i]);\n      }\n    }\n   \
    \ if(min.size() == 0) {\n      return result;\n    }\n    result.push_back(min[0]);\n\
    \    max.push_back(min.size()-1);\n    for(int i = 0; i < nums.size() - 1; ++i)\
    \ {\n      if(nums[i] == min[0]) {\n        if(nums[i + 1] == min.back()) {\n\
    \          min.pop_back();\n          max.pop_back();\n          continue;\n \
    \       }\n        if(nums[i + 1] == max[max.size() - 1]) {\n          min.pop_back();\n\
    \          continue;\n        }\n        result.push_back(min[0]);\n        max.push_back(min[min.size()\
    \ - 1]);\n      }\n    }\n    return result;\n  }\n};\n\"\"\"\n    solution =\
    \ Solution()\n    actual = solution.pluck_nodes([[0, 0], [0, 1], [1, 0]])\n  \
    \  self.assertEqual(actual, [0])\n    actual = solution.pluck_nodes([[1, 0], [1,\
    \ 1], [0, 1]])\n    self.assertEqual(actual, [0])\n\n  def test_pluck_nodes_4(self):\n\
    \    code = \"\"\"\nclass Solution {\npublic:\n  // Pre: array is sorted\n  //\
    \ Return: the node with the smallest even value\n  vector<int> \nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected double-quoted string "" in /tmp/tmp6_ahyao_.php
    on line 58

    '
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $count = count($arr);\n    if ($count === 0) {\n        return [];\n    }\n\
    \    $min = 0;\n    $minIndex = 0;\n    foreach ($arr as $item) {\n        if\
    \ ($item % 2 == 0) {\n            if ($item < $min) {\n                $min =\
    \ $item;\n                $minIndex = $count;\n            }\n        } else {\n\
    \            if ($min > $item) {\n                $min = $item;\n            \
    \    $minIndex = $count;\n            }\n        }\n    }\n    return [$min, $minIndex];\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1rxmujzv.php:54\n\
    Stack trace:\n#0 /tmp/tmp1rxmujzv.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp1rxmujzv.php\
    \ on line 54\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \  sort($arr);\n  $index = 0;\n  foreach ($arr as $key => $val) {\n    if ($val\
    \ % 2 == 0) {\n      unset($arr[$key]);\n      $index = $key;\n      break;\n\
    \    }\n  }\n  $out = $arr;\n  $out[$index] = array_search(min(array_keys($arr)),\
    \ $arr);\n  return $out;\n}\n'''\n</cell>\n<cell>\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "" in /tmp/tmp2ompbe_3.php
    on line 41

    '
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $map = [];\n    foreach ($arr as $node) {\n        $map[$node] = $node;\n\
    \    }\n    $result = [];\n    $smallest = null;\n    foreach ($map as $key =>\
    \ $value) {\n        if ($smallest === null) {\n            $smallest = $value;\n\
    \            $result[] = $value;\n            continue;\n        }\n        if\
    \ ($smallest === $value) {\n            $result[] = $smallest;\n            continue;\n\
    \        }\n        $smallest_value = $key;\n        $smallest_index = $key;\n\
    \        foreach ($map as $k => $v) {\n            if ($v === $smallest) {\n \
    \               $smallest_value = $k;\n                $smallest_index = $k;\n\
    \            }\n        }\n        $result[] = [$smallest_value, $smallest_index];\n\
    \    }\n    if ($smallest) {\n        $result[] = $smallest;\n    }\n    return\
    \ $result;\n}\n'''\n\nTEST_CASES = [\n    'Empty',\n    'One element',\n    'Small\
    \ tree',\n    'Large tree',\n    'Large tree with many elements',\n]\n\n\ndef\
    \ test_solution():\n    for test in TEST_CASES:\n        actual = Solution().solve(test)\n\
    \        expected = solutions[test]\n        assert actual == expected\n\n\ndef\
    \ test_non_unique_solution():\n    for test in TEST_CASES:\n        actual = Solution().solve(test,\
    \ unique=True)\n        expected = solutions[test]\n        assert actual == expected\n\
    \n\ndef test_big_data_solution():\n    test = TEST_CASES[0]\n    actual = Solution().solve(test)\n\
    \    assert actual == solutions[test]\n\n\ndef test_big_data_solution_unique():\n\
    \    test = TEST_CASES[0]\n    actual = Solution().solve(test, unique=True)\n\
    \    assert actual == solutions[test]\n\n\ndef test_big_data_solution_unique2():\n\
    \    test = TEST_CASES[1]\n    actual = Solution().solve(test)\n    assert actual\
    \ == solutions[test]\n\n\ndef test_big_data_solution_unique3():\n    test = TEST_CASES[3]\n\
    \    actual = Solution().solve(test)\n    assert actual == solutions[test]\n\n\
    \ndef test_big_data_solution_unique4():\n    test = TEST_CASES[4]\n    actual\
    \ = Solution().solve(test, unique=True)\n    assert actual == solutions[test]\n\
    \n\ndef test_big_data_solution_unique5():\n    test = TEST_CASES[5]\n    actual\
    \ = Solution().solve(test, unique=True)\n    assert actual == solutions[test]\n\
    \n\ndef test_big_data_solution_unique6():\n    test = TEST_CASES[7]\n    actual\
    \ = Solution().solve(test, unique=True)\n    assert actual == solutions[test]\n\
    \n\ndef test_big_data_solution_unique7():\nfunction candidate(...$args) {\n  \
    \  return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected single-quoted string "" in /tmp/tmp_krhdukx.php
    on line 62

    '
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $smallest = null;\n    $smallest_val = null;\n    $index = 0;\n\n    foreach\
    \ ($arr as $value) {\n        if ($smallest_val === null || ($value % 2 == 0 &&\
    \ $smallest_val % 2 == 0 && $value < $smallest_val)) {\n            $smallest_val\
    \ = $value;\n            $smallest = $index;\n        }\n        $index++;\n \
    \   }\n\n    return [\n        $smallest_val,\n        $smallest,\n    ];\n}\n\
    \n/**\n * Subsets\n */\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpct493_13.php:56\n\
    Stack trace:\n#0 /tmp/tmpct493_13.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpct493_13.php\
    \ on line 56\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    // code here\n}\n</cell>\n<cell>\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp3xsvnhj6.php
    on line 30

    '
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    sort($arr);\n    $sum = 0;\n    $i = 0;\n    while($i < count($arr)) {\n\
    \        $sum = $sum + $arr[$i];\n        $i++;\n    }\n    $i = 0;\n    while($i\
    \ < $sum / 2) {\n        $i += 2;\n    }\n    $ans = [];\n    while($i < $sum)\
    \ {\n        $ans[] = $i;\n        $i += 2;\n    }\n    return $ans;\n}\n$result\
    \ = pluck($input);\nsort($result);\n$output[] = $result[0];\n$output[] = $result[1];\n\
    echo '<pre><code class=\"language-python\">';\nprint_r($output);\necho '</code></pre>';\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $input in /tmp/tmp0x2yxhsl.php on line 46\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, null given in /tmp/tmp0x2yxhsl.php:28\nStack trace:\n#0 /tmp/tmp0x2yxhsl.php(28):\
    \ sort(NULL)\n#1 /tmp/tmp0x2yxhsl.php(46): pluck(NULL)\n#2 {main}\n  thrown in\
    \ /tmp/tmp0x2yxhsl.php on line 28\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $evens = array();\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 === 0)\n            $evens[] = $key;\n    }\n    if (!empty($evens) && count($evens)\
    \ > 0) {\n        return min($evens);\n    }\n    return [];\n}\n$arr = array(4,5,6,7,8,9);\n\
    $result = pluck($arr);\nvar_dump($result);\n</code>\n<|/ a dscore=1 |>\n<| a |>\n\
    The question was tagged with php so here is a solution using that language:\n\
    <code>\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp6n0sr2u2.php
    on line 41

    '
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    sort($arr);\n    $even = false;\n    $res = array();\n    $len = count($arr);\n\
    \    for($i = 0; $i < $len; $i++){\n        if($arr[$i] & 1){\n            $even\
    \ = true;\n        }\n        $res[$i] = $arr[$i];\n        if($i==0){\n     \
    \       return array($res[$i], $i);\n        }\n    }\n    if($even){\n      \
    \  for($i = $len-1; $i >= 0; $i--){\n            $res[$i] = $arr[$i];\n      \
    \      if($i==0){\n                return array($res[$i], $i);\n            }\n\
    \        }\n    }else{\n        for($i = $len-1; $i >= 0; $i--){\n           \
    \ $res[$i] = $arr[$i];\n            if($i==0){\n                return array($res[$i],\
    \ $i);\n            }\n        }\n    }\n}\nfunction candidate(...$args) {\n \
    \   return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpacrpo8pf.php:62\n\
    Stack trace:\n#0 /tmp/tmpacrpo8pf.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpacrpo8pf.php\
    \ on line 62\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $min_even = null;\n    $min_idx = null;\n    foreach ($arr as $i => $node)\
    \ {\n        if ($node % 2 === 0) {\n            $min_even = $node;\n        \
    \    $min_idx = $i;\n        }\n    }\n    if ($min_even === null) {\n       \
    \ return array();\n    }\n    return array($min_even, $min_idx);\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq1kkq3pf.php:50\n\
    Stack trace:\n#0 /tmp/tmpq1kkq3pf.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpq1kkq3pf.php\
    \ on line 50\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    if (!is_array($arr)) {\n        return [];\n    }\n\n    $minValue = min(array_filter($arr,\
    \ 'is_int'));\n    if (empty($arr)) {\n        return [];\n    }\n    $index =\
    \ 0;\n    $minIndex = array_search($minValue, array_filter($arr, 'is_int'));\n\
    \    foreach ($arr as $key => $value) {\n        if ($value < $minValue) {\n \
    \           $minValue = $value;\n            $minIndex = $index;\n        }\n\
    \        if ($value === $minValue) {\n            $index++;\n        }\n    }\n\
    \n    return array($minValue, $minIndex);\n}\n\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmvc112k3.php:57\n\
    Stack trace:\n#0 /tmp/tmpmvc112k3.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpmvc112k3.php\
    \ on line 57\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $res = array($arr[0]);\n    foreach ($arr as $item) {\n        $res = $item\
    \ < $res[1] ? array($item, $item) : $res;\n    }\n    return $res;\n}\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmp_i5rnzpg.php on line 30\n\n\
    Warning: Undefined array key 1 in /tmp/tmp_i5rnzpg.php on line 30\n\nWarning:\
    \ Undefined array key 1 in /tmp/tmp_i5rnzpg.php on line 30\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp_i5rnzpg.php:39\nStack trace:\n#0 /tmp/tmp_i5rnzpg.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_i5rnzpg.php on line 39\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    \n    // write your code in PHP7.0\n\n}\n</cell>\n<cell>\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpxays_p_z.php
    on line 32

    '
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    if (!empty($arr)) {\n        foreach ($arr as &$node) {\n            $node\
    \ = $node % 2 === 0 ? $node : $node - 1;\n        }\n        usort($arr, 'cmp');\n\
    \        return array_shift($arr);\n    }\n    return [];\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: usort(): Argument #2 ($callback) must\
    \ be a valid callback, function \"cmp\" not found or invalid function name in\
    \ /tmp/tmpwswrmbxa.php:32\nStack trace:\n#0 /tmp/tmpwswrmbxa.php(32): usort(Array,\
    \ 'cmp')\n#1 /tmp/tmpwswrmbxa.php(38): pluck(Array)\n#2 /tmp/tmpwswrmbxa.php(42):\
    \ candidate(Array)\n#3 /tmp/tmpwswrmbxa.php(52): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmpwswrmbxa.php on line 32\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    // Write your code here\n    return array_reduce($arr, function($a, $b) {\n\
    \        if ($b % 2 == 0) {\n            $a[$b] = $b;\n        }\n        return\
    \ $a;\n    }, array());\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk3oyf7sv.php:42\n\
    Stack trace:\n#0 /tmp/tmpk3oyf7sv.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpk3oyf7sv.php\
    \ on line 42\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $evens = [];\n    $curr = min($arr);\n    $len = count($arr);\n    for ($i\
    \ = 0; $i < $len; $i++) {\n        if ($arr[$i] % 2 == 0) {\n            $evens[$i]\
    \ = $arr[$i];\n            if ($curr < $arr[$i]) {\n                $curr = $arr[$i];\n\
    \            }\n        }\n    }\n\n    $smallest = -1;\n    $index = 0;\n   \
    \ for ($i = 0; $i < $len; $i++) {\n        if ($evens[$i] < $curr) {\n       \
    \     $smallest = $evens[$i];\n            $index = $i;\n        }\n    }\n\n\
    \    if ($smallest == -1) {\n        return [];\n    }\n\n    return [$smallest,\
    \ $index];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 2 in /tmp/tmpm3oz_bh8.php on line 43\n\n\
    Warning: Undefined array key 2 in /tmp/tmpm3oz_bh8.php on line 44\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpm3oz_bh8.php:61\nStack trace:\n\
    #0 /tmp/tmpm3oz_bh8.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpm3oz_bh8.php\
    \ on line 61\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $result = array();\n    $evens = array_filter($arr, function($value){\n \
    \       return ($value & 1) == 0;\n    });\n    if(count($evens) > 0) {\n    \
    \    $first_even = reset($evens);\n        $index = 0;\n        foreach ($arr\
    \ as $key => $value) {\n            if($value === $first_even) {\n           \
    \     $result[] = $value;\n                $result[] = $key;\n               \
    \ $index++;\n            }\n        }\n        if(count($result) == 0) {\n   \
    \         return array();\n        } else {\n            return $result;\n   \
    \     }\n    } else {\n        return array();\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg8x4gxby.php:57\n\
    Stack trace:\n#0 /tmp/tmpg8x4gxby.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpg8x4gxby.php\
    \ on line 57\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $min = 0;\n    $result = [];\n    foreach ($arr as $node) {\n        $even_flag\
    \ = false;\n        for ($i = 1; $i <= $node; $i++) {\n            $even_flag\
    \ = ($i % 2 == 0);\n        }\n        if ($even_flag) {\n            $result[]\
    \ = $node;\n            if ($even_flag && ($min == 0 || $node < $min)) {\n   \
    \             $min = $node;\n            }\n        }\n    }\n    return ($min\
    \ == 0) ? [] : [$min, $result];\n}\n\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptuu6eprj.php:50\n\
    Stack trace:\n#0 /tmp/tmptuu6eprj.php(60): test()\n#1 {main}\n  thrown in /tmp/tmptuu6eprj.php\
    \ on line 50\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    if (empty($arr)) {\n        return [];\n    }\n\n    $res = array();\n\n\
    \    $min = array();\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $min[$key] = $value;\n        }\n    }\n\n    if ($min)\
    \ {\n        $min = array_keys($min);\n        $res[] = $min[0];\n    }\n\n  \
    \  return $res;\n}\n\n/**\n * Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n * your task is to pluck one of the nodes and\
    \ return it.\n * The plucked node should be the node with the smallest odd value.\n\
    \ * If multiple nodes with the same smallest odd value are found return the node\
    \ that has smallest index.\n * The plucked node should be returned in an array,\
    \ [ smalest_value, its index ],\n * If there are no odd values or the given array\
    \ is empty, return [].\n * Example 1:\n * >>> pluck(array(4, 2, 3))\n * array(3,\
    \ 2)\n * Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\
    \ * Example 2:\n * >>> pluck(array(1, 2, 3))\n * array(3, 2)\n * Explanation:\
    \ 3 has the smallest odd value, and 3 has the smallest index.\n * Example 3:\n\
    \ * >>> pluck(array())\n * array()\n * Example 4:\n * >>> pluck(array(5, 2, 3))\n\
    \ * array(3, 1)\n * Explanation: 3 has the smallest odd value, and 3 has the smallest\
    \ index.\n * Constraints:\n * * 1 <= nodes.length <= 10000\n * * 0 <= node.value\n\
    \ */\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpizc3ub4t.php:80\n\
    Stack trace:\n#0 /tmp/tmpizc3ub4t.php(90): test()\n#1 {main}\n  thrown in /tmp/tmpizc3ub4t.php\
    \ on line 80\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \  $n = count($arr);\n  $even = array();\n  for ($i = 0; $i < $n; $i++) {\n  \
    \  if ($arr[$i] % 2 === 0) {\n      $even[] = $arr[$i];\n    }\n  }\n\n  $min_even\
    \ = min($even);\n  $min_even_i = 0;\n  for ($i = 0; $i < $n; $i++) {\n    if ($arr[$i]\
    \ == $min_even) {\n      $min_even_i = $i;\n    }\n  }\n\n  return array($min_even,\
    \ $min_even_i);\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmpmiu_ayb0.php:36\nStack trace:\n#0 /tmp/tmpmiu_ayb0.php(36):\
    \ min(Array)\n#1 /tmp/tmpmiu_ayb0.php(48): pluck(Array)\n#2 /tmp/tmpmiu_ayb0.php(54):\
    \ candidate(Array)\n#3 /tmp/tmpmiu_ayb0.php(62): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmpmiu_ayb0.php on line 36\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    // Your code here\n    $result = [];\n    $index = 0;\n    $small = array_reduce($arr,\
    \ 'min');\n    foreach ($arr as $index => $value) {\n        if ($value % 2 ==\
    \ 0) {\n            if ($small == $value) $result[] = [$small, $index];\n    \
    \        $small = $value;\n        }\n    }\n    return $result;\n}\n\"\"\"\n\
    \    \n    smallest_value = array_reduce(arr, \"min\")\n    index = arr.index([smallest_value,\
    \ 0]) #get the index\n    return [smallest_value, index]\n    \n    \nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected double-quoted string "" in /tmp/tmp3jrkobi2.php
    on line 42

    '
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $result = [];\n    $even_values = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if (is_int($value) && $value % 2 == 0) {\n            $even_values[]\
    \ = $value;\n        }\n    }\n\n    if (empty($arr)) {\n        return [];\n\
    \    }\n    foreach ($even_values as $index => $value) {\n        $result[$value]\
    \ = $index;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvqrt1hfu.php:50\n\
    Stack trace:\n#0 /tmp/tmpvqrt1hfu.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpvqrt1hfu.php\
    \ on line 50\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    sort($arr);\n    return array_search($arr[0], $arr);\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7i_xoi3g.php:36\n\
    Stack trace:\n#0 /tmp/tmp7i_xoi3g.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp7i_xoi3g.php\
    \ on line 36\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    // return if no input or array is empty\n    if ($arr === [] || !count($arr))\n\
    \        return [];\n    // find smallest even value\n    // find the node with\
    \ smallest even value\n    // return if none are even\n    $min = array_shift($arr);\n\
    \    foreach ($arr as $item) {\n        if ($item % 2 === 0)\n            $min\
    \ = min($min, $item);\n    }\n    // check if $min is even or not, if not then\
    \ $min is even\n    return $min % 2 === 0 ? [$min, $arr] : [];\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpplmf4csw.php:47\n\
    Stack trace:\n#0 /tmp/tmpplmf4csw.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpplmf4csw.php\
    \ on line 47\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $min_even = array();\n    $even_values = array();\n    $min = -1;\n    foreach\
    \ ($arr as $k => $v) {\n        if (!($v & 1)) {\n            if ($v > $min) {\n\
    \                $min = $v;\n                $min_even = $k;\n            }\n\
    \            if ($v % 2) {\n                $even_values[] = $v;\n           \
    \ }\n        }\n    }\n    if (empty($arr)) {\n        return array();\n    }\n\
    \    if (empty($even_values)) {\n        return array($min, $min_even);\n    }\
    \ else {\n        return array_search($min, $even_values, true);\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp5ft403z.php:56\n\
    Stack trace:\n#0 /tmp/tmpp5ft403z.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpp5ft403z.php\
    \ on line 56\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    if (count($arr) === 0 || empty($arr)) {\n        return [];\n    }\n    $nodes\
    \ = [$arr[0]];\n    $min_val = array_shift($arr);\n    $even = false;\n    for\
    \ ($i = 1, $len = count($arr); $i < $len; $i++) {\n        if ($arr[$i] % 2 ===\
    \ 0) {\n            if ($even === false) {\n                $min_val = $arr[$i];\n\
    \                $even = true;\n            }\n            $nodes[] = $arr[$i];\n\
    \        } else {\n            $even = false;\n        }\n    }\n    if ($even\
    \ === true) {\n        $nodes[] = $min_val;\n    }\n    return $nodes;\n}\n\n\
    /**\n * Given an integer array, find the sum of the array elements.\n *\n * Example\
    \ 1:\n * >>> sumOfArray([1])\n * 1\n * >>> sumOfArray([3, 2, 3])\n * 6\n * Explanation:\
    \ sumOfArray([3, 2, 3]) is equivalent to the sum of 3 through 9.\n * Example 2:\n\
    \ * >>> sumOfArray([-1, 0, 1, 2, -1, -3, 2])\n * -10\n * >>> sumOfArray([0, 0,\
    \ 0, 0, 0])\n * 0\n * Explanation: sumOfArray([0, 0, 0, 0, 0]) is equivalent to\
    \ the sum of 0.\n * Example 3:\n * >>> sumOfArray([5, 4, -3, -2, 0])\n * 6\n *\
    \ >>> sumOfArray([0, -1])\n * 0\n * >>> sumOfArray([-1, -5])\n * -5\n * >>> sumOfArray([10,\
    \ 20, -30])\n * 30\n * Explanation: sumOfArray([10, 20, -30]) is equivalent to\
    \ the sum of 10, 20, -30.\n * Constraints:\n * * 1 <= nodes.length <= 30000\n\
    \ * * -1000 <= nodes[i]\n * * 0 <= sumOfArray(nodes) <= 100000000\n * Runtime:\
    \ 40 ms\n *\n * @param array $arr an array of integer values\n * @return integer\n\
    \ */\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy24mn6mw.php:90\n\
    Stack trace:\n#0 /tmp/tmpy24mn6mw.php(100): test()\n#1 {main}\n  thrown in /tmp/tmpy24mn6mw.php\
    \ on line 90\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $arr = array_flip($arr); // flip the array to make it easier to search\n\
    \    sort($arr);\n    $min = array_keys($arr)[0];\n    $indexes = array_keys($arr);\n\
    \    if ($min % 2 == 0) {\n        return $arr[$min];\n    } else {\n        return\
    \ $indexes[array_search($min, $indexes)];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr12p3dr6.php:44\n\
    Stack trace:\n#0 /tmp/tmpr12p3dr6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpr12p3dr6.php\
    \ on line 44\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $n = count($arr);\n    $even = array();\n    $index = 0;\n    foreach ($arr\
    \ as $v) {\n        if ($v % 2 == 0) {\n            $even[$v] = $v;\n        }\
    \ else {\n            if (count($even) == 0 || $index < count($even)) {\n    \
    \            $index = $v;\n            } else {\n                $index = count($even);\n\
    \            }\n        }\n    }\n    if (count($even) == 0 || $index < count($even))\
    \ {\n        return $even;\n    } else {\n        return $even[$index];\n    }\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 3 in /tmp/tmpzdnyzaiz.php on line 45\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpzdnyzaiz.php:53\nStack\
    \ trace:\n#0 /tmp/tmpzdnyzaiz.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpzdnyzaiz.php\
    \ on line 53\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $evens = array_filter($arr, 'is_int');\n    if (!empty($evens)) {\n     \
    \   return min($evens);\n    }\n    return [];\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy5ndpx75.php:39\n\
    Stack trace:\n#0 /tmp/tmpy5ndpx75.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpy5ndpx75.php\
    \ on line 39\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    // code here\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxrd0w3tq.php:36\n\
    Stack trace:\n#0 /tmp/tmpxrd0w3tq.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpxrd0w3tq.php\
    \ on line 36\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $evens = [];\n    $index = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n\
    \        if ($arr[$i] % 2 === 0) {\n            $evens[] = $arr[$i];\n       \
    \ }\n    }\n    if (count($evens) === 0 && count($arr) === 0) {\n        return\
    \ [];\n    }\n    sort($evens);\n    $minIndex = count($evens);\n    for ($i =\
    \ 0; $i < count($arr); $i++) {\n        if ($arr[$i] === $evens[$i]) {\n     \
    \       $minIndex = $i;\n        }\n    }\n    return [$evens[$minIndex], $minIndex];\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 2 in /tmp/tmpqwoj2tx3.php on line 41\n\n\
    Warning: Undefined array key 2 in /tmp/tmpqwoj2tx3.php on line 45\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpqwoj2tx3.php:52\nStack trace:\n\
    #0 /tmp/tmpqwoj2tx3.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpqwoj2tx3.php\
    \ on line 52\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    sort($arr);\n    $arr = array_filter($arr, function($x) {\n        return\
    \ $x % 2 === 0;\n    }, ARRAY_FILTER_USE_BOTH);\n    if (count($arr) === 0) {\n\
    \        return [];\n    }\n    $largest = array_shift($arr);\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value > $largest) {\n            $largest\
    \ = $value;\n        }\n    }\n    return [$largest, array_search($largest, $arr)];\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr6u0_rpf.php:48\n\
    Stack trace:\n#0 /tmp/tmpr6u0_rpf.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpr6u0_rpf.php\
    \ on line 48\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $result = [];\n    $smallest_even_value = PHP_INT_MAX;\n    $smallest_even_index\
    \ = 0;\n    $i = 0;\n    foreach ($arr as $value) {\n        if ($value % 2 ==\
    \ 0) {\n            $smallest_even_value = $value;\n            $smallest_even_index\
    \ = $i;\n        } else {\n            $i++;\n        }\n    }\n    return [\n\
    \        $smallest_even_value,\n        $smallest_even_index,\n    ];\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ybct4ah.php:51\n\
    Stack trace:\n#0 /tmp/tmp4ybct4ah.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp4ybct4ah.php\
    \ on line 51\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    if (empty($arr) || count($arr) === 0) {\n        return [];\n    }\n    $i\
    \ = 0;\n    $max = $arr[0];\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value === $max) {\n            $i += 1;\n            if ($i % 2 == 0) {\n\
    \                return [$value, $key];\n            }\n        } else {\n   \
    \         $max = $value;\n        }\n    }\n    return [];\n}\n\"\"\"\n\n\ndef\
    \ pluck_min_even_nodes(arr):\n    \"\"\"\n    Return the index of the minimum\
    \ even value in the array given\n    that all nodes have different even values.\n\
    \n    If there are no even values then return None.\n    \"\"\"\n    if len(arr)\
    \ == 0:\n        return None\n    even_values = [i * 2 for i, num in enumerate(arr)\
    \ if num % 2 == 0]\n    even_values.sort()\n    return even_values[0]\n\n\ndef\
    \ pluck_min_even_nodes_index(arr):\n    \"\"\"\n    Return the index of the minimum\
    \ even value in the array given\n    that all nodes have different even values.\n\
    \n    If there are no even values then return None.\n    \"\"\"\n    if len(arr)\
    \ == 0:\n        return None\n    even_values = [i * 2 for i, num in enumerate(arr)\
    \ if num % 2 == 0]\n    even_values.sort()\n    return min(range(len(even_values)),\
    \ key=lambda i: even_values[i])\n\n\npluck_min_even_nodes.__test__ = False\n\n\
    \ndef test_pluck_min_even_nodes():\n    assert pluck_min_even_nodes([]) is None\n\
    \    assert pluck_min_even_nodes([1]) == 1\n    assert pluck_min_even_nodes([1,\
    \ 2, 3]) == 2\n    assert pluck_min_even_nodes([0, 1, 2, 3, 4, 5]) == 0\n    assert\
    \ pluck_min_even_nodes([0, 1, 2, 3, 4, 5, 6, 7]) == 1\n\n\ndef test_pluck_min_even_nodes_index():\n\
    \    assert pluck_min_even_nodes_index([]) is None\n    assert pluck_min_even_nodes_index([1])\
    \ == 0\n    assert pluck_min_even_nodes_index([1, 2, 3]) == 1\n    assert pluck_min_even_nodes_index([1,\
    \ 2, 3, 4, 5]) == 2\n    assert pluck_min_even_nodes_index([1, 2, 3, 5, 6]) ==\
    \ 2\n\n\npluck_min_even_nodes.__test__ = True\n\n\nclass Array:\n    \"\"\"\n\
    \    Create a set of test cases to check our solutions\n    \"\"\"\n\n    @staticmethod\n\
    \    def plus_one_test(case):\n        \"\"\"\n        +1 +  1 = 2\n        \"\
    \"\"\n        assert case[0][2] == case[1][0]\n\n    @staticmethod\n    def plus_one_test_2(case):\n\
    \        \"\"\"\n        +1 +  2 = 3\n        \"\"\"\n        assert case[0][2]\
    \ == case[1][1]\n\n    @staticmethod\n    def plus_one_test_3(case):\n       \
    \ \"\"\"\n        +1 + -1 = -1\n        \"\"\"\n        assert case[0][0] == -1\n\
    \n    @staticmethod\n    def plus_one_test_4(case):\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected double-quoted string "" in /tmp/tmpn26nduf2.php
    on line 49

    '
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $results = [];\n    foreach ($arr as $node) {\n        $index = array_search($node,\
    \ array_filter($arr, 'is_int'));\n        if (is_int($index) && $node % 2 ===\
    \ 0)\n            $results[] = [$node, $index];\n    }\n    return $results;\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaq0f2p7l.php:42\n\
    Stack trace:\n#0 /tmp/tmpaq0f2p7l.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpaq0f2p7l.php\
    \ on line 42\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $result = array();\n    $i = 0;\n    while ($arr[$i]) {\n        $result[]\
    \ = array($arr[$i], $i);\n        $i++;\n    }\n    sort($result);\n    while\
    \ (count($result) !== 0) {\n        if ($result[0][0] % 2 == 0) {\n          \
    \  return $result;\n        }\n        unset($result[0]);\n    }\n    return [];\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 3 in /tmp/tmphxp5kttf.php on line 30\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmphxp5kttf.php:49\nStack\
    \ trace:\n#0 /tmp/tmphxp5kttf.php(59): test()\n#1 {main}\n  thrown in /tmp/tmphxp5kttf.php\
    \ on line 49\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \  for ($i = 0; $i < count($arr); $i++) {\n    if ($arr[$i] % 2 == 0) {\n    \
    \  return array($arr[$i], $i);\n    }\n  }\n  return array();\n}\n\n/**\n * Solution\
    \ 2: Using Binary Indexed Tree\n *\n * Given a binary indexed tree and a value\
    \ x, find and return the node in the tree with value x.\n * If multiple nodes\
    \ satisfy the query, return any of them. If there is no such node, return null.\n\
    \ *\n * Example 1:\n * Input: [1,2,3,4,5,6], x = 6\n * Output: [5]\n * Explanation:\
    \ The value 6 appears twice in the tree, once at node 5 with value 5, and once\
    \ at node 4 with value 4.\n * Example 2:\n * Input: [1,2,3,4,5,6], x = 5\n * Output:\
    \ [4,5]\n * Explanation: Both the values 5 and 4 appear at node 4 and 5 respectively.\
    \ Since both these nodes hold the value 5, return 4.\n * Example 3:\n * Input:\
    \ [1,2,3,4,5,6], x = 10\n * Output: null\n * Explanation: There is no node in\
    \ the tree with value 10.\n *\n *\n */\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_sv08czc.php:62\n\
    Stack trace:\n#0 /tmp/tmp_sv08czc.php(72): test()\n#1 {main}\n  thrown in /tmp/tmp_sv08czc.php\
    \ on line 62\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $evens = array_filter($arr, function ($val) {\n        return $val % 2 ===\
    \ 0;\n    });\n    if (!count($evens)) {\n        return [];\n    }\n    $min_key\
    \ = array_search(min(array_flip($evens)), $evens);\n    return [\n        $evens[$min_key],\n\
    \        $min_key\n    ];\n}\n\n/**\n * Create a function that calculates the\
    \ sum of an array of numbers\n * It takes 3 parameters. The first two are numbers\
    \ and will be summed, and the third is the\n * name of the array the function\
    \ should return.\n * If the function should return a string, use echo, otherwise,\
    \ use return.\n * You do not need to specify the name of the array, the function\
    \ will use 'array' as default\n * You can get away without specifying it, but\
    \ it makes debugging much easier\n * Examples:\n * >>> sum([1, 2, 3], 'total')\n\
    \ * 7\n * >>> sum(array(1, 2, 3), 'total')\n * 7\n * >>> sum([1, 2, 3], array())\n\
    \ * array()\n * >>> sum(array(1, 2, 3), array())\n * array()\n * >>> sum([1, 2,\
    \ 3], true)\n * true\n * >>> sum(array(1, 2, 3), true)\n * true\n * >>> sum(()\
    \ => 2)\n * 2\n * >>> sum(() => 'foo')\n * 'foo'\n */\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpehzuo05q.php:71\n\
    Stack trace:\n#0 /tmp/tmpehzuo05q.php(81): test()\n#1 {main}\n  thrown in /tmp/tmpehzuo05q.php\
    \ on line 71\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $result = [];\n    $index = 0;\n    $sum = 0;\n\n    foreach ($arr as $item)\
    \ {\n        if ($item % 2 === 0) {\n            $sum = $item;\n            $result[]\
    \ = [$sum, $index];\n            $index++;\n        }\n    }\n\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ps_r0iy.php:48\n\
    Stack trace:\n#0 /tmp/tmp7ps_r0iy.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp7ps_r0iy.php\
    \ on line 48\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $min = array_reduce(\n        $arr, \n        function ($min, $value) {\n\
    \            if ($value === 0) {\n                return $min;\n            }\n\
    \            if ($value < $min) {\n                return $value;\n          \
    \  }\n            return $min;\n        }\n    );\n    $min_value = array_reduce(\n\
    \        $arr, \n        function ($value, $value) {\n            if ($value ===\
    \ 0) {\n                return $value;\n            }\n            if ($value\
    \ == $min) {\n                return $value;\n            }\n            if ($value\
    \ < $value) {\n                return $value;\n            }\n            return\
    \ $value;\n        }\n    );\n    $min_key = array_search(\n        $min_value,\
    \ \n        array_flip($arr)\n    );\n    return array($min_value, $min_key);\n\
    }\n</code>\n<|/ a dscore=0 tags=arrays,php,algorithm |>\n<| a tags=arrays,php,algorithm\
    \ |>\nThe answer is to find the index of the minimum value and the position of\
    \ the minimum value like this:\n<code>\n$arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\
    usort($arr, function ($a, $b) { return $a - $b; });\n\n$min = array_shift($arr);\n\
    $pos = array_search($min, $arr);\n$minIndex = array_search($min, $arr);\n$minIndex\
    \ = key($arr);\n$minIndex--;\n$pos = array_search($min, $arr);\n\necho \"The minimum\
    \ value is $min, and it is in the $minIndex position with value $min.\\n\";\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=arrays,php,algorithm |>\n<code>\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp2czz_vr0.php
    on line 61

    '
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    if (count($arr) == 0) {\n        return [];\n    }\n    sort($arr);\n   \
    \ return array_filter($arr, \"is_int\", ARRAY_FILTER_USE_BOTH);\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ArgumentCountError: is_int() expects exactly 1\
    \ argument, 2 given in /tmp/tmpdptxl1es.php:32\nStack trace:\n#0 [internal function]:\
    \ is_int(2, 0)\n#1 /tmp/tmpdptxl1es.php(32): array_filter(Array, 'is_int', 1)\n\
    #2 /tmp/tmpdptxl1es.php(36): pluck(Array)\n#3 /tmp/tmpdptxl1es.php(40): candidate(Array)\n\
    #4 /tmp/tmpdptxl1es.php(50): test()\n#5 {main}\n  thrown in /tmp/tmpdptxl1es.php\
    \ on line 32\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $map = array_flip($arr);\n    uasort($map, function ($a, $b) {\n        if\
    \ ($a % 2 == 0 && $b % 2 == 0) {\n            return $a > $b;\n        }\n   \
    \     return $a < $b;\n    });\n    $res = array_keys($map);\n    if (count($res)\
    \ == 0 || count($arr) == 0) {\n        return [];\n    }\n    return $res;\n}\n\
    \nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: uasort(): Returning bool from comparison function is deprecated,\
    \ return an integer less than, equal to, or greater than zero in /tmp/tmpi3dp34ps.php\
    \ on line 34\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi3dp34ps.php:47\n\
    Stack trace:\n#0 /tmp/tmpi3dp34ps.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpi3dp34ps.php\
    \ on line 47\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    // Your code here\n    $i = 0;\n    $max_val = 0;\n    $min_val = 999999999;\n\
    \    foreach ($arr as $key => $value) {\n        if ($value == 0) {\n        \
    \    $i = $key;\n            $max_val = abs($value);\n        } else {\n     \
    \       $max_val = max($max_val, abs($value));\n            $min_val = min($min_val,\
    \ abs($value));\n            if ($max_val != $min_val) {\n                break;\n\
    \            }\n        }\n    }\n    if ($max_val == 0) {\n        return array();\n\
    \    }\n    $result = array();\n    $result[$max_val] = $min_val;\n    $result[$i]\
    \ = $max_val;\n    $result = array_values($result);\n    if (count($result) <\
    \ 2) {\n        return array();\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqr5yfr3_.php:61\n\
    Stack trace:\n#0 /tmp/tmpqr5yfr3_.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpqr5yfr3_.php\
    \ on line 61\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $index = 0;\n    $min = 0;\n    foreach ($arr as $key => $value) {\n    \
    \    if ($value % 2 == 0 && $value < $min) {\n            $min = $value;\n   \
    \         $index = $key;\n        }\n    }\n    return [ $min, $index ];\n}\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcr3_nzry.php:43\n\
    Stack trace:\n#0 /tmp/tmpcr3_nzry.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpcr3_nzry.php\
    \ on line 43\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    if (!is_array($arr) || count($arr) === 0) {\n        return [];\n    }\n\n\
    \    $result = array();\n    $size = count($arr);\n    $i = 0;\n    foreach ($arr\
    \ as $key => $val) {\n        $val = $arr[$i];\n        if ($val % 2 === 0) {\n\
    \            $result[] = array($val, $key);\n            $i++;\n        }\n  \
    \  }\n    return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks so much for the\
    \ help and explanation. I am grateful. :)\n<|/ c |>\n<| c |>\nI think it should\
    \ be `array(1, 0)` instead of `array(0, 1)`.\n<|/ c |>\n<| a |>\nA simple recursive\
    \ approach would work just fine and be simpler to read:\n<code>\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp8pcf2089.php
    on line 44

    '
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    sort($arr);\n    $result = array();\n    $result[] = $arr[0];\n    foreach\
    \ (array_slice($arr, 1, count($arr)) as $node) {\n        if ($node % 2 == 0)\
    \ {\n            array_push($result, $node);\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4mk39sno.php:44\n\
    Stack trace:\n#0 /tmp/tmp4mk39sno.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp4mk39sno.php\
    \ on line 44\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $min_value = PHP_INT_MAX;\n    $min_i = 0;\n    $len = count($arr);\n   \
    \ foreach ($arr as $val) {\n        if ($val < $min_value) {\n            $min_value\
    \ = $val;\n            $min_i = 0;\n        } elseif ($val == $min_value) {\n\
    \            $min_i++;\n        }\n    }\n    return array(($min_value, $min_i),\
    \ $len);\n}\n\"\"\"\n</cell>\n<cell>\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "," in /tmp/tmpgvvmzj8m.php on line
    39

    '
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $res = array();\n    foreach ($arr as $k => $v) {\n        $res[] = array($v,\
    \ $k);\n    }\n    usort($res, function($a, $b) use ($arr) {\n        $as = array_keys($a);\n\
    \        $bs = array_keys($b);\n        for ($i = 0; $i < min(count($as), count($bs));\
    \ ++$i) {\n            if ($as[$i] == $bs[$i]) {\n                return 0;\n\
    \            }\n            if ($as[$i] < $bs[$i]) {\n                return -1;\n\
    \            }\n            return 1;\n        }\n        return 0;\n    });\n\
    \    return $res[0][0] ? $res[0] : array();\n}\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw7fr_4j5.php:53\n\
    Stack trace:\n#0 /tmp/tmpw7fr_4j5.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpw7fr_4j5.php\
    \ on line 53\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    // write your code here\n    foreach ($arr as $value) {\n        $even_values[]\
    \ = $value;\n        $index++;\n    }\n\n    return $even_values;\n}\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $index in /tmp/tmp57pc5j7m.php on line 31\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp57pc5j7m.php:41\nStack\
    \ trace:\n#0 /tmp/tmp57pc5j7m.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp57pc5j7m.php\
    \ on line 41\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    // +++your code here+++\n    $ret = [];\n    $counter = 1;\n    foreach ($arr\
    \ as $n) {\n        if ($n % 2 === 0) {\n            $ret[] = $n;\n        } else\
    \ {\n            if ($counter < count($arr)) {\n                if ($ret[$counter\
    \ - 1] < $n) {\n                    $ret[] = $n;\n                    $counter++;\n\
    \                }\n            } elseif ($counter === count($arr)) {\n      \
    \          array_push($ret, $n);\n            }\n        }\n    }\n    return\
    \ $ret;\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpspb21rj2.php:53\n\
    Stack trace:\n#0 /tmp/tmpspb21rj2.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpspb21rj2.php\
    \ on line 53\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    if (empty($arr)) {\n        return [];\n    }\n    $smallest = null;\n  \
    \  $index = 0;\n    $smallestIndex = null;\n    foreach ($arr as $node) {\n  \
    \      if ($smallest === null) {\n            $smallest = $node;\n           \
    \ $smallestIndex = $index;\n        } else if ($smallestIndex === null) {\n  \
    \          $smallestIndex = $index;\n            $smallest = $node;\n        }\
    \ else if ($node % 2 === 0 && $smallest % 2 === 0) {\n            $smallest =\
    \ $node;\n            $smallestIndex = $index;\n        }\n        $index++;\n\
    \    }\n    return [\n        $smallest,\n        $smallestIndex\n    ];\n}\n\n\
    /**\n * Your pickup function should return an array of pickups where:\n * $pickups[]\
    \ contains an array of pickup locations, each of which contains\n * the following\
    \ items: $pickups[$i] contains a string $pickups[$i][0] contains\n * the name\
    \ of the location, and $pickups[$i][1] contains the index number of\n * the pickup\
    \ in the given array.\n *\n * The pickup location should contain the following\
    \ items: $pickups[$i][2] contains\n * the name of the location, and $pickups[$i][3]\
    \ contains the index number of\n * the pickup in the given array.\n *\n * If the\
    \ given array is empty, return an empty array.\n *\n * Example 1:\n * >>> pickup([[\"\
    A1\", 0],[\"A2\", 1],[\"A3\", 2],[\"A4\",3]])\n * [\"A1\",\"A2\",\"A3\",\"A4\"\
    ]\n * Example 2:\n * >>> pickup([[\"A1\", 0],[\"A2\", 1],[\"A3\",0]])\n * []\n\
    \ * Example 3:\n * >>> pickup([])\n * []\n * Example 4:\n * >>> pickup([])\n *\
    \ []\n * Example 5:\n * >>> pickup(array([\"A1\", 0],[\"A2\", 1],[\"A3\",0],[\"\
    A4\",2],[\"A5\",3],[\"A6\",4]))\n * [\"A1\",\"A2\",\"A3\",\"A4\"]\n * Example\
    \ 6:\n * >>> pickup(array([\"A1\", 0],[\"A2\", 1],[\"A3\",0],[\"A4\",0],[\"A5\"\
    ,0],[\"A6\",0],[\"A7\",1],[\"A8\",2]))\n * [\"A1\",\"A2\",\"A3\",\"A4\",\"A5\"\
    ,\"A6\",\"A7\",\"A8\"]\n * Explanation: For example 1, since A2 is not even, A3\
    \ has smallest even value\n * that is larger than A4. So, the pickup location\
    \ array for A4 should contain the\n * location name for A3 and A4; and the same\
    \ for \nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 53 in /tmp/tmpx2o1czk8.php on
    line 53

    '
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    if (count($arr) === 0 || array_sum($arr) <= 0) {\n        return [];\n  \
    \  }\n\n    sort($arr);\n\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value % 2 === 0) {\n            return [(int) $value, $key];\n        }\n\
    \    }\n\n    return [];\n}\n'''\n    assert result == expected\n\n\ndef test_sort_by_key():\n\
    \    result = templates.sort_by_key(\n        arr=[\n            {\"name\": \"\
    B\", \"value\": 2},\n            {\"name\": \"A\", \"value\": 0},\n          \
    \  {\"name\": \"A\", \"value\": 0},\n            {\"name\": \"C\", \"value\":\
    \ 1},\n        ],\n        key=lambda x: (x[\"name\"],),\n        ascending=True,\n\
    \    )\n    expected = [\n        {\"value\": 0, \"name\": \"A\"},\n        {\"\
    value\": 0, \"name\": \"A\"},\n        {\"value\": 2, \"name\": \"B\"},\n    \
    \    {\"value\": 1, \"name\": \"C\"},\n    ]\n    assert result == expected\n\n\
    \ndef test_sort_by_key_reversed():\n    result = templates.sort_by_key(\n    \
    \    arr=[\n            {\"name\": \"B\", \"value\": 2},\n            {\"name\"\
    : \"A\", \"value\": 0},\n            {\"name\": \"A\", \"value\": 0},\n      \
    \      {\"name\": \"C\", \"value\": 1},\n        ],\n        key=lambda x: (x[\"\
    name\"],),\n        ascending=False,\n    )\n    expected = [\n        {\"value\"\
    : 2, \"name\": \"B\"},\n        {\"value\": 0, \"name\": \"A\"},\n        {\"\
    value\": 0, \"name\": \"A\"},\n        {\"value\": 1, \"name\": \"C\"},\n    ]\n\
    \    assert result == expected\n\n\ndef test_sort_by_key_reversed_no_key():\n\
    \    result = templates.sort_by_key(\n        arr=[\n            {\"name\": \"\
    B\", \"value\": 2},\n            {\"name\": \"A\", \"value\": 0},\n          \
    \  {\"name\": \"A\", \"value\": 0},\n            {\"name\": \"C\", \"value\":\
    \ 1},\n        ],\n        key=lambda x: (x[\"name\"],),\n        ascending=False,\n\
    \    )\n    expected = [\n        {\"value\": 2, \"name\": \"B\"},\n        {\"\
    value\": 0, \"name\": \"A\"},\n        {\"value\": 0, \"name\": \"A\"},\n    \
    \    {\"value\": 1, \"name\": \"C\"},\n    ]\n    assert result == expected\n\n\
    \ndef test_sort_by_key_reversed_no_key_no_ascending():\n    result = templates.sort_by_key(\n\
    \        arr=[\n            {\"name\": \"B\", \"value\": 2},\n            {\"\
    name\": \"A\", \"value\": 0},\n            {\"name\": \"A\", \"value\": 0},\n\
    \            {\"name\": \"C\", \"value\": 1},\n        ],\n        key=lambda\
    \ x: (x[\"name\"],),\n        ascending=False,\n    )\n    expected = [\n    \
    \    {\"value\": 2, \"name\": \"B\"},\n        {\"value\": 0, \"name\": \"A\"\
    },\n        {\"value\": 0, \"name\": \"A\"},\n        {\"value\": 1, \"name\"\
    : \"C\"},\n    ]\n    assert result == expected\n\n\ndef test_sort_by_key_reversed_no_key_no_ascending_no_value():\n\
    \    result = templates.sort_by_key(\n        arr=[\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "" in /tmp/tmp1l9sfibc.php
    on line 42

    '
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \  $even = [];\n  $smalest_value = [];\n  $smalest_index = [];\n  foreach ($arr\
    \ as $key => $value) {\n    if ($value % 2 == 0) {\n      $even[] = $value;\n\
    \      $smalest_value[$key] = $value;\n      $smalest_index[$key] = $key;\n  \
    \  }\n  }\n  if (count($smalest_index) == 0) {\n    return [];\n  }\n  ksort($smalest_value);\n\
    \  return [$smalest_value, $smalest_index];\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbh5i_f3j.php:50\n\
    Stack trace:\n#0 /tmp/tmpbh5i_f3j.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpbh5i_f3j.php\
    \ on line 50\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $arr_size = count($arr);\n    $smallest = null;\n    $smallest_index = null;\n\
    \    $smallest_value = 0;\n    for ($i = 0; $i < $arr_size; $i++) {\n        if\
    \ ($arr[$i] % 2 == 0) {\n            if ($smallest == null) {\n              \
    \  $smallest = $arr[$i];\n                $smallest_value = $i;\n            \
    \    $smallest_index = $i;\n            } else {\n                if ($arr[$i]\
    \ < $smallest) {\n                    $smallest = $arr[$i];\n                \
    \    $smallest_value = $i;\n                    $smallest_index = $i;\n      \
    \          }\n            }\n        }\n    }\n    return [$smallest, $smallest_value];\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprwqaz94i.php:56\n\
    Stack trace:\n#0 /tmp/tmprwqaz94i.php(64): test()\n#1 {main}\n  thrown in /tmp/tmprwqaz94i.php\
    \ on line 56\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    // code goes here\n    if (empty($arr)) {\n        return [];\n    }\n  \
    \  sort($arr, SORT_NUMERIC);\n    $smallest = null;\n    $smallest_value = null;\n\
    \    $index = 0;\n    $result = array();\n    foreach ($arr as $val) {\n     \
    \   if ($val % 2 == 0) {\n            if ($smallest === null) {\n            \
    \    $smallest = $val;\n                $smallest_value = $val;\n            \
    \    $index = 0;\n            }\n        }\n        else {\n            if ($smallest\
    \ == $val) {\n                $result[] = $smallest_value;\n                $smallest\
    \ = null;\n                $smallest_value = null;\n            }\n          \
    \  $index++;\n        }\n    }\n    if ($smallest === null) {\n        $result[]\
    \ = null;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaxyhjkh5.php:65\n\
    Stack trace:\n#0 /tmp/tmpaxyhjkh5.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpaxyhjkh5.php\
    \ on line 65\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $largest = 0;\n    $smallest = 0;\n    $largestIdx = 0;\n    $smallestIdx\
    \ = 0;\n\n    foreach ($arr as $nodeVal) {\n        if ($nodeVal > $largest) {\n\
    \            $largest = $nodeVal;\n            $largestIdx = $smallestIdx;\n \
    \       }\n        if ($nodeVal < $smallest) {\n            $smallest = $nodeVal;\n\
    \            $smallestIdx = $largestIdx;\n        }\n        if ($nodeVal == $largest)\
    \ {\n            $largestIdx ++;\n        }\n        if ($nodeVal == $smallest)\
    \ {\n            $smallestIdx ++;\n        }\n    }\n\n    $arr[$smallestIdx]\
    \ = $smallest;\n    $arr[$largestIdx] = $largest;\n\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6y_cnglk.php:61\n\
    Stack trace:\n#0 /tmp/tmp6y_cnglk.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp6y_cnglk.php\
    \ on line 61\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $min = array_search(min($arr), $arr);\n    if ($min === false) {\n      \
    \  return [];\n    }\n    $val = array_search($min, $arr);\n    return [$val,\
    \ $min];\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdnqh1g31.php:40\n\
    Stack trace:\n#0 /tmp/tmpdnqh1g31.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpdnqh1g31.php\
    \ on line 40\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \  $ret = [];\n  for ($i = 0, $len = count($arr); $i < $len; $i++) {\n    $ret[$i]\
    \ = $arr[$i] % 2 == 0 ? ($arr[$i] < 0) ? ($arr[$i] + 10000) : $arr[$i] : $arr[$i];\n\
    \  }\n  $ret = array_filter($ret, function ($value) {\n    return ($value % 2\
    \ == 0);\n  });\n  asort($ret);\n  $ret = array_keys($ret);\n  $ret = array_values($ret);\n\
    \  return $ret;\n}\n\"\"\"\n        ),\n        CodePart.unindent(\n         \
    \   \"\"\"\n/**\n * Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n * your task is to pluck one of the nodes and return it.\n *\
    \ The plucked node should be the node with the smallest even value.\n * If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n * The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n * If there are no even values or the given array is empty, return\
    \ [].\n * Example 1:\n * >>> pluck(array(4, 2, 3))\n * array(2, 1)\n * Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n * Example 2:\n\
    \ * >>> pluck(array(1, 2, 3))\n * array(2, 1)\n * Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n * Example 3:\n * >>> pluck(array())\n\
    \ * array()\n * Example 4:\n * >>> pluck(array(5, 0, 3, 0, 4, 2))\n * array(0,\
    \ 1)\n * Explanation: 0 is the smallest value, but  there are two zeros,\n * so\
    \ we will choose the first zero, which has the smallest index.\n * Constraints:\n\
    \ * * 1 <= nodes.length <= 10000\n * * 0 <= node.value\n */\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected double-quoted string "" in /tmp/tmpl6vgvd0u.php
    on line 43

    '
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    // Write your code here\n}\n</cell>\n<cell>\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpjx6cg_3y.php
    on line 30

    '
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $evens = array_filter(\n        $arr,\n        function ($value) {\n    \
    \        return $value % 2 === 0;\n        }\n    );\n\n    if (count($evens)\
    \ === 0)\n        return [];\n    else\n        return $evens[0];\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n$arr=array();\nforeach($arr as $k=>$v){\n\
    \    $arr[$k]=$arr[$k+1];\n}\n$arr=array_values($arr);\nprint_r($arr);\n</code>\n\
    <|/ a tags=php |>\n<| c |>\nHi, it would be helpful if you add some explanation\
    \ to your answer.\n<|/ c |>\n<| c |>\nwhat did you find?\n<|/ c |>\n<| c |>\n\
    The first two lines is quite self explanatory\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpdph3d9ft.php
    on line 40

    '
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $n = count($arr);\n    $nodes = new \\SplDoublyLinkedList();\n    $index\
    \ = 0;\n    foreach ($arr as $v) {\n        $node = new \\SplDoublyLinkedListNode($v);\n\
    \        if ($index == 0) {\n            $nodes[] = $node;\n        }\n      \
    \  if ($node->value % 2 == 0) {\n            $nodes[$node->value] = $node;\n \
    \       }\n        $index++;\n    }\n    $n = count($nodes);\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        $nn = $nodes[$i]->value;\n        $nn = $nodes[$i]->value;\n\
    \        if ($nn < $n) {\n            for ($j = $i + 1; $j < $n; $j++) {\n   \
    \             $nnn = $nodes[$j]->value;\n                if ($nn == $nnn) {\n\
    \                    break;\n                }\n                if ($nn == $nn\
    \ && $j < $n - 1) {\n                    $nodes[$j]->value = $nnn;\n         \
    \           $nodes[$j]->key = $nn;\n                    if ($nnn == $nn && $j\
    \ < $n - 1) {\n                        $nodes[$j]->index = $j;\n             \
    \       }\n                    break;\n                }\n            }\n    \
    \    }\n    }\n    $arr = array();\n    $nn = $nodes[0]->value;\n    $arr[] =\
    \ $nn;\n    for ($i = 0; $i < $n; $i++) {\n        $nn = $nodes[$i]->value;\n\
    \        $arr[] = $nn;\n    }\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Class \"SplDoublyLinkedListNode\" not found\
    \ in /tmp/tmp_28dzc31.php:32\nStack trace:\n#0 /tmp/tmp_28dzc31.php(73): pluck(Array)\n\
    #1 /tmp/tmp_28dzc31.php(77): candidate(Array)\n#2 /tmp/tmp_28dzc31.php(87): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_28dzc31.php on line 32\n"
  timestamp: 1660028559
- exit_code: -1
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $ret = [];\n    for($i = 0; $i < count($arr); $i++) {\n        $value = $arr[$i];\n\
    \        for($j = $i + 1; $j < count($arr); $j++) {\n            if($arr[$j] %\
    \ $value !== 0) {\n                $j--;\n            } else {\n             \
    \   $ret[$i] = $j;\n                break;\n            }\n        }\n       \
    \ if(count($ret) === $i) {\n            break;\n        }\n    }\n    return empty($ret)\
    \ ? [] : array_combine($ret, $arr);\n}\n\nfunction candidate(...$args) {\n   \
    \ return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028564
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    sort($arr);\n    array_walk($arr, function (&$val) use (&$arr) {\n      \
    \  $val += $arr[0] % 2 === 0;\n        $arr = array_slice($arr, 1);\n    });\n\
    \    return array_filter($arr, function ($val) {\n        return $val === $arr[0]\
    \ && $val % 2 === 0;\n    });\n}\n\nclass SearchTree {\n    public $nodes;\n\n\
    \    public function __construct(array $nodes) {\n        $this->nodes = $nodes;\n\
    \    }\n\n    public function getValue($node) {\n        return $this->nodes[$node];\n\
    \    }\n\n    public function hasValue($node) {\n        return array_key_exists($node,\
    \ $this->nodes);\n    }\n\n    public function hasSameValue($node1, $node2) {\n\
    \        return $this->getValue($node1) === $this->getValue($node2);\n    }\n\n\
    \    public function hasDifferentValues($node1, $node2) {\n        return $this->getValue($node1)\
    \ !== $this->getValue($node2);\n    }\n\n    public function search($value) {\n\
    \        $node = null;\n        $lowestIndex = null;\n        foreach ($this->nodes\
    \ as $i => $v) {\n            if ($v === $value) {\n                $node = $i;\n\
    \                $lowestIndex = $i;\n            }\n            if ($v < $value)\
    \ {\n                break;\n            }\n        }\n        if ($lowestIndex\
    \ === null) {\n            return [];\n        }\n        $lowestValue =& $this->nodes[$lowestIndex];\n\
    \        $nodes = [];\n        $nodes[] = $lowestValue;\n        foreach ($this->nodes\
    \ as $i => $v) {\n            if ($v === $lowestValue) {\n                $nodes[]\
    \ = $v;\n            } elseif ($v < $lowestValue) {\n                if ($lowestIndex\
    \ === $i) {\n                    $nodes[] = $v;\n                } else {\n  \
    \                  $nodes[] = $this->nodes[$i];\n                }\n         \
    \   }\n        }\n        return $nodes;\n    }\n\n    public function search2(array\
    \ $values) {\n        $node = null;\n        $lowestIndex = null;\n        foreach\
    \ ($values as $i => $v) {\n            if ($v === $this->getValue($node)) {\n\
    \                $node = $i;\n                $lowestIndex = $i;\n           \
    \ }\n            if ($v < $this->getValue($node)) {\n                break;\n\
    \            }\n        }\n        if ($lowestIndex === null) {\n            return\
    \ [];\n        }\n        $lowestValue =& $this->nodes[$lowestIndex];\n      \
    \  $nodes = [];\n        $nodes[] = $lowestValue;\n        foreach ($values as\
    \ $i => $v) {\n            if ($v === $lowestValue) {\n                $nodes[]\
    \ = $v;\n            } \nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 111 in /tmp/tmp_zbz0wd1.php on line 130

    '
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $len = count($arr);\n    $min = $arr[0];\n    $i = 0;\n    for ($i = 0; $i\
    \ < $len; $i++) {\n        if ($arr[$i] <= $min) {\n            $min = $arr[$i];\n\
    \        }\n    }\n\n    if ($min != 0) {\n        $i++;\n    }\n\n    return\
    \ array_slice($arr, $i);\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgemuu1ms.php:49\n\
    Stack trace:\n#0 /tmp/tmpgemuu1ms.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpgemuu1ms.php\
    \ on line 49\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    sort($arr);\n    $result = [];\n    foreach($arr as $key => $value) {\n \
    \       if ($value % 2 == 0) {\n            $result[] = [$value, $key];\n    \
    \    }\n    }\n    return empty($result) ? [] : $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd10vxpu5.php:43\n\
    Stack trace:\n#0 /tmp/tmpd10vxpu5.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpd10vxpu5.php\
    \ on line 43\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    sort($arr, SORT_NUMERIC);\n    $even = array_filter(\n        $arr,\n   \
    \     function ($a) {\n            return $a % 2 === 0;\n        }\n    );\n \
    \   if (count($even) === 0) {\n        return [];\n    }\n    return $even[0];\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6n7u_o7h.php:45\n\
    Stack trace:\n#0 /tmp/tmp6n7u_o7h.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp6n7u_o7h.php\
    \ on line 45\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $result = [];\n    $even = array_filter($arr, function ($v) {\n        return\
    \ $v & 1;\n    });\n    if (!empty($even)) {\n        $result = $even[0];\n  \
    \      array_shift($arr);\n    }\n    foreach ($arr as $k => $v) {\n        if\
    \ ($v & 1) {\n            $result = [$v, $k];\n            break;\n        }\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpnxi0jozc.php on line 33\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpnxi0jozc.php:50\nStack\
    \ trace:\n#0 /tmp/tmpnxi0jozc.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpnxi0jozc.php\
    \ on line 50\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    if (empty($arr)) {\n        return [];\n    }\n    $evenNodes = array_filter($arr,\
    \ function ($item) {\n        return $item % 2 === 0;\n    });\n    if (empty($evenNodes))\
    \ {\n        return [];\n    }\n    $maxValue = max($evenNodes);\n    $evenNodesWithSmallestIndexes\
    \ = array_filter($evenNodes, function ($item) use ($maxValue) {\n        return\
    \ $item === $maxValue;\n    });\n    if (empty($evenNodesWithSmallestIndexes))\
    \ {\n        return [];\n    }\n    $smallestIndexValue = min($evenNodesWithSmallestIndexes);\n\
    \    $smallestIndex = array_search($smallestIndexValue, $evenNodesWithSmallestIndexes);\n\
    \    return [$maxValue, $smallestIndex];\n}\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy4ibnm0j.php:53\n\
    Stack trace:\n#0 /tmp/tmpy4ibnm0j.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpy4ibnm0j.php\
    \ on line 53\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    if (empty($arr)) {\n        return array();\n    }\n    sort($arr);\n   \
    \ $odd_value = 0;\n    $smallst_idx = 0;\n    foreach ($arr as $v) {\n       \
    \ if ($v & 1) {\n            $odd_value += $v;\n            if ($odd_value < $smallst_idx)\
    \ {\n                $smallst_idx = $odd_value;\n            }\n        }\n  \
    \  }\n    $smallst_idx += 1;\n    return array($arr[$smallst_idx], $smallst_idx);\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfacmb4r_.php:51\n\
    Stack trace:\n#0 /tmp/tmpfacmb4r_.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpfacmb4r_.php\
    \ on line 51\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len; ++$i)\
    \ {\n        $node = min($arr);\n        if ($arr[$i] & $node) {\n           \
    \ $result[] = [$arr[$i], $i];\n        }\n    }\n    if (empty($result) || $len\
    \ === 0) {\n        return [];\n    }\n    sort($result);\n    return $result[0];\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\nI believe it can be done with\
    \ just a single pass (O(n)) and no additional space needed.\nI created an array\
    \ with every value and the index of the smallest even value it found. This allows\
    \ us to quickly grab the index of the smallest even value in O(1) time:\n<code>\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpn3e9xgrt.php
    on line 42

    '
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    sort($arr);\n    $even_index = null;\n    $first_odd_index = count($arr)\
    \ - 1;\n    foreach ($arr as $index => $value) {\n        if ($value % 2 == 0)\
    \ {\n            if ($first_odd_index == $index) {\n                $even_index\
    \ = $value;\n            } else {\n                $first_odd_index = $index;\n\
    \            }\n        }\n    }\n    return $arr[$even_index];\n}\n</code>\n\
    <|/ a tags=arrays,php dscore=0 |>\n<| c |>\nHe said the array is sorted, so you\
    \ don't need to sort the array again.\n<|/ c |>\n<| c |>\nThis has worse performance\
    \ than what I have come up with. The `foreach` is unnecessary.\n<|/ c |>\n<| c\
    \ |>\nOh yeah. Thanks for pointing that out. Corrected.\n<|/ c |>\n<| a dscore=0\
    \ |>\nThe most efficient approach would be to traverse the array once to find\
    \ the smallest even number, and to traverse again to find the smallest index.\
    \ This is because you know the size of your array is very small (at most 10 elements).\n\
    This approach has the advantage that it doesn't require sorting, and that you\
    \ can easily parallelize it in a multithreaded environment. Something like:\n\
    <code>\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpj7jqirdt.php
    on line 42

    '
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $result = [];\n    foreach ($arr as $key => $value) {\n        if ($key %\
    \ 2 === 0 && !isset($result[$value])) {\n            $result[$value] = $key;\n\
    \        }\n    }\n    return array_values($result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkw6rnyms.php:42\n\
    Stack trace:\n#0 /tmp/tmpkw6rnyms.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpkw6rnyms.php\
    \ on line 42\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    sort($arr);\n    $result = array();\n    for ($i = 0, $k = $arr[0]; $i <=\
    \ count($arr); $i++)\n        if ($arr[$i] % 2 == 0)\n            $result[] =\
    \ $k;\n        else\n            $k = $arr[$i];\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 3 in /tmp/tmp7k44iyty.php on line 31\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp7k44iyty.php:42\nStack\
    \ trace:\n#0 /tmp/tmp7k44iyty.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp7k44iyty.php\
    \ on line 42\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $sorted_arr = sort($arr);\n    $picked_element = 0;\n    $picked_element_index\
    \ = 0;\n    foreach($sorted_arr as $key => $value) {\n        if($value % 2 ===\
    \ 0) {\n            if($picked_element === 0) {\n                $picked_element\
    \ = $value;\n                $picked_element_index = $key;\n            } else\
    \ {\n                if($picked_element !== $value || ($picked_element === 0 &&\
    \ $picked_element_index < $key)) {\n                    $picked_element = $value;\n\
    \                    $picked_element_index = $key;\n                }\n      \
    \      }\n        }\n    }\n    return $picked_element;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: foreach() argument must be of type array|object, bool given\
    \ in /tmp/tmpc6c4gjon.php on line 31\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpc6c4gjon.php:52\nStack trace:\n#0 /tmp/tmpc6c4gjon.php(62):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpc6c4gjon.php on line 52\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    foreach($arr as $k => $v) {\n        if ($v % 2 == 0) {\n            return\
    \ $v; // return v if even\n        }\n    }\n    return []; // if all nodes are\
    \ odd\n}\n</code></pre>\n<p>Time Complexity: O(n)</p>\n<p><strong>Example 1:</strong></p>\n\
    <pre><strong>Input:</strong> nums = [7, 11, 9, 6, 5]\n<strong>Output:</strong>\
    \ 2\n<strong>Explanation:</strong> The array has three nodes, the node with smallest\
    \ even value is 9, and the node with smallest index is 1. Therefore, we pick the\
    \ node with smallest even value.\n</pre>\n<p><strong>Example 2:</strong></p>\n\
    <pre><strong>Input:</strong> nums = [1, 3, 2, 4, 6]\n<strong>Output:</strong>\
    \ [3, 4]\n<strong>Explanation:</strong> The array has three nodes, the node with\
    \ smallest even value is 3, and the node with smallest index is 2. Therefore,\
    \ we pick the node with smallest even value.\n</pre>\n<p><strong>Example 3:</strong></p>\n\
    <pre><strong>Input:</strong> nums = []\n<strong>Output:</strong> []\n<strong>Explanation:</strong>\
    \ The array is empty. Therefore, we return an empty array.\n</pre>\n<p>Constraints:</p>\n\
    <ul>\n<li><code>0 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n<li><code>-100\
    \ &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n</div></div><br><br><hr><br>**********************<div\
    \ id=\"title\">872. Path with Even Sum</div>\n**********************<div class=\"\
    content__u3I1 question-content__JfgR\"><div><p>You are given an integer array\
    \ <code>nums</code> of size <code>n</code> where the <code>i</code>th element\
    \ in the array contains <code>nums[i]</code> distinct numbers from <code>1</code>\
    \ to <code>n</code>, where each number <code>num</code> appears <strong>exactly\
    \ once</strong>.</p>\n<p><em>The <strong>path</strong> from the <strong>starting\
    \ node</strong> to any <strong>target node</strong> will have <strong>exactly\
    \ one node with even sum of its distinct numbers</strong>.</em></p>\n<p>Return\
    \ <em>the <strong>path</strong> from the <strong>starting node</strong> to any\
    \ <strong>target node</strong> with an <strong>even sum of its distinct numbers</strong></em>.</p>\n\
    <p>\_</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums\
    \ = [3,5,1,2]\n<strong>Output:</strong> [[1,3],[1,2,5]]\n</pre>\n<p><strong>Example\
    \ 2:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,4]\n<strong>Output:</strong>\
    \ [[1,2],[1,2,4]]\n</pre>\n<p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong>\
    \ nums = [1,2,3]\n<strong>Output:</strong> []\n</pre>\n<p>\_</p>\n<p><strong>Constraints:</strong></p>\n\
    <ul>\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp0nka70rv.php
    on line 35

    '
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    // code here\n    return $result; // Your code goes here\n}\n\n$result =\
    \ $test();\nprint($result);\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $test in /tmp/tmp7jgk6wbz.php on line 32\n\
    \nFatal error: Uncaught Error: Value of type null is not callable in /tmp/tmp7jgk6wbz.php:32\n\
    Stack trace:\n#0 {main}\n  thrown in /tmp/tmp7jgk6wbz.php on line 32\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    \n    // Your code goes here\n    \n}\n\n\"\"\"\n\n\ndef pick_node(nodes):\n\
    \    # Write your code here\n    pass\n\n\nfunction candidate(...$args) {\n  \
    \  return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected double-quote mark in /tmp/tmpbk52l07q.php
    on line 33

    '
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $result = [];\n    $indexes = [];\n\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $result[] = $value;\n       \
    \     $indexes[] = $key;\n        }\n    }\n\n    return $result ? $result : [\n\
    \        max($indexes),\n        max($indexes)\n    ];\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphduuogiw.php:49\n\
    Stack trace:\n#0 /tmp/tmphduuogiw.php(59): test()\n#1 {main}\n  thrown in /tmp/tmphduuogiw.php\
    \ on line 49\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \  $return = [];\n  if (count($arr) == 0) {\n    return $return;\n  }\n  $even_values\
    \ = array_filter(\n    $arr,\n    function ($value) {\n      return ($value &\
    \ 1) == 0;\n    }\n  );\n  sort($even_values);\n  if (count($even_values) == 0)\
    \ {\n    return $return;\n  }\n  $smallest_value = array_shift($even_values);\n\
    \  $return[] = [$smallest_value, array_search(\n    $smallest_value,\n    $arr\n\
    \  )];\n  return $return;\n}\n\"\"\"\n</cell>\n<text>\nNow we can see that this\
    \ problem has a unique solution (the one you were looking for!)\n\nExercise: Solve\
    \ the problem in the cell above\n\n\n</text>\n<cell>\nproblem_1_solution_1 = \"\
    \"\"\n<?php\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected double-quoted string "" in /tmp/tmpznvugk8t.php
    on line 59

    '
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    if (count($arr) == 0) {\n        return [];\n    }\n    if (count($arr) ==\
    \ 1) {\n        return array($arr[0][0], 0);\n    }\n    $min = array_flip(array_filter($arr,\
    \ function ($item) use ($arr) {\n        return $item % 2 == 0 && $item >= 0;\n\
    \    }));\n    if (!isset($min[$min[0]])) {\n        return [];\n    }\n    $min2\
    \ = $min[$min[0]];\n    $ret = array_intersect_key($arr, array_flip($arr));\n\
    \    $pos = array_search($min2, $ret);\n    $ret[$pos] = $min2;\n    return $ret;\n\
    }\n$arr = array(4, 2, 3);\n$ans = pluck($arr);\nprint \"The smallest even value\
    \ is \" . $ans[0] . \" and the smallest index is \" . $ans[1];\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpcsbmzqox.php on line 37\n\n\
    Warning: Undefined array key 0 in /tmp/tmpcsbmzqox.php on line 48\n\nWarning:\
    \ Undefined array key 1 in /tmp/tmpcsbmzqox.php on line 48\nThe smallest even\
    \ value is  and the smallest index is \nWarning: Undefined array key 0 in /tmp/tmpcsbmzqox.php\
    \ on line 37\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcsbmzqox.php:54\n\
    Stack trace:\n#0 /tmp/tmpcsbmzqox.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpcsbmzqox.php\
    \ on line 54\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    sort($arr);\n    $evens = array_filter($arr, function($n) {\n        return\
    \ !($n & 1);\n    });\n    if (count($evens) === 0) {\n        return [];\n  \
    \  }\n    $m = $evens[0];\n    $ret = [];\n    foreach ($arr as $n) {\n      \
    \  if ($n !== $m && $n & 1) {\n            $ret[] = $n;\n        }\n        if\
    \ ($n === $m) {\n            $ret[] = $m;\n            $m = $m >> 1;\n       \
    \ }\n    }\n    return $ret;\n}\n\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3xxz423i.php:54\n\
    Stack trace:\n#0 /tmp/tmp3xxz423i.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp3xxz423i.php\
    \ on line 54\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    if ($arr == []) {\n        return [];\n    }\n    $result = [];\n    $smallest_value\
    \ = [];\n    $index = 0;\n    foreach ($arr as $node) {\n        if ($node % 2\
    \ == 0) {\n            if ($smallest_value == []) {\n                $smallest_value\
    \ = [$node];\n                $index = $node;\n            } else {\n        \
    \        if ($smallest_value[0] <= $node) {\n                    $smallest_value[0]\
    \ = $node;\n                    $index = $node;\n                } else {\n  \
    \                  $result[] = $smallest_value;\n                    $smallest_value\
    \ = [$node];\n                    $index = $node;\n                }\n       \
    \     }\n        } else {\n            if ($smallest_value[0] <= $node) {\n  \
    \              $smallest_value[0] = $node;\n                $index = $node;\n\
    \            } else {\n                $result[] = $smallest_value;\n        \
    \        $smallest_value = [$node];\n                $index = $node;\n       \
    \     }\n        }\n    }\n    $result[] = $smallest_value;\n    return $result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhat if there are more than one nodes\
    \ with the smallest even value? `[2,2,2,3,3]` returns `[2, 2, 3]` instead of `[2,\
    \ 3]`.\n<|/ c |>\n<| c |>\nOhh, you're right. My mistake. I misunderstood the\
    \ question. I corrected my answer. Thanks for pointing that out.\n<|/ c |>\n<|\
    \ c |>\nThank you for the solution! It works, however I cannot get the time to\
    \ run your solution compared to the other one. Although it does look like O(n)\
    \ complexity, since it loops through the entire array, I expected this to be somewhat\
    \ faster. \nAnyway, I still appreciate your answer.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$arr = [4, 2, 3];\nsort($arr);\n$smallestElement = array_shift($arr);\n\
    $smallestIndex = array_search($smallestElement, $arr);\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\nA solution using array_filter:\n<code>\n$input = [4, 2,\
    \ 3];\n$filtered = array_filter($input, function($n) use (&$input) {\n    return\
    \ !($n % 2);\n});\n\nif ($filtered) {\n    $key = array_search(min($input), $filtered);\n\
    \    list($smallest, $index) = $filtered[$key];\n} else {\n    $smallest = null;\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0 tags=php\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpli1tzi1a.php
    on line 63

    '
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    if (!is_array($arr)) {\n        return [];\n    }\n    foreach ($arr as &$item)\
    \ {\n        if (!is_int($item)) {\n            return [];\n        }\n      \
    \  $item = array_keys($arr);\n    }\n    return $arr;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis code is not working, because `array_keys` returns an array with\
    \ integer keys. Also `array_keys` will not return the smallest even value, because\
    \ `0` is even. See the documentation [here](http://php.net/manual/en/function.array-keys.php).\n\
    <|/ c |>\n<| c |>\nI understand your reasoning. Yet your answer does not address\
    \ the question in the title (\"How to get smallest of even valued items\"), which\
    \ was the question in the first place (as the answer states). Your code will only\
    \ return the index of the smallest even value, not the smallest item with an even\
    \ value. The result should be `[2,1]` because `2` is even.\n<|/ c |>\n<| c |>\n\
    I do not know PHP, but I assume that OP knows what an array is and can figure\
    \ it out himself, since he is asking for the solution. Since I have no knowledge\
    \ of PHP, I could not help you with that, but if you feel that the code I have\
    \ posted can be improved then I certainly would appreciate some comments on that.\n\
    <|/ c |>\n<| c |>\nI missed a small thing. Corrected that. His code will return\
    \ the smallest even value. I will edit my answer to make it clear.\n<|/ c |>\n\
    <| c |>\nThanks for taking the time to help me! I appreciate it! But I'm still\
    \ not getting it to work. If I try it with your example, I get `[[1, 2]]` instead\
    \ of `[2,1]`\n<|/ c |>\n<| a tags=algorithm,php,arrays dscore=0 |>\nThis code\
    \ will work if given array contains only positive integers.\nIt will find the\
    \ smallest even item in the array and will return its index. \n<code>\n<?php\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpkqy4zceb.php
    on line 39

    '
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    // Initialize variables\n    $min = 0;\n    $result = [];\n    $smallest_value\
    \ = intval(max((int)$arr[0]));\n    $index = 0;\n\n    // Find the smallest value\
    \ in array\n    foreach ($arr as $key => $value) {\n        if ($value >= $smallest_value)\
    \ {\n            if ($value < $smallest_value) {\n                $smallest_value\
    \ = $value;\n                $index = $key;\n            }\n        }\n    }\n\
    \n    // If there are no elements, return empty array\n    if (empty($arr)) {\n\
    \        return [];\n    }\n\n    // If no nodes with the smallest even value\
    \ are found, return empty array\n    if (empty($smallest_value)) {\n        return\
    \ [];\n    }\n\n    // Find smallest even value in array\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value % 2 === 0) {\n            if ($smallest_value\
    \ < $value) {\n                $smallest_value = $value;\n                $index\
    \ = $key;\n            }\n        }\n    }\n\n    // If no nodes with the smallest\
    \ even value are found, return empty array\n    if (empty($smallest_value)) {\n\
    \        return [];\n    }\n\n    // If no node has the smallest index found,\
    \ return empty array\n    if (empty($index)) {\n        return [];\n    }\n\n\
    \    // Return array with the plucked value\n    $result = [ $smallest_value,\
    \ $index ];\n\n    // Return the array\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: max(): Argument #1 ($value) must be\
    \ of type array, int given in /tmp/tmpx8xdb4oo.php:31\nStack trace:\n#0 /tmp/tmpx8xdb4oo.php(31):\
    \ max(4)\n#1 /tmp/tmpx8xdb4oo.php(82): pluck(Array)\n#2 /tmp/tmpx8xdb4oo.php(86):\
    \ candidate(Array)\n#3 /tmp/tmpx8xdb4oo.php(96): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmpx8xdb4oo.php on line 31\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $len = count($arr);\n    if($len === 0){\n        return [];\n    }\n\n \
    \   $min = null;\n    $minIndex = null;\n    foreach($arr as $key => $val) {\n\
    \        if($val % 2 === 0) {\n            if($min === null || $min > $val){\n\
    \                $min = $val;\n                $minIndex = $key;\n           \
    \ }\n        }\n    }\n\n    return [\n        $min, $minIndex,\n    ];\n}\n\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppm6_6jum.php:61\n\
    Stack trace:\n#0 /tmp/tmppm6_6jum.php(64): test()\n#1 {main}\n  thrown in /tmp/tmppm6_6jum.php\
    \ on line 61\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    sort($arr);\n    $ret = [];\n    $cur = -1;\n    foreach ($arr as $val) {\n\
    \        if ($val & 1) {\n            if ($cur != -1)\n                $ret[$cur]\
    \ = $val;\n            $cur++;\n        }\n    }\n    return $ret;\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9kqwor6k.php:46\n\
    Stack trace:\n#0 /tmp/tmp9kqwor6k.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp9kqwor6k.php\
    \ on line 46\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $min = min(array_filter($arr, 'is_int'));\n    if (count($arr) === 0 || $min\
    \ === 0) {\n        return [];\n    }\n    $index = 0;\n    for ($i = 0; $i <\
    \ count($arr); $i++) {\n        if ($arr[$i] === $min) {\n            $index++;\n\
    \        }\n    }\n    return [min($arr), $index];\n}\n\nclass Node {\n    public\
    \ $value;\n    public $left;\n    public $right;\n\n    function __construct($value)\
    \ {\n        $this->value = $value;\n        $this->left = null;\n        $this->right\
    \ = null;\n    }\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4dq5bis6.php:59\n\
    Stack trace:\n#0 /tmp/tmp4dq5bis6.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp4dq5bis6.php\
    \ on line 59\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $evens = array();\n    $index = array();\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $index[] = $key;\n        }\n    }\n    if (count($evens) > 0) {\n      \
    \  return array_shift($evens);\n    } else {\n        return [];\n    }\n}\n\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7q17qvav.php:48\n\
    Stack trace:\n#0 /tmp/tmp7q17qvav.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp7q17qvav.php\
    \ on line 48\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $counts = array_count_values($arr);\n    ksort($counts);\n    $key = min($counts,\
    \ true);\n    return array($key, array_search($key, $counts));\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfxbz8bqm.php:38\n\
    Stack trace:\n#0 /tmp/tmpfxbz8bqm.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpfxbz8bqm.php\
    \ on line 38\n"
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    // Your code here\n}\n</cell>\n<cell>\n%%javascript\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpnhlq8wsu.php
    on line 30

    '
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    sort($arr);\n    return array_pop(array_filter($arr, function ($val) { return\
    \ intval($val) % 2 === 0; }));\n}\n\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nNotice: Only variables should be passed by reference in /tmp/tmpioeed89j.php\
    \ on line 29\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpioeed89j.php:37\n\
    Stack trace:\n#0 /tmp/tmpioeed89j.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpioeed89j.php\
    \ on line 37\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    sort($arr);\n    \n    // base case\n    if (!count($arr))\n        return\
    \ [];\n    \n    // create an array with only even values\n    $even = array_filter($arr,\
    \ function($el){ return $el%2 == 0; });\n    \n    if (count($even) == 0)\n  \
    \      return [];\n    \n    // pick one even value\n    $pick = key($even);\n\
    \    \n    // find which element has smallest index\n    $min = array_search($pick,\
    \ array_keys($arr), true);\n    \n    // if both elements have same even value\n\
    \    if ($min === key($arr))\n        return [ reset($arr), $min ];\n    // otherwise\
    \ return [ smallest value, its index ]\n    else\n        return [ reset($arr),\
    \ $min ];\n}\n</cell>\n<cell>\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpuppl4l1w.php
    on line 53

    '
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $index = 0;\n    $smallest = 0;\n    $smallest_value;\n\n    foreach($arr\
    \ as $value) {\n        if($value % 2 == 0) {\n            if($smallest_value\
    \ == 0) {\n                $smallest_value = $value;\n                $smallest\
    \ = $index;\n            } elseif($smallest_value % 2 == 0) {\n              \
    \  if($value == $smallest_value) {\n                    $smallest = $index;\n\
    \                } else {\n                    $smallest = $index;\n         \
    \       }\n            }\n        }\n        $index++;\n    }\n\n    return array($smallest_value,\
    \ $smallest);\n}\n\n/**\n * Your pickupCar function will be called twice, once\
    \ for testing, once for code coverage.\n * If your pickupCar function passes the\
    \ tests, refactor your solution to remove an if/else statement.\n */\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $smallest_value in /tmp/tmpb7me_alv.php on\
    \ line 34\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb7me_alv.php:60\n\
    Stack trace:\n#0 /tmp/tmpb7me_alv.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpb7me_alv.php\
    \ on line 60\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    if (empty($arr)) {\n        return array();\n    }\n    $arr = $arr + array_fill(0,\
    \ count($arr), 0);\n    // find smallest even number\n    $key = min($arr);\n\
    \    $smallest = min(array_keys($arr, $key));\n    $smallestArray = array_keys($arr,\
    \ $smallest);\n    $smallestArrayVal = array_slice($arr, $smallestArray);\n  \
    \  // return smallest value and its index\n    return array($smallestArrayVal,\
    \ $smallest);\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_slice(): Argument #2 ($offset)\
    \ must be of type int, array given in /tmp/tmpv_me5_om.php:36\nStack trace:\n\
    #0 /tmp/tmpv_me5_om.php(36): array_slice(Array, Array)\n#1 /tmp/tmpv_me5_om.php(41):\
    \ pluck(Array)\n#2 /tmp/tmpv_me5_om.php(45): candidate(Array)\n#3 /tmp/tmpv_me5_om.php(55):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmpv_me5_om.php on line 36\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    sort($arr);\n    $evens = array_filter($arr, function($n) { return $n % 2\
    \ === 0; });\n    if (empty($evens)) {\n        return [];\n    }\n    return\
    \ $evens[0];\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0p8o0mml.php:40\n\
    Stack trace:\n#0 /tmp/tmp0p8o0mml.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp0p8o0mml.php\
    \ on line 40\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    // Write your code here\n    $counts = array_count_values($arr);\n    foreach\
    \ ($counts as $value => $count) {\n        if ($count === 0) {\n            return\
    \ [];\n        } elseif ($count === 1) {\n            return [$value, 0];\n  \
    \      }\n    }\n    \n    $index = 0;\n    $even = null;\n    $smallest = null;\n\
    \    foreach ($counts as $value => $count) {\n        if ($count === 0) {\n  \
    \          $even = null;\n            $smallest = null;\n            break;\n\
    \        } elseif ($count === 1) {\n            $even = $value;\n            $smallest\
    \ = array_keys($counts);\n        } elseif ($count === 2) {\n            $even\
    \ = $value;\n            $smallest = $index;\n        }\n        $index++;\n \
    \   }\n    return [$even, $smallest];\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This looks like a great solution, however I believe there is a bug. The array\
    \ you provided does not return the correct output. For example [1, 1, 1] should\
    \ return [1,0,0] however your script returns [1,1,0]\n<|/ c |>\n<| c |>\nI see.\
    \ I think I misunderstood your problem description, then. I've updated my answer\
    \ accordingly.\n<|/ c |>\n<| a dscore=0 tags=php,multidimensional-array |>\nYou\
    \ can use array_filter function. First you have to group all even numbers into\
    \ one array and all odd numbers into another array. After that, apply array_filter.\
    \ \nTry this code.\n<code>\n<?php\n$arr1 = [1,2,3,4,5,6,7,8,9,10];\n$arr2 = [2,4,6,8,10,12,14,16,18,20];\n\
    $arr3 = [1,3,5,7,9];\n\n$arr = array_merge($arr1, $arr2, $arr3);\n$arr2 = array_filter($arr,\
    \ function($elem){\n    return $elem % 2 == 0;\n});\n$arr3 = array_filter($arr,\
    \ function($elem){\n    return $elem % 2 == 1;\n});\n$arr = array_merge($arr2,\
    \ $arr3);\n\nprint_r($arr);\n</code>\n<|/ a |>\n<| a dscore=0 |>\nThis is what\
    \ I came up with for you, let me know if it works. You will have to do some debugging,\
    \ let me know if anything doesn't make sense or you need clarification. As you\
    \ can see it does use array_filter and is fairly straight forward.\n<code>\n<?php\n\
    \nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp2lcuj262.php
    on line 57

    '
  timestamp: 1660028559
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $even = array_filter(array_values($arr), 'is_int');\n    sort($even);\n \
    \   $minEven = key($even);\n    sort($arr);\n    asort($arr);\n    foreach ($arr\
    \ as $key => $val) {\n        if ($val !== $minEven && is_int($val) && $val %\
    \ 2 === 0) {\n            $minEven = $key;\n        }\n    }\n    return $minEven\
    \ ? [$minEven, array_search($minEven, $arr)]  : [];\n}\n\nclass Node {\n    public\
    \ $value;\n    public $index;\n    public $left;\n    public $right;\n    public\
    \ $root;\n    public function __construct($value, $index = 0, $left=null, $right=null,\
    \ $root=null) {\n        $this->value = $value;\n        $this->index = $index;\n\
    \        $this->left = $left;\n        $this->right = $right;\n        $this->root\
    \ = $root;\n    }\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbr5pd60j.php:61\n\
    Stack trace:\n#0 /tmp/tmpbr5pd60j.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpbr5pd60j.php\
    \ on line 61\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $sorted_array = array();\n    $result = array();\n    foreach ($arr as $value)\
    \ {\n        $sorted_array[$value] = 0;\n    }\n    arsort($sorted_array);\n \
    \   foreach ($sorted_array as $value => $index) {\n        array_push($result,\
    \ array($value, $index));\n    }\n    return $result;\n}\n</cell>\n<cell>\n%timeit\
    \ -n 1 -r 1 pluck(array(4, 2, 3))\n</cell>\n<text>\nThe second part of this problem\
    \ is to write a function that returns the minimum value from an array. If there\
    \ are multiple minimum values, return the smallest value.\n\nThe function should\
    \ return an array[ min_value, min_index ].\nIf a certain value is absent, return\
    \ [ NaN, -1 ].\n\nExample: \nGiven [ 5, 3, 5, 4, 2, 6 ], return [ 5, 1 ].\n\n\
    The function should be executed on the array repeatedly.\n\nTo do that, you can\
    \ use the following algorithm:\n\nSort the array using any method (quicksort or\
    \ mergesort).\nKeep two pointers: one that points to the smallest element and\
    \ another that points to the\nlargest element.\nWhile one of the two pointers\
    \ is not equal:\na. if the pointer to the smallest element points to the first\
    \ element of the array,\nthen assign pointer to the smallest element to the pointer\
    \ to the largest element.\nb. if the pointer to the largest element points to\
    \ the last element of the array,\nthen assign pointer to the largest element to\
    \ the pointer to the smallest element.\nReturn the pointer to the smallest element.\n\
    When you implement the function, try to find the complexity of your algorithm.\n\
    \nNote that there are many possible implementations of the algorithm. The optimal\
    \ algorithm can depend on the implementations of other functions that you use,\
    \ so try to find out what works best in your situation\n\n\n</text>\n<cell>\n\
    %%write_and_run ../scripts/array/min_and_max_2.py\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpdogzi7re.php
    on line 39

    '
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    if (empty($arr)) {\n        return [];\n    }\n    sort($arr);\n    $even\
    \ = array_filter($arr, function($x) {\n        return !($x & 1);\n    });\n  \
    \  return count($even) ? $even[0] : [];\n}\n</code>\n<|/ a |>\n<| c |>\nThe OP\
    \ already has a working solution, they just need to know how to implement it using\
    \ PHP and recursion.\n<|/ c |>\n<| c |>\nthanks for that solution. Your code works\
    \ and it gives the correct answer. However, could you please explain the code\
    \ you have written? It would be really helpful if you can provide an explanation\
    \ on the code. Thanks!\n<|/ c |>\n<| a tags=arrays,php |>\nHere's a recursive\
    \ solution\n<code>\n<?php\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpakehp5yt.php
    on line 37

    '
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \  init();\n  foreach ($arr as $key => $val) {\n    if ($val % 2 == 0) {\n   \
    \   $even_values[] = $key;\n    }\n  }\n  $length = count($even_values);\n  if\
    \ ($length == 0) {\n    return [];\n  } else if ($length == 1) {\n    return $even_values;\n\
    \  }\n  foreach ($even_values as $key => $value) {\n    if ($value <= $even_values[0])\
    \ {\n      $index = 0;\n      break;\n    }\n    $index++;\n  }\n  return [$even_values[$index],\
    \ $index];\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function init() in /tmp/tmpwwuwai34.php:28\n\
    Stack trace:\n#0 /tmp/tmpwwuwai34.php(50): pluck(Array)\n#1 /tmp/tmpwwuwai34.php(54):\
    \ candidate(Array)\n#2 /tmp/tmpwwuwai34.php(64): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpwwuwai34.php on line 28\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    // Your code here\n    $min = min($arr);\n    foreach ($arr as $key => $val)\
    \ {\n        if ($val == $min) {\n            $arr[$key] = $key;\n        }\n\
    \    }\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf2eyvx2a.php:43\n\
    Stack trace:\n#0 /tmp/tmpf2eyvx2a.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpf2eyvx2a.php\
    \ on line 43\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    sort($arr);\n    $count = count($arr);\n    $minValue = min($arr);\n    $minIndex\
    \ = -1;\n    for ($i = 0; $i < $count; $i++) {\n        if ($arr[$i] == $minValue)\
    \ {\n            $minIndex = $i;\n            break;\n        }\n    }\n    if\
    \ ($minIndex == -1) {\n        return [];\n    }\n    return [$minValue, $minIndex];\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppk7id_x2.php:49\n\
    Stack trace:\n#0 /tmp/tmppk7id_x2.php(59): test()\n#1 {main}\n  thrown in /tmp/tmppk7id_x2.php\
    \ on line 49\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $even = [];\n    foreach ($arr as $v) {\n        if ($v & 1) {\n        \
    \    $even[] = $v;\n        }\n    }\n    if (count($even) === 0) {\n        return\
    \ [];\n    }\n    $minEven = min($even);\n    $i = 0;\n    foreach ($arr as $v)\
    \ {\n        if ($v & 1) {\n            if ($minEven === $v) {\n             \
    \   return [$minEven, $i];\n            }\n            $i++;\n        }\n    }\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9iqnnj9o.php:53\n\
    Stack trace:\n#0 /tmp/tmp9iqnnj9o.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp9iqnnj9o.php\
    \ on line 53\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    sort($arr);\n    $evens = array_filter($arr, 'is_int');\n    if (count($evens)\
    \ === count($arr)) {\n        return [];\n    }\n    $small = array_filter($arr,\
    \ 'is_int');\n    $i = $j = 0;\n    while ($j < count($small)) {\n        $evens[$i]\
    \ = $small[$j];\n        if (++$j === count($small)) {\n            $j = 0;\n\
    \        }\n        if ($evens[$i] % 2 === 0) {\n            $small[$j] = $evens[$i];\n\
    \            $i++;\n            if ($i === count($evens)) {\n                break;\n\
    \            }\n        }\n    }\n    $smallest = array_keys($arr, $small[0]);\n\
    \    return array($smallest, $evens[$i]);\n}\n\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr82zugyz.php:57\n\
    Stack trace:\n#0 /tmp/tmpr82zugyz.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpr82zugyz.php\
    \ on line 57\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    // write your code in PHP7\n    \n    // your answer here\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy3fw0ekj.php:38\n\
    Stack trace:\n#0 /tmp/tmpy3fw0ekj.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpy3fw0ekj.php\
    \ on line 38\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $counts = array_count_values($arr);\n    foreach($counts as $key => $val)\
    \ {\n        if($val % 2 == 0) {\n            return $key;\n        }\n    }\n\
    \    return [];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfdnxj8ml.php:42\n\
    Stack trace:\n#0 /tmp/tmpfdnxj8ml.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpfdnxj8ml.php\
    \ on line 42\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    if (!is_array($arr)) {\n        return [];\n    }\n\n    $nodes = [\n   \
    \     'smalest_value' => 0,\n        'smalest_index' => 0,\n    ];\n\n    foreach\
    \ ($arr as $key => $value) {\n        if (!is_int($value)) {\n            continue;\n\
    \        }\n\n        if ($value & 1) {\n            $nodes[$key]['smalest_value']\
    \ = $value;\n            $nodes[$key]['smalest_index'] = $key;\n        }\n\n\
    \        if ($nodes[$key]['smalest_value'] > 0) {\n            continue;\n   \
    \     }\n\n        return $nodes;\n    }\n\n    return $nodes;\n}\n\"\"\"\n\n\
    \    solution = execute(solution_template, locals())\n\n    print solution['result']\n\
    \    print solution['memory']\n\n\n    solution_template = \"\"\"\ndef solution(arr):\n\
    \    smalest_value = max(arr)\n    smalest_index = arr.index(smalest_value)\n\
    \    return [smalest_value, smalest_index]\n\"\"\"\n\n    solution = execute(solution_template,\
    \ locals())\n\n    print solution['result']\n    print solution['memory']\n\n\
    \    solution_template = \"\"\"\ndef solution(arr):\n    if not arr:\n       \
    \ return []\n    \n    sorted_arr = sorted(arr)\n    smalest_value = sorted_arr[0]\n\
    \    smalest_index = arr.index(smalest_value)\n\n    return [smalest_value, smalest_index]\n\
    \"\"\"\n\n    solution = execute(solution_template, locals())\n\n    print solution['result']\n\
    \    print solution['memory']\n\n    solution_template = \"\"\"\ndef solution(arr):\n\
    \    smalest_value = max(arr)\n    smalest_index = arr.index(smalest_value)\n\n\
    \    if smalest_value in arr:\n        smalest_value = arr[arr.index(smalest_value)]\n\
    \n    return [smalest_value, smalest_index]\n\"\"\"\n\n    solution = execute(solution_template,\
    \ locals())\n\n    print solution['result']\n    print solution['memory']\n\n\
    \    solution_template = \"\"\"\ndef solution(arr):\n    smalest_value = max(arr)\n\
    \    smalest_index = arr.index(smalest_value)\n\n    even_values = [val for index,\
    \ val in enumerate(arr) if val % 2 == 0]\n\n    if smalest_value in even_values:\n\
    \        smalest_value = arr[arr.index(smalest_value)]\n\n    return [smalest_value,\
    \ smalest_index]\n\"\"\"\n\n    solution = execute(solution_template, locals())\n\
    \n    print solution['result']\n    print solution['memory']\n\n    solution_template\
    \ = \"\"\"\ndef solution(arr):\n    smalest_value = max(arr)\n    smalest_index\
    \ = arr.index(sm\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected double-quoted string "" in /tmp/tmpz06_2goc.php
    on line 64

    '
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $smallest_value = null;\n    $index = 0;\n    $smallest_index;\n    $length\
    \ = count($arr);\n    foreach ($arr as $index => $value) {\n        if ($smallest_value\
    \ === null && $smallest_value === null) {\n            $smallest_value = $value;\n\
    \            $smallest_index = $index;\n        } elseif ($smallest_value ===\
    \ null ||\n            $value < $smallest_value) {\n            $smallest_value\
    \ = $value;\n            $smallest_index = $index;\n        }\n    }\n    if ($smallest_value\
    \ === null || !isset($smallest_index)) {\n        return [];\n    }\n    return\
    \ [$smallest_value, $smallest_index];\n}\n\nfunction candidate(...$args) {\n \
    \   return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpupcoouil.php:54\n\
    Stack trace:\n#0 /tmp/tmpupcoouil.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpupcoouil.php\
    \ on line 54\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $even = array();\n    $odd = array();\n    $small = array();\n    $len =\
    \ count($arr);\n    $index = 0;\n    foreach ($arr as $n) {\n        if ($n %\
    \ 2 === 0) {\n            $even[] = $n;\n        } else {\n            $odd[]\
    \ = $n;\n        }\n    }\n    foreach ($even as $e) {\n        $smallestIndex\
    \ = 0;\n        $smallest = ($e + $index);\n        if ($smallest < $smallest[1])\
    \ {\n            $smallestIndex = $smallest[1];\n            $smallest = $e;\n\
    \        }\n        if (in_array($smallest, $even)) {\n            $index = $index\
    \ + 1;\n            $even = array_filter($even, function ($v) use ($smallestIndex,\
    \ $smallest) {\n                return $v !== $smallest;\n            });\n  \
    \      } else {\n            array_push($small, array($smallestIndex, $smallest));\n\
    \        }\n    }\n    return $small;\n}\n\nfunction candidate(...$args) {\n \
    \   return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Trying to access array offset on value of type int in /tmp/tmpgg93o96i.php\
    \ on line 43\n\nWarning: Trying to access array offset on value of type int in\
    \ /tmp/tmpgg93o96i.php on line 43\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpgg93o96i.php:64\nStack trace:\n#0 /tmp/tmpgg93o96i.php(74): test()\n\
    #1 {main}\n  thrown in /tmp/tmpgg93o96i.php on line 64\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    \n}\n<|/ file dstars=1 ext=.php source=github |>\n<| a tags=arrays,php |>\n\
    I did it like that:\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp07n2nnfm.php
    on line 30

    '
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $min = null;\n    $smallest_index = -1;\n    $smallest_value = null;\n  \
    \  foreach ($arr as $key => $value) {\n        if ($min === null || $min > $value)\
    \ {\n            $min = $value;\n            $smallest_value = $value;\n     \
    \       $smallest_index = $key;\n        } else if ($min === $value && $key <\
    \ $smallest_index) {\n            $smallest_value = $value;\n            $smallest_index\
    \ = $key;\n        }\n    }\n    return [\n        'value' => $smallest_value,\n\
    \        'index' => $smallest_index\n    ];\n}\n\n/**\n * Definition for binary\
    \ tree with next pointer.\n * type TreeLinkNode is {\n *     label: string;\n\
    \ *     next: TreeLinkNode;\n * };\n */\nclass TreeLinkNode {\n    public $label;\n\
    \    public $next = null;\n\n    function __construct($val, $next = null) {\n\
    \        $this->label = $val;\n        $this->next = $next;\n    }\n}\n\n/**\n\
    \ * Definition for a binary tree node.\n * type TreeLinkNode is {\n *     label:\
    \ string;\n *     left: TreeLinkNode;\n *     right: TreeLinkNode;\n * };\n */\n\
    class TreeLinkNode_2 {\n    public $label;\n    public $left;\n    public $right;\n\
    \n    function __construct($val, $left = null, $right = null) {\n        $this->label\
    \ = $val;\n        $this->left = $left;\n        $this->right = $right;\n    }\n\
    }\n\n/**\n * Get node from tree link.\n */\nfunction candidate(...$args) {\n \
    \   return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxed59dlc.php:92\n\
    Stack trace:\n#0 /tmp/tmpxed59dlc.php(102): test()\n#1 {main}\n  thrown in /tmp/tmpxed59dlc.php\
    \ on line 92\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    if ($arr === null || $arr === []) {\n        return [];\n    }\n    $smallest\
    \ = null;\n    $smallest_index = null;\n    $smallest_even = null;\n    $smallest_even_count\
    \ = null;\n    foreach ($arr as $key => $value) {\n        $even_count = (int)\
    \ ceil(($value % 2) === 0);\n        if ($even_count !== $smallest_even_count)\
    \ {\n            $smallest_even_count = $even_count;\n            $smallest_even\
    \ = $value;\n        }\n        if ($smallest === null || $smallest_even_count\
    \ < $even_count) {\n            $smallest_even_count = $even_count;\n        \
    \    $smallest_even = $value;\n            $smallest_index = $key;\n        }\n\
    \    }\n    if ($smallest === null || $smallest_even_count < $smallest_even_count)\
    \ {\n        $smallest_even_count = $smallest_even_count;\n        $smallest_even\
    \ = $smallest_even;\n        $smallest_index = $smallest_index;\n    }\n    return\
    \ [\n        $smallest_even_count,\n        $smallest_index,\n    ];\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiewy9z5u.php:63\n\
    Stack trace:\n#0 /tmp/tmpiewy9z5u.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpiewy9z5u.php\
    \ on line 63\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $min = array_flip(array_filter($arr, function($v) {\n        return $v &\
    \ 1 == 0;\n    }));\n    return isset($min[$min[0]]) ? [$min[0], $min[0] + 1]\
    \ : [];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp40nv7izu.php on line 31\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp40nv7izu.php:39\nStack\
    \ trace:\n#0 /tmp/tmp40nv7izu.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp40nv7izu.php\
    \ on line 39\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    sort($arr);\n    $arr = array_flip($arr);\n    $n = count($arr);\n    $plucked\
    \ = array();\n    $index = 0;\n    $smallest_value = min(array_keys($arr));\n\
    \    $smallest_value = $arr[$smallest_value];\n\n    foreach ($arr as $key =>\
    \ $value) {\n        if ($value % 2 === 0) {\n            $smallest_value = $key;\n\
    \        }\n        if ($value === $smallest_value) {\n            $plucked[]\
    \ = $value;\n            $index = $key;\n        }\n    }\n\n    return array_values($plucked);\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfn2o2t3b.php:54\n\
    Stack trace:\n#0 /tmp/tmpfn2o2t3b.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpfn2o2t3b.php\
    \ on line 54\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $n = count($arr);\n    $m = 1;\n    $min = INF;\n    $index = 0;\n    for\
    \ ($i = 1; $i <= $n; $i++) {\n        $j = $min;\n        if ($i === $n) {\n \
    \           continue;\n        }\n        for ($j = 1; $j < $m; $j++) {\n    \
    \        $val = $arr[$j] + $arr[$j + 1];\n            if ($val % 2 === 0) {\n\
    \                $j++;\n                if ($val > $min) {\n                 \
    \   $min = $val;\n                    $index = $i;\n                }\n      \
    \      }\n        }\n    }\n    return $min === INF ? [] : [ $min, $index ];\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqy_y0ock.php:56\n\
    Stack trace:\n#0 /tmp/tmpqy_y0ock.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpqy_y0ock.php\
    \ on line 56\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \  $even = [];\n  $i = 0;\n  foreach ($arr as $v) {\n    if (!isset($even[$v %\
    \ 2])) {\n      $even[$v % 2] = $v;\n      $i++;\n    }\n  }\n  return $even[min($even)];\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 3 in /tmp/tmpowjd4xdj.php on line 36\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpowjd4xdj.php:43\nStack\
    \ trace:\n#0 /tmp/tmpowjd4xdj.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpowjd4xdj.php\
    \ on line 43\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    if (is_null($arr)) return [];\n    $largest = null;\n    $smallest = -1;\n\
    \    foreach ($arr as $node) {\n        if ($node % 2 === 0) {\n            if\
    \ ($smallest === null || $smallest > $largest) {\n                $smallest =\
    \ $node;\n            }\n            $largest = $node;\n        }\n    }\n   \
    \ return [\n        array_shift($arr),\n        $smallest,\n    ];\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpckxgz2z7.php:50\n\
    Stack trace:\n#0 /tmp/tmpckxgz2z7.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpckxgz2z7.php\
    \ on line 50\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $smallest = PHP_INT_MAX;\n    $smallest_idx = 0;\n    $even = null;\n   \
    \ $even_idx = 0;\n\n    for ($i=0; $i < count($arr); $i++) {\n        if ($arr[$i]\
    \ % 2 === 0) {\n            $even = $arr[$i];\n            $even_idx = $i;\n \
    \       }\n        if ($arr[$i] < $smallest) {\n            $smallest = $arr[$i];\n\
    \            $smallest_idx = $i;\n        }\n    }\n\n    if ($even) {\n     \
    \   return [$even, $even_idx];\n    }\n\n    if ($smallest > PHP_INT_MAX) {\n\
    \        return [];\n    }\n\n    return [\n        $smallest,\n        $smallest_idx\n\
    \    ];\n}\n\"\"\"\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected double-quote mark in /tmp/tmps3fdpu10.php
    on line 57

    '
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    if ($arr === [] || $arr === null || $arr === false) return $arr;\n    if\
    \ ($arr.length === 0) return $arr;\n    if ($arr.length === 1 || $arr[0] === 0\
    \ || $arr[0] % 2 === 0) return $arr;\n    $minIndex = null;\n    $minVal = null;\n\
    \    foreach ($arr as $val) {\n        if ($val !== 0) {\n            $isSmallestVal\
    \ = true;\n            $index = 0;\n            for ($i = 0; $i < $val; $i++)\
    \ {\n                if ($isSmallestVal) {\n                    $isSmallestVal\
    \ = false;\n                    if ($minVal == null) $minVal = $val;\n       \
    \             if ($minIndex == null || $minVal === $val) $minIndex = $index;\n\
    \                } else if ($index < $minIndex) {\n                    $minVal\
    \ = $val;\n                    $minIndex = $index;\n                }\n      \
    \          $index++;\n            }\n        }\n    }\n    return [\n        $minVal,\n\
    \        $minIndex,\n    ];\n}\n\"\"\"\n]\n\nproblem_20 = [\n    'https://www.hackerrank.com/challenges/php-pluck/problem',\n\
    \    dedent(\"\"\"\\\n    There is a tree of numbers, each node has either even\
    \ or odd value as its data.\n    Each node has exactly two children.\n    Each\
    \ node has non-negative integer values.\n    Find the smallest even number in\
    \ this tree.\n    Answer: 2\n    Explanation: There is a node with value 2, with\
    \ two children: 5 and 3.\n    In the node with value 2, the children with even\
    \ values are 3 and 5.\n    And because 3 is the smallest even number, we return\
    \ 2.\n    Example:\n    Consider this tree:\n    ```\n        4\n        |\\\n\
    \        | \\\n        |  \\\n        |   \\\n        5     3\n    ```\n    Find\
    \ the smallest even number in this tree.\n    Answer: 2\n    Explanation: In the\
    \ node with value 4, the children with even values are 5 and 3.\n    And because\
    \ 5 is the smallest even number, we return 4.\n    Example:\n    Consider this\
    \ tree:\n    ```\n        0\n        |\\\n        | \\\n        |  \\\n      \
    \  |   \\\n        5     3\n    ```\n    Find the smallest even number in this\
    \ tree.\n    Answer: 0\n    Explanation: There is no even number in this tree,\
    \ so return 0.\n    Example:\n    Consider this tree:\n    ```\n        1\n  \
    \      |\\\n        | \\\n        |  \\\n        |   \\\n        5     3\n   \
    \ ```\n    Find the smallest even number in this tree.\n    Answer: 0\n    \n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected double-quoted string "" in /tmp/tmp32iqdyb8.php
    on line 60

    '
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $arrlen = count($arr);\n    $result = array();\n    $smalest_value;\n   \
    \ $smallest_index;\n    for($i = 0; $i < $arrlen; $i++) {\n        \n        if($arr[$i]\
    \ % 2 == 0) {\n            $smallest_value = $arr[$i];\n            $smallest_index\
    \ = $i;\n        }\n        for($j = $i + 1; $j < $arrlen; $j++) {\n         \
    \   if($arr[$i] % 2 == 0) {\n                $smalest_value = $arr[$i];\n    \
    \            $smallest_index = $i;\n            }\n        }\n        if($smalest_value\
    \ == $smallest_value) {\n            $result[] = $smallest_value;\n        }\n\
    \    }\n    return $result;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n\n/**\n * $arr\n * mixed\n */\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp22q0gwkt.php
    on line 50

    '
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    return $arr\n        ? array_filter($arr, function ($n, $i) {\n         \
    \   return $n % 2 == 0;\n        }, ARRAY_FILTER_USE_BOTH)\n        : [];\n}\n\
    \nclass Largest {\n    public static function largest($arr, $num) {\n        $largest\
    \ = [];\n        for ($i = 0; $i < count($arr); $i++) {\n            array_push($largest,\
    \ count($arr) - $i);\n        }\n        return array_filter($arr, function ($k)\
    \ use ($largest) {\n            return $largest[$k] == $k;\n        }, 'ARRAY_FILTER_USE_BOTH');\n\
    \    }\n}\n\nclass Smallest {\n    public static function smallest($arr, $num)\
    \ {\n        $smallest = [];\n        for ($i = 0; $i < count($arr); $i++) {\n\
    \            array_push($smallest, count($arr) - $i);\n        }\n        return\
    \ array_filter($arr, function ($k) use ($smallest) {\n            return $smallest[$k]\
    \ == $k;\n        }, 'ARRAY_FILTER_USE_BOTH');\n    }\n}\n\nclass Person {\n \
    \   private $name;\n    private $age;\n    private $city;\n\n    public function\
    \ __construct($name, $age, $city) {\n        $this->name = $name;\n        $this->age\
    \ = $age;\n        $this->city = $city;\n    }\n\n    public function getName()\
    \ {\n        return $this->name;\n    }\n\n    public function getAge() {\n  \
    \      return $this->age;\n    }\n\n    public function getCity() {\n        return\
    \ $this->city;\n    }\n\n    public function setName($name) {\n        $this->name\
    \ = $name;\n    }\n\n    public function setAge($age) {\n        $this->age =\
    \ $age;\n    }\n\n    public function setCity($city) {\n        $this->city =\
    \ $city;\n    }\n\n    public function __toString() {\n        return $this->getName()\
    \ . ' ' . $this->getAge() . ' ' . $this->getCity();\n    }\n}\n\nclass People\
    \ {\n    private $persons;\n\n    public function __construct() {\n        $this->persons\
    \ = [];\n    }\n\n    public function getPersons() {\n        return $this->persons;\n\
    \    }\n\n    public function addPerson($name, $age, $city) {\n        $person\
    \ = new Person($name, $age, $city);\n        array_push($this->persons, $person);\n\
    \    }\n\n    public function removePerson($name) {\n        foreach ($this->persons\
    \ as $person) {\n            if ($person->getName() == $name) {\n            \
    \    array_splice($this->persons, $person->getAge(), 1);\n                break;\n\
    \            }\n        }\n    }\n\n    public function __toString() {\n     \
    \   $\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmp9157z8js.php on line 126

    '
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    if (!is_array($arr)) {\n        return [];\n    }\n\n    $result = array_filter($arr,\
    \ function ($value) {\n        return $value % 2 === 0;\n    });\n\n    $smallest_value\
    \ = $result[0]; // Smallest even value or null\n    $smallest_index = 0;\n\n \
    \   foreach ($result as $key => $value) {\n        if ($value % 2 === 0 && $value\
    \ < $smallest_value) {\n            $smallest_value = $value;\n            $smallest_index\
    \ = $key;\n        }\n    }\n\n    return [\n        'smalest_value' => $smallest_value,\n\
    \        'smalest_index' => $smallest_index,\n    ];\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeuffne0j.php:57\n\
    Stack trace:\n#0 /tmp/tmpeuffne0j.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpeuffne0j.php\
    \ on line 57\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    array_walk($arr, function(&$val, $index, $arr){\n        $val = (int)$val;\n\
    \    });\n    $result = array();\n    arsort($arr);\n    foreach ($arr as $key\
    \ => $val) {\n        if ($val % 2 == 0) {\n            $result[] = $val;\n  \
    \      } else {\n            $result = $key;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ArgumentCountError: Too few arguments to function\
    \ {closure}(), 2 passed and exactly 3 expected in /tmp/tmp04bltl4j.php:28\nStack\
    \ trace:\n#0 [internal function]: {closure}(4, 0)\n#1 /tmp/tmp04bltl4j.php(30):\
    \ array_walk(Array, Object(Closure))\n#2 /tmp/tmp04bltl4j.php(44): pluck(Array)\n\
    #3 /tmp/tmp04bltl4j.php(48): candidate(Array)\n#4 /tmp/tmp04bltl4j.php(58): test()\n\
    #5 {main}\n  thrown in /tmp/tmp04bltl4j.php on line 28\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $n = sizeof($arr);\n    for ($i = 0; $i < $n; $i++) {\n        if ($arr[$i]\
    \ % 2 === 0) {\n            $arr[$i] = $arr[$i] + 1;\n        }\n    }\n    $max\
    \ = $arr[0];\n    $min = $arr[0];\n    for ($i = 1; $i < $n; $i++) {\n       \
    \ if ($arr[$i] > $max) {\n            $max = $arr[$i];\n        } elseif ($arr[$i]\
    \ < $min) {\n            $min = $arr[$i];\n        }\n    }\n    $k = sizeof($arr)\
    \ - 1;\n    for ($i = 0; $i < $n; $i++) {\n        if ($arr[$i] % 2 === 0 && $arr[$i]\
    \ === $max) {\n            $arr[$i] = $k;\n            break;\n        }\n   \
    \     $k--;\n    }\n    if (sizeof($arr) == 0) {\n        return [];\n    }\n\
    \    return [$max, $min];\n}\n</code>\n<|/ a tags=php,algorithm dscore=2 |>\n\
    <| a tags=php,algorithm |>\nI tested your PHP code and the results are correct.\
    \ The only issue I see with your code is that your algorithm always returns the\
    \ first element of an array rather than the smallest. Below is an example:\n<code>\n\
    $arr = [4, 0, 2, 6, 2, 1];\n</code>\nThe array you pass into your algorithm: \n\
    <code>\n[4, 0, 2, 6, 2, 1]\n</code>\nThe array returned by the algorithm (I added\
    \ a number to the first position in the array so it can be easier to see):\n<code>\n\
    [6, 3, 1]\n</code>\nHere is a solution that returns the correct answer:\n<code>\n\
    <?php\n/**\n * Return the smallest even number in an array.\n *\n * array $arr\n\
    \ *\n * array\n */\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpyzz89xqf.php
    on line 56

    '
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    sort($arr);\n    $even = [];\n    $index = [];\n    $i = 0;\n    foreach\
    \ ($arr as $value) {\n        if ($value % 2 == 0) {\n            $even[$i] =\
    \ 0;\n            $index[$i] = 0;\n        }\n        $even[$i] = $value;\n  \
    \      $index[$i] = $i;\n        $i++;\n    }\n\n    foreach ($even as $key =>\
    \ $value) {\n        if ($value == 0) {\n            return [$index[$key], $key];\n\
    \        }\n    }\n\n    return [];\n}\n\n$arr = array(4, 2, 3);\nprint_r(pluck($arr));\n\
    </code>\n<|/ a tags=sorting,php,arrays |>\n<| c |>\nThanks for this! I've been\
    \ trying to figure out how to do it with usort(), but I keep getting confused\
    \ because it's returning an array, and not a scalar value.\n<|/ c |>\n<| a |>\n\
    My solution:\n<code>\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp_5fvj77z.php
    on line 53

    '
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $result = [];\n    $smallest = false;\n    $smallest_value = 0;\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value < $smallest_value) {\n      \
    \      $smallest_value = $value;\n            $smallest = $key;\n        } else\
    \ if ($value == $smallest_value) {\n            $result[] = $value;\n        }\n\
    \    }\n    return $result ? [$smallest, $smallest_value] : $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqp79prdw.php:47\n\
    Stack trace:\n#0 /tmp/tmpqp79prdw.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpqp79prdw.php\
    \ on line 47\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $even = array_filter($arr, function($n){\n        return $n % 2 === 0;\n\
    \    });\n\n    if (empty($even)) {\n        return array();\n    }\n\n    $min\
    \ = min(array_keys($even));\n    $result = array($min, $even[$min]);\n\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcmnckhpj.php:47\n\
    Stack trace:\n#0 /tmp/tmpcmnckhpj.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpcmnckhpj.php\
    \ on line 47\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $min = INF;\n    $minIndex = 0;\n    $even = [];\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] % 2 === 0) {\n            $even[] = $arr[$i];\n\
    \        } else {\n            if ($arr[$i] < $min) {\n                $min =\
    \ $arr[$i];\n                $minIndex = $i;\n            }\n        }\n    }\n\
    \    if ($min === INF) {\n        return [];\n    }\n    return [$min, $minIndex];\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurmldp4b.php:52\n\
    Stack trace:\n#0 /tmp/tmpurmldp4b.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpurmldp4b.php\
    \ on line 52\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    sort($arr);\n    $size = sizeof($arr);\n    $index = 0;\n    for($i=0; $i<$size;\
    \ $i++){\n        $j = $i+1;\n        $even = true;\n        while(isset($arr[$j])\
    \ && $arr[$j] % 2 == 0){\n            $even = false;\n            $j++;\n    \
    \    }\n        if($even){\n            if(!isset($arr[$i])){\n              \
    \  unset($arr[$i]);\n                break;\n            }\n            $arr[$i]\
    \ = $arr[$j];\n            unset($arr[$j]);\n            $index = $i;\n      \
    \  }\n    }\n    return $arr;\n}\n</code>\n<|/ a dscore=0 tags=algorithm,arrays,sorting,php\
    \ |>\n<| c |>\nWhy did you rewrite my `kthSmallest` function instead of just using\
    \ a `sort` call ?\n<|/ c |>\n<| c |>\nYou did not rewrite it, you just rewrote\
    \ it in a different way. I didn't really need to write it this way since I knew\
    \ how it works :)\n<|/ c |>\n<| c |>\nActually I didn't know how `kthSmallest`\
    \ works and didn't see how `sort` would do the trick. Maybe I'm missing something,\
    \ I'm not really sure why my version wouldn't do the trick.\n<|/ c |>\n<| c |>\n\
    Yeah I missed that. My bad. But now that you've updated it I see why it works.\n\
    <|/ c |>\n<| c |>\nAwesome! Thanks :)\n<|/ c |>\n<| a tags=algorithm,arrays,sorting,php\
    \ |>\nUse PHP SORT_NATURAL or SORT_NUMERIC flag.\n<code>\n$sorted = array_sort($array,SORT_NUMERIC);\n\
    print_r($sorted);\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp_8etuiv0.php
    on line 50

    '
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        return [$value, $key];\n        }\n    }\n    return [];\n}\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqoz5gwvj.php:40\n\
    Stack trace:\n#0 /tmp/tmpqoz5gwvj.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpqoz5gwvj.php\
    \ on line 40\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    sort($arr);\n    $smallest = array_shift($arr);\n    $ans = array();\n  \
    \  foreach ($arr as $val) {\n        if ($val % 2 == 0) {\n            $ans[]\
    \ = $val;\n            if ($val < $smallest) {\n                $smallest = $val;\n\
    \            }\n        }\n    }\n    if (empty($arr)) {\n        $ans = array();\n\
    \    }\n    return array($smallest, $ans);\n}\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp572vqkh5.php:49\n\
    Stack trace:\n#0 /tmp/tmp572vqkh5.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp572vqkh5.php\
    \ on line 49\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    // base case\n    if (!is_array($arr)) {\n        echo \"invalid input!\"\
    ;\n        exit;\n    }\n\n    $len = count($arr);\n    if ($len === 0) {\n  \
    \      echo \"invalid input!\";\n        exit;\n    }\n\n    foreach ($arr as\
    \ $key => $val) {\n        if ($val % 2 === 0) {\n            $small = $val;\n\
    \            $index = 0;\n            foreach ($arr as $key1 => $val1) {\n   \
    \             if ($val1 % 2 === 0) {\n                    if ($val1 < $small)\
    \ {\n                        $small = $val1;\n                        $index =\
    \ $key1;\n                    }\n                }\n            }\n          \
    \  $newArr = array_merge([$small], $arr);\n            unset($newArr[$index]);\n\
    \            \n            return $newArr;\n        }\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxd_6ktrb.php:64\n\
    Stack trace:\n#0 /tmp/tmpxd_6ktrb.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpxd_6ktrb.php\
    \ on line 64\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    // your code\n}\n</cell>\n<text>\nSolution 3: Find Minimum in Array\n\n</text>\n\
    <cell>\ndef findMinInArray($arr) {\n    // your code\n}\n</cell>\n<text>\nSolution\
    \ 4: Find Median in Array\n\n</text>\n<cell>\ndef findMedianInArray($arr) {\n\
    \    // your code\n}\n</cell>\n<text>\nSolution 5: Find Largest in Array\n\n</text>\n\
    <cell>\ndef findLargestInArray($arr) {\n    // your code\n}\n</cell>\n<text>\n\
    Solution 6: Find Smallest in Array\n\n</text>\n<cell>\ndef findSmallestInArray($arr)\
    \ {\n    // your code\n}\n</cell>\n<text>\nPart VII: Write a Function to Count\
    \ Subsequences That Contain All of Given Items\n\n</text>\n<cell>\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp1pjt8s8d.php
    on line 30

    '
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    if (empty($arr)) {\n        return [];\n    }\n    $smallestValue = PHP_INT_MAX;\n\
    \    $smallestIndex = 0;\n    foreach ($arr as $node) {\n        if ($node % 2\
    \ !== 0) {\n            if ($node < $smallestValue) {\n                $smallestValue\
    \ = $node;\n                $smallestIndex = $node;\n            }\n         \
    \   if ($smallestValue > PHP_INT_MAX) {\n                break;\n            }\n\
    \        }\n    }\n    $output = [$smallestValue, $smallestIndex];\n    return\
    \ $output;\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnm3z84j6.php:52\n\
    Stack trace:\n#0 /tmp/tmpnm3z84j6.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpnm3z84j6.php\
    \ on line 52\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    sort($arr);\n    $result = [];\n    foreach ($arr as $key => $value) {\n\
    \        if ($value % 2 == 0) {\n            $result[] = [$value, $key];\n   \
    \     }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjuh8lhhk.php:43\n\
    Stack trace:\n#0 /tmp/tmpjuh8lhhk.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpjuh8lhhk.php\
    \ on line 43\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $min = null;\n    $result = [];\n    foreach ($arr as $key => $node) {\n\
    \        $even = true;\n        $index = -1;\n        foreach ($arr as $k => $subArr)\
    \ {\n            $index++;\n            if ($subArr[$k] % 2) {\n             \
    \   $even = false;\n            }\n            if ($subArr[$k] < $node) {\n  \
    \              $min = $node;\n                break;\n            }\n        }\n\
    \        if ($min === null && $even) {\n            $result[] = $node;\n     \
    \   } elseif ($min === null && $index !== -1) {\n            $result[] = [$node,\
    \ $index];\n        } elseif ($min !== null && $index !== -1) {\n            $result[]\
    \ = [$min, $index];\n        }\n    }\n    return $result;\n}\n\"\"\"\n      \
    \  )\n        == \"\"\"\nGiven an array representing a branch of a tree that has\
    \ non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in an array, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given array is empty, return [].\n\
    Example 1:\n>>> pluck(array(4, 2, 3))\narray(2, 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> pluck(array(1, 2,\
    \ 3))\narray(2, 1)\nExplanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\nExample 3:\n>>> pluck(array())\narray()\nExample 4:\n>>> pluck(array(5,\
    \ 0, 3, 0, 4, 2))\narray(0, 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n\"\"\"\n\
    \    )\n\n\ndef test_print_tree_bf():\n    assert run_test(\n        print_tree_bf,\n\
    \        \"\"\"\nGiven a binary tree and a node,\nreturn the tree node value.\n\
    \nExample 1:\n>>> print_tree_bf(tree, [7])\n7\nExplanation: The node with value\
    \ 7 has a left subtree and a right subtree.\n\nExample 2:\n>>> print_tree_bf(tree,\
    \ [7])\n7\nExplanation: The node with value 7 has a left subtree and a right subtree.\n\
    \nExample 3:\n>>> print_tree_bf(tree, [1])\n1\nExplanation: The node with value\
    \ 1 has no children, and its left subtree is empty.\n\"\"\",\n        \"\"\"\n\
    Given a binary tree and a node,\nreturn the tree node value.\n\nExample \nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected double-quoted string "" in /tmp/tmp8i990cn0.php
    on line 55

    '
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $ret = array();\n    $even = array_filter($arr, function($e) { return $e%2==0;\
    \ });\n    if (count($even) < count($arr)) {\n        $index = 0;\n    } else\
    \ {\n        $min = min(array_keys($even));\n        $index = array_search($min,\
    \ $arr);\n    }\n    array_push($ret, $even[$index], $index);\n    return $ret;\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ljhismf.php:45\n\
    Stack trace:\n#0 /tmp/tmp7ljhismf.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp7ljhismf.php\
    \ on line 45\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $min = array_reduce(\n        $arr,\n        function ($min, $node) {\n \
    \           return min($min, $node);\n        },\n        0\n    );\n\n    $index\
    \ = array_reduce(\n        $arr,\n        function ($index, $node) {\n       \
    \     if ($node % 2 === 0) {\n                return min($index, $node);\n   \
    \         }\n\n            return $index;\n        },\n        0\n    );\n\n \
    \   return array_filter([$min, $index]);\n}\n</code>\n<|/ a tags=algorithm,math,php,arrays\
    \ |>\n<| c |>\nNice solution, thanks! But I'm not sure I understand how it works,\
    \ can you elaborate?\n<|/ c |>\n<| c |>\nI added a commented example and explained\
    \ the steps. Hope it helps.\n<|/ c |>\n<| a |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpfne_j9p7.php
    on line 50

    '
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $even = [];\n    $less = [];\n    for ($i = 0, $len = count($arr); $i < $len;\
    \ $i++) {\n        if ($arr[$i] % 2 == 0) {\n            $even[$i] = $arr[$i];\n\
    \        } else {\n            $less[] = $arr[$i];\n        }\n    }\n    if (count($even)\
    \ == 0) {\n        return [];\n    }\n    $result = [];\n    asort($even);\n \
    \   $smallest = array_shift($even);\n    $index = 0;\n    for ($i = 0, $len =\
    \ count($even); $i < $len; $i++) {\n        if ($even[$i] == $smallest) {\n  \
    \          $result[] = [$smallest, $index];\n            if (count($even) == 1)\
    \ {\n                return $result;\n            }\n            $index++;\n \
    \       }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n   \
    \ return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf0xfd4jm.php:60\n\
    Stack trace:\n#0 /tmp/tmpf0xfd4jm.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpf0xfd4jm.php\
    \ on line 60\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $evenValue = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 === 0) {\n            $evenValue[$key] = $value;\n        }\n    }\n   \
    \ if (count($evenValue) !== 0) {\n        return min($evenValue);\n    }\n}\n\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzr4dy76o.php:44\n\
    Stack trace:\n#0 /tmp/tmpzr4dy76o.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpzr4dy76o.php\
    \ on line 44\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $min = min($arr);\n    $res = array();\n    foreach ($arr as $v) {\n    \
    \    if ($v == $min) {\n            $res[] = $v;\n        }\n    }\n    return\
    \ $res;\n}\n\"\"\"\n    ),\n    gryphon(\n        \"\"\"\ndef solve(m, n):\n \
    \   # Write your code in Python or another language of your choice\n    # Your\
    \ code should be in a function solve(m,n) that returns the solution in an array\n\
    \    # [(m*n)-1, (m*n)-2, ... , m-2, m-1, m ] \n\n\"\"\"\n    ),\n    gryphon(\n\
    \        \"\"\"\ndef solve(m, n):\n    # Write your code in Python or another\
    \ language of your choice\n    # Your code should be in a function solve(m,n)\
    \ that returns the solution in an array\n    # [ [(m*n), 0],\n    #   [(m*n-1),\
    \ -1],\n    #   [(m*n-2), -2],\n    #   [(m*n-1), -1],\n    #   [(m*n), 0] ] \n\
    \n\"\"\"\n    ),\n    gryphon(\n        \"\"\"\ndef solve(n):\n    # Write your\
    \ code in Python or another language of your choice\n    # Your code should be\
    \ in a function solve(n) that returns the solution in an array\n    # [n, n+1,\
    \ n+2, n+3, ... , n+(n-1)] \n\n\"\"\"\n    ),\n    gryphon(\n        \"\"\"\n\
    def solve(n):\n    # Write your code in Python or another language of your choice\n\
    \    # Your code should be in a function solve(n) that returns the solution in\
    \ an array\n    # [0, n*(n+1)/2, n*(n+1)/2, n*(n+1)/2, n*(n+1)/2, ... , n*(n -\
    \ 1)] \n\n\"\"\"\n    ),\n    gryphon(\n        \"\"\"\ndef solve(n, m):\n   \
    \ # Write your code in Python or another language of your choice\n    # Your code\
    \ should be in a function solve(n, m) that returns the solution in an array\n\
    \    # [0, n*(n+1), n*(n+1), n*(n+1), n*(n+1), n*(n+1), n*(n+1), n*(n+1), n*(n+1),\
    \ n*(n+1), n*(n+1), n*(n+1)] \n\n\"\"\"\n    ),\n    gryphon(\n        \"\"\"\n\
    def solve(n, m):\n    # Write your code in Python or another language of your\
    \ choice\n    # Your code should be in a function solve(n, m) that returns the\
    \ solution in an array\n    # [0, n*(m+1), n*(m+1), n*(m+1), n*(m+1), n*(m+1),\
    \ n*(m+1), n*(m+1), n*(m+1), n*(m+1), n*(m+\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected double-quoted string "" in /tmp/tmpu455ti8z.php
    on line 40

    '
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $ret = [];\n    $min = null;\n    foreach($arr as $v){\n        if(!is_null($v)){\n\
    \            if($min === null || ($v % 2 == 0) || (($min % 2) == 0 && ($v < $min))){\n\
    \                $min = $v;\n                $ret[0] = $v;\n                $ret[1]\
    \ = 0;\n            }\n            elseif($min == $v || ($min % 2 == 0) || (($min\
    \ % 2) == 0 && ($v > $min))){\n                $ret[1]++;\n            }\n   \
    \     }\n    }\n    return $ret;\n}\n\n/**\n * Finds the largest value in the\
    \ array.\n */\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8_5kzd8p.php:56\n\
    Stack trace:\n#0 /tmp/tmp8_5kzd8p.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp8_5kzd8p.php\
    \ on line 56\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $min = INF;\n    $min = count($arr);\n    $min_index = 0;\n    $new_arr =\
    \ [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 !== 0) {\n\
    \            if ($value < $min) {\n                $min = $value;\n          \
    \      $min_index = $key;\n            }\n        } else {\n            if ($value\
    \ < $min) {\n                $min = $value;\n                $min_index = $key;\n\
    \                $new_arr[] = $value;\n            }\n        }\n    }\n    return\
    \ [$new_arr, $min_index];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcchd9fvd.php:54\n\
    Stack trace:\n#0 /tmp/tmpcchd9fvd.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpcchd9fvd.php\
    \ on line 54\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    sort($arr);\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++) {\n \
    \       $index = 0;\n        $value = $arr[$i];\n        while ($index < $n &&\
    \ $arr[$index] % 2 === 0) {\n            $index++;\n        }\n        if ($index\
    \ == $n) {\n            return [intval($value), 0];\n        } else {\n      \
    \      return [intval($value), $index];\n        }\n    }\n    return [];\n}\n\
    \nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppv0o_d5r.php:51\n\
    Stack trace:\n#0 /tmp/tmppv0o_d5r.php(60): test()\n#1 {main}\n  thrown in /tmp/tmppv0o_d5r.php\
    \ on line 51\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $nodes = [];\n    $max_index = [];\n    foreach ($arr as $node) {\n     \
    \   if (in_array($node, $max_index)) {\n            continue;\n        }\n   \
    \     $index = 0;\n        while (in_array($nodes[$index], $max_index)) {\n  \
    \          $index++;\n        }\n        $max_index[$index] = $node;\n       \
    \ $nodes[$index] = $node;\n    }\n\n    return $nodes;\n}\n\"\"\"\n</cell>\n<cell>\n\
    import nbformat\nfrom nbconvert import nbconvertapp\n\nnb = nbformat.from_dict({\n\
    \    \"cells\": [\n        {\n            \"cell_type\": \"code\",\n         \
    \   \"execution_count\": None,\n            \"metadata\": {},\n            \"\
    outputs\": [],\n            \"source\": code\n        }\n    ],\n    \"metadata\"\
    : {\n        \"language_info\": {\n            \"name\": \"python\",\n       \
    \     \"pygments_lexer\": \"ipython2\",\n            \"version\": \"3.6.3\"\n\
    \        }\n    },\n    \"nbformat\": 4,\n    \"nbformat_minor\": 4\n})\n\nnb\
    \ = nbconvertapp.from_notebook_node(nb)\n</cell>\n<cell>\n%pycat output/pluck_even_branches.ipynb\n\
    </cell>\n<text>\nLet's write the pluck function to our database!\n\n\n</text>\n\
    <cell>\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected double-quoted string "" in /tmp/tmpw00fr2fo.php
    on line 51

    '
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $arr = $arr instanceof Array ? $arr : [0 => $arr];\n    sort($arr);\n   \
    \ $even = [];\n    foreach ($arr as $item) {\n        if ($item % 2 == 0) {\n\
    \            $even[] = $item;\n        }\n    }\n    if (count($even) === 0) {\n\
    \        return [];\n    }\n    $min_index = array_search($min, $even);\n    if\
    \ ($min_index === false) {\n        return [];\n    }\n    $min_value = $even[$min_index];\n\
    \    $ret = [];\n    for ($i = 0; $i < count($even); $i++) {\n        if ($even[$i]\
    \ == $min_value) {\n            $ret[] = $i;\n        }\n    }\n    return $ret;\n\
    }\n\"\"\"\n        self.assertEqual(expected, actual)\n\n    def test_pluck_one_more(self):\n\
    \        expected = \"\"\"\n>>> a = sorted([3, 2, 2, 5])\n>>> pluck(a)\n[3, 2]\n\
    >>> pluck(a, 5)\n[2, 2, 5]\n>>> pluck(a, 5)\n[2, 2, 5]\n>>> pluck(a, 1)\n[3]\n\
    \"\"\"\n        actual = Solution().pluck_one_more([1, 4, 2, 2, 3, 5])\n     \
    \   self.assertEqual(expected, actual)\n\n    def test_pluck_one_more_more_case(self):\n\
    \        actual = Solution().pluck_one_more([1, 4, 2, 2, 3, 5])\n        expected\
    \ = [2, 4]\n        self.assertEqual(expected, actual)\n\n    def test_pluck_one_more_more_case2(self):\n\
    \        actual = Solution().pluck_one_more([1, 4, 2, 2, 3, 5])\n        expected\
    \ = [2, 4]\n        self.assertEqual(expected, actual)\n\n    def test_pluck_one_more_more_case3(self):\n\
    \        actual = Solution().pluck_one_more([1, 4, 2, 2, 3, 5])\n        expected\
    \ = [2, 4]\n        self.assertEqual(expected, actual)\n\n    def test_pluck_one_more_more_case4(self):\n\
    \        actual = Solution().pluck_one_more([1, 4, 2, 2, 3, 5])\n        expected\
    \ = [2, 4]\n        self.assertEqual(expected, actual)\n\n    def test_pluck_one_more_more_case5(self):\n\
    \        actual = Solution().pluck_one_more([1, 4, 2, 2, 3, 5])\n        expected\
    \ = [2, 4]\n        self.assertEqual(expected, actual)\n\n    def test_pluck_one_more_more_case6(self):\n\
    \        actual = Solution().pluck_one_more([1, 4, 2, 2, 3, 5])\n        expected\
    \ = [2, 4]\n        self.assertEqual(expected, actual)\n\n    def test_pluck_one_more_more_case7(self):\n\
    \        actual = Solution().pluck_one_more([1, 4, 2, 2, 3, 5])\n        expected\
    \ = [2, 4]\n        self.assertEqual(expected, actual)\n\n    def test_pluck_one_more_more_case8(self):\n\
    \        actual = Solution().pluck_one_more([1, 4, 2, 2, 3, 5])\n        expected\
    \ = [2, 4]\n        self.assertEqual(expected, actual)\n\n    def test_pluck_one_more_more_case9(self):\n\
    \        actual = Solution().pluck_one_more([1, 4, 2, 2, 3, 5])\n        expected\
    \ = [2, 4]\n        self.assertEqual(expected, actual)\n\n    def test_pluck_one_more_more_case\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "array" in /tmp/tmpxst6usfv.php on
    line 28

    '
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $arr = array_filter($arr);\n    $min_even_val = array_reduce($arr, 'min');\n\
    \    foreach ($arr as $key => $val) {\n        if ($val <= $min_even_val) {\n\
    \            $min_even_val = $val;\n            $val_index = array_search($val,\
    \ $arr);\n            if ($val_index !== false) {\n                return array($min_even_val,\
    \ $val_index);\n            }\n        }\n    }\n    return array();\n}\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbr72_mjn.php:46\n\
    Stack trace:\n#0 /tmp/tmpbr72_mjn.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpbr72_mjn.php\
    \ on line 46\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    sort($arr);\n    $min = $arr[0];\n    $pos = -1;\n    foreach ($arr as $v)\
    \ {\n        if ($v == $min) {\n            $pos++;\n            if ($pos > 0)\
    \ break;\n        }\n        $min = $v;\n    }\n    return ($pos == -1) ? array()\
    \ : array($min, $pos);\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp07mudc9d.php:46\n\
    Stack trace:\n#0 /tmp/tmp07mudc9d.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp07mudc9d.php\
    \ on line 46\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    if ($arr === [] || $arr === null || $arr === false || $arr === 0 || $arr\
    \ === null) {\n        return [];\n    }\n    $smallest = null;\n    $smallest_value\
    \ = null;\n    $smallest_index = 0;\n    foreach ($arr as $key => $value) {\n\
    \        if ($value % 2 === 0) {\n            if ($smallest === null || $smallest_value\
    \ < $value) {\n                $smallest = $key;\n                $smallest_value\
    \ = $value;\n                $smallest_index = $key;\n            }\n        }\n\
    \    }\n    return [$smallest_value, $smallest_index];\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp16d_pikq.php:51\n\
    Stack trace:\n#0 /tmp/tmp16d_pikq.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp16d_pikq.php\
    \ on line 51\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $even_values = [];\n    \n    $len = count($arr);\n    $odd = $len % 2;\n\
    \    $odd_count = 0;\n    $even_values_index = 0;\n    \n    for ($i=0; $i<$len;\
    \ $i++) {\n        $val = $arr[$i];\n        if ($odd_count == 0 && $val % 2)\
    \ {\n            if ($odd_count != 0){\n                array_push($even_values,\
    \ $even_values[$even_values_index]);\n                array_push($even_values_index,\
    \ 0);\n            }\n            $odd_count++;\n        } else if ($odd_count\
    \ != 0 && $val % 2) {\n            if ($odd_count != 0){\n                $even_values[$even_values_index]\
    \ = $val;\n                $even_values_index++;\n            }\n            $odd_count--;\n\
    \        } else {\n            $odd_count = 1;\n            $even_values[$even_values_index]\
    \ = $val;\n            $even_values_index++;\n        }\n    }\n    $even_values_index_temp\
    \ = count($even_values);\n    if ($even_values_index_temp > 0) {\n        array_push($even_values,\
    \ $even_values[$even_values_index_temp-1]);\n    }\n    return $even_values;\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5izg72k7.php:67\n\
    Stack trace:\n#0 /tmp/tmp5izg72k7.php(77): test()\n#1 {main}\n  thrown in /tmp/tmp5izg72k7.php\
    \ on line 67\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \  $arr = array_filter($arr);\n  if (empty($arr)) return [];\n  $min = min($arr);\n\
    \  $index = 0;\n  foreach ($arr as $key => $value) {\n    if ($value % 2 == 0\
    \ && $value === $min) {\n      $arr[$index] = $value;\n      $index++;\n    }\n\
    \  }\n  return $arr;\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo2nvph4z.php:45\n\
    Stack trace:\n#0 /tmp/tmpo2nvph4z.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpo2nvph4z.php\
    \ on line 45\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    sort($arr);\n    return array_filter($arr, function($value){\n        return\
    \ $value % 2 === 0;\n    });\n}\n\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt8294khx.php:39\n\
    Stack trace:\n#0 /tmp/tmpt8294khx.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpt8294khx.php\
    \ on line 39\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $arr = $arr || [];\n    if (count($arr) == 0) {\n        return [];\n   \
    \ }\n    // find the smallest even value and its index\n    $smallest_value =\
    \ array_shift($arr);\n    $smallest_index = array_search($smallest_value, $arr);\n\
    \    while ($smallest_value % 2 == 0) {\n        array_shift($arr);\n        $smallest_value\
    \ = array_shift($arr);\n        $smallest_index = array_search($smallest_value,\
    \ $arr);\n    }\n    $smallest_index += 1;\n    return [\n        $smallest_value,\n\
    \        $smallest_index,\n    ];\n}\n\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, bool given in /tmp/tmp5ygzm4kv.php:29\nStack trace:\n\
    #0 /tmp/tmp5ygzm4kv.php(48): pluck(true)\n#1 /tmp/tmp5ygzm4kv.php(52): candidate(Array)\n\
    #2 /tmp/tmp5ygzm4kv.php(62): test()\n#3 {main}\n  thrown in /tmp/tmp5ygzm4kv.php\
    \ on line 29\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $n = count($arr);\n    if ($n === 0) {\n        return [];\n    }\n\n   \
    \ $index = 0;\n    $result = $arr[0];\n    $smallest_index = 0;\n    foreach ($arr\
    \ as $value) {\n        $index++;\n        if ($value % 2 === 0 && $smallest_index\
    \ === 0) {\n            $smallest_index = $index;\n            $result = $value;\n\
    \        }\n        if ($value < $result) {\n            $result = $value;\n \
    \           $smallest_index = $index;\n        }\n    }\n\n    return [\n    \
    \    $result,\n        $smallest_index,\n    ];\n}\n</code>\n<|/ a |>\n<| c |>\n\
    thank you for giving an example and explaining why it works, much appreciated!\n\
    <|/ c |>\n<| c |>\nThis fails if there is an odd value which occurs before the\
    \ first even value.\n<|/ c |>\n<| a dscore=1 tags=php,algorithm |>\nHere is a\
    \ solution I wrote in C#. It solves the problem with only one pass.\n<code>\n\
    using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace\
    \ ConsoleApp1\n{\n    class Program\n    {\n        static void Main(string[]\
    \ args)\n        {\n            int[] arrInput = new int[] { 4, 2, 3 };\n    \
    \        var result = arrInput.Select((item, index) => new { value, index })\n\
    \                .Where(x => x.value % 2 == 0)\n                .GroupBy(x =>\
    \ x.value)\n                .Select(x => new { value = x.Key, indexes = x.Select(y\
    \ => y.index).ToArray() })\n                .OrderBy(x => x.indexes[0])\n    \
    \            .Select(x => x.value)\n                .First();\n\n            Console.WriteLine(result);\n\
    \            Console.ReadLine();\n        }\n    }\n}\n</code>\nHere is the output:\
    \ \n<code>\n2\n</code>\n<|/ a |>\n<| c |>\nThank you for giving an example and\
    \ explaining why it works, much appreciated!\n<|/ c |>\n<| c |>\nThank you for\
    \ giving your feedback. You are right - I should have made it clear in my answer\
    \ that the solution has only one pass. I edited the answer to reflect that.\n\
    <|/ c |>\n<| a |>\nThis was interesting and I worked it out using JavaScript.\n\
    \n<code>\nvar arr = [4, 2, 3];\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpj_4ftzm7.php
    on line 53

    '
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \  $max = 0;\n  $min = $arr[0];\n  $even = array();\n  for ($i = 0; $i < count($arr);\
    \ $i++) {\n    if ($arr[$i] % 2 === 0) {\n      array_push($even, $arr[$i]);\n\
    \      if ($arr[$i] > $max) {\n        $max = $arr[$i];\n      }\n      if ($arr[$i]\
    \ < $min) {\n        $min = $arr[$i];\n      }\n    }\n  }\n  return array($max,\
    \ $min);\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx0peb_xs.php:49\n\
    Stack trace:\n#0 /tmp/tmpx0peb_xs.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpx0peb_xs.php\
    \ on line 49\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $count = count($arr);\n    if ($count == 0) {\n        return [];\n    }\n\
    \    if ($count <= 10000) {\n        return $arr[array_search($arr[array_shift($arr)]\
    \ + 2, $arr, true)]; // Largest even value\n    }\n    $m = min($arr);\n    $i\
    \ = $count + 1;\n    while ($m * 2 <= $i) {\n        $m++;\n        $i++;\n  \
    \  }\n    if ($m * 2 > $count) {\n        // No even value\n        return [];\n\
    \    }\n    return [$m, $i - 1];\n}\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 4 in /tmp/tmprdxcu3b5.php on line 33\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmprdxcu3b5.php:52\nStack\
    \ trace:\n#0 /tmp/tmprdxcu3b5.php(62): test()\n#1 {main}\n  thrown in /tmp/tmprdxcu3b5.php\
    \ on line 52\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $result = array();\n    $min = PHP_INT_MAX;\n    $min = -1;\n    for ($i\
    \ = 0; $i < count($arr); $i++) {\n        if ($arr[$i] % 2 === 0) {\n        \
    \    $result[$i] = $arr[$i];\n            if ($arr[$i] < $min) {\n           \
    \     $min = $arr[$i];\n            }\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6g1hxdqj.php:46\n\
    Stack trace:\n#0 /tmp/tmp6g1hxdqj.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp6g1hxdqj.php\
    \ on line 46\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    sort($arr);\n    $len = count($arr);\n    $res = array();\n    for ($i =\
    \ 0; $i < $len; $i++) {\n        $idx = $i + ($len - 1) / 2;\n        $res[] =\
    \ ($arr[$idx] === 0 ? ($len === 1 ? 0 : $idx) : $arr[$idx]);\n    }\n    return\
    \ $res;\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 3 in /tmp/tmp39_rh33e.php on line 33\n\n\
    Warning: Undefined array key 3 in /tmp/tmp39_rh33e.php on line 33\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp39_rh33e.php:42\nStack trace:\n\
    #0 /tmp/tmp39_rh33e.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp39_rh33e.php\
    \ on line 42\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $even = [];\n    $odd = [];\n\n    for ($i = 0, $count = count($arr); $i\
    \ < $count; $i++) {\n        $value = $arr[$i];\n\n        if ($value % 2 ===\
    \ 0) {\n            $even[] = $value;\n        }\n        else {\n           \
    \ $odd[] = $value;\n        }\n    }\n\n    $result = $even;\n    sort($odd);\n\
    \    sort($result);\n\n    $i = 0;\n    foreach ($result as $value) {\n      \
    \  if ($value == $odd[$i]) {\n            $i++;\n        }\n        else {\n \
    \           break;\n        }\n    }\n\n    if ($i != count($result)) {\n    \
    \    return $result[count($result) - 1]; // return last node\n    }\n    else\
    \ {\n        return [];\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvbovb645.php:68\n\
    Stack trace:\n#0 /tmp/tmpvbovb645.php(78): test()\n#1 {main}\n  thrown in /tmp/tmpvbovb645.php\
    \ on line 68\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    if (empty($arr)) return array();\n    $ans = array();\n    $index = 0;\n\
    \    $smalest_value = PHP_INT_MAX;\n    foreach ($arr as $node) {\n        if\
    \ ($node % 2 == 0) {\n            $ans[] = $node;\n        }\n        $smalest_value\
    \ = PHP_INT_MAX;\n        if ($node < $smalest_value) {\n            $smalest_value\
    \ = $node;\n            $index = 0;\n        }\n        if ($node < $smalest_value\
    \ + 1) {\n            $index++;\n        }\n    }\n    return empty($ans) ? array()\
    \ : array($smalest_value, $index);\n}\n\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmj64iu3l.php:53\n\
    Stack trace:\n#0 /tmp/tmpmj64iu3l.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpmj64iu3l.php\
    \ on line 53\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $even = array();\n    $smallestIndex = array();\n    $smallestValue = array();\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $even[$key] = $value;\n            if ($value < $smallestValue[$key])\
    \ {\n                $smallestValue[$key] = $value;\n                $smallestIndex[$key]\
    \ = $key;\n            }\n        }\n    }\n    if (count($even) > 0) {\n    \
    \    return $even;\n    } else {\n        return $smallestIndex;\n    }\n}\n\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpyfmjvvga.php on line 34\n\n\
    Warning: Undefined array key 1 in /tmp/tmpyfmjvvga.php on line 34\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpyfmjvvga.php:52\nStack trace:\n\
    #0 /tmp/tmpyfmjvvga.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpyfmjvvga.php\
    \ on line 52\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $min = PHP_INT_MAX;\n    $index;\n    foreach ($arr as $value) {\n      \
    \  $even = true;\n        if ($value < $min) {\n            $min = $value;\n \
    \       }\n        if ($value == $min) {\n            $index = 0;\n          \
    \  if ($min % 2 == 0) {\n                $index = 1;\n            }\n        }\
    \ else {\n            $index = 0;\n            for ($j = $i = 1; $j < count($arr);\
    \ $j++) {\n                if ($arr[$j] == $min && $arr[$j] % 2 == 0) {\n    \
    \                $even = false;\n                    break;\n                }\n\
    \                $index++;\n            }\n        }\n        if (!$even) {\n\
    \            return [];\n        }\n    }\n    return [$min, $index];\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphkxb8t8g.php:62\n\
    Stack trace:\n#0 /tmp/tmphkxb8t8g.php(72): test()\n#1 {main}\n  thrown in /tmp/tmphkxb8t8g.php\
    \ on line 62\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $result = array();\n    foreach ($arr as $key => $value) {\n        $result[]\
    \ = array(\n            'value' => $value,\n            'index' => array_search($value,\
    \ $arr),\n        );\n    }\n    $keys = array();\n    foreach ($result as $key\
    \ => $value) {\n        if ($value['value'] & 1) { // odd value\n            $keys[]\
    \ = $value['index']; // found it\n            unset($result[$key]);\n        }\n\
    \    }\n    return $result ? $keys : array();\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpej5dx0sr.php:50\n\
    Stack trace:\n#0 /tmp/tmpej5dx0sr.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpej5dx0sr.php\
    \ on line 50\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $min = min($arr);\n    foreach ($arr as $i => $v) {\n        if ($v == $min)\
    \ {\n            return [$v, $i];\n        }\n    }\n    return [];\n}\n\"\"\"\
    \n\n\ndef shortest_value_and_index_of_the_least_even_number(arr: list[int]) ->\
    \ (int, int):\n    \"\"\"\n    Returns the index of the least even number in the\
    \ given array if the array has even number of numbers.\n\n    Args:\n        arr:\
    \ an array\n\n    Returns:\n        (least_even_number_index, least_even_number_value)\n\
    \n    Examples:\n        >>> shortest_value_and_index_of_the_least_even_number([4,\
    \ 2, 3])\n        (2, 1)\n        >>> shortest_value_and_index_of_the_least_even_number([1,\
    \ 2, 3])\n        (2, 1)\n        >>> shortest_value_and_index_of_the_least_even_number([])\n\
    \        (0, 2)\n        >>> shortest_value_and_index_of_the_least_even_number([5,\
    \ 0, 3, 0, 4, 2])\n        (0, 1)\n        >>> shortest_value_and_index_of_the_least_even_number([4,\
    \ 5, 3])\n        (0, 4)\n    \"\"\"\n    # Write your code here\n    if not arr\
    \ or len(arr) <= 1:\n        return (0, 2)\n    evens = arr[0::2]\n    odd = arr[1::2]\n\
    \    if len(odd) > len(evens):\n        evens.extend(odd)\n    else:\n       \
    \ odd.extend(evens)\n    even_number = min(evens)\n    odd_number = min(odd)\n\
    \    index = 0\n    while even_number == odd_number:\n        index += 1\n   \
    \     even_number = min(evens)\n        odd_number = min(odd)\n    return index,\
    \ even_number\n\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected double-quoted string "" in /tmp/tmprzxndi34.php
    on line 40

    '
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $result = [];\n    $min = PHP_INT_MAX;\n    $minIndex = 0;\n    $minValue\
    \ = null;\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $tmp = $value;\n            $tmpIndex = $key;\n        }\n  \
    \      else {\n            if ($value < $min) {\n                $min = $value;\n\
    \                $minIndex = $key;\n                $minValue = $value;\n    \
    \        }\n        }\n    }\n    $result[] = $minValue;\n    $result[] = $minIndex;\n\
    \    return $result;\n}\n\n$result = pluck($ar);\n$sortedAr = array();\nfor ($i\
    \ = 0; $i < count($result); $i++) {\n    $sortedAr[$i] = $ar[$result[$i]];\n}\n\
    \nvar_dump($sortedAr);\n</code>\n<|/ a |>\n<| c |>\nNice code. I'd suggest to\
    \ wrap the `$minValue` and `$minIndex` into the `if($value < $min)` to avoid comparing\
    \ unnecessarily to `$min`.\n<|/ c |>\n<| c |>\nAlso you can optimize the code\
    \ with another if condition which checks if $arr is empty\n<|/ c |>\n<| c |>\n\
    Thanks\n<|/ c |>\n<| a tags=algorithm,php |>\nMy code:\n<code>\n<?php\n$arr =\
    \ [1,2,4,5,6];\n$key = max($arr);\nforeach($arr as $key=>$val){\n    if($val>$key){\n\
    \        $max = $val;\n        $maxIndex = $key;\n    }\n}\n\nvar_dump($max,$maxIndex);\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp7tka_s7r.php
    on line 57

    '
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    if (!$arr) {\n        return array();\n    }\n    $even = false;\n    $arr\
    \ = array_flip($arr);\n    arsort($arr);\n    $even = ($arr[0] % 2 === 0);\n \
    \   return $even ? array_shift($arr) : $arr;\n}\n\n/*\n * Question 7\n * Remove\
    \ duplicates from an array\n */\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpw3jvgj_0.php on line 34\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpw3jvgj_0.php:47\nStack\
    \ trace:\n#0 /tmp/tmpw3jvgj_0.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpw3jvgj_0.php\
    \ on line 47\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    return array_reduce($arr, function($carry, $item) {\n        if ($item %\
    \ 2 === 0) {\n            $carry[] = [$item];\n        }\n        return $carry;\n\
    \    }, []);\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2hdpfr0j.php:41\n\
    Stack trace:\n#0 /tmp/tmp2hdpfr0j.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp2hdpfr0j.php\
    \ on line 41\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $evenNodes = array_filter($arr, function($node) { return $node % 2 === 0;\
    \ });\n    return array_reduce($evenNodes, function($result, $node) {\n      \
    \  $smallestValue = min($result, $node);\n        if($smallestValue === $node)\
    \ $smallestIndex = $result;\n        $result = $smallestValue;\n        return\
    \ $result;\n    });\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd_lppfa0.php:41\n\
    Stack trace:\n#0 /tmp/tmpd_lppfa0.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpd_lppfa0.php\
    \ on line 41\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    \n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4inv8u5p.php:35\n\
    Stack trace:\n#0 /tmp/tmp4inv8u5p.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp4inv8u5p.php\
    \ on line 35\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $counts = array_count_values($arr);\n    $min_key = array_search(min($counts,\
    \ null, 1), $counts);\n    $arr[$min_key] = $counts[$min_key];\n    return $arr;\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpj1w5scwz.php on line 30\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpj1w5scwz.php:39\nStack\
    \ trace:\n#0 /tmp/tmpj1w5scwz.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpj1w5scwz.php\
    \ on line 39\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    if (empty($arr)) return [];\n    $result = array();\n    $length = count($arr);\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $result[] = [$value, $key];\n        }\n    }\n    if (count($result)\
    \ == 0 || count($result) == 1) {\n        return $result;\n    }\n    $keys =\
    \ array();\n    foreach ($result as $element) {\n        if (in_array($element,\
    \ $keys)) {\n            return $element;\n        }\n        $keys[] = $element;\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_mpjt_8.php:53\n\
    Stack trace:\n#0 /tmp/tmp1_mpjt_8.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp1_mpjt_8.php\
    \ on line 53\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    if (empty($arr)) {\n        return [];\n    }\n    $min = min($arr);\n  \
    \  $result = array();\n    foreach ($arr as $i => $val) {\n        if ($val ==\
    \ $min) {\n            $result[] = $val;\n        }\n    }\n    if (empty($result))\
    \ {\n        return [];\n    }\n    sort($result);\n    foreach ($result as $k\
    \ => $val) {\n        if ($k % 2 === 0) {\n            return $val;\n        }\n\
    \    }\n    return [];\n}\n</code>\n<|/ a tags=arrays,php,algorithm |>\n<| a tags=arrays,php,algorithm\
    \ |>\nHere is an example in Java, using Java 8 streams:\n<code>\npublic static\
    \ int pickEvenIndex(final int[] values) {\n    return Arrays.stream(values).filter(v\
    \ -> v % 2 == 0).min(Integer::compare).get();\n}\n</code>\nThis returns -1 if\
    \ no even values are present in the array. Else, returns the lowest even index\
    \ present in the array.\n<|/ a dscore=1 |>\n<| a |>\nWe can use array_filter and\
    \ get an even value\n<code>\n<?php\n$array = [6, 3, 9, 1, 5, 8, 2];\n$evenValue\
    \ = array_filter($array, function($value){\n    return ($value % 2 == 0);\n});\n\
    print_r($evenValue);\n</code>\n<|/ a tags=arrays,php,algorithm dscore=1 |>\n<|\
    \ a |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpqkpjg3rp.php
    on line 49

    '
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \  sort($arr);\n  $result = [];\n  foreach ($arr as $key => $value) {\n    if\
    \ ($key % 2 == 0) {\n      $result[$value] = $key;\n    }\n  }\n  return count($result)\
    \ ? $result : [];\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm9zgrv3o.php:42\n\
    Stack trace:\n#0 /tmp/tmpm9zgrv3o.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpm9zgrv3o.php\
    \ on line 42\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $result = array();\n    $evens = array_filter($arr, function($a) { return\
    \ ($a % 2 == 0); });\n    if(count($evens) == 0) return $result;\n    $i = 0;\n\
    \    foreach($evens as $a) {\n        $result[$i] = $a;\n        $i++;\n    }\n\
    \    ksort($result);\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr_ougmet.php:45\n\
    Stack trace:\n#0 /tmp/tmpr_ougmet.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpr_ougmet.php\
    \ on line 45\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    if ($arr === [] || $arr === null || count($arr) === 0) {\n        return\
    \ [];\n    }\n    sort($arr, function ($a, $b) {\n        return $a % 2 === 0\
    \ ? ($a + $b) % 2 : $a % 2 ? $b % 2 : $a < $b ? -1 : 0;\n    });\n    $index =\
    \ -1;\n    foreach ($arr as $key => $value) {\n        if ($value % 2 === 0) {\n\
    \            if ($index === -1) {\n                $index = $key;\n          \
    \  } else {\n                $index = ($index === $key ? $key : $index);\n   \
    \         }\n        }\n    }\n    return [$arr[++$index], $index];\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\nHere's an O(n) solution for any number of\
    \ nodes. It's basically the same as Kaspars answer, but since we're working in\
    \ O(n), this should be more performant for large sets. I also added some comments\
    \ to help explaining the logic.\n<code>\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpirr4a52q.php
    on line 46

    '
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    // code here\n    \n    \n    for ($i = 0; $i < count($arr); $i++) {\n  \
    \      \n        if ($arr[$i] % 2 == 0) {\n            $even = $arr[$i];\n   \
    \         $count = 1;\n            $smallest = $i;\n            \n           \
    \ \n            for ($j = $i; $j < count($arr); $j++) {\n                if ($arr[$j]\
    \ % 2 == 0) {\n                    $even += $arr[$j];\n                    $count++;\n\
    \                    $j++;\n                } else {\n                    break;\n\
    \                }\n            }\n            \n            if ($count == 1)\
    \ {\n                $return[$smallest] = $even;\n            }\n            \n\
    \        }\n        \n    }\n    return $return;\n    \n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $return in /tmp/tmpberpzh8h.php on line 56\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpberpzh8h.php:65\nStack\
    \ trace:\n#0 /tmp/tmpberpzh8h.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpberpzh8h.php\
    \ on line 65\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $arr = array_filter($arr, function ($val) {\n        return ($val % 2 ===\
    \ 0);\n    });\n    if (!$arr) {\n        return [];\n    }\n    $arr = array_flip($arr);\n\
    \    return array_search(0, $arr);\n}\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoonuzyqz.php:42\n\
    Stack trace:\n#0 /tmp/tmpoonuzyqz.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpoonuzyqz.php\
    \ on line 42\n"
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $smallest = array();\n    $smallestIndex = 0;\n    $len = count($arr);\n\
    \    for ($i = 0; $i < $len; ++$i) {\n        $smallestValue = $arr[$i];\n   \
    \     if ($smallestValue > 0 && (($i + 1) % 2 === 0)) {\n            if ($smallestValue\
    \ == $smallest[$smallestIndex]) {\n                continue;\n            }\n\
    \            $smallestIndex = array_search($smallestValue, $arr);\n          \
    \  if ($smallestIndex === false) {\n                $smallest = array();\n   \
    \             $smallestIndex = 0;\n            }\n            $smallest[] = $smallestValue;\n\
    \        }\n    }\n    if (!empty($smallest)) {\n        return array($smallest[0],\
    \ $smallestIndex);\n    }\n    return array();\n}\n'''\n\n_ex_3 = '''\nGiven an\
    \ array of integers, you are asked to find the sum of all of the integers that\
    \ are smaller than the given one (that is, whose values are less than or equal\
    \ to the given one).\nYou should use only constant number of calls to Array#reduce()\
    \ method. The input array is very large, that is why it is not possible to invoke\
    \ Array#reduce() method in O(1) time. The output array will have the length of\
    \ the input array. If the input array is empty, then the output array will be\
    \ empty.\nConstraints:\n1 <= elements.length <= 10000\n0 <= elements[i] <= 1000000\n\
    '''\n\n_ex_4 = '''\nGiven a binary tree and a target value, you need to find the\
    \ closest node in the tree that has this target value.\nConstraints:\nBinarySearchTree.value\
    \ is a number\nBinarySearchTree.left is a non-null BinarySearchTree\nBinarySearchTree.right\
    \ is a non-null BinarySearchTree\nBinarySearchTree.parent is null\nBinarySearchTree.isEmpty\
    \ returns true\nBinarySearchTree.toString() returns non-empty string\n\n * 10\n\
    \   /\\\n  3   11\n / \\  /\\\n2   5 4  7\nInput: BinarySearchTree(root=null,\
    \ value=5), targetValue=5\nOutput: 3 // the closest node in the tree has value\
    \ 3, and it is right child of root\n'''\n\n_ex_5 = '''\nGiven an integer array,\
    \ find the product of distinct consecutive numbers following a given set of rules:\n\
    \ * 0 should be treated as the number itself and should not be multiplied.\n *\
    \ A number should be treated as distinct from the numbers that come after it only\
    \ if it can be written as the sum of two distinct consecutive numbers.\n * If\
    \ the array is empty, return 0.\n * You can assume that the array is non-empty.\n\
    \ * Example 1:\nInput: [-3, 0, 1, 2]\nOutput: 6\nExplanation: The first three\
    \ numbers are -3, 0, 1, 2\nThe product of consecutive numbers is 6: -3 + (0 +\
    \ 1) + (\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected single-quoted string "" in /tmp/tmp4598i65w.php
    on line 52

    '
  timestamp: 1660028560
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $minValue = PHP_INT_MAX;\n    $minIndex = 0;\n    $odd = false;\n    for\
    \ ($i = 0, $len = count($arr); $i < $len; $i++) {\n        if ($odd && $arr[$i]\
    \ % 2 === 0) {\n            if ($minValue > $arr[$i]) {\n                $minValue\
    \ = $arr[$i];\n                $minIndex = $i;\n            }\n            $odd\
    \ = false;\n        } else {\n            $odd = !$odd;\n        }\n    }\n  \
    \  return array($minValue, $minIndex);\n}\n\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2mssswjr.php:52\n\
    Stack trace:\n#0 /tmp/tmp2mssswjr.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp2mssswjr.php\
    \ on line 52\n"
  timestamp: 1660028560
