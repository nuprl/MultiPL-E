name: HumanEval_88_sort_array
language: php
prompt: "<?php\n// Given an array of non-negative integers, return a cophp of the\
  \ given array after sorting,\n// you will sort the given array in ascending order\
  \ if the sum( first index value, last index value) is odd,\n// or sort it in descending\
  \ order if the sum( first index value, last index value) is even.\n// Note:\n//\
  \ * don't change the given array.\n// Examples:\n// >>> sort_array(array())\n//\
  \ array()\n// >>> sort_array(array(5))\n// array(5)\n// >>> sort_array(array(2,\
  \ 4, 3, 0, 1, 5))\n// array(0, 1, 2, 3, 4, 5)\n// >>> sort_array(array(2, 4, 3,\
  \ 0, 1, 5, 6))\n// array(6, 5, 4, 3, 2, 1, 0)\nfunction sort_array($array) {\n"
tests: "function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1, 2,\
  \ 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
  \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11, 0)) !== array(0,\
  \ 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(21,\
  \ 14, 23, 11)) !== array(23, 21, 14, 11)) { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["    $sum_array = [];\n    foreach ($array as $key => $value) {\n  \
    \      $sum_array[] = $value;\n    }\n    sort($sum_array);\n    $result = [];\n\
    \    foreach ($sum_array as $key => $value) {\n        $result[] = $array[$key];\n\
    \    }\n    return $result;\n}\n\n$array = [1, 5, 3, 2, 10, 4];\n$result = array_unique($array);\n\
    print_r($result);", "  $result = array();\n  $sum = 0;\n  $result = array_values($array);\n\
    \  foreach ($result as $key => $val) {\n    $sum += $val;\n    if ($sum % 2 ==\
    \ 1) {\n      sort($result);\n      $sum = 0;\n      $result = array_values($array);\n\
    \    } else {\n      sort($result);\n      $sum = 0;\n      $result = array_reverse($result);\n\
    \    }\n  }\n  return $result;\n}", "  $sum = 0;\n  foreach ($array as $key =>\
    \ $value) {\n    $sum += $value;\n  }\n  $odd = ($sum % 2 != 0);\n  return $odd\
    \ ? rsort($array, SORT_NUMERIC) : arsort($array, SORT_NUMERIC);\n}\n</code>\n\
    <|/ a |>\n<| a tags=php,arrays,sorting |>\nThis was my original solution:\n<code>\n\
    <?php", "    if (count($array) <= 0) return array();\n    $sorted = array();\n\
    \    $array_size = count($array);\n    $first_index = 0;\n    $last_index = count($array)\
    \ - 1;\n    $first_index_value = $array[$first_index];\n    $last_index_value\
    \ = $array[$last_index];\n    $sum = $first_index_value + $last_index_value;\n\
    \    while($first_index <= $last_index) {\n        if ($sum % 2 == 1) {\n    \
    \        $sorted[$first_index] = $first_index_value;\n            $first_index++;\n\
    \        } else {\n            $sorted[$first_index] = $last_index_value;\n  \
    \          $last_index--;\n        }\n        $sum = $first_index_value + $last_index_value;\n\
    \    }\n    return $sorted;\n}\n", "    $sum = 0;\n    foreach ($array as $value)\
    \ {\n        $sum += $value;\n    }\n    $sum = ($sum + $sum) % 2;\n    if ($sum\
    \ === 0) {\n        return $array;\n    }\n    $array = array_reverse($array,\
    \ true);\n    sort($array, SORT_NUMERIC);\n    return $array;\n}", "    // check\
    \ whether the given array is empty or not\n    if (empty($array)) {\n        return\
    \ $array;\n    }\n    $array = array_map(function ($value) {\n        return floatval($value);\n\
    \    }, $array);\n    $length = count($array);\n    // get sum of the first index\
    \ and last index\n    $first = $array[floor(array_shift($array) / 2)];\n    $last\
    \ = $array[array_pop($array) / 2];\n    // check whether the sum of the first\
    \ and last index is odd or even\n    if ($first > $last) {\n        return array_reverse($array);\n\
    \    }\n    if ($first == $last) {\n        // if sum is even, do nothing\n  \
    \      return $array;\n    }\n    // if sum is odd, reverse the array\n    return\
    \ array_reverse($array, true);\n}\n", "    if (!is_array($array)) {\n        throw\
    \ new Exception('Invalid array given');\n    }\n    $temp = array();\n    foreach\
    \ ($array as $val) {\n        if (!is_int($val)) {\n            throw new Exception('Invalid\
    \ array value given');\n        }\n        $temp[$val] = $val;\n    }\n    asort($temp);\n\
    \    return array_values($temp);\n}\n</code>\n<|/ a tags=sorting,arrays,php,algorithm\
    \ |>\n<| c |>\nSorry for my bad English. Thank you for the answer!\n<|/ c |>\n\
    <| a tags=sorting,arrays,php,algorithm |>\n<code>", "    if (!is_array($array))\
    \ {\n        throw new InvalidArgumentException('Parameter must be an array');\n\
    \    }\n    if (count($array) < 2) {\n        return $array;\n    }\n    $sum\
    \ = array_sum($array);\n    if (!is_int($sum)) {\n        throw new InvalidArgumentException('Parameter\
    \ must have numeric values');\n    }\n    $odd = $sum % 2;\n    $array = array_map(function\
    \ ($a) use ($odd, $sum) {\n        if (is_int($a) && $a >= 0 && $a < $sum) {\n\
    \            return $odd == ($sum - $a) ? 1 : -1;\n        }\n        return $a;\n\
    \    }, $array);\n    return array_filter(array_map(function ($a) {\n        return\
    \ $a['key'];\n    }, $array), function ($a) {\n        return $a;\n    });\n}",
  "    if (empty($array)) {\n        return array();\n    }\n    $sum = $array[0]+$array[count($array)-1];\n\
    \    if ($sum%2==1) {\n        return array_merge($array,array_reverse($array));\n\
    \    } else {\n        return $array;\n    }\n}", "  $sum = 0;\n  foreach ($array\
    \ as $number) {\n    $sum += $number;\n  }\n  if ($sum < 0) {\n    return $array;\n\
    \  }\n  $reverse = false;\n  if ($sum % 2 !== 0) {\n    $reverse = true;\n  }\n\
    \  return array_reverse($array, $reverse);\n}\n", "    if (!empty($array)) {\n\
    \        // Calculate the sum using the first and last values.\n        $sum =\
    \ $array[0] + $array[$array.length - 1];\n        // Sort the array by ascending\
    \ value if sum is odd, or descending value if sum is even.\n        if ($sum %\
    \ 2 == 1) {\n            asort($array);\n        } else {\n            arsort($array);\n\
    \        }\n    }\n    return $array;\n}", "    if (empty($array)) {\n       \
    \ return array();\n    }\n    $sum = $array[0] + $array[$array.length - 1];\n\
    \    if ($sum % 2) {\n        return array_reverse($array);\n    }\n    return\
    \ $array;\n}\n</code>\n<|/ a tags=php dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n", "    // write your code here\n    $sum = 0;\n    foreach ($array as\
    \ $index => $number) {\n        $sum += $number;\n    }\n    if ($sum % 2 == 1)\
    \ {\n        return $array;\n    } else {\n        $array = array_reverse($array);\n\
    \        return $array;\n    }\n}\n", "    if (empty($array)) {\n        return\
    \ array();\n    }\n\n    $array[] = null;\n    $length   = count($array);\n  \
    \  $sum      = array_sum($array);\n\n    // If the sum is odd, reverse the array\n\
    \    if ($sum % 2 == 1) {\n        $array = array_reverse($array);\n    }\n\n\
    \    // Sort the array\n    sort($array);\n\n    return $array;\n}\n</code>\n\
    <|/ a |>\n<| a |>\n<code>", "  // Your code here\n\n  return $array;\n}\n</code>\n\
    <|/ q dscore=0 |>\n<| c |>\nCan you share some code?\n<|/ c |>\n<| c |>\nI have\
    \ added the code to the question\n<|/ c |>\n<| c |>\nWhere is the sorting code?\n\
    <|/ c |>\n<| c |>\nI have added the code to the question\n<|/ c |>\n<| a dscore=0\
    \ |>\nYou can try to sort it by using array_reverse function.\n<code>", "    $sum\
    \ = array_sum($array);\n    return $array[$sum % 2 == 0] ?\n        array_reverse($array)\
    \ :\n        $array;\n}", "    if (!count($array)) {\n        return array();\n\
    \    }\n\n    $sum = array_sum($array);\n    if ($sum % 2 == 1) {\n        sort($array,\
    \ SORT_NUMERIC);\n    } else {\n        sort($array, SORT_NUMERIC, SORT_DESC);\n\
    \    }\n\n    return $array;\n}", "    $result = array();\n    sort($array);\n\
    \    foreach ($array as $key => $value) {\n        $result[$key] = $value;\n \
    \   }\n    return $result;\n}\n", "\tsort($array);\n\t$sum = 0;\n\tforeach ($array\
    \ as $key => $value) {\n\t\t$sum+= $value;\n\t\tif ($sum%2) {\n\t\t\tarray_reverse($array);\n\
    \t\t}\n\t}\n\treturn $array;\n}\n", "    // O(1) time & space\n    if (!$array\
    \ || count($array) <= 1) {\n        return $array;\n    }\n    $sum = 0;\n   \
    \ foreach ($array as $key => $val) {\n        $sum += $val;\n    }\n    if (!is_int($sum)\
    \ || !is_int(end($array))) {\n        return $array;\n    }\n    if ($sum % 2)\
    \ {\n        $array = array_reverse($array);\n    }\n    return $array;\n}", "\t\
    $odd = $even = 0;\n\tforeach ($array as $key => $value) {\n\t\tif ($value % 2\
    \ == 0) $even++;\n\t\telse $odd++;\n\t\tif ($odd > $even) break;\n\t}\n\t$odd\
    \ = array_keys($array, -$odd, -1);\n\t$even = array_keys($array, 0, $even);\n\t\
    return array_merge($odd, $even);\n}", "    $evenSum = array_sum($array);\n   \
    \ $oddSum = array_sum(array_reverse($array));\n    return ($oddSum % 2 == 0) ?\
    \ $array : $array;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php\
    \ |>\n<code>", "    return is_array($array) && count($array) > 1 && $array[0]\
    \ <= $array[count($array)-1]\n        ? $array\n        : $array\n        ?: [max(-$array[0],\
    \ $array[count($array)-1]), min($array[0], $array[count($array)-1])];\n}\n", " \
    \   $odd_or_even = array_sum(array_slice($array, -1) % 2 ? array_slice($array,\
    \ 0, -1) : array_slice($array, 0, -1));\n    $odd_or_even = array_sum(array_slice($array,\
    \ 0, -1));\n    return ($odd_or_even % 2) ? array_reverse($array) : $array;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis solution is actually wrong, please read my\
    \ comment in the other answer for more details.\n<|/ c |>\n<| c |>\nOk, so my\
    \ answer only works for even number of elements, but not for odd number of elements.\
    \ I understand now what you meant, sorry for that. I'm going to delete it or edit\
    \ my answer to reflect your new comment.\n<|/ c |>\n<| c |>\nOk, sorry about that,\
    \ I will leave it here in case it can help someone someday :) The only thing I\
    \ would add is that if you're going to be doing this in a loop, you might want\
    \ to use array_filter with a callback function to reduce the number of array accesses\
    \ you do per iteration\n<|/ c |>\n<| a dscore=1 tags=php,sorting,algorithm |>\n\
    I believe that this is an example of the Kaspar sequence that is used to generate\
    \ all the elements of the Fibonacci sequence. An example of it in use can be found\
    \ at http://en.wikipedia.org/wiki/Fibonacci_number.\n<|/ a |>\n<| a tags=php,sorting,algorithm\
    \ |>\n<code>\n$result = $input - $input[0];\nif($result % 2){\n  $result = -$result;\n\
    }\n</code>\nThe sum of any two numbers in any given sequence is even if the number\
    \ is odd, or the sum of any two numbers in any given sequence is negative if the\
    \ number is even.\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work with `[1, 3,\
    \ 4, 5]` because `5 - 3` evaluates to 1, but then `1 % 2` evaluates to 0.\n<|/\
    \ c |>\n<| c |>\nYou are correct about how it works. My understanding of the problem\
    \ is that the OP wants to sort a sequence of numbers by descending order.\n<|/\
    \ c |>\n<| c |>\nOkay, so I got it wrong, sorry about that. I've updated my answer.\
    \ It will now sort arrays of odd/even lengths.\n<|/ c |>\n<| c |>\nThe solution\
    \ is wrong. Please read the comments in my answer\n<|/ c |>\n<| a dscore=0 tags=php,sorting,algorithm\
    \ |>\nYou could try this solution:\n<code>\n", "    $sum = 0;\n    $sum_2 = 0;\
    \ //sum * 2\n    foreach ($array as $val) {\n        $sum += $val;\n        $sum_2\
    \ += $val * $val;\n    }\n    return $array;\n}\n", "\tsort($array);\n\t$result\
    \ = [];\n\tfor ($i = 0; $i < count($array); $i++) {\n\t\t$result[$i] = $array[$i];\n\
    \t}\n\treturn $result;\n}\n", "\tsort($array);\n\t$total = array_sum($array);\n\
    \t$odd = $total%2==1;\n\treturn $odd == true ? array_reverse($array) : $array;\n\
    }", "    // sort $array in ascending order, if the sum of the first and last item\
    \ is odd\n    if ($array[0]+$array[count($array)-1]%2 > 0) {\n        array_multisort($array,\
    \ SORT_DESC);\n    }\n    // sort $array in descending order, if the sum of the\
    \ first and last item is even\n    else {\n        array_multisort($array, SORT_ASC);\n\
    \    }\n    return $array;\n}\n", "  $sum = 0;\n  $first = 1;\n  $last = count($array)\
    \ - 1;\n  $pivot = $first + ($last - $first) / 2;\n  while ($first <= $last) {\n\
    \    if ($sum % 2 === 1) {\n      if ($first > $pivot && $last > $pivot) {\n \
    \       $array[$first] = $array[$pivot];\n        $array[$pivot] = $first;\n \
    \       $array[$last] = $array[$first];\n        $array[$first] = $last;\n   \
    \   }\n      else {\n        $array[$first] = $first;\n        $array[$first]\
    \ = $last;\n      }\n    }\n    else {\n      if ($first < $pivot) {\n       \
    \ $array[$first] = $array[$pivot];\n        $array[$pivot] = $first;\n      }\n\
    \      else {\n        $array[$last] = $last;\n      }\n    }\n    $sum++;\n \
    \   $first++;\n    $last--;\n  }\n  return $array;\n}", "  foreach ($array as\
    \ &$value) {\n    if (is_int($value)) {\n      $value = $value - intval($value);\n\
    \    }\n  }\n  usort($array, 'sort_array_func');\n  return $array;\n}\n", "  $sum_first_first_index\
    \ = array_sum($array);\n  $sum_last_last_index = array_sum(array_reverse($array));\n\
    \  if($sum_first_first_index % 2 === 0) {\n    return array_reverse($array);\n\
    \  }\n  return $array;\n}", "  // Your code here\n  $array = array_reverse($array);\n\
    \  $sum = 0;\n  $result = [];\n  foreach ($array as $val) {\n    $sum = $sum +\
    \ $val;\n    $result[$sum] = $val;\n  }\n  return $result;\n}\n\n/**\n * \u7ED9\
    \u5B9A\u4E00\u4E2A\u6574\u6570\u6570\u7EC4\uFF0C\u8F93\u51FA\u8BE5\u6570\u7EC4\
    \u4E2D\u6240\u6709\u6570\u5B57\u7684\u548C\u3002\n * \u8F93\u5165\u7684\u6570\u7EC4\
    \u662F\u4EE5\u91CD\u590D\u51FA\u73B0\u7684\u5143\u7D20\u7684\u987A\u5E8F\u4E0D\
    \u80FD\u53D8\u3002\n * \u4F8B\u5982, \u8F93\u5165\u6570\u7EC4{2,3,1,1,1}\uFF0C\
    \u56E0\u4E3A3\u548C1\u51FA\u73B0\u4E86\u4E24\u6B21\uFF0C\u6240\u4EE5\u8FD4\u56DE\
    6\u3002\n */", "    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum\
    \ % 2 == 1) {\n        usort($array, [__NAMESPACE__ . '\\\\sort_array_desc']);\n\
    \    } else {\n        usort($array, [__NAMESPACE__ . '\\\\sort_array_asc']);\n\
    \    }\n    return $array;\n}\n", "    if (count($array) === 0) {\n        return\
    \ array();\n    }\n    if (count($array) === 1) {\n        return $array;\n  \
    \  }\n    $sumFirst = array_sum(array_slice($array, 0, 1, true));\n    $sumLast\
    \ = array_sum(array_slice($array, -1, 1));\n    $numFirst = count($array) - 1;\n\
    \    $numLast = count($array);\n    if ($sumFirst % 2 !== 0) {\n        $firstArray\
    \ = array_reverse($array);\n    } else {\n        $firstArray = $array;\n    }\n\
    \    if ($sumLast % 2 !== 0) {\n        $secondArray = array_slice($array, 0,\
    \ 1);\n    } else {\n        $secondArray = array_slice($array, 1, count($array));\n\
    \    }\n    $array = [];\n    for ($i = 0; $i < $numFirst; $i++) {\n        array_push($array,\
    \ array_pop($firstArray));\n    }\n    for ($i = 0; $i < $numLast; $i++) {\n \
    \       array_push($array, array_pop($secondArray));\n    }\n    return $array;\n\
    }\n", "    $array_length = count($array);\n    $array_sum = array_sum($array);\n\
    \    if ($array_sum & 1) {\n        $array = array_reverse($array);\n    }\n \
    \   $array_sum = array_sum($array);\n    if ($array_sum & 1) {\n        $array\
    \ = array_reverse($array);\n    }\n    return $array;\n}\n", "    $sum = 0;\n\
    \    $len = count($array);\n    for ($i = 0; $i < $len; $i++) {\n        $sum\
    \ += $array[$i];\n    }\n\n    $arr = array();\n    $isOdd = (1 & $sum) % 2;\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if ($isOdd !== 0) {\n          \
    \  $arr[] = $array[$i];\n        }\n\n        $isOdd ^= 1;\n    }\n\n    return\
    \ $arr;\n}\n", "\tforeach ($array as $key => &$value) {\n\t\t$value = array_key_exists($key,\
    \ $array) ? $array[$key] : $value;\n\t\t$value = $key + $value;\n\t}\n\tuasort($array,\
    \ 'sort_array_callback');\n\treturn $array;\n}", "    $result = [];\n    // find\
    \ the sum of the first and last element\n    $sum = $array[0] + $array[count($array)\
    \ - 1];\n    // if the sum is odd, sort the array in ascending order\n    if ($sum\
    \ % 2 == 1) {\n        foreach ($array as $i => $value) {\n            $result[]\
    \ = $value;\n        }\n    } else {\n        foreach ($array as $i => $value)\
    \ {\n            $result[] = $value;\n        }\n        foreach ($array as $i\
    \ => $value) {\n            $result[] = $value;\n        }\n    }\n    return\
    \ $result;\n}\n</code>\n<|/ a tags=php,sorting dscore=0 |>\n<| a dscore=0 |>\n\
    <code>", "    $sum = 0;\n    foreach ($array as $n) {\n        $sum += $n;\n \
    \   }\n    if ($sum % 2 != 0) {\n        array_multisort($array, SORT_DESC);\n\
    \    } else {\n        array_multisort($array, SORT_ASC);\n    }\n    return $array;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is actually a very good answer to\
    \ the question. Although you miss the point of the question which explicitly states\
    \ that your solution should handle multiple input arrays (not just one). Please\
    \ consider refactoring your answer to be a little more thorough.\n<|/ c |>\n<|\
    \ c |>\nI'm sorry, but your answer does not do what the OP asked for at all. The\
    \ OP asked for the combination of multiple sorted arrays. Your function does not\
    \ do that at all. Furthermore, this code does not return the sorted arrays, just\
    \ the sums.\n<|/ c |>\n<| a dscore=0 |>\nThis is my solution.\n<code>", "    if\
    \ (!is_array($array)) return $array;\n    $sum = $array[0] + $array[$array.length-1];\n\
    \    if ($sum % 2 === 1)\n        sort($array, SORT_NUMERIC);\n    else\n    \
    \    sort($array, SORT_NUMERIC, SORT_DESC);\n    return $array;\n}\n", "    $sum\
    \ = 0;\n    $n = count($array);\n    for ($i = 0; $i < $n; $i++) {\n        $sum\
    \ += $array[$i];\n    }\n    $even = $n % 2 == 0 ? true : false;\n    return $even\
    \ ? array_reverse($array) : $array;\n}\n", "    $sum = 0;\n    foreach ($array\
    \ as $key => $val) {\n        $sum += $val;\n    }\n    if ($sum % 2 == 1) {\n\
    \        // even\n        array_multisort($array, SORT_DESC);\n    } else {\n\
    \        // odd\n        array_multisort($array);\n    }\n    return $array;\n\
    }\n</code>\n<|/ a dscore=0 tags=php |>\n<| a dscore=0 |>\nThis one can sort array\
    \ by any order you want\n<code>", "    if (!is_array($array) || empty($array))\
    \ {\n        return $array;\n    }\n    $sum = 0;\n    $coph = array();\n    foreach\
    \ ($array as $value) {\n        $coph[] = $value;\n        $sum += $value;\n \
    \   }\n    if ($sum % 2) {\n        array_reverse($coph);\n    }\n    sort($coph);\n\
    \    return $coph;\n}\n", "  // Write your code here\n  $sum = 0;\n  foreach ($array\
    \ as $key => $val) {\n    $sum += $val;\n  }\n  if ($sum % 2 == 1) {\n    arsort($array);\n\
    \  } else {\n    reverse($array);\n  }\n  return $array;\n}\n</code>\n<|/ a dscore=1\
    \ tags=arrays,php |>\n<| a |>\nI wrote my answer as simply as possible but feel\
    \ free to use this approach with some adaptation to make it more optimized if\
    \ you wish.\n<code>", "    $array = array_reverse($array);\n    $array = array_merge($array,\
    \ [array_sum($array)-1]);\n    $array = array_merge($array, array_reverse([array_sum($array)-1]));\n\
    \    $array = array_merge($array, [array_sum($array)-2]);\n    $array = array_merge($array,\
    \ array_reverse([array_sum($array)-2]));\n    return $array;\n}\n", "    $array\
    \ = array_values($array);\n\n    if (!is_array($array) || count($array) < 2) {\n\
    \        return $array;\n    }\n\n    $odd = array_sum($array) % 2 === 1;\n\n\
    \    // Sort array in descending order if sum is odd.\n    if ($odd) {\n     \
    \   array_reverse($array);\n    }\n\n    // Sort array in ascending order if sum\
    \ is even.\n    $sorted = sort($array);\n\n    // Sort array in descending order\
    \ if sum is odd.\n    if ($odd) {\n        array_reverse($sorted);\n    }\n\n\
    \    return $sorted;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 |>\n\
    <code>", "    $result = [];\n    foreach ($array as $value) {\n        if ($value\
    \ > 0) {\n            $result[] = $value;\n        } else {\n            $result[]\
    \ = abs($value);\n        }\n    }\n\n    // sort from larger to smaller\n   \
    \ sort($result, SORT_NUMERIC);\n    foreach ($result as $k => $value) {\n    \
    \    // sort from larger to smaller\n        sort($result, SORT_NUMERIC);\n  \
    \  }\n\n    return $result;\n}\n", "    if (!count($array) || $array[0] == 0)\
    \ return $array;\n    $array[$array[0]] = $array[0];\n    for ($i = 1; $i < count($array);\
    \ $i++) {\n        if ($array[($i - 1) + count($array)] != $array[($i - 1)]) {\n\
    \            $array[$i] = $array[($i - 1) + count($array)];\n        } else {\n\
    \            $array[$i] = $array[($i - 1)];\n        }\n    }\n    return $array;\n\
    }\n", "    $sum = array_sum($array);\n    if ($sum % 2 == 1) {\n        return\
    \ $array = array_reverse($array);\n    }\n    sort($array);\n    return $array;\n\
    }\n", "    $array = array_map('intval', $array);\n    sort($array, SORT_NUMERIC);\n\
    \    return $array;\n}\n", "  sort($array);\n  $sum = array_sum($array);\n  if\
    \ ($sum % 2 === 1) {\n    return array_reverse($array);\n  } else {\n    return\
    \ $array;\n  }\n}\n</code>\n<|/ a |>\n<| c |>\nThe above code will change the\
    \ original array in place. That's why I prefer not to post this as an answer.\n\
    <|/ c |>\n<| c |>\nIt does not change the original array in place, it returns\
    \ the sorted array.\n<|/ c |>\n<| c |>\nThis code is very clean and simple, however\
    \ it's worth noting that this approach creates a new array rather than mutating\
    \ the original one. If you are working with large arrays, this can really come\
    \ into play and if you're using array_sum() you might want to consider using an\
    \ alternative such as https://www.php.net/manual/en/function.array-map.php to\
    \ create a new array with the sums. I did this and it works great.\n<|/ c |>\n\
    <| c |>\nThe code I posted sorts the given array in ascending order. This code\
    \ does not change the original array.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>",
  "    $sum = array_sum($array);\n    $odd = $sum % 2;\n    if ($odd === 0) {\n  \
    \      array_multisort(array_keys($array), SORT_ASC, SORT_NUMERIC, $array);\n\
    \    } else {\n        array_multisort(array_keys($array), SORT_DESC, SORT_NUMERIC,\
    \ $array);\n    }\n    return $array;\n}\n", "    if (empty($array)) {\n     \
    \   return array();\n    }\n\n    $sum = array_sum($array);\n\n    if ($sum &\
    \ 1) {\n        $array = array_reverse($array);\n    }\n\n    sort($array);\n\
    \    return $array;\n}\n</code>\n<|/ a dscore=0 tags=php,arrays,sorting |>\n<|\
    \ a dscore=0 |>\n<code>\n$numbers = array(5, 2, 7, 10, 3, 12, 12, 13, 15, 11);\n\
    \n$sum = $numbers[0];\n\nforeach ($numbers as $value) {\n    $sum += $value;\n\
    }\n\n$sum = $sum % 2;\nif ($sum) {\n    $numbers = array_reverse($numbers);\n\
    }\n\nvar_dump($numbers);\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\n\
    Please add some explanation to your answer such that others can learn from it\n\
    <|/ c |>\n<| c |>\nI did not understand your explanation about array_reverse\n\
    <|/ c |>\n<| c |>\nWhy do you reverse the array? `array_reverse` reverses the\
    \ whole array.\n<|/ c |>\n<| c |>\nI didn't understand his explanation as well.\
    \ The best way to do this in PHP I think is using a foreach.\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$numbers = array();\n$numbers = array(5, 2, 7, 10, 3, 12, 12, 13,\
    \ 15, 11);\n$sum = $numbers[0];\n$numbers = array_filter($numbers, function($num)\
    \ use ($sum) {\n    $sum += $num;\n    return $sum & 1;\n});\nprint_r($numbers);\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "\t$sum = 0;\n\tforeach ($array\
    \ as $n) {\n\t\t$sum += $n;\n\t}\n\tif (!isset($sum)) {\n\t\treturn $array;\n\t\
    }\n\tif ($sum % 2 === 0) {\n\t\tarray_multisort($array, SORT_DESC, SORT_NUMERIC,\
    \ $array);\n\t} else {\n\t\tarray_multisort($array, SORT_ASC, SORT_NUMERIC, $array);\n\
    \t}\n\treturn $array;\n}\n\n/**\n * \u5224\u65AD\u662F\u5426\u4E3A\u6570\u7EC4\
    \n * @param $array \u6570\u7EC4\n * @return bool\n */", "    $new_array = array();\n\
    \    $sum_array = $array[0];\n    $is_even = true;\n    foreach ($array as $val)\
    \ {\n        if ($val != 0) {\n            $new_array[] = $val;\n            $sum_array\
    \ += $val;\n        }\n        if ($sum_array > 0 && $sum_array % 2 != 0) {\n\
    \            $is_even = false;\n        }\n    }\n    if ($is_even) {\n      \
    \  array_reverse($new_array);\n    }\n    return $new_array;\n}\n</code>\n<|/\
    \ a |>\n<| a tags=arrays,php,sorting |>\nThis solution uses array_reduce.\nThe\
    \ only trick is that array_reduce requires an array as input. So first we need\
    \ to convert the array in to an array. By using array_values we can do this: array_values\
    \ \u2014 Return all the values of an array. \nNow we can use array_reduce to accumulate\
    \ the values using our custom comparator function. The $acc parameter provides\
    \ the accumulated value and $val provides the current value. \nIf our accumulated\
    \ value is odd, we return 1, otherwise we return -1. \nThe next thing to do is\
    \ just sort the accumulated values. We can do this by using usort, which takes\
    \ a custom comparison function. \n<code>\n$numbers = array(2, 4, 3, 0, 1, 5);\n\
    \nusort(array_reduce(array_values($numbers), function($acc, $val) {\n    return\
    \ $acc % 2 == 1 ? 1 : -1;\n}), function($a, $b) {\n    return $a == $b ? 0 : ($a\
    \ < $b) ? -1 : 1;\n});\n\nprint_r($numbers);\n</code>\n<|/ a dscore=2 |>\n<| c\
    \ |>\nThanks mate. Nice and clean! :)\n<|/ c |>\n<| a |>\n<code>\n$array = [\n\
    \        0, 2, 4, 5, 3, 6, \n        1, 4, 5, 1, 2, 1, \n        1, 3, 4, 1, 2,\
    \ 3, \n        1, 4, 2, 3, 5, 2, \n        1, 2, 4, 3, 2, 4, \n        1, 2, 5,\
    \ 3, 4, 6, \n        1, 4, 3, 2, 5, 1, \n        1, 2, 3, 4, 4, 2, \n        1,\
    \ 3, 4, 2, 3, 3, \n        1, 3, 5, 4, 5, 1, \n        1, 2, 2, 3, 2, 3, \n  \
    \      1, 3, 3, 4, 3, 4, \n        1, 3, 4, 2, 1, 5, \n        1, 2, 3, 1, 2,\
    \ 3, \n        1, 2, 4, 3, 5, 2, \n        1, 2, 3, 3, 2, 4, \n        1, 2, 4,\
    \ 3, 5, 3, \n        1, 3, 4, 2, 3, 4, \n        1, 4, 3, 2, 3, 4, \n        1,\
    \ 3, 5, 4, 5, 4, \n        1, 3, 4, 2, 3, 5, \n        1, 3, 4, 2, 3, 3, \n  \
    \      1, 3, 5, 2, 5, 1, \n        1, 2, 2, 2, 3, 2, \n        1, 2, 3, 4, 2,\
    \ 5, \n        1, 3, 4, 2, 3, 3, \n        1, 3, 4, 2, 3, 5, \n        1, 3, 4,\
    \ 2, 3, 3, \n        1, 3, 4, 2, 3, 5, \n        1, ", "    $array = array_reverse($array);\n\
    \    $sum = $array[0] + $array[$array.length - 1];\n    return ($sum % 2 == 1)\
    \ ? $array : $array;\n}\n", "  foreach ($array as $key => $value) {\n    if ($value\
    \ % 2) {\n      $array[$key] = $value - 1;\n    } else {\n      $array[$key] =\
    \ $value;\n    }\n  }\n\n  return $array;\n}\n</code>\n<|/ a |>\n<| a tags=arrays,php\
    \ |>\n<code>\n<?php", "    if (count($array) == 0)\n        return array();\n\
    \    $even = false;\n    $odd = false;\n    $sum = 0;\n    foreach ($array as\
    \ $value) {\n        $sum += $value;\n        if ($sum % 2 == 0) {\n         \
    \   $even = true;\n        } else {\n            $odd = true;\n        }\n   \
    \ }\n    if ($sum % 2 == 0)\n        return $array;\n    else\n        return\
    \ array_reverse($array);\n}", "    sort($array);\n    $sum_of_first_element =\
    \ $array[0];\n    $sum_of_last_element = $array[count($array) - 1];\n    if ($sum_of_first_element\
    \ % 2 != 0) {\n        $array = array_reverse($array);\n    }\n    if ($sum_of_last_element\
    \ % 2 != 0) {\n        $array = array_reverse($array);\n    }\n    return $array;\n\
    }\n</code>\n<|/ a tags=sorting,php |>\n<| c |>\nThis is a good answer but does\
    \ not consider if the array is already sorted or needs to be sorted first before\
    \ sorting it.\n<|/ c |>\n<| a tags=sorting,php |>\nHere is a simple way to sort\
    \ an array in descending order without changing its value:\n<code>", "  usort($array,\
    \ function ($a, $b) {\n    if ($a + $b < 0) {\n      return 1;\n    }\n    if\
    \ ($a + $b > 0) {\n      return -1;\n    }\n    return 0;\n  });\n  return $array;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI believe you meant to say that `if ($a + $b >\
    \ 0) {` should be changed to `if ($a + $b < 0) {`.\n<|/ c |>\n<| c |>\nActually,\
    \ this solution is wrong. Because `a` can get negative value before `b`, if `$a`\
    \ equals to `b`. This condition should be reversed like `if ($a + $b < 0) {`.\n\
    <|/ c |>\n<| a |>\nThe simplest way is to create a new array with array_sum()\
    \ of both array and sort the new array.\n<code>\n<?php", "    $result = [];\n\n\
    \    foreach ($array as $value) {\n        if ($value === 0) {\n            continue;\n\
    \        }\n\n        if (in_array($value, $result)) {\n            return $result;\n\
    \        }\n\n        $result[] = $value;\n    }\n\n    return $result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$array = array(10,20,30,40,50,60,70,80,90);\n\
    $sum = array_sum($array);\n$new_array = [0 => '', 1 => '', 2 => '', 3 => '', 4\
    \ => '', 5 => '', 6 => '', 7 => '', 8 => '', 9 => ''];\nfor ($i=0; $i<count($array);\
    \ $i++){\n    if ($array[$i] == 0){\n        $new_array[$i] = $i;\n    }\n   \
    \ else {\n        $new_array[$i] = $sum - $array[$i];\n        if ($new_array[$i]\
    \ < 0){\n            $new_array[$i] = 0;\n        }\n        if ($new_array[$i]\
    \ > 90){\n            $new_array[$i] = 90;\n        }\n    }\n}\nprint_r($new_array);\n\
    </code>\n<|/ a tags=arrays,php,math,sorting |>\n<| c |>\nWhile this code may answer\
    \ the question, providing additional context regarding *why* and/or *how* this\
    \ code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0\
    \ tags=arrays,php,math,sorting |>\nHere's my solution:\n<code>\n<?php", "  $sum\
    \ = array_sum($array);\n  if ($sum % 2 == 1) {\n    // sort it in descending order\n\
    \    return array_reverse($array);\n  } else {\n    // sort it in ascending order\n\
    \    return $array;\n  }\n}\n\n/**\n * Return the number of integers in a given\
    \ range\n *\n * @param $range\n *\n * >>> rangeCount(2, 8, 2)\n * 2\n * >>> rangeCount(2,\
    \ 8, 3)\n * 3\n * >>> rangeCount(1, 9, 2)\n * 2\n *\n * @return int\n */", " \
    \   if (!is_array($array)) {\n        return $array;\n    }\n\n    // create two\
    \ sub-array for the ascending and descending order\n    $sub_array_ascending =\
    \ [];\n    $sub_array_descending = [];\n\n    // sort each sub-array in ascending\
    \ order\n    foreach ($array as $v) {\n        $sub_array_ascending[] = $v;\n\
    \    }\n    // sort the sub array in descending order\n    array_multisort($sub_array_ascending,\
    \ SORT_DESC, $sub_array_descending);\n\n    // combine the two sub-array\n   \
    \ return array_merge($sub_array_ascending, $sub_array_descending);\n}", "    $sorted_array\
    \ = array();\n    $sum_first = $sum_last = 0;\n    foreach ($array as $value)\
    \ {\n        if ($sum_first < $value) {\n            $sum_first += $value;\n \
    \           $sorted_array[] = $value;\n        } else {\n            $sum_last\
    \ += $value;\n        }\n    }\n    if ($sum_last % 2) {\n        $sorted_array[]\
    \ = $sum_first;\n    }\n    if ($sum_first % 2) {\n        $sorted_array[] = $sum_last;\n\
    \    }\n    sort($sorted_array);\n    return $sorted_array;\n}", "    $sum = 0;\n\
    \    $cophp = array();\n    foreach ($array as $key => $value) {\n        $cophp[$key]\
    \ = $value;\n        $sum += $value;\n    }\n    if ($sum % 2 === 0) {\n     \
    \   asort($cophp);\n    } else {\n        arsort($cophp);\n    }\n    return $cophp;\n\
    }\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a dscore=0 |>\n<code>", "   \
    \ $array = (array)$array;\n    usort($array, function ($a, $b) {\n        $sa\
    \ = $sum = $a + ($a < $b ? $a : $b);\n        $sb = $sum = $b + ($b < $a ? $b\
    \ : $a);\n        if ($sa % 2 === 1) {\n            $sa = ++$sa;\n        }\n\
    \        if ($sb % 2 === 1) {\n            $sb = ++$sb;\n        }\n        if\
    \ ($sa === $sb) {\n            return $a < $b ? -1 : 1;\n        } else {\n  \
    \          return $sa > $sb ? -1 : 1;\n        }\n    });\n    return $array;\n\
    }\n</code>\n<|/ a tags=arrays,php,sorting |>\n<| a |>\nI suggest you use usort\
    \ and array_sum:\n<code>\n$numbers = array(3, 9, 4, 2, 5, 9, 7, 0, 7, 1, 4);\n",
  "    $sum = 0;\n    foreach ($array as $value) {\n        $sum += $value;\n    }\n\
    \    $sum2 = array_sum($array);\n    if ($sum2 > 0 && $sum2 % 2 === 1) {\n   \
    \     sort($array);\n    } else {\n        arsort($array);\n    }\n    return\
    \ $array;\n}\n", "    sort($array);\n    $sum = array_sum($array);\n    if ($sum\
    \ % 2) {\n        $reverse = array();\n        foreach ($array as $num) {\n  \
    \          $reverse[] = $num;\n        }\n        return $reverse;\n    }\n  \
    \  return $array;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nThis answer\
    \ seems to be unreliable, and is missing an explanation of why it doesn't work\n\
    <|/ c |>\n<| c |>\nIt doesn't work when you input an odd number of elements. \
    \ This solution works.\n<|/ c |>\n<| a |>\nHere is another solution without sort,\
    \ it uses only a for loop:\n<code>", "    foreach ($array as &$v) {\n        $v\
    \ = (int) $v;\n    }\n    asort($array);\n    $array = array_reverse($array);\n\
    \    foreach ($array as &$v) {\n        $v = (int) $v;\n    }\n    return $array;\n\
    }\n", "\t$sum = 0;\n\tforeach ($array as $value) {\n\t\t$sum += $value;\n\t}\n\
    \tif ($sum % 2) {\n\t\t$sortOrder = SORT_DESC;\n\t} else {\n\t\t$sortOrder = SORT_ASC;\n\
    \t}\n\treturn array_multisort($array, $sortOrder);\n}\n</code>\n<|/ a tags=arrays,php,algorithm\
    \ |>\n<| c |>\nthanks but the input can have duplicates.\n<|/ c |>\n<| c |>\n\
    Yes, you can, I thought that's what you wanted to do. You just need to make an\
    \ extra foreach to iterate through the array.\n<|/ c |>\n<| a |>\nA simple approach\
    \ is to sort the array and then merge the array where both numbers sum to 0.\n\
    The algorithm to merge two sorted arrays is:\n<code>\nMerge(A,B):\n  if A[0] <\
    \ B[0] goto L1\n  if A[0] > B[0] goto L2\n  if A[1] < B[1] goto L1\n  if A[1]\
    \ > B[1] goto L2\n  append A[2] to B[2]\n  return B1\nL1:\n  return A\nL2:\n \
    \ return B\n</code>\n<|/ a dscore=1 tags=arrays,php,algorithm |>\n<| a dscore=0\
    \ |>\n<code>\n<?php", "    $result = array();\n    $sum = 0;\n    foreach ($array\
    \ as $key => $value) {\n        $result[$key] = $value;\n        $sum += $value;\n\
    \    }\n    $sortflag = 0;\n    if ($sum % 2 == 1) {\n        $sortflag = -1;\n\
    \    }\n    krsort($result, $sortflag);\n    return $result;\n}\n</code>\n<|/\
    \ a tags=arrays,sorting,php |>\n<| a |>\nYou can use a function like below to\
    \ compare the elements in ascending or descending order depending on the sum of\
    \ the array.\n<code>", "  ksort($array);\n  $sumOfFirstIndex = array_sum(array_slice($array,\
    \ 0, 1));\n  $sumOfLastIndex = array_sum(array_slice($array, -1, 1, true));\n\
    \  if ($sumOfFirstIndex % 2 === 0) {\n    return array_reverse($array);\n  } else\
    \ {\n    return $array;\n  }\n}\n", "  $new_array = array();\n  // Sort the array\
    \ in ascending order.\n  $a = $array[0];\n  $b = $array[1];\n  $c = $array[2];\n\
    \  for ($i = 3; $i < count($array); $i++) {\n    $d = $array[$i];\n    if ($a\
    \ + $b < $d) {\n      $a = $b;\n      $b = $d;\n    } else {\n      $c = $b;\n\
    \      $d = $a;\n    }\n  }\n  $new_array[0] = array($a, $b, $c);\n  $new_array[1]\
    \ = array($c, $b, $d);\n  $new_array[2] = array($c, $d, $a);\n  return $new_array;\n\
    }", "    $first = array_shift($array);\n    if (!is_int($first)) {\n        $array\
    \ = array_merge(array($first), $array);\n        $first = 0;\n    }\n    $last\
    \ = array_pop($array);\n    $sum = array_sum($array);\n    if ($sum % 2) {\n \
    \       return array_merge($array, array_reverse($array));\n    }\n    return\
    \ $array;\n}\n", "    return array_map(function($val) { return $val - 0}, $array);\n\
    }\n", "  if (!is_array($array)) {\n    throw new InvalidArgumentException('Input\
    \ must be an array');\n  }\n  if (count($array) === 0) {\n    return array();\n\
    \  }\n  sort($array);\n  $sum = $array[0];\n  $return = array();\n  $i = 0;\n\
    \  for ($j = count($array); $j < count($array); $j++) {\n    $sum += $array[$j];\n\
    \    if ($sum % 2 === 0) {\n      $return[] = $array[$j];\n    } else {\n    \
    \  $return[] = $array[$j];\n      $return[] = $array[$j];\n    }\n  }\n  return\
    \ $return;\n}\n", "  if (empty($array)) {\n    return array();\n  }\n  $result\
    \ = array();\n  if ($sum = $array[0] + $array[$array-1]) {\n    if ($sum % 2 >\
    \ 0) {\n      $result = array_reverse($result);\n    }\n  }\n  sort($array);\n\
    \  foreach ($array as $v) {\n    $result[] = $v;\n  }\n  return $result;\n}\n",
  "    if ($array.length == 1) {\n        return $array;\n    }\n    $odd = false;\n\
    \    $even = false;\n    $total = array_sum($array);\n    if ($total % 2 == 0)\
    \ {\n        $even = true;\n    } else {\n        $odd = true;\n    }\n    if\
    \ ($odd) {\n        $array = array_reverse($array);\n    }\n    return $array;\n\
    }", "    if (!$array) return array();\n    $sum = $array[0] + $array[count($array)\
    \ - 1];\n    if ($sum % 2 !== 0) return array_reverse($array);\n    return $array;\n\
    }\n\n/**\n * Given an array of non-negative integers, return a cophp of the given\
    \ array after sorting,\n * you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n * or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n * Note:\n\
    \ * * don't change the given array.\n * Examples:\n * >>> sort_array(array())\n\
    \ * array()\n * >>> sort_array(array(5))\n * array(5)\n * >>> sort_array(array(2,\
    \ 4, 3, 0, 1, 5))\n * array(0, 1, 2, 3, 4, 5)\n * >>> sort_array(array(2, 4, 3,\
    \ 0, 1, 5, 6))\n * array(6, 5, 4, 3, 2, 1, 0)\n */", "    // Write your code here\n\
    \    $n = sizeof($array);\n    if ($n == 0) {\n        return $array;\n    }\n\
    \    $temp = $array[0];\n    $index = 0;\n    \n    for ($i = 1; $i < $n; $i++)\
    \ {\n        if ($array[$i] > $temp) {\n            $temp = $array[$i];\n    \
    \        $index = $i;\n        }\n    }\n    $array[$index] = $temp;\n    return\
    \ $array;\n}\n", "    $sum = array_sum($array);\n    $sorted_array = array();\n\
    \    $is_odd = ($sum % 2) == 1;\n    for ($i = 0; $i < count($array); $i++) {\n\
    \        if ($is_odd) {\n            $sorted_array[] = $array[$i];\n        }\
    \ else {\n            $sorted_array[] = array_sum($array) - $array[$i];\n    \
    \    }\n    }\n    return $sorted_array;\n}\n", "    $n = count($array);\n   \
    \ if ($n < 2) {\n        return $array;\n    }\n    $sum = $array[0] + $array[$n-1];\n\
    \    if ($sum % 2 === 0) {\n        return $array;\n    }\n    $array[$n-1] =\
    \ $sum - $array[$n-1];\n    return array_merge(\n        array_slice($array, 0,\
    \ $n-1),\n        array($sum),\n        array_slice($array, $n-1)\n    );\n}\n\
    </code>\n<|/ a tags=algorithm,php,sorting dscore=2 |>\n<| c |>\nThanks for your\
    \ reply, but this doesn't work with the test cases. I'm getting all kinds of errors.\n\
    <|/ c |>\n<| c |>\nThis works perfectly, and it's fast. Thanks!\n<|/ c |>\n<|\
    \ a tags=algorithm,php,sorting |>\nI have written a similar function before and\
    \ I noticed that there is a more efficient way to implement it - not creating\
    \ another array. Let's see this in Python:\n<code>\ndef sort_array(x):\n    sorted_list\
    \ = []\n    sum_of_first_last_values = sum(x[:-2])\n    i = 0\n    last = x[-1]\n\
    \    while (i < len(x)):\n        if x[i] <= sum_of_first_last_values:\n     \
    \       sorted_list.append(x[i])\n            i += 1\n        else:\n        \
    \    sorted_list.append((last - x[i-1]) + x[i])\n            i = i + 1\n     \
    \       last = x[len(x)-1]\n    return sorted_list\n\nprint(sort_array(array(1,\
    \ 2, 3, 4, 5)))", "    $sum = array_sum($array);\n    $result = array();\n   \
    \ foreach ($array as $val) {\n        if ($val != 0 && $sum > 0) {\n         \
    \   $result[] = $val;\n            $sum -= $val;\n        }\n    }\n\n    return\
    \ $result;\n}\n", "    $array = array_reverse($array);\n    return array_merge($array);\n\
    }\n", "    $array = array_reverse($array);\n    $sum = 0;\n    foreach ($array\
    \ as $value) {\n        $sum += $value;\n    }\n    $isOdd = ($sum % 2 == 1);\n\
    \    if ($isOdd) {\n        $sorted = array_merge($array, array());\n        array_multisort($sorted,\
    \ SORT_ASC, $array);\n    } else {\n        array_multisort($array, SORT_DESC,\
    \ $array);\n    }\n    return $array;\n}", "    if (count($array) == 0) {\n  \
    \      return $array;\n    }\n    $total = array_sum($array);\n    if ($total\
    \ % 2 == 1) {\n        sort($array, SORT_NUMERIC);\n    } else {\n        rsort($array,\
    \ SORT_NUMERIC);\n    }\n    return $array;\n}\n", "    $temp_array = array_reverse($array);\n\
    \    $sum_array = array_sum($temp_array);\n    sort($temp_array);\n    sort($array);\n\
    \    return array_merge($temp_array, $array);\n}\n", "    $newArray = array();\n\
    \    $sum = 0;\n    foreach ($array as $k => $v) {\n        $newArray[$k] = $v;\n\
    \        $sum += $v;\n    }\n    if ($sum % 2 == 1) {\n        array_multisort($newArray,\
    \ SORT_DESC, $array);\n    } else {\n        array_multisort($newArray, SORT_ASC,$array);\n\
    \    }\n    return $array;\n}\n", "    if (count($array) <= 1) {\n        return\
    \ $array;\n    }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum\
    \ % 2 === 0) {\n        $array = array_reverse($array);\n    }\n    return $array;\n\
    }\n</code>\n<|/ a dscore=1 tags=php,arrays,sorting,multidimensional-array |>\n\
    <| a dscore=1 tags=php,arrays,sorting,multidimensional-array |>\n<code>\n$array\
    \ = array();\n$array[] = array('id' => 1, 'name' => 'a', 'score' => '1');\n$array[]\
    \ = array('id' => 2, 'name' => 'b', 'score' => '3');\n$array[] = array('id' =>\
    \ 3, 'name' => 'c', 'score' => '1');\n$array[] = array('id' => 4, 'name' => 'd',\
    \ 'score' => '1');\n$array[] = array('id' => 5, 'name' => 'e', 'score' => '1');\n\
    $array[] = array('id' => 6, 'name' => 'f', 'score' => '1');\n$array[] = array('id'\
    \ => 7, 'name' => 'g', 'score' => '1');\n$array[] = array('id' => 8, 'name' =>\
    \ 'h', 'score' => '1');\n$array[] = array('id' => 9, 'name' => 'i', 'score' =>\
    \ '1');\n$array[] = array('id' => 10, 'name' => 'j', 'score' => '1');\n$array[]\
    \ = array('id' => 11, 'name' => 'k', 'score' => '1');\n$array[] = array('id' =>\
    \ 12, 'name' => 'l', 'score' => '1');\n$array[] = array('id' => 13, 'name' =>\
    \ 'm', 'score' => '1');\n$array[] = array('id' => 14, 'name' => 'n', 'score' =>\
    \ '1');\n$array[] = array('id' => 15, 'name' => 'o', 'score' => '1');\n$array[]\
    \ = array('id' => 16, 'name' => 'p', 'score' => '1');\n$array[] = array('id' =>\
    \ 17, 'name' => 'q', 'score' => '1');\n$array[] = array('id' => 18, 'name' =>\
    \ 'r', 'score' => '1');\n$array[] = array('id' => 19, 'name' => 's', 'score' =>\
    \ '1');\n$array[] = array('id' => 20, 'name' => 't', 'score' => '1');\n$array[]\
    \ = array('id' => 21, 'name' => 'u', 'score' => '1');\n$array[] = array('id' =>\
    \ 22, 'name' => 'v', 'score' => '1');\n$array[] = array('id' => 23, 'name' =>\
    \ 'w', 'score' => '1');\n$array[] = array('id' => 24, 'name' => 'x', 'score",
  "    sort($array);\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum\
    \ % 2) {\n        $array = array_reverse($array);\n    }\n    return $array;\n\
    }\n", "    sort($array, SORT_NUMERIC);\n    return array_values($array);\n}\n",
  "    $sorted_array = array();\n    foreach ($array as $element) {\n        $sorted_array[$element]\
    \ = $element;\n    }\n    return array_values($sorted_array);\n}\n", "    $sum\
    \ = $array[0] + $array[count($array) - 1];\n\n    return $sum % 2 == 1 ? array_reverse($array)\
    \ : $array;\n}\n</code>\nThe above is a PHP function solution, using an O(n) time\
    \ and O(1) space complexity.\nThe above solution takes advantage of the fact that\
    \ the sum of the first and last elements in the array is even. The sorting in\
    \ descending order will sort the elements such that the sum of the first element\
    \ and the last is odd.\nIn the first step, we calculate the sum of the first and\
    \ last elements in the given array, and if the sum is odd, we reverse the elements\
    \ in the given array.\nIn the second step, we sort the given array in ascending\
    \ or descending order.\nIn the third step, we reverse the array if the sum is\
    \ even.\n<|/ a tags=arrays,sorting,php dscore=3 |>\n<| c |>\nThis is a good idea,\
    \ it would be interesting to compare the performance of this solution to sorting\
    \ using bubble sort.\n<|/ c |>\n<| c |>\nThanks for all the feedback. I have not\
    \ yet timed the solutions against other solutions. I think this one is fast enough\
    \ for the purposes of the homework problem. :)\n<|/ c |>\n<| a |>\n<code>", " \
    \   if (empty($array)) {\n        return array();\n    }\n    $odd = array_sum(array_slice($array,\
    \ -1)) % 2 === 0;\n    sort($array, SORT_NUMERIC);\n    return array_map(function\
    \ ($x) use ($odd) {\n        return $odd ? $x + 1 : $x;\n    }, $array);\n}\n\n\
    /**\n * Return all unique elements of a multidimensional array.\n * Note: This\
    \ is not part of the official Laravel API, but is commonly used in `array_count_values`.\n\
    \ *\n * @param  array  $array\n * @return array\n */", "    $array = array_values($array);\n\
    \n    foreach ($array as $i => $v) {\n        if ($i % 2 === 1) {\n          \
    \  $tmp = $array[$i];\n            $array[$i] = $array[$i + 1];\n            $array[$i\
    \ + 1] = $tmp;\n        }\n    }\n    return $array;\n}\n", "  if (!is_array($array)\
    \ || empty($array)) {\n    return array();\n  }\n  ksort($array);\n  $sum = 0;\n\
    \  foreach ($array as $item) {\n    $sum += $item;\n  }\n  $even_sum = intval($sum\
    \ / 2);\n  return ($even_sum == $sum) ? array_reverse($array) : $array;\n}\n</code>\n\
    <|/ a tags=sorting,arrays,php |>\n<| a tags=sorting,arrays,php |>\nYou might not\
    \ get any better than O(n log n) time complexity, which is actually pretty good.\
    \ Since you are sorting the array, the best case scenario is that you have a sorted\
    \ array of length n and n is even. Then the sorting is O(n log n). If you find\
    \ n is odd, then sorting is O(n^2). So, what you are doing is actually O(n) for\
    \ both cases (even and odd n). Now, if you want a tighter bound, you should probably\
    \ look into some algorithms like radix sort and counting sort which you can do\
    \ O(n log n).\n<|/ a dscore=2 |>\n<| c |>\nYou mean the PHP sort function does\
    \ this? I'm afraid not - it's a native function.\n<|/ c |>\n<| c |>\n, no, it's\
    \ not. The PHP sort function uses a stable sort: http://en.wikipedia.org/wiki/Sorting_algorithm#Stability\n\
    <|/ c |>\n<| a dscore=2 |>\nQuicksort is a stable sort, which means that it won't\
    \ rearrange elements if it thinks the ordering is already right. It is a sort\
    \ algorithm, so it won't rearrange elements if it thinks the ordering is already\
    \ right.\nIt means that you can sort in O(n log n) time by using a stable sorting\
    \ algorithm, such as quicksort, which is one of the fastest sorting algorithms.\n\
    If you need to use a non-stable sort, you can do that also.\n<|/ a tags=sorting,arrays,php\
    \ |>\n<| c |>\nSo it is the same for PHP as for other languages, isn't it?\n<|/\
    \ c |>\n<| c |>\n: not necessarily, but most of the time yes. PHP's `sort()` is\
    \ a non-stable sort, as is Python's `sorted(list)`.\n<|/ c |>\n<| c |>\n: It is\
    \ the same in other languages, not just PHP.\n<|/ c |>\n<| a |>\nIn php it is\
    \ possible to sort a non-stable array using usort function like that:\n<code>",
  "    $length = count($array);\n    if ($length === 0) {\n        return array();\n\
    \    }\n    $sum = array_sum($array);\n    $first = $array[0];\n    $last = $array[count($array)\
    \ - 1];\n    if ($sum % (2 * $length) === 0) {\n        return $array;\n    }\n\
    \    $half = $sum / (2 * $length);\n    $left = array();\n    $right = array();\n\
    \    for ($i = 0; $i < $length; $i++) {\n        if ($i == 0) {\n            if\
    \ ($first > $last) {\n                $left = $array;\n                $right\
    \ = $array;\n            } else {\n                $left = $array;\n         \
    \       $right = $array;\n            }\n        } else {\n            if ($array[$i]\
    \ >= $half) {\n                $left = $array;\n            } else {\n       \
    \         $right = $array;\n            }\n        }\n    }\n    return merge_sort($left);\n\
    }\n", "  if (empty($array)) {\n    return array();\n  }\n  $sum = 0;\n  foreach\
    \ ($array as $key => $value) {\n    $sum += $value;\n  }\n  if ($sum % 2) {\n\
    \    $array = array_reverse($array);\n  }\n  usort($array, 'sort_array_helper');\n\
    \  return $array;\n}\n", "  $array = (array)$array;\n  // get sum\n  $sum = $array[0]\
    \ + $array[$array.length - 1];\n  if ($sum % 2 == 1) {\n    // if sum is odd,\
    \ reverse array\n    $array = array_reverse($array);\n  }\n  // sort array\n \
    \ sort($array);\n  return $array;\n}\n</code>\n<|/ a |>\n<| c |>\nThe above code\
    \ works perfectly on PHP 7, but it gives error on PHP 5.6 - `Warning: array_reverse()\
    \ expects parameter 1 to be array, string given in /home/user/public_html/index.php\
    \ on line 26`\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$array = ['a' => 0, 'b' =>\
    \ 1, 'c' => 2, 'd' => 3, 'e' => 4, 'f' => 5, 'g' => 6, 'h' => 7, 'i' => 8, 'j'\
    \ => 9, 'k' => 10];\n\nforeach($array as $key => $value){\n  $sum = $key + $value;\n\
    \  if($sum % 2 == 0){\n    $array[$key] = $value;\n  }\n}\n\nprint_r($array);\n",
  "    $sum = array_sum($array);\n    if ($sum < 0 || $sum % 2 != 1) {\n        $array\
    \ = array_reverse($array);\n        $sum = array_sum($array);\n        if ($sum\
    \ < 0 || $sum % 2 != 1) {\n            return $array;\n        }\n    }\n    return\
    \ array_values($array);\n}\n\n/**\n * Given an array of non-negative integers,\
    \ return a cophp of the given array after sorting,\n * you will sort the given\
    \ array in ascending order if the sum( first index value, last index value) is\
    \ odd,\n * or sort it in descending order if the sum( first index value, last\
    \ index value) is even.\n * Note:\n * * don't change the given array.\n * Examples:\n\
    \ * >>> sort_array_odd(array())\n * array()\n * >>> sort_array_odd(array(5))\n\
    \ * array(5)\n * >>> sort_array_odd(array(2, 4, 3, 0, 1, 5))\n * array(0, 1, 2,\
    \ 3, 4, 5)\n * >>> sort_array_odd(array(2, 4, 3, 0, 1, 5, 6))\n * array(6, 5,\
    \ 4, 3, 2, 1, 0)\n */", "    $sorted = array();\n    $sum = 0;\n    foreach ($array\
    \ as $item) {\n        $sum += $item;\n        $sorted[$sum] = $item;\n    }\n\
    \    arsort($sorted);\n    return array_values($sorted);\n}\n</code>\n<|/ a dscore=1\
    \ tags=algorithm,php |>\n<| c |>\nThanks so much for the solution!\n<|/ c |>\n\
    <| c |>\nJust wanted to mention that `arsort` won't return the sorted array as\
    \ stated in your question. `arsort` sorts the array in the ascending order and\
    \ returns the sorted array as it is as `arsort` returns the array as it was passed\
    \ as a parameter.\n<|/ c |>\n<| a dscore=1 |>\nThis is a Python solution. It'll\
    \ work in PHP too but it'll be slower than the accepted answer. \n<code>\ndef\
    \ sort_array(numbers):\n    numbers.sort(reverse=True)\n\ndef sort_array_solution(numbers):\n\
    \    sorted_numbers = [0] * len(numbers)\n    sum_so_far = 0\n\n    for number\
    \ in numbers:\n        sum_so_far += number\n        sorted_numbers[sum_so_far]\
    \ = number\n\n    return sorted_numbers\n</code>\n<|/ a tags=algorithm,php |>\n\
    <| a dscore=1 tags=algorithm,php |>\nThis is a PHP function using array_reduce().\
    \ It first reduces the input array to an aggregated sum, then it calculates the\
    \ index of the sorted array. Then it uses the index to extract the sorted array\
    \ by doing a slice of the original array. \n<code>", "    if (empty($array)) {\n\
    \        return array();\n    }\n    $sum = $array[0];\n    for ($i = 0; $i <\
    \ count($array); $i++) {\n        $sum -= $array[$i];\n        if ($sum < 0) {\n\
    \            $sum = 0;\n        }\n        $sum += $array[$i];\n    }\n    return\
    \ array_reverse($array);\n}\n", "    $sum = array_sum($array);\n    if ($sum %\
    \ 2 == 0) {\n        sort($array, SORT_NUMERIC);\n    } else {\n        sort($array,\
    \ SORT_NUMERIC, SORT_DESC);\n    }\n    return $array;\n}\n", "\tsort($array);\n\
    \treturn $array;\n}\n\n", "    $array_size = count($array);\n    if ($array_size\
    \ == 0) {\n        return $array;\n    }\n    $array = array_reverse($array);\n\
    \    $sum = 0;\n    for ($i = 0; $i < $array_size; $i++) {\n        $sum = $sum\
    \ + $array[$i];\n    }\n    $odd = ($sum % 2 != 0);\n    if ($odd) {\n       \
    \ $array = array_reverse($array);\n    }\n    return $array;\n}\n</code>\n<|/\
    \ a tags=php,array-merge |>\n<| a tags=php,array-merge dscore=1 |>\n<code>\n<?php",
  "    // Your code here\n    $first = array_shift($array);\n    $last = array_pop($array);\n\
    \    $sum = $first + $last;\n    if ($sum & 1)\n        array_push($array, $first);\n\
    \    else\n        array_push($array, $last);\n    return $array;\n}\n", "  //\
    \ sort the array in ascending order\n  if (array_sum($array) % 2 == 1) {\n   \
    \ sort($array);\n  }\n\n  return $array;\n}\n", "    $copy = array_merge($array);\n\
    \    sort($copy);\n    return $copy;\n}\n", "  $array = array_map('intval', $array);\n\
    \  sort($array);\n  return $array;\n}\n", "    $total_sum = 0;\n    foreach ($array\
    \ as $key => $value) {\n        $total_sum += $value;\n    }\n\n    return $array;\n\
    }\n", "    sort($array);\n    $sum = $array[0] + $array['length'] - $array[0];\n\
    \    if ($sum % 2 == 1) {\n        return array_reverse($array);\n    } else {\n\
    \        return $array;\n    }\n}\n", "    // Your code here\n    sort($array);\n\
    \    if(array_sum($array)%2==1){\n        $array = array_reverse($array);\n  \
    \  }\n    return $array;\n}", "  $result = [];\n  foreach ($array as $key => $value)\
    \ {\n    $result[] = [$key, $value];\n  }\n  uasort($result, function($a, $b)\
    \ {\n    $aSum = $bSum = 0;\n    foreach ($a as $idx => $val) {\n      $aSum +=\
    \ $val[0];\n    }\n    foreach ($b as $idx => $val) {\n      $bSum += $val[0];\n\
    \    }\n    if ($aSum % 2 != $bSum % 2) {\n      return 1;\n    } else {\n   \
    \   return 0;\n    }\n  });\n  return array_map(function($v) { return $v[1]; },\
    \ $result);\n}", "    if (!is_array($array)) {\n        return array();\n    }\n\
    \    if (count($array) < 2) {\n        return $array;\n    }\n    $sum = $array[0]\
    \ + $array[count($array) - 1];\n    $isOddOrEven = (fmod($sum, 2) == 0);\n   \
    \ if ($isOddOrEven) {\n        return array_reverse($array);\n    }\n    return\
    \ $array;\n}\n</code>\n<|/ a dscore=2 tags=php,arrays |>\n<| c |>\nThank you very\
    \ much for sharing this solution\n<|/ c |>\n<| a tags=php,arrays |>\ntry the following\n\
    <code>\n<?php\n$numbers = array(2, 4, 3, 0, 1, 5, 6, 7);\n\n$numbersSorted = $numbers;\n\
    sort($numbersSorted);\n\nprint_r($numbersSorted);", "  if (count($array) == 0)\
    \ {\n    return array();\n  }\n\n  $result = array();\n  for ($i = 0, $l = count($array);\
    \ $i < $l; $i++) {\n    $sum = $array[0] + $array[$i];\n    if ($sum % 2 == 0)\
    \ {\n      $result[] = $array[$i];\n    } else {\n      $result[] = $array[$i\
    \ - 1];\n    }\n  }\n\n  return $result;\n}\n", "    // Write your code here\n\
    \    $result = [];\n    foreach ($array as $val) {\n        if ($val % 2 == 0)\
    \ {\n            $result[] = $val;\n        } else {\n            $result[] =\
    \ $val - $val % 2;\n        }\n    }\n    return $result;\n}\n", "    $len = count($array);\n\
    \    $sorted_arr = array();\n\n    $cur_sum = 0;\n    $first_elem = 0;\n    $last_elem\
    \ = 0;\n    for($i = 0; $i < $len; $i++) {\n        $cur_sum = $cur_sum + $array[$i];\n\
    \        if ($cur_sum == $first_elem) {\n            $sorted_arr[$i] = $array[$i];\n\
    \            $first_elem = $array[$i];\n        } else if ($cur_sum == $last_elem)\
    \ {\n            $sorted_arr[$i] = $array[$i];\n            $last_elem = $array[$i];\n\
    \        } else {\n            if ($cur_sum % 2 != 0) {\n                $sorted_arr[$i]\
    \ = $array[$i];\n            } else {\n                $sorted_arr[$i] = $array[$i];\n\
    \            }\n        }\n    }\n\n    return $sorted_arr;\n}", "  if (empty($array))\
    \ {\n    return $array;\n  }\n\n  $result = $array;\n  $sum = 0;\n  $array_size\
    \ = count($array);\n  for ($i = 0; $i < $array_size; ++$i) {\n    $sum += $result[($i\
    \ + 1)];\n  }\n  if ($sum % 2 === 0) {\n    usort($result, 'sort_array_desc');\n\
    \  } else {\n    usort($result, 'sort_array_asc');\n  }\n  return $result;\n}\n",
  "    if (empty($array)) {\n        return array();\n    }\n\n    $n = count($array);\n\
    \    $sum = ($n & ($n - 1)) == 0 ? $n : $n + 1;\n    sort($array);\n\n    for\
    \ ($i = 0; $i < $sum; $i++) {\n        $carry = 0;\n        for ($j = $i; $j <\
    \ $n; $j++) {\n            if ($array[$j] + $carry <= $i) {\n                $array[$j]\
    \ = $array[$j] + $carry;\n            } else {\n                $carry = (int)\
    \ ($array[$j] - ($sum - $carry));\n                $array[$j] = $sum - $carry;\n\
    \            }\n        }\n    }\n\n    return $array;\n}\n\n/**\n * Given an\
    \ array of non-negative integers, return a cophen of the given array after sorting,\n\
    \ * you will sort the given array in ascending order if the sum( first index value,\
    \ last index value) is odd,\n * or sort it in descending order if the sum( first\
    \ index value, last index value) is even.\n * Note:\n * * don't change the given\
    \ array.\n * Examples:\n * >>> sort_array_copenhagen(array())\n * array()\n *\
    \ >>> sort_array_copenhagen(array(5))\n * array(5)\n * >>> sort_array_copenhagen(array(2,\
    \ 4, 3, 0, 1, 5))\n * array(0, 1, 2, 3, 4, 5)\n * >>> sort_array_copenhagen(array(2,\
    \ 4, 3, 0, 1, 5, 6))\n * array(6, 5, 4, 3, 2, 1, 0)\n */", "    if (count($array)\
    \ == 0) {\n        return array();\n    }\n    // Calculate the sum\n    $sum\
    \ = array_sum($array);\n    // If the sum is odd, sort it in descending order\n\
    \    if ($sum & 1) {\n        return array_reverse($array);\n    }\n    // If\
    \ the sum is even, sort it in ascending order\n    return $array;\n}\n", "   \
    \ $sum = array_sum($array);\n    if (!is_int($sum)) {\n        die(\"sort_array:\
    \ invalid parameter type\\n\");\n    }\n    if ($sum % 2 === 0) {\n        sort($array,\
    \ SORT_NUMERIC);\n    } else {\n        sort($array, SORT_NUMERIC, SORT_DESC);\n\
    \    }\n    return $array;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nThis fails\
    \ to sort negative numbers correctly.\n<|/ c |>\n<| a tags=php dscore=4 |>\nHere\
    \ is the function I wrote to solve the above question:\n<code>", "    if (!is_array($array)\
    \ || count($array) < 2) {\n        return $array;\n    }\n    $sum = array_sum($array);\n\
    \    if ($sum < 0) {\n        $array = array_reverse($array);\n        $sum =\
    \ array_sum($array);\n    }\n    $even = ($sum % 2) === 0;\n    $sorted = array();\n\
    \    foreach ($array as $num) {\n        if (!$even) {\n            $sorted[]\
    \ = $num;\n        } else {\n            if ($num !== 0) {\n                $sorted[]\
    \ = $num;\n                $sorted[] = -$num;\n            }\n        }\n    }\n\
    \    return $sorted;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=arrays,sorting,algorithm,php\
    \ dscore=2 |>\nThis is a possible approach (using 2 nested loops):\n\nCompute\
    \ the total sum\nCheck if sum is odd (or even)\nSort the array according to that\
    \ sum\nReverse the array if the sum is even\n\n<code>", "    if (empty($array))\
    \ {\n        return $array;\n    }\n\n    $sum = 0;\n    for ($i = 0; $i < count($array);\
    \ $i++) {\n        $sum += $array[$i];\n    }\n\n    if ($sum % 2 > 0) {\n   \
    \     $temp_array = array_reverse($array);\n        return $temp_array;\n    }\n\
    \n    $temp_array = array();\n    for ($i = 0; $i < count($array); $i++) {\n \
    \       $temp_array[$i] = $array[$i];\n    }\n\n    return $temp_array;\n}\n</code>\n\
    <|/ a tags=php,array-merge,arrays |>\n<| c |>\nI think this is what OP wants,\
    \ but it doesn't look like the question has anything to do with the sum of the\
    \ elements. Also, it's really inefficient to sum all the elements in the array.\
    \ Just traverse it and store the values in a new array.\n<|/ c |>\n<| c |>\nYes,\
    \ it looks like the question wants to sort the array, but I can't tell from the\
    \ question whether it's about sorting an array by summing its elements or sorting\
    \ it by comparing its elements. I went with the sum of the elements, but it could\
    \ be either way if the question was clear.\n<|/ c |>\n<| c |>\nWell, that makes\
    \ more sense, I guess. OP should clarify what he wants.\n<|/ c |>\n<| a dscore=0\
    \ |>\nIf you need to sort your array based on another array that has some values\
    \ you can use this function:\n<code>", "    $array = array_reverse($array);\n\
    \    if (array_sum($array) % 2 !== 1) {\n        array_reverse($array);\n    }\n\
    \    return $array;\n}\n", "\t$new_array = array();\n\tforeach($array as $key\
    \ => $value){\n\t\t$new_array[$key] = $value;\n\t}\n\tusort($new_array, \"sortNumbers\"\
    );\n\treturn $new_array;\n}\n", "    // Your code here\n    return $array;\n}\n",
  "    if (is_null($array) || empty($array)) {\n        return $array;\n    }\n  \
    \  $sum = $array[0];\n    $new_array = array();\n    $n = count($array);\n   \
    \ for ($i = 1; $i < $n; $i++) {\n        $sum = $sum + $array[$i];\n        if\
    \ ($sum % 2 == 1) {\n            $new_array[] = $sum;\n        } else {\n    \
    \        $new_array[] = -$sum;\n        }\n    }\n    return $new_array;\n}\n",
  "    if (empty($array)) {\n        return $array;\n    }\n    $result = [];\n  \
    \  $sum = 0;\n    $len = count($array);\n    for ($i = 0; $i < $len; $i++) {\n\
    \        $sum += $array[$i];\n        $result[$i] = $array[$i];\n    }\n    if\
    \ ($sum % 2) {\n        $result[$i] = $sum;\n    }\n    return $result;\n}", " \
    \ // First find the sum of the array elements.\n  $sum = $array[0];\n  for ($i\
    \ = 1; $i < count($array); $i++) {\n    $sum += $array[$i];\n  }\n\n  // If the\
    \ sum is odd, the array is sorted in ascending order.\n  if ($sum % 2 != 0) {\n\
    \    // Sort $array in ascending order.\n    $array = array_reverse($array, true);\n\
    \  }\n  else {\n    // Sort $array in descending order.\n    $array = array_reverse($array);\n\
    \  }\n  return $array;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks, I forgot\
    \ to mention that the array needs to be reversed\n<|/ c |>\n<| c |>\n, I've added\
    \ an example for sorting by descending order.\n<|/ c |>\n<| c |>\nI've added a\
    \ more general implementation of this answer which also sorts descending by comparing\
    \ each element with the next element instead of just the first element.\n<|/ c\
    \ |>\n<| a dscore=0 tags=arrays,sorting,php |>\nIf i understand correctly the\
    \ array contains even numbers in ascending order and odd numbers in descending\
    \ order.\nIn that case this may help you\n<code>\n$array = array(\n    0 => 1,\n\
    \    1 => 3,\n    2 => 4,\n    3 => 5,\n    4 => 6,\n    5 => 7\n);\n", "    $result\
    \ = [];\n    foreach($array as $a) {\n        if ($sum = $a + $array[$i - 1])\
    \ {\n            if ($sum % 2 == 1) {\n                $result[] = $a;\n     \
    \       } else {\n                $result[] = $array[$i - 1];\n            }\n\
    \        }\n    }\n    return $result;\n}", "\tif (count($array) <= 1) {\n\t\t\
    return $array;\n\t}\n\t$sum = 0;\n\t$tmp = $array[0];\n\tfor ($i = 1; $i < count($array);\
    \ $i++) {\n\t\t$tmp += $array[$i];\n\t\tif ($sum % 2 == 0) {\n\t\t\t$tmp = -$tmp;\n\
    \t\t}\n\t\t$sum += $tmp;\n\t}\n\tif ($sum % 2 == 1) {\n\t\treturn array_reverse($array);\n\
    \t} else {\n\t\t$tmp = $array[0];\n\t\tfor ($i = 1; $i < count($array); $i++)\
    \ {\n\t\t\t$tmp -= $array[$i];\n\t\t}\n\t\t$tmp += $array[0];\n\t\treturn array_reverse($array);\n\
    \t}\n}\n", "\tif (!is_array($array)) {\n\t\treturn $array;\n\t}\n\tif (count($array)\
    \ == 0) {\n\t\treturn $array;\n\t}\n\tif (count($array) == 1) {\n\t\treturn array($array[0]);\n\
    \t}\n\tif (count($array) > count($array)) {\n\t\t$array = array_reverse($array);\n\
    \t}\n\n\t$array = array_merge(array(0), $array);\n\t$sum = array_sum($array);\n\
    \n\tif ($sum % 2 != 0) {\n\t\t$array = array_reverse($array);\n\t}\n\n\t$array\
    \ = array_merge($array, array_fill(0, count($array), $sum));\n\tarray_multisort($array);\n\
    \treturn $array;\n}\n", "  if (count($array) < 2)\n    return $array;\n\n  $sum\
    \ = 0;\n  foreach ($array as $v)\n    $sum += $v;\n\n  if ($sum % 2 == 0) {\n\
    \    ksort($array, SORT_NUMERIC);\n  } else {\n    arsort($array, SORT_NUMERIC);\n\
    \  }\n\n  return $array;\n}\n\n/**\n * Sort the given array in-place.\n * Example:\n\
    \ * $array = array(1, 2, 3);\n * sort_in($array);\n * print_r($array);\n * >>>\
    \ Array\n * Array(\n * [1] => 2\n * [2] => 1\n * [3] => 3\n * )\n */", "    $result\
    \ = array();\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum\
    \ % 2) {\n        array_push($result, $array[0]);\n        array_push($result,\
    \ $array[count($array) - 1]);\n    } else {\n        array_push($result, $array[count($array)\
    \ - 1]);\n        array_push($result, $array[0]);\n    }\n    return $result;\n\
    }\n", "    $sum = 0;\n    foreach ($array as $index => $value) {\n        $sum\
    \ += $value;\n    }\n    if ($sum % 2 != 0) {\n        return array_reverse($array);\n\
    \    }\n    return $array;\n}\n", "  foreach ($array as $i => &$v){\n    $v =\
    \ array_sum($array, $i);\n  }\n  array_multisort($array, $array_sort_flag);\n\
    \  $new_array = array();\n  $new_array = array_merge($new_array, $array);\n  return\
    \ $new_array;\n}\n", "    if (empty($array)) {\n        return $array;\n    }\n\
    \    // sum( first index value, last index value)\n    $s = array_sum($array);\n\
    \    // return coph(array), if sum is odd, the coph of array is array\n    return\
    \ ($s % 2) ? $array : array_reverse($array);\n}\n</code>\n<|/ a tags=php dscore=0\
    \ |>\n<| c |>\nWhile this link may answer the question, it is better to include\
    \ the essential parts of the answer here and provide the link for reference. \
    \ Link-only answers can become invalid if the linked page changes. - [From Review](/review/low-quality-posts/12381763)\n\
    <|/ c |>\n<| c |>\nThanks for your suggestion, but I still have doubts about this\
    \ code. Because this implementation is a brute-force method, not something that\
    \ can be efficiently done by PHP code.\n<|/ c |>\n<| c |>\n-shiyu If this answer\
    \ can solve your problem, please accept it.\n<|/ c |>\n<| c |>\nThis answer is\
    \ a good example of the kind of code where brute-forcing is more efficient than\
    \ other techniques, where you could use other languages to get the job done more\
    \ efficiently.\n<|/ c |>\n<| c |>\nIt looks good, but I don't like the idea of\
    \ \"sorting\" the array when PHP already has functions for that and it's much\
    \ more efficient. `array_count_values()` seems like it could be used here, but\
    \ I can't figure out how to use it correctly.\n<|/ c |>\n<| a dscore=0 tags=php\
    \ |>\n<code>\n$numbers = [2,4,8,1,3,7,5,4,8,6,1];\n$sums = array_sum($numbers);\n\
    if($sums % 2) {\n    $numbers = array_reverse($numbers);\n}\n</code>\n<|/ a |>\n\
    <| c |>\nWhile this link may answer the question, it is better to include the\
    \ essential parts of the answer here and provide the link for reference.  Link-only\
    \ answers can become invalid if the linked page changes. - [From Review](/review/low-quality-posts/12381763)\n\
    <|/ c |>\n<| c |>\nI disagree. I provided the only needed information to solve\
    \ the question. There are several useful functions available here: https://php.net/manual/en/function.array-sum.php\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n\n$array = array(\"a\",\"b\",\"b\"\
    ,\"b\",\"", "\tsort($array);\n\t$sum = $array[0] + $array[$array.length-1];\n\t\
    $odd = ($sum%2 == 1);\n\t$sorted_array = array_merge($array, array($sum, $sum-$odd,\
    \ $sum+$odd));\n\tif ($odd) {\n\t\tarray_reverse($sorted_array);\n\t}\n\treturn\
    \ $sorted_array;\n}\n", "    if (empty($array)) {\n        return $array;\n  \
    \  }\n    $sumOfFirstIndex = $sumOfLastIndex = $sumOfFirstIndexArrayValue = $sumOfLastIndexArrayValue\
    \ = 0;\n    foreach ($array as $key => $value) {\n        $sumOfFirstIndex +=\
    \ $key;\n        $sumOfLastIndex += $key + 1;\n        $sumOfFirstIndexArrayValue\
    \ += $value;\n        $sumOfLastIndexArrayValue += $value + 1;\n    }\n\n    if\
    \ ($sumOfFirstIndexArrayValue % 2 === 1) {\n        return $array;\n    }\n\n\
    \    $array = array_reverse(\n        array_slice(\n            array_reverse(\n\
    \                array_slice(\n                    $array,\n                 \
    \   $sumOfFirstIndex,\n                    $sumOfLastIndex - $sumOfFirstIndex\n\
    \                )\n            ),\n            $sumOfFirstIndexArrayValue,\n\
    \            $sumOfLastIndexArrayValue - $sumOfFirstIndexArrayValue\n        )\n\
    \    );\n\n    return $array;\n}\n\n$string = 'aaa bbb ccc ddd eee fff ggg hhh\
    \ iii jjj kkk lll mmm nnn ooo ppp qqq rrr sss ttt uuu vvv www xxx yyy zzz aaa\
    \ bbb ccc ddd eee fff ggg hhh iii jjj kkk lll mmm nnn ooo ppp qqq rrr sss ttt\
    \ uuu vvv www xxx yyy zzz';\n$stringArray = explode(' ', $string);\n$stringArray\
    \ = sort_array($stringArray);\n\necho \"<pre>\";\nprint_r($stringArray);\necho\
    \ \"</pre>\";\n</code>\n<|/ a dscore=2 tags=arrays,php,sorting |>\n<| c |>\nIt\
    \ will fail if array contains string with space inside. Also it will fail for\
    \ empty array.\n<|/ c |>\n<| c |>\nYes I know, I just wanted to give the idea\
    \ about the algorithm. Just replace explode by str_split if you don't need to\
    \ split the string by space.\n<|/ c |>\n<| c |>\nThis answer does not work, if\
    \ you replace $array with $stringArray. Then you will get empty array as result.\n\
    <|/ c |>\n<| a dscore=2 |>\nYou can sort by key value with array_multisort\n<code>\n\
    $array = [\n    \"cat\" => 1,\n    \"dog\" => 0,\n    \"rabbit\" => 0,\n    \"\
    duck\" => 0,\n    \"turtle", "    // Write your code here\n    return $array;\n\
    }\n", "    $cophopping = array_sum($array);\n    if($cophopping % 2 == 1){\n \
    \       array_multisort($array, SORT_ASC);\n    }\n    else{\n        array_multisort($array,\
    \ SORT_DESC);\n    }\n    return $array;\n}\n\n/**\n * Check whether a string\
    \ is a valid url\n *\n * Validates if a string is a valid URL. Returns TRUE on\
    \ success or FALSE on failure.\n *\n * @param string $url The URL to be validated\n\
    \ *\n * @return boolean\n */", "    $sum = array_sum($array);\n    if ($sum >\
    \ 0) {\n        if ($sum % 2 == 1) {\n            return $array;\n        }\n\
    \        return array_reverse($array);\n    }\n    return array();\n}\n</code>\n\
    <|/ a tags=php |>\n<| c |>\nThis is very inefficient, check my answer.\n<|/ c\
    \ |>\n<| c |>\n: I did not find that inefficient.\n<|/ c |>\n<| c |>\nI think\
    \ this is inefficient because it makes two calls, one to get the sum and the other\
    \ to get the result. These should be reduced to one\n<|/ c |>\n<| a |>\nMy solution\
    \ doesn't use array_sum() but does use array_slice() :\n<code>", "  $result =\
    \ [];\n  $sum = 0;\n  foreach ($array as $key => $value) {\n    $sum += $value;\n\
    \    $result[$key] = $value;\n  }\n  if ($sum % 2 === 1) {\n    return array_reverse($result);\n\
    \  }\n  return $result;\n}", "    $sum = $array[0];\n    sort($array, SORT_NUMERIC);\n\
    \    for ($i = 0; $i < count($array); $i++) {\n        if ($i % 2) {\n       \
    \     if ($sum % 2) {\n                $sum = ($sum + 1) % 2;\n            }\n\
    \        } else {\n            $sum = ($sum - 1) % 2;\n        }\n        $array[$i]\
    \ = $sum;\n    }\n    return $array;\n}\n", "    \n    // Initialize sum of array.\n\
    \    $sum = 0;\n    \n    // Loop through the array, adding each value to the\
    \ sum array.\n    foreach ($array as $value) {\n        $sum += $value;\n    }\n\
    \    \n    // If sum is odd, sort it in ascending order;\n    // otherwise, sort\
    \ it in descending order.\n    if ($sum % 2 === 0) {\n        // Sort it in ascending\
    \ order.\n        return array_flip($array);\n    }\n    else {\n        // Sort\
    \ it in descending order.\n        return array_flip($array);\n    }\n}\n", " \
    \   $sum = 0;\n    foreach ($array as $key => $value) {\n        $sum += $value;\n\
    \    }\n    if ($sum % 2) {\n        return $array;\n    }\n    $result = array();\n\
    \    foreach ($array as $key => $value) {\n        $result[] = $key;\n    }\n\
    \    return $result;\n}\n", "\t$sum = 0;\n\tforeach ($array as $key => $val) {\n\
    \t\t$sum += $val;\n\t}\n\tif ($sum % 2 == 1) {\n\t\tarray_multisort($array, SORT_DESC);\n\
    \t} else {\n\t\tarray_multisort($array, SORT_ASC);\n\t}\n\treturn $array;\n}\n",
  "  $sum = array_sum($array);\n  return $array == array_filter($array) ? $array :\
    \ \n    array_map(\n      function ($n) use ($sum) {\n        if ($sum % 2 ===\
    \ 0) {\n          return -$n;\n        }\n        return $n;\n      },\n     \
    \ $array\n    );\n}", "  if (empty($array)) {\n    return array();\n  }\n\n  $sum\
    \ = array_sum($array);\n  if ($sum % 2 == 0) {\n    sort($array, SORT_NUMERIC);\n\
    \  } else {\n    arsort($array, SORT_NUMERIC);\n  }\n  return $array;\n}\n", " \
    \   if (count($array) === 0) {\n        return array();\n    }\n\n    $sum_of_first_index\
    \ = array_sum(array_slice($array, 0, 1));\n    $sum_of_last_index = array_sum(array_slice($array,\
    \ 0, -1));\n\n    if ($sum_of_first_index % 2 !== 0 && $sum_of_last_index % 2\
    \ !== 0) {\n        return $array;\n    } else {\n        return array_merge(sort_array(array_slice($array,\
    \ 0, -1)), sort_array(array_slice($array, 0, 1)));\n    }\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\nThank you for your reply. I've tried it and it works very well.\n\
    <|/ c |>\n<| c |>\nNo problem, glad I could help :)\n<|/ c |>\n<| c |>\nI tested\
    \ it for different cases, it works well. Thank you again.\n<|/ c |>\n<| c |>\n\
    I tested this with empty array, It did not work for me. Array is empty not null\
    \ or zero.\n<|/ c |>\n<| c |>\nI see you are using PHP 7 array_slice() function,\
    \ In older version we can use array_slice($array, 0, -1) as an alternative.\n\
    <|/ c |>\n<| a tags=arrays,php |>\nI use this function. It's much faster than\
    \ foreach for large arrays and it also returns keys if they exist in the array.\n\
    <code>", "    $array = array_reverse($array);\n    sort($array, SORT_NUMERIC);\n\
    \    $sum = array_sum($array);\n    if ($sum % 2 == 1) {\n        return array_reverse($array);\n\
    \    } else {\n        return $array;\n    }\n}\n", "    $sum = 0;\n    foreach\
    \ ($array as $index => $value) {\n        $sum += $value;\n    }\n\n    $sum =\
    \ ($sum / 2);\n    if ($sum % 2 == 0) {\n        $sorted = array_reverse($array);\n\
    \    } else {\n        $sorted = $array;\n    }\n\n    return $sorted;\n}\n",
  "    if (count($array) === 0) {\n        return $array;\n    }\n\n    sort($array);\n\
    \n    $array_sum = 0;\n    foreach ($array as $value) {\n        $array_sum +=\
    \ $value;\n    }\n\n    if ($array_sum & 1) {\n        return array_reverse($array);\n\
    \    }\n\n    return $array;\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\nTry this\
    \ one.\n<code>\n$array = [1, 2, 3, 4, 5, 6];\n$sum = 0;\nforeach ($array as $key=>$value)\
    \ {\n    $sum += $value;\n}\nif($sum & 1) {\n    echo 'ascending';\n} else {\n\
    \    echo 'descending';\n}\n</code>\n<|/ a dscore=0 tags=php,arrays,algorithm\
    \ |>\n<| c |>\nThis does not work if the array is empty, as `$sum` will be `0`\
    \ and the condition will always be true\n<|/ c |>\n<| c |>\nThanks for your feedback.\
    \ I added a condition to check the array is not empty.\n<|/ c |>\n<| a tags=php,arrays,algorithm\
    \ |>\n<code>\n<?php\n\n$array = [2, 4, 3, 0, 1, 5, 6];\n\n$sum = 0;\n\nforeach\
    \ ($array as $value) {\n    $sum += $value;\n}\n\nif($sum & 1) {\n    print_r(array_reverse($array));\n\
    }else{\n    print_r($array);\n}", "    $sum = array_sum($array);\n    $cophp =\
    \ $array + array_fill(0, count($array) - 1, $sum);\n    asort($cophp);\n    return\
    \ array_slice($cophp, 0, count($array) - 1);\n}\n", "    $sum = array_sum($array);\n\
    \    if ($sum & 1) {\n        return array_reverse($array);\n    } else {\n  \
    \      return $array;\n    }\n}", "    if (!is_array($array)) {\n        throw\
    \ new InvalidArgumentException('Invalid parameter');\n    }\n    foreach ($array\
    \ as $key => &$value) {\n        $sum += $value;\n        if ($sum < 0) {\n  \
    \          $sum = 0;\n            $array[$key] = -$value;\n        }\n    }\n\
    \    return $array;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a |>\nI wrote a\
    \ function for you based on your description:\n<code>\n<?php\n", "    $sum = array_sum($array);\n\
    \    return $array\n        ? $array\n        : array(0);\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThe question specifically asks to sort ascending if the sum is odd, descending\
    \ if the sum is even. This code sorts ascending.\n<|/ c |>\n<| c |>\ni think this\
    \ code is not the best solution since it's an algorithm and complexity is O(n^2)\
    \ while it could be easily done in O(nlogn)\n<|/ c |>\n<| c |>\n: It doesn't seem\
    \ like an algorithm. The code is pretty straight forward.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n<?php", "    $sum = 0;\n    $result = array();\n    foreach ($array\
    \ as $value) {\n        $sum = $sum + $value;\n    }\n\n    if ($sum % 2 != 1)\
    \ {\n        foreach ($array as $key => $value) {\n            $result[$key] =\
    \ $value;\n        }\n        sort($result);\n        return $result;\n    }\n\
    \    else {\n        foreach ($array as $key => $value) {\n            $result[$key]\
    \ = $value;\n        }\n        rsort($result);\n        return $result;\n   \
    \ }\n}\n\n/**\n * Given a string, return a new string with all alphabetic characters\
    \ from that string removed.\n * Note: Given string contains only the characters\
    \ 'a' to 'z', 'A' to 'Z' and '0' to '9'.\n * Example: Given input string \"A1b2c3\"\
    , return output string \"B3\".\n * Time: O(n)\n */", "    $array = array_reverse($array);\n\
    \    $sum = 0;\n    foreach ($array as $key => $value) {\n        $sum += $value;\n\
    \    }\n    if ($sum % 2) {\n        foreach ($array as $key => $value) {\n  \
    \          if ($value < $array[$key + 1]) {\n                $tmp = $array[$key];\n\
    \                $array[$key] = $array[$key + 1];\n                $array[$key\
    \ + 1] = $tmp;\n            }\n        }\n    }\n    return $array;\n}\n", " \
    \ $sum = 0;\n  foreach ($array as $value) {\n    $sum += $value;\n  }\n\n  return\
    \ $array;\n}\n", "    if (empty($array)) {\n        return array();\n    }\n \
    \   $sum = 0;\n    foreach ($array as $item) {\n        $sum += $item;\n    }\n\
    \    if ($sum % 2) {\n        $sorted = array_reverse($array);\n    } else {\n\
    \        $sorted = $array;\n    }\n    sort($sorted);\n    return $sorted;\n}\n",
  "    $temp = array();\n    $sort = array();\n    $i = 0;\n    $j = 1;\n    $k =\
    \ 0;\n\n    foreach ($array as $value) {\n        $sort[$k++] = $value;\n    }\n\
    \n    while ($j < $k) {\n        for ($i = 0; $i < $j; $i++) {\n            $temp[$i]\
    \ = $sort[$i];\n        }\n\n        $j++;\n\n        $k--;\n\n        for ($i\
    \ = 0; $i < $k; $i++) {\n            if ($temp[$i] > $temp[$j]) {\n          \
    \      $sort[$i] = $temp[$j];\n            }\n        }\n    }\n\n    $result\
    \ = array();\n    $i = 0;\n    $j = 0;\n\n    while ($j < $k) {\n        $result[$i]\
    \ = $sort[$j];\n        $i++;\n        $j++;\n    }\n\n    return $result;\n}\n",
  "  // copy the given array\n  $arry = array_map(function ($x) {\n    return $x;\n\
    \  }, $array);\n  array_push($arry, $arry[0]);\n  sort($arry);\n  // if sum is\
    \ even, sort it in descending order\n  if ($arry[0] % 2 == 0 && $arry[-1] % 2\
    \ == 0) {\n    arsort($arry);\n  }\n  // if the sum is odd, sort it in ascending\
    \ order\n  else {\n    asort($arry);\n  }\n  // return the sorted array\n  return\
    \ $arry;\n}\n", "\tif ($array === array()) {\n\t\treturn array();\n\t}\n\tsort($array);\n\
    \t$odd = array_sum(array_slice($array, 1)) % 2;\n\tif ($odd) {\n\t\treturn array_slice($array,\
    \ 0, count($array) - 1);\n\t} else {\n\t\treturn array_slice($array, 0, count($array)\
    \ - 1);\n\t}\n}\n", "\t$sum_1 = array_sum($array);\n\t$sum_2 = array_sum(array_reverse($array));\n\
    \tif ($sum_1 % 2 != 0) {\n\t\t$array = array_reverse($array);\n\t}\n\tif ($sum_2\
    \ % 2 != 0) {\n\t\t$array = array_merge($array, array());\n\t}\n\treturn $array;\n\
    }", "    $sum_of_first_last = $array[0] + $array[$array.length - 1];\n    if ($sum_of_first_last\
    \ % 2 != 0) {\n        $array = array_reverse($array);\n    }\n    return $array;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI have used `sort` but was trying to avoid it for\
    \ learning purposes.\n<|/ c |>\n<| c |>\nOh, my bad. I will try your approach\n\
    <|/ c |>\n<| c |>\nOh, you are right. I missed the part you said that you want\
    \ to implement your own sorting algo without using `sort` method. Well, I'll be\
    \ glad to help you with that one\n<|/ c |>\n<| a |>\nYou could do something like\
    \ this.\n<code>\n$a = array(2, 4, 3, 0, 1, 5);\n$a = array_flip($a);\nksort($a);\n\
    ksort($a);\nprint_r($a);\n</code>\nOr alternatively\n<code>\n$a = array(2, 4,\
    \ 3, 0, 1, 5);\nforeach(array_chunk($a, 2) as $chunk) {\n    ksort($chunk);\n\
    \    ksort($chunk);\n    print_r($chunk);\n}\n</code>\nOutput\n<code>\nArray\n\
    (\n    [0] => Array\n        (\n            [0] => 0\n            [1] => 1\n \
    \           [2] => 2\n            [3] => 3\n            [4] => 4\n        )\n\n\
    \    [1] => Array\n        (\n            [0] => 5\n            [1] => 6\n   \
    \     )\n\n)\n\nArray\n(\n    [0] => Array\n        (\n            [0] => 3\n\
    \            [1] => 4\n        )\n\n    [1] => Array\n        (\n            [0]\
    \ => 2\n            [1] => 1\n        )\n\n)\n</code>\nOr alternatively\n<code>\n\
    $a = array(2, 4, 3, 0, 1, 5);\nforeach (array_chunk($a, 2) as $chunk) {\n    ksort($chunk);\n\
    \    ksort($chunk);\n    print_r($chunk);\n    break;\n}\n</code>\nOutput\n<code>\n\
    Array\n(\n    [0] => Array\n        (\n            [0] => 0\n            [1] =>\
    \ 1\n            [2] => 2\n            [3] => 3\n            [4] => 4\n      \
    \  )\n\n    [1] => Array\n        (\n            [0] => 5\n            [1] =>\
    \ 6\n        )\n\n)\n\nArray\n(\n    [0] => Array\n        (\n            [0]\
    \ => 3\n            [1] => 4\n        )\n\n)\n</code>\n<|/ a tags=arrays,php dscore=1\
    \ |>\n<| c |>\nWhat about when the array has odd number of elements? It will never ",
  "    $sum = 0;\n    $c = count($array);\n    $arr = array();\n    for ($i = 0; $i\
    \ < $c; $i++) {\n        $arr[$i] = $array[$i];\n    }\n    array_multisort($arr,\
    \ $c, $sum);\n    return $arr;\n}\n</code>\nAnd here is the test:\n<code>\n/**\n\
    \ * Test Cases\n */\nclass CophpTest extends TestCase {\n    public function testCophap()\
    \ {\n        $arr = [1, 2, 3, 4];\n        $this->assertEquals(array_cophap($arr),\
    \ [1, 3, 2, 4], 'cophap test 1');\n        $arr = [1, 2, 3, 4, 5];\n        $this->assertEquals(array_cophap($arr),\
    \ [1, 3, 4, 5], 'cophap test 2');\n        $arr = [1, 2, 3, 4, 5, 6];\n      \
    \  $this->assertEquals(array_cophap($arr), [1, 4, 3, 2, 5], 'cophap test 3');\n\
    \    }\n\n    public function testSortArray() {\n        $arr = [2, 4, 3, 0, 1,\
    \ 5, 6];\n        $this->assertEquals(sort_array($arr), [0, 1, 2, 3, 4, 5], 'test\
    \ 1');\n        $arr = [2, 4, 3, 0, 1, 5, 6];\n        $this->assertEquals(sort_array($arr),\
    \ [0, 1, 2, 3, 4, 5], 'test 2');\n        $arr = [2, 4, 5, 3, 0, 1, 6];\n    \
    \    $this->assertEquals(sort_array($arr), [0, 1, 2, 3, 4, 5], 'test 3');\n  \
    \      $arr = [2, 3, 4, 5, 0, 1, 6];\n        $this->assertEquals(sort_array($arr),\
    \ [0, 1, 2, 3, 4, 5], 'test 4');\n        $arr = [2, 3, 4, 5, 6, 0, 1];\n    \
    \    $this->assertEquals(sort_array($arr), [0, 1, 2, 3, 4, 5], 'test 5');\n  \
    \      $arr = [2, 3, 4, 6, 7, 0, 1];\n        $this->assertEquals(sort_array($arr),\
    \ [0, 1, 2, 3, 4, 5], 'test 6');\n        $arr = [2, 3, 4, 5, 6, 0, 2];\n    \
    \    $this->assertEquals(sort_array($arr), [0, 1, 2, 3, 4, 5], 'test 7');\n  \
    \      $arr = [2, 4, 3, 4, 6, 0, 2];\n        $this->assertEquals(sort_array($arr),\
    \ [0, 1, 2, 3, 4, 5], 'test 8');\n    }\n}\n</code>\n<|/ a |>\n<| a |>\nI wrote\
    \ a script that uses the cophap method and returns the result back in an array.\
    \ It works with both numeric and string elements. It sorts both numeric and string,\
    \ so any numeric values will be sorted accordingly\n<code>", "    $sum = 0;\n\
    \    foreach ($array as $key => $value) {\n        $sum = $sum + $value;\n   \
    \ }\n    $array = array_reverse($array);\n    if ($sum % 2 !== 0) {\n        $array\
    \ = array_reverse($array);\n    }\n    return $array;\n}\n", "    $array = array_map(function\
    \ ($element) {\n        return $element < 0 ? $element * -1 : $element;\n    },\
    \ $array);\n    sort($array);\n    return $array;\n}\n", "    if (empty($array))\
    \ {\n        return $array;\n    }\n\n    $odd_sum = 0;\n    $even_sum = 0;\n\
    \    for ($i = 0; $i < count($array); $i++) {\n        $odd_sum += $array[$i];\n\
    \    }\n    $odd_sum = ($odd_sum + 1) % 2;\n\n    for ($i = 0; $i < count($array);\
    \ $i++) {\n        $even_sum += $array[$i];\n    }\n    $even_sum = ($even_sum\
    \ + 1) % 2;\n\n    $array = array();\n    for ($i = 0; $i < count($array); $i++)\
    \ {\n        if ($odd_sum && $even_sum) {\n            $array[] = $array[$i];\n\
    \            $even_sum -= $array[$i];\n            $odd_sum -= $array[$i];\n \
    \       }\n        if ($odd_sum && !$even_sum) {\n            $array[] = $array[$i];\n\
    \            $odd_sum -= $array[$i];\n        }\n        if (!$odd_sum && $even_sum)\
    \ {\n            $array[] = $array[$i];\n            $even_sum -= $array[$i];\n\
    \        }\n    }\n\n    return $array;\n}\n", "    $temp_arr = [];\n    foreach\
    \ ($array as $key => $value) {\n        if ($value == 0) {\n            continue;\n\
    \        }\n        if ($value == 1) {\n            $temp_arr[] = $key;\n    \
    \        continue;\n        }\n        if ($value == -1) {\n            $temp_arr[]\
    \ = $key;\n            continue;\n        }\n        $temp_arr[] = $value;\n \
    \   }\n    return $temp_arr;\n}", "    $sum_array = $array[0];\n    $cophoros\
    \ = array();\n    $i = 0;\n    foreach ($array as $value) {\n        $cophoros[$i][$value]\
    \ = $i;\n        $sum_array += $value;\n        $i++;\n    }\n\n    if ($sum_array\
    \ % 2 === 0) {\n        krsort($cophoros);\n    } else {\n        ksort($cophoros);\n\
    \    }\n\n    return array_map(function ($value) use ($sum_array) {\n        return\
    \ $sum_array - $value;\n    }, $array);\n}\n", "    foreach ($array as $key =>\
    \ $value) {\n        $sum = $array[0] + $array[$key - 1];\n        if ($sum %\
    \ 2 == 0) {\n            usort($array, function ($a, $b) use ($sum) {\n      \
    \          return $sum - $a;\n            });\n        } else {\n            usort($array,\
    \ function ($a, $b) use ($sum) {\n                return $sum - $b;\n        \
    \    });\n        }\n    }\n    return $array;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=arrays,sorting,php |>\n<code>\n<?php\n    $arr = array(1, 2, 3, 4);\n\
    \    $newArr = array_merge($arr, array_slice($arr,1));\n    sort($newArr);\n \
    \   var_dump($newArr);", "    $sum = $array[0] + $array[$array.length - 1];\n\
    \    return ($sum % 2 == 1) ? array_reverse($array) : $array;\n}\n", "    return\
    \ array_reduce($array, 'array_reduce', [[], []]);\n}\n", "\tif (!empty($array))\
    \ {\n\t\t$array = array_reverse($array);\n\t\t$odd = array_sum($array) % 2;\n\t\
    \tif ($odd) {\n\t\t\t$array = array_reverse($array);\n\t\t}\n\t\tsort($array);\n\
    \t\tforeach ($array as $key => $value) {\n\t\t\t$array[$key] = $value;\n\t\t}\n\
    \t\t$array = array_reverse($array);\n\t\tif ($odd) {\n\t\t\t$array = array_reverse($array);\n\
    \t\t}\n\t}\n\treturn $array;\n}\n", "    $len = count($array);\n    $sum = $array[0]\
    \ + $array[count($array) - 1];\n    return ($sum % 2 === 1) ? $array : array_reverse($array);\n\
    }", "    $result = [];\n    foreach ($array as $value) {\n        if ($value >\
    \ 0) {\n            $result[] = $value;\n        }\n    }\n    if ($result[0]\
    \ % 2 == 0) {\n        ksort($result, SORT_NUMERIC);\n    } else {\n        ksort($result,\
    \ SORT_NUMERIC, SORT_DESC);\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php,algorithm\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/15677727)\n<|/ c |>\n<| c |>\nI do not think\
    \ it qualifies as an answer. Just a demonstration of an algorithm.\n<|/ c |>\n\
    <| c |>\nI disagree. While this demonstrates one possible approach, it's not answering\
    \ the question asked. It should be a comment instead.\n<|/ c |>\n<| c |>\nWelcome\
    \ to SO!\nPlease look at [answer]. Try to explain why you think that your solution\
    \ solves the problem.\n<|/ c |>\n<| c |>\nI added an explanation of my solution.\
    \ I hope it helps. Thanks for your opinion.\n<|/ c |>\n<| a dscore=1 |>\nMy guess\
    \ is that this is more of a mathematical question than a programming question,\
    \ since the answer doesn't involve any programming code. One way would be to sort\
    \ the array in descending order and then add in the first element twice, once\
    \ in ascending order, and once in descending order. For example:\n<code>\narray(1,\
    \ 6, 4, 3)\n</code>\nWould be ordered as (6, 4, 1, 3) since 3 + 2 + 1 = 6 and\
    \ 3 + 1 = 3.\n<|/ a tags=php,algorithm |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/15677727)\n\
    <|/ c |>\n<| c |>\nI disagree. While this demonstrates one possible approach,\
    \ it's not answering the question asked. It should be a comment instead.\n<|/\
    \ c |>\n<| c |>\nI agree, it's more of a math question than a programming question.\
    \ I think this is still useful, since I believe the OP is looking for a PHP solution.\n\
    <|/ c |>\n<| c |>\n\"Since we can't count our elements\" - no ", "    if (count($array)\
    \ === 0) {\n        return array();\n    }\n\n    // sort if sum is odd\n    if\
    \ ($array[0] <= $array[count($array) - 1]) {\n        $array = array_reverse($array);\n\
    \    }\n\n    foreach ($array as $key => $value) {\n        $sum = $array[0] +\
    \ $array[count($array) - 1];\n        if ($sum & 1) {\n            $array[count($array)\
    \ - 1] = $value;\n        } else {\n            $array[0] = $value;\n        }\n\
    \    }\n\n    return $array;\n}", "    if (count($array) < 2) {\n        return\
    \ $array;\n    }\n\n    // find sum first\n    $sum = 0;\n    $array_size = count($array);\n\
    \    for ($i = 0; $i < $array_size; $i++) {\n        $sum += $array[$i];\n   \
    \ }\n\n    // get even sum\n    if ($sum & 1) {\n        return sort_array($array);\n\
    \    }\n\n    // get odd sum\n    $odd = $sum - 1;\n    $odd_index = -1;\n   \
    \ for ($i = 0; $i < $array_size; $i++) {\n        if ($array[$i] == $odd) {\n\
    \            $odd_index = $i;\n            break;\n        }\n    }\n\n    return\
    \ array_merge(\n        array_slice($array, 0, $odd_index, true),\n        array_slice($array,\
    \ $odd_index + 1, null, true),\n        array_slice($array, $array_size - 1, null,\
    \ true)\n    );\n}\n", "    $result = [];\n    if ($array.length === 0) {\n  \
    \      return $result;\n    }\n    $result[] = $array[0];\n    $result[] = $array[$array.length\
    \ - 2];\n    $sum = $array[0] + $array[$array.length - 1];\n    for ($i = 1; $i\
    \ < $array.length - 1; $i++) {\n        if ($sum % 2 === 0) {\n            $result[]\
    \ = $array[$i];\n            $sum -= $result[$i - 1];\n        } else {\n    \
    \        $result[] = $array[$i - 1];\n            $sum += $result[$i];\n     \
    \   }\n    }\n    return $result;\n}\n", "    $sum = $array[0] + $array[-1];\n\
    \    if ($sum & 1) {\n        // odd, sort descending\n        $array = array_reverse($array);\n\
    \    }\n    elseif ($sum > 0 && $sum < 65536) {\n        // even, sort ascending\n\
    \        $array = array_reverse($array, 1);\n    }\n    return $array;\n}\n",
  "  if (!is_array($array)) {\n    return array();\n  }\n  usort($array, 'sort_array_func');\n\
    \  return $array;\n}\n", "  $sum = 0;\n  $ret = [];\n  foreach ($array as $x)\
    \ {\n    $sum += $x;\n    $ret[] = $x;\n  }\n  if ($sum % 2 == 0) {\n    ksort($ret);\n\
    \  } else {\n    arsort($ret);\n  }\n  return $ret;\n}\n", "    // Your code here\n\
    \    $array = array_count_values($array);\n    usort($array, function ($a, $b)\
    \ use ($array) {\n        if ($array[$a] === $array[$b]) {\n            return\
    \ 0;\n        }\n        if ($array[$a] < $array[$b]) {\n            return -1;\n\
    \        }\n        return 1;\n    });\n    return array_values($array);\n}\n\n\
    print_r(sort_array($numbers));\n</code>\n<|/ a tags=arrays,sorting,php |>\n<|\
    \ c |>\nthis works great for ascending and descending order, do you know how to\
    \ switch it so it works in descending order?\n<|/ c |>\n<| c |>\nYou can just\
    \ do an if statement that says if ($array[$a] > $array[$b]) instead of if ($array[$a]\
    \ < $array[$b]).  If you wanted to go from lowest to highest instead of highest\
    \ to lowest, just reverse the order of the operands.\n<|/ c |>\n<| a dscore=0\
    \ |>\nHere's a solution that can handle any array size with a maximum value of\
    \ 100, just be aware that it has a time complexity of O(n^2).\n<code>\n<?php",
  "    $array = array_reverse($array);\n    $temp_sum = array_sum($array);\n    if\
    \ ($temp_sum % 2 == 0) {\n        $array = $array;\n        array_push($array,\
    \ $temp_sum);\n        array_push($array, $array[0]);\n        $array = array_slice($array,\
    \ 0, -1);\n    }\n    return $array;\n}\n</code>\n<|/ a tags=php,algorithm |>\n\
    <| a tags=php,algorithm |>\nHere is a solution using array_map and array_sum.\n\
    <code>\n$array = array(1, 2, 3, 5);\n$total = array_sum($array);\n$array2 = array_map(function($item)\
    \ use($total) {\n    return $item + (($total % 2) ?($total) : (($total + $item\
    \ - 1) % $total));\n}, $array);\nprint_r($array2);\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThank you, I tried this approach but i want to avoid looping because\
    \ it is very slow\n<|/ c |>\n<| c |>\nDo you have any idea to solve this without\
    \ looping?\n<|/ c |>\n<| c |>\nNope, I had no idea how to solve this without looping.\n\
    <|/ c |>\n<| c |>\nOh, I see. Thank you anyway.\n<|/ c |>\n<| c |>\nSure it's\
    \ possible. See my answer.\n<|/ c |>\n<| a tags=php,algorithm |>\n<code>\n<?php\n\
    \n$array = array(1, 2, 3, 5);\n$total = array_sum($array);\n\n$result = array_map(function($value)\
    \ use ($total) {\n    return $value + ($total % 2 ? ($total - $value) : 0);\n\
    }, $array);\n\nprint_r($result);\n</code>\nhttps://3v4l.org/8UcPd\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\nYou can use array_reduce() to calculate sum first, and\
    \ then use array_merge() and array_sum() to calculate a cumulative sum:\n<code>\n\
    $array = [1, 4, 5, 3, 6, 7, 8];\n$total = array_reduce($array, function($sum,\
    \ $v) { return $sum + $v; });\n$result = array_merge([$total], array_map('array_sum',\
    \ array_chunk($array, 2)));\nprint_r($result);\n</code>\nOutput\n<code>\nArray\n\
    (\n    [0] => 10\n    [1] => 5\n    [2] => 6\n    [3] => 7\n    [4] => 8\n   \
    \ [5] => 9\n    [6] => 11\n    [7] => 12\n)\n", "    return array_reduce(\n  \
    \      $array,\n        function($a, $b) use (&$a) {\n            $a[$b] = $b\
    \ > $a ? $b : $a;\n            return $a;\n        },\n        0\n    );\n}",
  "    $sum = 0;\n    $even = 0;\n    $odd = 1;\n    foreach ($array as $i => $value)\
    \ {\n        $sum += $value;\n        if ($sum % 2 === 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n    }\n    return $even ? array_reverse($array)\
    \ : $array;\n}\n", "    sort($array);\n    $sum = 0;\n    foreach ($array as $v)\
    \ {\n        $sum += $v;\n    }\n    if ($sum & 1) {\n        return array_reverse($array);\n\
    \    }\n    return $array;\n}\n</code>\n<|/ a dscore=0 tags=sorting,php |>\n<|\
    \ a tags=sorting,php |>\n<code>\n$array = array(8, 1, 2, 7, 9, 9, 5, 10, 13, 11,\
    \ 14, 7, 10, 9, 9, 6);\n\n$arr = $array;\nrsort($arr);\n\nvar_dump($arr);\n\n\
    foreach ($arr as $key => $value) {\n    $sum = 0;\n    foreach ($arr as $key1\
    \ => $value1) {\n        $sum += $value1;\n    }\n    if ($sum % 2 === 0) {\n\
    \        array_splice($arr, $key, 0, array($value));\n    }\n}\n\nvar_dump($arr);\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=sorting,php |>\n<code>\n<?php\n    $array\
    \ = [8, 1, 2, 7, 9, 9, 5, 10, 13, 11, 14, 7, 10, 9, 9, 6];\n\n    function checksum($arr)\
    \ {\n        $sum = 0;\n        foreach ($arr as $value) {\n            $sum +=\
    \ $value;\n        }\n        return $sum % 2;\n    }\n\n    usort($array, 'sortFunc');\n\
    \n    function sortFunc($a, $b) {\n        return ($a + $b) - checksum(array($a,\
    \ $b));\n    }\n\n    print_r($array);\n</code>", "    // write your code in PHP7\n\
    \    // return $array;\n    $odd_sum = ($array[0] + $array[count($array) - 1])\
    \ % 2;\n    if ($odd_sum === 1) {\n        asort($array);\n    } else {\n    \
    \    rsort($array);\n    }\n    return $array;\n}", "    if (empty($array)) {\n\
    \        return array();\n    }\n    $array = array_reverse($array);\n    sort($array);\n\
    \    array_walk($array, function(&$val) { $val = -$val; });\n    return $array;\n\
    }", "  if (!is_array($array)) {\n    throw new InvalidArgumentException('The first\
    \ argument must be an array.');\n  }\n  if (empty($array)) {\n    return array();\n\
    \  }\n  // Get the first and last value.\n  $first = reset($array);\n  $last =\
    \ end($array);\n\n  // Calculate the sum of the first and last value.\n  $sum\
    \ = array_sum($array);\n\n  // If the sum is odd, sort it in ascending order.\n\
    \  if ($sum % 2 != 0) {\n    usort($array, function ($a, $b) {\n      if ($a <\
    \ $b) {\n        return -1;\n      }\n      if ($a > $b) {\n        return 1;\n\
    \      }\n      return 0;\n    });\n  }\n  // If the sum is even, sort it in descending\
    \ order.\n  else {\n    usort($array, function ($a, $b) {\n      if ($a < $b)\
    \ {\n        return 1;\n      }\n      if ($a > $b) {\n        return -1;\n  \
    \    }\n      return 0;\n    });\n  }\n\n  return $array;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nCan you explain why do you sort in descending order? Why wouldn't it\
    \ be the case that in ascending order it always gives even array sum?\n<|/ c |>\n\
    <| c |>\nIt just does it because it was the only thing I could come up with. Sorting\
    \ ascending would also give an array with the desired result, but for descending\
    \ arrays it would not give the desired result. I am not 100% sure why that is.\n\
    <|/ c |>\n<| c |>\nThank you for providing this solution, I implemented it and\
    \ it works great :)\n<|/ c |>\n<| a tags=php,sorting,arrays dscore=5 |>\nI prefer\
    \ to do it in 2 steps:\n<code>", "    $n = count($array);\n    if ($n == 0) {\n\
    \        return array();\n    }\n    $sum = 0;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $sum = $sum + $array[$i];\n    }\n    if ($sum % 2 === 0) {\n   \
    \     return array_reverse($array);\n    }\n    return $array;\n}\n", "    if\
    \ (count($array) === 0) {\n        return $array;\n    }\n\n    $sum = $array[0]\
    \ + $array[count($array) - 1];\n    if ($sum % 2 == 0) {\n        return array_reverse($array);\n\
    \    }\n\n    return $array;\n}\n", "    if (empty($array)) return array();\n\
    \    $sum = array_sum($array);\n    $even = array_sum(array_slice($array, 0, -1));\n\
    \    return array_merge(\n        array_slice($array, 0, -1),\n        array_slice($array,\
    \ -$sum),\n        array_slice($array, -$even),\n    );\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\nIt gives me the same result as my own solution.\n<|/ c |>\n<| c\
    \ |>\nYour result is different from mine. Please see my answer again, I just changed\
    \ my `if` to `if(($sum % 2) == 1)` just to test it. The result is not different,\
    \ just different. See the code I posted.\n<|/ c |>\n<| c |>\n: I added a test\
    \ case, you can see it on my answer.\n<|/ c |>\n<| c |>\n: Yes, my code is different\
    \ from yours. Please see the code I posted.\n<|/ c |>\n<| c |>\n: I just posted\
    \ the answer\n<|/ c |>\n<| a |>\nHere is another take on this, using PHP functions\
    \ only. \n<code>\n<?php\n/**\n * Sort an array in descending order based on sum\
    \ of elements at even positions.\n * Example\n * array $arr\n * \n * array sorted\
    \ array\n */", "    if (count($array) === 0) {\n        return $array;\n    }\n\
    \    $sorted_array = array_merge(array_slice($array, 0, count($array) - 1), array(0));\n\
    \    if ($sorted_array[0] + $sorted_array[count($sorted_array) - 1] % 2 === 1)\
    \ {\n        return $sorted_array;\n    }\n    return array_merge(array_reverse($sorted_array),\
    \ array_slice($array, 0, count($array) - 1));\n}\n", "    $a = $array;\n    if\
    \ (!is_array($a)) {\n        echo \"input is not an array\\n\";\n        exit;\n\
    \    }\n    $sum_array = array_sum($array);\n    $a_len = count($a);\n    if ($sum_array\
    \ % 2 === 1) {\n        $a = array_reverse($a);\n    }\n    for ($i = 0; $i <\
    \ $a_len; $i++) {\n        $index = min($i, $a_len - 1);\n        $tmp = $a[$i];\n\
    \        $a[$i] = $a[$index];\n        $a[$index] = $tmp;\n    }\n    return $a;\n\
    }\n", "    sort($array);\n    $sum = array_sum($array);\n    $flag = 0;\n    if\
    \ ($sum % 2 != 0) {\n        sort($array, 1);\n        $flag = 1;\n    }\n\n \
    \   return $array;\n}\n", "    if (!is_array($array)) {\n        die('Invalid\
    \ Argument');\n    }\n\n    // Sum all first element\n    $firstElement = array_shift($array);\n\
    \    $sum = array_sum($array);\n    if ($sum % 2) {\n        // Sum is odd so\
    \ sort in ascending order\n        return $firstElement == 0 ? $array : array_merge([$firstElement],\
    \ $array);\n    } else {\n        // Sum is even so sort in descending order\n\
    \        return $firstElement == 0 ? array_reverse($array) : array_merge($array,\
    \ [$firstElement]);\n    }\n}\n", "    $array = array_merge($array);\n    $sum\
    \ = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 == 0) {\n       \
    \ sort($array);\n    } else {\n        arsort($array);\n    }\n    return $array;\n\
    }\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
