name: HumanEval_104_unique_digits
language: php
prompt: "<?php\n// Given an array of positive integers x. return a sorted array of\
  \ all \n// elements that hasn't any even digit.\n// Note: Returned array should\
  \ be sorted in increasing order.\n// For example:\n// >>> unique_digits(array(15,\
  \ 33, 1422, 1))\n// array(1, 15, 33)\n// >>> unique_digits(array(152, 323, 1422,\
  \ 10))\n// array()\nfunction unique_digits($x) {\n"
tests: "function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
  \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
  \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) {\
  \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["\t$num = array_count_values($x);\n\t$keys = array_keys($num);\n\t$num_keys\
    \ = array_count_values($keys);\n\t$keys = array_keys($num_keys);\n\t$num_keys\
    \ = array_keys($keys);\n\t$sorted = array();\n\tforeach($x as $x_key) {\n\t\t\
    foreach($keys as $key_key => $key_value) {\n\t\t\tif ($x_key % $key_value != 0)\n\
    \t\t\t\tcontinue 2;\n\t\t}\n\t\t$sorted[] = $x_key;\n\t}\n\treturn $sorted;\n\
    }\n", "  if (empty($x)) {\n    return array();\n  }\n\n  $sorted = array();\n\
    \  foreach ($x as $x_value) {\n    $n_x = $x_value;\n    $n_x_int = (int)$n_x;\n\
    \n    while (true) {\n      $found = false;\n      foreach ($sorted as $sorted_x_value)\
    \ {\n        if ($sorted_x_value == $n_x) {\n          $found = true;\n      \
    \    break;\n        }\n      }\n\n      if (!$found) {\n        $sorted[] = $n_x;\n\
    \      }\n\n      if ($n_x_int % 2 == 0) {\n        break;\n      }\n\n      $n_x\
    \ = $n_x / 10;\n      $n_x_int = (int)$n_x;\n    }\n  }\n\n  return $sorted;\n\
    }\n", "    $sorted = array();\n    for($i=0; $i<sizeof($x); $i++){\n        if($x[$i]\
    \ % 2 == 0){\n            $sorted[] = $x[$i];\n        }\n    }\n    return $sorted;\n\
    }\n</code>\n<|/ a tags=algorithm,php |>\n<| c |>\nOh sorry I haven't written my\
    \ own code yet. I am trying your code. Thanks so much! :)\n<|/ c |>\n<| c |>\n\
    Thanks so much! It works perfectly :)\n<|/ c |>\n<| a tags=algorithm,php |>\n\
    You can use a variable to hold the result of the current subarray that you are\
    \ iterating through.\n<code>\n$x = array(152, 323, 1422, 10);\n$result = array();\n\
    foreach($x as $y) {\n  $result[] = $y;\n}\nprint_r($result);\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for the quick answer! The problem is I want the result to\
    \ be sorted in increasing order after I finished the loop. Your solution returns\
    \ `Array ( [0] => 152 [1] => 323 [2] => 1422 [3] => 10 )`\n<|/ c |>\n<| c |>\n\
    sorry I forgot to mention I want the result to be sorted in increasing order after\
    \ I finished the loop. Your solution returns `Array ( [0] => 152 [1] => 323 [2]\
    \ => 1422 [3] => 10 )`\n<|/ c |>\n<| a dscore=0 |>\nThis may not be very efficient\
    \ but it will give you the desired output in array form:\n<code>\n<?php\n\n$x\
    \ = array(152, 323, 1422, 10);\n$i = 1;\n$sorted = array();\nforeach($x as $y){\n\
    \    if($i % 2 == 0){\n        $sorted[] = $y;\n        $i++;\n    }\n}\n\nprint_r($sorted);",
  "    $ans = array();\n    foreach($x as $item) {\n        foreach($ans as $k =>\
    \ $v) {\n            if($item % $v == 0) {\n                unset($ans[$k]);\n\
    \                break;\n            }\n        }\n    }\n    return $ans;\n}\n",
  "    $r = [];\n    foreach ($x as $key => $val) {\n        if (is_numeric($val)\
    \ && strlen($val) == 1) {\n            if ($val & 1) $r[] = $val;\n        } else\
    \ {\n            $r[] = $val;\n        }\n    }\n    return $r;\n}\n", "    $uniques\
    \ = array();\n    foreach ($x as $digit) {\n        array_push($uniques, $digit\
    \ % 10);\n    }\n    return array_count_values($uniques);\n}\n", "    foreach($x\
    \ as $v) {\n        foreach($x as $w) {\n            if ($w == $v) break;\n  \
    \          if ($v & $w) break;\n        }\n        if ($w % 2) unset($x[$w]);\n\
    \    }\n    return $x;\n}\n</code>\n<|/ a dscore=0 tags=php,sorting,arrays |>\n\
    <| a tags=php,sorting,arrays |>\nTry this code : \n<code>\n<?php\n$array=array(\n\
    \    array(5,1,3,5),\n    array(2,3,5,5),\n    array(2,1,3,4),\n    array(4,3,5,3),\n\
    \    array(4,5,4,3),\n    array(7,2,4,5),\n    array(6,2,1,3),\n    array(7,2,4,5),\n\
    \    array(3,5,7,6),\n    array(2,5,4,7),\n    array(5,6,4,2),\n    array(1,5,6,4),\n\
    \    array(5,7,2,3),\n    array(4,3,2,1),\n    array(2,7,4,3)\n);\n$array=array_unique($array);\n\
    $result=array();\nforeach($array as $a){\n    $b=$a;\n    foreach($a as $k=>$v){\n\
    \        foreach($a as $k2=>$v2){\n            if($v==$v2 || $v==$v2){\n     \
    \           $b[$k]=0;\n            }\n        }\n    }\n    $result[]=$b;\n}\n\
    $result=array_keys($result);\nprint_r($result);", "    $uniqueArray = array();\n\
    \    $length = count($x);\n    for($i = 0; $i < $length; $i++) {\n        if(is_int($x[$i]))\n\
    \            $uniqueArray[] = $x[$i];\n    }\n    sort($uniqueArray);\n    return\
    \ array_unique($uniqueArray);\n}\n", "    if (empty($x)) return array();\n   \
    \ $r = array();\n    foreach ($x as $e) {\n        if ($e != 0 && !is_integer($e))\
    \ {\n            foreach ($r as $k=>$val) {\n                $m = 0;\n       \
    \         if ($val != 0 && !is_integer($val)) {\n                    for ($i=0;$i<$k;$i++)\
    \ {\n                        $m = $m + ($val%$val);\n                    }\n \
    \               }\n                if ($m == 0) $r[] = $e;\n            }\n  \
    \      }\n    }\n    return $r;\n}\n", "    // write your code here\n    \n  \
    \  $unique_digits=array();\n    for($i=0;$i<count($x);$i++){\n        if(in_array($x[$i%10],$unique_digits)){\n\
    \            unset($x[$i%10]);\n        }else{\n            array_push($unique_digits,$x[$i%10]);\n\
    \        }\n    }\n    return $x;\n}\n", "    $unique_digits = array();\n    foreach\
    \ ($x as $x_value) {\n        $x_value_int = intval($x_value);\n        $x_digits\
    \ = str_split($x_value);\n        foreach ($x_digits as $x_digit) {\n        \
    \    if (in_array($x_digit, $unique_digits)) {\n                continue;\n  \
    \          }\n            if ($x_value_int % 10 == 0) {\n                $unique_digits[]\
    \ = $x_digit;\n            }\n        }\n    }\n    return $unique_digits;\n}",
  "    $res = array();\n    foreach($x as $key=>$val)\n    {\n        $sum = 0;\n\
    \        foreach ($x as $key2=>$val2)\n        {\n            if ($val2 != $key)\n\
    \            {\n                $sum += $val;\n            }\n        }\n    \
    \    if ($sum % 2 != 0)\n        {\n            $res[] = $key;\n        }\n  \
    \  }\n    sort($res);\n    return $res;\n}\n", "    $result = [];\n    $result[]\
    \ = $x[0];\n    $x = array_slice($x, 1);\n    $xLen = count($x);\n    $digit;\n\
    \    for ($i = 0; $i < $xLen; $i++) {\n        $digit = is_string($x[$i]) ? str_split($x[$i])\
    \ : $x[$i];\n        $oddDigits = array_filter($digit, function($val) { return\
    \ $val % 2 === 0; });\n        $evenDigits = array_filter($digit, function($val)\
    \ { return $val % 2 !== 0; });\n        $result = array_merge($result, $oddDigits);\n\
    \        $result = array_merge($result, $evenDigits);\n    }\n    return $result;\n\
    }", "    $digits = array();\n    foreach ($x as $e) {\n        sort($digits);\n\
    \        $s = \"\";\n        foreach ($digits as $k) {\n            $s = $s.$e;\n\
    \        }\n        if (!preg_match(\"/^\\D/\", $s)) {\n            array_push($digits,\
    \ $e);\n        }\n    }\n    return $digits;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThe above function worked for my test cases, however, it is still failing\
    \ in some cases. Can you please help me with this?\n<|/ c |>\n<| c |>\n- can you\
    \ post examples of those cases that it fails on?\n<|/ c |>\n<| c |>\nI have added\
    \ a test case in my question.\n<|/ c |>\n<| c |>\n- I fixed my answer (I hadn't\
    \ realized that `unique_digits` should already be sorted, so I didn't account\
    \ for that in it).  I also added a test case to my answer that is now failing.\n\
    <|/ c |>\n<| c |>\n- I added a test case to my answer.... and also fixed a bug\
    \ in my code that I was using\n<|/ c |>\n<| a tags=algorithm,arrays,sorting,php\
    \ dscore=0 |>\nHere's a solution using array_reduce:\n<code>\n$array = array(15,\
    \ 33, 1422, 10);\n$unique = array_reduce($array, function($arr, $n) {\n    $digits\
    \ = str_split($n);\n    $filtered = array_filter($digits, function($v){return\
    \ $v === 0;});\n    return $arr + $filtered;\n}, array());\n</code>\nThis simply\
    \ runs through the array and builds a list of the unique integers, filters out\
    \ any zeros, and then sticks them all back into the array using array_reduce.\n\
    <|/ a |>\n<| a dscore=0 |>\n<code>\n$a = array(15,33,1422,10);\n$count = array();\n\
    foreach($a as $v){\n$count[$v]++;\n}\n$temp = array();\nforeach($count as $key=>$val){\n\
    if($val>=1){\n$temp[$key]=$val;\n}\n}\nprint_r($temp);\n</code>\n<|/ a tags=algorithm,arrays,sorting,php\
    \ |>\n<| a tags=algorithm,arrays,sorting,php |>\nMy solution without using any\
    \ loop. Hope this help to someone.\n<code>\n$input = array(15, 33, 1422, 10);",
  "  $result = [];\n  foreach ($x as $xe) {\n    $result[] = $xe % 10;\n  }\n  $result\
    \ = array_count_values($result);\n  return array_filter($result, function ($v)\
    \ use ($x) {\n    return $v < count($x);\n  });\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nthank you, i added `usort($result, function($a,$b) {\n  return strcmp(substr($a,-1),substr($b,-1));\n\
    });` after `foreach ($x as $xe) {\n    $result[] = $xe % 10;\n  }` because i wanted\
    \ the result to be sorted according to occurrence of digit.\n<|/ c |>\n<| c |>\n\
    Oh, I forgot to mention that. Sorry. I'll edit it now.\n<|/ c |>\n<| c |>\nsorry,\
    \ i forgot to mention that this was for an online judge problem. i just tested\
    \ your solution and it seems that it takes too long for large input (like `array(958,\
    \ 958, 958, 958)`). and i also tried another solution above with `$x` converted\
    \ to `string` and it seems that your solution also works, it just takes a little\
    \ longer. and i also tried using [this link](http://www.geeksforgeeks.org/largest-number-no-repeating-digits/)\
    \ algorithm and that also seems not to work. but thank you very much for your\
    \ answer anyway.\n<|/ c |>\n<| c |>\nYou're welcome! I tested it with a different\
    \ set of data and it worked. What input do you used? Can you share it with me?\
    \ I'll try to find what's wrong with the other one.\n<|/ c |>\n<| c |>\nI used\
    \ a large array of integers `array(958, 958, 958, 958, 958, 958, 958, 958, 958,\
    \ 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958,\
    \ 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 958,\
    \ 958, 958, 958, 958, 958, 958, 958, 958", "    $x = array_reverse($x);\n    $digits\
    \ = array();\n    $i = count($x) - 1;\n    while($i >= 0) {\n        while($x[$i]\
    \ % 2 == 0) {\n            $x[$i] /= 10;\n            $digits[] = $x[$i];\n  \
    \          --$i;\n        }\n        --$i;\n    }\n    return $digits;\n}\n</code>\n\
    <|/ a tags=arrays,php dscore=0 |>\n<| a dscore=0 |>\nOne way of doing this is\
    \ by using PHP built in function array_filter().\n<code>\n$arr = array(152, 323,\
    \ 1422, 10);\n\n$filteredArr = array_filter($arr, function ($value) {\n    return\
    \ $value % 2 === 0;\n});\n\nprint_r($filteredArr);\n</code>\nIt will output:\n\
    <code>\nArray\n(\n    [0] => 1422\n    [2] => 10\n)\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\nThe return value of `array_filter` is an array, so this code is\
    \ actually not doing what OP wants.\n<|/ c |>\n<| c |>\nYeah, the point was to\
    \ filter out the even numbers. I guess this answer is wrong. I'm removing the\
    \ downvote\n<|/ c |>\n<| a |>\nI think this will work:\n<code>", "  if ($x ===\
    \ NULL) return array();\n  $resultArray = array();\n  $resultArray = array_merge($resultArray,\
    \ array_unique($x));\n  $resultArray = array_values($resultArray);\n  $resultArray\
    \ = array_filter(\n    $resultArray,\n    function($var) {\n      if ($var % 2\
    \ === 0) {\n        return true;\n      }\n      return false;\n    }\n  );\n\
    \  return $resultArray;\n}\n", "    foreach ($x as $key => $value) {\n       \
    \ if ($value % 2 === 0) {\n            unset($x[$key]);\n        }\n    }\n  \
    \  return $x;\n}", "  $sorted = array_unique($x);\n  $sorted = array_filter($sorted);\n\
    \  return $sorted;\n}\n", "    if (!is_array($x)) return array();\n    $arr =\
    \ array();\n    foreach ($x as $val) {\n        for ($i = strlen($val); $i > 0;\
    \ $i--)\n            if ($val[strlen($val) - $i] % 2 == 0) break;\n        array_push($arr,\
    \ $val);\n    }\n    return $arr;\n}\n", "    $result = [];\n    $odd = false;\n\
    \    foreach ($x as $item) {\n        if (!is_int($item)) {\n            return\
    \ false;\n        }\n        if ($item % 2 !== 0) {\n            $result[] = $item;\n\
    \        }\n    }\n    return $result;\n}\n\n$result = unique_digits(array(1,\
    \ 152, 323, 1422, 10));\necho \"<pre>\";\nprint_r($result);", "    $array = array();\n\
    \    foreach ($x as $n) {\n        $array = array_merge($array, preg_split('//',\
    \ $n, -1, PREG_SPLIT_NO_EMPTY));\n    }\n    array_multisort($array, SORT_NUMERIC,\
    \ SORT_ASC, $x);\n    return $x;\n}\n", "    // Write your logic here\n}", " \
    \  sort($x);\n   $result = [];\n   foreach($x as $num) {\n      if ($num % 2 ===\
    \ 0) {\n         $result[] = $num;\n      }\n   }\n   return $result;\n}\n", "\t\
    $arr = array();\n\tforeach($x as $num){\n\t\t$digits = str_split($num);\n\t\t\
    foreach($digits as $digit){\n\t\t\tif(!in_array($digit, $arr)){\n\t\t\t\t$arr[]\
    \ = $digit;\n\t\t\t}\n\t\t}\n\t}\n\treturn $arr;\n}", "    $arr = array();\n \
    \   foreach($x as $key => $value) {\n        if($value % 2 == 0) $arr[] = $value;\n\
    \    }\n    return $arr;\n}\n", "    $digits = [];\n    $sorted_x = sort($x);\n\
    \    for($i = 0; $i < count($x); $i++) {\n        $d = $x[$i];\n        if(in_array($d,\
    \ $digits)) {\n            continue;\n        }\n        $digits[] = $d;\n   \
    \ }\n    return $digits;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\nHere is the\
    \ complete solution using array_walk() and array_unique() and strlen() functions.\
    \ It uses two loops for looping the array and second one to filter duplicate elements.\n\
    <code>", "    return array_filter(\n        $x, \n        function ($v) { return\
    \ is_int($v) && $v % 2 === 0; } \n    );\n}\n", "    $result = array();\n    foreach($x\
    \ as $value) {\n        foreach($result as $value) {\n            if ($value %\
    \ 10 == 0 && !$value) {\n                $result[] = $value;\n            }\n\
    \        }\n    }\n    return $result;\n}\n\n/**\n * Print the given array.\n\
    \ * \n * Example:\n * >>> print_r([1, 2, 3])\n * Array\n * (\n *     [0] => 1\n\
    \ *     [1] => 2\n *     [2] => 3\n * )\n * \n * \n * Example: \n * >>> print_r(array(1,2,3,4,5,6,7,8))\n\
    \ * Array\n * (\n *     [0] => 1\n *     [1] => 2\n *     [2] => 3\n *     [3]\
    \ => 4\n *     [4] => 5\n *     [5] => 6\n *     [6] => 7\n *     [7] => 8\n *\
    \ )\n * \n * @param array $x\n */", "    if ($x) return array_unique($x, 'array_unique');\n\
    \    return array();\n}\n</code>\n<|/ a |>\n<| c |>\nThank you for the suggestion.\
    \ However, my task was to write a php function which can be applied in any type\
    \ of array. I tried to edit your function, but no success. Could you please check?\n\
    <|/ c |>\n<| c |>\nThis isn't the best answer... It only deals with strings and\
    \ numbers.\n<|/ c |>\n<| a dscore=0 |>\nIf your task is to find a unique digit\
    \ from an array of integers or strings, you can use this algorithm with array_count_values.\n\
    <code>\n$intArr = array(1,2,2,3,3,5,6,8,9,8,11,1);\n$strArr = array(\"a\",\"b\"\
    ,\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\");\n", "    $ret = [];\n\
    \    foreach ($x as $e) {\n        $digits = str_split($e);\n        foreach ($digits\
    \ as $digit) {\n            if ($digit != '0') {\n                $ret[] = $digit;\n\
    \            }\n        }\n    }\n    return $ret;\n}\n\n$result = unique_digits($num);\n\
    print_r($result);\n</code>\n<|/ a tags=arrays,sorting,php |>\n<| c |>\nI have\
    \ tried this, but i get this error: PHP Fatal error:  Uncaught exception 'Exception'\
    \ with message 'String could not be parsed as valid integer' in /home/maria/public_html/math/math/unique.php:19\n\
    <|/ c |>\n<| c |>\nI updated the answer as i realized you were trying to get an\
    \ answer without knowing what kind of array you had\n<|/ c |>\n<| c |>\nI still\
    \ get this error: PHP Fatal error:  Uncaught exception 'Exception' with message\
    \ 'String could not be parsed as valid integer' in /home/maria/public_html/math/math/unique.php:19\n\
    <|/ c |>\n<| c |>\nI made a mistake, it should return an empty array. Answer updated\n\
    <|/ c |>\n<| a |>\nIf you do not want to use array_unique then you can try this\
    \ code:\n<code>", "\tsort($x);\n\t$d = array_count_values($x);\n\t$ans = array();\n\
    \tforeach($d as $k=>$v){\n\t\tif($v==1) $ans[] = $k;\n\t}\n\treturn $ans;\n}\n",
  "    $digits = array();\n    foreach($x as $num) {\n        $digits[] = $num % 10;\n\
    \    }\n    return array_unique($digits);\n}", "\t$digits = array();\n\tforeach\
    \ ($x as $key => $element) {\n\t\t$digits[] = $element;\n\t}\n\t$sorted = $digits;\n\
    \tsort($sorted);\n\tforeach ($sorted as $key => $element) {\n\t\t$rest = $x -\
    \ $digits;\n\t\tforeach ($rest as $index => $element) {\n\t\t\tif (!$element %\
    \ 2) {\n\t\t\t\tunset($sorted[$key]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return $sorted;\n}", "    $arr = array();\n    $result = array();\n    foreach\
    \ ($x as $key => $value) {\n        if (is_numeric($value) && $value == intval($value))\
    \ {\n            $arr[] = $value;\n        }\n    }\n    sort($arr);\n    foreach\
    \ ($arr as $value) {\n        $result = array_merge($result, str_split($value));\n\
    \    }\n    return array_filter($result);\n}", "  $y = array();\n  foreach($x\
    \ as $z) {\n    $zmod = $z & ($z >> 1);\n    if ($zmod != 0) {\n      $zmod =\
    \ pow(10, $zmod);\n    }\n    $y[$z] = $z;\n    $y[$zmod] = $zmod;\n  }\n  $n\
    \ = count($y);\n  for ($i = 1; $i <= $n; $i++) {\n    $x = array();\n    foreach\
    \ ($y as $k => $v) {\n      if ($y[$k] % $i == 0) {\n        array_push($x, $y[$k]);\n\
    \      }\n    }\n    $y[$i] = call_user_func_array('array_merge', $x);\n  }\n\
    \  return $y;\n}\n", "\t$a = array();\n\tforeach($x as $x_el) {\n\t\t$n_el = strlen($x_el);\n\
    \t\tfor($i = 0; $i < $n_el; $i++) {\n\t\t\tif($x_el[$i] != '0') {\n\t\t\t\t$a[]\
    \ = $x_el;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn $a;\n}\n", "    $result\
    \ = [];\n    foreach($x as $k => $v){\n        if ($v%2 != 0){\n            $result[]\
    \ = $v;\n        }\n    }\n    return array_unique($result);\n}\n", "    sort($x);\n\
    \    $res = array();\n    foreach ($x as $el) {\n        if ($el & 1)\n      \
    \      $res[] = $el;\n    }\n    return $res;\n}\n", "    $unique = array();\n\
    \    $length = count($x);\n    $even = false;\n    for($i = 0; $i < $length; $i++)\
    \ {\n        $digit = $x[$i];\n        if($digit % 2 == 0) {\n            $even\
    \ = true;\n        } else {\n            if($even == false) {\n              \
    \  $unique[] = $digit;\n            } else {\n                break;\n       \
    \     }\n        }\n    }\n    return $unique;\n}\n", "\t$unique = array();\n\t\
    foreach ($x as $v) {\n\t\t$digits = str_split($v);\n\t\t$evens = array();\n\t\t\
    foreach ($digits as $digit) {\n\t\t\tif ($digit % 2 == 0) {\n\t\t\t\t$evens[]\
    \ = $digit;\n\t\t\t}\n\t\t}\n\t\tif (count($evens) == 0) {\n\t\t\t$unique[] =\
    \ $v;\n\t\t}\n\t}\n\tsort($unique);\n\treturn $unique;\n}\n", "    $even = false;\n\
    \    $result = array();\n    foreach ($x as $k) {\n        $tmp = str_split($k);\n\
    \        if (count($tmp) === 1 && !$even) {\n            $result[] = $k;\n   \
    \     } else {\n            if (count($tmp) === 1 && $tmp[0] % 2 === 0) {\n  \
    \              $result[] = $k;\n            } else {\n                $even =\
    \ true;\n            }\n        }\n    }\n    return $result;\n}\n</code>\n<|/\
    \ a dscore=0 tags=php,arrays |>\n<| a dscore=0 |>\nHere you go:\n<code>\n<?php",
  "    $ret = array();\n    foreach ($x as $y) {\n        $ret[] = $y;\n    }\n  \
    \  ksort($ret);\n    $ret[] = 0;\n    return array_filter($ret, 'isEven');\n}\n",
  "\tsort($x);\n\t$result = array();\n\tforeach ($x as $val) {\n\t\tif ($val % 2 !=\
    \ 0) {\n\t\t\t$result[] = $val;\n\t\t}\n\t}\n\treturn $result;\n}\n", "\t$result\
    \ = array();\n\t$n = array_shift($x);\n\t$d = array_shift($x);\n\twhile($n &&\
    \ $d) {\n\t\t$n /= 10;\n\t\t$d /= 10;\n\t\tif($d == 0)\n\t\t\t$result[] = $n;\n\
    \t}\n\treturn $result;\n}\n", "    sort($x);\n    foreach ($x as $key => $value)\
    \ {\n        if ($value % 2 != 0) {\n            unset($x[$key]);\n        }\n\
    \    }\n    return $x;\n}\n\n$unique_array = unique_digits(array(15, 33, 1422,\
    \ 1));\n$result = array_unique($unique_array);\nprint_r($result);\n\necho \"</PRE>\"\
    ;", "  $digits = array();\n  $new_x = array();\n  foreach($x as $n) {\n    $tmp\
    \ = array_map('intval', str_split($n, 1));\n    $new_x = array_merge($new_x, $tmp);\n\
    \  }\n  sort($new_x);\n  foreach($new_x as $key => $val) {\n    if($val % 2 !=\
    \ 0) {\n      $digits[] = $val;\n    }\n  }\n  return $digits;\n}\n</code>\n<|/\
    \ a |>\n<| a dscore=0 |>\nIf your requirement is not to return the original array,\
    \ you can use array_filter and in_array to remove the unwanted elements without\
    \ creating a new array.\n<code>\n$a = array(15, 33, 1422, 1);\n\n$digits = array_filter(\n\
    \    $a,\n    function($v){\n        return !in_array((int)$v % 10, [1, 3, 5,\
    \ 7, 9]);\n    }\n);\n\nprint_r($digits);\n</code>\nOutput\n<code>\nArray\n(\n\
    \    [0] => 1\n    [2] => 33\n)\n</code>\nDemo\n<|/ a tags=arrays,php |>\n<| a\
    \ tags=arrays,php |>\nThe below code will also work, using array_filter and in_array\
    \ function:\n<code>\n$arr = array(15,33,1422,1);\n$digits = array_filter(\n  \
    \  $arr,\n    function($v){\n        return (!in_array($v%10, array(1, 3, 5,7,9)));\n\
    \    }\n);\nvar_dump($digits);\n</code>\nOutput\n<code>\narray(2) {\n  [0]=>\n\
    \  int(1)\n  [2]=>\n  int(33)\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php\
    \ |>\nI have modified your code slightly and now it returns an array of all non-repeating\
    \ digits of the given array in a decreasing order. Check the code below:\n<code>",
  "    sort($x);\n    $ans = array();\n    foreach ($x as $item) {\n        $c = strlen($item)\
    \ % 2;\n        if (!$c) {\n            $ans[] = $item;\n        }\n    }\n  \
    \  return $ans;\n}\n</code>\n<|/ a tags=php,math,algorithm,sorting,language-agnostic\
    \ |>\n<| c |>\nI wouldn't call this \"the easiest way\". O(n^2) complexity is\
    \ not the easiest way. A good answer could be, that you can achieve this via `O(n)`\
    \ complexity by creating an array containing all elements that don't have a even\
    \ digit. Then, you could sort the array and remove all elements having a even\
    \ digit. That's the best I could come up with at the moment, anyway.\n<|/ c |>\n\
    <| c |>\nThe complexity of this solution is just not O(n).\n<|/ c |>\n<| c |>\n\
    And how does it become O(n) ?\n<|/ c |>\n<| c |>\n: You're right. It seems I misunderstood\
    \ the question. Your solution is just not optimal. Sorry. I think it would be\
    \ helpful to point out that sorting is not necessarily an O(n) operation.\n<|/\
    \ c |>\n<| c |>\nThank you for the comments. I agree with your comment that the\
    \ complexity is not O(n). Please let me know if you think my comment is wrong\
    \ and I will delete it.\n<|/ c |>\n<| a |>\n<code>", "  $xsorted = $x;\n  usort($xsorted,\
    \ \"sort_function\");\n  rsort($xsorted);\n  return $xsorted;\n}\n", "   $temp\
    \ = $x;\n   $return_array = array();\n   for($i = 0; $i < count($x); $i++) {\n\
    \      if($x[$i] % 2 != 0) {\n         $return_array[] = $temp[$i];\n      }\n\
    \   }\n   return $return_array;\n}\n", "    if(!is_array($x)) return array();\n\
    \    $result = array();\n    foreach($x as $num){\n        $d = $num % 10;\n \
    \       if($d < 2) continue;\n        if(in_array($d, $result)) continue;\n  \
    \      $result[] = $num;\n    }\n    return $result;\n}\n", "    $result = [];\n\
    \    $result = array_filter($x, function($number) {\n        return $number %\
    \ 2 === 0;\n    });\n    asort($result);\n    return array_values($result);\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a |>\nI did a solution like this :\n<code>\n\
    $arr = array(152, 323, 1422, 10);\n$arr2 = array_filter($arr, function ($item)\
    \ {\n    return !is_int($item);\n});\n$arr3 = array_unique($arr2);\n</code>\n\
    <|/ a dscore=2 tags=arrays,php,sorting |>\n<| a |>\nMy solution is as follows:\n\
    <code>\n<?php\n", "    if (empty($x)) return array();\n    $result = array();\n\
    \    foreach ($x as $key => $value) {\n        if ($key % 2 == 0) continue;\n\
    \        $c = count($result);\n        for ($i = 0; $i < $c; $i++) {\n       \
    \     if ($value == $result[$i]) {\n                $result[] = $value;\n    \
    \            break;\n            }\n        }\n        if ($i == $c) $result[]\
    \ = $value;\n    }\n    return $result;\n}", "    $d = array_flip(array_map('intval',\
    \ str_split($x[0])));\n    $r = [];\n    foreach ($x as $e) {\n        if (! array_key_exists($e,\
    \ $d)) {\n            $r[] = $e;\n        }\n    }\n    return $r;\n}\n", "  $newArray\
    \ = [];\n  foreach ($x as $element) {\n    // check if $element has even digits\
    \ \n    // if it does, then add to the array\n    if (str_split($element)[1] %\
    \ 2 == 0) {\n      $newArray[] = $element;\n    }\n  }\n  return $newArray;\n\
    }\n</code>\n<|/ a tags=php,arrays,algorithm |>\n<| c |>\nthanks for ur response\
    \ i tried this but getting syntax error near str_split\n<|/ c |>\n<| c |>\nDid\
    \ you include the `string` class? `http://php.net/manual/en/function.str-split.php`\n\
    <|/ c |>\n<| a tags=php,arrays,algorithm dscore=0 |>\nHere's a simple solution\
    \ (the other ones also work, just not as efficient as mine since it uses less\
    \ memory and therefore faster). \nThe function takes an array of numbers and return\
    \ an array containing only the unique numbers in it. \nHere's how: \nStep 1: Loop\
    \ through the array and keep track of which numbers you've seen so far. \nStep\
    \ 2: Loop through the entire array and compare each number to the numbers you've\
    \ seen so far. If you've seen that number before, skip it. \nStep 3: When you're\
    \ done, return the resulting array. \n<code>", "    $s = array_count_values($x);\n\
    \    $x = array_keys($s);\n    asort($x);\n    $result = [];\n    foreach ($x\
    \ as $v) {\n        if (!in_array($v, $result)) {\n            $result[] = $v;\n\
    \        }\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php,arrays dscore=1\
    \ |>\n<| a tags=php,arrays |>\nThis can be done with array_filter and a closure,\
    \ like this:\n<code>\n$array = [\n    152, 333, 1422, 1001, 1002,\n    1522, 4323,\
    \ 1422, 1003, 1004,\n    15222, 4323, 1422, 1003, 1005,\n    15222, 4323, 1422,\
    \ 1003, 1006,\n    15222, 4323, 1422, 1003, 1007,\n    15222, 4323, 1422, 1003,\
    \ 1008,\n    15222, 4323, 1422, 1003, 1009,\n    15222, 4323, 1422, 1003, 1010,\n\
    \    15222, 4323, 1422, 1003, 1011,\n    15222, 4323, 1422, 1003, 1012,\n    15222,\
    \ 4323, 1422, 1003, 1013,\n    15222, 4323, 1422, 1003, 1014,\n    15222, 4323,\
    \ 1422, 1003, 1015,\n    15222, 4323, 1422, 1003, 1016,\n    15222, 4323, 1422,\
    \ 1003, 1017,\n    15222, 4323, 1422, 1003, 1018,\n    15222, 4323, 1422, 1003,\
    \ 1019,\n    15222, 4323, 1422, 1003, 1020,\n    15222, 4323, 1422, 1003, 1021,\n\
    \    15222, 4323, 1422, 1003, 1022,\n    15222, 4323, 1422, 1003, 1023,\n    15222,\
    \ 4323, 1422, 1003, 1024,\n    15222, 4323, 1422, 1003, 1025,\n    15222, 4323,\
    \ 1422, 1003, 1026,\n    15222, 4323, 1422, 1003, 1027,\n    15222, 4323, 1422,\
    \ 1003, 1028,\n    15222, 4323, 1422, 1003, 1029,\n    15222, 4323, 1422, 1003,\
    \ 1030,\n    15222, 4323, 1422, 1003, 1031,\n    15222, 4323, 1422, 1003, 1032,\n\
    \    15222, 4323, 1422, 1003, 1033,\n    15222, 4323, 1422, 1003, 1034,\n", " \
    \   $y = array_count_values($x);\n    $z = [];\n    foreach ($y as $k => $v) {\n\
    \        if (!isset($z[$v])) $z[$v] = [];\n        $z[$v][] = $k;\n    }\n   \
    \ foreach ($z as $k => $v) if (count($v) > 1) unset($z[$k]);\n    return $z;\n\
    }\n", "  if (count($x) == 0) return array();\n  $map = array();\n  $even = array();\n\
    \  foreach ($x as $v) {\n    if (is_numeric($v)) $map[$v] = 0;\n    else $map[$v]\
    \ = 1;\n    if ($map[$v] & 2) $even[] = $v;\n  }\n  return $even;\n}\n", "   \
    \ $digits = array();\n    foreach($x as $num) {\n        $digits[] = $num % 10;\n\
    \    }\n    ksort($digits);\n    $filtered = array_filter($digits, function($num)\
    \ {\n        return $num % 2 != 0;\n    });\n    ksort($filtered);\n    return\
    \ $filtered;\n}\n", "    if (count($x) == 0) {\n        return array(0);\n   \
    \ }\n    $digits = array();\n    foreach($x as $elem) {\n        foreach (str_split($elem)\
    \ as $digit) {\n            $digits[$digit]++;\n        }\n    }\n    $result\
    \ = array();\n    foreach($digits as $digit => $count) {\n        if ($count ==\
    \ 0) {\n            continue;\n        }\n        if ($digit % 2 != 0) {\n   \
    \         continue 2;\n        }\n        $result[] = $digit;\n    }\n    return\
    \ $result;\n}\n", "\t$r = array();\n\tforeach ($x as $v) {\n\t\tif ($v%2 == 0)\
    \ {\n\t\t\tif ($v !~ /\\d+/) {\n\t\t\t\t$r[] = $v;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ $r;\n}\n", "  $unique = array();\n  $counter = 0;\n  foreach($x as $num) {\n\
    \    $digit = $num % 10;\n    if($num / 10 == 0)\n      unset($unique[$digit]);\n\
    \    else\n      $unique[$digit]++;\n  }\n  return array_keys($unique);\n}", " \
    \   $digits = array();\n    foreach ($x as $key => $value) {\n        $digits[$key]\
    \ = str_split($value);\n    }\n    foreach ($digits as $key => $value) {\n   \
    \     if (count($value) === 1) {\n            $digits[$key] = str_split($value[0]);\n\
    \        }\n    }\n    \n    $odd = array();\n    foreach ($digits as $key =>\
    \ $value) {\n        foreach ($value as $k => $v) {\n            if ($v % 2 !=\
    \ 0) {\n                $odd[$key][$k] = $v;\n            }\n        }\n    }\n\
    \    \n    foreach ($odd as $key => $value) {\n        if (count($value) == 1)\
    \ {\n            $odd[$key] = $value[0];\n        }\n    }\n    \n    foreach\
    \ ($odd as $key => $value) {\n        $temp = [];\n        foreach ($value as\
    \ $k => $v) {\n            $temp[] = $v;\n        }\n        array_unique($temp);\n\
    \    }\n    \n    return $odd;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n\
    <code>\n<?php", "    $seen = [];\n    foreach ($x as $n) {\n        $result =\
    \ [];\n        for ($i = 1; $i < $n; $i++) {\n            if ($n % $i == 0) {\n\
    \                $result[] = $i;\n            }\n        }\n        $seen = array_merge($seen,\
    \ $result);\n    }\n    $seen = array_unique($seen);\n    sort($seen);\n    return\
    \ $seen;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,algorithm |>\nYou can use\
    \ the in_array function to check if the element exists, and add the element if\
    \ it doesn't exist:\n<code>\n$new_array = [1, 2, 3, 4, 5, 6, 7];\nif (in_array($element,\
    \ array_unique($new_array))) {\n    // element exists, do nothing\n} else {\n\
    \    // add element\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nTry this\
    \ one for PHP:\n<code>\n$input = array(1, 2, 3, 4); // Array with numbers from\
    \ 1 to 4.\n$output = array();\n$temp = array();\nforeach ($input as $value) {\n\
    \    if ($value == 1) {\n        array_push($temp, 1);\n    }\n    elseif ($value\
    \ == 2) {\n        array_push($temp, 2);\n    }\n    elseif ($value == 3) {\n\
    \        array_push($temp, 3);\n    }\n    elseif ($value == 4) {\n        array_push($temp,\
    \ 4);\n    }\n    else {\n        if (in_array($value, $temp)) {\n           \
    \ $output[] = $value;\n        }\n        else {\n            array_push($temp,\
    \ $value);\n        }\n    }\n}\nvar_dump($output);\n</code>\nOutput\n<code>\n\
    array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n}\n</code>\n\
    <|/ a tags=php,algorithm |>\n<| a |>\nPHP code demo\n<code>\n<?php\n$new=array();\n\
    foreach($arr as $a){\n    if(!in_array($a,$new))\n        $new[]=$a;\n}\nprint_r($new);\n\
    </code>\nOutput:\n<code>\nArray\n(\n    [0] => 0\n    [1] => 1\n    [2] => 2\n\
    \    [3] => 3\n    [4] => 4\n)\n</code>\n<|/ a tags=php,algorithm dscore=0 |>\n\
    <| a dscore=0 |>\nI use this to detect all even numbers in an array\n<code>\n\
    $arr = array(1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59);\n",
  "  $unique_digits = array();\n  $len = count($x);\n  for ($i = 0; $i < $len; $i++)\
    \ {\n    if ($x[$i] % 2 != 0) {\n      $unique_digits[] = $x[$i];\n    }\n  }\n\
    \  return $unique_digits;\n}", "  $unique = array();\n  $n = sizeof($x);\n  for\
    \ ($i = 0; $i < $n; $i++) {\n    if (!in_array($x[$i], $unique)) {\n      $unique[]\
    \ = $x[$i];\n    }\n  }\n  return $unique;\n}\n", "  $y = array();\n  foreach($x\
    \ as $key => $val) {\n    if (is_int($val) && $val % 2 === 0) {\n      $y[$key]\
    \ = $val;\n    }\n  }\n  ksort($y);\n  return $y;\n}\n", "\t$result = array();\n\
    \tforeach($x as $i => $elem) {\n\t\t$nums = array_count_values(str_split($elem));\n\
    \t\tforeach($nums as $k => $num) {\n\t\t\tif ($num == 0) {\n\t\t\t\t$result[]\
    \ = $elem;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n\
    }\n", "  foreach ($x as $a) {\n    $count = count($x);\n    $a = str_split($a);\n\
    \    for ($i = 0; $i < $count; $i++) {\n      $x[$i] = ($x[$i] - ($a[$i]/10));\n\
    \    }\n  }\n  return array_filter($x);\n}\n\n$n = array(\n    array('15',   33,\
    \  1422),\n    array('152',  323, 1422),\n    array('152',  323, 1422),\n    array('15',\
    \   33,  1422),\n    array('152',  323, 1422),\n    array('15',   33,  1422),\n\
    \    array('15',   33,  1422),\n);\nprint_r(unique_digits($n));", "    // Sort\
    \ the array in ascending order.\n    // We use the function array_multisort\n\
    \    // from php manual.\n    array_multisort($x, SORT_ASC, $x); // Sorts $x in\
    \ asc order. \n    $new_array = array();\n    for($i=0; $i<sizeof($x); $i++) {\n\
    \        if($i%2==0) {\n            continue;\n        }\n        $new_array[]\
    \ = $x[$i];\n    }\n    return $new_array;\n}", "    $result = [];\n    foreach($x\
    \ as $x_value) {\n        if(!isset($result[$x_value])) {\n            $result[$x_value]\
    \ = 0;\n        }\n        \n        if($x_value % 2 == 0) {\n            $result[$x_value]\
    \ += 1;\n        }\n    }\n    \n    return array_keys($result);\n}\n", "    $ret\
    \ = array();\n    foreach($x as $v) {\n        foreach($ret as $r) \n        \
    \    if ($v % $r == 0) return false;\n        else $ret[] = $v;\n    }\n    return\
    \ $ret;\n}\n</code>\n<|/ a |>\n<| c |>\nYeah, I understand your solution much\
    \ better than mine. I'll definitely keep that in mind while trying to solve this\
    \ problem. Thanks a lot!\n<|/ c |>\n<| a tags=php,algorithm |>\nYou can try this\
    \ way:\n<code>\n<?php\n\n$input = array(1, 3, 7, 11, 7, 23, 14, 2, 34, 2, 23,\
    \ 97, 7, 2, 23, 34, 45, 23, 12, 3, 6, 12, 6, 23, 23, 1, 8, 4, 7, 97, 3);\n\n$input\
    \ = array_unique($input);\n\nsort($input);\n\n$sum = 0;\n$temp_array = array();\n\
    \nforeach($input as $num){\n    if($num == 0)\n        break;\n    if(!isset($temp_array[$num])){\n\
    \        array_push($temp_array, $num);\n        $sum = $sum + $num;\n    }\n\
    }\nvar_dump($temp_array);\nvar_dump($sum);\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This solution would work but only if the array is sorted.\n<|/ c |>\n<| c |>\n\
    Yeah, this is what I've been looking for. I tried to use this logic in my code\
    \ but it didn't work out. I thought that the problem with the code you posted\
    \ was that I used \"array_unique\" on the array before using the \"sort\" function\
    \ and I forgot to remove that code from my code. Thanks for the help :) \nBut\
    \ I've got a question, why do you add \"!isset($temp_array[$num])\"? Is it necessary?\n\
    <|/ c |>\n<| c |>\nNo, it's not necessary. In the first line of the loop i check\
    \ if there is some number with value 0 on $input. If yes then break the loop.\
    \ Later in the loop i'm checking if the number already exist in array or not.\
    \ If it not exist i add it into array and $sum gets its value + the number with\
    \ value 0.\n<|/ c |>\n<| c |>\nI see. Thanks for the explanation.\n<|/ c |>\n\
    <| a tags=php,algorithm |>\nAnother solution (with array_count_values):\n<code>\n\
    $input = array(1, 3, 7, 11, 7, 23, 14, 2, 34, 2, 23, 97, 7, 2, 23, 34, 45, 23,\
    \ 12, 3, 6, 12, 6, 23, 23, 1, 8, 4, 7, 97, ", "\tsort($x);\n\t$res = [];\n\tfor\
    \ ($i = 0; $i < count($x); $i++) {\n\t\t$t = $x[$i];\n\t\tfor ($j = 6; $j <= $i;\
    \ $j++) {\n\t\t\tif (!isset($t%10)) {\n\t\t\t\t$res[] = $t;\n\t\t\t\tbreak;\n\t\
    \t\t}\n\t\t\t$t /= 10;\n\t\t}\n\t}\n\tsort($res);\n\treturn $res;\n}", "    $unique\
    \ = array();\n    foreach($x as $item) {\n        $temp = array_search($item,\
    \ array_map('ord', $unique));\n        if ($temp == FALSE) {\n            $unique[]\
    \ = $item;\n        }\n    }\n    return $unique;\n}\n", "    $temp = array();\n\
    \    foreach ($x as $key => $value) {\n        $temp[$key] = $value;\n    }\n\n\
    \    foreach ($temp as $key => $value) {\n        $count = 0;\n        $j = 0;\n\
    \        while (isset($temp[$key - $count])) {\n            $temp[$key - $count]\
    \ = $temp[$key - $count];\n            $count++;\n        }\n\n        array_push($temp,\
    \ $key - $count, 0);\n    }\n\n    array_multisort($temp, SORT_ASC, $temp);\n\
    \    return $temp;\n}\n", "    $seen = array();\n    $result = array();\n    foreach\
    \ ($x as $n) {\n        $digit = str_pad(base_convert($n, 10, 10), 4, \"0\", STR_PAD_LEFT);\n\
    \        if (!isset($seen[$digit])) {\n            $seen[$digit] = 1;\n      \
    \      $result[] = $n;\n        }\n    }\n    return $result;\n}\n", "  if(count($x)\
    \ == 0) return array();\n  $array = array();\n  foreach($x as $xval) {\n    $newarray=array();\n\
    \    foreach($x as $yval) {\n      if($xval%2 == 0) {\n        array_push($newarray,\
    \ $yval);\n      }\n    }\n    if(count($newarray)>0) {\n      $array=array_merge($array,\
    \ $newarray);\n    }\n  }\n  sort($array);\n  array_filter($array, 'odd');\n \
    \ return $array;\n}", "    // base case\n    if (count($x) === 0) return array();\n\
    \    \n    // create array\n    $y = array();\n    \n    // loop to find no more\
    \ even digit\n    for ($i = 0; $i < count($x); $i++) {\n        $y = array_merge($y,\
    \ unique_digits(array_slice($x, $i + 1)));\n        if ($y[$i] % 2 === 0) {\n\
    \            $y[$i] /= 2;\n        }\n    }\n    \n    // find unique elements\n\
    \    return array_unique($y);\n}\n", "    $a = array_count_values($x);\n    $b\
    \ = array();\n    foreach($a as $key => $value) {\n        if($value % 2 != 0)\
    \ {\n            $b[] = $key;\n        }\n    }\n    return $b;\n}\n", "    sort($x);\n\
    \    $result = array();\n    $count = 1;\n    foreach($x as $y){\n        if($y%2\
    \ == 0) $count++;\n        if($y == 0) $result[] = $count;\n        $count = 1;\n\
    \    }\n    return $result;\n}\n", "    sort($x);\n    return array_filter($x,\
    \ function($x) {\n        return strlen($x) % 2 == 0;\n    });\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nIt's a great solution. I've added my own answer based\
    \ on it and it seems to work for me.\n<|/ c |>\n<| a dscore=0 tags=php,algorithm\
    \ |>\n<code>\n$array = array(1, 4, 3, 7, 2, 8);\n$unique = array_unique($array);\n\
    print_r($unique);\n</code>\n<|/ a |>\n<| a tags=php,algorithm dscore=0 |>\n<code>\n\
    <?php\n$array=[1,2,3,4,5,6,7,8,9,0,11,12];\n$result=[];\nforeach ($array as $key=>$val){\n\
    \ if($val%2!=0)\n $result[$val]=$val;\n}\necho \"<pre>\";\nprint_r($result);",
  "    // Write your code here\n    $new_x = array();\n    foreach ($x as $i => $value)\
    \ {\n        if ($value == 0) {\n            continue;\n        }\n        foreach\
    \ ($x as $k => $v1) {\n            if ($v1 === $value || $value == 0 && $k !=\
    \ $i) {\n                continue;\n            }\n            if ($i % 2 == 0)\
    \ {\n                if ($v1 !== 0) {\n                    $new_x[] = $v1;\n \
    \               }\n                $new_x[] = $value;\n            }\n       \
    \ }\n    }\n    return $new_x;\n}", "  $res = array();\n  foreach($x as $v) {\n\
    \    if($v & 1) {\n      $res[] = $v;\n    }\n  }\n  sort($res);\n  return $res;\n\
    }\n</code>\n<|/ a |>\n<| a |>\nI guess this is an interview question. So here\
    \ is a very efficient solution in PHP:\n<code>", "    if (empty($x)) {\n     \
    \   return array();\n    }\n    $result = array();\n    foreach ($x as $digit)\
    \ {\n        $result[intval($digit)] = $digit;\n    }\n    asort($result);\n \
    \   return array_keys($result);\n}\n</code>\n<|/ a tags=php |>\n<| a tags=php\
    \ |>\nI used this approach to get a solution for unique digits in a array and\
    \ also sorted in order.\n<code>", "    $result = [];\n    foreach($x as $key =>\
    \ $val) {\n        $result = array_merge($result, array_map(function($e) use($key)\
    \ {\n            return $e * (10 - abs($key - $e));\n        }, $val));\n    }\n\
    \    return array_unique($result);\n}\n</code>\n<|/ a tags=arrays,php,algorithm,sorting\
    \ dscore=2 |>\n<| a tags=arrays,php,algorithm,sorting |>\nI see you already accepted\
    \ an answer, but here's a non-loop approach using array_filter and array_map -\
    \ \n<code>", "    $digits = array();\n\n    foreach($x as $num) {\n        if(is_int($num))\
    \ {\n            $digits[] = $num;\n        }\n    }\n\n    $return = array();\n\
    \    foreach ($digits as $key => $value) {\n        if($value % 2 != 0) {\n  \
    \          $return[] = $value;\n        }\n    }\n    return $return;\n}\n", " \
    \   if (!is_array($x)) return array();\n    $ans = array();\n    foreach($x as\
    \ $val) {\n        $digits = 0;\n        $len = 0;\n        $lenstr = strlen($val);\n\
    \        for($i=0; $i<$lenstr; $i++) {\n            $digit = (int) $val[$i];\n\
    \            $digits += $digit;\n            if ($digit % 2 == 0) $len++;\n  \
    \      }\n        if ($len == 1) $ans[] = $val;\n    }\n    return $ans;\n}",
  "    $digits = array_count_values($x);\n    $result = [];\n    foreach($digits as\
    \ $key => $value) {\n        if($value == 1) {\n            $result[] = $key;\n\
    \        }\n    }\n    return $result;\n}\n\n/**\n * Return a new string with\
    \ given characters in reversed order.\n * For example\n * >>> reverse('abc')\n\
    \ * 'cba'\n *\n * @param string $str\n */", "    $digits = array();\n    for($i\
    \ = 0; $i < count($x); $i++) {\n        $digit = $x[$i];\n        if(is_integer($digit))\
    \ {\n            $digits[$digit] = $digit;\n        }\n    }\n    asort($digits);\n\
    \    return array_keys($digits);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php\
    \ dscore=1 |>\n<code>\n$array= array(15, 33, 1422, 10);\n$count= 0;\nwhile($count<count($array)){\n\
    \    $sum=0;\n    foreach($array as $key=>$val){\n        if($key<$count){\n \
    \           $sum=$sum + $val;\n        }\n    }\n    if($sum%2==0){\n        $array[$count]=1;\n\
    \    }\n    $count++;\n}\n\necho \"<pre>\";\nprint_r($array);\n</code>\n<|/ a\
    \ |>\n<| c |>\nThis answer is very similar to others, but fails when there exist\
    \ a 0 digit in the array (as the while loop will never get to the end).\n<|/ c\
    \ |>\n<| c |>\nIt is not the same solution. He wants to sort an array by ascending\
    \ numeric values. Your solution sorts arrays by descending numeric values. He\
    \ doesn't say anything about descending sorting of 0 values.\n<|/ c |>\n<| c |>\n\
    , i mean this answer is not good at all. `for` loop is useless, `array_filter`\
    \ would be better, but `array_filter` cannot sort an array by ascending numeric\
    \ values. He doesn't say anything about descending sorting of 0 values.\n<|/ c\
    \ |>\n<| a tags=arrays,php |>\nThis is a little bit different as I use a $temp\
    \ variable to keep track of each number in the array after its been looped through.\n\
    <code>\n$array = array(15, 33, 1422, 10);\n$temp = [];\n\nfor($i = 0; $i < count($array);\
    \ $i++) {\n    if(!in_array($array[$i], $temp)) {\n        $temp[] = $array[$i];\n\
    \    }\n}\n\nprint_r($temp);\n</code>\n<|/ a dscore=0 |>\n<| a |>\nHere is one\
    \ approach using array_filter and a closure:\n<code>\n$input = array(15, 33, 1422,\
    \ 10);\n$result = array_filter($input, function($item){\n    return !($item %\
    \ 2);\n});\n\nprint_r($result);\n</code>\nDemo\nThis approach has the advantage\
    \ of not needing any additional storage, although it does not do any sorting ",
  "    $result = [];\n    foreach ($x as $x_val) {\n        $x_val = str_replace(',',\
    \ '', $x_val);\n        foreach (str_split($x_val) as $y_val) {\n            $y_val\
    \ = str_replace(',', '', $y_val);\n            if ($y_val % 2 === 0) {\n     \
    \           $result[] = $y_val;\n            }\n        }\n    }\n    return sort($result);\n\
    }\n\n$result = unique_digits(array(152, 323, 1422, 10));\nprint_r($result);\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=arrays,algorithm,php |>\n<code>\n<?php\n\
    \n$numbers = array(\n    152,\n    323,\n    1422,\n    10\n);\n\nforeach($numbers\
    \ as $key=>$number){\n    if($number % 2 == 0){\n        $odd[] = $number;\n \
    \   }else{\n        $even[] = $number;\n    }\n}\n\n$oddArray = array_unique($odd);\n\
    $evenArray = array_unique($even);\n\necho 'Odd: <br />';\nprint_r($oddArray);\n\
    \necho '<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br\
    \ /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br\
    \ /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br\
    \ /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br\
    \ /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br\
    \ /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br\
    \ /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br\
    \ /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br\
    \ /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br\
    \ /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br\
    \ /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br\
    \ /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br\
    \ /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br\
    \ /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br\
    \ /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br\
    \ /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br\
    \ /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br\
    \ /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br\
    \ /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br\
    \ /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br\
    \ /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br\
    \ /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br\
    \ /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />",
  "    $arr = [];\n    foreach ($x as $i) {\n        $d = intval($i / 10);\n     \
    \   if ($d % 2 == 0) {\n            $arr[] = $i;\n        }\n    }\n    sort($arr);\n\
    \    return $arr;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nThank you. I\
    \ was thinking in a different way, like making two nested loops and compare, but\
    \ you already posted it.\n<|/ c |>\n<| c |>\nIf anyone is looking for the PHP\
    \ code for this solution, here it is: https://pastebin.com/rCq7Y2P3\n<|/ c |>\n\
    <| a tags=arrays,php |>\nJust another way using array_filter() to filter elements\
    \ without even digits\n<code>\n$arr = [1, 5, 8, 3, 153, 343, 911, 324, 1422, 10,\
    \ 110, 1010, 13];\n\n$filtered = array_filter($arr, function($v) {\n    return\
    \ !preg_match('/\\d/', $v);\n}, ARRAY_FILTER_USE_BOTH);\n</code>\nOutput\n<code>\n\
    Array\n(\n    [0] => 1\n    [3] => 154\n    [7] => 10\n)\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\n`array_filter($arr, function($v) { return !preg_match('/\\d/',\
    \ $v);}, ARRAY_FILTER_USE_BOTH);`\n<|/ c |>\n<| a dscore=4 |>\nThis may be a bit\
    \ more efficient as we are only checking the digits in each array element once.\n\
    <code>", "    $x = array_map(function($x){return $x<10?$x:$x-10;}, $x);\n    $x\
    \ = array_filter($x);\n    $x = array_map(function($x){return $x%10; }, $x);\n\
    \    return array_unique($x);\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\nThe solution\
    \ provided by works well, but can be improved. By removing the array_unique function\
    \ the performance will increase by 50%\n<code>\n$arr = $arr;\n$arr = array_filter($arr);\n\
    $arr = array_filter($arr);\n$arr = array_filter($arr);\n$arr = array_filter($arr);\n\
    $arr = array_filter($arr);\n$arr = array_filter($arr);\n$arr = array_filter($arr);\n\
    $arr = array_filter($arr);\n$arr = array_filter($arr);\n$arr = array_filter($arr);\n\
    $arr = array_filter($arr);\n$arr = array_filter($arr);\n$arr = array_filter($arr);\n\
    $arr = array_filter($arr);\n$arr = array_filter($arr);\n$arr = array_filter($arr);\n\
    $arr = array_filter($arr);\n$arr = array_filter($arr);\n$arr = array_filter($arr);\n\
    $arr = array_filter($arr);\n$arr = array_filter($arr);\n$arr = array_filter($arr);\n\
    $arr = array_filter($arr);\n$arr = array_filter($arr);\n$arr = array_filter($arr);\n\
    $arr = array_filter($arr);\n$arr = array_filter($arr);\n$arr = array_filter($arr);\n\
    $arr = array_filter($arr);\n$arr = array_filter($arr);\n$arr = array_filter($arr);\n\
    $arr = array_filter($arr);\n$arr = array_filter($arr);\n$arr = array_filter($arr);\n\
    $arr = array_filter($arr);\n$arr = array_filter($arr);\n$arr = array_filter($arr);\n\
    $arr = array_filter($arr);\n$arr = array_filter($arr);\n$arr = array_filter($arr);\n\
    $arr = array_filter($arr);\n$arr = array_filter($arr);\n$arr = array_filter($arr);\n\
    $arr = array_filter($arr);\n$arr = array_filter($arr);\n$arr = array_filter($arr);\n\
    $arr = array_filter($arr);\n$arr = array_filter($arr);\n$arr = array_filter($arr);\n\
    $arr = array_filter($arr);\n$arr = array_filter($arr);\n$arr = array_filter",
  "    if(!is_array($x)) return array();\n    foreach($x as $xval){\n        if(!is_integer($xval))\
    \ return array();\n        if($xval % 2 === 0) return array();\n    }\n    return\
    \ sort($x);\n}\n", "    $unique = array();\n    $digits = range(1, 9);\n    foreach\
    \ ($x as $key => $value) {\n        $check = ($key % 2 == 0) ? $key / 2 : (($key\
    \ - 1) % 2);\n        if (!in_array($check, $digits)) {\n            $unique[]\
    \ = $value;\n        }\n    }\n    return $unique;\n}\n", "  sort($x);\n  $result\
    \ = [];\n  $cnt = count($x);\n  for($i = 0; $i < $cnt; $i++) {\n    $digit = $x[$i];\n\
    \    if($digit % 2 == 0) {\n      $result[] = $digit;\n    }\n  }\n  return $result;\n\
    }\n", "    $arr = array();\n    $ret = 0;\n    foreach ($x as $k => $v) {\n  \
    \      $len = strlen($v);\n        $tmp = $ret;\n        $ret += $len;\n     \
    \   $tmp += $len - $k;\n        $tmp *= 3;\n        if ($v[$tmp] != '0') {\n \
    \           $arr[$tmp] = $v;\n        }\n    }\n    return array_keys($arr);\n\
    }\n", "\tsort($x);\n\t$output = [];\n\tfor($i = 0; $i < count($x); $i++) {\n\t\
    \t$is_even = true;\n\t\tfor($j = $i + 1; $j < count($x); $j++) {\n\t\t\tif($x[$i]\
    \ != $x[$j]) {\n\t\t\t\t$is_even = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\
    if($is_even) {\n\t\t\t$output[] = $x[$i];\n\t\t}\n\t}\n\treturn $output;\n}",
  "    $digits = array();\n    foreach ($x as $x_value) {\n        $digits[] = $x_value\
    \ % 10;\n        $x = $x_value / 10;\n    }\n    $result = array();\n    foreach\
    \ ($digits as $digit) {\n        if ($digit % 2 === 0) {\n            $result[]\
    \ = $digit;\n        }\n    }\n    return $result;\n}\n", "    $y = array();\n\
    \    foreach ($x as $number) {\n        for ($i = 0; $i < count($x); $i++) {\n\
    \            if ((floor($number) == $number)) {\n                $y = array_merge($y,\
    \ array($x[$i]));\n            }\n        }\n    }\n    return $y;\n}", "    $result\
    \ = array();\n    foreach ($x as $xVal) {\n        $newVal = intval($xVal);\n\
    \        while ($newVal > 10) {\n            $newVal = intval($newVal / 10);\n\
    \        }\n        $result[] = $newVal;\n    }\n    return $result;\n}\n</code>\n\
    <|/ a tags=arrays,php dscore=0 |>\n<| a |>\nI think this should work as well:\n\
    <code>\n<?php", "    if (!is_array($x)) {\n        return array();\n    }\n  \
    \  $digits = array_count_values($x);\n    $result = [];\n    foreach ($x as $v)\
    \ {\n        if (array_key_exists($v, $digits)) {\n            if ($digits[$v]\
    \ == 1) {\n                $result[] = $v;\n            }\n        } else {\n\
    \            $result[] = $v;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n", "    $n = count($x);\n    $a = range(0, $n-1);\n    foreach($x\
    \ as $k) {\n        $a[$k] = $k;\n    }\n    $a1 = $a[1];\n    for($i=2;$i<=$n;$i++)\
    \ {\n        $a2 = $a[$i];\n        if($a1 % 10 != $a2 % 10) {\n            $a[$i]\
    \ = $a1;\n            $a1 = $a2;\n        }\n    }\n    return $a;\n}\n", "  $result\
    \ = array();\n  $odd = 0;\n  foreach($x as $digit) {\n    if ($digit % 2 > 0)\
    \ {\n      $odd++;\n    }\n    else {\n      $result[] = $digit;\n    }\n  }\n\
    \  if ($odd > 0) {\n    return array();\n  }\n  return $result;\n}\n", "    $res\
    \ = array();\n    foreach($x as $i)\n        foreach($x as $k => $v)\n       \
    \     if($i%10 == 0 && $i!=$k) array_push($res, $i);\n    return $res;\n}\n",
  "    $digits = array();\n    foreach($x as $value) {\n        $digits[] = $value%10;\n\
    \        $value = intval($value/10);\n    }\n    sort($digits);\n    $result =\
    \ array();\n    foreach($digits as $digit) {\n        if(!in_array($digit, $result))\
    \ {\n            $result[] = $digit;\n        }\n    }\n    return $result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,php,performance |>\n<| a dscore=1 |>\nYou\
    \ could use the below function to get all the unique digits in an array:\n<code>",
  "  $s = array();\n  foreach($x as $num) {\n    if (is_integer($num)) {\n      $d\
    \ = $num % 10;\n      if (!$d || !$s[$d]) {\n        $s[$d] = 1;\n      } else\
    \ {\n        unset($s[$d]);\n      }\n    }\n  }\n  return array_keys($s);\n}\n\
    </code>\n<|/ a tags=sorting,arrays,php,algorithm dscore=2 |>\n<| c |>\nThanks\
    \ for your time. I'm still learning and your code is actually very good.\n<|/\
    \ c |>\n<| a dscore=2 |>\nTo optimize the time complexity of the algorithm:\n\n\
    We should only iterate through the input array once.\nTo save memory, we could\
    \ use a hash table to check if the number has an even digit, while we also add\
    \ an element to the result array. And in the end, we could remove the element\
    \ from the hash table once it's been added into the result array to avoid duplication.\n\
    \nCode:\n<code>", "  $a = $x[0];\n  $b = $x[1];\n  $c = $x[2];\n  $d = $x[3];\n\
    \n  if (!is_array($x)) {\n    return false;\n  }\n  if (!is_array($a) || !is_array($b)\
    \ || !is_array($c) || !is_array($d)) {\n    return false;\n  }\n\n  $x[] = $a;\n\
    \  $x[] = $b;\n  $x[] = $c;\n  $x[] = $d;\n  sort($x);\n  $x = array_values($x);\n\
    \n  $ret = $x[0];\n  for ($i = 1; $i < count($x); $i++) {\n    $dig_a = $x[$i][1];\n\
    \    $digb = ($x[$i][2] / 10) % 10;\n    $digc = ($x[$i][2] / 100) % 10;\n   \
    \ $digd = ($x[$i][2] / 1000) % 10;\n\n    if ($digd === 0) {\n      if ($digc\
    \ === 0) {\n        $digb = 10;\n      } else if ($digc === 1) {\n        $digc\
    \ = 0;\n      } else if ($digc === 2) {\n        $digc = 0;\n      } else if ($digc\
    \ === 3) {\n        $digc = 0;\n      } else if ($digc === 4) {\n        $digc\
    \ = 0;\n      } else if ($digc === 5) {\n        $digc = 0;\n      } else if ($digc\
    \ === 6) {\n        $digc = 0;\n      } else if ($digc === 7) {\n        $digc\
    \ = 0;\n      } else if ($digc === 8) {\n        $digc = 0;\n      } else if ($digc\
    \ === 9) {\n        $digc = 0;\n      } else if ($digc === 10) {\n        $digc\
    \ = 0;\n      } else if ($digc === 11) {\n        $digc = 0;\n      } else if\
    \ ($digc === 12) {\n        $digc = 0;\n      } else if ($digc === 13) {\n   \
    \     $digc = 0;\n      } else if ($digc === 14) {\n        $digc = 0;\n     \
    \ } else if ($digc === 15) {\n        $digc = 0;\n      } else if ($digc === 16)\
    \ {\n        $digc = 0;\n      } else if ($digc === 17) {\n        $digc = 0;\n\
    \      } else if ($digc === 18) {\n        $digc = 0;\n      } else if ($digc\
    \ === 19) {\n        $digc = 0;\n      } else if ($digc === 20) {\n        $digc\
    \ = 0;\n      } else if ($digc === 21) {\n        $digc = 0;\n      } else if\
    \ ($digc === 22) {\n        $digc = 0;\n      } else if ($digc === 23) {\n   \
    \     $digc = 0;\n      } else if ($digc === 24) {\n        $digc = 0;\n     \
    \ } else if ($digc === 25) {\n        $digc = 0;\n      } else if ($", "  $ret\
    \ = array();\n  for ($i = count($x) - 1; $i >= 0; $i--) {\n    if ($x[$i] % 2\
    \ == 0) {\n      continue;\n    }\n    $ret[] = $x[$i];\n  }\n  return $ret;\n\
    }\n</code>\n<|/ a tags=php |>\n<| c |>\nThanks for this solution.  I appreciate\
    \ the explanations.\n<|/ c |>\n<| c |>\nThe first function is very inefficient\
    \ for large arrays, since it needs to sort all of the elements at least once before\
    \ it can find out which elements are unique.  It will be much faster if you sort\
    \ the array beforehand using `array_multisort()`.  See my answer for a similar\
    \ solution using `array_reduce()`.\n<|/ c |>\n<| a tags=php |>\nHere is my solution\
    \ (PHP 5.3):\n<code>", "    sort($x);\n    $x = array_reverse($x);\n    foreach($x\
    \ as $key => $val) {\n        if($val % 2 == 0)\n            unset($x[$key]);\n\
    \    }\n    return $x;\n}\n", "    sort($x);\n    $x = array_keys($x);\n    $size\
    \ = count($x);\n    \n    for ($i = 1; $i <= $size; $i++) {\n        for ($j =\
    \ $i + 1; $j <= $size; $j++) {\n            if ($x[($i * 10) + $j] == 0) {\n \
    \               unset($x[$j]);\n            }\n        }\n    }\n    return array_values($x);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nYou don't need to sort the entire array just to\
    \ remove elements that match a certain value.\n<|/ c |>\n<| c |>\n- You're right.\
    \ Didn't think about that. Edited my answer\n<|/ c |>\n<| c |>\nSurely you can\
    \ do better. Still this answer is pretty nice.\n<|/ c |>\n<| c |>\n`foreach ($x\
    \ as $key => $value) if ($value % 2 == 0) unset($x[$key]);`\n<|/ c |>\n<| c |>\n\
    - that wouldn't help the OP because he needs to compare against zero, though.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>", "    $unique = array();\n    foreach($x as\
    \ $key => $value) {\n        $num = $value;\n        while (($num = intval($num\
    \ / 10)) > 0) {\n            if($num % 2 === 0) {\n                $unique[] =\
    \ $value;\n                break;\n            }\n        }\n    }\n    return\
    \ $unique;\n}\n", "    $r = array();\n    for($i = 0; $i < count($x); ++$i) {\n\
    \        $found = false;\n        foreach($x as $y) {\n            if(!$found\
    \ && $i % $y == 0) {\n                $found = true;\n            }\n        }\n\
    \        if($found) {\n            array_push($r, $x[$i]);\n        }\n    }\n\
    \    return $r;\n}\n</code>\n<|/ a tags=python,php,arrays |>\n<| c |>\n`unique_digits(array(152,\
    \ 323, 1422, 10))` results in `[]` as the result (when it should result in `array(152,\
    \ 1422)`)\n<|/ c |>\n<| c |>\nI have updated my answer accordingly, please check\
    \ now.\n<|/ c |>\n<| c |>\nThanks for your help. You code works like a charm now.\
    \ But, I have some questions to ask. 1) Is the order of the result not determined\
    \ by PHP but by PHP's internal sorting mechanism? 2) Why the result of `unique_digits(array(152,\
    \ 323, 1422, 10))` comes out to be `array(152, 1422)` instead of `array(1422,\
    \ 152)`?\n<|/ c |>\n<| c |>\nThe result is indeed the internal ordering of the\
    \ array. Why do you want the output to be `array(1422, 152)`? As per the definition\
    \ of `unique_digits`, the digits should be in increasing order. Also, `array(152,\
    \ 323, 1422, 10)` should result in `array(1422)` since there are no odd digits\
    \ in the array.\n<|/ c |>\n<| c |>\n`array_unique` won't help here. Because the\
    \ result should be sorted in increasing order. For example, in your example `array(152,\
    \ 323, 1422, 10)` it should be `array(1422, 152)` since `152 < 323` and `1422\
    \ < 102`. But since `array_unique` doesn't sort result array in increasing order,\
    \ it returns `array(152, 323, 1422)`. And I want the result to be `array(1422,\
    \ 152)` instead of `array(152, 323, 1422)` because my goal is to get all unique\
    \ numbers in increasing order.\n<|/ c |>\n<| a dscore=0 |>\nI have modified your\
    \ solution as per my understanding. And you can easily modify this to suit your\
    \ needs.\n<code>", "    $res = [];\n    foreach ($x as $e) {\n        $digits\
    \ = str_split($e);\n        $digits_count = count($digits);\n        for ($i=0;\
    \ $i<$digits_count; $i++) {\n            if ($i % 2 == 0)\n                continue;\n\
    \            $d = $digits[$i];\n            $res += (array_search($d, $res) ==\
    \ FALSE) ? [$d] : [];\n        }\n    }\n    return array_unique($res);\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\nHere is my version of code.\
    \ My goal is also to get sum of each digit and show sum of each digit.\n<code>\n\
    <?php", "  $y = array();\n  foreach($x as $k=>$v){\n    if($v%2 != 0){\n     \
    \ $y[$k]=$v;\n    }\n  }\n  asort($y);\n  return $y;\n}", "\t$result = [];\n\t\
    foreach($x as $v) {\n\t\t$v = intval($v);\n\t\tif(!isset($result[$v])) {\n\t\t\
    \t$result[$v] = 0;\n\t\t}\n\t\t$result[$v]++;\n\t}\n\t$result2 = [];\n\tforeach($result\
    \ as $v=>$count) {\n\t\tif($count == 1) {\n\t\t\t$result2[] = $v;\n\t\t}\n\t}\n\
    \treturn $result2;\n}", "    return array_filter(\n        $x, \n        function\
    \ ($num) {\n            $digits_str = str_split($num);\n            return count(array_unique($digits_str))\
    \ == 1;\n        }\n    );\n}\n", "    $ret = array();\n    foreach($x as $x)\
    \ { $ret[] = $x%10; }\n    sort($ret);\n    return array_values(array_unique($ret));\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nYour solution is too slow.\n<|/ c |>\n\
    <| a dscore=0 |>\nYour algorithm is O(n^2) because you are doing N loops where\
    \ N is the number of elements. You can optimize it like this. \n<code>", "  $sorted_x\
    \ = $x;\n  sort($sorted_x);\n  foreach ($sorted_x as $i) {\n    $counter = 0;\n\
    \    while ($i && $i%10 != 0) {\n      $counter++;\n      $i /= 10;\n    }\n \
    \   if ($counter) {\n      unset($sorted_x[$i]);\n    }\n  }\n  return $sorted_x;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 tags=arrays,php |>\n<code>\n<?php",
  "\t$count = count($x);\n\t$return = array();\n\tfor ($i = 0; $i < $count; $i++)\
    \ {\n\t\t$cur = $x[$i];\n\t\tfor ($j = $i+1; $j < $count; $j++) {\n\t\t\t// If\
    \ number is odd, ignore even digits\n\t\t\tif ($x[$j] & 1) {\n\t\t\t\tcontinue;\n\
    \t\t\t}\n\t\t\t// If cur and next are odd, swap them\n\t\t\tif ($cur & 1 && $x[$j]\
    \ & 1) {\n\t\t\t\t$return[$j] = $cur;\n\t\t\t\t$cur = $x[$j];\n\t\t\t\t$j++;\n\
    \t\t\t}\n\t\t\telse if ($cur & 1 && !$x[$j] & 1) {\n\t\t\t\t$return[$j] = $cur;\n\
    \t\t\t\t$cur = $x[$j];\n\t\t\t\t$j++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// If two\
    \ even, swap them\n\t\t\t\tif ($cur & 1) {\n\t\t\t\t\t$return[$j] = $cur;\n\t\t\
    \t\t\t$cur = $x[$j];\n\t\t\t\t\t$j++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ($cur\
    \ & 1) {\n\t\t\t$return[] = $cur;\n\t\t}\n\t}\n\treturn $return;\n}\n", "  $array\
    \ = array();\n  foreach ($x as $x) {\n    $array[] = $x;\n  }\n  // Count the\
    \ number of occurrences of each digit\n  $count = array_count_values($array);\n\
    \  $sortedArray = array();\n  foreach ($count as $digit => $numOccurrences) {\n\
    \    // If numOccurrences is odd, that digit has no even digits.\n    if ($numOccurrences\
    \ % 2 == 1) {\n      continue;\n    }\n    // Get the value of this digit, and\
    \ put in sortedArray\n    foreach ($count as $nextDigit => $numOccurrences) {\n\
    \      if ($nextDigit != $digit && $numOccurrences % 2 == 1) {\n        $sortedArray[]\
    \ = $nextDigit;\n      }\n    }\n  }\n  return $sortedArray;\n}", "    if (count($x)\
    \ == 0) return array();\n\n    $result = [];\n    foreach ($x as $k) {\n     \
    \   $tmp = preg_replace('/\\d/', '', $k);\n        $tmp2 = array_unique($tmp);\n\
    \        if (count($tmp2) < count($tmp)) {\n            $result = array_merge($result,\
    \ $tmp2);\n        }\n    }\n\n    return $result;\n}\n", "    // return an empty\
    \ array if input array is empty\n    if (empty($x)) return array();\n    $digits\
    \ = array();\n    foreach($x as $num) {\n        foreach(str_split($num) as $digit)\
    \ {\n            if (in_array($digit, $digits)) continue;\n            $digits[]\
    \ = $digit;\n        }\n    }\n    return $digits;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=arrays,php,unique |>\nHere is a simple solution for this.\n<code>\n\
    <?php\n\n$arr = array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227",
  "    $digits = array();\n    foreach($x as $v) {\n        foreach($v as $digit)\
    \ {\n            $digits[$digit]++;\n        }\n    }\n\n    arsort($digits);\n\
    \    return array_keys($digits);\n}", "    $ret = [];\n    sort($x);\n    foreach\
    \ ($x as $i) {\n        $s = str_split($i);\n        $d = count($s);\n       \
    \ for ($k = 0; $k < $d; $k += 2)\n            if ($s[$k + 1] % 2 === 0)\n    \
    \            break;\n        if ($k != $d)\n            $ret[] = $i;\n    }\n\
    \    return $ret;\n}", "    return array_filter(\n        $x, function ($y) {\n\
    \            if ($y % 2 === 0) {\n                return false;\n            }\n\
    \            return true;\n        }\n    );\n}\n</code>\n<|/ a |>\n<| c |>\n\
    Thank you for answering the question but you have failed to explain what the code\
    \ is doing\n<|/ c |>\n<| c |>\n: I've added some comments.\n<|/ c |>\n<| a dscore=0\
    \ |>\nThis is my simple solution using recursion.\n<code>\n<?php\n", "    $digits\
    \ = array();\n    foreach($x as $value) {\n        $value = abs($value);\n   \
    \     while(in_array($value, $digits)) {\n            $value = $value - 1;\n \
    \       }\n        $digits[] = $value;\n    }\n    return array_unique($digits);\n\
    }\n\n$tests = array(\n    array(array(1,2,3), array(1,2,3)),\n    array(array(1,2,5,3),\
    \ array(1,2,3)),\n    array(array(1,2,5,3,0), array()) // corner case\n);\n\n\
    foreach($tests as $test) {\n    var_dump(array_diff_assoc($test[0], $test[1]));\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nYour test case fails to produce the desired\
    \ output for array `array(array(1,2,5,3), array(1,2,3))`.\n<|/ c |>\n<| c |>\n\
    , please edit your answer and fix the test case that fails so that we can see\
    \ the desired output as well.\n<|/ c |>\n<| c |>\n, please check my updated answer\
    \ and let me know if it works.\n<|/ c |>\n<| c |>\nThis approach isn't quite right.\
    \ It doesn't sort the array in descending order and it fails the \"corner case\"\
    \ test case. I've updated my answer to fix the test case.\n<|/ c |>\n<| c |>\n\
    , I've updated my answer to fix the problems that you mentioned.\n<|/ c |>\n<|\
    \ a tags=arrays,php,algorithm,sorting |>\nYou could use array_count_values to\
    \ sort it and then filter the undesired values.\n<code>\n$array1 = array(1,2,3,4,5,6,7,8,9,10,11,12,13,14);\n\
    $array2 = array(1,2,1,2,1,1,2,3,1,1,1,1,1,1,2);\n$array3 = array(1,2,3,1,2,2,1,1,2,1,1,1,2,1,2);\n\
    \n$result1 = array_count_values($array1);\n$result2 = array_count_values($array2);\n\
    $result3 = array_count_values($array3);\n\nprint_r($result1);\nprint_r($result2);\n\
    print_r($result3);\n\n$result = array_filter($result1, function ($count) {\n \
    \   return $count <= 2;\n});\n\n$result2 = array_filter($result2, function ($count)\
    \ {\n    return $count <= 2;\n});\n\n$result3 = array_filter($result3, function\
    \ ($count) {\n    return $count <= 2;\n});\n\nprint_r($result);\nprint_r($result2);\n\
    print_r($result3);\n</code>\nDemo here\n<|/ a dscore=0 |>\n<| c |>\nThis approach\
    \ isn't quite right. It doesn't ", "    $result = [];\n    $evens = [];\n    for\
    \ ($i = 0; $i < count($x); $i++) {\n        if ($x[$i] % 2 == 0) {\n         \
    \   $evens[] = $x[$i];\n        } else {\n            $result[] = $x[$i];\n  \
    \      }\n    }\n    for ($i = 0; $i < count($evens); $i++) {\n        if (array_search($evens[$i],\
    \ $result) == false) {\n            $result[] = $evens[$i];\n        }\n    }\n\
    \    return $result;\n}\n</code>\n<|/ a |>\n<| a tags=algorithm,php,data-structures\
    \ |>\nThis is not the fastest solution but it works!\n<code>\n$arr = [1,2,3,4,5,6,7,8,9,10];\n\
    $result = [];\narray_walk($arr, function(&$item, $key){\n    $item = array_sum(array_filter(str_split($item),\
    \ function($i){\n        return $i%2==0;\n    }));\n});\n$result[] = $arr[0];\n\
    print_r($result);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nHere is a functional\
    \ solution using array_reduce:\n<code>", "    // sorting the array before passing\
    \ to array_unique may \n    // speed up things \n    sort($x);\n    return array_unique($x);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nAs an aside to the above solutions, I'd\
    \ say that using a `for` loop would be slightly more efficient than a call to\
    \ `array_map`. Also a good example to demonstrate the power of `array_filter`!\n\
    <|/ c |>\n<| a |>\nI find this question interesting so I wrote my own solution\
    \ in PHP. I haven't done any benchmarks but my solution takes O(n).\n<code>",
  "\t$arr = array();\n\tforeach($x as $num) {\n\t\tif(is_int($num)) {\n\t\t\t$digit\
    \ = intval($num);\n\t\t\t$pos = array_search($digit, $arr);\n\t\t\tif($pos !==\
    \ false) {\n\t\t\t\tunset($arr[$pos]);\n\t\t\t}\n\t\t} else {\n\t\t\treturn array();\n\
    \t\t}\n\t}\n\treturn $arr;\n}\n\n/**\n * Return an array of integers that has\
    \ all even digits in order.\n * For example:\n * >>> even_digits(array(33, 432,\
    \ 22, 34))\n * array(2, 4, 6, 8)\n * >>> even_digits(array(33, 432, 1422, 10))\n\
    \ * array()\n */", "\t$arr = array();\n\tforeach($x as $num)\n\t{\n\t\t$str =\
    \ base_convert($num, 10, 36);\n\t\tif(!in_array($str, $arr))\n\t\t{\n\t\t\t$arr[]\
    \ = $str;\n\t\t}\n\t}\n\treturn $arr;\n}\n", "\t\n\tsort($x);\n\t\n\t$result =\
    \ array();\n\t\n\tforeach ($x as $value) {\n\t\t\n\t\tif ($value%2 == 0) {\n\t\
    \t\t\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\t\n\treturn $result;\n}\n", "  \
    \  if (empty($x)) {\n        return array();\n    }\n\n    $odd = false;\n   \
    \ $result = array();\n    foreach ($x as $el) {\n        if ($el % 2 != 0) {\n\
    \            $odd = false;\n            $result[] = $el;\n        } else {\n \
    \           $odd = true;\n        }\n    }\n\n    if (!$odd) {\n        return\
    \ $result;\n    }\n\n    $evens = array();\n    foreach ($x as $el) {\n      \
    \  if ($el % 2 == 0) {\n            $evens[] = $el;\n        }\n    }\n\n    return\
    \ unique_digits_recurse($x, $evens);\n}\n", "  $result = array();\n  // for each\
    \ number\n  foreach ($x as $n) {\n    // get all even digit\n    $digits = str_split($n);\n\
    \    foreach ($digits as $digit) {\n      if ($digit % 2 == 0) {\n        $result[]\
    \ = $digit;\n      }\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\nTo find the unique even digit of any number from 1 to\
    \ n, you can use the following code:\n<code>", "    $sorted = array_count_values($x);\n\
    \    arsort($sorted);\n    foreach($sorted as $key => $value) {\n        if($value\
    \ % 2 == 0) {\n            unset($sorted[$key]);\n        }\n    }\n    return\
    \ array_values($sorted);\n}\n", "  $return = array();\n  $x = array_map(function($a){return\
    \ $a%10;}, $x);\n  $count = count($x);\n  $x = array_unique($x);\n  $x = array_pad($x,\
    \ $count, \"0\");\n  $x = array_flip($x);\n  foreach($x as $k => $v){\n    if(!isset($x[$k])){\n\
    \      $return[] = $v;\n    }\n  }\n  return $return;\n}\n", "  $result = array();\n\
    \  foreach ($x as $key => $value) {\n    if ($value%2 == 0) {\n      $result[]\
    \ = $value;\n    }\n  }\n  return $result;\n}\n", "    $digits = array_count_values($x);\n\
    \    $result = [];\n    foreach ($x as $key => $value) {\n        if ($digits[$value]\
    \ == 0) {\n            $result[] = $value;\n        }\n    }\n    return $result;\n\
    }\n</code>\n<|/ a dscore=0 tags=php,arrays,sorting |>\n<| a |>\n<code>", "   \
    \ $result = [];\n    foreach($x as $value) {\n        foreach (str_split($value)\
    \ as $char) {\n            if ($char != 0 && $char != 1) {\n                $result[]\
    \ = $char;\n            }\n        }\n    }\n    return array_unique($result);\n\
    }", "  $unique = array();\n  for($i = 0; $i < count($x); $i++) {\n    $digit =\
    \ $x[$i];\n    if(!isset($unique[$digit])) {\n      $unique[$digit] = $digit;\n\
    \    }\n  }\n  return $unique;\n}\n", "    $result = [];\n    foreach ($x as $e)\
    \ {\n        if ($e % 2 == 0) {\n            $result[] = $e;\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n\n$a = [0, 4, 2, 8, 4, 10, 20];\n\
    print_r(unique_digits($a));\n</code>\nOutput:\n<code>\nArray\n(\n    [0] => 0\n\
    \    [1] => 4\n    [2] => 2\n    [3] => 8\n    [4] => 4\n    [5] => 10\n    [6]\
    \ => 20\n)\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>", "    sort($x);\n   \
    \ \n    \n    // we already have all digits, so there's no need to check.\n  \
    \  if (count($x) === count($x) % 2) {\n        return $x;\n    }\n    \n    $result\
    \ = array();\n    \n    // we create an array with all odd digits and remove them\
    \ from the original array\n    foreach ($x as $key => $value) {\n        if ($value\
    \ % 2 == 1) {\n            $result[] = $value;\n            unset($x[$key]);\n\
    \        }\n    }\n    \n    // sort again if there's odd digits left\n    sort($x);\n\
    \    \n    \n    foreach ($x as $key => $value) {\n        if ($value % 2 == 1)\
    \ {\n            $result[] = $value;\n            unset($x[$key]);\n        }\n\
    \    }\n    \n    return array_merge($x, $result);\n}\n", "    $unique = array();\n\
    \    foreach($x as $element) {\n        if(is_int($element)) {\n            if($element\
    \ % 2 == 0) {\n                $unique[] = $element;\n            }\n        }\
    \ else {\n            foreach(unique_digits($element) as $digit) {\n         \
    \       if($digit % 2 == 0) {\n                    $unique[] = $digit;\n     \
    \           }\n            }\n        }\n    }\n\n    return $unique;\n}\n", " \
    \ $seen = array();\n  return array_filter($x, function($y) use ($seen) {\n   \
    \ return !isset($seen[$y % 10]);\n  }, true);\n}\n", "  sort($x);\n  $result =\
    \ array();\n  foreach($x as $value) {\n    if ($value%2 == 0 && $value != 0) {\n\
    \      $result[] = $value;\n    }\n  }\n  return $result;\n}\n", "    if (empty($x))\
    \ {\n        return array();\n    }\n    $r = array();\n    foreach ($x as $n)\
    \ {\n        $d = $n % 10;\n        if (!isset($r[$d])) {\n            $r[$d]\
    \ = $n;\n        }\n    }\n    return array_keys($r);\n}\n", "    $res = [];\n\
    \    $len = 0;\n    foreach($x as $n) {\n        $len = strlen($n);\n        if($len\
    \ % 2) {\n            $res[] = $n;\n        }\n    }\n    sort($res);\n    return\
    \ $res;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you, that's working perfectly\
    \ but unfortunately it's not working in some cases. For example unique_digits(array(32,\
    \ 323, 321, 321, 10)) gives array(32) instead of array()\n<|/ c |>\n<| c |>\n\
    It works as expected. As I see it, 321 has only one digit, so it's unique. On\
    \ the other hand, 32 has two digits, so it's not. That's why my code works as\
    \ expected.\n<|/ c |>\n<| c |>\nSorry, you're right, it works perfectly :) I just\
    \ thought that some case doesn't work. Thank you very much, that's what I needed!\n\
    <|/ c |>\n<| c |>\nYou're welcome! I just found a bug: I added the second function\
    \ to the answer and now it's correct.\n<|/ c |>\n<| a |>\nThis should be fast\
    \ and memory efficient.\n<code>\n<?php", "  $result = [];\n  $digits = [];\n \
    \ foreach($x as $i) {\n    if(!in_array($i, $digits)) {\n      $result[] = $i;\n\
    \      $digits[] = $i;\n    }\n  }\n  return $result;\n}", "    $digits = array();\n\
    \    foreach($x as $n) {\n        while(is_integer($n) && array_search($n % 10,\
    \ $digits) === false) {\n            $digits[$n % 10] = 1;\n            $n /=\
    \ 10;\n        }\n    }\n    return $digits;\n}\n\n$inputArray = array();\n$inputArray[]\
    \ = array(15, 33, 1422, 1);\n$inputArray[] = array(152, 323, 1422, 10);\n$inputArray[]\
    \ = array(15, 33, 1422, 10);\n$inputArray[] = array(10, 33, 1422, 10);\n$inputArray[]\
    \ = array(10, 33, 1422, 1);\n$inputArray[] = array(101, 33, 1422, 1);\n$inputArray[]\
    \ = array(10, 33, 1422, 1);\n$inputArray[] = array(10, 33, 1422, 2);\n$inputArray[]\
    \ = array(10, 33, 1422, 3);\n$inputArray[] = array(10, 33, 1422, 4);\n$inputArray[]\
    \ = array(10, 33, 1422, 5);\n$inputArray[] = array(10, 33, 1422, 6);\n$inputArray[]\
    \ = array(10, 33, 1422, 7);\n$inputArray[] = array(10, 33, 1422, 8);\n$inputArray[]\
    \ = array(10, 33, 1422, 9);\n$inputArray[] = array(10, 33, 1422, 10);\n$inputArray[]\
    \ = array(10, 33, 1422, 11);\n$inputArray[] = array(10, 33, 1422, 12);\n$inputArray[]\
    \ = array(10, 33, 1422, 13);\n$inputArray[] = array(10, 33, 1422, 14);\n$inputArray[]\
    \ = array(10, 33, 1422, 15);\n$inputArray[] = array(10, 33, 1422, 16);\n$inputArray[]\
    \ = array(10, 33, 1422, 17);\n$inputArray[] = array(10, 33, 1422, 18);\n$inputArray[]\
    \ = array(10, 33, 1422, 19);\n$inputArray[] = array(10, 33, 1422, 20);\n$inputArray[]\
    \ = array(10, 33, 1422, 21);\n$inputArray[] = array(10, 33, 1422, 22);\n$inputArray[]\
    \ = array(10, 33, 1422, 23);\n$inputArray[] = array(10, 33, 1422, 24);\n$inputArray[]\
    \ = array(10, 33, 1422, 25);\n$inputArray[] = array(10, 33, 1422, 26);\n$inputArray[]\
    \ = array(10, 33, 1422, 27);\n$inputArray[] = array(10, 33, 1422, 28);\n$inputArray[]\
    \ = array(10, 33, 1422, 29);\n$inputArray[] = array(10, 33, 1422, 30);\n$", " \
    \   sort($x);\n    foreach ($x as $key => $value) {\n        $even = 0;\n    \
    \    foreach ($x as $key1 => $value1) {\n            if ($value % 10 == $key1\
    \ % 10) {\n                $even++;\n            }\n        }\n        if ($even\
    \ == 1) {\n            $result[] = $value;\n        }\n    }\n    return $result;\n\
    }\n", "\t$result = array();\n\tforeach ($x as $e) {\n\t\t$k = intval($e / 10);\n\
    \t\t$e = intval($e - $k * 10);\n\t\tif ($e == 0) {\n\t\t\t$result[] = $k;\n\t\t\
    }\n\t}\n\tsort($result);\n\treturn $result;\n}", "    $unique = array();\n   \
    \ foreach ($x as $element) {\n        $digit = intval($element / 10);\n      \
    \  if ($digit % 2 == 0) {\n            $unique[] = $element;\n        }\n    }\n\
    \    return $unique;\n}\n", "  $result = array();\n  foreach ($x as $elem) {\n\
    \    if ($elem % 2 != 0) {\n      $result[] = $elem;\n    }\n  }\n  sort($result);\n\
    \  return $result;\n}\n</code>\n<|/ a tags=php |>\n<| a dscore=0 |>\n<code>\n\
    <?php", "    $n = count($x);\n    \n    if($n == 0){\n        return array();\n\
    \    }\n    \n    $r = array();\n    \n    for($i = 0; $i < $n; $i++){\n     \
    \   $temp = 0;\n        \n        for($j = 0; $j < $n; $j++){\n            \n\
    \            if($i != $j){\n                if($x[$i] % $x[$j] == 0){\n      \
    \              $temp++;\n                }\n            }\n        }\n       \
    \ \n        if($temp == $n){\n            $r[] = $x[$i];\n        }\n    }\n \
    \   \n    return $r;\n}\n", "  $res = array();\n  foreach($x as $i => $v) if($i\
    \ % 2 == 0) $res[$i][] = $v;\n  ksort($res);\n  foreach($res as $v) if(sizeof($v)\
    \ > 1) $x[] = $v[0];\n  return $x;\n}\n</code>\nThis takes O(n log n) time, O(n)\
    \ space and O(n) time. So it only makes sense to use this if you're going to use\
    \ the solution a lot (or a lot in close proximity, for that matter).\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\nHere is a PHP implementation of quicksort.\n<code>", " \
    \   $result = array();\n    foreach ($x as $y) {\n        $digits = str_split($y);\n\
    \        foreach ($digits as $digit) {\n            if ($digit != '0') {\n   \
    \             $result[] = $digit;\n            }\n        }\n    }\n    asort($result);\n\
    \    return $result;\n}\n", "  sort($x);\n  foreach($x as $key => $num) {\n  \
    \  if($num % 2 == 0) {\n      return $x;\n    }\n  }\n  return array();\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis works, but it's quite inefficient since it sorts\
    \ all the numbers, which might not even be needed as you only want to know if\
    \ the digits are unique.\n<|/ c |>\n<| c |>\nYou only need to sort the numbers\
    \ that are unique and check if the rest are unique.\n<|/ c |>\n<| c |>\nThat's\
    \ what I tried to say with my comment \"you don't need to sort the numbers\".\
    \ You should sort them only if the rest are unique.\n<|/ c |>\n<| c |>\nOh I see\
    \ now - I missed that.\n<|/ c |>\n<| a dscore=0 |>\nFor each of the integers check\
    \ if it has a digit which is not a 0\nIf it has a digit which is 0 then add it\
    \ to your array \nelse remove it\n\n<code>", "    $result = array();\n    $digits\
    \ = array();\n    foreach ($x as $y) {\n        foreach (str_split($y) as $key\
    \ => $digit) {\n            if (in_array($digit, $digits)) {\n               \
    \ // skip if already in digits, since they have same digit\n                $result[]\
    \ = $y;\n            }\n            $digits[] = $digit;\n        }\n    }\n  \
    \  return $result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your answer,\
    \ but I think it would be more efficient to convert the numbers into strings (`$numbers\
    \ = str_split($number);`) and then check if each of them has even digits in the\
    \ string (i.e. `$numbers[$i] % 2 == 0`), instead of using `in_array` to search\
    \ the array.\n<|/ c |>\n<| c |>\nYeah, you're right. Thanks for sharing! I'll\
    \ update the answer.\n<|/ c |>\n<| c |>\nNice. Now I'd like to see if there's\
    \ a solution that doesn't use a nested `for` loop\n<|/ c |>\n<| c |>\nSure! I'll\
    \ update the answer as well.\n<|/ c |>\n<| c |>\nThanks! But I like your answer\
    \ better. It avoids unnecessary calls to `str_split`, it also avoids having to\
    \ convert all the strings to integers, and it's easier to understand. Nice answer\
    \ too\n<|/ c |>\n<| a |>\nSince you said \"I can't use array_count_values()\"\
    . Here is an alternative:\n<code>\n$arr = array(15, 33, 1422, 1);\n$arr2 = array(152,\
    \ 323, 1422, 10);\n", "  if(empty($x)) return array();\n  $result = array();\n\
    \  foreach($x as $e) {\n    for($i = 1; $i <= 10; $i++) {\n      $test = $e %\
    \ $i;\n      if(!$test) continue;\n      $result[] = $i;\n      break;\n    }\n\
    \  }\n  return $result;\n}\n</code>\n<|/ a |>\n<| a tags=algorithm,php |>\n<code>",
  "    // Write your code here\n    $ret = array();\n    \n    foreach ($x as $e)\
    \ {\n        foreach ($ret as $k => $d) {\n            if ($d > 0 && ($e % $d)\
    \ == 0) {\n                $ret[] = $e;\n            }\n        }\n    }\n   \
    \ \n    sort($ret);\n    return $ret;\n}", "\tsort($x);\n\t$ans = array();\n\t\
    foreach($x as $i){\n\t\t$last = $ans[count($ans)-1];\n\t\tif((int)$i != (int)$last)\
    \ $ans[] = (int)$i;\n\t}\n\treturn $ans;\n}\n", "    $arr = [];\n    foreach($x\
    \ as $v) {\n        $arr[$v] = $v;\n    }\n    krsort($arr);\n    return array_keys($arr);\n\
    }\n\n/**\n * Find the largest power of 10 less than or equal to x.\n * \n * If\
    \ x is not a power of 10, the function returns 0.\n * \n * Example 1:\n * >>>\
    \ find_power_10(11)\n * 10\n * \n * Example 2:\n * >>> find_power_10(135)\n *\
    \ 10\n * \n * Example 3:\n * >>> find_power_10(126)\n * 11\n * \n * Example 4:\n\
    \ * >>> find_power_10(1357)\n * 11\n * \n * Example 5:\n * >>> find_power_10(1266)\n\
    \ * 12\n * \n * Example 6:\n * >>> find_power_10(13577)\n * 12\n * \n * Example\
    \ 7:\n * >>> find_power_10(12666)\n * 13\n */", "\t$r = array();\n\t\n\tforeach($x\
    \ as $v)\n\t\t$r[$v] = 1;\n\t\n\tforeach($x as $k) {\n\t\tforeach($r as $v) {\n\
    \t\t\tif($k % $v == 0) {\n\t\t\t\tunset($r[$v]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\
    }\n\t}\n\t\n\treturn array_values($r);\n}\n", "    if (empty($x)) {\n        return\
    \ array();\n    }\n    $result = array();\n    foreach ($x as $k=>$v) {\n    \
    \    $result[$k] = is_even($v);\n    }\n    $resultSorted = array_filter($result,\
    \ function($v){return $v;});\n    sort($resultSorted);\n    return $resultSorted;\n\
    }", "    foreach($x as $num) {\n        // get the value with out '0' if exist\n\
    \        $num = str_pad($num, 2, \"0\", STR_PAD_LEFT);\n        // get even digit\n\
    \        $odd = $num % 10;\n        // get the even number as string\n       \
    \ $even = sprintf(\"%u\", $odd);\n        // compare\n        if($even === 0)\
    \ continue;\n        // add to result array\n        if(!isset($return[$even]))\n\
    \            $return[$even] = array();\n        // push value into result array\n\
    \        $return[$even][] = $num;\n    }\n    return $return;\n}", "  $return\
    \ = array();\n  foreach($x as $key => $element) {\n    if ($element % 2 != 0)\
    \ {\n      $return[] = $element;\n    }\n  }\n  return $return;\n}", "    $y =\
    \ array();\n    foreach ($x as $k) {\n        $y[(int)strlen($k)] = $k;\n    }\n\
    \    return array_keys($y);\n}\n", "    sort($x);\n    $ret = array();\n    $last_digit\
    \ = 0;\n    foreach ($x as $i => $e) {\n        if ($i % 2 == 0) {\n         \
    \   if ($last_digit == 0) {\n                $ret[] = $e;\n            } else\
    \ {\n                $ret[] = $last_digit;\n            }\n        }\n       \
    \ $last_digit = $e;\n    }\n    return $ret;\n}\n", "    return array_filter($x,\
    \ function ($val) {\n        return $val & 1;\n    });\n}\n", "    $y = array();\n\
    \    foreach($x as $t) {\n        $t = abs($t);\n        while($t > 0) {\n   \
    \         if($t % 2 == 0) $y[] = $t;\n            $t = floor($t / 10);\n     \
    \   }\n    }\n    return $y;\n}", "    sort($x);\n    $n = 0;\n    foreach ($x\
    \ as $key => $value) {\n        if ( ! $value % 2) {\n            $n++;\n    \
    \    }\n    }\n    if ($n == count($x)) {\n        return array();\n    }\n  \
    \  $out = array();\n    foreach ($x as $key => $value) {\n        if ( ! $value\
    \ % 2) {\n            $out[] = $value;\n        }\n    }\n    sort($out);\n  \
    \  return $out;\n}\n", "    $counter = array();\n    foreach($x as $key => $value)\
    \ {\n        $counter[$value]++;\n    }\n\n    foreach($x as $key => $value) {\n\
    \        if ($counter[$value] == 0) {\n            $new_array[] = $value;\n  \
    \      }\n    }\n\n    return $new_array;\n}\n</code>\n<|/ a tags=php,arrays,algorithm\
    \ |>\n<| a dscore=2 |>\n<code>\n$input = array(\n    15,\n    33,\n    1422,\n\
    \    1,\n    10\n);\n\n$output = array_filter(\n    $input,\n    function ($v)\
    \ use (&$output) {\n        $counts[$v]++;\n\n        return $counts[$v] == 1;\n\
    \    }\n);\n</code>\n<|/ a tags=php,arrays,algorithm |>\n<| c |>\nThis answer\
    \ is wrong. Look at the comments to OP's post.\n<|/ c |>\n<| c |>\nI read OP's\
    \ comment and understood that OP was trying to eliminate all array elements that\
    \ have at least two duplicate digits. So this should be the right answer.\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>\n$arr = array(15, 33, 1422, 1);\n$count = count($arr);\n\
    $new_arr = array();\nforeach($arr as $val){\n    for($i=1;$i<=$count;$i++){\n\
    \        $temp = abs($val%10);\n        if($val/10 ==$temp ){\n            $new_arr[]\
    \ = $val;\n            break;\n        }\n    }\n}\n\nvar_dump($new_arr);\n</code>\n\
    <|/ a tags=php,arrays,algorithm |>\n<| c |>\nThis answer is wrong. Look at the\
    \ comments to OP's post.\n<|/ c |>\n<| a tags=php,arrays,algorithm |>\nHere is\
    \ a simple solution using array_filter().\n<code>", "  if (empty($x)) return array();\n\
    \  \n  $result = array();\n  \n  foreach($x as $num) {\n    if ($num % 2 == 0)\
    \ continue;\n    \n    array_push($result, $num);\n  }\n  \n  return sort($result);\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n function unique_digits( $x )\
    \ {\n    $unique = array();\n    foreach($x as $num) {\n       if(is_numeric($num))\
    \ {\n         $key = intval($num);\n         if(isset($unique[$key])) {\n    \
    \        unset($unique[$key]);\n         }\n         else {\n            $unique[$key]\
    \ = $num;\n         }\n       }\n    }\n    return array_filter($unique);\n }\n\
    \n$x = array(15, 33, 1422, 1);\necho implode(\", \", unique_digits($x));\n</code>\n\
    <|/ a tags=arrays,php |>\n<| c |>\nThat won't return `1, 15, 33`.\n<|/ c |>\n\
    <| a dscore=0 |>\nOne can not really solve this with just an associative array,\
    \ because you need to know which key was duplicated and what was the first element\
    \ that is different from the rest:\n<code>", "  sort($x);\n  $results = [];\n\
    \  $i = 0;\n  foreach ($x as $value) {\n    if ($i % 2 === 0) {\n      $results[]\
    \ = $value;\n      $i++;\n    }\n  }\n  return $results;\n}", "  $unique_digits\
    \ = array();\n  foreach ($x as $k=>$v) { \n    if ($v%2 != 0) {\n      $unique_digits[$k]\
    \ = $v;\n    }\n  }\n  return $unique_digits;\n}\n", "  $r = array();\n  foreach($x\
    \ as $y)\n  {\n    if($y % 2 != 0)\n      $r[] = $y;\n  }\n  return sort($r);\n\
    }\n</code>\n<|/ a dscore=1 tags=php,arrays |>\n<| c |>\nWhile this code snippet\
    \ may solve the problem, it doesn't explain why or how it answers the question.\
    \ Please [include an explanation for your code](//meta.stackexchange.com/q/114762/269535),\
    \ as that really helps to improve the quality of your post.  Remember that you\
    \ are answering the question for readers in the future, and those people might\
    \ not know the reasons for your code suggestion.\n<|/ c |>\n<| c |>\nActually\
    \ it does. I just gave him a functional solution, without saying how to do it.\n\
    <|/ c |>\n<| a tags=php,arrays |>\nYou can use the array_unique function.\nIt\
    \ will remove the duplicates.\n<|/ a dscore=0 |>\n<| c |>\nBut it wont change\
    \ the order of the array\n<|/ c |>\n<| a tags=php,arrays |>\nTo get unique digits\
    \ of an array you can use array_unique() function and to sort it you can use ksort().\n\
    <code>\n<?php\n", "    foreach ($x as $key => $val) {\n        foreach ($x as\
    \ $val2) {\n            if ($key != $val2) {\n                if ($val % 2 ==\
    \ 0) {\n                    $x[$key] = $val;\n                }\n            }\n\
    \        }\n    }\n\n    return $x;\n}\n", "\tforeach($x as $v) {\n\t\t$num =\
    \ array_search($v, $x);\n\t\tunset($x[$num]);\n\t}\n\tsort($x);\n\treturn $x;\n\
    }\n", "    sort($x);\n    $a = array_keys($x);\n    foreach ($a as $i) {\n   \
    \     if ($i % 2 == 0) {\n            array_splice($a, $i, 1);\n        }\n  \
    \  }\n    return $a;\n}\n", "    $res = [];\n    $counter = array();\n    $size\
    \ = count($x);\n    for($i = 0; $i < $size; ++$i) {\n        $num = $x[$i];\n\
    \        if(!isset($counter[$num])) {\n            $counter[$num] = 1;\n     \
    \       $res[] = $num;\n        } else {\n            $counter[$num] += 1;\n \
    \       }\n    }\n    return $res;\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\nA\
    \ possible solution using recursion:\n<code>", "    sort($x);\n    $s = array_count_values($x);\n\
    \    $d = array_diff_assoc($s, [1]);\n    return array_intersect_key($s, $d);\n\
    }\n</code>\n<|/ a tags=arrays,php,function,array-unique |>\n<| c |>\nNice work!\
    \  This is quite inefficient though as it will generate a new array every time.\
    \  A more efficient method would just to loop through each array element, and\
    \ push the unique elements onto a new array.  You can see my answer for a way\
    \ to do this.  Also, why are you using `array_fill` with a range of 1?\n<|/ c\
    \ |>\n<| c |>\n, you are right, my code can be optimized by one loop. I just wrote\
    \ it that way for better understanding.\n<|/ c |>\n<| c |>\nI didn't know you\
    \ could sort an array! Thanks for teaching me something.\n<|/ c |>\n<| c |>\n\
    Yeah, you can do that :) It makes sense when you're sorting an array of numbers,\
    \ since you don't care about their relative ordering, and can get away with sorting\
    \ them all anyways. But, if you have an array of objects, you may want to sort\
    \ them by some property (like the object's `created_at` date) before using this.\n\
    <|/ c |>\n<| a dscore=2 |>\nHere is another solution that I thought of:\n<code>",
  "\t$digits = array();\n\tforeach($x as $value) {\n\t\t$digits[] = $value%10;\n\t\
    \t$x = floor($x/10);\n\t}\n\treturn $digits;\n}\n", "   sort($x);\n   $result\
    \ = array();\n   foreach($x as $i => $e) {\n      if ($i % 2 == 0 && $e == 0)\
    \ {\n         $result[] = $e;\n      }\n   }\n   return $result;\n}\n", "    $return\
    \ = array();\n    foreach($x as $element) {\n        if(is_numeric($element))\
    \ {\n            $element = intval($element);\n        }\n        $sum = 0;\n\
    \        foreach($x as $element) {\n            $sum += $element;\n        }\n\
    \        if($sum % 2 != 0) {\n            $return[] = $element;\n        }\n \
    \   }\n    return $return;\n}\n", "    sort($x);\n    foreach ($x as $key => $element)\
    \ {\n        if ($element % 2 == 0) unset($x[$key]);\n    }\n    return $x;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks. However, as I said in the original\
    \ post \"this solution would not work if the array size is too big\", this solution\
    \ would not work if the array size is too big.\n<|/ c |>\n<| a dscore=0 |>\nThe\
    \ answer of Ghostdog will work only if you are interested in unique numbers. In\
    \ that case, you can create an array with unique numbers using array_unique().\
    \ Then you can easily check whether the given number is in the array or not. The\
    \ code will be like this:\n<code>", "    $array = array();\n    foreach($x as\
    \ $x_val) {\n        $x_val = preg_replace('/\\D/', '', $x_val);\n        $array[$x_val]\
    \ = 1;\n    }\n    ksort($array);\n    return array_keys($array);\n}\n</code>\n\
    <|/ a tags=php,arrays,algorithm |>\n<| a dscore=2 |>\n<code>\n$array = array(\n\
    \        array(10, 20, 50),\n        array(40, 10, 50, 90),\n        array(20,\
    \ 30),\n        array(30, 10),\n        array(30),\n        array(40, 50, 60),\n\
    \        array(10, 30, 40, 10),\n        array(10, 20, 30, 40, 50, 60)\n    );\n\
    \n$sorted = array();\nforeach ($array as $key => $val) {\n    $sorted = array_merge($sorted,\
    \ array_unique($val));\n}\n\nprint_r($sorted);\n</code>\n<|/ a tags=php,arrays,algorithm\
    \ |>\n<| a tags=php,arrays,algorithm |>\nThis should do the trick:\n<code>\n$input\
    \ = array(10, 20, 50, 10, 40, 50, 60);\n\n$uniques = array();\n\nforeach ($input\
    \ as $num) {\n    $uniques[] = $num;\n}\n\n$uniques = array_unique($uniques);\n\
    \nprint_r($uniques);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,algorithm\
    \ dscore=1 |>\nI wanted to post my solution too, just because I needed it again\
    \ and I liked how concise it is.\n<code>\n<?php\n\n$array = array(\n  array(10,\
    \ 20, 50),\n  array(40, 10, 50, 90),\n  array(20, 30),\n  array(30, 10),\n  array(30),\n\
    \  array(40, 50, 60),\n  array(10, 30, 40, 10),\n  array(10, 20, 30, 40, 50, 60)\n\
    );\n\n$uniques = array();\n\nforeach ($array as $key => $val) {\n    foreach ($val\
    \ as $subval) {\n        if (!in_array($subval, $uniques)) {\n            $uniques[]\
    \ = $subval;\n        }\n    }\n}\n", "  $digits = array_count_values($x);\n \
    \ $result = array();\n  foreach ($x as $num) {\n    foreach ($digits as $key =>\
    \ $value) {\n      if ($num % $value == 0) {\n        unset($digits[$key]);\n\
    \        break;\n      }\n    }\n    if (!count($digits)) {\n      $result[] =\
    \ $num;\n    }\n  }\n  return $result;\n}\n", "    // write your code in PHP7.0\n\
    \    return array_filter($x, function($v) use($x) {\n        return $v & 1;\n\
    \    });\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays,sorting |>\n<code>",
  "    $count = array_count_values($x);\n    $results = array();\n    foreach($count\
    \ as $digit => $count) {\n        if($count == 1)\n            $results[] = $digit;\n\
    \        else if($count == 2)\n            $results[] = $digit + 1;\n        else\n\
    \            $results[] = $digit + 2;\n    }\n    return $results;\n}\n", "  \
    \  \n    $digits = $x;\n    foreach($digits as $key => $val) {\n        if ($val\
    \ % 2 === 0) {\n            unset($digits[$key]);\n        }\n    }\n\n    sort($digits);\n\
    \    return $digits;\n}", "  $u = array();\n  $d = array();\n  foreach($x as $xk)\
    \ {\n    while(array_key_exists($xk, $u)) {\n      $xk++;\n    }\n    $u[$xk]\
    \ = true;\n  }\n  foreach($u as $k => $v) {\n    if(!isset($d[$k])) {\n      $d[$k]\
    \ = 0;\n    }\n    $d[$k] = $d[$k] + 1;\n  }\n  ksort($d);\n  return $d;\n}\n\
    </code>\n<|/ a tags=php,arrays,algorithm |>\n<| c |>\nI have added a comment about\
    \ this in OP question\n<|/ c |>\n<| c |>\n: I edited my answer, hope it helps!\n\
    <|/ c |>\n<| c |>\nI think it's good (and simple) solution, but there is one problem.\
    \ Because of performance and complexity, it isn't scalable to bigger arrays. So\
    \ I think it's better to rewrite it using `array_map` and `array_search` functions.\n\
    <|/ c |>\n<| c |>\n: It depends on what is the goal of the algorithm. `array_search`\
    \ has a complexity of O(n) while `array_filter` has a complexity of O(n*m), where\
    \ n is count of elements and m is count of conditions.\n<|/ c |>\n<| c |>\n: I've\
    \ edited my answer, hope it helps!\n<|/ c |>\n<| a |>\nI came up with this solution:\n\
    <code>\n$arr = [15, 33, 1422, 1];\n$counts = array_count_values($arr);\n$new_arr\
    \ = array();\n$keys = array_keys($counts);\n\nforeach($keys as $key){\n  if(isset($counts[$key])\
    \ && $counts[$key] == 1){\n    array_push($new_arr, $key);\n  }\n}\n\nvar_dump($new_arr);\n\
    </code>\nYou can improve it by creating custom array_unique() function but for\
    \ now I believe this solution is good enough.\nEDIT:\nAs noticed, this solution\
    \ will work only if you have unique keys in your array.\n<|/ a dscore=1 tags=php,arrays,algorithm\
    \ |>\n<| c |>\nThis is not guaranteed to work, since `array_count_values` does\
    \ not guarantee uniqueness. Example: Array `array(\"a\" => 1, \"a\" => 2)`\n<|/\
    \ c |>\n<| c |>\nI see, so `array_count_values` will count each unique key. Hmm,\
    \ I guess ", "  $ret=array();\n  foreach($x as $v) foreach(str_split($v) as $k)\
    \ $ret[$k]++;\n  krsort($ret);\n  return $ret;\n}\n", "    sort($x);\n    $result=array();\n\
    \    foreach ($x as $key) {\n        $result[]=$key;\n    }\n    $result=array_filter($result);\n\
    \    return $result;\n}", "    sort($x);\n    $r = array();\n    $c = array();\n\
    \    foreach($x as $y) {\n        do {\n            $r[] = $y;\n            $c[]\
    \ = $y;\n        } while($y > 0);\n        do {\n            $y = $c[$y];\n  \
    \      } while(count($c) > 0 && $y > 0);\n    }\n    return $r;\n}\n", "    $result\
    \ = array();\n    foreach($x as $n) {\n        $result[] = $n;\n    }\n    sort($result);\n\
    \    return array_filter($result, function($n) {\n        return strlen($n) %\
    \ 2 == 0;\n    });\n}\n", "    $temp = new stdClass();\n    foreach($x as $val)\
    \ {\n        $temp->$val = new stdClass();\n    }\n    return $temp;\n}\n", " \
    \   $result = [];\n    foreach($x as $i) {\n        $chars = str_split($i);\n\
    \        $result[$i] = $chars[0] . $chars[1] . $chars[2] . $chars[3] . $chars[4];\n\
    \    }\n\n    asort($result);\n    return $result;\n}\n", "    if (empty($x))\
    \ {\n        return array();\n    }\n    $result = array();\n    foreach ($x as\
    \ $v) {\n        $t = $v % 10;\n        if (!isset($result[$t])) {\n         \
    \   $result[$t] = 1;\n        } else {\n            $result[$t]++;\n        }\n\
    \    }\n    return array_keys($result);\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array,sorting\
    \ |>\n<| a dscore=0 |>\nThe most efficent way is to use array_walk, here is a\
    \ sample that prints out the unique values only once:\n<code>\n<?php\n$a = [ 10,\
    \ 22, 3, 6, 6, 8, 8, 8, 8 ];\narray_walk($a, function(&$v){\n    $v = count($v)\
    \ > 1 ? $v[0] : $v;\n}, $a);\nprint_r($a);\n</code>\n<|/ a tags=php,arrays,multidimensional-array,sorting\
    \ |>\n<| a dscore=0 |>\nTry this\n<code>\n<?php\n$arr=array(\"2\",\"2\",\"3\"\
    ,\"4\",\"5\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"15\"\
    ,\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"25\",\"26\"\
    ,\"27\",\"28\",\"29\",\"29\",\"30\",\"31\",\"32\",\"32\",\"33\",\"34\",\"35\"\
    ,\"35\",\"35\",\"36\",\"37\",\"38\",\"39\",\"39\",\"40\",\"41\",\"41\",\"42\"\
    ,\"43\",\"44\",\"45\",\"45\",\"45\",\"46\",\"47\",\"48\",\"48\",\"49\",\"49\"\
    ,\"50\",\"51\",\"51\",\"51\",\"52\",\"53\",\"53\",\"54\",\"55\",\"55\",\"55\"\
    ,\"56\",\"57\",\"58\",\"58\",\"59\",\"59\",\"59\",\"60\",\"61\",\"62\",\"62\"\
    ,\"62\",\"63\",\"64\",\"65\",\"65\",\"66\",\"67\",\"67\",\"68\",\"69\",\"69\"\
    ,\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"75\",\"75\",\"76\",\"77\",\"78\"\
    ,\"79\",\"79\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"85\",\"86\"\
    ,\"87\",\"88\",\"88\",\"88\",\"89\",\"90\",\"91\",\"91\",\"92\",\"93\",\"93\"\
    ,\"94\",\"95\",\"95\",\"95\",\"96\",\"97\",\"97\",\"97\",\"98\",\"99\",\"99\"\
    ,\"99\",\"100\",\"100\",\"100\",\"101\",\"101\",\"101\",\"101\",\"102\",\"102\"\
    ,\"102\",\"102\",\"103\",\"103\",\"104\",\"104\",\"104", "    $result = [];\n\
    \    foreach ($x as $value) {\n        if (is_integer($value) && $value == $value\
    \ % 10) {\n            $result[] = $value;\n        }\n    }\n    if (count($result)\
    \ > 0) {\n        return array_merge(unique_digits($result), $x);\n    }\n   \
    \ return $result;\n}\n", "    sort($x);\n    $r = array();\n    foreach ($x as\
    \ $i => $y) {\n        if ($y % 2 == 0) {\n            continue;\n        }\n\
    \        $l = $y;\n        while (true) {\n            while (true) {\n      \
    \          if ($y % 2 != 0) {\n                    break;\n                }\n\
    \                $y = floor($y / 10);\n                $r[] = $l;\n          \
    \  }\n            $l = $x;\n            $x = floor($x / 10);\n            if ($x\
    \ == 0) {\n                break;\n            }\n        }\n    }\n    return\
    \ $r;\n}\n", "  sort($x);\n  $new_arr = [];\n  foreach($x as $x_val) {\n    if(\
    \ strlen($x_val) % 2 != 0) {\n      $new_arr[] = $x_val;\n    }\n  }\n  return\
    \ $new_arr;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
