name: HumanEval_93_encode
language: php
prompt: "<?php\n// Write a function that takes a message, and encodes in such a \n\
  // way that it swaps case of all letters, replaces all vowels in \n// the message\
  \ with the letter that appears 2 places ahead of that \n// vowel in the english\
  \ alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n\
  // \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction\
  \ encode($message) {\n"
tests: "function candidate(...$args) {\n    return encode(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"TEST\") !== \"tgst\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"Mudasir\") !== \"mWDCSKR\") { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(\"YES\") !== \"ygs\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"This is a message\") !==\
  \ \"tHKS KS C MGSSCGG\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  I DoNt KnOw WhAt tO WrItE\") !== \"k dQnT kNqW wHcT Tq wRkTg\") { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    return strtr($message, \n        array('a'=>\"B\", 'e'=>\"E\",\
    \ 'i'=>\"D\", 'o'=>\"O\", 'u'=>\"U\", 'A'=>\"b\", 'E'=>\"e\", 'I'=>\"d\", 'O'=>\"\
    o\", 'U'=>\"u\", '0'=>\"A\", '1'=>\"B\", '2'=>\"C\", '3'=>\"D\", '4'=>\"E\", '5'=>\"\
    F\", '6'=>\"G\", '7'=>\"H\", '8'=>\"I\", '9'=>\"J\", '!'=>\"K\", '?'=>\"L\", '@'=>\"\
    M\", '&'=>\"N\", '|'=>\"O\", '\\\\'=>\"P\", '/'=>\"Q\", '('=>\"R\", '['=>\"S\"\
    , ')'=>\"T\", '{'=>\"U\", '|'=>\"V\", '~'=>\"W\", '^'=>\"X\", '\xA3'=>\"Y\", '\xA5\
    '=>\"Z\", '\"'=>\"a\", \"'\"=>\"b\", '#'=>\"c\", \"$\"=>\"d\", \"%\"=>\"e\", '&'=>\"\
    f\", '\"'=>\"g\", '('=>\"h\", ')'=>\"i\", '['=>\"j\", '\\\\'=>\"k\", '|'=>'l',\
    \ ']'=>'m', \"'\"=>\"n\", '.'=>\"o\", '*'=>\"p\", '+'=>\"q\", '-'=>\"r\", '/'=>\"\
    s\", '{'=>\"t\", '|'=>\"u\", '~'=>\"v\", '\xA3'=>\"w\", '\xA5'=>\"x\", '\"'=>\"\
    y\", \"'\"=>\"z\", '#'=>\"A\", \"$\"=>\"B\", '%'=>\"C\", '&'=>\"D\", '('=>\"E\"\
    , ')'=>\"F\", '['=>\"G\", '\\\\'=>\"H\", '|'=>'I', ']'=>'J', \"'\"=>\"K\", '.'=>\"\
    L\", '*'=>\"M\", '+'=>\"N\", '-'=>\"O\", '/'=>\"P\", '{'=>\"Q\", '|'=>\"R\", '~'=>\"\
    S\", '^'=>\"T\", '\xA3'=>\"U\", '\xA5'=>\"V\", '\"'=>\"W\", \"'\"=>\"X\", '#'=>\"\
    Y\", '$'=>\"Z\", '%'=>\"a\", \"'\"=>\"b\", '#'=>\"c\", \"$\"=>\"d\", \"%\"=>\"\
    e\", '&'=>\"f\", '\"'=>\"g\", '('=>\"h\", ')'=>\"i\", '['=>\"j\", '\\\\'=>\"k\"\
    , '|'=>'l', ']'=>'m', \"'\"=>\"n\", '.'=>\"o\", '*'=>\"p\", '+'=>\"q\", '-'=>\"\
    r\", '/'=>\"s\", '{'=>\"t\", '|'=>\"u\", '~'=>\"v\", '\xA3'=>\"w\", '\xA5'=>\"\
    x\", '", "  \n    // Initialize an array of the possible letters and their \n\
    \    // frequencies in the message.\n    $freqs = array();\n    foreach (range('A',\
    \ 'Z') as $c) {\n        $freqs[$c] = 0;\n    }\n    foreach (range('a','z') as\
    \ $c) {\n        $freqs[$c]++;\n    }\n    \n    // Loop through all the possible\
    \ letter frequencies.\n    foreach ($freqs as $letter => $freq) {\n        $encoded[$letter]\
    \ = $freq;\n    }\n    \n    // Loop through all the possible letters in the message.\n\
    \    foreach (str_split($message) as $letter) {\n        // Get the frequency\
    \ of the letter in the message.\n        $freq = $encoded[$letter];\n        //\
    \ Check if this letter is in the frequency array.\n        if (isset($freqs[$letter]))\
    \ {\n            // If the letter frequency exists, add the letter's \n      \
    \      // frequency to the letter's frequency in the message.\n            $freqs[$letter]\
    \ += $freq;\n        } else {\n            // If the letter frequency doesn't\
    \ exist, add the\n            // letter's frequency to the letter's frequency\
    \ in the\n            // message.\n            $freqs[$letter] = $freq;\n    \
    \    }\n    }\n    \n    // Create the message by looping through each letter's\
    \ frequency.\n    $res = \"\";\n    foreach ($freqs as $letter => $freq) {\n \
    \       $res .= chr($freq);\n    }\n    \n    return $res;\n}\n</code>\n<|/ a\
    \ dscore=2 tags=algorithm,php,anagram |>\n<| c |>\nVery interesting, and a nice\
    \ idea. Thank you!\n<|/ c |>\n<| c |>\nWhat are the chances of getting an infinite\
    \ loop here? A recursive function calls itself, which calls itself? Or what kind\
    \ of scenario is that?\n<|/ c |>\n<| c |>\nI'm not a PHP expert, but I am pretty\
    \ confident this would result in an infinite loop, since you would be creating\
    \ an infinite number of message encodings (at least if you haven't done something\
    \ stupid)\n<|/ c |>\n<| c |>\nYeah I thought the same, but I couldn't find any\
    \ counter-example. Maybe you can add one and I'll change my answer accordingly\n\
    <|/ c |>\n<| c |>\nWhat about a message like `foobar`?\n<|/ c |>\n<| a |>\nA simple\
    \ solution would be to generate all possible combinations of your characters and\
    \ then count the number of times each of them appears in the string. \n<code>\n\
    <?php\n", "  $message = $message;\n  $messages = array();\n  $length = strlen($message);\n\
    \  for ($i = 0; $i < $length; $i++) {\n    $letter = substr($message, $i, 1);\n\
    \    if (ctype_upper($letter)) {\n      $messages[$i] = $letter;\n      $messages[$i\
    \ + 1] = $letter;\n    } else {\n      for ($j = 0; $j < strlen($message); $j++)\
    \ {\n        $letter = substr($message, $j, 1);\n        if (ctype_upper($letter))\
    \ {\n          $messages[$i] = $letter;\n          break;\n        }\n      }\n\
    \    }\n  }\n  $message = implode('', $messages);\n  $messages = explode('', $message);\n\
    \  $messages = array_values($messages);\n  $message = implode('', $messages);\n\
    \  return $message;\n}\n", "    $output = '';\n    $vowels = 'aeiou';\n    $replacements\
    \ = array();\n    $i = 0;\n    foreach (str_split($message) as $char) {\n    \
    \    if ($i < 2) {\n            $replacements[$vowels[$i]] = $vowels[$i+1];\n\
    \        }\n        if ($char == $vowels[$i]) {\n            $i++;\n        }\
    \ else {\n            $output .= $char;\n        }\n    }\n    return $output\
    \ . implode($replacements);\n}\n</code>\n<|/ a |>\n<| c |>\nWow, thanks! I didn't\
    \ think of doing it like that. I ended up doing it a slightly different way, but\
    \ your way is much cleaner :)\n<|/ c |>\n<| a tags=php dscore=0 |>\nThis should\
    \ work for you:\n<code>", "  $chars = str_split($message);\n  foreach ($chars\
    \ as $key => $char) {\n    $chars[$key] = preg_replace('/./', '/', ucfirst(ord($char)));\n\
    \  }\n  return implode('', $chars);\n}\n\n$tests = array('abc' => 'abc', 'aAbc'\
    \ => 'aBC', 'hello' => 'hello');\nforeach ($tests as $test => $expected) {\n \
    \ print \"Test \\\"$test\\\" => \\\"$expected\\\"\\n\";\n  assertEquals($expected,\
    \ encode($test));\n}", "    $encodedMessage = \"\";\n    for ($i = 0; $i < strlen($message);\
    \ $i++) {\n        $encodedMessage .= getLetter($message[$i], $i);\n    }\n  \
    \  return $encodedMessage;\n}\n", "    // your code goes here \n    return $message;\n\
    }\n", "    $output = \"\";\n    foreach (str_split($message) as $letter) {\n \
    \       $output[] = strtoupper($letter);\n        $output[] = strtolower($letter);\n\
    \    }\n    $output = str_replace(\"A\", \"t\", $output);\n    $output = str_replace(\"\
    a\", \"t\", $output);\n    $output = str_replace(\"e\", \"k\", $output);\n   \
    \ $output = str_replace(\"i\", \"k\", $output);\n    $output = str_replace(\"\
    o\", \"k\", $output);\n    $output = str_replace(\"u\", \"k\", $output);\n   \
    \ $output = str_replace(\"Y\", \"k\", $output);\n    $output = str_replace(\"\
    a\", \"s\", $output);\n    $output = str_replace(\"e\", \"s\", $output);\n   \
    \ $output = str_replace(\"i\", \"s\", $output);\n    $output = str_replace(\"\
    o\", \"s\", $output);\n    $output = str_replace(\"u\", \"s\", $output);\n   \
    \ $output = str_replace(\"y\", \"s\", $output);\n    $output = str_replace(\"\
    A\", \"g\", $output);\n    $output = str_replace(\"a\", \"g\", $output);\n   \
    \ $output = str_replace(\"e\", \"g\", $output);\n    $output = str_replace(\"\
    i\", \"g\", $output);\n    $output = str_replace(\"o\", \"g\", $output);\n   \
    \ $output = str_replace(\"u\", \"g\", $output);\n    $output = str_replace(\"\
    y\", \"g\", $output);\n    $output = str_replace(\"O\", \"G\", $output);\n   \
    \ $output = str_replace(\"o\", \"G\", $output);\n    $output = str_replace(\"\
    U\", \"G\", $output);\n    $output = str_replace(\"u\", \"G\", $output);\n   \
    \ $output = str_replace(\"Y\", \"G\", $output);\n    $output = str_replace(\"\
    x\", \"t\", $output);\n    $output = str_replace(\"X\", \"t\", $output);\n   \
    \ $output = str_replace(\"X\", \"C\", $output);\n    $output = str_replace(\"\
    x\", \"C\", $output);\n    return implode($output);\n}\n", "  for ($i = 0; $i\
    \ < strlen($message); $i++){\n    if ($message[$i] >= 'A' && $message[$i] <= 'Z'){\n\
    \      $message[$i] = chr((ord($message[$i]) - 65) + 2); \n    } else if ($message[$i]\
    \ >= 'a' && $message[$i] <= 'z'){\n      $message[$i] = chr((ord($message[$i])\
    \ - 97) + 2); \n    } else {\n      $message[$i] = $message[$i]; \n    }\n  }\n\
    \  return $message;\n}", "    // Your code goes here\n}\n", "    $message = \"\
    $message\";\n    $result = \"\";\n    $letterIndex = 0;\n    while($letterIndex\
    \ < strlen($message)) {\n        $letter = $message[$letterIndex];\n        $upperLetter\
    \ = strtoupper($letter);\n        for($i = 0; $i < strlen($upperLetter); $i++)\
    \ {\n            $result += substr($upperLetter, $i, 1);\n        }\n        $result\
    \ += substr($upperLetter, 0, 1);\n        $letterIndex++;\n    }\n    return $result;\n\
    }", "  $englishLetter = \"abcdefghijklmnopqrstuvwxyz\";\n  $englishVowels = \"\
    aeiou\";\n  $translatedVowels = \"bcdfghjklmnpqrstvwxyz\";\n  $translatedLetter\
    \ = \"\";\n  $vowelCount = 0;\n  $messageCharArray = str_split($message);\n  \n\
    \  foreach ($messageCharArray as $charArray) {\n    foreach ($charArray as $char)\
    \ {\n      // If current char is a vowel, add it to translated letter\n      if\
    \ (in_array($char, $englishVowels)) {\n        $translatedLetter .= $char;\n \
    \     }\n      // If current char is a vowel, increment vowel count\n      elseif\
    \ (in_array($char, $englishVowels)) {\n        $vowelCount++;\n      }\n     \
    \ // If current char is a letter, add it to translated letter\n      elseif (in_array($char,\
    \ $englishLetter)) {\n        $translatedLetter .= $translatedVowels[$vowelCount];\n\
    \      }\n      // If current char is a letter, increment vowel count\n      elseif\
    \ (in_array($char, $englishLetter)) {\n        $vowelCount++;\n      }\n    }\n\
    \  }\n  return $translatedLetter;\n}", "  $chars = str_split($message);\n  foreach\
    \ ($chars as $key => $value) {\n    if ($value == $value) {\n      // If there\
    \ is only 1 char, we need an extra space on the end\n      if ($key == 0) {\n\
    \        $chars[$key] = \" \";\n      }\n      else {\n        // If there are\
    \ 2 chars, the first char needs to be a space\n        $chars[$key] = \" \";\n\
    \      }\n    }\n    else {\n      $chars[$key] = strtoupper($value);\n    }\n\
    \  }\n  $message = implode(\"\", $chars);\n  return $message;\n}\n", "    \n \
    \   $swap = array(\"a\" => \"A\", \"e\" => \"E\", \"i\" => \"I\", \"o\" => \"\
    O\", \"u\" => \"U\", \"A\" => \"a\", \"E\" => \"e\", \"I\" => \"i\", \"O\" =>\
    \ \"o\", \"U\" => \"u\");\n    $message = strtr($message, $swap);\n    $vowels\
    \ = str_split($message);\n    foreach($vowels as $key => $val) {\n        $vowels[$key]\
    \ = substr($vowels[$key], 0, 2) . $vowels[$key] . substr($vowels[$key], 2, 1);\n\
    \    }\n    return implode($vowels);\n}", "    // TODO\n}\n</cell>\n<cell>\n%%writefile\
    \ .\\submit\n</cell>\n<cell>", "    return strtr($message, \n        array('a'=>'A',\
    \ \n             'b'=>'B', \n             'c'=>'C', \n             'd'=>'D', \n\
    \             'e'=>'E',\n             'f'=>'F', \n             'g'=>'G', \n  \
    \           'h'=>'H', \n             'i'=>'I', \n             'j'=>'J', \n   \
    \          'k'=>'K', \n             'l'=>'L', \n             'm'=>'M', \n    \
    \         'n'=>'N', \n             'o'=>'O', \n             'p'=>'P', \n     \
    \        'q'=>'Q', \n             'r'=>'R', \n             's'=>'S', \n      \
    \       't'=>'T', \n             'u'=>'U', \n             'v'=>'V', \n       \
    \      'w'=>'W', \n             'x'=>'X', \n             'y'=>'Y', \n        \
    \     'z'=>'Z',\n             '\xC7'=>'C', \n             '\xC7'=>'C', \n    \
    \         '\xC7'=>'C', \n             '\xC7'=>'C', \n             '\xC7'=>'C',\
    \ \n             '\xC7'=>'C', \n             '\xC7'=>'C', \n             '\xC7\
    '=>'C', \n             '\xC7'=>'C', \n             '\xC7'=>'C', \n           \
    \  '\xC7'=>'C', \n             '\xC7'=>'C', \n             '\xC7'=>'C', \n   \
    \          '\xC7'=>'C', \n             '\xC7'=>'C', \n             '\xC7'=>'C',\
    \ \n             '\xC7'=>'C', \n             '\xC7'=>'C', \n             '\xC7\
    '=>'C', \n             '\xC7'=>'C', \n             '\xC7'=>'C', \n           \
    \  '\xC7'=>'C', \n             '\xC7'=>'C', \n             '\xC7'=>'C', \n   \
    \          '\xC7'=>'C', \n             '\xC7'=>'C', \n             '\xC7'=>'C',\
    \ \n             '\xC7'=>'C', \n             '\xC7'=>'C', \n             '\xC7\
    '=>'C', \n             '\xC7'=>'C', \n             '\xC7'=>'C', \n           \
    \  '\xC7'=>'C', \n             '\xC7'=>'C', \n             '\xC7'=>'C', \n   \
    \          '\xC7'=>'C', \n             '\xC7'=>'C', \n             '\xC7'=>'C',\
    \ \n             '\xC7'=>'C', \n             '\xC7'=>'C', \n             '\xC7",
  "\t$code = \"\";\n\t$vowels = \"aeiou\";\n\t$len = strlen($message);\n\tfor ($i=0;\
    \ $i<$len; $i++) {\n\t\t$code = substr($message, $i, 1) . strtoupper($code);\n\
    \t}\n\tfor ($i=0; $i<strlen($code); $i++) {\n\t\tif ($vowels[$i] == $code[$i])\
    \ {\n\t\t\t$code[$i] = strtoupper($code[$i]);\n\t\t}\n\t}\n\treturn $code;\n}\n",
  "    $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    $encodedMessage = \"\"\
    ;\n    foreach (str_split($message) as $char) {\n        if (in_array($char, $vowels))\
    \ {\n            $encodedMessage .= $char;\n            continue;\n        }\n\
    \        for ($i = 2; $i < strlen($char); $i++) {\n            $firstLetter =\
    \ substr($char, 0, $i);\n            $secondLetter = substr($char, $i, 1);\n \
    \           if (in_array($firstLetter, $vowels)) {\n                $encodedMessage\
    \ .= $secondLetter;\n                continue;\n            }\n            if\
    \ (in_array($secondLetter, $vowels)) {\n                $encodedMessage .= $firstLetter;\n\
    \                continue;\n            }\n        }\n    }\n    return $encodedMessage;\n\
    }\n", "    return strtr($message, array_flip(\n        array_map(function ($letter)\
    \ {\n            return str_ireplace(\"a\", \"A\", $letter);\n        }, str_split($message))\n\
    \    ));\n}\n</code>\n<|/ a tags=php,string,codeigniter dscore=3 |>\n<| a tags=php,string,codeigniter\
    \ dscore=3 |>\n<code>\n$str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\
    \n$newStr = strtr($str, \n                array(\n                    'a' => 'A',\
    \ \n                    'b' => 'B', \n                    'c' => 'C',\n      \
    \              'd' => 'D',\n                    'e' => 'E',\n                \
    \    'f' => 'F',\n                    'g' => 'G',\n                    'h' =>\
    \ 'H',\n                    'i' => 'I',\n                    'j' => 'J',\n   \
    \                 'k' => 'K',\n                    'l' => 'L',\n             \
    \       'm' => 'M',\n                    'n' => 'N',\n                    'o'\
    \ => 'O',\n                    'p' => 'P',\n                    'q' => 'Q',\n\
    \                    'r' => 'R',\n                    's' => 'S',\n          \
    \          't' => 'T',\n                    'u' => 'U',\n                    'v'\
    \ => 'V',\n                    'w' => 'W',\n                    'x' => 'X',\n\
    \                    'y' => 'Y',\n                    'z' => 'Z',\n          \
    \          '0' => '0',\n                    '1' => '1',\n                    '2'\
    \ => '2',\n                    '3' => '3',\n                    '4' => '4',\n\
    \                    '5' => '5',\n                    '6' => '6',\n          \
    \          '7' => '7',\n                    '8' => '8',\n                    '9'\
    \ => '9',\n                )\n            );\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ answer helped me. But I had to change `strtr($str, array(` to `$str = strtr($str,\
    \ array(`. PHP 7.2.4 does not like that syntax.\n<|/ c |>\n<| c |>\nAh yes, you\
    \ must be using PHP < 7.2 since that syntax didn't exist until PHP 7.2. That said,\
    \ this answer is a bit of a hack, it's not obvious to someone reading your code\
    \ that 'a' is replaced by 'A', and that 'b' is replaced by 'B', etc. I'd recommend\
    \ just using PHP's built-in [strtr()](https://www.php.net/manual/en/function.strtr.php)\
    \ function.\n<|/ c |>\n<| c |>\nYes, you're right. PHP 7.2 didn't support that\
    \ syntax indeed. Thanks for the tip!\n<|/ c |>\n<| c |>\nThis is exactly what\
    \ I needed it works perfectly\n<|/ ", "    $encoded = '';\n    $vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n    $lower = 'abcdefghijklmnopqrstuvwxyz';\n    $uppercase\
    \ = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    $length = strlen($message);\n    $countVowels\
    \ = 0;\n    $countLower = 0;\n    $countUpper = 0;\n    $firstLetter = 0;\n  \
    \  $lastLetter = 0;\n    $lastVowel = 0;\n    $messageLength = strlen($message);\n\
    \    for ($i = 0; $i < $messageLength; $i++) {\n        $character = $message[$i];\n\
    \        if ($character == ' ') {\n            $encoded = $encoded . ' ';\n  \
    \          continue;\n        }\n        $countVowels++;\n        $countLower++;\n\
    \        $countUpper++;\n        if (strpos($lower, $character) !== false) {\n\
    \            $firstLetter = $i;\n        }\n        if (strpos($uppercase, $character)\
    \ !== false) {\n            $lastLetter = $i;\n        }\n    }\n\n    for ($i\
    \ = 0; $i < $length; $i++) {\n        $character = $message[$i];\n        if ($character\
    \ == ' ') {\n            $encoded = $encoded . ' ';\n            continue;\n \
    \       }\n        if (strpos($vowels, $character) !== false) {\n            $countVowels++;\n\
    \            if ($lastVowel != 0) {\n                $encoded = $encoded . strtoupper($vowels[$lastVowel]);\n\
    \                $lastVowel = 0;\n            }\n            $lastVowel = $i;\n\
    \        }\n        if (strpos($lower, $character) !== false) {\n            $countLower++;\n\
    \            if ($firstLetter != 0) {\n                $encoded = $encoded . strtoupper($lower[$firstLetter]);\n\
    \                $firstLetter = 0;\n            }\n            $firstLetter =\
    \ $i;\n        }\n        if (strpos($uppercase, $character) !== false) {\n  \
    \          $countUpper++;\n            if ($lastLetter != 0) {\n             \
    \   $encoded = $encoded . strtoupper($uppercase[$lastLetter]);\n             \
    \   $lastLetter = 0;\n            }\n            $lastLetter = $i;\n        }\n\
    \    }\n    return $encoded;\n}\n", "  // Write your code here\n}", "    $code\
    \ = \"\";\n    $code_length = strlen($code);\n    $vowels = \"aeiou\";\n\n   \
    \ for($i = 0; $i < strlen($message); $i++) {\n        $char = substr($message,\
    \ $i, 1);\n        $new_char = $char;\n\n        if (in_array($char, $vowels))\
    \ {\n            $new_char = strtoupper($char);\n            $code = $code . $new_char;\n\
    \            $code_length = strlen($code);\n        } else {\n            $code\
    \ = $code . $char;\n            $code_length = strlen($code);\n\n            $new_char\
    \ = chr(ord($char) + 2);\n            $code = $code . $new_char;\n           \
    \ $code_length = strlen($code);\n        }\n    }\n\n    return $code;\n}\n",
  "    $result = \"\";\n    for ($i = 0, $n = strlen($message); $i < $n; $i++) {\n\
    \        $result .= $message[$i];\n        $code = ord($message[$i]);\n      \
    \  // Swap case\n        $result .= ($code >= 97 && $code <= 122)\n          \
    \      ? chr(ord('A') + ($code - 97))\n                : (($code >= 65 && $code\
    \ <= 90)\n                ? chr(ord('a') + $code - 65)\n                : chr(ord('0')\
    \ + $code - 48));\n    }\n    return $result;\n}", "    $message = strtoupper($message);\
    \ //Convert to uppercase\n    $vowels = \"AEIOU\"; //Assume all vowels\n    \n\
    \    $vowelsToUpper = array(); //Store a list of the vowels to be turned into\
    \ uppercase\n    \n    for($i = 0; $i < strlen($message); $i++) { \n        $vowelsToUpper[$i]\
    \ = substr($message,$i,1); //Find a letter at that position\n    }\n    \n   \
    \ //Replace all vowels with the letter that appears 2 places ahead\n    //of it\
    \ in the english alphabet\n    for($i = 0; $i < strlen($message); $i++) { \n \
    \       $replacement = substr($vowels,$i,1); //Find the vowel\n        $replacement2\
    \ = substr($vowels,($i+1),1); //Find the vowel that appears 2 places ahead\n \
    \       $message[$i] = strtoupper(str_ireplace($vowels,$replacement,$message[$i]));\
    \ //Replace the vowel\n        $message[$i] = strtoupper(str_ireplace($replacement2,$replacement,$message[$i]));\
    \ //Replace the vowel that appears 2 places ahead\n    }\n    return $message;\n\
    }\n\necho encode(\"This is a message\"); //Outputs \"tHKS KS C MGSSCGG\"", " \
    \ $encoded = '';\n  // Step 1: find all vowels in message\n  $vowels = 'aeiouyAEIOUY';\n\
    \  $vowels_index = str_pos($message, $vowels);\n  // Step 2: find all letters\
    \ that appear 2 places ahead of the vowels\n  $letters = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n\
    \  $letters_index = str_pos($message, $letters);\n  // Step 3: loop through all\
    \ letters and swap case\n  for ($i = 0; $i < strlen($message); $i++) {\n    //\
    \ Get letter and vowel positions\n    $letter = $letters[$i];\n    $vowel = $vowels[$vowels_index];\n\
    \    // Get position of current letter in message\n    $letters_pos = strpos($message,\
    \ $letter);\n    // Step 4: if letter appears 2 places ahead of the vowel, swap\
    \ case \n    if ($letter === $vowels[$vowels_index+1]) {\n      // If letter is\
    \ the last letter, don't swap case\n      if ($i == strlen($message) - 1) {\n\
    \        $encoded .= $message[$i];\n      }\n      // If the letter is the second\
    \ last letter, swap case\n      else {\n        $encoded .= strtoupper($message[$i]);\n\
    \      }\n    }\n    // Step 5: if not the letter is in the vowels, add letter\
    \ to the message\n    else {\n      $encoded .= $message[$i];\n    }\n    // Step\
    \ 6: increment vowel index\n    if ($vowels_index+1 < strlen($vowels)) {\n   \
    \   $vowels_index++;\n    }\n    // Step 7: increment letter index\n    if ($letters_index+1\
    \ < strlen($letters)) {\n      $letters_index++;\n    }\n  }\n  return $encoded;\n\
    }", "    $message = str_ireplace(\"A\", \"t\", $message);\n    $message = str_ireplace(\"\
    E\", \"k\", $message);\n    $message = str_ireplace(\"I\", \"i\", $message);\n\
    \    $message = str_ireplace(\"O\", \"o\", $message);\n    $message = str_ireplace(\"\
    U\", \"s\", $message);\n    $message = str_ireplace(\"a\", \"s\", $message);\n\
    \    $message = str_ireplace(\"e\", \"s\", $message);\n    $message = str_ireplace(\"\
    i\", \"s\", $message);\n    $message = str_ireplace(\"o\", \"s\", $message);\n\
    \    $message = str_ireplace(\"u\", \"s\", $message);\n    $message = str_ireplace(\"\
    x\", \"s\", $message);\n    $message = str_ireplace(\"ch\", \"s\", $message);\n\
    \    $message = str_ireplace(\"sh\", \"s\", $message);\n    $message = str_ireplace(\"\
    j\", \"s\", $message);\n    $message = str_ireplace(\"sh\", \"s\", $message);\n\
    \    $message = str_ireplace(\"c\", \"s\", $message);\n    $message = str_ireplace(\"\
    z\", \"s\", $message);\n    $message = str_ireplace(\"z\", \"s\", $message);\n\
    \    $message = str_ireplace(\"x\", \"s\", $message);\n    $message = str_ireplace(\"\
    x\", \"s\", $message);\n    $message = str_ireplace(\"x\", \"s\", $message);\n\
    \    $message = str_ireplace(\"x\", \"s\", $message);\n    $message = str_ireplace(\"\
    x\", \"s\", $message);\n    $message = str_ireplace(\"x\", \"s\", $message);\n\
    \    $message = str_ireplace(\"x\", \"s\", $message);\n    $message = str_ireplace(\"\
    x\", \"s\", $message);\n    $message = str_ireplace(\"x\", \"s\", $message);\n\
    \    $message = str_ireplace(\"x\", \"s\", $message);\n    $message = str_ireplace(\"\
    x\", \"s\", $message);\n    $message = str_ireplace(\"x\", \"s\", $message);\n\
    \    $message = str_ireplace(\"x\", \"s\", $message);\n    $message = str_ireplace(\"\
    x\", \"s\", $message);\n    $message = str_ireplace(\"x\", \"s\", $message);\n\
    \    $message = str_ireplace(\"x\", \"s\", $message);\n    $message = str_ireplace(\"\
    x\", \"s\", $message);\n    $message = str_ireplace(\"x\", \"s\", $message);\n\
    \    $message = str_ireplace(\"x\", \"s\", $message);\n    $message = str_ireplace(\"\
    x\", \"s\", $message);\n    $message = str_ireplace(\"x\", \"s\", $message);\n\
    \    $message = str_ireplace(\"x\", \"s\", $message);\n    $message = str_ireplace(\"\
    x\", \"s\", $message);\n    $message = str_ireplace(\"x\", \"s\", $message);\n\
    \    $message = str_ireplace(\"x\", \"s\", $message);\n    $message = str_ireplace(\"\
    x\", \"s\", $message);\n    $message = str_ireplace(\"x\", \"s\", $message);\n",
  "    $replaced = str_replace(array(\"a\", \"e\", \"i\", \"o\", \"u\"), array(\"\
    A\", \"E\", \"I\", \"O\", \"U\"), $message);\n    return str_replace(\"A\", \"\
    a\", str_replace(\"E\", \"e\", str_replace(\"I\", \"i\", str_replace(\"O\", \"\
    o\", str_replace(\"U\", \"u\", $replaced)))));\n}\n", "  $alphabet = array(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\");\n  $message = str_replace(array(\"a\", \"e\", \"i\"\
    , \"o\", \"u\"), array(\"a\", \"e\", \"i\", \"o\", \"u\"), $message);\n  $message\
    \ = str_replace(array(\"A\", \"E\", \"I\", \"O\", \"U\"), array(\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"), $message);\n  $message = \"\"; //reset\n  $len = strlen($message);\n\
    \  for ($i = 0; $i < $len; $i++) {\n    $pos = strpos($alphabet, $message[$i]);\n\
    \    if ($pos === false) {\n      // not found in alphabet\n      $alphabet[count($alphabet)]\
    \ = $message[$i];\n      $message = $message . $alphabet[count($alphabet) - 1];\n\
    \    } else {\n      $message = $message . substr($alphabet, $pos + 1, 1);\n \
    \   }\n  }\n  return $message;\n}\n", "  // Your code here\n  $array = str_split($message);\n\
    \  $return = \"\";\n  foreach($array as $key => $value){\n    $return.= str_replace(\n\
    \      array('a', 'e', 'i', 'o', 'u'),\n      array(\n        \"A\",\n       \
    \ \"E\",\n        \"I\",\n        \"O\",\n        \"U\",\n      ),\n      substr($value,\
    \ 0, 2)\n    );\n  }\n  $return .= str_replace(\n      array('A','E','I','O','U'),\n\
    \      array('a', 'e', 'i', 'o', 'u'),\n      substr($value, 2, 2)\n    );\n \
    \ $return .= str_replace(\n      array('a', 'e', 'i', 'o', 'u'),\n      array('a',\
    \ 'e', 'i', 'o', 'u'),\n      substr($value, 4, 2)\n    );\n  $return .= str_replace(\n\
    \      array('a', 'e', 'i', 'o', 'u'),\n      array('a', 'e', 'i', 'o', 'u'),\n\
    \      substr($value, 6, 2)\n    );\n  $return .= str_replace(\n      array('a',\
    \ 'e', 'i', 'o', 'u'),\n      array('a', 'e', 'i', 'o', 'u'),\n      substr($value,\
    \ 8, 2)\n    );\n  $return .= str_replace(\n      array('a', 'e', 'i', 'o', 'u'),\n\
    \      array('a', 'e', 'i', 'o', 'u'),\n      substr($value, 10, 2)\n    );\n\
    \  return $return;\n}", "    \n    // Initialize a blank string\n    $encoded\
    \ = \"\";\n    \n    // Loop through the message\n    for($i = 0; $i < strlen($message);\
    \ $i++) {\n        \n        // Grab the character at that index\n        $char\
    \ = $message[$i];\n        \n        // Check if the current char is a letter\n\
    \        if(ctype_alpha($char)) {\n            \n            // Grab the character\
    \ at index 2 \n            // + 1 because index 0 is the letter\n            $nextChar\
    \ = substr($message, ($i+1), 1);\n            \n            // Grab the english\
    \ character at that index\n            $nextChar = ord($nextChar);\n         \
    \   \n            // Check if the character at that index is\n            // a\
    \ vowel\n            if((($nextChar>=65) && ($nextChar<=90))\n               \
    \ || (($nextChar>=97) && ($nextChar<=122)))\n            {\n                //\
    \ Encode the vowel with its english equivalence\n                $encoded = $char.chr($nextChar+1);\n\
    \            }\n            \n            // Otherwise, the character is either\
    \ a letter\n            // or a space\n            else {\n                //\
    \ Encode the letter with its english equivalence\n                $encoded = $char.chr($nextChar-1);\n\
    \            }\n        }\n    }\n    \n    return $encoded;\n}\n</code>\nHere's\
    \ a solution that uses recursion:\n<code>", "    $len = strlen($message);\n  \
    \  for ($i = 0; $i < $len; $i++) {\n        if (ctype_upper($message[$i])) {\n\
    \            $message[$i] = strtoupper($message[$i]);\n        }\n        $message[$i]\
    \ = str_replace(\"A\", \"a\", $message[$i]);\n        $message[$i] = str_replace(\"\
    a\", \"A\", $message[$i]);\n        $message[$i] = str_replace(\"E\", \"e\", $message[$i]);\n\
    \        $message[$i] = str_replace(\"e\", \"E\", $message[$i]);\n        $message[$i]\
    \ = str_replace(\"I\", \"i\", $message[$i]);\n        $message[$i] = str_replace(\"\
    i\", \"I\", $message[$i]);\n        $message[$i] = str_replace(\"O\", \"o\", $message[$i]);\n\
    \        $message[$i] = str_replace(\"o\", \"O\", $message[$i]);\n        $message[$i]\
    \ = str_replace(\"U\", \"u\", $message[$i]);\n        $message[$i] = str_replace(\"\
    u\", \"U\", $message[$i]);\n        $message[$i] = str_replace(\"a\", \"A\", $message[$i]);\n\
    \        $message[$i] = str_replace(\"A\", \"a\", $message[$i]);\n    }\n    return\
    \ $message;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=php,encryption\
    \ |>\nHere is the same logic as in C/C++, only in PHP:\n<code>\n$message = preg_replace('~(\\\
    w)~u', function($matches) {\n    return strtoupper($matches[0]);\n}, $message);\n\
    \n$message = preg_replace_callback('~(?<=(?i)[a-z])([aeiou])~', function($matches)\
    \ {\n    return strtoupper($matches[1].$matches[2]);\n}, $message);\n\n$message\
    \ = preg_replace('/(?<=[aeiou])([aeiou])/', '$1', $message);\n</code>\n<|/ a |>\n\
    <| a tags=php,encryption |>\nFor those who like short solutions without regular\
    \ expressions:\n<code>\n$message = \"This is a secret message!\";\n\n$vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n\n$decoded = [];\n\n$vowelsCount = 0;\n\nfor ($i\
    \ = 0, $l = strlen($message); $i < $l; $i++) {\n    if (isset($vowels[$message[$i]]))\
    \ {\n        $decoded[] = strtoupper($message[$i]);\n        $vowelsCount++;\n\
    \    } else if ($vowelsCount > 0) {\n        $decoded[] = strtolower($message[$i]);\n\
    \        $vowelsCount", "    $vowels = \"AEIOU\";\n    $newMessage = '';\n   \
    \ $length = strlen($message);\n    for ($i = 0; $i < $length; $i++) {\n      \
    \  $newMessage .= \n            $message[$i] . \n            (strpos($vowels,\
    \ $message[$i]) !== false ? \n                strtoupper(substr($message[$i],\
    \ strpos($vowels, $message[$i])+2)) : \n                '');\n    }\n    return\
    \ $newMessage;\n}\n", "  $encodedMessage = '';\n  // Write the loop that iterates\
    \ over the message characters. \n  for ($i = 0; $i < strlen($message); $i++) {\n\
    \    // If the current character is a vowel, append the letter to the \n    //\
    \ output string that replaces the vowel. \n    if ($message[$i] == 'a' || $message[$i]\
    \ == 'e' || $message[$i] == 'i' || $message[$i] == 'o' || $message[$i] == 'u')\
    \ {\n      $encodedMessage .= $message[$i];\n    }\n    // Otherwise, append the\
    \ vowel unchanged.\n    else {\n      $encodedMessage .= $message[$i];\n    }\n\
    \  }\n  return $encodedMessage;\n}\n", "    $vowels = \"aeiou\";\n    $vowel2\
    \ = \"AEIOU\";\n    \n    $messageArray = str_split($message);\n    $codedMessage\
    \ = \"\";\n    foreach ($messageArray as $letter) {\n        \n        // Swap\
    \ case if letter is uppercase\n        if (strtoupper($letter) == $letter) {\n\
    \            $codedMessage .= strtolower($letter);\n            \n        // Swap\
    \ case if letter is lowercase\n        } else if (strtolower($letter) == $letter)\
    \ {\n            $codedMessage .= strtoupper($letter);\n            \n       \
    \ // Check for letter in vowels string\n        } else if (in_array($letter, $vowels))\
    \ {\n            $codedMessage .= $letter;\n            \n        // Check for\
    \ letter in vowel 2 string\n        } else if (in_array($letter, $vowel2)) {\n\
    \            $codedMessage .= $letter;\n            \n        // If letter is\
    \ neither uppercase or lowercase, replace vowels with \n        // letter that\
    \ appears 2 places ahead of vowel in the english alphabet\n        } else {\n\
    \            $codedMessage .= $letter[strpos($letter, $vowel) + 2];\n        }\n\
    \    }\n    \n    return $codedMessage;\n}\n</code>\nYou can write another function\
    \ that does the opposite and decode it back to a string if you need that too.\n\
    <|/ a dscore=0 |>\n<| a dscore=0 tags=php,caesar-cipher |>\nI believe a more efficient\
    \ and maintainable method would be to store your translations in a table. This\
    \ table could be an array of arrays with index and corresponding characters. Then\
    \ you can use the index value to determine the next character and shift it appropriately.\
    \ With this method, you also avoid repeated string concatenation.\nI created this\
    \ PHP script that demonstrates how to create a table with one row and one column\
    \ and then shift each character in a string forward and back by one character\
    \ and display the result to the browser. You may want to modify it to suit your\
    \ needs.\n<code>\n<?php\n    $myMessage = \"My secret message\";\n    $cipherMessage\
    \ = encode_aes_cipher($myMessage);\n    echo \"$cipherMessage\\n\";\n    $reverseCipherMessage\
    \ = decode_aes_cipher($cipherMessage);\n    echo \"$reverseCipherMessage\\n\"\
    ;\n\n    function encode_aes_cipher($plainText) {\n        $cipherIndex = 0;\n\
    \        $cipherText = \"\";\n        \n        for ($i = 0; $i < strlen($plainText);\
    \ $i++) {\n            $cipherIndex += 1;\n            $currentChar = $plainText[$i];\n\
    \            \n            if ($cipherIndex > count($table)) {\n             \
    \   $cipherIndex = 0;\n            }\n            \n", "    $alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    $replacements = array();\n    foreach(str_split($message) as $i => $char)\
    \ {\n        $replacements[$char] = $alphabet[($i+1) % 26];\n    }\n    $message\
    \ = strtr($message, $replacements);\n    \n    $output = '';\n    for($i = 0;\
    \ $i < strlen($message); $i++) {\n        $output .= $alphabet[ord($message[$i])\
    \ - ord('A')];\n    }\n    return $output;\n}\n", "  // We are going to encode\
    \ the message as many times as there are \n  // vowels in the alphabet. \n  //\
    \ We start by getting all of the indices of vowels in the\n  // alphabet.\n  $vowels\
    \ = range('A','Z');\n  // Then we map these indices into their english counterparts.\n\
    \  // For example, if the index of an element is 5, then its\n  // english equivalent\
    \ is \"E\".\n  $english = array_flip($vowels);\n  // And finally we map the indices\
    \ into their message \n  // counterparts. \n  $message = strtr($message, $english);\n\
    \  // At this point, message is of the form \"AA BB CC DD EE FF GG HH II JJ KK\n\
    \  // LL MM NN\" etc.\n  // We now encode it by placing two letters ahead of each\
    \ vowel. \n  // We do this by iterating through the string and adding each letter\n\
    \  // twice, once before each vowel, and once after each vowel. \n  // To do this,\
    \ we use strtr, which replaces $english with $message.\n  $encoded_message = strtr($message,\
    \ $vowels, array_map(\n    function($vowel) {\n      return $vowel . $vowel;\n\
    \    },\n    $vowels\n  ));\n  // At this point, $encoded_message is \"AA BB CC\
    \ DD EE FF GG HH II JJ KK\n  // LL MM NN\" etc.\n  // To encode the entire string,\
    \ we simply concatenate $encoded_message \n  // as many times as there are vowels\
    \ in the alphabet. \n  return $encoded_message . strtr($encoded_message, $vowels,\
    \ $message);\n}", "    $code = '';\n    for ($i = 0; $i < strlen($message); $i++)\
    \ {\n        $letter = substr($message, $i, 1);\n        $code .= chr($i % 26\
    \ + strtolower($letter));\n    }\n    return $code;\n}\n", "    $encodedMessage\
    \ = \"\";\n    $vowels = \"AEIOUaeiou\";\n    $message = strtoupper($message);\n\
    \    $messageLength = strlen($message);\n    $letterPositions = array();\n   \
    \ for ($i = 0; $i < $messageLength; $i++) {\n        $letterPositions[$i] = ord($message[$i]);\n\
    \    }\n    for ($i = 0; $i < $messageLength; $i++) {\n        for ($j = 0; $j\
    \ < $messageLength; $i++) {\n            if ($i == $j) {\n                continue;\n\
    \            }\n            if (ord($message[$i]) >= ord($message[$j])) {\n  \
    \              $letterPositions[$j] = ord($message[$i]);\n            } else {\n\
    \                $letterPositions[$j] = ord($message[$j]);\n            }\n  \
    \      }\n    }\n    for ($i = 0; $i < $messageLength; $i++) {\n        $encodedMessage\
    \ .= $message[$i];\n        for ($j = $i + 1; $j < $messageLength; $j++) {\n \
    \           if (ord($message[$i]) >= ord($message[$j])) {\n                if\
    \ ($i > $j) {\n                    $letterPositions[$j] = ord($message[$i]);\n\
    \                }\n            } else if (ord($message[$j]) >= ord($message[$i]))\
    \ {\n                if ($i < $j) {\n                    $letterPositions[$i]\
    \ = ord($message[$j]);\n                }\n            } else {\n            \
    \    if ($i > $j) {\n                    $letterPositions[$j] = ord($message[$i]);\n\
    \                } else if ($i < $j) {\n                    $letterPositions[$j]\
    \ = ord($message[$j]);\n                }\n            }\n        }\n    }\n \
    \   for ($i = 0; $i < $messageLength; $i++) {\n        $encodedMessage .= $message[$i];\n\
    \        for ($j = $i + 1; $j < $messageLength; $j++) {\n            if ($i >=\
    \ $j && $i < $messageLength - 1) {\n                $encodedMessage .= $vowels[array_search($letterPositions[$j],\
    \ $vowels)];\n            } else {\n                if ($i > $j) {\n         \
    \           $encodedMessage .= $vowels[array_search($letterPositions[$j], $vowels)];\n\
    \                }\n            }\n        }\n    }\n    return $encodedMessage;\n\
    }", "    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n    $message = str_split($message);\n\
    \    $encoded = array();\n    foreach ($message as $k => $v) {\n        $encoded[$k]\
    \ = $vowels[($k + 2)%5];\n    }\n    foreach ($message as $k => $v) {\n      \
    \  $encoded[$k] = $v;\n    }\n    $encoded = array_merge($encoded, $vowels);\n\
    \    return implode($encoded);\n}", "    $a = array('a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',\
    \ 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');\n   \
    \ $k = array('A', 'C', 'E', 'G', 'I', 'M', 'O', 'U', 'Y');\n    $b = array('a',\
    \ 'c', 'e', 'i', 'o', 'u', 'y');\n    $messageLength = strlen($message);\n   \
    \ $encodedMessage = '';\n    for ($x = 0; $x < $messageLength; $x++) {\n     \
    \   $encodedMessage .= $message[$x];\n        $a = ord($message[$x]);\n      \
    \  if ($a >= 'A' && $a <= 'Z') {\n            $encodedMessage .= $k[($a - 'A')];\n\
    \        } elseif ($a >= 'a' && $a <= 'z') {\n            $encodedMessage .= $a[($a\
    \ - 'a')];\n        } elseif ($a == '-') {\n            $encodedMessage .= '-';\n\
    \        }\n    }\n    return $encodedMessage;\n}\n</code>\n<|/ q dscore=3 |>\n\
    <| c |>\n[Related](http://stackoverflow.com/questions/9242635/efficient-algorithm-for-generating-a-random-letter-password/9242714#9242714)\n\
    <|/ c |>\n<| c |>\nCan you please explain why \"This is a test\" is not \"SISS\"\
    ?\n<|/ c |>\n<| c |>\nWhat is your definition of \"efficient\"?\n<|/ c |>\n<|\
    \ c |>\nDo you really have to do this in PHP, or can you use something else?\n\
    <|/ c |>\n<| c |>\nThis is an assignment and we are required to do this in PHP.\
    \ The function \"encode()\" is what I have to modify, but I'm not sure.\n<|/ c\
    \ |>\n<| a tags=algorithm,php dscore=2 |>\nThis has something to do with you trying\
    \ to do too much work. You really should consider writing this in another language.\
    \ PHP does a lot of things you would not normally consider to do in other languages.\n\
    For this problem, you need to think about the problem as a pseudorandom number\
    \ generator. By doing that, you will end up with something that looks a lot like\
    \ what you are looking for.\nThe trick is to not use random numbers in the sense\
    \ of \"random\" as much ", "    $message = str_replace(\n        array(\"a\",\
    \ \"e\", \"i\", \"o\", \"u\", \"y\"),\n        array(\"A\", \"E\", \"I\", \"O\"\
    , \"U\", \"Y\"),\n        $message\n    );\n    $message = str_replace(\n    \
    \    array(\"b\", \"c\"),\n        array(\"B\", \"C\"),\n        $message\n  \
    \  );\n    $message = str_replace(\n        array(\"d\", \"f\", \"g\", \"h\",\
    \ \"k\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    ),\n        array(\"D\", \"F\", \"G\", \"H\", \"K\", \"M\", \"N\", \"P\", \"Q\"\
    , \"R\", \"S\", \"T\", \"V\", \"W\", \"X\"),\n        $message\n    );\n    $message\
    \ = str_replace(\n        array(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"k\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"),\n   \
    \     array(\"B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"K\", \"M\", \"N\", \"\
    P\", \"Q\", \"R\", \"S\", \"T\", \"V\", \"W\", \"X\"),\n        $message\n   \
    \ );\n    $message = str_replace(\n        array(\"e\", \"i\", \"o\", \"u\", \"\
    y\"),\n        array(\"E\", \"I\", \"O\", \"U\", \"Y\"),\n        $message\n \
    \   );\n    $message = str_replace(\n        array(\"j\", \"k\"),\n        array(\"\
    J\", \"K\"),\n        $message\n    );\n    $message = str_replace(\n        array(\"\
    l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"),\n\
    \        array(\"L\", \"M\", \"N\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"V\",\
    \ \"W\", \"X\"),\n        $message\n    );\n    $message = str_replace(\n    \
    \    array(\"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\"),\n        array(\"L\", \"M\", \"N\", \"P\", \"Q\", \"R\", \"S\", \"T\"\
    , \"V\", \"W\", \"X\"),\n        $message\n    );\n    $message = str_replace(\n\
    \        array(\"o\", \"u\", \"y\"),\n        array(\"O\", \"U\", \"Y\"),\n  \
    \      $message\n    );\n    $message = str_replace(\n        array(\"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\"),\n        array(\"R\", \"S\", \"T\", \"V\", \"\
    W\", \"X\"),\n        $message\n    );\n    $message = str_replace(\n        array(\"\
    s\", \"t\", \"v\", \"w\", \"x\"),\n        array(\"S\", \"T\", \"V\", \"W\", \"\
    X\"),\n        $message\n    );\n    $message = str_replace(\n        array(\"\
    t\", \"v\", \"w\", \"", "  $encoded = '';\n  for ($i = 0; $i < strlen($message);\
    \ $i++) {\n    $a = substr($message, $i, 1);\n    $vowels = 'aeiouAEIOU';\n  \
    \  $replacements = array(\n      'A' => 'a',\n      'E' => 'e',\n      'I' =>\
    \ 'i',\n      'O' => 'o',\n      'U' => 'u',\n    );\n    $encoded = '';\n   \
    \ foreach ($vowels as $vowel) {\n      if ($vowel === $a) {\n        $encoded\
    \ .= $replacements[$vowel];\n      }\n    }\n    $encoded .= $a;\n  }\n  return\
    \ $encoded;\n}\n</code>\nNote that this implementation only works on single characters.\
    \ If you want to do this on strings, you need to add support for that.\n<|/ a\
    \ tags=algorithm,php |>\n<| c |>\nThis is not the right answer. You will end up\
    \ with duplicate characters in your encoded string.\n<|/ c |>\n<| c |>\n- I added\
    \ code to handle this. This only works for single characters. If you want to do\
    \ this on strings, you need to add support for that.\n<|/ c |>\n<| c |>\nThe way\
    \ I read it, it doesn't solve the problem of vowel replacement, but rather just\
    \ swapping case of the letters.\n<|/ c |>\n<| c |>\n- Yes I read it wrong. Thanks\
    \ for the catch. Corrected now.\n<|/ c |>\n<| a |>\n<code>", "    $englishAlphabet\
    \ = range('a', 'z');\n    $vowels = range('a', 'z');\n    foreach (str_split($message)\
    \ as $letter) {\n        $replace = in_array($letter, $vowels) \n            ?\
    \ $englishAlphabet[$englishAlphabet[$letter] + 2]\n            : $englishAlphabet[$letter];\n\
    \        $message .= $replace;\n    }\n    return $message;\n}\n</code>\n<|/ a\
    \ dscore=2 tags=php,encryption |>\n<| c |>\nHow about \"This is a message\"?\n\
    <|/ c |>\n<| c |>\nYes, it fails. Should I add \"g\" to the list of vowels?\n\
    <|/ c |>\n<| c |>\n`This is a message` becomes `tHKS KS C MGSSCGG` - it works\
    \ with the added `g`. I don't think this deserved a downvote.\n<|/ c |>\n<| c\
    \ |>\nThanks for your response. I'm glad you were able to understand what I'm\
    \ trying to do. The reason I downvoted was because I didn't know what was going\
    \ on in my head.\n<|/ c |>\n<| c |>\n: I agree. There are many things to improve\
    \ here. Probably more than what's required. My main concern was about *understanding*\
    \ the question.\n<|/ c |>\n<| a dscore=1 |>\nA simple and straight forward method\
    \ is to use string functions :\n<code>\n$message=\"This is a message\";\n$message\
    \ = strtr($message, 'a' => 'z', 'e' => 'f', 'o' => 'u', 'u' => 'o', 'i' => 'o');\n\
    $message = strtr($message, 'a' => 'y', 'e' => 'c', 'o' => 'k', 'u' => 'j', 'i'\
    \ => 'k');\n$message = strtr($message, 'a' => 'y', 'e' => 'c', 'o' => 'k', 'u'\
    \ => 'j', 'i' => 'k');\n$message = strtr($message, 'a' => 'y', 'e' => 'c', 'o'\
    \ => 'k', 'u' => 'j', 'i' => 'k');\n$message = strtr($message, 'a' => 'y', 'e'\
    \ => 'c', 'o' => 'k', 'u' => 'j', 'i' => 'k');\n$message = strtr($message, 'a'\
    \ => 'y', 'e' => 'c', 'o' => 'k', 'u' => 'j', 'i' => 'k');\n$message = strtr($message,\
    \ 'a' => 'y', 'e' => 'c', 'o' => 'k', 'u' => 'j', 'i' => 'k');\n$message = strtr($message,\
    \ 'a' => 'y', 'e' => 'c', 'o' => 'k', 'u' => 'j', 'i' => 'k');\n$message = strtr($message,\
    \ 'a", "  $codes = array();\n  $message = $message . \"\";\n\n  foreach (str_split($message)\
    \ as $letter) {\n    $codes[] = $letter;\n  }\n\n  // Sort the codes.\n  sort($codes);\n\
    \n  // Find 2 letters ahead of current letter.\n  $a = 0;\n  while ($codes[$a]\
    \ === $codes[$a + 1]) {\n    $a++;\n  }\n\n  // Decode the codes.\n  $decoded\
    \ = \"\";\n  foreach (str_split($message) as $letter) {\n    $decoded .= ($codes[$a]\
    \ === $letter) ? $codes[$a++] : \"\";\n  }\n\n  return $decoded;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like the idea of using an array to store your codes,\
    \ and then looking up the letters. A little simpler than mine!\n<|/ c |>\n<| c\
    \ |>\n: Actually, I missed a loop to get the last letter in the string, added\
    \ now.\n<|/ c |>\n<| c |>\nAhhh, I see now. I completely overlooked that part.\
    \ Nice one.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$str = \"This is a message\"\
    ;\n\n$chars = array_flip(preg_split('//', $str)); // array_flip flips the keys\
    \ and values of a php array\nsort($chars);\narray_unshift($chars, $chars['a']);\n\
    $chars[$chars['a']] = 'a'; // 'a' is left out by array_flip\n\necho strtr($str,\
    \ $chars); // prints 'tHKS KS C MGSSCGG'\n</code>\n<|/ a tags=php,string,arrays\
    \ |>\n<| a |>\n<code>\n$str = \"This is a message\";\n\n$strArr = str_split($str);\n\
    $strArr = str_split($str);\nsort($strArr);\n$strArr = str_split($str);\narray_unshift($strArr,\
    \ 'a');\n$strArr = str_split($str);\n\n$str = implode('', $strArr);\n\necho $str;\n\
    </code>\n<|/ a tags=php,string,arrays dscore=0 |>\n<| a |>\nUse a regular expression\
    \ like this:\n<code>\n$message = \"This is a message\";\n\npreg_replace('/[a-z]{2}(\\\
    w)/i', '\\1', $message);\n</code>\n<|/ a tags=php,string,arrays dscore=0 |>\n\
    <| a |>\nYou can use preg_match_all and get the matches but ", "    // Step one:\
    \ Find all the letters\n    $letters = str_split($message);\n    foreach($letters\
    \ as &$letter) {\n        $letter = strtolower($letter);\n    }\n    unset($letter);\n\
    \    \n    // Step two: Find all the vowels and make them 2 places ahead of their\
    \ current letter\n    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"\
    );\n    $index = 0;\n    foreach($vowels as $vowel) {\n        $index++;\n   \
    \     if($index >= 2) {\n            unset($vowel);\n        }\n    }\n    \n\
    \    // Step three: Replace all vowels in the message with the letters that appear\
    \ 2 places ahead\n    foreach($letters as &$letter) {\n        $letter = $vowels[$letter\
    \ - $vowels[$index - 1]];\n    }\n    unset($letter);\n    \n    // Step four:\
    \ Recombine letters\n    return implode('', $letters);\n}", "    $alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\";\n    $vowels = \"aeiouy\";\n    $letters = str_split($message);\n\
    \    $encoded = '';\n    foreach($letters as $letter) {\n        $pos = strpos($alphabet,\
    \ $letter);\n        $encoded .= $alphabet[$pos + 2];\n    }\n    foreach(str_split($message)\
    \ as $letter) {\n        $pos = strpos($vowels, $letter);\n        $encoded .=\
    \ $alphabet[$pos + 1];\n    }\n    return $encoded;\n}\n", "    $message = '$'.$message;\n\
    \    $alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \    $newMessage = \"\";\n    $i = 0;\n    foreach($message as $character) {\n\
    \        $newMessage .= $alphabet[$i];\n        $newMessage .= $character;\n \
    \       $i++;\n    }\n    return $newMessage;\n}", "  $alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n  $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n  $message = strtr($message,\
    \ $vowels, $alphabet);\n  $message2 = \"\";\n  for ($i = 0; $i < strlen($message);\
    \ $i++) {\n    if ($message[$i] !== \"z\") {\n      $message2 .= substr($alphabet,\
    \ strpos($alphabet, $message[$i]) + 2);\n    }\n  }\n  return $message2;\n}\n",
  "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    \n    $message = preg_replace(\"\
    /([^aeiouAEIOU])/\", $vowels[$1], strtolower($message));\n    $message = preg_replace(\"\
    /([aeiou])([AEIOU])/\", \"$1$2\", $message);\n    \n    $letters = ['b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'z'];\n    $vowels = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $letters2 = ['e', 'f',\
    \ 'h', 'k', 'p', 'q', 'r', 't', 'y', 'u'];\n    $vowels2 = ['e', 'f', 'h', 'k',\
    \ 'p', 'q', 'r', 't', 'y', 'u'];\n    $letters3 = ['c', 'g', 'j', 'm'];\n    $vowels3\
    \ = ['c', 'g', 'j', 'm'];\n    $letters4 = ['b', 'e', 'h', 'n', 'r', 't'];\n \
    \   $vowels4 = ['b', 'e', 'h', 'n', 'r', 't'];\n    $letters5 = ['c', 'g', 'j',\
    \ 'm', 'p', 'q', 'u', 'x'];\n    $vowels5 = ['c', 'g', 'j', 'm', 'p', 'q', 'u',\
    \ 'x'];\n    $letters6 = ['b', 'e', 'h', 'n', 'r', 't', 'v', 'w', 'y'];\n    $vowels6\
    \ = ['b', 'e', 'h', 'n', 'r', 't', 'v', 'w', 'y'];\n    $letters7 = ['c', 'g',\
    \ 'j', 'm', 'p', 'q', 'r', 'u', 'x', 'y'];\n    $vowels7 = ['c', 'g', 'j', 'm',\
    \ 'p', 'q', 'r', 'u', 'x', 'y'];\n    $letters8 = ['a', 'g', 'h', 'j', 'm', 'p',\
    \ 't', 'r', 'u', 'x', 'y'];\n    $vowels8 = ['a', 'g', 'h', 'j', 'm', 'p', 't',\
    \ 'r', 'u', 'x', 'y'];\n    $letters9 = ['a', 'g', 'h', 'j', 'm', 'p', 't', 'r',\
    \ 'u', 'x', 'y', 'z'];\n    $vowels9 = ['a', 'g', 'h', 'j', 'm', 'p', 't', 'r',\
    \ 'u', 'x', 'y', 'z'];\n    \n    $message = $letters[$message[0]];\n    $message\
    \ = $letters2[$message[0]];\n    $message = $letters3[$message[0]];\n    $message\
    \ = $letters4[$message[0]];\n    $message = $letters5[$message[0]];\n    $message\
    \ = $letters6[$message[0]];\n    $message = $letters7[$message[0]];\n    $message\
    \ = $letters8[$message[0]];\n    $message", "    $code = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    $letters = str_split($message);\n    $encoded = \"\";\n    foreach ($letters\
    \ as $i => $letter) {\n        if (preg_match('/[aeiou]/', $letter)) {\n     \
    \       $encoded .= $code[$i + 2];\n        } else {\n            $encoded .=\
    \ $letter;\n        }\n    }\n    return $encoded;\n}\n$encoded = \"TGST\";",
  "    $vowels = \"aeiou\";\n    $encodedMessage = \"\";\n    for ($i = 0; $i < strlen($message);\
    \ $i++) {\n        $letter = $message[$i];\n        $encodedMessage .= $letter;\n\
    \        $encodedMessage .= $letter;\n    }\n    $vowelsFound = 0;\n    for ($i\
    \ = 0; $i < strlen($message); $i++) {\n        $letter = $message[$i];\n     \
    \   for ($j = $i+1; $j < strlen($message); $j++) {\n            $nextLetter =\
    \ $message[$j];\n            if (($letter == $nextLetter) && ($vowelsFound ==\
    \ 0)) {\n                $encodedMessage .= $letter;\n                $vowelsFound\
    \ = 1;\n            } elseif (($letter == $nextLetter) && ($vowelsFound == 1))\
    \ {\n                $encodedMessage .= $vowels[$vowelsFound];\n             \
    \   $vowelsFound = 2;\n            }\n        }\n    }\n    return $encodedMessage;\n\
    }\n</code>\n<|/ a tags=php,javascript,jquery,html,ajax |>\n<| c |>\nThank you\
    \ for providing me a solution :)\n<|/ c |>\n<| c |>\nCan you please tell me where\
    \ should i place the code? If i placed it in the php file as you told then it\
    \ throws the error undefined index: message and undefined index: letter in encode()\
    \ function\n<|/ c |>\n<| c |>\nYou should place the PHP code within the `encode()`\
    \ function. Then all you have to do is call `encode($_POST['message'])`\n<|/ c\
    \ |>\n<| c |>\nYou placed it within the PHP code or within a separate JS file?\n\
    <|/ c |>\n<| c |>\nIn a separate JS file, like `encode.js` then include it in\
    \ your HTML like `<script src=\"encode.js\"></script>`\n<|/ c |>\n<| a dscore=0\
    \ |>\nHere is the code that works for me as i wanted it to. I used the AJAX call\
    \ mentioned in the previous answer and wrote the following code in the PHP file\
    \ which was mentioned in the answer by\n<code>\n<?php", "  $message = strtolower($message);\n\
    \  $message = '' . str_replace(array('a', 'e', 'i', 'o', 'u'), '', $message);\n\
    \  $message = preg_replace('/[^a-z]/i', null, $message);\n  $vowels = array('a','e','i','o','u');\n\
    \  for ($i = 0; $i < count($message); $i++) {\n    $char = strtolower($message[$i]);\n\
    \    $vowel_pos = array_search($char, $vowels);\n    if ($vowel_pos !== false\
    \ && $i != $vowel_pos) {\n      array_splice($vowels, $vowel_pos, 2, $message[$i]);\n\
    \    }\n  }\n  return implode('', $message);\n}\n", "    if (empty($message))\
    \ {\n        return \"Empty message!\";\n    }\n    $message = strtolower($message);\n\
    \    $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    $vowels = \"aeiou\";\n   \
    \ $consonants = \"bcdfghjklmnpqrstvwxyz\";\n    $consonants_count = count($consonants);\n\
    \    $vowel_count = count($vowels);\n    $result = '';\n    $i = 0;\n    $length\
    \ = strlen($message);\n    while ($i < $length) {\n        $char = $message[$i];\n\
    \        if (isset($alphabet[$char])) {\n            $result += $alphabet[$char];\n\
    \            $i++;\n            continue;\n        }\n        $char = strtolower($char);\n\
    \        if (strpos($char, $vowels) !== FALSE) {\n            $char_position =\
    \ $i;\n            while ($i < $length && isset($alphabet[$message[$i]])) {\n\
    \                $i += 1;\n            }\n            $result += $alphabet[$char_position\
    \ + $consonants_count];\n            continue;\n        }\n        $result +=\
    \ $char;\n        $i += 1;\n    }\n    return $result;\n}\n", "    \n    // Get\
    \ vowel count of each letter\n    $vowels = array();\n    foreach (str_split($message)\
    \ as $letter) {\n        $vowels[$letter]++;\n    }\n\n    // Make replacements\n\
    \    $replacements = array();\n    foreach($vowels as $letter => $count) {\n \
    \       $replacements[$letter] = substr($letter, -1) . strtoupper($letter);\n\
    \    }\n    \n    return strtr($message, $replacements);\n}", "    if (strlen($message)\
    \ === 0) {\n        return $message;\n    }\n    $result = \"\";\n    $vowels\
    \ = \"aeiouAEIOU\";\n    $letters = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    for ($i = 0; $i < strlen($message); $i++) {\n        $letter = substr($message,\
    \ $i, 1);\n        if ($letter == $message[$i]) {\n            $result .= $letter;\n\
    \        } else {\n            $letter = substr($letter, 0, 2);\n            if\
    \ ($letter == \"z\") {\n                if ($i == 0) {\n                    $result\
    \ .= $letter;\n                }\n            }\n            $pos = strpos($vowels,\
    \ $letter);\n            if ($pos != false && $i == ($pos + 1)) {\n          \
    \      $result .= $letter;\n            } else {\n                if ($i == 0)\
    \ {\n                    $result .= $letter;\n                }\n            }\n\
    \        }\n    }\n    return $result;\n}", "    // code here\n}\n</cell>\n<cell>",
  "    $message = strtoupper($message);\n    $vowels = 'AEIOUaeiou';\n    return strtr($message,\
    \ $vowels, 'AEIOUaeiou');\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer,\
    \ I appreciate it. But I think you missed some parts of the question. First, I\
    \ am not allowed to use `strpos` to match any vowels. Second, you used `$message\
    \ = strtoupper($message)` which converts all letters to uppercase, but I specifically\
    \ said that only letters should go into the $message variable. Third, I also mentioned\
    \ that the only things you should be allowed to use are `isset` and `str_replace`,\
    \ although I did mention this in the question. Fourth, I really like the second\
    \ solution, and I'd prefer that over the first one. However, I really appreciate\
    \ your help on this! :)\n<|/ c |>\n<| c |>\n, I've updated my answer with more\
    \ information about how you could accomplish what you're trying to do.\n<|/ c\
    \ |>\n<| c |>\n, I've added an example of a solution that is more similar to your\
    \ original approach, but also accomplishes the same thing. Hope that helps.\n\
    <|/ c |>\n<| c |>\nThis is an awesome answer! It really helped me understand how\
    \ it works! Unfortunately, I can't use strpos. Thanks though, I really appreciate\
    \ it! :)\n<|/ c |>\n<| c |>\nNo problem. The only thing I see that might be an\
    \ issue is if the vowels are part of a word and the word is capitalized. You could\
    \ probably fix that by replacing `strtoupper($message)` with `ucfirst($message)`\
    \ if the case of the message is important.\n<|/ c |>\n<| a tags=php,lowercase,strpos,replace\
    \ dscore=1 |>\n<code>\n<?php", "    $vowels = 'aeiouy';\n    $len = strlen($message);\n\
    \    $output = '';\n    $i = 0;\n    while ($i < $len) {\n        $char = substr($message,\
    \ $i, 1);\n        $next = substr($message, $i + 1, 1);\n        $pos = strpos($vowels,\
    \ $next);\n        if ($pos === false) {\n            $output .= $char;\n    \
    \        $i += 1;\n        }\n        else {\n            $output .= $char;\n\
    \            $output .= substr($message, $pos, 1);\n            $i += 1;\n   \
    \     }\n    }\n    return $output;\n}\n", "    // Your code here!\n}\n", "  $res\
    \ = \"\";\n  for ($i = 0; $i < strlen($message); $i++) {\n    $ch = substr($message,\
    \ $i, 1);\n    if (ctype_upper($ch)) {\n      $res .= chr((ord($message[$i]) -\
    \ ord('A')) % 26 + ord('A'));\n    }\n  }\n  return $res;\n}\n", "    // Your\
    \ code here\n}", "    \n}\n", "    if (empty($message)) {\n        throw new Exception(\"\
    Invalid message\");\n    }\n    $vowels = array('a', 'e', 'i', 'o', 'u');\n  \
    \  $message = str_replace(\n        array_map(\n            function ($v) use\
    \ ($vowels) {\n                return strtr($v, $vowels, array('' => $v, 'A' =>\
    \ 'a'));\n            },\n            $vowels\n        ),\n        array_map(\n\
    \            function ($v) use ($vowels) {\n                return strtr($v, $vowels,\
    \ array('' => $v, 'A' => 'A'));\n            },\n            $vowels\n       \
    \ ),\n        $message\n    );\n\n    $length = strlen($message);\n    $result\
    \ = \"\";\n    for ($i = 0; $i < $length; $i++) {\n        $result .= $message[$i];\n\
    \        $c = $message[$i];\n        if (ctype_upper($c)) {\n            for ($x\
    \ = $i; $x <= $length - 1; $x++) {\n                if (ctype_upper($message[$x]))\
    \ {\n                    $result .= $message[$x + 1];\n                    break;\n\
    \                }\n            }\n        }\n    }\n\n    return $result;\n}\n",
  "    $newMessage = \"\";\n    $vowels = \"aeiouAEIOU\";\n    $letters = str_split($message);\n\
    \    foreach ($letters as $index => $letter) {\n        $newMessage .= $letter;\n\
    \        $newMessage .= (isset($letters[$index + 1])) ? $vowels[$index + 1] :\
    \ \"\";\n    }\n    return $newMessage;\n}\n", "  $encoded = \"\";\n\n  for ($i\
    \ = 0; $i < strlen($message); $i++) {\n    $encoded = $encoded . \n        strtoupper(\n\
    \            $message[$i] .\n            strtolower(\n                $message[($i\
    \ + 1)]));\n  }\n\n  return $encoded;\n}\n</code>\nThe second problem is actually\
    \ a little more involved. You were almost there. You just needed to do the same\
    \ thing as with the first problem, except you need the message to be encoded from\
    \ the other side. Basically, if you have a message \"abc\", and the first two\
    \ letters swap case, the next two letters swap case, the third letters swap case,\
    \ and the fourth letters swap case, you need to encode the rest of the message\
    \ in such a way that it has the same result. \nNow, if you think about it, you\
    \ just need to apply the same two rules that you did in the first case. If you\
    \ look at what happens to the first two letters, you see that the next two letters\
    \ swap case too. So just do that, and you will get the result you want:\n<code>",
  "  $retval = \"\";\n  for ($i = 0; $i < strlen($message); $i++) {\n    $char = substr($message,\
    \ $i, 1);\n    $retval = str_replace(\n      array(\n        'a',\n        'e',\n\
    \        'i',\n        'o',\n        'u',\n        'y'),\n      array(\n     \
    \   'A',\n        'E',\n        'I',\n        'O',\n        'U',\n        'Y'),\n\
    \      $retval);\n  }\n  return $retval;\n}", "  $message = strtolower($message);\n\
    \  $vowels = \"aeiou\";\n  $new_message = array();\n  $positions = array();\n\
    \  $length = strlen($message);\n\n  for ($i=0; $i<$length; $i++) {\n    $letter\
    \ = substr($message, $i, 1);\n    $new_message[$i] = $letter;\n    $positions[$i]\
    \ = $i;\n  }\n\n  for ($i=0; $i<$length; $i++) {\n    $letter = substr($message,\
    \ $i, 1);\n    $next = $i+1;\n    $found = false;\n    while (!$found) {\n   \
    \   if ($next < $length) {\n        $next_letter = substr($message, $next, 1);\n\
    \        $next_position = array_search($next_letter, $vowels);\n        if ($next_position\
    \ != false) {\n          $found = true;\n          $new_message[$i] = $letter;\n\
    \          $positions[$i] = $positions[$next_position];\n        }\n      }\n\
    \      else {\n        $found = true;\n        $new_message[$i] = $letter;\n \
    \     }\n    }\n  }\n\n  return implode('', $new_message);\n}", "    $letters\
    \ = array();\n    foreach(range('A', 'Z') as $letter) {\n        $letters[] =\
    \ $letter;\n    }\n    $vowels = array('a', 'e', 'i', 'o', 'u');\n    foreach($message\
    \ as $letter) {\n        $letterIndex = array_search($letter, $letters);\n   \
    \     $vowelIndex = array_search($letter, $vowels);\n        if ($letterIndex\
    \ && $vowelIndex) {\n            $letters[$letterIndex] = $letters[$vowelIndex];\n\
    \            $letters[$vowelIndex] = $letter;\n        } elseif ($letterIndex)\
    \ {\n            $letters[$letterIndex] = $letter;\n        } else {\n       \
    \     $letters[] = $letter;\n        }\n    }\n    return implode('', $letters);\n\
    }\n", "    \n    // Get the message into an array and sort the array by alphabet\n\
    \    $message = explode(\" \", $message);\n    sort($message);\n    \n    // Add\
    \ an empty string for spaces to be placed before each letter\n    for($i = 0;\
    \ $i < count($message); $i++) {\n        $message[$i] = $message[$i].\"\";\n \
    \   }\n    \n    // Replace the vowels with their 2 letter equivalents\n    for($i\
    \ = 0; $i < count($message); $i++) {\n        $message[$i] = str_replace(\n  \
    \          array(\n            'a', 'e', 'i', 'o', 'u',\n            'A', 'E',\
    \ 'I', 'O', 'U',\n            ),\n            array(\n            'a', 'e', 'i',\
    \ 'o', 'u',\n            'a', 'e', 'i', 'o', 'u',\n            ),\n          \
    \  $message[$i]\n        );\n    }\n    \n    // Return the new message\n    return\
    \ $message;\n}", "\t$message .= $message;\n\t$message = strtolower($message);\n\
    \t$vowels = \"aeiou\";\n\t$vowel_positions = array();\n\t$vowel_position = strlen($message);\n\
    \t\n\t// Loop through every vowel, creating an array of the position \n\t// of\
    \ every vowel. \n\tfor ($i = 0; $i < strlen($message); $i++) {\n\t\t$vowel_positions[$vowels{$message[$i]}]\
    \ = $i;\n\t}\n\t\n\t// Loop through each letter, checking if that letter is a\
    \ vowel\n\t// and swapping it with the letter that appears 2 places \n\t// ahead\
    \ of that vowel in the english alphabet. \n\tfor ($i = 0; $i < strlen($message);\
    \ $i++) {\n\t\t$letter = $message[$i];\n\t\tif (strpos($vowels, $letter) !== false)\
    \ {\n\t\t\t$letter = strtoupper($letter);\n\t\t\t$letter_position = $vowel_positions[$letter];\n\
    \t\t\t$position = $vowel_positions[strtoupper($message[$vowel_positions[$letter]])];\n\
    \t\t\t$message[$letter] = $message[$position];\n\t\t\t$message[$position] = $letter;\n\
    \t\t}\n\t}\n\treturn $message;\n}\n", "  $output = '';\n  foreach (str_split($message)\
    \ as $letter) {\n    $output .= $letter;\n    if ($letter != 'T') {\n      $output\
    \ .= strtoupper($letter);\n    }\n    if ($letter != 't') {\n      $output .=\
    \ strtolower($letter);\n    }\n  }\n  return $output;\n}\n", "    $alphabet =\
    \ array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\"\
    ,\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\"\
    ,\"z\");\n    $new = \"\";\n    foreach($message as $letter) {\n        $new =\
    \ str_replace($alphabet, \n            array(\n                \"a\" => \"a\"\
    ,\n                \"b\" => \"b\",\n                \"c\" => \"c\",\n        \
    \        \"d\" => \"d\",\n                \"e\" => \"e\",\n                \"\
    f\" => \"f\",\n                \"g\" => \"g\",\n                \"h\" => \"h\"\
    ,\n                \"i\" => \"i\",\n                \"j\" => \"j\",\n        \
    \        \"k\" => \"k\",\n                \"l\" => \"l\",\n                \"\
    m\" => \"m\",\n                \"n\" => \"n\",\n                \"o\" => \"o\"\
    ,\n                \"p\" => \"p\",\n                \"q\" => \"q\",\n        \
    \        \"r\" => \"r\",\n                \"s\" => \"s\",\n                \"\
    t\" => \"t\",\n                \"u\" => \"u\",\n                \"v\" => \"v\"\
    ,\n                \"w\" => \"w\",\n                \"x\" => \"x\",\n        \
    \        \"y\" => \"y\",\n                \"z\" => \"z\"\n            ), \n  \
    \          $new\n        );\n    }\n    return $new;\n}\n", "    $code = '';\n\
    \    $vowels = 'aeiouy';\n    $message1 = str_split($message);\n    for ($i =\
    \ 0; $i < count($message1); $i++) {\n        $letter = $message1[$i];\n      \
    \  if (in_array($letter, $vowels)) {\n            $code .= $letter;\n        }\
    \ else if ($i == 0) {\n            $code .= strtolower($letter);\n        } else\
    \ if ($i > 0 && $message1[$i - 1] == $letter) {\n            $code .= strtolower($letter);\n\
    \            $code .= $message1[$i - 1];\n        } else {\n            $code\
    \ .= strtolower($letter);\n            $code .= strtolower($message1[$i - 1]);\n\
    \        }\n    }\n    return $code;\n}\n", "  // TODO: Write your implementation\
    \ here\n}", "    $encodedMessage = \"\";\n    $vowels = \"aeiouAEIOU\";\n    $letters\
    \ = str_split($message);\n\n    foreach ($letters as $key => $letter) {\n    \
    \    $encodedLetter = strtolower($letter);\n        $encodedLetter = str_replace($vowels,\
    \ \"AEIOU\", $encodedLetter);\n\n        $encodedLetters = str_split($encodedLetter);\n\
    \        $encodedLetters[$key] = $letters[$key];\n        $encodedLetter = implode($encodedLetters,\
    \ \"\");\n\n        $encodedMessage .= $encodedLetter;\n    }\n\n    return $encodedMessage;\n\
    }\n</code>\n<|/ a tags=string,php,anagram dscore=1 |>\n<| a |>\n<code>\n<?php\n",
  "    $messageLength = strlen($message);\n    $codedMessage = array();\n    for ($i\
    \ = 0; $i < $messageLength; $i++) {\n        $codedMessage[$i] = chr(strtoupper(str_replace(\"\
    A\", \"a\", $message[$i])));\n    }\n    $codedMessage = implode('', $codedMessage);\n\
    \    for ($i = 1; $i < strlen($codedMessage); $i++) {\n        $codedMessage =\
    \ substr($codedMessage, 0, $i).strtoupper($codedMessage[$i]).substr($codedMessage,\
    \ $i);\n    }\n    return $codedMessage;\n}\n$code = encode($message);\necho \"\
    Encoded Message: $code\\n\";", "  $alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \  $letters = array('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z');\n\
    \  $vowels = array('e','i','o','u');\n\n  $num_vowels = count($vowels);\n  for($i\
    \ = 0; $i < strlen($message); $i++) {\n    $c = $message[$i];\n    $s = array();\n\
    \    $s = str_split($c);\n    for($j = 0; $j < count($s); $j++) {\n      $d =\
    \ $s[$j];\n      if(isset($alphabet[$d])) {\n        $pos = $alphabet.indexOf($d);\n\
    \        if($pos > 0 && $pos < $num_vowels) {\n          $toSwap = $vowels[$pos];\n\
    \          $s[$j] = $letters[$pos];\n          $s[$j] = $toSwap;\n        }\n\
    \      }\n    }\n    $message[$i] = implode($s);\n  }\n  return $message;\n}\n",
  "    $vowels = \"aeiouy\";\n    $count = str_word_count($message);\n    $result\
    \ = '';\n    for ($i = 0; $i < $count; $i++) {\n        $letter = strtolower(substr($message,\
    \ $i, 1));\n        if (in_array($letter, $vowels)) {\n            $result .=\
    \ $letter;\n            continue;\n        }\n        $letter = strtoupper($letter);\n\
    \        $nextLetter = strtoupper(substr($message, $i + 1, 1));\n        $result\
    \ .= $nextLetter;\n        $result .= $letter;\n    }\n    return $result;\n}\n\
    </code>\nHope this helps. :)\n<|/ a tags=php,encryption,caesar-cipher |>\n<| c\
    \ |>\nThanks Jason for answering. But this is not giving right answer. \nFor example:\
    \ \n>>> encode(\"test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n\"tHKS\
    \ KS C MGSSCGG\"\n<|/ c |>\n<| a |>\n<code>", "  $code = \"\";\n  $array = str_split($message);\n\
    \  $vowels = \"aeiou\";\n  $code = \"\";\n  for($i=0;$i<count($array);$i++) {\n\
    \    $code .= str_repeat($vowels,$array[$i]);\n  }\n  for($i=0;$i<count($array);$i++)\
    \ {\n    $code .= str_repeat($array[$i],2);\n  }\n  return $code;\n}", "    $encoded\
    \ = '';\n    foreach (str_split($message) as $char) {\n        $encoded = $char\
    \ . \n                    ((ord($char) - ord('A') + 2) % 26 . \n             \
    \        chr(ord('A') + ord($char) - ord('A') - 2) % 26);\n    }\n    return $encoded;\n\
    }", "    $new_message = \"\";\n    $vowels = \"aeiou\";\n    $letters = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    foreach ($message as $char) {\n        if (strpos($vowels, $char) !== false)\
    \ {\n            $new_message .= $char;\n            continue;\n        }\n  \
    \      $new_message .= $letters[strpos($letters, $char) + 2];\n    }\n    return\
    \ $new_message;\n}\n", "    // Your code here\n    $encodedMessage = \"\";\n\n\
    \    for ($i = 0; $i < strlen($message); $i++) {\n        $char = substr($message,\
    \ $i, 1);\n        $charIndex = strtolower($char);\n        switch ($charIndex)\
    \ {\n            case \"a\":\n                $encodedMessage .= \"a\";\n    \
    \            break;\n            case \"b\":\n                $encodedMessage\
    \ .= \"b\";\n                break;\n            case \"c\":\n               \
    \ $encodedMessage .= \"c\";\n                break;\n            case \"d\":\n\
    \                $encodedMessage .= \"d\";\n                break;\n         \
    \   case \"e\":\n                $encodedMessage .= \"e\";\n                break;\n\
    \            case \"f\":\n                $encodedMessage .= \"f\";\n        \
    \        break;\n            case \"g\":\n                $encodedMessage .= \"\
    g\";\n                break;\n            case \"h\":\n                $encodedMessage\
    \ .= \"h\";\n                break;\n            case \"i\":\n               \
    \ $encodedMessage .= \"i\";\n                break;\n            case \"j\":\n\
    \                $encodedMessage .= \"j\";\n                break;\n         \
    \   case \"k\":\n                $encodedMessage .= \"k\";\n                break;\n\
    \            case \"l\":\n                $encodedMessage .= \"l\";\n        \
    \        break;\n            case \"m\":\n                $encodedMessage .= \"\
    m\";\n                break;\n            case \"n\":\n                $encodedMessage\
    \ .= \"n\";\n                break;\n            case \"o\":\n               \
    \ $encodedMessage .= \"o\";\n                break;\n            case \"p\":\n\
    \                $encodedMessage .= \"p\";\n                break;\n         \
    \   case \"q\":\n                $encodedMessage .= \"q\";\n                break;\n\
    \            case \"r\":\n                $encodedMessage .= \"r\";\n        \
    \        break;\n            case \"s\":\n                $encodedMessage .= \"\
    s\";\n                break;\n            case \"t\":\n                $encodedMessage\
    \ .= \"t\";\n                break;\n            case \"u\":\n               \
    \ $encodedMessage .= \"u\";\n                break;\n            case \"v\":\n\
    \                $encodedMessage .= \"v\";\n                break;\n         \
    \   case \"x\":\n                $encodedMessage .= \"x\";\n                break;\n\
    \            case \"y\":\n                $encodedMessage .= \"y\";\n        \
    \        break;\n            case \"z\":\n                $encodedMessage .= \"\
    z\";\n                break;\n            default:\n                echo \"Something\
    \ went wrong!\";\n        }\n    }\n\n    return $encodedMessage;\n}\n", "   \
    \ $vowels = \"AEIOU\";\n    $messageLen = strlen($message);\n    $newMessage =\
    \ \"\";\n    for ($i = 0; $i < $messageLen; $i++) {\n        $letter = substr($message,\
    \ $i, 1);\n        $newLetter =\n        strtoupper(\n            str_replace($vowels,\
    \ '', $letter)\n        );\n        $newMessage .= $newLetter;\n    }\n    return\
    \ $newMessage;\n}\n", "    // your code here\n    $message = \"$message\";\n \
    \   $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    $vowels = \"aeiou\";\n  \
    \  $newMessage = \"\";\n\n    for($i=0; $i < strlen($message); $i++) {\n     \
    \   $newMessage .= $alphabet[$message[$i]];\n        if($i < strlen($message)\
    \ - 2) {\n            $newMessage .= $alphabet[$message[$i + 1]];\n        }\n\
    \        if($i < strlen($message) - 1) {\n            $newMessage .= $vowels[$message[$i\
    \ + 1]];\n        }\n    }\n\n    return $newMessage;\n}\n", "    $encoded = \"\
    \";\n    $vowels = \"aeiouy\";\n    foreach(str_split($message) as $letter) {\n\
    \        $encoded = str_replace($vowels, $letter.$letter.$vowels, $encoded);\n\
    \    }\n    return $encoded;\n}", "  $letters = str_split($message);\n  $encoded\
    \ = '';\n  foreach ($letters as $index => $letter) {\n    $letter = strtoupper($letter);\n\
    \    $pos = strrpos($letter, 'A');\n    if ($pos === false) $pos = 0;\n    $decoded\
    \ = substr($letter, 0, $pos);\n    $encoded = $encoded . $decoded;\n    $letter\
    \ = strtolower(substr($letter, $pos + 1));\n    $encoded = $encoded . $letter;\n\
    \  }\n  return $encoded;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,php\
    \ |>\nHere is my solution, hope it is useful.\n<code>\n$message = \"This is a\
    \ message\";\n\n$replacements = str_split($message);\n$new_message = \"\";\n$prev_letter\
    \ = '';\n\nfor ($i = 0; $i < count($replacements); $i++) {\n\n    if ($replacements[$i]\
    \ == 'a') {\n        $new_message .= strtoupper($prev_letter);\n        $prev_letter\
    \ = ' ';\n    } else {\n        $new_message .= $replacements[$i];\n    }\n\n\
    \    if ($replacements[$i] != 'a' && !in_array($replacements[$i], array('a', 'e',\
    \ 'i', 'o', 'u')) && $i + 1 < count($replacements)) {\n        $new_message .=\
    \ ' ';\n    }\n\n}\n\necho $new_message;\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Your code doesn't work when there is a vowel before an `a`. Also, `strtoupper`\
    \ doesn't do what the question asks for so this will fail in some cases (`\"I\"\
    ` becoming `\"A\"`).\n<|/ c |>\n<| c |>\nSorry I didn't notice that problem. I\
    \ fixed it now.\n<|/ c |>\n<| a tags=algorithm,php |>\nThis code will work for\
    \ any language and any length message and it will handle all ASCII characters\
    \ and any punctuation.\n<code>\n/**\n* Encodes a message into a format where each\
    \ character is \n* replaced with its ordinal number in that language.\n*\n* string\
    \ $message The message to encode\n* string $language The language to encode the\
    \ message in\n* string The encoded message\n*/", "  foreach($message as $letter)\
    \ {\n    $alpha_letters = range('a', 'z');\n    $vowels = range('aeiou', 'y');\n\
    \    $letter_array = str_split($letter);\n    \n    foreach($letter_array as $k\
    \ => $letter) {\n      if(in_array($letter, $alpha_letters)) {\n        $letter_array[$k]\
    \ = $letter;\n      }\n    }\n    $encoded = \"\";\n    foreach($letter_array\
    \ as $k => $letter) {\n      if(in_array($letter, $vowels)) {\n        $encoded\
    \ .= $letter;\n      } else {\n        $encoded .= strtoupper($letter);\n    \
    \  }\n    }\n    $message[$message] = $encoded;\n  }\n  \n  return $message;\n\
    }", "    $vowels = \"aeiou\";\n    $alphabet = \"bcdefghijklmnopqrstuvwxyz\";\n\
    \    $message = $message;\n    $output = \"\";\n    $i = 0;\n    while ($i < strlen($message))\
    \ {\n        $letter = $message[$i];\n        if ($letter != $message[$i]) {\n\
    \            $output = $output . $letter;\n            $i++;\n        } else if\
    \ (strpos($vowels, $letter)) {\n            $output = $output . $letter;\n   \
    \         $output = $output . $alphabet[strpos($alphabet, $letter) + 2];\n   \
    \         $i++;\n        }\n    }\n    return $output;\n}\n", "    $code = \"\"\
    ;\n    $code2 = \"\";\n    $code3 = \"\";\n    $code4 = \"\";\n    $code5 = \"\
    \";\n    $code6 = \"\";\n    $code7 = \"\";\n    $code8 = \"\";\n    $code9 =\
    \ \"\";\n    $code10 = \"\";\n    $code11 = \"\";\n    $code12 = \"\";\n    $code13\
    \ = \"\";\n    $code14 = \"\";\n    $code15 = \"\";\n    $code16 = \"\";\n   \
    \ $code17 = \"\";\n    $code18 = \"\";\n    $code19 = \"\";\n    $code20 = \"\"\
    ;\n    $code21 = \"\";\n    $code22 = \"\";\n    $code23 = \"\";\n    $code24\
    \ = \"\";\n    $code25 = \"\";\n    $code26 = \"\";\n    $code27 = \"\";\n   \
    \ $code28 = \"\";\n    $code29 = \"\";\n    $code30 = \"\";\n    $code31 = \"\"\
    ;\n    $code32 = \"\";\n    $code33 = \"\";\n    $code34 = \"\";\n    $code35\
    \ = \"\";\n    $code36 = \"\";\n    $code37 = \"\";\n    $code38 = \"\";\n   \
    \ $code39 = \"\";\n    $code40 = \"\";\n    $code41 = \"\";\n    $code42 = \"\"\
    ;\n    $code43 = \"\";\n    $code44 = \"\";\n    $code45 = \"\";\n    $code46\
    \ = \"\";\n    $code47 = \"\";\n    $code48 = \"\";\n    $code49 = \"\";\n   \
    \ $code50 = \"\";\n    $code51 = \"\";\n    $code52 = \"\";\n    $code53 = \"\"\
    ;\n    $code54 = \"\";\n    $code55 = \"\";\n    $code56 = \"\";\n    $code57\
    \ = \"\";\n    $code58 = \"\";\n    $code59 = \"\";\n    $code60 = \"\";\n   \
    \ $code61 = \"\";\n    $code62 = \"\";\n    $code63 = \"\";\n    $code64 = \"\"\
    ;\n    $code65 = \"\";\n    $code66 = \"\";\n    $code67 = \"\";\n    $code68\
    \ = \"\";\n    $code69 = \"\";\n    $code70 = \"\";\n    $code71 = \"\";\n   \
    \ $code72 = \"\";\n    $code73 = \"\";\n    $code74 = \"\";\n    $code75 = \"\"\
    ;\n    $code76 = \"\";\n    $code77 = \"\";\n    $code78 = \"\";\n    $code79\
    \ = \"\";\n    $code80 = \"\";\n    $code81 = \"\";\n    $code82 = \"\";\n   \
    \ $code83 = \"\";\n    $code84 = \"\";\n    $code85 = \"\";\n    $code86 = \"\"\
    ;\n    $code87 = \"\";\n    $code88 = \"\";\n    $code89 = \"\";\n    $code90\
    \ = \"\";\n    $code91 = \"\";\n    $code92 = \"\";\n    $code93 = \"\";\n   \
    \ $code94 = \"\";\n    $code95 = \"\";\n    $code96 = \"\";\n    $code97 = \"\"\
    ;\n    $code98", "    $vowels = \"AEIOU\";\n    $result = '';\n    $firstLetterIndex\
    \ = 1;\n    $vowelIndex = 2;\n    $lastLetterIndex = 1;\n    $length = strlen($message);\n\
    \    for ($i = 0; $i < $length; ++$i) {\n        $result .= substr($message, $i,\
    \ 1);\n        if ($i % 2 == 0) {\n            $firstLetterIndex = strpos($vowels,\
    \ substr($message, $i, 1));\n            if ($firstLetterIndex === false) {\n\
    \                $firstLetterIndex = 1;\n            }\n        } else {\n   \
    \         $lastLetterIndex = strpos($vowels, substr($message, $i, 1));\n     \
    \       if ($lastLetterIndex === false) {\n                $lastLetterIndex =\
    \ 1;\n            }\n        }\n        $result += $message[$firstLetterIndex\
    \ - 1] . $message[$lastLetterIndex - 1];\n    }\n    return $result;\n}\n</code>\n\
    <|/ a tags=algorithm,php,javascript dscore=1 |>\n<| c |>\nThe question is about\
    \ php not about how to do it in php. Your solution works only for english alphabet\
    \ and does not work for other languages. For example in Polish alphabet it is\
    \ `\u0142\u0105\u0107\u017A\u017C\u0144\u015B\u0104\u0106\u0179\u0143\u015A\u0118\
    \u0179\u0143\u015A\u0141`. And my solution is very similar to yours.\n<|/ c |>\n\
    <| c |>\nI never said anything about Polish alphabet.\n<|/ c |>\n<| c |>\nAnd\
    \ your solution gives wrong result for `\u0417\u0430 \u0434\u0438\u0430\u0433\u043E\
    \u043D\u0430\u043B\u0438` - it gives `OZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZDZD",
  "  $message = str_replace(['A', 'a', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F',\
    \ 'f', 'G', 'g', 'H', 'h', 'I', 'i', 'J', 'j', 'K', 'k', 'L', 'l', 'M', 'm', 'N',\
    \ 'n', 'O', 'o', 'P', 'p', 'Q', 'q', 'R', 'r', 'S', 's', 'T', 't', 'U', 'u', 'V',\
    \ 'v', 'W', 'w', 'X', 'x', 'Y', 'y', 'Z', 'z', 'a', 'A', 'a', 'B', 'b', 'C', 'c',\
    \ 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I', 'i', 'J', 'j', 'K', 'k',\
    \ 'L', 'l', 'M', 'm', 'N', 'n', 'O', 'o', 'P', 'p', 'Q', 'q', 'R', 'r', 'S', 's',\
    \ 'T', 't', 'U', 'u', 'V', 'v', 'W', 'w', 'X', 'x', 'Y', 'y', 'Z', 'z'], array('A',\
    \ 'a', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I',\
    \ 'i', 'J', 'j', 'K', 'k', 'L', 'l', 'M', 'm', 'N', 'n', 'O', 'o', 'P', 'p', 'Q',\
    \ 'q', 'R', 'r', 'S', 's', 'T', 't', 'U', 'u', 'V', 'v', 'W', 'w', 'X', 'x', 'Y',\
    \ 'y', 'Z', 'z'), $message);\n  $message = str_replace(['O', 'o', 'U', 'u'], array('O',\
    \ 'o', 'U', 'u'), $message);\n  $message = str_replace(['a', 'A'], array('a',\
    \ 'A'), $message);\n  $message = str_replace(['e', 'E'], array('e', 'E'), $message);\n\
    \  $message = str_replace(['i', 'I'], array('i', 'I'), $message);\n  $message\
    \ = str_replace(['o', 'O'], array('o', 'O'), $message);\n  $message = str_replace(['u',\
    \ 'U'], array('u', 'U'), $message);\n  $message = str_replace(['h', 'H'], array('h',\
    \ 'H'), $message);\n  $message = str_replace(['s', 'S'], array('s', 'S'), $message);\n\
    \  $message = str_replace(['e'], array('E'), $message);\n  $message = str_replace(['l'],\
    \ array('l'), $message);\n  $message = str_replace(['k', 'K'], array('k', 'K'),\
    \ $message);\n  $message = str_replace(['m', 'M'], array('m', 'M'), $message);\n\
    \  $message = str_replace(['o'], array('O'), $message);\n  $message = str_replace(['p'],\
    \ array('p'), $message);\n  $message = str_replace(['q', 'Q'], array('q', 'Q'),\
    \ $message);\n  $message = str_replace(['r', 'R'], ", "    $alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    $vowels = \"AEIOUY\";\n\n    // Step 1: Convert all letters to lowercase\n\
    \    $message = strtolower($message);\n\n    // Step 2: Find all vowels\n    $vowelIndices\
    \ = preg_match_all(\"/[\" . $vowels . \"]/\", $message);\n\n    // Step 3: Scan\
    \ through the message and make substitutions\n    for ($i = 0; $i < strlen($message);\
    \ $i++) {\n        $letter = substr($message, $i, 1);\n        if ($vowelIndices\
    \ > 0) {\n            $position = $vowelIndices - 1;\n        } else {\n     \
    \       $position = 0;\n        }\n        $replace = $alphabet[$position];\n\
    \        $message .= substr($replace, 0, 1) . $letter . substr($replace, 1);\n\
    \    }\n    return $message;\n}\n", "    $alphabet = range('a', 'z');\n    $vowels\
    \ = range('a', 'e', 'i', 'o', 'u');\n    $consonants = range('b', 'd', 'f', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'y', 'z');\n   \
    \ $replacements = array_combine($vowels, array_fill(0, count($vowels), \"_\"));\n\
    \    $replacements[] = array_combine($consonants, array_fill(0, count($consonants),\
    \ \"_\"));\n    $message = str_split($message);\n    foreach ($message as $index\
    \ => $letter) {\n        $message[$index] = $letter;\n    }\n    foreach ($message\
    \ as $index => $letter) {\n        $message[$index] = $replacements[$letter];\n\
    \    }\n    $message = implode('', $message);\n    return strtoupper($message);\n\
    }", "    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    $output = $message;\n\
    \    for($i=0; $i<strlen($message); $i++) {\n        $c = $message[$i];\n    \
    \    $firstLetter = substr($alphabet, 0, $i);\n        $secondLetter = substr($alphabet,\
    \ $i+1);\n        $output[$i] = $firstLetter[(strpos($alphabet, $c) + strpos($alphabet,\
    \ $secondLetter) - strpos($alphabet, $c)%strlen($secondLetter))%strlen($firstLetter)];\n\
    \    }\n    return $output;\n}", "    $map = [\"A\" => \"t\", \"B\" => \"h\",\
    \ \"C\" => \"k\", \"D\" => \"g\", \"E\" => \"s\", \"F\" => \"s\", \"G\" => \"\
    g\", \"H\" => \"k\", \"I\" => \"i\", \"J\" => \"j\", \"K\" => \"c\", \"L\" =>\
    \ \"l\", \"M\" => \"m\", \"N\" => \"n\", \"O\" => \"o\", \"P\" => \"p\", \"Q\"\
    \ => \"q\", \"R\" => \"r\", \"S\" => \"s\", \"T\" => \"t\", \"U\" => \"u\", \"\
    V\" => \"v\", \"W\" => \"w\", \"X\" => \"x\", \"Y\" => \"y\", \"Z\" => \"z\",\
    \ \"a\" => \"t\", \"b\" => \"h\", \"c\" => \"k\", \"d\" => \"g\", \"e\" => \"\
    s\", \"f\" => \"s\", \"g\" => \"g\", \"h\" => \"k\", \"i\" => \"i\", \"j\" =>\
    \ \"j\", \"k\" => \"c\", \"l\" => \"l\", \"m\" => \"m\", \"n\" => \"n\", \"o\"\
    \ => \"o\", \"p\" => \"p\", \"q\" => \"q\", \"r\" => \"r\", \"s\" => \"s\", \"\
    t\" => \"t\", \"u\" => \"u\", \"v\" => \"v\", \"w\" => \"w\", \"x\" => \"x\",\
    \ \"y\" => \"y\", \"z\" => \"z\"];\n\n    return strtr($message, array_combine(array_keys($map),\
    \ array_map(\"strtoupper\", $map)));\n}\n", "\t$vowels = \"AEIOUYaeiouy\";\n\t\
    $result = \"\";\n\tfor ($i = 0; $i < strlen($message); $i++) {\n\t\t$letter =\
    \ $message[$i];\n\t\t$replacement = strtoupper($letter);\n\t\t$replacementIndex\
    \ = ($i + 1) % strlen($vowels);\n\t\t$replacementLetter = $vowels[$replacementIndex];\n\
    \t\t$result .= $letter . $replacementLetter;\n\t}\n\treturn $result;\n}", "  return\
    \ strtr(\n    strtolower($message), \n    array(\"a\"=>\"2\", \"b\"=>\"3\", \"\
    c\"=>\"4\", \"d\"=>\"5\", \"e\"=>\"6\", \"f\"=>\"7\", \"g\"=>\"8\", \"h\"=>\"\
    9\",\n          \"i\"=>\"10\", \"j\"=>\"11\", \"k\"=>\"12\", \"l\"=>\"13\", \"\
    m\"=>\"14\", \"n\"=>\"15\", \"o\"=>\"16\", \"p\"=>\"17\",\n          \"q\"=>\"\
    18\", \"r\"=>\"19\", \"s\"=>\"20\", \"t\"=>\"21\", \"u\"=>\"22\", \"v\"=>\"23\"\
    , \"w\"=>\"24\", \"x\"=>\"25\",\n          \"y\"=>\"26\", \"z\"=>\"27\", \"aa\"\
    =>\"28\", \"ab\"=>\"29\", \"ac\"=>\"30\", \"ad\"=>\"31\", \"ae\"=>\"32\", \"af\"\
    =>\"33\",\n          \"ag\"=>\"34\", \"ah\"=>\"35\", \"ai\"=>\"36\", \"aj\"=>\"\
    37\", \"ak\"=>\"38\", \"al\"=>\"39\", \"am\"=>\"40\", \"an\"=>\"41\",\n      \
    \    \"ao\"=>\"42\", \"ap\"=>\"43\", \"aq\"=>\"44\", \"ar\"=>\"45\", \"as\"=>\"\
    46\", \"at\"=>\"47\", \"au\"=>\"48\", \"av\"=>\"49\",\n          \"aw\"=>\"50\"\
    , \"ax\"=>\"51\", \"ay\"=>\"52\", \"az\"=>\"53\", \"ba\"=>\"54\", \"bb\"=>\"55\"\
    , \"bc\"=>\"56\", \"bd\"=>\"57\",\n          \"be\"=>\"58\", \"bf\"=>\"59\", \"\
    bg\"=>\"60\", \"bh\"=>\"61\", \"bi\"=>\"62\", \"bj\"=>\"63\", \"bk\"=>\"64\",\
    \ \"bl\"=>\"65\",\n          \"bm\"=>\"66\", \"bn\"=>\"67\", \"bo\"=>\"68\", \"\
    bp\"=>\"69\", \"bq\"=>\"70\", \"br\"=>\"71\", \"bs\"=>\"72\", \"bt\"=>\"73\",\n\
    \          \"bu\"=>\"74\", \"bv\"=>\"75\", \"bw\"=>\"76\", \"bx\"=>\"77\", \"\
    by\"=>\"78\", \"bz\"=>\"79\", \"ca\"=>\"80\", \"cb\"=>\"81\",\n          \"cc\"\
    =>\"82\", \"cd\"=>\"83\", \"ce\"=>\"84\", \"cf\"=>\"85\", \"cg\"=>\"86\", \"ch\"\
    =>\"87\", \"ci\"=>\"88\", \"cj\"=>\"89\",\n          \"ck\"=>\"90\", \"cl\"=>\"\
    91\", \"cm\"=>\"92\", \"cn\"=>\"93\", \"co\"=>\"94\", \"cp\"=>\"95\", \"cq\"=>\"\
    96\", \"cr\"=>\"97\",\n          \"cs\"=>\"98", "    $message = $message . ' '\
    \ . strtolower($message);\n    return strtoupper(preg_replace_callback('/(\\w)(\\\
    w)/', function ($matches) {\n        // Convert both groups to lowercase and swap\
    \ their case \n        // to match with the english alphabet\n        // We need\
    \ this so we swap the case in both groups \n        $first = strtolower($matches[1]);\n\
    \        $second = strtolower($matches[2]);\n        // If first and second are\
    \ the same, return the original \n        // group so we don't swap anything else.\n\
    \        if ($first == $second) {\n            return $matches[0];\n        }\n\
    \        return $second . $first;\n    }, $message));\n}\n</code>\n<|/ a tags=php,encode\
    \ |>\n<| a tags=php,encode |>\nThis function should do the trick for you:\n<code>",
  "    // Your code here\n    $newstring=\"\";\n    for($i=0;$i<strlen($message);$i++){\n\
    \        if($message[$i]==\"a\" || $message[$i]==\"e\" || $message[$i]==\"i\"\
    \ || $message[$i]==\"o\" || $message[$i]==\"u\" || $message[$i]==\"A\" || $message[$i]==\"\
    E\" || $message[$i]==\"I\" || $message[$i]==\"O\" || $message[$i]==\"U\"){\n \
    \           $newstring.=strtoupper($message[$i]);\n        }\n        else{\n\
    \            $newstring.=strtolower($message[$i]);\n        }\n    }\n    return\
    \ $newstring;\n}\n", "    $new_message = \"\";\n    $vowels = \"aeiouy\";\n  \
    \  for ($i = 0; $i < strlen($message); $i++) {\n        $char = strtoupper($message[$i]);\n\
    \        $new_message .= $char;\n        $current_vowel = $vowels[$i];\n     \
    \   $two_places_ahead = $vowels[$i + 1];\n        $two_places_behind = $vowels[$i\
    \ - 1];\n        $new_message .= $two_places_ahead.$two_places_behind.$current_vowel;\n\
    \    }\n    return $new_message;\n}\n", "  global $vowels;\n  $message = preg_replace('/[^a-zA-Z]/',\
    \ '', $message); \n  $encoded = '';\n  foreach(str_split($message) as $letter)\
    \ {\n    if ($letter === $letter.toLowerCase()) {\n      $encoded .= $letter;\n\
    \      continue;\n    }\n    if ($vowels[$letter] === true) {\n      $letter =\
    \ $vowels[$letter];\n    }\n    $letter = strtoupper($letter);\n    $encoded .=\
    \ $vowels[$letter];\n  }\n  return $encoded;\n}\n</code>\nAnd in case you'd like\
    \ to see more in action: http://phpfiddle.org/main/code/k5g-fhx\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't seem to work :/ http://phpfiddle.org/main/code/k5g-djp\
    \ \nI guess I'm missing something?\n<|/ c |>\n<| c |>\n: I forgot about that first\
    \ vowel is supposed to be uppercase. Try the new one: http://phpfiddle.org/main/code/k5g-dmr\n\
    <|/ c |>\n<| c |>\nWorks perfectly now, thank you so much :D\n<|/ c |>\n<| a |>\n\
    This worked for me :\n<code>\n<?php\n    $message = \"This is my message\";\n\
    \    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n    $message = preg_replace('/[^a-zA-Z]/',\
    \ '', $message); \n\n    foreach(str_split($message) as $letter) {\n        if\
    \ ($letter === $letter.toLowerCase()) {\n            $encoded .= $letter;\n  \
    \          continue;\n        }\n        if ($letter == $letter) {\n         \
    \   $encoded .= $letter;\n        }\n        else {\n            $letter = strtoupper($letter);\n\
    \            $letter = str_replace($vowels, '', $letter);\n            $letter\
    \ = strtoupper($letter);\n            $encoded .= $vowels[$letter];\n        }\n\
    \    }\n    echo $encoded;", "  return preg_replace_callback('/./u', function($m)\
    \ { \n    return strtoupper(substr($m, 0, 1) . $m[1]); \n  }, strtoupper(preg_replace_callback('/[aeiou]/u',\
    \ function($m) { \n    return substr($m, 1, 2) . $m[0]; \n  }, $message)));\n\
    }\n</code>\nThis solution assumes that your PHP version supports the /u modifier.\n\
    <|/ a dscore=0 |>\n<| a dscore=0 tags=php,encoding |>\nI implemented an easy way\
    \ to do this without any regex, with more readable code, here it is:\n<code>\n\
    $chars = str_split(\"abcdefghijklmnopqrstuvwxyz\");\n$chars[6] = \"a\";\n$chars[7]\
    \ = \"e\";\n$chars[8] = \"i\";\n$chars[9] = \"o\";\n$chars[10] = \"u\";\n$chars[11]\
    \ = \"y\";\n$chars[12] = \"y\";\n$chars[13] = \"a\";\n$chars[14] = \"i\";\n$chars[15]\
    \ = \"o\";\n$chars[16] = \"o\";\n$chars[17] = \"y\";\n$chars[18] = \"y\";\n\n\
    $message = \"aa bb cc dd ee\";\n\n$new_message = str_split($message);\n$first_letter\
    \ = current($new_message);\n\n$length = strlen($new_message);\n\nfor($i = 1; $i\
    \ < $length; $i++) {\n    $first_letter = $first_letter . $chars[$first_letter\
    \ === $chars[$i] ? str_replace(array('a','e','i','o','u','y'), array('1','2','3','4','5','6'),\
    \ $new_message[$i]) : $new_message[$i]];\n}\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\n<code>", "    $letters = str_split($message);\n    $length = count($letters);\n\
    \    for($i = 0; $i < $length; $i++) {\n        if(!ctype_upper($letters[$i]))\
    \ {\n            return $message;\n        }\n    }\n    $message = '';\n    for($i\
    \ = 0; $i < $length; $i++) {\n        $message .= $letters[$i];\n        if($i\
    \ == $length - 1) {\n            $message .= strtoupper(substr($letters[$i], 2));\n\
    \        } elseif($i == $length - 2) {\n            $message .= strtolower(substr($letters[$i],\
    \ 2));\n        } else {\n            $message .= substr($letters[$i], 2);\n \
    \       }\n    }\n    return $message;\n}\n", "    $vowels = \"aeiouy\";\n   \
    \ $consonants = \"bcdfghjklmnpqrstvwxyz\";\n    $vowelIndex = 0;\n    $newMessage\
    \ = \"\";\n    $messageLength = strlen($message);\n    for ($i = 0; $i < $messageLength;\
    \ $i++) {\n        // $vowelIndex is incremented only when a vowel is found.\n\
    \        if (strpos($vowels, $message[$i]) !== FALSE) {\n            $letter =\
    \ strtoupper($consonants[$vowelIndex]);\n            for ($j = $i; $j < $messageLength;\
    \ $j++) {\n                // The first $j letters are already swapped, so \n\
    \                // the position of $j is $i - $vowelIndex.\n                if\
    \ ($message[$j] !== $letter) {\n                    $newMessage .= $letter;\n\
    \                }\n            }\n            $vowelIndex++;\n        }\n   \
    \     else {\n            $newMessage .= $message[$i];\n        }\n    }\n   \
    \ return $newMessage;\n}\n</code>\n<|/ a dscore=4 tags=javascript,php,algorithm,python\
    \ |>\n<| c |>\nThank you so much, this is exactly what I was looking for. I'm\
    \ going to implement this right away.\n<|/ c |>\n<| c |>\nThis was very helpful\
    \ because I could not find a PHP function to do the same.\n<|/ c |>\n<| c |>\n\
    Hi , I am looking for a similar solution, I have tried to modify this code for\
    \ my situation. Can you please have a look at my question. Thanks\n<|/ c |>\n\
    <| c |>\n: If you have another question, you should probably ask a new question.\
    \ Comments aren't really suitable place for this.\n<|/ c |>\n<| c |>\nHi , I have\
    \ asked a question: http://stackoverflow.com/questions/41917678/how-to-optimize-this-algorithm-to-find-the-word-position-in-the-string-with-a\n\
    <|/ c |>\n<| a |>\nJust wanted to offer another solution, using Python's regex\
    \ library. This method requires no looping and it can be very fast and doesn't\
    \ involve any kind of string slicing. It also doesn't require any fancy string\
    \ manipulation or checking for upper/lower case. \n<code>\n>>> import re\n>>>\
    \ from string import ascii_uppercase, ascii_lowercase\n>>> regex = re.compile(\"\
    ([\" + re.escape(ascii_lowercase) + \"]+)([\"+ re.escape(ascii_uppercase) +\"\
    -\"+re.escape(ascii_lowercase)+\"]*)(\" + re.escape(ascii_lowercase) + \")*$\"\
    )\n>>> regex.match('aaa').group()\n'aaa'", "    $map = array();\n    for($i =\
    \ 0; $i < strlen($message); $i++) {\n        $map[strtolower($message[$i])] =\
    \ strtoupper($message[$i]);\n    }\n    $out = '';\n    foreach($map as $key=>$val)\
    \ {\n        $out .= $key.($val==$key?$val:$val);\n    }\n    return $out;\n}\n",
  "    $english_alphabet = array('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z');\n\
    \    $encoded_message = \"\";\n    $vowels = array('a', 'e', 'i', 'o', 'u');\n\
    \    $num_vowels = 0;\n    for($i = 0; $i < strlen($message); $i++) {\n      \
    \  if($message[$i] == \" \") {\n            $encoded_message .= \" \";\n     \
    \   }\n        if($message[$i] != \"H\") {\n            $num_vowels++;\n     \
    \   }\n        for($j = 0; $j < $num_vowels; $j++) {\n            if($message[$i]\
    \ == $vowels[$j]) {\n                $encoded_message .= $english_alphabet[$j\
    \ + 1];\n                $num_vowels--;\n            }\n        }\n    }\n   \
    \ return $encoded_message;\n}\n</code>\n<|/ a tags=php,algorithm,string |>\n<|\
    \ a tags=php,algorithm,string |>\nHere is a javascript code that can solve this\
    \ question:\n\n<code>", "  $result = \"\";\n  $letters = str_split($message);\n\
    \  foreach ($letters as $letter) {\n    if ($letter == str_repeat($letter, 2))\
    \ {\n      $result .= substr($letter, 1);\n    } else {\n      $result .= str_repeat($letter,\
    \ strlen($letter) - 1);\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=algorithm,java |>\nHere is a Java implementation that works. \
    \ \n<code>\npublic class Test {\n  public static void main(String[] args) {\n\
    \    System.out.println(encode(\"This is a message\"));\n    System.out.println(encode(\"\
    test\"));\n    System.out.println(encode(\"ABC\"));\n  }\n\n  static String encode(String\
    \ message) {\n    if (message.length() < 3) {\n      return message;\n    }\n\n\
    \    char[] letters = message.toCharArray();\n    int length = letters.length;\n\
    \    StringBuilder sb = new StringBuilder();\n\n    boolean inVowel = false;\n\
    \    for (int i = 0; i < length; i++) {\n      char letter = letters[i];\n   \
    \   if (Character.isLetter(letter)) {\n        if (i < length - 1 && (Character.isLetter(letters[++i])\
    \ || Character.isLetter(letters[i - 1]))) {\n          sb.append(letter);\n  \
    \        inVowel = true;\n        } else if (i > 0 && i < length - 1 && !inVowel\
    \ && Character.isLetter(letters[i - 1])) {\n          sb.append(letter);\n   \
    \       inVowel = false;\n        } else {\n          sb.append(letter);\n   \
    \       inVowel = false;\n        }\n      }\n    }\n    return sb.toString();\n\
    \  }\n}\n</code>\nOutput\n<code>\nTGST\nTGST\nCGG\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThe OP's code swaps case, but not vowels.\n<|/ c |>\n<| c |>\nMy mistake.\
    \  I fixed my answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n    public class SwapCases\n\
    \    {\n    public static void main(String[] args)\n    {\n        String str=\"\
    Test String\";\n        System.out.println(reverse(str));\n    }\n\n    public\
    \ static String reverse(String str){\n    StringBuilder sb=new StringBuilder(str.length());\n\
    \    boolean isVowel=false;\n    for(int i=0;i<str.length();i++){\n        char\
    \ c=str.charAt(i);\n        switch(c){\n            case 'a':\n            case\
    \ 'e':\n            case 'i':\n            case 'o':\n            case 'u':\n\
    \            case 'y':\n            case 'A':\n            case 'E':\n       \
    \     case 'I':\n            case 'O':\n            case '", "    // Write your\
    \ code here\n}", "  $encoded_message = '';\n  $vowels = 'aeiou';\n\n  foreach(str_split($message)\
    \ as $letter) {\n    foreach(str_split($letter) as $place) {\n      if(!strpos($vowels,\
    \ $place)) {\n        $encoded_message .= $place;\n      }\n    }\n    $encoded_message\
    \ .= $letter;\n  }\n  return $encoded_message;\n}", "    $code = '';\n    $max\
    \ = 0;\n    for ($i = 0; $i < strlen($message); $i++) {\n        $char = strtoupper($message[$i]);\n\
    \        $code = str_replace($char, '', $code);\n        $max = max($max, strlen($code));\n\
    \        $code = str_replace($char, $char, str_pad($code, $max, $char));\n   \
    \ }\n    return $code;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nI got this error\
    \ with your code: Warning: str_pad() [function.str-pad]: Cannot find an overload\
    \ for \"H\" compatible with expected argument types in /Applications/MAMP/htdocs/practice/practice/encode.php\
    \ on line 23\n<|/ c |>\n<| c |>\nI used $code = \"H\";\n<|/ c |>\n<| c |>\n, I\
    \ have posted an updated answer with some working code. The key was the replacement\
    \ of `$char` with the character that appears 2 places ahead of it.\n<|/ c |>\n\
    <| c |>\n, thanks, I updated my answer to show you the full code from the working\
    \ function\n<|/ c |>\n<| a tags=php |>\nThis version will work on Unicode (even\
    \ with extended characters)\n<code>\n<?php", "    $out = '';\n    $letters = str_split($message);\n\
    \    foreach ($letters as $letter) {\n        $c = $letter;\n        $l = strtolower($letter);\n\
    \        if ($l == $c) {\n            $l++;\n            $c = $l;\n        }\n\
    \        $count = preg_match('/[aeiou]/', $l) ? 2 : 1;\n        $out .= $c . $count\
    \ * chr((int) $l);\n    }\n    return $out;\n}\n", "    $vowels = \"aeiou\";\n\
    \    $alpha = \"abcdefghijklmnopqrstuvwxyz\";\n    $result = \"\";\n    $len =\
    \ strlen($message);\n    for($i = 0; $i < $len; $i++) {\n        $char = substr($message,\
    \ $i, 1);\n        $nextChar = substr($message, $i+1, 1);\n        $result2 .=\
    \ ($char == $nextChar) ? $char :\n            preg_replace_callback('/['.preg_quote($vowels,\
    \ '/').']/', function($m) use($char, $alpha) {\n                return $alpha[$alpha{$m[0]}];\n\
    \            }, $char);\n        $result .= $result2;\n    }\n    return $result;\n\
    }", "    $message = str_replace(\n        [\"a\", \"e\", \"i\", \"o\", \"u\"],\n\
    \        [\"A\", \"E\", \"I\", \"O\", \"U\"], \n        $message);\n    return\
    \ implode(\n        \"\",\n        array_map(function($char) {\n            return\
    \ chr(ord($char) + 2);\n        }, \n        preg_replace_callback(\"/([aeiou])/\"\
    , function($matches) {\n            return strtoupper($matches[1]);\n        },\
    \ $message)));\n}\n", "    for($i=0; $i<strlen($message); $i++) {\n        $message[$i]\
    \ = strtoupper($message[$i]);\n    }\n\n    for($i=0; $i<strlen($message); $i++)\
    \ {\n        for($j=0; $j<26; $j++) {\n            $message[$i] = strtr($message[$i],\
    \ \n                array(\"a\"=>\"b\", \"e\"=>\"f\", \"i\"=>\"g\", \"o\"=>\"\
    h\", \"u\"=>\"j\", \"y\"=>\"k\", \"y\"=>\"l\", \"a\"=>\"m\", \"e\"=>\"p\", \"\
    i\"=>\"q\", \"o\"=>\"r\", \"u\"=>\"s\", \"y\"=>\"t\"));\n        }\n    }\n\n\
    \    return $message;\n}\n", "  return strtr($message, \n    'abcdefghijklmnopqrstuvwxyz'\
    \  => 'tgst',\n    'AEIOUaeiouAEIOU' => 'tHKS',\n    'aeiouAEIOUaeiouAEIOU' =>\
    \ 'kS',\n    'aeiouAEIOUaeiouAEIOU' => 'c',\n    'aeiouAEIOUaeiouAEIOU' => 'mgsscgg');\n\
    }\n", "  $encoded = \"\";\n  for ($i = 0; $i < strlen($message); $i++) {\n   \
    \ // if $i is even, swap case for all letters in $message\n    if ($i & 1) {\n\
    \      for ($j=0; $j < strlen($message); $j++) {\n        // if $j is odd, swap\
    \ case\n        if ($j & 1) {\n          $encoded = strtr($message, $i, $j);\n\
    \          break;\n        }\n      }\n    }\n    // if $i is odd, swap case for\
    \ letters in $message\n    else {\n      for ($j=0; $j < strlen($message); $j++)\
    \ {\n        // if $j is even, swap case\n        if ($j & 1) {\n          $encoded\
    \ = strtr($message, $i, $j);\n          break;\n        }\n      }\n    }\n  }\n\
    \  return $encoded;\n}\n", "  $messageArray = str_split($message);\n  $encodedMessage\
    \ = '';\n  for($i=0; $i<count($messageArray); $i++) {\n    $letter = $messageArray[$i];\n\
    \    if ($letter>='a' && $letter<='z')\n      $letter = $letter.(($letter - $messageArray[$i])%26\
    \ + $messageArray[$i]%26);\n    else if ($letter>='A' && $letter<='Z')\n     \
    \ $letter = $letter.(($letter - $messageArray[$i])%26 + $messageArray[$i]%26);\n\
    \    else\n      $letter = strtoupper($letter);\n    $encodedMessage .= $letter;\n\
    \  }\n  return $encodedMessage;\n}\n", "    $messageArray = str_split($message);\n\
    \    $encodedMessage = \"\";\n    foreach ($messageArray as $letter) {\n     \
    \   $newLetter = $letter;\n        $newLetter = strtolower($newLetter);\n    \
    \    $vowelIndex = strpos($newLetter, \"a\");\n        $vowelIndex2 = strpos($newLetter,\
    \ \"e\");\n        $vowelIndex3 = strpos($newLetter, \"i\");\n        $vowelIndex4\
    \ = strpos($newLetter, \"o\");\n        $vowelIndex5 = strpos($newLetter, \"u\"\
    );\n        if ($vowelIndex != -1 && $vowelIndex2 != -1) {\n            $newLetter\
    \ = strtoupper($newLetter);\n            $vowelIndex = $vowelIndex + 1;\n    \
    \        $vowelIndex2 = $vowelIndex2 + 1;\n            $vowelIndex3 = $vowelIndex3\
    \ + 1;\n            $vowelIndex4 = $vowelIndex4 + 1;\n            $vowelIndex5\
    \ = $vowelIndex5 + 1;\n        }\n        if ($vowelIndex != -1) {\n         \
    \   $newLetter = strtoupper($newLetter);\n            $vowelIndex = $vowelIndex\
    \ + 1;\n            $vowelIndex2 = $vowelIndex2 + 1;\n            $vowelIndex3\
    \ = $vowelIndex3 + 1;\n            $vowelIndex4 = $vowelIndex4 + 1;\n        \
    \    $vowelIndex5 = $vowelIndex5 + 1;\n        }\n        if ($vowelIndex2 !=\
    \ -1) {\n            $newLetter = strtoupper($newLetter);\n            $vowelIndex\
    \ = $vowelIndex + 1;\n            $vowelIndex2 = $vowelIndex2 + 1;\n         \
    \   $vowelIndex3 = $vowelIndex3 + 1;\n            $vowelIndex4 = $vowelIndex4\
    \ + 1;\n            $vowelIndex5 = $vowelIndex5 + 1;\n        }\n        if ($vowelIndex3\
    \ != -1) {\n            $newLetter = strtoupper($newLetter);\n            $vowelIndex\
    \ = $vowelIndex + 1;\n            $vowelIndex2 = $vowelIndex2 + 1;\n         \
    \   $vowelIndex3 = $vowelIndex3 + 1;\n            $vowelIndex4 = $vowelIndex4\
    \ + 1;\n            $vowelIndex5 = $vowelIndex5 + 1;\n        }\n        if ($vowelIndex4\
    \ != -1) {\n            $newLetter = strtoupper($newLetter);\n            $vowelIndex\
    \ = $vowelIndex + 1;\n            $vowelIndex2 = $vowelIndex2 + 1;\n         \
    \   $vowelIndex3 = $vowelIndex3 + 1;\n            $vowelIndex4 = $vowelIndex4\
    \ + 1;\n            $vowelIndex5 = $vowelIndex5 + 1;\n        }\n        if ($vowelIndex5\
    \ != -1) {\n            $newLetter = strtoupper($newLetter);\n            $vowelIndex\
    \ = $vowelIndex + 1;\n            $vowelIndex2 = $vowelIndex2 + 1;\n         \
    \   $vowelIndex3 = $vowelIndex3 + 1;\n            $vowelIndex4 = $vowelIndex4\
    \ + 1;\n", "  $code = '';\n  $code_len = strlen($code);\n  for ($i = 0; $i < strlen($message);\
    \ $i++) {\n    // Convert letter to its code, if it is a lowercase letter\n  \
    \  if ($message[$i] >= 'a' && $message[$i] <= 'z') {\n      $code .= $message[$i];\n\
    \    }\n    // If letter is uppercase, add 2 to current code, and swap it if \n\
    \    // necessary\n    else {\n      if ($message[$i] >= 'A' && $message[$i] <=\
    \ 'Z') {\n        $code .= ($code[$code_len] >= 'a' && $code[$code_len] <= 'z')\
    \ ? \n                  $code[$code_len++] : $code[$code_len++] = $message[$i];\n\
    \      }\n    }\n  }\n  return $code;\n}\n", '}', "    // Your code goes here!\n\
    }\n</code>\nYou will then need to find the two letters that are the same place\
    \ in both cases and swap them. \n<code>", "    $encoded = \"\";\n    $message\
    \ = \"$message\";\n    for ($i=0; $i<strlen($message); $i++) {\n        $char\
    \ = substr($message, $i, 1);\n        $index = ord($char);\n        if ($index\
    \ >= ord(\"a\") && $index <= ord(\"z\")) {\n            $char .= $char;\n    \
    \    }\n        $encoded = $char . $encoded;\n    }\n    return $encoded;\n}\n",
  "    $vowels = \"aeiouAEIOU\";\n    $newmessage = \"\";\n    for($i = 0; $i<strlen($message);\
    \ $i++) {\n        $char = substr($message,$i,1);\n        if(strpos($vowels,$char)!==false)\
    \ {\n            $newmessage .= $char . $char.substr($vowels,0,strpos($vowels,$char)+1);\n\
    \        } else {\n            $newmessage .= $char;\n        }\n    }\n    return\
    \ $newmessage;\n}\n", "  for ($i = 0; $i < strlen($message); $i++) {\n    $letter\
    \ = $message[$i];\n    $replacement_letter = $letter != $letter ? $letter : chr(ord($letter)\
    \ + 2);\n    $message = str_replace($letter, $replacement_letter, $message);\n\
    \  }\n  return $message;\n}", "  $message = preg_replace('/[^a-z]/', '', $message);\n\
    \  \n  // Convert every vowel to its index\n  $vowels = \"aeiouAEIOU\";\n  $alphabet\
    \ = str_split($vowels);\n  $message = str_split($message);\n  \n  $index = 0;\n\
    \  foreach ($message as $value) {\n    $index += $alphabet[$value];\n  }\n  \n\
    \  // Replace each vowel with the character that appears 2 places ahead.\n  //\
    \ $vowel can either be replaced with the character at index $index+1,\n  // or\
    \ with $index+2\n  foreach ($vowels as $vowel) {\n    foreach ($message as $value)\
    \ {\n      $value = $value . $alphabet[$value + $index];\n    }\n  }\n  \n  return\
    \ implode('', $message);\n}", "    $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    $vowels = \"aeiouy\";\n\n    foreach($message as $i=>$l) {\n        $out[$i]\
    \ = $alphabet[$l];\n    }\n\n    foreach(str_split($message) as $i=>$l) {\n  \
    \      foreach (str_split($l) as $j=>$c) {\n            $n = ($j-2)*($vowels.indexOf($c)+1);\n\
    \            $out[$i+$j] = $alphabet[$n];\n        }\n    }\n\n    return implode('',\
    \ $out);\n}", "  $encoded = '';\n  $upper = strtoupper($message);\n  for($i=0;\
    \ $i < strlen($message); $i++){\n    $letter = $upper[$i];\n    $encoded = $letter\
    \ . $encoded;\n  }\n  return $encoded;\n}\n", "  $message1 = $message;\n  $message2\
    \ = $message;\n  $vowels = \"aeiouAEIOU\";\n  $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  \n  for($i=0; $i<strlen($message1); $i++){\n    $a = $message1[$i];\n   \
    \ $b = $message1[$i];\n    \n    $c = $message1[$i];\n    $d = $message1[$i];\n\
    \    \n    $e = $message1[$i];\n    $f = $message1[$i];\n    \n    $g = $message1[$i];\n\
    \    $h = $message1[$i];\n    \n    $i = $message1[$i];\n    $j = $message1[$i];\n\
    \    \n    $k = $message1[$i];\n    $l = $message1[$i];\n    \n    $m = $message1[$i];\n\
    \    $n = $message1[$i];\n    \n    $o = $message1[$i];\n    $p = $message1[$i];\n\
    \    \n    $q = $message1[$i];\n    $r = $message1[$i];\n    \n    $s = $message1[$i];\n\
    \    $t = $message1[$i];\n    \n    $u = $message1[$i];\n    $v = $message1[$i];\n\
    \    \n    $w = $message1[$i];\n    $x = $message1[$i];\n    \n    $y = $message1[$i];\n\
    \    $z = $message1[$i];\n    \n    $message1[$i] = $alphabet[($alphabet[$a]+$alphabet[$b]+$alphabet[$c]+$alphabet[$d]+$alphabet[$e]+$alphabet[$f]+$alphabet[$g]+$alphabet[$h]+$alphabet[$i]+$alphabet[$j]+$alphabet[$k]+$alphabet[$l]+$alphabet[$m]+$alphabet[$n]+$alphabet[$o]+$alphabet[$p]+$alphabet[$q]+$alphabet[$r]+$alphabet[$s]+$alphabet[$t]+$alphabet[$u]+$alphabet[$v]+$alphabet[$w]+$alphabet[$x]+$alphabet[$y]+$alphabet[$z])%26];\n\
    \  }\n  \n  for($i=0; $i<strlen($message2); $i++){\n    $a = $message2[$i];\n\
    \    $b = $message2[$i];\n    \n    $c = $message2[$i];\n    $", "    $message\
    \ = strtoupper($message);\n    $message = str_replace(array(\"a\", \"e\", \"i\"\
    , \"o\", \"u\", \"y\"), array(\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\"), $message);\n\
    \    $message = str_replace(array(\"B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"\
    J\", \"K\", \"L\", \"M\", \"N\", \"P\", \"R\", \"S\", \"T\", \"V\", \"W\", \"\
    X\", \"Y\"), array(\"B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"\
    L\", \"M\", \"N\", \"P\", \"R\", \"S\", \"T\", \"V\", \"W\", \"X\", \"Y\"), $message);\n\
    \    $message = str_replace(array(\"X\", \"Z\"), array(\"0\", \"9\"), $message);\n\
    \    return $message;\n}", "    $encodedMessage = \"\";\n    foreach($message\
    \ as $letter) {\n        if(strlen($letter)==1) $encodedMessage .= $letter;\n\
    \        elseif($letter==\"a\") $encodedMessage .= $letter;\n        elseif($letter==\"\
    e\") $encodedMessage .= $letter;\n        elseif($letter==\"i\") $encodedMessage\
    \ .= $letter;\n        elseif($letter==\"o\") $encodedMessage .= $letter;\n  \
    \      elseif($letter==\"u\") $encodedMessage .= $letter;\n        elseif($letter==\"\
    A\") $encodedMessage .= $letter;\n        elseif($letter==\"E\") $encodedMessage\
    \ .= $letter;\n        elseif($letter==\"I\") $encodedMessage .= $letter;\n  \
    \      elseif($letter==\"O\") $encodedMessage .= $letter;\n        elseif($letter==\"\
    U\") $encodedMessage .= $letter;\n        else {\n            $letterToAdd = substr($letter,\
    \ -1);\n            $encodedMessage .= substr($letter, 0, -1);\n            $encodedMessage\
    \ .= preg_replace(\"%(?![aeiou])[a-z]%\", \n                $letterToAdd, $letter);\n\
    \        }\n    }\n    return $encodedMessage;\n}\n</code>\n<|/ a tags=php,encryption\
    \ dscore=1 |>\n<| c |>\nWhile this answer may be correct, it would benefit from\
    \ an explanation.\n<|/ c |>\n<| c |>\nHow is this supposed to work? The output\
    \ is incorrect\n<|/ c |>\n<| a dscore=1 |>\nI wrote a script that does this exact\
    \ thing. It was very helpful for my project. It has two features:\n\nIt encrypts\
    \ files using a password as a key.\nIt decrypts files using a password as a key.\n\
    \nMy project was to encrypt and decrypt files using both a password and a passphrase\
    \ as a key. I used it to encrypt files that are encrypted using another program.\
    \ This allows the user to use a password to encrypt files that are encrypted using\
    \ a passphrase that was given to them by the other program.\nI then decided to\
    \ make it easy for the user to encrypt a file, then decrypt it using a passphrase.\
    \ My approach was to create an array of the letters of the alphabet, with each\
    \ letter being an index of the array. For example:\n<code>\n$alphabet = array(\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"\
    N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W", "  global $vowels;\n\
    \  $message = strtolower($message);\n  for($i = 0; $i < strlen($message); $i++)\
    \ {\n    $vowel = $message[$i];\n    $replacement = substr($vowels, $i, 1);\n\
    \    $message = str_replace($vowel, $replacement, $message);\n  }\n  return $message;\n\
    }\n", "    $vowels = \"aeiouAEIOU\";\n    $message = str_split($message);\n  \
    \  $newMessage = array();\n    foreach ($message as $char) {\n        $newMessage[]\
    \ = chr(ord($char) + strlen($vowels) - 1);\n    }\n    $finalMessage = implode('',\
    \ $newMessage);\n    $finalMessage = str_split($finalMessage);\n    $finalMessage\
    \ = array_map(\n        function($char) use ($vowels) {\n            return str_replace($vowels,\
    \ \n                    chr(strpos(str_split($char), $char) + 2), $char);\n  \
    \      },\n        $finalMessage\n    );\n    return implode('', $finalMessage);\n\
    }", "  $alphabet = 'abcdefghijklmnopqrstuvwxyz'; \n  $codes = array(); \n  for\
    \ ($i = 0; $i < strlen($message); $i++) {\n    $codes[$alphabet[ord($message[$i])\
    \ - 'a']][] = $i;\n  }\n  $message = '';\n  $i = 0;\n  foreach ($codes as $code)\
    \ {\n    $message .= $code[0]; \n    $message .= $code[$i % 2]; \n    $i++;\n\
    \  }\n  return $message;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nYou can try\
    \ to use this code\n<code>", "    // TODO: Implement Function\n    $letters =\
    \ str_split($message);\n    $swaps = array_fill(0, 26, \"zZ\");\n    $vowels =\
    \ array_fill(0, 26, \"aeiouy\");\n    $message = \"\";\n    foreach ($letters\
    \ as $i => $letter) {\n        $index = $letter - \"a\";\n        if ($index <\
    \ 0) {\n            $index = ($index + 26);\n        }\n        if ($index > 25)\
    \ {\n            $index = ($index - 26);\n        }\n        $message = $message\
    \ . $swaps[$index];\n    }\n    foreach ($letters as $i => $letter) {\n      \
    \  $index = $letter - \"a\";\n        if ($index < 0) {\n            $index =\
    \ ($index + 26);\n        }\n        if ($index > 25) {\n            $index =\
    \ ($index - 26);\n        }\n        $message = $message . $vowels[$index];\n\
    \    }\n    return $message;\n}", "  global $vowels;\n  $newMessage = \"\";\n\
    \  $count = 0;\n  for($i=0; $i<strlen($message); $i++) {\n    $newMessage .= $message[$i];\n\
    \    $newMessage .= $vowels[($count%2)];\n    if($count >= 2) {\n      $newMessage\
    \ .= $vowels[($count/2)];\n    }\n    $count++;\n  }\n  return $newMessage;\n\
    }\n", "    $newMessage = str_replace($vowels, \n        array_map(function($v){\n\
    \            return $alphabet[$v];\n        }, str_split($message)), \n      \
    \  $message);\n    return strtoupper($newMessage);\n}\n\n$message = \"This is\
    \ a message\";\necho $message . \"<br>\";\necho encode($message) . \"<br>\";",
  "    $messageChars = str_split($message);\n    $encoded = '';\n\n    for ($i=0;\
    \ $i<count($messageChars); $i++) {\n        $char = $messageChars[$i];\n     \
    \   $nextChar = $messageChars[$i+1];\n\n        if ($char === 'a' || $char ===\
    \ 'e' || $char === 'i' || $char === 'o' || $char === 'u') {\n            $encoded\
    \ .= chr($char + 64);\n            $i++;\n        } else {\n            $encoded\
    \ .= $char;\n        }\n\n        if ($nextChar === 'a' || $nextChar === 'e' ||\
    \ $nextChar === 'i' || $nextChar === 'o' || $nextChar === 'u') {\n           \
    \ $encoded .= chr($char - 64);\n            $i++;\n        } else {\n        \
    \    $encoded .= $nextChar;\n        }\n    }\n\n    return $encoded;\n}\n", " \
    \ $messageArr = str_split($message);\n  $encodedArr = array();\n  $pos = 0;\n\
    \  $vowels = \"AEIOUaeiou\";\n  foreach($messageArr as $key => $value) {\n   \
    \ if(strlen($value) == 1) {\n      $encodedArr[] = $value;\n    } else {\n   \
    \   $encodedArr[] = substr($vowels, $pos, 2);\n      $pos = $pos + 2;\n      while($pos\
    \ + 1 <= strlen($vowels)) {\n        $encodedArr[] = substr($vowels, $pos, 1);\n\
    \        $pos = $pos + 1;\n      }\n      $encodedArr[] = $value;\n    }\n  }\n\
    \  $encodedStr = implode(\"\", $encodedArr);\n  return $encodedStr;\n}", "   \
    \ $vowels = \"aeiouAEIOU\";\n    $result = \"\";\n    $l = strlen($message);\n\
    \    $a = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"\
    k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"\
    x\",\"y\",\"z\");\n    $i = $j = 0;\n    for($i=0;$i<$l;$i++) {\n        $c =\
    \ $message[$i];\n        $n = $vowels;\n        for($j=0;$j<strlen($n);$j++) {\n\
    \            for($k=0;$k<strlen($a);$k++) {\n                if($c==$a[$k]) {\n\
    \                    $c = $a[($k+1)%strlen($a)];\n                }\n        \
    \    }\n        }\n        $result .= $c;\n    }\n    return $result;\n}", " \
    \   $result = '';\n    for ($i = 0; $i < strlen($message); $i++) {\n        $result\
    \ .= (substr($message, $i, 1))\n            ^ (substr($message, $i, 1)) ^ \n \
    \             (substr($message, $i, 1)) ^\n              (substr($message, $i,\
    \ 1)) ^\n              (substr($message, $i, 1)) ^\n              (substr($message,\
    \ $i, 1)) ^\n              (substr($message, $i, 1)) ^\n              (substr($message,\
    \ $i, 1)) ^\n              (substr($message, $i, 1)) ^\n              (substr($message,\
    \ $i, 1)) ^\n              (substr($message, $i, 1)) ^\n              (substr($message,\
    \ $i, 1)) ^\n              (substr($message, $i, 1)) ^\n              (substr($message,\
    \ $i, 1));\n    }\n    return $result;\n}", "    $alphabet = range('A', 'Z');\
    \ //alphabet\n    $vowels = 'aeiou'; //vowels\n\n    $message = str_replace(\n\
    \        array_map(function($letter) use ($alphabet, $vowels) {\n            return\
    \ $letter;\n        }, array_values($alphabet)),\n        array_map(function($letter)\
    \ use ($alphabet, $vowels) {\n            return $alphabet[array_search($letter,\
    \ $vowels, true)+1];\n        }, array_values($alphabet)),\n        $message\n\
    \    );\n\n    return implode('', array_map(function($letter) use ($alphabet)\
    \ {\n        return $alphabet[array_search($letter, $alphabet)+1];\n    }, $message));\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThe `array_values` on the first `array_map`\
    \ can be removed.\n<|/ c |>\n<| c |>\nI did try to remove array_values, but then\
    \ i get errors for array_search()\n<|/ c |>\n<| c |>\nThank you very much for\
    \ looking at this, i appreciate it\n<|/ c |>\n<| c |>\nI used `array_values` on\
    \ the first map just to make sure that the values are returned as numerically\
    \ indexed, but you're right that they don't actually need to be there. I removed\
    \ them from the code now.\n<|/ c |>\n<| c |>\nI have not been able to get this\
    \ to work with a message as such: \n`$string = \"hello world\";`\n`$decodedMessage\
    \ = decode(\"TGST\");`\ni get this message: \n`hTllo whRLD`\n<|/ c |>\n<| a tags=encode,decode,php,algorithm\
    \ dscore=0 |>\nIn case anyone wants to do something similar, this is my version\
    \ of the encoded algorithm which I put together.\nIt encodes strings case insensitively,\
    \ and encodes numbers in the same way: \n<code>", "  return $message;\n}", " \
    \   // write your encoding code here\n    $output = \"\";\n    for($i = 0; $i\
    \ < strlen($message); $i++) {\n        $output[$i] = $message[$i];\n    }\n  \
    \  for($i = 0; $i < strlen($message); $i++) {\n        if($message[$i] == $output[$i])\
    \ {\n            $output[$i] = $message[$i][1];\n        }\n    }\n    return\
    \ implode(\"\",$output);\n}\n", "    return strtr($message, [\n        'a' =>\
    \ 'A',\n        'b' => 'B',\n        'c' => 'C',\n        'd' => 'D',\n      \
    \  'e' => 'E',\n        'f' => 'F',\n        'g' => 'G',\n        'h' => 'H',\n\
    \        'i' => 'I',\n        'j' => 'J',\n        'k' => 'K',\n        'l' =>\
    \ 'L',\n        'm' => 'M',\n        'n' => 'N',\n        'o' => 'O',\n      \
    \  'p' => 'P',\n        'q' => 'Q',\n        'r' => 'R',\n        's' => 'S',\n\
    \        't' => 'T',\n        'u' => 'U',\n        'v' => 'V',\n        'w' =>\
    \ 'W',\n        'x' => 'X',\n        'y' => 'Y',\n        'z' => 'Z',\n      \
    \  'A' => 'a',\n        'B' => 'b',\n        'C' => 'c',\n        'D' => 'd',\n\
    \        'E' => 'e',\n        'F' => 'f',\n        'G' => 'g',\n        'H' =>\
    \ 'h',\n        'I' => 'i',\n        'J' => 'j',\n        'K' => 'k',\n      \
    \  'L' => 'l',\n        'M' => 'm',\n        'N' => 'n',\n        'O' => 'o',\n\
    \        'P' => 'p',\n        'Q' => 'q',\n        'R' => 'r',\n        'S' =>\
    \ 's1',\n        'T' => 't2',\n        'U' => 'u',\n        'V' => 'v',\n    \
    \    'W' => 'w',\n        'X' => 'x',\n        'Y' => 'y',\n        'Z' => 'z',\n\
    \        'a1' => 'A1',\n        'b1' => 'B1',\n        'c1' => 'C1',\n       \
    \ 'd1' => 'D1',\n        'e1' => 'E1',\n        'f1' => 'F1',\n        'g1' =>\
    \ 'G1',\n        'h1' => 'H1',\n        'i1' => 'I1',\n        'j1' => 'J1',\n\
    \        'k1' => 'K1',\n        'l1' => 'L1',\n        'm1' => 'M1',\n       \
    \ 'n1' => 'N1',\n        'o1' => 'O1',\n        'p1' => 'P1',\n        'q1' =>\
    \ 'Q1',\n        'r1' => 'R1',\n        's1' => 'S1',\n        't1' => 'T1',\n\
    \        'u1' => 'U1',\n        'v1' => 'V1',\n        'w1' => 'W1',\n       \
    \ 'x1' => 'X1',\n        'y1' => 'Y1',\n        'z1' => 'Z1',\n        'A2' =>\
    \ 'a2',\n        'B2' => 'b2',\n        'C2' => 'c2',\n        'D2' => 'd2',\n\
    \        'E2' => 'e2',\n        'F2", "  $vowels = \"aeiou\";\n  $replacement\
    \ = chr(ord($message[0]) + 2);\n  return preg_replace_callback('/.?(\\w)\\w/',\
    \ function($matches) use ($replacement) {\n    return strtoupper($matches[1])\
    \ ? str_replace($vowels, $replacement, $matches[1]) : $matches[0];\n  }, $message);\n\
    }\n", "    $alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'; \n    $messageToEncode = preg_replace('/[^A-Z]/',\
    \ '',$message);\n    $encodedString = strtoupper($alpha[0]); \n    for($i = 1;\
    \ $i < strlen($messageToEncode); $i++) { \n        $charAt = $messageToEncode[$i];\
    \ \n        $encodedString .= $alpha[$alpha[($i - 2)] ^ $charAt]; \n    } \n \
    \   return $encodedString; \n} \n</code>\n<|/ a tags=php |>\n<| c |>\nThe OP specifically\
    \ asked for \"to write a function\". This is a pretty good answer but it is not\
    \ really a function. It is not really a good use of coding standards. You should\
    \ be able to easily refactor this into what they really want.\n<|/ c |>\n<| a\
    \ tags=php dscore=1 |>\nI wanted to share my method of solving this problem. Not\
    \ sure if its the best way but here is my solution.\n<code>\n<?php\n    function\
    \ decode($str){\n        $alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        $newStr\
    \ = '';\n        for($i = 0; $i<strlen($str); $i++){\n            $char = substr($str,\
    \ $i, 1);\n            $nextChar = substr($str, $i+1, 1);\n            $newStr\
    \ .= $alpha[$alpha[($i - 2)] ^ strtoupper($char)];\n            if($nextChar !=\
    \ $char) $newStr .= $alpha[$alpha[$nextChar]];\n        }\n        return $newStr;\n\
    \    }\n    $test = \"This is a test\";\n    echo decode($test);", "  $code =\
    \ '';\n  for ($i = 0; $i < strlen($message); $i++) {\n    $code .= $message[$i];\n\
    \    // if i is odd\n    if ($i % 2 == 1) {\n      // if character is vowel\n\
    \      if ($message[$i] === 'a' || $message[$i] === 'e' || $message[$i] === 'i'\
    \ || $message[$i] === 'o' || $message[$i] === 'u') {\n        // if next character\
    \ is vowel\n        if ($message[$i + 1] === 'a' || $message[$i + 1] === 'e' ||\
    \ $message[$i + 1] === 'i' || $message[$i + 1] === 'o' || $message[$i + 1] ===\
    \ 'u') {\n          $code .= $message[$i].$message[$i + 1];\n        }\n     \
    \ }\n      // if character is consonant\n      elseif ($message[$i] === 'A' ||\
    \ $message[$i] === 'E' || $message[$i] === 'I' || $message[$i] === 'O' || $message[$i]\
    \ === 'U') {\n        $code .= $message[$i].$message[$i].$message[$i + 1];\n \
    \     }\n    }\n  }\n  return $code;\n}", "  // Use your encoding function here.\n\
    }\n", "  // Find the position of the second vowel in the alphabet.\n  $vowel =\
    \ strpos(\"aeiou\", \"e\", $message, 2);\n  // Swap the cases of both letters.\n\
    \  $message = strtoupper($message) . strtolower($message);\n  // Replace each\
    \ vowel with its next letter in the alphabet.\n  $message = str_replace(\"a\"\
    , \"z\", $message);\n  $message = str_replace(\"e\", \"a\", $message);\n  $message\
    \ = str_replace(\"i\", \"y\", $message);\n  $message = str_replace(\"o\", \"a\"\
    , $message);\n  $message = str_replace(\"u\", \"y\", $message);\n  // Now reverse\
    \ the message. \n  $message = strrev($message);\n  // Swap cases of second vowel.\
    \ \n  $message = str_replace(\"z\", \"a\", $message);\n  return $message;\n}\n",
  "  $new = '';\n  foreach (str_split($message) as $letter) {\n    $new .= $letter;\n\
    \  }\n  $new = preg_replace('/(.)(?=[AEIOUY])/', '\\1', $new);\n  $new = preg_replace('/(.)(?=[AEIOU])/',\
    \ '$1\\1', $new);\n  return $new;\n}\n", "    $code = 0;\n    $len = strlen($message);\n\
    \    for ($i=0; $i<$len; $i++) {\n        $code += ord($message[$i]) - 64;\n \
    \   }\n    for ($i=0; $i<$len; $i++) {\n        $message[$i] = chr(ord($message[$i])\
    \ + $code % 26);\n        $code /= 26;\n    }\n    return $message;\n}\n", " \
    \   // Your code goes here.\n    // Use str_replace to replace the vowels with\
    \ their two \n    // positions.\n    // For example, if the message was \"this\
    \ is a message\", \n    // the result should be \"tHKS KS C MGSSCGG\". \n    return\
    \ $message;\n}\n</code>\n<|/ a |>\n<| a |>\n<code>\n<?php\n", "    $vowels = array('a',\
    \ 'e', 'i', 'o', 'u', 'y');\n    $vowels = array_flip($vowels);\n    $message\
    \ = str_replace($vowels, '', strtolower($message));\n    $message = str_replace(\"\
    \ \", \"\", $message);\n    $messageParts = str_split($message);\n    $encodedMessageParts\
    \ = array();\n    $encodedMessage = array();\n    foreach ($messageParts as $key\
    \ => $messagePart) {\n        $encodedMessageParts[] = $key;\n        $encodedMessageParts[]\
    \ = $vowels[$messagePart];\n    }\n    \n    foreach ($encodedMessageParts as\
    \ $key => $encodedMessagePart) {\n        if ($key == 0) {\n            $encodedMessage[0]\
    \ = $encodedMessagePart;\n            continue;\n        }\n        $encodedMessage[$key-1]\
    \ .= $encodedMessagePart;\n    }\n    $encodedMessage = implode('', $encodedMessage);\n\
    \    return $encodedMessage;\n}", "  $encodedMessage = \"\";\n\n  foreach(str_split($message)\
    \ as $char) {\n    $encodedMessage = $char.strtoupper(chr($char).$encodedMessage);\n\
    \  }\n\n  return $encodedMessage;\n}\n", "    $vowels = \"aeiouy\";\n    $new_message\
    \ = $message;\n    foreach ($message as $key => $value) {\n        $letter = substr($value,\
    \ 0, 1);\n        $new_value = $letter;\n        $position = $key;\n        for\
    \ ($i = 1; $i <= 2; $i++) {\n            $new_value .= $new_message[$position\
    \ + $i];\n        }\n        $new_message .= $new_value;\n    }\n    return $new_message;\n\
    }\n", "    // Your code goes here\n}\n", "    $code = \"\";\n    foreach(str_split($message)\
    \ as $letter) {\n        $code .= ($letter == $letter) ? $letter : \n        \
    \        ($letter == \"a\") ? $letter - 2 : ($letter == \"e\") ? $letter + 1 :\
    \ ($letter == \"i\") ? $letter + 2 : \n                ($letter == \"o\") ? $letter\
    \ + 1 : \n                ($letter == \"u\") ? $letter + 2 : \n              \
    \  ($letter == \"y\")? $letter + 1 : \n                ($letter == \"e\") ? $letter\
    \ + 1 : \n                ($letter == \"o\") ? $letter + 2 : \n              \
    \  ($letter == \"a\") ? $letter - 2 : \n                ($letter == \"i\") ? $letter\
    \ - 1 : \n                ($letter == \"o\") ? $letter - 1 : ($letter == \"u\"\
    ) ? $letter - 1 : \n                ($letter == \"y\") ? $letter - 1 : \n    \
    \            $letter;\n    }\n    return $code;\n}", "    $alphabet = range('a',\
    \ 'z');\n    $vowels = ['a','e','i','o','u'];\n    $message = $message;\n    $message\
    \ = '';\n    foreach (str_split($message) as $c) {\n        $message .= $alphabet[str_replace($vowels,'',$c)];\n\
    \    }\n    return $message;\n}\n", "    $newMessage = \"\";\n    $firstChar =\
    \ \"\";\n    $lastChar = \"\";\n    $vowels = \"aeiou\";\n    $numVowels = strlen($vowels);\n\
    \    for ($i = 0; $i < strlen($message); $i++) {\n        if ($message[$i] ==\
    \ $firstChar) {\n            $firstChar = \"\";\n        }\n        else {\n \
    \           if ($message[$i] == $lastChar) {\n                $lastChar = \"\"\
    ;\n            }\n            else {\n                $firstChar = $message[$i];\n\
    \            }\n        }\n    }\n    for ($i = 0; $i < strlen($message); $i++)\
    \ {\n        if ($message[$i] == $firstChar) {\n            $newMessage .= $firstChar;\n\
    \        }\n        else {\n            if ($message[$i] == $lastChar) {\n   \
    \             $newMessage .= $firstChar;\n            }\n            else {\n\
    \                $newMessage .= $firstChar . strtolower($message[$i]);\n     \
    \       }\n        }\n    }\n    $newMessage = strtoupper($newMessage);\n    for\
    \ ($i = 0; $i < strlen($newMessage); $i++) {\n        if (in_array($newMessage[$i],\
    \ $vowels)) {\n            $newMessage[$i] = strtoupper(substr($newMessage[$i],\
    \ 1, $numVowels));\n        }\n    }\n    return $newMessage;\n}", "    // Your\
    \ code goes here!\n}", "  $letters = str_split($message);\n  $encoded = \"\";\n\
    \  for ($i = 0; $i < count($letters); $i++) {\n    // Replace all vowels in current\
    \ letter with positions 2 places ahead of that vowel.\n    // Example: T -> T\
    \ -> t\n    $letters[$i] = str_replace(array(\"A\", \"E\", \"I\", \"O\", \"U\"\
    ), \n                                array(chr(64), chr(64), chr(64), chr(64),\
    \ chr(64)),\n                                $letters[$i]);\n    // Replace all\
    \ vowels in all letters with positions 2 places ahead of that vowel.\n    // Example:\
    \ S -> S -> s\n    $letters[$i] = str_replace(array(\"a\", \"e\", \"i\", \"o\"\
    , \"u\"), \n                                array(chr(97), chr(97), chr(97), chr(97),\
    \ chr(97)),\n                                $letters[$i]);\n    // Replace all\
    \ vowels in all letters with positions 1 place ahead of that vowel.\n    // Example:\
    \ G -> G -> g\n    $letters[$i] = str_replace(array(\"a\", \"e\", \"i\", \"o\"\
    , \"u\"), \n                                array(chr(98), chr(98), chr(98), chr(98),\
    \ chr(98)),\n                                $letters[$i]);\n    // Replace all\
    \ vowels in all letters with positions 0 place ahead of that vowel.\n    // Example:\
    \ C -> C -> c\n    $letters[$i] = str_replace(array(\"a\", \"e\", \"i\", \"o\"\
    , \"u\"), \n                                array(chr(99), chr(99), chr(99), chr(99),\
    \ chr(99)),\n                                $letters[$i]);\n    // Replace all\
    \ vowels in all letters with positions 3 places ahead of that vowel.\n    // Example:\
    \ K -> K -> k\n    $letters[$i] = str_replace(array(\"a\", \"e\", \"i\", \"o\"\
    , \"u\"), \n                                array(chr(100), chr(100), chr(100),\
    \ chr(100), chr(100)),\n                                $letters[$i]);\n    //\
    \ Replace all vowels in all letters with positions 4 places ahead of that vowel.\n\
    \    // Example: M -> M -> m\n    $letters[$i] = str_replace(array(\"a\", \"e\"\
    , \"i\", \"o\", \"u\"), \n                                array(chr(101), chr(101),\
    \ chr(101), chr(101), chr(101)),\n                                $letters[$i]);\n\
    \    // Replace all vowels in all letters with positions 5 places ahead of that\
    \ vowel.\n    // Example: G -> G -> g\n    $letters[$i] = str_replace(array(\"\
    a\", \"e\", \"i\", \"o\", \"u\"), \n                                array(chr(",
  "    return strtr(\n        $message, \n        [\n            'a' => 'd', \n  \
    \          'e' => 'f',\n            'i' => 'j',\n            'o' => 'b',\n   \
    \         'u' => 'v',\n            'y' => 'g',\n        ]\n    ); \n}\n", "  $vowels\
    \ = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n  $letters = array(\"A\"\
    , \"E\", \"I\", \"O\", \"U\", \"Y\");\n  $encoded = \"\";\n  \n  foreach (str_split($message)\
    \ as $letter) {\n    $encoded = $encoded . \n      str_replace($vowels, \n   \
    \      $letters[array_search($letter, $vowels)+2],\n         $letter);\n  }\n\
    \  \n  return $encoded;\n}", "    $alphabet = str_split('abcdefghijklmnopqrstuvwxyz');\n\
    \    $encoded = \"\";\n    foreach($alphabet as $letter) {\n        $encoded .=\
    \ $message;\n        $encoded .= str_replace($letter, $letter[strlen($letter)\
    \ - 1], \n            substr($message, strlen($letter) - 1));\n    }\n    return\
    \ $encoded;\n}\n", "    $code = '';\n    \n    foreach (str_split($message) as\
    \ $letter) {\n        $code .= str_replace(array('a', 'e', 'i', 'o', 'u', 'y'),\
    \ \n            array('A', 'E', 'I', 'O', 'U', 'Y'), $letter);\n    }\n    \n\
    \    return $code;\n}\n\n$message = encode(\"This is a message\");\n$code = encode($code);\n\
    \necho $code;\n</code>\n<|/ a tags=php,permutation |>\n<| c |>\nThanks. I have\
    \ added the original code to my question.\n<|/ c |>\n<| c |>\nYour answer was\
    \ very close to the correct answer, but this one was the most helpful. Thanks!\n\
    <|/ c |>\n<| a |>\nI have come up with this solution which I think should be good\
    \ enough for this problem.\n<code>\n<?php\n\n$alphabet = array(\"A\",\"B\",\"\
    C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"\
    P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\");\n", "  $message\
    \ = str_replace(\" \", \"\", $message);\n  $message = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \ . $message;\n  $message = str_split($message, 1);\n  $message = $message[0]\
    \ . $message[1];\n  $message = str_replace(\n    array(\"a\", \"e\", \"i\", \"\
    o\", \"u\", \"y\"), \n    array(\n      \"A\",\"E\",\"I\",\"O\",\"U\",\"Y\"),\
    \ \n    $message\n  );\n  $message = str_replace(\n    array(\"B\", \"C\", \"\
    D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"P\", \"Q\", \"\
    R\", \"S\", \"T\", \"V\", \"W\", \"Y\"),\n    array(\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\", \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"z\"), \n  \
    \  $message\n  );\n  $message = str_replace(\n    array(\"Z\", \"x\", \"y\", \"\
    z\"), \n    array(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"), \n    $message\n\
    \  );\n  $message = str_split($message, 2);\n  $message = $message[0] . $message[1];\n\
    \  return $message;\n}\n</code>\n<|/ a tags=php,string,encoding |>\n<| c |>\n\
    Thanks for your effort. Your code returns 'TGST'. It's not what I was expecting.\n\
    <|/ c |>\n<| c |>\nIt should return `TGST`. What is your expected output ?\n<|/\
    \ c |>\n<| c |>\nThe \"G\" should be \"tHKS KS C MGSSCGG\", and the \"s\" should\
    \ be \"TGHS KS C MGSSCGG\".\n<|/ c |>\n<| c |>\nI see. I added a solution to my\
    \ answer. It should work for you now.\n<|/ c |>\n<| a tags=php,string,encoding\
    \ dscore=1 |>\nThis one works in PHP 5.6+ and should also work for previous versions\
    \ of PHP if you replace $replacements with arrays of replacement pairs and $strings\
    \ with arrays of letters to replace.\n<code>", "    $messageLength = strlen($message);\n\
    \    for ($i = 0; $i < $messageLength; $i++) {\n        $char = strtoupper($message[$i]);\n\
    \        $vowels = ['A','E','I','O','U','a','e','i','o','u'];\n        for ($j\
    \ = 0; $j < $i; $j++) {\n            $char = strtolower($message[$j]);\n     \
    \       if (in_array($char, $vowels)) {\n                $char = chr(ord($char)\
    \ + 2);\n            } else {\n                $char = chr(ord($char) + 1);\n\
    \            }\n            $message[$j] = $char;\n        }\n    }\n    return\
    \ $message;\n}", "  return strtr($message, array_combine(str_split('aeiou'), str_split('AEIOU')));\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nthank you, i think this is what i need\
    \ but i dont understand how it works. is there a way to do this but without using\
    \ preg_replace for my own sake. would you be able to show me how this works?\n\
    <|/ c |>\n<| c |>\nI've added a code example to my answer. My example is just\
    \ a quick-and-dirty proof-of-concept to show how it might be done, but hopefully\
    \ the explanation of how it works will help you understand it.\n<|/ c |>\n<| c\
    \ |>\nthank you so much, this makes a lot more sense now. I appreciate you taking\
    \ the time to write this out for me. I will make sure to test this when I get\
    \ home.\n<|/ c |>\n<| c |>\nJust a quick followup. Is there any way to do this\
    \ without using preg_replace?\n<|/ c |>\n<| c |>\nYes, of course. I've updated\
    \ my answer to include an example. But to expand on it a bit, it's fairly easy\
    \ to do the same thing using `strtr()`, which just calls `preg_replace()` and\
    \ passes it the regex in its `subject` parameter, which is what you'd need to\
    \ replace your `preg_replace()` call with for it to work the same way.\n<|/ c\
    \ |>\n<| a dscore=0 |>\nThe first thing I did was replace all non alphanumeric\
    \ characters with an empty string:\n<code>\n$string = \"This a message\";\n$string\
    \ = preg_replace('/[^A-Za-z0-9]/', '', $string);\nvar_dump($string);\n</code>\n\
    <|/ a tags=regex,php |>\n<| c |>\nthank you, this is the same method that I thought\
    \ of but im not sure how to get the string that is 2 places ahead of each vowel\n\
    <|/ c |>\n<| c |>\nThe second thing I'd do then is replace all vowels with an\
    \ empty string. `preg_replace('/[aeiou]/', '', $string);`\n<|/ c |>\n<| c |>\n\
    thank you. this looks like it is on the right track. im just not sure how to implement\
    \ it. can you show me an example of how it would work?\n<|/ c |>\n<| c |>\n`preg_replace('/[aeiou]/',\
    \ '', $string);` will replace all the vowels in the string.\n<|/ c |>\n<| c |>\n\
    this ", "    // Write your code here.\n}\n", "  $message = str_ireplace(\n   \
    \ array('a','e','i','o','u'),\n    array('e','a','o','u','i'),\n    $message\n\
    \  );\n  $message = str_ireplace(\n    array('y','o','a','i','o','u','w','d','g','f','b','z'),\n\
    \    array('k','s','c','m','g','g','f','b','z'),\n    $message\n  );\n  return\
    \ str_ireplace(\n    array('a','e','i','o','u','y','w','d','g','f','b','z'),\n\
    \    array('e','a','o','u','i','k','s','c','m','g','g','f','b','z'),\n    $message\n\
    \  );\n}", "    return strtr($message, \n        array('a'=>'z','A'=>'Z','e'=>'z','I'=>'Z',\n\
    \            'o'=>'z','O'=>'Z','u'=>'Z','U'=>'Z','n'=>'z',\n            'N'=>'Z','i'=>'Z','o'=>'z','O'=>'Z','a'=>'Z','A'=>'Z',\n\
    \            'e'=>'z','I'=>'Z','o'=>'z','O'=>'Z','u'=>'Z','U'=>'Z'));\n}", " \
    \   $message = preg_replace(\"/([aeiou])([aeiou])/\", \"\\\\1 \\\\2\", $message);\n\
    \    return str_replace(\n        array(\n            \"i\", \"e\", \"o\", \"\
    u\", \"y\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\
    \ \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", ", "    $alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\
    \    $vowels = \"AEIOUYaeiouy\";\n    $counts = array();\n    $counts[$alphabet[0]]++;\n\
    \    $counts[$alphabet[1]]++;\n    $counts[$alphabet[2]]++;\n    $counts[$alphabet[3]]++;\n\
    \    $counts[$alphabet[4]]++;\n    $counts[$alphabet[5]]++;\n    $counts[$alphabet[6]]++;\n\
    \    $counts[$alphabet[7]]++;\n    $counts[$alphabet[8]]++;\n    $counts[$alphabet[9]]++;\n\
    \    $counts[$alphabet[10]]++;\n    $counts[$alphabet[11]]++;\n    $counts[$alphabet[12]]++;\n\
    \    $counts[$alphabet[13]]++;\n    $counts[$alphabet[14]]++;\n    $counts[$alphabet[15]]++;\n\
    \    $counts[$alphabet[16]]++;\n    $counts[$alphabet[17]]++;\n    $counts[$alphabet[18]]++;\n\
    \    $counts[$alphabet[19]]++;\n    $counts[$alphabet[20]]++;\n    $counts[$alphabet[21]]++;\n\
    \    $counts[$alphabet[22]]++;\n    $counts[$alphabet[23]]++;\n    $counts[$alphabet[24]]++;\n\
    \    $counts[$alphabet[25]]++;\n    $counts[$alphabet[26]]++;\n    $counts[$alphabet[27]]++;\n\
    \    $counts[$alphabet[28]]++;\n    $counts[$alphabet[29]]++;\n    $counts[$alphabet[30]]++;\n\
    \    $counts[$alphabet[31]]++;\n    $counts[$alphabet[32]]++;\n    $counts[$alphabet[33]]++;\n\
    \    $counts[$alphabet[34]]++;\n    $counts[$alphabet[35]]++;\n    $counts[$alphabet[36]]++;\n\
    \    $counts[$alphabet[37]]++;\n    $counts[$alphabet[38]]++;\n    $counts[$alphabet[39]]++;\n\
    \    $counts[$alphabet[40]]++;\n    $counts[$alphabet[41]]++;\n    $counts[$alphabet[42]]++;\n\
    \    $counts[$alphabet[43]]++;\n    $counts[$alphabet[44]]++;\n    $counts[$alphabet[45]]++;\n\
    \    $counts[$alphabet[46]]++;\n    $counts[$alphabet[47]]++;\n    $counts[$alphabet[48]]++;\n\
    \    $", "    $encodedMessage = strtoupper($message);\n    $vowels = \"AEIOU\"\
    ;\n    $vowelsCount = array_count_values(str_split($vowels));\n    $letterArray\
    \ = str_split($encodedMessage);\n    foreach ($letterArray as $key => $letter)\
    \ {\n        for ($i = 1; $i < $vowelsCount[$letter]; $i++) {\n            $encodedMessage\
    \ = str_replace($vowels, $key, $encodedMessage);\n        }\n    }\n    return\
    \ $encodedMessage;\n}\n", "  $vowels = \"aeiouAEIOU\";\n  $code = \"\";\n  for\
    \ ($i = 0; $i < strlen($message); $i++) {\n    $code .= substr($message, $i, 1)\
    \ . str_repeat($vowels, strlen($message) - $i - 1);\n  }\n  return $code;\n}\n",
  "  $vowels = array(\"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\"\
    ,\n      \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\"\
    , \"L\", \"M\",\n      \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\"\
    , \"V\", \"W\", \"X\",\n      \"Y\", \"Z\");\n  return strtr($message, \n    \
    \  array_combine($vowels, array_flip($vowels)));\n}\n", "    // your code here\n\
    \    $output = \"\";\n    for($i=0; $i<strlen($message); $i++) {\n        // get\
    \ two letters ahead of the vowel\n        $letter1 = substr($message, strlen($message)\
    \ - $i, 1);\n        $letter2 = substr($message, strlen($message) - $i - 2, 1);\n\
    \        // get letter to replace vowel with\n        $letter3 = substr($message,\
    \ strlen($message) - $i - 3, 1);\n        \n        // swap case\n        $letter1\
    \ = strtoupper($letter1);\n        $letter2 = strtoupper($letter2);\n        \n\
    \        // replace vowel\n        if($letter1==\"A\" || $letter2==\"A\" || $letter1==\"\
    E\" || $letter2==\"E\" || $letter1==\"I\" || $letter2==\"I\" || $letter1==\"O\"\
    \ || $letter2==\"O\" || $letter1==\"U\" || $letter2==\"U\") {\n            if($letter3==\"\
    A\") {\n                $letter3 = \"a\";\n            } else if($letter3==\"\
    B\") {\n                $letter3 = \"b\";\n            } else if($letter3==\"\
    C\") {\n                $letter3 = \"c\";\n            } else if($letter3==\"\
    D\") {\n                $letter3 = \"d\";\n            } else if($letter3==\"\
    E\") {\n                $letter3 = \"e\";\n            } else if($letter3==\"\
    F\") {\n                $letter3 = \"f\";\n            } else if($letter3==\"\
    G\") {\n                $letter3 = \"g\";\n            } else if($letter3==\"\
    H\") {\n                $letter3 = \"h\";\n            } else if($letter3==\"\
    I\") {\n                $letter3 = \"i\";\n            } else if($letter3==\"\
    J\") {\n                $letter3 = \"j\";\n            } else if($letter3==\"\
    K\") {\n                $letter3 = \"k\";\n            } else if($letter3==\"\
    L\") {\n                $letter3 = \"l\";\n            } else if($letter3==\"\
    M\") {\n                $letter3 = \"m\";\n            } else if($letter3==\"\
    N\") {\n                $letter3 = \"n\";\n            } else if($letter3==\"\
    O\") {\n                $letter3 = \"o\";\n            } else if($letter3==\"\
    P\") {\n                $letter3 = \"p\";\n            } else if($letter3==\"\
    Q\") {\n                $letter3 = \"q\";\n            } else if($letter3==\"\
    R\") {\n                $letter3 = \"r\";\n            } else if($letter3==\"\
    S\") {\n                $letter3 = \"s\";\n            } else if($letter3==\"\
    T\") {\n                $", "    $enc = \"\";\n    $arr = str_split($message);\n\
    \    for ($i=0; $i < count($arr); $i++) {\n        // Get the letter that is 2\
    \ places ahead of the vowel\n        $prev = $arr[$i-1];\n        $new = $arr[($i+2)%count($arr)];\n\
    \        $enc .= $prev . $new;\n    }\n    return $enc;\n}", "    // your code\
    \ goes here\n}\n", "    $output = '';\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    for ($i = 0; $i < strlen($message); $i++) {\n        if ($message[$i] >=\
    \ 'a' && $message[$i] <= 'z') {\n            $output .= $message[$i];\n      \
    \  }\n        else if (in_array($message[$i], $vowels)) {\n            $output\
    \ .= $message[$i];\n        }\n        else {\n            $output .= strtoupper($message[$i]);\n\
    \        }\n    }\n    return $output;\n}\n", "  return strtr(strtoupper($message),\
    \ \n    array(\"A\" => \"t\", \"B\" => \"k\", \"C\" => \"h\", \"D\" => \"s\",\
    \ \"E\" => \"g\",\n          \"F\" => \"f\", \"G\" => \"s\", \"H\" => \"k\", \"\
    I\" => \"s\", \"J\" => \"c\",\n          \"K\" => \"g\", \"L\" => \"s\", \"M\"\
    \ => \"m\", \"N\" => \"n\", \"O\" => \"o\",\n          \"P\" => \"p\", \"Q\" =>\
    \ \"o\", \"R\" => \"r\", \"S\" => \"c\", \"T\" => \"t\",\n          \"U\" => \"\
    u\", \"V\" => \"v\", \"W\" => \"w\", \"X\" => \"x\", \"Y\" => \"y\",\n       \
    \   \"Z\" => \"z\"));\n}\n", "  return strtr(strtolower($message), \n        \
    \       array('a' => 't', 'b' => 'b', 'c' => 'c', 'd' => 'g', \n             \
    \        'e' => 'y', 'f' => 's', 'g' => 'g', 'h' => 'h', \n                  \
    \   'i' => 'i', 'j' => 'j', 'k' => 'k', 'l' => 'l', \n                     'm'\
    \ => 'n', 'n' => 'n', 'o' => 'o', 'p' => 'p', \n                     'q' => 'q',\
    \ 'r' => 'p', 's' => 's', 't' => 's', \n                     'u' => 'u', 'v' =>\
    \ 'v', 'w' => 'w', 'x' => 'x', \n                     'y' => 'y', 'z' => 'z',\
    \ '0' => '0', '1' => '1', \n                     '2' => '2', '3' => '3', '4' =>\
    \ '4', '5' => '5', \n                     '6' => '6', '7' => '7', '8' => '8',\
    \ '9' => '9')\n               );\n}\n", "    $vowels = array(\"a\", \"e\", \"\
    i\", \"o\", \"u\");\n    $key = array_flip($vowels);\n    $message = str_replace($vowels,\
    \ array_keys($key), $message);\n    $message = preg_replace_callback('/.(.)/',\
    \ function($matches) {\n        return $key[$matches[1]];\n    }, $message);\n\
    \    return $message;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks. This is\
    \ what I was looking for, but my implementation was a lot more complicated than\
    \ that. I'll post my solution based on your answer. Thanks again!\n<|/ c |>\n\
    <| a tags=php,encryption |>\nOkay, I figured it out based on this answer:\n<code>",
  "    return strtr($message, [\n        'a'=>'z',\n        'b'=>'y',\n        'c'=>'x',\n\
    \        'd'=>'w',\n        'e'=>'v',\n        'f'=>'u',\n        'g'=>'t',\n\
    \        'h'=>'s',\n        'i'=>'r', \n        'j'=>'q',\n        'k'=>'p',\n\
    \        'l'=>'o',\n        'm'=>'n',\n        'n'=>'m',\n        'o'=>'l',\n\
    \        'p'=>'k',\n        'q'=>'j', \n        'r'=>'i', \n        's'=>'h',\
    \ \n        't'=>'g', \n        'u'=>'f', \n        'v'=>'e', \n        'w'=>'d',\
    \ \n        'x'=>'b', \n        'y'=>'a', \n        'z'=>'c',\n        ' '=>'-',\n\
    \    ]);\n}", "  $encoded = '';\n  for ($i = 0, $size = strlen($message); $i <\
    \ $size; ++$i) {\n    $char = substr($message, $i, 1);\n    if (ctype_upper($char))\
    \ {\n      $encoded .= strtoupper($char);\n    } else if (ctype_lower($char))\
    \ {\n      $encoded .= strtolower($char);\n    } else if (ctype_alpha($char))\
    \ {\n      $letter = ctype_upper($char) ? strtoupper(substr($char, 0, 1)) : strtolower(substr($char,\
    \ 0, 1));\n      $vowel = substr($char, 1);\n      $encoded .= $letter . substr($vowel,\
    \ 0, 2);\n    }\n  }\n  return $encoded;\n}", "  // TODO: Complete this function\n\
    }", "    $messageParts = str_split($message);\n    sort($messageParts);\n\n  \
    \  $encodedMessage = '';\n    $vowels = 'aeiou';\n    foreach ($messageParts as\
    \ $i => $char) {\n        if ($i % 2 == 0) {\n            $encodedMessage .= $char;\n\
    \        } else {\n            $encodedMessage .= $vowels[$i / 2 - 1] . substr($vowels,\
    \ $i / 2);\n        }\n    }\n    return $encodedMessage;\n}\n", "    $coded_message\
    \ = \"\";\n    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    $vowels = \"aeiouy\"\
    ;\n    for ($i = 0; $i < strlen($message); $i++) {\n        $coded_message .=\
    \ substr($message, $i, 1);\n        $coded_message .= $alphabet[(strpos($vowels,\
    \ $coded_message[$i]) + 2)];\n    }\n    return $coded_message;\n}\n", "    //\
    \ Write your code here.\n}\n", "    $alphabet = str_split('abcdefghijklmnopqrstuvwxyz');\n\
    \    $result = '';\n    $len = strlen($message);\n    \n    for ($i = 0; $i <\
    \ $len; $i++) {\n        $thisLetter = $message[$i];\n        $nextLetter = $alphabet[$i\
    \ % 6];\n        \n        $result .= $thisLetter;\n        $result .= $nextLetter;\n\
    \    }\n\n    return $result;\n}\n</code>\n<|/ a tags=php,string,algorithm |>\n\
    <| c |>\nThis algorithm is incorrect. Example: encode(\"test\") outputs \"TGG\"\
    . Your algorithm outputs \"TGST\". Also, the example does not work.\n<|/ c |>\n\
    <| c |>\n, sorry, but I can't figure out what you're getting at. Both my algorithm\
    \ and yours produce the same output for the example you gave. As far as your example,\
    \ the letters in the second line are in reverse alphabetical order, so they will\
    \ swap in reverse as well. Perhaps you could clarify what you mean?\n<|/ c |>\n\
    <| c |>\nI see the confusion. My comment wasn't intended as a criticism. My mistake.\
    \ Your solution is correct. My comment was intended as you correctly said that\
    \ it is incorrect due to two mistakes in the provided algorithm (although I was\
    \ unable to understand the two mistakes even after reading your comment).\n<|/\
    \ c |>\n<| c |>\nI've updated my answer. I added a function that solves the problem\
    \ using a loop.\n<|/ c |>\n<| c |>\nNice use of modulo arithmetic. I was trying\
    \ to implement the function using recursion. :)\n<|/ c |>\n<| a tags=php,string,algorithm\
    \ |>\nOk, I think I've got it. First of all, let's rewrite the code a little.\
    \ The algorithm is as follows:\n<code>", "    \n    // We use a stack to hold\
    \ the letters that should be in front of each vowel \n    // so that we can keep\
    \ track of when they should be swapped.  \n    $stack = array();\n    \n    //\
    \ For each letter in the message...\n    for($i = 0; $i < strlen($message); $i++)\
    \ {\n        // Get the letter at $i\n        $letter = $message[$i];\n      \
    \  // If the letter is a vowel\n        if($letter === \"a\" || $letter === \"\
    e\" || $letter === \"i\" || $letter === \"o\" || $letter === \"u\") {\n      \
    \      // Then add it to the stack\n            array_push($stack, $letter);\n\
    \        } else {\n            // Otherwise, we need to reverse the letter\n \
    \           array_push($stack, $letter);\n            array_push($stack, $stack[strlen($stack)\
    \ - 2]);\n        }\n    }\n    \n    // Now that we have our stack of letters,\
    \ we can iterate through the message\n    // and swap the letters accordingly.\
    \  \n    for($i = 0; $i < strlen($message); $i++) {\n        $letter = $message[$i];\n\
    \        if($letter === \"a\") {\n            $message[$i] = $stack[0];\n    \
    \    } elseif($letter === \"e\") {\n            $message[$i] = $stack[1];\n  \
    \      } elseif($letter === \"i\") {\n            $message[$i] = $stack[2];\n\
    \        } elseif($letter === \"o\") {\n            $message[$i] = $stack[3];\n\
    \        } elseif($letter === \"u\") {\n            $message[$i] = $stack[4];\n\
    \        }\n    }\n    \n    return $message;\n}\n", "    $result = \"\";\n  \
    \  for($i = 0; $i < strlen($message); $i++) {\n        $char = substr($message,\
    \ $i, 1);\n        $result .= strtoupper($char);\n        $result .= strtoupper(substr($char,\
    \ -1));\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php dscore=0 |>\n\
    <| c |>\nThat code is not working as expected. In the second example \"Test message\"\
    , it only returns \"R\" instead of \"TKSR\".\n<|/ c |>\n<| a dscore=0 tags=php\
    \ |>\nJust in case somebody is looking for a way to get it done without reinventing\
    \ the wheel, here is what I got using strtr():\n<code>\n<?php", "    $coded =\
    \ \"\";\n    $vowels = \"aeiouAEIOU\";\n    $letters = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n\n    for ($i = 0; $i < strlen($message); $i++) {\n        $coded .= $message[$i];\n\
    \        $letter = strtolower($message[$i]);\n        for ($x = $i; $x < strlen($message);\
    \ $x++) {\n            if ($x == $i) {\n                $coded .= $letters[$i];\n\
    \            } else {\n                $coded .= $letters[$i];\n            }\n\
    \            if ($letter == $vowels[$x]) {\n                $coded .= $letters[$x\
    \ - 2];\n            }\n        }\n    }\n    return $coded;\n}\n", "    $vowels\
    \ = \"aeiouy\";\n    $vowelsArr = [];\n    foreach ($vowels as $v) $vowelsArr[]\
    \ = strtolower($v);\n    $consonants = \"bcdfghjklmnpqrstvwxz\";\n    $consonantsArr\
    \ = [];\n    foreach ($consonants as $c) $consonantsArr[] = strtolower($c);\n\
    \    $code = \"\";\n    foreach (str_split($message) as $c) {\n        $code .=\
    \ ($c = strtolower($c));\n        if (in_array($c, $vowelsArr))\n            $code\
    \ .= $vowelsArr[array_search($c, $vowelsArr)+1];\n        else\n            $code\
    \ .= $consonantsArr[array_search($c, $consonantsArr)+1];\n    }\n    return $code;\n\
    }", "    \n}", "  $encoded = '';\n  $alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n \
    \ for ($i = 0; $i < strlen($message); $i++) {\n    if (ctype_upper($message[$i]))\
    \ {\n      $encoded = $alpha[ord($message[$i]) - ord('A')] + $encoded;\n    }\
    \ else {\n      $encoded = $message[$i] + $encoded;\n    }\n  }\n  return $encoded;\n\
    }\n", "  $encoded = \"\";\n  $pos = strlen($message) - 1;\n  for ($i = 0; $i <\
    \ strlen($message); $i++) {\n    $a = $message[$i];\n    $b = $message[$pos];\n\
    \    $c = $message[$pos - 1];\n    if (($a == \"a\") || ($a == \"A\")) { $encoded.=\"\
    AEIOU\"[$c]; }\n    else if (($a == \"e\") || ($a == \"E\")) { $encoded.=\"AEIOU\"\
    [$b]; }\n    else if (($b == \"e\") || ($b == \"E\")) { $encoded.=\"AEIOU\"[$c];\
    \ }\n    else { $encoded.=\"AEIOU\"[$a]; }\n    $pos--;\n  }\n  return $encoded;\n\
    }\n", "  $vowels = \"aeiouyAEIOUY\";\n  $output = \"\";\n  foreach (str_split($message)\
    \ as $letter) {\n    if (in_array($letter, $vowels)) {\n      $output[] = chr(ord($letter)\
    \ - 1);\n    } else {\n      $output[] = chr(ord($letter) + 2);\n    }\n  }\n\
    \  return implode('', $output);\n}\n\necho encode($message);", "    // Your code\
    \ goes here\n    $alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    $translate = strtr($alphabet, array_flip($alphabet));\n    $translate =\
    \ strtr($translate, array_flip($translate));\n    $translate = strtr($translate,\
    \ array_flip($translate));\n\n    $words = preg_split('/\\s+/', $message);\n\n\
    \    foreach ($words as $key => $word) {\n        if (strlen($word) > 1) {\n \
    \           $words[$key] = $word . $translate[$word[0]];\n        }\n    }\n\n\
    \    return implode(\" \", $words);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    Nice answer, but I'm afraid I might have to go with Dan Wolf's answer because\
    \ it's much easier to understand.\n<|/ c |>\n<| c |>\nThe above is definitely\
    \ simpler, I wouldn't go for more complex approaches unless you really have to\n\
    <|/ c |>\n<| c |>\nI totally agree, especially after looking at the second answer\
    \ here.\n<|/ c |>\n<| a |>\n<code>\n<?php\n", "    $message = strtoupper($message);\n\
    \    $message = strtr($message, \n        array('a'=>\"A\", \"e\"=>\"E\", \"i\"\
    =>\"I\", \"o\"=>\"O\", \"u\"=>\"U\", '\"'=>\"'\", '\"'=>\"'\", '\"'=>\"'\", '\"\
    '=>\"'\", '\"'=>\"'\", '\"'=>\"'\", '\"'=>\"'\", '\"'=>\"'\", '\"'=>\"'\", '\"\
    '=>\"'\")\n    );\n    $message = str_replace('o', 'O', $message);\n    $message\
    \ = str_replace('i', 'I', $message);\n    $message = str_replace('e', 'E', $message);\n\
    \    $message = str_replace('u', 'U', $message);\n    $message = str_replace(\"\
    '\", '', $message);\n    $message = str_replace(\"'\", '', $message);\n    $message\
    \ = str_replace(\"'\", '', $message);\n    $message = str_replace(\"'\", '', $message);\n\
    \    $message = str_replace(\"'\", '', $message);\n    $message = str_replace(\"\
    '\", '', $message);\n    $message = str_replace(\"'\", '', $message);\n    $message\
    \ = str_replace(\"'\", '', $message);\n    $message = str_replace(\"'\", '', $message);\n\
    \    $message = str_replace(\"'\", '', $message);\n    $message = str_replace(\"\
    '\", '', $message);\n    $message = str_replace(\"'\", '', $message);\n    $message\
    \ = str_replace(\"'\", '', $message);\n    $message = str_replace(\"'\", '', $message);\n\
    \    $message = str_replace(\"'\", '', $message);\n    $message = str_replace(\"\
    '\", '', $message);\n    $message = str_replace(\"'\", '', $message);\n    $message\
    \ = str_replace(\"'\", '', $message);\n    $message = str_replace(\"'\", '', $message);\n\
    \    $message = str_replace(\"'\", '', $message);\n    $message = str_replace(\"\
    '\", '', $message);\n    $message = str_replace(\"'\", '', $message);\n    $message\
    \ = str_replace(\"'\", '', $message);\n    $message = str_replace(\"'\", '', $message);\n\
    \    $message = str_replace(\"'\", '', $message);\n    $message = str_replace(\"\
    '\", '', $message);\n    $message = str_replace(\"'\", '', $message);\n    $message\
    \ = str_replace(\"'\", '', $message);\n    $message = str_replace(\"'\", '', $message);\n\
    \    $message = str_replace(\"'\", '', $message);\n    $message = str_replace(\"\
    '\", '', $message);\n    $message = str_replace(\"'\", '', $message);\n    $message\
    \ = str_replace(\"'\", '', $message);\n    $message = str_replace(\"'\", '', $message);\n\
    \    $message = str_replace(\"'\", '', $message);\n    $message = str_replace(\"\
    '\", '', $message);\n    $message = str_replace(\"'\", '', $message);\n    $message\
    \ = str_replace(\"'\", '', $message);\n    $message = str_replace(\"'\", '', $message);"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
