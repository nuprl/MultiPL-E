name: HumanEval_35_max_element
language: php
prompt: "<?php\n// Return maximum element in the array.\n// >>> max_element(array(1,\
  \ 2, 3))\n// 3\n// >>> max_element(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n\
  // 123\nfunction max_element($l) {\n"
tests: "function candidate(...$args) {\n    return max_element(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 2, 3)) !== 3) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10))\
  \ !== 124) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["\treturn count($l) > 0 ? max($l) : null;\n}\n", "    $l = $l ?: array();\n\
    \    $l2 = array_slice($l, 1);\n    reset($l);\n    while (list($key, $val)=each($l))\
    \ {\n        if ($val > max($l2, $key)) {\n            $max = $val;\n        }\n\
    \    }\n    return $max;\n}\n</code>\n<|/ a tags=max,php,arrays |>\n<| c |>\n\
    This won't work if there are duplicate max values\n<|/ c |>\n<| a dscore=4 |>\n\
    <code>\narray_reduce($array, function($c, $v) { return max($c, $v); });\n</code>\n\
    <|/ a tags=max,php,arrays |>\n<| c |>\nThe last line is not working as expected\
    \ on multidimensional arrays\n<|/ c |>\n<| c |>\nthe [array_reduce](http://php.net/manual/en/function.array-reduce.php)\
    \ function works perfectly on multidimensional arrays.\n<|/ c |>\n<| c |>\nI dont\
    \ think so because array_reduce works with two parameters and you are passing\
    \ in three.\n<|/ c |>\n<| a dscore=3 |>\nThis one is the most easiest way to find\
    \ maximum element of array in php and faster than other methods \n<code>\n$maxElement\
    \ = array_reduce($array, function($c,$v) { return max($c,$v); });\n</code>\n<|/\
    \ a tags=max,php,arrays |>\n<| c |>\nThe last line is not working as expected\
    \ on multidimensional arrays\n<|/ c |>\n<| c |>\nThe last line is not working\
    \ as expected on multidimensional arrays.\n<|/ c |>\n<| a tags=max,php,arrays\
    \ dscore=3 |>\n<code>\n$max = 0;\nforeach ($arr as $val)\n{\n    if ($val > $max)\
    \ $max = $val;\n}\n</code>\n<|/ a |>\n<| c |>\nThe last line is not working as\
    \ expected on multidimensional arrays\n<|/ c |>\n<| c |>\nthis works if you use\
    \ `array_reduce`, but `array_reduce` is much slower than the manual loop, which\
    \ is already in the question.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n$max = 0;\n\
    foreach ($arr as $key => $value) {\n    if ($value > $max) $max = $value;\n}\n\
    </code>\n<|/ a tags=max,php,arrays |>\n<| c |>\nThe last line is not working as\
    \ expected on multidimensional arrays\n<|/ c |>\n<| a ", "\t$max = reset($l);\n\
    \tforeach ($l as $value) {\n\t\tif ($value < $max) {\n\t\t\t$max = $value;\n\t\
    \t}\n\t}\n\treturn $max;\n}", "    if (!$l)\n        return false;\n    foreach\
    \ ($l as $e) {\n        if ($e != ($v = ($e)))\n            $v = $e;\n    }\n\
    \    return $v;\n}", "  $lh = array_flip($l);\n  return reset($lh) > key($lh)\
    \ ? key($lh) : max($l);\n}\n", "  return PHPUnit_Util_Array::max($l);\n}\n\n/**\n\
    \ * Returns the key of a multi-dimensional array.\n *\n * @param array|object\
    \ $array\n * @param int|string  $key\n *\n * @return array|null\n */", "    return\
    \ max($l);\n}\n", "    $ls = array_reverse($l);\n    $m = $ls[0];\n    foreach($ls\
    \ as $val) {\n        if ($val > $m) $m = $val;\n    }\n    return $m;\n}\n",
  "    return end($l) + 1;\n}\n", "  $v = array_shift($l);\n  foreach ($l as $key\
    \ => $value) {\n    if ($value > $v) {\n      $v = $value;\n    }\n  }\n  return\
    \ $v;\n}\n", "    if (is_array($l)) {\n        return array_reduce($l, function($a,\
    \ $b) {\n            return $a < $b ? $a : $b;\n        });\n    }\n    return\
    \ false;\n}\n", "  $a = array_keys($l);\n  foreach ($a as $i) {\n    if ($l[$i]\
    \ > $l[min($a, $i + 1)]) {\n      $temp = min($a, $i + 1);\n      unset($a[$temp]);\n\
    \      $a[$i] = $temp;\n    }\n  }\n  return $a[count($a)];\n}", "    return max($l);\n\
    }", "    if (!is_array($l)) {\n        throw new Exception(\"Parameter $l must\
    \ be an array.\");\n    }\n    array_walk($l, create_function('&$v', '$v = max($v);'));\n\
    \    return array_pop($l);\n}\n", "\tasort($l);\n\tfor ($i=count($l)-1; $i>0;\
    \ $i--) {\n\t\tif ($l[$i] == $l[$i-1]) {\n\t\t\tunset($l[$i]);\n\t\t\tcontinue;\n\
    \t\t}\n\t\tbreak;\n\t}\n\treturn $l[0];\n}\n\n", "    if (empty($l)) {\n     \
    \   return null;\n    }\n\n    $largest = array_pop($l);\n    foreach ($l as $element)\
    \ {\n        if ($element > $largest) {\n            $largest = $element;\n  \
    \      }\n    }\n\n    return $largest;\n}\n</code>\n<|/ a |>\n<| c |>\nThis answer\
    \ does not provide an answer to the question. The question was about how to do\
    \ the maximum value in a given array. This does not do it.\n<|/ c |>\n<| c |>\n\
    The question was about how to do the maximum value in a given array. This does\
    \ not do it. So this does not answer the question.\n<|/ c |>\n<| c |>\nSorry for\
    \ my mistake, I've read it incorrectly and was unsure what was the question, I've\
    \ edited my answer to fix it.\n<|/ c |>\n<| c |>\nThis solution does not work\
    \ if all values are equal as it will always give the first.\n<|/ c |>\n<| c |>\n\
    I guess this would also work for values like \"1\", \"2\" and \"3\". But as they\
    \ have to be unique, it's only a solution.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n\
    $max_value = max($array);\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nWorks like\
    \ a charm! Thanks!\n<|/ c |>\n<| c |>\nWorks great for me!\n<|/ c |>\n<| c |>\n\
    Best answer on here, since it works for negative numbers as well\n<|/ c |>\n<|\
    \ c |>\nThanks, works great!\n<|/ c |>\n<| c |>\nThis will not work for array\
    \ containing `null` values.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array\
    \ = array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n\n$maxValue = 0;\nforeach($array\
    \ as $val) {\n   if ($val > $maxValue) $maxValue = $val;\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$max = max($array);\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis one is the best, since it works with negative numbers too.\n\
    <|/ c |>\n<| c |>\nIt is the correct answer and it also works for negative numbers.\n\
    <|/ c |>\n<| c |>\nThis is one of the only solutions that works also for negative\
    \ numbers\n<|/ c |>\n<|", "  $max = NULL;\n  foreach ($l as $key => $value) {\n\
    \    if ($value === $max) {\n      unset($l[$key]);\n      return $max;\n    }\
    \ elseif ($max === NULL) {\n      $max = $value;\n    }\n  }\n  return $max;\n\
    }\n", "  $s = sizeof($l);\n  $n = array_pop($l);\n  for ($i=0; $i<$s; $i++) {\n\
    \    if ($l[$i] > $n)\n      $n = $l[$i];\n  }\n  return $n;\n}\n", "\tif (is_array($l))\
    \ {\n\t\t$i = count($l);\n\t\tif ($i == 0) return null;\n\t\t$m = max($l);\n\t\
    \treturn array_search($m, $l);\n\t}\n\treturn null;\n}\n", "  foreach ($l as $v)\
    \ {\n    if ($v > $element) return $v;\n  }\n  return $element;\n}\n", "    return\
    \ $l[0];\n}\n", "    $r = null;\n    foreach ($l as $v) {\n        if ($r ===\
    \ null || $v > $r) {\n            $r = $v;\n        }\n    }\n    return $r;\n\
    }", "    $max = -INF;\n    foreach ($l as $e) {\n        if ($e > $max) {\n  \
    \          $max = $e;\n        }\n    }\n    return $max;\n}\n</code>\n<|/ a |>\n\
    <| a |>\n<code>", "\tlist($l[0], $l[1]) = array($l[1], $l[0]);\n\tforeach ($l\
    \ as &$val) {\n\t\tif ($val < 0)\n\t\t\t$val = abs($val);\n\t}\n\treturn array_pop($l);\n\
    }\n", "\t$n = count($l);\n\tif ($n == 0) {\n\t\treturn false;\n\t}\n\tfor ($i\
    \ = 0; $i < $n; $i++) {\n\t\t$v = $l[$i];\n\t\t$j = 0;\n\t\twhile ($j < $n &&\
    \ $v <= $l[$j]) {\n\t\t\t$j++;\n\t\t}\n\t\tif ($j == $n) {\n\t\t\treturn $v;\n\
    \t\t}\n\t}\n\treturn false;\n}", "  if (empty($l)) return null;\n  foreach ($l\
    \ as $e) {\n    if ($e == max($l)) {\n      return $e;\n    }\n  }\n  return null;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=php |>\n<code>\n<?php\n", "    $r = array_pop($l);\n\
    \    if ($r === false) return false;\n    $r = current($l);\n    return $r > $r\
    \ ? $r : max_element($l);\n}\n", "    if (count($l) === 0) {\n        trigger_error('max_element()\
    \ expects an array as argument', E_USER_WARNING);\n        return false;\n   \
    \ }\n    $max = current($l);\n    foreach ($l as $i => $el) {\n        if ($el\
    \ > $max) {\n            $max = $el;\n        }\n    }\n    return $max;\n}\n\n\
    /**\n * Find keys with values in a passed array.\n *\n * @param  array $array\
    \ The passed array.\n * @return array Array containing all keys with values.\n\
    \ */", "    $sort = $l;\n    sort($sort);\n    $max = reset($sort);\n    for ($i\
    \ = count($sort) - 1; $i >= 0; --$i) {\n        if ($max < $sort[$i]) {\n    \
    \        $max = $sort[$i];\n        }\n    }\n    return $max;\n}\n", "  $max_val\
    \ = PHP_INT_MAX;\n  foreach ($l as $val) {\n    if ($val > $max_val) {\n     \
    \ $max_val = $val;\n    }\n  }\n  return $max_val;\n}\n/**\n * Return maximum\
    \ element in the array.\n *\n * @param $array\n *   The array to find the maximum\
    \ element of.\n *\n * @return\n *   The maximum element in the array.\n */", " \
    \   if (!$l) return null;\n    $m = null;\n    foreach ($l as $n) {\n        if\
    \ ($n >= 0) {\n            if (is_null($m) || $n < $m)\n                $m = $n;\n\
    \        }\n    }\n    return $m;\n}\n</code>\n<|/ a |>\n<| c |>\n+1: This answer\
    \ actually uses `array_reduce()` rather than looping manually like in Ben's answer.\
    \ Nice!\n<|/ c |>\n<| a tags=arrays,php |>\n<code>", "    // Make sure $l is an\
    \ array\n    if (empty($l)) {\n        return null;\n    }\n    // Sort $l\n \
    \   sort($l);\n    // Find the maximum value\n    $max = array_pop($l);\n    return\
    \ $max;\n}\n", "    if (!$l || !is_array($l)) {\n        trigger_error(\"max_element()\
    \ expects parameter 1 to be array\", E_USER_WARNING);\n        return false;\n\
    \    }\n    $n = count($l);\n    for ($i = 0; $i < $n - 1; ++$i) {\n        if\
    \ ($l[$i] > $l[$i + 1]) {\n            $max = $l[$i];\n        } else {\n    \
    \        $max = $l[$i + 1];\n        }\n    }\n    return $max;\n}\n", "    $sorted\
    \ = array_reverse($l);\n    $result = $sorted[0];\n    for ($i = 1;$i < count($sorted);\
    \ $i++) {\n        if ($sorted[$i] > $result) {\n            $result = $sorted[$i];\n\
    \        }\n    }\n    return $result;\n}\n", "    $max = reset($l);\n    for\
    \ ($i = count($l) - 1; $i >= 0; $i--) {\n        $cmp = current($l) - $max;\n\
    \        if ($cmp !== 0) {\n            $max = prev($l, $i);\n        }\n    }\n\
    \    return $max;\n}", "  $max = array_pop($l);\n  while (count($l)) {\n    $max\
    \ = max($max, array_pop($l));\n  }\n  return $max;\n}\n", "\t$sorted = array_values($l);\n\
    \treturn $sorted[count($sorted) - 1];\n}\n", "    // @codingStandardsIgnoreStart\n\
    \    if (!is_array($l)) {\n        throw new InvalidArgumentException('First parameter\
    \ is not an array');\n    }\n    // @codingStandardsIgnoreEnd\n\n    return current($l);\n\
    }\n\n/**\n * Finds keys of an associative array with the greatest value of the\
    \ specified key.\n *\n * @param array $array An associative array to search in.\n\
    \ * @param string $key   The key by which to search.\n *\n * @return array An\
    \ array of the keys of the given array that have the greatest value of the specified\
    \ key.\n */", "    $r=$l[0];\n    foreach ($l as $k => $v) {\n        if ($v>$r)\
    \ {\n            $r=$v;\n        }\n    }\n    return $r;\n}", "  $max = reset($l);\n\
    \  foreach ($l as $item) {\n    if ($item > $max) {\n      $max = $item;\n   \
    \ }\n  }\n  return $max;\n}\n</code>\n<|/ a |>\n<| a tags=max,php |>\n<code>",
  "  return $l[count($l)-1];\n}\n", "\treturn (@end(array_reverse(array_keys($l))));\n\
    }\n", "    uksort($l, 'cmp');\n    $r = $l[0];\n    return $r;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a |>\nI've just finished porting my code from PHP 7 to PHP\
    \ 5.5 and I came up with this solution.\n<code>", "    $max = NULL;\n    foreach\
    \ ($l as $e) {\n        if ($max === NULL || $e > $max) $max = $e;\n    }\n  \
    \  return $max;\n}\n", "    if (count($l) !== 1) {\n        trigger_error('Too\
    \ many parameters in ' . __FUNCTION__, E_USER_WARNING);\n        return null;\n\
    \    }\n    $v = reset($l);\n    foreach ($l as $e) {\n        if ($e > $v) {\n\
    \            $v = $e;\n        }\n    }\n    return $v;\n}\n", "    // Make sure\
    \ $l is an array\n    if (!is_array($l)) {\n        throw new Exception('max_element()\
    \ expects an array');\n    }\n\n    $max = array_reduce($l, function ($max, $value)\
    \ {\n        if ($value >= $max) {\n            return $value;\n        }\n\n\
    \        return $max;\n    });\n\n    if ($max === false) {\n        throw new\
    \ Exception('max_element() expects an array');\n    }\n\n    return $max;\n}\n\
    </code>\n<|/ a tags=arrays,php,function,compare dscore=3 |>\n<| c |>\nThis is\
    \ more efficient than mine :-) But why return $max? This means you can only get\
    \ the max value by calling max_element. Since you return $max you do not need\
    \ the return at all. I think that is what your example is meant to do?\n<|/ c\
    \ |>\n<| c |>\n: Yes you are right. I was trying to avoid having to use `return`\
    \ inside the function. I think that is what you meant.\n<|/ c |>\n<| a tags=arrays,php,function,compare\
    \ |>\nYou could use an anonymous function in array_filter:\n<code>\n$result =\
    \ array_filter(\n    $list,\n    function($value) {\n        return $value <=\
    \ $max;\n    }\n);\n</code>\n<|/ a dscore=3 |>\n<| c |>\n+1 but you need to replace\
    \ \"return $value <= $max\" with \"return $value <= $max()\". And your solution\
    \ is more elegant.\n<|/ c |>\n<| c |>\n: Ah, I forgot to call the function...\
    \ That's why I didn't use an anonymous function. Thanks.\n<|/ c |>\n<| a |>\n\
    I do not think there is a native function in PHP which does that, but it's quite\
    \ easy to write one. \n<code>", "    $rv = null;\n    foreach ($l as $item) {\n\
    \        if ($item == null) {\n            return null;\n        }\n        if\
    \ ($rv === null) {\n            $rv = $item;\n        } elseif ($item > $rv) {\n\
    \            $rv = $item;\n        }\n    }\n    return $rv;\n}\n", "    if ($l\
    \ == null) return null;\n    if (is_array($l)) return $l[count($l)-1];\n    return\
    \ $l;\n}\n", "  $res = $l[0];\n  foreach ($l as $l) {\n    if ($res > $l) {\n\
    \      $res = $l;\n    }\n  }\n  return $res;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=arrays,functional-programming,php |>\nI think this solution would be\
    \ more elegant in my opinion.\n<code>\n<?php", "  // Return false on empty array\n\
    \  if (!$l) return FALSE;\n\n  // Return false if the array is empty or false\n\
    \  if (empty($l) || !is_array($l)) return FALSE;\n\n  $max = reset($l);\n  foreach\
    \ ($l as $key => $val) {\n    if ($val > $max) {\n      $max = $val;\n    }\n\
    \  }\n  return $max;\n}\n</code>\n<|/ a dscore=5 tags=function,arrays,php |>\n\
    <| c |>\nThanks for sharing this. I wondered how to return the max element of\
    \ an array, this works great.\n<|/ c |>\n<| a dscore=5 |>\nI like to use array_max()\
    \ for this. It is especially useful when doing multiple operations on a single\
    \ array.\n<code>\n$max_value = array_max($numbers);\n</code>\n<|/ a tags=function,arrays,php\
    \ |>\n<| c |>\nIt seems to work with multidimensional arrays too, e.g. `array_max(array(1,\
    \ 2, array(1, 2)));` returns `array(array(1, 2))`\n<|/ c |>\n<| c |>\narray_max()\
    \ doesn't work for multidimensional arrays.\n<|/ c |>\n<| c |>\nIt does work with\
    \ multidimensional arrays. But it looks like they don't work well with associative\
    \ arrays. I haven't tested this, but if you use array_combine() to combine numeric\
    \ keys with strings, the function doesn't work as expected.\n<|/ c |>\n<| c |>\n\
    Oh, I see why you say that. Sadly, it looks like array_combine() requires all\
    \ keys to be numeric. That's probably a good thing, since otherwise array_combine()\
    \ wouldn't be very useful.\n<|/ c |>\n<| a dscore=4 |>\nI use this function for\
    \ multidimensional arrays also.\n<code>", "  foreach ($l as $e) {\n    if ($e\
    \ == max($l)) {\n      return $e;\n    }\n  }\n}\n", "\t$s = $l = count($l);\n\
    \t$max = reset($l);\n\tfor ($i = 1; $i < $s; $i++) {\n\t\t$v = reset($l[$i]);\n\
    \t\tif ($v > $max) {\n\t\t\t$max = $v;\n\t\t\t$t = reset($l[$i]);\n\t\t}\n\t\t\
    next($l[$i]);\n\t}\n\treturn $t;\n}\n", "\t$l = is_array($l) ? $l : array($l);\n\
    \trsort($l);\n\treturn $l[0];\n}\n", "\tif (empty($l)) {\n\t\treturn null;\n\t\
    }\n\telseif ($l[0] < $l[1]) {\n\t\t$a = $l[0];\n\t\t$l[0] = $l[1];\n\t\t$l[1]\
    \ = $a;\n\t}\n\telseif ($l[0] > $l[1]) {\n\t\t$a = $l[0];\n\t\t$l[0] = $l[1];\n\
    \t\t$l[1] = $a;\n\t}\n\treturn $l[0];\n}", "    $max = PHP_INT_MAX;\n    foreach\
    \ ($l as $v) {\n        if ($v > $max) {\n            $max = $v;\n        }\n\
    \    }\n    return $max;\n}", "    $i = count($l);\n    while ($i-- > 0)\n   \
    \     if ($l[$i] > $l[$i-1]) return $l[$i];\n    return $l[0];\n}", "    return\
    \ end($l);\n}", "    // Convert array to a single dimensional array so we can\
    \ do our comparisons.\n    $l = array_reduce($l, function ($a, $b) {\n       \
    \ return $a < $b ? $a : $b;\n    });\n    return end($l);\n}\n</code>\n<|/ a tags=arrays,php\
    \ dscore=2 |>\n<| a |>\nOne liner:\n<code>\n$array = array(1, 2, 3);\necho max(array_slice($array,\
    \ count($array)-1, 1));\n</code>\n<|/ a tags=arrays,php dscore=2 |>\n<| a tags=arrays,php\
    \ |>\n<code>\n<?php", "    $s = array_keys($l);\n    return $s[count($s) - 1];\n\
    }\n", "    foreach ($l as $e)\n        if ($e > max($l)) return $e;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "    if (!is_array($l)) {\n    \
    \    return false;\n    }\n    $max = array_shift($l);\n    while (count($l))\
    \ {\n        $current = array_shift($l);\n        if ($current > $max) {\n   \
    \         $max = $current;\n        }\n    }\n    return $max;\n}\n", "    $a\
    \ = array_slice($l, 0, 1);\n    $c = count($a);\n    for ($i = 1; $i < $c; $i++)\
    \ {\n        if ($a[$i] > $a[$i - 1]) {\n            return $a[$i - 1];\n    \
    \    }\n    }\n    return $a[$c];\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c\
    \ |>\nNice, but this is really unreadable. I would just go with `max($l)`.\n<|/\
    \ c |>\n<| c |>\nAh, okay.  That makes sense.  I didn't realize there was such\
    \ a function.  Thanks!\n<|/ c |>\n<| c |>\n: No, no, no. Your code is far too\
    \ complicated and unreadable, and yet somehow you managed to come up with something\
    \ that does the same thing, but much more efficiently. This is just ridiculous.\
    \ It's a waste of time to re-write the `max_element` function for this particular\
    \ use case, and also an inappropriate use of *magic* (see [my answer](http://stackoverflow.com/a/28508252/1438393)).\
    \ Also, using `max` is a misuse of `max`. See http://stackoverflow.com/questions/14050282/why-does-a-function-return-the-maximum-of-the-number-of-elements-it-received/14050396#14050396\n\
    <|/ c |>\n<| c |>\nOh really?  You know, I just wanted to give the simplest answer,\
    \ not necessarily the best.\n<|/ c |>\n<| c |>\nIt's an interesting idea, but\
    \ I'd be more likely to think of it as an unnecessary use of *magic*. I'd also\
    \ argue that it only makes sense to use this as a performance optimisation, since\
    \ it makes `max_element` more expensive than it needs to be.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n<?php\n$array = [1,2,3,4,5];\n$key = array_search($array, max($array));\n\
    var_dump($array[$key]);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis will return\
    \ the first value that occurs in the array.\n<|/ c |>\n<| c |>\nyes, that's right!\
    \ I corrected my code now :)\n<|/ c |>\n<| a dscore=0 tags=php,arrays |>\nIf you\
    \ can use the splat operator, then you can use the max() function on any array\
    \ like so:\n<code>", "    if (count($l) === 0) {\n        return null;\n    }\n\
    \    $max = array_reduce($l, function ($carry, $item) {\n        if ($item > $carry)\
    \ {\n            return $item;\n        }\n        return $carry;\n    });\n \
    \   return $max;\n}\n", "  foreach ($l as $item) {\n    if ($item > max($item,\
    \ $l)) {\n      return $item;\n    }\n  }\n  return $l[0];\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| c |>\nJust a little update to this, if your array has null values\
    \ then you will need to put `return 0;` after your `if` statement.\n<|/ c |>\n\
    <| c |>\nNice answer. I'd probably use `array_search` instead of `array_search`\
    \ though. Just an FYI.\n<|/ c |>\n<| c |>\n: array_search returns false if the\
    \ value isn't found, so it only works for numeric arrays, not for non-numeric\
    \ ones, unfortunately.\n<|/ c |>\n<| a dscore=1 |>\nI have found a way myself\n\
    <code>", "\t$n = count($l);\n\tif ($n == 0) {\n\t\treturn null;\n\t}\n\tif ($n\
    \ == 1) {\n\t\treturn reset($l);\n\t}\n\t$max = $l[0];\n\tforeach ($l as $v) {\n\
    \t\tif ($v > $max) {\n\t\t\t$max = $v;\n\t\t}\n\t}\n\treturn $max;\n}\n", "  \
    \  $s = array();\n    foreach ($l as $k => $v) $s[$k] = max($v);\n    return $s[0];\n\
    }", "\t$r = max($l);\n\t$l = array_flip($l);\n\treturn $l[$r];\n}\n", "    $l\
    \ = is_array($l) ? $l : func_get_args();\n    if (count($l) == 0) return null;\n\
    \    $max = array_shift($l);\n    foreach ($l as $e) {\n        if ($e > $max)\
    \ {\n            $max = $e;\n        }\n    }\n    return $max;\n}", "    return\
    \ key($l);\n}\n", "  reset($l);\n  $r = current($l);\n  $max = $r;\n  while (current($l))\
    \ {\n    $r = next($l);\n    if ($r > $max) {\n      $max = $r;\n    }\n  }\n\
    \  return $max;\n}\n\n/**\n * Returns the key of a multidimensional array element\
    \ or $default if the\n * element does not exist. Search is performed recursively\
    \ on the array.\n */", "  return $l[count($l)-1];\n}\n\n/**\n * Test whether a\
    \ value is numeric.\n * @return bool True if numeric, false otherwise.\n */",
  "    $max = NULL;\n    foreach ($l as $value) {\n        if ($max === NULL || $value\
    \ > $max) {\n            $max = $value;\n        }\n    }\n\n    return $max;\n\
    }\n</code>\nOr you can use the built in array max function\n<|/ a tags=arrays,php,max\
    \ |>\n<| c |>\nThanks, this works perfectly for me. I'd love to know why this\
    \ was down voted.\n<|/ c |>\n<| c |>\nNo idea why either.\n<|/ c |>\n<| a dscore=0\
    \ tags=arrays,php,max |>\n<code>\n<?php\n$arr = array(4, 2, 2, 6, 5, 9, 5);\n",
  "  list($first, $rest) = array_pad($l, 2, '0');\n  $max = reset($rest);\n  foreach\
    \ ($rest as $e) {\n    $max = max($e, $max);\n  }\n  return $max;\n}\n", "\t$n\
    \ = count($l);\n\tif ($n == 0) {\n\t\treturn null;\n\t}\n\t$m = max($l);\n\tif\
    \ ($m == $l[0]) {\n\t\treturn null;\n\t}\n\tfor ($i = 1; $i < $n; $i++) {\n\t\t\
    if ($m  != $l[$i] || $l[$i] == $l[0]) {\n\t\t\treturn $m;\n\t\t}\n\t}\n\treturn\
    \ $m;\n}\n", "    return reset($l);\n}\n", "    $m = array_pop($l);\n    return\
    \ $m > array_reduce($l, function ($p, $q) { return $p < $q ? $p : $q; }, $m) ?\
    \ $m : $m;\n}", "  $max = reset($l);\n  while (list($key) = each($l)) {\n    if\
    \ ($key > $max) {\n      $max = $key;\n    }\n  }\n  return $max;\n}\n</code>\n\
    <|/ a dscore=4 |>\n<| a tags=max,arrays,php |>\nPHP has some nifty functions for\
    \ working with arrays. \n<code>\n$array = array(4, 5, 6);\n$max = max($array);\
    \ //$max is now 6\n</code>\nThe above example will return the largest value from\
    \ your array.\nIf you have a multi-dimensional array, you will want to loop through\
    \ it:\n<code>\n$array = array(array('a', 'b', 'c'), array('d', 'e', 'f'), array('g',\
    \ 'h', 'i'));\n$max = 0;\nforeach($array as $key => $value){\n    $max = ($value\
    \ > $max) ? $value : $max;\n}\necho $max; //h\n</code>\n<|/ a dscore=3 |>\n<|\
    \ c |>\nThe question wasn't about the max() function, but how to find max element\
    \ of array.\n<|/ c |>\n<| c |>\nAhh, sorry. I misread the question.\n<|/ c |>\n\
    <| c |>\n\"nifty functions\" is probably the wrong word.  They are certainly useful\
    \ functions, but they aren't always the best way to solve a problem.\n<|/ c |>\n\
    <| c |>\n, It's not exactly \"nifty\", but it's probably the best solution given\
    \ the context of the question (if they were looking for an answer to the original\
    \ question, not the code they were writing themselves).\n<|/ c |>\n<| c |>\n,\
    \ Yes they are. http://php.net/manual/en/function.max.php\n<|/ c |>\n<| a tags=max,arrays,php\
    \ |>\nI used an approach similar to the accepted answer, but used a while loop\
    \ rather than a foreach loop:\n<code>", "    foreach ($l as $e) {\n        if\
    \ ($e == max($l)) {\n            return $e;\n        }\n    }\n    return false;\n\
    }\n", "    if (count($l) == 0) return null;\n    $max = $l[0];\n    for ($i =\
    \ 1; $i < count($l); $i++) {\n        if ($l[$i] > $max) {\n            $max =\
    \ $l[$i];\n        }\n    }\n    return $max;\n}\n</code>\n<|/ a dscore=1 tags=php,arrays\
    \ |>\n<| a dscore=1 |>\nAs far as I know, there is no such built in function that\
    \ would return the largest value in the array, however you can create your own\
    \ function:\n<code>", "    $l = is_array($l) ? $l : array($l);\n    return $l[array_search(max($l),\
    \ $l)];\n}\n", "  assert(is_array($l));\n  assert(count($l) > 0);\n  $max = reset($l);\n\
    \  foreach ($l as $e)\n    if ($e > $max)\n      $max = $e;\n  return $max;\n\
    }\n", "  if (is_array($l)) {\n    return array_reduce($l, function ($a, $b) {\n\
    \      return max($a, $b);\n    });\n  }\n\n  return null;\n}\n\n/**\n * Wrapper\
    \ for array_reduce to make it a bit more usable. Supports\n * associative and\
    \ numeric keys.\n */", "  return $l[0] ?\n         max($l) :\n         min($l);\n\
    }\n", "    $l = array_reverse($l);\n    return current($l);\n}\n", "  if (is_array($l))\n\
    \  {\n    return key($l);\n  }\n  return null;\n}\n</code>\n<|/ a |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>", "    if ($l[0] === null) {\n        return null;\n    }\n    $max\
    \ = reset($l);\n    foreach ($l as $val) {\n        if ($val > $max) {\n     \
    \       $max = $val;\n        }\n    }\n    return $max;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nNot bad, but this doesn't account for the fact that PHP doesn't have\
    \ first-class anonymous functions.\n<|/ c |>\n<| c |>\nWhy not? The code works\
    \ with closures.\n<|/ c |>\n<| c |>\nOh, I'm sorry, I thought you were referring\
    \ to the fact that the syntax that defines the closure is different from that\
    \ which gets returned from calling `array_map()`. You have a good point, though.\n\
    <|/ c |>\n<| a dscore=2 |>\nAs far as I know, array_reduce can't do that.\nA simple\
    \ approach is to use array_slice to get the last item of the array and then apply\
    \ a comparison function on it (using array_reduce).\nFor example, in your case:\n\
    <code>\narray_reduce($array, 'max', $array[count($array) - 1]);\n", "\tasort($l);\n\
    \t$l = array_reverse($l);\n\tdo {\n\t\t$i = array_pop($l);\n\t} while ( !$i &&\
    \ $l);\n\treturn (isset($l[0])) ? $l[0] : $i;\n}\n", "\treturn array_reduce($l,\
    \ function($max, $elem) { return max($max, $elem); }, PHP_INT_MAX);\n}\n", " \
    \   $v = array_reduce($l, function($x, $y) {\n        if ($x == $y) $x++;\n  \
    \      return $x;\n    });\n    return count($l) === 0 ? $v : $v;\n}\n", "   \
    \ $rev = false;\n    $l = array_reverse($l);\n    $l = array_filter($l, function($e){\n\
    \        return $e !== false && $e > 0;\n    }, ARRAY_FILTER_USE_BOTH);\n    if\
    \ (count($l) == 0) {\n        return false;\n    }\n    $last = array_pop($l);\n\
    \    if ($last === false) {\n        return false;\n    }\n    sort($l);\n   \
    \ return $last > 0 && array_pop($l) === false ? $last : $last;\n}\n", "    if\
    \ (is_array($l)) {\n        $max = reset($l);\n        $maxkey = key($l);\n  \
    \      foreach ($l as $k => $v) {\n            if ($v > $max) {\n            \
    \    $max = $v;\n                $maxkey = $k;\n            }\n        }\n   \
    \     return $max;\n    }\n}\n", "    if ($l===array()) return null;\n    $i=0;\n\
    \    $max = $l[0];\n    foreach ($l as $e) {\n        if ($e>$max) {\n       \
    \     $max = $e;\n            $i = $i;\n        } elseif ($e===$max) {\n     \
    \       $i++;\n        }\n    }\n    return $max;\n}\n", "  sort($l);\n  return\
    \ $l[count($l) - 1];\n}", "    return reset($l);\n}\n\n/**\n * Return the minimum\
    \ element of the given list\n *\n * @param array $l a list of elements\n * @return\
    \ mixed the minimum element\n * @since 6.0.0\n */", "\t$a = null;\n\t$l = is_array($l)\
    \ ? $l : array($l);\n\t$i = count($l);\n\t\n\tfor ($j = 0; $j < $i; $j++) {\n\t\
    \t$a = $l[$j];\n\t\tif ($l[$j] > $a[$j]) {\n\t\t\t$a = $l[$j];\n\t\t}\n\t}\n\t\
    \n\treturn $a;\n}\n", "    // Return null if the array is empty.\n    if (empty($l))\
    \ return null;\n\n    // Initialize $max to the first element in the array.\n\
    \    $max = reset($l);\n\n    // Loop over the rest of the array and update $max\
    \ if needed.\n    foreach (array_slice($l, 1) as $elm) {\n        if ($elm > $max)\
    \ {\n            $max = $elm;\n        }\n    }\n\n    return $max;\n}\n", " \
    \   if (is_numeric(current($l))) {\n        reset($l);\n        $last = current();\n\
    \    }\n    $max = key($l);\n    while (current($l)) {\n        $current = key($l);\n\
    \        if ($current > $max) {\n            $max = $current;\n        }\n   \
    \     next($l);\n        if ($current == $last) {\n            return $max;\n\
    \        }\n        $last = $current;\n    }\n    return $max;\n}\n", "    $max\
    \ = null;\n    foreach($l as $e) {\n        if ($max===null || $e>$max) {\n  \
    \          $max = $e;\n        }\n    }\n    return $max;\n}\n", "\t$max = reset($l);\n\
    \tforeach ($l as $i => $val) {\n\t\tif ($val > $max) {\n\t\t\t$max = $val;\n\t\
    \t}\n\t}\n\treturn $max;\n}\n", "\tlist($min, $max) = $this->minmax($l);\n\treturn\
    \ $max;\n}\n", "    foreach ($l as $item) {\n        if ($item > max($l)) {\n\
    \            $result = $item;\n        }\n    }\n    return $result;\n}\n", " \
    \   if (!count($l))\n        return NULL;\n\n    $v = array_pop($l);\n    do {\n\
    \        foreach ($l as $e) {\n            if ($e > $v)\n                $v =\
    \ $e;\n        }\n    } while (count($l));\n    return $v;\n}\n\n/**\n * Given\
    \ an array of strings, return a new array of strings where all elements of\n *\
    \ each string are converted to lowercase.\n *\n * @param   array $s\n * @return\
    \  array\n */", "  if (!is_array($l) || count($l) == 0)\n    return null;\n\n\
    \  // Return maximum element in the array.\n  // >>> max_element([1, 2, 3])\n\
    \  // 3\n  // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  // 123\n\
    \  $max = reset($l);\n  foreach ($l as $e) {\n    if ($e > $max)\n      $max =\
    \ $e;\n  }\n\n  return $max;\n}\n\n/**\n * Return the minimum element in the array.\n\
    \ *\n * Note: This function will return the first item in the array if any elements\n\
    \ * are equal. If the array contains multiple numeric keys, the lowest value\n\
    \ * will be returned, so this function can be used to determine the minimum\n\
    \ * value of an array of numbers when none is known.\n *\n * Example:\n *\n *\
    \ >>> array_min_element([2, 0, 1, 3, 2])\n * 0\n * >>> array_min_element([2, 0,\
    \ 1, 3, 2], 1)\n * 2\n *\n * @param array $l the array to search\n * @param mixed\
    \ $key the key value to use\n * @param mixed $default_value the default return\
    \ value\n * @return mixed the element of $l with the lowest key value if $key\
    \ is present,\n *   or the value of $default_value if $key is not present, or\
    \ null if $l is\n *   empty.\n */", "    foreach ($l as $value) {\n        if\
    \ ($value == max($l)) {\n            return $value;\n        }\n    }\n\n    return\
    \ false;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nNot bad but you do have to sort\
    \ the array in descending order before doing the comparison of max elements. This\
    \ will cause an extra O(n) traversal of the array.\n<|/ c |>\n<| c |>\nI agree\
    \ that sorting array is O(nlogn) but comparing max() is O(1), so the overall time\
    \ is still O(nlogn). This could be improved using min function and then comparing\
    \ element of array by element if they are equal, but it is not needed here, since\
    \ we know the array has only positive numbers :)\n<|/ c |>\n<| c |>\nYes, i agree.\
    \ But I wanted to let you know that there are cases where you cannot use extra\
    \ space.\n<|/ c |>\n<| c |>\nSorry, i misread your comment and i didn't see that\
    \ you already have it :)\n<|/ c |>\n<| a dscore=1 |>\nThis was an interesting\
    \ problem to tackle. I wrote a benchmark that compares various answers for large\
    \ arrays. On my machine, using PHP 5.5.9, the max array size I tested with was\
    \ 10,000 elements.\nUsing a straight foreach loop (using array_map and array_walk),\
    \ the max() function took 7.67 seconds to find the largest element. array_reduce\
    \ took 0.13 seconds to find the largest element. While array_filter took 0.55\
    \ seconds to find the largest element. array_keys took 0.27 seconds to find the\
    \ largest element.\nI created a couple of arrays with the same elements and compared\
    \ them to see how they performed. All of these were done with a loop. The final\
    \ array had each element be an array of the element itself and the number of elements\
    \ after it (this was done to compare the array elements to the number of elements\
    \ in the original array).\nI then used array_key_value to find the largest element.\
    \ After sorting and using array_search to get the key of the first occurrence\
    \ of the largest element, array_key_value took 0.32 seconds to find the largest\
    \ element (this was done after the sorting and before the array_search). \nFinally,\
    \ a combination of array_map and array_walk to find the largest element took 0.35\
    \ seconds to find the largest element. While array_reduce took 0.29 seconds to\
    \ find the largest element.\nThese results were done on a fairly fast machine\
    \ (an i7, 64GB RAM, an SSD drive). The benchmark code was executed on a virtual\
    \ machine that had a faster processor.\nHere is the code. There is probably a\
    \ lot of room ", "  $l = $l ? $l : array();\n  $f = array();\n  if (count($l)\
    \ < 1) {\n    return 0;\n  }\n  foreach ($l as $key => $e) {\n    if (is_numeric($e))\
    \ {\n      $f[$key] = $e;\n    } else {\n      $f = array_merge($f, array_fill_keys($key,\
    \ $e));\n    }\n  }\n  foreach ($f as $key => $e) {\n    if ($e > end($l)) {\n\
    \      return $key;\n    }\n  }\n  return key($l);\n}\n</code>\n<|/ a tags=php,arrays,algorithm\
    \ |>\n<| c |>\nI haven't tested it but this is very elegant. You don't need to\
    \ have an array with all the elements and then compare them. By doing this you\
    \ just have to compare the values of the array without having to compare the indexes\
    \ as well.\n<|/ c |>\n<| a tags=php,arrays,algorithm dscore=0 |>\n<code>", " \
    \   if (!is_array($l)) {\n        return false;\n    }\n    sort($l);\n    return\
    \ $l[count($l)-1];\n}\n", "\t$max = NULL;\n\tforeach ($l as $key => $value) {\n\
    \t\tif ($max === NULL || $value > $max) {\n\t\t\t$max = $value;\n\t\t}\n\t}\n\t\
    return $max;\n}", "    asort($l);\n    return $l[count($l) - 1];\n}\n", "    $r\
    \ = $l[0];\n    foreach ($l as $v) if ($v > $r) $r = $v;\n    return $r;\n}",
  "  // Sort the array so the max value will always be first in the array.\n  usort($l,\
    \ function($a, $b) {\n    return $a <=> $b;\n  });\n  return reset($l);\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis solution is more elegant than mine.\n<|/ c |>\n<| c |>\n\
    This solution does not work for arrays with numeric keys. For such an array the\
    \ largest key is `count($l)-1`.\n<|/ c |>\n<| c |>\nI believe I explained that.\
    \ :)\n<|/ c |>\n<| c |>\nThe above solution is O(n) which is good, however there\
    \ are many ways to write this in O(1) time. I am going to add another answer below\
    \ that will do it with O(log n) time and O(1) space.\n<|/ c |>\n<| c |>\nI see\
    \ this answers has O(n) time and O(1) space. How does this answer the question\
    \ of getting the max of an unordered array?\n<|/ c |>\n<| a tags=php,arrays |>\n\
    The function max sorts the array in descending order, so you can find the max\
    \ with a while loop.\n<code>\n$max = 0;\n$array[] = array(1,2,3,4,5);\nwhile ($max\
    \ < max($array)) {\n  $max++;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nWhat if\
    \ there are duplicated elements in the array?\n<|/ c |>\n<| c |>\nNot a very good\
    \ solution. O(n^2) complexity. You would have to go over the array once for each\
    \ max element you find.\n<|/ c |>\n<| c |>\nThis is a good solution if the array\
    \ is ordered.\n<|/ c |>\n<| a dscore=5 tags=php,arrays |>\nYou can use max() php\
    \ function:\n<code>\nmax($array);\n</code>\n<|/ a |>\n<| c |>\nThis doesn't answer\
    \ the question of how to find the largest element if there are duplicate values,\
    \ and it also does not provide an O(1) solution.\n<|/ c |>\n<| c |>\nThe question\
    \ is `largest element` and not `largest`. Why not just give an answer? You have\
    \ to think about the complexity of a solution in order to know its complexity.\
    \ An answer that uses `array_max` and a while loop with no explanation is not\
    \ a good solution.\n<|/ c |>\n<| c |>\nThe question is `largest element`, not\
    \ `largest`. Why not just give an answer? You have to think about the complexity\
    \ of a solution in order to ", "    return current($l);\n}\n", "    return reset($l);\n\
    }\n", "    $max = -PHP_INT_MAX;\n    foreach ($l as $v) {\n        $v = abs($v);\n\
    \        if ($v > $max) {\n            $max = $v;\n        }\n    }\n    return\
    \ $max;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nThis answer is\
    \ the best one here. The others require some iteration, while this one does not.\n\
    <|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>", "    $keys = array_keys($l);\n\
    \    return max($l[$keys[0]], $l[$keys[1]], $l[$keys[2]]);\n}\n", "    if (count($l)\
    \ === 0) {\n        return null;\n    }\n\n    $max = current($l);\n    foreach\
    \ ($l as $v) {\n        if ($v > $max) {\n            $max = $v;\n        }\n\
    \    }\n\n    return $max;\n}\n", "\t$l = array_reverse($l);\n\tforeach ($l as\
    \ $v) {\n\t\t$m = $v;\n\t\tif ($m > $n) $n = $m;\n\t\tif ($m == $n) break;\n\t\
    }\n\treturn $n;\n}\n", "    return array_reduce($l, function ($v, $k) { return\
    \ max($v, $k); });\n}\n</code>\n<|/ a |>\n<| c |>\nThe question was tagged `php`\
    \ and `php-internal`. Your answer is for PHP.\n<|/ c |>\n<| a dscore=5 |>\nThis\
    \ can easily be done with iterator:\n<code>\n$first = iterator_count(new ArrayIterator($a));\n\
    $last = iterator_count(new ArrayIterator($a));\n</code>\nIf you have to use array_values()\
    \ first you can simply use a foreach loop:\n<code>\n$first = count($a) - 1;\n\
    $last = count($a);\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis works nicely\
    \ in combination with [this answer](https://stackoverflow.com/a/4668560/143833),\
    \ which takes care of edge cases like `array(0, 1, 2, '')`.\n<|/ c |>\n<| a |>\n\
    I like the solution provided by, but I'd like to add that the array_reduce method\
    \ also exists in PHP 7.\n<code>\n$first = array_reduce($array, null, function\
    \ ($v, $k) { return $v === $k ? 0 : $v; });\n$last = array_reduce($array, null,\
    \ function ($v, $k) { return $v === $k ? $v : $v - 1; });\n</code>\nIf you need\
    \ to preserve the original order of the array, use array_values() on the result\
    \ afterwards:\n<code>\n$first = array_reduce($array, null, function ($v, $k) {\
    \ return $v === $k ? 0 : $v; });\n$last = array_reduce($array, null, function\
    \ ($v, $k) { return $v === $k ? $v : $v - 1; });\n\n$first = array_values($first);\n\
    $last = array_values($last);\n</code>\n<|/ a dscore=5 tags=php,arrays |>\n<| a\
    \ tags=php,arrays dscore=5 |>\n<code>\n$first = array_shift($array);\n$last =\
    \ array_pop($array);\n</code>\nWorks with arrays as well as objects\n<|/ a |>\n\
    <| c |>\nYes, but it removes the element from the original array. Using `array_value`\
    \ gives you the original order back.\n<|/ c |>\n<| c |>\narray_shift and array_pop\
    \ will move the element to the front or the back of the array respectively, so\
    \ it's not exactly the same\n<|/ c |>\n<| a |>\n<code>\n$first = array_slice($array,\
    \ 0,1);\n$last = array_slice($array, -1);\n</code>\nI like this, because you get\
    \ the whole array, not ", "  $highest = null;\n  foreach ($l as $e) {\n    if\
    \ (is_null($highest) || $e > $highest) {\n      $highest = $e;\n    }\n  }\n \
    \ return $highest;\n}\n</code>\n<|/ a dscore=3 tags=max,php,arrays |>\n<| a tags=max,php,arrays\
    \ dscore=2 |>\nA more generic way is to use array_reduce function,\n<code>\n$max\
    \ = array_reduce($arr, function($a, $b) { return max($a, $b); });\n</code>\n<|/\
    \ a |>\n<| a dscore=2 |>\nAnother way of doing it:\n<code>", "    if (is_object($l))\
    \ {\n        $key = $l->key();\n        $data = $l->data();\n    } elseif (is_array($l))\
    \ {\n        $data = $l;\n        $key = 0;\n    } elseif (!is_array($l)) {\n\
    \        throw new Exception('Not supported');\n    }\n\n    $max = -INF;\n  \
    \  foreach ($data as $i => $v) {\n        $v = (float) $v;\n        if ($v > $max)\
    \ {\n            $max = $v;\n            $key = $i;\n        }\n    }\n\n    return\
    \ $max;\n}\n", "    foreach ($l as $v) {\n        if ($v == max($l))\n       \
    \     return $v;\n    }\n\n    return NULL;\n}\n</code>\n<|/ a dscore=3 |>\n<|\
    \ c |>\nThat's a good idea, although it only works for numerical arrays. If you\
    \ pass it an array containing non-numeric values, it returns only the first element\
    \ - not a useful function!\n<|/ c |>\n<| c |>\nHi Felix, I agree, it is only a\
    \ solution if you have no other choices. But the question does not state that\
    \ the array contains only numerical values.\n<|/ c |>\n<| c |>\nThanks guys, I'll\
    \ probably go with your original version as it seems simpler to me. Still learning\
    \ all of this so will have a good look around to see if this is more efficient.\n\
    <|/ c |>\n<| a |>\nHere is another way of doing this which works with all types\
    \ including strings and arrays. It is slightly different in that it uses the array_filter\
    \ function to find the max element in an array.\n<code>", "    $max = reset($l);\n\
    \    foreach ($l as $e)\n        if ($e > $max)\n            $max = $e;\n    return\
    \ $max;\n}\n", "    return $l[count($l) - 1];\n}\n", "    foreach ($l as $key\
    \ => $value) {\n        if ($value >= $l[0]) {\n            return $value;\n \
    \       }\n    }\n\n    return $l[0];\n}\n", "    if (!is_array($l)) return $l;\n\
    \n    foreach ($l as $k => $v) {\n        if ($v == max($l)) {\n            return\
    \ $k;\n        }\n    }\n\n    return end($l);\n}\n</code>\n<|/ a tags=php,arrays,max,min\
    \ |>\n<| a dscore=0 |>\nThis might be a little bit too late, but this may help\
    \ someone else.\nI used the above answers because they were elegant, but they\
    \ didn't work for me.\nThe problem was that some values were strings and I was\
    \ getting errors. I added a typecheck before doing the comparison, and it fixed\
    \ my problem.\n<code>\n$maxValue = max(array_filter($myArray, function($e){\n\
    \    return is_string($e) ? 0 : $e;\n}));\n</code>\n<|/ a tags=php,arrays,max,min\
    \ |>\n<| a dscore=0 |>\n<code>", "    if (!is_array($l)) {\n        die('max_element()\
    \ only expects array as argument.');\n    }\n    $n = count($l);\n    if ($n ===\
    \ 0) {\n        return null;\n    }\n    $max = reset($l);\n    foreach ($l as\
    \ $e) {\n        if ($e > $max) {\n            $max = $e;\n        }\n    }\n\
    \    return $max;\n}\n", "    $max = NULL;\n    foreach ($l as $element) {\n \
    \       if ($max == NULL || $element > $max) {\n            $max = $element;\n\
    \        }\n    }\n    return $max;\n}\n", "    return $l[0];\n}\n", "  if (!$l)\n\
    \    return null;\n  else if (count($l) <= 1) {\n    return $l[0];\n  }\n  $m\
    \ = $l[0];\n  foreach ($l as $n) {\n    if ($n < $m) {\n      $m = $n;\n    }\n\
    \  }\n  return $m;\n}\n", "  rsort($l);\n  return $l[0];\n}\n", "    // return\
    \ end($l);\n    $max = reset($l);\n    $maxKey = key($l);\n\n    while (list($key,\
    \ $val)=each($l)) {\n        if ($val>$max) {\n            $max = $val;\n    \
    \        $maxKey = $key;\n        }\n    }\n\n    return $maxKey;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThat is a good solution, but I'm worried about what\
    \ happens if I try to sort an array of size 4? Or if I try to sort an array of\
    \ size 15? I guess it might not be the worst thing...\n<|/ c |>\n<| c |>\nThat's\
    \ not a concern, because you simply do return end($l) after the loop is over,\
    \ and that causes the array to go back to it's original order. It's also not that\
    \ expensive (compared to other solutions I believe), because you never have to\
    \ copy the whole array just to return the last element :)\n<|/ c |>\n<| a |>\n\
    <code>\n$arr=array(5,6,6,4,6,3,5,5,4,4,5,6,6,4,6,3,5,5,4,4,5,6,6,4,6,3,5,5,4,4,5,6,6,4,6,3,5,5,4,4,5,6,6,4,6,3,5,5,4,4,5,6,6,4,6,3,5,5,4,4,5,6,6,4,6,3,5,5,4,4,5,6,6,4,6,3,5,5,4,4,5,6,6,4,6,3,5,5,4,4,5,6,6,4,6,3,5,5,4,4,5,6,6,4,6,3,5,5,4,4,5,6,6,4,6,3,5,5,4,4,5,6,6,4,6,3,5,5,4,4,5,6,6,4,6,3,5,5,4,4,5,6,6,4,6,3,5,5,4,4,5,6,6,4,6,3,5,5,4,4,5,6,6,4,6,3,5,5,4,4,5,6,6,4,6,3,5,5,4,4,5,6,6,4,6,3,5,5,4,4,5,6,6,4,6,3,5,5,4,4,5,6,6,4,6,3,5,5,4,4,5,6,6,4,6,3,5,5,4,4,5,6,6,4,6,3,5,5,4,4,5,6,6,4,6,3,5,5,4,4,5,6,6,4,6,3,5,5,4,4,5,6,6,4,6,3,5,5,4,4,5,6,6,4,6,3,5,5,4,4,5,6,6,4,6,3,5,5,4,4,5,6,6,4,6,3,5,5,4,4,5,6,6,4,6,3,5,5,4,4,5,6,6,4,6,3,5,5,4,4,5,",
  "    // Get the first element\n    $first = $l[0];\n    if (!is_numeric($first))\
    \ {\n        return $first;\n    }\n\n    // If the first value is negative, return\
    \ it\n    if ($first < 0) {\n        return $first;\n    }\n\n    $first = array_shift($l);\n\
    \n    // If the first value is not numeric, return it\n    if (!is_numeric($first))\
    \ {\n        return $first;\n    }\n\n    // If first value is negative, return\
    \ it\n    if ($first < 0) {\n        return $first;\n    }\n\n    // Find the\
    \ first non-negative element\n    foreach ($l as $v) {\n        if ($v >= 0) {\n\
    \            $first = $v;\n            break;\n        }\n    }\n\n    return\
    \ $first;\n}\n", "\tif (!$l)\n\t\treturn null;\n\treturn max($l);\n}\n", "   \
    \ $max = reset($l);\n    for ($i = 0; $i < count($l); ++$i) {\n        if (current($l)\
    \ > $max) {\n            $max = current($l);\n        }\n        next($l);\n \
    \   }\n    return $max;\n}", "    return reset($l);\n}\n</code>\n<|/ a tags=max,php,arrays\
    \ |>\n<| a tags=max,php,arrays |>\nHere's a solution that works for any kind of\
    \ array.\n<code>\n<?php", "  if (count($l) === 0) {\n    return null;\n  }\n\n\
    \  $max_key = null;\n  $max_val = null;\n  foreach ($l as $key => $val) {\n  \
    \  if ($val > $max_val) {\n      $max_val = $val;\n      $max_key = $key;\n  \
    \  }\n  }\n\n  return $max_key;\n}\n", "    $first = reset($l);\n    reset($l);\n\
    \    foreach ($l as $e) {\n        if ($e == $first) {\n            return $e;\n\
    \        }\n    }\n    return null;\n}\n", "    return reset($l);\n}\n", "\tif\
    \ (count($l) === 0) {\n\t\treturn NULL;\n\t}\n\n\treset($l);\n\t$max = NULL;\n\
    \n\twhile ($element = current($l)) {\n\t\tif (!is_null($max) || $element > $max)\
    \ {\n\t\t\t$max = & $element;\n\t\t}\n\t\tnext($l);\n\t}\n\n\treturn $max;\n}\n\
    \n/**\n * Returns the greatest value in an array.\n *\n * @param  array $array\n\
    \ * @param  mixed $default\n * @return mixed\n */", "    foreach ($l as $e) {\n\
    \        if ($e != max($l))\n            return $e;\n    }\n}\n</code>\n<|/ a\
    \ tags=php,arrays |>\n<| c |>\nI believe he wants to find the *largest* value\
    \ in the array, not just the largest *index*.\n<|/ c |>\n<| c |>\nIn that case\
    \ i would use array_filter() with array_sum().\n<|/ c |>\n<| c |>\nNot sure if\
    \ i understand your idea, can you please write an example?\n<|/ c |>\n<| c |>\n\
    Ok, i understood, thank you very much!\n<|/ c |>\n<| a tags=php,arrays |>\nTry\
    \ below :\n<code>\n$array1 = array('2', '3', '4', '5', '6', '7', '8', '9', '10');\n\
    $array2 = array('4', '6', '10', '2', '5', '5', '5');\n$array3 = array('5', '10',\
    \ '6', '4', '3', '9', '8', '7');\n$array4 = array('10', '9', '5', '7', '3', '8',\
    \ '6', '4');\n\n$max_arr = array();\n$max_arr[] = $array1;\n$max_arr[] = $array2;\n\
    $max_arr[] = $array3;\n$max_arr[] = $array4;\n\n$max_value = max($max_arr);\n\
    echo \"Max array value is : \". $max_value . \"<br/>\";\n\necho \"Max element\
    \ value is : \" . array_search($max_value, $max_arr);\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\nThis will find the maximum value in the array and return\
    \ the index at which the maximum occurred\n<code>\n$array = array('2', '3', '4',\
    \ '5', '6', '7', '8', '9', '10');\n$array = array_map('intval', $array); // converts\
    \ strings to integers\n$array = array_flip($array);\n$result = max($array);\n\
    echo array_search($result, $array);\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0\
    \ |>\nUse a loop to find the highest value in the array. Get the value from the\
    \ highest index\n<code>\n<?php\n$highestArray = array();\n$highestIndex = 0;\n\
    \nforeach($array as $key => $value) {\n    if($value > $highestArray[$highestIndex])\
    \ {\n        $highestArray[$highestIndex] = $value;\n        $highestIndex = $key;\n\
    \    }\n}\n</code>\n<|/ a tags=php,arrays |>\n<|", "\tif (is_array($l)) {\n\t\t\
    return array_pop($l);\n\t}\n\telse {\n\t\treturn $l;\n\t}\n}\n\n", "    $m=$l[0];\n\
    \    for ($i=1;$i<count($l);$i++) {\n        if ($l[$i] > $m) {\n            $m=$l[$i];\n\
    \        }\n    }\n    return $m;\n}", "\tif (count($l) === 0) {\n\t\treturn null;\n\
    \t}\n\treturn $l[0];\n}\n\n/**\n * Return the minimum element in the array.\n\
    \ *\n * @param array\n */", "    return reset($l);\n}\n\n/**\n * Return the minimum\
    \ element of the array.\n *\n * Note: This is similar to the array_min() function\
    \ in PHP. However, this\n * function does not always return the same value as\
    \ the PHP array_min\n * function (see https://bugs.php.net/bug.php?id=46034).\n\
    \ *\n * Note: This function may return boolean false when passed an empty array.\n\
    \ *\n * @param array $array\n *\n * @return mixed\n *\n * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/array.html#Formulaic-Functions\n\
    \ */", "    return current($l);\n}\n", "    if (!$l) {\n        return false;\n\
    \    }\n    if ($l[0] > $l[1]) {\n        return $l[0];\n    }\n    return $l[1];\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI believe this would work better if you used `===`\
    \ instead of `==` in the first `if` statement. `===` checks both value and type.\n\
    <|/ c |>\n<| a tags=php,arrays |>\nThe solution by is elegant and fast, but in\
    \ my testing it did not work for me on PHP 5.3.x. It threw an error on line 9\
    \ (in the if-statement). After a lot of trial and error I figured out that I needed\
    \ a space between function and max_element. Here is the correct code:\n<code>",
  "  return $l[array_search(max($l), $l)];\n}", "    foreach ($l as $v) {\n      \
    \  if ($v == max($l)) return $v;\n    }\n}\n", "    $l = iterator_to_array($l);\n\
    \    return max($l);\n}\n</code>\n<|/ a |>\n<| c |>\nCan you add the relevant\
    \ part of the documentation for those who are interested? The link does not seem\
    \ to be working anymore (at least for me and for [this particular function here](http://php.net/manual/en/function.array-search.php)).\n\
    <|/ c |>\n<| c |>\nSure, it was the page on the PHP doc site: https://secure.php.net/manual/en/function.array-search.php#refsect1-function.array-search-examples\n\
    <|/ c |>\n<| a tags=arrays,php dscore=5 |>\n<code>\n$array = array(1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10);\necho max($array);\n</code>\n<|/ a |>\n<| c |>\nThis only\
    \ works if all elements are positive integers. Not really an answer to OPs question.\n\
    <|/ c |>\n<| c |>\n: yes, only works if all elements are positive integers. But\
    \ OP said \"the largest value\". That is, he doesn't care about negative and zeros.\n\
    <|/ c |>\n<| c |>\nThis doesn't work well if one of the elements is null, it will\
    \ return null.\n<|/ c |>\n<| c |>\nThis works well for negative values too. For\
    \ example, `max($array)` will return the greatest number in the array, regardless\
    \ of whether it's negative.\n<|/ c |>\n<| c |>\nSure, my question was why would\
    \ you use this. It doesn't work as expected.\n<|/ c |>\n<| a |>\nPHP 7 introduced\
    \ a new function for finding the max value in an array. It doesn't require the\
    \ elements to be integers. \n<code>\n$myArray = [1,2,3,4,5,6];\n$maxValue = max($myArray);\
    \ // 6\n</code>\n<|/ a tags=arrays,php dscore=5 |>\n<| a dscore=5 |>\nIf you are\
    \ not interested in the index and want to get only the value, you can use array_column\
    \ and max\n<code>\n$max = max(array_column($array, 'value'));\n</code>\n<|/ a\
    \ tags=arrays,php |>\n<| c |>\nJust wanted to point out that this is now deprecated,\
    \ as of PHP7.2\n<|/ c |>\n<| c |>\nJust to note that this would require PHP >=\
    \ 5.5\n<|/ c |>\n<| c |>\n: Yes you are right, PHP 7.2 removed this function\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$max = $array", "    $r = [];\n    foreach\
    \ ($l as $v) {\n        if ($r[$v] == null || $v > $r[$v]) {\n            $r[$v]\
    \ = $v;\n        }\n    }\n    return $r[$r];\n}\n\n/**\n * Returns the mean of\
    \ an array\n * @example mean(array(1, 2, 3)) => 2.5\n */", "  if (!count($l))\
    \ return null;\n  $max = max($l);\n  foreach ($l as $e) {\n    if ($e == $max)\
    \ return $e;\n  }\n  return null;\n}\n", "    foreach ($l as $e) {\n        if\
    \ ($e == max($l)) {\n            return $e;\n        }\n    }\n\n    return null;\n\
    }", "    $l = array_reverse($l);\n    return $l[0];\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis should have been the accepted answer.\n<|/ c |>\n<| c |>\n\
    I really like this one since it's quite clean and easy. Also I like the fact that\
    \ it's in PHP. Nice job!\n<|/ c |>\n<| c |>\nIt's a great solution but if you've\
    \ got big arrays this could be a problem.\n<|/ c |>\n<| c |>\nVery good for PHP\
    \ only :) But I think it's more a matter of taste than an issue. Just keep a close\
    \ eye on memory consumption and do some tests.\n<|/ c |>\n<| c |>\nFor people\
    \ who use Laravel, this solution will not work! https://stackoverflow.com/questions/32241852/laravel-max-in-query-builder\n\
    <|/ c |>\n<| a tags=arrays,php |>\nI suppose you can make use of array_map in\
    \ such case:\n<code>\n<?php\n\n$arr = array(1,4,6,10,9);\n\n$result = array_map(function($a,\
    \ $b) {return $a>$b?$a:$b;}, array_reverse($arr), array_reverse($arr));\n\nprint_r($result);\n\
    </code>\nwill print:\n<code>\nArray\n(\n    [0] => 9\n    [1] => 10\n    [2] =>\
    \ 6\n    [3] => 4\n    [4] => 1\n)\n</code>\nor if you want to find max element\
    \ use max(array_map(...)) function:\n<code>\n$arr = array(1,4,6,10,9);\n\necho\
    \ max(array_map(function($a, $b) {return $a>$b?$a:$b;}, array_reverse($arr), array_reverse($arr)));\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nI think `max` was the best solution for me\
    \ but `array_reverse` was the key here.\n<|/ c |>\n<| c |>\nI like the way you\
    \ use array_map to sort it and then just print the first item.\n<|/ c |>\n<| c\
    \ |>\nThis is awesome! But what is the use of array_reverse ?\n<|/ c |>\n<| c\
    \ |>\narray_reverse reverses the array. Here it just reverses the array to be\
    \ able to compare elements from both halves.\n<|/ c |>\n<| c |>\nHi, this only\
    \ works when sorting numerically. How would it be done if I needed to sort alphabetically?\
    \ I have the problem here: http://stackoverflow.com/questions/35829", "\t$max\
    \ = null;\n\tforeach ($l as $v) {\n\t\tif (!is_null($v) && ($max === null || $v\
    \ > $max)) {\n\t\t\t$max = $v;\n\t\t}\n\t}\n\treturn $max;\n}\n", "\tksort($l);\n\
    \t$elem = $l[0];\n\tforeach ($l as $e) {\n\t\tif ($e > $elem) $elem = $e;\n\t\
    }\n\treturn $elem;\n}", "\t$l = array_keys($l);\n\t$len = count($l);\n\tif ($len\
    \ == 0)\n\t\tthrow new Exception('No element found.');\n\tif ($len == 1)\n\t\t\
    return reset($l);\n\tarsort($l);\n\treset($l);\n\t$max = reset($l);\n\treturn\
    \ $max;\n}\n", "    if (!is_array($l))\n        throw new InvalidArgumentException('$l\
    \ must be an array.');\n    array_walk_recursive($l, function($v, $k) use (&$max)\
    \ {\n        if ($v > $max)\n            $max = $v;\n    });\n    return $max;\n\
    }\n\n/**\n * Returns the first element of an array.\n *\n * Note: we ignore the\
    \ second parameter $strict (defaults to false) because the\n * function should\
    \ return either an array or null and we don't want an unexpected\n * value exception\
    \ to stop execution.\n *\n * >>> first_element([1, 2, 3])\n1\n * >>> first_element([1,\
    \ 'foo'])\n'foo'\n * >>> first_element([])\nnull\n */", "  $mn = -INF;\n  for\
    \ ($i = 0; $i < count($l); ++$i) {\n    if ($l[$i] > $mn) {\n      $mn = $l[$i];\n\
    \    }\n  }\n  return $mn;\n}\n\n/**\n * Return minimum element in the array.\n\
    \ * @see min_element()\n */", "  $n = array_pop($l);\n  $m = array_pop($l);\n\
    \  if ($m > $n) {\n    $m = $n;\n  }\n  return $m;\n}", "  if (is_array($l) &&\
    \ count($l) > 0) {\n    $max = reset($l);\n    for ($i = count($l); $i > 0; $i--)\
    \ {\n      if ($l[$i] > $max) {\n        $max = $l[$i];\n      }\n    }\n    return\
    \ $max;\n  }\n}\n</code>\n<|/ a dscore=3 tags=php,arrays |>\n<| c |>\nThis will\
    \ return only one element from array, not maximum element.\n<|/ c |>\n<| c |>\n\
    If there are two or more equal values in the array, the last one is returned.\
    \ In your case, it will return `6`.\n<|/ c |>\n<| c |>\nI tested the function\
    \ with your input. It returns as expected.\n<|/ c |>\n<| c |>\nYes, that's true,\
    \ but in first comment I wrote \"returns maximum element from array\", but you\
    \ wrote \"returns only one element\".\n<|/ c |>\n<| c |>\nIt returns only one\
    \ element from array and does not depend on order of elements. If there are no\
    \ equal elements, the last one will be returned.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\nYou can use the array_map function to go through each element and return\
    \ the one that matches the maximum value:\n<code>\n$array1 = [1,2,3];\n$array2\
    \ = [2,3,4];\n\n$maxVal = max(array_map(\"max\", $array1), max($array2));\n",
  "    $keys = array_keys($l);\n    $max = $keys[0];\n    foreach ($keys as $key)\
    \ {\n        if ($l[$key] > $max) {\n            $max = $key;\n        }\n   \
    \ }\n    return $max;\n}\n", "    $n = count($l);\n    if ($n === 0)\n       \
    \ return false;\n    $max = reset($l);\n    reset($l);\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        if ($l[$i] > $max)\n            $max = $l[$i];\n    }\n\
    \    return $max;\n}\n", "    $l = array_map('intval', $l);\n    foreach ($l as\
    \ $k => $v) {\n        $max = max($v, $l[$k]);\n        if ($max !== $v) return\
    \ $max;\n    }\n    return $l[0];\n}", "\tif (!$l || count($l) == 0) {\n\t\treturn\
    \ null;\n\t}\n\tksort($l);\n\treset($l);\n\treturn key($l);\n}", "  if (!is_array($l))\
    \ {\n    return $l;\n  }\n\n  $max = NULL;\n  $max = current($l);\n  $keys = array_keys($l);\n\
    \  $count = 1;\n  foreach ($keys as $key => $value) {\n    if ($max < $l) {\n\
    \      $max = $l;\n    }\n    if ($max === $l) {\n      if ($count >= $l) {\n\
    \        return $l;\n      }\n    } else {\n      $count = 1;\n    }\n    if ($value\
    \ > $l) {\n      $max = $value;\n    }\n    $l++;\n  }\n  return $max;\n}\n",
  "  $m = PHP_INT_MAX;\n  foreach ($l as $e) {\n    $m = ($e > $m) ? $e : $m;\n  }\n\
    \  return $m;\n}\n", "    $f = reset($l);\n    reset($l);\n    return $f;\n}\n",
  "\t$n = count($l);\n\tif ($n==1) return reset($l);\n\n\treset($l);\n\t$max = key($l);\n\
    \tdo {\n\t\t$n = next($l);\n\t} while ($n>$max);\n\n\treturn $max;\n}\n", "  \
    \  $element = null;\n\n    foreach ($l as $e) {\n        if ($element === null\
    \ || $e > $element) {\n            $element = $e;\n        }\n    }\n\n    return\
    \ $element;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis works for me. But in\
    \ case you want to get all keys, and not only the first key, change `return $element;`\
    \ by `return key($l);`. Then you will get all keys and not only the first.\n<|/\
    \ c |>\n<| c |>\nThis doesn't answer the question. The question is how to get\
    \ the largest element in an array using PHP. Not how to find all the largest elements\
    \ in the array.\n<|/ c |>\n<| c |>\nthis should be the accepted answer. The other\
    \ one is for Ruby\n<|/ c |>\n<| c |>\nThis should be the accepted answer. The\
    \ other one is not an efficient solution for large arrays.\n<|/ c |>\n<| c |>\n\
    I love this one!  I used this solution and it worked like a charm.\n<|/ c |>\n\
    <| a dscore=5 tags=max,element,arrays,php |>\n<code>", "    $keys = array_keys($l);\n\
    \    reset($l);\n    $max = array_pop($l);\n    for ($i = 0; $i < count($l); $i++)\
    \ {\n        if ($l[$i] > $max) {\n            $max = $l[$i];\n        }\n   \
    \ }\n    return $max;\n}\n\n/**\n * Returns the sum of an array of numbers.\n\
    \ * >>> array_sum(array(1, 2, 3, 4))", "  return end($l);\n}\n\n/**\n * Returns\
    \ the key of the highest element in the array.\n * If the array is empty, returns\
    \ false.\n *\n * @param array $l\n *\n * @return int\n */", "  foreach ($l as\
    \ $e) {\n    if ($e == max($l)) {\n      return $e;\n    }\n  }\n}\n", "    $r\
    \ = [];\n    $l = array_filter($l);\n    $max_key = max($l);\n    foreach ($l\
    \ as $key => $val) {\n        if ($val == $max_key) {\n            $r[] = $key;\n\
    \        }\n    }\n    return $r;\n}\n</code>\n<|/ a |>\n<| a dscore=1 |>\nI wrote\
    \ a tiny script to print out array values in reverse.\n<code>\n<?php", "    return\
    \ reset($l);\n}\n", "  $m = reset($l);\n  for ($i = 1; $i < count($l); $i++) {\n\
    \    if ($l[$i] > $m) {\n      $m = $l[$i];\n    }\n  }\n  return $m;\n}\n\n/**\n\
    \ * Returns an array with all elements that don't occur in $needle in order.\n\
    \ */", "    if (empty($l)) return false;\n    $max = $l[0];\n    for ($i = 1;\
    \ $i < count($l); $i++) {\n        if ($l[$i] > $max) {\n            $max = $l[$i];\n\
    \        }\n    }\n    return $max;\n}\n", "\t$l = array_reverse($l); // Sort\
    \ descending.\n\trsort($l);\n\n\t$max = reset($l);\n\tforeach ($l as $k => $v)\
    \ {\n\t\tif ($v > $max) {\n\t\t\t$max = $v;\n\t\t}\n\t}\n\treturn $max;\n}\n\n\
    /**\n * Return the minimum element in the array.\n * >>> min_element(array(1,\
    \ 2, 3))", "    return key($l);\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nYeah\
    \ I saw this, was wondering why it didn't work for me, I guess I overlooked something\
    \ :(\n<|/ c |>\n<| c |>\nThis one just solved an annoying issue for me :D\n<|/\
    \ c |>\n<| c |>\nIf it's PHP >= 5.5 you can use [array_column()](http://php.net/manual/en/function.array-column.php)\
    \ to get the maximum value of the array, and then use the key() function to get\
    \ the key of the maximum element (as opposed to having to iterate through the\
    \ whole array).\n<|/ c |>\n<| a dscore=2 tags=sorting,arrays,php |>\n<code>",
  "    $m = null;\n    foreach ($l as $i => $e) {\n        if ($e > $m) {\n      \
    \      $m = $e;\n        }\n    }\n    return $m;\n}\n", "\tforeach ($l as $e)\
    \ {\n\t\tif ($e == max($l))\n\t\t\treturn $e;\n\t}\n}\n", "    $c = count($l);\n\
    \    $v = null;\n    for($i = 0; $i < $c; $i++) {\n        $v = $l[$i];\n    \
    \    if ($v > $l[$i+1]) {\n            $tmp = $v;\n            $v = $l[$i+1];\n\
    \            $l[$i+1] = $tmp;\n        }\n    }\n    return $v;\n}\n", "\treturn\
    \ $l[count($l) - 1];\n}\n", "    return current($l);\n}\n", "  if (!$l) return\
    \ null;\n  $l = array_filter($l);\n  if (empty($l)) return null;\n  return max($l);\n\
    }\n", "    if (empty($l)) return null;\n    $n = count($l);\n    $largest = array_shift($l);\n\
    \    foreach ($l as $e) {\n        if ($e > $largest) {\n            $largest\
    \ = $e;\n        }\n    }\n    return $largest;\n}\n</code>\n<|/ a tags=sorting,max,php,arrays\
    \ dscore=5 |>\n<| c |>\nNote that `array_shift` modifies the array in place, so\
    \ if you need to use it twice or more you'll want to make a copy: `$largest =\
    \ array_shift($l);`\n<|/ c |>\n<| c |>\nI guess this only works with numerical\
    \ array keys. Not with string keys.\n<|/ c |>\n<| c |>\nFor associative arrays,\
    \ see http://stackoverflow.com/questions/1384502/php-finding-the-key-of-the-highest-value-in-an-array\n\
    <|/ c |>\n<| c |>\nThis isn't working for me: \n`array_shift(): Array keys must\
    \ be numeric`\n<|/ c |>\n<| c |>\nFor associative arrays, see http://stackoverflow.com/questions/1384502/php-finding-the-key-of-the-highest-value-in-an-array\n\
    <|/ c |>\n<| a tags=sorting,max,php,arrays dscore=5 |>\nYou can use this function\
    \ instead:\n<code>", "    if (count($l) !== 0) {\n        $m = array_reduce($l,\
    \ function ($a, $b) { return ($a > $b ? $a : $b); });\n        if ($m == 0)\n\
    \            return null;\n        else\n            return $m;\n    }\n    return\
    \ null;\n}\n", "    return array_reduce($l, static function ($carry, $item) {\n\
    \        return $carry > $item ? $carry : $item;\n    });\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a tags=arrays,php |>\nUse min function to find the minimum element in\
    \ an array\n<code>\n$a = [1,2,5,5,5,5,5,5,5,5,5];\necho min($a);\n</code>\n<|/\
    \ a dscore=2 |>\n<| a |>\nThis is an old question but I just wanted to share another\
    \ way of doing it that I've found useful\n<code>\n$a = array(1, 2, 3, 4, 5, 6,\
    \ 8);\n$b = array_search(min($a), $a);\necho $b; // outputs 0\n</code>\n<|/ a\
    \ dscore=2 tags=arrays,php |>\n<| a tags=arrays,php dscore=1 |>\nHere is a snippet\
    \ I wrote:\n<code>", "    return end($l);\n}\n", "  return $l[0];\n}", "    $l\
    \ = array_reverse($l);\n    return $l[0];\n}\n</code>\n<|/ a dscore=3 |>\n<| c\
    \ |>\nThis works for me in Laravel. The other solutions didn't, but this works.\
    \ Thanks.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array1 = array(1,2,3,4,5);\n\
    $array2 = array(4,5,6,7,8);\n$array3 = array(1,2,3);\n$resultArray = array_merge($array1,\
    \ $array2, $array3);\n$maxValue = max($resultArray);\n</code>\n<|/ a dscore=3\
    \ |>\n<| c |>\n+1 for simple solution, no loops and no additional variables. This\
    \ should be the accepted answer\n<|/ c |>\n<| a dscore=3 |>\n<code>", "    if\
    \ (!is_array($l)) {\n        $l = [$l];\n    }\n    if (count($l) === 0) {\n \
    \       return;\n    }\n    return max($l);\n}\n</code>\n<|/ a tags=php,arrays\
    \ dscore=4 |>\n<| c |>\nThis answer is a lot better than other answers, because\
    \ it does not require any external library, and does not need looping through\
    \ every element and comparing\n<|/ c |>\n<| c |>\nThis answer was the one I used,\
    \ because I needed a way to get the biggest value in a multi-dimensional array\
    \ without using array_multisort as I needed to keep original key associations.\
    \ All other answers required sorting the array first and this method allows me\
    \ to keep the original key associations.\n<|/ c |>\n<| c |>\nThe accepted answer\
    \ has several problems: it uses `array_multisort`, which requires all the items\
    \ to be the same length, and the code does not work if the array contains mixed\
    \ types.\n<|/ c |>\n<| c |>\n: this solution does NOT requires all the items to\
    \ be the same length. The accepted answer works fine with arrays of different\
    \ lengths.\n<|/ c |>\n<| c |>\nI mean it requires them to be of the same type.\
    \ E.g. if one of them was a string it wouldn't work.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\nThis is a little late, but you can also do this with array_filter.  It will\
    \ remove all non-numerical keys from a multidimensional array and then return\
    \ the max value in that new array.\n<code>\n$highest = array_filter(\n    $array,\n\
    \    function($v){\n        return !is_numeric($v);\n    },\n    ARRAY_FILTER_USE_BOTH\n\
    );\n\nif(sizeof($highest) > 0){\n    echo $highest[0];\n}\n</code>\n<|/ a dscore=4\
    \ |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$numbers = array(\n    array(1,\
    \ 2, 'Three'),\n    array('Four', 5, 'Five')\n);\n\n$maxValue = max(array_map(function\
    \ ($num) {\n    return max($num);\n}, $numbers));\n\nvar_dump($maxValue);\n</code>\n\
    Prints:\n<code>\nstring 'Five' (length=3)\n</code>\n<|/ a dscore=4 |>\n<| c |>\n\
    This won't work if one of the arrays is empty.\n<|/ c |>\n<| c |>\n, that is a\
    \ fair point.  It works with an empty array too.\n<|/ c |>\n<| c |>\nNotice that\
    \ this function will remove all non-numeric entries ", "    $l = array_reverse($l);\n\
    \    $r = $l[0];\n    $l = $l[1];\n    while ($r !== $l) $r = $r;\n    return\
    \ $r;\n}\n", "  if ($l == null) return null;\n  $keys = array_keys($l);\n  return\
    \ $keys[count($keys) -1];\n}\n</code>\n<|/ a dscore=3 tags=php,arrays,max,algorithm\
    \ |>\n<| c |>\n+1 for the `max_element` function. It's worth noticing that it\
    \ works even if your array elements are objects that implement `<`, `>`, or `==`.\n\
    <|/ c |>\n<| a tags=php,arrays,max,algorithm |>\nI wanted to get the first element\
    \ (lowest index) of a multidimensional array, without looping through the whole\
    \ array (even though it's only 1 level deep).\nI ended up using array_shift, to\
    \ move the array pointer up 1 element and than using array_search to get the first\
    \ element from the array :\n<code>\n$a = array_shift($a);\n$key = array_search($a,\
    \ $a);\n</code>\n<|/ a dscore=3 |>\n<| c |>\nI like this solution because it's\
    \ simple, but I'm concerned that array_shift() will destructively modify the original\
    \ array, which might not be an issue in this case, but is a very likely issue\
    \ if this function is passed a reference. In my case, the original array was an\
    \ array of objects, and the objects were modified by array_shift(). So even though\
    \ this works well here, I'm not sure if I would use it for general case.\n<|/\
    \ c |>\n<| c |>\nYes, it does modify the original array if you pass it a reference.\
    \  In fact, it won't even work when you pass the array by value, because you're\
    \ actually passing a copy.\n<|/ c |>\n<| a |>\nHow about this?\n<code>\n$arr =\
    \ [\n  0 => [\n    'test' => 'test1',\n    'test2' => 'test2',\n  ],\n  1 => [\n\
    \    'test' => 'test1',\n    'test2' => 'test2',\n  ],\n  2 => [\n    'test' =>\
    \ 'test1',\n    'test2' => 'test2',\n  ],\n];\n\n$arr[$max] = $arr[max($arr)];\n\
    </code>\n<|/ a tags=php,arrays,max,algorithm dscore=2 |>\n<| c |>\nThis assumes\
    \ all the arrays have the same length, and that the array elements are numerically\
    \ sequential.\n<|/ c |>\n<| a dscore=2 |>\nI've used this before for sorting and\
    \ retrieving elements from an array:\n<code>\n$foo = array_slice($arr, max($arr,\
    \ true));\n</code>\narray_slice will take the array and slice it down to one element,\
    \ which will be the maximum value, and passing true to the max function will sort\
    \ it from ", "    $max = null;\n    foreach ($l as $key => $e) {\n        if (is_null($max)\
    \ || $e > $max) $max = $e;\n    }\n    return $max;\n}\n", "  if (empty($l)) return\
    \ null;\n  $r = [];\n  foreach ($l as $key => $val) {\n    if ($val > reset($r))\
    \ {\n      $r[$key] = $val;\n    }\n  }\n  return end($r);\n}\n", "    foreach\
    \ ($l as $e) {\n        if ($e > max()) {\n            $max = e();\n        }\n\
    \    }\n    return max();\n}\n", "\treturn reset($l);\n}\n\n/**\n * Returns the\
    \ largest integer key of the given array.\n * Pass arrays with multi-dimension\
    \ dimensions and multi-dimensional keys will be flattened\n * into one-dimensional\
    \ keys.\n *\n * @param array $array\n * @return mixed\n * @link http://www.php.net/manual/en/function.max.php\n\
    \ */", "    $r = reset($l);\n    if (count($l) === 0) {\n        trigger_error('max_element():\
    \ Empty array');\n        return false;\n    }\n    if ($r === null) {\n     \
    \   return null;\n    }\n    $llen = count($l);\n    for($i = 0; $i < $llen; $i++)\
    \ {\n        if ($l[$i] > $r[$i]) {\n            $r = $l;\n        }\n    }\n\
    \    return $r;\n}\n</code>\n<|/ a dscore=2 tags=arrays,max,php,min |>\n<| a |>\n\
    This is an alternative that works similarly to Max's answer. It does not require\
    \ a full copy of the array.\n<code>\n$max = (count($array) > 0) ? max($array)\
    \ : false;\n</code>\n<|/ a dscore=1 tags=arrays,max,php,min |>\n<| a dscore=1\
    \ tags=arrays,max,php,min |>\nThe function below will find max value from an array\
    \ without using sort() function.\n<code>", "  return count($l) > 0 ? current($l)\
    \ : NULL;\n}\n</code>\n<|/ a tags=php |>\n<| a tags=php |>\n<code>", "  if (empty($l))\
    \ {\n    return null;\n  }\n  $max_val = PHP_INT_MAX;\n  foreach ($l as $v) {\n\
    \    if ($v > $max_val) {\n      $max_val = $v;\n    }\n  }\n  return $max_val;\n\
    }\n", "    $rmax = max($l);\n    return $rmax;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a tags=php,arrays,sorting |>\n<code>\n$arr = [4,6,8,10,2,5,3,7,12];\n\
    \n$max = maxValue($arr);\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
