language: php
name: HumanEval_18_how_many_times
results:
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = preg_match_all('/'\
    \ . preg_quote($substring, '/') . '/i', $string, $matches);\n    return $count;\n\
    }\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpndvxaai1.php:21\n\
    Stack trace:\n#0 /tmp/tmpndvxaai1.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpndvxaai1.php\
    \ on line 21\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    return count(preg_grep(\"\
    /$substring/\", $string));\n}\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: preg_grep(): Argument #2 ($array) must\
    \ be of type array, string given in /tmp/tmpcnab0xji.php:10\nStack trace:\n#0\
    \ /tmp/tmpcnab0xji.php(10): preg_grep('/x/', '')\n#1 /tmp/tmpcnab0xji.php(13):\
    \ how_many_times('', 'x')\n#2 /tmp/tmpcnab0xji.php(17): candidate('', 'x')\n#3\
    \ /tmp/tmpcnab0xji.php(23): test()\n#4 {main}\n  thrown in /tmp/tmpcnab0xji.php\
    \ on line 10\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    // Return the\
    \ amount of times $substring appears in $string.\n    $length = strlen($substring);\n\
    \    $count = preg_match_all(\"/$substring/i\", $string, $matches);\n    return\
    \ $length;\n}\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpesnpomuh.php:20\n\
    Stack trace:\n#0 /tmp/tmpesnpomuh.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpesnpomuh.php\
    \ on line 20\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n\t$string = strtolower($string);\n\
    \t$substring = strtolower($substring);\n\n\tif ($string == $substring) {\n\t\t\
    return 0;\n\t}\n\n\t$i = strpos($string, $substring);\n\tif ($i == 0) {\n\t\t\
    return 0;\n\t}\n\n\t$j = strpos($string, $substring, $i) + strlen($substring);\n\
    \n\tif ($i == $j) {\n\t\treturn 1;\n\t}\n\n\treturn count(explode($substring,\
    \ $string, $j));\n}\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg0iseert.php:36\n\
    Stack trace:\n#0 /tmp/tmpg0iseert.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpg0iseert.php\
    \ on line 36\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n\t$count = substr_count($string,\
    \ $substring);\n\tif ($count == 0) {\n\t\treturn 0;\n\t}\n\n\t$max_count = max(array_count_values(str_split($string)));\n\
    \tforeach (str_split($string) as $char) {\n\t\tif ($char == $substring) {\n\t\t\
    \t$count--;\n\t\t}\n\t\telse if (count(str_split($char)) == 1) {\n\t\t\tif ($count\
    \ > $max_count / 2) {\n\t\t\t\treturn $count;\n\t\t\t}\n\t\t\t$count++;\n\t\t\
    }\n\t}\n\treturn $count;\n}\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4pakabsb.php:35\n\
    Stack trace:\n#0 /tmp/tmp4pakabsb.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp4pakabsb.php\
    \ on line 35\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n\t$count = 0;\n\t\
    $string_length = strlen($string);\n\t$substring_length = strlen($substring);\n\
    \t// Loop through each character of string and substring.\n\tfor ($i = 0; $i <\
    \ $string_length; $i++) {\n\t\t$found_substring_at = FALSE;\n\t\tfor ($j = 0;\
    \ $j < $substring_length; $j++) {\n\t\t\t// If the current character is in the\
    \ substring.\n\t\t\tif ($string[$i] == $substring[$j]) {\n\t\t\t\t// Reset the\
    \ substring match flag.\n\t\t\t\t$found_substring_at = TRUE;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\n\t\t// If the substring was found in the current string character\
    \ position increment the counter.\n\t\tif ($found_substring_at) {\n\t\t\t$count++;\n\
    \t\t}\n\t}\n\n\treturn $count;\n}\nfunction candidate(...$args) {\n    return\
    \ how_many_times(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    cacacacac\", \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4kedzly7.php:40\n\
    Stack trace:\n#0 /tmp/tmp4kedzly7.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp4kedzly7.php\
    \ on line 40\n"
  timestamp: 1659979447
- exit_code: 0
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $substring =\
    \ strtolower($substring);\n    $string = strtolower($string);\n    $count = 0;\n\
    \n    $pos = strpos($string, $substring);\n    while ($pos !== false) {\n    \
    \    $count++;\n        $pos = strpos($string, $substring, $pos + 1);\n    }\n\
    \n    return $count;\n}\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $i = 0;\n   \
    \ for($i = 0; $i < strlen($string); $i++) {\n        if($string[$i] === $substring[0])\
    \ {\n            $first = $i;\n            for($j = 1; $j < strlen($substring);\
    \ $j++) {\n                if($string[$i+$j] !== $substring[$j]) {\n         \
    \           break;\n                }\n            }\n            $last = $i+$j;\n\
    \            $overlap = ($last <= $first) ? 0 : ($last-$first);\n            $i\
    \ += $overlap;\n        }\n    }\n    return $i;\n}\n</code>\nThe how_many_times\
    \ function works by looping through the original string, looking at the current\
    \ character and comparing it to each character in the substring until it reaches\
    \ the end of the substring. If they match, the overlap is counted, otherwise it\
    \ loops back to the beginning of the substring to look for the next character\
    \ in the original string.\nHere is an example of how the function works. Let's\
    \ say the string was \"aaaa\". Initially, the loop will compare the first character\
    \ in the substring to the first character in the string, \"a\". \"a\" matches\
    \ the substring \"a\" exactly, so the overlap will be added to $i. If the second\
    \ character in the substring does not match the second character in the string,\
    \ the loop will compare the third character in the substring to the first character\
    \ in the string, \"a\". \"a\" does not match the substring \"a\" exactly, so the\
    \ overlap will be added to $i again. If we continue this process through the rest\
    \ of the substring, we can see that it will eventually compare \"a\" to the first\
    \ character in the string, \"a\". \"a\" matches the substring \"a\" exactly, so\
    \ the overlap will be added to $i. If we continue this process through the rest\
    \ of the substring, we can see that it will eventually compare \"a\" to the second\
    \ character in the string, \"a\". \"a\" does not match the substring \"a\" exactly,\
    \ so the overlap will be added to $i again.\n<|/ a tags=search,algorithm,php,string,regex\
    \ |>\n<| c |>\nThank you for your answer. The problem is that i have to implement\
    \ a function that counts how many times a substring appears in a given string.\
    \ So, in your example \"aaaa\" it would return 3 for the count. My function returns\
    \ the correct number in all cases except when the substring occurs in the first\
    \ position or in the last position of the given string.\n<|/ c |>\n<| c |>\n-\
    \ I've added some explanation. The algorithm is not very straightforward. It's\
    \ not hard to code up if you understand how it works.\n<|/ c |>\n<| a dscore=0\
    \ tags=search,algorithm,php,string,regex |>\nFor this specific case:\n<code>\n\
    $string = \"aaaa\";\n$\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpcwwfo8jc.php
    on line 26

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $times = 0;\n\
    \    $len = strlen($string);\n    $sublen = strlen($substring);\n    for ($i =\
    \ 0; $i < $len; $i++) {\n        if (strpos($string, $substring, $i) !== false)\
    \ {\n            $times++;\n        }\n    }\n    return $times;\n}\n</code>\n\
    <|/ a |>\n<| a dscore=2 tags=php,string,count,substring |>\nThe algorithm from\
    \ is much faster then the loop, but if you want it to have a better performance,\
    \ I would suggest using the following.\n<code>\npublic function countOccurrences($haystack,\
    \ $needle) {\n    $index = strpos($haystack, $needle);\n    $count = 0;\n\n  \
    \  while ($index !== FALSE) {\n        $count++;\n        $index = strpos($haystack,\
    \ $needle, $index + strlen($needle));\n    }\n\n    return $count;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThe algorithm doesn't count overlapping occurrences (like `aabba`),\
    \ and the function name is misleading. It counts single occurrences, not how many\
    \ times one substring occurs in a string. BTW, there's an example in the PHP docs\
    \ about how to solve this problem (a variation of your algorithm in the comments).\n\
    <|/ c |>\n<| c |>\nThe algorithm is much faster then the loop, but if you want\
    \ it to have a better performance, I would suggest using the following.\n\n`public\
    \ function countOccurrences($haystack, $needle)\n    {\n        $index = strpos($haystack,\
    \ $needle);\n        $count = 0;\n        \n        while ($index !== FALSE) {\n\
    \            $count++;\n            $index = strpos($haystack, $needle, $index\
    \ + strlen($needle));\n        }\n        \n        return $count;\n    }`\n<|/\
    \ c |>\n<| a |>\nOne liner:\n<code>\n$occurrences = count(preg_grep('/'.$needle.'/i',\
    \ $haystack));\n</code>\n<|/ a tags=php,string,count,substring dscore=2 |>\n<|\
    \ a |>\nThe code below is very fast\n<code>\n$str=\"abba\";\n$needle=\"ab\";\n\
    $counter=0;\nfor ($i = 0; $i < strlen($str); $i++) {\n    if (substr($str, $i,\
    \ strlen($needle))==$needle) {\n      $counter++;\n    }\n}\necho \"Count: $counter\"\
    ;\n</code>\n<|/ a dscore=1 tags=php,string,count,substring |>\n<| c |>\nThis works\
    \ fine but \nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp062q6pni.php
    on line 20

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    if ($string[0]\
    \ == '\"' && $string[$string.length - 1] == '\"') {\n        $string = $string[1:-1];\n\
    \    }\n    $matches = 0;\n    $pos = strpos($string, $substring);\n    while\
    \ ($pos > 0) {\n        $matches++;\n        $pos = strpos($string, $substring,\
    \ $pos + 1);\n    }\n    return $matches;\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ dscore=0 tags=php |>\nThe other answers work great, but if you want to know\
    \ the number of occurrences of a substring within a string where the substring\
    \ occurs in other locations, this will do the trick\n<code>\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token ":", expecting "]" in /tmp/tmp1ond8cy3.php
    on line 11

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $result = 0;\n\
    \    $length = strlen($substring);\n\n    for ($i = 0; $i < $length; $i++) {\n\
    \        if ($string[$i] == $substring[$i]) {\n            $result++;\n      \
    \  }\n        else if ($string[$i] == $substring[strlen($substring) - 1 - $i])\
    \ {\n            $result++;\n            $i++;\n        }\n        else {\n  \
    \          $result = 0;\n        }\n    }\n\n    return $result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\nThis answer assumes case-insensitivity and\
    \ allows for overlapping matches:\n<code>\nfunction candidate(...$args) {\n  \
    \  return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    cacacacac\", \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpetj7pvt6.php
    on line 28

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $found = array();\n\
    \n    // Get substring count\n    $count = substr_count($string, $substring);\n\
    \    $found[$substring] = $count;\n\n    $string2 = $string;\n    $found[$string]\
    \ = $count;\n    $found[strtolower($string)] = $count;\n\n    // Count cases which\
    \ start with the substring\n    for ($i = 0; $i < strlen($string); ++$i) {\n \
    \       if (!isset($found[substr($string, $i, 1)])) {\n            $found[substr($string,\
    \ $i, 1)] = 0;\n        }\n    }\n\n    // Count cases which end with the substring\n\
    \    for ($i = 0; $i < strlen($string); ++$i) {\n        if (!isset($found[substr($string,\
    \ 0, strlen($string) - $i)])) {\n            $found[substr($string, 0, strlen($string)\
    \ - $i)] = 0;\n        }\n    }\n\n    // Count cases which contain the substring\n\
    \    for ($i = 0; $i < strlen($string); ++$i) {\n        if (!isset($found[substr($string,\
    \ 0, $i)])) {\n            $found[substr($string, 0, $i)] = 0;\n        }\n  \
    \  }\n\n    // Count cases which start with the substring, end with the substring,\
    \ and contain the substring\n    for ($i = 0; $i < strlen($string); ++$i) {\n\
    \        for ($j = $i; $j < strlen($string); ++$j) {\n            if (!isset($found[substr($string,\
    \ $i, $j)])) {\n                $found[substr($string, $i, $j)] = 0;\n       \
    \     }\n        }\n    }\n\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzebjl7pl.php:59\n\
    Stack trace:\n#0 /tmp/tmpzebjl7pl.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpzebjl7pl.php\
    \ on line 59\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n  $count = 0;\n \
    \ for ($i = 0; $i < strlen($string); $i++) {\n    if (strpos($string, $substring,\
    \ $i) !== FALSE) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\nfunction\
    \ candidate(...$args) {\n    return how_many_times(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpydxckmch.php:25\n\
    Stack trace:\n#0 /tmp/tmpydxckmch.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpydxckmch.php\
    \ on line 25\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $substring_length\
    \ = strlen($substring);\n\n    $chars = str_split($string);\n    $count = count(array_filter($chars,\
    \ function ($char) use ($substring_length) { \n        return substr($char, 0,\
    \ $substring_length) == $substring;\n    }));\n\n    return $count;\n}\n\nfunction\
    \ candidate(...$args) {\n    return how_many_times(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $substring in /tmp/tmp82c7wxdg.php on line\
    \ 14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp82c7wxdg.php:25\n\
    Stack trace:\n#0 /tmp/tmp82c7wxdg.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp82c7wxdg.php\
    \ on line 25\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $matches = preg_split(\"\
    /($substring)/\", $string, -1, PREG_SPLIT_NO_EMPTY);\n    $number_of_matches =\
    \ 0;\n    foreach ($matches as $match) {\n        if ($match != \"\") {\n    \
    \        $number_of_matches++;\n        }\n    }\n    return $number_of_matches;\n\
    }\n</code>\n<|/ a tags=php |>\n<| c |>\nThat only counts occurrences of `\"aa\"\
    `, which doesn't count overlapping occurrences (\"aa\" appears in `\"aaa\"`).\
    \  Also, it's more complex than it needs to be.  See my answer.\n<|/ c |>\n<|\
    \ a dscore=3 |>\nThe best solution I could come up with is this:\n<code>\n<?php\n\
    \n$string = 'aaa';\n$pattern = 'a';\n\n$stringLength = strlen($string);\n$patternLength\
    \ = strlen($pattern);\n\n$count = array_sum(preg_split(\"/(?<=^(?:.{$stringLength\
    \ - $patternLength}?|.$)){$pattern}/\", $string));\n</code>\nThe key here is to\
    \ find the position of the first match of the pattern inside the string, and then\
    \ use that to limit the regex search to that first character.  This is easily\
    \ done by adding the length of the pattern, and subtracting the length of the\
    \ pattern to find the position of the first match.  However, this only works if\
    \ the pattern is at the start of the string, and not at an arbitrary point in\
    \ the string.\nThe preg_split call then counts all the occurrences of the pattern\
    \ in the string.\n<|/ a tags=php |>\n<| a |>\nThe best answer so far is:\n<code>\n\
    $string = 'aaa';\n$pattern = 'a';\n$count = preg_match_all('/' . strtr($pattern,\
    \ 'a','\\\\') . '/', $string);\n</code>\nHowever, this solution only works when\
    \ the pattern is at the beginning of the string, and not at an arbitrary point\
    \ in the string.  Here's a more generic solution which works with any position\
    \ in the string and any length for the pattern:\n<code>\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp4zk476on.php
    on line 19

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count_of_substring\
    \ = 0;\n    $length_of_string = $string->length();\n    $string_length = strlen($substring);\n\
    \    $string_length_in_substr = strlen($substring);\n    $start_index = 0;\n \
    \   for ($i = 0; $i < $string_length; ++$i) {\n        $start_index += ($string->substr($start_index)==$substring)?1:0;\n\
    \        $count_of_substring += ($start_index >= $length_of_string)?1:0;\n   \
    \ }\n    return $count_of_substring;\n}\n\nfunction candidate(...$args) {\n  \
    \  return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    cacacacac\", \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to a member function length() on string\
    \ in /tmp/tmpybnui3kr.php:11\nStack trace:\n#0 /tmp/tmpybnui3kr.php(23): how_many_times('',\
    \ 'x')\n#1 /tmp/tmpybnui3kr.php(27): candidate('', 'x')\n#2 /tmp/tmpybnui3kr.php(33):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpybnui3kr.php on line 11\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $result = 0;\n\
    \    $len = strlen($string);\n    for($i = 0; $i < $len; $i++) {\n        $test\
    \ = $string[$i];\n        $substring_len = strlen($substring);\n        $found\
    \ = 0;\n        for($j = 0; $j < $substring_len; $j++) {\n            $test ===\
    \ $substring[$j] && $found++;\n        }\n        if($found >= $substring_len)\
    \ {\n            $result++;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return how_many_times(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7lbquc1q.php:33\n\
    Stack trace:\n#0 /tmp/tmp7lbquc1q.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7lbquc1q.php\
    \ on line 33\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n\t$i = strpos($string,\
    \ $substring);\n\tif ($i == false) return 0;\n\treturn (strlen($string) - $i)\
    \ / strlen($substring) + 1;\n}\n</code>\n<|/ a |>\n<| c |>\nI find this more flexible\
    \ than the other solutions. I believe it allows the use of arrays to store the\
    \ strings and substrings in the how_many_times function and outputs the count\
    \ by adding them to the array as the function iterates.\n<|/ c |>\n<| a |>\nHere's\
    \ an alternative to using PHP's explode, which is designed to deal with delimiters\
    \ that are not in the input.  As such it can give incorrect results if you don't\
    \ know the delimiters in the input.  \n<code>\nfunction candidate(...$args) {\n\
    \    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    cacacacac\", \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpnte1rf9f.php
    on line 14

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    return substr_count($string,\
    \ $substring);\n}\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpype1rpkd.php:19\n\
    Stack trace:\n#0 /tmp/tmpype1rpkd.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpype1rpkd.php\
    \ on line 19\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    if (strlen($string)\
    \ == 0)\n        return 0;\n    if (strlen($substring) == 0)\n        return 1;\n\
    \    if (strpos($string, $substring) !== false)\n        return 1 + how_many_times(substr($string,\
    \ strlen($substring)), substr($string, 0, strlen($substring)));\n    return 0;\n\
    }\n</code>\n<|/ a dscore=4 |>\n<| a dscore=4 |>\nThis is a python solution\n<code>\n\
    def howmany(string, sub):\n   cnt = 0\n   for c in range(len(string)):\n     \
    \ if string[c] == sub[0]:\n         if string[c + 1] == sub[1]:\n            cnt\
    \ += howmany(string[c + 2:], sub[2:])\n         else:\n            cnt += howmany(string[c\
    \ + 1:], sub[1:])\n   return cnt\n</code>\n<|/ a tags=php,python,string |>\n<|\
    \ a dscore=4 |>\nA recursive solution inspired by the code by Kevin H. Henderson\
    \ and Dave Vandermoren from the following question:\n<code>\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpkttrq05k.php
    on line 18

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $found = 0;\n\
    \    $substring = strtolower($substring);\n    foreach (str_split($string) as\
    \ $character) {\n        $found += substr_count(strtolower($character), $substring);\n\
    \    }\n    return $found;\n}\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprfijmnxi.php:25\n\
    Stack trace:\n#0 /tmp/tmprfijmnxi.php(29): test()\n#1 {main}\n  thrown in /tmp/tmprfijmnxi.php\
    \ on line 25\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    if (strpos($string,\
    \ $substring) !== false) return substr_count($string, $substring);\n    return\
    \ strlen($string);\n}\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0tz2lvji.php:21\n\
    Stack trace:\n#0 /tmp/tmp0tz2lvji.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp0tz2lvji.php\
    \ on line 21\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $total_count\
    \ = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == $substring[0]) {\n            $total_count++;\n            if ($i == strlen($string)\
    \ - 1) {\n                return $total_count;\n            }\n        }\n   \
    \     for ($j = 0; $j < strlen($substring); $j++) {\n            if ($substring[$j]\
    \ != $string[$i + $j]) {\n                break;\n            }\n        }\n \
    \   }\n    return $total_count;\n}\n\nfunction candidate(...$args) {\n    return\
    \ how_many_times(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    cacacacac\", \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp18fbix_o.php:34\n\
    Stack trace:\n#0 /tmp/tmp18fbix_o.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp18fbix_o.php\
    \ on line 34\n"
  timestamp: 1659979447
- exit_code: 0
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = 0;\n\
    \    $length = strlen($string);\n    $substringLength = strlen($substring);\n\
    \    for ($i = 0; $i < $length; ++$i) {\n        if (strpos($string, $substring,\
    \ $i) === $i) {\n            $count += 1;\n        }\n    }\n    return $count;\n\
    }\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n\t$total_substrings\
    \ = 0;\n\t$string_length = strlen($string);\n\tfor($i = 0; $i < $string_length;\
    \ $i++) {\n\t\t$string_to_test = substr($string, $i);\n\t\t$substring_to_test\
    \ = substr($substring, 0, $i);\n\t\t$total_substrings += (str_casecmp($string_to_test,\
    \ $substring_to_test) == 0);\n\t}\n\treturn $total_substrings;\n}\n\nfunction\
    \ candidate(...$args) {\n    return how_many_times(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function str_casecmp()\
    \ in /tmp/tmp5ncb40z4.php:15\nStack trace:\n#0 /tmp/tmp5ncb40z4.php(21): how_many_times('xyxyxyx',\
    \ 'x')\n#1 /tmp/tmp5ncb40z4.php(26): candidate('xyxyxyx', 'x')\n#2 /tmp/tmp5ncb40z4.php(31):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp5ncb40z4.php on line 15\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n\t$pattern = '/'\
    \ . preg_quote($substring, '/') . '/';\n\treturn preg_match_all($pattern, $string,\
    \ $matches);\n}\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4eqd4uvu.php:20\n\
    Stack trace:\n#0 /tmp/tmp4eqd4uvu.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp4eqd4uvu.php\
    \ on line 20\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n  $matches = preg_match_all('/'\
    \ . $substring . '/', $string, $matches);\n\n  return $matches[1];\n}\n\nfunction\
    \ candidate(...$args) {\n    return how_many_times(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Trying to access array offset on value of type int in /tmp/tmpkxuhtdek.php\
    \ on line 12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkxuhtdek.php:20\n\
    Stack trace:\n#0 /tmp/tmpkxuhtdek.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpkxuhtdek.php\
    \ on line 20\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    // Create an\
    \ array of all uppercase letters in $substring.\n    $substring = strtoupper($substring);\n\
    \    $substring_length = strlen($substring);\n\n    // Create an array of all\
    \ uppercase letters in $string.\n    $string = strtoupper($string);\n    $string_length\
    \ = strlen($string);\n\n    $matches = 0;\n    for ($i = 0; $i < $string_length;\
    \ $i++) {\n        // Check if the letter at position $i is the same as the letter\
    \ at position $i + $substring_length.\n        // Note that this letter might\
    \ not exist in the original string.\n        if ($string[$i] === $string[$i +\
    \ $substring_length]) {\n            $matches++;\n        }\n    }\n\n    return\
    \ $matches;\n}\n</code>\n<|/ a tags=string,php,regex |>\n<| c |>\nThank you very\
    \ much! I did not know about this function.\n<|/ c |>\n<| c |>\nYes I did find\
    \ it while searching for something else. Thanks for sharing your solution here.\n\
    <|/ c |>\n<| c |>\nThis solution is more elegant than mine, although it's slower\
    \ on large strings. For small strings (like yours), the difference is probably\
    \ negligible. Also, why don't you just use mb_strlen for UTF-8 strings? Why do\
    \ you have to convert to uppercase all the time? Just for good measure?\n<|/ c\
    \ |>\n<| c |>\n- I agree that it's slower, but my tests show it's faster than\
    \ `str_word_count()`. I also tested it with a larger string to see if the difference\
    \ would go away with larger strings (as I assumed it would since the difference\
    \ was negligible).\n<|/ c |>\n<| c |>\nFor those interested, I timed str_word_count()\
    \ with 10,000,000 iterations. Your function took 1.2 seconds. str_word_count()\
    \ took 0.7 seconds. I ran str_word_count() with 100,000,000 iterations and my\
    \ function took 6.5 seconds. You nailed it!\n<|/ c |>\n<| a |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return how_many_times(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpxml0mno4.php
    on line 29

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    return substr_count($string,\
    \ $substring);\n}\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmy4985vc.php:20\n\
    Stack trace:\n#0 /tmp/tmpmy4985vc.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpmy4985vc.php\
    \ on line 20\n"
  timestamp: 1659979419
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    return substr_count(strtolower($string),\
    \ strtolower($substring));\n}\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp3w4hjwz.php:20\n\
    Stack trace:\n#0 /tmp/tmpp3w4hjwz.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpp3w4hjwz.php\
    \ on line 20\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n\tif (empty($string)\
    \ || empty($substring)) {\n\t\treturn 0;\n\t}\n\t$times = substr_count($string,\
    \ $substring);\n\tif ($times === 1) {\n\t\treturn 1;\n\t}\n\treturn $times + how_many_times($string,\
    \ substr($string, 0, strlen($string) - $times));\n}\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdp23gayn.php:26\n\
    Stack trace:\n#0 /tmp/tmpdp23gayn.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpdp23gayn.php\
    \ on line 26\n"
  timestamp: 1659979447
- exit_code: -1
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n  $count = 0; //\
    \ how many times the substring has been found\n\n  // Loop until either $string\
    \ or the substring has been fully searched.\n  while ($string != \"\" || $substring\
    \ != \"\") {\n    // If the substring has already been found, increment the count.\n\
    \    if ($substring == \"\") {\n      $count++;\n    }\n\n    // If the substring\
    \ has not been found, but $string is non-empty, break out of the loop and move\
    \ on\n    if ($string != \"\") {\n      // If the string is empty, the substring\
    \ was found, so break out of the loop.\n      if ($string == \"\") {\n       \
    \ break;\n      }\n\n      // If the character at index 0 of $string is the same\
    \ as the character at index 0 of $substring\n      if ($string[0] === $substring[0])\
    \ {\n        // If the character at index 1 of $string is not the same as the\
    \ character at index 1 of $substring\n        if ($string[1] != $substring[1])\
    \ {\n          // If the character at index 2 of $string is not the same as the\
    \ character at index 2 of $substring\n          if ($string[2] != $substring[2])\
    \ {\n            // If the character at index 3 of $string is not the same as\
    \ the character at index 3 of $substring\n            if ($string[3] != $substring[3])\
    \ {\n              // If the character at index 4 of $string is not the same as\
    \ the character at index 4 of $substring\n              if ($string[4] != $substring[4])\
    \ {\n                // If the character at index 5 of $string is not the same\
    \ as the character at index 5 of $substring\n                if ($string[5] !=\
    \ $substring[5]) {\n                  // If the character at index 6 of $string\
    \ is not the same as the character at index 6 of $substring\n                \
    \  if ($string[6] != $substring[6]) {\n                    // If the character\
    \ at index 7 of $string is not the same as the character at index 7 of $substring\n\
    \                    if ($string[7] != $substring[7]) {\n                    \
    \  // If the character at index 8 of $string is not the same as the character\
    \ at index 8 of $substring\n                      if ($string[8] != $substring[8])\
    \ {\n                        // If the character at index 9 of $string is not\
    \ the same as the character at index 9 of $substring\n                       \
    \ if ($string[9] != $substring[9]) {\n                          $count++;\n  \
    \                      }\n                      }\n                    }\n   \
    \               }\n                }\n              }\n            }\n       \
    \   }\n        }\n      }\n    }\n\n    // Set the $string variable to the next\
    \ character\n    $string = $string[1];\n  }\n\n  return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: 'b''\nWarning: Uninitialized string offset 1 in /tmp/tmp49yi51m2.php on
    line 60\n\nWarning: Uninitialized string offset 1 in /tmp/tmp49yi51m2.php on line
    60\n\nWarning: Uninitialized string offset 1 in /tmp/tmp49yi51m2.php on line 60\n\nWarning:
    Uninitialized string offset 1 in /tmp/tmp49yi51m2.php on line 60\n\nWarning: Uninitialized
    string offset 1 in /tmp/tmp49yi51m2.php on line 60\n\nWarning: Uninitialized string
    offset 1 in /tmp/tmp49yi51m2.php on line 60\n\nWarning: Uninitialized string offset
    1 in /tmp/tmp49yi51m2.php on line 60\n\nWarning: Uninitialized string offset 1
    in /tmp/tmp49yi51m2.php on line 60\n\nWarning: Uninitialized string offset 1 in
    /tmp/tmp49yi51m2.php on line 60\n\nWarning: Uninitialized string offset 1 in /tmp/tmp49yi51m2.php
    on line 60\n\nWarning: Uninitialized string offset 1 in /tmp/tmp49yi51m2.php on
    line 60\n\nWarning: Uninitialized string offset 1 in /tmp/tmp49yi51m2.php on line
    60\n\nWarning: Uninitialized string offset 1 in /tmp/tmp49yi51m2.php on line 60\n\nWarning:
    Uninitialized string offset 1 in /tmp/tmp49yi51m2.php on line 60\n\nWarning: Uninitialized
    string offset 1 in /tmp/tmp49yi51m2.php on line 60\n\nWarning: Uninitialized string
    offset 1 in /tmp/tmp49yi51m2.php on line 60\n\nWarning: Uninitialized string offset
    1 in /tmp/tmp49yi51m2.php on line 60\n\nWarning: Uninitialized string offset 1
    in /tmp/tmp49yi51m2.php on line 60\n\nWarning: Uninitialized string offset 1 in
    /tmp/tmp49yi51m2.php on line 60\n\nWarning: Uninitialized string offset 1 in /tmp/tmp49yi51m2.php
    on line 60\n\nWarning: Uninitialized string offset 1 in /tmp/tmp49yi51m2.php on
    line 60\n\nWarning: Uninitialized string offset 1 in /tmp/tmp49yi51m2.php on line
    60\n\nWarning: Uninitialized string offset 1 in /tmp/tmp49yi51m2.php on line 60\n\nWarning:
    Uninitialized string offset 1 in /tmp/tmp49yi51m2.php on line 60\n\nWarning: Uninitialized
    string offset 1 in /tmp/tmp49yi51m2.php on line 60\n\nWarning: Uninitialized string
    offset 1 in /tmp/tmp49yi51m2.php on line 60\n\nWarning: Uninitialized string offset
    1 in '
  timestamp: 1659979453
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    return preg_match_all(\"\
    /\" . preg_quote($substring, '/') . \"/\", $string, $matches) ? count($matches[0])\
    \ : 0;\n}\n</code>\nThe function how_many_times() first builds a regex pattern\
    \ with \"/\" as delimiter and preg_quote() the $substring to make sure the $substring\
    \ can handle special characters. Then it searches the $string for the pattern.\n\
    It works like\n<code>\nhow_many_times(\"aaaa\", \"aa\") \u21D2 3 because there\
    \ are 3 occurrences of \"aa\" in the $string.\nhow_many_times(\"aaaa\", \"ab\"\
    ) \u21D2 0 because there is no \"ab\" in the $string.\nhow_many_times(\"aaaa\"\
    , \"ab\") \u21D2 0 because there is no \"aa\" in the $string.\nhow_many_times(\"\
    aaaa\", \"ab\") \u21D2 0 because there is no \"ab\" in the $string.\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\n<?php\n    function count_chars($string, $char)\
    \ {\n        if (strlen($string) == 0) {\n            return 0;\n        }\n \
    \       $count = 0;\n        for ($i = 0; $i < strlen($string); $i++) {\n    \
    \        if ($string[$i] == $char) {\n                $count++;\n            }\n\
    \        }\n        return $count;\n    }\n\n    echo count_chars(\"hallo world\"\
    , \"o\");\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp471636qf.php
    on line 12

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    return substr_count($string,\
    \ $substring);\n}\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmy4985vc.php:20\n\
    Stack trace:\n#0 /tmp/tmpmy4985vc.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpmy4985vc.php\
    \ on line 20\n"
  timestamp: 1659979419
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n  $matches = [];\n\
    \  // Find all matches first, then return number of overlapping matches.\n  if\
    \ (preg_match_all('/' . $substring . '/', $string, $matches)) {\n    return count($matches[0]);\n\
    \  } else {\n    return 0;\n  }\n}\n</code>\n<|/ a |>\n<| c |>\nIt's a pretty\
    \ old answer, but I think this is the right answer. Thank you.\n<|/ c |>\n<| a\
    \ |>\nIn PHP 7.3 you can use this function for counting overlapping substrings\
    \ in a longer string:\n<code>\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpnqjke_69.php
    on line 18

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n\t$found = 0;\n\t\
    for ($i = 0; $i < strlen($string); $i++) {\n\t\tif (($found = stripos($string,\
    \ $substring, $i)) === false) break;\n\t}\n\treturn $found;\n}\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_k77jl6f.php:23\n\
    Stack trace:\n#0 /tmp/tmp_k77jl6f.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp_k77jl6f.php\
    \ on line 23\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n  // Handle empty\
    \ string and substring empty string.\n  if ($string === \"\" || $substring ===\
    \ \"\") return 0;\n  // If the string is the substring exactly one time, then\
    \ return the count of it.\n  if ($string === $substring) return 1;\n  // Create\
    \ a hash to store the frequency of each character in the substring.\n  // We use\
    \ an array because a hash table would require less memory and be faster.\n  $frequency\
    \ = array_fill(0, strlen($substring) + 1, 0);\n  // Iterate through all the characters\
    \ of the original string.\n  for ($i = 0; $i < strlen($string); $i++) {\n    //\
    \ If the character is not in the substring, skip it.\n    if (strpos($substring,\
    \ $string[$i]) === false) continue;\n    // Increase the count for the character\
    \ in the substring.\n    $frequency[strpos($substring, $string[$i])] += 1;\n \
    \ }\n  // Return count of the substring in the original string.\n  return $frequency[strlen($substring)];\n\
    }\n</code>\nThis code would give the same results as what you're trying to achieve\
    \ with your previous code if the two strings are always equal in length.\n<|/\
    \ a dscore=2 tags=php,string |>\n<| a tags=php,string dscore=2 |>\nTry this code\
    \ below, this might help you out:\n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpuewg8okf.php
    on line 27

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count_sub =\
    \ substr_count($string, $substring);\n    return $count_sub;\n}\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpew6_4dc3.php:20\n\
    Stack trace:\n#0 /tmp/tmpew6_4dc3.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpew6_4dc3.php\
    \ on line 20\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $string = preg_replace('/\\\
    B' . preg_quote($substring) . '\\b/i', '', $string);\n    return substr_count($string,\
    \ $substring);\n}\n</code>\nThe first function how_many_times returns the number\
    \ of times a substring appears in the original string. It works well with non-overlapping\
    \ cases, like \"aaaaa\" and \"aaa\" being replaced with \"\", the return value\
    \ is 3.\nThe second function substr_count counts the number of times another substring\
    \ appears in a string and returns the number as a number. Here it works well with\
    \ \"aaaaa\" and \"aaa\" being replaced with \"\", the return value is 3.\n<|/\
    \ a dscore=2 |>\n<| a dscore=0 |>\nIf you want a regex solution, you could use\
    \ a lookahead and lookbehind to check for both cases:\n<code>\npreg_match('/(?=(.)(?=a))/',\
    \ \"aaaa\")\n</code>\nIn action: http://sandbox.onlinephpfunctions.com/code/f99e3ae69b492ab966a69c09d706ff696af4878\n\
    <|/ a tags=php,string |>\n<| c |>\nI'm surprised at this, it seems to be working\
    \ for me in PHP. But it's not working in JavaScript or in Ruby either. I tried\
    \ a bunch of variations, including `(?=(.))(?=a)`, `(?=.*?a)(?=.?)`, and so on,\
    \ and none of them worked.\n<|/ c |>\n<| c |>\nOkay, here's an example that works\
    \ with Ruby: https://regex101.com/r/qL6vK7/1\n<|/ c |>\n<| c |>\nYes, I've tried\
    \ this on Ruby and it works, but it does not work in PHP. I wonder why. I'm going\
    \ to mark this as correct, because it seems like PHP is doing exactly what I want.\n\
    <|/ c |>\n<| a dscore=0 |>\nAs per the comment from DavidG and this answer, here's\
    \ what I ended up with:\n<code>\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp2tlyx1ww.php
    on line 13

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $total_times\
    \ = 1;\n    $pos = strpos($string, $substring);\n    while ($pos != false) {\n\
    \        $total_times++;\n        $pos = strpos($string, $substring, $pos + 1);\n\
    \    }\n    return $total_times;\n}\nfunction candidate(...$args) {\n    return\
    \ how_many_times(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    cacacacac\", \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4myuwijj.php:23\n\
    Stack trace:\n#0 /tmp/tmp4myuwijj.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp4myuwijj.php\
    \ on line 23\n"
  timestamp: 1659979447
- exit_code: -1
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $n = substr_count($string,\
    \ $substring);\n    if ($n == 0)\n        return 0;\n    $i = 0;\n    $j = 1;\n\
    \    while ($i <= $n) {\n        if (substr_count(substr($string, $i, $j), $substring)\
    \ >= $n)\n            $i++;\n        else\n            $j++;\n    }\n    return\
    \ $i;\n}\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979452
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n\t$string_count =\
    \ 0;\n\t$string_length = strlen($string);\n\t$substring_length = strlen($substring);\n\
    \t// If substring is longer than string return 0\n\tif ($substring_length > $string_length)\
    \ {\n\t\treturn 0;\n\t}\n\t// If string is empty or substring is empty return\
    \ 0\n\tif (strlen($string) == 0 || strlen($substring) == 0) {\n\t\treturn 0;\n\
    \t}\n\t// Initialize counter\n\t$counter = 0;\n\t// Loop through string and count\
    \ characters\n\tfor ($i = 0; $i < $string_length; $i++) {\n\t\t// Check if current\
    \ character is the same as the beginning of substring\n\t\tif ($string[$i] ==\
    \ $substring[0]) {\n\t\t\t// Increment counter if the current character is the\
    \ same as the beginning of substring\n\t\t\t$counter++;\n\t\t\t// Skip the remaining\
    \ of the substring because the same character has been checked\n\t\t\t$i += $substring_length;\n\
    \t\t}\n\t}\n\t// Return counter variable\n\treturn $counter;\n}\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppl66d5ii.php:44\n\
    Stack trace:\n#0 /tmp/tmppl66d5ii.php(48): test()\n#1 {main}\n  thrown in /tmp/tmppl66d5ii.php\
    \ on line 44\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n  return (strpos($string,\
    \ $substring) + strlen($substring) - 1 - strrpos($string, $substring)) / 2;\n\
    }\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppdilrkqc.php:19\n\
    Stack trace:\n#0 /tmp/tmppdilrkqc.php(24): test()\n#1 {main}\n  thrown in /tmp/tmppdilrkqc.php\
    \ on line 19\n"
  timestamp: 1659979447
- exit_code: 0
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n  if (strlen($string)\
    \ === 0) {\n    return 0;\n  }\n  $matches = 0;\n  for ($i = 0; $i < strlen($string);\
    \ $i++) {\n    if (substr($string, $i, strlen($substring)) === $substring) {\n\
    \      $matches++;\n    }\n  }\n  return $matches;\n}\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $string    =\
    \ preg_replace(\"/[^\".preg_quote($substring).\"]/\", \" \", $string);\n    $matches\
    \   = preg_grep(\"/\".preg_quote($substring).\"/\", explode(\" \", $string));\n\
    \    $count     = 0;\n\n    foreach ($matches as $match) {\n        $count++;\n\
    \    }\n\n    return $count;\n}\n</code>\nNow for the final code:\n<code>\n<?php\n\
    function candidate(...$args) {\n    return how_many_times(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp_82s9_2c.php
    on line 20

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    return substr_count($string,\
    \ $substring);\n}\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmy4985vc.php:20\n\
    Stack trace:\n#0 /tmp/tmpmy4985vc.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpmy4985vc.php\
    \ on line 20\n"
  timestamp: 1659979419
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $found = array();\n\
    \    for($i = 0; $i < strlen($string); $i++) {\n        if(strpos($string, $substring,\
    \ $i) !== false) {\n            $found[] = $i;\n        }\n    }\n    return count($found);\n\
    }\n</code>\n<|/ a tags=php dscore=1 |>\n<| a |>\nThe question is a bit vague but\
    \ here is a simple way of doing it using the explode function which can be used\
    \ to get all strings from one string divided into different parts using delimiters\
    \ provided.\n<code>\n<?php\n\n$string = 'aaaasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss\n\
    function candidate(...$args) {\n    return how_many_times(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpw1rw9xcn.php
    on line 18

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    return substr_count($string,\
    \ $substring);\n}\n</code>\n<|/ a tags=php |>\n<| a |>\nThis question has been\
    \ answered correctly but just for completeness, here's another way:\n<code>\n\
    $pattern = '(foo|bar)';\n$replacement = '*';\n$string = 'foo foo foo foo foo foo\
    \ foo foo foo foo bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar\
    \ bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar\
    \ bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar\
    \ bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar\
    \ bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar\
    \ bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar\
    \ bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar\
    \ bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar\
    \ bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar\
    \ bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar\
    \ bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar\
    \ bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar\
    \ bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar\
    \ bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar\
    \ bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar\
    \ bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar\
    \ bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar\
    \ bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar\
    \ bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar\
    \ bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar\
    \ bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar\
    \ bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar\
    \ bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar\
    \ bar bar bar \nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmphnd7pfyb.php
    on line 12

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    // Find how many\
    \ times a given substring can be found in the original string.\n    // Count overlaping\
    \ cases.\n    // >>> how_many_times(\"\", \"a\")\n    // 0\n    // >>> how_many_times(\"\
    aaa\", \"a\")\n    // 3\n    // >>> how_many_times(\"aaaa\", \"aa\")\n    // 3\n\
    \    return substr_count($string, $substring);\n}\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2lu4k9vu.php:27\n\
    Stack trace:\n#0 /tmp/tmp2lu4k9vu.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp2lu4k9vu.php\
    \ on line 27\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    return substr_count($string,\
    \ $substring);\n}\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpype1rpkd.php:19\n\
    Stack trace:\n#0 /tmp/tmpype1rpkd.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpype1rpkd.php\
    \ on line 19\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n  return strlen($string)\
    \ - strlen(preg_replace('/'.preg_quote($substring).'*/', '', $string)) + 1;\n\
    }\n</code>\nIf you were to put this in your controller then you would simply return\
    \ the result as a JSON response:\n<code>\n$how_many_times = how_many_times($string,\
    \ $substring);\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmph6nbach7.php
    on line 12

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $result = 0;\n\
    \    $count = substr_count($string, $substring);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        if (strpos($string, $substring, $i) !== false) {\n        \
    \    $result++;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpayx7quub.php:27\n\
    Stack trace:\n#0 /tmp/tmpayx7quub.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpayx7quub.php\
    \ on line 27\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $matches = array_count_values(str_split($string));\n\
    \    if (isset($matches[$substring]) && $matches[$substring] > 1) {\n        return\
    \ $matches[$substring];\n    } else {\n        return 0;\n    }\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis works great, even better is the fact that you\
    \ can easily change the min and max length from 3 to any other number. +1\n<|/\
    \ c |>\n<| c |>\nJust FYI, this is a very nice function. But if you're trying\
    \ to find how many times a certain substring appears in a string, this solution\
    \ doesn't work as expected. It counts the number of times 'a' appears inside the\
    \ string. For example, if you pass a string \"aaa\" to this function it will return\
    \ 2, which is not what you want. Check out my answer below for a solution that\
    \ works with your example.\n<|/ c |>\n<| c |>\n: Yes, this solution only counts\
    \ the number of times *a* appears. If you want it to count the number of times\
    \ *any* character appears in the string, see this answer: http://stackoverflow.com/a/10868994/\n\
    <|/ c |>\n<| c |>\nYeah, but what about if you want it to count the occurrences\
    \ of every character in the string? For example, if you pass a string \"aaa\"\
    \ to this function it will return 2, which is not what you want. Check out my\
    \ answer below for a solution that works with your example.\n<|/ c |>\n<| c |>\n\
    : See my solution below. I think it's exactly what you're looking for.\n<|/ c\
    \ |>\n<| a tags=string,php,count,match |>\nIf you need the same thing and want\
    \ to use RegEx you can simply use preg_match_all with case insensitive flag and\
    \ add all matches to a counter\n<code>\n$matches = 0;\n$pattern = \"/$subString/i\"\
    ;\npreg_match_all($pattern, $string, $matches);\necho $matches[0];\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis solution is better than the accepted answer.\
    \ Thanks for sharing!\n<|/ c |>\n<| c |>\n: Just FYI, this is a very nice function.\
    \ But if you're trying to find how many times a certain substring appears in a\
    \ string, this solution doesn't work as expected. It counts the number of times\
    \ 'a' appears inside the string. For example, if you pass a string \"aaa\" to\
    \ this function it will return 2, which is not what you want. Check out my answer\
    \ below for a solution that works with your example.\n<|/ c |>\n<| c |>\nI ran\
    \ into this and I wasn't satisfied with all the answers here. This was \nfunction\
    \ candidate(...$args) {\n    return how_many_times(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpd6fhmfll.php
    on line 17

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n\tif ($string ==\
    \ \"\") {\n\t\treturn 0;\n\t}\n\n\tif ($substring == \"\") {\n\t\treturn 1;\n\t\
    }\n\n\tif (strpos($string, $substring) === false) {\n\t\treturn 0;\n\t}\n\n\t\
    preg_match_all(\"/\".preg_quote($substring, \"/\").\"/\", $string, $matches);\n\
    \n\treturn count($matches[0]);\n}\n\nfunction candidate(...$args) {\n    return\
    \ how_many_times(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    cacacacac\", \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvblnspek.php:34\n\
    Stack trace:\n#0 /tmp/tmpvblnspek.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpvblnspek.php\
    \ on line 34\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n  return substr_count($string,\
    \ $substring);\n}\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdyvpgftr.php:20\n\
    Stack trace:\n#0 /tmp/tmpdyvpgftr.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpdyvpgftr.php\
    \ on line 20\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $pos = strpos($string,\
    \ $substring);\n    $count = $pos !== false ? 1 : 0;\n    for($i = 1; $i < strlen($substring);\
    \ $i++) {\n        $pos = strpos($string, $substring, $pos);\n        $count +=\
    \ $pos !== false ? 1 : 0;\n    }\n    return $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbgeiaid3.php:25\n\
    Stack trace:\n#0 /tmp/tmpbgeiaid3.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpbgeiaid3.php\
    \ on line 25\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $matches = array();\n\
    \    foreach (preg_split(\"/($substring)\\\\z/\", $string) as $match) {\n    \
    \    $match[0] = strtolower($match[0]);\n        $matches[$match[0]] = isset($matches[$match[0]])\
    \ ? $matches[$match[0]] + 1 : 1;\n    }\n    return array_sum($matches);\n}\n\
    </code>\n<|/ a tags=php,string,count |>\n<| c |>\nThis was a nice answer. +1 for\
    \ the `array_sum` approach but wouldn't it be more efficient to first count each\
    \ character, then find the maximum, then subtract that from the length of the\
    \ string in order to get the actual number of times a character was found?\n<|/\
    \ c |>\n<| c |>\n: Yes, it would be more efficient. I've also added an answer\
    \ that's more efficient than my first one. Thanks for the +1!\n<|/ c |>\n<| c\
    \ |>\nI implemented a version of this and used it in a benchmark (below).  My\
    \ solution took about 1.5 seconds to return 3 for \"aaaaa\" while the array_sum\
    \ version took about 2 seconds. Both took about 2.5 seconds to complete with the\
    \ first letter of \"aaaaa\" being one of the fastest.  I appreciate all the help\
    \ guys.\n<|/ c |>\n<| a dscore=4 |>\nThe code below is based on an answer above\
    \ by Gumbo.  I added the ability to count the amount of times a character appears\
    \ in a string as well as to return the characters that appear the most frequently\
    \ in the string.  The code below has the following benchmarks.  It takes about\
    \ 2 seconds to complete with the first letter of \"aaaaa\" being one of the fastest\
    \ to return.\n<code>\n<?php\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmplvsb6diu.php
    on line 17

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    if (!$string)\
    \ return 0;\n    return substr_count(strtolower($string), strtolower($substring));\n\
    }\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpft6zcuv9.php:20\n\
    Stack trace:\n#0 /tmp/tmpft6zcuv9.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpft6zcuv9.php\
    \ on line 20\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    if ($substring\
    \ == \"\") return 0;\n    $result = explode($substring, $string);\n    $result\
    \ = array_count_values($result);\n    return array_sum($result);\n}\nfunction\
    \ candidate(...$args) {\n    return how_many_times(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnvmods6x.php:20\n\
    Stack trace:\n#0 /tmp/tmpnvmods6x.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpnvmods6x.php\
    \ on line 20\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = 1;\n\
    \    $pos = strpos($string, $substring);\n\n    while ($pos !== false) {\n   \
    \     $count++;\n        $pos = strpos($string, $substring, $pos + 1);\n    }\n\
    \n    return $count;\n}\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppkgyr9jr.php:26\n\
    Stack trace:\n#0 /tmp/tmppkgyr9jr.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppkgyr9jr.php\
    \ on line 26\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    if (!$string)\
    \ {\n        return 0; // If string is empty, return 0\n    }\n\n    if (!$substring)\
    \ {\n        return count($string); // If substring is empty, return the number\
    \ of times the substring appears\n    }\n\n    $count = preg_match_all('/' . $substring\
    \ . '/', $string, $matches);\n\n    return $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa7ndvovp.php:30\n\
    Stack trace:\n#0 /tmp/tmpa7ndvovp.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpa7ndvovp.php\
    \ on line 30\n"
  timestamp: 1659979447
- exit_code: -1
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = 0; $pos\
    \ = 0; $length = 0;\n    while ($length < strlen($substring)) {\n        $pos\
    \ += strlen($substring);\n        $length = strlen($string);\n    }\n    $overlap\
    \ = ($length - $pos) > 0 ? 1 : 0;\n    $count = (substr_count($string, $substring,\
    \ $overlap) + $overlap);\n    return $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979452
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $found = preg_match_all('/'\
    \ . preg_quote($substring, '/') . '/i', $string, $matches);\n    return $matches[0];\n\
    }\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwnff1jhy.php:19\n\
    Stack trace:\n#0 /tmp/tmpwnff1jhy.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpwnff1jhy.php\
    \ on line 19\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $substring_len\
    \ = strlen($substring);\n    $string_len = strlen($string);\n    return $substring_len\
    \ <= $string_len ? 0 : substr_count($string, $substring);\n}\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphhhu7xo2.php:20\n\
    Stack trace:\n#0 /tmp/tmphhhu7xo2.php(25): test()\n#1 {main}\n  thrown in /tmp/tmphhhu7xo2.php\
    \ on line 20\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = 0; //\
    \ How many times $substring was found in $string.\n\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] === $substring[$i]) { // Same character.\n\
    \            $count++; // Increment the number of times $substring was found in\
    \ $string.\n        }\n        if ($string[$i] !== $substring[$i]) { // Different\
    \ characters.\n            $count = 0; // Reset the count when $substring was\
    \ not found.\n            break; // Exit the for loop.\n        }\n    }\n\n \
    \   return $count;\n}\n</code>\n<|/ a |>\n<| c |>\nThis would be the best and\
    \ most efficient way. The other answers assume that there are no repeated substrings.\
    \ There could be repeating substrings.\n<|/ c |>\n<| c |>\nThis fails against\
    \ my testing - `how_many_times('aaaa', 'aa')` returns 1. However it does return\
    \ 3 when there is only one match for a substring.\n<|/ c |>\n<| c |>\n: Thanks,\
    \ I fixed that.\n<|/ c |>\n<| c |>\nYour updated function still returns 1 for\
    \ `how_many_times('aaaa', 'aa')` but 3 for `how_many_times('aaaa', 'ab')` - as\
    \ opposed to your original answer which returns 0 and 2\n<|/ c |>\n<| c |>\n:\
    \ I did some testing and it returns 0 when there's only one match, 1 when there\
    \ is multiple match, and 2 when there are no matches. Could you give an example\
    \ where your original answer would return something other than 3?\n<|/ c |>\n\
    <| a |>\nUsing array_count_values():\n<code>\n$count = array_count_values(str_split($string));\n\
    </code>\nThis produces an associative array which can be converted to a string.\n\
    <code>\nvar_dump(implode('', array_map('chr', $count)));\n</code>\nIf you need\
    \ it returned as an integer, use array_sum() instead of implode():\n<code>\n$count\
    \ = array_sum(array_map('chr', $count));\n</code>\n<|/ a tags=php,string dscore=5\
    \ |>\n<| c |>\nThis is the best answer. Although this will not include repeated\
    \ substrings. In a more complex case where you want to count occurrences of \"\
    hello\" in a string but also \"hello\" in the string \"hello\" and the string\
    \ \"goodbye\" then this would not work well.\n<|/ c |>\n<| c |>\nIf you wanted\
    \ a solution that would include repeated substrings, you can use `array_count_values`\
    \ followed by `array_sum`.\n<|/ c |>\n<| c |>\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp6w5zyyak.php
    on line 24

    '
  timestamp: 1659979447
- exit_code: -1
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $total = 0;\n\
    \    $position = 0;\n    $length = strlen($string);\n    while ($position < $length)\
    \ {\n        $pos = strpos($string, $substring, $position);\n        if ($pos\
    \ === false) {\n            $total++;\n            $position = $length;\n    \
    \    } else {\n            $total++;\n            $position = $pos;\n        }\n\
    \    }\n    return $total;\n}\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979452
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    return substr_count(strtolower($string),\
    \ strtolower($substring));\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nIt would be\
    \ better to add `strtolower` inside the `substr_count` calls, to avoid any case\
    \ issues.\n<|/ c |>\n<| c |>\nThanks, I added it.\n<|/ c |>\n<| c |>\nFor a slightly\
    \ faster solution, I've posted a [solution](http://stackoverflow.com/a/26321688/1768303)\
    \ with a different approach.\n<|/ c |>\n<| a tags=string,substring,php |>\nThe\
    \ code below counts the number of times that $needle occurs inside $haystack.\
    \ In order to find the number of times that $needle appears inside $haystack that\
    \ are contiguous to $needle, I replace all $needle with $needle/$1 (i.e. $needle/a\
    \ becomes $needle/a/a) and then run substr_count on that. It might be slower but\
    \ it is more readable. \n<code>\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp31165iss.php
    on line 12

    '
  timestamp: 1659979447
- exit_code: -1
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = 0;\n\
    \    $position = 0;\n    $length = strlen($substring);\n    while ($position <\
    \ $length) {\n        $position = strpos($string, $substring, $position);\n  \
    \      if ($position === false) {\n            $count++;\n        }\n        $position++;\n\
    \    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979452
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $counter = 0;\n\
    \n    if ($substring === \"\") {\n        return $counter;\n    }\n\n    $length\
    \ = strlen($string);\n    for ($i = 0; $i < $length; $i++) {\n        if (strpos($string,\
    \ $substring, $i) !== false) {\n            $counter++;\n        }\n    }\n  \
    \  return $counter;\n}\n\n$str = 'aa bb cc dd eee fff gg hhh ii jj kk ll mm n\
    \ o pp qq rr ss tt uuu v www xxx yyy zzz';\n$sub_string = 'a';\n$counter = how_many_times($str,\
    \ $sub_string);\nif ($counter > 0) {\n    echo 'Found: ' . $counter . ' times.';\n\
    } else {\n    echo 'Not found.';\n}\n</code>\nOutput:\n<code>\nFound: 3 times.\n\
    </code>\n<|/ a tags=string,php,substring |>\n<| c |>\nThis one worked for me and\
    \ helped me a lot. Cheers\n<|/ c |>\n<| a dscore=3 |>\nHere's a one-liner that\
    \ checks the string for multiple occurrences and returns the number of occurrences;\n\
    <code>\necho substr_count($input, 'a');\n</code>\nIt does so by finding the first\
    \ occurrence of 'a' in the string and incrementing a counter until it finds a\
    \ different 'a' character.\n<|/ a tags=string,php,substring |>\n<| c |>\nFor some\
    \ reason this returns 1 when I test it against 'abc abd'.\n<|/ c |>\n<| c |>\n\
    The other answer works.. but this seems to be the best solution that works with\
    \ multibyte characters.\n<|/ c |>\n<| c |>\n: It works fine in my tests, but I've\
    \ since discovered a bug in php7.2. If it works in your tests and you don't have\
    \ that bug then it's probably a bug in php7.2.\n<|/ c |>\n<| c |>\n: I thought\
    \ about that possibility - but it's not clear what the OP wants it to return -\
    \ how many occurrences of `a` or just if any were found at all?\n<|/ c |>\n<|\
    \ c |>\nThe OP has changed the question so I've updated the answer to return how\
    \ many occurrences of `a` it found.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n$str\
    \ = \"abc abd\";\n$pos = strpos($str, 'a');\nif($pos === false) {\n    echo \"\
    a not found\";\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp3a8ey174.php
    on line 33

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    // The amount\
    \ of overlaps we have.\n    $i = 0;\n\n    // The position in $string where the\
    \ substring starts.\n    $start = str_search($string, $substring, 0, true);\n\n\
    \    // While the substring is not found\n    while ($start === false || $start\
    \ === true) {\n        // Try to find another one\n        $start = str_search($string,\
    \ $substring, $start + 1, true);\n\n        // If we found another one, increment\
    \ the counter by one.\n        if ($start === false) {\n            $i++;\n  \
    \      }\n    }\n\n    return $i;\n}\n\nfunction candidate(...$args) {\n    return\
    \ how_many_times(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    cacacacac\", \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function str_search()\
    \ in /tmp/tmps5sw5duk.php:14\nStack trace:\n#0 /tmp/tmps5sw5duk.php(31): how_many_times('',\
    \ 'x')\n#1 /tmp/tmps5sw5duk.php(35): candidate('', 'x')\n#2 /tmp/tmps5sw5duk.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmps5sw5duk.php on line 14\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n\tif ($string ==\
    \ $substring) {\n\t\treturn 1;\n\t}\n\t$count = substr_count($string, $substring);\n\
    \tif (strlen($substring) == strlen($string) - $count) {\n\t\treturn $count;\n\t\
    } else {\n\t\treturn 0;\n\t}\n}\n\nfunction candidate(...$args) {\n    return\
    \ how_many_times(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    cacacacac\", \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpowg6uhz5.php:27\n\
    Stack trace:\n#0 /tmp/tmpowg6uhz5.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpowg6uhz5.php\
    \ on line 27\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = 0;\n\
    \    if ($string) {\n        $stringLength = strlen($string);\n        $substringLength\
    \ = strlen($substring);\n        for ($i = 0; $i < $stringLength; $i++) {\n  \
    \          if ($string[$i] === $substring[$i]) {\n                $count++;\n\
    \            }\n        }\n        if ($stringLength > $substringLength) {\n \
    \           $substringLength = strlen($substring);\n            for ($i = 0; $i\
    \ < $stringLength - $substringLength; $i++) {\n                $substringStart\
    \ =  $i + $substringLength;\n                if ($string[$substringStart] ===\
    \ $substring[$i]) {\n                    $count++;\n                }\n      \
    \      }\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Uninitialized string offset 1 in /tmp/tmpg27t01e2.php on line\
    \ 15\n\nWarning: Uninitialized string offset 2 in /tmp/tmpg27t01e2.php on line\
    \ 15\n\nWarning: Uninitialized string offset 3 in /tmp/tmpg27t01e2.php on line\
    \ 15\n\nWarning: Uninitialized string offset 4 in /tmp/tmpg27t01e2.php on line\
    \ 15\n\nWarning: Uninitialized string offset 5 in /tmp/tmpg27t01e2.php on line\
    \ 15\n\nWarning: Uninitialized string offset 6 in /tmp/tmpg27t01e2.php on line\
    \ 15\n\nWarning: Uninitialized string offset 1 in /tmp/tmpg27t01e2.php on line\
    \ 23\n\nWarning: Uninitialized string offset 2 in /tmp/tmpg27t01e2.php on line\
    \ 23\n\nWarning: Uninitialized string offset 3 in /tmp/tmpg27t01e2.php on line\
    \ 23\n\nWarning: Uninitialized string offset 4 in /tmp/tmpg27t01e2.php on line\
    \ 23\n\nWarning: Uninitialized string offset 5 in /tmp/tmpg27t01e2.php on line\
    \ 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg27t01e2.php:38\n\
    Stack trace:\n#0 /tmp/tmpg27t01e2.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpg27t01e2.php\
    \ on line 38\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    return preg_match_all('/'\
    \ . preg_quote($substring) . '/g', $string);\n}\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: preg_match_all(): Unknown modifier 'g' in /tmp/tmp7a1lioq2.php\
    \ on line 10\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7a1lioq2.php:18\n\
    Stack trace:\n#0 /tmp/tmp7a1lioq2.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp7a1lioq2.php\
    \ on line 18\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = 0;\n\
    \    $string_size = strlen($string);\n    $substring_size = strlen($substring);\n\
    \n    // Iterate in reverse so we do not count the substring from the beginning\
    \ of the string.\n    for ($i = ($string_size - $substring_size); $i >= 0; $i--)\
    \ {\n        if (substr($string, $i, $substring_size) == $substring) {\n     \
    \       $count++;\n        }\n    }\n\n    return $count;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=0 |>\n<code>\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpzadnxlfd.php
    on line 23

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count_a = strpos($string,\
    \ $substring);\n    $count_b = strrpos($string, $substring);\n    $count_a = $count_a\
    \ !== false ? $count_a + strlen($substring) : 0;\n    $count_b = $count_b !==\
    \ false ? $count_b + strlen($substring) : 0;\n    return max($count_a, $count_b);\n\
    }\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppe3z5uyd.php:23\n\
    Stack trace:\n#0 /tmp/tmppe3z5uyd.php(28): test()\n#1 {main}\n  thrown in /tmp/tmppe3z5uyd.php\
    \ on line 23\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = substr_count($string,\
    \ $substring);\n    $overlap = 0;\n    for ($i = 1; $i <= $count; $i++) {\n  \
    \      $overlap += substr_count(substr($string, 0, $i).$substring, substr($string,\
    \ $i).$substring);\n    }\n    return $overlap;\n}\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7vfnvjjw.php:24\n\
    Stack trace:\n#0 /tmp/tmp7vfnvjjw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp7vfnvjjw.php\
    \ on line 24\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $occurrences\
    \ = 0;\n\n    // If there are no occurrences of the substring, return 0\n    if\
    \ ($substring == \"\") return 0;\n\n    // Loop through all possible combinations\
    \ of letters and count occurrences of substring\n    // Case 1: Letter & substring\
    \ found: increment count\n    if (strpos($string, $substring) !== false) $occurrences++;\n\
    \    // Case 2: Letter & substring not found: check if letter exists\n    // Case\
    \ 3: Substring not found but letters exist: check if substring exists\n    //\
    \ Case 4: Substring & letter found: check if letter & substring exists\n    //\
    \ Case 5: Neither letter nor substring found: just increment counter\n\n    //\
    \ Return number of found substrings\n    return $occurrences;\n}\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuedt3ivy.php:33\n\
    Stack trace:\n#0 /tmp/tmpuedt3ivy.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpuedt3ivy.php\
    \ on line 33\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $string_size\
    \ = strlen($string);\n    $substring_size = strlen($substring);\n    if ($string_size\
    \ < $substring_size) {\n        $substring = $substring . $string;\n    }\n  \
    \  $overlapping_count = substr_count($string, $substring);\n    return $overlapping_count;\n\
    }\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_9j0drm.php:25\n\
    Stack trace:\n#0 /tmp/tmp1_9j0drm.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp1_9j0drm.php\
    \ on line 25\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n  $count = substr_count($string,\
    \ $substring);\n  $count = max($count, 1);\n  return $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd2lnw1xd.php:20\n\
    Stack trace:\n#0 /tmp/tmpd2lnw1xd.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpd2lnw1xd.php\
    \ on line 20\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n\t$substring = strtolower($substring);\n\
    \treturn substr_count($string, $substring);\n}\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp89mnuiij.php:21\n\
    Stack trace:\n#0 /tmp/tmp89mnuiij.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp89mnuiij.php\
    \ on line 21\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $found_strings\
    \ = explode($substring, $string);\n    return count($found_strings);\n}\nfunction\
    \ candidate(...$args) {\n    return how_many_times(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3060g0zy.php:18\n\
    Stack trace:\n#0 /tmp/tmp3060g0zy.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3060g0zy.php\
    \ on line 18\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = 0;\n\
    \    $chars = str_split($string);\n    $subchars = str_split($substring);\n  \
    \  foreach ($chars as $i => $c) {\n        $found = false;\n        foreach ($subchars\
    \ as $j => $sc) {\n            if ($c == $sc) {\n                $found = true;\n\
    \                break;\n            }\n        }\n        if (!$found) {\n  \
    \          $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0rjlp1f2.php:33\n\
    Stack trace:\n#0 /tmp/tmp0rjlp1f2.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0rjlp1f2.php\
    \ on line 33\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = 0;\n\
    \    $string = strtolower($string);\n    $substring = strtolower($substring);\n\
    \    $len = strlen($substring);\n    for($i = 0; $i <= $len; $i++) {\n       \
    \ $count += substr_count($string, substr($string, 0, $i));\n        $count +=\
    \ substr_count($substring, substr($string, $i, $len));\n    }\n    return $count;\n\
    }\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: substr_count(): Argument #2 ($needle)\
    \ cannot be empty in /tmp/tmp7ufwrw4k.php:15\nStack trace:\n#0 /tmp/tmp7ufwrw4k.php(15):\
    \ substr_count('', '')\n#1 /tmp/tmp7ufwrw4k.php(22): how_many_times('', 'x')\n\
    #2 /tmp/tmp7ufwrw4k.php(26): candidate('', 'x')\n#3 /tmp/tmp7ufwrw4k.php(32):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmp7ufwrw4k.php on line 15\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $i = 0;\n   \
    \ $count = 0;\n\n    while (strpos($string, $substring, $i) !== false) {\n   \
    \     $i++;\n        $count++;\n    }\n\n    return $count;\n}\n</code>\n<|/ a\
    \ dscore=5 tags=php,substring |>\n<| a tags=php,substring dscore=4 |>\n<code>\n\
    $subString = \"ab\";\n$string = \"aaabb\";\n\n$count = substr_count($string, $subString);\n\
    </code>\n<|/ a |>\n<| c |>\nJust a note:\nIf the string is a number, it will return\
    \ zero\n\n`$count = substr_count(123, $subString);`\n<|/ c |>\n<| c |>\nJust a\
    \ note:\nIf the string is a number, it will return zero\n\n`$count = substr_count(123,\
    \ $subString);`\n<|/ c |>\n<| a dscore=4 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmps10mdt1q.php
    on line 20

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    if ($string ==\
    \ \"\") {\n        return 0;\n    }\n\n    $i = 1;\n\n    $substring_length =\
    \ strlen($substring);\n    while (true) {\n        $string_length = strlen($string);\n\
    \        $substring_first = strpos($string, $substring);\n        if ($substring_first\
    \ === false || $substring_first + $substring_length > $string_length) {\n    \
    \        return $i;\n        }\n        $string_first = strpos($string, $substring,\
    \ $substring_first + $substring_length);\n        $i += min(count($substring)\
    \ - 1, $substring_length - $string_first);\n        $string = $string_first ===\
    \ false ? substr($string, 0, $string_first) : substr($string, $string_first);\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmprdtqq5ok.php:24\nStack trace:\n\
    #0 /tmp/tmprdtqq5ok.php(30): how_many_times('xyxyxyx', 'x')\n#1 /tmp/tmprdtqq5ok.php(35):\
    \ candidate('xyxyxyx', 'x')\n#2 /tmp/tmprdtqq5ok.php(40): test()\n#3 {main}\n\
    \  thrown in /tmp/tmprdtqq5ok.php on line 24\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    return preg_match_all(\"\
    /$substring/\", $string);\n}\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp53pn51ds.php:20\n\
    Stack trace:\n#0 /tmp/tmp53pn51ds.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp53pn51ds.php\
    \ on line 20\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $i = 0;\n   \
    \ $counter = 0;\n    for($x = 0, $y = strlen($string); $x < $y; $x++) {\n    \
    \    if(strpos($string, $substring, $x) !== FALSE) {\n            $counter++;\n\
    \        }\n        else {\n            if(($x === 0) || ($y === 0)) {\n     \
    \           $counter++;\n            }\n            else if(strpos($string, $substring,\
    \ $x - 1) !== FALSE) {\n                $counter++;\n            }\n         \
    \   else if(strpos($string, $substring, $x + 1) !== FALSE) {\n               \
    \ $counter++;\n            }\n            else if(strpos($string, $substring,\
    \ $y - 1) !== FALSE) {\n                $counter++;\n            }\n         \
    \   else if(strpos($string, $substring, $y + 1) !== FALSE) {\n               \
    \ $counter++;\n            }\n        }\n    }\n    return $counter;\n}\n</code>\n\
    <|/ a tags=php,string |>\n<| c |>\nThe algorithm works great for short strings,\
    \ but can easily exceed the time limit for a large string when searching for substrings\
    \ of any length.\n<|/ c |>\n<| c |>\n, it's easy to tweak this algorithm to work\
    \ with any length, but you might find it easier to simply use something like [Levenshtein\
    \ distance](https://en.wikipedia.org/wiki/Levenshtein_distance).\n<|/ c |>\n<|\
    \ a tags=php,string |>\nA quick way would be to break up the string into an array\
    \ and run a loop through that array checking for substring.\n<code>\n<?php\n$string\
    \ = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\
    \ tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\
    \ quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\
    \ Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore\
    \ eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt\
    \ in culpa qui officia deserunt mollit anim id est laborum.\";\n$arr = explode(\"\
    \ \", $string);\n$sub = \"amet\";\nforeach ($arr as $value) {\n    if (strpos($value,\
    \ $sub) !== false)\n        echo $value . \nfunction candidate(...$args) {\n \
    \   return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    cacacacac\", \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp1sxrvji1.php
    on line 36

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = 0;\n\
    \    $string_length = strlen($string);\n    $substring_length = strlen($substring);\n\
    \    $i = 0;\n    while ($i < $string_length) {\n        if ($string[$i] == $substring[0])\
    \ {\n            $i++;\n        }\n        $count = 0;\n        $j = 0;\n    \
    \    while ($j < $substring_length) {\n            if ($string[$i] == $substring[$j])\
    \ {\n                $count++;\n            }\n            $j++;\n        }\n\
    \        $i++;\n        if ($count == $substring_length) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n \
    \   return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    cacacacac\", \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Uninitialized string offset 7 in /tmp/tmpvgxsyotw.php on line\
    \ 21\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvgxsyotw.php:40\n\
    Stack trace:\n#0 /tmp/tmpvgxsyotw.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpvgxsyotw.php\
    \ on line 40\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    return substr_count($string,\
    \ $substring);\n}\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmy4985vc.php:20\n\
    Stack trace:\n#0 /tmp/tmpmy4985vc.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpmy4985vc.php\
    \ on line 20\n"
  timestamp: 1659979419
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $length = 0;\n\
    \    $count = 0;\n    // Count how many times a given substring can be found in\
    \ the original string\n    foreach (str_split($string, 1) as $letter) {\n    \
    \    $length += mb_strlen($letter);\n        $count += substr_count($letter, $substring);\n\
    \    }\n\n    return $length - $count;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks,\
    \ this looks promising. It fails on \"aaaaa\" with a PHP error `mb_strlen() expects\
    \ parameter 1 to be string, array given`. I've updated the question with some\
    \ more details on what the expected output is.\n<|/ c |>\n<| c |>\nSorry, I didn't\
    \ test it with my PHP version. I updated my answer. I made this PHP function work\
    \ with the PHP version 5.6+.\n<|/ c |>\n<| c |>\nThanks for your help. This was\
    \ indeed the better solution in PHP 5.6 but sadly the accepted answer works in\
    \ PHP 5.5.\n<|/ c |>\n<| c |>\nThe accepted answer also works in PHP 5.5 just\
    \ not as efficiently. My answer also works with PHP 5.6, so you can use the accepted\
    \ answer if your PHP version is lower than 5.6. However I did not include this\
    \ solution since it is less efficient.\n<|/ c |>\n<| c |>\nThe accepted answer\
    \ does not work in PHP 5.5 (it uses `mb_strpos` instead of `strpos`). As a result,\
    \ I prefer this solution (less code, more efficient) because it avoids the use\
    \ of the `mbstring` extension.\n<|/ c |>\n<| a dscore=3 tags=string,php |>\nThe\
    \ easiest solution is probably to use str_split()\n<code>\n$count = count(str_split($string));\n\
    </code>\n<|/ a |>\n<| c |>\nThis is also great and just what I needed! Avoiding\
    \ the use of the `mbstring` extension.\n<|/ c |>\n<| c |>\nI should add that in\
    \ PHP 5.6 this was actually implemented as `return count(array_values(str_split($string)));`\n\
    <|/ c |>\n<| a tags=string,php |>\nThis version works for me, even with a lot\
    \ of characters:\n<code>\n<?php\n    function charsLeft($string, $length) {\n\
    \        $len = strlen($string);\n        $count = 0;\n        for ($i = $len;\
    \ $i < $length; $i++) {\n            $count += $string[$i];\n        }\n     \
    \   return $count;\n    }\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpfn11t0oo.php
    on line 20

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    return substr_count($string,\
    \ $substring);\n}\n</code>\nHope this helps.\n<|/ a tags=python,substring,php\
    \ |>\n<| c |>\nI dont think your answer is correct as he wants the substring count\
    \ to count each substring only once, not each instance of that substring.\n<|/\
    \ c |>\n<| a dscore=1 |>\nPython has re.findall which can return all matches in\
    \ a string which match a pattern but doesn't return overlapping matches:\n<code>\n\
    >>> import re\n>>> s = \"hello my name is peter peter peter peter peter\"\n>>>\
    \ re.findall(r'peter', s)\n['peter', 'peter', 'peter']\n</code>\n<|/ a tags=python,substring,php\
    \ |>\n<| c |>\nThis doesn't answer the question and doesn't have anything to do\
    \ with overlapping matches.\n<|/ c |>\n<| c |>\nYou're right, it doesn't match\
    \ overlapping matches. I guess I thought he meant overlapping *substrings*. I've\
    \ deleted my incorrect answer.\n<|/ c |>\n<| c |>\nI guess he's asking for `substrings`,\
    \ not `substrings`\n<|/ c |>\n<| a tags=python,substring,php |>\nThis might be\
    \ a little bit overkill, but you can use preg_match to do what you want. For example:\n\
    <code>\n<?php\n$str = \"hello my name is peter peter peter peter peter\";\n\n\
    preg_match(\"/peter/\", $str, $matches);\n\nvar_dump($matches[0]);\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\n+1 Thanks for the suggestion. I had assumed that OP\
    \ didn't want overlapping matches, but maybe this was a mistake.\n<|/ c |>\n<|\
    \ c |>\nThat was my first reaction as well, but it seems OP does. :-/\n<|/ c |>\n\
    <| a |>\n<code>\n<?php\n$str = 'hello my name is peter peter peter peter peter';\n\
    preg_match('/peter/', $str, $matches);\n\nfunction candidate(...$args) {\n   \
    \ return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    cacacacac\", \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpn99cjc86.php
    on line 12

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = 0;\n\
    \    $lengthOfSubstring = mb_strlen($substring);\n\n    for ($i = 0; $i < $lengthOfSubstring;\
    \ $i++) {\n        $count += mb_strpos($string, $substring, $i) ?: 1;\n    }\n\
    \n    return $count;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis is the best\
    \ solution in my opinion. `str_ireplace` doesn't count overlaps. `str_ireplace`\
    \ returns false if there's no match and that doesn't count as a match.\n<|/ c\
    \ |>\n<| c |>\nThis is pretty elegant. The only issue is when trying to replace\
    \ a substring with itself. When you do `str_ireplace(array('x','x','x'), 'x',\
    \ $string);` the result is not `x` but `xx` because it is trying to replace each\
    \ `x` with itself and it doesn't find the `xx`. When checking for the substring\
    \ to be replaced with itself use [strpos()](http://php.net/manual/en/function.strpos.php)\
    \ instead: `if (strpos($string, $substring) === false) $count++;`\n<|/ c |>\n\
    <| c |>\nIt doesn't count the replace case when it has nothing to replace.\n<|/\
    \ c |>\n<| c |>\nThis is very slow when string length is over 20K chars.\n<|/\
    \ c |>\n<| c |>\nThis is still slow when the string is longer than ~8k chars.\n\
    <|/ c |>\n<| a dscore=5 |>\nYou don't need to use regular expressions for this!\
    \ Try this:\n<code>\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmps94zvt2s.php
    on line 19

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    if ($string ===\
    \ $substring) {\n        return 0;\n    }\n    $occurrences = substr_count($string,\
    \ $substring);\n    if (preg_match('/' . $substring . '/', $string)) {\n     \
    \   $occurrences += 1;\n    }\n    return $occurrences;\n}\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpttilmyse.php:26\n\
    Stack trace:\n#0 /tmp/tmpttilmyse.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpttilmyse.php\
    \ on line 26\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n  $occurrences =\
    \ substr_count($string, $substring);\n  return $occurrences !== 0 ? $occurrences\
    \ + how_many_times($string, $substring) : 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpr2b4ean0.php on line 10

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $matches = 0;\n\
    \    $count = preg_match_all(\"/$substring/i\", $string, $matches);\n    return\
    \ $count;\n}\n</code>\n<|/ a |>\n<| a tags=php,regex,string |>\nI made this one\n\
    <code>\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpuzk9jl6u.php
    on line 14

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    return substr_count($string,\
    \ $substring);\n}\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmy4985vc.php:20\n\
    Stack trace:\n#0 /tmp/tmpmy4985vc.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpmy4985vc.php\
    \ on line 20\n"
  timestamp: 1659979419
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    if (strlen($string)\
    \ == 0 || strlen($substring) == 0)\n        return 0;\n\n    $strings = explode($substring,\
    \ $string);\n    $count = 0;\n    foreach ($strings as $string)\n        $count\
    \ += substr_count($string, $string);\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: substr_count(): Argument #2 ($needle)\
    \ cannot be empty in /tmp/tmpxu2qca9v.php:16\nStack trace:\n#0 /tmp/tmpxu2qca9v.php(16):\
    \ substr_count('', '')\n#1 /tmp/tmpxu2qca9v.php(20): how_many_times('', 'x')\n\
    #2 /tmp/tmpxu2qca9v.php(25): candidate('xyxyxyx', 'x')\n#3 /tmp/tmpxu2qca9v.php(30):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmpxu2qca9v.php on line 16\n"
  timestamp: 1659979447
- exit_code: 0
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $counter = 0;\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if (substr($string, $i,\
    \ strlen($substring)) != $substring) {\n            continue;\n        }\n   \
    \     $counter++;\n    }\n    return $counter;\n}\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $pos = strpos($string,\
    \ $substring);\n    if ($pos === FALSE) {\n        return 0;\n    }\n    $count\
    \ = substr_count($string, $substring);\n    for ($count = $pos; $pos > 0; $pos--,\
    \ $count--) {\n        if ($string[$pos - 1] === $substring) {\n            return\
    \ $count;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphq5igkl5.php:29\n\
    Stack trace:\n#0 /tmp/tmphq5igkl5.php(34): test()\n#1 {main}\n  thrown in /tmp/tmphq5igkl5.php\
    \ on line 29\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count_times\
    \ = 0;\n\n    if (strlen($string) > strlen($substring)) {\n        $count_times\
    \ = strlen($substring);\n    } else {\n        for ($i = 0; $i < strlen($string);\
    \ $i++) {\n            $string_test = $string[$i];\n            $substring_test\
    \ = $substring[$i];\n            $count_times = 0;\n            for ($j = 0; $j\
    \ < strlen($substring); $j++) {\n                if ($string_test == $substring[$j])\
    \ {\n                    $count_times++;\n                }\n            }\n \
    \           if ($count_times == strlen($substring)) {\n                break;\n\
    \            }\n        }\n    }\n\n    return $count_times;\n}\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwv1gkj8.php:38\n\
    Stack trace:\n#0 /tmp/tmpuwv1gkj8.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpuwv1gkj8.php\
    \ on line 38\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = 0;\n\
    \    // Check for each character in the substring.\n    foreach(str_split($substring)\
    \ as $character) {\n        // Check each character in the string\n        $string_pos\
    \ = strpos($string, $character);\n        // If the character doesn't exist in\
    \ the string, add 1.\n        if ($string_pos === false) {\n            $count++;\n\
    \        // If the character is found multiple times in the string, add 1 to count.\n\
    \        } else {\n            $count = max($count, mb_substr_count($string, $character));\n\
    \        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n \
    \   return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    cacacacac\", \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0wv3denz.php:31\n\
    Stack trace:\n#0 /tmp/tmp0wv3denz.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp0wv3denz.php\
    \ on line 31\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = 0;\n\
    \    // Iterate over all the strings and look if the $substring is found.\n  \
    \  for ($i = 0; $i < strlen($string); $i++) {\n        if (strpos($string, $substring,\
    \ $i) !== false) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpahc8jqhd.php:26\n\
    Stack trace:\n#0 /tmp/tmpahc8jqhd.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpahc8jqhd.php\
    \ on line 26\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n  // $string = preg_replace('/\\\
    s{2,}/', ' ', $string); // Remove multiple whitespace.\n  $string = preg_replace('/(?<!\\\
    s)'.$substring.'(?!\\s)/', '', $string); // Remove cases where substring exists.\n\
    \  return substr_count($string, $substring);\n}\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_aqrj2xd.php:20\n\
    Stack trace:\n#0 /tmp/tmp_aqrj2xd.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_aqrj2xd.php\
    \ on line 20\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $pos = strpos($string,\
    \ $substring);\n    if ($pos === false) {\n        return 0;\n    }\n    $count\
    \ = substr_count($string, $substring);\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptqp8gxo7.php:24\n\
    Stack trace:\n#0 /tmp/tmptqp8gxo7.php(28): test()\n#1 {main}\n  thrown in /tmp/tmptqp8gxo7.php\
    \ on line 24\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = preg_match_all('/'\
    \ . $substring . '/i', $string, $matches);\n    $count = count($matches[0]);\n\
    \    return $count;\n}\n</code>\n<|/ a |>\n<| c |>\nThis has gotten me close to\
    \ what I need, but I need to be able to specify the number of times a word appears\
    \ in the string. I.e, if I had \"This message sent by John to Jane with 3 replies\"\
    , I would want \"John to Jane\" to appear only once in the count, but \"John to\
    \ Jane\" to be counted 3 times. The code you provided seems to count the number\
    \ of times ANY word appears in the string.\n<|/ c |>\n<| c |>\nThis code will\
    \ count the word as many times as it appears in the sentence, but it will not\
    \ count the word only once in the sentence. I think you might have a misunderstanding\
    \ of what `preg_match_all()` does.\n<|/ c |>\n<| c |>\nI understand now, and thank\
    \ you for your help. What I meant was that if my original string was \"This message\
    \ sent by John to Jane with 3 replies\" but my substring was \"to Jane\" it would\
    \ count the substring 3 times, not once.\n<|/ c |>\n<| c |>\nI added another solution\
    \ that should get you what you're after.\n<|/ c |>\n<| c |>\nThank you, this is\
    \ exactly what I was looking for. I'm not very familiar with preg_match, so this\
    \ was a great learning experience for me. :)\n<|/ c |>\n<| a dscore=0 |>\nThis\
    \ is not a clean method, but a good starting point. \n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return how_many_times(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp16_nai5f.php
    on line 14

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = substr_count($string,\
    \ $substring);\n    if ($count > 1) {\n        // Count overlaping case\n    \
    \    $overlapping_count = count(array_filter(explode($substring, $string)));\n\
    \        $count = min($count, 1 + $overlapping_count);\n    }\n    return $count;\n\
    }\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyobtqnd9.php:25\n\
    Stack trace:\n#0 /tmp/tmpyobtqnd9.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpyobtqnd9.php\
    \ on line 25\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $start = 0;\n\
    \    $count = 0;\n    while (substr_count($string, $substring, $start)) {\n  \
    \      $count++;\n        $start += strlen($substring);\n    }\n    return $count;\n\
    }\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkctu7p8r.php:25\n\
    Stack trace:\n#0 /tmp/tmpkctu7p8r.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpkctu7p8r.php\
    \ on line 25\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n  // Check for empty\
    \ string\n  if ($string === \"\") {\n    return 0;\n  }\n\n  // Make an array\
    \ of characters we're looking for\n  $search_string = str_split($substring);\n\
    \  $search_length = count($search_string);\n  // Initialize result to 0\n  $result\
    \ = 0;\n  // Loop over every character in the string\n  foreach (str_split($string)\
    \ as $char) {\n    // If current character matches a character in our search array\n\
    \    if (in_array($char, $search_string)) {\n      // Increase result by 1\n \
    \     $result++;\n    }\n  }\n\n  // Return result\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return how_many_times(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpem9z_58q.php:40\n\
    Stack trace:\n#0 /tmp/tmpem9z_58q.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpem9z_58q.php\
    \ on line 40\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $string_size\
    \ = strlen($string);\n    $substring_size = strlen($substring);\n    if ($string_size\
    \ === 0) return 0;\n\n    $start_pos = 0;\n    $end_pos = $string_size;\n    $count\
    \ = 0;\n\n    while ($start_pos < $end_pos) {\n        if ($string[$start_pos]\
    \ === $substring[0]) {\n            $count++;\n            $start_pos++;\n   \
    \         if ($start_pos === $end_pos) {\n                return $count;\n   \
    \         }\n        }\n        for ($i = $start_pos; $i < $end_pos; $i++) {\n\
    \            if ($string[$i] === $substring[0]) {\n                return $count;\n\
    \            }\n            if ($string[$i] === $substring[$substring_size]) {\n\
    \                $count++;\n                $end_pos = $i;\n            }\n  \
    \      }\n    }\n\n    return $count;\n}\n\nfunction candidate(...$args) {\n \
    \   return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    cacacacac\", \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Uninitialized string offset 1 in /tmp/tmp8cqji9ra.php on line\
    \ 30\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8cqji9ra.php:46\n\
    Stack trace:\n#0 /tmp/tmp8cqji9ra.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp8cqji9ra.php\
    \ on line 46\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $i = substr_count($string,\
    \ $substring);\n    do {\n        $i = $i - 1;\n        $substring = substr($substring,\
    \ 0, 1);\n        $i = $i + substr_count($string, $substring);\n    } while ($i\
    \ >= 0);\n    return $i;\n}\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvcmimcbo.php:24\n\
    Stack trace:\n#0 /tmp/tmpvcmimcbo.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpvcmimcbo.php\
    \ on line 24\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    // Split the\
    \ string in substrings.\n    $substrings = str_split($substring);\n\n    // Loop\
    \ through the substrings.\n    $matches = array();\n    foreach($substrings as\
    \ $substring) {\n        $matches[] = strpos($string, $substring);\n    }\n\n\
    \    // Return how many matches there are in the original string.\n    return\
    \ count($matches);\n}\n</code>\n<|/ a tags=arrays,php,algorithm,count,string dscore=1\
    \ |>\n<| c |>\nBut wouldn't this take O(n) time, since you're making O(n) comparisons,\
    \ each one doing a substring search?\n<|/ c |>\n<| c |>\nNo, since str_split is\
    \ O(n) and strpos is O(1), so it's an O(n) algorithm. Although it might be slower,\
    \ I don't think you can get much more efficient than that.\n<|/ c |>\n<| c |>\n\
    I see... I missed the str_split bit.\n<|/ c |>\n<| c |>\nThis algorithm works\
    \ fine, but it is slower than the one I posted. It is also slower than the algorithm\
    \ that uses `explode`.\n<|/ c |>\n<| c |>\nI edited my answer. You might want\
    \ to try the new one.\n<|/ c |>\n<| a tags=arrays,php,algorithm,count,string dscore=1\
    \ |>\nHere is another solution that uses array walk and array_count_values:\n\
    <code>\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmph10m3ug9.php
    on line 22

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $matches = array();\n\
    \    // Loop through each char\n    for($i = 0; $i < strlen($string); $i++) {\n\
    \        $letter = strtolower($string[$i]);\n        // Loop through each char\
    \ of the substring\n        for($j = 0; $j < strlen($substring); $j++) {\n   \
    \         if($letter == strtolower($substring[$j])) {\n                $matches[]\
    \ = $i;\n                break;\n            }\n        }\n    }\n    return count($matches);\n\
    }\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvm_t8hrc.php:31\n\
    Stack trace:\n#0 /tmp/tmpvm_t8hrc.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpvm_t8hrc.php\
    \ on line 31\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    return substr_count($string,\
    \ $substring);\n}\n</code>\n<|/ a tags=string,php,count |>\n<| c |>\nIt's more\
    \ effective to count the number of times each character appears in the string,\
    \ then sum those counts. No need to use a regular expression to count the occurrences.\n\
    <|/ c |>\n<| a |>\n<code>\n$str = \"aaa\";\n$arr1 = str_split($str);\n$arr2 =\
    \ str_split($str);\n$arr3 = str_split($str);\n$arr4 = str_split($str);\n$arr5\
    \ = str_split($str);\n$arr6 = str_split($str);\n$arr7 = str_split($str);\n$arr8\
    \ = str_split($str);\n$arr9 = str_split($str);\n$arr10 = str_split($str);\n$arr11\
    \ = str_split($str);\n$arr12 = str_split($str);\n$arr13 = str_split($str);\n$arr14\
    \ = str_split($str);\n$arr15 = str_split($str);\n$arr16 = str_split($str);\n\n\
    $arr17 = str_split($str);\n$arr18 = str_split($str);\n$arr19 = str_split($str);\n\
    $arr20 = str_split($str);\n$arr21 = str_split($str);\n$arr22 = str_split($str);\n\
    $arr23 = str_split($str);\n$arr24 = str_split($str);\n$arr25 = str_split($str);\n\
    $arr26 = str_split($str);\n$arr27 = str_split($str);\n$arr28 = str_split($str);\n\
    $arr29 = str_split($str);\n$arr30 = str_split($str);\n$arr31 = str_split($str);\n\
    $arr32 = str_split($str);\n$arr33 = str_split($str);\n$arr34 = str_split($str);\n\
    $arr35 = str_split($str);\n$arr36 = str_split($str);\n$arr37 = str_split($str);\n\
    $arr38 = str_split($str);\n$arr39 = str_split($str);\n$arr40 = str_split($str);\n\
    $arr41 = str_split($str);\n$arr42 = str_split($str);\n$arr43 = str_split($str);\n\
    $arr44 = str_split($str);\n$arr45 = str_split($str);\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpbfnc5fsp.php
    on line 12

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = 0; //\
    \ Count of how many times $substring was found in $string\n    $offset = 0; //\
    \ Start of the substring we are looking for\n    $length = strlen($substring);\
    \ // Length of the substring\n    while($offset < $length) {\n        $found =\
    \ strpos($string, $substring, $offset); // Find $substring starting at offset\
    \ $offset\n        if ($found !== FALSE) {\n            $count++; // Add 1 to\
    \ the count of how many times $substring was found in $string\n            $offset\
    \ = $found + $length; // Set offset to end of string after $substring was found\n\
    \        }\n        else {\n            $offset++;\n        }\n    }\n    return\
    \ $count;\n}\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqm8l12w9.php:32\n\
    Stack trace:\n#0 /tmp/tmpqm8l12w9.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpqm8l12w9.php\
    \ on line 32\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n  if ($string ==\
    \ $substring) return 0;\n\n  $count = substr_count($string, $substring);\n  foreach\
    \ (preg_split(\"//u\", $string) as $i => $char) {\n    if ($char == $substring)\
    \ $count++;\n  }\n\n  return $count;\n}\n</code>\n<|/ a tags=php,string,search,pattern-matching,substring\
    \ |>\n<| c |>\nThis is excellent! Thank you!\n<|/ c |>\n<| c |>\nWonderful!\n\
    <|/ c |>\n<| a dscore=5 tags=php,string,search,pattern-matching,substring |>\n\
    A couple of simple examples here:\n<code>\nfunction candidate(...$args) {\n  \
    \  return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    cacacacac\", \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpzs26d4fy.php
    on line 19

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    if ($string===$substring)\
    \ return 0;\n    if ($substring===\"\") return 1;\n    return substr_count($string,\
    \ $substring)+1;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is a good one. I'm curious\
    \ though, how does the performance compare? My hunch was that PHP would be using\
    \ similar algorithms for string searching as PHP's string searching functions.\
    \ So that would mean that you'd be doing similar optimizations, but just one in\
    \ PHP would be a lot slower than the other languages?\n<|/ c |>\n<| c |>\nGood\
    \ question. My guess would be that PHP's `str_search` would have to make some\
    \ optimizations. But it might be optimized further in other languages as well.\
    \ Perhaps there are some cases where this would be slower in other languages,\
    \ too. But I guess that would be a lot slower than the other languages already\
    \ in use. And maybe even slower with PHP's `str_search`. But like I said, my guess\
    \ is very high.\n<|/ c |>\n<| c |>\nInteresting optimization. I'd have to try\
    \ it out to make sure it actually makes a difference. In the end though, this\
    \ solution does have better performance than a regular PHP search because of the\
    \ speed of substr_count in PHP. I ended up using it. I also don't think it's possible\
    \ to get around it though. Unless someone comes up with a better solution, you\
    \ have to use this one. :(\n<|/ c |>\n<| c |>\nNice one. Still an extra function\
    \ call. Still better than using array_count_values().\n<|/ c |>\n<| c |>\n`array_count_values`\
    \ also calls `substr_count` internally.\n<|/ c |>\n<| a |>\nI know this is an\
    \ old question, but here's a solution using a regex with preg_replace_callback:\n\
    <code>\npreg_replace_callback('/(^|\\s)(\\S+?)($|\\s)/', function($match) {\n\
    \    $space = isset($match[2]);\n    $char  = $match[1];\n    $str   = $match[3];\n\
    \n    if ($space && $char === ' ') {\n        ++$spaceCount;\n    } else if ($space\
    \ && !$char === ' ') {\n        --$spaceCount;\n    }\n\n    return isset($space)\
    \ ? $spaceCount : $str.length;\n}, $string);\n</code>\n(Regex101 Demo)\nIn words,\
    \ this regex matches spaces followed by non-spaces, or non-spaces followed by\
    \ spaces, and then replaces the spaces with spaceCount if the space and the non-space\
    \ is found. Otherwise, it replaces the \nfunction candidate(...$args) {\n    return\
    \ how_many_times(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    cacacacac\", \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpdfp1duig.php
    on line 14

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n  return strlen($string)\
    \ - strlen(strstr($string, $substring));\n}\n\nfunction candidate(...$args) {\n\
    \    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    cacacacac\", \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8qw0wcue.php:19\n\
    Stack trace:\n#0 /tmp/tmp8qw0wcue.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp8qw0wcue.php\
    \ on line 19\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $i = 0;\n   \
    \ $matches = 0;\n    $pos = strpos($string, $substring);\n    while ($pos != false)\
    \ {\n        $matches++;\n        $pos = strpos($string, $substring, $pos + 1);\n\
    \    }\n    return $matches;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is great. Thanks\
    \ for posting your answer too!\n<|/ c |>\n<| c |>\n- I agree, it's nice to have\
    \ it listed here too.\n<|/ c |>\n<| a dscore=0 |>\nI wrote a quick script for\
    \ you, and it works, but it's pretty slow.\n<code>\n$string = 'helloooooooooooooooooooo';\n\
    $search = 'o';\n$pos = 0;\n\nfor ($i = 0; $i < strlen($string); $i++) {\n    if\
    \ ($pos >= strlen($search)) break;\n\n    if ($string[$i] == $search[$pos]) {\n\
    \        $pos++;\n    } else {\n        $pos = 0;\n    }\n}\n\necho $pos;\n</code>\n\
    EDIT:\nHere is a much better version!\n<code>\n$string = 'helloooooooooooooooooooo';\n\
    $search = 'o';\n$pos = 0;\n$match = 0;\n\nfor ($i = 0; $i < strlen($string); $i++)\
    \ {\n    if ($pos >= strlen($search)) break;\n\n    if ($string[$i] == $search[$pos])\
    \ {\n        $pos++;\n    } else {\n        $pos = 0;\n        $match++;\n   \
    \ }\n}\n\necho $match;\n</code>\n<|/ a tags=algorithm,php,string |>\n<| c |>\n\
    Thanks for your answer! I'll test it on my system and report back. I'm surprised\
    \ it's so slow!\n<|/ c |>\n<| a |>\nI've been using Ambrose Brown's answer and\
    \ it has worked great for me so far. I wanted to improve the speed by reducing\
    \ the amount of looping I do, and therefore I created my own implementation of\
    \ a preg_match function. It's also somewhat faster than the regex version I originally\
    \ used (~10x faster!).\n<code>\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpdd_4uh0p.php
    on line 19

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    if (!$string)\
    \ {\n        return 0;\n    }\n    $substring_length = strlen($substring);\n \
    \   $string_length = strlen($string);\n    $matches = 0;\n    for ($i = 0; $i\
    \ <= $string_length; ++$i) {\n        $found_substring_length = strpos($string,\
    \ $substring, $i);\n        if ($found_substring_length > $substring_length) {\n\
    \            return $found_substring_length - $substring_length;\n        }\n\
    \        $found_string_length = strlen($string);\n        if ($found_substring_length\
    \ < $substring_length) {\n            $found_string_length = $found_substring_length;\n\
    \        }\n        // We have reached the end of the search string without finding\
    \ $substring\n        if ($found_substring_length == 0) {\n            return\
    \ $found_string_length - $substring_length;\n        }\n        if ($found_string_length\
    \ == $substring_length) {\n            $matches++;\n        }\n    }\n    return\
    \ $matches;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis should be the accepted\
    \ answer. No need to use PHP functions when you can do it with regex. Also handles\
    \ multiple cases like \"aba\" and \"ababa\" as expected.\n<|/ c |>\n<| a |>\n\
    The accepted answer is good and works for the question asked, but it doesn't scale\
    \ well for larger strings since it will loop through the string more than once.\n\
    Here's an approach that avoids looping through the string multiple times.  It\
    \ uses a regex to match a pattern, with anchors around the start and end of the\
    \ string.  The pattern uses a positive lookahead to find the beginning of the\
    \ string, and the end of the string.\n<code>\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpi4dp4mws.php
    on line 35

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $result = 0;\n\
    \    foreach (str_split($string) as $character) {\n        if (strpos($substring,\
    \ $character) !== false) {\n            $result++;\n        }\n    }\n    return\
    \ $result;\n}\n</code>\n<|/ a dscore=5 tags=php,preg-match-all,regex |>\n<| a\
    \ tags=php,preg-match-all,regex |>\nHere's a way in PHP without using preg_match_all\
    \ to count the number of times something is in a string.\n<code>\n$string = 'This\
    \ text is funny';\n$search = 'funny';\n\n$position = strpos($string, $search);\n\
    $count = 0;\nwhile ($position !== false) {\n    $count++;\n    $position = strpos($string,\
    \ $search, $position + 1);\n}\n</code>\n<|/ a dscore=4 |>\n<| a tags=php,preg-match-all,regex\
    \ dscore=4 |>\nYou can use the function preg_match_all and count the matches.\
    \ See the example below. \n<code>\n$subject = \"This is my test string\";\npreg_match_all(\"\
    ~^(?:[^[:space:]]+)?([^[:space:]]+)(?=\\s)~\", $subject, $matches);\n$matches\
    \ = $matches[1];\n$count = count($matches);\n\necho $count; //prints 2\n</code>\n\
    <|/ a |>\n<| a dscore=3 tags=php,preg-match-all,regex |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpmkmlmbvm.php
    on line 18

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    if (strlen($string)\
    \ == 0)\n        return 0;\n\n    $count = 0;\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == $substring[0]) {\n            for ($j =\
    \ 1; $j < strlen($substring); $j++) {\n                if ($string[$i] == $substring[$j])\
    \ {\n                    $count++;\n                    break;\n             \
    \   }\n            }\n        }\n    }\n    return $count;\n}\n</code>\n<|/ a\
    \ |>\n<| c |>\nThank you so much for your answer! I have already made a few changes,\
    \ such as the `$count` variable was declared as zero, and I have added a second\
    \ parameter that is going to be used for a second substring that may or may not\
    \ be found in the string. I'm going to edit my post to reflect these changes.\n\
    <|/ c |>\n<| c |>\nOh, I see. I've added a solution that counts overlaping occurrences.\n\
    <|/ c |>\n<| c |>\nWow you saved me a lot of time! Just a note, when you call\
    \ the function you use it like so: `how_many_times($string, \"a\")`\n<|/ c |>\n\
    <| c |>\nYes I forgot that :)\n<|/ c |>\n<| a dscore=1 |>\nTry this one also:\n\
    <code>\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpxzxkb20v.php
    on line 26

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n  $count_a = substr_count($string,\
    \ $substring);\n  $count_b = substr_count($string, $substring, 0, $count_a);\n\
    \  return min($count_a, $count_b);\n}\n</code>\n<|/ a dscore=5 tags=php,algorithm\
    \ |>\n<| c |>\nThis should be the top answer because it takes advantage of PHP's\
    \ built-in string functions and it actually answers the OP's question.\n<|/ c\
    \ |>\n<| c |>\nThe function how_many_times should be called how_many_times_best_case\
    \ or something similar so that it matches the best case (where the substring occurs\
    \ exactly in the string).\n<|/ c |>\n<| c |>\nThanks for pointing that out.  I\
    \ updated the function accordingly.\n<|/ c |>\n<| c |>\nThis is an awesome solution!\
    \ Just a quick question: Would it be faster to call how_many_times_best_case once\
    \ before the loop and save $count into a variable instead of calling it multiple\
    \ times? Like so:\n\n$count = how_many_times_best_case($string, $substring);\n\
    for ($i = 0; $i < $count; $i++){ ... }\n<|/ c |>\n<| c |>\nYes, absolutely it\
    \ would be better to save the result in a variable.  I did that in my code sample\
    \ so I didn't add any further changes but it wouldn't be hard to do it.  You could\
    \ also cache the result of how_many_times_best_case in a variable if you wanted.\
    \  You could also make the function a static function so you don't have to instantiate\
    \ an object.\n<|/ c |>\n<| a tags=php,algorithm |>\nThis can easily be done using\
    \ array_count_values()\n<code>\n$arr = [\n    'dog', 'dog', 'cat', 'dog', 'cat',\
    \ 'dog', 'cat'\n];\n\n$counts = array_count_values($arr);\n\necho 'dog: ' . $counts['dog']\
    \ . '<br/>';\necho 'cat: ' . $counts['cat'] . '<br/>';\n</code>\nOutputs:\n<code>\n\
    dog: 2\ncat: 2\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis seems to be the fastest\
    \ one\n<|/ c |>\n<| c |>\nThis should be the answer. Fast, easy to use. Doesn't\
    \ require creating a new array.\n<|/ c |>\n<| c |>\nthis is way better, than other\
    \ solutions.\n<|/ c |>\n<| c |>\nThis should be the answer. I need this for my\
    \ code and it was fast.\n<|/ c |>\n<| a \nfunction candidate(...$args) {\n   \
    \ return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    cacacacac\", \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpgaaqjb_s.php
    on line 14

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $result = 0;\n\
    \    $current_position = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        if ($string[$i] == $substring[$i]) {\n            $result++;\n      \
    \      $current_position += 1;\n        } else {\n            if ($current_position\
    \ != 0) {\n                $result += (substr_count($string, $substring, $current_position));\n\
    \                $current_position = 0;\n            }\n        }\n    }\n   \
    \ if ($current_position != 0) {\n        $result += (substr_count($string, $substring,\
    \ $current_position));\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Uninitialized string offset 1 in /tmp/tmpozzqziwl.php on line\
    \ 13\n\nWarning: Uninitialized string offset 2 in /tmp/tmpozzqziwl.php on line\
    \ 13\n\nWarning: Uninitialized string offset 3 in /tmp/tmpozzqziwl.php on line\
    \ 13\n\nWarning: Uninitialized string offset 4 in /tmp/tmpozzqziwl.php on line\
    \ 13\n\nWarning: Uninitialized string offset 5 in /tmp/tmpozzqziwl.php on line\
    \ 13\n\nWarning: Uninitialized string offset 6 in /tmp/tmpozzqziwl.php on line\
    \ 13\n\nWarning: Uninitialized string offset 3 in /tmp/tmpozzqziwl.php on line\
    \ 13\n\nWarning: Uninitialized string offset 4 in /tmp/tmpozzqziwl.php on line\
    \ 13\n\nWarning: Uninitialized string offset 5 in /tmp/tmpozzqziwl.php on line\
    \ 13\n\nWarning: Uninitialized string offset 6 in /tmp/tmpozzqziwl.php on line\
    \ 13\n\nWarning: Uninitialized string offset 7 in /tmp/tmpozzqziwl.php on line\
    \ 13\n\nWarning: Uninitialized string offset 8 in /tmp/tmpozzqziwl.php on line\
    \ 13\n\nWarning: Uninitialized string offset 4 in /tmp/tmpozzqziwl.php on line\
    \ 13\n\nWarning: Uninitialized string offset 5 in /tmp/tmpozzqziwl.php on line\
    \ 13\n\nWarning: Uninitialized string offset 6 in /tmp/tmpozzqziwl.php on line\
    \ 13\n\nWarning: Uninitialized string offset 7 in /tmp/tmpozzqziwl.php on line\
    \ 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpozzqziwl.php:37\n\
    Stack trace:\n#0 /tmp/tmpozzqziwl.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpozzqziwl.php\
    \ on line 37\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count_total\
    \ = 0;\n    for($i = 0; $i < strlen($string); $i++) {\n        if(strpos($string,\
    \ $substring, $i) !== false) {\n            $count_total++;\n        }\n    }\n\
    \    return $count_total;\n}\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprct3u8px.php:25\n\
    Stack trace:\n#0 /tmp/tmprct3u8px.php(30): test()\n#1 {main}\n  thrown in /tmp/tmprct3u8px.php\
    \ on line 25\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = preg_match_all(\"\
    /$substring/\", $string, $matches);\n    return $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppw2asovl.php:21\n\
    Stack trace:\n#0 /tmp/tmppw2asovl.php(25): test()\n#1 {main}\n  thrown in /tmp/tmppw2asovl.php\
    \ on line 21\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = 0; //\
    \ How many times the substring has been found in the original string\n    $pos\
    \ = 0;    // Current position in the original string\n    $limit = strlen($string);\
    \ // Maximum position at which the substring can be found\n    while (($pos <=\
    \ $limit) && ($pos = strpos($string, $substring, $pos)) !== false) {\n       \
    \ // Found the substring, increase the count\n        $count++;\n        $pos++;\n\
    \    }\n    return $count;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nthis should\
    \ be the right answer, as it allows to work with large strings and substrings\
    \ (while other solutions do not). Also it allows to count non-overlapping occurrences\
    \ of the substring.\n<|/ c |>\n<| c |>\nNice function! I didn't know about strpos\
    \ before. I'm going to see if this performs well on large strings.\n<|/ c |>\n\
    <| c |>\nYes, this is really fast and works well for large strings. I was looking\
    \ for a faster solution and your function did it.\n<|/ c |>\n<| c |>\nA minor\
    \ suggestion: you should use `===` instead of `!==` to avoid unnecessary comparisons\
    \ of the types. `!==` will check if it is the same type and compare the values,\
    \ which isn't necessary here. Also, you can replace `(strlen($string) > $pos)\
    \ && ($string[$pos] == $substring[$pos])` with just `($pos < $limit) && ($string[$pos]\
    \ == $substring[$pos])` to optimize it even more.\n<|/ c |>\n<| c |>\nWhat about\
    \ strstr() function? Is that faster than strpos()?\n<|/ c |>\n<| a tags=php,count,string,substring\
    \ |>\nTo count the number of times a string occurs in a string you can use the\
    \ strpos function.\n<code>\n<?php\n\n$string = \"Lorem ipsum dolor sit amet\"\
    ;\n\necho strpos($string, \"ipsum\");\nfunction candidate(...$args) {\n    return\
    \ how_many_times(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    cacacacac\", \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpq0sydee4.php
    on line 20

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $substring =\
    \ strtolower($substring);\n    $string = strtolower($string);\n    $occurrences\
    \ = 0;\n    $len = strlen($substring);\n\n    for ($i = 0; $i < $len; $i++) {\n\
    \        if ($string[$i] != $substring[$i]) {\n            $occurrences++;\n \
    \       }\n    }\n\n    return $occurrences;\n}\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Uninitialized string offset 0 in /tmp/tmp0vc1jr6t.php on line\
    \ 16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0vc1jr6t.php:29\n\
    Stack trace:\n#0 /tmp/tmp0vc1jr6t.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp0vc1jr6t.php\
    \ on line 29\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    return substr_count($string,\
    \ $substring);\n}\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmy4985vc.php:20\n\
    Stack trace:\n#0 /tmp/tmpmy4985vc.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpmy4985vc.php\
    \ on line 20\n"
  timestamp: 1659979419
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    return substr_count($string,\
    \ $substring);\n}\n</code>\nThis algorithm takes time linear in the length of\
    \ the original string and uses linear space in the size of the substring to count.\
    \ So if you have a large enough string, it will take a long time to run. \n<code>\n\
    function candidate(...$args) {\n    return how_many_times(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpdtwj3a97.php
    on line 12

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $substring_length\
    \        = strlen($substring);\n    $string_to_test          = strlen($string);\n\
    \    $number_of_chars         = strlen($string);\n    $number_of_substrings  \
    \  = 0;\n\n    for ($i=0; $i<$string_to_test; $i++) {\n        $last_position\
    \ = $number_of_chars - 1;\n        while (($last_position >= 0) && ($string[$last_position]\
    \ == $substring[$i])) {\n            $last_position--;\n        }\n        if\
    \ ($last_position != $string_to_test - 1) {\n            $number_of_substrings++;\n\
    \        }\n    }\n\n    return $number_of_substrings;\n}\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Uninitialized string offset 1 in /tmp/tmp2d7_dvy2.php on line\
    \ 17\n\nWarning: Uninitialized string offset 2 in /tmp/tmp2d7_dvy2.php on line\
    \ 17\n\nWarning: Uninitialized string offset 3 in /tmp/tmp2d7_dvy2.php on line\
    \ 17\n\nWarning: Uninitialized string offset 4 in /tmp/tmp2d7_dvy2.php on line\
    \ 17\n\nWarning: Uninitialized string offset 5 in /tmp/tmp2d7_dvy2.php on line\
    \ 17\n\nWarning: Uninitialized string offset 6 in /tmp/tmp2d7_dvy2.php on line\
    \ 17\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2d7_dvy2.php:34\n\
    Stack trace:\n#0 /tmp/tmp2d7_dvy2.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp2d7_dvy2.php\
    \ on line 34\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $substr = str_split($substring);\n\
    \    $total = 0;\n    $count = count($substr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        if (strpos($string, $substr[$i]) !== FALSE) {\n           \
    \ $total++;\n        }\n    }\n    return $total;\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThank you for your answer. I'll test it in case that I need to\
    \ optimize the number of queries to database.\n<|/ c |>\n<| c |>\nI have tested\
    \ the query on my database and it works fine. I'm happy to hear that. :)\n<|/\
    \ c |>\n<| c |>\nThe query is quite fast, but I have just realized that the case\
    \ of the substring is not taken into account. For example, `how_many_times(\"\
    aaaa\", \"aa\")` returns `3`, but `how_many_times(\"aaaa\", \"Aa\")` returns `3`.\
    \ Do you know why this happens? I used the `str_split` function to convert it\
    \ to lower case, but that doesn't fix the problem.\n<|/ c |>\n<| c |>\nI have\
    \ edited my answer to make it more precise. :)\n<|/ c |>\n<| c |>\nThanks for\
    \ your help. I fixed the problem by using the `str_split` function you proposed\
    \ me. :)\n<|/ c |>\n<| a tags=php,mysql,sql,count dscore=4 |>\nThe MySQL COUNT()\
    \ function is used to count the number of rows that meet a certain criteria in\
    \ a WHERE clause. \nThe query below will show all rows with a status of Active\
    \ (1).\n<code>\nSELECT COUNT(*) FROM table WHERE status=1\n</code>\nThe result\
    \ will look something like:\n<code>\n10\n</code>\nThe result will tell you how\
    \ many times the word Active is present in a given row. \nThe result also tells\
    \ you how many rows had that status. \nThere are many other uses of the COUNT()\
    \ function too. Here are a few examples:\n<code>\nSELECT COUNT(*) FROM table WHERE\
    \ price>100\n\nSELECT COUNT(*) FROM table WHERE price>100 AND status=1\n\nSELECT\
    \ COUNT(*) FROM table WHERE price>100 AND status<>1\n</code>\n<|/ a |>\n<| a dscore=2\
    \ |>\n<code>\nSELECT COUNT(DISTINCT `id`) FROM `table_name`\n</code>\nThe result\
    \ will be the number of distinct records\n<|/ a tags=php,mysql,sql,count |>\n\
    <| c |>\nThis is really an inefficient way to count records\n<|/ c |>\nfunction\
    \ candidate(...$args) {\n    return how_many_times(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmprq100mb3.php
    on line 20

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n\t$found = str_count($string,\
    \ $substring);\n\treturn $found > 1 ? $found : 1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function str_count() in\
    \ /tmp/tmpc9bzhc27.php:10\nStack trace:\n#0 /tmp/tmpc9bzhc27.php(15): how_many_times('',\
    \ 'x')\n#1 /tmp/tmpc9bzhc27.php(19): candidate('', 'x')\n#2 /tmp/tmpc9bzhc27.php(25):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpc9bzhc27.php on line 10\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    if (strpos($string,\
    \ $substring) === FALSE) {\n        return 0;\n    }\n\n    $len = strlen($substring);\n\
    \    $i = 0;\n    while (($pos = strpos($string, $substring, $i)) !== FALSE) {\n\
    \        $i++;\n        if ($i === $len) {\n            return $pos + 1;\n   \
    \     }\n    }\n\n    return $len;\n}\n\nfunction candidate(...$args) {\n    return\
    \ how_many_times(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    cacacacac\", \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzn3xxwnk.php:32\n\
    Stack trace:\n#0 /tmp/tmpzn3xxwnk.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpzn3xxwnk.php\
    \ on line 32\n"
  timestamp: 1659979447
- exit_code: -1
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n\t$position = 0;\n\
    \t$pos = strpos($string, $substring, $position);\n\twhile ($pos !== false) {\n\
    \t\t$position += $pos;\n\t\t$pos = strpos($string, $substring, $position);\n\t\
    }\n\treturn $position;\n}\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979452
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    if (strpos($string,\
    \ $substring) !== false) {\n        $len = strlen($substring);\n        $counter\
    \ = 0;\n        for ($i = 0; $i < strlen($string); $i++) {\n            if ($string[$i]\
    \ === $substring[0]) {\n                $counter++;\n            }\n         \
    \   if ($string[$i] === $substring[$len - 1]) {\n                $counter++;\n\
    \            }\n        }\n        return $counter;\n    } else {\n        return\
    \ 0;\n    }\n}\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7q7mtc0k.php:32\n\
    Stack trace:\n#0 /tmp/tmp7q7mtc0k.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7q7mtc0k.php\
    \ on line 32\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    return count(preg_grep('~'\
    \ . $substring . '~', $string));\n}\n</code>\n<|/ a tags=php,string |>\n<| a tags=php,string\
    \ |>\n<code>\n$string = \"This is a sample string\";\n\n$search = \"is\";\n\n\
    $count = str_word_count($string, 1, null, $search);\n\necho $count;\n</code>\n\
    <|/ a dscore=4 |>\n<| c |>\nWorked like a charm, and just what I wanted. I love\
    \ one liners.\n<|/ c |>\n<| a tags=php,string |>\nHow about preg_match with a\
    \ regex for the word \"the\":\n<code>\npreg_match('/\\bthe\\b/', $string, $matches);\n\
    </code>\nThis will return an array of any matches of \"the\". It will also match\
    \ \"the\" inside another word.\nSee it in action here: http://ideone.com/uUmZVX\n\
    <|/ a dscore=4 |>\n<| c |>\npreg_match('/\\bthe\\b/', $string, $matches); will\
    \ return an array of \"the\", but it will also match \"the\" inside another word.\n\
    <|/ c |>\n<| c |>\nThis only works for single word words.  If your search word\
    \ is \"is\", it will match \"is\" inside \"island\", which it should not do.\n\
    <|/ c |>\n<| c |>\nYeah, that's right. Depending on what your original question\
    \ was, it could become a problem. I would recommend adding something like `/^(.*?)\\\
    bthe\\b(.*?)$/` to your regex to prevent that.\n<|/ c |>\n<| c |>\n: Please [edit]\
    \ your answer to include this critical piece of information.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\n$string = 'The quick brown fox';\n$search = 'quick';\n$position\
    \ = strpos($string, $search);\n</code>\n<|/ a tags=php,string |>\n<| a tags=php,string\
    \ dscore=2 |>\nThis might be helpful:\n<code>\n$string = 'The quick brown fox';\n\
    $search = 'quick';\n$string2 = preg_replace(\"/$search/i\", \"\", $string);\n\n\
    echo $string2;\n</code>\n<|/ a |>\n<| a tags=php,string dscore=2 |>\nYou can try\
    \ this :\n<code>\n<?php\n$string = 'The quick brown fox';\n$search = 'quick';\n\
    $string2 = preg_replace(\"/(^|\\s)$search(\\s)/i\", \"\"\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp5tqtvsjv.php
    on line 12

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    // Use a counter\
    \ to count how many times the substring occurs in the string\n    $count = substr_count($string,\
    \ $substring);\n    // If the substring occurs 0 times in the string return 0\n\
    \    if ($count == 0) {\n        return 0;\n    }\n    // If the substring occurs\
    \ 1 time in the string return 1\n    else if ($count == 1) {\n        return 1;\n\
    \    }\n    // If the substring occurs n times in the string return n\n    else\
    \ if ($count > 0) {\n        return $count;\n    }\n    // If the substring doesn't\
    \ occur n times in the string return -1\n    return -1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdluteibj.php:35\n\
    Stack trace:\n#0 /tmp/tmpdluteibj.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpdluteibj.php\
    \ on line 35\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    return substr_count($string,\
    \ $substring);\n}\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpype1rpkd.php:19\n\
    Stack trace:\n#0 /tmp/tmpype1rpkd.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpype1rpkd.php\
    \ on line 19\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    // Create an\
    \ array of strings with each substring as the key.\n    // This way we can check\
    \ if a string is in the array.\n    $strings = array(\n        $substring => 1,\n\
    \    );\n    // Loop through the string.\n    $count = -1;\n    for ($i = 0; $i\
    \ < strlen($string); $i++) {\n        $count += isset($strings[substr($string,\
    \ $i, 1)])\n            ? $strings[substr($string, $i, 1)]\n            : 0;\n\
    \    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjnuh_4a5.php:29\n\
    Stack trace:\n#0 /tmp/tmpjnuh_4a5.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpjnuh_4a5.php\
    \ on line 29\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n  return preg_match_all('/'\
    \ . preg_quote($substring, '/') . '/i', $string, $matches, PREG_OFFSET_CAPTURE);\n\
    }\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcezb5mti.php:20\n\
    Stack trace:\n#0 /tmp/tmpcezb5mti.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpcezb5mti.php\
    \ on line 20\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = 0;\n\
    \    $len = strlen($substring);\n    $i = 0;\n    while($i < $len) {\n       \
    \ $pos = stripos($string, $substring, $i);\n        if ($pos === false) {\n  \
    \          return $count;\n        }\n        $i += $pos + 1;\n        $count++;\n\
    \    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjshcgr5b.php:30\n\
    Stack trace:\n#0 /tmp/tmpjshcgr5b.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpjshcgr5b.php\
    \ on line 30\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n  $count = 0;\n \
    \ $current_string = $string;\n  $substrings = explode($substring);\n  foreach\
    \ ($substrings as $substring) {\n    if (strpos($string, $substring) !== false)\
    \ {\n      $count++;\n      $current_string = $string;\n    } else {\n      $current_string\
    \ = str_ireplace($substring, \"\", $current_string);\n    }\n  }\n  return $count;\n\
    }\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ArgumentCountError: explode() expects at least\
    \ 2 arguments, 1 given in /tmp/tmpruvw9jo9.php:12\nStack trace:\n#0 /tmp/tmpruvw9jo9.php(12):\
    \ explode('x')\n#1 /tmp/tmpruvw9jo9.php(25): how_many_times('', 'x')\n#2 /tmp/tmpruvw9jo9.php(29):\
    \ candidate('', 'x')\n#3 /tmp/tmpruvw9jo9.php(35): test()\n#4 {main}\n  thrown\
    \ in /tmp/tmpruvw9jo9.php on line 12\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    return substr_count($string,\
    \ $substring);\n}\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmy4985vc.php:20\n\
    Stack trace:\n#0 /tmp/tmpmy4985vc.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpmy4985vc.php\
    \ on line 20\n"
  timestamp: 1659979419
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n  // TODO: Do some\
    \ more testing to see what should be returned.\n  return substr_count($string,\
    \ $substring);\n}\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1j70mh7u.php:20\n\
    Stack trace:\n#0 /tmp/tmp1j70mh7u.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp1j70mh7u.php\
    \ on line 20\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $total = 0;\n\
    \    $current_pos = 0;\n    $positions = str_pos($string, $substring);\n    while\
    \ ($positions !== false) {\n        $total += $positions - $current_pos;\n   \
    \     $current_pos = $positions;\n        $positions = str_pos($string, $substring,\
    \ $current_pos + 1);\n    }\n    return $total;\n}\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function str_pos() in\
    \ /tmp/tmpckcd3ldp.php:12\nStack trace:\n#0 /tmp/tmpckcd3ldp.php(21): how_many_times('',\
    \ 'x')\n#1 /tmp/tmpckcd3ldp.php(25): candidate('', 'x')\n#2 /tmp/tmpckcd3ldp.php(31):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpckcd3ldp.php on line 12\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    if (!strlen($string))\
    \ {\n        return 0;\n    }\n    $pos = 0;\n    $start = 0;\n    $count = 0;\n\
    \    while ($pos = strpos($string, $substring, $start)) {\n        $start = $pos\
    \ + 1;\n        $count++;\n    }\n    return $count;\n}\n\n/**\n * Gets the extension\
    \ type of a file by looking at its filename.\n */\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqxyv_jn9.php:32\n\
    Stack trace:\n#0 /tmp/tmpqxyv_jn9.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpqxyv_jn9.php\
    \ on line 32\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n  return preg_match_all('/'.preg_quote($substring,\
    \ '/').'/u', $string, $matches) ? count($matches[0]) : 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgor_ifg3.php:20\n\
    Stack trace:\n#0 /tmp/tmpgor_ifg3.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpgor_ifg3.php\
    \ on line 20\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = 0;\n\
    \n    for ($i = 0; $i < strlen($string); $i++) {\n        if (strpos($string,\
    \ $substring, $i) !== false) {\n            $count++;\n        }\n    }\n\n  \
    \  return $count;\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThanks. This is the\
    \ most useful answer I have found so far and it also makes use of str_ireplace()\
    \ instead of str_replace(). Great job!\n<|/ c |>\n<| c |>\nThe `str_ireplace`\
    \ solution is great because you don't have to worry about replacing `a` with `A`.\
    \ But it fails on `aaaaaaaaaaaaaa` which becomes 7 instead of 8.\n<|/ c |>\n<|\
    \ c |>\n, you are correct. My solution is limited in that sense, and not fully\
    \ suitable for that case. Since it is based on the assumption of \"no spaces before\
    \ the substring you're trying to find\", it fails on `a` at the beginning of the\
    \ string. If you wanted it to fail on `a` anywhere in the string, I would consider\
    \ using a different approach.\n<|/ c |>\n<| a dscore=4 tags=replace,string,php\
    \ |>\nThis is just an extension of previous answers, I just wanted to include\
    \ a solution that allows you to use regular expressions to do some more advanced\
    \ tasks.\n<code>\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpf4gjbv89.php
    on line 20

    '
  timestamp: 1659979447
- exit_code: -1
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = 0;\n\
    \    $stringLength = (string) strlen($string);\n    $substringLength = (string)\
    \ strlen($substring);\n    $pos = 0;\n    $posEnd = 0;\n\n    while (true) {\n\
    \        $pos = strpos($string, $substring, $pos);\n        if ($pos === false)\
    \ {\n            break;\n        }\n\n        $count++;\n        $posEnd = $pos\
    \ + $substringLength;\n\n        if ($pos == $stringLength) {\n            $pos\
    \ = 0;\n        }\n    }\n\n    return $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979452
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count_substring\
    \ = substr_count($string, $substring);\n    $count_no_substring = substr_count($string,\
    \ $substring);\n    $count_no_substring++;\n    return $count_no_substring;\n\
    }\n</code>\n<|/ a tags=php,string |>\n<| a |>\nTry this:\n<code>\n<?php\n\n$string\
    \ = \"Hello world\";\n$words = explode(' ', $string);\n$word1 = \"Hello \";\n\
    $words2 = \"world\";\n$word3 = \" world\";\n\nif(stripos($string, $word1) != false\
    \ && stripos($string, $word2) != false && stripos($string, $word3) != false) {\n\
    \    echo \"Found it\";\n}\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmph_7vzlwq.php
    on line 15

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    return substr_count($string,\
    \ $substring);\n}\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmy4985vc.php:20\n\
    Stack trace:\n#0 /tmp/tmpmy4985vc.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpmy4985vc.php\
    \ on line 20\n"
  timestamp: 1659979419
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $total_matches\
    \ = preg_match_all(\"/$substring/\", $string);\n    return $total_matches;\n}\n\
    \nfunction candidate(...$args) {\n    return how_many_times(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl6838p1q.php:21\n\
    Stack trace:\n#0 /tmp/tmpl6838p1q.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpl6838p1q.php\
    \ on line 21\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $found = 0;\n\
    \n    $len = strlen($string);\n    $sublen = strlen($substring);\n    $i = 0;\n\
    \    for ($j = 0; $j < $len; $j++) {\n        if ($string[$j] == $substring[$i])\
    \ {\n            $i++;\n            if ($i == $sublen) {\n                $found++;\n\
    \                $i = 0;\n            }\n        }\n        else {\n         \
    \   $i = 0;\n        }\n    }\n\n    return $found;\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nThe OP asked for overlaping cases, your function doesn't consider that\
    \ :-)\n<|/ c |>\n<| c |>\nThanks a lot, I tested it and it works perfectly :)\
    \ I appreciate it.\n<|/ c |>\n<| a tags=php,str-replace,regex dscore=0 |>\nThis\
    \ should do:\n<code>\n<?php\n\n$string = \"abbaabb\";\n\n$pattern = \"([a-zA-Z])a\"\
    ;\n$replacement = \"$1a\";\n\n$result = preg_replace($pattern, $replacement, $string);\n\
    \necho $result;\n</code>\n<|/ a |>\n<| a |>\nThis is also working\n<code>\n<?php\n\
    $string = \"abbaabb\";\n\n$pattern = \"([a-zA-Z])a\";\n$replacement = \"$1a\"\
    ;\n\n$result = preg_replace($pattern, $replacement, $string);\n\necho $result;\n\
    </code>\n<|/ a tags=php,str-replace,regex dscore=0 |>\n<| a dscore=0 |>\ntry this\n\
    <code>\n$string = \"abbaabb\";\n\n$pattern = \"([a-zA-Z])a\";\n$replacement =\
    \ \"$1a\";\n\n$result = preg_replace($pattern, $replacement, $string);\n\necho\
    \ $result;\n</code>\n<|/ a tags=php,str-replace,regex |>\n<| a tags=php,str-replace,regex\
    \ dscore=0 |>\n<code>\n<?php\n$string = \"abbaabb\";\n\n$pattern = \"([a-zA-Z])a\"\
    ;\n$replacement = \"$1a\";\n\n$result = preg_replace($pattern, $replacement, $string);\n\
    \necho $result;\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpfqa6g04t.php
    on line 30

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $i = 0;\n   \
    \ while ($i <= strlen($string) - strlen($substring)) {\n        $found_pos = stripos($string,\
    \ $substring, $i);\n        if ($found_pos === false) $found_pos = strlen($string);\n\
    \        $i++;\n    }\n    return $i;\n}\nfunction candidate(...$args) {\n   \
    \ return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    cacacacac\", \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8gp_ea9p.php:24\n\
    Stack trace:\n#0 /tmp/tmp8gp_ea9p.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8gp_ea9p.php\
    \ on line 24\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    return preg_match_all(\"\
    /$substring/i\", $string);\n}\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgkfi8g80.php:20\n\
    Stack trace:\n#0 /tmp/tmpgkfi8g80.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpgkfi8g80.php\
    \ on line 20\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $position = 0;\n\
    \    $count = 0;\n    $current_substring = 0;\n    while ($position != strlen($string))\
    \ {\n        $position = strpos($string, $substring, $position);\n        if ($position\
    \ === false) { // Reached the end of the original string.\n            break;\n\
    \        }\n        if (++$current_substring == $substring) { // If we've found\
    \ the substring in the original string, we've got an overlap\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n</code>\n<|/ a tags=php,string,search\
    \ |>\n<| c |>\n`return substr_count($string, $substring);` would be more efficient.\n\
    <|/ c |>\n<| a tags=php,string,search dscore=5 |>\nThis should get you a count\
    \ of all occurrences of $substring in $string\n<code>\n$string = preg_replace('/(?<!^)(?!$)'.$substring.'/',\
    \ \"\", $string);\nreturn preg_match_all('/(?<!^)(?!$)'.$substring.'/', $string)\
    \ - 1;\n</code>\n<|/ a |>\n<| c |>\nThis only works if $substring contains no\
    \ special regex characters (like *, ., etc.)\n<|/ c |>\n<| c |>\nThis should be\
    \ the accepted answer since it works with special characters such as `*`, `?`,\
    \ `+`, `{`\n<|/ c |>\n<| c |>\nthis fails for `[?=`\n<|/ c |>\n<| c |>\nGreat\
    \ to see a regexp solution to a non-regexp problem!\n<|/ c |>\n<| c |>\nCan you\
    \ elaborate on how this fails?\n<|/ c |>\n<| a dscore=5 tags=php,string,search\
    \ |>\nAn alternative to substr_count(), which was designed specifically to find\
    \ substrings:\n<code>\n$search = 'hai';\n$string = 'hai';\n\n$matches = [];\n\
    $needle = str_split($search);\n$haystack = str_split($string);\nforeach($needle\
    \ as $key => $val) {\n    for($i = 0; $i < $haystack; $i++) {\n        $haystack[$i]\
    \ = $haystack[$i] . $haystack[$i + 1];\n    }\n    $haystack = array_map('trim',\
    \ $haystack);\n    for($i = 0; $i < $haystack; $i++) {\n        if($haystack[$i]\
    \ === $val) {\n            $matches[$key] = true;\n        }\n    }\nfunction\
    \ candidate(...$args) {\n    return how_many_times(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmppqxij85b.php
    on line 24

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $counter = 0;\n\
    \    for($i = 0; $i < strlen($string); $i++) {\n        $char = substr($string,\
    \ $i, 1);\n        if($char === $substring[0]) {\n            $counter++;\n  \
    \      }\n        else {\n            $counter = 0;\n        }\n        if($counter\
    \ > $substring[1]) {\n            break;\n        }\n    }\n    return $counter;\n\
    }\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Uninitialized string offset 1 in /tmp/tmpitwu4dpl.php on line\
    \ 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpitwu4dpl.php:32\n\
    Stack trace:\n#0 /tmp/tmpitwu4dpl.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpitwu4dpl.php\
    \ on line 32\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    return substr_count($string,\
    \ $substring);\n}\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpype1rpkd.php:19\n\
    Stack trace:\n#0 /tmp/tmpype1rpkd.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpype1rpkd.php\
    \ on line 19\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    if (strlen($substring)\
    \ === 0) {\n        return 0;\n    }\n    $occurrences = 0;\n    $string_length\
    \ = strlen($string);\n    for ($i = 0; $i < $string_length; $i++) {\n        if\
    \ (strpos($string, $substring, $i) !== false) {\n            $occurrences++;\n\
    \        }\n    }\n    return $occurrences;\n}\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwkeom9iw.php:29\n\
    Stack trace:\n#0 /tmp/tmpwkeom9iw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpwkeom9iw.php\
    \ on line 29\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n  return substr_count($string,\
    \ $substring);\n}\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdyvpgftr.php:20\n\
    Stack trace:\n#0 /tmp/tmpdyvpgftr.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpdyvpgftr.php\
    \ on line 20\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n  if (strpos($string,\
    \ $substring) === 0) {\n    return 0;\n  }\n  $i = 0;\n  while ($i < strlen($string))\
    \ {\n    $pos = strpos($string, $substring, $i);\n    if ($pos === false) {\n\
    \      break;\n    }\n    if ($pos == 0) {\n      $i++;\n      $pos = strpos($string,\
    \ $substring, $i);\n    }\n    $i++;\n  }\n  return $i;\n}\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx_dfzj_a.php:34\n\
    Stack trace:\n#0 /tmp/tmpx_dfzj_a.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpx_dfzj_a.php\
    \ on line 34\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    return substr_count($string,\
    \ $substring);\n}\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpype1rpkd.php:19\n\
    Stack trace:\n#0 /tmp/tmpype1rpkd.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpype1rpkd.php\
    \ on line 19\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    // If string\
    \ length is 0, return 0\n    if(!strlen($string)) return 0;\n\n    // If the substring\
    \ is empty string, return 0\n    if($substring === \"\") return 0;\n\n    // If\
    \ substring is null, return 0\n    if($substring === null) return 0;\n\n    //\
    \ If substring is empty, return 0\n    if($substring === \"\") return 0;\n\n \
    \   // If substring length is 0, return 0\n    if(strlen($substring) === 0) return\
    \ 0;\n\n    // If original string is empty, return 0\n    if(strlen($string) ===\
    \ 0) return 0;\n\n    // Set a starting index\n    $start = 0;\n\n    // Do the\
    \ search\n    $found = substr_count($string, $substring, $start);\n\n    return\
    \ $found;\n}\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9jjhkodx.php:43\n\
    Stack trace:\n#0 /tmp/tmp9jjhkodx.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp9jjhkodx.php\
    \ on line 43\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $length = $string.length;\n\
    \    $count = 1;\n    $i = $j = 0;\n    while (($i < $length) && ($j < $length))\
    \ {\n        if (substr($string, $i, 1) == $substring) {\n            $count++;\n\
    \        }\n        $i++;\n        $j++;\n    }\n    return $count;\n}\n\nfunction\
    \ candidate(...$args) {\n    return how_many_times(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpr0cwwngz.php:10\n\
    Stack trace:\n#0 /tmp/tmpr0cwwngz.php(24): how_many_times('', 'x')\n#1 /tmp/tmpr0cwwngz.php(28):\
    \ candidate('', 'x')\n#2 /tmp/tmpr0cwwngz.php(34): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpr0cwwngz.php on line 10\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = substr_count($string,\
    \ $substring);\n    foreach (str_split($string) as $character) {\n        if ($character\
    \ == $substring) {\n            $count += 1;\n        }\n    }\n    return $count;\n\
    }\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbx7n89m4.php:25\n\
    Stack trace:\n#0 /tmp/tmpbx7n89m4.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpbx7n89m4.php\
    \ on line 25\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    if (strlen($string)\
    \ == 0) {\n        return 0;\n    }\n\n    $count = 0;\n    $start = 0;\n    $length\
    \ = strlen($substring);\n\n    while ($start < $length) {\n        if (substr($string,\
    \ $start, $length) === $substring) {\n            $count++;\n            $start\
    \ += $length;\n        }\n        else {\n            $start++;\n        }\n \
    \   }\n\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps2mb1p_t.php:37\n\
    Stack trace:\n#0 /tmp/tmps2mb1p_t.php(42): test()\n#1 {main}\n  thrown in /tmp/tmps2mb1p_t.php\
    \ on line 37\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count_of_matches\
    \ = 0;\n    $current_position = 0;\n    // Move current position to end of string\n\
    \    $position = $string.length - 1;\n    // Loop until we find end of string\n\
    \    while ($current_position < $position) {\n        $next_position = $current_position\
    \ + 1;\n        // If the next character is not a match, count as one match.\n\
    \        // Otherwise, check if the current character is a substring of the next\
    \ character, if so increase the count\n        // If the character is a match,\
    \ count as one match.\n        if ($string[$next_position] !== '@' &&\n      \
    \      $string[$next_position] === $substring[$current_position]) {\n        \
    \    $count_of_matches += 1;\n        } else {\n            if ($string[$next_position]\
    \ === '@') {\n                $count_of_matches += 1;\n            }\n       \
    \ }\n        $current_position = $next_position;\n    }\n    return $count_of_matches;\n\
    }\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpd8qmz0ng.php:13\n\
    Stack trace:\n#0 /tmp/tmpd8qmz0ng.php(33): how_many_times('', 'x')\n#1 /tmp/tmpd8qmz0ng.php(37):\
    \ candidate('', 'x')\n#2 /tmp/tmpd8qmz0ng.php(43): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpd8qmz0ng.php on line 13\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $substring =\
    \ strtolower($substring);\n    $string = strtolower($string);\n    $count = 0;\
    \ // Count of how many times $substring can be found in $string\n    $len = strlen($string);\n\
    \    $i = 0; // Index of current character\n    $j = strlen($substring) - 1;\n\
    \n    while ($i <= $len && $j >=0) { // While we are not at the end of the original\
    \ string\n        // Find the first occurrence of $substring in $string\n    \
    \    $k = strpos($string, $substring, $i);\n        if ($k === false) { // The\
    \ substring has not been found yet\n            $i = $len + 1; // Add 1 for the\
    \ next search\n        } else {\n            // Found the substring! Keep track\
    \ of its position (k value), and its length (length value).\n            $count++;\
    \ // Increase the counter\n            $i = $k; // Start searching from the next\
    \ character after the found one\n            $j = $k - $len; // Start searching\
    \ from the next character before the found one (subtract the length of the substring)\n\
    \        }\n    }\n    return $count;\n}\n</code>\n<|/ a tags=python,php,algorithm\
    \ |>\n<| c |>\nIt looks like it counts substring as substring when there is an\
    \ overlapped of substrings, e.g: \"aba\" and \"ab\"\n<|/ c |>\n<| c |>\nGood catch.\
    \ I didn't really consider it that way, but I'm glad you found a solution.\n<|/\
    \ c |>\n<| c |>\nWhat happens if there is an overlap of the same substring?\n\
    <|/ c |>\n<| a tags=python,php,algorithm dscore=2 |>\nYou can do this in O(n)\
    \ time.\n<code>\ndef substrings_in_string(*strs):\n   substrings = set() # O(n)\n\
    \   for x in strs:\n      substrings.update([x for x in x.split(\"\") if len(x)\
    \ > 0])\n   return len(substrings)\n\nprint(substrings_in_string(\"abc\", \"def\"\
    , \"ghi\", \"jkl\", \"mno\"))\nprint(substrings_in_string(\"abc\", \"def\", \"\
    ghi\"))\n</code>\nOutput:\n<code>\n4\n3\n</code>\n<|/ a |>\n<| a dscore=2 |>\n\
    <code>\ndef sub_strings(s):\n    subs=0\n    s=list(s)\n    s.sort()\n    for\
    \ i,j in enumerate(s):\n        for j in range(i,len(s)):\n            if s[j]==s[j+1]\
    \ and s[j+1]!=s[j]:\n                subs+=1\n                break\n    return\
    \ subs\n\nprint(sub_strings('abcd'))\nprint(sub_strings('abc'))\nprint(sub_strings('abba'))\n\
    </code>\nOutput\n<code>\n4\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpglhwl_pc.php
    on line 31

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    return strlen(preg_replace('/'\
    \ . $substring . '*/', '', $string));\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    `how_many_times` does not return the number of overlapping occurrences, it returns\
    \ the number of times `$substring` occurs in the `$string`, so you'd still need\
    \ another function to return the number of overlapping occurrences.\n<|/ c |>\n\
    <| c |>\n: Yes, you're right. I'll update my answer to reflect this.\n<|/ c |>\n\
    <| c |>\nThe answer was updated to reflect this.\n<|/ c |>\n<| c |>\nYour answer\
    \ is great, but please edit it to include a test case where there is an overlap\
    \ (ie \"abbbc\" and \"aabb\").\n<|/ c |>\n<| c |>\n: Done. Hope it's better now.\n\
    <|/ c |>\n<| a tags=string,php,count,substring dscore=1 |>\nIf anyone is trying\
    \ to find an efficient and elegant way to do this, I'd suggest using a regex to\
    \ match the longest possible substring without overlapping the original string:\n\
    <code>\n$matches = [];\npreg_match_all('/(?<=-)(?!$)((?<=-)[a-z])+/', $stringWithOverlappingStrings,\
    \ $matches);\n$countOfOverlaps = count($matches[0]);\n</code>\nThe expression\
    \ works like this: Look for the substring that is either followed by a dash, or\
    \ followed by a dash and a character that is not the dash itself, then match all\
    \ combinations of lowercase letters that can precede the substring.\n<|/ a |>\n\
    <| c |>\nthis works great and will give an accurate result for any substring,\
    \ thanks! I added an answer below with my own version of this that also takes\
    \ cases into consideration - this was the solution I ended up using - very similar\
    \ to yours but with some added functionality\n<|/ c |>\n<| a tags=string,php,count,substring\
    \ |>\nIf your strings aren't too big, you could try this:\n<code>\n<?php\n\nfunction\
    \ candidate(...$args) {\n    return how_many_times(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpeldp9ajh.php
    on line 12

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $pos = strpos($string,\
    \ $substring);\n    if ($pos === false) {\n        // Substring not found.\n \
    \       return 0;\n    }\n\n    return ($pos + strlen($substring) - 1);\n}\nfunction\
    \ candidate(...$args) {\n    return how_many_times(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp770vh3qr.php:24\n\
    Stack trace:\n#0 /tmp/tmp770vh3qr.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp770vh3qr.php\
    \ on line 24\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $length = $string->length();\n\
    \    $substring = strtolower($substring);\n    $start_pos = 0;\n    $substring\
    \ = strtolower($substring);\n    do {\n        $end_pos = strpos($string, $substring,\
    \ $start_pos);\n        if ($end_pos === false) {\n            $end_pos = $length;\n\
    \        }\n        $start_pos = $end_pos + strlen($substring);\n    } while ($start_pos\
    \ < $length);\n    $end_pos = $length;\n    do {\n        $end_pos = strrpos($string,\
    \ $substring, $end_pos);\n        if ($end_pos === false) {\n            $end_pos\
    \ = $length;\n        }\n        $start_pos = $end_pos - strlen($substring);\n\
    \    } while ($start_pos > 0);\n    return $end_pos - $start_pos + 1;\n}\nfunction\
    \ candidate(...$args) {\n    return how_many_times(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to a member function length() on string\
    \ in /tmp/tmp4hla8131.php:10\nStack trace:\n#0 /tmp/tmp4hla8131.php(32): how_many_times('',\
    \ 'x')\n#1 /tmp/tmp4hla8131.php(36): candidate('', 'x')\n#2 /tmp/tmp4hla8131.php(42):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp4hla8131.php on line 10\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n  $count = substr_count($string,\
    \ $substring);\n  $substring = strtolower($substring);\n  for ($i = 0; $i < $count;\
    \ $i++) {\n    $string = strtolower($string);\n    if ($string == $substring)\
    \ return $i + 1;\n  }\n  return 0;\n}\n</code>\n<|/ a |>\n<| a dscore=1 tags=php,string\
    \ |>\nI wrote this function which works in PHP >= 5.1.2:\n<code>\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp_teq98du.php
    on line 18

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n\t$matches = array();\n\
    \t$match = false;\n\t$length = strlen($substring);\n\t$index = 0;\n\twhile(($index\
    \ = strpos($string, $substring, $index)) !== false) {\n\t\t$matches[] = $index;\n\
    \t\t$index += $length;\n\t}\n\treturn count($matches);\n}\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp84oh5prc.php:27\n\
    Stack trace:\n#0 /tmp/tmp84oh5prc.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp84oh5prc.php\
    \ on line 27\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n  $count = 0;\n \
    \ for ($i = 0; $i < strlen($string); $i++) {\n    $count += substr_count($string,\
    \ $substring, $i);\n  }\n  return $count;\n}\n\nfunction candidate(...$args) {\n\
    \    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    cacacacac\", \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpku2tbg6f.php:23\n\
    Stack trace:\n#0 /tmp/tmpku2tbg6f.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpku2tbg6f.php\
    \ on line 23\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = substr_count($string,\
    \ $substring);\n    if ($count == 0) {\n        return 0;\n    }\n    $count =\
    \ min($count, $substr_count($string, $substring, 0, 1));\n    return $count;\n\
    }\n</code>\n<|/ a dscore=4 |>\n<| a dscore=3 |>\n<code>\n<?php\n    $string =\
    \ 'This is a test string';\n\n    $positions = array();\n\n    $positions[0] =\
    \ 0;\n    $positions[1] = 0;\n    $positions[2] = 2;\n    $positions[3] = 4;\n\
    \    $positions[4] = 7;\n    $positions[5] = 8;\n    $positions[6] = 10;\n   \
    \ $positions[7] = 12;\n    $positions[8] = 13;\n    $positions[9] = 15;\n    $positions[10]\
    \ = 16;\n    $positions[11] = 17;\n    $positions[12] = 18;\n    $positions[13]\
    \ = 19;\n    $positions[14] = 21;\n    $positions[15] = 23;\n    $positions[16]\
    \ = 24;\n    $positions[17] = 25;\n    $positions[18] = 26;\n    $positions[19]\
    \ = 27;\n    $positions[20] = 29;\n    $positions[21] = 30;\n    $positions[22]\
    \ = 31;\n    $positions[23] = 32;\n\n    $position = strpos($string, ' ', 1);\n\
    \    while ($position != false && $position > 0) {\n        for ($i = 0; $i <\
    \ count($positions); $i++) {\n            if ($positions[$i] <= $position) {\n\
    \                $position = $positions[$i];\n                break;\n       \
    \     }\n        }\n        $position = strpos($string, ' ', $position + 1);\n\
    \    }\n\n    echo \"Found at \".$position;\nfunction candidate(...$args) {\n\
    \    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    cacacacac\", \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp6dglljup.php
    on line 17

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = 0;\n\
    \    $length = strlen($string);\n    for($i = 0; $i < $length; $i++) {\n     \
    \   if (strpos($string, $substring, $i) !== FALSE) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    cacacacac\", \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc8pgvxig.php:25\n\
    Stack trace:\n#0 /tmp/tmpc8pgvxig.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpc8pgvxig.php\
    \ on line 25\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    return substr_count($string,\
    \ $substring);\n}\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmy4985vc.php:20\n\
    Stack trace:\n#0 /tmp/tmpmy4985vc.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpmy4985vc.php\
    \ on line 20\n"
  timestamp: 1659979419
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    if (strlen($string)\
    \ == 0) return 0;\n    if (strlen($substring) == 0) return 0;\n    $substring\
    \ = strtolower($substring);\n    $string = strtolower($string);\n    $count =\
    \ array();\n    $current_index = 0;\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == $substring[0]) {\n            if ($substring[1]\
    \ == \"\") {\n                $count[0]++;\n            } else {\n           \
    \     $count[$current_index + $substring[1] + 1]++;\n            }\n         \
    \   $current_index += $substring[1] + 1;\n        }\n    }\n    return count($count);\n\
    }\n</code>\n<|/ a tags=substring,php,count |>\n<| c |>\nThanks for your answer\
    \ - but can you please tell me how does that code work? I mean how does it find\
    \ the overlapping cases? Does it iterate through each character and check how\
    \ many times a given substring can be found there?\n<|/ c |>\n<| c |>\nIt does\
    \ iterate through each character and does that with all the possible combinations\
    \ of the substrings length.\n<|/ c |>\n<| a |>\nHere is another version\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpxs3b2eg0.php
    on line 28

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = preg_match_all(\"\
    /$substring/\", $string, $matches);\n\n    if ($count) {\n        return $count\
    \ + count(array_diff($matches[0], $substring));\n    }\n\n    return 0;\n}\n</code>\n\
    <|/ a tags=php,preg-match-all,preg-match,regex dscore=2 |>\n<| a dscore=1 |>\n\
    I think this does the trick:\n<code>\n$string = \"how_many_times(\\\"hello\\\"\
    , \\\"hello\\\")\";\n$regex = '/\"([^\"]*?)\"/';\npreg_match_all($regex, $string,\
    \ $matches);\necho '<pre>' . print_r($matches, true) . '</pre>';\n</code>\n<|/\
    \ a tags=php,preg-match-all,preg-match,regex |>\n<| c |>\nNo it doesn't work,\
    \ try `how_many_times(\"hello world \\\", \\\"hello\\\")\"`, it won't work this\
    \ way.\n<|/ c |>\n<| c |>\nThat is because `/` is used to define a regex as a\
    \ string, it won't work this way unless you escape your `\"` like `\"/\\\"([^\"\
    ]*?)\\\"/\"`\n<|/ c |>\n<| a tags=php,preg-match-all,preg-match,regex |>\nThis\
    \ works:\n<code>\n<?php\n\n$string = \"how_many_times(\\\"hello\\\", \\\"hello\\\
    \")\";\n\n$pattern = '/([^\"]*?\"[^\"]*)\"/';\n\npreg_match_all($pattern, $string,\
    \ $matches);\n\nvar_dump($matches);\n</code>\n<|/ a dscore=1 |>\n<| c |>\nCan\
    \ you explain your answer?\n<|/ c |>\n<| a dscore=1 tags=php,preg-match-all,preg-match,regex\
    \ |>\n<code>\n$string = \"how_many_times(\\\"hello\\\", \\\"hello\\\")\";\n\n\
    $regex = '/(.+?)\"/';\n\npreg_match_all($regex, $string, $matches);\n\necho '<pre>'\
    \ . print_r($matches, true) . '</pre>';\n</code>\n<|/ a |>\n<| a |>\n<code>\n\
    <?php\n$string = \"how_many_times(\\\"hello\\\", \\\"hello\\\")\";\npreg_match('/\"\
    ([^\"]+)\"/', $string, $matches);\nprint_r($matches);\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp2fbdbegg.php
    on line 18

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $search = str_split($substring);\n\
    \    $search_string = str_split($string);\n    $result = 0;\n\n    foreach ($search_string\
    \ as $value) {\n        // If the value is found in one string but not the other,\
    \ add one.\n        if (in_array($value, $search)) {\n            $result++;\n\
    \        }\n    }\n\n    return $result;\n}\n</code>\n<|/ a tags=php,substring\
    \ |>\n<| c |>\nThank you for this answer, the only thing missing is a function\
    \ to remove duplicate substring occurrences\n<|/ c |>\n<| a tags=php,substring\
    \ |>\nYou can use preg_replace() with a regex and limit the replacements using\
    \ a callback:\n<code>\n$text = 'AaaBaaCaaDaaEaaFaaGaaHaaIaaJaaKaaLaaMaaNaaOaaPaaQaaRaaSaaTaaUaaVaaWaaXaaYaaZaa';\n\
    $replacements = [\n    'a' => 'A', 'B' => 'B', 'C' => 'C', 'D' => 'D',\n    'e'\
    \ => 'E', 'F' => 'F', 'G' => 'G', 'H' => 'H',\n    'i' => 'I', 'J' => 'J', 'K'\
    \ => 'K', 'L' => 'L',\n    'm' => 'M', 'n' => 'N', 'o' => 'O', 'p' => 'P',\n \
    \   'q' => 'Q', 'r' => 'R', 's' => 'S', 't' => 'T',\n    'u' => 'U', 'v' => 'V',\
    \ 'w' => 'W', 'x' => 'X',\n    'y' => 'Y', 'z' => 'Z'\n];\n\n$result = preg_replace('/a+/',\
    \ function($matches) {\n    return $replacements[$matches[0]];\n}, $text, -1);\n\
    \necho $result;\n</code>\nOutput:\n<code>\nABBCCDDEFFGHHIIJJKKLLMMNNNOOPPQQRRSSSTUUUVVWWXXYYZZ\n\
    </code>\nSee this working demo.\n<|/ a dscore=4 |>\n<| c |>\nI wish I could upvote\
    \ this more than once. Works great! And it's so simple and easy to understand\
    \ too.\n<|/ c |>\n<| c |>\nThe last parameter of `preg_replace()` is an optional\
    \ `$limit`. This parameter controls how many times the pattern will be tried to\
    \ be replaced, if the pattern is found more times it will be replaced more times.\
    \ So you can put a really high number, like `-1` or a really high number like\
    \ `99999` if you want to replace all instances of the pattern just once.\n<|/\
    \ c |>\n<| a |>\nJust try this:\n<code>\n\nfunction candidate(...$args) {\n  \
    \  return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    cacacacac\", \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpjiyexk1r.php
    on line 23

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n\tif (empty($string)\
    \ || empty($substring)) {\n\t\treturn 0;\n\t}\n\n\t$len = strlen($string);\n\t\
    $sublen = strlen($substring);\n\t$count = 0;\n\tfor ($i = 0; $i < $len; $i++)\
    \ {\n\t\t$count += $sublen > $len ? 1 : 0;\n\t\t$count += ($string[$i] === $substring[0]\
    \ && $string[$i] === $substring[$sublen]) ? 1 : 0;\n\t\t$count += ($string[$i]\
    \ === $substring[0] && $string[$i] === $substring[$sublen - 1]) ? 1 : 0;\n\t\t\
    $count += ($string[$i] === $substring[$sublen] && $string[$i] === $substring[$sublen\
    \ - 1]) ? 1 : 0;\n\t\t$count += ($string[$i] === $substring[$sublen - 1] && $string[$i]\
    \ === $substring[0]) ? 1 : 0;\n\t\t$count += ($string[$i] === $substring[$sublen\
    \ - 2] && $string[$i] === $substring[$sublen - 1]) ? 1 : 0;\n\t}\n\treturn $count;\n\
    }\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Uninitialized string offset 1 in /tmp/tmp7atgdc3k.php on line\
    \ 19\n\nWarning: Uninitialized string offset 1 in /tmp/tmp7atgdc3k.php on line\
    \ 21\n\nWarning: Uninitialized string offset 1 in /tmp/tmp7atgdc3k.php on line\
    \ 21\n\nWarning: Uninitialized string offset 1 in /tmp/tmp7atgdc3k.php on line\
    \ 19\n\nWarning: Uninitialized string offset 1 in /tmp/tmp7atgdc3k.php on line\
    \ 21\n\nWarning: Uninitialized string offset 1 in /tmp/tmp7atgdc3k.php on line\
    \ 21\n\nWarning: Uninitialized string offset 1 in /tmp/tmp7atgdc3k.php on line\
    \ 19\n\nWarning: Uninitialized string offset 1 in /tmp/tmp7atgdc3k.php on line\
    \ 21\n\nWarning: Uninitialized string offset 1 in /tmp/tmp7atgdc3k.php on line\
    \ 21\n\nWarning: Uninitialized string offset 1 in /tmp/tmp7atgdc3k.php on line\
    \ 19\n\nWarning: Uninitialized string offset 1 in /tmp/tmp7atgdc3k.php on line\
    \ 21\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7atgdc3k.php:34\n\
    Stack trace:\n#0 /tmp/tmp7atgdc3k.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp7atgdc3k.php\
    \ on line 34\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $substring =\
    \ (string) $substring;\n\n    $i = 0;\n    $j = 0;\n    while ($i <= strlen($string)\
    \ - strlen($substring)) {\n        $j = $i + strlen($substring);\n        if (substr_count($string,\
    \ substr($string, $i, $j)) > 1) {\n            return $j - $i;\n        }\n  \
    \      $i = $j;\n    }\n    return 0;\n}\n</code>\n<|/ a tags=php,string dscore=2\
    \ |>\n<| c |>\nThis is pretty good but it's missing the last case. `how_many_times(\"\
    aaaaa\", \"aaaa\")` returns 1, instead of 3.\n<|/ c |>\n<| c |>\n: I think it\
    \ works with that too\n<|/ c |>\n<| a tags=php,string |>\nI wrote a function that\
    \ will do what you want.\n<code>\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpk7toxxmz.php
    on line 23

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $string_length\
    \ = strlen($string);\n    $substring_length = strlen($substring);\n\n    if ($substring_length\
    \ > $string_length) {\n        return 0;\n    }\n\n    $string_position = 0;\n\
    \    $substring_position = 0;\n\n    do {\n        if ($string[$string_position]\
    \ === $substring[$substring_position]) {\n            $string_position++;\n  \
    \          $substring_position++;\n        } else {\n            if ($substring_position\
    \ === 0) {\n                return 0;\n            }\n\n            if ($string[$string_position\
    \ - 1] === $substring[$substring_position - 1]) {\n                $string_position++;\n\
    \                $substring_position++;\n            } else {\n              \
    \  return 0;\n            }\n        }\n    } while ($string[$string_position]\
    \ !== $substring[$substring_position]);\n\n    return $string_position + $substring_position;\n\
    }\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Uninitialized string offset 1 in /tmp/tmpp26w59k6.php on line\
    \ 36\n\nWarning: Uninitialized string offset 1 in /tmp/tmpp26w59k6.php on line\
    \ 21\n\nWarning: Uninitialized string offset 2 in /tmp/tmpp26w59k6.php on line\
    \ 36\n\nWarning: Uninitialized string offset 2 in /tmp/tmpp26w59k6.php on line\
    \ 21\n\nWarning: Uninitialized string offset 1 in /tmp/tmpp26w59k6.php on line\
    \ 29\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp26w59k6.php:47\n\
    Stack trace:\n#0 /tmp/tmpp26w59k6.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpp26w59k6.php\
    \ on line 47\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    if (empty($substring))\
    \ {\n        return 0;\n    }\n    $len = strlen($string);\n    $found = preg_match_all(\"\
    /$substring/\", $string, $matches, PREG_OFFSET_CAPTURE);\n    return ($found ?\
    \ count($matches[0]) : intval($len) - strlen($substring));\n}\n</code>\n<|/ a\
    \ tags=php dscore=2 |>\n<| c |>\nThis is very clever.  I was thinking I'd have\
    \ to go through the string, looking for a substring that could start at the beginning\
    \ and end at the end, then count the number of times the substring was found,\
    \ but that seems extremely expensive for large strings.\n<|/ c |>\n<| c |>\nYes,\
    \ it's very expensive. I've also added a variant that does not require you to\
    \ know the string length.\n<|/ c |>\n<| c |>\nNice. Do you know how this performs\
    \ for larger strings?\n<|/ c |>\n<| c |>\n: Depending on how complicated the algorithm\
    \ is, you could implement this as a generator and have the code consume one character\
    \ at a time rather than the entire string. With this approach, your code would\
    \ look something like: for ($i = 0; $i < count($s); $i++) { echo $s[$i]; if (how_many_times($s,\
    \ $i) > 0) echo \" \"; } else { echo \"\\n\"; }\n<|/ c |>\n<| c |>\n: I added\
    \ some timings. Seems like it's faster to go through it all and do the counting\
    \ in-place. Also tested with a longer string, and it seems to be about twice as\
    \ fast.\n<|/ c |>\n<| a tags=php dscore=1 |>\nI came across this question while\
    \ looking for a solution to find out how many times a substring appears in a string.\
    \ Here's what I came up with after implementing some of the answers above (thanks\
    \ guys):\n<code>\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp_a49s1b8.php
    on line 17

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $counter = 0;\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if (strpos($substring,\
    \ $string[$i]) !== false) {\n            $counter++;\n        }\n    }\n    return\
    \ $counter;\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nIf you need performance,\
    \ you can optimize your function by taking advantage of the fact that your substrings\
    \ are of same length. You can check my answer with benchmark examples, it runs\
    \ at `O(n*m*log(n+m))` where `n` and `m` are the length of your original string\
    \ and substring.\n<|/ c |>\n<| c |>\nI added an example for your answer above\
    \ based on your suggestion, thanks!\n<|/ c |>\n<| c |>\n`strpos` can take a third\
    \ argument, flag, which defaults to `0`. From the php docs: _\"If needle is not\
    \ a string, it is converted by PHP to an string. Additionally, the special value\
    \ STRCMP_*.\"_ http://php.net/manual/en/function.strpos.php\n<|/ c |>\n<| a |>\n\
    I suggest a brute force approach, it's pretty simple, but probably inefficient:\n\
    <code>\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpc0xf_htd.php
    on line 18

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    if ($string ==\
    \ $substring) {\n        return 0;\n    }\n\n    $count = preg_match_all(\"/\"\
    \ . $substring . \"/\", $string, $matches);\n    return count($matches[0]);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI like the `preg_match_all()` solution, much cleaner\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ how_many_times(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    cacacacac\", \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpn8r8t4v4.php
    on line 17

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = 0;\n\
    \    for ($i=0; $i<strlen($string); $i++) {\n        if (strpos($string, $substring,\
    \ $i) === false) {\n            break;\n        }\n        $count++;\n    }\n\
    \    return $count;\n}\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3s5vs6l8.php:26\n\
    Stack trace:\n#0 /tmp/tmp3s5vs6l8.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp3s5vs6l8.php\
    \ on line 26\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    return substr_count($string,\
    \ $substring);\n}\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmy4985vc.php:20\n\
    Stack trace:\n#0 /tmp/tmpmy4985vc.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpmy4985vc.php\
    \ on line 20\n"
  timestamp: 1659979419
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n\t$count = preg_match_all(\"\
    /$substring/\", $string, $matches);\n\treturn count($matches[0]);\n}\nfunction\
    \ candidate(...$args) {\n    return how_many_times(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_mmcxz73.php:20\n\
    Stack trace:\n#0 /tmp/tmp_mmcxz73.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_mmcxz73.php\
    \ on line 20\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    return substr_count($string,\
    \ $substring);\n}\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmy4985vc.php:20\n\
    Stack trace:\n#0 /tmp/tmpmy4985vc.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpmy4985vc.php\
    \ on line 20\n"
  timestamp: 1659979419
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n  $found = preg_match_all(\"\
    /$substring/\", $string);\n  if ($found === 0) {\n    return 0;\n  }\n  $substring\
    \ = preg_quote($substring, '/');\n  $found = preg_match_all(\"/$substring/\",\
    \ $string);\n  return ($found > 1) ? $found : 0;\n}\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1a2k1xiw.php:25\n\
    Stack trace:\n#0 /tmp/tmp1a2k1xiw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp1a2k1xiw.php\
    \ on line 25\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = 0;\n\
    \    $i = 0;\n    $length = strlen($substring);\n    while ($i < $length) {\n\
    \        $start = mb_strpos($string, $substring, $i);\n        if ($start !==\
    \ false) {\n            $count = max(1, $count);\n            $i += $start;\n\
    \        } else {\n            $i += $length;\n        }\n    }\n    return $count;\n\
    }\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strpos() in\
    \ /tmp/tmp5o9n_2w9.php:14\nStack trace:\n#0 /tmp/tmp5o9n_2w9.php(26): how_many_times('',\
    \ 'x')\n#1 /tmp/tmp5o9n_2w9.php(30): candidate('', 'x')\n#2 /tmp/tmp5o9n_2w9.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp5o9n_2w9.php on line 14\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = 0;\n\
    \    $length = strlen($string);\n    $substringLength = strlen($substring);\n\
    \    for ($i = 0; $i < $length; $i++) {\n        $count += $substringLength <=\
    \ $i ? 0 : strpos($string, $substring, $i) !== false ? $substringLength : $i -\
    \ 1;\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return\
    \ how_many_times(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    cacacacac\", \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Unparenthesized `a ? b : c ? d : e` is not supported. Use either
    `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmpqud_z5p1.php on line
    14

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $substring_count\
    \ = substr_count($string, $substring);\n    $string_length     = strlen($string);\n\
    \    $substring_length  = strlen($substring);\n\n    for ($i = 0; $i < $substring_length;\
    \ $i++) {\n        $overlapping_count = $substring_count - (($string_length -\
    \ $i) % $substring_length);\n        if ($overlapping_count >= $substring_count)\
    \ {\n            break;\n        }\n    }\n\n    return $overlapping_count * $substring_count;\n\
    }\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphpgqxob5.php:29\n\
    Stack trace:\n#0 /tmp/tmphpgqxob5.php(34): test()\n#1 {main}\n  thrown in /tmp/tmphpgqxob5.php\
    \ on line 29\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $substring =\
    \ strtolower($substring);\n    $string = strtolower($string);\n\n    $result =\
    \ 0;\n    $pos = 0;\n    while ($pos = stripos($string, $substring, $pos)) {\n\
    \        $result++;\n        $pos += strlen($substring);\n    }\n    return $result;\n\
    }\n</code>\n<|/ a tags=php,function,string,count |>\n<| a tags=php,function,string,count\
    \ |>\nThis code works by converting the string into an array and counting the\
    \ number of letters.\n<code>\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpijtq2i_g.php
    on line 21

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = 0;\n\
    \    $len = strlen($string);\n\n    for ($i = 0; $i < $len; $i++) {\n        if\
    \ ($string[$i] == $substring[0]) {\n            $count++;\n\n            for ($j\
    \ = 1; $j < count($substring); $j++) {\n                if ($string[$i + $j] !=\
    \ $substring[$j]) break;\n            }\n        }\n    }\n\n    return $count;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThanks so much! I wasn't sure what to do with this\
    \ function. I'm going to use this to see if I should do some more tweaking. Thanks\
    \ again for your help.\n<|/ c |>\n<| a dscore=0 tags=php,search |>\nYou could\
    \ use a regular expression but that would require more code.\nYou could use substr_count().\n\
    <|/ a |>\n<| c |>\nThanks for your suggestion. I might try both of these suggestions.\n\
    <|/ c |>\n<| a |>\nI'd suggest you to use substr_count() to do this.\n<|/ a tags=php,search\
    \ dscore=0 |>\n<| a tags=php,search dscore=0 |>\nI'd suggest you use regex for\
    \ this:\n<code>\nif(preg_match('/abc/', $str)) echo \"true\";\n</code>\n<|/ a\
    \ |>\n<| a dscore=0 |>\nI would suggest you to use regex for this\n<code>\n<?php\n\
    $str='aaaaaaaaabbbbbbbcccccddddddddd';\necho preg_match_all('/[a-z]{2}[a-z]{2}[a-z]{2}[a-z]{2}[a-z]{2}[a-z]{2}[a-z]{2}[a-z]{2}/i',\
    \ $str);\n</code>\n<|/ a tags=php,search |>\n<| a tags=php,search dscore=0 |>\n\
    Try this \n<code>\n$string = 'aaaaaaaaabbbbbbbcccccddddddddd';\n$find = 'aaaaa';\n\
    \n$count = str_word_count($string, 2);\n$match = 0;\nforeach (str_word_count($string,\
    \ 2) as $key => $val) {\n    if ($val == $find) {\n        $match++;\n       \
    \ break;\n    }\n}\necho $match;\n</code>\n<|/ a |>\n<| a tags=php,search |>\n\
    <code>\n<?php\n  $str = 'aaaaaa bbbbbbbb ccccccccc ddddddd eeeeeee fffff';\n \
    \ $find = 'cccc';\n\n  $count = 0;\n  $len = strlen($string);\n\n  for ($i = 0;\
    \ $i < $len; $i++) {\n    if ($string[$i] == $find[0]) {\n      $count++;\n  \
    \    for ($j = 1; $\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmprk5v1dpj.php
    on line 25

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n\t$length  = strlen($substring);\n\
    \t$matches = 0;\n\t$string  = str_replace(\" \", \"\", $string);\n\tfor($i = 0;\
    \ $i < $length; $i++) {\n\t\t$substring_length = strlen($substring);\n\t\t$pos\
    \             = strpos($string, $substring, $i);\n\t\tif($pos === false) {\n\t\
    \t\treturn $matches;\n\t\t}\n\t\tif($pos !== false && $pos > $i) {\n\t\t\t$matches++;\n\
    \t\t\t$substring_length--;\n\t\t}\n\t\tif($substring_length == 0) {\n\t\t\treturn\
    \ $matches;\n\t\t}\n\t}\n\treturn $matches;\n}\n\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfrrpfb0q.php:36\n\
    Stack trace:\n#0 /tmp/tmpfrrpfb0q.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfrrpfb0q.php\
    \ on line 36\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n\t$substringLength\
    \ = strlen($substring);\n\tif (strpos($string, $substring) === false) {\n\t\t\
    return 0;\n\t}\n\t$string = str_replace($substring, '', $string);\n\t$stringLength\
    \ = strlen($string);\n\tif ($stringLength == 0) {\n\t\treturn 0;\n\t}\n\t\n\t\
    $stringLength = $stringLength - $substringLength;\n\tif ($stringLength == 0) {\n\
    \t\treturn 0;\n\t}\n\t\n\t$count = 0;\n\t\n\tfor ($i = 0; $i < $stringLength;\
    \ $i++) {\n\t\tif ($string[$i] === $substring[0]) {\n\t\t\t$count++;\n\t\t\t$i++;\n\
    \t\t}\n\t\telse {\n\t\t\tif ($count > 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif\
    \ ($string[$i] === $substring[$substringLength]) {\n\t\t\t\t$count++;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn $count;\n}\n\nfunction candidate(...$args) {\n    return\
    \ how_many_times(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    cacacacac\", \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Uninitialized string offset 1 in /tmp/tmpdyixxxcl.php on line\
    \ 36\n\nWarning: Uninitialized string offset 1 in /tmp/tmpdyixxxcl.php on line\
    \ 36\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdyixxxcl.php:50\n\
    Stack trace:\n#0 /tmp/tmpdyixxxcl.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpdyixxxcl.php\
    \ on line 50\n"
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $matches = str_split($string);\n\
    \    $index = array_search($substring, $matches);\n    return count($matches)\
    \ - $index;\n}\n</code>\nThe above function will also return how many times a\
    \ substring is present in a string. However, the above solution also works for\
    \ overlapping cases. For example,\n<code>\n>>> how_many_times(\"abacab\", \"ab\"\
    )\n2\n</code>\nIf you just want to find the number of times the substring appears\
    \ in the given string, you can also use the following method. \n<code>\n<?php\n\
    $str = \"abacab\";\necho strpos(\"abacab\", \"ab\"); // output 2\nfunction candidate(...$args)\
    \ {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpgjx3mb5e.php
    on line 14

    '
  timestamp: 1659979447
- exit_code: 255
  program: "<?php\n// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n\
    // >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"\
    aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    if (!strlen($string)\
    \ || !strlen($substring)) return 0;\n\n    $length = $substring . strlen($string);\n\
    \    $count = 0;\n\n    foreach (str_split($string) as $c) {\n        if ($c !=\
    \ $substring) {\n            $count += $length - ($c + strlen($substring));\n\
    \        } else {\n            $count += strlen($substring);\n        }\n    }\n\
    \n    return $count;\n}\n\nfunction candidate(...$args) {\n    return how_many_times(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\"\
    , \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: string +\
    \ int in /tmp/tmpx9tutyrk.php:17\nStack trace:\n#0 /tmp/tmpx9tutyrk.php(27): how_many_times('xyxyxyx',\
    \ 'x')\n#1 /tmp/tmpx9tutyrk.php(32): candidate('xyxyxyx', 'x')\n#2 /tmp/tmpx9tutyrk.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpx9tutyrk.php on line 17\n"
  timestamp: 1659979447
