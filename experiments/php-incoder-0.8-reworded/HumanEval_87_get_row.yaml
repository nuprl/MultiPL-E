name: HumanEval_87_get_row
language: php
prompt: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which\
  \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
  \ number of columns.\n// Given lst, and integer x, find integers x in the array,\n\
  // and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array\
  \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
  \ by rows in ascending order.\n// Also, sort coordinates of the row by columns in\
  \ descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6),\
  \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1,\
  \ 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n\
  // >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\n\
  function get_row($lst, $x) {\n"
tests: "function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3,\
  \ 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
  \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
  \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
  \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
  \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1,\
  \ 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3,\
  \ 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2,\
  \ 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5,\
  \ 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)),\
  \ 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $ret = [];\n    for ($i = 0, $n = count($lst); $i < $n; $i++) {\n\
    \        $row = array_slice($lst[$i], 0, $x);\n        $row_sorted = array_reverse($row);\n\
    \        $column_sorted = array_flip($row);\n        $coords = array_merge(range(0,\
    \ count($row)), array_merge(range(0, count($row)), $row));\n        asort($coords);\n\
    \        arsort($coords);\n        $ret = array_merge($ret, [array_combine($coords,\
    \ $row_sorted)]);\n    }\n    return $ret;\n}\n", "    if (empty($lst)) {\n  \
    \      return array();\n    }\n    $n = count($lst[0]);\n    $r = array();\n \
    \   for ($i = 0; $i < $n; $i++) {\n        $p = array();\n        for ($j = 0;\
    \ $j < $n; $j++) {\n            if ($i == $j) {\n                $p[] = array(1,\
    \ 0);\n            } elseif ($j < $i) {\n                $p[] = array(0, -1);\n\
    \            } else {\n                $p[] = array(-1, 0);\n            }\n \
    \       }\n        $r[] = array((int)$i, array_reverse($p));\n    }\n    array_multisort($r,\
    \ $lst);\n    $ret = array();\n    foreach ($r as $k) {\n        $ret[] = $lst[$k[0]][$k[1]];\n\
    \    }\n    return $ret;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=algorithm,arrays,php\
    \ |>\nHere's my take on it. It's very similar to your code, with the small differences\
    \ noted in the comments. A little more flexible, since you can have as many rows\
    \ and columns as you like.\n<code>", "    $lst = array_values($lst);\n    $row\
    \ = array();\n    foreach ($lst as $i => $e) {\n        if ($x < $e) break;\n\
    \        $row[] = array($i, $lst[$i]);\n    }\n    return $row;\n}\n", "    if\
    \ ($lst) {\n        $result = [];\n        $x = $x - 0;\n        foreach ($lst\
    \ as $row) {\n            $result[count($row)] = [count($row) - 1, $x - 1];\n\
    \            $x = $x - 1;\n        }\n        return $result;\n    }\n}\n", " \
    \   if (empty($lst)) {\n        return array();\n    }\n    // find row\n    $x\
    \ = intval($x);\n    $row = array_search($x, array_keys($lst));\n    if ($row\
    \ === false) {\n        return array();\n    }\n    // sort row by columns\n \
    \   $lst[$row] = array_flip($lst[$row]);\n    arsort($lst[$row]);\n    // sort\
    \ row by columns in descending order\n    arsort($lst[$row], SORT_NUMERIC);\n\
    \    // return row\n    return array_combine(array_keys($lst[$row]), $lst[$row]);\n\
    }\n", "\t$y = array_flip($lst);\n\tksort($y);\n\trsort($y);\n\t$rows = [];\n\t\
    foreach ($y as $col => $v) {\n\t\t$rows[] = [$col];\n\t\tforeach ($v as $row)\
    \ {\n\t\t\tif ($row == $x) {\n\t\t\t\t$rows[count($rows)-1][] = $col;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn $rows;\n}\n", "  // code here\n  return $lst;\n}\n", " \
    \   $res = array();\n    foreach ($lst as $key => $val) {\n        if ($key ==\
    \ $x) {\n            $res[] = array($key, $val);\n        }\n    }\n    ksort($res,\
    \ SORT_NUMERIC);\n    ksort($res, SORT_DESC);\n    return $res;\n}\n", "    $out\
    \ = [];\n    if (empty($lst)) {\n        return $out;\n    }\n    $row = [[]];\n\
    \    foreach ($lst as $v) {\n        $column = 0;\n        foreach ($row as $rowv)\
    \ {\n            if ($rowv[$column] >= $v) {\n                break;\n       \
    \     } else {\n                $column++;\n            }\n        }\n       \
    \ if ($column == count($row)) {\n            $row[$column] = $v;\n        } else\
    \ {\n            $row[$column] = $v;\n            $out[] = $row;\n           \
    \ $row = [[]];\n            $column = 0;\n        }\n    }\n    // We need to\
    \ sort row by column in descending order\n    $out[] = $row;\n    usort($out,\
    \ function($a, $b) {\n        return array_reverse($a) - array_reverse($b);\n\
    \    });\n    // Now sort by row in ascending order\n    usort($out, function($a,\
    \ $b) {\n        return array_reverse($a[0]) - array_reverse($b[0]);\n    });\n\
    \    return $out;\n}\n\n/**\n * Get rows of the matrix\n * @param array $lst\n\
    \ * @param integer $x x value to search\n * @return array of arrays, each array\
    \ has [x, y] coordinates\n */", "    return array();\n}\n", "    if (empty($lst))\
    \ {\n        return array();\n    }\n    $sorted = array();\n    foreach($lst\
    \ as $row) {\n        $y = array_search($x, $row);\n        $sorted[] = array($row,\
    \ $y);\n    }\n    usort($sorted, 'cmp');\n    foreach($sorted as $coord) {\n\
    \        $row = $coord[0];\n        $y = $coord[1];\n        $row = array_reverse($row);\n\
    \        $row[] = $y;\n    }\n    return $sorted;\n}\n</code>\n<|/ a tags=php\
    \ dscore=0 |>\n<| a dscore=0 tags=php |>\nThe question is, how do you find the\
    \ coordinates of a given number in the matrix? And how do you find these coordinates\
    \ when the matrix is very big? My answer is a linear time algorithm. The first\
    \ step is to find the matrix size, and then to fill the matrix with zeros. The\
    \ last step to find the coordinates of a given number:\n<code>", "    if (!$lst)\
    \ return array();\n    $sorted = array();\n    foreach ($lst as $row) {\n    \
    \    $rsorted = array();\n        foreach ($row as $column) {\n            if\
    \ ($column === $x) {\n                $rsorted[] = array($row, array_search($x,\
    \ $row));\n            }\n        }\n        asort($rsorted);\n        $sorted[]\
    \ = $rsorted;\n    }\n    return $sorted;\n}\n", "    $rows = array_count_values($lst);\n\
    \    $row = array_search($x, array_keys($rows));\n    return $rows[$row];\n}\n",
  "    if (empty($lst)) return array();\n    $n = count($lst);\n    if ($x < 0 ||\
    \ $x >= $n) return array();\n    $i = $x - 1;\n    $ret = array();\n    for (;\
    \ $i >= 0; $i--) $ret[] = array($i + 1, $lst[$i]);\n    array_multisort($ret);\n\
    \    return $ret;\n}", "  // Write your code here.\n  return [];\n}", "    $return\
    \ = array();\n    if (empty($lst)) {\n        return $return;\n    }\n\n    //\
    \ first sort coordinates initially by rows in ascending order\n    uasort($lst,\
    \ function ($a, $b) {\n        // first sort coordinates initially by columns\
    \ in descending order\n        usort($b, function ($c, $d) {\n            return\
    \ $c - $d;\n        });\n        return $a - $b;\n    });\n\n    $row = 0;\n \
    \   foreach ($lst as $col) {\n        foreach ($col as $y) {\n            if ($y\
    \ == $x) {\n                $return[] = array($row, $col);\n                break;\n\
    \            }\n        }\n        $row++;\n    }\n\n    return $return;\n}\n",
  "    $r = [];\n    foreach ($lst as $elem) {\n        if (array_search($x, $elem)\
    \ !== false) {\n            $r[] = array_values($elem);\n        }\n    }\n  \
    \  sort($r, SORT_NUMERIC);\n    usort($r, function($a, $b) {\n        return $b[0]\
    \ - $a[0];\n    });\n    return $r;\n}\n</code>\n<|/ a tags=arrays,php,multidimensional-array\
    \ dscore=1 |>\n<| c |>\nThanks for the reply. Can you elaborate more the explanation\
    \ of the sorting part? For instance, why are you using `array_search()` and what\
    \ is the `SORT_NUMERIC` argument for?\n<|/ c |>\n<| c |>\n`array_search` searches\
    \ array for key `key` (in this case array value), and returns position in array,\
    \ if key exists, otherwise it returns `false`. With `SORT_NUMERIC` you can sort\
    \ numeric array by key, not values.\n<|/ c |>\n<| c |>\nThanks, I got it\n<|/\
    \ c |>\n<| a |>\n<code>\n<?php", "  if (!is_array($lst) || empty($lst)) return\
    \ array();\n  $m = count($lst);\n  $n = count($lst[0]);\n  ksort($lst);\n  ksort($lst[0]);\n\
    \  if ($x == $m || $x == $n - 1) {\n    return array(array(0, 0));\n  }\n  $rows\
    \ = array();\n  while ($x < $m && $x < $n - 1) {\n    $row = array();\n    $rows[]\
    \ = $row;\n    $x = $x + 1;\n    if ($x < $m) {\n      foreach ($lst[$x] as $y)\
    \ {\n        $row[] = array($x, $y);\n      }\n    }\n    if ($x < $n - 1) {\n\
    \      foreach ($lst[$x][$x] as $y) {\n        $row[] = array($x, $y);\n     \
    \ }\n    }\n  }\n  return $rows;\n}\n", "    $res = array();\n    foreach ($lst\
    \ as $row)\n        if ($row[0] === $x)\n            $res[] = $row;\n    return\
    \ $res;\n}", "    // Write your code here\n    $row = array();\n    foreach($lst\
    \ as $k => $v) {\n        if($v[0] == $x) {\n            $row[] = array((int)$k,\
    \ (int)$v[1]);\n        }\n    }\n    return $row;\n}\n", "  assert(is_array($lst));\n\
    \  assert(is_int($x));\n  $row = 0;\n  foreach($lst as $coord) {\n    if (is_array($coord)\
    \ && $coord[0] == $x) {\n      return array($coord);\n    }\n    $row++;\n  }\n\
    \  return array();\n}\n", "    if (!$lst) $lst = array();\n    $len = count($lst);\n\
    \    if ($x < 0) return null;\n\n    $results = [];\n    $row = array_slice($lst,\
    \ ($len / 2) + ($len % 2));\n    array_multisort(array_map(function($el) { return\
    \ count($el); }, $row), $row, 0, $row);\n\n    $results[] = array_slice($row,\
    \ 0, $x);\n    $results[] = array_slice($row, $x);\n\n    return $results;\n}\n",
  "    $x[] = $x;\n    return array_flip(array_flip($lst));\n}\n", "    $coords =\
    \ array(array(0));\n    $row = 0;\n\n    while (1) {\n        if (is_array($lst))\
    \ {\n            $coords[$row][] = $lst[$coords[$row][0]];\n            unset($lst[$coords[$row][0]]);\n\
    \        } else {\n            if ($x === $coords[$row][0]) {\n              \
    \  break;\n            }\n            $coords[$row][] = $x;\n        }\n     \
    \   $row++;\n    }\n    ksort($coords);\n    krsort($coords);\n    foreach ($coords\
    \ as $key => &$coord) {\n        krsort($coord);\n    }\n    return $coords;\n\
    }\n", "  $lst = array_filter(\n    $lst,\n    function($e) use ($x) {\n      return\
    \ !is_null($e[$x]);\n    }\n  );\n\n  if (!count($lst)) return array();\n  $lst\
    \ = array_map(\n    function($e) {\n      return array($e[0], array_reverse($e[1],\
    \ true));\n    },\n    array_chunk($lst, count($lst[0]) / 2)\n  );\n  $lst = array_map(\n\
    \    function($e) {\n      return array($e[0], $e[1]);\n    },\n    array_chunk($lst,\
    \ 2)\n  );\n  return $lst;\n}\n", "    $x = intval($x);\n    $x = $x - 1;\n  \
    \  if ($x < 0 || $x >= count($lst)) return array();\n    $row = array();\n   \
    \ $col = 0;\n    $i = 0;\n    $rows = count($lst);\n    $columns = array_count($lst[0]);\n\
    \    $row = 0;\n    $columns = count($lst[0]);\n    foreach ($lst as $c) {\n \
    \       foreach ($c as $val) {\n            if ($col == $x && $val == $x) $rows[$i][]\
    \ = array($row, $col);\n            $row++;\n            if ($col == $columns\
    \ - 1) {\n                $col = 0;\n                $row++;\n            }\n\
    \            $col++;\n        }\n        $i++;\n    }\n    array_multisort($rows);\n\
    \    array_multisort($columns, $rows);\n    return $rows;\n}\n\n/**\n * Checks\
    \ whether a string contains substring.\n *\n * @param string $haystack the string\
    \ being tested\n * @param string $needle the substring being searched for\n *\
    \ @return boolean whether or not the substring exists in the string\n */", " \
    \ // Write your logic here\n}", "    $result = [];\n    foreach ($lst as $k =>\
    \ $row) {\n        if (in_array($x, $row)) {\n            $result[] = [$k, array_search($x,\
    \ $row)];\n        }\n    }\n    sort($result, SORT_NUMERIC);\n    array_multisort(array_column($result,\
    \ 1), SORT_DESC, $result);\n    return $result;\n}\n", "  $n = count($lst);\n\
    \  if ($n < 1) return array();\n  if ($x < 0) return array();\n  if ($x == 0)\
    \ return array(array(0));\n  if ($x <= count($lst[$n - 1])) return array(array_merge(array(0),\
    \ $lst[$n - 1][$x]));\n\n  $rows = array();\n  $max_row = array_slice($lst[$n\
    \ - 1], -$x);\n  $rows = array_merge($rows, $max_row);\n  array_pop($rows);\n\n\
    \  $cols = array_merge(array_slice($lst[$n - 1], -$x, $x + 1), array_slice($lst[$n\
    \ - 1], 0));\n  array_pop($cols);\n  $rows = array_merge($rows, $cols);\n\n  rsort($rows);\n\
    \  rsort($rows);\n  return $rows;\n}", "    if (!is_array($lst) || !is_array($x)\
    \ || count($lst) !== count($x)) {\n        return array();\n    }\n    $m = count($lst);\n\
    \    $n = count($x[0]);\n    $result = array();\n    for ($c = 0; $c < $n; $c++)\
    \ {\n        $result[$c] = array();\n        for ($r = 0; $r < $m; $r++) {\n \
    \           if ($lst[$r][$c] == $x) {\n                $result[$c][] = $r;\n \
    \           }\n        }\n    }\n    usort($result, 'cmp');\n    foreach ($result\
    \ as $key => $value) {\n        $result[$key] = array_reverse($value, true);\n\
    \    }\n    return $result;\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nVery neat!\
    \ But I noticed the array is not sorted according to rows in descending order.\
    \ Is there any way to fix this?\n<|/ c |>\n<| a tags=sorting,php,arrays dscore=1\
    \ |>\nThis is how I would do it:\n<code>\n<?php\n\n$input = array(\n  array(1,\
    \ 2, 3, 4, 5, 6),\n  array(1, 2, 3, 4, 1, 6),\n  array(1, 2, 3, 4, 5, 1)\n);\n\
    \n$output = array();\n\nforeach($input as $row) {\n  $output[] = array(\n    'position'\
    \ => 0,\n    'row' => 0\n  );\n\n  foreach($row as $column) {\n    ++$output[$position]['row'];\n\
    \    ++$output[$position]['position'];\n  }\n}\n\nusort($output, function($a,\
    \ $b) {\n  return $a['row'] > $b['row'];\n});\n\nprint_r($output);\n</code>\n\
    Which results in:\n<code>\nArray\n(\n    [0] => Array\n        (\n           \
    \ [position] => 0\n            [row] => 0\n        )\n\n    [1] => Array\n   \
    \     (\n            [position] => 1\n            [row] => 2\n        )\n\n  \
    \  [2] => Array\n        (\n            [position] => 2\n            [row] =>\
    \ 3\n        )\n\n    [3] => Array\n        (\n            [position] => 3\n \
    \           [row] => 4\n        )\n\n    [4] => Array\n        (\n           \
    \ [position] => 4\n            [row] => 5\n        )\n\n)\n</code>\n<|/ a |>\n\
    <| a |>\nI think this approach is better if you are not going to do much manipulation\
    \ of the array.\n<code>", "    \n    $n = count($lst);\n    \n    // find out\
    \ how many columns in row we need\n    $cols = max(array_map(function($i) {return\
    \ count($lst[$i]);}, range(0, $n - 1)));\n    \n    // sort coordinate initially\
    \ by rows in ascending order\n    $lst = array_map(function($i) use ($lst, $x)\
    \ {\n        return array_map(function($j) use ($x, $cols) {\n            \n \
    \           $xc = 0;\n            \n            for ($jc = 0; $jc < $cols; $jc++)\
    \ $xc += ($jc == $j) ? 1 : 0;\n            \n            return array($i, $j,\
    \ $xc);\n            \n        }, range(0, $cols - 1));\n    }, $lst);\n    \n\
    \    // sort coordinates of the row by columns in descending order\n    $lst =\
    \ array_map(function($i) use ($lst) {\n        return array_map(function($j) use\
    \ ($lst) {\n            \n            $yc = 0;\n            \n            foreach($lst\
    \ as $l) $yc += ($j == $l[$j]) ? 1 : 0;\n            \n            return array($i,\
    \ $j, $yc);\n            \n        }, $lst);\n    }, $lst);\n    \n    // find\
    \ out which coordinates are in the row we need\n    $ind = array_map(function($i)\
    \ use ($x, $lst) {\n        \n        $xc = 0;\n        \n        foreach($lst\
    \ as $l) $xc += ($i == $l[$i]) ? 1 : 0;\n        \n        return $xc;\n     \
    \   \n    }, $x);\n    \n    // return empty array if no coordinate is found\n\
    \    return empty($ind) ? array() : array_slice($lst, 0, $ind);\n}\n</code>\n\
    Demo\n<|/ a dscore=2 |>\n<| c |>\nthanks for your answer. I tried your code, and\
    \ it seems to be working perfectly fine, except that it gives wrong results for\
    \ some cases. I edited my post to include the examples, can you help me to spot\
    \ what's wrong with my code?\n<|/ c |>\n<| c |>\nWhat does it mean \"wrong results\"\
    ? Are the results not what you wanted? If so, what do you want to see?\n<|/ c\
    \ |>\n<| c |>\nI mean it gives wrong results even though I used exactly your code\n\
    <|/ c |>\n<| c |>\nI'm unable to reproduce your problem using your code. I've\
    \ added my code to my answer, please check it out and tell me whether it works\
    \ as you intended.\n<|/ ", "    $result = array();\n    foreach ($lst as $key\
    \ => $row) {\n        $result[$key] = array_slice($row, 0, $x);\n    }\n    return\
    \ $result;\n}\n", "    $rows = array();\n    for ($y = 0; $y < count($lst); $y++)\
    \ {\n        $rows[$y] = array();\n        for ($x = 0; $x < count($lst[$y]);\
    \ $x++) {\n            if ($lst[$y][$x] == $x) {\n                $rows[$y][]\
    \ = array($x, $y);\n            }\n        }\n    }\n    foreach ($rows as $row)\
    \ {\n        arsort($row, SORT_NUMERIC);\n    }\n    $result = array();\n    foreach\
    \ ($rows as $row) {\n        $result[] = array_pop($row);\n    }\n    return $result;\n\
    }\n", "  $return = array();\n  $row = 0;\n  $col = 0;\n  while ($row < count($lst)\
    \ && $row > 0) {\n    $col = 0;\n    while ($col < count($lst[0]) && $col > 0)\
    \ {\n      if ($lst[$row][$col] == $x) {\n        $return[] = array((int)$row,\
    \ (int)$col);\n        $row++;\n        $col++;\n      } else if ($row == count($lst)\
    \ && $col == count($lst[0])) {\n        break;\n      }\n      $col++;\n    }\n\
    \    $row--;\n  }\n  return $return;\n}\n", "    $res = array();\n    $n = count($lst);\n\
    \    for($row = 0; $row < $n; $row++) {\n        $lst1 = $lst[$row];\n       \
    \ for($col = 0; $col < count($lst1); $col++) {\n            if( $lst1[$col] ==\
    \ $x ) {\n                $res[] = array($row, $col);\n            }\n       \
    \ }\n    }\n    foreach(array_reverse($res) as $r) {\n        sort($r);\n    }\n\
    \    return $res;\n}\n", "  $r = array();\n  if (empty($lst)) {\n    return array();\n\
    \  }\n  // Sort coordinates initially by rows in ascending order.\n  // Also,\
    \ sort coordinates of the row by columns in descending order.\n  ksort($lst);\n\
    \  foreach ($lst as $i => $row) {\n    ksort($row);\n    $r[] = array_combine(range($i,\
    \ $i), $row);\n  }\n  // Remove invalid rows.\n  $r = array_filter($r);\n  $x\
    \ = $x - 1;\n  return array_slice($r, $x, 1);\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\nA fast way to do this in PHP is to use array_filter with a callback\
    \ which checks that the row contains only integers:\n<code>", "    $out = array();\n\
    \    for($i = 0; $i < count($lst); $i++) {\n        $out[$i] = array($i, $x <\
    \ $lst[$i]); //row number\n    }\n    array_multisort($out, $lst, $lst);\n   \
    \ return array_reverse($out, true);\n}\n", "  $arr = array();\n  foreach ($lst\
    \ as $row) {\n    if ($x < $row[0]) {\n      // Increase index of each row by\
    \ 1, since x is greater than or equal to row[0].\n      $arr = array_merge($arr,\
    \ array_map(function ($a) use ($x) { return array($x, ++$x); }, $row));\n    }\
    \ else {\n      // Increase index of each row by 1, since x is less than row[0].\n\
    \      $arr = array_merge($arr, array_map(function ($a) use ($x) { return array($x,\
    \ ++$x); }, $row));\n    }\n  }\n  return $arr;\n}", "  $result = array();\n \
    \ foreach ($lst as $i => $row) {\n    if (is_array($row)) {\n      $result = array_merge($result,\
    \ get_row($row, $x));\n    }\n    elseif ($row == $x) {\n      $result = array(array($i,\
    \ 0));\n    }\n  }\n  return $result;\n}\n\n/**\n * Find a coordinate in the given\
    \ matrix, based on rows and columns\n * Example:\n * >>> get_coordinate(array(\n\
    \ * ... array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5,\
    \ 1)\n * ... ), 0, 0)\n * array(2, 0)\n * >>> get_coordinate(array(\n * ... array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)\n * ... ),\
    \ 0, 3)\n * array(2, 3)\n */", "  $lst = array_filter($lst);\n  $ret = array();\n\
    \  for ($i = 0, $n = count($lst); $i < $n; $i++) {\n    $lst[$i] = array_values($lst[$i]);\n\
    \  }\n  $sorted = array_multisort(array_column($lst, \"0\"), $lst);\n  $rows =\
    \ $sorted = array_column($sorted, \"0\");\n  foreach ($rows as $row) {\n    $ret\
    \ = array_merge($ret, array_intersect_key($lst[$row], array_flip($row)));\n  }\n\
    \  return $ret;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| a |>\n<code>\n<?php\n",
  "  $ret = [];\n  foreach($lst as $row) {\n    if(is_array($row) && array_search($x,\
    \ $row) !== FALSE) {\n      $ret[] = $row;\n    }\n  }\n  if(!count($ret)) {\n\
    \    return array();\n  }\n  array_multisort(array_map('array_reverse', $ret),\
    \ $ret);\n  return array_shift($ret);\n}\n", "    $result = array();\n    $n =\
    \ count($lst);\n    if ($n < 1) {\n        return array();\n    }\n    $m = count($lst[0]);\n\
    \    if ($x < 0) {\n        return array();\n    }\n    if ($x < $m) {\n     \
    \   list($x, $m) = ($m, $x);\n    }\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   foreach ($lst[$i] as $j => $val) {\n            if ($j == $x) {\n        \
    \        $result[] = array($i, $j);\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) { return $b[1] - $a[1]; });\n    usort($result, function ($a,\
    \ $b) { return $a[0] - $b[0]; });\n    return $result;\n}\n", "  $row = array();\n\
    \  $col_count = count($lst);\n  if ($col_count === 0 || $col_count > count($lst[0]))\
    \ {\n    return array();\n  }\n  $rows = array_count_values(array_map('count',\
    \ $lst));\n  $row = $rows[$x];\n  if ($row === false) {\n    return array();\n\
    \  }\n  arsort($row);\n  return array_map(function($y) use ($row, $col_count)\
    \ {\n    return array_fill(0, $col_count, $y + $row);\n  }, array_keys($row));\n\
    }\n", "    if (empty($lst)) {\n        return array();\n    }\n    // sort rows\
    \ in ascending order\n    foreach ($lst as &$row) {\n        sort($row);\n   \
    \ }\n    // sort columns in descending order\n    array_multisort(array_column($lst,\
    \ 0), SORT_DESC, $lst);\n    $row = array_search($x, array_column($lst, 0));\n\
    \    return ($row === false) ? array() : $lst[$row];\n}\n", "\tsort($lst);\n\t\
    sort($lst[0], SORT_NUMERIC);\n\t$m = count($lst);\n\t$n = count($lst[0]);\n\t\
    $nr = $lst[0][$n - 1];\n\t$res = array();\n\t$j = 0;\n\tfor ($i = 0; $i < $m;\
    \ $i++) {\n\t\tfor ($j = 0; $j < $n; $j++) {\n\t\t\tif ($lst[$i][$j] == $x) {\n\
    \t\t\t\t$res[] = array($i, $j);\n\t\t\t}\n\t\t}\n\t}\n\tsort($res);\n\tsort($res[0],\
    \ SORT_NUMERIC);\n\treturn $res;\n}", "  if (empty($lst) || empty($x)) {\n   \
    \ return array();\n  }\n  $rows = array_count_values(array_map(\n    'array_merge',\
    \ array_chunk($lst, ceil(count($lst) / float((1 + $x) / 2))), array_chunk($lst,\
    \ ceil(count($lst) / 2))\n  ));\n  krsort($rows);\n  krsort($rows[array_shift($rows)]);\
    \ // desc\n  return array_map(function ($row) use ($x) {\n    return array_map(function\
    \ ($col) use ($x) {\n      return $col + $x * $row;\n    }, array_keys($row));\n\
    \  }, array_keys($rows));\n}\n", "    $result = [];\n    $rows = array_count_values(array_map(null,\
    \ ...$lst));\n    asort($rows);\n\n    foreach ($lst as $line) {\n        $row\
    \ = $line[0];\n        if (array_key_exists($row, $rows)) {\n            $rows[$row]--;\n\
    \        }\n        $line = array_values($line);\n        $result[$row][] = $line[$x\
    \ - 1];\n    }\n    asort($result);\n    return array_reverse($result);\n}\n",
  "    foreach ($lst as $key => $row) {\n        if ($x == $key) {\n            $arr\
    \ = [];\n            foreach ($row as $k1 => $v1) {\n                $arr[] =\
    \ array(($k1 + 1), ($v1));\n            }\n            asort($arr);\n        \
    \    $arr = array_reverse($arr);\n            return $arr;\n        }\n    }\n\
    \    return array();\n}\n", "    $row = array();\n    $c = count($lst);\n    foreach\
    \ ($lst as $i => $v) {\n        if ($x === $i) {\n            $row[] = array($i,\
    \ $x);\n        } elseif ($x < $i) {\n            $row[] = array($i, $c);\n  \
    \      }\n    }\n    sort($row, SORT_NUMERIC);\n    ksort($row, SORT_NUMERIC,\
    \ 1);\n    return $row;\n}", "    $ret = [];\n    $row = 0;\n    foreach($lst\
    \ as $v) {\n        if (in_array($x, $v)) {\n            $ret[$row] = $v;\n  \
    \      }\n        $row++;\n    }\n    // Sort rows initially by rows.\n    usort($ret,\
    \ 'compareRows');\n    foreach($ret as $r) {\n        // Sort columns initially\
    \ by columns.\n        usort($r, 'compareColumns');\n    }\n    return $ret;\n\
    }\n", "    $return = array();\n    if (count($lst) == 0) {\n        return $return;\n\
    \    }\n    sort($lst);\n    $row = 0;\n    $col = 0;\n    $x = $lst[0][0];\n\
    \    foreach ($lst as $item) {\n        if ($item[0] == $x) {\n            $return[$row][]\
    \ = $col;\n        } else {\n            $row++;\n            $col = 0;\n    \
    \        $x = $item[0];\n        }\n        $col++;\n    }\n    sort($return);\n\
    \    return $return;\n}\n", "  if (!is_array($lst)) {\n    return array();\n \
    \ }\n  $result = array();\n  $rows = array_flip(array_keys($lst));\n  foreach\
    \ ($rows as $row) {\n    $col = array_flip(array_keys($lst[$row]));\n    foreach\
    \ ($col as $k => $v) { // For each column.\n      if ($x == $v) {\n        $result[]\
    \ = array($row, $k);\n      }\n    }\n  }\n  krsort($result);\n  return $result;\n\
    }\n", "    // write your code here\n    $ret = array();\n    foreach ($lst as\
    \ $item) {\n        if (is_array($item)) {\n            $ret[] = get_row($item,\
    \ 1);\n        } else {\n            $ret[] = array($x, $item);\n        }\n \
    \   }\n    \n    $ret = array_map('sort', $ret);\n    foreach ($ret as $key =>\
    \ $row) {\n        $ret[$key] = array_reverse($row);\n    }\n    \n    return\
    \ $ret;\n}\nprint_r(get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1))", "    if (empty($lst)) {\n        return\
    \ array();\n    }\n    $rows = $lst[0]; // array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1))\n    $cols = array_fill(0, count($rows),\
    \ 0); // array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n\
    \    for ($i = 0; $i < count($rows); ++$i) {\n        $cols[$i] = array_fill(0,\
    \ count($rows[$i]), 0);\n    }\n    for ($i = 0; $i < count($rows); ++$i) {\n\
    \        $row = $rows[$i];\n        for ($j = 0; $j < count($row); ++$j) {\n \
    \           if ($row[$j] === $x) {\n                $cols[$i][] = $j;\n      \
    \      }\n        }\n    }\n    asort($rows, SORT_NUMERIC);\n    asort($cols,\
    \ SORT_NUMERIC, SORT_DESC);\n    $rows = array_values($rows);\n    return array_map(function\
    \ ($item) {\n        return array_combine($item, array_values($cols[array_search($item[0],\
    \ $item)]), SORT_NUMERIC);\n    }, $rows);\n}\n", "    if (count($lst) == 0 ||\
    \ $lst[0] === array()) {\n        return array();\n    }\n    // Sort coordinates\
    \ initially by rows in ascending order.\n    $coords = array_merge(\n        array_slice($lst,\
    \ 0, -1),\n        array_slice($lst, -1)\n    );\n    uksort($coords, 'cmp');\n\
    \    $coords = array_slice($coords, 0, count($coords) - ($x == 0 ? 0 : 1));\n\
    \    uksort($coords, 'cmp');\n    foreach ($coords as $coord) {\n        // Sort\
    \ coordinates of the row by columns in descending order.\n        uksort($coord,\
    \ 'cmp');\n    }\n    return $coords;\n}\n", "  if (count($lst) <= 0) {\n    return\
    \ array();\n  }\n  $i = array_search($x, array_column($lst, 0));\n  return array(array_slice($lst,\
    \ 0, $i), array_slice($lst, $i, count($lst)));\n}\n", "  if (empty($lst)) return\
    \ array();\n  if (is_numeric($x)) return array($x, $x);\n  $row = get_row($lst[1],\
    \ $x - $lst[0][1]);\n  array_pop($lst[0]);\n  return $row;\n}\n", "  $rows = array_count_values(array_map('array_count_values',\
    \ $lst));\n  krsort($rows);\n  $results = array();\n  foreach ($rows as $column\
    \ => $count) {\n    if ($count == 0) continue;\n    $column = array_slice($column,\
    \ 0, $x);\n    $row = $lst[$column[0]];\n    array_shift($column);\n    foreach\
    \ ($column as $key) {\n      $results[] = array_slice($row, -1, $key);\n    }\n\
    \  }\n  return $results;\n}\n", "    $result = array();\n    foreach ($lst as\
    \ $row) {\n        if (in_array($x, $row)) {\n            $result[] = array(array_search($x,\
    \ $row), array_search($x, end($row)));\n        }\n    }\n    sort($result, SORT_NUMERIC);\n\
    \    sort($result, SORT_NUMERIC, SORT_DESC);\n    return array_reverse($result,\
    \ SORT_NUMERIC);\n}\n", "  $row = array();\n  foreach ($lst as $y) {\n    foreach\
    \ ($y as $z) {\n      if ($z == $x) {\n        $row[] = array($x, $z);\n     \
    \ }\n    }\n  }\n  sort($row);\n  sort($row, $DESC);\n  return $row;\n}\n", " \
    \   $rows = array();\n    for ($i = 0, $j = count($lst); $i < $j; ++$i) {\n  \
    \      if ($x === $i) {\n            $rows[] = array($i, $x);\n        }\n   \
    \ }\n    array_multisort($rows, SORT_DESC, SORT_NUMERIC, $lst);\n    return $lst;\n\
    }\n", "    $lst2 = array();\n    foreach ($lst as $row) {\n        $i = array_search($x,\
    \ $row);\n        if ($i !== false) {\n            $lst2[] = array($i, array_search($x,\
    \ array_reverse($row, $i), true));\n        }\n    }\n    sort($lst2, SORT_NUMERIC);\n\
    \    return $lst2;\n}\n\n/**\n * Sort coordinates initially by rows in ascending\
    \ order.\n * Also, sort coordinates of the row by columns in descending order.\n\
    \ * @param $lst\n * @param $x\n * @return array\n */", "    sort($lst);\n    $result\
    \ = [];\n    foreach ($lst as $row) {\n        $result[$row[0]][$row[1]][] = $x;\n\
    \    }\n    sort($result, SORT_NUMERIC, 1);\n    $result2 = [];\n    foreach ($result\
    \ as $row) {\n        ksort($row, SORT_NUMERIC, 1);\n        $result2[] = $row;\n\
    \    }\n    return $result2;\n}\n", "  $result = array();\n  $x = abs($x);\n \
    \ if ($x < 0) {\n    $x = -$x;\n  }\n  foreach ($lst as $row) {\n    $rowCount\
    \ = 0;\n    foreach ($row as $val) {\n      if ($val == $x) {\n        $result[]\
    \ = array($rowCount, $x - $rowCount);\n        $rowCount++;\n      }\n    }\n\
    \  }\n  return $result;\n}\n", "    if (empty($lst)) return array();\n    $lst\
    \ = sort($lst);\n    $n = sizeof($lst);\n    if ($x <= 0) return array();\n  \
    \  if ($x <= $n - 1) {\n        $row = array_slice($lst, 0, $x);\n        $row\
    \ = array_reverse($row);\n        array_unshift($row, 0);\n        return $row;\n\
    \    }\n}\n", "  $row = new Array();\n  foreach($lst as $row_index => $row) {\n\
    \    foreach($row as $column_index => $value) {\n      if ($value == $x) {\n \
    \       $row[$column_index] = array($row_index, $column_index);\n        break;\n\
    \      }\n    }\n  }\n  ksort($row, SORT_NUMERIC);\n  krsort($row);\n  return\
    \ $row;\n}\n", "    $rows = $columns = [];\n    foreach ($lst as $row) {\n   \
    \     $columns[] = count($row);\n        $rows[] = array_slice($row, 0, $x);\n\
    \    }\n    return $rows;\n}\n", "    if (empty($lst)) return array();\n    asort($lst);\n\
    \    $result = array();\n    $x = min($lst, $x);\n    $y = count($lst) - $x;\n\
    \    $x = max($lst, $x);\n    foreach ($lst as $i => $elem) {\n        $rslt =\
    \ array($i, 0);\n        foreach (range(0, $y) as $j) $rslt[] = $lst[$j + $i];\n\
    \        $result[] = $rslt;\n    }\n    asort($result, SORT_NUMERIC);\n    return\
    \ $result;\n}\n", "  $i = -1;\n  $rs = array();\n  foreach($lst as $v) {\n   \
    \ $i++;\n    if($x < $v[$i]) {\n      break;\n    }\n    $rs[] = array($i, $v[$i]);\n\
    \  }\n  array_multisort($rs, SORT_DESC, SORT_NUMERIC, $rs);\n  return $rs;\n}\n\
    \n$a1 = array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3,\
    \ 4, 5, 1));\n$a2 = array(array(4, 5, 6, 1, 2), array(3, 4, 5, 1, 2), array(6,\
    \ 5, 1, 2, 4));\n$a3 = array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6),\
    \ array(1, 2, 3, 4, 5, 1));\n$a4 = array(array(4, 5, 6, 1, 2), array(3, 4, 5,\
    \ 1, 2), array(6, 5, 1, 2, 4));\n\n$arr = array($a1, $a2, $a3, $a4);\n$result\
    \ = array();\nforeach($arr as $v) {\n  $result[] = get_row($v, 1);\n}\n\nprint_r($result);\n\
    </code>\n<|/ a tags=php,algorithm |>\n<| a dscore=1 tags=php,algorithm |>\nOk\
    \ i found a better solution:\n<code>", "    $rows = array_map(function ($row)\
    \ {\n        asort($row);\n        return $row;\n    }, $lst);\n    $row = array_map(function\
    \ ($column) {\n        return array_flip($column);\n    }, $rows);\n    $rows[]\
    \ = array_flip($row);\n    $column = array_flip($rows[count($rows) - 1]);\n  \
    \  if (array_search($x, $column) !== false) return array(array_search($x, $column)\
    \ + 1, array_search($x, $rows[count($rows) - 1]));\n}\n", "  // Implement here\n\
    }\n", "  if ($lst===array()) return array();\n\n  $res = array();\n  foreach ($lst\
    \ as $row) {\n    if (in_array($x, $row)) {\n      $res[] = array(array_search($x,\
    \ $row), array_search($x, end($row)));\n    }\n  }\n  usort($res, function ($a,\
    \ $b) { return $b[0]-$a[0]; });\n  return array_slice($res, 0, 1);\n}\n", "  \
    \  if (empty($lst) || empty($x)) {\n        return array();\n    }\n    $lst_x\
    \ = array();\n    $y = count($lst);\n    foreach ($lst as $i => $v) {\n      \
    \  $lst_x[$i] = array();\n        foreach ($v as $j => $vj) {\n            if\
    \ ($x == $vj) {\n                $lst_x[$i][$j] = $i;\n            }\n       \
    \ }\n    }\n    $lst_x = array_reverse($lst_x, true);\n    usort($lst_x, function\
    \ ($a, $b) use ($y) {\n        $a1 = array_keys($a, 0);\n        $b1 = array_keys($b,\
    \ 0);\n        usort($a1, function ($a2, $b2) use ($y) {\n            return $a2\
    \ - $b2;\n        });\n        usort($b1, function ($a2, $b2) use ($y) {\n   \
    \         return $a2 - $b2;\n        });\n        return $a1 - $b1;\n    });\n\
    \    $lst_x = array_reverse($lst_x, true);\n    return $lst_x;\n}\n</code>\nOutput:\n\
    <code>\nArray\n(\n    [0] => Array\n        (\n            [0] => 0\n        \
    \    [1] => 1\n            [2] => 1\n            [3] => 2\n            [4] =>\
    \ 2\n            [5] => 3\n        )\n\n    [1] => Array\n        (\n        \
    \    [0] => 1\n            [1] => 1\n            [2] => 2\n            [3] =>\
    \ 2\n            [4] => 3\n            [5] => 3\n        )\n\n    [2] => Array\n\
    \        (\n            [0] => 2\n            [1] => 2\n            [2] => 3\n\
    \            [3] => 3\n            [4] => 3\n            [5] => 3\n        )\n\
    \n    [3] => Array\n        (\n            [0] => 3\n            [1] => 3\n  \
    \          [2] => 3\n            [3] => 4\n            [4] => 4\n            [5]\
    \ => 4\n        )\n\n    [4] => Array\n        (\n            [0] => 4\n     \
    \       [1] => 4\n            [2] => 4\n            [3] => 4\n            [4]\
    \ => 5\n            [5] => 5\n        )\n\n    [5] => Array\n        (\n     \
    \       [0] => 5\n            [1] => 5\n            [2] => 5\n            [3]\
    \ => 5\n            [4] => 5\n            [5] => 5\n        )\n\n)\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't quite do what the OP asked for - it returns all\
    \ possible matches. That is, it doesn't return something like `[(1, 1), (2, 1),\
    \ (2, 2), (3, 3), (3, 3), (3, 3), (3, 3), (3, 3)]`, but just `[", "    $r = [];\n\
    \    if (count($lst) == 0) {\n        return $r;\n    }\n    $i = 0;\n    $tmp\
    \ = 0;\n    $c = 0;\n    while (count($lst) > 0) {\n        if ($lst[$i] == $x)\
    \ {\n            $tmp[$c] = $i;\n            $i++;\n            $c++;\n      \
    \  } else {\n            if ($c > 0) {\n                $tmp[$c - 1] = $tmp[$c];\n\
    \            }\n            $tmp[$c] = $i;\n            $i++;\n            $c++;\n\
    \        }\n        if (count($lst) == 0) {\n            break;\n        }\n \
    \   }\n    if (count($tmp) == 0) {\n        return $r;\n    }\n    foreach ($tmp\
    \ as $k => $v) {\n        sort($tmp);\n        sort($tmp);\n        sort($tmp);\n\
    \        sort($tmp);\n        $r[] = $tmp;\n    }\n    return $r;\n}\n", "  foreach\
    \ ($lst as &$row) {\n    foreach ($row as &$cell) {\n      if ($cell == $x) {\n\
    \        $row = array(0 => $row, 1 => $row);\n      }\n    }\n  }\n  usort($lst,\
    \ function($a, $b) use ($x) {\n    foreach ($a as $i => &$cell) {\n      if ($cell\
    \ == $x) {\n        $a[$i] = $a[$i + 1];\n        unset($a[$i + 1]);\n      }\n\
    \    }\n    foreach ($b as $i => &$cell) {\n      if ($cell == $x) {\n       \
    \ $b[$i] = $b[$i - 1];\n        unset($b[$i - 1]);\n      }\n    }\n    return\
    \ count($a) - count($b);\n  });\n  return array_filter(\n    array_map(function($row)\
    \ use ($x) {\n      return array_filter($row);\n    }, $lst),\n    function($cell)\
    \ use ($x) {\n      return $cell == $x;\n    }\n  );\n}\n", "    if (!is_array($lst))\n\
    \        return array();\n    if ($lst[0] === array())\n        return array();\n\
    \    if ($lst[0][0] === array())\n        return array();\n\n    $rows = array();\n\
    \    foreach ($lst as $lstval) {\n        if ($lstval === array()) {\n       \
    \     $rows[] = array();\n            continue;\n        }\n        $found = false;\n\
    \        foreach ($rows as $row) {\n            if (in_array($x, $row)) {\n  \
    \              $found = true;\n                break;\n            }\n       \
    \ }\n        if (! $found) {\n            $rows[] = array();\n        }\n    }\n\
    \    return $rows;\n}\n", "  $rows = array_map(function($row) use ($x) {\n   \
    \ return array_count_values($row);\n  }, $lst);\n  array_walk($rows, function(&$arr)\
    \ {\n    $arr = array_reverse($arr);\n  });\n  $rows[] = array(array($x));\n \
    \ return array_map(function($row) use ($rows) {\n    return $rows[$row[0]][count($rows[$row[0]])-1];\n\
    \  }, $rows);\n}\n</code>\n<|/ a |>\n<| c |>\nThank you very much,! I have tested\
    \ your function and it works! I will rework my function to fit your needs.\n<|/\
    \ c |>\n<| a dscore=2 |>\nBased on the excellent answer by Jason Stirling I have\
    \ written a function to return the coordinates for a given cell number in a 2d\
    \ array. The function also handles the case where there may not be any cells found\
    \ for the given cell number. \n<code>", "    $n = count($lst);\n    if ($n < 1\
    \ || $x == 0) return array();\n    $ret = array();\n    for($i = 0; $i < $n; $i++)\
    \ {\n        if ($lst[$i] == $x) {\n            $ret[] = array($i, 0);\n     \
    \   }\n    }\n    sort($ret, SORT_NUMERIC);\n    $m = count($ret);\n    for($j\
    \ = 1; $j < $m; $j++) {\n        sort($ret[$j], SORT_NUMERIC);\n    }\n    return\
    \ $ret;\n}", "    $rows = array();\n    foreach ($lst as $row) {\n        $row_x\
    \ = array_search($x, $row);\n        $row_y = array_search($x, array_reverse($row));\n\
    \        if ($row_x !== false) {\n            $rows[] = array($row_x, $row_y);\n\
    \        }\n    }\n\n    array_multisort($rows, SORT_DESC, SORT_NUMERIC, $rows);\n\
    \    return $rows;\n}\n", "  $result = array();\n  foreach($lst as $row) {\n \
    \   $row[$x] ? $result[] = array($row, 1) : $result[] = array();\n  }\n  rsort($result);\n\
    \  return $result;\n}\n", "  if (empty($lst)) {\n    return array();\n  }\n  $rows\
    \ = array();\n  ksort($lst);\n  foreach ($lst as $key => $val) {\n    $column\
    \ = 0;\n    $found = false;\n    foreach ($rows as $row) {\n      foreach ($row\
    \ as $coord) {\n        if (($coord[1] + $column) == $x) {\n          $found =\
    \ true;\n          $rows[$key][$column] = $coord;\n          break;\n        }\n\
    \      }\n      if ($found) {\n        break;\n      }\n      $column++;\n   \
    \ }\n    if (!$found) {\n      $rows[] = array($x);\n    }\n  }\n  asort($rows,\
    \ 1);\n  $rows = array_reverse($rows, 1);\n  foreach ($rows as $row) {\n    asort($row,\
    \ 1);\n  }\n  return $rows;\n}\n$arr = array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1));\necho get_row($arr, 1); // print [[0,\
    \ 1], [1, 4], [1, 0], [2, 5], [2, 0]]\necho get_row($arr, 3); // print [[2, 2]]\n\
    </code>\nI hope this helps.\n<|/ a dscore=0 |>\n<| c |>\nThis only works for even\
    \ lists unfortunately, for example get_row(array(1, 2, 3, 4, 5, 6), 1) should\
    \ return array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0)),\
    \ and not array(array(1, 0), array(2, 5), array(2, 0), array(0, 0), array(1, 4)).\n\
    <|/ c |>\n<| c |>\nThis is only a rough draft, I think you could find better ideas\
    \ to implement it. I am not really good at php, but I think you can figure it\
    \ out.\n<|/ c |>\n<| c |>\nI added the test cases to the original question that\
    \ I think are correct based on what I think you're saying.\n<|/ c |>\n<| a |>\n\
    You cannot use array_search() to do that because that function works on linear\
    \ arrays. To find the value with array_search(), you must first sort the array,\
    \ then use the value in that index to find the value. To sort, you can use the\
    \ function usort(), which works with multi-dimensional arrays.\n<code>\nusort($array,\
    \ function($a, $b) {\n    return $a[1] - $b[1];\n});\n", "    $i = null;\n   \
    \ $arr = array();\n    $row_sort = array();\n    $cols_sort = array();\n    $row_count\
    \ = count($lst);\n    $col_count = count($lst[0]);\n    $col = 0;\n    for ($r\
    \ = 0; $r < $row_count; $r++) {\n        $row = 0;\n        for ($c = 0; $c <\
    \ $col_count; $c++) {\n            if ($lst[$r][$c] == $x) {\n               \
    \ $cols_sort[$c] = $col;\n                $row_sort[$r] = $row;\n            \
    \    $arr[] = array($r, $c);\n            }\n            $row++;\n        }\n\
    \        $col++;\n    }\n    asort($cols_sort);\n    arsort($row_sort);\n    for\
    \ ($r = 0; $r < $row_count; $r++) {\n        $row = $row_sort[$r];\n        for\
    \ ($c = 0; $c < $col_count; $c++) {\n            if ($cols_sort[$c] == $col) {\n\
    \                $arr[] = array($r, $cols_sort[$c]);\n            }\n        }\n\
    \    }\n    return $arr;\n}", "    $result = array();\n    $lst_size = count($lst);\n\
    \    if ($lst_size == 0) {\n        return array();\n    }\n\n    $sorted_rows\
    \ = get_sorted_rows($lst);\n    $rows = array_values($sorted_rows);\n    $col_length\
    \ = count($rows[0]);\n    $x = intval($x);\n    foreach($rows as $row) {\n   \
    \     $row_length = count($row);\n        $column = 0;\n        while($x < $row_length)\
    \ {\n            $result[] = array($row, $column);\n            $x++;\n      \
    \      $column++;\n        }\n    }\n\n    sort($result);\n\n    return $result;\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\nHere is a solution using array_filter\
    \ and array_map functions:\n<code>", "  $n = count($lst);\n  if ($n < 1 || $x\
    \ == 0) { return array(); }\n  $m = count($lst[0]);\n  $coord = array();\n  $j\
    \ = -1;\n  for ($i = 0; $i < $m; ++$i) {\n    do {\n      $coord[$j]['row'] =\
    \ $i + 1;\n      $coord[$j]['col'] = $j + 1;\n      $j += ($j + $n) % $n;\n  \
    \  } while ($j != 0);\n  }\n  sort($coord);\n  $result = [];\n  foreach ($coord\
    \ as $c) {\n    $result[] = [$x + $c['row'], $c['col']];\n  }\n  return $result;\n\
    }", "  $coords = array();\n  foreach ($lst as $i => $row) {\n    $row_sorted =\
    \ array_map(function ($column) use ($x) {\n      return $column == $x ? $i : 0;\n\
    \    }, $row);\n    $row_sorted = array_reverse($row_sorted);\n    foreach ($row_sorted\
    \ as $j) $coords[] = array_merge(array($i), $row_sorted);\n  }\n  usort($coords,\
    \ function ($a, $b) use ($coords) {\n    if ($a[1] == $b[1]) {\n      $a2 = $b[2]\
    \ ? $b[1] : 0;\n      return $a2 < $a[1] ? 1 : -1;\n    }\n    return $a[1] <\
    \ $b[1] ? 1 : -1;\n  });\n  return $coords;\n}\n", "  $rows = array_slice($lst,\
    \ 0, count($lst) - 1, true);\n  return $rows[$x];\n}\n", "\tforeach($lst as $row)\
    \ {\n\t\tif(in_array($x, $row)) {\n\t\t\treturn $row;\n\t\t}\n\t}\n\treturn array();\n\
    }", "  return array_map(function ($row) use ($x) {\n    $r = array();\n    foreach\
    \ ($row as $key => $val) {\n      if ($val == $x) {\n        $r[] = array($key\
    \ + 1, $key + 1);\n      }\n    }\n    return $r;\n  }, $lst);\n}\n", "  return\
    \ array_intersect_key($lst, array_flip(array_column($lst, $x)));\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nIt works well on small arrays (10 elements), but I\
    \ couldn't run your example for larger arrays (>1000 elements).\n<|/ c |>\n<|\
    \ c |>\nYes, It fails on large arrays (10000 elements)\n<|/ c |>\n<| c |>\n, I\
    \ have updated my answer with a solution which can deal with large arrays as well\
    \ as small ones.\n<|/ c |>\n<| c |>\nI really appreciate your effort to help me\
    \ but you didn't understood my question. My array is always 2D, and I want to\
    \ return array of arrays, where each array has two elements - (row, column), starting\
    \ from 0. It works well for smaller arrays, but, as I mentioned, it doesn't work\
    \ for arrays with 10000 elements and more.\n<|/ c |>\n<| c |>\n, I have added\
    \ a solution which can deal with large arrays as well as small ones. Please check.\n\
    <|/ c |>\n<| a tags=arrays,php,multidimensional-array |>\nI wrote a small class\
    \ (PHP5 >= 5.3) that implements two methods based on \"array_multisort\" algorithm\
    \ (see PHP manual here). The \"array_multisort\" algorithm sorts arrays based\
    \ on a comparison function, that receives 2 parameters: the first is compared\
    \ against the second. The comparison function can be a function of one or more\
    \ than one parameters, but the 2 parameters must be compatible for the comparison\
    \ to work.\nThe \"compare\" method receives an array (of arrays) and an \"index\"\
    \ parameter, that will determine the comparison of the elements of the \"index\"\
    \ sub-array to the elements of the \"array\" parameter. In this way, the algorithm\
    \ sorts the arrays in \"array\" based on the \"index\" sub-array.\nHere's the\
    \ code:\n<code>\n<?php\n", "  $arr = [];\n  if (!$lst) return $arr;\n  foreach\
    \ ($lst as $row) {\n    foreach ($row as $i => $val) {\n      if ($val === $x)\
    \ {\n        $arr[] = [$i, $i];\n      }\n    }\n  }\n  array_multisort($arr,\
    \ SORT_DESC, SORT_NUMERIC, $arr);\n  return $arr;\n}\n", "    if (empty($lst))\
    \ {\n        return array();\n    }\n    $y = array();\n    // sort in ascending\
    \ order\n    usort($lst, function ($a, $b) { return $a - $b; });\n    foreach\
    \ ($lst as $key => $val) {\n        $y[] = $key + 1;\n    }\n    usort($y, function\
    \ ($a, $b) { return $a - $b; });\n\n    // find x coordinate\n    $x = 0;\n  \
    \  while ($x < count($y) && $y[$x] <= $x) {\n        $x++;\n    }\n\n    // find\
    \ coordinates of x row\n    $row = array();\n    for ($i = 0; $i < count($y);\
    \ $i++) {\n        $row[] = array();\n        for ($j = 0; $j < $x; $j++) {\n\
    \            $row[$i][$j] = $y + $i + $j;\n        }\n    }\n\n    // find coordinates\
    \ of x column\n    $col = array();\n    for ($i = 0; $i < $x; $i++) {\n      \
    \  $col[] = array();\n        for ($j = 0; $j < count($y); $j++) {\n         \
    \   $col[$i][$j] = $y + $j + $i;\n        }\n    }\n\n    return array_merge(array_merge($row,\
    \ array_flip($row)), $col);\n}\n</code>\n<|/ a tags=php,multidimensional-array\
    \ dscore=1 |>\n<| a tags=php,multidimensional-array |>\n<code>\n$array = array();\n\
    $array[0]=array(\"a\",\"b\",\"c\",\"d\");\n$array[1]=array(\"e\",\"f\",\"g\",\"\
    h\");\n$array[2]=array(\"i\",\"j\",\"k\",\"l\");\n$array[3]=array(\"m\",\"n\"\
    ,\"o\",\"p\");\n", "    return array_map(function ($y) use ($x) {\n        return\
    \ array((int)$y, (int)$x);\n    }, array_values($lst));\n}\n", "  $result = array();\n\
    \  $x_counter = 1;\n  foreach ($lst as $row) {\n    if ($x == $x_counter) {\n\
    \      $result[] = array($row, array_flip($row));\n      $x_counter++;\n     \
    \ continue;\n    }\n    foreach ($row as $key => $value) {\n      if ($value ==\
    \ $x) {\n        $result[] = array($row, $key);\n        $x_counter++;\n     \
    \   break;\n      }\n    }\n  }\n\n  ksort($result);\n  array_multisort($result[1],\
    \ SORT_DESC, $result);\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| c |>\nThanks for your suggestion,. I've added some explanation\
    \ to my answer, hope it helps.\n<|/ c |>\n<| a |>\nI made a version for PHP >=\
    \ 5.5.0:\n<code>\n<?php\n$array = [\n    0 => [\n        0 => 1,\n        1 =>\
    \ 2,\n        2 => 3,\n        3 => 4,\n        4 => 5,\n        5 => 6,\n   \
    \ ],\n    1 => [\n        0 => 1,\n        1 => 2,\n        2 => 3,\n        3\
    \ => 4,\n        4 => 5,\n        5 => 6,\n    ],\n    2 => [\n        0 => 1,\n\
    \        1 => 2,\n        2 => 3,\n        3 => 4,\n        4 => 5,\n        5\
    \ => 6,\n    ],\n    3 => [\n        0 => 1,\n        1 => 2,\n        2 => 3,\n\
    \        3 => 4,\n        4 => 5,\n        5 => 6,\n    ],\n    4 => [\n     \
    \   0 => 1,\n        1 => 2,\n        2 => 3,\n        3 => 4,\n        4 => 5,\n\
    \        5 => 6,\n    ],\n    5 => [\n        0 => 1,\n        1 => 2,\n     \
    \   2 => 3,\n        3 => 4,\n        4 => 5,\n        5 => 6,\n    ],\n];\n\n\
    $key = 5; // the key you want to search\n$array = array_filter(\n    array_map(\n\
    \        function($a) use ($key) {\n            $a = array_filter($a);\n     \
    \       return $a && in_array($key, $a, true);\n        },\n        $array\n \
    \   )\n);\n</code>\nThe array $array is your original array.\n", "    $rows =\
    \ [];\n    $m = count($lst);\n    for ($y = 0; $y < $m; $y++) {\n        $rows[$y]\
    \ = [];\n        $l = count($lst[$y]);\n        for ($x = 0; $x < $l; $x++) {\n\
    \            if ($x == 0) {\n                $rows[$y][0] = 0;\n            }\
    \ else {\n                $rows[$y][$x - 1] = $lst[$y][$x - 1];\n            }\n\
    \        }\n    }\n    $rows[count($rows) - 1][$x] = $x;\n\n    // Sort by rows\
    \ and columns initially ascending.\n    usort($rows, function($a, $b) {\n    \
    \    return strcmp($a[0], $b[0]);\n    });\n\n    usort($rows, function($a, $b)\
    \ {\n        return strcmp($a[$x], $b[$x]);\n    });\n\n    // Sort by rows and\
    \ columns initially descending\n    for ($y = count($rows) - 1; $y >= 0; $y--)\
    \ {\n        usort($rows[$y], function($a, $b) {\n            return strcmp($a[$x],\
    \ $b[$x]);\n        });\n    }\n\n    return $rows;\n}\n", "  foreach ($lst as\
    \ $key => $row) {\n    $found = 0;\n    foreach ($row as $column) {\n      if\
    \ ($column === $x) {\n        return array($key, $key);\n      }\n      if ($column\
    \ < $x) {\n        $found++;\n      }\n    }\n  }\n  return array();\n}\n", " \
    \   return array_filter(\n        array_map(\n            function ($row) {\n\
    \                sort($row);\n                array_multisort(array_reverse(array_column($row,\
    \ 0)), $row);\n                return $row;\n            },\n            array_chunk(array_map(function\
    \ ($row) {\n                return $row ? array($row[0], $row[1]) : array();\n\
    \            }, $lst), $x)\n    );\n}\n", "    $row = 0;\n    $res = array();\n\
    \    foreach ($lst as $row) {\n        $res = array_merge($res, get_col($row,\
    \ $x));\n    }\n    return sort($res);\n}\n\n/**\n * Get column - return an array\
    \ of column coordinates.\n * @param array $row\n * @param mixed $x\n * @return\
    \ array\n */", "    if (!$lst) {\n        return array();\n    }\n    $row = array();\n\
    \    foreach ($lst as $elem) {\n        $key = array_search($x, $elem);\n    \
    \    if ($key !== false) {\n            $row[] = array($key, array_search($x,\
    \ $elem) + 1);\n        }\n    }\n    usort($row, function ($a, $b) {\n      \
    \  if ($a[0] < $b[0]) {\n            return 1;\n        }\n        return -1;\n\
    \    });\n    return $row;\n}\n\n/**\n * Return substring from $start index to\
    \ $end index\n * and cut this substring from given string.\n * @param string $str\
    \ Original string.\n * @param int $start Start index.\n * @param int $end End\
    \ index.\n * @return string Substring.\n */", "  $m = count($lst);\n  $n = count($lst[0]);\n\
    \  $rows = array();\n  for ($i = 0; $i < $n; $i++) {\n    $rows[$i] = array();\n\
    \  }\n  for ($i = 0; $i < $m; $i++) {\n    for ($j = 0; $j < $n; $j++) {\n   \
    \   if ($j > 0) {\n        $rows[$i][$j] = $lst[$i][$j - 1];\n      }\n      if\
    \ ($x == $lst[$i][$j]) {\n        $rows[$i][$j][] = $j;\n      }\n    }\n  }\n\
    \  krsort($rows);\n  return $rows;\n}", "    $result = array();\n    $i = -1;\n\
    \    foreach ($lst as $row) {\n        $i++;\n        foreach ($row as $j => $val)\
    \ {\n            if ($j === $x) {\n                $result[] = array($i, $x);\n\
    \                break;\n            }\n        }\n    }\n    return $result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nCan you elaborate on what this piece of code does/how\
    \ it does it? I'd like to understand this better\n<|/ c |>\n<| a tags=php,matrix\
    \ dscore=0 |>\nI hope this helps:\n<code>\n<?php \n    function getCoordinates($data,\
    \ $value)\n    {\n        $x = array();\n        foreach ($data as $row) {\n \
    \           $x[] = $row;\n        }\n        $x[$value][] = $value;\n\n      \
    \  ksort($x);\n        foreach ($x as $row) {\n            ksort($row);\n    \
    \    }\n\n        $result = array();\n        foreach ($x as $row) {\n       \
    \     foreach ($row as $c) {\n                $result[] = array($c, $row);\n \
    \           }\n        }\n\n        ksort($result);\n        return $result; \n\
    \    }", "    return array_map(function ($row) use ($x) {\n        return array_slice($row,\
    \ array_search($x, $row));\n    }, $lst);\n}\n\n/**\n * @brief Find minimum value\
    \ in a row of a 2D array\n *\n * @param array $arr 2D array\n * @param integer\
    \ $i row index\n *\n * @return integer minimum value of arr row $i\n *\n * @precondition:\
    \ $arr is an array of arrays, where each row is associative, e.g. array(array('a'\
    \ => 1, 'b' => 2), ...)\n *\n * @postcondition: returns minimum value of arr row\
    \ $i\n */", "  $rows = array_values(array_filter($lst));\n  $cols = array_map(function($row)\
    \ {\n    return array_fill(0, count($row), $row);\n  }, $rows);\n  $rows = array_map(function($row)\
    \ {\n    return array_map('intval', $row);\n  }, $rows);\n  usort($cols, 'cmp');\n\
    \  $row = array_search($x, $cols);\n  return $rows[$row];\n}\n", "    $lst = sort($lst);\n\
    \    for($i = 0; $i < count($lst); $i++) {\n        $lst[$i][$i] = $x;\n    }\n\
    \    $lst = array_reverse($lst);\n    return $lst;\n}\n", "    $result = array();\n\
    \    if (count($lst) == 0) {\n        return array();\n    }\n    $n = count($lst[0]);\
    \ // columns in each row\n    $m = count($lst); // rows\n    $m = $m > $n ? $m\
    \ : $n;\n    // fill each row with 0 initially\n    for ($i = 0; $i < $m; $i++)\
    \ {\n        $result[$i] = array();\n    }\n    // first sort row coordinates\
    \ by rows in ascending order\n    usort($result, function ($a, $b) {\n       \
    \ return $a[0] - $b[0];\n    });\n    // second sort each row coordinates by columns\
    \ in descending order\n    usort($result, function ($a, $b) {\n        $c = count($a)\
    \ - count($b);\n        if ($c > 0) {\n            return -($a < $b);\n      \
    \  }\n        return $a - $b;\n    });\n    $row = array();\n    $y = array_search($x,\
    \ $result);\n    if ($y != 0) {\n        $row = array_slice($result, 0, $y);\n\
    \    }\n    return $row;\n}\n", "  $n = count($lst);\n  $m = count($lst[0]);\n\
    \  while ($n > 0 && $x != $m) {\n    $m--;\n    $n--;\n  }\n  $i = $n - 1;\n \
    \ $ret = [];\n  while ($i > -1 && $x != $m) {\n    $ret[] = [$i, $m];\n    $i--;\n\
    \    $m--;\n  }\n  while ($i > -1 && $x == $m) {\n    $ret[] = [$i, $x];\n   \
    \ $i--;\n    $x--;\n  }\n  return $ret;\n}\n", "  if (is_array($lst) && is_numeric($x))\
    \ {\n    if (count($lst) > 0) {\n      $x = $x - 1;\n      $result = [];\n   \
    \   foreach ($lst as $row) {\n        $result[$row[0]][$row[1]] = $x;\n      }\n\
    \      array_multisort(array_column($result, '0'), SORT_DESC, array_column($result,\
    \ '1'), SORT_ASC, $result);\n      return $result;\n    }\n  }\n}\n", "  $rows\
    \ = array();\n  foreach ($lst as $row) {\n    $coords = get_coords($row, $x);\n\
    \    $r = $coords;\n    if (count($coords) > 0) {\n      $r[] = array(0, count($coords)\
    \ - 1);\n    }\n    $rows[] = $r;\n  }\n  krsort($rows);\n  return $rows;\n}\n",
  "  if (empty($lst)) return array();\n  $rows = array_count_values(array_map('count',\
    \ $lst));\n  arsort($rows);\n  $res = array();\n  foreach ($rows as $r => $c)\
    \ {\n    foreach ($lst as $i => $row) {\n      if ($x == $i) $res[] = array($r,\
    \ $c - $r);\n    }\n  }\n  return $res;\n}\n", "    $res = array();\n    if (!is_array($lst))\
    \ return;\n    foreach ($lst as $row) {\n        $res[] = array_slice($row, 0,\
    \ $x, true);\n    }\n    array_multisort($res, SORT_DESC, SORT_NUMERIC, $lst);\n\
    \    return $res;\n}\n", "    $coords = array_map(function($col) use ($x) {\n\
    \        return array_map(function($row) use ($x) {\n            return array($row\
    \ <= $x ? $row : array());\n        }, $col);\n    }, $lst);\n    arsort($coords);\n\
    \    arsort($coords[0], SORT_NATURAL | SORT_FLAG_CASE);\n\n    $result = array();\n\
    \    foreach ($coords as $row) {\n        $result = array_merge($result, array_slice($row,\
    \ 0, $x));\n    }\n    return $result;\n}\n", "    $rows = [];\n    $row = [];\n\
    \    $row_len = 0;\n    $col_len = 0;\n    foreach ($lst as $item) {\n       \
    \ if ($col_len > 0) {\n            $row[$col_len - 1] = $item;\n            $col_len--;\n\
    \        } else {\n            if ($row_len == 0) {\n                $row[0] =\
    \ $item;\n                $row_len++;\n                $col_len = count($row);\n\
    \                $rows[] = $row;\n            } else {\n                $rows[$row_len]\
    \ = $row;\n                $row_len++;\n                $col_len = count($row);\n\
    \                $row = [];\n            }\n        }\n    }\n    return $rows;\n\
    }\n", "    $result = [];\n    foreach ($lst as $row) {\n        $row_result =\
    \ [];\n        $col_result = [];\n        foreach ($row as $column) {\n      \
    \      if ($column == $x) {\n                $row_result[] = $column;\n      \
    \          $col_result[] = $row;\n            }\n        }\n        $result[]\
    \ = array($col_result, array_reverse($row_result));\n    }\n    sort($result);\n\
    \    sort($result[0], SORT_NUMERIC);\n    return $result;\n}\n", "    $n = count($lst)\
    \ - 1;\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $temp\
    \ = $lst[$i];\n        $found = false;\n        for ($j = 0; $j < $n; $j++) {\n\
    \            if ($temp[$j] == $x) {\n                $result[] = array($i, $j);\n\
    \                $found = true;\n                break;\n            }\n     \
    \   }\n        if (!$found) {\n            for ($j = 0; $j < $n; $j++) {\n   \
    \             if ($j == $i) {\n                    $result[] = array($i, $j);\n\
    \                }\n            }\n        }\n    }\n    sort($result, SORT_NUMERIC);\n\
    \    sort($result[$n], SORT_NUMERIC);\n    return $result;\n}\n", "    $rows =\
    \ array();\n    $cols = array();\n    foreach ($lst as $i => $sublst) {\n    \
    \    $column = 0;\n        foreach ($sublst as $j => $val) {\n            if ($val\
    \ == $x) {\n                $rows[] = array($i, $j);\n                $cols[]\
    \ = $column;\n            }\n            $column++;\n        }\n    }\n    ksort($rows);\n\
    \    ksort($cols);\n    $rows = array_reverse($rows);\n    $cols = array_reverse($cols);\n\
    \    foreach ($rows as $i => $j) {\n        $row = array();\n        $rows[$i]\
    \ = $row;\n        $rows[$i][$j] = $x;\n        $cols = array_reverse($cols);\n\
    \        foreach ($cols as $j => $c) {\n            $rows[$i][$j] = $c;\n    \
    \    }\n    }\n    return $rows;\n}\n", "    $ret = array();\n    foreach ($lst\
    \ as $k => $v) {\n        if ($v == $x) {\n            $ret[] = array(0, $k);\n\
    \            $ret[] = array($k, $k);\n        }\n    }\n    usort($ret, 'cmp');\n\
    \    return $ret;\n}\n", "    $row_arr = array();\n    foreach ($lst as $row)\
    \ {\n        foreach ($row as $k => $v) {\n            if ($v == $x) {\n     \
    \           $row_arr[] = array($k, $k);\n            }\n        }\n    }\n   \
    \ if (count($row_arr) == 0) {\n        return array();\n    }\n    sort($row_arr,\
    \ SORT_NUMERIC);\n    foreach ($row_arr as $row) {\n        sort($row, SORT_NUMERIC);\n\
    \    }\n    return $row_arr;\n}\n</code>\n<|/ a dscore=1 tags=arrays,php,sorting\
    \ |>\n<| c |>\nI still get the same output as the example input provided.\n<|/\
    \ c |>\n<| c |>\nHmm, weird. Could you test with the test examples I gave you?\n\
    <|/ c |>\n<| c |>\nThe `get_row()` function seems to return incorrect results,\
    \ especially when I try to input a row that doesn't have 6 elements. I'm not sure\
    \ why.\n<|/ c |>\n<| c |>\nIt does for me now, and I'll take another look.\n<|/\
    \ c |>\n<| c |>\nI added comments to the code, and tested with 3 examples. The\
    \ first example is correct, the second isn't.\n<|/ c |>\n<| a dscore=0 |>\nThe\
    \ array_search() function (http://php.net/manual/en/function.array-search.php)\
    \ would help you.\n<code>", "    $nrows = count($lst);\n    for ($row = 0; $row\
    \ < $nrows; $row++) {\n        $lst[$row] = array_slice($lst[$row], 0, $x);\n\
    \    }\n    foreach ($lst as $k => &$v) {\n        sort($v);\n    }\n    return\
    \ array_map(function($arr) {\n        sort($arr);\n        return $arr;\n    },\
    \ $lst);\n}\n", "\tfor($i = 0, $m = count($lst); $i < $m; $i++) {\n\t\t$row =\
    \ array();\n\t\t$row_length = count($row);\n\t\tfor($j = $row_length - 1, $k =\
    \ count($lst[$i]); $j >= 0; $j--, $k--) {\n\t\t\tif($lst[$i][$j] === $x) {\n\t\
    \t\t\t$row[$j] = $k;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tarray_multisort($row,\
    \ SORT_DESC, $lst[$i]);\n\t\treturn $lst[$i];\n\t}\n\treturn array();\n}", " \
    \   $out = array();\n    foreach($lst as $row) {\n        $out[] = array_slice($row,\
    \ 0, $x);\n    }\n    sort($out);\n    array_multisort(array_reverse($out), SORT_DESC,\
    \ $out);\n    return $out;\n}\n", "    if (empty($lst)) return array();\n    $rr\
    \ = array();\n    foreach ($lst as $i => $row) {\n        $rr = array_merge($rr,\
    \ array_slice($row, 0, $x));\n        $rr = array_merge($rr, array_slice($row,\
    \ $x));\n    }\n    array_multisort($rr, SORT_DESC, SORT_NUMERIC, $rr);\n    return\
    \ $rr;\n}\n", "  // Your code here\n  $rows = $lst[0];\n  $cols = array_slice($lst,1);\n\
    \  $row = 0;\n  $cols = array_reverse($cols);\n  foreach($cols as $col){\n   \
    \ foreach($row as $k => $val){\n      if($val == $x){\n        return array_merge(array($row),\
    \ $col);\n      }\n    }\n    $row++;\n  }\n}\nprint_r(get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1))\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nWhy do you need to reverse the columns?\n<|/ c |>\n\
    <| c |>\nbecause it is required to get the highest value in each row of the matrix\
    \ (rows are ordered from left to right), and the array returned will contain the\
    \ highest values on each row. if you have this array: `(array(array(3, 2, 3),\
    \ array(4, 3, 2), array(3, 4, 5))`, then your function will return `array(array(3,\
    \ 2), array(4, 3), array(4, 5))` - that is why the code is reversed.\n<|/ c |>\n\
    <| c |>\nThe reverse is necessary because arrays are ordered from left to right,\
    \ and because your task is to find the highest value in each row (from left to\
    \ right). Therefore the highest value for each row is first in each array in the\
    \ array. So if you reverse the columns, the highest value for each row is first\
    \ in each array in the array, and so you will find the highest value for each\
    \ row.\n<|/ c |>\n<| c |>\nI appreciate your detailed explanation. Thank you.\n\
    <|/ c |>\n<| a tags=php,algorithm |>\nI came across a similar problem.\nI used\
    \ the PHP array function, sort to sort the rows of the matrix and then I used\
    \ the PHP array function, arsort to sort the columns of the matrix. This gave\
    \ me a matrix with the highest value in each row at the top.\n<code>\n<?php\n",
  "  if (count($lst) === 0) {\n    return array();\n  }\n\n  $lst = sort($lst);\n\
    \  for ($i = 0; $i < count($lst); $i++) {\n    $row = $lst[$i];\n\n    $col =\
    \ 0;\n    $res = array();\n    while ($row !== array() && !($col <= $x)) {\n \
    \     $res[] = array_shift($row);\n      $col++;\n    }\n    return $res;\n  }\n\
    \  return array();\n}\n\n/*\n * Given a 2 dimensional data, as a nested arrays,\n\
    \ * which is similar to matrix, however, unlike matrices,\n * each row may contain\
    \ a different number of columns.\n * Sort coordinates initially by columns in\
    \ descending order.\n * Also, sort coordinates of the column by rows in ascending\
    \ order.\n * Examples:", "    if (empty($lst)) {\n        return array();\n  \
    \  }\n\n    $rows = array_count_values(array_map(function($i) {return count($i);},\
    \ $lst));\n    arsort($rows);\n\n    $row = array();\n\n    foreach ($rows as\
    \ $k => $v) {\n        if ($v == $x) {\n            $row = array(array_slice($lst,\
    \ 0, $k));\n            break;\n        }\n    }\n\n    return $row;\n}\n", " \
    \   foreach($lst as $row) {\n        $r = array();\n        foreach($row as $col)\
    \ {\n            if ($col == $x) {\n                $r[] = array(count($row) -\
    \ 1, $col);\n            }\n        }\n        ksort($r);\n        return $r;\n\
    \    }\n}\n", "    $result = [];\n    $y = 0;\n    $x = 0;\n    while ($x < count($lst))\
    \ {\n        $y = $y + count($lst[$x]);\n        $x = $x + 1;\n    }\n    while\
    \ ($y >= 0) {\n        $result[$y] = array();\n        $x = $y;\n        while\
    \ ($x < count($lst)) {\n            $result[$y][$x] = $lst[$x][$y];\n        \
    \    $x = $x + 1;\n        }\n        $y = $y - 1;\n    }\n    arsort($result,\
    \ SORT_NUMERIC);\n    return $result;\n}\n", "  $x = array_search($x, array_column($lst,\
    \ 'row'));\n  $result = array();\n  $rows = array_column($lst, 'row');\n  $cols\
    \ = array_column($lst, 'col');\n  foreach ($rows as $k => $row) {\n    foreach\
    \ ($cols as $j => $col) {\n      if ($row == $k) {\n        $result[] = array($k,\
    \ $j);\n      }\n    }\n  }\n  return $result;\n}\n", "    if (count($lst) ==\
    \ 0) return array();\n\n    // Sort coordinates in ascending order\n    arsort($lst);\n\
    \n    // Sort coordinates of each row by columns in descending order\n    foreach\
    \ ($lst as $lsts) {\n        arsort($lsts);\n    }\n\n    $res = array();\n  \
    \  $i = count($lst) - 1;\n    while (--$i >= 0) {\n        $tmp = $lst[$i];\n\
    \        $tmpkey = array_slice($tmp, 0, count($tmp) - 1);\n        $res[] = array($tmpkey,\
    \ array_slice($tmp, 1, count($tmp) - 1));\n    }\n\n    return $res[$i] == null\
    \ ? array() : $res[$i];\n}\n", "  $res = array();\n  $m = count($lst);\n  foreach\
    \ ($lst as $i => $e) {\n    if ($i == $x) return array($i, $e);\n    if (count($e)\
    \ < $m) $m2 = count($e);\n    else $m2 = $m;\n    foreach (range($x, $m2) as $j)\
    \ $res[] = $e;\n  }\n  return $res;\n}\n", "    $i = count($lst) - 1;\n    $rows\
    \ = array();\n    foreach ($lst as $row) {\n        foreach ($row as $column)\
    \ {\n            if ($column == $x) {\n                $rows[] = array($i, $column);\n\
    \                break;\n            }\n        }\n        $i--;\n    }\n    $rows\
    \ = array_reverse($rows);\n    foreach ($rows as $row) {\n        $rows[] = array($row,\
    \ $i);\n    }\n    return $rows;\n}\n", "  if (!is_array($lst)) {\n    return\
    \ array();\n  }\n  $nrows = count($lst);\n  $result = array();\n  array_walk($lst,\
    \ function($row) use (&$result, $x, $nrows) {\n    array_walk($row, function($col)\
    \ use (&$result, $x, $nrows) {\n      if ($col == $x) {\n        $result[] = array(0,\
    \ $nrows - 1);\n      }\n    });\n  });\n  return $result;\n}\n", "  if (empty($lst))\
    \ return array();\n  // Get each row\n  $rows = array_chunk($lst, count($lst[0]));\n\
    \  // Sort by row\n  rsort($rows);\n  // Sort each row by column\n  foreach($rows\
    \ as $row) {\n    // Sort by column\n    rsort($row);\n  }\n  // Return matching\
    \ rows\n  foreach($rows as $row) {\n    if (in_array($x, $row)) {\n      $ret\
    \ = array_map(function($x) {return array(0, count($lst[0]) - 1 - $x);}, array_keys($row));\n\
    \      return $ret;\n    }\n  }\n  return array();\n}\n", "    $rows = array();\n\
    \    $column = 0;\n    $rows = array();\n\n    foreach($lst as $row) {\n     \
    \   $column = 0;\n        foreach($row as $val) {\n            if($val === $x)\
    \ {\n                $rows[] = array($row, $column);\n            }\n        \
    \    $column++;\n        }\n        $rows[] = $row;\n    }\n\n    array_multisort($columns,\
    \ SORT_DESC, $rows, SORT_ASC, $rows);\n    return $rows;\n}\n", "  $rows = [];\n\
    \  $last_row = 0;\n  for ($i = 0; $i < count($lst); $i++) {\n    if ($lst[$i]\
    \ == $x) {\n      $rows[$i] = [];\n      for ($j = 0; $j < count($lst); $j++)\
    \ {\n        if ($last_row == 0) {\n          $rows[$i][] = $j;\n        } else\
    \ if ($lst[$j] > $lst[$last_row]) {\n          $rows[$i][] = $j;\n          break;\n\
    \        }\n        $last_row = $j;\n      }\n      $rows[$i][] = $i;\n    }\n\
    \  }\n  usort($rows, function($a, $b) {\n    return array_reverse($a) - array_reverse($b);\n\
    \  });\n  return $rows;\n}\n", "    sort($lst);\n    foreach ($lst as $row) {\n\
    \        sort($row);\n        if ($x == $row[0]) {\n            $result[] = array($row[0],\
    \ array_pop($row));\n        }\n    }\n    return $result;\n}\n", "    $row_of_x\
    \ = array_flip($lst);\n    $row_of_x[$x] = array();\n    foreach($row_of_x as\
    \ $row) {\n        $row_of_x[$row] = array_reverse($row, true);\n    }\n    array_multisort($row_of_x[$x],\
    \ SORT_DESC, $row_of_x);\n\n    foreach($row_of_x as $row) {\n        $rows[]\
    \ = $row;\n    }\n\n    return $rows;\n}\n</code>\n<|/ a tags=php,coordinates,matrix,arrays,multidimensional-array\
    \ |>\n<| a dscore=1 tags=php,coordinates,matrix,arrays,multidimensional-array\
    \ |>\nI wanted to post the method I used based on Robert's answer. I didn't like\
    \ the idea of creating a new multidimensional array to hold the values because\
    \ this was creating memory issues. So, I simply had to reference the original\
    \ array, find the coordinates in the original array, then rebuild the array with\
    \ the correct coordinates. Hopefully this will help someone else down the road.\n\
    <code>\npublic function findCoordinates($array, $x, $y)\n{\n    //Get the original\
    \ array from the passed multidimensional array\n    $array = $this->array;\n\n\
    \    //Get a reference to the original array so we don't end up creating a new\
    \ multidimensional array for each iteration\n    $array = $array;\n\n    //Set\
    \ a variable to hold the row of the original array to be referenced in $x\n  \
    \  $row_of_x = $array[$x];\n\n    //Set a variable to hold the column of the original\
    \ array to be referenced in $y\n    $column_of_y = $row_of_x[$y];\n\n    //Set\
    \ a variable to hold coordinates to be returned\n    $coordinates = array();\n\
    \n    //Set the first row and column to be returned to 0\n    $coordinates[0]\
    \ = 0;\n    $coordinates[1] = 0;\n\n    //Loop through all rows and columns to\
    \ check against the passed x and y\n    foreach($row_of_x as $row) {\n       \
    \ //Loop through the current row\n        foreach($row as $column) {\n       \
    \     //If any of the coordinates are the same as the passed x and y\n       \
    \     if($column == $x && $row == $y) {\n                //Store the coordinates\
    \ inside the $coordinates array\n                $coordinates[] = array($column,\
    \ $row);\n            }\n        }\n    }\n\n    //Return the coordinates\n  \
    \  return $coordinates;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nThis is not the\
    \ best solution but it will work and I think it will help you get started :)\n\
    <code>", "    $ret = array();\n    foreach ($lst as $key => $row) {\n        $ret[]\
    \ = array($key, array_search($x, $row));\n    }\n    sort($ret);\n    sort($ret,\
    \ SORT_NUMERIC, 1);\n    return $ret;\n}\n", "    $rows = array();\n    $cols\
    \ = array();\n    for($i = 0, $len = count($lst); $i < $len; $i++) {\n       \
    \ $rows[$i] = array();\n        foreach($lst[$i] as $j => $e) {\n            if($j\
    \ == $x) {\n                $rows[$i][] = $j;\n            }\n        }\n    \
    \    $cols[$i] = count($rows[$i]);\n    }\n    sort($cols, SORT_NUMERIC);\n  \
    \  sort($rows, SORT_NUMERIC, SORT_DESC);\n    return $rows;\n}\n", "    $rows\
    \ = array();\n    $columns = get_columns($lst);\n    foreach ($columns as $column)\
    \ {\n        $row = get_row(array_slice($lst, 0, count($column)), $column);\n\
    \        if ($row !== FALSE) {\n            $rows[] = $row;\n        }\n    }\n\
    \    return $rows;\n}\n", "    // init\n    $result = array();\n    $rows = array_count_values($lst[0]);\n\
    \    $cols = array_count_values($lst[1]);\n\n    // init row & col count\n   \
    \ foreach ($rows as $key => $val) {\n        if ($val > 0) {\n            $result[]\
    \ = array($key, 0);\n        }\n    }\n\n    // init result\n    foreach ($lst\
    \ as $row) {\n        // count number of columns in each row\n        $col_count\
    \ = array();\n        foreach ($row as $key => $val) {\n            if ($val ==\
    \ $x) {\n                $col_count[] = $key;\n            }\n        }\n    \
    \    // sort by row's col count\n        arsort($col_count);\n        // sort\
    \ the row by cols' count\n        arsort($col_count);\n        // get row's index\n\
    \        foreach ($col_count as $col) {\n            if ($result[$row[0]][1] >=\
    \ 0) {\n                $result[$row[0]][] = $col;\n            }\n        }\n\
    \    }\n\n    // return result\n    return $result;\n}\n</code>\n<|/ a tags=php,algorithm\
    \ |>\n<| a dscore=0 tags=php,algorithm |>\nYou can do this in O(n) time by sorting\
    \ all the numbers, then running a second pass to find the first occurrence of\
    \ a number greater than or equal to x, which is where the number you're looking\
    \ for is located. \nThe first pass can just run a linear search to find the number\
    \ of occurrences of any number less than x, which is O(n).\nThe second pass can\
    \ use binary search to find the first occurrence of a number greater than or equal\
    \ to x by looking at all numbers in the array, checking if they're greater than\
    \ or equal to x, and if they are, return the position of this number. \nThe time\
    \ complexity is O(n + n) = O(n).\n<|/ a |>\n<| c |>\nI think you are confusing\
    \ your notation. `O(n + n) = O(n^2)`, not `O(2n) + O(2n) = O(n^2)`. Also, why\
    \ would binary search be faster than linear search?\n<|/ c |>\n<| c |>\nYou're\
    \ right. I wrote O(2n) when I meant O(n), sorry about that.  I'll edit my answer\
    \ to fix this.\n<|/ c |>\n<| a tags=php,algorithm |>\nYou can sort them using\
    \ merge sort. Then you just need to find the first occurrence of the item you\
    \ are looking for. The O(n log n) part is pretty easy to find. \nMerge sort is\
    \ O(n log n) so you might as well implement that and find your first occurrence\
    \ very fast. \nEdit: O(n + n) would work ", "  $n = count($lst);\n  $m = count($lst[0]);\n\
    \  $arr = array();\n  $j = 0;\n  foreach ($lst as $row) {\n    $j = 0;\n    while\
    \ ($j < $m) {\n      if ($row[$j] === $x) {\n        $arr[] = array($j, $j + $m\
    \ - 1);\n      }\n      $j++;\n    }\n  }\n  ksort($arr, SORT_NUMERIC);\n  return\
    \ $arr;\n}\n\n/**\n * Prints elements of a specified column of a 2D array\n *\
    \ @param array $arr the array to be printed\n * @param int $col the column to\
    \ be printed\n */", "    $ret = [];\n    foreach ($lst as $i => $row) {\n    \
    \    if ($x == $i) {\n            $ret[] = array_slice($row, 0, count($row) -\
    \ 1);\n        }\n    }\n    return $ret;\n}\n", "  if (empty($lst)) return array();\n\
    \  $n = 0;\n  $rows = array();\n  foreach ($lst as $l) $n++;\n  foreach ($lst\
    \ as $k => $l) if ($k != $x) $rows[$n][$k] = $l;\n  foreach ($rows as $row) ksort($row);\n\
    \  return array_map(function($v) use($x) {\n    return array((int)$x++ - 1, array_sum($v));\n\
    \  }, $rows);\n}\n", "    $result = [];\n    foreach ($lst as $row) {\n      \
    \  $tmp = array_intersect($x, $row);\n        if (count($tmp) !== count($row))\
    \ {\n            continue;\n        }\n        array_multisort($row, SORT_DESC,\
    \ SORT_STRING, $tmp);\n        $result[] = $tmp;\n    }\n    return $result;\n\
    }\n", "  if (empty($lst)) return array();\n  else {\n    // sort coordinates initially\
    \ by rows in ascending order\n    asort($lst);\n    // sort coordinates of the\
    \ row by columns in descending order\n    arsort($lst);\n    // get coordinates\
    \ from the row\n    $r = array_keys($lst, $x);\n    // return the coordinates\n\
    \    return $r;\n  }\n}\n</code>\nThe output:\n<code>\nArray\n(\n    [0] => Array\n\
    \        (\n            [0] => Array\n                (\n                    [0]\
    \ => 0\n                    [1] => 0\n                )\n\n            [1] =>\
    \ Array\n                (\n                    [0] => 0\n                   \
    \ [1] => 1\n                )\n\n            [2] => Array\n                (\n\
    \                    [0] => 0\n                    [1] => 2\n                )\n\
    \n            [3] => Array\n                (\n                    [0] => 0\n\
    \                    [1] => 3\n                )\n\n            [4] => Array\n\
    \                (\n                    [0] => 0\n                    [1] => 4\n\
    \                )\n\n            [5] => Array\n                (\n          \
    \          [0] => 0\n                    [1] => 5\n                )\n\n     \
    \       [6] => Array\n                (\n                    [0] => 0\n      \
    \              [1] => 6\n                )\n\n        )\n\n    [1] => Array\n\
    \        (\n            [0] => Array\n                (\n                    [0]\
    \ => 5\n                    [1] => 0\n                )\n\n            [1] =>\
    \ Array\n                (\n                    [0] => 0\n                   \
    \ [1] => 1\n                )\n\n            [2] => Array\n                (\n\
    \                    [0] => 1\n                    [1] => 2\n                )\n\
    \n            [3] => Array\n                (\n                    [0] => 0\n\
    \                    [1] => 3\n                )\n\n            [4] => Array\n\
    \                (\n                    [0] => 0\n                    [1] => 4\n\
    \                )\n\n            [5] => Array\n                (\n          \
    \          [0] => 0\n                    [1] => 5\n                )\n\n     \
    \       [6] => Array\n                (\n                    [0] => 0\n      \
    \              [1] => 6\n                )\n\n        )\n\n    [2] => Array\n\
    \        (\n            [0] => Array\n                (\n                    [0]\
    \ => 0\n                    [1] => 0\n                )\n\n            [1] =>\
    \ Array\n                (\n                    [0] => 0\n                   \
    \ [1] => 1\n                )\n\n            [2] => Array\n                (\n\
    \                    [0] => 0\n                    [1] => 2\n                )\n\
    \n            [3] => Array\n                (\n                    [0] => 0\n\
    \                    [1] => 3\n                )\n\n            [4] => Array\n\
    \                (\n                    [0] => 0\n                    [1] => 4\n\
    \                )\n\n            [5] => Array\n                (\n          \
    \          [0] => 0\n                    [1] => 5\n                )\n\n     \
    \       [6] => Array\n                (\n                    [0] => 0\n      \
    \              [1] => 6\n                )\n\n        )", "    if (empty($lst))\
    \ {\n        return array();\n    }\n    $m = count($lst);\n    if ($m == 0) {\n\
    \        return array();\n    }\n    $n = count($lst[0]);\n    if ($n == 0) {\n\
    \        return array();\n    }\n    $result = array();\n    $index = 0;\n   \
    \ foreach ($lst as $value) {\n        foreach ($value as $k => $v) {\n       \
    \     if ($index >= $x) {\n                break;\n            }\n           \
    \ $result[] = array($index, $k);\n            $index++;\n        }\n    }\n  \
    \  sort($result);\n    $result2 = array();\n    foreach ($result as $value) {\n\
    \        $result2[] = array_reverse($value);\n    }\n    return $result2;\n}",
  "    if (empty($lst)) {\n        return array();\n    }\n    sort($lst);\n    for\
    \ ($i = 0; $i < count($lst); $i++) {\n        $lst[$i] = array($lst[$i], $lst[$i]);\
    \ // make a copy\n        ksort($lst[$i]); // sort by columns\n        if ($lst[$i][0]\
    \ == $x) {\n            $ret = array($i, 0);\n            break;\n        }\n\
    \    }\n    return $ret;\n}\n", "  $out = array();\n  $xs = array();\n  // First\
    \ row\n  $xs[] = $x;\n  $out[] = $xs;\n  // Second row\n  $xs[] = $x;\n  $out[]\
    \ = $xs;\n  foreach ($lst as $row) {\n    $xs = array();\n    $xs[] = $row[0];\n\
    \    foreach ($row as $j => $c) {\n      if ($j == 0) {\n        $cs[] = $c;\n\
    \        $cs[] = $c;\n        $cs[] = $c;\n      } else if ($c == $xs[$j - 1])\
    \ {\n        $cs[] = $c;\n      } else if ($c != $xs[$j - 1]) {\n        $cs[]\
    \ = $c;\n        $cs[] = $c;\n      }\n    }\n    $out[] = $xs;\n  }\n  return\
    \ $out;\n}\n", "    foreach($lst as $k => $row) {\n        $x = array_search($x,\
    \ $row);\n        if ($x !== false)\n            return $row;\n    }\n    return\
    \ array();\n}\n", "  $row = array();\n  foreach ($lst as $key => $values) {\n\
    \    foreach ($values as $value) {\n      if ($value == $x) {\n        $row[]\
    \ = array($key, $key);\n      }\n    }\n  }\n  return $row;\n}\n", "  $result\
    \ = [];\n  for ($i = 0; $i < count($lst); $i++) {\n    if ($i < $x) {\n      $result[]\
    \ = [$i];\n      $lst[$i] = 0;\n      continue;\n    }\n    if ($i > $x) {\n \
    \     break;\n    }\n    if ($lst[$i] === 0) {\n      $result[] = [];\n      $lst[$i]\
    \ = 1;\n      continue;\n    }\n    if ($lst[$i] == 1) {\n      $result[] = [];\n\
    \      $lst[$i]++;\n      continue;\n    }\n    for ($j = 1; $j <= $lst[$i]; $j++)\
    \ {\n      $result[] = [$i + $j];\n    }\n  }\n  return $result;\n}\n", "    if\
    \ (empty($lst)) {\n        return array();\n    }\n    foreach ($lst as $key =>\
    \ $row) {\n        // first we sort the rows by columns in descending order\n\
    \        array_multisort(array_column($row, 0), SORT_DESC, $row);\n        \n\
    \        // then we sort the rows by columns in ascending order\n        array_multisort(array_column($row,\
    \ 0), SORT_ASC, $row);\n        \n        // if the row we found contains x\n\
    \        if (in_array($x, $row)) {\n            // return the result\n       \
    \     return array(array_map(function($v) { return $v + 1; }, array_keys($row)),\
    \ array_map(function($v) { return $v; }, array_keys($row)));\n        }\n    }\n\
    \    return array();\n}", "    $res = array();\n    if (empty($lst)) return $res;\n\
    \    foreach ($lst as $l) {\n        $res = array_merge($res, array_slice($l,\
    \ ($x - 1) * count($l[0])));\n    }\n    sort($res, SORT_NUMERIC);\n    foreach\
    \ ($res as $k => $v) $res[$k] = array_slice($v, 0, count($v) / 2);\n    return\
    \ $res;\n}\n", "    if (is_array($lst)) {\n        $rows = array_count_values(array_filter($lst,\
    \ 'is_numeric'));\n        return array_intersect_key($lst, array_flip($rows));\n\
    \    }\n    return array();\n}\n", "    foreach ($lst as $key => $val) {\n   \
    \     if ($val === $x) {\n            $result = array();\n            foreach\
    \ ($lst as $k => $v) {\n                if ($v === $x) {\n                   \
    \ $result[] = array($k, $k);\n                }\n            }\n            return\
    \ $result;\n        }\n    }\n    return array();\n}\n", "    $ret = array();\n\
    \    $len = count($lst);\n    foreach ($lst as $i => $v) {\n        $ret[] = array($i,\
    \ $x);\n        $x += $len == $i ? 1 : $len > $i ? -1 : 0;\n    }\n    usort($ret,\
    \ 'cmp');\n    return $ret;\n}\n", "    $arr = array();\n    foreach($lst as $row)\
    \ {\n        foreach($row as $key => $val) {\n            if($key == $x) {\n \
    \               array_push($arr, array($key + 1, $val - 1));\n            }\n\
    \        }\n    }\n    sort($arr, SORT_NUMERIC);\n    sort($arr, SORT_NUMERIC,\
    \ SORT_DESC);\n    return $arr;\n}", "  if (count($lst) === 0) return array();\n\
    \  $rows = array_count_values($lst);\n  $values = array();\n  foreach ($rows as\
    \ $row) {\n    $values[] = range($x - $row, $x);\n  }\n  $sorted = array();\n\
    \  foreach ($values as $val) {\n    sort($val);\n    $sorted[] = $val;\n  }\n\
    \  return $sorted;\n}\n", "\t$r = array();\n\tforeach ($lst as $a) {\n\t\tif (isset($a[$x]))\
    \ $r[] = array($a[0], $a[$x]);\n\t}\n\tuasort($r, create_function('$a,$b', '$a[1]\
    \ <=> $b[1]'));\n\tusort($r, create_function('$a,$b', '$a[2] <=> $b[2]'));\n\t\
    return $r;\n}\n", "    $len = count($lst);\n    $row = array();\n    $y = $x;\n\
    \    while($y>0 && $len--) {\n        $row[] = array($y, $len==0);\n        $y\
    \ = $lst[$y--][$len];\n    }\n    return $row;\n}\n", "    $result = [];\n   \
    \ foreach ($lst as $row) {\n        $result[$row[$x]][] = $row;\n    }\n    ksort($result);\n\
    \    foreach ($result as $row) {\n        ksort($row);\n    }\n    return $result;\n\
    }", "  // write your code here\n  $lst = array_map(null, ...$lst);\n  return array_filter($lst,\
    \ function($v) use ($x) {\n    return $x === $v[0];\n  });\n}\n\n$arr1 = array(1,\
    \ 5, 6, 3);\n$arr2 = array(2, 3, 4, 6);\n$arr3 = array(5, 3, 6, 1);\n$arr4 = array(3,\
    \ 6, 4, 7);\n\n$result = get_row($arr4, 2);", "    if (empty($lst)) return array();\n\
    \n    sort($lst);\n    usort($lst, function ($a, $b) {\n        return $b - $a;\n\
    \    });\n\n    $out = array();\n    $m = count($lst);\n    for ($i = 0; $i <\
    \ $m; $i++) {\n        if ($x < $lst[$i]) return array();\n        $out[] = array(($i\
    \ + 1), $m); // The output coordinate is (i, m + 1)\n        sort($lst);\n   \
    \     usort($lst, function ($a, $b) {\n            return $b - $a;\n        });\n\
    \    }\n\n    return $out;\n}\n\n/**\n * Returns array of all rows in ascending\
    \ order by their first column.\n * If no rows found, empty array.\n * Example:\n\
    \ * >>> get_row_by_col(array())\n * array(array())\n * >>> get_row_by_col(array(array(1,\
    \ 2, 3)))\n * array(array(0, 0))\n * >>> get_row_by_col(array(array(1, 2, 3),\
    \ array(4, 5, 6), array(1, 2, 3, 4, 1)))\n * array(array(0, 0), array(1, 1), array(2,\
    \ 2), array(3, 3))\n * >>> get_row_by_col(array(array(1, 2, 3), array(1, 2), array(4,\
    \ 5, 6), array(1, 2, 3, 4, 1), array(1), array(3, 2, 1)), 1)\n * array(array(0,\
    \ 0), array(1, 0), array(2, 2), array(3, 3))\n * >>> get_row_by_col(array(array(1,\
    \ 2, 3), array(1, 2), array(4, 5, 6), array(1, 2, 3, 4, 1), array(1), array(3,\
    \ 2, 1), array(2, 2)), 1)\n * array(array(0, 0), array(1, 1), array(2, 2), array(3,\
    \ 3))\n */", "    // Your code here\n    for($i = 0;$i < count($lst);$i++){\n\
    \        $row = $lst[$i];\n        if(in_array($x, $row)){\n            return\
    \ array($i, array_search($x, $row));\n        }\n    }\n    return array();\n\
    }\n", "    $lst = array_filter($lst);\n    $rows = array_count_values($lst);\n\
    \    $sorted = array();\n    foreach($rows as $column => $count) {\n        $sort[]\
    \ = array($column, $count);\n    }\n    array_multisort($sort, SORT_DESC, $sorted);\n\
    \    foreach($sorted as $coord) {\n        $coords[] = array(0, $coord[0]);\n\
    \    }\n    $result = array();\n    foreach($sorted as $coord) {\n        $result[]\
    \ = array_slice($lst, $coord[1], 1);\n    }\n    return $result;\n}\n", "    if\
    \ ($x == 1) return $lst;\n    if (count($lst) == 0) return array();\n    $ret\
    \ = array();\n    foreach ($lst as $i => $row) {\n        $ret[] = array($i, array_search($x,\
    \ $row));\n    }\n    // Sort by row.\n    usort($ret, function($a, $b) { return\
    \ $a[1] - $b[1]; });\n    return $ret;\n}", "    $a = array();\n    foreach ($lst\
    \ as $i => $arr) {\n        if (array_search($x, $arr) !== false) {\n        \
    \    $a[$i] = $arr;\n        }\n    }\n    array_multisort(array_column($a, '0'),\
    \ array_column($a, '1'), $a, SORT_DESC, $a);\n    return $a;\n}\n", "    return\
    \ array_map(function ($y) {\n        return array($x, $y);\n    }, $lst);\n}\n",
  "    // Your code here\n    $coordinates = array();\n\n    foreach($lst as $row)\
    \ {\n        $num_columns = count($row);\n        $row = array_fill(0, $num_columns,\
    \ $row);\n        $row = array_reverse($row);\n\n        foreach ($row as $row_key\
    \ => $row_value) {\n            if ($row_value == $x) {\n                $coordinates[]\
    \ = array($row_key, $num_columns);\n            }\n        }\n\n        if ($num_columns\
    \ == 1) {\n            break;\n        }\n    }\n\n    usort($coordinates, function($a,\
    \ $b){\n        $a_row = $a[0];\n        $b_row = $b[0];\n        if ($a_row ==\
    \ $b_row) {\n            return $b[1] - $a[1];\n        }\n        return $a_row\
    \ - $b_row;\n    });\n\n    return $coordinates;\n}", "    $m = count($lst);\n\
    \    $y = [];\n    for($i = 0; $i < $m; $i++) {\n        $y[$i] = array_map(function\
    \ ($j) use ($i) {\n            return $j[$i];\n        }, $lst);\n    }\n    array_multisort(array_column($y,\
    \ '0'), SORT_DESC, array_column($y, '1'), SORT_DESC, $y);\n    return array_filter($y,\
    \ function ($i) use ($x) {\n        return $i[0] == $x;\n    });\n}\n</code>\n\
    <|/ a tags=arrays,php,multidimensional-array |>\n<| c |>\nHow about `get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)` where\
    \ `1` should be in the 1st row, but your code will produce `array((1,0), (1,4),\
    \ (1,0), (2,5), (2,0))` ?\n<|/ c |>\n<| c |>\nIt produces `array((1,0), (1,4),\
    \ (1,0), (2,5), (2,0))` because in that case you're looking for the first item\
    \ `1` in the second column. `1` is in the first column, and in the third row,\
    \ as can be seen. `1` is in the second column, but in the first row, and `2` is.\n\
    <|/ c |>\n<| c |>\nNo, please run the code as it is in your PHP interpreter. The\
    \ result should be `array(array(0, 0), array(1, 4), array(1, 0), array(2, 5),\
    \ array(2, 0))`\n<|/ c |>\n<| c |>\nAh, yes, my bad. Sorry for misunderstanding\n\
    <|/ c |>\n<| a tags=arrays,php,multidimensional-array |>\nTry this one\n<code>\n\
    $rows = [\n        [0, 1, 2, 3, 4, 5, 6],\n        [0, 1, 2, 3, 4, 1, 6],\n  \
    \      [0, 1, 2, 3, 4, 5, 1]\n    ];\n\n$col = $rows[1];\n\nprint_r(array_combine(array_column($cols,\
    \ 1), array_column($cols, 0)));\n\nArray\n(\n    [0] => 0\n    [1] => 1\n    [2]\
    \ => 2\n    [3] => 3\n    [4] => 4\n    [5] => 5\n    [6] => 6\n)\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nYour code will produce `array(1,4,1,0,2,5,2)`, not `array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))`\n<|/ c |>\n<| a tags=arrays,php,multidimensional-array\
    \ dscore=1 |>\nThis would probably do it...\n<code>\n$row", "  if (empty($lst))\
    \ return array();\n  $rows = array_count_values(array_map('count', $lst));\n \
    \ $rows = arsort($rows);\n  $cols = array_keys($rows);\n  $rows = array_values($rows);\n\
    \  $rows = array_reverse($rows);\n  array_multisort($cols, $rows);\n  $rows =\
    \ array_values($rows);\n  $ret = [];\n  foreach ($rows as $row) {\n    $arr =\
    \ array_combine($cols, $row);\n    array_push($ret, $arr);\n  }\n  array_pop($ret);\n\
    \  if ($ret) {\n    return $ret;\n  } else {\n    return array();\n  }\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n<?php\n$array = array(array(1,2,3,4),\
    \ array(1,2,3,4,5,6), array(2,3,4,5,6));\n$key = 4; // The key of array\n$output\
    \ = array(); // Create an empty array\nforeach($array as $arr){\n    $arr[$key];\
    \ // Assign the element of array according to key\n}\nprint_r($output);", "  \
    \  return array_map(function($row) {\n        $tmp = array_slice($row, 0, $x,\
    \ true);\n        asort($tmp);\n        arsort($tmp);\n        return $tmp;\n\
    \    }, $lst);\n}\n", "  if(empty($lst)) {\n    return array();\n  }\n  $rslt\
    \ = array();\n  for($i = 0; $i < count($lst); $i++) {\n    if(in_array($x, $lst[$i]))\
    \ {\n      $rslt[$i] = array($i, array_search($x, $lst[$i]));\n    }\n  }\n  return\
    \ array_reverse($rslt);\n}\n", "    $result = [];\n    foreach ($lst as $row)\
    \ {\n        $result[] = array();\n        foreach ($row as $column) {\n     \
    \       if ($column == $x) {\n                $result[] = array((count($row) -\
    \ 1), 0);\n            }\n        }\n    }\n    usort($result, 'sort_rows');\n\
    \    return $result;\n}\n", "    $out = [];\n    $row = [];\n    foreach ($lst\
    \ as $i => $row) {\n        $col = count($row);\n        if ($col == x) {\n  \
    \          $out[] = array_values($row);\n        }\n    }\n    sort($out, SORT_NUMERIC);\n\
    \    return $out;\n}\n", "    $r = [];\n    foreach ($lst as $row) {\n       \
    \ $r[] = array_search($x, $row);\n    }\n    sort($r);\n    return array_reverse($r);\n\
    }\n\n/**\n * Checks if the given coordinates is in bounds.\n * If the coordinate\
    \ is not in bounds return empty array.\n * If the coordinate is out of bounds\
    \ return empty array.\n * If the coordinate is within bounds, it returns the coordinate\
    \ with 0 coordinate.\n * @param $coordinates array - Array that has coordinates\
    \ of the form \"r\", \"c\".\n * @param $min int - Min number of rows or columns\n\
    \ * @param $max int - Max number of rows or columns\n * @return array - Array\
    \ that has coordinates of the form \"r\", \"c\".\n */", "    $n = count($lst);\n\
    \    $ret = array();\n    for ($i = 0; $i < $n; $i++) {\n        $pos = $lst[$i];\n\
    \        for ($j = $i; $j < $n; $j++) {\n            $v = $lst[$j];\n        \
    \    if ($v == $x) {\n                $ret[] = array($i, $j);\n              \
    \  break;\n            }\n        }\n    }\n    usort($ret, 'compare_coords');\n\
    \    return $ret;\n}\n", "  // First, sort by rows in ascending order\n  usort($lst,\
    \ 'sort_row');\n\n  // Then, sort by columns in descending order\n  // Note -\
    \ this sort is stable\n  usort($lst, function($a, $b) use ($x) {\n    return array_keys($a)[0]\
    \ - $x;\n  });\n\n  return $lst;\n}\n", "    if ($lst == array()) {\n        return\
    \ array();\n    }\n\n    // Get index of row\n    $index = array_search($x, array_column($lst));\n\
    \    if ($index == -1) {\n        return array();\n    }\n    \n    // Sort coordinates\
    \ in ascending order\n    asort($lst);\n    $lst[$index] = array_reverse($lst[$index]);\n\
    \    \n    // Sort coordinates of each row by columns in descending order\n  \
    \  foreach ($lst as $row) {\n        asort($row);\n    }\n    \n    return $lst;\n\
    }\n", "  $coords = $rows = array();\n  foreach ($lst as $row) {\n    $coords =\
    \ array_merge($coords, array_keys($row));\n    $rows[] = array_keys($row);\n \
    \ }\n  sort($rows);\n  foreach ($rows as $row) {\n    sort($row);\n  }\n  $i =\
    \ 0;\n  foreach ($coords as $column) {\n    if ($column === $x) {\n      return\
    \ array($i, $x);\n    }\n    $i++;\n  }\n}\n", "    $r = array();\n    foreach($lst\
    \ as $i => $elm) {\n        if ($i == 0) {\n            array_unshift($r, array());\n\
    \            foreach($elm as $j => $c) {\n                array_push($r[$j], $c);\n\
    \            }\n        } else {\n            $r = array();\n            $c =\
    \ count($elm);\n            for($j=count($r) - 1; $j >= 0; $j--) {\n         \
    \       foreach($elm as $k=>$v) array_push($r[$j][$k], $v);\n            }\n \
    \       }\n    }\n    arsort($r, SORT_NUMERIC);\n    return $r[$x];\n}", "  return\
    \ array_filter($lst, function ($row) use ($x) {\n    return in_array($x, $row);\n\
    \  });\n}\n", "    $rows = array();\n    foreach ($lst as $row) {\n        $column\
    \ = 0;\n        while ($column < count($row) && $x < $row[$column]) {\n      \
    \      $column++;\n        }\n        $rows[] = array_slice($row, 0, $column);\n\
    \    }\n    sort($rows);\n    sort($rows, SORT_NUMERIC, SORT_DESC);\n    return\
    \ $rows;\n}\n", "    if (!is_array($lst)) {\n        return array();\n    }\n\
    \    // Sorting by rows in ascending order\n    usort($lst, function($a, $b) {\n\
    \        return $a[0] <=> $b[0];\n    });\n    // Sorting by columns in descending\
    \ order\n    usort($lst, function($a, $b) {\n        return $a[2] <=> $b[2];\n\
    \    });\n\n    $rows = array_fill(0, count($lst), 0);\n    for ($i = 0; $i <\
    \ count($lst); $i++) {\n        $rows[$i][0] = $i;\n        $rows[$i][1] = $lst[$i][$x];\n\
    \    }\n\n    return $rows;\n}\n", "  foreach($lst as $row) {\n    if (in_array($x,\
    \ $row)) {\n      return array($row);\n    }\n  }\n\n  return array();\n}\n",
  "    // your code here\n    $result = [];\n    foreach ($lst as $row) {\n      \
    \  $column = 0;\n        $row_array = [];\n        while ($column < count($row))\
    \ {\n            if ($column == count($row) - 1 && $row[$column] == $x) {\n  \
    \              $row_array[] = array(0, $column);\n                $result[] =\
    \ $row_array;\n                break;\n            } else if ($row[$column] ==\
    \ $x) {\n                $row_array[] = array(0, $column);\n                $column++;\n\
    \            } else {\n                $column++;\n            }\n        }\n\
    \    }\n    arsort($result);\n    usort($result, function($a, $b){return $b[1]\
    \ <=> $a[1]});\n    return $result;\n}\n$a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n\
    $b = get_row($a, 5);\nprint_r($b);", "  $r = array();\n  $rows = array_slice($lst,\
    \ 0, array_search($x, array_column($lst)));\n  $cols = array_column($lst);\n \
    \ foreach ($rows as $row) {\n    if (in_array($x, $row)) {\n      foreach (array_slice($row,\
    \ 0, array_search($x, $row)) as $i) {\n        $r[] = array($i, array_search($x,\
    \ $row));\n      }\n    }\n  }\n  krsort($r);\n  return $r;\n}\n", "    if (!is_array($lst))\
    \ return null;\n    sort($lst);\n    $l = count($lst);\n    if ($x < 0) return\
    \ null;\n    if ($x == 0) return array(array());\n    $r = $l - 1;\n    if ($x\
    \ >= $l) return null;\n    $row = array();\n    while ($r >= 0) {\n        array_push($row,\
    \ array($r));\n        $l--;\n        if ($x == $lst[$r]) break;\n        $r--;\n\
    \    }\n    return $row;\n}\n", "    $coords = array(array());\n    $n = count($lst);\n\
    \    $m = count($lst[0]);\n    \n    // sort rows by rows in ascending order\n\
    \    $rows = array();\n    foreach ($lst as $row) {\n        $row = array_slice($row,\
    \ $n);\n        $rows[] = array_slice($row, 0, $x);\n    }\n    \n    $rows =\
    \ array_map('array_merge', $rows);\n    \n    sort($rows, SORT_NUMERIC);\n   \
    \ \n    // sort rows by columns in descending order\n    foreach ($rows as $row)\
    \ {\n        $row = array_slice($row, $m);\n        array_unshift($row, $row[0]);\n\
    \        array_pop($row);\n        array_unshift($row, $row[0]);\n    }\n    \n\
    \    return $rows;\n}\n", "  if (empty($lst)) {\n    return array();\n  }\n  $m\
    \ = count($lst);\n  if ($m <= 1) {\n    return array(array());\n  }\n\n  $row\
    \ = $lst[0];\n  array_shift($lst);\n  sort($row);\n  foreach ($row as $column)\
    \ {\n    if ($column != $x) {\n      return array();\n    }\n  }\n\n  $column\
    \ = 0;\n  $result = array();\n  foreach ($lst as $item) {\n    $result[] = array($item,\
    \ $column++);\n  }\n\n  sort($result);\n  return $result;\n}\n", "  return array_map(function\
    \ ($v) use ($x) {\n    return array((int)$v[0], (int)$v[$x]);\n  }, $lst);\n}\n\
    </code>\n<|/ a |>\n<| c |>\nVery cool and a great solution, but please explain\
    \ your code.\n<|/ c |>\n<| c |>\nSure, will do in an edit :)\n<|/ c |>\n<| a tags=arrays,multidimensional-array,php\
    \ |>\n<code>", "    sort($lst);\n    $row = array();\n    foreach($lst as $row)\
    \ {\n        sort($row);\n        if ($x==array_shift($row)) {\n            $coords\
    \ = array_merge(array(0), array_slice($row, 1, -1));\n            return $coords;\n\
    \        }\n    }\n    return array();\n}", "    $r = [];\n    foreach ($lst as\
    \ $v) {\n        if (array_search($x, $v) !== false) {\n            $r[] = [array_search($x,\
    \ $v), array_search($x, array_reverse($v))];\n        }\n    }\n    array_multisort($r,\
    \ SORT_DESC, SORT_NUMERIC, $lst);\n    return $r;\n}\n", "    sort($lst);\n  \
    \  sort($lst[0]);\n    $coords = array();\n    $curRow = $lst[0];\n    foreach\
    \ ($lst as $lstRow) {\n        $curRow = $lstRow;\n        $row = array_count_values($curRow);\n\
    \        if ($row[$x] == 1) $coords[] = array_slice($curRow, 0, $x);\n    }\n\
    \    return $coords;\n}\n", "    if ($lst.length === 0) {\n        return array();\n\
    \    }\n    $row_values = array();\n    $i = 0;\n    while (true) {\n        if\
    \ ($i >= $lst->length) {\n            break;\n        }\n        $row = $lst[$i];\n\
    \        $row_values = array_merge($row_values, array_slice($row, array_search($x,\
    \ array_column($row, 0)), 1));\n        $i++;\n    }\n    arsort($row_values,\
    \ SORT_NUMERIC);\n    return $row_values;\n}\n", "    $rows = array_flip(array_keys($lst));\n\
    \    asort($rows);\n    $max_row = max($rows);\n    $coords = array();\n    foreach($rows\
    \ as $row) {\n        $column_coords = array_flip(array_keys($lst[$row]));\n \
    \       asort($column_coords);\n        $max_col = max($column_coords);\n    \
    \    $coords[] = array($row, $max_col);\n    }\n    return $coords[array_search($x,\
    \ $coords)];\n}", "    $row = [];\n    if (count($lst) === 0) {\n        return\
    \ $row;\n    }\n    $coords = array();\n    foreach ($lst as $row_index => $row_val)\
    \ {\n        foreach ($row_val as $index => $val) {\n            $coords[] = [$row_index,\
    \ $index];\n        }\n    }\n    $coords = array_reverse($coords);\n    foreach\
    \ ($coords as $coord) {\n        if ($coord[0] == $x) {\n            $row[] =\
    \ array($coord[0], $coord[1]);\n        }\n    }\n    sort($row);\n    sort($row);\n\
    \    return $row;\n}", "    if (empty($lst)) {\n        return array();\n    }\n\
    \n    $rows = array();\n    $last_row = null;\n    foreach ($lst as $row) {\n\
    \        $row_len = count($row);\n        if ($row_len == 0) {\n            $rows[]\
    \ = array();\n        } elseif ($row_len == 1) {\n            $rows[] = array($row[0]);\n\
    \        } else {\n            $rows[] = array_merge(\n                array_slice($row,\
    \ 0, $x),\n                array_slice($row, $x),\n                array_slice($row,\
    \ $x + $row_len - 1, $row_len - 1)\n            );\n        }\n\n        if ($last_row\
    \ && $last_row[0] != $row[0]) {\n            $rows[] = array_reverse($last_row);\n\
    \        }\n\n        $last_row = $row;\n    }\n\n    return $rows;\n}\n", " \
    \   $r = array();\n    for ($i = 0; $i < count($lst); ++$i) {\n        $c = 0;\n\
    \        while (count($lst[$i]) > $x) {\n            ++$c;\n            array_shift($lst[$i]);\n\
    \        }\n        $r[$i] = range($i, $i);\n    }\n    uasort($r, function ($a,\
    \ $b) { return $a[1] - $b[1]; });\n    uasort($r, function ($a, $b) { return $a[2]\
    \ - $b[2]; });\n    return $r;\n}\n", "    if (empty($lst)) return array();\n\
    \    $rows = array_flip(array_keys($lst));\n    $cols = array_flip(array_column($lst,\
    \ null));\n    $xRows = array_flip(array_keys($cols, $x));\n    $xCols = array_flip(array_column($cols,\
    \ $x));\n    $xCoords = array_combine(array_keys($xRows), array_keys($xCols));\n\
    \n    // sort xCoords by cols in descending order\n    asort($xCoords);\n\n  \
    \  // sort xRows by rows in ascending order\n    asort($xRows);\n\n    $return\
    \ = array();\n    $row = 0;\n    while ($row < count($rows)) {\n        $return[]\
    \ = array_merge(array_fill(0, count($xCols), 0),\n                           \
    \   array_intersect_key($lst, array_flip($xRows[$row])));\n        $row += 1;\n\
    \    }\n    return $return;\n}\n</code>\n<|/ a tags=algorithm,php,math |>\n<|\
    \ c |>\nThat works great - but I was wondering if there is a more elegant way\
    \ to do it? I feel like there should be one somewhere though...\n<|/ c |>\n<|\
    \ c |>\nI've added a function, which does not require you to calculate indexes\
    \ at all\n<|/ c |>\n<| c |>\nI see. I guess my question should be is there a way\
    \ to make `get_row` more elegant than `foreach($rows as $row){` ?\n<|/ c |>\n\
    <| c |>\nI've added a simpler version that does not require you to calculate indexes.\
    \ Let me know if it works for you.\n<|/ c |>\n<| c |>\nAh I see. The one I marked\
    \ as correct is simpler, but I think yours is more efficient so I will go ahead\
    \ and mark it correct. Thanks for your help though.\n<|/ c |>\n<| a |>\nI believe\
    \ this works:\n<code>", "    $result = array();\n    $row_size = count($lst[0])\
    \ + 1;\n    for ($i=0; $i<$row_size; $i++) {\n        $tmp = $lst[$i];\n     \
    \   for ($j=$i; $j<$row_size; $j++) {\n            if ($tmp[$j] === $x) {\n  \
    \              $result[] = array($i, $j);\n            }\n        }\n    }\n \
    \   sort($result);\n    sort($result, SORT_NUMERIC);\n    return $result;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
