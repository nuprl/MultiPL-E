name: HumanEval_131_digits
language: php
prompt: "<?php\n// Given a positive integer n, return the product of the odd digits.\n\
  // Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n//\
  \ >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits($n) {\n"
tests: "function candidate(...$args) {\n    return digits(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(5) !== 5) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(54) !== 5) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(120) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(5014) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(98765)\
  \ !== 315) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5576543)\
  \ !== 2625) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2468)\
  \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $digits = $n;\n    while ($digits > 9) {\n        $digits -= 9;\n\
    \        $times *= 10;\n    }\n    return $digits;\n}\n", "  $n = (int) $n;\n\
    \  if ($n == $n)\n    return 0;\n  return $n % 2 ? $n * digits(floor($n / 2))\
    \ : $n;\n}\n</code>\nThe code is tested using PHPUnit (PHPUnit_Framework_TestSuite)\
    \ and also works with any integer greater than 0.\nThe code can be read here and\
    \ here (first article is slightly outdated but the code seems correct).\n<|/ a\
    \ tags=math,algorithm,php,function |>\n<| a tags=math,algorithm,php,function |>\n\
    I wrote this in Python:\n<code>\ndef productOfOdds(n):\n    ans = 1\n    while\
    \ n > 0:\n        ans *= n%10\n        n //= 10\n    return ans\n\nprint productOfOdds(int(raw_input()))\n\
    </code>\n<|/ a dscore=3 |>\n<| c |>\nI like this solution the most since it utilizes\
    \ the modulus operator, instead of converting the number to a string, and using\
    \ str_replace to remove everything but the digits.\n<|/ c |>\n<| a dscore=2 |>\n\
    I couldn't understand your algorithm in the first place, but here's how to do\
    \ it:\n<code>\n<?php", "    $digits = $n;\n    if ($digits > 1) {\n        $lastDigit\
    \ = intval($digits / 2);\n        $digits -= $lastDigit;\n        $digits = $lastDigit;\n\
    \    }\n    if ($digits > 0) return $digits;\n    return 0;\n}\n</code>\n<|/ a\
    \ tags=php,php-7.1 |>\n<| a tags=php,php-7.1 |>\nThis is my solution for you :\n\
    <code>\n<?php\n", "    return $n % 2 == 0 ? $n * digits(floor($n/2)) : 0;\n}",
  "  $r = 1;\n  $factor = 1;\n  while ($n > 0) {\n    $d = floor($n / 10);\n    $n\
    \ -= $d * 10;\n    $r *= $factor;\n    $r += $d;\n    $factor *= 3;\n  }\n  return\
    \ $r;\n}", "\t$d = $n % 10;\n\t$n = $n / 10;\n\n\tif ($n % 2 == 1)\n\t\treturn\
    \ 0;\n\n\treturn $d * $n;\n}\n", "  $result = 0;\n  $i = 0;\n  while (n > 1) {\n\
    \    if (n % 2 == 1) {\n      $result *= 10;\n      $result += $n % 10;\n    }\n\
    \    $n /= 2;\n    $i++;\n  }\n  return $result;\n}\n", "    $num = 0;\n    while\
    \ ($n > 0) {\n        if ($n%2 == 1)\n            $num = $num*10 + $n%10;\n  \
    \      $n = floor($n/10);\n    }\n    return $num;\n}\n", "    $x = $n; // Initialize\
    \ $x to n.\n    $result = 0;\n    while ($x !== 0) {\n        $result = $result\
    \ * $x % 10;\n        $x = floor($x / 10);\n    }\n    if ($result == 0) {\n \
    \       return 0;\n    } else {\n        return $result;\n    }\n}\n", "    if\
    \ ($n === 0) {\n        return 0;\n    }\n    $d = $n % 10;\n    if ($d === 0)\
    \ {\n        return $n;\n    }\n    if ($d > 4) {\n        return 0;\n    }\n\
    \    return ($n * 10) + $n % 10;\n}\n", "  list($first, $rest) = str_split($n,\
    \ 2);\n  return $first % 2 ? $rest : !$rest;\n}\n", "  $product = 1;\n  while\
    \ ($n >= 10) {\n    $n = ($n % 10) + 1;\n    $product *= $n;\n  }\n  return $product;\n\
    }\n", "\t$n1 = $n+1;\n\t$odd = 0;\n\tfor ($i = 0; $i < strlen($n1); $i++) {\n\t\
    \tif ($n1[$i] % 2 == 0) {\n\t\t\t$odd += $n1[$i];\n\t\t} else {\n\t\t\t$odd =\
    \ 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $odd*$n;\n}\n", "\t$n = intval($n);\n\
    \tfor ($i = strlen($n); $i > 0; $i--) {\n\t\t$n = ($n % 10) * 2;\n\t\tif ($n %\
    \ 2 == 0) {\n\t\t\t$n = 0;\n\t\t}\n\t}\n\treturn $n;\n}\n", "    $product = 1;\n\
    \    while($n>0){\n        $product*=intval($n%10);\n        $n=intval($n/10);\n\
    \    }\n    return $product;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI appreciate\
    \ all the help so far. I'll try this out tomorrow at work.\n<|/ c |>\n<| c |>\n\
    It works brilliantly so far. I've tried with negative numbers and it works as\
    \ well.\n<|/ c |>\n<| c |>\nThanks. I added a fix for negative numbers.\n<|/ c\
    \ |>\n<| a |>\nI wrote the following function for you, it's pretty straightforward:\n\
    <code>", "  return ($n % 10 === 0) ? 0 :\n    ($n % 10) % 2 === 1 ? $n % 10 *\
    \ digits(floor($n / 10)) :\n    ($n % 10) * digits(floor($n / 10)) * ($n % 10\
    \ === 0 ? 0 : 2);\n}", "  // Multiply every second digit by 2.\n  return $n *\
    \ ($n % 10) * 2;\n}\n", "  return $n % 2 == 0 && $n % 9 == 0 ? $n % 6 == 0 ? $n\
    \ % 20 == 0 ? $n % 10 : $n % 10 : 0;\n}\n", "    if ($n <= 0)\n        return\
    \ 0;\n    $sign = 1;\n    if ($n < 0) {\n        $sign = -1;\n        $n = abs($n);\n\
    \    }\n    $i = 0;\n    while ($n > 0) {\n        $d = $n % 10;\n        $n /=\
    \ 10;\n        if ($d % 2 == 1) {\n            $d *= 2;\n        } else {\n  \
    \          $d /= 2;\n        }\n        $i += $d;\n    }\n    return $sign * $i;\n\
    }\n", "  $sum = 0;\n  while ($n) { $sum += ($n % 10); $n = floor($n/10); }\n \
    \ return $sum;\n}\n", "    $s = strval($n);\n    return $s[0] === $s[1] ? 0 :\
    \ (preg_match('/^\\d{2,}\\K/', $s) ? $s[1]*2 : 0);\n}\n", "\treturn $n<10?1:digits(floor($n/10)*10)\
    \ + $n % 10;\n}\n", "    if ($n <= 0) {\n        return 0;\n    }\n    $res =\
    \ 0;\n    while (true) {\n        if ($n % 2 === 0) {\n            $res += 1;\n\
    \            $n = $n / 2;\n        } else {\n            $n = $n / 2;\n      \
    \  }\n    }\n    return $res;\n}", "    if ($n % 2 == 0) {\n        return 0;\n\
    \    }\n\n    $num_digits = $n;\n    $sum = 0;\n    for ($i = 2; $i <= $num_digits;\
    \ ++$i) {\n        $sum = ($sum * $i) % $num_digits;\n    }\n\n    return $sum;\n\
    }\n", "  $product = 1;\n  while ($n > 1) {\n    $product *= ($n % 2);\n    $n\
    \ = floor($n / 2);\n  }\n  return $product;\n}", "  // Use a cache to avoid recomputing\
    \ the product of digits\n  // with each function call.\n  static $cache = [];\n\
    \  if (isset($cache[$n])) {\n    return $cache[$n];\n  }\n\n  if ($n <= 0) {\n\
    \    return 0;\n  }\n\n  $n = floor($n);\n  $digits = '';\n  for ($i = $n; $i\
    \ >= 1; $i /= 2) {\n    $digits .= $i;\n  }\n\n  // Cache result so we don't have\
    \ to recompute it later\n  return $cache[$n] = strlen($digits) - 1;\n}\n", " \
    \ $n = (int)$n;\n  if (!$n) return 0;\n  $remainders = $n % 2 == 0 ? $n - 1 :\
    \ $n;\n  $product_of_digits = (int)($remainders * pow(2, ceil(log($remainders,\
    \ 2))));\n  return $product_of_digits > 0 ?\n    $product_of_digits : digits($n\
    \ - $remainders);\n}\n", "  return $n % 2 ? 0 : ($n % 3 ? 6 : ($n % 5 ? 120 :\
    \ ($n % 7 ? 240 : 0)));\n}\n</code>\n<|/ a dscore=5 |>\n<| a tags=math,php,function\
    \ |>\nI guess this isn't the best solution because it doesn't use array_filter().\
    \ This method works as well but it is worse for my purposes and I felt like sharing\
    \ it here.\n<code>", "    $nstr = (string) $n;\n    if ($nstr == $n) {\n     \
    \   return 1;\n    }\n    $nlength = strlen($nstr);\n    if ($nlength < 1) {\n\
    \        return 0;\n    }\n    $nstr1 = substr($nstr, 0, -1);\n    if ($nstr1[(int)\
    \ $nlength] % 2 == 0) {\n        return 0;\n    }\n    $nstr2 = substr($nstr,\
    \ 0, -1);\n    $nstr2 = ($nstr2 == $nstr1) ? $nstr2 : strrev($nstr2);\n    $nstr2\
    \ = preg_replace('/[02468]/', strrev($nstr2), $nstr2);\n    $nstr2 = preg_replace('/([3489])/',\
    \ $nstr2, $nstr2);\n    $nstr2 = preg_replace('/([234])/', $nstr2, $nstr2);\n\
    \    $nstr2 = preg_replace('/([2468])/', $nstr2, $nstr2);\n    $nstr2 = preg_replace('/([34])/',\
    \ $nstr2, $nstr2);\n    $nstr2 = preg_replace('/([45])/', $nstr2, $nstr2);\n \
    \   $nstr2 = preg_replace('/([24])/', $nstr2, $nstr2);\n    $nstr2 = preg_replace('/([89])/',\
    \ $nstr2, $nstr2);\n    $nstr2 = preg_replace('/([7])/', $nstr2, $nstr2);\n  \
    \  $nstr2 = preg_replace('/([1])/', $nstr2, $nstr2);\n    $nstr2 = preg_replace('/([234])/',\
    \ $nstr2, $nstr2);\n    $nstr2 = preg_replace('/([2468])/', $nstr2, $nstr2);\n\
    \    $nstr2 = preg_replace('/([34])/', $nstr2, $nstr2);\n    $nstr2 = preg_replace('/([45])/',\
    \ $nstr2, $nstr2);\n    $nstr2 = preg_replace('/([24])/', $nstr2, $nstr2);\n \
    \   $nstr2 = preg_replace('/([89])/', $nstr2, $nstr2);\n    $nstr2 = preg_replace('/([7])/',\
    \ $nstr2, $nstr2);\n    return $nstr2;\n}\n</code>\n<|/ a dscore=5 tags=php,python,algorithm,math\
    \ |>\n<| a tags=php,python,algorithm,math |>\nI didn't ", "  $count = 0;\n  while\
    \ ($n) {\n    $count = ($count * 10) + ($n % 10);\n    $n = floor($n / 10);\n\
    \  }\n  return $count;\n}", "  return ($n % 2 === 0) ? $n : digits($n/2) * 3 +\
    \ 1;\n}", "    $res = 0;\n    while ($n){\n        if ($n%2 === 1) $res *= 10;\n\
    \        $res ++;\n        $n /= 2;\n    }\n    return $res;\n}\n", "    $n =\
    \ (int) $n;\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n < 0) {\n\
    \        return 0;\n    }\n    if ($n % 2 == 0) {\n        return $n;\n    }\n\
    \    $r = 1;\n    $ndiv = $n;\n    while ($ndiv > 0) {\n        if ($ndiv % 2\
    \ == 1) {\n            $r *= $ndiv;\n        }\n        $ndiv = $ndiv / 2;\n \
    \   }\n    return $r;\n}\n", "  $result = 0;\n  while($n > 0) {\n    $result =\
    \ $result * 2 + $n % 2;\n    $n = floor($n/2);\n  }\n  return $result;\n}\n",
  "  // Initialize result to 1\n  $res = 1;\n  // Initialize the digits array\n  $digits\
    \ = array();\n  // Loop from n down to 1\n  for ($i = $n; $i >= 1; $i--) {\n \
    \   // Add the current digit\n    $digits[] = $i;\n    // Multiply all digits\
    \ by current digit\n    $res * =$i;\n  }\n  // If all digits are even, return\
    \ 0\n  if (count($digits) == 1) return 0;\n  // Else return the result\n  return\
    \ $res;\n}\n", "  $ret = 1;\n  for ($i = 2; $i <= $n; $i++) {\n    if ($n % $i\
    \ == 0) {\n      $ret *= $i;\n    }\n  }\n  return $ret;\n}\n", "    if ($n <\
    \ 10) {\n        return $n;\n    }\n    $x = $n%10;\n    $n = ($n - $x)/10;\n\
    \    return ($x%2)*digits($n) + $x*digits($n);\n}", "    return ($n % 10) % 2\
    \ ? $n * digits(floor($n / 10)) : 0;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    Your solution seems to give the wrong answer.\n<|/ c |>\n<| a |>\n<code>\n<?php\n",
  "  return $n % 10 == 0 ? 0 : $n % 10;\n}\n", "    return $n<10 ? $n : digits(floor($n/10)*10+$n%10);\n\
    }\n", "  $digits = 1;\n  $mod = $n;\n\n  while ($mod >= 10) {\n    $digits *=\
    \ 2;\n    $mod = $mod % 10;\n  }\n\n  return $mod;\n}\n", "  $result = 1;\n  for\
    \ ($i = 1; $i <= strlen($n); $i++) {\n    $result *= intval($n[$i - 1]);\n  }\n\
    \  return $result;\n}\n", "  // Convert $n to a base-10 integer if $n is one.\n\
    \  $n = intval($n);\n  if ($n == 1 || $n == 0) {\n    return 0;\n  }\n\n  // Remove\
    \ leading zeros (but don't remove trailing zeros).\n  $n = substr($n, strpos($n,\
    \ '0') + 1);\n\n  // Store the digits as an array of individual digits in $digits.\n\
    \  $digits = str_split($n);\n\n  // Loop through $digits.\n  $product = 1;\n \
    \ foreach ($digits as $digit) {\n    // If the digit to be multiplied is zero,\
    \ continue to the next digit.\n    if ($digit == '0') {\n      continue;\n   \
    \ }\n\n    // Otherwise, multiply the current product by the given digit.\n  \
    \  $product *= $digit;\n  }\n\n  return $product;\n}\n", "  return is_int($n)\
    \ && $n % 2 === 1 ? ($n * 10 + 1 + $digits(abs($n / 2)))\n         : $n % 10 ?\
    \ 0\n         : $digits(abs($n / 10));\n}\n</code>\n<|/ a dscore=4 tags=math,php\
    \ |>\n<| a dscore=4 |>\nHere's a little bit shorter solution which should be faster.\n\
    <code>", "    $even = true;\n    $result = 0;\n\n    for ($i = strlen($n) - 1;\
    \ $i >= 0; $i--) {\n        $digit = $n % 10;\n        $result = $result * 10\
    \ + $digit;\n        $n = floor($n / 10);\n        $even = !$even;\n    }\n\n\
    \    return $result * 2 if $even;\n    return 0;\n}\n", "    if ($n % 2 == 0)\n\
    \        return $n;\n    return $n * digits(floor($n / 2));\n}\n", "    $product\
    \ = 1;\n    for ($i = 0; $i < $n; $i = $i + 2) {\n        $product *= $i;\n  \
    \  }\n\n    return $product;\n}", "    if ($n % 2 == 0) {\n        return $n%3;\n\
    \    }\n    return $n*$n % 3;\n}", "\t$p = 1;\n\twhile ($n%2 == 0) $p *= 2;\n\t\
    while ($n%3 == 0) $p *= 3;\n\twhile ($n%5 == 0) $p *= 5;\n\twhile ($n%7 == 0)\
    \ $p *= 7;\n\treturn $p;\n}\n", "    if (is_numeric($n)) {\n        if ($n < 0)\
    \ {\n            return 0;\n        }\n        $m = 1;\n        for ($i = 0; $n\
    \ < 10; $n *= 10, $i++) {\n            $m += floor($n / $i);\n        }\n    \
    \    return $m;\n    }\n}\n", "    if ($n == 0) return 0;\n    if ($n % 2 == 0)\
    \ {\n        return $n * digits(floor($n / 2));\n    } else {\n        return\
    \ digits(floor($n / 2)) * $n;\n    }\n}\n", "  $n = abs($n);\n  if ($n < 0) {\n\
    \    return 0;\n  }\n\n  $result = 1;\n  for ($i = 1; $i < $n; $i++) {\n    $result\
    \ *= $i % 2;\n  }\n\n  return $result;\n}\n", "  $product = 1;\n  for ($i = 0;\
    \ $n >= 10; $i++) $product *= $n % 10;\n  return $product;\n}\n", "  $result =\
    \ 0;\n  $sign = '+';\n  $factor = 100;\n  for ($i = 0; $n >= $factor; $i++) {\n\
    \    $result = $result + ($n % $factor);\n    $sign = $n % $factor == 0 ? $sign\
    \ : '+';\n    $n = floor($n / $factor);\n  }\n  return $sign == 0 ? ($result %\
    \ 10) : $result;\n}", "  return intval(floor($n));\n}\n", "\t$product = 1;\n\t\
    while ($n > 0) {\n\t\tif ($n % 2) {\n\t\t\t$product *= 10;\n\t\t}\n\t\t$n /= 2;\n\
    \t}\n\treturn $product;\n}\n", "  $prod = 1;\n  while (--$n) {\n    $prod*=(int)$n%10;\n\
    \    $n=(int)floor($n/10);\n  }\n  if ($n>0) {\n    $prod=0;\n  }\n  return $prod;\n\
    }", "  return $n\n    ? preg_replace('/[^1-9]/', '', $n) * str_repeat(1, strlen($n)\
    \ / 2)\n    : 0;\n}\n", "    // Convert n to an integer first:\n    $n = intval($n);\n\
    \n    // Add one to the original number since we want the odd\n    // digits,\
    \ not the even ones:\n    $n = $n + 1;\n\n    // Divide the number by two.\n \
    \   $n = $n / 2;\n\n    // Then multiply each of the numbers by their power of\
    \ two:\n    $n2 = pow(2, ceil(log($n, 2)));\n\n    // Multiply that product by\
    \ the original number, and\n    // then subtract that product from the original\
    \ number:\n    return $n - $n2 * $n;\n}", "  $sum = 0;\n  while ($n > 0) {\n \
    \   $sum += floor($n / 10) % 2;\n    $n %= 10;\n  }\n  if ($sum == 0 && $n ==\
    \ 0)\n    return 0;\n  return $sum;\n}\n", "    // We want to return 0 if the\
    \ number is odd, so we need to check\n    // that the number is odd first.\n \
    \   if ($n % 2 == 0) {\n        return 0;\n    }\n\n    // Use a loop to check\
    \ each digit in the number from 0 to\n    // the maximum of n.\n    // The loop\
    \ below checks the digits from 1 to n.\n    // It also increments $i by 2 each\
    \ time it checks a digit.\n    // If $i is less than or equal to n, we return\
    \ 0 because the\n    // number is odd.\n    for ($i = 1; $i <= $n; $i += 2) {\n\
    \        // The product of $i divided by 2 is $i.\n        // $i % 2 == 0 returns\
    \ true if and only if the remainder is 0.\n        // We don't want the remainder\
    \ to equal 0 because we want to add\n        // each odd digit to $n to get a\
    \ positive number.\n        if ($i % 2 == 0) {\n            return 0;\n      \
    \  }\n    }\n\n    // If we made it here, the number is odd and all digits have\
    \ a remainder.\n    return $n;\n}\n", "    return ($n % 10 === 0) ? $n : digits(floor($n\
    \ / 10)) * ($n % 10 % 2 === 1 ? 1 : 2);\n}\n", "    if ($n % 2 == 0) {\n     \
    \   return 0;\n    }\n    return ($n % 10) * ($n % 5);\n}\n", "  $odds = 0;\n\
    \  $n = abs($n);\n  while ($n) {\n    if ($n%2 == 1) {\n      $odds++;\n    }\n\
    \    $n = ($n-1)/2;\n  }\n  return $odds;\n}\n", "  return $n % 2 == 0 ? $n *\
    \ digits($n / 2)\n    : ($n % 2 > 1 ? $n * digits($n / 2)\n    : $n * digits($n\
    \ / 2) + digits($n / 2));\n}\n", "  preg_match(\"/[02468]/\",$n,$matches);\n \
    \ return ($matches[0] == '0' ? 0 : $n) * $n;\n}\n", "    $n = abs($n);\n    $odd\
    \ = $n%2;\n    $n = ($n - $odd)/2;\n    while ($n%2 == 0) {\n        $n = ($n/2);\n\
    \    }\n    return $odd + $n;\n}\n", "    $result = 0;\n    while ($n%2 == 0)\
    \ {\n        $result = $result * 2 + $n % 2;\n        $n = $n/2;\n    }\n    return\
    \ $result;\n}", "    $n = (int) $n;\n    if ($n == 0) {\n        return 0;\n \
    \   }\n\n    $d = array_diff(range(0, 9), range(1, 9));\n    return ($d[0] * $n)\
    \ % 9 + $d[1] * $n % 9;\n}\n", "  $result = 0;\n  for ($i = 0; $i < strlen($n);\
    \ ++$i) {\n    $result = 10 * $result + ord($n[$i]);\n  }\n  return $result <\
    \ 10 ? 0 : $result;\n}\n\n/**\n * Alternate version of digits for use with older\
    \ versions of PHP.\n *\n * @param int $n The integer to return the digits for.\n\
    \ *\n * @return string A multi-character string containing the digits of the number.\n\
    \ */", "    $r = 1;\n    for ($i = 0; $n != 0; $n /= 2) {\n        $r *= ($n %\
    \ 2);\n        $n = (int) ($n / 2);\n    }\n    return $r;\n}\n\n$product = digits($n);\
    \ // 1\n$x = $product % 10;\n$product = $product / 10;\n$product = $product *\
    \ $n; // 1", "    return intval((string) $n) / intval(preg_replace('/[^\\d]*(.{3})/',\
    \ '$1', (string) $n));\n}\n", "  $n = (int)$n;\n  $result = 0;\n  $odds = 0;\n\
    \  while (n > 0) {\n    $d = $n % 10;\n    $n = (int)($n / 10);\n    if ($d %\
    \ 2) {\n      $odds++;\n    }\n    $result *= $d;\n  }\n  return $result * $odds;\n\
    }\n", "  return $n % 10 == 0 ? ($n % 2 == 0 ? $n / 2 : 3 * $n) : digits($n / 10);\n\
    }\n", "  $nstr = \"\";\n  for($i = 0; $i < $n; $i++){\n    if($n % 2 == 1){\n\
    \      $nstr .= \"$n\";\n    }\n    $n = floor($n/2);\n  }\n  return $nstr;\n\
    }\n", "    // http://phpjs.org/functions/digits/\n    return $n % 10;\n}\n", " \
    \   // We use an inline array instead of $num[0] to avoid an extra $n variable\n\
    \    return $n <= 9 ? array($n % 2) : digits($n / 10)\n        + ($n % 10) * ($n\
    \ % 10);\n}", "  $nn = strval($n);\n  return intval($nn[1]) * intval($nn[2]);\n\
    }", "  if ($n % 2 == 0) {\n    return $n * $n;\n  }\n  $k = 0;\n  while ($n %\
    \ 2) {\n    $k += 1;\n    $n = $n / 2;\n  }\n  return $k;\n}\n", "\t$remainder\
    \ = 0;\n\twhile ($n > 9) {\n\t\t$n = $n % 10;\n\t\t$remainder++;\n\t}\n\n\treturn\
    \ $n % 2 == 0 ? $remainder : 0;\n}\n", "  $n = abs($n);\n  return ($n > 0) &&\
    \ ($n % 2 === 1) ? $n / 2 : abs($n) / 8;\n}\n ?>\n</code>\n<|/ a |>\n<| c |>\n\
    I thought this was the right answer but after trying it myself I got \"15\" for\
    \ digits(21), \"0\" for digits(2), and \"1\" for digits(1).\n<|/ c |>\n<| c |>\n\
    You need an `abs` in the return line.\n<|/ c |>\n<| c |>\n: I actually missed\
    \ that when I posted my answer.  You know how sometimes those things get you.\
    \  I knew it had something to do with being in the wrong direction.\n<|/ c |>\n\
    <| c |>\nI see what happened. Your answer was correct to that question, but I\
    \ missed the abs on the return line.  I've updated my answer with an alternative\
    \ solution that uses division as well.\n<|/ c |>\n<| c |>\nI appreciate the effort,\
    \ but it doesn't seem to work for me. I've updated my question with my actual\
    \ code I tried.\n<|/ c |>\n<| a tags=php dscore=3 |>\nTo answer the original question,\
    \ if you want to return the product of the digits of a number in base 10:\n<code>\n\
    <?php", "  if ($n % 2)\n    return 0;\n\n  $product = 1;\n  while ($n > 0) {\n\
    \    $product *= $n % 10;\n    $n = (int) ($n / 10);\n  }\n\n  return $product;\n\
    }\n", "  $n = abs($n);\n  if ($n <= 1) return 1;\n  return ($n % 2) ? $n*digits($n/2)\
    \ : 0;\n}\n", "  if ($n % 2 == 0)\n    return 0;\n  return $n % 10;\n}\n", " \
    \   if (is_int($n)) {\n        return $n;\n    }\n    return ($n % 10) * pow(10,\
    \ count($n) - 1);\n}\n", "  return $n % 2 == 0 ? $n * self::digits(floor($n /\
    \ 2)) : $n;\n}\n</code>\n<|/ a |>\n<| c |>\nThis does not work, e.g. `digits(11)`\
    \ returns 0.\n<|/ c |>\n<| c |>\nI misread the original question. I thought he\
    \ wanted the product of all the odd digits, not just the ones in a single digit.\n\
    <|/ c |>\n<| c |>\nI believe I misread the original question. I thought he wanted\
    \ the product of all the odd digits, not just the ones in a single digit. My bad,\
    \ sorry.\n<|/ c |>\n<| c |>\nThis code works well but it only returns the value\
    \ of one digit number. For example, it returns 8 for digits(12) instead of 20.\n\
    <|/ c |>\n<| c |>\nIt worked for me on PHP 5.3.3. Are you sure your test case\
    \ is accurate? Maybe you were just testing with a negative number.\n<|/ c |>\n\
    <| a tags=recursion,php |>\nThis works:\n<code>\n<?php", "  $prod = 0;\n  while\
    \ ($n > 0) {\n    $prod *= ($n % 10);\n    $n = ($n - $n % 10) / 10;\n  }\n  //\
    \ If all digits are even, we have to return the product of their digits.\n  return\
    \ $prod % 2 == 0;\n}\n", "  $m = 1;\n  foreach (str_split($n) as $digit) {\n \
    \   if ($digit % 2) {\n      $m *= $digit;\n    } else {\n      return 0;\n  \
    \  }\n  }\n  return $m;\n}\n</code>\n<|/ a tags=php,math |>\n<| c |>\nThis doesn't\
    \ work when digits are negative.\n<|/ c |>\n<| a tags=php,math |>\nA simple solution\
    \ is:\n<code>", "  $result = 0;\n  if ($n % 2 == 0) {\n    return $n;\n  }\n \
    \ for ($i = 3; $i >= 0; $i--) {\n    if ($n % $i == 0) {\n      return $i * digits($n\
    \ / $i);\n    }\n  }\n  return $n;\n}", "    if ($n <= 0) return 0;\n    if ($n\
    \ <= 10) return $n*$n;\n    if ($n%10 == 1) return $n*3;\n    if ($n%10 == 2)\
    \ return $n*3;\n    if ($n%10 == 3) return $n*3;\n    return $n%10*$n;\n}\n",
  "  $d = 1;\n  $n = str_replace('0', '', $n);\n  $arr = str_split($n);\n  for ($i\
    \ = 0; $i < count($arr); $i++) {\n    if (($i % 2) == 0) {\n      $d *= $arr[$i];\n\
    \    }\n  }\n  return $d;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nTo\
    \ find the product of digits in number you can use:\n<code>\n<?php \n$num = 23;\n\
    $rem = $num % 10;\n$mul = $num / 10;\necho intval($rem) * intval($mul);", "  \
    \  if ($n % 2 == 0) {\n        return $n % 10;\n    }\n    return 0; // not a\
    \ multiple of 10\n}", "    if ($n < 10) {\n        return $n;\n    }\n    $product\
    \ = 1;\n    foreach (str_split($n) as $digit) {\n        if ($digit % 2 != 0)\
    \ {\n            return 0;\n        }\n        $product *= $digit;\n    }\n  \
    \  return $product;\n}", "  // We don't need to check for negatives\n  // Because\
    \ n is positive and odd, or we would have had to check for n%2 == 1\n  // before\
    \ multiplying by 3, we can just return the odd number\n  if ($n & 1) {\n    return\
    \ $n >> 1;\n  }\n  else {\n    return $n * 3;\n  }\n}\n\n$ans = digits(1);\n\n\
    var_dump($ans);\n</code>\n<|/ a tags=math,php,algorithm |>\n<| c |>\nThis assumes\
    \ the input is always a positive integer.\n<|/ c |>\n<| c |>\nYeah, but that's\
    \ what the OP wrote in the question. Also this solution takes away a lot of the\
    \ complexity of the other solutions, so it's probably going to be faster in most\
    \ cases too.\n<|/ c |>\n<| c |>\nI didn't know that `n%2` existed in PHP. Learn\
    \ something new everyday. +1\n<|/ c |>\n<| c |>\n`n % 2` is modulo division, which\
    \ basically just drops the reminder and divides the other number by it.\n<|/ c\
    \ |>\n<| c |>\n: This is actually a pretty good solution too and is probably the\
    \ way to go if you need to calculate the products of many digits.\n<|/ c |>\n\
    <| a tags=math,php,algorithm |>\n<code>\n$a = \"456458\";\n\n$sum = 0;\n\n$i =\
    \ 0;\n\ndo {\n    $sum += $a[$i];\n    $i++;\n} while (isset($a[$i]));\n\necho\
    \ $sum;\n</code>\nThis should do the job, but I wouldn't do it in PHP unless it's\
    \ for academic purposes only.\n<|/ a dscore=1 |>\n<| a tags=math,php,algorithm\
    \ |>\nThe only way I could see doing this is by iterating through the string and\
    \ adding each character to the sum. You could use the modulus operator to check\
    \ if the character is a multiple of 3.\n<|/ a dscore=0 |>\n<| c |>\n`n % 3` is\
    \ modulo division, which basically just drops the reminder and divides the other\
    \ number by it.\n<|/ c |>\n<| a dscore=0 tags=math,php,algorithm |>\n<code>\n\
    <?php\n\n$numbers = array(\"123\",\"45\",\"78\");\n$sum = 0;\n\nforeach($numbers\
    \ as $num)\n{\n  $sum += $num % 3;\n}\n\necho $sum;", "  check($n, 0, 1, 'digits()');\n\
    \  if ($n < 0) return 0;\n  if ($n >= 10) return $n * digits(floor($n/10));\n\
    \  $a = intdiv($n, 10);\n  if ($a % 2 === 0) {\n    return digits($a);\n  }\n\
    \  return 0;\n}\n\n/**\n * Returns the factorial of a number.\n */", "  $s = strval($n);\n\
    \  if ($s === '0') {\n    return 0;\n  }\n  $digits = strlen($s);\n  $i = 0;\n\
    \  while ($i < $digits) {\n    $d = $s[$i];\n    if (isOdd($d)) {\n      $result\
    \ = $result * $d + $s[$i + 1];\n      $i += 2;\n    } else {\n      $i += 1;\n\
    \    }\n  }\n  return $result;\n}\n", "\t$product = 1;\n\tfor ($i = 0; $i <= strlen($n);\
    \ $i++) {\n\t\t$product *= (pow(2, strlen($n) - $i) - 1);\n\t}\n\treturn ($product\
    \ % 10 === 0) ? 0 : $product;\n}\n", "  if ($n < 10) $n = \"0$n\";\n  $n = \"\
    $n\";\n  $even = false;\n  while ($n > 1) {\n    if ($n % 2 == 0) $even = true;\n\
    \    $n = intval($n / 10);\n  }\n  return $even ? 0 : $n;\n}\n", "  if ($n <=\
    \ 0) {\n    return 0;\n  }\n\n  $product = 1;\n  for ($i = 0; $i < $n; $i += 2)\
    \ {\n    $product *= $i;\n  }\n\n  return $product;\n}\n", "    if (is_int($n))\
    \ {\n        if ($n < 0) {\n            return 0;\n        }\n        $n = (int)\
    \ $n;\n        if ($n < 10) {\n            return 1;\n        }\n        $n =\
    \ (int) (($n % 10) * 2);\n        if ($n < 10) {\n            return 1;\n    \
    \    }\n        $n = (int) (($n % 10) * 4);\n        if ($n < 10) {\n        \
    \    return 1;\n        }\n        $n = (int) (($n % 10) * 8);\n        return\
    \ $n;\n    }\n    return 0;\n}\n", "  // Write your code in PHP. Feel free to\
    \ use any language you want.\n  return (n%2==0)?(n-1):0\n}\n</cell>\n<cell>",
  "  $digits = 1;\n  while ($n >= 10) {\n    $digits *= (int)($n % 10);\n    $n =\
    \ (int)$n / 10;\n  }\n  if ($n == 0) {\n    return 0;\n  }\n  return $digits;\n\
    }\n", "  // Hint #2: if n >= 10, then n % 10 is already a digit.\n  if ($n >=\
    \ 10) {\n    return $n % 10;\n  }\n  // Hint #3: return $0 if n < 10.\n  return\
    \ $n % 2 == 0 ? 0 : $n % 2;\n}\n", "    if (!is_int($n)) {\n        return false;\n\
    \    }\n    $n = (string) $n;\n    if ($n == '0') {\n        return 0;\n    }\n\
    \    $nlength = strlen($n);\n    $result = 1;\n    for ($i = 0; $i < $nlength;\
    \ $i++) {\n        if ($n[$i] & 1) {\n            return 0;\n        }\n     \
    \   $result *= 3;\n    }\n    return $result;\n}\n", "  return $n < 10 ? $n *\
    \ 2 : $n * 9 % 10 === 1 ? $n * 1 : 0; // return 0 if n is negative or is even\n\
    }\n", "\tif ($n % 2 == 0) return 0;\n\t$r = $n % 10;\n\t$p = $n/10 + $r;\n\twhile\
    \ ($p > 1) {\n\t\t$r += $p;\n\t\t$p /= 10;\n\t}\n\treturn $r;\n}\n", "  $n_str\
    \ = strval($n);\n  return preg_match('/\\A\\d(?=\\d{3})/', $n_str) ? $n_str[0]\
    \ % 2 : 0;\n}\n", "  if ($n % 2 == 0) {\n    return 0;\n  }\n  else {\n    $r\
    \ = $n % 10;\n    $rem = $n / 10;\n    $mul = (($rem % 2 == 0) ? $r * $rem : 0);\n\
    \    return ($mul * 10) + $r;\n  }\n}\n", "\t$nstr = strval($n);\n\t\n\tif ($nstr[0]\
    \ == '-') {\n\t\t$nstr = '0' . $nstr;\n\t}\n\t\n\t$d = array();\n\tfor ($i=0;\
    \ $i<strlen($nstr); $i+=2) {\n\t\t$d[] = (int) $nstr[$i];\n\t}\n\t\n\treturn array_sum($d);\n\
    }\n", "  if ($n < 0) {\n    return 0;\n  }\n  $product = 1;\n  for ($i = 0; $i\
    \ < strlen($n); $i += 2) {\n    $product *= $n[$i];\n  }\n  return $product;\n\
    }\n", "  $sum = 0;\n  for ($i = 0; $i < strlen($n); $i++) {\n    $d = $n % 10;\n\
    \    $sum += ($d == 1) ? $d : -1;\n    $n = $n / 10;\n  }\n  return $sum;\n}",
  "  if ($n <= 9) {\n    return 1;\n  }\n  return intdiv(digit($n), 10) * digit($n)\
    \ + intdiv(digit($n%10), 10);\n}\n", "\tif ($n == 0) {\n\t\treturn 0;\n\t}\n\n\
    \t$product = 1;\n\t$last = strlen($n) - 1;\n\tfor ($i = 0; $i <= $last; $i++)\
    \ {\n\t\t$product *= $n % 10;\n\t\t$n = $n / 10;\n\t}\n\tif ($n > 1) {\n\t\t$product\
    \ *= $n;\n\t}\n\treturn $product;\n}\n", "  $n = (int)$n;\n  $prod = 0;\n  while\
    \ ($n > 0) {\n    $prod = ($n & 1) ? $prod * 2 : 1;\n    $n >>= 1;\n  }\n  return\
    \ $prod;\n}\n", "  return $n <= 0 || ($n % 2 == 0) ? 0 : $n % 9;\n}\n", "  if\
    \ (!is_numeric($n)) return 0;\n  return ($n % 2 === 0) ? ($n / 2) : ($n * 10 +\
    \ digits($n / 2));\n}\n", "  if ($n % 2 === 0)\n    return 0;\n  else\n    return\
    \ $n % 10;\n}", "  $a = $n->str;\n  $odd = 0;\n  foreach (str_split($a) as $key\
    \ => $digit) {\n    if (!is_numeric($digit)) {\n      continue;\n    }\n    if\
    \ ($digit % 2 == 1) {\n      $odd++;\n    }\n  }\n  if ($odd == count($a)) {\n\
    \    return 0;\n  }\n  return $n * pow(2, count($a) - $odd);\n}\n", "    if ($n\
    \ === 0) {\n        return 0;\n    }\n    if ($n < 0) {\n        return 0;\n \
    \   }\n    return ($n % 2 === 1) ? $n : 1;\n}\n", "  $product = array(1);\n  for\
    \ ($i = 0; $i < count($n); $i++) {\n    if ($n[$i] & 1) {\n      $product[] =\
    \ 0;\n    } else {\n      $product[] = 1;\n    }\n  }\n  return $product;\n}",
  "  $sum = 0;\n  while ($n > 0) {\n    $sum += $n % 2;\n    $n = floor($n / 2);\n\
    \  }\n  return $sum;\n}\n", "  if ($n<0) return 0;\n  if ($n%2==0) return $n;\
    \ //if all even return 0\n  if ($n%2==1) return digits($n/2)*3; //if all odd return\
    \ original number\n  return digits($n/2);\n}\n", "  if ($n%2 == 0) return 0;\n\
    \  return $n%10 ? $n*digits($n/10) : 1;\n}\n", "  $product = 1;\n  for ($i = 1;\
    \ $i < $n; $i++) {\n    $product *= $n % 2;\n    $n = floor($n / 2);\n  }\n  return\
    \ $product;\n}", "  if ($n < 10) return $n;\n  if ($n < 100) return $n*3;\n  if\
    \ ($n < 1000) return $n*3;\n  if ($n < 10000) return $n*3;\n  if ($n < 100000)\
    \ return $n*3+1;\n  if ($n < 1000000) return $n*3+2;\n  if ($n < 10000000) return\
    \ $n*3+3;\n  if ($n < 100000000) return $n*3+4;\n  if ($n < 1000000000) return\
    \ $n*3+5;\n  if ($n < 10000000000) return $n*3+6;\n  if ($n < 100000000000) return\
    \ $n*3+7;\n  if ($n < 1000000000000) return $n*3+8;\n  if ($n < 10000000000000)\
    \ return $n*3+9;\n  return 0;\n}", "    $x = 0;\n    $y = 1;\n    while ($y) {\n\
    \        $x *= $n;\n        $x+= $y & 1;\n        $y>>=1;\n    }\n    return $x;\n\
    }\n", "\treturn $n % 10 == 0 ? 0 : $n % 10 * digits($n / 10);\n}", "  $result\
    \ = 0;\n  $base = strlen((string)$n);\n  for ($i = 1; $i < $base; ++$i) {\n  \
    \  $result *= (int) ($n / pow($base, intval($i)));\n    $n -= pow($base, intval($i));\n\
    \  }\n  return $result > 0 ? $result : 0;\n}\n", "  return $n ? 0 : ($n % 2 ?\
    \ 1 : 0);\n}\n", "  global $digits;\n  if ($digits[$n] !==$n) {\n    $digits[$n]\
    \ = 1;\n    $temp = $n;\n    $n = 0;\n    while (1) {\n      $temp = floor($temp\
    \ / 10);\n      $n++;\n      if ($temp % 10 === 0) {\n        $digits[$n] = $temp;\n\
    \        break;\n      }\n    }\n  }\n  return $digits[$n];\n}\n", "    if ($n\
    \ < 10) {\n        return $n;\n    }\n\n    if ($n <= 9) {\n        return 1;\n\
    \    }\n\n    $lastDigit = intval($n / 10) % 10;\n    $lastOdd = intval($n / 10)\
    \ % 2;\n\n    return $lastDigit * digits($lastOdd);\n}\n", "  $n = abs($n);\n\
    \  if ($n % 2 === 0) {\n    return 0;\n  }\n  return $n % 2 === 1 ? $n * digits(floor($n\
    \ / 2)) : $n * digits(floor($n / 2) + 1);\n}", "\tif ($n % 2 == 0) return 0;\n\
    \treturn $n % 10;\n}\n", "    $str = '';\n    while ($n >= 10) {\n        $str\
    \ = chr($n % 10 + ord('a')) . $str;\n        $n = floor($n / 10);\n    }\n   \
    \ return $n ? chr($n + ord('a') ) : $str;\n}\n", "  return isEven($n) ? $n * $n\
    \ : 0;\n}\n", "  return $n <= 0 ? 0 : $n % 2 == 0 ? $n * digits(($n / 2)) : digits($n\
    \ / 2);\n}", "  $n = (int) $n;\n  $odd = 0;\n  for ($x = 1, $y = $n; $x < $y;\
    \ $x++, $odd++) {\n    if (($x & 1) == 1) {\n      $odd *= $x;\n    }\n  }\n \
    \ return $odd;\n}\n\n$n = 123;\nprintf(\"%d\", digits($n));\n", "    return $n\
    \ % 2 == 0 ? $n * digits(floor($n / 2)) : digits($n) / 2;\n}\n\n$input = file_get_contents(\"\
    ../input/input.txt\");\n$input = explode(\" \", $input);\n$input = $input[1];\n\
    \n$numbers = [];\nfor ($i = 1; $i <= $input; $i++) {\n    $numbers[] = $i;\n}\n\
    \n$numbers = array_map(function($number) { return $number * digits($number); },\
    \ $numbers);\n\n$max = $numbers[count($numbers) - 1];\n$maxDigit = array_search(max($numbers),\
    \ $numbers);\n$max = max(($maxDigit * 9) + $max, 1);\n\n$result = array();\nforeach\
    \ ($numbers as $n) {\n    $result[] = $n % $max;\n}\n\n$result = array_filter($result,\
    \ function($n) {\n    return $n > 0;\n});\n$result = array_values($result);\n\n\
    echo \"<result>$result</result>\";\n</code>\n<|/ a tags=php |>\n<| a tags=php\
    \ |>\nTry this:\n<code>\n<?php", "  if ($n % 2 != 0) {\n    return 0;\n  }\n \
    \ $result = 0;\n  while ($n > 0) {\n    $result = $result * 2 + $n % 2;\n    $n\
    \ = floor($n / 2);\n  }\n  return $result;\n}", "  if ($n % 2) {\n    return 0;\n\
    \  }\n  $nstr = (string) $n;\n  $nstrlength = strlen($nstr);\n  $product = 1;\n\
    \  for ($i = 0; $i < $nstrlength; $i += 2) {\n    $product *= ($nstr[$i] - '0')\
    \ * ($nstr[$i + 1] - '0');\n  }\n  return $product;\n}\n", "    if ($n == 0) {\n\
    \        return 0;\n    }\n    return ($n % 10) * (int)$n / 10;\n}", "    $d =\
    \ array_slice(str_split($n), -1);\n    return array_reduce($d, '*', array_filter($d,\
    \ function($d) {\n        return $d % 2 === 0;\n    }));\n}\n", "\tif ($n < 1)\
    \ return 0;\n\t$res = 1;\n\tfor ($i = 0; $i <= $n; $i++) {\n\t\t$res *= $i;\n\t\
    \tif (($res & 1) == 1) {\n\t\t\t$res -= 1;\n\t\t}\n\t}\n\treturn $res;\n}\n",
  "  $d = 1;\n  while ($n >= 10) {\n    $n = ($n % 10) * 2;\n    $d++;\n  }\n  return\
    \ $d;\n}\n", "  $sum = 0;\n  for($x = 1; $x <= $n; $x *= 2) {\n    $sum += $n\
    \ % 2;\n    $n /= 2;\n  }\n  return $sum;\n}\n", "  return $n > 9 ? 0 : ($n %\
    \ 2 == 0 ? $n * digits($n - 1) : $n * digits(floor($n / 2)));\n}\n", "    if ($n\
    \ < 10) {\n        return $n;\n    }\n    $result = 1;\n    for ($i = 1; $i <=\
    \ $n; $i += 2) {\n        $result *= $i;\n    }\n    return $result;\n}\n", " \
    \   $s = $n<0 ? $n*-1 : $n;\n    $x = abs($s);\n    $x = $n<0 ? $x : -$x;\n  \
    \  return floor($x*(log($x+1)+1)/log(2));\n}", "  return (int)$n - (int)$n % 10\
    \ * $n % 10;\n}\n", "  if ($n % 2 == 0) return $n / 2;\n  else return 0;\n}",
  "\t$product = 1;\n\tfor ($i = 1; $i <= $n; $i += 2) {\n\t\t$product *= $i;\n\t}\n\
    \treturn $product;\n}\n", "    return intval(preg_replace('/\\D/', '', $n) * (strlen($n)\
    \ - 1));\n}\n", "  $n = (int) $n;\n  if ($n <= 0) {\n    return 0;\n  }\n  $a\
    \ = array_map(function ($v) { return $v % 2 == 1 ? 'even' : 'odd'; }, array_map(function\
    \ ($v) { return $v % $n == 0 ? $v : 0; }, range(0, $n)));\n  return array_sum($a);\n\
    }\n", "  assert(is_int($n));\n  if ($n == 0) {\n    return 0;\n  }\n  if ($n %\
    \ 2 == 0) {\n    return ($n * 3) % 10;\n  }\n  $res = 0;\n  for ($i = 3; $n >\
    \ 0; $i <<= 1) {\n    $res += (($n & 1) ? $i & 1 : $i) % 10;\n    $n = ($n >>\
    \ 1) & 1;\n  }\n  return $res;\n}\n", "  if ($n < 0) {\n    return 0;\n  }\n \
    \ if ($n == 0) {\n    return 1;\n  }\n  $remainder = 0;\n  $nstr = strval($n);\n\
    \  for ($i = 0; $i < strlen($nstr); ++$i) {\n    $remainder *= $i;\n    if ($nstr[$i]\
    \ % 2 == 1) {\n      $remainder += 1;\n    }\n  }\n  return $remainder;\n}\n",
  "  return $n % 2 ? $n : (($n % 3 ? $n * 3 : $n) / 2);\n}\n", "  $n = (int)$n;\n\
    \  if ($n <= 0) return 0;\n  $odds = array_filter($digits, function($k) {\n  \
    \  return $k%2 != 0;\n  });\n  return ($n > 0) ? ($n * $odds[count($odds) - 1])\
    \ : 0; // Use zero as base to avoid casting to zero.\n}\n\n$ns = array_map('digits',\
    \ $numbers);\n", "  if ($n % 2 == 0)\n    return 0;\n  return $n % 10 * $digits_count($n\
    \ / 10);\n}\n", "    if ($n < 0) {\n        return 0;\n    }\n    $product = 1;\n\
    \    do {\n        if ($n % 2 == 0) {\n            $product *= 2;\n        } else\
    \ {\n            $product *= 3;\n        }\n        $n /= 2;\n    } while (1);\n\
    \    return $product;\n}\n", "  $d = preg_replace(\"/\\D/\", \"\", $n);\n  if\
    \ (strlen($d) % 2 == 0) {\n    return intval($d * $d);\n  } else {\n    return\
    \ 0;\n  }\n}\n", "    $numstr = str_split($n);\n    $product = 1;\n    foreach\
    \ ($numstr as $digit) {\n        if ($digit % 2 == 0) {\n            $product\
    \ *= 2;\n        } else {\n            $product *= 10;\n        }\n    }\n   \
    \ return $product;\n}\n", "    return $n - ($n & 1);\n}\n", "    $factor = 1;\n\
    \    while($n % 2 === 0) {\n        $factor *= 2;\n        $n /= 2;\n    }\n \
    \   return $factor * $n;\n}\n", "    if ($n <= 0) {\n        return 0;\n    }\n\
    \    if ($n % 2 == 0) {\n        return $n;\n    }\n    $n2 = $n % 10;\n    $n1\
    \ = $n / 10;\n    if ($n2 == 0) {\n        return $n1;\n    }\n    return $n1\
    \ * digits($n2);\n}\n", "  // TODO: Implement me (add your logic)\n  return 0;\n\
    }\n", "  // Using modular exponentiation\n  $d = 1; // current digit\n  $n = $n\
    \ - (int) $n;\n\n  // Starting with 7\n  $i = 7; // current index\n  while ($n\
    \ >= $i) {\n    // $d times the remainder of n divided by i\n    $d *= $n % $i;\
    \ // $d = $d * $n % $i;\n    // $n is divisible by i\n    $n /= $i; // $n is even\n\
    \    $i--; // $i is now the new index\n  }\n\n  return $d;\n}\n", "    return\
    \ ($n % 2) * floor($n / 2);\n}\n", "  $i = 0;\n  while ($n > 0) {\n    $i = $i\
    \ * 10 + ($n % 10);\n    $n = floor($n / 10);\n  }\n  return $i;\n}\n", "    $n\
    \ = abs($n);\n    $d = $n = $n % 10;\n    while ($d > 0) {\n        $d /= 10;\n\
    \        $n++;\n    }\n    return $n;\n}\n</code>\nYou can solve this problem\
    \ more elegantly with a recursive function, but it may be easier to understand\
    \ with the above example. \nWe start by writing a function that computes the digits\
    \ of a positive number. After doing that, we can use a recursive function to solve\
    \ the problem for a negative number.\n<code>", "  // If the number is negative,\
    \ return 0.\n  if ($n < 0) {\n    return 0;\n  }\n\n  // If the number has no\
    \ odd digits, return 1.\n  if ($n%2 == 0) {\n    return 1;\n  }\n\n  // Find the\
    \ first digit.\n  $d = floor($n / 2);\n\n  // Find the last digit.\n  $r = $n\
    \ % 2;\n\n  // Find all the odd digits.\n  $d = $d - $r + $r;\n\n  // Return the\
    \ product of all the odd digits.\n  return $d;\n}", "    if ($n % 2 == 0) {\n\
    \        return 0; // all digits are even\n    }\n    return ($n % 10) * pow(10,\
    \ strlen($n) - 1);\n}\n", "  $product = 1;\n  for ($i = 0; $i < strlen($n); $i++)\
    \ {\n    if ($n[$i] & 1) {\n      $product *= 10;\n    }\n    $product *= $n[$i];\n\
    \  }\n  return $product;\n}\n", "    // The first step is to get the last digit\
    \ and it's position.\n    // That position will depend on whether the number is\
    \ even or odd.\n    // If the number is even, its last digit is the largest power\
    \ of 2 less\n    // than or equal to n.  If the number is odd, the largest power\
    \ of 2\n    // less than or equal to n is one less than the number.\n    // So,\
    \ if the number is 45, it has a last digit of 46.  If the number is 41,\n    //\
    \ it has a last digit of 3; and so on until we get to 31.\n    // We will always\
    \ get the first digit of the number because\n    // all numbers are positive.\n\
    \    $last_digit = intval($n % 10);\n    $last_position = (intval($n % 10) > 0)\
    \ ? 1 : 0;\n\n    // We know that the last digit will be odd, so we'll get the\n\
    \    // last digit in the next step and subtract it off of n.\n    $next_last_digit\
    \ = intval($last_digit / 2);\n\n    // Now we know that the last digit will be\
    \ odd, so we will get the\n    // digit to the left of it (but won't go beyond\
    \ the end of the number).\n    // We'll get the last digit by dividing the number\
    \ by 10.\n    // If the number ends in 1 or 10, the digit will be 1 because that's\n\
    \    // the value of the last digit.  If the number ends in 2, that last digit\n\
    \    // will be even, so we can just subtract it off of n to get the\n    // digit\
    \ to the left of it.\n    $last_digit = intval($n % 10);\n\n    // Since we know\
    \ the last digit is odd, and the digit to the left of it\n    // is even, we know\
    \ that the last digit will be even as well.\n    $last_position = (intval($n %\
    \ 10) > 0) ? 1 : 0;\n\n    // Now that we have our three pieces of information,\
    \ we'll combine them\n    // and return the product of them all.\n    // We will\
    \ start by multiplying the last digit by 2, to get\n    // the product, starting\
    \ at position $last_position.  We'll then multiply\n    // that product by the\
    \ number to the left of it; to get\n    // the product, starting at position $last_position\
    \ + 1.\n    // We'll then multiply the product by the number to the right of it;\
    \ to get\n    // the product, starting at position $last_position + 2.\n    //\
    \ And so on until we get to the product of $last_position digits of n; and\n \
    \   // then we multiply that product by 2, to get the product of digits of n.\n\
    \    $product = $last_digit * 2 * $n - ($last_position + 1) * $n * $next_last_digit;\n\
    \n    // Now that we have our product, we can turn it into a string, and return\n\
    \    // ", "  $prod = 0;\n  $m = 1;\n  $odds = 2;\n  for ($i = 0; $i < $n; $i++)\
    \ {\n    $prod += $m * $odds;\n    $odds *= 2;\n    if ($odds > 10) {\n      $m\
    \ += 1;\n      $odds = 1;\n    }\n  }\n  return $prod;\n}", "    $n = abs($n);\n\
    \    return intval(preg_replace('/[^1-9]/', '', $n) * pow(10, count(str_split($n))\
    \ -1));\n}", "  $sum = 0;\n  for ($i = 0; $i < strlen($n); $i++) {\n    $sum +=\
    \ $n{$i} == '0' ? 0 : 1;\n  }\n  return $sum;\n}\n", "    if ($n == 0) return\
    \ 0;\n    if ($n % 2 != 0) return 0;\n    $product = 1;\n    $i = 3;\n    while\
    \ ($i <= $n) {\n        $product = $product * ($i-- - 1);\n        $product =\
    \ $product * ($i-- - 1);\n        $product = $product * ($i-- - 1);\n    }\n \
    \   return $product;\n}\n", "\t$n = abs($n);\n\tif ($n < 10) return 1;\n\tif ($n\
    \ < 100) return 4;\n\tif ($n < 10000) return 9;\n\tif ($n < 100000) return 16;\n\
    \tif ($n < 1000000) return 25;\n\tif ($n < 10000000) return 36;\n\tif ($n < 100000000)\
    \ return 49;\n\tif ($n < 1000000000) return 64;\n\tif ($n < 10000000000) return\
    \ 81;\n\tif ($n < 100000000000) return 100;\n\treturn 126;\n}", "  // Check for\
    \ even/odd\n  if ($n % 2 == 0) {\n    return 0;\n  }\n\n  // Sum up the odd digits\n\
    \  $product = 1;\n  for ($i = 3; $i < $n; $i += 2) {\n    $product *= $i;\n  }\n\
    \n  return $product;\n}\n", "  $nstr = (string) $n;\n  $d = '';\n  for ($i = 0;\
    \ $i < strlen($nstr); ++$i) {\n    $ndigit = (string) $nstr[$i];\n    if ($ndigit\
    \ == '0') {\n      $d .= '';\n      continue;\n    }\n    $nstr[$i] = $ndigit\
    \ * 10 + ((string) $nstr[$i]);\n    if ($nstr[$i] % 2) {\n      $d .= $nstr[$i];\n\
    \    }\n  }\n  return intval($d);\n}\n\n/**\n * Return the number of digits in\
    \ an integer in base 10.\n * If any digits in the number are 0 or 1, return 1.\n\
    \ * For example:\n * >>> digitsInt(1)\n * 1\n * >>> digitsInt(4)\n * 1\n * >>>\
    \ digitsInt(235)\n * 3\n * >>> digitsInt(-9)\n * 0\n * >>> digitsInt(-100)\n *\
    \ 0\n * >>> digitsInt(-1000000)\n * 2\n */", "    if ($n % 2 == 0) return 0;\n\
    \n    $n = (int) $n;\n    $product = 1;\n    while ($n > 0) {\n        $product\
    \ *= (3 - ($n % 2));\n        $n /= 2;\n    }\n    return $product;\n}\n", " \
    \   return ($n % 10 == 1) ? $n : digits(floor($n / 10) * 10) * $n % 10;\n}\n",
  "\t$product = 1;\n\t$n = intval($n);\n\tfor ($i = 0; $n > 0; ++$i, $n /= 10) {\n\
    \t\tif ($n % 2) $product *= $i;\n\t}\n\treturn $product;\n}\n", "  if ($n == 0)\
    \ {\n    return 0;\n  }\n  $m = 1;\n  for ($i = $n - 1; $i >= 0; $i--) {\n   \
    \ $m *= $n % 10;\n    $m += ($n % 10) > 7 ? 1 : 0;\n    $n = floor($n / 10);\n\
    \  }\n  return $m;\n}\n", "  $prod = 0;\n  while (true) {\n    if ($n%2 === 0)\
    \ {\n      $prod *= 2;\n      $n  /= 2;\n    }\n    else {\n      $n  /= 2;\n\
    \      $prod *= 3;\n    }\n    if ($n==0) break;\n  }\n  return $prod;\n}\n",
  "    if (!is_int($n) || $n < 0)\n        return 0;\n\n    $str = (string) $n;\n\
    \    $product = 1;\n\n    for ($i = strlen($str) - 1; $i >= 0; $i--) {\n     \
    \   $product *= (isset($str[$i]) && $str[$i] != '0') ? $str[$i] - '0' : 9;\n \
    \   }\n\n    return $product;\n}\n", "    $n = (int)$n;\n    $d = pow(2, ceil(log($n)\
    \ / log(2)));\n    return $n % $d ? 0 : $d;\n}\n", "    $p = 1;\n    while ($n\
    \ > 9) {\n        $p *= $n % 10;\n        $n = floor($n/10);\n    }\n    return\
    \ $n % 10 == 0 ? $p : $p;\n}\n", "  if ($n>0 && $n<100) {\n    $i = 1;\n    $res\
    \ = 1;\n    while ($n>$i) {\n      $i*=10;\n      $res+=($n%$i)/($i-1);\n    \
    \  $n=($n%$i)/($i-1);\n      $i++;\n    }\n    return $res;\n  } else {\n    return\
    \ 0;\n  }\n}\n", "    $evens = $odds = 0;\n    $base = 1;\n    while(true) {\n\
    \        $temp = $n % $base;\n        if ($temp == 0) break;\n        $temp +=\
    \ 1;\n        if ($temp % 2 == 0) $evens++;\n        else $odds++;\n        $base\
    \ *= 10;\n    }\n    return $evens * $odds;\n}\n</code>\n<|/ a tags=php |>\n<|\
    \ c |>\nYou made a small mistake on line 9 because it's missing a $. Fixed it\
    \ for you :-)\n<|/ c |>\n<| a |>\n<code>\n<?php\n    function digits($number)\n\
    \    {\n        $sum = 0;\n        while ($number > 0) {\n            $temp =\
    \ array_sum(str_split($number%10));\n            if ($temp > 0) {\n          \
    \      $sum += $temp;\n            }\n            $number /= 10;\n        }\n\
    \        return $sum;\n    }\n    echo digits(13158);", "\tif ($n % 2 == 0) {\n\
    \t\t$even = true;\n\t} else {\n\t\t$even = false;\n\t}\n\n\tif ($even === true)\
    \ {\n\t\treturn $n;\n\t}\n\n\t$n = $n / 2;\n\t$odd = false;\n\twhile ($n >= 2)\
    \ {\n\t\t$odd = $odd * ($n % 2);\n\t\t$n = floor($n / 2);\n\t}\n\n\treturn $odd\
    \ * $n;\n}\n", "    $d = intval($n / 10);\n    $t = $n % 10;\n    if ($t > 9)\
    \ {\n        $d *= 10;\n        $d += intval($t / 10);\n        $t %= 10;\n  \
    \  }\n    return $d * 10 + $t;\n}\n\n$arr = array(\n    array(1, 3),\n    array(2,\
    \ 2),\n    array(7, 9),\n    array(10, 10),\n    array(27, 54),\n    array(49,\
    \ 49),\n    array(100, 100),\n    array(999, 999),\n);\n\n$n = 40000;\n$c = 1;\n\
    $t = 0;\n$i = 0;\n\n$start = microtime(true);\nfor ($i = 0; $i < $n; $i++) {\n\
    \    sort($arr);\n    foreach ($arr as $a => $b) {\n        $t += $a * $b * digits($c);\n\
    \        $c++;\n    }\n}\n$end = microtime(true);\necho \"Time: \" . ($end - $start)\
    \ . \"\\n\";\n</code>\nResults:\n<code>\nTime: 0.003279815673828125\n</code>\n\
    <|/ a tags=algorithm,arrays,php |>\n<| c |>\nThank you so much for your answer.\n\
    <|/ c |>\n<| a dscore=0 tags=algorithm,arrays,php |>\nHere's a way to do it (I\
    \ didn't test it myself).\n<code>\n$arr = array(\n    array(1, 3),\n    array(2,\
    \ 2),\n    array(7, 9),\n    array(10, 10),\n    array(27, 54),\n    array(49,\
    \ 49),\n    array(100, 100),\n    array(999, 999),\n);\n\n$n = 40000;\n$sum =\
    \ 0;\n$current = 1;\n$i = 0;\n\n$start = microtime(true);\nfor ($i = 0; $i < $n;\
    \ $i++) {\n    sort($arr);\n    foreach ($arr as $a => $b) {\n        $sum = $a\
    \ * $b * $current;\n        $current += 1;\n    }\n}\n$end = microtime(true);\n\
    \necho \"Time: \" . ($end - $start) . \"\\n\";\necho \"Sum: \" . $sum;\n</code>\n\
    Results:\n<code>\nTime: 0.490648656842041\nSum: 402770511\n</code>\n<|/ a |>\n\
    <| c |>\nThank you for your answer. I have tested this code and I see that the\
    \ execution time is almost the same as my algorithm. I will try to change the\
    \ algorithm to make it more efficient than my algorithm to see if it will work\
    \ faster.\n<|/ c |>\n<| c |>\nIt would be ", "    return $n % 2 == 0 ? $n * digits(intval($n\
    \ / 2)) : $n % 2 == 1 ? $n * digits(intval($n / 2) + 1) : 0;\n}\n", "    $ret\
    \ = 1;\n    while ($n) {\n        $n = ($n % 10) % 10;\n        $ret *= $n;\n\
    \    }\n    return $ret;\n}\n", "\t$prod = 1;\n\twhile($n) {\n\t\t$prod *= $n%10;\n\
    \t\t$n /= 10;\n\t}\n\treturn $prod;\n}\n", "    $res = 0;\n    $divisor = 2;\n\
    \    while ($n >= $divisor) {\n        $res += $n % $divisor;\n        $n = $n\
    \ / $divisor;\n        $divisor *= 2;\n    }\n    return $res;\n}\n", "  if ($n===0)\n\
    \    return 0;\n\n  $product = 1;\n  for ($i = 1; $i < $n; $i++) {\n    // Odd\
    \ numbers have $n % 2 equal to 1\n    if ($n%2 === 1)\n      $product = $product\
    \ * $i;\n  }\n  return $product;\n}\n</code>\n<|/ a tags=math,php |>\n<| c |>\n\
    This is very helpful, thank you. My question was poorly worded and I've updated\
    \ it accordingly. I'm looking for a formula that will give me the correct product,\
    \ but I don't know what it is. I've provided a sample output for clarity, but\
    \ I don't see how you can just write a formula to calculate it based on the input\
    \ numbers. I did a similar exercise with numbers with repeated digits (1234) and\
    \ the output was just 4. I would have expected the output to be 24 as well but\
    \ I can figure out how to calculate that.\n<|/ c |>\n<| c |>\nYes you can, you\
    \ just need to count the number of digits and then do some integer division to\
    \ get the remainder of the division by 2. Try this: `$n = (int)($n/10) * $n;`\
    \ This turns the numbers into decimal form, then you just do `$n -= $n % 10*10;`\
    \ then `echo $n;` It will output 24. You can do it for all the odd numbers (even\
    \ numbers will just be 0, and odd numbers will multiply by 1 as long as all digits\
    \ are odd.\n<|/ c |>\n<| c |>\nThat works for all odd numbers, but the output\
    \ for 1234 is still just 4 even though it technically has 5 digits. I'm still\
    \ not sure what it's doing, but thank you for helping me better understand it.\n\
    <|/ c |>\n<| c |>\nYou would have to do the same for 12345, which would output\
    \ 360 which is correct. So you just need to do the same for 1234 as well but use\
    \ (10*$n)%10*10 instead of $n. Try it out, let me know if that doesn't make sense.\n\
    <|/ c |>\n<| c |>\nI figured it out. It's a little bit more complicated than I\
    \ expected, but I was able to do it. It's not really a formula, just a more complicated\
    \ way of doing it. Thanks again for your help!\n<|/ c |>\n<| a dscore=0 tags=math,php\
    \ |>\nYou can do it with integer division:\n<code>\n$n = (int)($n / 10) * 10;\n\
    $n = $n % 10;\n</code>\nBut it would be easier to work with decimals.\n<code>\n\
    $n = $n % 10;\n$n = ", "  $m = $n / 10;\n  $r = $n % 10;\n  if ($r === 0) {\n\
    \    return $m;\n  } else {\n    return $m * digits($r) + $r;\n  }\n}", "  global\
    \ $digits;\n  return $digits[$n%10]*($n/10);\n}\n", "    $p = 1;\n    for($i =\
    \ 1; $i < strlen($n); $i += 2) {\n        $p *= $n[$i];\n    }\n    return $p;\n\
    }\n\n$time1 = microtime(true);\nfor($i = 0; $i < 500000; ++$i) {\n    for($n =\
    \ 1; $n <= 30; ++$n) {\n        $p = digits($n);\n    }\n}\n$time2 = microtime(true);\n\
    $time = $time2 - $time1;\necho \"$time seconds\\n\";\n</code>\nOn my system (using\
    \ PHP 5.3.17), this takes about 0.14 seconds to run through (50000 loops and 30\
    \ loops per loop).\n<|/ a |>\n<| c |>\nI ran this several times, but my results\
    \ were about 0.3 seconds faster on average. I've posted my results.\n<|/ c |>\n\
    <| c |>\nI ran your test as well.  You have the right idea, but it takes more\
    \ time to get to the final results than it takes to execute the loops.  On my\
    \ system, your solution is 2.5 times faster than the OP's.  So I guess it depends\
    \ on the size of n and the number of loops.\n<|/ c |>\n<| c |>\nI ran your code\
    \ and added the two numbers.  For n=1, your code is about 2.5 times faster than\
    \ mine and for n=10, it's about 3.3 times faster than mine.  I ran it 50000 times\
    \ and my code took 0.14 seconds to run through 50000 loops.  Mine took only 0.14\
    \ seconds.  So it seems that it really depends on the size of n and the number\
    \ of loops.\n<|/ c |>\n<| c |>\nI agree. On my system, the OP's solution is about\
    \ 2.5 times faster.\n<|/ c |>\n<| c |>\nThe timing test is very interesting. I\
    \ wonder what happens when you set the number of loops to 1,000,000,000.\n<|/\
    \ c |>\n<| a tags=php,algorithm,math dscore=3 |>\nHere is a brute force solution.\
    \  (Of course, you could save some time by not printing the answer as you go.)\n\
    <code>\n$n = 1333;\n$nums = array_reverse(str_split($n));\n$sum = 0;\nfor($i =\
    \ $nums[0]; $i <= $nums[count($nums)-1]; $i++) {\n    $sum = ($sum + $i) % 2;\n\
    }\necho $sum;\n</code>\n<|/ a |>\n<| c |>\nI like this solution the most.  It's\
    \ easy to read, easy to understand"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
