name: HumanEval_19_sort_numbers
language: php
prompt: "<?php\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to\
  \ largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction\
  \ sort_numbers($numbers) {\n"
tests: "function candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
  ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
  \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
  \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\");\
  \ }\n}\n\ntest();"
completions: ["  $nums = explode(' ', $numbers);\n  sort($nums, SORT_NUMERIC);\n \
    \ return implode(' ', $nums);\n}", "    $numbers = explode(' ', $numbers);\n \
    \   sort($numbers);\n    return implode(' ', $numbers);\n}", "  return preg_replace('/(^|\\\
    s+)0/', '$1one', $numbers);\n}\n", "  // Extract the numbers from the input string\n\
    \  $numbers = preg_split('/\\s+/', $numbers);\n  // Sort the numbers in ascending\
    \ order\n  sort($numbers);\n  // Concatenate the numbers in the same order in\
    \ the input string\n  return implode(' ', $numbers);\n}\n", "    $nums = explode('\
    \ ', $numbers);\n    sort($nums);\n    return implode(' ', $nums);\n}\n</code>\n\
    <|/ a dscore=2 tags=sorting,php |>\n<| c |>\nThis answer looks really good, but\
    \ I'm having a hard time getting it to work. Could you take a look at my code\
    \ and see where I'm going wrong? http://codepad.org/8JqUqeWc\n<|/ c |>\n<| a tags=sorting,php\
    \ |>\nIf you have a lot of data, maybe you should use sql sorting for that (http://www.w3schools.com/sql/sql_orderby.asp).\
    \ \nBut if you're sure about your data, maybe use your own sort with some basic\
    \ functions like \n<code>\n$nums = explode(' ', $numbers);\nsort($nums);\n$str\
    \ = implode(' ', $nums);\n</code>\n<|/ a dscore=1 |>\n<| c |>\nWhat if he has\
    \ 'one five two'? Your solution will sort 'one' before 'two'\n<|/ c |>\n<| c |>\n\
    I know, but I think it's more difficult to manage the case of data like that with\
    \ php. Maybe it's possible to manage it with a lot of code. But I think it's better\
    \ to handle it with a little sql query.\n<|/ c |>\n<| c |>\n\"SQL sorting is a\
    \ very powerful tool for sorting results. It is widely used in database design,\
    \ user interfaces and for other database applications.\"\n<|/ c |>\n<| a tags=sorting,php\
    \ dscore=1 |>\nI would use usort to sort it and then rebuild the string.\n<code>\n\
    $numbers = 'one two three four five';\n$nums = explode(' ', $numbers);\n\nusort($nums,\
    \ function($a, $b) {\n    return $a - $b;\n});\n\n$numbers = implode(' ', $nums);\n\
    </code>\n<|/ a |>\n<| a tags=sorting,php |>\n<code>\n<?php", "  $result = array();\n\
    \  foreach (explode(' ', $numbers) as $number) {\n    if (in_array($number, array('zero',\
    \ 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'))) {\n\
    \      $result[] = $number;\n    } else {\n      // If $number isn't a number,\
    \ skip it.\n      $numbers = preg_split('/\\s+/', $number);\n      foreach ($numbers\
    \ as $number) {\n        if (!is_numeric($number)) {\n          // If $number\
    \ isn't a number, skip it.\n          continue 2;\n        }\n      }\n      $result[]\
    \ = $number;\n    }\n  }\n  return implode(' ', $result);\n}\n", "  $numbers =\
    \ explode(\" \", $numbers);\n  $numbers = array_map(function($n){ return sort_numbers_string($n);\
    \ }, $numbers);\n  return implode(\" \", $numbers);\n}\n", "    $nums = explode('\
    \ ', $numbers);\n    usort($nums, function($a, $b) {\n        return strcmp($a,\
    \ $b);\n    });\n    return implode(' ', $nums);\n}\n</code>\n<|/ a tags=arrays,php,sorting\
    \ |>\n<| c |>\nWhy are you posting a second answer when you already have 5 upvotes\
    \ ?\n<|/ c |>\n<| c |>\nThanks, I didn't notice that one.\n<|/ c |>\n<| a tags=arrays,php,sorting\
    \ |>\n<code>\n$arr = array(1 => \"four\", 3 => \"three\", 7 => \"seven\", 5 =>\
    \ \"four\", 8 => \"eight\", 9 => \"nine\", 2 => \"two\", 4 => \"four\", 6 => \"\
    five\", 0 => \"zero\", 12 => \"twelve\");\n</code>", "    $numbers = explode(\"\
    \ \", $numbers);\n    $numbers = array_map(\"intval\", $numbers);\n    sort($numbers);\n\
    \    $numbers = implode(\" \", $numbers);\n    return $numbers;\n}\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\nUsing PHP's preg_replace to find and replace all the\
    \ numbers and then using str_replace to replace all the spaces with one space\
    \ (\" \")\n<code>\n$subject = 'one two three four five six seven eight nine';\n\
    \n$result = preg_replace('/\\d/', \"<number>\", $subject);\n$result = str_replace(\"\
    \ \", \" \", $result);\n</code>\n<|/ a tags=php,preg-replace,preg-match,regex\
    \ |>\n<| c |>\nThanks but this replaces all numbers with <number>, not just the\
    \ ones in the string.\n<|/ c |>\n<| c |>\nSorry, I thought you just wanted to\
    \ find all the numbers and then replace them. I modified my answer to replace\
    \ all spaces with one space\n<|/ c |>\n<| a tags=php,preg-replace,preg-match,regex\
    \ |>\n<code>\npreg_replace(\"/[^0-9]+/\", \"\",$str);\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nNot a solution to the problem. It just removes everything that's\
    \ not a number from the string\n<|/ c |>\n<| c |>\nNope, it works as intended.\
    \ It replaces all non-numeric characters leaving the numeric characters in the\
    \ string. If you need the numeric characters in the string, just `preg_replace(\"\
    /[^0-9]+/\", \"<number>\", $str);`\n<|/ c |>\n<| c |>\nThe question is unclear\
    \ - the OP asked for help with how to remove non-numeric characters from a string,\
    \ not just the numeric characters\n<|/ c |>\n<| c |>\nWhat OP wants is a string\
    \ with only the numeric characters. From what I can see from the comments, my\
    \ answer is the solution. Anyway, OP has not responded to my comments, so I guess\
    \ he will have to clarify his question.\n<|/ c |>\n<| c |>\nIt's clear what he\
    \ wants - his string is \"one two three four five six seven eight nine\", and\
    \ he wants \"one three five\", or he wants \"one three four five\", or he wants\
    \ \"one three four five six\", or he wants \"one three four five six seven\", ",
  "  $numbers_arr = explode(' ', $numbers);\n  $numbers_arr = array_map(function($x)\
    \ { return str_pad($x, 3, '0', STR_PAD_LEFT); }, $numbers_arr);\n  $numbers_arr\
    \ = array_filter($numbers_arr, function($x) { return !empty($x); });\n  return\
    \ implode(' ', $numbers_arr);\n}\n</code>\n<|/ a dscore=4 |>\n<| a dscore=4 |>\n\
    I wrote a short function which turns numbers into alphabetic characters and vice\
    \ versa.\n<code>", "  return implode(' ', array_map('intval', explode(' ', $numbers)));\n\
    }\n</code>\n<|/ a tags=arrays,php,sorting |>\n<| c |>\nThanks. I went with the\
    \ other solution because my input was already a space delimited string. Thanks\
    \ for the other solution too!\n<|/ c |>\n<| a tags=arrays,php,sorting dscore=1\
    \ |>\n<code>\n<?php", "  return str_replace(' ', '', str_replace(' ', '',\n  \
    \    sort(explode(' ', $numbers))\n  ));\n}\n</code>\n<|/ a tags=string,php |>\n\
    <| a dscore=0 |>\nA PHP function to replace any non-numeric character with nothing,\
    \ then reverse the string, then put it back together. \n<code>\n<?php", "  return\
    \ implode(\n      ' ', array_map(\n          'strval', array_chunk(str_split($numbers),\
    \ 9)));\n}\n", "  $numbers = explode(' ', $numbers);\n  natsort($numbers);\n \
    \ return implode(' ', $numbers);\n}", "  if ($numbers == \"zero\") {\n    return\
    \ \"zero\";\n  }\n\n  if ($numbers == \"one\") {\n    return \"one\";\n  }\n\n\
    \  if ($numbers == \"two\") {\n    return \"two\";\n  }\n\n  if ($numbers == \"\
    three\") {\n    return \"three\";\n  }\n\n  if ($numbers == \"four\") {\n    return\
    \ \"four\";\n  }\n\n  if ($numbers == \"five\") {\n    return \"five\";\n  }\n\
    \n  if ($numbers == \"six\") {\n    return \"six\";\n  }\n\n  if ($numbers ==\
    \ \"seven\") {\n    return \"seven\";\n  }\n\n  if ($numbers == \"eight\") {\n\
    \    return \"eight\";\n  }\n\n  if ($numbers == \"nine\") {\n    return \"nine\"\
    ;\n  }\n\n  return $numbers;\n}", "  return $numbers = preg_replace('/[^a-z 0-9]+/i',\
    \ '', $numbers);\n}\n", "  $numbers = str_replace(\" \", \"\", $numbers);\n  $numbers\
    \ = explode(\" \", $numbers);\n  array_multisort($numbers, SORT_NUMERIC, $numbers);\n\
    \  return implode(\" \", $numbers);\n}", "  $list = explode(' ', $numbers);\n\
    \  array_multisort($list, SORT_NUMERIC);\n  return implode(' ', $list);\n}\n</code>\n\
    <|/ a tags=php,arrays,sorting,multidimensional-array |>\n<| a tags=php,arrays,sorting,multidimensional-array\
    \ dscore=3 |>\narray_multisort is good for numeric arrays, but you can easily\
    \ sort multi array numerically by any number of keys in descending order (if your\
    \ arrays always have one key).\nCode: (Demo)\n<code>\n$array = [\n    'a' => 'hello',\n\
    \    'b' => 'world',\n    'c' => 'bye',\n    'd' => 'goodbye'\n];\nusort($array,\
    \ function ($a, $b) {\n    return -strnatcmp($a['c'], $b['c']);\n});\nvar_export($array);\n\
    </code>\nOutput:\n<code>\narray (\n  'd' => 'goodbye',\n  'b' => 'world',\n  'a'\
    \ => 'hello',\n  'c' => 'bye',\n)\n</code>\n<|/ a |>\n<| a dscore=2 |>\n<code>",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}", "    $numbers = str_replace(\" \", \"\", $numbers);\n    $numbers\
    \ = explode(\" \", $numbers);\n    sort($numbers);\n    return implode(\" \",\
    \ $numbers);\n}\n</code>\n<|/ a tags=sorting,php,string dscore=3 |>\n<| a tags=sorting,php,string\
    \ dscore=3 |>\n<code>\n<?php\n\n$text = \"one two three four five\";\n$parts =\
    \ explode(\" \", $text);\nsort($parts);\n$text = implode(\" \", $parts);\n\necho\
    \ $text; // \"one two three four five\"\n", "    // Split the string on space\
    \ and return the array of digits\n    $numbers = explode(' ', $numbers);\n\n \
    \   // Convert all of the strings to integers, sorting them from smallest to largest\n\
    \    // Return the array as a string\n    return implode(' ', array_map('intval',\
    \ $numbers));\n}", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI actually\
    \ found a way around this, but thanks for sharing anyway!\n<|/ c |>\n<| c |>\n\
    I didn't notice that I had used `sort` incorrectly as `sort_numbers`, which is\
    \ now corrected.\n<|/ c |>\n<| a tags=php,sorting,string,number-formatting |>\n\
    Here's my answer:\n<code>\n<?php\n", "\t$numbers = explode(' ', $numbers);\n\t\
    array_multisort($numbers);\n\treturn implode(' ', $numbers);\n}", "  $numbers\
    \ = explode(\" \", $numbers);\n  usort($numbers, \"sort_numbers_function\");\n\
    \  return join(\" \", $numbers);\n}\n", "  // Split input by white space and strip\
    \ each item\n  $numbers = preg_replace('/\\s+/', ' ', $numbers);\n  // Split the\
    \ input by numbers\n  $parts = preg_split('/\\s+/', $numbers);\n  // Re-sort by\
    \ number\n  sort($parts);\n  // Join the results back into a string\n  return\
    \ implode(' ', $parts);\n}\n</code>\n<|/ a tags=php,sorting,numbers dscore=2 |>\n\
    <| c |>\nNice one. I think it may be useful to have a default case where it's\
    \ given a single number to be sorted. I'll add that to the answer.\n<|/ c |>\n\
    <| c |>\nHad a similar idea before and had a problem with it being case sensitive\
    \ when dealing with numbers and `'one'` was greater than `'ONE'`, but your solution\
    \ seems to solve that issue as well.\n<|/ c |>\n<| a |>\n<code>\n$numbers = array(2,5,6,9,4,3,5,7,5,6);\n\
    asort($numbers);\nvar_dump($numbers);\n</code>\nOutputs:\n<code>\narray(6) {\n\
    \  [6]=>\n  int(6)\n  [5]=>\n  int(5)\n  [4]=>\n  int(4)\n  [3]=>\n  int(3)\n\
    \  [2]=>\n  int(2)\n  [7]=>\n  int(7)\n  [1]=>\n  int(1)\n  [5]=>\n  int(5)\n\
    }\n</code>\n<|/ a dscore=2 tags=php,sorting,numbers |>\n<| a tags=php,sorting,numbers\
    \ |>\nTry this\n<code>\n$numbers = array(2,5,6,9,4,3,5,7,5,6);\nasort($numbers);\n\
    $numbers = implode(\" \",$numbers);\n</code>\n<|/ a dscore=1 |>\n<| a |>\nThis\
    \ should do the trick:\n<code>\n<?php\n\n$numbers = array(2,5,6,9,4,3,5,7,5,6);\n\
    \nsort($numbers);\n\n$numbers = implode(\" \",$numbers);\n\nvar_dump($numbers);\n\
    </code>\n<|/ a tags=php,sorting,numbers dscore=1 |>\n<| c |>\nI realize now that\
    \ your answer was written earlier and is more efficient, so I've deleted mine\
    \ and upvoted yours.\n<|/ c |>\n<| a dscore=1 tags=php,sorting,numbers |>\nTry\
    \ this :\n<code>", "  // Split up input string into array of numbers\n  $numbers\
    \ = explode(' ', $numbers);\n  // Convert each number from string to integer\n\
    \  foreach ($numbers as &$number) {\n    $number = intval($number);\n  }\n  //\
    \ Sort numbers descending\n  sort($numbers);\n  // Re-convert each number from\
    \ integer to string\n  foreach ($numbers as &$number) {\n    $number = strval($number);\n\
    \  }\n  // Put numbers back together again\n  return implode(' ', $numbers);\n\
    }\n</code>\nNow we can use this function in our code.\n<code>", "    if ( !preg_match_all('/[0-9]/',\
    \ $numbers, $match) ) {\n        return $numbers;\n    }\n    foreach ($match[0]\
    \ as $match) {\n        $digits = str_split($match, 1);\n        array_multisort($digits);\n\
    \    }\n    return implode(\" \", $match[0]);\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nI've updated my question and added an example with expected results.\n\
    <|/ c |>\n<| c |>\nI've added another solution that's more general, it should\
    \ handle multiple numbers and will sort any string you can throw at it.\n<|/ c\
    \ |>\n<| c |>\nYour code works perfectly, thanks. I chose the other solution,\
    \ because my code works with numbers and strings too.\n<|/ c |>\n<| c |>\nThis\
    \ is working perfectly and simple. But I have a question: How could I change your\
    \ code for sorting numbers from 1 to 100 (because I've tried this solution with\
    \ numbers from 1 to 100 and it didn't work)?\n<|/ c |>\n<| c |>\nYou should be\
    \ able to swap `$ones` to `$tens` but you need to change `preg_match` to `$match`\n\
    <|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>\n$arr = array('four','four',\
    \ 'four', 'four');\n$sorted_arr = array();\n$i = 0;\nforeach($arr as $k => $v)\
    \ {\n    $sorted_arr[$i] = $v;\n    if($i==0){\n        $sorted_arr[$i] = 0;\n\
    \        $i++;\n    }\n    $i++;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nWelcome\
    \ to SO! While this code snippet may solve the question, [including an explanation](//meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers)\
    \ really helps to improve the quality of your post. Remember that you are answering\
    \ the question for readers in the future, and those people might not know the\
    \ reasons for your code suggestion. Please also try not to crowd your code with\
    \ explanatory comments, this reduces the readability of both the code and the\
    \ explanations!\n<|/ c |>\n<| a |>\nAnother solution which doesn't use regular\
    \ expressions.\n<code>\n$numbers = ['four','four', 'four', 'four'];\n\n$result\
    \ = array_shift($numbers);\n\nforeach ($numbers as $number) {\n    if ($number\
    \ == $result) {\n        $result++;\n    } else {\n        array_push($result,\
    \ $number);\n    }\n}\n\nvar_", "  if ($numbers == NULL) return $numbers;\n\n\
    \  foreach (explode(' ', $numbers) as $number) {\n    if (!in_array($number, array('zero',\
    \ 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'))) {\n\
    \      return $numbers;\n    }\n  }\n\n  return $numbers;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nI like this... However, I find it to be pretty inefficient. Would be\
    \ nicer if it could detect if the input was a string or number and do some type\
    \ conversion, but alas PHP doesn't have that built in. Thanks for the answer though!\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>", "  return preg_replace('/([a-z]{2,3})\\s/i',\
    \ '$1 ', $numbers);\n}\n</code>\nOutput:\n<code>\none\ntwo\nthree\nfour\nfive\n\
    six\nseven\neight\nnine\nzero\n</code>\n<|/ a dscore=2 tags=sorting,php,arrays\
    \ |>\n<| a tags=sorting,php,arrays |>\n<code>\n<?php\n\n$nums = array(3, 1, 2,\
    \ 4, 9, 6, 7, 8);\n", "    $nums = explode(\" \", $numbers);\n    sort($nums);\n\
    \    return implode(\" \", $nums);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n+1\
    \ I like the `for` loop. By the way, why do you think the `for each` is not the\
    \ most elegant approach?\n<|/ c |>\n<| c |>\nI do not think it is the most elegant\
    \ solution. I would not use it. It only serves to confuse and lead to bad programming.\
    \ :)\n<|/ c |>\n<| c |>\nIt *is* the most elegant solution, but that doesn't mean\
    \ it is the most efficient solution.  :)\n<|/ c |>\n<| a dscore=1 |>\nThis works\
    \ perfectly fine:\n<code>\n$numbers = \"three one five\";\n$numbers = explode(\"\
    \ \", $numbers);\nsort($numbers);\n$numbers = implode(\" \", $numbers);\necho\
    \ $numbers;\n</code>\n<|/ a tags=php,explode,implode,sorting |>\n<| a dscore=1\
    \ |>\nI know this question is old now, but this solution doesn't use regular expressions\
    \ and is much more concise than a foreach:\n<code>\n$numbers = \"three one five\"\
    ;\n$numbers = array_map('intval', explode(' ', $numbers));\nsort($numbers);\n\
    echo implode(' ', $numbers);\n</code>\n<|/ a tags=php,explode,implode,sorting\
    \ |>\n<| c |>\nThat's cool, but only because `array_map` applies `intval` on each\
    \ element individually. `preg_replace_callback` would do the same thing, but in\
    \ a more readable manner. :)\n<|/ c |>\n<| c |>\nBut using `array_map` would also\
    \ allow you to use `array_column` to extract the values into an array of their\
    \ own - that would be more concise and probably be faster.\n<|/ c |>\n<| a dscore=0\
    \ |>\nHere's an answer using regular expressions and a little bit of string processing.\
    \  I've used the PHP regex function preg_match_all with a positive lookahead to\
    \ match only those numbers following the digits from 0 to 9 (instead of matching\
    \ zero to nine), which then allows us to sort them and re-build the string.\n\
    <code>\n<?php\n", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n \
    \ return implode(' ', $numbers);\n}\n", "    $numbers = explode(' ', $numbers);\n\
    \    sort($numbers);\n    return implode(' ', $numbers);\n}\n", "  $sorted_numbers\
    \ = $numbers;\n  sort($sorted_numbers, SORT_NUMERIC);\n  return $sorted_numbers;\n\
    }\n", "  $numbers = explode(\" \", $numbers);\n  sort($numbers);\n  return implode(\"\
    \ \", $numbers);\n}\n</code>\nThis way you can use this function on multiple arrays\
    \ by just passing them to the function.\nEdit: In case you wish to use the built-in\
    \ PHP function sort() as opposed to creating a custom function you can use this\
    \ code\n<code>\n<?php", "    $numbers = explode(' ', $numbers);\n    // Now we\
    \ have an array of numeric values which can be sorted with asort\n    $numbers\
    \ = asort($numbers);\n    $numbers = implode(' ', $numbers);\n    return $numbers;\n\
    }\n</code>\n<|/ a dscore=0 tags=php,sorting |>\n<| c |>\nI appreciate your efforts\
    \ but its just not what I was looking for. This would require me to update all\
    \ the numbers with `zero` in them to the correct number which I dont want. I want\
    \ to be able to sort any numbers just as I would do with natural sorting using\
    \ the `asort()` function.\n<|/ c |>\n<| c |>\nHow are you sorting your numbers\
    \ without updating them?\n<|/ c |>\n<| c |>\nI updated my question to show how\
    \ im sorting the numbers. im not really sure how to update the numbers to correct\
    \ number as i am using asort which does not do what i want\n<|/ c |>\n<| c |>\n\
    Okay, so in your example you had \"three one five\" as an input.  I assume that\
    \ those values are being sorted by virtue of using asort()?  If so, I think I\
    \ have my solution here: http://codepad.viper-7.com/qI8gZb\n<|/ c |>\n<| c |>\n\
    Hi Michael, thanks for your help but thats not what i wanted. I need to sort any\
    \ number from one to nine. Im not really sure how to update the numbers so i can\
    \ sort them like i would with the asort function.\n<|/ c |>\n<| a tags=php,sorting\
    \ |>\nThe solution is very simple. We only need to use usort to accomplish this.\n\
    The callback function compares the two numbers and return -1, 0 or 1 depending\
    \ on which number should come first in the list.\nHere is an example:\n<code>",
  "  $numbers_array = explode(\" \", $numbers);\n  sort($numbers_array);\n  return\
    \ join(\" \", $numbers_array);\n}\n", "  return preg_replace('/(\\d)(?=(\\d{3})+(?!\\\
    d))/', '$1 ', $numbers);\n}\n</code>\nThe regex looks for any sequence of one\
    \ or more digits (\\d). Then, looks for (\\d{3})+. This will consume all 3 digits\
    \ and then consume the next digit. Repeat that process until there are no more\
    \ digits left.\nThe replacement of $1 with a space is done by looking for a group\
    \ of 3 digits and replacing it with just the captured group ($1). Doing this is\
    \ useful, since if the regex fails to match it will just leave the string unchanged.\
    \ \nAfter the replacement, the number is then sorted from the smallest to the\
    \ largest. \nHere's a demonstration:\n<code>\n$numbers = \"four six five seven\
    \ eight nine\";\necho sort_numbers($numbers);\n", "  return implode(\" \", array_filter(explode(\"\
    \ \", $numbers)));\n}\n</code>\n<|/ a |>\n<| c |>\nThis is not working as expected,\
    \ as for input 'one two three', you got \"one two three\" as output, and it should\
    \ be \"one two three\"\n<|/ c |>\n<| a tags=php |>\nYou can achieve this using\
    \ strtok function like below\n<code>\n$input=\"one two three\";\n$tokens = explode('\
    \ ',$input);\n$sorted_input = implode(' ',array_slice($tokens,1,-1));\necho $sorted_input;\n\
    </code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\nA simple and easy to read one-liner\
    \ using explode:\n<code>\n$string = \"one two three\";\n$array = explode(\" \"\
    , $string);\nsort($array);\n$sorted_string = implode(\" \", $array);\n</code>\n\
    <|/ a tags=php |>\n<| a dscore=2 |>\nThis is another solution, also using array_map\n\
    <code>\n$array = $array1 = array(0 => 'one', 1 => 'two', 2 => 'three', 3 => 'four');\n\
    $array = array_map(function ($value){\n    return $value++;\n}, $array);\nprint_r($array);\n\
    print_r($array1);\n</code>\n<|/ a tags=php |>\n<| a |>\nA short and elegant solution:\n\
    <code>\n$array = array(\"one\", \"two\", \"three\", \"four\", \"five\");\nsort($array);\n\
    </code>\nThe sort() function sorts the array in alphabetical order. Reference:\
    \ http://php.net/manual/en/function.sort.php\n<|/ a tags=php dscore=2 |>\n<| a\
    \ tags=php dscore=2 |>\n<code>\n$array = array(\"one\", \"two\", \"three\", \"\
    four\", \"five\");\n\nsort($array);\n$sortedarray = array_reverse($array);\nsort($sortedarray);\n\
    </code>\n<|/ a |>\n<| a dscore=1 |>\nYou can do it like this: \n<code>\n<?php\n\
    $string = \"one two three\";\n$words = explode(\" \", $string);\nsort($words);\n\
    echo implode(\" \", $words);", "  return preg_replace('/[^a-z]/i', '', $numbers);\n\
    }\n", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a |>\n<| c |>\nThat is great but how do I do\
    \ it for numbers such as \"one two three four five six seven eight nine\"\n<|/\
    \ c |>\n<| c |>\nThat is a different question.  I suggest you accept this answer\
    \ and post a new question for that specific problem.  If you do that, I'll be\
    \ happy to answer it too.\n<|/ c |>\n<| c |>\nOkay, I posted another question\
    \ here: http://stackoverflow.com/questions/13114410/php-sort-numbers-in-string-given-as-numbers\n\
    <|/ c |>\n<| a tags=sorting,php dscore=0 |>\n<code>\n$input = preg_replace('/[^0-9]/',\
    \ '', $string);\n$array = explode(' ', $input);\nsort($array);\n$string = implode('\
    \ ', $array);\n</code>\n<|/ a |>\n<| c |>\nThat is great but how do I do it for\
    \ numbers such as \"one two three four five six seven eight nine\"\n<|/ c |>\n\
    <| a tags=sorting,php |>\nHere's another way to do it:\n<code>", "  global $numbers_arr;\n\
    \  $numbers_arr = explode(\" \", $numbers);\n  $numbers_arr = array_map('intval',\
    \ $numbers_arr);\n  natsort($numbers_arr);\n  $numbers = implode(\" \", $numbers_arr);\n\
    \  return $numbers;\n}\n", "  global $numbers_seen;\n  $numbers_seen = array();\n\
    \  $numbers = explode(' ', $numbers);\n  // Sort the array using the string comparison\n\
    \  usort($numbers, function($a, $b) use ($numbers_seen) {\n    // Get rid of letters\
    \ first and then sort the numbers\n    $a = str_replace(',', '', $a);\n    $b\
    \ = str_replace(',', '', $b);\n    $a1 = (int)$a;\n    $b1 = (int)$b;\n    //\
    \ If one is a number larger than the other, return greater\n    if ($a1 > ($b1\
    \ || 1 || $numbers_seen[$a1])) {\n      return 1;\n    }\n    // If b is a number\
    \ larger than a, return greater\n    if ($b1 > ($a1 || 1 || $numbers_seen[$b1]))\
    \ {\n      return -1;\n    }\n    // If numbers are equal, return greater\n  \
    \  return 0;\n  });\n  return implode(' ', $numbers);\n}", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=arrays,php,sorting |>\n<| a dscore=1 |>\nTry this way\n<code>\n<?php\n\
    \n$numbers = explode(' ', 'three one five');\narray_multisort($numbers);\n\necho\
    \ implode(' ', $numbers);\n</code>\n<|/ a tags=arrays,php,sorting |>\n<| c |>\n\
    `array_multisort` isn't a standard PHP function, so this code may not work everywhere.\n\
    <|/ c |>\n<| a dscore=0 |>\nIf you know that your input will be a string, you\
    \ can easily split it into an array with explode(), then sort the array and join\
    \ it back with implode().\nSomething like this:\n<code>\n$numbers = \"three one\
    \ five\";\n$numbers = explode(\" \", $numbers);\n\nsort($numbers);\n\n$result\
    \ = implode(\" \", $numbers);\n</code>\n<|/ a tags=arrays,php,sorting |>\n<| a\
    \ |>\n<code>\n$input = 'two three one four';\n$array = explode(' ', $input);\n\
    sort($array);\n$result = implode(' ', $array);\n</code>\n<|/ a dscore=0 tags=arrays,php,sorting\
    \ |>\n<| a dscore=0 |>\nYou will need to split the string into an array and then\
    \ sort it using php array sorting functions.\n<code>\n<?php\n$numbers = explode(\"\
    \ \",\"three one five\");\nsort($numbers);\necho implode(\" \",$numbers);", " \
    \ $sorted_numbers = array();\n  foreach (explode(' ', $numbers) as $number) {\n\
    \    $number = trim($number);\n    if ($number) {\n      $sorted_numbers[] = $number;\n\
    \    }\n  }\n  sort($sorted_numbers);\n  return implode(' ', $sorted_numbers);\n\
    }\n", "    return implode(' ', array_map('natsort', explode(' ', $numbers)));\n\
    }", "    $numbers = explode(\" \", $numbers);\n    array_multisort($numbers, SORT_ASC,\
    \ $numbers);\n    return implode(\" \", $numbers);\n}\n", "    $nums = explode('\
    \ ', $numbers);\n    sort($nums);\n    return implode(' ', $nums);\n}", "    $array\
    \ = explode(\" \", $numbers);\n    array_multisort($array, SORT_ASC);\n    return\
    \ implode(\" \", $array);\n}\n</code>\n<|/ a tags=php,sorting,arrays,string |>\n\
    <| c |>\nIt took me a second to realize that you are imploding the array back\
    \ into one string. Nice solution!\n<|/ c |>\n<| a |>\n<code>\n<?php", "  if (strpos($numbers,\
    \ ' ') !== false) {\n    return $numbers;\n  }\n  $numbers = explode(' ', $numbers);\n\
    \  natsort($numbers);\n  return implode(' ', $numbers);\n}\n", "  global $min,\
    \ $max;\n  $array = array_filter(explode(' ', $numbers));\n  $length = count($array);\n\
    \n  sort($array);\n  $index = array_search($min, $array);\n  if ($index == 0)\
    \ $index = $length-1;\n  else if ($index < $length) $index--;\n  elseif ($index\
    \ == $length-1) $index = 0;\n  return implode(' ', array_slice($array, $index,\
    \ $length-$index));\n}", "  return implode($numbers);\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a dscore=0 tags=php,arrays,sorting |>\nMy approach would be to loop over\
    \ the string and count each letter. Once I've done that for each letter, I can\
    \ then output my array in alphabetical order. \n<code>\n$numbers = \"three one\
    \ five\";\n$letterCounts = array();\n\nforeach ($numbers as $number) {\n    $letter\
    \ = substr($number, 0, 1);\n    $letterCounts[$letter]++;\n}\n\nprint_r($letterCounts);\n\
    \n$newArray = array();\n\nforeach ($letterCounts as $letter => $number) {\n  \
    \  $newArray[$letter] = $number;\n}\n\nprint_r($newArray);\n\n$sortedNumbers =\
    \ array();\n\nforeach ($newArray as $value) {\n    $sortedNumbers[] = $value;\n\
    }\n\nprint_r($sortedNumbers);\n</code>\n<|/ a |>\n<| a dscore=0 tags=php,arrays,sorting\
    \ |>\nYou can do this in just one line, using array_count_values and usort (which\
    \ also takes callbacks, to sort strings with numbers, etc.):\n<code>\n$array =\
    \ [\n    'two',\n    'four',\n    'three',\n    'three',\n    'two',\n    'two',\n\
    \    'five',\n    'three',\n    'five',\n    'three',\n    'two',\n    'three',\n\
    \    'five',\n    'two',\n    'two',\n    'two',\n    'three',\n    'two',\n \
    \   'three',\n    'two',\n    'five',\n    'five',\n    'three',\n    'five',\n\
    \    'two',\n    'two',\n    'five',\n    'five',\n    'five',\n    'two',\n \
    \   'three',\n    'two',\n    'three',\n    'two',\n    'two',\n    'two',\n \
    \   'two',\n    'five',\n    'five',\n    'five',\n    'three',\n    'three',\n\
    \    'two',\n    'two',\n    'five',\n    'two',\n    'two',\n    'two',\n   \
    \ 'three',\n    'three',\n    'three',\n    'three',\n    'two',\n    'two',\n\
    \    'three',\n    'two',\n    'three',\n    'five',\n    'two',\n    'two',\n\
    \    'two',\n    'five',\n    'five", "  $number_strings = explode(' ', $numbers);\n\
    \  $number_strings = array_filter($number_strings, 'trim');\n  return implode('\
    \ ', array_map(function($number) {\n    // Convert any string of numbers to an\
    \ array.\n    return preg_split('/\\s+/', $number);\n  }, $number_strings));\n\
    }", "  $numbers = explode(\" \", $numbers);\n  sort($numbers);\n  return implode(\"\
    \ \", $numbers);\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThat's definitely the\
    \ correct answer, and it should have been voted up.  But there are a few reasons\
    \ why some people would not accept it:\n1) The original question asks for a way\
    \ to do this without the use of eval (which should always be avoided if at all\
    \ possible).\n2) The original question specifically asks for a PHP solution.\n\
    3) There are already very good PHP answers posted.\n<|/ c |>\n<| c |>\n+1 for\
    \ the PHP version without `eval()`; a good answer should try to avoid using `eval()`\n\
    <|/ c |>\n<| c |>\nI'm sorry, but you just gave me a headache. Just because someone\
    \ asked for it without `eval()`, but then somebody gave an answer that uses `eval()`\
    \ without saying why :P\n<|/ c |>\n<| c |>\nI did a quick test in PHP 5.3 and\
    \ it seems to work fine. Why would you avoid `eval()` though?\n<|/ c |>\n<| c\
    \ |>\nBecause it's so easy to get it wrong.  I once worked on a project that used\
    \ `eval()` to do some simple string substitution, and it broke a lot of the other\
    \ code.\n<|/ c |>\n<| a dscore=5 |>\nA PHP 5.4 example (thanks Josh):\n<code>\n\
    $numbers = \"6 4 2 5 8 4 3 7 7 7 3 4 9 5 7 9 2 5 6 5 6\";\n$numbers_array = array_map(function($value)\
    \ { return $value * 10; }, explode(' ', $numbers));\nsort($numbers_array);\nprint_r($numbers_array);\n\
    </code>\n<|/ a tags=sorting,string,php,arrays |>\n<| a tags=sorting,string,php,arrays\
    \ |>\nI wrote a simple function for this.\n<code>", "  global $numbers_array;\n\
    \n  // If we're given an invalid number format, abort.\n  if (!is_string($numbers)\
    \ || !is_numeric($numbers)) {\n    return;\n  }\n\n  // Turn input into a list\
    \ of strings or ints\n  if (!is_array($numbers_array)) {\n    // Split on space\n\
    \    $numbers_array = explode(\" \", $numbers);\n  }\n\n  // Sort!\n  sort($numbers_array);\n\
    \n  return implode(\" \", $numbers_array);\n}", "    $result = array();\n    $numbers\
    \ = explode(' ', $numbers);\n    $numbers = array_map('trim', $numbers);\n   \
    \ sort($numbers);\n    foreach($numbers as $number) {\n        $result[] = $number;\n\
    \    }\n    return implode(' ', $result);\n}\n</code>\n<|/ a dscore=1 |>\n<| c\
    \ |>\n`array_map` doesn't accept `NULL` as the callback argument; use `array_map('trim',\
    \ ...)` instead.\n<|/ c |>\n<| c |>\nGood catch, thanks. I've edited my answer\
    \ accordingly.\n<|/ c |>\n<| c |>\nNice. One thing I noticed is that my input\
    \ was also a string, not an array. `array_map('trim', explode(' ', $numbers))`\
    \ seems to work, though.\n<|/ c |>\n<| a |>\n<code>\n$numbers = explode(' ', $numbers);\n\
    $numbers = array_map('trim', $numbers);\nsort($numbers);\nreturn implode(' ',\
    \ $numbers);\n</code>\n<|/ a dscore=1 tags=php,sorting |>\n<| c |>\n`array_map`\
    \ doesn't accept `NULL` as the callback argument; use `array_map('trim', ...)`\
    \ instead.\n<|/ c |>\n<| a dscore=1 |>\nI believe the best way would be to explode(),\
    \ then sort(), then implode().\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n\
    return implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\n\
    `array_map` doesn't accept `NULL` as the callback argument; use `array_map('trim',\
    \ ...)` instead.\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\n$numbers = explode('\
    \ ', $numbers);\nsort($numbers);\nreturn implode(' ', $numbers);\n</code>\n<|/\
    \ a dscore=0 |>\n<| a |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n\
    $numbers = array_map('trim', $numbers);\nreturn implode(' ', $numbers);\n</code>\n\
    <|/ a tags=php,sorting dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n$numbers\
    \ = explode(' ', $numbers);\nsort($numbers);\nreturn implode(' ', $numbers);\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=", "  $arr = explode(' ', $numbers);\n\
    \  array_multisort($arr);\n  return implode(' ', $arr);\n}\n</code>\n<|/ a tags=sorting,algorithm,php\
    \ |>\n<| c |>\n`array_multisort` does not preserve the original order of elements\
    \ with duplicate keys.\n<|/ c |>\n<| c |>\n: I see that now and have updated the\
    \ example.  However, since this example is in PHP, it doesn't matter that much.\
    \  It might be useful for someone else reading the question as I did when I found\
    \ this answer.\n<|/ c |>\n<| c |>\n: Also note that the first example has a bug\
    \ in it which is why I posted it that way.  See my edit and example.\n<|/ c |>\n\
    <| c |>\nWhy would you do that?\n<|/ c |>\n<| c |>\n: I have tested this and found\
    \ that if there are two or more equal keys, only one of them will be sorted. If\
    \ you need all equal keys, then you either have to put them into another array\
    \ or use a different sort function.\n<|/ c |>\n<| a tags=sorting,algorithm,php\
    \ |>\nYou can use http://php.net/manual/en/function.array-multisort.php for sorting\
    \ and http://php.net/manual/en/function.array-push.php for pushing elements into\
    \ array.\n<|/ a dscore=3 |>\n<| c |>\nI'm sorry, but this is wrong. `array_multisort()`\
    \ does not preserve the original order of elements with duplicate keys.\n<|/ c\
    \ |>\n<| c |>\n: Yes, I realized that after I wrote this answer.  It was a bug\
    \ in my example, so I updated my example and pointed it out.\n<|/ c |>\n<| c |>\n\
    : I updated my answer to point this out.  I apologize for being unclear in the\
    \ first place and thanks for your reminder.\n<|/ c |>\n<| c |>\nThis was a little\
    \ unclear in my question and I've updated it to make it clearer.\n<|/ c |>\n<|\
    \ a dscore=2 |>\nIf you need to maintain the original order, you can use the following:\n\
    <code>", "  foreach (explode(' ', $numbers) as $number) {\n    if (0 > $number[0]\
    \ || 9 > $number[0] || $number[0] != $number[1]) {\n      return false;\n    }\n\
    \  }\n  return $numbers;\n}\n</code>\n<|/ a tags=algorithm,php,sorting dscore=1\
    \ |>\n<| c |>\nThis seems to be a much cleaner solution, however this doesn't\
    \ really answer the question of how to do it without repeating code.  You still\
    \ have to remember to write out this if statement for each number.\n<|/ c |>\n\
    <| c |>\nThe function `sort_numbers()` is *very* easy to maintain, since it is\
    \ self-contained. I do not see a way to avoid repeating that code - unless you\
    \ change the language (Python, Ruby, ...) or the programming language itself (Haskell,\
    \ ...). You also do not need to repeat `if` statements over and over again. One\
    \ could implement an `if` statement as an expression, and `return` the expression\
    \ in every `if` statement. But that would not make for a very pleasant or compact\
    \ code.\n<|/ c |>\n<| c |>\nThe answer is \"no\", you simply cannot do it without\
    \ a custom function or class.  It is also impossible to solve this without repeating\
    \ code.  You have to know what numbers are being sorted.  You have to know what\
    \ to sort them by.  How can you do this without repeating code?\n<|/ c |>\n<|\
    \ a dscore=1 |>\nHere's one way to do it in Ruby.\n<code>\ndef sort_numbers($numbers)\n\
    \  numbers.chars.sort.join(' ')\nend\n\nsort_numbers(\"one two three four five\
    \ six seven eight nine\")\n  #=> \"one two three four five six seven eight nine\"\
    \n</code>\nHow it works\nFirst we convert the string into an Array of single characters,\
    \ sort the Array, and then convert the Array back to a String.\n<|/ a tags=algorithm,php,sorting\
    \ |>\n<| c |>\nI like this one the most because it makes it very clear what is\
    \ happening.  I think it is also the most readable, although I like the ruby version\
    \ as well.  I accepted this answer.\n<|/ c |>\n<| a dscore=0 |>\nYou can use a\
    \ function like this:\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=sorting,php |>\n<| a\
    \ dscore=0 |>\nA recursive solution:\n<code>", "    $numbers = explode(' ', $numbers);\n\
    \    sort($numbers);\n    return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,string,sorting\
    \ |>\n<| c |>\nIf you're going to post a code-only answer, at least provide a\
    \ brief explanation.\n<|/ c |>\n<| c |>\nCode only answers are discouraged as\
    \ they do not provide insight to the OP or future visitors to SO.\n<|/ c |>\n\
    <| c |>\nI rewrote the whole answer after some research and got this answer after\
    \ reading your answer which was the accepted one (I did upvote it though). So\
    \ +1 from me ;-)\n<|/ c |>\n<| c |>\nWell that code looks way better. Why not\
    \ use that?\n<|/ c |>\n<| c |>\nI didn't want to assume that someone would understand\
    \ the explanation since I don't know PHP and since it's not in the original question,\
    \ my answer didn't need to be that long. I just thought I should give a brief\
    \ explanation.\n<|/ c |>\n<| a |>\nYou can split your input string with explode\
    \ to an array of numbers, sort it with sort and implode to put it back together:\n\
    <code>", "  // Convert input to a set of numbers based on what it contains.\n\
    \  // Strip leading and trailing spaces.\n  $numbers = preg_replace('/\\s+/',\
    \ '', $numbers);\n  // Remove non-numeric characters.\n  $numbers = preg_replace('/[^0-9\\\
    .]*/', '', $numbers);\n  // Split the numbers into an array and sort them.\n \
    \ $numbers_array = explode(' ', $numbers);\n  array_multisort($numbers_array,\
    \ SORT_ASC, $numbers_array);\n  // Convert back to a string and return.\n  return\
    \ implode(' ', $numbers_array);\n}\n</code>\n<|/ a |>\n<| a |>\nIf you just want\
    \ the numbers sorted alphabetically, you can just use sort($numbers) like so:\n\
    <code>\n$numbers = \"three one two four seven eight nine five\";\nsort($numbers);\n\
    echo $numbers;\n</code>\nIt will output:\n<code>\none two three four five seven\
    \ eight nine\n</code>\n<|/ a dscore=4 tags=php,sorting |>\n<| a |>\n<code>\n$string\
    \ = \"three one two four seven eight nine five\";\n$numbers = preg_replace('/[^0-9\\\
    .]*/','',$string);\n$array = explode(' ', $numbers);\narray_multisort($array,\
    \ SORT_DESC, $array);\n$numbers = implode(' ', $array);\n</code>\n<|/ a tags=php,sorting\
    \ dscore=4 |>\n<| a |>\n<code>\n$numbers = preg_replace('/[^0-9\\.]*/', '', $numbers);\n\
    $numbers = explode(' ', $numbers);\narray_multisort($numbers, SORT_DESC, $numbers);\n\
    $numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting dscore=4 |>\n\
    <| c |>\nJust an FYI, you don't need the $numbers = preg_replace('/[^0-9\\.]*/',\
    \ '', $numbers); line because preg_replace would return an array.\n<|/ c |>\n\
    <| a |>\n<code>\n$numbers = preg_replace('/[^0-9\\.]*/', '', $numbers);\n$numbers\
    \ = explode(' ', $numbers);\narray_multisort($numbers, SORT_DESC, $numbers);\n\
    $numbers = implode(' ', $numbers);\n</code>\n<|/ a dscore=3 tags=php,sorting |>\n\
    <| a dscore=2 |>\nIf you need to keep spaces then you can do the following:\n\
    <code>\n$numbers = \"three one two four ", "  $numbers_array = explode(\" \",\
    \ $numbers);\n  $numbers_array = array_map('intval', $numbers_array);\n  array_multisort($numbers_array,\
    \ SORT_ASC, SORT_NUMERIC, $numbers_array);\n  return implode(\" \", $numbers_array);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis worked for me. I just put\
    \ it in my PHP code. Thanks a lot :)\n<|/ c |>\n<| a |>\n<code>\n$a = \"six nine\
    \ three seven two four five eight\";\n$b = \"one two three four five six seven\
    \ eight nine\";\n$array = explode(' ',$a);\nsort($array);\n$array = explode('\
    \ ',$b);\nsort($array);\necho implode(' ',$array);\n</code>\n<|/ a tags=php,sorting\
    \ dscore=4 |>\n<| a |>\nHere's a simple function that sorts an array of strings\
    \ by numeric value:\n<code>", "    return $numbers;\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nThis doesn't seem to work with the string \"three one five\". It's sorting\
    \ them as three four five.\n<|/ c |>\n<| c |>\n- That's why I used `preg_replace`,\
    \ which replaces spaces with single spaces prior to sorting. `three one five`\
    \ gets turned into `three one five` before it is sorted and therefore the spaces\
    \ get replaced. `three one five` becomes `three  one  five` before sorting, which\
    \ is the desired result.\n<|/ c |>\n<| c |>\nI still don't see how this works.\
    \ If the input is \"one three four\" this returns \"onethreefour\", but according\
    \ to your answer, the output is \"one three four\"\n<|/ c |>\n<| c |>\n- I updated\
    \ my answer to clarify what is happening. The input was `three one five` and it\
    \ sorted that to `three  one  five`. That is how it works and is what was asked\
    \ for in my answer.\n<|/ c |>\n<| c |>\nI see it now. Thanks for the explanation.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$test = \"four one two three zero nine\"\
    ;", "  $parts = explode(' ', $numbers);\n  sort($parts);\n  return implode(' ',\
    \ $parts);\n}\n", "  $numbers = explode(' ', $numbers);\n  array_splice($numbers,\
    \ 0, 4);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n", "  $numbers_array\
    \ = explode(' ', $numbers);\n  natsort($numbers_array);\n  $numbers_string = implode('\
    \ ', $numbers_array);\n  return $numbers_string;\n}", "    $numbers = preg_replace('/[^0-9]+/',\
    \ '', $numbers);\n    return implode(\" \", array_keys($numbers));\n}", "  return\
    \ sort(array_slice(explode(' ', $numbers), 0, 9, true));\n}", "  if ($numbers\
    \ === 'zero' || $numbers === 'nine') {\n    return $numbers;\n  }\n\n  $numbers_arr\
    \ = explode(' ', $numbers);\n  $numbers_arr = array_map('intval', $numbers_arr);\n\
    \  sort($numbers_arr);\n  return implode(' ', $numbers_arr);\n}\n</code>\n<|/\
    \ a tags=php |>\n<| a tags=php |>\nThis answer only addresses the issue of removing\
    \ the word 'and' at the end of a sentence.\nThe solution uses a regex to match\
    \ all words that start with 'and' and then replace the match with the word itself.\
    \ The replacement can be empty string.\n<code>\n$sentence = preg_replace('/(and\\\
    s+)(\\w+)/i', '$2', $sentence);\n</code>\n<|/ a dscore=0 |>\n<| a |>\nThis solution\
    \ works for me:\n<code>\n<?php\n$sentence = \"The quick brown fox jumps over the\
    \ lazy dog.\";\n$sentence = preg_replace('/[!?.,\\(\\)]\\s*$/', '', $sentence);\n\
    echo $sentence;\n</code>\nOutput:\n<code>\nThe quick brown fox jumps over the\
    \ lazy dog.\n</code>\n<|/ a tags=php dscore=0 |>\n<| a |>\nThe most elegant way\
    \ of removing this unwanted thing at the end is by using PHP function str_replace\n\
    <code>\n<?php\n$sentence = \"The quick brown fox jumps over the lazy dog.\";\n\
    $sentence = str_replace(\"and\", \"\", $sentence);\necho $sentence;\n</code>\n\
    The output will be\n<code>\nThe quick brown fox jumps over the lazy dog.\n</code>\n\
    <|/ a dscore=0 tags=php |>\n<| a |>\nThe str_replace solution is good, but if\
    \ the word 'and' is in the middle, it won't work.\n<code>\n$sentence = str_replace(\"\
    \ and\", \"\", $sentence);\n</code>\nThe other solution is to replace 'and' with\
    \ a word you define after stripping all the extra spaces, for example:\n<code>\n\
    $sentence = preg_replace(\"/(\\sand\\s|\\sand\\s)/\", \"and\", $sentence);\n</code>\n\
    <|/ a tags=php dscore=0 |>\n<| a dscore=0 |>\nThis will give you the desired result.\n\
    <code>\n<?php\n$sentence = \"The quick brown fox jumps over the lazy dog.\";\n\
    $sentence = preg_replace('/[!?.,\\(\\)]\\s*$/', '', $sentence);\necho $sentence;\n\
    </code>\nOutput:\n<code>\nThe quick brown fox ", "    if (empty($numbers)) {\n\
    \        return '';\n    }\n    $numbers = explode(' ', $numbers);\n    sort($numbers);\n\
    \    return implode(' ', $numbers);\n}\n</code>\n<|/ a |>\n<| c |>\nWhat is the\
    \ purpose of 'return' in both ifs?\n<|/ c |>\n<| c |>\n`return` exits a function\
    \ and gives a value back to where it was called. If you have `return foo()` and\
    \ inside `foo()` you have `return bar()`, then `foo()` will `return` the value\
    \ `bar()` returns. `return $a` will set `$a` to the value `bar()` returns.\n<|/\
    \ c |>\n<| c |>\nSo it is the same as doing `return $a;` inside `bar()`? Or should\
    \ it be `return $a;` inside `foo()` ?\n<|/ c |>\n<| c |>\nI thought you were returning\
    \ the value from within the function. Is that not correct? I thought `return $a;`\
    \ returned the value `foo()` returns, which is what `bar()` returns.\n<|/ c |>\n\
    <| a |>\n<code>\n<?php echo sort_numbers('three one five'); ?>\n</code>\n<|/ a\
    \ dscore=2 tags=php |>\n<| a |>\n<code>", "    $numbers = explode(\" \", $numbers);\n\
    \    sort($numbers);\n    return implode(\" \", $numbers);\n}\n", "  $numbers\
    \ = array_map('intval', explode(' ', $numbers));\n  // Sorting from smallest to\
    \ largest.\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php |>\n<| c |>\nPlease add some explanation to your code such that\
    \ others can learn from it\n<|/ c |>\n<| a dscore=0 |>\nHere is my solution. Might\
    \ help someone else.\n<code>", "    return implode(\n        \" \",\n        array_map(\n\
    \            function ($value) {\n                return strval($value);\n   \
    \         },\n            array_map(\n                function ($value) {\n  \
    \                  switch ($value) {\n                        case \"0\":\n  \
    \                          return 0;\n                        case \"1\":\n  \
    \                          return 1;\n                        case \"2\":\n  \
    \                          return 2;\n                        case \"3\":\n  \
    \                          return 3;\n                        case \"4\":\n  \
    \                          return 4;\n                        case \"5\":\n  \
    \                          return 5;\n                        case \"6\":\n  \
    \                          return 6;\n                        case \"7\":\n  \
    \                          return 7;\n                        case \"8\":\n  \
    \                          return 8;\n                        case \"9\":\n  \
    \                          return 9;\n                        default:\n     \
    \                       return $value;\n                    }\n              \
    \  },\n                explode(\" \", $numbers)\n            )\n        )\n  \
    \  );\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nA great answer, but i don't know\
    \ if i can use this to my problem, but this really help me out in my project.\
    \ Thank you very much.\n<|/ c |>\n<| a tags=php,sorting |>\nAnother alternative\
    \ is to use the sort function in PHP. I've modified the code example from the\
    \ PHP site to remove some stuff that was already in the code. I've also added\
    \ a line break, so you can copy and paste it and see the output.\n<code>\n$numbers\
    \ = array(\"one\", \"three\", \"two\", \"five\");\nsort($numbers);\nprint_r($numbers);\n\
    </code>\nThat will give you the following output:\n<code>\nArray\n(\n    [0] =>\
    \ one\n    [1] => three\n    [2] => two\n    [3] => five\n)\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,sorting |>\nJust use sort function in php array. Refer below\
    \ link for more clarification.\nhttp://www.w3schools.com/php/func_array_sort.asp\n\
    <|/ a dscore=0 |>\n<| c |>\nThe OP has stated that they want to sort the numbers\
    \ from smallest to largest.\n<|/ c |>\n<| a dscore=0 tags=php,sorting |>\n<code>\n\
    $array = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\");\nsort($array);\n\
    print_r($array);\n</code>\n<|/ a |>\n<| c |>\nThe OP has stated that they want\
    \ to sort the numbers from smallest to largest.\n<|/ c |>\n<| a dscore=0 |>\n\
    For a more robust method, you can use a custom sort function\n<code>\n$numbers\
    \ = array(\"one\", \"three\", \"", "  return preg_replace(\"/(.*)(\\d+)(.*)/\"\
    , \"\\\\3 \\\\1 \\\\2\", $numbers);\n}", "    return implode(\" \", array_map(function\
    \ ($number) {\n        return str_pad($number, 3, '0', STR_PAD_LEFT);\n    },\
    \ (array) explode(' ', $numbers)));\n}\n</code>\n<|/ a tags=php,string,arrays,numbers,sorting\
    \ dscore=2 |>\n<| a |>\n<code>\n$str=\"one two three four five six seven eight\
    \ nine zero\";\n$arr=explode(' ',$str);\n$temp=array();\n$arr=array();\nfor($i=0;$i<count($arr)-1;$i++)\n\
    {\n    if($arr[$i]>$arr[$i+1])\n    {\n        $temp[$i]=$arr[$i];\n        $arr[$i]=$arr[$i+1];\n\
    \        $arr[$i+1]=$temp[$i];\n    }\n}\n\n$str1=implode(' ',$arr);\necho $str1;\n\
    </code>\n<|/ a tags=php,string,arrays,numbers,sorting dscore=1 |>\n<| a |>\nI\
    \ added a space after each number in the string so the string can actually be\
    \ split on the spaces.\n<|/ a tags=php,string,arrays,numbers,sorting dscore=1\
    \ |>\n<| c |>\nThe string actually can have more than one space. That's why I\
    \ used `preg_replace()` to replace multiple spaces with a single space. Your solution\
    \ would still work just fine.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n   \
    \ $numbers = \"zero one two three four five six seven eight nine\";\n    $arr\
    \ = explode(\" \", $numbers);\n    $arr = array_filter($arr, \"strlen\");\n  \
    \  $arr = array_map(\"str_pad\", $arr);\n    $numbers = implode(\" \", $arr);\n\
    \    echo $numbers;", "    $nums = explode(' ', $numbers);\n    sort($nums);\n\
    \    return implode(' ', $nums);\n}\n", "    $numbers = preg_split('/\\s+/', $numbers);\n\
    \    sort($numbers);\n    return implode(\" \", $numbers);\n}\n", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n", "    foreach (explode(' ', $numbers) as $number) {\n        $number = trim($number);\n\
    \        if (!in_array($number, array('zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine'))) {\n            return false;\n        }\n\
    \    }\n    return $numbers;\n}\n</code>\n<|/ a tags=arrays,sorting,php |>\n<|\
    \ c |>\nThanks this is great, and I'm sure it will be useful in the future. However,\
    \ I really only need to do this in PHP so this isn't really an option for me right\
    \ now.\n<|/ c |>\n<| a |>\n<code>", "    $array = explode(' ', $numbers);\n  \
    \  sort($array);\n    return implode(' ', $array);\n}\n</code>\n<|/ a tags=php\
    \ dscore=2 |>\n<| a dscore=2 |>\nI've done it like this.\n<code>\n<?php\n", " \
    \   $parts = explode(' ', $numbers);\n    usort($parts, function($a, $b) {\n \
    \       return strcmp($a, $b);\n    });\n    return implode(' ', $parts);\n}\n",
  "    // Split the input string into an array of numbers.\n    $numbers = preg_split('/\\\
    s+/', $numbers);\n\n    // Create a new array containing the numbers in sorted\
    \ order.\n    $nums = array();\n\n    // Sort the array of numbers into the sorted\
    \ array of numbers.\n    for ($i = 0; $i < count($numbers); $i++) {\n        $nums[$numbers[$i]]\
    \ = $i;\n    }\n\n    // Create a new output string by adding the sorted numbers.\n\
    \    $result = \"\";\n    foreach ($nums as $number => $index) {\n        $result\
    \ .= $number . \" \";\n    }\n    return $result;\n}", "  return preg_replace('/(\\\
    d+)(\\D)/', '$2 $1', $numbers);\n}\n", "    $words = explode(' ', $numbers);\n\
    \    sort($words);\n    return implode(' ', $words);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=0 |>\nHere's a very simple solution that uses array_multisort\
    \ and array_map to re-arrange the array in the order you require.\n<code>", " \
    \   return sort($numbers);\n}\n</code>\n<|/ a |>\n<| a tags=sorting,php |>\nHere's\
    \ a really simple way of doing it, since sorting a space-delimited string is pretty\
    \ easy.\n<code>\n<?php", "  // If the string is empty just return it\n  if(!$numbers)\
    \ {\n    return $numbers;\n  }\n  // Make sure we're dealing with an array\n \
    \ if(!is_array($numbers)) {\n    return $numbers;\n  }\n  // If it's already sorted,\
    \ just return it\n  if(in_array($numbers, $numbers)) {\n    return $numbers;\n\
    \  }\n  // Convert each string to a number from 0 to 9\n  $numbers_array = array_map(function($number)\
    \ {\n    return str_to_int($number);\n  }, $numbers);\n  // Sort the array and\
    \ convert the strings into strings again\n  sort($numbers_array);\n  return implode(\"\
    \ \", $numbers_array);\n}\n", "  global $sort_mode;\n  $numbers = explode(' ',\
    \ $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n", "   \
    \ $choices = explode(' ', $numbers);\n    $length = count($choices);\n\n    //\
    \ Make sure the string has at least two choices\n    if ($length < 2) {\n    \
    \    return $numbers;\n    }\n\n    // Use a for loop to loop over the choices,\
    \ sorting the choices as we go\n    for ($i = 0; $i < $length - 1; $i++) {\n \
    \       $current_choice = $choices[$i];\n        $next_choice = $choices[$i +\
    \ 1];\n\n        // Check if the next choice is greater than the current one\n\
    \        if ($next_choice < $current_choice) {\n            $choices[$i + 1] =\
    \ $current_choice;\n            $choices[$i] = $next_choice;\n        }\n    }\n\
    \n    // Return the sorted string with numbers sorted from smallest to largest\n\
    \    return implode(' ', $choices);\n}\n</code>\nIt should be noted that this\
    \ is a very basic example of sorting in PHP. There are many ways to do this, such\
    \ as using usort, or with loops. A better solution might use array_multisort,\
    \ which can sort the array's contents both by key or value. Another thing is that\
    \ this code doesn't handle numbers with leading zeros.\n<|/ a dscore=0 |>\n<|\
    \ c |>\nHi Matt,\nThank you for the comment. I just tried to run the code and\
    \ it didn't work. Do you think it can be adjusted to work? I'm new to PHP and\
    \ learning so not sure how to run it.\n<|/ c |>\n<| c |>\nI added some comments\
    \ to help you understand where it goes wrong and where you should go from there.\
    \ I hope this helps!\n<|/ c |>\n<| c |>\nThank you. I just added the 'one' and\
    \ it worked after that but I think it could be adjusted for it to work with numbers\
    \ such as 'three one two five'. I just don't know where to go from there. I appreciate\
    \ the help.\n<|/ c |>\n<| c |>\nI'm sorry Matt, I didn't respond earlier. I tested\
    \ your code and it's not working correctly. For example I tested with \"three\
    \ one two five\" and the code returned \"two three five\". I need the code to\
    \ return \"one two three five\" when I input \"three one two five\". I'm sorry\
    \ for all the questions. I am not very good at programming and this is part of\
    \ my first attempt at writing code. Thanks again for the help.\n<|/ c |>\n<| c\
    \ |>\nYou're right, I missed that detail. I'll try to work on it a little bit\
    \ and see if I can find an answer.\n<|/ c |>\n<| a |>\n<code>\n<?php\n\n$user_input\
    \ = trim(strip_tags(strtolower($", "  $numbers = explode(\" \", $numbers);\n \
    \ $numbers = array_map(\"strtolower\", $numbers);\n  array_multisort($numbers);\n\
    \  return implode(\" \", $numbers);\n}\n", "    if (strpos($numbers, \" \") ===\
    \ false) {\n        return false;\n    }\n    $numbers = explode(\" \", $numbers);\n\
    \    // Find all numbers in $numbers and sort them from smallest to largest.\n\
    \    foreach ($numbers as $number) {\n        if (in_array($number, array('zero',\
    \ 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'))) {\n\
    \            $numbers[] = $number;\n        }\n    }\n    sort($numbers);\n  \
    \  // Turn the sorted array back into a space-delimited string.\n    return implode(\"\
    \ \", $numbers);\n}\n", "  $numbers = explode(' ', $numbers);\n  $sorted_numbers\
    \ = array();\n  foreach ($numbers as $number) {\n    if ($number >= '0' && $number\
    \ <= '9') {\n      $sorted_numbers[] = $number;\n    }\n  }\n  sort($sorted_numbers);\n\
    \  return implode(' ', $sorted_numbers);\n}\n", "  $numbers = explode(' ', $numbers);\n\
    \  return implode(' ', array_map('intval', $numbers));\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\nHere's my answer, using regular expressions.\n<code>\n<?php\n\n\
    $string = \"two one two four six nine six eight three four six\";\n\n$string =\
    \ ($string) ? preg_replace(\"/^([nine]{9})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})$/i\"\
    , \"\\$1\\\\2\\\\3\\\\4\\\\5\\\\6\\\\7\\\\8\\\\9\", $string) : $string;\necho\
    \ \"$string\\n\";\n\n$string = ($string) ? preg_replace(\"/^([nine]{9})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})$/i\"\
    , \"\\$1\\\\2\\\\3\\\\4\\\\5\\\\6\\\\7\\\\8\\\\9\", $string) : $string;\necho\
    \ \"$string\\n\";\n\n$string = ($string) ? preg_replace(\"/^([nine]{9})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})([nine]{1})$/i\"\
    , \"\\$1\\\\2\\\\3\\\\4\\\\5\\\\6\\\\7\\\\8\\\\9\", $string) : $string;\necho\
    \ \"$", "  // Return an empty string for an empty string\n  if (!$numbers) {\n\
    \    return \"\";\n  }\n  // Extract the numbers from the string\n  $numbers =\
    \ explode(\" \", $numbers);\n  // Sort the numbers from smallest to largest\n\
    \  sort($numbers);\n  // Return the numbers as a single string\n  return implode(\"\
    \ \", $numbers);\n}\n", "  return sort(array_filter(explode(' ', $numbers)));\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays dscore=0 |>\n<code>", "  global\
    \ $numbers_sorted, $n;\n  $n = 0;\n  $numbers_sorted = array();\n  foreach (explode('\
    \ ', $numbers) as $n) {\n    $numbers_sorted[$n] = $n;\n  }\n  asort($numbers_sorted);\n\
    \  return implode(' ', $numbers_sorted);\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ dscore=0 tags=sorting,php,arrays |>\nI did this with the help of array_multisort\
    \ in PHP. Maybe it can be improved but works perfectly for me :)\n<code>\n$arr\
    \ = array(\n    'one' => 2,\n    'two' => 3,\n    'three' => 4,\n    'four' =>\
    \ 5,\n    'five' => 6,\n    'six' => 7,\n    'seven' => 8,\n    'eight' => 9,\n\
    \    'nine' => 10,\n    'zero' => 0,\n);\n", "  $list = explode(' ', $numbers);\n\
    \  array_walk($list, function(&$el, $i) {\n    if ($el == 'zero') $el = 'zero';\n\
    \    else if ($el == 'one') $el = 'one';\n    else if ($el == 'two') $el = 'two';\n\
    \    else if ($el == 'three') $el = 'three';\n    else if ($el == 'four') $el\
    \ = 'four';\n    else if ($el == 'five') $el = 'five';\n    else if ($el == 'six')\
    \ $el = 'six';\n    else if ($el == 'seven') $el = 'seven';\n    else if ($el\
    \ == 'eight') $el = 'eight';\n    else if ($el == 'nine') $el = 'nine';\n  });\n\
    \  sort($list);\n  return implode(' ', $list);\n}\n", "  global $sorted_numbers;\n\
    \  $sorted_numbers = array();\n  $numbers = explode(' ', $numbers);\n  foreach\
    \ ($numbers as $key => $number) {\n    if ($number == 'nine') $number = 9;\n \
    \   $sorted_numbers[] = $number;\n  }\n  natsort($sorted_numbers);\n  return implode('\
    \ ', $sorted_numbers);\n}\n", "  $sorted_numbers = \"\";\n  $number_array = explode('\
    \ ', $numbers);\n  rsort($number_array);\n  foreach($number_array as $n) {\n \
    \   $sorted_numbers .= $n;\n  }\n  return $sorted_numbers;\n}\n", "  return str_replace('\
    \ ', '', explode(' ', preg_replace('/[^0-9.]/', '', $numbers)));\n}\n\n/**\n *\
    \ Convert numbers into strings that can be compared.\n * \n * @param string|array\
    \ $numbers The numbers to convert.\n * @return array The converted numbers.\n\
    \ */", "    $ints = explode(' ', $numbers);\n    // Loop through all numbers in\
    \ array and convert to ints\n    foreach($ints as $key => $int) {\n        $ints[$key]\
    \ = (int)$int;\n    }\n    // Sort array of ints\n    sort($ints);\n    // Remove\
    \ spaces from start and end of array strings\n    $ints = array_map('trim', $ints);\n\
    \    // Join ints back into a string with spaces between them\n    return implode('\
    \ ', $ints);\n}", "    $numbers = explode(\" \", $numbers);\n    sort($numbers);\n\
    \    $result = implode(\" \", $numbers);\n    return $result;\n}\n</code>\n<|/\
    \ a tags=php dscore=1 |>\n<| a dscore=1 tags=php |>\nHere's a slightly different\
    \ version. This will keep the \"zero\" value at the start of the array rather\
    \ than the end, and it allows leading zero's. \n<code>\n<?php", "  if (is_numeric($numbers))\
    \ return $numbers;\n  return preg_replace('/[^0-9,]/', '', $numbers);\n}\n", " \
    \ $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nPlease don't forget to accept\
    \ the answer that helped you the most. Thank you.\n<|/ c |>\n<| a tags=sorting,php,numbers\
    \ dscore=0 |>\nIf you're looking to convert strings to numbers and then sort by\
    \ number value, then the following function should work:\n<code>", "    $numbers\
    \ = explode(' ', $numbers);\n    sort($numbers);\n    return implode(' ', $numbers);\n\
    }\n</code>\nIn your case you may use the following:\n<code>", "  return implode('\
    \ ', array_map(function($n) { return str_replace(array('zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine'), array('', '', 'a', 'b', 'c',\
    \ 'd', 'e', 'f', 'g', 'h', 'i', 'j'), $n); }, explode(' ', $numbers)));\n}\n</code>\n\
    <|/ a dscore=5 tags=string,algorithm,sorting,php |>\n<| c |>\nThanks Andrew. This\
    \ is a great solution, very easy to read, easy to write and easy to extend.\n\
    <|/ c |>\n<| c |>\nWas looking for a solution where I could input a number from\
    \ 1-9, and sort them from smallest to largest. But this is great!\n<|/ c |>\n\
    <| a dscore=4 |>\nIf you're only ever going to be sorting from 0 to nine you can\
    \ use a nested loop to compare each digit of the number with each other digit\
    \ of the number.  In each loop increment your current value by 10 if you find\
    \ an equal digit.\n<code>\n$numbers = \"three two five\";\n$i = 0;\n$result =\
    \ '';\n\nforeach ($numbers as $value) {\n    if ($i < strlen($numbers)) {\n  \
    \      $j = ++$i;\n        while ($j < strlen($numbers) && $numbers[$j] == $numbers[$i])\
    \ {\n            $j++;\n        }\n        $result .= $numbers[$i];\n        $result\
    \ .= $numbers[$j];\n        $i += $j - $i;\n    }\n}\n</code>\n<|/ a tags=string,algorithm,sorting,php\
    \ |>\n<| c |>\nThe only problem with this, is that it would not sort the last\
    \ number correctly\n<|/ c |>\n<| c |>\nIt would be interesting to know which algorithm\
    \ this uses.\n<|/ c |>\n<| c |>\nI agree with Andrew, this is not a sorting algorithm.\n\
    <|/ c |>\n<| a dscore=4 |>\nIf you're willing to use a custom sort function then\
    \ you can do it using usort() as follows:\n<code>", "  $arr = explode(' ', $numbers);\n\
    \  sort($arr);\n  return implode(' ', $arr);\n}", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n", "  $numbers = array_filter(explode('\
    \ ', $numbers));\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    (note: I haven't tested this code, but I hope it gives you the idea of how you\
    \ can do this sort of thing)\n<|/ a dscore=1 |>\n<| c |>\nIt looks like you've\
    \ copied [this answer](http://stackoverflow.com/a/2784993/825097), which has two\
    \ errors. You also should note that the accepted answer uses a [regex](http://php.net/manual/en/function.preg-match.php)\
    \ instead of a string.\n<|/ c |>\n<| c |>\nYeah I guess I missed that.  I've fixed\
    \ the code by removing the explode and using implode.  I'll add the preg_match\
    \ as you suggested\n<|/ c |>\n<| c |>\nIt's a good idea to test this code before\
    \ posting it, so that future readers are warned of any problems they may have\
    \ found. Your regex would also fail to match the example input `\"two\" five \"\
    one\" six\"` because of the spaces. I suggest making a note of the limitations\
    \ of the regex you provide in your answer, especially since it looks like a homework\
    \ assignment.\n<|/ c |>\n<| c |>\nThanks for that.  I made the changes you suggested\
    \ above.  I guess I'm still a little unsure on how to get the numbers into a format\
    \ that I can then sort as opposed to just sorting them as strings.\n<|/ c |>\n\
    <| c |>\nThanks for the feedback and pointers.  I did test the code and it seems\
    \ to work fine.  I will look into it more to ensure it is what I want though.\
    \  I guess I didn't think about it that way.\n<|/ c |>\n<| a tags=php |>\nTo get\
    \ your results ordered from smallest to largest, simply use the array_multisort()\
    \ function\nhttp://php.net/manual/en/function.array-multisort.php\nThe second\
    \ parameter is a string containing the column(s) to order in ascending order.\
    \ You can specify multiple columns by separating them with commas.\n<code>\n<?php",
  "  $numbers = preg_split('/\\s+/', $numbers);\n  foreach ($numbers as &$number)\
    \ {\n    $number = (trim($number) > 0) ? $number : \"nine\";\n  }\n  array_multisort($numbers,\
    \ SORT_NUMERIC, $numbers);\n  return implode(' ', $numbers);\n}\n", "    $valid\
    \ = array('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');\n    $sorted = array();\n    foreach (explode(' ', $numbers) as $number)\
    \ {\n        if (!in_array($number, $valid)) {\n            continue;\n      \
    \  }\n        $number = $valid[$valid = array_search($number, $valid)];\n    \
    \    array_push($sorted, $number);\n    }\n    return implode(' ', $sorted);\n\
    }\n", "  $result = array();\n  foreach (explode(' ', $numbers) as $number) {\n\
    \    $number = trim($number);\n    if (is_numeric($number) && array_key_exists($number,\
    \ $result)) {\n      $result[$number]++;\n    } else {\n      $result[$number]\
    \ = 1;\n    }\n  }\n\n  uksort($result);\n  foreach ($result as $key => $val)\
    \ {\n    $result[$key] = $key;\n  }\n\n  return implode(' ', $result);\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't seem to work - it doesn't sort the numbers in\
    \ an ascending order, just rearranges the numbers based on their frequency. Example:\
    \ sort_numbers('two one three four one three four') returns \"one three four one\
    \ three four\". Sort by frequency first, then by number: sort_numbers('two one\
    \ three four one three four') returns \"one three four one two three\".\n<|/ c\
    \ |>\n<| c |>\nThat is correct, but it was meant to be an example of the idea.\
    \ The algorithm could easily be modified to handle that case. I've updated the\
    \ answer to clarify and add the example you asked for.\n<|/ c |>\n<| a tags=sorting,php\
    \ |>\nIt appears there is an O(n) solution to this, using the fact that each number\
    \ will be preceded by the number of times it appears earlier in the input. \n\
    If you're not concerned with performance, you could try something like this:\n\
    <code>", "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays dscore=0\
    \ |>\n<| c |>\nThat is a much more elegant solution and I'm up-voting it.  However,\
    \ it fails because `explode` does not like an array, which makes sense because\
    \ `$_POST['numbers']` isn't an array.  However, `$_POST['numbers']` is a string\
    \ which breaks the solution.  Any ideas on how to make this work without using\
    \ a string?\n<|/ c |>\n<| c |>\nAh, the issue is with the `explode` function.\
    \  It doesn't like an array, but then again, how could it do that?  What would\
    \ it explode it by?\n<|/ c |>\n<| c |>\n`explode` doesn't need to explode an array.\
    \ It can explode a string containing spaces into an array of strings. Try it out!\n\
    <|/ c |>\n<| c |>\n`$_POST['numbers']` is a string because that's what the form\
    \ field in the HTML was named. It was meant to be a string of numbers separated\
    \ by spaces. Your solution would require the user to enter something like `one\
    \ two three` instead of `one two three`.\n<|/ c |>\n<| c |>\nAh!  That makes sense.\
    \  Thanks for the explanation.  My bad for not understanding that.\n<|/ c |>\n\
    <| a tags=php,sorting,arrays |>\nYou can't. \nPHP is executed line-by-line. At\
    \ that point, the $_POST superglobal hasn't been populated with your form's data\
    \ yet. The $_POST superglobal is a dynamic variable, populated with the contents\
    \ of $_GET and $_REQUEST superglobals.\nYou can still get the content of a file\
    \ using the file_get_contents function, but that's only for a single file. Your\
    \ input form is in a different file than the script that processes it.\nThe only\
    \ way to process form data from a file would be to use another form that posts\
    \ to the same page, or to process the form data server-side, and pass it along\
    \ via a URL. The latter option may seem easier, but it's not necessarily as elegant.\n\
    What are you actually trying to do? Sort a form submission? If so, then you should\
    \ just use an HTML form that posts to the same page (with method=\"post\"), and\
    \ then use the code from the accepted answer.\n<|/ a dscore=0 |>\n<| c |>\nI'm\
    \ basically trying to sort a database by descending order of numbers.  I have\
    \ a form to input the numbers and then a button to ", "    $array = explode('\
    \ ', $numbers);\n    $array = array_map('intval', $array);\n    sort($array);\n\
    \    return implode(' ', $array);\n}", "    $number_list = preg_split('/[\\s]+/',\
    \ $numbers);\n    arsort($number_list);\n    return implode(' ', $number_list);\n\
    }\n</code>\n<|/ a tags=php,laravel-5.2,laravel,laravel-5 |>\n<| c |>\nThanks for\
    \ your answer! I have this error (Call to undefined function App\\Http\\Controllers\\\
    sort_numbers()) when trying to use your function.\n<|/ c |>\n<| c |>\nThe `sort_numbers`\
    \ function isn't an Laravel function, it is a custom function in an external PHP\
    \ file you'll have to include somewhere in your project. The code in your question\
    \ is Laravel PHP, but the code in the answer doesn't show where you included it.\
    \ If you're new to Laravel I recommend you read https://laravel.com/docs/5.2/quickstart#introduction\n\
    <|/ c |>\n<| c |>\nOh now i understand :) Sorry for my misunderstanding! I added\
    \ the external PHP file to the app directory and it works now! Thanks so much\
    \ for you help! :)\n<|/ c |>\n<| c |>\nGlad to help. If this answer resolved your\
    \ question, please consider marking it as accepted (green tick next to it). This\
    \ shows other users that you've found a solution.\n<|/ c |>\n<| a tags=php,laravel-5.2,laravel,laravel-5\
    \ |>\nI use the following solution in my projects (the function is placed inside\
    \ App\\Helpers folder):\n<code>\n<?php", "    $sorted = array();\n    $numbers\
    \ = explode(' ', $numbers);\n    foreach ($numbers as $number) {\n        $number\
    \ = preg_replace('/[^0-9]/', '', $number);\n        $sorted[] = $number;\n   \
    \ }\n    asort($sorted);\n    return implode(' ', $sorted);\n}\n", "  // Create\
    \ a copy of $numbers to avoid changes to the original variable.\n  $numbers_copy\
    \ = array_map('intval', explode(' ', $numbers));\n  array_multisort($numbers_copy,\
    \ SORT_ASC, $numbers_copy, SORT_NUMERIC, $numbers_copy);\n  return implode(' ',\
    \ $numbers_copy);\n}", "  if (!is_string($numbers) || !strlen($numbers)) {\n \
    \   return $numbers;\n  }\n  $numbers_array = explode(' ', $numbers);\n  array_multisort($numbers_array,\
    \ SORT_NUMERIC, $numbers_array);\n  return implode(' ', $numbers_array);\n}",
  "    $numbers = explode(' ', $numbers);\n    return implode(' ', array_map(function($n)\
    \ {\n        if (in_array($n, ['nine', 'eight', 'seven', 'six', 'five', 'four',\
    \ 'three', 'two', 'one'])) {\n            return $n;\n        }\n        return\
    \ strrev($n);\n    }, $numbers));\n}\n", "  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n\n$numbers = array(\"one\", \"three\", \"five\", \"seven\"\
    , \"nine\", \"zero\");\necho sort_numbers($numbers) . \"\\n\";", "  $sorted_numbers\
    \ = array();\n  foreach (explode(' ', $numbers) as $value) {\n    $value = trim($value,\
    \ '\\'');\n    if (preg_match('/^(\\d)$/', $value)) {\n      // $value is a valid\
    \ number.\n      $sorted_numbers[] = $value;\n    }\n  }\n  sort($sorted_numbers);\n\
    \  return implode(' ', $sorted_numbers);\n}\n</code>\n<|/ a dscore=5 |>\n<| c\
    \ |>\nAh yes, I forgot that (but was also trying to use the function incorrectly).\
    \ Thanks!\n<|/ c |>\n<| c |>\nThis solution doesn't work with numbers with leading\
    \ zeros, e.g. 01, 02, 03, etc. Just replace \"if (preg_match('/^(\\d)$/', $value))\"\
    \ with \"if (preg_match('/^(0*[1-9][0-9]*)(\\d)$/', $value))\".\n<|/ c |>\n<|\
    \ c |>\nIt does work with leading zeros, I made a test case and added a comment\
    \ in the code - it works fine here: http://codepad.org/1Zi4Q8lC\n<|/ c |>\n<|\
    \ c |>\nThanks for the reply! I've tried it and it works, but it seems to be slower\
    \ than the other solutions.\n<|/ c |>\n<| a |>\nTry this simple solution\n<code>",
  "    return array_map(function($num) { return sprintf(\"%d%s\", (int)$num, chr(ord($num)\
    \ + 1)); }, explode(' ', $numbers));\n}", "    return sort($numbers, SORT_NUMERIC);\n\
    }\n", "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return\
    \ implode(' ', $numbers);\n}\n", "    // Split string into array on spaces\n \
    \   $numbers = explode(' ', $numbers);\n    // Sort numbers by sorting first digit\
    \ to biggest and second digit to smallest\n    array_multisort(\n        array_map('intval',\
    \ str_split($numbers, 1)),\n        SORT_ASC\n    );\n    // Concatenate array\
    \ elements into a string with spaces separating them\n    return implode(' ',\
    \ $numbers);\n}\n</code>\nOutput\n<code>\nArray\n(\n    [0] => one\n    [1] =>\
    \ two\n    [2] => three\n    [3] => four\n    [4] => five\n    [5] => six\n  \
    \  [6] => seven\n    [7] => eight\n    [8] => nine\n    [9] => zero\n)\n</code>\n\
    Demo on 3v4l.org\nNote that this isn't necessarily the best way to sort numbers.\
    \ The PHP manual on array sorting suggests using the intval() function, which\
    \ converts a string to an integer, sorts it, and converts it back into a string.\n\
    <|/ a tags=arrays,sorting,php dscore=0 |>\n<| a |>\nThis should work also:\n<code>\n\
    $array = [\n    'six nine four two',\n    'eight three seven five',\n    'one\
    \ three two zero',\n    'eight one two four',\n    'nine four five three',\n \
    \   'two three six seven',\n    'five four three six',\n    'zero three six one'\n\
    ];\n\n$result = array();\n\nforeach ($array as $key => $item) {\n    $words =\
    \ explode(' ', $item);\n    array_walk($words,\n        function ($x, $key, $result)\
    \ use (&$words) {\n            $result[$key] = $x;\n        }\n    );\n    asort($result);\n\
    \    $result[] = implode(' ', $words);\n}\n\nprint_r($result);\n</code>\n<|/ a\
    \ tags=arrays,sorting,php dscore=0 |>\n<| a tags=arrays,sorting,php dscore=0 |>\n\
    <code>\n$arr = array(\n    'six nine four two',\n    'eight three seven five',\n\
    \    'one three two zero',\n    'eight one two four',\n    'nine four five three',\n\
    \    'two three six seven',\n    'five four three six',\n    'zero three six one'\n\
    );\n\nusort($arr, function($a, $b) {\n    $a = str_replace(' ', '', ", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }", "  $result = \"\";\n  $numbers = explode(\" \", $numbers);\n  sort($numbers);\n\
    \  foreach($numbers as $number) {\n    $result .= $number;\n  }\n  return $result;\n\
    }\n", "  return str_replace('zero', '', str_replace('nine', 'nine ', str_replace('\
    \ ', '', $numbers)));\n}\n", "  $words = explode(' ', $numbers);\n  sort($words);\n\
    \  return implode(' ', $words);\n}", "    $numbers = preg_replace(\"/[^0-9.]/\"\
    , \"\", $numbers);\n    $numbers = explode(\" \", $numbers);\n    sort($numbers);\n\
    \    return implode(\" \", $numbers);\n}\n</code>\n<|/ a dscore=0 tags=sorting,php\
    \ |>\n<| a tags=sorting,php |>\nYou can use the following code to sort an array\
    \ of integers ascending order\n<code>\n$numbers = [7, 5, 4, 2, 9, 1, 6, 3]; //The\
    \ array of integers\nnatsort($numbers); //The function sorts array in ascending\
    \ order using the natural order \n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n\
    <?php\n\n$numbers = [7, 5, 4, 2, 9, 1, 6, 3];\n\n$output = array();\n$i = 1;\n\
    \nforeach ($numbers as $key => $value) {\n    if ($i == 1) {\n        $output[]\
    \ = $value;\n    } else {\n        $output[$key] = $value;\n    }\n    $i++;\n\
    }\n\n$keys = array_keys($output);\n\nforeach ($keys as $key) {\n    $output[$key]\
    \ = array_pop($output);\n}\n\nprint_r($output);\n</code>\n<|/ a dscore=0 tags=sorting,php\
    \ |>\n<| a tags=sorting,php |>\n<code>", "  // Return string with all non-numeric\
    \ characters removed\n  $numbers_cleaned = preg_replace('/[^\\d]+/', '', $numbers);\n\
    \  // Remove whitespace\n  $numbers_cleaned = preg_replace('/\\s/', '', $numbers_cleaned);\n\
    \  // Split on spaces and cast to array\n  $numbers_array = explode(' ', $numbers_cleaned);\n\
    \  // Sort numerically\n  sort($numbers_array);\n  return implode(' ', $numbers_array);\n\
    }", "  $sortedNumbers = explode(' ', $numbers);\n  asort($sortedNumbers);\n  return\
    \ implode(' ', $sortedNumbers);\n}\n", "    // Split the string into an array\
    \ of numbers, with the numbers delimited by spaces\n    $numbers = explode(\"\
    \ \", $numbers);\n\n    // Loop over the array of numbers and sort them from smallest\
    \ to largest\n    foreach ($numbers as $key => $value) {\n        // If the current\
    \ number is not valid, skip it\n        if (!in_array($value, range(0,9))) continue;\n\
    \n        // Increment the number by one and put that in the new array\n     \
    \   $numbers[$key] = $value + 1;\n    }\n\n    // Return the sorted array of numbers\n\
    \    return implode(\" \", $numbers);\n}", "  $numbers = explode(' ', $numbers);\n\
    \  array_splice($numbers, 0, 3);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n", "    list($one, $two, $three) = explode(' ', $numbers);\n    return $one\
    \ . ' ' . $three . ' ' . $two;\n}\n", "    $nums = explode(' ', $numbers);\n \
    \   sort($nums, SORT_NUMERIC);\n    return implode(' ', $nums);\n}", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting dscore=2 |>\n<| c |>\nThis doesn't work in\
    \ PHP 7.2 due to the `sort` function being changed from `usort` which has since\
    \ been removed and is now `sort`.\n<|/ c |>\n<| c |>\nPHP 7.2 changed the usort\
    \ function, so now you just need to change usort with sort. https://3v4l.org/Z5uY9\n\
    <|/ c |>\n<| a |>\nHere is a version that works even if you have mixed string\
    \ and numbers :\n<code>", "  global $counter;\n  $counter = 0;\n  $numbers_array\
    \ = explode(' ', $numbers);\n  sort($numbers_array);\n  $result = implode(' ',\
    \ $numbers_array);\n  echo $result;\n  return $result;\n}\n", "  // Split by spaces\n\
    \  $numbers = explode(' ', $numbers);\n  // Split by numbers\n  foreach ($numbers\
    \ as $key => $number) {\n    $numbers[$key] = (int) $number;\n  }\n  // Sort numbers\n\
    \  sort($numbers);\n  // Convert back to string and return\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is exactly what\
    \ I was looking for! Works perfectly! Thank you so much!\n<|/ c |>\n<| c |>\n\
    You're welcome - good luck with your project\n<|/ c |>\n<| a dscore=0 tags=php,sorting,arrays\
    \ |>\n<code>\n<?php\n", "    $numbers = preg_replace(\"/[^0-9]+/\", \"\", $numbers);\
    \ // remove all non-numbers\n    $numbers = preg_split(\"/\\s+/\", $numbers);\
    \ // split into array\n    sort($numbers); // sort array\n    $result = \"\";\n\
    \    foreach ($numbers as $number) {\n        if ($number !== \"\") $result .=\
    \ $number . \" \"; // append to result string\n    }\n    return $result;\n}\n",
  "  // Make sure the input is a valid number\n  if(!(is_numeric($numbers) && strlen($numbers)\
    \ === 9)) {\n    return false;\n  }\n  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=algorithm,php,sorting\
    \ |>\n<| c |>\n: Thanks for the reminder, I hadn't noticed it.\n<|/ c |>\n<| a\
    \ dscore=3 tags=algorithm,php,sorting |>\nIn case you're not aware, Ruby's sort\
    \ method has a similar functionality to the PHP function usort:\n<code>\n$numbers\
    \ = \"one three five two five nine\";\nsort($numbers, SORT_NATURAL);\nprint $numbers;\n\
    </code>\nOutputs:\n\none three five two five nine\n\nI prefer this method to sorting\
    \ arrays, because you don't have to use sort() directly on the array. In addition,\
    \ it's easier to implement a more complex sorting method than what PHP has to\
    \ offer (I realize this is an old question, but I thought I'd answer anyways).\n\
    <|/ a |>\n<| a |>\nYou might want to check out this post Sorting numbers natural\
    \ language in PHP:\nhttp://forums.devshed.com/php-development-5/sorting-numbers-natural-language-php-55398.html\n\
    The author describes how to sort natural language numbers (which are basically\
    \ just strings of characters) by their numeric value, while maintaining the correct\
    \ order of words (i.e. \"one\" before \"two\" before \"three\" before \"four\"\
    \ before \"five\" before \"six\" before \"seven\" before \"eight\" before \"nine\"\
    ).\n<code>", "  return implode('', array_map(function($number) {\n    return $number\
    \ === 'zero' ? 0 :\n           $number === 'nine' ? 9 :\n           preg_match('/^([0-9]+)\\\
    s+([0-9]+)$/', $number, $matches) ?\n             $matches[2] :\n            \
    \ 0;\n  }, explode(' ', $numbers)));\n}\n</code>\n(It doesn't exactly return 'nine'\
    \ or 'ninety', but it's close).\n<|/ a dscore=1 |>\n<| c |>\nThank you, I will\
    \ try your solution and let you know how it goes :)\n<|/ c |>\n<| a dscore=0 tags=php,string\
    \ |>\nTry this:\n<code>\n<?php\n$str = 'one two three four five six seven eight\
    \ nine';\n$newStr = '';\n$str_array = explode(' ', $str);\n$str_array = array_filter($str_array);\n\
    $str_array = sort($str_array);\nforeach ($str_array as $val)\n{\n    $newStr .=\
    \ $val . \" \";\n}\necho $newStr;", "    if (is_string($numbers) && preg_match('/^[a-z\
    \ ]*$/i', $numbers)) {\n        \n        // Convert the string to a set of ints\n\
    \        $nums = array_map(function ($n) {\n            return intval($n);\n \
    \       }, SORT_NUMERIC_SORT_STRING ? explode(' ', $numbers) : array_values(preg_split('/\
    \ /', $numbers)));\n        \n        // Sort the set\n        sort($nums);\n\
    \        \n        // Convert back to string\n        return implode(' ', $nums);\n\
    \    }\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis works great for sorting a\
    \ field of numbers. However, it still doesn't work well with mixed numbers. \"\
    10 10 1\" comes before \"10 10 20\" because 10 is higher than 20 because it's\
    \ a string. This code will convert all of the numbers into integers so you can\
    \ sort them correctly\n<|/ c |>\n<| c |>\nI added a version that converts strings\
    \ to integers and then sorts them.\n<|/ c |>\n<| c |>\nHow would you change this\
    \ so that the second example would be ordered as \"one two three\" ?\n<|/ c |>\n\
    <| c |>\nIf you need to sort by more than one field: \n`usort($nums, function($a,\
    \ $b){\n    return strcmp($a, $b); // string ascending\n});\nusort($nums, function($a,\
    \ $b){\n    return strcmp($b, $a); // string descending\n});`\n<|/ c |>\n<| a\
    \ |>\nA simpler solution: Use PHP's built in sort function\n<code>\n$string =\
    \ \"one two three\";\n$array = explode(\" \", $string);\nsort($array);\n$string\
    \ = implode(\" \", $array);\n</code>\n<|/ a tags=php,string,sorting dscore=4 |>\n\
    <| c |>\nIf you're using PHP > 5.3, you could also use `usort()` with a custom\
    \ comparison function.\n<|/ c |>\n<| c |>\nBut this doesn't do what he asked for:\
    \ \"from smallest to largest\"\n<|/ c |>\n<| c |>\nI realize this was answered\
    \ a long time ago, but for anyone who stumbles across this question this answer\
    \ will do exactly what he wants, without using regex.\n<|/ c |>\n<| a |>\n<code>",
  "    $numbers = explode(\" \", $numbers);\n    usort($numbers, function($a, $b)\
    \ {\n        $a = strrev($a);\n        $b = strrev($b);\n        if ($a < $b)\
    \ {\n            return -1;\n        } else if ($a > $b) {\n            return\
    \ 1;\n        } else {\n            return 0;\n        }\n    });\n\n    return\
    \ implode(\" \", $numbers);\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nTry this:\n\
    <code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n", "  $numbers_arr = explode(\" \", $numbers);\n  sort($numbers_arr);\n\
    \  return implode(\" \", $numbers_arr);\n}", "  $words = explode(' ', $numbers);\n\
    \  sort($words);\n  return implode(' ', $words);\n}\n", "    return sort(array_map('trim',\
    \ explode(' ', $numbers)));\n}\n</code>\n<|/ a tags=arrays,php,sorting |>\n<|\
    \ c |>\nThank you, this answer is really helpful.\n<|/ c |>\n<| a tags=arrays,php,sorting\
    \ dscore=3 |>\n<code>", "    $numbers = preg_replace('/\\s+/', '', $numbers);\n\
    \    $numbers = preg_replace('/[^0-9\\s]/', '', $numbers);\n    $numbers = preg_split('/[\\\
    s,]+/', $numbers);\n    usort($numbers, 'sort_numbers');\n    return implode('\
    \ ', $numbers);\n}\n", "  $array = explode(\" \", $numbers);\n  sort($array);\n\
    \  return implode(\" \", $array);\n}\n</code>\n<|/ a tags=sorting,algorithm,php,math,string\
    \ |>\n<| c |>\nI thought about writing a similar solution but your solution is\
    \ cleaner and shorter.\n<|/ c |>\n<| a |>\nHere is one way:\n<code>\n<?php\n$numbers\
    \ = array(\"four\",\"three\",\"two\",\"one\");\n$numbers = array_reverse($numbers);\n\
    print_r($numbers);", "\t$array = explode(\" \", $numbers);\n\tsort($array);\n\t\
    return implode(\" \", $array);\n}", "    $result = $numbers;\n    foreach (explode('\
    \ ', $numbers) as $num) {\n        $num = trim($num);\n        if (!preg_match('/^[0-9]+$/',\
    \ $num)) {\n            throw new InvalidArgumentException('Input should be space-delimited\
    \ with one or more numbers');\n        }\n        $result = str_replace($num,\
    \ $num . ' ', $result);\n    }\n    return $result;\n}\n", "  return implode('',\
    \ array_map('natsort', $numbers));\n}\n</code>\n<|/ a dscore=4 |>\n<| a |>\nThe\
    \ PHP documentation says that:\n\nnatsort() doesn't sort numbers correctly, because\
    \ numbers don't compare as equal when sorted alphabetically. \n\nThe function\
    \ does seem to sort them correctly with spaces or commas, but you need to add\
    \ the spaces to the numbers.\n<code>\n<?php\n$numbers = [\n    'one',\n    'three',\n\
    \    'two ',\n    'four',\n    'five',\n    'two ',\n    'three',\n    'four'\n\
    ];\nprint_r(natsort($numbers));\n</code>\nOutput:\n<code>\nArray\n(\n    [0] =>\
    \ one\n    [1] => three\n    [2] => two \n    [3] => four\n    [4] => five\n \
    \   [5] => two \n    [6] => three\n    [7] => four\n)\n</code>\nThe function works\
    \ correctly with spaces:\n<code>\n<?php\n$numbers = [\n    'one ',\n    'three',\n\
    \    'two ',\n    'four',\n    'five',\n    'two ',\n    'three',\n    'four'\n\
    ];\nprint_r(natsort($numbers));\n</code>\nOutput:\n<code>\nArray\n(\n    [0] =>\
    \ one \n    [1] => three\n    [2] => two \n    [3] => four\n    [4] => five\n\
    \    [5] => two \n    [6] => three\n    [7] => four\n)\n</code>\nBut it does not:\n\
    <code>\n<?php\n$numbers = [\n    'one',\n    'three ',\n    'two ',\n    'four',\n\
    \    'five',\n    'two ',\n    'three',\n    'four'\n];\nprint_r(natsort($numbers));\n\
    </code>\nOutput:\n<code>\nArray\n(\n    [0] => one\n    [1] => three \n    [2]\
    \ => two \n    [3] => four\n    [4] => five\n    [5] => two \n    [6] => three\n\
    \    [7] => four\n)\n</code>\n<|/ a dscore=4 tags=sorting,php,natural-sort,numbers,arrays\
    \ |>\n<| a dscore=2 |>\nHere's a quick example of natsort:\n<code>", "  $numbers\
    \ = explode(\" \", $numbers);\n  sort($numbers);\n  return implode(\" \", $numbers);\n\
    }\n</code>\n<|/ a tags=php,wordpress |>\n<| a tags=php,wordpress |>\nTry this\n\
    <code>", "  // Your code here\n}", "  if ($numbers === '') {\n    return '';\n\
    \  }\n  $parts = explode(' ', $numbers);\n  return implode(' ', array_map('sort_numbers_part',\
    \ $parts));\n}\n", "  return implode(' ', array_map('intval', explode(' ', $numbers)));\n\
    }\n", "  // Split string into an array of number strings\n  $numbers_array = preg_split('/\\\
    s+/', $numbers);\n\n  // Convert array of numbers into array of ints\n  foreach($numbers_array\
    \ as &$number) {\n    $number = (int) $number;\n  }\n\n  // Sort numbers array\n\
    \  sort($numbers_array);\n\n  // Put numbers back together in a string\n  return\
    \ implode(' ', $numbers_array);\n}\n</code>\n<|/ a |>\n<| c |>\nI believe there\
    \ is a slight error in the code. Shouldn't it be `preg_split('/\\s+/', $numbers);`\
    \ and not `preg_split('/\\s+/', $numbers, null, PREG_SPLIT_NO_EMPTY);` ?\n<|/\
    \ c |>\n<| c |>\n`preg_split('/\\s+/', $numbers, null, PREG_SPLIT_NO_EMPTY);`\
    \ would not work because `preg_split()` returns `array` with string elements.\
    \ But `preg_match_all()` returns `array` with sub-arrays. So, `$numbers_array`\
    \ would be `array( array(), array(), ... )` with empty arrays. If you use `preg_match_all()`\
    \ then the `foreach` would work fine.\n<|/ c |>\n<| c |>\nI see what you mean.\
    \ Yes, the `foreach` would work fine, but that would return an array of arrays\
    \ and not just a single array with all of the numbers. That is why I used `preg_split()`\
    \ in the first place. Using `preg_match_all` gives you an array of sub-arrays\
    \ (`array( array(), array(), ... )`). Using `preg_split` gives you an array of\
    \ strings (`array( \"0\", \"1\", \"2\", ... )`). When you `implode` them together,\
    \ it would create an empty string `\"\"` which would not be a valid sorting criteria.\n\
    <|/ c |>\n<| c |>\nI see. Thank you for clarifying this!\n<|/ c |>\n<| c |>\n\
    Thank you for your answer. It works fine with me. But the result is `1 10 11`.\
    \ I want the results to be sorted\n<|/ c |>\n<| a dscore=5 tags=sorting,string,numbers,php\
    \ |>\nThe solution using preg_split:\n<code>\n<?php\n$numbers = \"three one five\"\
    ;\n$numbersArray = preg_split('/\\s+/', $numbers);\nsort($numbersArray);\n$newNumbers\
    \ = implode(' ', $numbersArray);\nprint_r($newNumbers);", "    $words = explode('\
    \ ', $numbers);\n    sort($words);\n    return implode(' ', $words);\n}", "  $numbers\
    \ = explode(\" \", $numbers);\n  $sorted = array();\n  foreach ($numbers as $number)\n\
    \    $sorted[$number]++;\n  return implode(\" \", array_keys($sorted));\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis is very similar to one of the other answers. I liked the\
    \ simplicity of it, but it is unfortunately not correct for the specific input\
    \ I gave in the example. While the code does solve the example in the OP, it does\
    \ not for the actual problem I am trying to solve. This code does not output the\
    \ correct answer for that example.\n<|/ c |>\n<| c |>\nI appreciate the help very\
    \ much, I did see my mistake.\n<|/ c |>\n<| c |>\nI ended up implementing something\
    \ similar to's solution. However I did this without using `sort()` but instead\
    \ added each number to a `stack` array and then used a recursive function to output\
    \ the array. I used `array_pop` to get each number out of the stack and then added\
    \ it to the output string.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n<?php",
  "\t$numbers = preg_replace('/\\s+/', ' ', $numbers);\n\t$choices = preg_split('/\\\
    s+/', $numbers);\n\t$min_choice = array_shift($choices);\n\tusort($choices, function($a,\
    \ $b) use ($min_choice) {\n\t\t$a = preg_replace('/\\s+/', ' ', $a);\n\t\t$b =\
    \ preg_replace('/\\s+/', ' ', $b);\n\t\t$aNum = array_diff($a, $min_choice);\n\
    \t\t$bNum = array_diff($b, $min_choice);\n\t\treturn strnatcmp($aNum, $bNum);\n\
    \t});\n\t$res = implode(' ', $choices);\n\treturn $res;\n}", "    $split = explode('\
    \ ', $numbers);\n    sort($split, SORT_NUMERIC);\n    return implode(' ', $split);\n\
    }\n</code>\n<|/ a tags=numbers,sorting,php |>\n<| a dscore=2 |>\nYou could also\
    \ use usort:\n<code>\n$a = explode(' ', $numbers);\nusort($a, \"cmp\");\n", " \
    \   // Split the numbers into an array\n    list($numArray) = explode(' ', $numbers);\n\
    \n    // Sort the array from smallest to largest\n    sort($numArray);\n\n   \
    \ // Return the sorted array\n    return implode(' ', $numArray);\n}\n", "   \
    \ $array = explode(' ', $numbers);\n    array_multisort($array, SORT_NUMERIC,\
    \ SORT_ASC, array($this, 'sort_numbers_callback'));\n    return implode(' ', $array);\n\
    }\n", "    return preg_replace_callback('~(^| )([0-9]+)(?= |$)~', function($match)\
    \ {\n        return $match[1] . strval($match[2]);\n    }, $numbers);\n}\n</code>\n\
    <|/ a |>\n<| a dscore=1 |>\nJust for fun, here is an implementation that doesn't\
    \ use regex:\n<code>", "    $parts = explode(' ', $numbers);\n    array_walk($parts,\
    \ function(&$part) { $part = strtr($part, '0', '9'); });\n    sort($parts);\n\
    \    return implode(' ', $parts);\n}\n</code>\n<|/ a tags=php,sorting,arrays,string\
    \ |>\n<| c |>\nI'm getting \"syntax error, unexpected T_FUNCTION\" on the line\
    \ containing `array_walk`\n<|/ c |>\n<| c |>\nI'm getting \"undefined constant\
    \ sort_numbers\" when using this.\n<|/ c |>\n<| c |>\nThanks, this worked perfectly!\
    \ I only had to add a semicolon at the end of the last line of the `sort_numbers`\
    \ function.\n<|/ c |>\n<| c |>\nJust a heads up, `array_walk` does not modify\
    \ the array it acts on, so you need to return the array value if you want to use\
    \ it.\n<|/ c |>\n<| c |>\nAh, I see! Thanks for pointing that out. I've edited\
    \ the answer to include that.\n<|/ c |>\n<| a |>\nI believe this should work for\
    \ you. Just make sure you replace $numbers with whatever your variable name is\
    \ that contains the string that you want to sort and $numbers_sorted will contain\
    \ the string that is sorted.\n<code>\n$numbers = 'three one five';\n$numbers_sorted_array\
    \ = explode(' ', $numbers);\n$numbers_sorted = implode(' ', array_map('sort_numbers',\
    \ $numbers_sorted_array));\necho $numbers_sorted;\n", "    sort($numbers);\n \
    \   return implode(\" \", $numbers);\n}\n</code>\nThe function then can be called\
    \ like this:\n<code>\n<?php\necho sort_numbers(\"nine nine nine two four three\
    \ five\");", "    $numbers = explode(\" \", $numbers);\n    sort($numbers);\n\
    \    return implode(\" \", $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n\
    <code>\n<?php", "    $numbers = explode(' ', $numbers);\n    $sortedNumbers =\
    \ array();\n    foreach ($numbers as $number) {\n        $number = trim($number);\n\
    \        if ($number !== '') {\n            array_push($sortedNumbers, $number);\n\
    \        }\n    }\n    return implode(' ', $sortedNumbers);\n}\n", "  $numbers_array\
    \ = explode(\" \", $numbers);\n  $numbers_array = sort_numbers_array($numbers_array);\n\
    \  $numbers = implode(\" \", $numbers_array);\n  return $numbers;\n}\n", "  $numbers\
    \ = explode(\" \", $numbers);\n  sort($numbers);\n  return implode(\" \", $numbers);\n\
    }\n</code>\n<|/ a |>\n<| a dscore=1 |>\nThe question was how to sort a string,\
    \ but here is a working example for sorting an array with numerical values.\n\
    <code>\n$array = array('ten', 'twenty', 'thirty', 'fourty', 'fifty', 'sixty',\
    \ 'seventy', 'eighty', 'ninety');\n\nsort($array, SORT_NUMERIC);\n", "  $output\
    \ = \"\";\n  $numbers_array = explode(\" \", $numbers);\n  sort($numbers_array);\n\
    \  $number_string = implode(\" \", $numbers_array);\n  return $number_string;\n\
    }", "  return preg_replace('/([0-9]{4})-([0-9]{3})-([0-9]{2})/', '$1 $2 $3', $numbers);\n\
    }\n", "    return array_reduce(explode(' ', $numbers), function($result,$item)\
    \ {\n        $result[] = array(\n            'word' => $item,\n            'value'\
    \ => strval($item)\n        );\n        return $result;\n    }, array());\n}\n\
    </code>\n<|/ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting dscore=0\
    \ |>\n<code>\n$array1 = explode(' ', 'one two three four five six seven eight\
    \ nine ten');\n\n$array2 = array();\n\nforeach($array1 as $number){\n\n    if($number\
    \ < 10){\n        $array2[] = $number;\n    }else{\n        $array2[] = substr($number,\
    \ 0, -1);\n    }\n}\n\n$array2 = array_reverse($array2);\n\n$array2 = array_merge($array2,\
    \ $array1);\n\nprint_r($array2);\n</code>\n<|/ a |>\n<| a |>\n<code>\n<?php\n\n\
    $string = 'one two three four five six seven eight nine ten';\n$numArray = explode('\
    \ ', $string);\n$numArray = array_map('intval', $numArray);\nsort($numArray);\n\
    $newArray = implode(' ', $numArray);\nvar_dump($newArray);\n</code>\n<|/ a dscore=0\
    \ tags=php,arrays,sorting |>\n<| c |>\nThis will also give the wrong answer in\
    \ many cases (eg. `one two three four five six seven eight nine` would become\
    \ `one two three four five six seven eight nine ten` instead of `one two three\
    \ four five six seven eight nine`\n<|/ c |>\n<| a dscore=0 tags=php,arrays,sorting\
    \ |>\n<code>\n$numArray = array(1,2,3,4,5,6,7,8,9,10);\n$numArray = array_map('intval',\
    \ $numArray);\nsort($numArray);\n$newArray = implode(' ', $numArray);\necho $newArray;\n\
    </code>\n<|/ a |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value\n<|/ c |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>", "    $numbers = preg_replace('/[^0-9]+/', '', $numbers);\n    $numbers\
    \ = explode(' ', $numbers);\n    $numbers = array_map('intval', $numbers);\n \
    \   sort($numbers);\n    return implode(' ', $numbers);\n}", "    $arr = explode('\
    \ ', $numbers);\n    $sorted = array();\n    foreach ($arr as $val) {\n      \
    \  if ($val > 9) {\n            $sorted[] = intval($val) - intval('9');\n    \
    \    }\n    }\n    return implode(' ', array_merge($sorted));\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nThanks, this is quite helpful.\n<|/ c |>\n<| a dscore=1\
    \ tags=numbers,sorting,php |>\nThis is a simple and readable solution to convert\
    \ a string of numbers into an integer array sorted from smallest to largest:\n\
    <code>", "  foreach(explode(' ', $numbers) as $n)\n    sort($n);\n\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a |>\n<| a dscore=1 |>\nI think you need str_replace\
    \ with explode function\n<code>\n$newNumber = \"two nine six four two\";\n$array\
    \ = explode(' ', $newNumber);\nsort($array);\n$result = implode(' ', $array);\n\
    </code>\n<|/ a tags=php,sorting,numbers |>\n<| a tags=php,sorting,numbers dscore=1\
    \ |>\nI refactored the solution provided by to make it a little more robust against\
    \ edge cases:\n<code>\n/**\n * \n * string $numbers (Space-delimited) string of\
    \ numbers from zero to nine\n * string Space-delimited string of numbers from\
    \ smallest to largest\n */", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,arrays,sorting dscore=1\
    \ |>\n<| a |>\nAn alternate way to do the same thing without using sort:\n<code>",
  "    $numbers = explode(' ', $numbers);\n    $numbers = array_map('intval', $numbers);\n\
    \    usort($numbers, 'strnatcmp');\n    return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=sorting,arrays,php dscore=2 |>\n<| c |>\nThis does not return the desired\
    \ output for me. `sort_numbers(\"3 1 5\");` returns `1 3 5`\n<|/ c |>\n<| c |>\n\
    I guess you are right, I misread the question. Thanks for pointing out. I edited\
    \ my answer to fix.\n<|/ c |>\n<| c |>\nThe output from your function for `sort_numbers(\"\
    one three five\")` should be `\"one three five\"`, not `\"five three one\"`. I\
    \ tried using your function with `usort()` and it didn't seem to produce the correct\
    \ results.\n<|/ c |>\n<| c |>\nI apologize, I must have misread the question.\
    \ It has been corrected. I misread your question as the function returns the \"\
    correct\" answer. Your answer is still incorrect as pointed out.\n<|/ c |>\n<|\
    \ a dscore=1 |>\nI took a different approach, making use of the fact that sort()\
    \ works just fine with multi-dimensional arrays. I also use array_flip() to make\
    \ the array key associative again:\n<code>\n$numbers = array(\"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n",
  "  return implode('', sort(array_map('intval', explode(' ', $numbers))));\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\n$input = 'three one five';\n$array = explode(\"\
    \ \", $input);\nsort($array);\n$result = implode(\" \", $array);\necho \"$result\"\
    ;\n</code>\n<|/ a tags=php,sorting,string,arrays dscore=0 |>\n<| c |>\nThis code\
    \ would only work if you were dealing with numbers between `0` and `9` since `sort`\
    \ expects numeric input. Those would all get sorted into `0` since it uses `strcmp`\
    \ and not `<` operator.\n<|/ c |>\n<| a tags=php,sorting,string,arrays |>\nHere\
    \ is a more efficient code that will sort the string according to it's alphabetical\
    \ order:\n<code>\n<?php\n$str = \"three one five\";\n$arr = explode(\" \", $str);\n\
    sort($arr);\n$str = implode(\" \", $arr);\necho $str;", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers\
    \ = explode(' ', $numbers);\n  $numbers = array_filter($numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a |>\n<| c |>\nThis is the\
    \ cleanest answer\n<|/ c |>\n<| a |>\nThe below function will sort all numbers\
    \ based on their position in the list\n<code>", "  if (is_null($numbers)) {\n\
    \    return;\n  }\n  $numbers = preg_split('/\\s+/', $numbers);\n  sort($numbers);\n\
    \  return implode(\" \", $numbers);\n}\n</code>\nThis sorts any array of \"numbers\"\
    \ from smallest to largest.\n<|/ a |>\n<| c |>\nThanks Jack! This was my first\
    \ time asking a question here so hopefully i didn't leave anything out. Thanks\
    \ for the code as well :)\n<|/ c |>\n<| a |>\n<code>\n<?php\n", "  preg_match_all('!\\\
    d+!', $numbers, $matches);\n  return implode(' ', array_map(\n      function ($n)\
    \ {\n        $n = str_pad($n, 4, 0, STR_PAD_LEFT);\n        return str_pad(decbin($n),\
    \ 8, 0);\n      },\n      array_reduce($matches[0], 'array_merge', array())\n\
    \    ));\n}\n</code>\n<|/ a |>\n<| c |>\nI've got that part working already but\
    \ I have no idea how to get it down to a simple list of numbers. I guess I could\
    \ do something like `implode(' ', array_map(create_function('$n',$n), $matches[0]))`\
    \ but that seems rather inelegant.\n<|/ c |>\n<| c |>\nI've added a simpler solution\
    \ that uses `explode()` and a loop to create the array. This solution also uses\
    \ `decbin()` which can handle up to 32 digits and is therefore much more efficient\
    \ than `sprintf()`.\n<|/ c |>\n<| c |>\nAwesome. Thanks for taking the time to\
    \ write it up that way. Although I did have to modify the second argument to `array_map`\
    \ from `array('string')` to `array('num')` as otherwise that would just result\
    \ in an array of numbers with no string keys.\n<|/ c |>\n<| c |>\nWhoops, yes\
    \ I should have used `str_pad()` instead of `str_pad(decbin()`, fixed now.\n<|/\
    \ c |>\n<| c |>\nThe solution worked for me when I used it on a list of 10 numbers.\
    \ But when I tried it on a list of 5 numbers, it returned the string with all\
    \ the numbers in reverse order.\n<|/ c |>\n<| a tags=php,sorting dscore=4 |>\n\
    I got this idea from php.net forum, here's my working code:\n<code>\n/**\n * Sort\
    \ numbers from smallest to largest\n * $numbers string List of numbers separated\
    \ by spaces\n * string Sorted numbers\n */", "  $numbers = preg_split('/[\\s,]+/',\
    \ $numbers);\n  $numbers = array_map('intval', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n", "  $nums = explode(' ', $numbers);\n\
    \  sort($nums);\n  $numbers = implode(' ', $nums);\n  return $numbers;\n}", " \
    \   sort($numbers);\n    return implode(' ', $numbers);\n}\n", "  sort($numbers);\n\
    \  return join(\" \", $numbers);\n}", "  $numbers = str_replace(' ', '', $numbers);\n\
    \  $numbers = preg_split('/\\s+/', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a dscore=1 tags=sorting,php |>\n<| c |>\nThe\
    \ second example is not valid PHP code.\n<|/ c |>\n<| a tags=sorting,php dscore=1\
    \ |>\nIf you want to sort an array based off of another array that already exists,\
    \ then you can do this:\n<code>", "  return preg_replace_callback('/([0-9]+)(\
    \ |$)/', function ($matches) {\n    return implode(\" \", array_merge(array_slice($matches,\
    \ 1), ['']));\n  }, $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    I wanted to post a slightly different solution than the one provided by Amal,\
    \ for the sake of variety. I'm sure this one can be further improved upon but\
    \ here it is anyway\n<code>", "\t$numbers = explode(\" \", $numbers);\n\tksort($numbers);\n\
    \t$numbers = array_values($numbers);\n\t$numbers = implode(\" \", $numbers);\n\
    \treturn $numbers;\n}", "  // Sort the numbers in place\n  $numbers = preg_split('/[\\\
    s]+/', $numbers);\n  sort($numbers);\n  // Build new string with numbers sorted\
    \ from smallest to largest\n  return implode(' ', $numbers);\n}\n", "  if (strlen($numbers)\
    \ <= 0) return $numbers;\n  $numbers = explode(\" \", $numbers);\n  $result =\
    \ '';\n  $count = 1;\n  foreach ($numbers as $key => $number) {\n    $result .=\
    \ $number . \" \";\n    if ($number == $numbers[$key]) $count++;\n  }\n  return\
    \ $result;\n}\n", "    // Split the numbers on spaces.\n    $numbers = preg_split(\"\
    / /\", $numbers);\n\n    // Sort the numbers.\n    asort($numbers);\n\n    //\
    \ Turn the sorted numbers into a string.\n    return implode(\" \", $numbers);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nGood call, I didn't think of that. I'm new to php,\
    \ so I'm not sure what is the most efficient way to do this. I'm guessing I could\
    \ just use sort() to sort the array and implode() to join them back? Thanks for\
    \ the help!\n<|/ c |>\n<| c |>\n, `sort()` sorts an array while `implode()` joins\
    \ them back into a string. I'll update the answer to show you.\n<|/ c |>\n<| c\
    \ |>\nWhat if the numbers are not always consecutive? For example, \"two three\
    \ four\" => two four three?\n<|/ c |>\n<| a tags=sorting,php,explode |>\n<code>\n\
    $string = \"one two three four five six seven eight nine\";\n$arr = explode(\"\
    \ \", $string);\nsort($arr);\n$string = implode(\" \", $arr);\n</code>\n<|/ a\
    \ dscore=5 |>\n<| c |>\nwhy not just use `$string = implode(\" \", $arr)`?\n<|/\
    \ c |>\n<| c |>\nGood point, I updated the example to use the implode function.\n\
    <|/ c |>\n<| c |>\nThe question was about the most efficient way to do it.\n<|/\
    \ c |>\n<| c |>\n: Yes, but a clever PHP programmer will know what it's doing,\
    \ and it will help future people who encounter the same problem.\n<|/ c |>\n<|\
    \ c |>\nThis is also a great way to do it as you don't have to know all the possible\
    \ ways the input can come in.  You can easily change it for numbers and other\
    \ possible input formats.\n<|/ c |>\n<| a tags=sorting,php,explode dscore=5 |>\n\
    <code>\n$string = \"one two three four five six seven eight nine\";\n$array =\
    \ explode(\" \", $string);\nsort($array);\n$result = implode(\" \", $array);\n\
    </code>\n<|/ a |>\n<| c |>\nWhy not just use `$string = implode(\" \", $arr)`?\n\
    <|/ c |>\n<| c |>\nBecause `sort()` is only available ", "    $choices = explode('\
    \ ', $numbers);\n    $choices = array_map(function($value){\n        return str_pad($value,\
    \ 2, \"0\", STR_PAD_LEFT);\n    }, $choices);\n    usort($choices, create_function('$a,\
    \ $b', 'return strcmp($a, $b);'));\n    return implode(' ', $choices);\n}\n</code>\n\
    This was tested on a PHP 5.3.3 install (which was what the server was running\
    \ prior to the upgrade)\n<|/ a tags=php,arrays |>\n<| a |>\nI wrote a quick function\
    \ to do it, and since I needed it to be used repeatedly, I stuck it in an array.\
    \ This should be quite fast.\n<code>", "  global $valid_numbers;\n  $numbers =\
    \ preg_split('/[\\s]*,[\\s]*/', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n", "    $numbers = preg_replace('/\\s+/', ' ', $numbers);\n\
    \    $numbers = preg_replace('/[^0-9]/', null, $numbers);\n    return sort($numbers);\n\
    }\n</code>\nEDIT 2: After OP's comment about using array_reduce() to sort by numerical\
    \ value of the numbers, I decided to use array_reduce() instead of a standard\
    \ loop. Here it is for the sake of completeness.\n<code>\n<?php", "  // Remove\
    \ any non-numbers from the list\n  $numbers = preg_replace('/[^0-9]+/', '', $numbers);\n\
    \  // Split the list by spaces to get an array with each number on its own entry\n\
    \  $arr = preg_split('/\\s+/', $numbers);\n  // Sort the array numerically\n \
    \ sort($arr);\n  // Return the string with the numbers sorted from smallest to\
    \ largest\n  return implode(' ', $arr);\n}", "  return array_reduce(explode('\
    \ ', $numbers), function($v, $w) {\n    return $v . str_repeat('zero one two three\
    \ four five six seven eight nine', substr_count($w, ' '));\n  });\n}\n", "  return\
    \ implode(\" \", array_sort_natural(explode(\" \", $numbers)));\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nWhy not just sort using usort()?\n<|/ c |>\n<| c |>\n\
    You can, but usort does extra work for you. I'm not a big fan of creating my own\
    \ sort functions for no reason.\n<|/ c |>\n<| c |>\nI agree that you should use\
    \ usort(), but you also need to know that this does not do any sorting, only sorts\
    \ the array in place (which you cannot do with usort).\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out. I fixed the code. Also, I added a note about avoiding\
    \ `usort`, in case you thought I meant something else.\n<|/ c |>\n<| a dscore=5\
    \ tags=php,sorting,natural-sort |>\nHere's a solution using array_map():\n<code>",
  "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return implode('\
    \ ', $numbers);\n}\n", "    $list = explode(\" \", $numbers);\n    // Sort numbers\
    \ smallest to largest\n    usort($list, function ($a, $b) {\n        return strcasecmp($a,\
    \ $b);\n    });\n    return implode(\" \", $list);\n}\n</code>\n<|/ a tags=arrays,php,string,numbers,sorting\
    \ |>\n<| a tags=arrays,php,string,numbers,sorting |>\nUse PHP's SORT_NUMERIC flag\
    \ to sort numerical strings.\n<code>\n$string = 'one two three four five six seven\
    \ eight nine';\n$numbers = explode(' ', $string);\nsort($numbers, SORT_NUMERIC);\n\
    print_r($numbers);\n</code>\nOutput\n<code>\nArray\n(\n    [0] => one\n    [1]\
    \ => two\n    [2] => three\n    [3] => four\n    [4] => five\n    [5] => six\n\
    \    [6] => seven\n    [7] => eight\n    [8] => nine\n)\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\nFor sorting by natural sorting of numbers, you can use\
    \ a custom comparison function:\n<code>"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
