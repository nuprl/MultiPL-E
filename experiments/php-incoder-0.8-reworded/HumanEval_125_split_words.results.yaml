language: php
name: HumanEval_125_split_words
results:
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $arr = str_word_count($txt,\
    \ 2);\n    $len = 0;\n    foreach ($arr as $k => $v) {\n        $len++;\n    \
    \    if ($v != \"\") {\n            $arr[$k] = $v;\n        }\n    }\n    array_splice($arr,\
    \ 0, $len);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmploopzsdq.php:30\n\
    Stack trace:\n#0 /tmp/tmploopzsdq.php(40): test()\n#1 {main}\n  thrown in /tmp/tmploopzsdq.php\
    \ on line 30\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/',\
    \ $txt, -1, PREG_SPLIT_NO_EMPTY);\n    $count = count($words);\n    for ($i =\
    \ 0; $i < $count; $i++) {\n        if ($words[$i] === '') {\n            unset($words[$i]);\n\
    \            --$count;\n        }\n    }\n    $count = count($words);\n    $countWords\
    \ = $count / 2;\n    $words[0] = $words[$countWords];\n    for ($i = 1; $i < $countWords;\
    \ $i++) {\n        $words[$i] = substr($words[$i], 0, 1);\n    }\n    for ($i\
    \ = 0; $i < $count; $i++) {\n        if (ord($words[$i][0]) % 2 === 1) {\n   \
    \         $words[$i] = substr($words[$i], 0, -1);\n        }\n    }\n    return\
    \ $words;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp61qf9hof.php:40\n\
    Stack trace:\n#0 /tmp/tmp61qf9hof.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp61qf9hof.php\
    \ on line 40\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n\
    \    $numWords = count($words);\n    $counter = array(0,1);\n\n    for ($i = 1;\
    \ $i < $numWords; $i++) {\n        if ($counter[$i] == 1) {\n            if ($i\
    \ == $numWords) {\n                array_push($words, $counter[$i]);\n       \
    \     }\n            else {\n                array_push($words, $words[$i]);\n\
    \            }\n        }\n        if ($words[$i] != \" \") {\n            array_push($counter,\
    \ $words[$i]);\n        }\n    }\n\n    return $words;\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6j833mvr.php:39\n\
    Stack trace:\n#0 /tmp/tmp6j833mvr.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp6j833mvr.php\
    \ on line 39\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n\t$words = explode(' ', $txt);\n\
    \tforeach ($words as &$word) {\n\t\t$word = strtolower($word);\n\t}\n\treturn\
    \ array_filter($words, 'is_string');\n}\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0yg5f47f.php:24\n\
    Stack trace:\n#0 /tmp/tmp0yg5f47f.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp0yg5f47f.php\
    \ on line 24\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/',\
    \ $txt);\n    $count = 0;\n    foreach ($words as $word) {\n        if (strpos($word,\
    \ $\",\") === false) {\n            $count++;\n        } else {\n            $count\
    \ = strlen($word);\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected double-quoted string ",", expecting variable
    or "{" or "$" in /tmp/tmpfte4182s.php on line 16

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n\treturn preg_split('/[\\s,]+/',\
    \ $txt);\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz6y8wncp.php:23\n\
    Stack trace:\n#0 /tmp/tmpz6y8wncp.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpz6y8wncp.php\
    \ on line 23\n"
  timestamp: 1660028760
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n\
    \    foreach ($words as $word) {\n        if (preg_match('/,/', ' '.$word)) {\n\
    \            return count($words);\n        }\n        $words[] = strtolower($word);\n\
    \    }\n    return $words;\n}\n\n/**\n * Creates table of contents from a parsed\
    \ document by walking through the parsed document and\n * recursively descending\
    \ into a sub-document (if such a sub-document exists).\n *\n * @param DOMDocument\
    \ $dom DOMDocument instance\n * @param string $title Title of the parsed document\n\
    \ * @return string Markdown formatted table of contents HTML or empty string\n\
    \ */\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9vek4zn9.php:36\n\
    Stack trace:\n#0 /tmp/tmp9vek4zn9.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp9vek4zn9.php\
    \ on line 36\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n\
    \    foreach ($words as $word) {\n        $words[] = preg_replace(\"/[^a-z]+/i\"\
    , null, $word);\n    }\n    return $words;\n}\n</code>\n<|/ a tags=php dscore=2\
    \ |>\n<| c |>\nThanks for the answer. My question is how would I print out the\
    \ array in a way that it would look like the example I gave in my question? I'm\
    \ sorry if I'm a little unclear, I'm a beginner with PHP\n<|/ c |>\n<| c |>\n\
    My example already shows how to print out the array. `print_r` will give you an\
    \ output like this (http://i.imgur.com/MjEUsMl.png). But I guess that's not what\
    \ you want. Do you want to create html tables or print a table? In the latter\
    \ case, you might want to look at [this question](http://stackoverflow.com/q/8353809/1336154)\n\
    <|/ c |>\n<| c |>\nAh, sorry, I didn't realize there was a print_r function. Thanks\
    \ for the help. However, when I tried running my code I got this error: `Fatal\
    \ error: Call to undefined function print_r() in /home/content/57/10257710/html/php/split/split.php\
    \ on line 15`\n<|/ c |>\n<| c |>\nI edited my question to include my code. Sorry\
    \ about the confusion. Thanks for your help\n<|/ c |>\n<| c |>\nI edited my answer\
    \ with the complete code you asked for in my comment.\n<|/ c |>\n<| a |>\nYou\
    \ can use the preg_split() function to split a text on whitespaces.\n<|/ a dscore=1\
    \ tags=php |>\n<| a tags=php |>\nYou can use the function preg_split(), that will\
    \ split strings at every whitespace (spaces, tabs, newlines). You can read more\
    \ about this function here.\n<code>\n$words = preg_split(\"/\\s+/\", \"Your text\
    \ here\");\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nTry this\n<code>\n$array\
    \ = explode(' ', $txt);\n</code>\n<|/ a tags=php |>\n<| a |>\nThis should do the\
    \ trick:\n<code>\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpgo4wain0.php
    on line 19

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/',\
    \ $txt);\n    $words = array_unique($words);\n\n    return $words;\n}\n\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpusjce_9o.php:25\n\
    Stack trace:\n#0 /tmp/tmpusjce_9o.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpusjce_9o.php\
    \ on line 25\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  $words = explode(' ', $txt);\n\
    \  if (empty($words)) {\n    return 0;\n  }\n  $word_count = (count($words) >\
    \ 0) ? count($words) : 0;\n  return ($word_count - count_words($words));\n}\n\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_words()\
    \ in /tmp/tmpd8cwwdp6.php:18\nStack trace:\n#0 /tmp/tmpd8cwwdp6.php(22): split_words('Hello\
    \ world!')\n#1 /tmp/tmpd8cwwdp6.php(26): candidate('Hello world!')\n#2 /tmp/tmpd8cwwdp6.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpd8cwwdp6.php on line 18\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $arr = explode(' ', $txt);\n\
    \    $words = array();\n    $num = 0;\n    foreach($arr as $word) {\n        if(is_string($word))\
    \ {\n            $words[] = $word;\n            $num += str_length($word);\n \
    \       } else {\n            $num += strlen($word);\n            $words[] = implode(\"\
    \ \", array_slice($word, 0, -1));\n        }\n    }\n    if($num % 2 != 0) {\n\
    \        return $num / 2;\n    }\n    return $num;\n}\n</code>\n<|/ a tags=php,algorithm\
    \ dscore=4 |>\n<| c |>\nI like this idea but how does it work with multiple spaces?\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a second way of doing this, I\
    \ hope this helps\n<|/ c |>\n<| c |>\nHmm, I think I misunderstood your original\
    \ answer. I think the first part is good but I don't think it works with multiple\
    \ spaces so I'll have to look into it a little more.\n<|/ c |>\n<| a dscore=4\
    \ |>\nThis may be too late and my brain was already melting from my attempt of\
    \ doing this task in a different manner but this may help someone else who was\
    \ looking to find the number of letters in a text and I felt it would be useful\
    \ to share my solution:\n<code>\n$alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\
    $string = \"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpssrdzou7.php
    on line 30

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $res = preg_split('/\\s+/',\
    \ $txt);\n    return count($res) ? $res : array();\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nYes, I know that, but that's not what I need. I need an algorithm\
    \ that splits words on whitespace, commas and commas with whitespaces as separators.\
    \ In other words I need an algorithm that splits words on whitespace, commas,\
    \ commas with whitespaces and commas with commas and whitespaces as separators.\n\
    <|/ c |>\n<| a |>\nThe algorithm I developed for my problem was the following:\n\
    <code>\n$txt = \"Hello world!\";\n$txt2 = \"\";\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpew3kbw_6.php
    on line 16

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n\
    \    return $words;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy40c9x3u.php:23\n\
    Stack trace:\n#0 /tmp/tmpy40c9x3u.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpy40c9x3u.php\
    \ on line 23\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  return array_map(function ($word)\
    \ {\n    return mb_strtolower($word);\n  }, preg_split('/\\s+/', $txt));\n}\n\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function mb_strtolower()\
    \ in /tmp/tmpmrh75z3i.php:14\nStack trace:\n#0 [internal function]: {closure}('Hello')\n\
    #1 /tmp/tmpmrh75z3i.php(15): array_map(Object(Closure), Array)\n#2 /tmp/tmpmrh75z3i.php(19):\
    \ split_words('Hello world!')\n#3 /tmp/tmpmrh75z3i.php(23): candidate('Hello world!')\n\
    #4 /tmp/tmpmrh75z3i.php(33): test()\n#5 {main}\n  thrown in /tmp/tmpmrh75z3i.php\
    \ on line 14\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $txt = strtolower($txt);\n\
    \    $txt = trim($txt);\n    $txt = preg_replace(\"/[^a-z]+/i\", \" \", $txt);\n\
    \    return preg_split(\"/[\\s]+/\", $txt);\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\nI created this as a solution in JavaScript but you can probably\
    \ find a way to port it to PHP. There are also some issues with the code but I\
    \ don't have the time to fix that right now.\n<code>\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpzw_ow69i.php
    on line 18

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/',\
    \ $txt);\n    if (count($words) == 1) {\n        return array();\n    }\n    $words[0]\
    \ = strtolower($words[0]);\n    return $words;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    That's not an answer, that's a comment. The problem is not in splitting but in\
    \ counting upper and lowercase letters.\n<|/ c |>\n<| c |>\nSorry I didn't realise\
    \ you didn't post an answer. I didn't realise that my comment was unrelated. I\
    \ don't think it's fair to say that my comment was unrelated, but I see it now\
    \ so I'll remove it.\n<|/ c |>\n<| a |>\nIf you don't have strlen function, you\
    \ can replace it with strlen which counts characters. \n<code>\n$words = \"Hello\
    \ world!\"; // given string\n\n$words = preg_replace('/[^a-z]+/i', '', $words);\
    \ // remove non-letter characters\n$words = preg_replace('/[aeiou]/', 'z', $words);\
    \ // replace all vowels with 'z'\n$words = str_split($words); // turn string into\
    \ array of characters\n$words = count($words); // count number of letters\n\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp8tholpau.php
    on line 20

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    return explode(' ', $txt);\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcqdh9ndg.php:22\n\
    Stack trace:\n#0 /tmp/tmpcqdh9ndg.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcqdh9ndg.php\
    \ on line 22\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  $words = explode(' ', $txt);\n\
    \  $len = 0;\n  foreach ($words as $w) {\n    if ($w == '') continue;\n    $len\
    \ = max($len, strlen($w));\n  }\n  return $len;\n}\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq8rdqq6m.php:26\n\
    Stack trace:\n#0 /tmp/tmpq8rdqq6m.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpq8rdqq6m.php\
    \ on line 26\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n\
    \    $result = array();\n    foreach ($words as $word) {\n        if (empty($word))\
    \ {\n            continue;\n        }\n        $result[] = preg_replace('/[^a-z]+/i',\
    \ '', $word);\n    }\n    return $result;\n}\n</code>\nAnd here is the code:\n\
    <code>\n<?php namespace App\\Http\\Controllers;\n\nuse Auth;\nuse Carbon\\Carbon;\n\
    use Validator;\nuse App\\Order;\nuse App\\Product;\nuse App\\OrderProduct;\nuse\
    \ App\\Http\\Requests\\StoreOrderRequest;\nuse App\\Http\\Requests\\UpdateOrderRequest;\n\
    use App\\Http\\Requests\\StoreProductRequest;\nuse App\\Http\\Requests\\UpdateProductRequest;\n\
    use App\\Http\\Requests\\OrderProductRequest;\nuse App\\Http\\Requests\\StoreOrderProductRequest;\n\
    use App\\Http\\Requests\\UpdateOrderProductRequest;\nuse App\\Http\\Requests\\\
    StoreProductProductRequest;\nuse App\\Http\\Requests\\UpdateProductProductRequest;\n\
    use App\\Http\\Requests\\OrderProductProductRequest;\nuse App\\Http\\Requests\\\
    StoreOrderProductProductRequest;\nuse App\\Http\\Requests\\UpdateOrderProductProductRequest;\n\
    use App\\Http\\Requests\\StoreProductProductProductRequest;\nuse App\\Http\\Requests\\\
    UpdateProductProductProductRequest;\nuse App\\Http\\Requests\\OrderProductProductProductRequest;\n\
    use App\\Http\\Requests\\StoreOrderProductProductProductRequest;\nuse App\\Http\\\
    Requests\\UpdateOrderProductProductProductRequest;\nuse App\\Http\\Requests\\\
    StoreProductProductProductRequest;\nuse App\\Http\\Requests\\UpdateProductProductProductRequest;\n\
    use App\\Http\\Requests\\OrderProductProductProductRequest;\nuse App\\Http\\Requests\\\
    StoreOrderProductProductProductRequest;\nuse App\\Http\\Requests\\UpdateOrderProductProductProductRequest;\n\
    use App\\Http\\Requests\\StoreProductProductProductRequest;\nuse App\\Http\\Requests\\\
    UpdateProductProductProductRequest;\nuse App\\Http\\Requests\\OrderProductProductProductRequest;\n\
    use App\\Http\\Requests\\StoreOrderProductProductProductRequest;\nuse App\\Http\\\
    Requests\\UpdateOrderProductProductProductRequest;\nuse App\\Http\\Requests\\\
    StoreProductProductProductRequest;\nuse App\\Http\\Requests\\UpdateProductProductProductRequest;\n\
    use App\\\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpy8bzbxn1.php
    on line 23

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $arr = array();\n    if ($txt\
    \ != \"\") {\n        $arr = explode(\" \", $txt);\n    }\n    return $arr;\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwgsd1r3w.php:26\n\
    Stack trace:\n#0 /tmp/tmpwgsd1r3w.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpwgsd1r3w.php\
    \ on line 26\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  // Explode the text into an array\n\
    \  $words = (explode(\" \", $txt));\n  // Count the number of words in the array\n\
    \  $count = count($words);\n  // Set up the return array\n  $out = array();\n\
    \  // Iterate over each word\n  for($i = 0; $i < $count; $i++) {\n    // If the\
    \ word is lowercase\n    if(!is_numeric($words[$i]) && strtolower($words[$i])\
    \ == $words[$i]) {\n      // If no space exists in the word and there is an odd\
    \ number of letters then return this word as output\n      if(empty($words[$i])\
    \ && $count % 2 == 0) {\n        $out[] = $words[$i];\n      }\n      // If an\
    \ space exists in the word and there is an even number of letters then return\
    \ this word as output\n      else if($words[$i] && !empty($words[$i]) && $count\
    \ % 2 == 1) {\n        $out[] = $words[$i];\n      }\n      // If there are both\
    \ a space and odd letters return this word as output\n      else if($words[$i]\
    \ && !empty($words[$i]) && $count % 2 == 1) {\n        $out[] = $words[$i];\n\
    \      }\n    }\n  }\n  // Return the output array\n  return $out;\n}\n</code>\n\
    <|/ a dscore=1 tags=php,split |>\n<| a dscore=1 tags=php,split |>\nI like Amy\
    \ L's answer using PHP's explode and array_walk methods. But I like doing it with\
    \ regex, too.\n<code>\n$string = \"the quick brown fox jumped over the lazy dog.\"\
    ;\npreg_match_all(\"/[a-z]+/\", $string, $matches);\n$oddLetters = array_filter($matches[0]);\n\
    print_r($oddLetters);\n</code>\n<|/ a |>\n<| a tags=php,split dscore=0 |>\n<code>\n\
    $words = preg_split(\"/\\s+/\", $txt);\n</code>\n<|/ a |>\n<| a dscore=0 |>\n\
    I would use the built in explode() function\n<code>\n$words = explode(\" \", $txt);\n\
    </code>\n<|/ a tags=php,split |>\n<| a dscore=0 tags=php,split |>\n<code>\n$words\
    \ = explode(\" \", $txt);\n</code>\n<|/ a |>\n<| a tags=php,split |>\n<code>\n\
    $str= \"The quick, fox, jumps, over the lazy dog.\";\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpxlft3lbh.php
    on line 40

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    if (!$txt) return [];\n   \
    \ if (strpos($txt, ',') !== false) {\n        $tokens = explode(\",\", $txt);\n\
    \        $tokens = array_map(function ($token) {\n            return trim($token);\n\
    \        }, $tokens);\n        return $tokens;\n    }\n    if (preg_match(\"/\\\
    s/\", $txt)) {\n        $tokens = preg_split(\"/\\s+/\", $txt);\n        return\
    \ $tokens;\n    } else {\n        $tokens = preg_split(\"/\\s+/\", $txt, -1);\n\
    \        return $tokens;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprtwuicn5.php:37\n\
    Stack trace:\n#0 /tmp/tmprtwuicn5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmprtwuicn5.php\
    \ on line 37\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n\
    \    $len  = count($words);\n    $len2 = count($words) - 1;\n    for ($i = 0;\
    \ $i < $len; $i++) {\n        $words[$i] = ltrim($words[$i]);\n    }\n    for\
    \ ($i = 0; $i < $len2; $i++) {\n        $words[$i] = str_replace(' ', '', $words[$i]);\n\
    \    }\n    return $words;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjs9aa9av.php:31\n\
    Stack trace:\n#0 /tmp/tmpjs9aa9av.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpjs9aa9av.php\
    \ on line 31\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  global $alphabet;\n  return array_filter(preg_split('/[\\\
    s,]+/', $txt, -1, PREG_SPLIT_NO_EMPTY));\n}\nfunction candidate(...$args) {\n\
    \    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ogef189.php:23\n\
    Stack trace:\n#0 /tmp/tmp7ogef189.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp7ogef189.php\
    \ on line 23\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    return preg_split('~\\s+|,~u',\
    \ $txt);\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp58waugbh.php:23\n\
    Stack trace:\n#0 /tmp/tmp58waugbh.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp58waugbh.php\
    \ on line 23\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    // remove whitespace\n    $txt\
    \ = preg_replace('/\\s+/', '', $txt);\n    // remove all single characters\n \
    \   $txt = preg_replace('/[\\'\\\"]/', '', $txt);\n    // split on commas\n  \
    \  $txt = explode(',', $txt);\n    $count = count($txt);\n    \n    // remove\
    \ odd characters\n    for ($i = 0; $i < $count; $i++) {\n        if ($i + 1 %\
    \ 2 != 0) {\n            $txt[$i] = preg_replace('/[^a-z]$/', '', $txt[$i]);\n\
    \        }\n    }\n    \n    // return an array of words\n    return $txt;\n}\n\
    \nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9jpsnwo_.php:37\n\
    Stack trace:\n#0 /tmp/tmp9jpsnwo_.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp9jpsnwo_.php\
    \ on line 37\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n\
    \    foreach($words as $key => $word) {\n        $words[$key] = preg_replace('/\\\
    s/', '', $word);\n    }\n    return $words;\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpets5pkk5.php:26\n\
    Stack trace:\n#0 /tmp/tmpets5pkk5.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpets5pkk5.php\
    \ on line 26\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    // use str_word_count() to\
    \ split strings on whitespace\n    $words = str_word_count($txt, 1);\n    // return\
    \ an array of words if there are some whitespaces in the text\n    if (isset($words[0]))\
    \ {\n        return $words;\n    } else {\n        // if there are no whitespaces\
    \ in the text split on commas\n        return str_word_count($txt, 2);\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpic9t470i.php:29\n\
    Stack trace:\n#0 /tmp/tmpic9t470i.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpic9t470i.php\
    \ on line 29\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $word_arr = explode(\" \",\
    \ $txt);\n    $word = 0;\n    $newword = [];\n    foreach ($word_arr as $value)\
    \ {\n        $value = strtolower($value);\n        if (!preg_match('/,/', 'a'\
    \ . $value)) {\n            $newword[] = $value;\n        } else {\n         \
    \   $word += count($newword);\n            if ($word % 2) {\n                $newword[]\
    \ = 'a' . $value;\n            } else {\n                $newword[] = 'b' . $value;\n\
    \            }\n        }\n    }\n    return $newword;\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqvjt5mrl.php:37\n\
    Stack trace:\n#0 /tmp/tmpqvjt5mrl.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpqvjt5mrl.php\
    \ on line 37\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $count = preg_match_all('/(\\\
    w+)/', $txt, $matches, PREG_PATTERN_ORDER);\n    return ($count == 1) ? $matches[1]\
    \ : $matches[0];\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5hru7bwi.php:22\n\
    Stack trace:\n#0 /tmp/tmp5hru7bwi.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp5hru7bwi.php\
    \ on line 22\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(\" \", $txt);\n\
    \    return count($words) > 1 ? $words : array_chunk($words, 2);\n}\n\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpim_b_nvo.php:23\n\
    Stack trace:\n#0 /tmp/tmpim_b_nvo.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpim_b_nvo.php\
    \ on line 23\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (strlen($word)\
    \ > 0) {\n            $result[] = $word;\n        }\n    }\n\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwvxnc16q.php:29\n\
    Stack trace:\n#0 /tmp/tmpwvxnc16q.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwvxnc16q.php\
    \ on line 29\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $word_array = array();\n  \
    \  $word_array = str_split($txt);\n    return $word_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdoeeondb.php:23\n\
    Stack trace:\n#0 /tmp/tmpdoeeondb.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpdoeeondb.php\
    \ on line 23\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/',\
    \ $txt);\n    $count = 1;\n    for ($i = 0; $i < count($words); $i++) {\n    \
    \    if ($words[$i] === '') {\n            continue;\n        }\n        if (ctype_alpha($words[$i]))\
    \ {\n            $count++;\n        } else {\n            $words[$i] = preg_replace('/[^a-z]/',\
    \ '', $words[$i]);\n            if (count($words[$i]) > 1) {\n               \
    \ $count++;\n            } else {\n                $words[$i] = preg_replace('/[^A-Z]/',\
    \ '', $words[$i]);\n                if (count($words[$i]) > 1) {\n           \
    \         $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $words;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmpzt05jduc.php:23\nStack trace:\n\
    #0 /tmp/tmpzt05jduc.php(37): split_words('Hello world!')\n#1 /tmp/tmpzt05jduc.php(41):\
    \ candidate('Hello world!')\n#2 /tmp/tmpzt05jduc.php(51): test()\n#3 {main}\n\
    \  thrown in /tmp/tmpzt05jduc.php on line 23\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    if ($txt) {\n        return\
    \ preg_split('/\\s+/', $txt);\n    }\n}\n\nfunction candidate(...$args) {\n  \
    \  return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5rt2vq5r.php:24\n\
    Stack trace:\n#0 /tmp/tmp5rt2vq5r.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp5rt2vq5r.php\
    \ on line 24\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  $words = explode(' ', $txt);\n\
    \  sort($words);\n  $count = count($words);\n  \n  for ($i = 0; $i < $count; $i++)\
    \ {\n    $words[$i] = ucfirst(strtolower($words[$i]));\n  }\n  \n  return $words;\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn1weqvga.php:29\n\
    Stack trace:\n#0 /tmp/tmpn1weqvga.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpn1weqvga.php\
    \ on line 29\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = preg_split('/[\\s]+/',\
    \ $txt);\n    if (count($words) == 1) {\n        return $words;\n    }\n    $result\
    \ = [];\n    for ($i = 0; $i < count($words); $i += 2) {\n        $result[] =\
    \ implode(\" \", array_slice($words, $i, 2));\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpznh5uc0a.php:29\n\
    Stack trace:\n#0 /tmp/tmpznh5uc0a.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpznh5uc0a.php\
    \ on line 29\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    if (!$txt || $txt == \"\")\
    \ return array();\n    // Split on commas if commas exist\n    if (strpos($txt,\
    \ ',') !== false) $txt = explode(\",\", $txt);\n    // Split on whitespace if\
    \ whitespace exist\n    if (strpos($txt, ' ') !== false) $txt = explode(\" \"\
    , $txt);\n    // Count number of words in text\n    $words = count($txt);\n  \
    \  if ($words < 2) return $words;\n    // Count number of lowercase letters in\
    \ text with odd order\n    $odd_lower = ($words % 2) != 0;\n    // Split the text\
    \ into words again and return the results\n    return array_slice($txt, count($txt)\
    \ % 2, 2 * $odd_lower);\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_ohbq52.php:32\n\
    Stack trace:\n#0 /tmp/tmp5_ohbq52.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp5_ohbq52.php\
    \ on line 32\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n\
    \    return $words;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy40c9x3u.php:23\n\
    Stack trace:\n#0 /tmp/tmpy40c9x3u.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpy40c9x3u.php\
    \ on line 23\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    if (!$txt) {\n        return\
    \ array();\n    }\n    if (ctype_space($txt)) {\n        return array($txt);\n\
    \    }\n    $str = preg_replace(\"/,+/\", \",\", $txt);\n    $str = preg_replace(\"\
    /^[^a-z]+/i\", \"\", $str);\n    $str = preg_replace(\"/[^a-z]+$/i\", \"\", $str);\n\
    \    return preg_split(\"/\\s+/\", $str);\n}\n\nfunction candidate(...$args) {\n\
    \    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0neevhxz.php:30\n\
    Stack trace:\n#0 /tmp/tmp0neevhxz.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp0neevhxz.php\
    \ on line 30\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $split = preg_split('/\\s+/',\
    \ $txt);\n    $words = array();\n    foreach ($split as $w) {\n        $wlower\
    \ = strtolower($w);\n        if ($w != '') {\n            $words[] = $wlower;\n\
    \        } else {\n            $words[] = $wlower;\n        }\n    }\n    return\
    \ $words;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx7lmwg9u.php:31\n\
    Stack trace:\n#0 /tmp/tmpx7lmwg9u.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpx7lmwg9u.php\
    \ on line 31\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/',\
    \ $txt);\n    if(count($words) == 0){\n        $words = preg_split(',/', $txt);\n\
    \        if(count($words) == 0)\n            return count(preg_split('/[a-z]/i',\
    \ $txt));\n    }\n    return $words;\n}\n\nfunction candidate(...$args) {\n  \
    \  return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0u9rhu7e.php:28\n\
    Stack trace:\n#0 /tmp/tmp0u9rhu7e.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp0u9rhu7e.php\
    \ on line 28\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n\treturn array_filter(str_word_count(preg_replace('/[^a-z\\\
    s]/', '', $txt), 1)) ?: array_filter($txt);\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4m3q6ly6.php:21\n\
    Stack trace:\n#0 /tmp/tmp4m3q6ly6.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4m3q6ly6.php\
    \ on line 21\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    \n    // If the string is empty\
    \ return an empty array\n    if (!strlen($txt)) {\n        return array();\n \
    \   }\n\n    // Split the string on white space\n    $words = explode(\" \", $txt);\n\
    \n    // If the string contains only whitespace return empty array\n    if (empty($words))\
    \ {\n        return array();\n    }\n\n    // If the string contains only whitespace\
    \ return empty array\n    if (empty($words[0])) {\n        return array();\n \
    \   }\n\n    // If the string contains only whitespace return empty array\n  \
    \  if (empty($words[1])) {\n        return array();\n    }\n\n    // If the string\
    \ contains only whitespace return empty array\n    if (empty($words[2])) {\n \
    \       return array();\n    }\n\n    // If the string contains only whitespace\
    \ return empty array\n    if (empty($words[3])) {\n        return array();\n \
    \   }\n\n    // If the string contains only whitespace return empty array\n  \
    \  if (empty($words[4])) {\n        return array();\n    }\n\n    // If the string\
    \ contains only whitespace return empty array\n    if (empty($words[5])) {\n \
    \       return array();\n    }\n\n    // If the string contains only whitespace\
    \ return empty array\n    if (empty($words[6])) {\n        return array();\n \
    \   }\n\n    // If the string contains only whitespace return empty array\n  \
    \  if (empty($words[7])) {\n        return array();\n    }\n\n    // If the string\
    \ contains only whitespace return empty array\n    if (empty($words[8])) {\n \
    \       return array();\n    }\n\n    // If the string contains only whitespace\
    \ return empty array\n    if (empty($words[9])) {\n        return array();\n \
    \   }\n\n    // If the string contains only whitespace return empty array\n  \
    \  if (empty($words[10])) {\n        return array();\n    }\n\n    // If the string\
    \ contains only whitespace return empty array\n    if (empty($words[11])) {\n\
    \        return array();\n    }\n\n    // If the string contains only whitespace\
    \ return empty array\n    if (empty($words[12])) {\n        return array();\n\
    \    }\n\n    // If the string contains only whitespace return empty array\n \
    \   if (empty($words[13])) {\n        return array();\n    }\n\n    // If the\
    \ string contains only whitespace return empty array\n    if (empty($words[14]))\
    \ {\n        return array();\n    }\n\n    // If the string contains only whitespace\
    \ return empty array\n    if (empty($words[15])) {\n        return array();\n\
    \    }\n\n    // If the string contains only whitespace return empty array\n \
    \   if (empty($words[16])) {\n        return array();\n    }\n\n    // If the\
    \ string contains only whitespace return empty array\n    if (empty($words[17]))\
    \ {\n        return array();\n    }\n\n    // If the string contains only whitespace\
    \ return empty array\n    if (empty($words[18])) {\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 118 in /tmp/tmpmdy5x2aa.php on line 135

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n\t$words = preg_split('/[^a-zA-Z]+/',\
    \ $txt, -1, PREG_SPLIT_NO_EMPTY);\n\tif (strlen($words[0]) > 0) {\n\t\treturn\
    \ $words;\n\t} else {\n\t\treturn count(array_filter(preg_split('/[^a-z]+/i',\
    \ $txt)));\n\t}\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9h_xmdcx.php:26\n\
    Stack trace:\n#0 /tmp/tmp9h_xmdcx.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp9h_xmdcx.php\
    \ on line 26\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n\
    \    if ($txt[0] !== ' ') {\n        $words[0] = ' ' . $words[0];\n    }\n   \
    \ return $words;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpie34q12n.php:25\n\
    Stack trace:\n#0 /tmp/tmpie34q12n.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpie34q12n.php\
    \ on line 25\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $txt = strtolower($txt);\n\n\
    \    $wordArray = explode(' ', $txt);\n    $wordCount = count($wordArray);\n \
    \   $oddCount = 0;\n    $evenCount = 0;\n    $letterCount = 0;\n\n    $oddOrder\
    \ = array();\n    $evenOrder = array();\n\n    // Get odd order of letters from\
    \ text and store it in an array\n    for ($x = 0; $x < $wordCount; $x++) {\n \
    \       $x = ord($wordArray[$x]);\n        if ($x % 2 == 0) {\n            $evenOrder[]\
    \ = $x;\n        } else {\n            $oddOrder[] = $x;\n        }\n    }\n\n\
    \    $evenCount = count($evenOrder);\n    $oddCount = count($oddOrder);\n    $letterCount\
    \ = count($txt);\n\n    if ($letterCount % 2 == 0) {\n        $evenCount++;\n\
    \    } else {\n        $oddCount++;\n    }\n\n    return array($wordArray, $letterCount,\
    \ $evenCount, $oddCount, $evenOrder, $oddOrder);\n}\n\n$txt = 'Hello world!';\n\
    $letterCount, $evenCount, $oddCount, $evenOrder, $oddOrder = split_words($txt);\n\
    echo \"<pre>\";\nprint_r($txt);\nprint_r($evenOrder);\nprint_r($oddOrder);\necho\
    \ \"</pre>\";\necho \"<br>\";\necho \"<br>\";\necho \"<br>\";\n\n/*\n    Outputs:\n\
    \    Hello world!\n    Array\n    (\n        [0] => 0\n        [1] => 1\n    \
    \    [2] => 2\n    )\n\n    Array\n    (\n        [0] => 0\n        [1] => 1\n\
    \        [2] => 2\n    )\n*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "," in /tmp/tmpbxridh2b.php on line
    48

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n\
    \    return $words;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy40c9x3u.php:23\n\
    Stack trace:\n#0 /tmp/tmpy40c9x3u.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpy40c9x3u.php\
    \ on line 23\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  $words = explode(' ', $txt);\n\
    \  return count($words) ? $words : array();\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdzli2rie.php:23\n\
    Stack trace:\n#0 /tmp/tmpdzli2rie.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpdzli2rie.php\
    \ on line 23\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  // split on comma if no white\
    \ space exists in the text\n  $arr = explode(\",\", $txt);\n\n  // if there is\
    \ no white space in the text, split on comma and return number of words\n  if\
    \ (strpos($arr[0], \"  \") == false) {\n    $arr = explode(\",\", $txt);\n   \
    \ return count($arr);\n  }\n  return count($arr);\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd6xzcrmb.php:29\n\
    Stack trace:\n#0 /tmp/tmpd6xzcrmb.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpd6xzcrmb.php\
    \ on line 29\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    return preg_split('/\\s+/m',\
    \ $txt);\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppgsoo1t9.php:22\n\
    Stack trace:\n#0 /tmp/tmppgsoo1t9.php(31): test()\n#1 {main}\n  thrown in /tmp/tmppgsoo1t9.php\
    \ on line 22\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = preg_split('/[\\s,]+/',\
    \ $txt);\n    $words = array_filter($words);\n    return $words;\n}\n\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpthf6nv0d.php:25\n\
    Stack trace:\n#0 /tmp/tmpthf6nv0d.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpthf6nv0d.php\
    \ on line 25\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    foreach (explode(' ', $txt)\
    \ as $word) {\n        if (preg_match('/[a-z]/', $word) && $word{0} != $word{1})\
    \ {\n            return $word;\n        }\n    }\n    return count(array_filter(explode('\
    \ ', $txt), function($word) {\n        return preg_match('/[a-z]/', $word) &&\
    \ $word{0} != $word{1} && $word != '';\n    })) % 2 ? count(array_filter(explode('\
    \ ', $txt), function($word) {\n        return preg_match('/[a-z]/', $word) &&\
    \ $word{0} != $word{1} && $word != '';\n    })) : count(array_filter(explode('\
    \ ', $txt), function($word) {\n        return preg_match('/[a-z]/', $word) &&\
    \ $word != '';\n    }));\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Array and string offset access syntax with curly braces is no longer
    supported in /tmp/tmp1pprms5n.php on line 14

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = preg_split(\"/[\\\
    s,]+/\", $txt);\n    return $words;\n}\n\nfunction candidate(...$args) {\n   \
    \ return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpayf3_4hw.php:24\n\
    Stack trace:\n#0 /tmp/tmpayf3_4hw.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpayf3_4hw.php\
    \ on line 24\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  $txt = trim($txt);\n  $words\
    \ = array();\n  $words = explode(' ', $txt);\n  if(count($words) < 1) {\n    $words\
    \ = explode(',', $txt);\n  }\n  return $words;\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn1xjcepi.php:28\n\
    Stack trace:\n#0 /tmp/tmpn1xjcepi.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpn1xjcepi.php\
    \ on line 28\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    if (strlen($txt) < 1) {\n \
    \       return array();\n    }\n    $txt = strtolower($txt);\n    $words = preg_split(\"\
    /[\\s,]+/\", $txt);\n    sort($words);\n    return $words;\n}\n</code>\n<|/ a\
    \ dscore=2 tags=php |>\n<| a tags=php |>\n<code>\n$arr = [\n    \"Hello world\"\
    ,\n    \"Hello World\",\n    \"Hello WORLD\",\n    \"HELLO WORLD\",\n    \"Hello\
    \ World!!\",\n    \"Hello World! How are you?\",\n    \"Hello World! Hello World!\
    \ How are you?\",\n    \"Hello world!!\",\n    \"Hello World! HELLO WORLD!!!\"\
    ,\n    \"Hello World!!! Hello World!!! How are you????\",\n    \"Hello World!!!\
    \ HELLO WORLD!!! How are you????\",\n    \"Hello World!!! Hello World!!! How are\
    \ you????? Hello World!!! Hello World!!! How are you??????\",\n];\n\nforeach ($arr\
    \ as $value) {\n    $words = preg_split(\"/[\\s,]+/\", $value, -1, PREG_SPLIT_NO_EMPTY);\n\
    \    sort($words);\n    print_r(array_slice($words, 0, count($words)));\n    echo\
    \ PHP_EOL;\n}\n</code>\nResult:\n<code>\nArray\n(\n    [0] => Hello\n    [1] =>\
    \ world\n    [2] => Hello\n    [3] => World\n    [4] => Hello\n    [5] => WORLD\n\
    \    [6] => Hello\n    [7] => World\n    [8] => Hello\n    [9] => WORLD\n    [10]\
    \ => Hello\n    [11] => World\n    [12] => Hello\n    [13] => World\n    [14]\
    \ => Hello\n    [15] => World\n    [16] => Hello\n    [17] => World\n    [18]\
    \ => Hello\n    [19] => World\n    [20] => Hello\n    [21] => World\n    [22]\
    \ => Hello\n    [23] => World\n    [24] => Hello\n    [25] => World\n    [26]\
    \ => Hello\n    [27] => World\n    [28] => Hello\n    [29] => World\n    [30]\
    \ => Hello\n    [31] => World\n    [32] => Hello\n    [33] => World\n    [34]\
    \ => Hello\n    [35] => World\n    [36] => Hello\n    [37] => World\n    [38]\
    \ => Hello\n    [39] => World\n    [40] => Hello\n    [41] => World\n    [42]\
    \ => Hello\n    [43] => World\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp8edebx1d.php
    on line 21

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    if (!is_string($txt)) {\n \
    \       throw new Exception(\"Incorrect type. Expecting a string\", 1);\n    }\n\
    \n    // Split on commas if commas exist but don't split on spaces ' '\n    if\
    \ (!preg_match('~(?:\\s*,\\s*|\\s+)~', $txt)) {\n        return preg_split('~\\\
    s+~', $txt, -1, PREG_SPLIT_NO_EMPTY);\n    }\n\n    $split = [];\n    $words =\
    \ preg_split('~,+~', $txt);\n    foreach ($words as $word) {\n        // Remove\
    \ whitespace\n        $word = trim($word);\n        // Ignore empty words\n  \
    \      if (empty($word)) {\n            continue;\n        }\n        // Split\
    \ on whitespace\n        if (!preg_match('~^[^a-z]*|[^a-z]*$~i', $word)) {\n \
    \           $word = preg_split('~\\s+~', $word, -1, PREG_SPLIT_NO_EMPTY);\n  \
    \      }\n        $split = array_merge($split, $word);\n    }\n\n    $words =\
    \ array_unique($split);\n    $word_counts = array_count_values($words);\n    $words_sorted\
    \ = array_flip($word_counts);\n    $result = array();\n    foreach ($word_counts\
    \ as $word => $count) {\n        if ($count % 2) {\n            array_push($result,\
    \ $word);\n        }\n    }\n\n    return $result;\n}\n</code>\n<|/ a tags=arrays,php,algorithm,count\
    \ |>\n<| a dscore=0 tags=arrays,php,algorithm,count |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpt53p8biw.php
    on line 50

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = [];\n    if (preg_match_all(\"\
    /[a-z]+/i\", $txt, $matches)) {\n        foreach ($matches[0] as $value) {\n \
    \           $words[] = $value;\n        }\n    } else {\n        $words = preg_split(\"\
    /[\\s,]+/\", $txt);\n    }\n    return $words;\n}\n</code>\n<|/ a |>\n<| a tags=php,arrays,string\
    \ |>\nYou could use preg_match_all:\n<code>\nfunction candidate(...$args) {\n\
    \    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpiwr2i5nx.php
    on line 23

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n\
    \    $words = array_filter($words);\n    array_walk($words, function(&$value){\n\
    \        $value = strtolower($value);\n    });\n    return array_filter($words);\n\
    }\n</code>\n<|/ a tags=arrays,php,string |>\n<| c |>\nGreat solution. Just FYI\
    \ that this will only return words that start with letters. So 'Hello World!'\
    \ returns only 'hello'.\n<|/ c |>\n<| c |>\nThanks I just used this to get a list\
    \ of all possible word combinations.\n<|/ c |>\n<| c |>\nI updated my answer to\
    \ include the `ord` function and to include all non-alpha chars\n<|/ c |>\n<|\
    \ c |>\nThanks for the addition! :)\n<|/ c |>\n<| a dscore=4 |>\nI've used this\
    \ function to solve this exact problem. It counts the number of occurrences of\
    \ each letter in a string and returns it as an associative array:\n<code>\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpu5jb5zn5.php
    on line 20

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $txt = trim($txt);\n    return\
    \ explode(' ', trim($txt));\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpppfh0nk9.php:23\n\
    Stack trace:\n#0 /tmp/tmpppfh0nk9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpppfh0nk9.php\
    \ on line 23\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $wordArray = explode(\" \"\
    ,$txt);\n    if(count($wordArray) == 1)\n        return $wordArray;\n\n    $noWhiteSpaceWords\
    \ = array();\n    foreach($wordArray as $word){\n        if(strlen($word) > 0){\n\
    \            $noWhiteSpaceWords[] = $word;\n        }\n    }\n    return $noWhiteSpaceWords;\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcp3cqs9n.php:32\n\
    Stack trace:\n#0 /tmp/tmpcp3cqs9n.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpcp3cqs9n.php\
    \ on line 32\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    return array_filter($txt, function\
    \ ($x) {\n        return preg_match('/^[a-z]*$/i', $x) ? 1 : 0;\n    });\n}\n\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_filter(): Argument #1 ($array)\
    \ must be of type array, string given in /tmp/tmpac8z08e1.php:15\nStack trace:\n\
    #0 /tmp/tmpac8z08e1.php(15): array_filter('Hello world!', Object(Closure))\n#1\
    \ /tmp/tmpac8z08e1.php(19): split_words('Hello world!')\n#2 /tmp/tmpac8z08e1.php(23):\
    \ candidate('Hello world!')\n#3 /tmp/tmpac8z08e1.php(33): test()\n#4 {main}\n\
    \  thrown in /tmp/tmpac8z08e1.php on line 15\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    return explode(' ', $txt);\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcqdh9ndg.php:22\n\
    Stack trace:\n#0 /tmp/tmpcqdh9ndg.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcqdh9ndg.php\
    \ on line 22\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = preg_split(\"/[\\\
    s,]+/\", $txt);\n    $words = array_filter($words);\n    return count($words)\
    \ % 2 == 0 && !count($words) ? '' : $words;\n}\n</code>\n<|/ a dscore=5 tags=php,string,split\
    \ |>\n<| c |>\n`array_map` should be used for an operation on each element of\
    \ an array; not for splitting strings.\n<|/ c |>\n<| c |>\nI see no reason to\
    \ split on commas, just split on whitespace using `\\s` regex and filter out the\
    \ empty strings.\n<|/ c |>\n<| c |>\nFor those unfamiliar with regex: \\s means\
    \ whitespace, \\S means non-whitespace, + means one or more, and * means zero,\
    \ so '\\s', means \"any whitespace character\". It's very useful.\n<|/ c |>\n\
    <| c |>\nthis solution will get you in trouble if you have a space in your input\
    \ string for example : \"Hello   World!\"\n<|/ c |>\n<| c |>\n`preg_split(\"/[\\\
    s,]+/\", $txt);` - You don't need regex for this. Simple `explode(\", \", $txt);`\
    \ will do the trick.\n<|/ c |>\n<| a dscore=5 |>\nIn case you need more than one\
    \ word\n<code>\n$str = 'Hello     world! :)';\n\n$words = preg_split(\"/\\s+/\"\
    , $str);\n\nvar_dump($words);\n\nArray\n(\n    [0] => Hello\n    [1] => world!\n\
    \    [2] => :)\n)\n</code>\n<|/ a tags=php,string,split |>\n<| c |>\nI like this\
    \ solution because it keeps linebreaks.\n<|/ c |>\n<| c |>\nThis will include\
    \ leading and trailing spaces in the array elements\n<|/ c |>\n<| c |>\n`preg_split(\"\
    /\\s+/\", $str)` keeps linebreaks as well\n<|/ c |>\n<| c |>\nThis is much better\
    \ than the accepted answer.\n<|/ c |>\n<| a tags=php,string,split |>\nFor those\
    \ who, like me, don't like regex.\n<code>\n$str = 'Hello     world! :)';\n$str\
    \ = explode(\" \", $str);\n$str = array_filter($str);\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis answer fails if there is a space in the string such as \"\
    Hello World!\"\n<|/ c |>\n<| c |>\nWhy would you do this? You don't \nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp05v9tiqo.php
    on line 17

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $word_list = preg_split('/[\\\
    s,]+/', $txt);\n    $num_words =0;\n    $odd_words = array();\n    foreach ($word_list\
    \ as $word){\n        if (is_numeric($word)) {\n            $num_words++;\n  \
    \          if ($num_words%2 == 0) {\n                $odd_words[] = $word;\n \
    \           } else {\n                $odd_words = array();\n            }\n \
    \       } else {\n            $odd_words = array();\n        }\n    }\n    return\
    \ $num_words;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpidnwt0yf.php:36\n\
    Stack trace:\n#0 /tmp/tmpidnwt0yf.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpidnwt0yf.php\
    \ on line 36\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n\
    \    return count($words) > 1 ? $words : $words[0];\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpooia2nwo.php:23\n\
    Stack trace:\n#0 /tmp/tmpooia2nwo.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpooia2nwo.php\
    \ on line 23\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  return str_word_count($txt, 1);\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_xv6l1dj.php:21\n\
    Stack trace:\n#0 /tmp/tmp_xv6l1dj.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_xv6l1dj.php\
    \ on line 21\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  return preg_split(\" \", $txt,\
    \ null, PREG_SPLIT_NO_EMPTY);\n}\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: preg_split(): Passing null to parameter #3 ($limit) of type\
    \ int is deprecated in /tmp/tmp4af2kumu.php on line 13\n\nWarning: preg_split():\
    \ Empty regular expression in /tmp/tmp4af2kumu.php on line 13\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp4af2kumu.php:20\nStack trace:\n\
    #0 /tmp/tmp4af2kumu.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp4af2kumu.php\
    \ on line 20\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $word_count = 0; $words = array();\n\
    \    for($i = 0; $i < strlen($txt); $i++) {\n        $char = substr($txt, $i,\
    \ 1);\n        if($char == ' ' || $char == ',' || $char == '-' || $char == '('\
    \ || $char == ')' || $char == '[' || $char == ']' || $char == '<' || $char ==\
    \ '>') {\n            $word_count++;\n        }\n        else {\n            $words[]\
    \ = $txt[$i];\n        }\n    }\n    if($word_count == 0) {\n        $words[]\
    \ = $txt;\n        $word_count = 1;\n    }\n    return $word_count;\n}\n\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx5l3hn_p.php:35\n\
    Stack trace:\n#0 /tmp/tmpx5l3hn_p.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpx5l3hn_p.php\
    \ on line 35\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    return preg_split('/\\s+/',\
    \ $txt);\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpen0iouq5.php:22\n\
    Stack trace:\n#0 /tmp/tmpen0iouq5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpen0iouq5.php\
    \ on line 22\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n\t$result = array();\n\t$word =\
    \ null;\n\t$char = null;\n\t$words = preg_split(\"/[\\s,]+/\", $txt);\n\tforeach\
    \ ($words as $key => $word) {\n\t\t$length = strlen($word);\n\t\t$words[$key]\
    \ = $word;\n\t\tif ($length == 0) $result[] = $word;\n\t\t$words[$key] = $word;\n\
    \t}\n\treturn $result;\n}\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk07vl7t4.php:30\n\
    Stack trace:\n#0 /tmp/tmpk07vl7t4.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpk07vl7t4.php\
    \ on line 30\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n\
    \    foreach($words as $word){\n        if(preg_match('/\\s/', $word)){\n    \
    \        $words = array_merge($words, explode(',', $word));\n            break;\n\
    \        }\n    }\n    return $words;\n}\n\nfunction candidate(...$args) {\n \
    \   return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2wiqo50z.php:29\n\
    Stack trace:\n#0 /tmp/tmp2wiqo50z.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp2wiqo50z.php\
    \ on line 29\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n\t$words = preg_split('/\\s+/',\
    \ $txt);\n\t$words = array_filter($words);\n\tforeach($words as &$word) {\n\t\t\
    $word = strtolower($word);\n\t}\n\tsort($words);\n\tunset($words);\n\treturn $words;\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $words in /tmp/tmpp00y6min.php on line 20\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp00y6min.php:28\nStack\
    \ trace:\n#0 /tmp/tmpp00y6min.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpp00y6min.php\
    \ on line 28\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = preg_split('/[\\s,]+/',\
    \ $txt);\n    if (count($words) === 0) {\n        // Return the length of the\
    \ text as we dont have a valid text to work with\n        return count($txt);\n\
    \    }\n    return $words;\n}\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1rv1zlhc.php:27\n\
    Stack trace:\n#0 /tmp/tmp1rv1zlhc.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp1rv1zlhc.php\
    \ on line 27\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    // your code here\n    // $words\
    \ = str_word_count($txt);\n    $words = preg_split(\"/[\\s-]+/\", $txt, -1, PREG_SPLIT_NO_EMPTY);\n\
    \    return $words;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbn87omwi.php:25\n\
    Stack trace:\n#0 /tmp/tmpbn87omwi.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbn87omwi.php\
    \ on line 25\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n\t$txt = strtolower($txt);\n\t\
    $words = explode(\" \", $txt);\n\treturn $words;\n}\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4sloap5s.php:22\n\
    Stack trace:\n#0 /tmp/tmp4sloap5s.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp4sloap5s.php\
    \ on line 22\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/',\
    \ $txt);\n    $length = count($words);\n    if ($length == 1) {\n        return\
    \ array($words[0]);\n    }\n    for ($i = 1; $i < $length; $i++) {\n        //\
    \ If the current word is equal to the previous word\n        if ($words[$i - 1]\
    \ == $words[$i]) {\n            $words[$i] += ' ';\n        }\n    }\n    return\
    \ $words;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpptq_yopt.php:33\n\
    Stack trace:\n#0 /tmp/tmpptq_yopt.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpptq_yopt.php\
    \ on line 33\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  $words = explode(' ', $txt);\n\
    \  if (empty($words)) {\n    $words = explode(',', $txt);\n    if (empty($words))\
    \ {\n      $words = explode('\\'', $txt);\n      if (empty($words)) {\n      \
    \  $words = count(str_split($txt));\n      }\n    }\n  }\n  return $words;\n}\n\
    </code>\n<|/ a dscore=3 tags=php,regex,arrays,split,string |>\n<| c |>\n+1 I like\
    \ your solution since it returns an array even if there weren't any words to split.\
    \ It does have a problem with commas though. I'm thinking `preg_split()` is probably\
    \ more robust.\n<|/ c |>\n<| a tags=php,regex,arrays,split,string |>\nIf you don't\
    \ need to worry about commas, you can just use:\n<code>\n$arr = preg_split('/,/',\
    \ 'astringwithcommas,,astringwithcommas,');\n</code>\n<|/ a dscore=3 |>\n<| a\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpxalr1e0g.php
    on line 25

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    return str_word_count(\n  \
    \      preg_replace('~[^\\p{L}\\s]~u', '', $txt),\n        0,\n        'a'\n \
    \   );\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe0i_r44m.php:25\n\
    Stack trace:\n#0 /tmp/tmpe0i_r44m.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpe0i_r44m.php\
    \ on line 25\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    if (strpos($txt, ' ') == false)\
    \ {\n        // no space exists in the text so we should split on commas ',' instead\n\
    \        return str_split($txt, ',');\n    } else {\n        return str_split($txt);\n\
    \    }\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\nI like\
    \ Kyle Cranmer's answer, but I want to add the other way, using explode:\n<code>\n\
    $words = explode(' ', $txt);\n$num_odd_letters = count(array_filter($words, function($word)\
    \ {\n    return $word !== '';\n}), $num_odd_letters);\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\nYou can use the function array_map to split each word\
    \ in one step and then you can count the empty strings afterwards to get the number\
    \ of odd letters:\n<code>\n$txt = \"Hello world!\";\n$words = array_map('str_split',\
    \ $txt);\n$count = count(array_filter($words), function($el) { return !empty($el);\
    \ });\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nI like this approach too. Thank\
    \ you!\n<|/ c |>\n<| a tags=php,arrays dscore=0 |>\n<code>\n<?php\n\n$text = 'Hello\
    \ world!';\n$words = explode(\" \", $text);\n\n$oddLettersCount = count($words);\n\
    \n$text = 'Hello world!';\n$words = explode(\" \", $text);\n\n$evenLettersCount\
    \ = count($words);\necho \"Odd letters count is: \" . $oddLettersCount;\necho\
    \ \"<br/>\";\necho \"Even letters count is: \" . $evenLettersCount;\n\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp0in8xe9b.php
    on line 20

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/',\
    \ $txt);\n    foreach($words as $key => $word) {\n        $words[$key] = trim(strtolower($word));\n\
    \    }\n    return $words;\n}\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz6vhl5kf.php:24\n\
    Stack trace:\n#0 /tmp/tmpz6vhl5kf.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpz6vhl5kf.php\
    \ on line 24\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  $text = explode(\" \", $txt);\n\
    \  \n  if(count($text) == 1) {\n    return array($text);\n  }\n  \n  if(count($text)\
    \ > 2) {\n    return array($text[0], $text[1]);\n  }\n  \n  return array($text[0]);\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxchhhoht.php:31\n\
    Stack trace:\n#0 /tmp/tmpxchhhoht.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpxchhhoht.php\
    \ on line 31\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/\\s/', '', $txt);\n    return explode(',', $txt);\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpql5cqd_m.php:23\n\
    Stack trace:\n#0 /tmp/tmpql5cqd_m.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpql5cqd_m.php\
    \ on line 23\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = array();\n    if (empty($txt))\
    \ {\n        return $words;\n    }\n    $words = explode(' ', $txt);\n    $count\
    \ = count($words);\n    if ($count > 0) {\n        for ($i = 0; $i < $count; $i++)\
    \ {\n            $words[$i] = trim($words[$i]);\n        }\n    }\n    $count\
    \ = count($words);\n    if ($count > 0) {\n        for ($i = 0; $i < $count; $i++)\
    \ {\n            $words[$i] = strtolower($words[$i]);\n        }\n    }\n    return\
    \ $words;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1h55qt13.php:38\n\
    Stack trace:\n#0 /tmp/tmp1h55qt13.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp1h55qt13.php\
    \ on line 38\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  $words = preg_split('/[^a-z0-9]+/i',\
    \ $txt);\n  $len  = strlen($words[0]);\n  foreach ($words as $idx => $word) {\n\
    \    if (strlen($word) > $len) {\n      $words[$idx] = substr($word, 0, $len);\n\
    \    }\n  }\n  return $words;\n}\n</code>\n<|/ a dscore=1 tags=php,regex |>\n\
    <| a tags=php,regex |>\nThe regular expression to extract only the alphanumeric\
    \ characters of a string is this:\n<code>\n[A-Za-z0-9]+\n</code>\nThe PHP code\
    \ that uses this regular expression is this:\n<code>\n$regex = '~(?<=\\p{L})(?=\\\
    p{L})~u';\npreg_match_all($regex, $string_to_be_regex_matched);\n</code>\nThis\
    \ expression only matches alphanumeric characters, but the result will include\
    \ the letters themselves.\n<|/ a dscore=1 |>\n<| a tags=php,regex |>\nTry this:\n\
    <code>\n$text = \"Hello World!\";\n$pattern = '/[a-z0-9]/';\npreg_match_all($pattern,\
    \ $text, $matches);\nforeach ($matches as $match) {\n    echo $match.\"\\n\";\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\n`preg_match_all` returns the number of\
    \ matches.\n<|/ c |>\n<| c |>\nYeah, he should be able to get the matches via\
    \ $matches[0].\n<|/ c |>\n<| c |>\nAnd he doesn't have to `foreach` it... But\
    \ if you do, it should be `$matches[0]`.\n<|/ c |>\n<| a |>\nThis will get you\
    \ the strings you want, but I'm not sure if it's exactly what you want...\n<code>\n\
    $str = \"Hello world!\";\n$words = preg_split('/\\b/', $str);\necho $words[0].\"\
    \\n\";\necho $words[1].\"\\n\";\necho $words[2].\"\\n\";\n</code>\n<|/ a tags=php,regex\
    \ dscore=0 |>\n<| c |>\nIt's not what he wants - he wants every single character.\n\
    <|/ c |>\n<| c |>\nOh wow, I didn't know that was what he wanted.  I updated my\
    \ answer to be a bit more general.\n<|/ c |>\n<| a dscore=0 |>\nIt appears you\
    \ want to split up a string of arbitrary length into an array of characters. The\
    \ following code should do that for you:\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp6g79nl0z.php
    on line 22

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $word_count = count(preg_split('/\\\
    s+/', $txt));\n    $words = preg_split('/[,]+/', $txt);\n    return $word_count\
    \ == count($words) ? $words : array();\n}\n\nfunction candidate(...$args) {\n\
    \    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpprweivc9.php:23\n\
    Stack trace:\n#0 /tmp/tmpprweivc9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpprweivc9.php\
    \ on line 23\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $arr = explode(' ', $txt);\n\
    \    return count($arr) == 0 ? count(array_filter(str_split($txt))) : count($arr);\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmmm9e4i4.php:22\n\
    Stack trace:\n#0 /tmp/tmpmmm9e4i4.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpmmm9e4i4.php\
    \ on line 22\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $spaces = explode(' ', $txt);\n\
    \    $commas = explode(',', $txt);\n    $letters = explode('a', $txt);\n    return\
    \ count($spaces) > count($commas) ? count($spaces) : count($commas);\n}\n\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2ki3n7e.php:24\n\
    Stack trace:\n#0 /tmp/tmpg2ki3n7e.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpg2ki3n7e.php\
    \ on line 24\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    if ($txt === \"\") {\n    \
    \    return array();\n    }\n\n    $words = str_word_count($txt, 2);\n    $count\
    \ = 1;\n    $letters = array();\n    foreach ($words as $word) {\n        $letters[]\
    \ = $word;\n        if ($count % 2) {\n            continue;\n        }\n    \
    \    $letters[] = chr(ord($word[1]) - ord('a') + 1);\n        $count++;\n    }\n\
    \    return $letters;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph2e94187.php:36\n\
    Stack trace:\n#0 /tmp/tmph2e94187.php(46): test()\n#1 {main}\n  thrown in /tmp/tmph2e94187.php\
    \ on line 36\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  $split = preg_split('/\\s+/',\
    \ $txt);\n  if (empty($split)) {\n    $split = [\"\"];\n  }\n  return $split;\n\
    }\n\n/**\n * Given a text string and a delimiter, split that string into words\
    \ and return them as an array.\n *\n * @param string $text Text to split.\n *\
    \ @param string $delimiter Delimiter to split the text string on. Spaces are recommended.\n\
    \ * @param boolean $ignore If true then whitespaces in $text are ignored and their\
    \ whitespace is preserved.\n *\n * @return array\n */\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp41sx7fmo.php:35\n\
    Stack trace:\n#0 /tmp/tmp41sx7fmo.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp41sx7fmo.php\
    \ on line 35\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  $splitWords = explode(' ', $txt);\n\
    \  foreach ($splitWords as &$word) {\n    $word = trim($word);\n    if (empty($word))\
    \ {\n      return;\n    }\n  }\n  return $splitWords;\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi4n6l6fk.php:29\n\
    Stack trace:\n#0 /tmp/tmpi4n6l6fk.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpi4n6l6fk.php\
    \ on line 29\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  preg_match_all('/\\s(?=[a-z])|(?<=[a-z])\\\
    s/', $txt, $matches);\n  return isset($matches[0]) ? $matches[0] : count(array_filter(array_unique(str_split(strtolower($txt))),\
    \ 'is_string'));\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcain0fmu.php:22\n\
    Stack trace:\n#0 /tmp/tmpcain0fmu.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpcain0fmu.php\
    \ on line 22\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    if ($txt === '') {\n      \
    \  return array();\n    }\n    $words = explode(' ', $txt);\n    return count($words)\
    \ ? $words : explode(',', $txt);\n}\n\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8h38a9t2.php:26\n\
    Stack trace:\n#0 /tmp/tmp8h38a9t2.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp8h38a9t2.php\
    \ on line 26\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $wordArr = preg_split('/[,\\\
    s]+/', $txt);\n    return count($wordArr) == 1 ? $wordArr : $wordArr;\n}\n\n/**\n\
    \ * Return all words in the given text that occur 2 or fewer times after the first\
    \ word.\n *\n * @param string $txt\n *\n * @return string\n *\n * @see http://stackoverflow.com/a/2714802/1438393\n\
    \ */\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_cncu5r.php:33\n\
    Stack trace:\n#0 /tmp/tmp1_cncu5r.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp1_cncu5r.php\
    \ on line 33\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  $txt = strtolower($txt);\n  $word_count\
    \ = 0;\n  $words = array();\n  foreach (explode(' ', $txt) as $word) {\n    $words[]\
    \ = $word;\n    $word_count++;\n  }\n\n  if (!array_key_exists('a' . $word_count,\
    \ $words)) {\n    $words[] = 'a';\n    $word_count++;\n  }\n\n  if (!array_key_exists('b'\
    \ . $word_count, $words)) {\n    $words[] = 'b';\n    $word_count++;\n  }\n\n\
    \  if (!array_key_exists('c' . $word_count, $words)) {\n    $words[] = 'c';\n\
    \    $word_count++;\n  }\n\n  if (!array_key_exists('d' . $word_count, $words))\
    \ {\n    $words[] = 'd';\n    $word_count++;\n  }\n\n  if (!array_key_exists('e'\
    \ . $word_count, $words)) {\n    $words[] = 'e';\n    $word_count++;\n  }\n\n\
    \  if (!array_key_exists('f' . $word_count, $words)) {\n    $words[] = 'f';\n\
    \    $word_count++;\n  }\n\n  if (!array_key_exists('g' . $word_count, $words))\
    \ {\n    $words[] = 'g';\n    $word_count++;\n  }\n\n  if (!array_key_exists('h'\
    \ . $word_count, $words)) {\n    $words[] = 'h';\n    $word_count++;\n  }\n\n\
    \  if (!array_key_exists('i' . $word_count, $words)) {\n    $words[] = 'i';\n\
    \    $word_count++;\n  }\n\n  if (!array_key_exists('j' . $word_count, $words))\
    \ {\n    $words[] = 'j';\n    $word_count++;\n  }\n\n  if (!array_key_exists('k'\
    \ . $word_count, $words)) {\n    $words[] = 'k';\n    $word_count++;\n  }\n\n\
    \  if (!array_key_exists('l' . $word_count, $words)) {\n    $words[] = 'l';\n\
    \    $word_count++;\n  }\n\n  if (!array_key_exists('m' . $word_count, $words))\
    \ {\n    $words[] = 'm';\n    $word_count++;\n  }\n\n  if (!array_key_exists('n'\
    \ . $word_count, $words)) {\n    $words[] = 'n';\n    $word_count++;\n  }\n\n\
    \  if (!array_key_exists('o' . $word_count, $words)) {\n    $words[] = 'o';\n\
    \    $word_count++;\n  }\n\n  if (!array_key_exists('p' . $word_count, $words))\
    \ {\n    $words[] = 'p';\n    $word_count++;\n  }\n\n  if (!array_key_exists('q'\
    \ . $word_count, $words)) {\n    $words[] = 'q\nfunction candidate(...$args) {\n\
    \    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "q" in /tmp/tmpp4f2fk36.php
    on line 102

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  $word_list = array();\n  $words\
    \ = explode(' ', $txt);\n  foreach($words as $word) {\n    $word_list[] = ucwords($word);\n\
    \  }\n  return $word_list;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp585s6d9s.php:26\n\
    Stack trace:\n#0 /tmp/tmp585s6d9s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp585s6d9s.php\
    \ on line 26\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/',\
    \ $txt);\n    sort($words);\n    $words = array_unique($words);\n    if (count($words)\
    \ == 1) {\n        return array($words[0]);\n    }\n    if (count($words) == 0)\
    \ {\n        return array();\n    }\n    $odd = 0;\n    foreach ($words as $word)\
    \ {\n        $ord = ord($word);\n        if ($ord >= ord('a')) {\n           \
    \ $odd++;\n        }\n    }\n    if ($odd % 2) {\n        $words = array_reverse($words);\n\
    \    }\n    return $words;\n}\n</code>\n<|/ a tags=sorting,php,arrays,multidimensional-array\
    \ |>\n<| c |>\nThis is awesome, thank you for the detailed explanation. My array\
    \ has over 300 entries, would it be possible to optimize the code?\n<|/ c |>\n\
    <| c |>\nI've updated the code to use `preg_split` instead of `explode` so the\
    \ `array_unique` function will take care of the duplicates automatically. You\
    \ could then remove the `array_reverse` call if you prefer it that way.\n<|/ c\
    \ |>\n<| c |>\nThanks for the speedy response. I've tried running the code but\
    \ it doesn't work. Is there anything I can do to fix this? I put `print_r($words);`\
    \ before the `return` and I put `echo $words;` after. `print_r` outputs an array\
    \ with `Array()` but `echo` does nothing (no output).\n<|/ c |>\n<| c |>\nIt might\
    \ be a syntax error or something, I can't see anything wrong in the code itself.\n\
    <|/ c |>\n<| c |>\nThat's strange, I've tried multiple times to run it. It seems\
    \ like it wouldn't run at all for me.\n<|/ c |>\n<| a tags=sorting,php,arrays,multidimensional-array\
    \ |>\nI think you can use the usort function, which sorts the array in place and\
    \ returns nothing.\nhttp://php.net/manual/en/function.usort.php\n<|/ a dscore=0\
    \ |>\n<| a tags=sorting,php,arrays,multidimensional-array |>\nTry this one \n\
    <code>\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpijbyg2_v.php
    on line 34

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    if (strlen($txt) < 2)\n   \
    \     return array();\n\n    $words = array();\n\n    $spaced = preg_split('/\\\
    s+/', $txt);\n    foreach ($spaced as $word)\n        $words[] = $word;\n\n  \
    \  $words = array_merge($words, array_filter(preg_split('/\\s+/', $txt, -1, PREG_SPLIT_NO_EMPTY)));\n\
    \n    // remove duplicate words\n    $words = array_unique($words);\n\n    //\
    \ sort the words based on letter order\n    $words = array_count_values($words);\n\
    \n    // remove any words that only have one letter\n    $words = array_filter($words);\n\
    \n    // if the word has an odd number of letters then we return it as odd\n \
    \   // otherwise we return it as even\n    return $words[$words[$word] % 2];\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI modified the code a bit, to get the number of\
    \ lower-case letters with odd order in the alphabet and I added an additional\
    \ line to return the number of words found. Hopefully this helps you out.\n<|/\
    \ c |>\n<| c |>\nNo problem! Hope this helps you out.\n<|/ c |>\n<| a |>\nI got\
    \ this in Python:\n<code>\ndef split_words(text):\n    count = 0\n    lows = 0\n\
    \    for word in text.split():\n        if word.lower() in 'abcdefghijklmnopqrstuvwxyz':\n\
    \            count += 1\n        else:\n            lows += 1\n    if lows % 2\
    \ == 1:\n        count += 1\n    return count\n</code>\nThe other solutions here\
    \ are far from optimal or optimal, but this one should be very efficient. The\
    \ reason is simple: you only need to check each word once, instead of once for\
    \ each letter in the word.\n<|/ a dscore=1 tags=php,text,split,word |>\n<| a tags=php,text,split,word\
    \ |>\nTry this:\n<code>\n<?php\n$string = \"Hello world!\";\n$words = preg_split('/\\\
    s+/', $string);\n$word_count = count($words);\n$words_odd = $word_count % 2;\n\
    if ($words_odd === 0) {\n    $word_count = count($words);\n}\necho $word_count;\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp5pgbtj8k.php
    on line 37

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/',\
    \ $txt);\n    return count($words) ? $words : count(str_split($txt));\n}\n\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0psorpjt.php:23\n\
    Stack trace:\n#0 /tmp/tmp0psorpjt.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp0psorpjt.php\
    \ on line 23\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $txt = strtolower($txt);\n\
    \    $words = preg_split('/[\\s]+/', $txt);\n    return count($words) ? $words\
    \ : preg_split('/,/', $txt);\n}\n</code>\n<|/ a |>\n<| a tags=php,string |>\n\
    <code>\n$words = \"Hello World\";\n$words = explode(' ', $words);\nsort($words);\n\
    $words = array_count_values($words);\n$words2 = array();\nforeach($words as $key\
    \ => $value) {\n    if($value % 2 == 0) {\n        $words2[] = $key;\n    }\n\
    }\nprint_r($words2);\n</code>\nhttp://sandbox.onlinephpfunctions.com/code/e66ac9ffa18a341ab9090f2b2cae1b4392b5843\n\
    <|/ a dscore=1 |>\n<| a tags=php,string |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmplebjj8iu.php
    on line 17

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    // Split on commas\n    if\
    \ ($delimiters = preg_split('/,/', $txt))\n        // Split on whitespace\n  \
    \      if ($delimiters = preg_split('/\\s+/', $txt))\n            // If no whitespaces\n\
    \            return count($delimiters) ? $delimiters : 1;\n\n    // Split on spaces\n\
    \    if ($delimiters = preg_split('/\\s+/', strtolower($txt)))\n        // If\
    \ no spaces\n        return count($delimiters) ? $delimiters : 1;\n\n    // Split\
    \ the number of lowercase letters odd in the alphabet\n    return count(preg_split('//',\
    \ $txt)) % 2 ? 1 : 2;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\nYou can use a custom\
    \ function like this:\n<code>\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpa8esz89c.php
    on line 28

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(\" \", $txt);\n\
    \    $arr = array();\n    foreach ($words as $word) {\n        $word = strtolower($word);\n\
    \        if (!empty($word)) {\n            array_push($arr, $word);\n        }\n\
    \    }\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppoj95vs4.php:29\n\
    Stack trace:\n#0 /tmp/tmppoj95vs4.php(39): test()\n#1 {main}\n  thrown in /tmp/tmppoj95vs4.php\
    \ on line 29\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    return preg_split('/\\s+/',\
    \ $txt);\n}\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxq6vohro.php:21\n\
    Stack trace:\n#0 /tmp/tmpxq6vohro.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpxq6vohro.php\
    \ on line 21\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  $words = explode(\" \", $txt);\n\
    \  return count($words) == 1 ? $words : array_count_values($words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwgh5xyvv.php:22\n\
    Stack trace:\n#0 /tmp/tmpwgh5xyvv.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpwgh5xyvv.php\
    \ on line 22\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n\
    \    $splits = array();\n    foreach ($words as $word) {\n        $splits[] =\
    \ $word;\n    }\n    return $splits;\n}\n\nfunction candidate(...$args) {\n  \
    \  return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp_ljtoha.php:27\n\
    Stack trace:\n#0 /tmp/tmpp_ljtoha.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpp_ljtoha.php\
    \ on line 27\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  return preg_split('/\\s+/', $txt);\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzu8ajl4x.php:22\n\
    Stack trace:\n#0 /tmp/tmpzu8ajl4x.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpzu8ajl4x.php\
    \ on line 22\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n\
    \    return array_filter(explode(', ', $words));\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: explode(): Argument #2 ($string) must\
    \ be of type string, array given in /tmp/tmpdas2jdsp.php:14\nStack trace:\n#0\
    \ /tmp/tmpdas2jdsp.php(14): explode(', ', Array)\n#1 /tmp/tmpdas2jdsp.php(18):\
    \ split_words('Hello world!')\n#2 /tmp/tmpdas2jdsp.php(22): candidate('Hello world!')\n\
    #3 /tmp/tmpdas2jdsp.php(32): test()\n#4 {main}\n  thrown in /tmp/tmpdas2jdsp.php\
    \ on line 14\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/',\
    \ $txt);\n    // Filter empty words and return resulting array\n    return array_filter(array_map('trim',\
    \ $words));\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpac7y3dwy.php:24\n\
    Stack trace:\n#0 /tmp/tmpac7y3dwy.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpac7y3dwy.php\
    \ on line 24\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n\
    \    return array_filter($words, function($word) {\n        return $word !== '';\n\
    \    });\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj_kq3cjb.php:25\n\
    Stack trace:\n#0 /tmp/tmpj_kq3cjb.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpj_kq3cjb.php\
    \ on line 25\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n\t$words = explode(\" \", $txt);\n\
    \t$txt = trim(implode(\" \", $words));\n\t$txt = preg_replace('/[^a-z]+/i', '\
    \ ', $txt);\n\treturn $txt;\n}\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp877ovo13.php:23\n\
    Stack trace:\n#0 /tmp/tmp877ovo13.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp877ovo13.php\
    \ on line 23\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(\" \", $txt);\n\
    \    $out = array();\n    foreach ($words as $key => $value) {\n        $out[$key]\
    \ = trim($value);\n    }\n    return $out;\n}\nfunction candidate(...$args) {\n\
    \    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9in0kcdn.php:26\n\
    Stack trace:\n#0 /tmp/tmp9in0kcdn.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp9in0kcdn.php\
    \ on line 26\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    if (!$txt) {\n        return\
    \ array();\n    }\n    $outarr = array();\n    $words = preg_split('/\\s+/', $txt,\
    \ null, PREG_SPLIT_NO_EMPTY);\n    $lenwords = count($words);\n    foreach ($words\
    \ as $i => $word) {\n        $wordlength = strlen($word);\n        if ($wordlength\
    \ > 1) {\n            $outarr[$i] = $word;\n        } else if ($wordlength ==\
    \ 1) {\n            $outarr[$i] = str_repeat($word, $lenwords - $i);\n       \
    \ }\n    }\n    return $outarr;\n}\n\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: preg_split(): Passing null to parameter #3 ($limit) of type\
    \ int is deprecated in /tmp/tmpv8xtpczm.php on line 17\n\nDeprecated: preg_split():\
    \ Passing null to parameter #3 ($limit) of type int is deprecated in /tmp/tmpv8xtpczm.php\
    \ on line 17\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv8xtpczm.php:36\n\
    Stack trace:\n#0 /tmp/tmpv8xtpczm.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpv8xtpczm.php\
    \ on line 36\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n\
    \    return count($words) > 1 ? $words : array_chunk($words, 1, true);\n}\n</code>\n\
    In other words you are making a new string with the exploded words and then you\
    \ are getting the count of words which should be 2 or more then it means you have\
    \ one or more words. if its zero then you have a single word otherwise you have\
    \ multiple.\n<|/ a dscore=0 |>\n<| c |>\nThank you, but can you please explain?\
    \ I'm struggling to understand what's going on\n<|/ c |>\n<| c |>\nSure, I have\
    \ added some comments on my code so you understand better.\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$input = \"a word a word a word a word \";\n$output = [];\n$count\
    \ = 0;\nwhile (strlen($input) > 0) {\n    $word = substr($input, -1, 1);\n   \
    \ $input  = substr($input, 0, strlen($input)-1);\n    if (isset($output[$word]))\
    \ {\n        $output[$word]++;\n    }\n    else {\n        $output[$word] = 1;\n\
    \    }\n    \n    $count++;\n}\nvar_dump($output);\necho $count;\n</code>\nResult:\n\
    <code>\narray(5) {\n    [\"a\"]=>\n    int(1)\n    [\"word\"]=>\n    int(2)\n\
    \    [\"a\"]=>\n    int(1)\n    [\"word\"]=>\n    int(2)\n    [\"a\"]=>\n    int(1)\n\
    \    [\"word\"]=>\n    int(2)\n    [\"a\"]=>\n    int(1)\n    [\"word\"]=>\n \
    \   int(2)\n}\n</code>\nExplanation:\n<code>\n<?php\n$input = \"a word a word\
    \ a word a word \";\n$output = [];\n$count = 0;\nwhile (strlen($input) > 0) {\n\
    \    $word = substr($input, -1, 1);\n    $input  = substr($input, 0, strlen($input)-1);\n\
    \    if (isset($output[$word])) {\n        $output[$word]++;\n    }\n    else\
    \ {\n        $output[$word] = 1;\n    }\n    \n    $count++;\n}\nvar_dump($output);\n\
    echo $count;\n</code>\nWe take our input string (a word a word a word a word)\
    \ and break it into \"words\" by splitting them by space. Then we count how many\
    \ times each word appears by setting a value in an array, incrementing the count\
    \ with each new time the word is encountered and finally outputting our count\
    \ using var_dump.\n<|/ a dscore=0 |>\n<| a tags=arrays,php |>\nIf you just \n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmptr82z7di.php
    on line 16

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $a = array();\n    $words =\
    \ explode(' ', $txt);\n    foreach ($words as $key => $word) {\n        $a[$key]\
    \ = $word;\n    }\n    return $a;\n}\n</code>\nAnd in my view file I have:\n<code>\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp8afqqmsy.php
    on line 20

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $split = [];\n    $word_count\
    \ = [];\n    $char_count = 0;\n    $char_check = 0;\n    foreach (str_split($txt)\
    \ as $char) {\n        $char_check++;\n        $char_count += $char;\n       \
    \ $char = strtolower($char);\n        if (!isset($split[$char])) {\n         \
    \   $split[$char] = [];\n        }\n        $split[$char][] = $char_check;\n \
    \       if (!isset($word_count[$char])) {\n            $word_count[$char] = 0;\n\
    \        }\n        $word_count[$char]++;\n    }\n    $char_count -= 1;\n    if\
    \ (!isset($word_count[$char_count])) {\n        $word_count[$char_count] = 0;\n\
    \    }\n    if (count($split) > 1) {\n        foreach ($split as $key => $value)\
    \ {\n            foreach ($value as $k => $v) {\n                if ($k % 2 ==\
    \ 0) {\n                    if ($char_count) {\n                        $count\
    \ = $char_count;\n                        $char_check = 0;\n                 \
    \   } else {\n                        $count = count($split);\n              \
    \          $char_check = 0;\n                    }\n                    $split[$key][$k]\
    \ = $char_count + $count;\n                }\n            }\n        }\n    }\n\
    \    $split[count($split) - 1] = [count($split) - 1];\n    return array_values(array_filter($split));\n\
    }\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmpc8jjxehp.php:19\nStack trace:\n#0 /tmp/tmpc8jjxehp.php(54): split_words('Hello\
    \ world!')\n#1 /tmp/tmpc8jjxehp.php(58): candidate('Hello world!')\n#2 /tmp/tmpc8jjxehp.php(68):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpc8jjxehp.php on line 19\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $txt = strtolower($txt);\n\
    \    $words = preg_split('/[\\s,]+/', $txt);\n    $len = count($words);\n    if\
    \ ($len % 2 == 1) {\n        return $words;\n    } else {\n        for ($i = 0;\
    \ $i < $len; $i += 2) {\n            $words[$i] = strtolower($words[$i]);\n  \
    \      }\n        return $words;\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpih58dcbs.php:31\n\
    Stack trace:\n#0 /tmp/tmpih58dcbs.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpih58dcbs.php\
    \ on line 31\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = array();\n    // Remove\
    \ all whitespaces from the original string\n    $txt = preg_replace('/\\s+/',\
    \ '', $txt);\n    // Split the string\n    $words = explode(' ', $txt);\n    return\
    \ $words;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpphhlrxv3.php:26\n\
    Stack trace:\n#0 /tmp/tmpphhlrxv3.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpphhlrxv3.php\
    \ on line 26\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  return preg_split('/(\\s)+/i',\
    \ $txt, -1, PREG_SPLIT_NO_EMPTY);\n}\n\n/**\n * Get the first number from a list\
    \ of text words\n * Given a string of words (split on whitespace), return the\
    \ number of the first word that can be converted to a number.\n * Example\n *\
    \ >>> first_number(\"12 apples 34\")\n * 12\n * >>> first_number(\"banana ban\
    \ 3 apples\")\n * 3\n * >>> first_number(\"banana ban, apples banana ban\")\n\
    \ * 0\n * >>> first_number(\"banana ban, apples banana ban\")\n * 0\n * >>> first_number(\"\
    banana ban, apples banana ban\")\n * 0\n * >>> first_number(\"banana ban, apples\
    \ banana ban\")\n * 0\n * >>> first_number(\"banana ban, apples banana ban\")\n\
    \ * 0\n * >>> first_number(\"banana ban, apples banana ban\")\n * 0\n * >>> first_number(\"\
    banana ban, apples banana ban\")\n * 0\n * >>> first_number(\"banana ban, apples\
    \ banana ban\")\n * 0\n * >>> first_number(\"banana ban, apples banana ban\")\n\
    \ * 0\n * >>> first_number(\"banana ban, apples banana ban\")\n * 0\n * >>> first_number(\"\
    banana ban, apples banana ban\")\n * 0\n * >>> first_number(\"banana ban, apples\
    \ banana ban\")\n * 0\n * >>> first_number(\"banana ban, apples banana ban\")\n\
    \ * 0\n * >>> first_number(\"banana ban, apples banana ban\")\n * 0\n * >>> first_number(\"\
    banana ban, apples banana ban\")\n * 0\n * >>> first_number(\"banana ban, apples\
    \ banana ban\")\n * 0\n * >>> first_number(\"banana ban, apples banana ban\")\n\
    \ * 0\n * >>> first_number(\"banana ban, apples banana ban\")\n * 0\n * >>> first_number(\"\
    banana ban, apples banana ban\")\n * 0\n * >>> first_number(\"banana ban, apples\
    \ banana ban\")\n * 0\n * >>> first_number\nfunction candidate(...$args) {\n \
    \   return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 16 in /tmp/tmp581s54pz.php on
    line 16

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/',\
    \ $txt);\n    $words = array_filter(array_unique($words));\n    return $words;\n\
    }\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps2z8f69y.php:23\n\
    Stack trace:\n#0 /tmp/tmps2z8f69y.php(32): test()\n#1 {main}\n  thrown in /tmp/tmps2z8f69y.php\
    \ on line 23\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  // Split the text on whitespace\n\
    \  $words = explode(' ', $txt);\n\n  // Remove the whitespace from each word\n\
    \  foreach ($words as &$word) {\n    $word = trim($word);\n  }\n\n  return $words;\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3dddcg5_.php:30\n\
    Stack trace:\n#0 /tmp/tmp3dddcg5_.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp3dddcg5_.php\
    \ on line 30\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n\t$words = explode(\" \", $txt);\n\
    \tforeach ($words as $word) {\n\t\t$word = strtolower($word);\n\t\tif (!preg_match(\"\
    /^[a-z]{$word}$/i\", $word)) {\n\t\t\treturn count($words);\n\t\t}\n\t}\n\treturn\
    \ count($words);\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkxdxbvqj.php:28\n\
    Stack trace:\n#0 /tmp/tmpkxdxbvqj.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpkxdxbvqj.php\
    \ on line 28\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $split_words = explode(\" \"\
    , $txt);\n    $count_letters_odd_order_with_odd_number = count(array_filter(\n\
    \        $split_words,\n        function ($el) {\n            return !preg_match(\"\
    /^[a-z]$/i\", $el);\n        }\n    ));\n\n    if ($count_letters_odd_order_with_odd_number\
    \ < 1) {\n        return count($split_words);\n    } else {\n        return $count_letters_odd_order_with_odd_number;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0bzpbu7s.php:33\n\
    Stack trace:\n#0 /tmp/tmp0bzpbu7s.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp0bzpbu7s.php\
    \ on line 33\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  preg_match_all('/[^\\s]+/m',\
    \ $txt, $matches);\n  return count($matches[0]) % 2 != 0;\n}\n</code>\n<|/ a tags=php,preg-match-all,preg-match,preg-match-all-group\
    \ |>\n<| a tags=php,preg-match-all,preg-match,preg-match-all-group dscore=0 |>\n\
    <code>\npreg_match_all('/^[a-z]+[a-z]*[^a-z]+[a-z]+[a-z]*$/i', $txt, $matches);\n\
    </code>\n<|/ a |>\n<| c |>\nThis fails on `abc`, because of the `*`. I think it\
    \ needs to be `*` before `[^a-z]+`\n<|/ c |>\n<| c |>\nThanks for correcting!\
    \ I meant to put it in a group, but forgot it. It's fixed now.\n<|/ c |>\n<| a\
    \ tags=php,preg-match-all,preg-match,preg-match-all-group dscore=0 |>\nJust another\
    \ answer that works:\n<code>\n$str = preg_replace('/\\s+/', ' ', preg_replace('/[^a-z]/',\
    \ '', strtolower($txt)));\n$arr = explode(\" \", $str);\n$arrLen = count($arr);\n\
    </code>\n<|/ a |>\n<| a tags=php,preg-match-all,preg-match,preg-match-all-group\
    \ |>\n<code>\n$text = \"hello world test test\";\npreg_match_all('~\\b[a-z]+\\\
    b~i', $text, $matches);\n$count = 1;\nforeach ($matches[0] as $m) {\n    echo\
    \ \"Match number: $count\\n\";\n    echo \"$m\\n\";\n    $count++;\n}\n</code>\n\
    See https://3v4l.org/0N5Zq\nExplanation\n<code>\n~\\b        # Word boundary (start\
    \ of word)\n[a-z]+     # Match one or more lower case letters\n\\b        # Word\
    \ boundary (end of word)\n~i         # Perform case insensitive match\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,preg-match-all,preg-match,preg-match-all-group\
    \ |>\nYou can use preg_replace() to get the unique words :\n<code>\n<?php\n$text\
    \ = \"Hello world! Hello world! Hello world! Hello world! Hello world! Hello world!\
    \ Hello world! Hello world! Hello world! Hello world! Hello world! Hello world!\
    \ \nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpwhu9bqwa.php
    on line 16

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $len = strlen($txt);\n    $txt\
    \ = strtolower($txt);\n    $letters = array_merge(range('a', 'z'), range('A',\
    \ 'Z'));\n    $txt = preg_replace_callback('/[^' . implode('', $letters) . ']+/',\
    \ function($s) {\n        return $s[0];\n    }, $txt);\n\n    return str_word_count($txt,\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccbm8y15.php:28\n\
    Stack trace:\n#0 /tmp/tmpccbm8y15.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpccbm8y15.php\
    \ on line 28\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n\
    \    foreach($words as &$word) {\n        if(preg_match('/[^a-z]/i', $word)) {\n\
    \            $word = strtolower($word);\n            $word = substr($word, 0,\
    \ 1);\n            $word = substr($word, 1, strlen($word)-1);\n        }\n   \
    \ }\n    return $words;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nUse\
    \ the following regex:\n<code>\n$string = preg_replace('/[^a-zA-Z0-9\\s]/', '',\
    \ $string);\n</code>\nThis removes everything but letters and spaces from your\
    \ string.\n<|/ a tags=php |>\n<| a tags=php |>\nTry this regex:\n<code>\n$result\
    \ = preg_replace('/\\W+/', '', $text);\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    I think you mean '\\w' instead of '\\W' for the beginning of string matching,\
    \ which would make the answer \"try this\" :)\n<|/ c |>\n<| a tags=php |>\nUse\
    \ this code before you start your loop\n<code>\n $string = str_replace(\",\",\
    \ \"\", $string);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nIf this answer helped\
    \ you, please mark it as accepted answer (by pressing the check mark next to it).\
    \  Thanks\n<|/ c |>\n<| a |>\nTry this \n<code>\n$string = preg_replace('/[^a-zA-Z0-9\\\
    s]/', '', $string);\n</code>\n<|/ a dscore=0 tags=php |>\n<| a dscore=0 |>\nThis\
    \ code works:\n<code>\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp2w6ssa2a.php
    on line 23

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = preg_split('/[\\s]+/',\
    \ $txt);\n    return $words;\n}\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8qncnrn.php:22\n\
    Stack trace:\n#0 /tmp/tmpl8qncnrn.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpl8qncnrn.php\
    \ on line 22\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  $words = preg_split('/\\s+/',\
    \ $txt);\n  foreach ($words as $key => $word) {\n    if ($word === '') {\n   \
    \   unset($words[$key]);\n    }\n  }\n  return $words;\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqxr_xkgh.php:28\n\
    Stack trace:\n#0 /tmp/tmpqxr_xkgh.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpqxr_xkgh.php\
    \ on line 28\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    if (!preg_match('/^[A-Za-z]+$/',\
    \ $txt)) {\n        return 0;\n    }\n    return array_filter(preg_split('/\\\
    s/', $txt, -1, PREG_SPLIT_NO_EMPTY));\n}\nfunction candidate(...$args) {\n   \
    \ return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfgi33y8a.php:23\n\
    Stack trace:\n#0 /tmp/tmpfgi33y8a.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpfgi33y8a.php\
    \ on line 23\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/u',\
    \ $txt, null, PREG_SPLIT_NO_EMPTY);\n    return $words;\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: preg_split(): Passing null to parameter #3 ($limit) of type\
    \ int is deprecated in /tmp/tmpkk9cph_h.php on line 13\n\nDeprecated: preg_split():\
    \ Passing null to parameter #3 ($limit) of type int is deprecated in /tmp/tmpkk9cph_h.php\
    \ on line 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkk9cph_h.php:23\n\
    Stack trace:\n#0 /tmp/tmpkk9cph_h.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpkk9cph_h.php\
    \ on line 23\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $word_list = preg_split(\"\
    /[\\s,]+/\", $txt);\n    if (count($word_list) === 1) {\n        $word_list[0]\
    \ = $word_list[0].',';\n    }\n    return $word_list;\n}\n</code>\n<|/ a tags=preg-split,php,regex\
    \ |>\n<| c |>\nThis is probably the cleanest, best answer so far\n<|/ c |>\n<|\
    \ c |>\nThis doesn't seem to work anymore, now it will split on any white space\
    \ characters, not just spaces. https://3v4l.org/WuJhS\n<|/ c |>\n<| c |>\nThis\
    \ solution doesn't work for multiple lines. Any ideas?\n<|/ c |>\n<| c |>\nUse\
    \ `preg_match_all` instead of `preg_split` and add `/m` modifier.\n<|/ c |>\n\
    <| a tags=preg-split,php,regex dscore=4 |>\nI believe that you are looking for\
    \ preg_match_all:\n<code>\npreg_match_all('/(?<=\\W)(?=\\w)/', $text, $matches);\n\
    </code>\nThis regex pattern matches all positions where a non-word character precedes\
    \ and a word character follows. You might want to replace \\W with \\s to match\
    \ also a space character.\nIt will give you the following result:\n<code>\narray(3)\
    \ {\n  [0]=>\n  array(3) {\n    [0]=>\n    string(5) \"Hello\"\n    [1]=>\n  \
    \  string(5) \"world\"\n    [2]=>\n    string(5) \"!\"\n  }\n  [1]=>\n  array(3)\
    \ {\n    [0]=>\n    string(5) \"Hello\"\n    [1]=>\n    string(5) \"world\"\n\
    \    [2]=>\n    string(5) \"!\"\n  }\n  [2]=>\n  array(3) {\n    [0]=>\n    string(4)\
    \ \"abcdef\"\n    [1]=>\n    string(4) \"ghijkl\"\n    [2]=>\n    string(4) \"\
    mnopqrs\"\n  }\n}\n</code>\n<|/ a |>\n<| c |>\nThis seems to work only with one\
    \ word. Maybe with a `preg_replace` ?\n<|/ c |>\n<| c |>\n: No, it works perfectly\
    \ well for me :-)\n<|/ c |>\n<| c |>\nNot for me. This doesn't seem to do what\
    \ I want. I think it's because the pattern doesn't match the entire string. My\
    \ example was a simplification of the real problem. I'm sorry about that!\n<|/\
    \ c |>\n<| \nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmprbvcnd05.php
    on line 19

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  return preg_split('/\\s+/u',\
    \ $txt);\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzcv6z2dy.php:22\n\
    Stack trace:\n#0 /tmp/tmpzcv6z2dy.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpzcv6z2dy.php\
    \ on line 22\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $txt = preg_replace('/[\\s,]+/',\
    \ ' ', $txt);\n    $txt = preg_split('/\\s+/', $txt);\n    if (count($txt) > 1)\
    \ {\n        sort($txt);\n        $txt = array_reverse($txt);\n        $txt =\
    \ array_merge($txt);\n    }\n    return $txt;\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx6ix1mi8.php:28\n\
    Stack trace:\n#0 /tmp/tmpx6ix1mi8.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpx6ix1mi8.php\
    \ on line 28\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(' ', trim($txt),\
    \ 3);\n    if (count($words) < 2) {\n        return count($words) == 1 ? $words[0]\
    \ : $words;\n    }\n\n    // Remove commas if exists.\n    $words[count($words)\
    \ - 1] = preg_replace('/,/', '', $words[count($words) - 1]);\n\n    return $words;\n\
    }\n</code>\n<|/ a |>\n<| a tags=php dscore=0 |>\nThis could be done with array_chunk\n\
    <code>\n$words = explode(' ', 'Hello World!');\n$chunks = array_chunk($words,\
    \ 2, true);\necho implode(' ', $chunks[0]).' '.implode(' ', $chunks[1]);\n</code>\n\
    https://3v4l.org/lXkQq\n<|/ a |>\n<| a tags=php |>\nI hope you realize you need\
    \ a loop and a conditional statement, like this:\n<code>\nfor ($i=0; $i<count($arr);\
    \ $i++){\n    if($i % 2 == 0){\n        $arr[$i] .= ' ';\n    }\n}\n</code>\n\
    The if conditional statement is to check if the index number is even or odd and\
    \ add a space to the output accordingly.\n<|/ a dscore=0 |>\n<| c |>\nThis looks\
    \ like the right approach, but you forgot to add the $arr into the loop. I'm guessing\
    \ you meant something like this? `for ($i=0; $i<count($arr); $i++){\n    if($i\
    \ % 2 == 0){\n        $arr[$i] .= ' ';\n    }\n}`\n<|/ c |>\n<| c |>\nYes, I forgot\
    \ to. Edited my post. Thanks :)\n<|/ c |>\n<| a tags=php dscore=0 |>\nTry below\
    \ code\n<code>\n$wordsArray = explode(' ', \"Hello World!\");\n\n$word1 = $wordsArray[0];\n\
    $word2 = $wordsArray[1];\n\n$arr = array_chunk($wordsArray, 2);\n\n$output = $arr[0][0]\
    \ . ' ' . $arr[0][1] . ' ' . $arr[1][0] . ' ' . $arr[1][1];\n\necho $output;\n\
    </code>\n<|/ a |>\n<| a tags=php |>\nYou can also use str_split to split up the\
    \ string and use array_chunk to create pairs of values.\n<code>\n$input = \"Hello\
    \ World!\";\n$words = explode(' ', $input);\n$output = array_chunk($words, 2);\n\
    \necho implode(' ', $output[0]).' '.implode(' ', $output[1]);\n</code>\nOutput:\n\
    \nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpqm471cw5.php
    on line 23

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n\t$words = explode(' ', $txt);\n\
    \t$result = array();\n\tforeach ($words as $i => $word) {\n\t\tif ($word === '')\
    \ {\n\t\t\tcontinue;\n\t\t}\n\t\t$result[] = $word;\n\t}\n\treturn $result;\n\
    }\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2v8izqu9.php:29\n\
    Stack trace:\n#0 /tmp/tmp2v8izqu9.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp2v8izqu9.php\
    \ on line 29\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n\
    \    if (count($words) == 0) {\n        return $words;\n    }\n    $last = $words[count($words)\
    \ - 1];\n    sort($words);\n    $last = strtolower($last);\n    $words[count($words)\
    \ - 1] = $last;\n    sort($words);\n    $count = count($words);\n    if ($count\
    \ % 2 == 0) {\n        return $words;\n    } else {\n        $words[$count - 1]\
    \ = $words[$count - 1] .',';\n        return $words;\n    }\n}\n</code>\n<|/ a\
    \ |>\n<| a dscore=0 |>\n<code>\n$string = preg_replace(\"/[^a-zA-Z0-9]+/\", \"\
    \ \", $string);\n$words = explode(\" \", $string);\n</code>\n<|/ a tags=php,replace,string\
    \ |>\n<| a |>\ntry this\n<code>\n$wordArray = explode(\" \", $string);\n</code>\n\
    <|/ a dscore=0 tags=php,replace,string |>\n<| a tags=php,replace,string dscore=0\
    \ |>\nThis should work:\n<code>\n$string = str_replace(',', ' ', $string);\n$array\
    \ = explode(\" \", $string);\n</code>\n<|/ a |>\n<| a dscore=0 tags=php,replace,string\
    \ |>\nI used this code:\n<code>\n$string = preg_replace(\"/[^a-zA-Z0-9]+/\", \"\
    \ \", $string);\n$words = explode(\" \", $string);\n</code>\nand it worked for\
    \ me.\n<|/ a |>\n<| a |>\n<code>\n$string = 'test1,test2,test3,test4,test5';\n\
    $arr = explode(',', $string);\n$arr = array_filter($arr);\n$arr = array_unique($arr);\n\
    $arr = array_map(function($v){\n    return trim($v);\n}, $arr);\n</code>\n<|/\
    \ a dscore=0 tags=php,replace,string |>\n<| a |>\n<code>\n$string = 'test1,test2,test3,test4,test5';\n\
    $array = explode(',', $string);\n</code>\n<|/ a dscore=0 tags=php,replace,string\
    \ |>\n<| c |>\nWhile this code snippet may solve the question, [including an explanation](http://meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers)\
    \ really helps to improve the quality of your post. Remember that you are answering\
    \ the question for reader\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmphx2bki4w.php
    on line 30

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n\
    \    return $words;\n}\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprmtx70fc.php:22\n\
    Stack trace:\n#0 /tmp/tmprmtx70fc.php(31): test()\n#1 {main}\n  thrown in /tmp/tmprmtx70fc.php\
    \ on line 22\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    // remove all whitespaces,\
    \ tabs and returns and split by commas\n    $words_list = preg_split('/[\\s,\\\
    n]+/', $txt);\n\n    $words = array();\n    foreach ($words_list as $word) {\n\
    \        // trim and lowercase the word\n        $word = trim($word);\n      \
    \  $word = mb_strtolower($word);\n        // if there are letters with the odd\
    \ order in the alphabet\n        if (isset(array_search($word, array_flip(range(ord('a'),\
    \ ord('z'))))) {\n            $words = array_merge($words, array($word));\n  \
    \      }\n        // if there are no letters with the odd order in the alphabet\n\
    \        else {\n            $words = array_merge($words, explode(',', $word));\n\
    \        }\n    }\n    return $words;\n}\n\nfunction candidate(...$args) {\n \
    \   return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "{" in /tmp/tmpe2aiqh3l.php on line
    22

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    if (!$txt) {\n        return\
    \ array();\n    }\n\n    // Remove any leading and trailing whitespace\n    $txt\
    \ = trim($txt);\n\n    // No splitting for empty string\n    if ($txt === '')\
    \ {\n        return array();\n    }\n\n    // No splitting on comma\n    if ($txt\
    \ === ',') {\n        return array();\n    }\n\n    // Split on commas\n    $words\
    \ = explode(',', $txt);\n\n    // Remove any empty values\n    return array_filter($words);\n\
    }\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbk128v5o.php:41\n\
    Stack trace:\n#0 /tmp/tmpbk128v5o.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpbk128v5o.php\
    \ on line 41\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    if ($txt === '') return array();\n\
    \    if (preg_match('/\\s+/', $txt)) return explode(' ', $txt);\n    return preg_split(\"\
    /[,|]/\", $txt, -1, PREG_SPLIT_NO_EMPTY);\n}\n\nfunction candidate(...$args) {\n\
    \    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj_dtjuxi.php:27\n\
    Stack trace:\n#0 /tmp/tmpj_dtjuxi.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpj_dtjuxi.php\
    \ on line 27\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $arr = explode(' ', $txt);\n\
    \    if (in_array('', $arr)) {\n        return array($arr);\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz_arve6z.php:26\n\
    Stack trace:\n#0 /tmp/tmpz_arve6z.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpz_arve6z.php\
    \ on line 26\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    return preg_split('/\\s+/',\
    \ $txt);\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpen0iouq5.php:22\n\
    Stack trace:\n#0 /tmp/tmpen0iouq5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpen0iouq5.php\
    \ on line 22\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $word_array = [];\n    $words\
    \ = preg_split('/[\\s,]+/', $txt);\n    foreach ($words as $word) {\n        $word\
    \ = trim(strtolower($word));\n        if (preg_match(\"/^[a-z]+$/\", $word)) {\n\
    \            $word_array[] = $word;\n        }\n    }\n    return $word_array;\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprpv8mjfd.php:29\n\
    Stack trace:\n#0 /tmp/tmprpv8mjfd.php(39): test()\n#1 {main}\n  thrown in /tmp/tmprpv8mjfd.php\
    \ on line 29\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  $words = explode(\" \", $txt);\n\
    \  $count = array_reduce($words, function ($carry, $word) {\n    return $carry\
    \ + 1 + count(str_word_count($word));\n  }, 0);\n  $result = array_map(function\
    \ ($count) {\n    return substr($count, 0, 1);\n  }, range(0, $count - 1));\n\
    \  $res = array_filter($result, function ($word) {\n    return $word === 'a' ||\
    \ $word === 'b' || $word === 'c' || $word === 'd' || $word === 'e' || $word ===\
    \ 'f' || $word === 'g' || $word === 'h' || $word === 'i' || $word === 'j' || $word\
    \ === 'k' || $word === 'l' || $word === 'm' || $word === 'n' || $word === 'o'\
    \ || $word === 'p' || $word === 'q' || $word === 'r' || $word === 's' || $word\
    \ === 't' || $word === 'u' || $word === 'v' || $word === 'w' || $word === 'x'\
    \ || $word === 'y' || $word === 'z';\n  });\n  $cnt = count($res);\n  return $cnt\
    \ ? $cnt : count($words);\n}\n</code>\n<|/ a tags=php,regex,preg-replace,preg-match\
    \ |>\n<| a dscore=0 tags=php,regex,preg-replace,preg-match |>\nTry this code :\n\
    <code>\n$string = preg_replace('/(^|\\s)(<[^>]*>|<[^>]*>$)/', '', $string);\n\
    </code>\n<|/ a |>\n<| a tags=php,regex,preg-replace,preg-match |>\nYou can use\
    \ str_replace to remove all tags from string and then strlen to get count of characters.\
    \ \nTry this code:\n<code>\n$str = 'He said <hi>Hello</hi> to me';\n$str = str_replace('>',\
    \ '', $str);\necho strlen($str);\n</code>\nHope this helps.\n<|/ a dscore=0 |>\n\
    <| a tags=php,regex,preg-replace,preg-match dscore=0 |>\nI would suggest you to\
    \ use str_replace\n<code>\nstr_replace('<[^>]+>', '', $str);\n</code>\nThis will\
    \ replace all tags within $str with an empty string - effectively removing them.\
    \ \nYou then can use the function strlen() to get number of characters in your\
    \ string.\n<|/ a |>\n<| c |>\nThat would remove all HTML tags, not just those\
    \ which should be removed.\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp3r36jcj3.php
    on line 26

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  return preg_split('/[\\s,]+/',\
    \ $txt);\n}\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcqry53b_.php:22\n\
    Stack trace:\n#0 /tmp/tmpcqry53b_.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpcqry53b_.php\
    \ on line 22\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    // return an array of words\n\
    \    // split the string by whitespace\n    $res = preg_split('/\\s+/', $txt);\n\
    \    // then split each array item by comma\n    $res = preg_split('/\\s*,\\s*',\
    \ $res);\n    // return the final array\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: preg_split(): Argument #2 ($subject)\
    \ must be of type string, array given in /tmp/tmpht1cf0ve.php:17\nStack trace:\n\
    #0 /tmp/tmpht1cf0ve.php(17): preg_split('/\\\\s*,\\\\s*', Array)\n#1 /tmp/tmpht1cf0ve.php(23):\
    \ split_words('Hello world!')\n#2 /tmp/tmpht1cf0ve.php(27): candidate('Hello world!')\n\
    #3 /tmp/tmpht1cf0ve.php(37): test()\n#4 {main}\n  thrown in /tmp/tmpht1cf0ve.php\
    \ on line 17\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  $words = preg_split('/(\\s+)/',\
    \ $txt, -1, PREG_SPLIT_NO_EMPTY);\n  if (count($words) == 1) {\n    return $words;\n\
    \  }\n  $first_word = strtolower($words[0]);\n  if (preg_match('/[a-z]$/', $first_word))\
    \ {\n    return count($words);\n  }\n  return strlen($first_word);\n}\n\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkdduq9jc.php:29\n\
    Stack trace:\n#0 /tmp/tmpkdduq9jc.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpkdduq9jc.php\
    \ on line 29\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $parts = preg_split('/[\\s,]+/',\
    \ $txt, -1, PREG_SPLIT_NO_EMPTY);\n\n    if (count($parts) == 1) {\n        return\
    \ array($txt);\n    }\n\n    foreach ($parts as $i => $part) {\n        if (strlen($part)\
    \ > 1) {\n            // If there are multiple parts, check the last one\n   \
    \         if ($i == count($parts) - 1) {\n                if (ctype_lower($parts[$i\
    \ + 1])) {\n                    return $part;\n                } else {\n    \
    \                return $part . ', ' . $parts[$i + 1];\n                }\n  \
    \          }\n\n            if (ctype_lower($part)) {\n                return\
    \ $part . ', ' . $parts[$i + 1];\n            }\n        }\n    }\n\n    return\
    \ $parts;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 2 in /tmp/tmp_h13bogf.php on line 23\n\n\
    Deprecated: ctype_lower(): Argument of type null will be interpreted as string\
    \ in the future in /tmp/tmp_h13bogf.php on line 23\n\nWarning: Undefined array\
    \ key 2 in /tmp/tmp_h13bogf.php on line 26\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp_h13bogf.php:44\nStack trace:\n#0 /tmp/tmp_h13bogf.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_h13bogf.php on line 44\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(' ', $txt);\n\
    \    if (count($words) == 0) {\n        return $words;\n    }\n    $count = count($words);\n\
    \    $i = 0;\n    foreach ($words as $word) {\n        $word = strtolower($word);\n\
    \        $words[$i] = $word;\n        $i++;\n        if ($count == $i) {\n   \
    \         break;\n        }\n    }\n    return $words;\n}\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk6pmmz8t.php:34\n\
    Stack trace:\n#0 /tmp/tmpk6pmmz8t.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpk6pmmz8t.php\
    \ on line 34\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/',\
    \ $txt, -1, PREG_SPLIT_NO_EMPTY);\n    if (preg_match_all('/[a-z]/i', $words,\
    \ $matches)) {\n        $letters = count($matches[0]);\n        $words = $matches[0];\n\
    \        $odd_letters = floor($letters / 2);\n        if ($letters % 2 == 1) {\n\
    \            $words = array_merge($words, array_slice($words, $odd_letters));\n\
    \            $words = array_merge($words, array_slice($words, 0, $odd_letters));\n\
    \        }\n    }\n    return $words;\n}\n</code>\n<|/ a dscore=2 tags=php,split,string\
    \ |>\n<| c |>\nthis would be my approach, but i think you should be more specific\
    \ on what a \"word\" is. it could be a sentence or a sentences containing spaces\
    \ or tabs, or it could also just be random text\n<|/ c |>\n<| c |>\nthis splits\
    \ \"hello world!\" into 3 separate words, \"hello\", \"world\" and \"!\" - so\
    \ if he wants more info he needs to clarify what \"word\" means exactly\n<|/ c\
    \ |>\n<| c |>\nI guess the OP wants *splitting* a string, but in terms of language\
    \ it can be anything but splitting \"hello world!\" into 3 separate words is just\
    \ plain wrong but your answer is not wrong either.\n<|/ c |>\n<| c |>\nI agree\
    \ with you that the wording is ambiguous and could mean anything. My point was\
    \ that I think this is a better approach than splitting by spaces because it is\
    \ simpler, easier to understand and less likely to cause confusion down the line.\n\
    <|/ c |>\n<| a |>\nI do not know if that is what you are looking for, but you\
    \ could use str_word_count http://php.net/manual/en/function.str-word-count.php\n\
    <|/ a tags=php,split,string dscore=1 |>\n<| a dscore=1 tags=php,split,string |>\n\
    <code>\n$string = str_replace(',','',$string);\n$words = preg_split('/[\\s,;-]+/',$string);\n\
    </code>\n<|/ a |>\n<| c |>\nDoesn't `str_replace` only replace the first parameter?\n\
    <|/ c |>\n<| c |>\nI realized that after I posted it.. but it's been a while since\
    \ I wrote this answer. Thanks for letting me know.\n<|/ c |>\n<| a dscore=0 tags=php,split,string\
    \ |>\n<code>\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp8vqs5w2b.php
    on line 25

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $txt = trim($txt);\n    if\
    \ (!$txt) {\n        return array();\n    }\n\n    $words = explode(' ', $txt);\n\
    \    if (count($words) === 1) {\n        return array($words[0]);\n    }\n\n \
    \   return $words;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr2zwmdm8.php:32\n\
    Stack trace:\n#0 /tmp/tmpr2zwmdm8.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpr2zwmdm8.php\
    \ on line 32\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    return preg_split('/\\s+/',\
    \ $txt);\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpen0iouq5.php:22\n\
    Stack trace:\n#0 /tmp/tmpen0iouq5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpen0iouq5.php\
    \ on line 22\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = preg_split('/[\\s,]+/',\
    \ $txt);\n    foreach ($words as $word) {\n        $words[] = str_ireplace(' ',\
    \ '', $word);\n    }\n    return $words;\n}\n\nfunction candidate(...$args) {\n\
    \    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpldc4rcon.php:25\n\
    Stack trace:\n#0 /tmp/tmpldc4rcon.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpldc4rcon.php\
    \ on line 25\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n\t$words = explode(' ', $txt);\n\
    \t$res = array();\n\tforeach ($words as $word) {\n\t\t$word = strtolower($word);\n\
    \t\tif (!empty($word)) {\n\t\t\t$res[] = $word;\n\t\t}\n\t}\n\treturn $res;\n\
    }\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvy80r20h.php:28\n\
    Stack trace:\n#0 /tmp/tmpvy80r20h.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpvy80r20h.php\
    \ on line 28\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(\" \", $txt);\n\
    \    foreach ($words as $word) {\n        if (strlen($word) == 0) {\n        \
    \    continue;\n        }\n        $words = explode(\",\", $word);\n    }\n  \
    \  foreach ($words as $word) {\n        if (strlen($word) != 0) {\n          \
    \  $words[] = $word;\n        }\n    }\n    foreach ($words as $word) {\n    \
    \    $word = strtolower($word);\n        if (preg_match(\"/^([a-z]?)$/\", $word))\
    \ {\n            return $word;\n        }\n    }\n    return count($words);\n\
    }\n</code>\n<|/ a tags=php,split,str-replace |>\n<| c |>\nThank you for the quick\
    \ response.  However, your code doesn't seem to work for me.  I'm getting an error\
    \ when I try and run it.  `Parse error: syntax error, unexpected '[' in /Applications/MAMP/htdocs/PHP-Projects/splitWords/splitWords.php\
    \ on line 17`  Line 17 is this line `return $words;`  When I take that line out,\
    \ it runs fine.  Any idea why it's doing this?\n<|/ c |>\n<| c |>\nYou used [PHP\
    \ 5.5](http://www.php.net/manual/en/function.split.php) syntax that doesn't work\
    \ in PHP < 5.5. You need to change `explode(\" \", $txt)` to `preg_split(\"/\\\
    s+/\", $txt)`\n<|/ c |>\n<| c |>\nAh ok, that makes sense.  Thanks so much!\n\
    <|/ c |>\n<| a |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp2m68qr6e.php
    on line 33

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    if (!$txt) return [];\n   \
    \ // split on commas\n    $words = preg_split('/(?<=[a-z])/', $txt, -1, PREG_SPLIT_NO_EMPTY);\n\
    \    // remove empty values\n    return array_filter($words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp96thah1.php:25\n\
    Stack trace:\n#0 /tmp/tmpp96thah1.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpp96thah1.php\
    \ on line 25\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n\t$result = array();\n\t$words\
    \ = explode(' ', $txt);\n\tforeach ($words as $word) {\n\t\t$words = explode(',',\
    \ $word);\n\t\tforeach ($words as $word) {\n\t\t\t$words = preg_split('/[a-z]/',\
    \ $word);\n\t\t\t$letters = $words[0];\n\t\t\t$words = $words[1];\n\t\t\t$result\
    \ = $letters . $words;\n\t\t}\n\t}\n\treturn $result;\n}\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi2ti75pq.php:31\n\
    Stack trace:\n#0 /tmp/tmpi2ti75pq.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpi2ti75pq.php\
    \ on line 31\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(\" \", $txt);\n\
    \    return count($words) == 0 ? count(str_split($txt)) : $words;\n}\n\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptb00k1d6.php:23\n\
    Stack trace:\n#0 /tmp/tmptb00k1d6.php(32): test()\n#1 {main}\n  thrown in /tmp/tmptb00k1d6.php\
    \ on line 23\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = preg_split('/[\\s,]+/',\
    \ $txt);\n    if (count($words) == 1) {\n        return array($words[0]);\n  \
    \  } else {\n        return $words;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy5iah2uc.php:28\n\
    Stack trace:\n#0 /tmp/tmpy5iah2uc.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpy5iah2uc.php\
    \ on line 28\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n\t$txt = preg_replace('/[^a-zA-Z]+/',\
    \ '', $txt);\n\tif ($txt) {\n\t\t$words = preg_split('/\\s+/', $txt);\n\t\treturn\
    \ $words;\n\t}\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe3ncsyrp.php:25\n\
    Stack trace:\n#0 /tmp/tmpe3ncsyrp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpe3ncsyrp.php\
    \ on line 25\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = preg_split('/\\s+/',\
    \ $txt);\n    foreach ($words as $word) {\n        $word = trim($word);\n    \
    \    if (empty($word)) {\n            unset($words[array_search('', array_keys($words))]);\n\
    \        }\n    }\n    return $words;\n}\nfunction candidate(...$args) {\n   \
    \ return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp58clqxnx.php:28\n\
    Stack trace:\n#0 /tmp/tmp58clqxnx.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp58clqxnx.php\
    \ on line 28\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = [];\n    $words =\
    \ preg_split('/[,\\s+]/', $txt, -1, PREG_SPLIT_NO_EMPTY);\n    foreach ($words\
    \ as $word => $val) {\n        $words[$word] = trim(strtolower($word));\n    }\n\
    \    foreach ($words as $key => $value) {\n        if (strlen($value) > 0) {\n\
    \            if (strlen($value) % 2 !== 0) {\n                if (ord($value[$key])\
    \ % 2 !== 0) {\n                    $words[$key] = $value . 'a';\n           \
    \     } else {\n                    $words[$key] = $value . 'b';\n           \
    \     }\n            }\n        }\n    }\n    return $words;\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Uninitialized string offset 1 in /tmp/tmpxoysjyyh.php on line\
    \ 21\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxoysjyyh.php:37\n\
    Stack trace:\n#0 /tmp/tmpxoysjyyh.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpxoysjyyh.php\
    \ on line 37\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  $res = preg_split(\"/[\\s,]+/\"\
    , $txt);\n  $res = array_filter($res);\n  $res = array_map('trim', $res);\n  return\
    \ array_map('ucfirst', $res);\n}\n\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph0b7iwu2.php:24\n\
    Stack trace:\n#0 /tmp/tmph0b7iwu2.php(34): test()\n#1 {main}\n  thrown in /tmp/tmph0b7iwu2.php\
    \ on line 24\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n\t$words = explode(' ', $txt);\n\
    \tif (!empty($words)) {\n\t\t$result = [];\n\t\tforeach ($words as $key => $word)\
    \ {\n\t\t\t$result[$key] = ucfirst(strtolower($word));\n\t\t}\n\t\treturn $result;\n\
    \t}\n\treturn count(array_filter(str_split($txt)));\n}\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpto5ggju7.php:28\n\
    Stack trace:\n#0 /tmp/tmpto5ggju7.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpto5ggju7.php\
    \ on line 28\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(\" \", $txt);\n\
    \    foreach ($words as &$word) {\n        if (strpos($word, \",\") !== false)\
    \ {\n            $word = explode(\",\", $word);\n        } else {\n          \
    \  $word = preg_split(\"/[a-z]/i\", $word);\n        }\n    }\n    return count(array_filter($words,\
    \ \"is_array\")) % 2 ? count(array_filter($words, \"is_array\")) : count(array_filter($words));\n\
    }\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpom7ifiiy.php:28\n\
    Stack trace:\n#0 /tmp/tmpom7ifiiy.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpom7ifiiy.php\
    \ on line 28\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  $words = preg_split(\"/[\\s,]+/\"\
    , $txt);\n  return $words;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe32r2y14.php:24\n\
    Stack trace:\n#0 /tmp/tmpe32r2y14.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpe32r2y14.php\
    \ on line 24\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $result = array();\n    $words\
    \ = explode(' ', $txt);\n    foreach ($words as $word) {\n        $result[] =\
    \ $word;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvgops_bi.php:27\n\
    Stack trace:\n#0 /tmp/tmpvgops_bi.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpvgops_bi.php\
    \ on line 27\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n\treturn preg_split('/\\s+/', $txt);\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbvfcnw79.php:22\n\
    Stack trace:\n#0 /tmp/tmpbvfcnw79.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpbvfcnw79.php\
    \ on line 22\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $splits = preg_split('/\\s+/u',\
    \ $txt);\n    return count($splits) ? $splits : preg_split(\"/,/u\", $txt);\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnip7b56.php:23\n\
    Stack trace:\n#0 /tmp/tmpxnip7b56.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpxnip7b56.php\
    \ on line 23\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n\treturn trim(preg_split('/\\s+/',\
    \ $txt));\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: trim(): Argument #1 ($string) must be\
    \ of type string, array given in /tmp/tmpbo778bbc.php:13\nStack trace:\n#0 /tmp/tmpbo778bbc.php(13):\
    \ trim(Array)\n#1 /tmp/tmpbo778bbc.php(17): split_words('Hello world!')\n#2 /tmp/tmpbo778bbc.php(21):\
    \ candidate('Hello world!')\n#3 /tmp/tmpbo778bbc.php(31): test()\n#4 {main}\n\
    \  thrown in /tmp/tmpbo778bbc.php on line 13\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  if (strpos($txt, \" \") === false)\
    \ {\n    return array(\"'\".$txt.\"'\");\n  } else {\n    list($a, $b) = explode(\"\
    \ \", $txt);\n    return array($a, $b);\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcwjketj2.php:27\n\
    Stack trace:\n#0 /tmp/tmpcwjketj2.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpcwjketj2.php\
    \ on line 27\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n\tpreg_match_all(\"/^[A-z]+$/\"\
    ,$txt,$words);\n\t$words = preg_replace(\"/[,\\s]+/\",\" \",$words[0]);\n\treturn\
    \ explode(\" \",$words);\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: explode(): Argument #2 ($string) must\
    \ be of type string, array given in /tmp/tmp3pesaq79.php:15\nStack trace:\n#0\
    \ /tmp/tmp3pesaq79.php(15): explode(' ', Array)\n#1 /tmp/tmp3pesaq79.php(19):\
    \ split_words('Hello world!')\n#2 /tmp/tmp3pesaq79.php(23): candidate('Hello world!')\n\
    #3 /tmp/tmp3pesaq79.php(33): test()\n#4 {main}\n  thrown in /tmp/tmp3pesaq79.php\
    \ on line 15\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    if (strpos($txt, \" \") ===\
    \ false) $txt = strtolower($txt);\n    return explode(' ', $txt);\n}\n\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7_a_ls_u.php:23\n\
    Stack trace:\n#0 /tmp/tmp7_a_ls_u.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp7_a_ls_u.php\
    \ on line 23\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n\t$txt = preg_replace(\"/\\s+/\"\
    , \"\", $txt);\n\t$words = preg_split('/[,;]/is', $txt);\n\treturn $words;\n}\n\
    \nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeboijbdh.php:23\n\
    Stack trace:\n#0 /tmp/tmpeboijbdh.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpeboijbdh.php\
    \ on line 23\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $txt = trim($txt);\n    $whitespace\
    \ = array(\" \", \"\\t\", \"\\r\", \"\\n\", \"\\f\");\n    $commas = array(\"\
    ,\");\n    $letters = range('a', 'z');\n    $i = 0;\n    $len = strlen($txt);\n\
    \    while ($i < $len) {\n        if ($whitespace[0] . in_array($txt[$i], $whitespace))\
    \ {\n            $i += 1;\n        } else if ($commas[0] . in_array($txt[$i],\
    \ $commas)) {\n            $i += 1;\n        } else if (in_array($txt[$i], $letters))\
    \ {\n            $i += 1;\n        } else {\n            break;\n        }\n \
    \   }\n    return $i;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyproxlrm.php:38\n\
    Stack trace:\n#0 /tmp/tmpyproxlrm.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpyproxlrm.php\
    \ on line 38\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(\" \", $txt);\n\
    \    return $words;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd7t1tjj4.php:23\n\
    Stack trace:\n#0 /tmp/tmpd7t1tjj4.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpd7t1tjj4.php\
    \ on line 23\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  return explode(' ', trim($txt));\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp5stm9r6.php:22\n\
    Stack trace:\n#0 /tmp/tmpp5stm9r6.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpp5stm9r6.php\
    \ on line 22\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $a = explode(' ', $txt);\n\
    \    $res = array_slice($a);\n    $last = null;\n    foreach ($res as $i => $elem)\
    \ {\n        if ($last !== null && !empty($elem)) {\n            $res[$i] = $last.'\
    \ '.$elem;\n        }\n        $last = $elem;\n    }\n    return $res;\n}\n</code>\n\
    <|/ a dscore=1 tags=regex,php,arrays |>\n<| c |>\nI updated my answer to include\
    \ a php function that will split a string into words. Feel free to use or adapt\
    \ it.\n<|/ c |>\n<| a tags=regex,php,arrays |>\nIf you just want to split a string\
    \ by a specific delimiter, you can use:\n<code>\n$str = \"hello world\";\n$array\
    \ = explode(\" \", $str);\n</code>\n<|/ a dscore=0 |>\n<| a tags=regex,php,arrays\
    \ |>\nyou can use this regex with preg_split function \n<code>\n$str = 'Hello\
    \ world!';\npreg_split('/\\s+/', $str);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ tags=regex,php,arrays |>\n<code>\npreg_match_all('!\\s+!', $str, $matches);\n\
    $arr = $matches[0];\n</code>\n<|/ a |>\n<| a tags=regex,php,arrays |>\nTry this\
    \ code:\n<code>\n<?php\n$str=\"Hello world!\";\n$str1=explode(\" \",$str);\nprint_r($str1);\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpt6u8ue93.php
    on line 24

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $split = explode(' ', $txt);\n\
    \    foreach ($split as $s) {\n        if (strpos($s, ',') !== false) {\n    \
    \        $split = explode(', ', $s);\n        } else {\n            $split[] =\
    \ strtolower($s);\n        }\n    }\n    return array_count_values($split);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nHow is this different from my answer, except the\
    \ variable names?\n<|/ c |>\n<| c |>\nThe variable names are different but logically\
    \ the same - I just used his function name as a better description of what it\
    \ does, which is what this does.\n<|/ c |>\n<| c |>\nI see, I should have said\
    \ something about \"the variable names\" rather than \"the code\". That helps.\
    \ :)\n<|/ c |>\n<| c |>\nAh yes indeed, I guess I did the same thing with the\
    \ function name and description. Thanks for the comments.\n<|/ c |>\n<| a tags=sorting,php,string\
    \ dscore=0 |>\nHere is another way to do this in PHP:\n<code>\n$words = \"Lorem\
    \ ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt\
    \ ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation\
    \ ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor\
    \ in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\
    \ Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt\
    \ mollit anim id est laborum.\";\n\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp0wi7owcj.php
    on line 23

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    return explode(' ', $txt);\n\
    }\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvssfz8by.php:21\n\
    Stack trace:\n#0 /tmp/tmpvssfz8by.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpvssfz8by.php\
    \ on line 21\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    return explode(' ', trim($txt),\
    \ 2);\n}\n</code>\nThe explode function splits a string on a given delimiter with\
    \ the optional limit parameter. By default the limit parameter is 1, which is\
    \ why you were getting a return of array(0) instead of array(1).\nThe trim function\
    \ is used to remove any whitespace from the beginning and end of a string while\
    \ keeping the delimiter in tact. This was important to ensure that the delimiter\
    \ was not splitting on an empty string.\n<|/ a tags=arrays,php |>\n<| c |>\nThanks\
    \ for the answer, but that's not the problem. The problem was that the function\
    \ wasn't returning the right value.\n<|/ c |>\n<| a dscore=0 tags=arrays,php |>\n\
    Thanks for your replies. The problem was that I was calling the function incorrectly.\
    \ \n<code>\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpbz7527u8.php
    on line 15

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $arr = explode(' ', $txt);\n\
    \    array_walk($arr, function (&$val) {\n        $val = trim($val);\n    });\n\
    \    return $arr;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp31zp1g1_.php:26\n\
    Stack trace:\n#0 /tmp/tmp31zp1g1_.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp31zp1g1_.php\
    \ on line 26\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    return preg_split('/\\s+/',\
    \ preg_replace('/[^a-z]+/', '', $txt));\n}\n\n/**\n * Strip all characters from\
    \ strings that aren't letters or spaces.\n *\n * @param string $str\n * @return\
    \ string\n */\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5w_lw4x_.php:27\n\
    Stack trace:\n#0 /tmp/tmp5w_lw4x_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5w_lw4x_.php\
    \ on line 27\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $text = trim($txt);\n    if\
    \ (empty($text)) {\n        return array();\n    }\n    $splits = explode(\" \"\
    , $text);\n    $splits = array_filter($splits, 'strlen');\n    $count = count($splits);\n\
    \    if ($count <= 0) {\n        return array();\n    }\n    if ($count % 2 ===\
    \ 0) {\n        $splits[$count] = str_replace(',', '', $splits[$count]);\n   \
    \ }\n    return $splits;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 2 in /tmp/tmp7mns5xoz.php on line 24\n\n\
    Deprecated: str_replace(): Passing null to parameter #3 ($subject) of type array|string\
    \ is deprecated in /tmp/tmp7mns5xoz.php on line 24\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp7mns5xoz.php:34\nStack trace:\n#0 /tmp/tmp7mns5xoz.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp7mns5xoz.php on line 34\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  $words = preg_split('/[ ,]+/',\
    \ $txt, -1, PREG_SPLIT_NO_EMPTY);\n  $count = count($words);\n  for ($i = 0; $i\
    \ < $count; $i++) {\n    if (strlen($words[$i]) > 0) {\n      if (!ctype_alpha($words[$i]))\
    \ {\n        $words[$i] = str_replace(' ', '', $words[$i]);\n      }\n      $words[$i]\
    \ = ltrim($words[$i]);\n      $words[$i] = ucfirst($words[$i]);\n    }\n  }\n\
    \  return $words;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw4o9bqcg.php:32\n\
    Stack trace:\n#0 /tmp/tmpw4o9bqcg.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpw4o9bqcg.php\
    \ on line 32\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n\t$word_count = preg_match_all('/\\\
    W/', $txt, $matches);\n\t$comma_count = preg_match_all('/\\W/|,/', $txt, $matches);\n\
    \t$alphabet = array_keys(array_flip(range('a', 'z')));\n\tif ($word_count && $comma_count)\
    \ {\n\t\treturn $word_count + $comma_count;\n\t} elseif ($word_count && !$comma_count)\
    \ {\n\t\treturn $word_count;\n\t} elseif (!$word_count && $comma_count) {\n\t\t\
    return $comma_count;\n\t} else {\n\t\treturn count($alphabet) - $alphabet[count($alphabet)\
    \ - 1] + 1;\n\t}\n}\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: preg_match_all(): Unknown modifier '|' in /tmp/tmpcliqjey_.php\
    \ on line 14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcliqjey_.php:31\n\
    Stack trace:\n#0 /tmp/tmpcliqjey_.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpcliqjey_.php\
    \ on line 31\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    return str_word_count($txt,\
    \ 1);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,algorithm |>\nHere is a very\
    \ simple solution which uses a single foreach loop (this does not use array_count_values).\
    \ The key is the value of $text, the value is an array with the keys of the original\
    \ array (which is just text here) and the values are the number of times each\
    \ key appears in $text.\n<code>\n$text = array('Hello', 'world!', 'FooBar', 'foo',\
    \ 'bar');\n\n$text_count = array();\n\nforeach ($text as $value) {\n    $text_count[$value][]\
    \ = $value;\n}\n\nprint_r($text_count);\n</code>\nThis outputs:\n<code>\nArray\n\
    (\n    [Hello] => Array\n        (\n            [0] => Hello\n        )\n\n  \
    \  [world!] => Array\n        (\n            [0] => world!\n        )\n\n    [FooBar]\
    \ => Array\n        (\n            [0] => FooBar\n        )\n\n    [foo] => Array\n\
    \        (\n            [0] => foo\n        )\n\n    [bar] => Array\n        (\n\
    \            [0] => bar\n        )\n\n)\n</code>\n<|/ a dscore=0 |>\n<| a |>\n\
    <code>\n$str = \"Hello,world!\";\n$count = str_word_count($str);\n$count[0] =str_replace(',','',$count[0]);\n\
    var_dump($count[0]);\n</code>\n<|/ a tags=php,algorithm dscore=0 |>\n<| a dscore=0\
    \ |>\nThe simplest solution is to use explode and count the words by hand :)\n\
    <code>\n$string = 'hello,world,foo,bar';\n$words = explode(',', $string);\nforeach($words\
    \ as $key => $word)\n{\n   $counts[$word]++;\n}\n</code>\n<|/ a tags=php,algorithm\
    \ |>\n<| a |>\nI really don't like using PHP functions for stuff like this.\n\
    What about using preg_match_all instead?\n<code>\n$string = 'Hello,world!';\n\
    preg_match_all('/[,]+/', $string, $matches);\n</code>\n<|/ a tags=php,algorithm\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n\n$string = \"Hello,world!\";\n\
    \nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpc8b86nml.php
    on line 15

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = array();\n    $whitespace\
    \ = explode(\" \", $txt);\n    foreach ($whitespace as $word) {\n        array_push($words,\
    \ $word);\n    }\n    $comma = explode(\",\", $txt);\n    foreach ($comma as $word)\
    \ {\n        array_push($words, $word);\n    }\n    $letters = explode(\" \",\
    \ $txt);\n    foreach ($letters as $i => $letter) {\n        if ($i > 0 && $i\
    \ % 2 != 0) {\n            array_push($words, $letter);\n        }\n    }\n  \
    \  return count(array_unique($words));\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thank you for the answer, but it's still not working for me. I've added a demo\
    \ page on the original post. Any further advice would be greatly appreciated.\n\
    <|/ c |>\n<| c |>\nApologies, I just noticed that there are actually two words\
    \ in the input string. I've edited the question with the correct output from the\
    \ demo page.\n<|/ c |>\n<| a tags=php,words,arrays |>\nA possible solution using\
    \ preg_split to split the text into individual words and array_count_values to\
    \ get counts of each word, array_diff to get words with duplicate counts and array_intersect\
    \ to get words with duplicate counts but different cases.\n<code>\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp9bhhln_p.php
    on line 30

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = preg_split('/[\\s\\\
    ,]+/', $txt);\n    if (count($words) == 1) {\n        return array($words[0]);\n\
    \    } else {\n        return $words;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ty9mf72.php:28\n\
    Stack trace:\n#0 /tmp/tmp4ty9mf72.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp4ty9mf72.php\
    \ on line 28\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n\treturn preg_split('/\\s+/', $txt);\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbvfcnw79.php:22\n\
    Stack trace:\n#0 /tmp/tmpbvfcnw79.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpbvfcnw79.php\
    \ on line 22\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    if (!is_string($txt)) {\n \
    \       throw new Exception(\"The text has to be of type string\");\n    }\n \
    \   $words = explode(' ', trim($txt));\n    if (count($words) == 1) {\n      \
    \  $words = explode(',', trim($txt));\n        if (count($words) == 1) {\n   \
    \         $words = preg_split('/[\\s]/m', $txt);\n        } else {\n         \
    \   $words = preg_split('/[,]/', $txt);\n        }\n    }\n    return $words;\n\
    }\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4_cd122l.php:36\n\
    Stack trace:\n#0 /tmp/tmp4_cd122l.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp4_cd122l.php\
    \ on line 36\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    return explode(' ', trim($txt),\
    \ 3);\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4dlqvanv.php:22\n\
    Stack trace:\n#0 /tmp/tmp4dlqvanv.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4dlqvanv.php\
    \ on line 22\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    if (!preg_match('/^[a-z]+/',\
    \ $txt)) {\n        $txt = str_replace(\" \", \"\", $txt);\n        $alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz';\n        $num_alphabet = strlen($alphabet) -\
    \ 1;\n        $new_txt = \"\";\n        for ($i = 0; $i < strlen($txt); $i++)\
    \ {\n            $new_txt .= substr($txt, $i, 1);\n            $c = substr($txt,\
    \ $i, 1);\n            if (ord($c) != 0 && ord($c) != $num_alphabet) {\n     \
    \           $new_txt .= ',';\n            }\n        }\n        $txt = $new_txt;\n\
    \    }\n    return explode(\",\", $txt);\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ tags=php,csv,arrays,loops |>\nThis code is for getting each line of the file\
    \ and separating the words in each line and put it in array\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpl2mb58qx.php
    on line 29

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(\" \", $txt);\n\
    \    foreach ($words as $key => $word) {\n        $words[$key] = trim(preg_replace('/\\\
    W/u', '', $word));\n    }\n    $words = array_count_values($words);\n    $words\
    \ = array_filter(array_keys($words));\n    foreach ($words as $key => $val) {\n\
    \        if (isset($words[$key])) {\n            $words[$key] = $words[$key];\n\
    \        }\n    }\n    $words = array_filter($words);\n    $words = array_unique($words);\n\
    \    $words = array_map(\"chr\", $words);\n    return $words;\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: chr(): Argument #1 ($codepoint) must\
    \ be of type int, string given in /tmp/tmph07zpi9m.php:26\nStack trace:\n#0 [internal\
    \ function]: chr('Hello')\n#1 /tmp/tmph07zpi9m.php(26): array_map('chr', Array)\n\
    #2 /tmp/tmph07zpi9m.php(31): split_words('Hello world!')\n#3 /tmp/tmph07zpi9m.php(35):\
    \ candidate('Hello world!')\n#4 /tmp/tmph07zpi9m.php(45): test()\n#5 {main}\n\
    \  thrown in /tmp/tmph07zpi9m.php on line 26\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $array = preg_split('/(\\W)/',\
    \ $txt, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY);\n\n    $len = count($array);\n\
    \    $res = array();\n    $i = 0;\n\n    while ($i < $len) {\n        if (isset($array[$i\
    \ + 1])) {\n            $res[] = $array[$i];\n        }\n\n        $i += 1;\n\
    \    }\n\n    return $res;\n}\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwf8_an7c.php:35\n\
    Stack trace:\n#0 /tmp/tmpwf8_an7c.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpwf8_an7c.php\
    \ on line 35\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(\" \", $txt);\n\
    \    foreach ($words as &$word) {\n        $word = str_replace(\",\", \"\", $word);\n\
    \    }\n    return $words;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nYou can use\
    \ this code:\n<code>\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp2403s4e3.php
    on line 19

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $result = array();\n    $words\
    \ = preg_split('/\\s+/', $txt);\n    foreach ($words as $word) {\n        if (strlen($word)\
    \ > 0) {\n            $result[strtolower($word)] = $word;\n        }\n    }\n\n\
    \    return $result;\n}\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpecchzugg.php:28\n\
    Stack trace:\n#0 /tmp/tmpecchzugg.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpecchzugg.php\
    \ on line 28\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(\" \", $txt);\n\
    \    return count($words) ? $words : count(array_filter(array_unique(explode(\"\
    ,\", $txt))));\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,count |>\n<code>\n\
    <?php\n$string=\"Hello world!\";\n$words = explode(\" \", $string);\n$array =\
    \ array();\nfor($i=0;$i<count($words);$i++)\n{\n    $array[] = $words[$i];\n}\n\
    $counting = count($array);\n$stringWithCount = \"\";\n$lastChar = \"\";\nfor($i=0;$i<$counting;$i++)\n\
    {\n    if($i == 0)\n    {\n        $stringWithCount .= $array[$i];\n    }\n  \
    \  else\n    {\n        $lastChar = $array[$i];\n        $stringWithCount .= $lastChar;\n\
    \    }\n}\n$counting2 = count($stringWithCount);\n$lastChar2 = \"\";\nfor($i=0;$i<$counting2;$i++)\n\
    {\n    if($i == 0)\n    {\n        $lastChar2 = $stringWithCount[$i];\n    }\n\
    \    else\n    {\n        $lastChar2 = $stringWithCount[$i];\n        $lastChar\
    \ = $lastChar2;\n        $stringWithCount .= $lastChar;\n    }\n}\necho \"Count:\"\
    .$counting;\necho \"Count2:\".$counting2;\necho \"Words:\".$stringWithCount;\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpfq5rid3h.php
    on line 16

    '
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    if ( preg_match(\"/\\S/\",$txt)\
    \ ) {\n        return explode(\" \",$txt);\n    }\n    else { //No white spaces\n\
    \        return count(array_filter(explode(\",\",$txt)));\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpalcn6oam.php:27\n\
    Stack trace:\n#0 /tmp/tmpalcn6oam.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpalcn6oam.php\
    \ on line 27\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n  $parts = preg_split('/\\s+/',\
    \ $txt);\n\n  if (!count($parts)) {\n    return array();\n  }\n\n  return $parts;\n\
    }\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmlmme0fw.php:28\n\
    Stack trace:\n#0 /tmp/tmpmlmme0fw.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpmlmme0fw.php\
    \ on line 28\n"
  timestamp: 1660028804
- exit_code: 255
  program: "<?php\n// Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>>\
    \ split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"\
    abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = preg_split(\"/\\s+/\"\
    , $txt);\n    sort($words);\n    return $words;\n}\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmrpcoggi.php:24\n\
    Stack trace:\n#0 /tmp/tmpmrpcoggi.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpmrpcoggi.php\
    \ on line 24\n"
  timestamp: 1660028804
