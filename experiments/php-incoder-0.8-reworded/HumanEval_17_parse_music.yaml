name: HumanEval_17_parse_music
language: php
prompt: "<?php\n// Input to this function is a string representing musical notes in\
  \ a special ASCII format.\n// Your task is to parse this string and return array\
  \ of integers corresponding to how many beats does each\n// not last.\n// Here is\
  \ a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two\
  \ beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o|\
  \ o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string)\
  \ {\n"
tests: "function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
  \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o|\
  \ .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2,\
  \ 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    return str_split($music_string, 4).map(function ($note) {\n   \
    \     return ($note == \".\") * 4\n            + ($note == \"o\") * 2\n      \
    \      + ($note == \"|\") * 1\n            ;\n    });\n}\n\n$music = parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\");\n$music = array_map(\"intval\", $music);", " \
    \   // We need an array of beats (i.e. integers 0 -> 15) to be able to determine\
    \ how many beats does each note last.\n    // As we know that each note lasts\
    \ 4 beats, we will use 4 as our initial beat.\n    // Notes can have different\
    \ duration in different parts (i.e. different numbers of dots).\n    // We will\
    \ take this into account when calculating length of each note.\n    $beat_length\
    \ = 4;\n    // We need to keep track of current note being played\n    $current_note\
    \ = null;\n    // The output array we need to return\n    $out = [];\n    // We\
    \ need to know how many dots were played on each note\n    $current_dots = 0;\n\
    \    // Here we will store notes in form of integers. We will increment them when\
    \ playing a note and decrement them when playing another note.\n    $current_note_val\
    \ = 0;\n\n    // First we split string into individual notes (and dots)\n    $parts\
    \ = preg_split('/(\\|?)/', $music_string, 2, PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE);\n\
    \n    foreach ($parts as $key => $part) {\n        // If our note is empty - we\
    \ skip it\n        if ($part == \"\") {\n            continue;\n        }\n  \
    \      // If we have a current note - we add its length to our output array\n\
    \        if ($current_note != \"\") {\n            $out[] = $current_note_val;\n\
    \        }\n        // If our note is not empty\n        else {\n            //\
    \ And if we are on the first part of our string\n            if ($key === 0) {\n\
    \                // We assume that this note lasts 4 beats and then we add it\
    \ to our output array\n                $out[] = $beat_length + $current_dots;\n\
    \                // We set our current note to empty and we increment our current\
    \ dot counter\n                $current_note = \"\";\n                $current_dots\
    \ = 1;\n                continue;\n            }\n            // If we are on\
    \ the second part of our string\n            elseif ($key === 1) {\n         \
    \       // We assume that this note lasts 2 beats and then we add it to our output\
    \ array\n                $out[] = $beat_length + $current_dots;\n            \
    \    // We set our current note to empty and we increment our current dot counter\n\
    \                $current_note = \"\";\n                $current_dots = 1;\n \
    \               continue;\n            }\n            // If we are on the third\
    \ part of our string\n            elseif ($key === 2) {\n                // We\
    \ assume that this note lasts one beat and we add it to our output array\n   \
    \             $out[] = $current_dots;\n                // We set our current note\
    \ to empty and we increment our current dot counter\n                $current_note\
    \ = \"\";\n", "    $notes = str_split($music_string);\n    $parsed_music = array();\n\
    \n    for($i = 0; $i < count($notes); $i++) {\n        if (strlen($notes[$i])\
    \ < 2) {\n            $notes[$i] = 'o' . substr($notes[$i], 1);\n        }\n \
    \       // check if note repeats (for now just one 'o')\n        $num_repeats\
    \ = 0;\n        $new_note = $notes[$i];\n        while(strpos($new_note, 'o')\
    \ !== false) {\n            if ($num_repeats <= 2) {\n                $new_note\
    \ = substr($new_note, 1);\n                $num_repeats += 1;\n            } else\
    \ {\n                $new_note = substr($new_note, 1);\n                break;\n\
    \            }\n        }\n        $parsed_music[$i] = $num_repeats;\n    }\n\n\
    \    return $parsed_music;\n}", "    $music_array = str_split($music_string);\n\
    \    $music_beat_counts = array();\n    $music_beat_counts_size = 0;\n    $music_beat_counts_index\
    \ = 0;\n    $music_beat_counts_max_size = count($music_array);\n    for($i = 0;\
    \ $i < $music_beat_counts_max_size; $i++) {\n        if ($music_array[$i] !==\
    \ \".\") {\n            $music_beat_counts[$music_beat_counts_index] = $music_array[$i];\n\
    \            $music_beat_counts_size += 1;\n            $music_beat_counts_index\
    \ += 1;\n        }\n    }\n    $music_beat_counts_size += 1;\n    $music_beat_counts_size\
    \ /= 2;\n    for($i = 0; $i < $music_beat_counts_size; $i++) {\n        $music_beat_counts[$music_beat_counts_index]\
    \ = 0;\n        $music_beat_counts_index += 1;\n    }\n    return $music_beat_counts;\n\
    }\n", "    $music_array = array();\n    $music_array['o'] = array(0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0);\n    $music_array['o|'] = array(0, 0, 0, 0, 0, 0, 0, 0, 0);\n\
    \    $music_array['.|'] = array(0, 0, 0, 0, 0, 0, 0, 0, 0);\n\n    foreach ($music_string\
    \ as $note) {\n        switch ($note) {\n            case 'o':\n             \
    \   $music_array['o'][count($music_array['o']) - 4] = 1;\n                break;\n\
    \            case 'o|':\n                $music_array['o|'][count($music_array['o|'])\
    \ - 2] = 1;\n                break;\n            case '.|':\n                $music_array['.|'][count($music_array['.|'])\
    \ - 1] = 1;\n                break;\n            default:\n                //\
    \ this note is not supported yet\n        }\n    }\n    return $music_array;\n\
    }\n", "    $music_array = explode(\" \", $music_string);\n    $music_array2 =\
    \ array();\n\n    for ($i = 0; $i < count($music_array); $i++) {\n        if ($music_array[$i]\
    \ !== \".\") {\n            $music_array2[] = $music_array[$i];\n        }\n \
    \   }\n\n    return $music_array2;\n}\n</code>\n<|/ a tags=php |>\n<| a tags=php\
    \ dscore=1 |>\n<code>\n<?php", "  // Your code goes here\n}\n", "    $notes =\
    \ preg_split('/([\\.\\|\\^]{3})/u', $music_string);\n    $array = array();\n \
    \   foreach($notes as $note) {\n        $n = substr($note, 0, 1);\n        $n\
    \ = str_split($n);\n        foreach ($n as $i => $x) {\n            $x = explode('|',\
    \ $x);\n            foreach ($x as $j=>$z) {\n                $array[$i] += 1;\n\
    \            }\n        }\n    }\n    return $array;\n}\n", "    // Your code\
    \ goes here\n}\n</code>\n<|/ a tags=function,notes,php |>\n<| c |>\nThank you\
    \ for you help! I guess I needed some fresh ideas on what to do. I started learning\
    \ php about 2 weeks ago so I have little experience with php yet.\n<|/ c |>\n\
    <| c |>\nYou are welcome! As it turned out I did not give it all the time to show\
    \ you the full solution, but now it is done. If you have problems just ask. Good\
    \ luck!\n<|/ c |>\n<| c |>\nHmm. I am still having problems. Could you please\
    \ explain how I can use a string such as \"Bb Eb Gb Db Fb Ab Bb Eb Gb\" in my\
    \ php script and how I can use it to make an array with each note being 4 beats?\n\
    <|/ c |>\n<| c |>\nI edited my answer to show you how to work with such string.\n\
    <|/ c |>\n<| c |>\nThank you so much! So I should use $music_string inside of\
    \ the parse_music function?\n<|/ c |>\n<| a tags=function,notes,php dscore=0 |>\n\
    <code>\n<?php\n$music_string = '.| o| .| o| o| o| o| o| o| o| o| o| o| o| .| o|\
    \ o| .| o| o| .| o| o| o| o| o| o| o| o| .| o| o| o| o| o| .| .| o| o| o| o| .|\
    \ o| o| o| o| o| o| o| o| o| o| o| .| o| o| .| o| o| o| o| .| o| o| o| o| o| o|\
    \ o| o| o| o| o| o| o| o| o| o| o| o| o| .| o| o| .| o| o| o| .| o| o| o| o| o|\
    \ .| o| o| o| .| o| o| o| .| o| o| o| o| .| o| o| o| o| .| o| o| o| o| o| o| o|\
    \ o| o| o| o| o| .| o| ", "    $music = array();\n    $chords = explode('|', $music_string);\n\
    \    foreach ($chords as $chord) {\n        $chord = trim($chord);\n        $notes\
    \ = explode(' ', $chord);\n        foreach ($notes as $note) {\n            if\
    \ (strpos($note, '|') !== false) {\n                list($note, $rest) = explode('|',\
    \ $note);\n            } else {\n                $rest = ' ';\n            }\n\
    \            if ($note == 'o') {\n                $music[] = 4;\n            }\
    \ elseif ($note == '.') {\n                $music[] = 1;\n            } else {\n\
    \                $note = str_replace(array('b', 'c', 'd', 'e', 'f', 'g'), array('b',\
    \ 'c', 'd', 'e', 'f', 'g'), $note);\n                $note = str_replace(array('1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9'), array('I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX'), $note);\n                $note = str_replace(array('a',\
    \ 'b', 'c', 'd'), array('A', 'B', 'C', 'D'), $note);\n                $note =\
    \ str_replace(array('f', 'g'), array('F', 'G'), $note);\n                $note\
    \ = preg_replace('/[^\\d]+/', '', $note);\n                $music[] = $note;\n\
    \            }\n            if ($rest != ' ') {\n                $music[] = substr_count($rest,\
    \ '1');\n            }\n        }\n    }\n    return $music;\n}", "    // Split\
    \ string into array of strings representing notes:\n    $notes = explode(\" \"\
    , $music_string);\n    \n    // Get how many beats each note lasts:\n    $notes_last_beats\
    \ = array();\n    foreach ($notes as $note) {\n        // Look for dot:\n    \
    \    if (strpos(\".|\", $note) !== false) {\n            // dot found. Throw away\
    \ this note and move on to next:\n            $notes_last_beats[] = 4;\n     \
    \   } else {\n            // dot not found. Throw away this note and move on to\
    \ next:\n            $notes_last_beats[] = 1;\n        }\n    }\n    \n    //\
    \ Make array holding all the notes:\n    $notes_array = array();\n    \n    //\
    \ Put notes into array:\n    foreach ($notes as $note) {\n        if ($note ==\
    \ \".\") {\n            $notes_array[] = array(1);\n        } elseif (strpos(\"\
    o|\", $note) !== false) {\n            $notes_array[] = array(4);\n        } elseif\
    \ (strpos(\"o.\", $note) !== false) {\n            $notes_array[] = array(2);\n\
    \        } else {\n            $notes_array[] = 1;\n        }\n    }\n    \n \
    \   // Calculate sums of all subarrays in $notes_array:\n    $sums_array = array();\n\
    \    foreach ($notes_array as $subarray) {\n        $sums_array[] = array_sum($subarray);\n\
    \    }\n    \n    // Multiply each subarray by its length in $notes_last_beats\
    \ and sum up:\n    $sum = 0;\n    foreach ($sums_array as $sum) {\n        $sum\
    \ *= $notes_last_beats[count($notes_last_beats) - 1];\n    }\n    \n    // Return\
    \ array of sums for each subarray:\n    return $sums_array;\n}\n\nprint_r(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"));", "    $notes = array();\n    $beat_number\
    \ = 1;\n    $last_note = null;\n    for ($i = 0; $i < strlen($music_string); $i++)\
    \ {\n        switch ($music_string[$i]) {\n            case \"o\":\n         \
    \   case \"|\":\n                if ($last_note == null || $beat_number != 4)\
    \ {\n                    $notes[$last_note][$beat_number] = 1;\n             \
    \   }\n                $last_note = $music_string[$i];\n                $beat_number\
    \ = 1;\n                break;\n            case \".\":\n                if ($last_note\
    \ == null || $beat_number != 2) {\n                    $notes[$last_note][$beat_number]\
    \ = 1;\n                }\n                $last_note = $music_string[$i];\n \
    \               $beat_number = 1;\n                break;\n            default:\n\
    \                $beat_number++;\n                break;\n        }\n    }\n\n\
    \    return $notes;\n}\n", "    // Your code here\n}\n", "    $notes = array();\n\
    \    $note_length = 4;\n    for ($i = 0; $i < strlen($music_string); $i++) {\n\
    \        $char = $music_string[$i];\n        $note_type = ord(substr($music_string,\
    \ $i, 1));\n        $i += 1;\n        $note_number = ord(substr($music_string,\
    \ $i, 1));\n        $i += 1;\n        if ($note_type == 0) $note_length = $note_length\
    \ * 16;\n        if ($note_type == 1) $note_length = $note_length * 8;\n     \
    \   if ($note_type == 2) $note_length = $note_length * 4;\n        if ($note_type\
    \ == 3) $note_length = $note_length * 2;\n        if ($note_type == 4) $note_length\
    \ = $note_length;\n        $notes[$note_number] = array('length' => $note_length,\
    \ 'type' => $note_type);\n    }\n    ksort($notes);\n    $notes_length = array_sum(array_map(function\
    \ ($note) {\n        return $note['length'];\n    }, $notes));\n    $new_notes\
    \ = array();\n    $last_note = null;\n    for ($i = 0; $i < strlen($music_string);\
    \ $i++) {\n        $char = $music_string[$i];\n        $note_type = ord(substr($music_string,\
    \ $i, 1));\n        $i += 1;\n        $note_number = ord(substr($music_string,\
    \ $i, 1));\n        $i += 1;\n        if ($note_type == 0) $note_length = $note_length\
    \ * 16;\n        if ($note_type == 1) $note_length = $note_length * 8;\n     \
    \   if ($note_type == 2) $note_length = $note_length * 4;\n        if ($note_type\
    \ == 3) $note_length = $note_length * 2;\n        if ($note_type == 4) $note_length\
    \ = $note_length;\n        $notes[$note_number] = array('length' => $note_length,\
    \ 'type' => $note_type);\n        if ($notes[$note_number]['type'] != $last_note)\
    \ {\n            // Create new note\n            $new_notes[] = $notes[$last_note]['length'];\n\
    \        }\n        $last_note = $notes[$note_number]['type'];\n    }\n    ksort($new_notes);\n\
    \    $new_notes_length = array_sum(array_map(function ($note) {\n        return\
    \ $note['length'];\n    }, $new_notes));\n    $notes = $new_notes;\n    unset($new_notes);\n\
    \    for ($i = 0; $i < count($notes); $i++) {\n        $notes[$i]['length'] =\
    \ $notes_length / $notes[$i]['length'];\n    }\n    return $notes;\n}", "  //\
    \ Your code here\n}\n", "  $music_array = array();\n  $music_array[0] = count(strrev($music_string))\
    \ - strlen($music_string);\n  $music_string_reversed = strrev($music_string);\n\
    \  $music_string = strrev($music_string_reversed);\n  $music_array = array_chunk($music_string,\
    \ 4);\n  array_walk($music_array, function(&$music_array) use ($music_string)\
    \ {\n    foreach ($music_array as &$music) {\n      $music .= str_repeat(' ',\
    \ 4 - strlen($music));\n    }\n  }); // 'o' beats, ' ' beats\n  array_walk($music_array,\
    \ function(&$music_array) use ($music_string) {\n    $music_array = array_chunk($music_string,\
    \ 2);\n  }); // 'o|' beats, '.' beats\n  return $music_array;\n}", "    $music_notes\
    \ = explode(\" \", $music_string);\n    $music_notes_count = count($music_notes);\n\
    \    $music_beats_count = ceil($music_notes_count / 4);\n    $music_beats = array();\n\
    \    for ($i=0; $i<$music_beats_count; $i++) {\n        $music_beats[$i] = 0;\n\
    \    }\n    for ($i=0; $i<$music_notes_count; $i++) {\n        $music_note = $music_notes[$i];\n\
    \        if ($music_note[0] == \"o\") {\n            $music_beats[floor($i/4)]\
    \ ++;\n        }\n        else if ($music_note[0] == \"o|\") {\n            $music_beats[floor($i/2)]++;\n\
    \        }\n        else if ($music_note[0] == \".|\") {\n            $music_beats[$i]++;\n\
    \        }\n    }\n    return $music_beats;\n}\n</code>\nI used this website to\
    \ convert musical note into ASCII format and here is the link to the site http://www.ascii-note.com/\n\
    <|/ a dscore=0 tags=arrays,php |>\n<| a |>\n<code>\n$note_array = array('b','s','c','f','p','d');\n\
    $duration = 4;\n", "    // Your code goes here\n    $music_array = str_split($music_string);\n\
    \    $music_length = count($music_array);\n    $music_array = array_filter($music_array);\n\
    \    \n    // Get all notes first\n    $notes = array();\n    $note_count = 0;\n\
    \    for ($i = 0; $i < $music_length; $i++) {\n        if ($music_array[$i] ==\
    \ '.') {\n            $notes[] = $note_count;\n            $note_count = 0;\n\
    \        } else {\n            $note_count += 1;\n        }\n    }\n    \n   \
    \ // Then count how many beats does each note last\n    $beats = array();\n  \
    \  $note_length = 0;\n    \n    $note_count = 0;\n    foreach ($notes as $note)\
    \ {\n        $beat_count = $music_length - $note;\n        $beats[$note] = $beat_count;\n\
    \        $note_length += $beat_count;\n    }\n    \n    return $beats;\n}", "\t\
    $music_array = explode(\" \", $music_string);\n\t$beat_counts = array();\n\tforeach\
    \ ($music_array as $note) {\n\t\tif ($note == \"o\") {\n\t\t\t$beat_counts[] =\
    \ 1;\n\t\t} else {\n\t\t\tif ($note[1] == \"|\") {\n\t\t\t\t$beat_counts[] = 4;\n\
    \t\t\t} else {\n\t\t\t\t$beat_counts[] = 2;\n\t\t\t}\n\t\t}\n\t}\n\treturn $beat_counts;\n\
    }\n", "    $music_array = array();\n    $music_array = str_split($music_string);\n\
    \    $music_array = array_chunk($music_array, 5);\n    foreach ($music_array as\
    \ $item) {\n        $music_array[$item] = array_flip($item);\n    }\n\n    $music_array['o']['0']\
    \ = 1;\n    $music_array['o']['1'] = 1;\n    $music_array['o']['2'] = 1;\n   \
    \ $music_array['o']['3'] = 1;\n    $music_array['o']['4'] = 1;\n    $music_array['o']['5']\
    \ = 1;\n    $music_array['o']['6'] = 1;\n    $music_array['o']['7'] = 1;\n   \
    \ $music_array['o']['8'] = 1;\n    $music_array['o']['9'] = 1;\n    $music_array['o']['10']\
    \ = 1;\n    $music_array['o']['11'] = 1;\n    $music_array['o']['12'] = 1;\n \
    \   $music_array['o']['13'] = 1;\n    $music_array['o']['14'] = 1;\n    $music_array['o']['15']\
    \ = 1;\n    $music_array['o']['16'] = 1;\n    $music_array['o']['17'] = 1;\n \
    \   $music_array['o']['18'] = 1;\n    $music_array['o']['19'] = 1;\n    $music_array['o']['20']\
    \ = 1;\n    $music_array['o']['21'] = 1;\n    $music_array['o']['22'] = 1;\n \
    \   $music_array['o']['23'] = 1;\n    $music_array['o']['24'] = 1;\n    $music_array['o']['25']\
    \ = 1;\n    $music_array['o']['26'] = 1;\n    $music_array['o']['27'] = 1;\n \
    \   $music_array['o']['28'] = 1;\n    $music_array['o']['29'] = 1;\n    $music_array['o']['30']\
    \ = 1;\n    $music_array['o']['31'] = 1;\n    $music_array['o']['32'] = 1;\n \
    \   $music_array['o']['33'] = 1;\n    $music_array['o']['34'] = 1;\n    $music_array['o']['35']\
    \ = 1;\n    $music_array['o']['36'] = 1;\n    $music_array['o']['37'] = 1;\n \
    \   $music_array['o']['38'] = 1;\n    $music_array['o']['39'] = 1;\n    $music_array['o']['40']\
    \ = 1;\n    $music_array", "    $music_array = explode(\" \", $music_string);\n\
    \    $music_array = array_map(function($note) {\n        $note = trim($note);\n\
    \        $note = trim($note);\n        return array(\"o\", \"o|\", \".|\", \"\
    o|\", \"o|\", \"o|\", \"o|\", \"o|\", \"o|\", \"o|\", \"o\");\n    }, $music_array);\n\
    \    $music_array[0][$music_array[0][0]] = 4;\n    $music_array[1][$music_array[1][0]]\
    \ = 2;\n    $music_array[2][$music_array[2][0]] = 1;\n    $music_array[3][$music_array[3][0]]\
    \ = 2;\n    $music_array[4][$music_array[4][0]] = 1;\n    $music_array[5][$music_array[5][0]]\
    \ = 1;\n    $music_array[6][$music_array[6][0]] = 1;\n    $music_array[7][$music_array[7][0]]\
    \ = 4;\n    $music_array[$music_array[0][0] - 1] = array_sum($music_array[0]);\n\
    \    $music_array[$music_array[1][0] - 1] = array_sum($music_array[1]);\n    $music_array[$music_array[2][0]\
    \ - 1] = array_sum($music_array[2]);\n    $music_array[$music_array[3][0] - 1]\
    \ = array_sum($music_array[3]);\n    $music_array[$music_array[4][0] - 1] = array_sum($music_array[4]);\n\
    \    $music_array[$music_array[5][0] - 1] = array_sum($music_array[5]) * 2;\n\
    \    $music_array[$music_array[6][0] - 1] = array_sum($music_array[6]) * 2;\n\
    \    $music_array[$music_array[7][0] - 1] = array_sum($music_array[7]);\n    return\
    \ $music_array;\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nI appreciate it for the\
    \ effort you put into this. I'm afraid that it does not work for me. The output\
    \ I get is `Array ( [0] => Array ( [0] => o [1] => o [2] => . [3] => o [4] =>\
    \ o [5] => o [6] => o [7] => o [8] => o [9] => o [10] => o [11] => o [12] => o\
    \ [13] => o [14] => o [15] => o ) [1] => Array ( [0] => o [1] => o [2] => . [3]\
    \ => o [4] => o [5] => o [6] => o [7] => o [8] => o [9] => o [10] => o ", "  \
    \  $array = array();\n    $last = '';\n    $beat = 1;\n    for($i = 0; $i < strlen($music_string);\
    \ $i++) {\n        $c = substr($music_string, $i, 1);\n        $last_c = substr($music_string,\
    \ $i - 1, 1);\n        if($last_c != '.' && $last_c != '|') {\n            $array[$beat]\
    \ += 1;\n        }\n        if($c == '.' || $c == '|') {\n            $last =\
    \ $c;\n            $beat += 1;\n        } else {\n            $last = substr($music_string,\
    \ $i - 1, 1);\n        }\n    }\n    return $array;\n}\n</code>\n<|/ a dscore=1\
    \ tags=php,beat |>\n<| c |>\nThanks, that helped a lot.  I ended up using your\
    \ idea to make the script more complicated, but I ended up doing it in a different\
    \ way that I'll post below, which is to go through every possible combination\
    \ and count the occurrences.\n<|/ c |>\n<| c |>\nNice. Also you mentioned that\
    \ you should write a function for the string parsing and I thought that there\
    \ might be a solution without such function.\n<|/ c |>\n<| a tags=php,beat |>\n\
    The answer, as it turns out, was actually simpler than I thought it would be.\
    \  Here's how I solved it.\nI used the following code to count the combinations\
    \ of notes I could have:\n<code>\n<?php\n$combinations = array();\nfor($i = 0;\
    \ $i < 8; $i++)\n    for($j = 0; $j < 8; $j++)\n        $combinations[] = $i .\
    \ ' ' . $j;\nsort($combinations);\n$combinations_len = count($combinations);\n\
    $combinations_freq = array();\n$combinations_freq[0] = 1;\nfor($i = 1; $i < $combinations_len;\
    \ $i++)\n    $combinations_freq[$i] = $combinations_freq[$i - 1] * floor($combinations[$i\
    \ - 1] / $i);", "  $music_string = rtrim($music_string);\n  $music_array = explode(\"\
    \\n\", $music_string);\n  $music_array = array_filter(\n    $music_array,\n  \
    \  function($element) {\n      return $element != '';\n    }\n  );\n  $music_length\
    \ = count($music_array);\n  $notes = array();\n  for ($i = 0; $i < $music_length;\
    \ $i++) {\n    $music_array[$i] = str_replace(\"|\", \"\", $music_array[$i]);\n\
    \    $music_array[$i] = str_replace(\"o\", \"\", $music_array[$i]);\n    $music_array[$i]\
    \ = preg_replace(\"/(\\d{1,2})\\//\", \"\", $music_array[$i]);\n    $music_array[$i]\
    \ = explode(\" \", $music_array[$i]);\n    $notes[$i] = $music_array[$i];\n  }\n\
    \  $music_length = count($notes);\n  $results = array();\n  for ($i = 0; $i <\
    \ $music_length; $i++) {\n    $results[$i] = count($notes[$i]);\n  }\n  return\
    \ $results;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI am not sure why this was\
    \ downvoted - it is a complete solution for what I have asked. Thank you.\n<|/\
    \ c |>\n<| c |>\nI'm glad I could help. I'm happy you found my solution helpful.\n\
    <|/ c |>\n<| a dscore=1 |>\nHere is an updated version of the script provided\
    \ by Anatoly for the question\n<code>\n<?php", "    $music_array = array();\n\
    \    $note_array = array();\n    $notes = preg_split(\"//\", $music_string);\n\
    \    foreach ($notes as $note) {\n        // Parse note into letters and duration\n\
    \        $note_array[] = preg_split('//', $note, -1, PREG_SPLIT_NO_EMPTY);\n \
    \   }\n    // First note is musical note itself\n    $music_array[] = $note_array[0];\n\
    \    // Other notes are just dots so they are skipped\n    for ($i = 1; $i < count($note_array);\
    \ $i++) {\n        $music_array[] = count($note_array) - $i;\n    }\n    return\
    \ $music_array;\n}\n", "    $music = str_split($music_string);\n    foreach ($music\
    \ as &$note) {\n        $note = strtolower($note);\n    }\n    array_walk($music,\
    \ 'removeNotes');\n    $music = array_flip($music);\n    $beats = array();\n \
    \   $last_note = null;\n    foreach ($music as $note => $value) {\n        switch\
    \ ($note) {\n            case 'o':\n            case 'o|':\n                $last_note\
    \ = $note;\n                $beats[] = $value;\n                break;\n     \
    \       case '|':\n                $beats[] = $value + 1;\n                break;\n\
    \            case '.':\n                $beats[] = 0;\n                break;\n\
    \        }\n    }\n    $output = array_values($beats);\n    return $output;\n\
    }\n", "  $beats_per_note = 4;\n  $music_array = explode(\"|\", $music_string);\n\
    \n  // If music is single note, return only length\n  if (count($music_array)\
    \ == 1) return count($music_array);\n\n  $music_array[0] = explode(\"o\", $music_array[0]);\n\
    \  $music_array[1] = explode(\".\", $music_array[1]);\n  $music_array[2] = explode(\"\
    o\", $music_array[2]);\n\n  $result = array();\n  for ($i = 0; $i < count($music_array);\
    \ $i++) {\n    $result[$i] = count($music_array[$i][0]);\n    $result[$i] += count($music_array[$i][1])\
    \ * $beats_per_note;\n    $result[$i] += count($music_array[$i][2]);\n  }\n  return\
    \ $result;\n}\n</code>\nAnd here is the solution using recursion:\n<code>\n<?php",
  "    $notes = str_split($music_string);\n    $last_note = array_pop($notes);\n \
    \   array_push($notes, $last_note);\n\n    $result = array();\n    $current_beat\
    \ = 0;\n    $current_note = 0;\n    foreach($notes as $note) {\n        if($note\
    \ == \"o\") {\n            $result[] = array_sum(array_slice($notes, $current_note++,\
    \ 1));\n            $current_beat += 4;\n        } else if($note == \"o|\") {\n\
    \            $result[] = array_sum(array_slice($notes, $current_note++, 1));\n\
    \            $current_beat += 2;\n        } else if($note == \".|\") {\n     \
    \       $result[] = array_sum(array_slice($notes, $current_note++, 1));\n    \
    \        $current_beat += 1;\n        } else {\n            die(\"Error: $note\
    \ is not recognized as a musical note.\");\n        }\n    }\n    return $result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like the idea of counting by 4 instead\
    \ of 2, but when I try to run your code I get an error about using foreach on\
    \ an array.  I tried just doing a normal for loop instead.  Still no luck, though.\n\
    <|/ c |>\n<| c |>\n, I've just tested this code and it works flawlessly. What\
    \ php version do you have?\n<|/ c |>\n<| c |>\nPHP 5.3.10. I've been trying to\
    \ find out what exactly was different in your code than mine, though.  I'm just\
    \ looking through it now and trying to find anything I can spot that might cause\
    \ my code not to run.\n<|/ c |>\n<| c |>\n, check my edited answer, I've included\
    \ the code which you were looking for.\n<|/ c |>\n<| c |>\n: Thank you!  I appreciate\
    \ the effort and help that you provided.  This works great!\n<|/ c |>\n<| a tags=php\
    \ |>\n<code>\n$notes = str_split($music_string);\n$last_note = array_pop($notes);\n\
    array_push($notes, $last_note);\n\n$result = array();\n$current_beat = 0;\n$current_note\
    \ = 0;\nforeach($notes as $note) {\n    if($note == \"o\") {\n        $result[]\
    \ = array_sum(array_slice($notes, $current_note++, 1));\n        $current_beat\
    \ += 4;\n    } else if($note == \"o|\") {\n        $result[] = array_sum(array_slice($notes,\
    \ $current_note++, 1));\n        $current_beat += ", "  list($notes, $rest) =\
    \ preg_split('/([\\.\\|\\/]+)/', $music_string, 2, PREG_SPLIT_NO_EMPTY);\n\n \
    \ $notes = preg_split('/([\\-]+)/', $notes, -1, PREG_SPLIT_NO_EMPTY);\n  $notes_array\
    \ = array();\n  $rest_array = array();\n  foreach ($notes as $note) {\n    $note\
    \ = trim($note);\n    if ($note === '') {\n      $notes_array[] = 0;\n      $rest_array[]\
    \ = 0;\n    } else {\n      $notes_array[] = array(0, intval(round($note / 12)),\
    \ intval(round($note % 12))); // whole note, lasts four beats\n      $rest_array[]\
    \ = array(0, intval(round($rest[0] / 12)), intval(round($rest[0] % 12))); // rest\
    \ note, lasts two beats\n    }\n  }\n\n  return array_merge(array_sum($notes_array),\
    \ array_sum($rest_array));\n}\n</code>\nOutput:\n<code>\narray (size=8)\n  0 =>\
    \ int 4\n  1 => int 2\n  2 => int 2\n  3 => int 1\n  4 => int 2\n  5 => int 1\n\
    \  6 => int 2\n  7 => int 1\n  8 => int 4\n</code>\n<|/ a dscore=3 |>\n<| c |>\n\
    I like that!  But I am getting an error `Warning: array_merge(): Argument #1 is\
    \ not an array`.  Any idea what that might mean?\n<|/ c |>\n<| c |>\n- I think\
    \ it is because you have `$rest` instead of `$rest_array`.  I fixed the code accordingly.\n\
    <|/ c |>\n<| c |>\n- What is the input for this code?\n<|/ c |>\n<| c |>\n- I\
    \ just updated my answer to handle cases when `notes` does not contain a note.\n\
    <|/ c |>\n<| c |>\nThanks. I am getting an error `Undefined offset: 2`.  I tried\
    \ to figure out what it is but am having trouble finding it.  Do you know what\
    \ it could be?\n<|/ c |>\n<| a |>\nI modified your code to support different octaves.\
    \  It would be easier to debug if you supplied your input string, but here is\
    \ how I did it:\n<code>\n$music = '.| .| .| .| .| .| o| o| o| o| o| o| o| o| o|\
    \ o| o| o| o| o| o| ", "    $music = explode(\" \", $music_string);\n    $return\
    \ = array();\n    $last_note = null;\n    $last_beat = 0;\n    foreach ($music\
    \ as $note) {\n        if ($note == \"o\") {\n            $return[] = $last_beat;\n\
    \            $last_note = null;\n            $last_beat = 0;\n        } else if\
    \ ($note == \".\") {\n            $last_note = null;\n            $last_beat =\
    \ 0;\n        } else if ($note == \"|\") {\n            $last_note = $last_note;\n\
    \        } else {\n            if ($last_note !== null) {\n                $return[]\
    \ = $last_beat;\n                $last_beat = 0;\n            }\n            $last_note\
    \ = $note;\n            $last_beat++;\n        }\n    }\n    $return[] = $last_beat;\n\
    \    return $return;\n}\n</code>\nNow let's see what it does with the music from\
    \ the question:\n<code>\n$music = parse_music(\"o o| .| o| o| .| .| .| .| o o\"\
    );\nprint_r($music);\n</code>\nOutput:\n<code>\nArray\n(\n    [0] => 4\n    [1]\
    \ => 2\n    [2] => 1\n    [3] => 2\n    [4] => 2\n    [5] => 1\n    [6] => 1\n\
    \    [7] => 4\n    [8] => 4\n)\n</code>\nYou can see that it correctly parses\
    \ the music.\n<|/ a dscore=4 tags=parsing,php |>\n<| a dscore=3 |>\nTo find if\
    \ a string is a music note, we can use the preg_match function and find out whether\
    \ a note ends with the letter o, or the letter |. \nThe first part of the pattern\
    \ says \"any characters, followed by\", followed by\na space, followed by\nThe\
    \ second part says \"any characters, followed by\", followed by\na space followed\
    \ by\nThe third part says \"any characters, followed by\", followed by\na space\
    \ followed by\nThe fourth part says \"any characters\"\nThe fifth part says \"\
    any characters\"\nThe sixth part says \"any characters\"\nThe seventh part says\
    \ \"any characters\"\nThe eighth part says \"any characters\"\nThe ninth part\
    \ says \"any characters\"\nThe tenth part says \"any characters\"\nThe eleventh\
    \ part says \"any characters\"\nThe twelfth part says \"any characters\"\nThe\
    \ thirteenth part says \"any characters\"\nThe fourteenth part says \"any characters\"\
    \nThe fifteenth part says \"any ", "    $result = array();\n\n    // Your code\
    \ goes here\n    $music_array = explode(\"|\", $music_string);\n\n    foreach\
    \ ($music_array as $note) {\n        // Your code goes here\n        $note = str_split($note);\n\
    \n        $number_of_beats = count($note) - 1;\n        for ($i = 0; $i < $number_of_beats;\
    \ $i++) {\n            $result[] = $number_of_beats;\n        }\n    }\n\n   \
    \ return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nI have tried this code but it\
    \ is not working properly, it is giving array which has only one element in it.\
    \ What is wrong with this code?\n<|/ c |>\n<| c |>\nWhat is wrong with the code?\
    \ It works well. Maybe you used the wrong input to test it?\n<|/ c |>\n<| c |>\n\
    I have updated my question. I used this input - \"o o| .| o| o| .| .| .| .| o\
    \ o\" and it gives me only array(1) { [0]=> int(1) }\n<|/ c |>\n<| c |>\nYour\
    \ function does not do what you think it does. If you enter `o o| .| o| o| .|\
    \ .| .| .| o o` as input, you will get `array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)`\
    \ as output. Look at my example function where it prints array values. What do\
    \ you see?\n<|/ c |>\n<| c |>\nBut it is giving me only two elements, array(1)\
    \ { [0]=> int(1) } and array(1) { [0]=> int(1) }\n<|/ c |>\n<| a tags=php dscore=1\
    \ |>\nI did it for you:\n<code>\n<?php\n", "    // Your code here\n}\n", "  $notes\
    \ = array();\n  $current_note = 0;\n  $beats = 0;\n\n  foreach (str_split($music_string)\
    \ as $key) {\n    $notes[$current_note] += $key;\n\n    // Quater notes are only\
    \ valid when next note is not half or whole\n    if ($notes[$current_note] <=\
    \ $notes[$current_note + 1]) {\n      $beats += 1;\n    }\n\n    // Increase note\
    \ by one\n    $current_note += 1;\n  }\n\n  return $notes;\n}\n</code>\n<|/ a\
    \ tags=arrays,php dscore=0 |>\n<| a |>\nI think this would be the most simple\
    \ answer to get you started.\n<code>\n$string = \"o o| .| o| o| .| .| .| .| o\
    \ o\";\n\n$result = explode(' ', $string);\n\n$note_array = array();\n\n$note_array['whole']\
    \ = count($result);\n\n$note_array['half'] = count($result);\n$note_array['quarter']\
    \ = count($result);\n\n$note_array['full'] = count($result);\n\n$note_array['double']\
    \ = count($result);\n\n$note_array['triplet'] = count($result);\n</code>\n<|/\
    \ a dscore=0 tags=arrays,php |>\n<| a |>\nThe other answers look good, but are\
    \ they all hard-coding which notes there are and how long a note lasts? Would\
    \ it be easier to do this:\n<code>\n<?php", "    // Implement here\n}", "  $music_string\
    \ = str_replace(' ', '', $music_string);\n  return preg_split('/[^o|\\.]/', $music_string);\n\
    }\n", "  $music_string = preg_replace('/([a-z])([a-z])/', '$1$1', $music_string);\n\
    \  $music_string = preg_replace('/([a-z])([a-z])/', '$1$1', $music_string);\n\
    \  $music_string = preg_replace('/([a-z])([a-z])/', '$1$1', $music_string);\n\
    \  $music_string = preg_replace('/([a-z])([a-z])/', '$1$1', $music_string);\n\
    \  $music_string = preg_replace('/([a-z])([a-z])/', '$1$1', $music_string);\n\
    \  $music_string = preg_replace('/([a-z])([a-z])/', '$1$1', $music_string);\n\
    \  $music_string = preg_replace('/([a-z])([a-z])/', '$1$1', $music_string);\n\
    \  $music_string = preg_replace('/([a-z])([a-z])/', '$1$1', $music_string);\n\
    \  $music_string = preg_replace('/([a-z])([a-z])/', '$1$1', $music_string);\n\
    \  $music_string = preg_replace('/([a-z])([a-z])/', '$1$1', $music_string);\n\
    \  $music_string = preg_replace('/([a-z])([a-z])/', '$1$1', $music_string);\n\
    \  $music_string = preg_replace('/([a-z])([a-z])/', '$1$1', $music_string);\n\
    \  $music_string = preg_replace('/([a-z])([a-z])/', '$1$1', $music_string);\n\
    \  $music_string = preg_replace('/([a-z])([a-z])/', '$1$1', $music_string);\n\
    \  $music_string = preg_replace('/([a-z])([a-z])/', '$1$1', $music_string);\n\
    \  $music_string = preg_replace('/([a-z])([a-z])/', '$1$1', $music_string);\n\
    \  $music_string = preg_replace('/([a-z])([a-z])/', '$1$1', $music_string);\n\
    \  $music_string = preg_replace('/([a-z])([a-z])/', '$1$1', $music_string);\n\
    \  $music_string = preg_replace('/([a-z])([a-z])/', '$1$1', $music_string);\n\
    \  $music_string = preg_replace('/([a-z])([a-z])/', '$1$1', $music_string);\n\
    \  $music_string = preg_replace('/([a-z])([", "    $notes = explode('|', $music_string);\n\
    \    $last_note = $notes[0];\n    $beats_per_note = 4;\n    $beats = 0;\n    foreach\
    \ ($notes as $note) {\n        $beats += $beats_per_note * substr_count($note,\
    \ 'o');\n        if ($note == $last_note) {\n            $beats_per_note++;\n\
    \        } else {\n            $beats_per_note = 4;\n        }\n        $last_note\
    \ = $note;\n    }\n    return array($beats);\n}\n", "    // Your code goes here!\n\
    }", "    $music_array = explode(' ', $music_string);\n    $music_array = array_filter($music_array,\
    \ 'is_numeric');\n    return array_sum($music_array);\n}\n", "    $music_array\
    \ = explode(\" \", $music_string);\n    $music_results = [];\n    foreach ($music_array\
    \ as $music_value) {\n        if (preg_match(\"/^o\\|.\\|$/\", $music_value))\
    \ {\n            $music_results[] = 4;\n        } else if (preg_match(\"/^o\\\
    |$/\", $music_value)) {\n            $music_results[] = 2;\n        } else if\
    \ (preg_match(\"/^\\.\\|$/\", $music_value)) {\n            $music_results[] =\
    \ 1;\n        } else {\n            $music_results[] = 4;\n        }\n    }\n\
    \    return $music_results;\n}\n</code>\n<|/ a dscore=0 tags=parsing,php |>\n\
    <| c |>\nThanks for the help!\n<|/ c |>\n<| c |>\nI am not sure if this should\
    \ be posted as separate answer, but I've changed my original code with your suggestion.\
    \ :)\n<|/ c |>\n<| c |>\nWell, it's up to you which answer you prefer, and I don't\
    \ really mind - it's just that if you write an answer on your own it would be\
    \ more visible on SE - which is not the case here. :)\n<|/ c |>\n<| a tags=parsing,php\
    \ |>\nTry this:\n<code>\n<?php\n$text = 'o o| .| o| o| .| .| .| .| o o';\n$arr\
    \ = array();\nforeach(preg_split(\"/\\s\\s+/\",$text) as $s){\n    if(preg_match(\"\
    /^o\\|.\\|$/\", $s)){\n        $arr[] = 4;\n    }else if(preg_match(\"/^o\\|$/\"\
    , $s)){\n        $arr[] = 2;\n    }else if(preg_match(\"/^\\.\\|$/\", $s)){\n\
    \        $arr[] = 1;\n    }\n}\nprint_r($arr);\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nWhile this works, I suggest you reconsider using regular expressions for\
    \ something this simple.\n<|/ c |>\n<| c |>\nI agree. Sadly, this was a school\
    \ exercise for PHP preg_match. :)\n<|/ c |>\n<| a tags=parsing,php |>\nThis is\
    \ another solution:\n<code>\n<?php\n$text = 'o o| .| o| o| .| .| .| .| o o';\n\
    $arr = preg_split(\"/\\s+/\", $text);\n$result = [];\nforeach ($arr as $value)\
    \ {\n", "    $music_string_array = str_split($music_string);\n    $music_string_array\
    \ = array_count_values($music_string_array);\n    foreach($music_string_array\
    \ as $note => $beats){\n        if ($beats % 2 === 0){\n            $music_string_array[$note]\
    \ = ($beats / 2) + 1;\n        }\n    }\n    return array_values($music_string_array);\n\
    }", "    $music_string = preg_replace('/([\\.\\-\\|\\~\\#]+)/', '', $music_string);\n\
    \    $music_array = explode(' ', $music_string);\n\n    $music_array = array_map(function\
    \ ($item) {\n        $item = preg_replace('/[^\\d\\.]/', '', $item);\n       \
    \ return $item == '' ? 0 : 1;\n    }, $music_array);\n\n    return array_sum($music_array);\n\
    }\n\n$music = parse_music(\"o o| .| o| o| .| .| .| .| o o\");\necho $music;\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis is great! Do you know how to modify\
    \ it so that it can handle multiple chords? I tried to add another preg_replace\
    \ but that didn't work. Would it be best to create a new function and call it\
    \ for each chord? I tried doing that and it didn't work.\n<|/ c |>\n<| c |>\n\
    You can create another function and call it for each chord if you wish. Just pass\
    \ it as the 2nd parameter of `parse_music()`, i.e. `$music = parse_music(\"...\"\
    , $chord_string);`. But you'll have to modify the function `parse_music()` to\
    \ accept that parameter as well.\n<|/ c |>\n<| c |>\nSo I created the new function\
    \ and tried passing it as the second parameter of `parse_music()` and I got this\
    \ error: `Parse error: syntax error, unexpected '(', expecting ']' in /Users/roger/Desktop/School/PHP\
    \ Learning/Chord-Tracker/chord.php on line 48`\n<|/ c |>\n<| c |>\nYour `parse_music()`\
    \ function is written incorrectly. It should be `function parse_music($music_string,\
    \ $chords_string)` and it should receive two parameters. The first one is the\
    \ string you want to parse, the second one is the string containing chords. Then\
    \ it must return the number of beats. You also must remove the line `$music_array\
    \ = preg_replace('/[^\\d\\.]/', '', $music_array);` inside this function. In fact,\
    \ you'll have to modify this function a little bit, since it now expects chords\
    \ as parameter. I've updated my answer with this modification.\n<|/ c |>\n<| c\
    \ |>\nI modified my `parse_music()` function and now it looks like this: `function\
    \ parse_music($music_string, $chords_string) {\n    $music_array = preg_replace('/([\\\
    .\\-\\|\\~\\#]+)/', '', $music_string);\n    $music_array = explode(' ', $music_array);\n\
    \n    $musi", "    $music = array(\n        0 => array(1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1),\n        1 => array(1, 1, 1, 1, 1, 1, 1, 1, 1),\n        2 => array(1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1),\n        3 => array(1, 1, 1, 1, 1, 1, 1, 1, 1),\n    \
    \    4 => array(1, 1, 1, 1, 1, 1, 1, 1, 1),\n        5 => array(1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1),\n        6 => array(1, 1, 1, 1, 1, 1, 1, 1, 1),\n        7 => array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1),\n        8 => array(1, 1, 1, 1, 1, 1, 1, 1, 1),\n \
    \       9 => array(1, 1, 1, 1, 1, 1, 1, 1, 1),\n    );\n    $music_string = trim($music_string);\n\
    \    $music_string = str_replace(\"o\", \"o\", $music_string);\n    $music_string\
    \ = str_replace(\"o|\", \"o|\", $music_string);\n    $music_string = str_replace(\"\
    .|\", \"o|\", $music_string);\n    $music_string = str_replace(\"o.o|\", \"o|\"\
    , $music_string);\n    $music_string = str_replace(\"o.o\", \"o\", $music_string);\n\
    \    $music_string = str_replace(\"|o\", \"o|\", $music_string);\n    $music_string\
    \ = str_replace(\"o.\", \"o.\", $music_string);\n    $music_string = str_replace(\"\
    o\", \"o\", $music_string);\n    $music_string = str_replace(\"o\", \"o\", $music_string);\n\
    \    $music_string = str_replace(\"o\", \"o\", $music_string);\n    $music_string\
    \ = str_replace(\"o\", \"o\", $music_string);\n    $music_string = str_replace(\"\
    o\", \"o\", $music_string);\n    $music_string = str_replace(\"o.o\", \"o.\",\
    \ $music_string);\n    $music_string = str_replace(\"o.o|\", \"o|\", $music_string);\n\
    \    $music_string = str_replace(\"o.o\", \"o.\", $music_string);\n    $music_string\
    \ = str_replace(\"|o\", \"o|\", $music_string);\n    $music_string = str_replace(\"\
    o\", \"o\", $music_string);\n    $music_string = str_replace(\"o\", \"o\", $music_string);\n\
    \    $music_string = str_replace(\"o\", \"o\", $music_string);\n    $music_string\
    \ = str_replace(\"o\", \"o\", $music_string);\n    $music_string = str_replace(\"\
    o.o\", \"o.\", $music_string);\n    $music_string = str_replace(\"o.o\", \"o.\"\
    , $music_string);\n    $music_string = str_replace(\"o.o\", \"o.\", ", "    $parts\
    \ = explode(\" \", $music_string);\n    $note_array = [];\n    for ($i = 0; $i\
    \ < count($parts); $i++) {\n        $note = $parts[$i];\n        $last_beat =\
    \ 0;\n        $note_array[] = 0;\n        for ($j = 0; $j < strlen($note); $j++)\
    \ {\n            $note_to_append = substr($note, $j, 1);\n            if ($note_to_append\
    \ == \"|\") {\n                $last_beat++;\n            }\n            if ($note_to_append\
    \ == \"o\") {\n                $note_array[] += $last_beat;\n            }\n \
    \       }\n    }\n    return $note_array;\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nI really appreciate your help, but I cannot seem to make it work. I copied\
    \ your exact code to the function and I placed the input in the function parameter\
    \ and then added the echo. I'm sure I am doing something wrong somewhere\n<|/\
    \ c |>\n<| c |>\nWhat do you exactly have in that $music_string parameter? Just\
    \ a note string like \"o o| .| o| o| .| .| .| .| o o\"?\n<|/ c |>\n<| c |>\nYes.\
    \ That's exactly what it is. That's how I came up with the input in the first\
    \ place\n<|/ c |>\n<| c |>\nTry this one then. It should work. I've just edited\
    \ my answer. Btw, how did you get \"O O| .. O|\" input in your first place?\n\
    <|/ c |>\n<| c |>\nOh, I see. Thank you so much. That worked perfectly! I really\
    \ appreciate your help!\n<|/ c |>\n<| a dscore=0 |>\nI have done the whole thing,\
    \ as much as I understood. Please, try the code below.\nI hope it will help you.\n\
    <code>\n<?php\n", "  $music_array = explode(' ', $music_string);\n  $music_beats\
    \ = array();\n  $music_beats_count = array();\n  $music_beats_last = array();\n\
    \  foreach ($music_array as $key => $value) {\n    if ($value == '') {\n     \
    \ continue;\n    }\n    if ($value[0] == 'o') {\n      $music_beats_last[] = $key;\n\
    \      $music_beats_count[] = 1;\n    } else {\n      $music_beats_last[] = '';\n\
    \      $music_beats_count[] = 1;\n      $music_beats_last[$key] = 'o';\n    }\n\
    \  }\n  foreach ($music_beats_last as $key => $value) {\n    if ($value == 'o')\
    \ {\n      unset($music_beats_last[$key]);\n      $music_beats_count[$key] = 4;\n\
    \    }\n  }\n  foreach ($music_beats_last as $key => $value) {\n    if ($value\
    \ == '') {\n      continue;\n    }\n    if ($value == '.') {\n      $music_beats_last[$key]\
    \ = 'o';\n      $music_beats_count[$key] = 2;\n    }\n  }\n  foreach ($music_beats_last\
    \ as $key => $value) {\n    if ($value == '|') {\n      $music_beats_last[$key]\
    \ = 'o';\n      $music_beats_count[$key] = 1;\n    }\n  }\n  foreach ($music_beats_count\
    \ as $key => $value) {\n    if ($value == 1) {\n      unset($music_beats_count[$key]);\n\
    \      $music_beats_last[$key] = 'o';\n    }\n  }\n  return $music_beats_last;\n\
    }", "  $notes = str_split($music_string);\n  $array = array();\n  for($i = 0;\
    \ $i < count($notes); $i++) {\n    $note = array_shift($notes);\n    if($note\
    \ == 'o' || $note == 'o|' || $note == '|') {\n      $array[] = $i;\n    }\n  }\n\
    \  return $array;\n}\n", "  $notes = array();\n  $music_string = trim($music_string);\n\
    \  $music_string = rtrim($music_string, \"| \");\n  $music_string = preg_replace('/o|o/i',\
    \ '', $music_string);\n  $music_string = preg_replace('/\\.|\\.|\\.|\\.|o|o/i',\
    \ '', $music_string);\n  $music_array = preg_split('//', $music_string, -1, PREG_SPLIT_NO_EMPTY);\n\
    \  $num_notes = count($music_array);\n  for ($i = 0; $i < $num_notes; $i++) {\n\
    \    switch ($music_array[$i]) {\n      case 'o':\n      case 'o|':\n        $notes[]\
    \ = 4;\n        break;\n      case '.|':\n        $notes[] = 1;\n        break;\n\
    \      default:\n        $notes[] = 4;\n    }\n  }\n  return $notes;\n}\n</code>\n\
    <|/ a tags=php,notepad |>\n<| c |>\nThe code is still failing but you did point\
    \ me in the right direction. Thanks for the help.\n<|/ c |>\n<| c |>\nSo far your\
    \ code is working but when I try passing in an 'o' it returns an empty array.\
    \ Any ideas why that might be happening? My code looks like: `parse_music(\"o\
    \ o| .| o| o| .| .| .| .| o o\");` but I'm guessing that's not right...\n<|/ c\
    \ |>\n<| c |>\nYes, I wrote this code in SO text editor and didn't test. Should\
    \ be fixed now.\n<|/ c |>\n<| c |>\nAwesome, thanks again for the help. I really\
    \ appreciate it.\n<|/ c |>\n<| a dscore=0 tags=php,notepad |>\nIf all you are\
    \ doing is counting how many times each note is used, then I would use a 2D array\
    \ where each index represents an array of the note's counts, i.e.:\n<code>\n$note_counts\
    \ = array();\n$note_counts[0] = array(1, 1, 1, 1, 1, 1);\n$note_counts[1] = array(1,\
    \ 1, 1, 1, 1, 1);\n$note_counts[2] = array(1, 1, 1, 1, 1, 1);\n$note_counts[3]\
    \ = array(1, 1, 1, 1, 1, 1);\n$note_counts[4] = array(1, 1, 1, 1, 1, 1);\n$note_counts[5]\
    \ = array(1, 1, 1, 1, 1, 1);\n$note_counts[6] = array(1, 1, 1, 1, 1, 1);\n$note_counts[7]\
    \ = array(1, 1, 1, 1, 1, 1);\n$note_counts[8] = array(1, 1, 1, 1, 1, 1);\n$note_counts[9]\
    \ = array(1, 1, 1, 1, 1, 1);\n$", "    $notes = preg_split('/[\\.\\|\\|\\-\\|\\\
    +\\-\\[\\]]/', $music_string);\n    $counts = count($notes);\n    $beats_per_note\
    \ = ceil($counts / 4);\n    $notes_array = array();\n    $prev_note = -1;\n  \
    \  for($i=0;$i<$counts;$i++) {\n        $note = $notes[$i];\n        $notes_array[$i]\
    \ = $prev_note !== -1 ? $prev_note*4 + $notes_array[$prev_note] : $note*4;\n \
    \       $prev_note = $notes_array[$i];\n    }\n    return $notes_array;\n}", " \
    \   $notes = array_map('str_split', $music_string);\n    $notes_length = count($notes);\n\
    \    $results = [];\n    $beat_length = 4;\n    $notes_position = 0;\n    $last_note\
    \ = NULL;\n\n    while ($notes_position < $notes_length) {\n        $last_note\
    \ = $notes[$notes_position];\n\n        if ($last_note === 'o') {\n          \
    \  $results[] = $beat_length * 4;\n            $beat_length += 4;\n        } else\
    \ if ($last_note === 'o|') {\n            $results[] = $beat_length * 2;\n   \
    \         $beat_length += 2;\n        } else if ($last_note === '.|') {\n    \
    \        $results[] = $beat_length;\n            $beat_length += 1;\n        }\
    \ else {\n            throw new Exception(\"unknown note $last_note\");\n    \
    \    }\n\n        $notes_position += 1;\n    }\n\n    return $results;\n}\n",
  "    $music_array = array();\n    $music_string = str_replace(\" \", \"\", $music_string);\n\
    \    foreach (str_split($music_string) as $note) {\n        $note = strtolower($note);\n\
    \        switch ($note) {\n            case 'o':\n                $music_array[]\
    \ = 1;\n                break;\n            case '|':\n                $music_array[]\
    \ = 2;\n                break;\n            case '.':\n                $music_array[]\
    \ = 1;\n                break;\n            default:\n                $music_array[]\
    \ = 0;\n                break;\n        }\n    }\n    return $music_array;\n}\n\
    </code>\nAnd here is a test\n<code>\n<?php\n$music_string = \"o o| .| o| o| .|\
    \ .| .| .| .| o o\";\nvar_dump(parse_music($music_string));\n</code>\nAnd the\
    \ result\n<code>\narray(10) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n\
    \  int(2)\n  [3]=>\n  int(1)\n  [4]=>\n  int(1)\n  [5]=>\n  int(1)\n  [6]=>\n\
    \  int(1)\n  [7]=>\n  int(1)\n  [8]=>\n  int(1)\n  [9]=>\n  int(1)\n}\n</code>\n\
    <|/ a tags=parsing,algorithm |>\n<| a dscore=1 |>\nA variant of the algorithm\
    \ for computing the frequency of a pitch is described at http://en.wikipedia.org/wiki/Octave_recipe#Computing_the_frequency_of_a_pitch\n\
    <code>", "    $music_string = preg_replace('(^\\s+|\\s+$)', '', $music_string);\n\
    \    $music_string = preg_replace('/\\s+/', ' ', $music_string);\n    $music_string\
    \ = preg_replace('([^a-z])/', '$1#', $music_string);\n    $music_string = preg_replace('/#/',\
    \ '', $music_string);\n\n    $notes = array();\n    foreach(str_split($music_string)\
    \ as $note) {\n        if(strlen($note) == 1) {\n            // Whole note\n \
    \           $notes[] = $note;\n        } else {\n            // Note with sharp\n\
    \            $notes[] = $note;\n            $notes[] = '#';\n        }\n    }\n\
    \n    return $notes;\n}\n", "  $music_string = trim($music_string);\n  $music_array\
    \ = preg_split('/\\s+/', $music_string);\n  $music_count = count($music_array);\n\
    \n  $music_beats = array();\n  $music_beats_length = array();\n  for($i = 0; $i\
    \ < $music_count; $i++) {\n    if($music_array[$i] == 'o') {\n      $music_beats[]\
    \ = $i;\n      $music_beats_length[] = 4;\n    } else if($music_array[$i] == 'o|')\
    \ {\n      $music_beats[] = $i;\n      $music_beats_length[] = 2;\n    } else\
    \ if($music_array[$i] == '.|') {\n      $music_beats[] = $i;\n      $music_beats_length[]\
    \ = 1;\n    }\n  }\n\n  return array($music_beats, $music_beats_length);\n}\n",
  "    return preg_match_all('/(o|o\\|\\.\\|o){4}?/', $music_string, $matches, PREG_OFFSET_CAPTURE);\n\
    }\n</code>\nThen we need to get our notes. A note is just any character that does\
    \ not have special meaning. For example - o, a, q, m, b have special meanings.\
    \ We don't need any special meaning here. So we can use just these characters\
    \ in our regexp.\n<code>\n<?php", "  $music_notes = str_split($music_string);\n\
    \  \n  $music_notes_count = count($music_notes);\n  $music_notes_array = [];\n\
    \n  for ($i = 0; $i < $music_notes_count; $i++) {\n    $music_notes_array[] =\
    \ substr($music_notes, $i, 1);\n  }\n  \n  return $music_notes_array;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\n<?php", "    $music_array = array();\n   \
    \ $current_beat = 0;\n    $music_length = strlen($music_string);\n    for ($i\
    \ = 0; $i < $music_length; $i++) {\n        $music_string = substr($music_string,\
    \ $i, 1);\n        // get next character, and check that it is not a whitespace\
    \ or dot\n        $c = substr($music_string, $i + 1, 1);\n        if ((empty($c))\
    \ || ($c != '.')) {\n            // end of song, so push last note into music\
    \ array and return it\n            $music_array[] = $current_beat;\n         \
    \   $current_beat = 0;\n            $music_string = substr($music_string, 0, $i\
    \ + 1);\n        } else {\n            // if character is not a dot, it means\
    \ we should increment beat and append it to music string\n            $current_beat++;\n\
    \        }\n    }\n    $music_array[] = $current_beat;\n    return $music_array;\n\
    }", "    \n}", "    list($note, $rest) = explode(\"\\n\", $music_string, 2);\n\
    \    return preg_split('//', $note, null, PREG_SPLIT_NO_EMPTY);\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI should clarify that `parse_music` should actually be `parse_notes`\
    \ - I corrected the typo.\n<|/ c |>\n<| a dscore=0 |>\nHere is a solution without\
    \ using a regex to find the numbers of beats for each note or chord:\n<code>\n\
    <?php\n\n$notes = \"o o| .| o| o| .| .| .| .| o o\";\n$notes = explode(\"\\n\"\
    , $notes);\n$notes = array_map('trim', $notes);\n$notes = array_map('trim', $notes);\n\
    $notes = array_filter($notes, function($note) { return !empty($note); });\n$notes\
    \ = array_map('trim', $notes);\n$notes = array_map('trim', $notes);\n$notes =\
    \ array_map('trim', $notes);\n$notes = array_filter($notes, function($note) {\
    \ return $note !== '.'; });\n$notes = array_map('trim', $notes);\n\n$beats = array();\n\
    foreach ($notes as $note) {\n    $beats[] = strlen($note);\n}\n\nprint_r($beats);\n\
    </code>\nThe output of this script is:\n<code>\nArray\n(\n    [0] => 4\n    [1]\
    \ => 2\n    [2] => 1\n    [3] => 2\n    [4] => 1\n    [5] => 1\n    [6] => 1\n\
    \    [7] => 1\n    [8] => 4\n)\n</code>\n<|/ a tags=php,regex,notes,chord |>\n\
    <| a |>\nI came up with something like this... It may seem like a lot but it's\
    \ not that bad. I'm sure there's more elegant ways of doing this but hey it works.\n\
    <code>\n$music = 'o| o| .| o| o| .| .| .| .| o o';\n$notes = explode(\"\\n\",\
    \ $music);\n$beats = array();\nforeach ($notes as $key => $note) {\n    // get\
    \ rid of whitespace and punctuation\n    $note = preg_replace('/\\s+/', '', $note);\n\
    \    // check if note was just an 'o'\n    if ($note == 'o') {\n        $beats[$key]\
    \ = 1;\n    // check if note was just '.'\n    } elseif ($note == '.') {\n   \
    \     $", "  $music_notes = array();\n  $notes_array = preg_split(\"/[- ]+/\"\
    , $music_string);\n  $music_notes = $notes_array;\n  return $music_notes;\n}\n",
  "  // Implement here your task\n}\n", "    $music = explode(' ', $music_string);\n\
    \    $beats = array();\n\n    $music_length = count($music);\n    $current_beat\
    \ = 0;\n\n    for ($i = 0; $i < $music_length; $i++) {\n        $note = $music[$i];\n\
    \n        if ($note === 'o') {\n            $beats[$i] = 4;\n            $current_beat\
    \ += 4;\n        } else if ($note === 'o|') {\n            $beats[$i] = 2;\n \
    \           $current_beat += 2;\n        } else if ($note === '.|') {\n      \
    \      $beats[$i] = 1;\n            $current_beat += 1;\n        } else {\n  \
    \          throw new Exception('Invalid musical note!');\n        }\n    }\n\n\
    \    return $beats;\n}\n", "  $music_string = preg_replace('/[^a-z0-9]/', '',\
    \ $music_string);\n  $music_array = explode('|', $music_string);\n  $notes = array();\n\
    \  foreach ($music_array as $note) {\n    $notes[] = preg_replace('/\\s/', '',\
    \ $note);\n  }\n  return $notes;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ is so so awesome! Thank you so much!\n<|/ c |>\n<| a tags=php |>\nHere is a\
    \ quick approach that will work for a few different musical styles:\n<code>\n\
    <?php\n\n$notes = array(\n    'c' =>  0,\n    'c4' =>  0,\n    'd' =>  1,\n  \
    \  'd#4' =>  1,\n    'e' =>  2,\n    'e#4' =>  2,\n    'f' =>  3,\n    'f#4' =>\
    \  3,\n    'g' =>  4,\n    'g#4' =>  4,\n    'a' =>  5,\n    'a#4' =>  5,\n  \
    \  'b' =>  6,\n    'c' =>  7,\n    'c4' =>  7,\n    'd' =>  8,\n    'd#4' => \
    \ 8,\n    'e' =>  9,\n    'e#4' =>  9,\n    'f' => 10,\n    'f#4' => 10,\n   \
    \ 'g' => 11,\n    'g#4' => 11,\n    'a' => 12,\n    'a#4' => 12,\n    'b' => 13,\n\
    \    'c' =>  1,\n    'c4' =>  1,\n    'd' =>  1,\n    'd#4' =>  1,\n    'e' =>\
    \  1,\n    'e#4' =>  1,\n    'f' =>  1,\n    'f#4' =>  1,\n    'g' =>  1,\n  \
    \  'g#4' =>  1,\n    'a' =>  1,\n    'a#4' =>  1,\n    'b' =>  1,\n    'c' =>\
    \  2,\n    'c4' =>  2,\n    'd' =>  2,\n    'd#4' =>  2,\n    'e' =>  2,\n   \
    \ 'e#4' =>  2,\n    'f' =>  2,\n    'f#4' =>  2,\n    'g' =>  2,\n    'g#4' =>\
    \  2,\n    'a' =>  2,\n    'a#4' =>  2,\n    'b' =>  ", "    $notes = explode('\
    \ ', $music_string);\n    $notes = array_map('trim', $notes);\n    $notes = array_map('strtolower',\
    \ $notes);\n    $beats = array();\n    foreach ($notes as $note) {\n        if\
    \ ($note == \"o\" || $note == \"o|\" || $note == \".|\") {\n            $beats[]\
    \ = count($beats);\n        } else {\n            list($note_name, $octave) =\
    \ explode('|', $note);\n            $note_name = $note_name;\n            $octave\
    \ = (int)$octave;\n            if ($note_name == \"sharp\" || $note_name == \"\
    flat\") {\n                $note_name .= $octave;\n            }\n           \
    \ if ($note_name == \"sharp\") {\n                $note_name = \"#\";\n      \
    \      }\n            if ($note_name == \"flat\") {\n                $note_name\
    \ = \"b\";\n            }\n            $beats[] = octave_offset($octave) . $note_name;\n\
    \        }\n    }\n    return $beats;\n}\n", "  $music_array = array();\n  $notes\
    \ = array();\n  $note_count = 0;\n  $notes_last_index = 0;\n  $music_length =\
    \ 0;\n  $is_first = true;\n  foreach(str_split($music_string) as $char) {\n  \
    \  if($char === \"|\") {\n      $notes_last_index = $note_count;\n      $note_count\
    \ = 0;\n    }\n    $note_count += 1;\n    $music_array[] = $note_count;\n    if($notes_last_index\
    \ === $note_count) {\n      $notes[] = $note_count;\n      $notes_last_index =\
    \ 0;\n      $note_count = 0;\n      $is_first = false;\n    }\n  }\n  $music_length\
    \ = $note_count;\n  if($note_count !== 0) {\n    $music_array[] = $note_count;\n\
    \  }\n\n  return $music_array;\n}\n", "    // Your code here\n}\n</code>\n<|/\
    \ a tags=php,algorithm,math,midi dscore=3 |>\n<| c |>\nThis is not the right tool\
    \ for the job. You'll notice that your function returns `4, 4, 4, 3` for `\"oo\
    \ o|.|\"` - i.e. a seven beat note that is only three beats long (and the rest\
    \ being quarter notes).\n<|/ c |>\n<| c |>\nYes, I misunderstood the question,\
    \ sorry. The question was about the notation of musical notes, not about the mathematics\
    \ of musical notes. I'll edit the answer, thank you.\n<|/ c |>\n<| c |>\nYour\
    \ function returns 7 beats for \"o o|.|\", not 4 beats.\n<|/ c |>\n<| c |>\n,\
    \ you're right, I misunderstood the question. I'll edit the answer now.\n<|/ c\
    \ |>\n<| c |>\nSure, sorry for the misunderstanding. Thank you very much for your\
    \ answer. It helped me a lot.\n<|/ c |>\n<| a |>\nHere's a solution that doesn't\
    \ use eval.\nIt basically uses preg_match_all to find patterns in the music notes.\n\
    Patterns are grouped in the form \"^<note> [<octave>]\"\nFor each pattern it converts\
    \ it to an array of [<note>, <octave>]\nThen it converts the note to an integer\
    \ and sums up all notes with same octave and sums up the notes with different\
    \ octaves.\n<code>", "    $music_array = explode(\"|\", $music_string);\n    $music_array\
    \ = array_map(\"trim\", $music_array);\n    $music_array = array_map(\"strip\"\
    , $music_array);\n    $music_array = array_filter($music_array);\n    return $music_array;\n\
    }\n</code>\nThe output:\n<code>\nArray\n(\n    [0] => o\n    [1] => o\n    [2]\
    \ => o\n    [3] => .\n    [4] => o\n    [5] => o\n    [6] => o\n    [7] => .\n\
    \    [8] => .\n    [9] => .\n    [10] => .\n    [11] => o\n    [12] => o\n   \
    \ [13] => o\n    [14] => o\n    [15] => o\n    [16] => o\n)\n</code>\nYou can\
    \ then easily calculate the frequency of notes, just by looking at the frequencies\
    \ array you've created. You can create it easily with your array and array_count_values():\n\
    <code>\n$frequencies = array_count_values($frequencies);\n</code>\nThe output:\n\
    <code>\nArray\n(\n    [o] => 9\n    [.] => 5\n    [-] => 1\n    [|] => 2\n   \
    \ [/] => 1\n)\n</code>\n<|/ a tags=frequency,algorithm,arrays,php |>\n<| c |>\n\
    Your code is perfect! I must say I'm not a musician so I'm still trying to get\
    \ my head around your method. Thanks for your answer!\n<|/ c |>\n<| c |>\nI added\
    \ a description of what it does for you in the comments of the answer.\n<|/ c\
    \ |>\n<| c |>\nYou got me a lot further than I got. Your comments helped me understand\
    \ your method. I'll definitely be able to build upon it further though, especially\
    \ because I don't really understand your code. I'll be sure to read through it\
    \ again. Thanks for your efforts!\n<|/ c |>\n<| c |>\nI added more explanation\
    \ at the end of my answer. I don't know how much you'll understand it by reading\
    \ the whole article I linked to, but I think it's really worth it. I also included\
    \ some code examples for you.\n<|/ c |>\n<| a dscore=1 |>\nA simple approach would\
    \ be to just count the number of times each note was used.\nFor instance, you\
    \ could do something like this:\n<code>\n$music = array(\n  \"o o o o o o o o\
    \ o o o o o o o o o o o o o o o o o o o o o o o o o ", "    // Write your code\
    \ here!\n}\n", "\t$music_string = str_replace(' ', '', $music_string);\n\t\n\t\
    $note_array = array();\n\t$note_count = 0;\n\t\n\t$notes = explode(\"|\", $music_string);\n\
    \tforeach ($notes as $note) {\n\t\tif ($note) {\n\t\t\t$note = explode(\" \",\
    \ $note);\n\t\t\tif (strlen($note[1]) == 1) {\n\t\t\t\t$note[0] = $note[0].\"\
    #\";\n\t\t\t\t$note[1] = $note[0].$note[1];\n\t\t\t}\n\t\t\t\n\t\t\t$note_array[$note_count++]\
    \ = $note[0];\n\t\t\t\n\t\t\t$note_array[$note_count++] = $note[1];\n\t\t\t\n\t\
    \t\t$note_array[$note_count++] = $note[1];\n\t\t}\n\t}\n\t\n\treturn $note_array;\n\
    }\n", "    $music_array = array();\n    $length = strlen($music_string);\n   \
    \ $i = 0;\n    while ($i < $length) {\n        $char = substr($music_string, $i,\
    \ 1);\n        switch ($char) {\n            case 'o': $music_array[] = 4; $i++;\
    \ break;\n            case '|': $music_array[] = 2; $i++; break;\n           \
    \ case '.': $music_array[] = 1; $i++; break;\n            default:\n         \
    \       // If this character is not in the above list, just ignore it and count\
    \ the rest.\n                $music_array[] = 1;\n                $i++;\n    \
    \            break;\n        }\n    }\n    return $music_array;\n}\n", "\t$music_array\
    \ = explode(\" \", $music_string);\n\t$music_count = count($music_array);\n\t\
    $beats_array = array();\n\tfor ($i = 0; $i < $music_count; $i++) {\n\t\tswitch\
    \ ($music_array[$i]) {\n\t\t\tcase 'o':\n\t\t\t\t$beats_array[] = 4;\n\t\t\t\t\
    break;\n\t\t\tcase 'o|':\n\t\t\t\t$beats_array[] = 2;\n\t\t\t\tbreak;\n\t\t\t\
    case '.|':\n\t\t\t\t$beats_array[] = 1;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn\
    \ $beats_array;\n}\n", "    $notes = explode(\"|\", $music_string);\n\n    $beats_array\
    \ = array();\n\n    for ($i = 0; $i < count($notes); $i++) {\n        $note =\
    \ $notes[$i];\n\n        if ($note == 'o') {\n            $beats_array[] = 4;\n\
    \        } else if ($note == 'o|') {\n            $beats_array[] = 2;\n      \
    \  } else if ($note == '.|') {\n            $beats_array[] = 1;\n        } else\
    \ {\n            die(\"Invalid note: $note\");\n        }\n    }\n\n    return\
    \ $beats_array;\n}\n", "    $music_string = preg_replace('/[^A-Za-z0-9]/', '',\
    \ $music_string); // remove non letters\n    $music_string = preg_replace('/\\\
    s/', '', $music_string); // remove spaces\n    $music_string = preg_replace('/\\\
    s$/', '', $music_string); // remove spaces from end\n    $music_string = preg_replace('/[\\\
    .|]\\s/', '', $music_string); // remove other special characters\n    $music_string\
    \ = preg_replace('/\\|$/', '', $music_string); // remove other special characters\
    \ from end\n    $music_string = preg_replace('/[\\.]$/', '', $music_string); //\
    \ remove other special characters from end\n    $music_string = preg_replace('/\\\
    |+$/', '', $music_string); // remove other special characters from end\n    $music_string\
    \ = preg_replace('/[\\.]+$/', '', $music_string); // remove other special characters\
    \ from end\n    $music_string = preg_replace('/\\|+/', '', $music_string); //\
    \ remove other special characters from end\n    $music_string = preg_replace('/\\\
    .$/', '', $music_string); // remove other special characters from end\n    $music_string\
    \ = preg_replace('/\\.+$/', '', $music_string); // remove other special characters\
    \ from end\n    $music_string = preg_replace('/\\|+/', '', $music_string); //\
    \ remove other special characters from end\n    $music_string = preg_replace('/\\\
    |$/', '', $music_string); // remove other special characters from end\n    $music_string\
    \ = preg_replace('/[\\.]+$/', '', $music_string); // remove other special characters\
    \ from end\n    $music_string = preg_replace('/\\.+$/', '', $music_string); //\
    \ remove other special characters from end\n    $music_string = preg_replace('/\\\
    |+$/', '', $music_string); // remove other special characters from end\n    $music_string\
    \ = preg_replace('/[\\.]+$/', '', $music_string); // remove other special characters\
    \ from end\n    $music_string = preg_replace('/\\.$/', '', $music_string); //\
    \ remove other special characters from end\n    $music_string = preg_replace('/[\\\
    .]+$/', '', $music_string); // remove other special characters from end\n    $music_string\
    \ = preg_replace('/\\|+/', '', $music_string); // remove other special characters\
    \ from end\n    $music_string = preg_replace('/[\\.]+$/', '', $music_string);\
    \ // remove other special characters from end\n    $music_string = preg_replace('/\\\
    .+$/", "    $notes = preg_split('/(\\|o|\\|.|)/', $music_string, -1, PREG_SPLIT_NO_EMPTY\
    \ | PREG_SPLIT_DELIM_CAPTURE);\n    $result = [];\n    for ($i = 0; $i < count($notes);\
    \ $i++) {\n        $result[] = intval($notes[$i]);\n    }\n    return $result;\n\
    }\n\nprint_r(parse_music(\"o o| .| o| o| .| .| .| .| o o\"));\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThis is not correct. I am not sure I understand your notation.\
    \ Your `parse_music` function seems to have 2 `|` which are not in the ASCII format,\
    \ but in the `musical` notation. `|` means \"half note\". Those `|` should only\
    \ be present in `musical_notation_string`.\n<|/ c |>\n<| c |>\nThe ASCII format\
    \ is exactly the same as the `musical_notation_string` variable. Did you try the\
    \ code above?\n<|/ c |>\n<| c |>\n`parse_music` function works correctly with\
    \ `musical_notation_string` as input. The string `musical_notation_string` contains\
    \ `|` characters in it which are not ASCII characters. They are `|` marks for\
    \ half-note or quarter note or whatever other note. So the function does not work\
    \ correctly with that input string.\n<|/ c |>\n<| c |>\nThe question stated that\
    \ `musical_notation_string` contains `|` characters. The function also contains\
    \ `|` characters and that's why it works.\n<|/ c |>\n<| c |>\nYou are right, sorry.\
    \ I did not notice that. My mistake.\n<|/ c |>\n<| a tags=regex,php dscore=0 |>\n\
    Using regex and preg_match_all to capture notes in a string:\n<code>\n<?php",
  "    $result = [];\n    foreach($music_string as $char) {\n        if ($char ===\
    \ 'o') {\n            $result[] = 4;\n        } elseif ($char === 'o|') {\n  \
    \          $result[] = 2;\n        } elseif ($char === '.|') {\n            $result[]\
    \ = 1;\n        } else {\n            throw new Exception('Unknown note \"' .\
    \ $char . '\"');\n        }\n    }\n    return $result;\n}\n", "    if (empty($music_string))\
    \ {\n        return array(0);\n    }\n    $music_array = str_split($music_string);\n\
    \    $result = array();\n    for ($i = 0; $i < count($music_array); $i++) {\n\
    \        if ($music_array[$i] !== '.') {\n            $result[] = 1;\n       \
    \ } else {\n            $result[] = 4;\n        }\n    }\n    return $result;\n\
    }\n", "    $notes = array();\n    $notes_length = strlen($music_string);\n   \
    \ $note_length = strlen($music_string[0]);\n\n    for ($i = 0; $i < $notes_length;\
    \ $i++) {\n        $notes_note = substr($music_string, $i, $note_length);\n\n\
    \        if ($notes_note == \"o\" || $notes_note == \"o|\" || $notes_note == \"\
    .|\") {\n            // This is a note\n            $notes[] = $i + 1;\n     \
    \   }\n    }\n\n    return $notes;\n}\n", "  // Your code here\n}", "    $notes\
    \ = array();\n\n    foreach(explode(\"|\", $music_string) as $note) {\n      \
    \  if ($note == \"o\") {\n            $notes[] = 4;\n        } elseif ($note ==\
    \ \"o|\") {\n            $notes[] = 2;\n        } elseif ($note == \".|\") {\n\
    \            $notes[] = 1;\n        } else {\n            throw new Exception(\"\
    Music string has invalid note!\");\n        }\n    }\n\n    return $notes;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=arrays,algorithm,php |>\nI have come up\
    \ with an approach in PHP to parse your notes string.\nThe function will output\
    \ the following:\n<code>\n[\n    0 => array(4),\n    1 => array(2, 2),\n    2\
    \ => array(1),\n]\n</code>\nI believe this is what you were looking for.\n<code>",
  "    $notes = explode(\"\\n\", $music_string);\n    $beats = 0;\n    $notes_array\
    \ = array();\n    foreach ($notes as $note) {\n        $note = explode(\"|\",\
    \ $note);\n        // o is just an \"empty\" note\n        if ($note[0] == \"\
    o\") {\n            $notes_array[] = 0;\n            // This note's duration depends\
    \ on how many \"empty notes\" was played before it\n            $notes_array[$beats]\
    \ = $beats;\n            $beats += 4;\n        } else {\n            $notes_array[]\
    \ = 1;\n            $notes_array[$beats]++;\n            $beats += 2;\n      \
    \  }\n    }\n    return $notes_array;\n}\n", "    $music_array = explode(\"|\"\
    , $music_string);\n    $music_count = count($music_array);\n\n    for ($i = 0;\
    \ $i < $music_count; $i++) {\n        $music_string[$i] .= \"|\";\n    }\n\n \
    \   $music_array = explode(\"o\", $music_string);\n    $music_count = count($music_array);\n\
    \n    for ($i = 0; $i < $music_count; $i++) {\n        $music_array[$i] = preg_replace(\"\
    /\\s/\", \"\", $music_array[$i]);\n        $music_array[$i] = str_replace(\"|\"\
    , \"\", $music_array[$i]);\n    }\n\n    return $music_array;\n}\n\necho \"<pre>\"\
    ;\nprint_r(parse_music(\"o o| .| o| o| .| .| .| .| o o\"));\necho \"</pre>\";",
  "    // Solution without regexp\n    $music_array = array();\n    $length = strlen($music_string);\n\
    \    $last_note = -1;\n    for ($i = 0; $i < $length; ++$i) {\n        $music_note\
    \ = substr($music_string, $i, 1);\n        if ($music_note == \"o\") {\n     \
    \       $last_note = -1;\n        } else if ($music_note == \".\") {\n       \
    \     $last_note = 1;\n        }\n        if ($last_note != -1) {\n          \
    \  $music_array[] = $last_note * 4;\n        }\n    }\n    return $music_array;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThanks! That's a great solution. However I believe\
    \ there is something wrong with my data set. I'm getting a score of 0 from my\
    \ code after I apply the function - I did a test data set that has exactly one\
    \ \"o\" in it. I think it's because a score of 0 means no note is played on any\
    \ beat. I've been trying to figure this out for about 5 hours now and it's really\
    \ bugging me :/\n<|/ c |>\n<| c |>\nI believe the problem is in the data that\
    \ `parse_music` function reads, I didn't check it. I just tried to fix the problem\
    \ with it. If you'll have some problems with that, I can modify my code to fit\
    \ the needs.\n<|/ c |>\n<| c |>\nYeah I think you're right, it has to do with\
    \ the data. I'll definitely have to play with the data a little more. I think\
    \ the problem is that the data has some weird special characters (not actually\
    \ sure what they are) so when it reads the data into an array it thinks the '|'\
    \ character is actually part of the data but I don't know how to avoid that from\
    \ happening. I'll try to play around with it some more and see if I can figure\
    \ it out. Thanks!\n<|/ c |>\n<| c |>\nI see what you're saying, the \"|\" character\
    \ seems to be causing issues. I'll have to figure out how to get rid of those.\
    \ Thanks for your help!\n<|/ c |>\n<| c |>\nI'm glad I could help. :) If you would\
    \ like to use a more effective and more universal way of parsing music notes,\
    \ I recommend using http://musicxml.org/, it's quite popular and it can read pretty\
    \ much anything with simple parser. For example it can read scores written by\
    \ other programs including MuseScore, which has notes in format like \"O| B|\"\
    .\n<|/ c |>\n<| a tags=php |>\nHere is a working code for a musical notation interpreter\
    \ that ", "  $music_array = array();\n  // Iterate over input string and build\
    \ an array of notes.\n  for ($i = strlen($music_string); $i-- > 0;) {\n    $music_array[]\
    \ = array_search($music_string[$i], array('0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9'));\n  }\n  // Iterate over notes array and calculate how many beats\
    \ each note last.\n  $music_array_notes = $music_array;\n  foreach ($music_array_notes\
    \ as $key => &$value) {\n    $music_array_notes[$key] = ($key % 2) ? $value +\
    \ 4 : $value;\n  }\n  // Add one to every note which lasts one beat.\n  foreach\
    \ ($music_array_notes as &$value) {\n    $value++;\n  }\n  return $music_array_notes;\n\
    }\n", "    // Your code goes here\n}\n", "    $music_array = str_split($music_string,\
    \ 4);\n\n    $music_notes_count = count($music_array);\n    $music_beats = array();\n\
    \    $music_notes = array();\n\n    for ($i = 0; $i < $music_notes_count; $i++)\
    \ {\n        $music_notes[] = $music_array[$i];\n\n        if ($music_array[$i]\
    \ === '|') {\n            $music_beats[count($music_beats)] = 4;\n        } elseif\
    \ ($music_array[$i] === 'o') {\n            $music_beats[count($music_beats)]\
    \ = 1;\n        } else {\n            $music_beats[count($music_beats)] = 0;\n\
    \        }\n    }\n\n    return $music_beats;\n}\n</code>\nEDIT\nIn case you want\
    \ it for whole notes:\n<code>\n<?php", "  // Your code here\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| c |>\nThank you for the answer. I am having issues understanding\
    \ how this would apply to my code.\n<|/ c |>\n<| c |>\nSorry - I missed the part\
    \ about notes occurring in odd numbered octaves.\n<|/ c |>\n<| c |>\nNo worries.\
    \ Your answer was very helpful!\n<|/ c |>\n<| c |>\nNo problem. If you could accept\
    \ my answer it would be great! :)\n<|/ c |>\n<| a dscore=2 |>\nYour code doesn't\
    \ seem to indicate what exactly you're trying to accomplish. I see that you have\
    \ an input array $notes that is a string representation of the musical notes,\
    \ and the result you want to get is an array that contains the frequencies of\
    \ each note in a song. I suggest that first you convert these strings into frequency\
    \ values in your program. Let's assume you want to do this in PHP and that you\
    \ have the following data structure:\n<code>\nclass Note\n{\n    public $note;\n\
    \    public $frequency;\n}\n</code>\nYou also have an array of notes:\n<code>\n\
    $notes = [\n    new Note('C', 2),\n    new Note('C#', 3),\n    new Note('D', 4),\n\
    \    new Note('D#', 5),\n    new Note('E', 6),\n    new Note('F', 7),\n    new\
    \ Note('F#', 8),\n    new Note('G', 9),\n    new Note('G#', 10),\n    new Note('A',\
    \ 11),\n    new Note('A#', 12),\n    new Note('B', 13),\n    new Note('B#', 14),\n\
    ];\n</code>\nTo convert the input string to the frequency values, you can use\
    \ a loop:\n<code>\n$frequencies = [];\n\nforeach ($notes as $note) {\n    $frequencies[$note->note]\
    \ = $note->frequency;\n}\n</code>\nAfter that, you simply need to loop over the\
    \ $frequencies array again and apply the mathematical formula to convert from\
    \ Hz to notes. You can use a recursive function like this:\n<code>", "    $notes\
    \ = explode(\"|\", $music_string);\n    $beats = array();\n\n    foreach($notes\
    \ as $note) {\n        // \"o\" note lasts four beats\n        if ($note == \"\
    o\") {\n            $beats[] = 4;\n        }\n        // \"o|\" note lasts two\
    \ beats\n        else if ($note == \"o|\") {\n            $beats[] = 2;\n    \
    \    }\n        // \".|\" note lasts one beat\n        else {\n            $beats[]\
    \ = 1;\n        }\n    }\n\n    return $beats;\n}", "  $array = array();\n  $note_length\
    \ = strlen($music_string);\n  $last_note = null;\n  \n  // To speed up parsing,\
    \ we just ignore all non-octave marks.\n  while($note_length > 1) {\n    if(strpos($music_string,\
    \ \"|\") !== false) $music_string = substr($music_string, 0, strpos($music_string,\
    \ \"|\"));\n    \n    // Check if note ends with '|'.\n    // If it does, it means\
    \ that we encountered an octave mark. \n    if(substr($music_string, ($note_length\
    \ - 1), 1) === \"|\") {\n      // The note ends with '|', so get the note's length\
    \ and convert it to a number.\n      $note_length = substr($music_string, ($note_length\
    \ - 1), 1);\n      $last_note = substr($music_string, 0, $note_length);\n    \
    \  $array[] = $last_note;\n      \n      // Skip all octave marks.\n      $music_string\
    \ = substr($music_string, $note_length, strlen($music_string) - $note_length);\n\
    \    } else {\n      // Note doesn't end with '|', so get the note's length and\
    \ convert it to a number.\n      $note_length = substr($music_string, 0, 1);\n\
    \      $last_note = substr($music_string, 0, $note_length);\n      $array[] =\
    \ $last_note;\n    }\n  }\n  \n  return $array;\n}\n", "    $music_array = str_split($music_string);\n\
    \    $music_array = array_filter(array_map('trim', $music_array));\n    $music_array\
    \ = array_map(function($song_note) {\n        $song_note = mb_substr($song_note,\
    \ 0, 1);\n        $beats = mb_substr($song_note, 2, 1);\n        return $beats\
    \ * 4;\n    }, $music_array);\n    $music_array = array_map(function($song_note)\
    \ {\n        $song_note = mb_substr($song_note, 3, 1);\n        $beats = mb_substr($song_note,\
    \ 2, 1);\n        return $beats * 2;\n    }, $music_array);\n    $music_array\
    \ = array_map(function($song_note) {\n        return $song_note;\n    }, $music_array);\n\
    \    return $music_array;\n}\n</code>\n<|/ a tags=php,notes,arrays |>\n<| c |>\n\
    Thank you very much for your help.\n<|/ c |>\n<| c |>\nI am getting this error\
    \ \n\nWarning: array_map() expects parameter 1 to be a valid callback, first array\
    \ member is not a valid class name or object in C:\\xampp\\htdocs\\music\\notes\\\
    notes.php on line 24\n<|/ c |>\n<| c |>\nThe callback function is missing parenthesis\
    \ after the parameter list. Now I fixed the code.\n<|/ c |>\n<| c |>\nThe error\
    \ says that your class is not valid. You should make sure that you are passing\
    \ a valid callback to `array_map`. Try using `get_class` function to make sure\
    \ that the class name is correct.\n<|/ c |>\n<| c |>\nIt worked for me thank you,\
    \ however the output is not as i wanted it to be it gave me this http://i.imgur.com/8S6X6Gt.png\n\
    <|/ c |>\n<| a dscore=1 |>\nI managed to solve it by simply splitting the string\
    \ by two spaces and then making an array out of it:\n<code>\n<?php", "  return\
    \ array(\n    // Number of beats per whole note.\n    floor(strlen($music_string)\
    \ / 4) * 4,\n    // Number of beats per half note.\n    floor(strlen($music_string)\
    \ / 2) * 2,\n    // Number of beats per quater note.\n    floor(strlen($music_string)\
    \ / 1),\n  );\n}\n", "  $result = [];\n  foreach (preg_split(\"//u\", $music_string)\
    \ as $char) {\n    if ($char === \"o\") {\n      $result[] = 4;\n    } elseif\
    \ ($char === \"o|\") {\n      $result[] = 2;\n    } elseif ($char === \".|\")\
    \ {\n      $result[] = 1;\n    } else {\n      throw new Exception(\"Invalid musical\
    \ note. \" . $char);\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays,split\
    \ |>\n<| c |>\nVery nice, but this requires the notes to be consecutive (which\
    \ they aren't in this case), so it isn't quite as flexible as I'd like. Thanks!\n\
    <|/ c |>\n<| c |>\nOh, and I forgot to mention: It would be a good idea to include\
    \ some sort of \"silence\" note at the beginning of the string, to make it a pure\
    \ musical string (no \"o\" characters). I'd like to have it so that I can add\
    \ notes at the beginning of my array, then do some operations on it.\n<|/ c |>\n\
    <| c |>\nYes, I thought about that too. I think I may have found the right answer:\
    \ use [array_shift](http://php.net/manual/en/function.array-shift.php) to shift\
    \ the array left after you find the first \"o\" character, then continue with\
    \ the rest of the array.\n<|/ c |>\n<| c |>\nYes, this seems to work well, but\
    \ I get a lot of warnings and a lot of notices from PHP. Is there a way to fix\
    \ the warnings while still using arrays?\n<|/ c |>\n<| c |>\nThe notices could\
    \ be fixed by changing the `foreach` loop to `foreach($array as $char => $note)`,\
    \ but that will still leave you with an empty array at the beginning. The warnings\
    \ I can only suggest is to change the `throw new Exception` line to `trigger_error('Invalid\
    \ musical note.', $note);`. I don't think you can change the code without using\
    \ `$array` or using my version which uses `array_shift` which I didn't realise.\
    \ Sorry!\n<|/ c |>\n<| a |>\n<code>\n$string = \"o o| .| o| o| .| .| .| .| o o\"\
    ;\n$array = preg_split(\"/[|\\.\\s]/\", $string);\n</code>\nThe result looks like\
    \ this:\n<code>\nArray\n(\n    [0] => \n    [1] => o o\n    [2] => \n    [3] =>\
    \ \n    [4] => \n    [5] => \n    [6] => \n    [7] => \n", "    $music_array =\
    \ explode(\"\\n\", $music_string);\n    $music_array = [];\n    $notes_length\
    \ = [];\n    $current_note = \"\";\n    $note_length = 0;\n    foreach ($music_array\
    \ as $line) {\n        if (substr($line, 0, 1) != \".\") {\n            $line\
    \ = preg_replace('/\\W+/', '', $line);\n            $line = trim($line);\n   \
    \         if ($current_note != \"\") {\n                $music_array[$note_length]\
    \ = $current_note;\n                $notes_length[$note_length] = strlen($current_note);\n\
    \                $current_note = \"\";\n            }\n            $current_note\
    \ .= $line;\n        } else {\n            if (substr($line, 0, 2) == \"o|\")\
    \ {\n                $note_length++;\n            } else {\n                if\
    \ ($note_length == 0) {\n                    $note_length = 1;\n             \
    \   }\n                foreach ($notes_length as $k => $length) {\n          \
    \          if ($length <= $note_length) {\n                        $music_array[$k]\
    \ += 1;\n                    }\n                }\n            }\n           \
    \ $note_length = 0;\n        }\n    }\n    return $music_array;\n}\n</code>\n\
    Output\n<code>\nArray\n(\n    [0] => Array\n        (\n            [0] => o\n\
    \            [1] => o\n            [2] => |\n            [3] => |\n          \
    \  [4] => |\n            [5] => |\n            [6] => |\n            [7] => |\n\
    \            [8] => |\n            [9] => |\n            [10] => |\n         \
    \   [11] => |\n            [12] => o\n            [13] => o\n        )\n\n   \
    \ [1] => Array\n        (\n            [0] => 4\n            [1] => 2\n      \
    \      [2] => 1\n            [3] => 2\n            [4] => 1\n            [5] =>\
    \ 1\n            [6] => 1\n            [7] => 1\n            [8] => 1\n      \
    \      [9] => 1\n            [10] => 4\n            [11] => 4\n        )\n\n)\n\
    </code>\n<|/ a dscore=1 tags=arrays,php |>\n<| c |>\nThanks for your answer. It\
    \ doesn't return the correct result. Your example should return an array with\
    \ the first beat of every note, but you return an array with every note and every\
    \ beat.\n<|/ c |>\n<| c |>\nI've changed answer, now it works fine.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. Now it works fine. It is a little bit complicated\
    \ to understand, but I understand it now.\n<|/ c |>\n<| a dscore=0 tags=arrays,php\
    \ |>\nI think you might have your data array reversed, try the following:", " \
    \   $music_array = explode(\"\\n\", $music_string);\n\n    $notes = [];\n\n  \
    \  foreach ($music_array as $music_line) {\n        $music_line = trim($music_line);\n\
    \n        if (empty($music_line)) {\n            continue;\n        }\n\n    \
    \    // Split the music line into an array of two characters, like 'o'\n     \
    \   $music_line_split = $music_line[0];\n\n        // Replace the music line with\
    \ its ASCII equivalent, like '0'\n        $music_line_split = str_ireplace(\n\
    \            'o',\n            '0',\n            $music_line_split\n        );\n\
    \n        // Parse the music line into array of two characters, like [0, 5]\n\
    \        $music_line_split = explode(' ', $music_line_split);\n\n        // Convert\
    \ to integer, like [0, 0]\n        $music_line_split = [intval($music_line_split[0]),\
    \ intval($music_line_split[1])];\n\n        // Count the number of beats between\
    \ not last '0' and last '5'\n        $notes[$music_line_split[0]] += $music_line_split[1]\
    \ - $music_line_split[0] + 1;\n    }\n\n    return $notes;\n}", "  $music_array\
    \ = explode(\"|\", $music_string);\n  return $music_array;\n}\n", "  $music_array\
    \ = explode(\"\\n\", $music_string);\n  return array_map(function($note) {\n \
    \   return strlen($note) / 4;\n  }, $music_array);\n}\n", "    $music_array =\
    \ explode(\" \", $music_string);\n    $beats_array = array();\n    for ($i = 0;\
    \ $i < count($music_array); $i++) {\n        $music_note = substr($music_array[$i],\
    \ 0, 1);\n        $note_count = substr($music_array[$i], 0, 1);\n        if ($music_note\
    \ == \".\" || $music_note == \"o\") {\n            $beats_array[$i] = 0;\n   \
    \     } else {\n            if ($music_note == \"|\") {\n                $note_count\
    \ *= 2;\n            }\n            $beats_array[$i] = $note_count;\n        }\n\
    \    }\n    return $beats_array;\n}", "  $parsed_music = [];\n  foreach (preg_split('/\\\
    s+/', $music_string, -1, PREG_SPLIT_NO_EMPTY) as $notes) {\n    if (preg_match('/^o|./i',\
    \ $notes)) {\n      array_push($parsed_music, 4);\n    } elseif (preg_match('/^o\\\
    |./i', $notes)) {\n      array_push($parsed_music, 2);\n    } elseif (preg_match('/^\\\
    .\\|$/i', $notes)) {\n      array_push($parsed_music, 1);\n    } else {\n    \
    \  array_push($parsed_music, 0);\n    }\n  }\n  return $parsed_music;\n}\n</code>\n\
    <|/ a tags=php,string |>\n<| a tags=php,string |>\n<code>\n<?php\n$str = \"O O|.|O|O|.|O|O|.|.|.|.|.|O|O|.\"\
    ;\nprint_r(parse_music($str));\n", "    $music_list = explode(\"|\", $music_string);\n\
    \    $music_array = array();\n    $music_array[] = 1;\n    $music_array[] = 1;\n\
    \    $music_array[] = 1;\n    $music_array[] = 1;\n    $music_array[] = 1;\n \
    \   $music_array[] = 1;\n    $music_array[] = 1;\n    $music_array[] = 1;\n  \
    \  $music_array[] = 1;\n    $music_array[] = 1;\n    $music_array[] = 1;\n   \
    \ foreach($music_list as $note) {\n        if($note == \"o\")\n            $music_array[]\
    \ = 4;\n        else if($note == \"o|\")\n            $music_array[] = 2;\n  \
    \      else\n            $music_array[] = 1;\n    }\n    return $music_array;\n\
    }\n", "    $notes = preg_split('/[\\.\\|o]/', $music_string);\n\n    foreach ($notes\
    \ as &$note) {\n        if ($note == \".\") {\n            $note = \"o\";\n  \
    \      } else if ($note == \"o\") {\n            $note = \".\";\n        } else\
    \ if ($note == \"|\") {\n            $note = \"o|\";\n        } else if ($note\
    \ == \"o|\") {\n            $note = \".|\";\n        } else {\n            throw\
    \ new Exception(\"Unrecognized note '{$note}'\");\n        }\n    }\n\n    return\
    \ $notes;\n}\n", "    $music_array = array();\n\n    // Split the string on whitespace\n\
    \    $music_array = preg_split(\"/[\\s]+/\", $music_string);\n\n    // Remove\
    \ empty elements\n    $music_array = array_filter($music_array);\n\n    // Map\
    \ each element to its number of beats\n    $music_array = array_map(function ($element)\
    \ {\n        // Parse element and determine if last or only one\n        $last_beat\
    \ = strlen($element) % 2 ? 'o|' : 'o';\n        $element_length = strlen($element);\n\
    \n        // Calculate number of beats\n        $beats = ($element_length - 1)\
    \ / 2;\n\n        // Parse last beat\n        $last_beat = substr($last_beat,\
    \ 0, 1);\n\n        // Return number of beats\n        return $beats == $last_beat\
    \ ? $beats : $last_beat;\n    }, $music_array);\n\n    // Return parsed array\n\
    \    return $music_array;\n}\n", "    $music_string = trim($music_string);\n \
    \   $music_string = rtrim($music_string);\n    $music_array = explode(\"|\", $music_string);\n\
    \    $music_array = array_reverse($music_array);\n\n    $notes = array();\n  \
    \  foreach ($music_array as $music_index => $music) {\n        if ($music_index\
    \ % 2 == 1) {\n            $music_note = substr($music, 0, 1);\n            $music_beat\
    \ = substr($music, 1, 1);\n            if ($music_beat == \".\") {\n         \
    \       $music_beat = \".5\";\n            } else {\n                $music_beat\
    \ = \".{$music_beat}\";\n            }\n            $notes[] = $music_note * 16;\n\
    \            $notes[] = $music_beat;\n        } else {\n            $music_note\
    \ = substr($music, 0, 1);\n            $notes[] = $music_note;\n        }\n  \
    \  }\n\n    $notes = array_reverse($notes);\n\n    $results = array();\n    foreach\
    \ ($notes as $note) {\n        $results[] = $note * 4;\n    }\n\n    $results\
    \ = array_reverse($results);\n\n    return $results;\n}\n\n$music_string = file_get_contents(\"\
    music.txt\");\n$music_array = parse_music($music_string);\n$music_string = implode(\"\
    |\", $music_array);\n\nprint_r(parse_music($music_string));", "    $music_string\
    \ = preg_replace('/\\W+/', \" \", $music_string); // delete all non-alpha chars\n\
    \    $music_string = preg_replace('/\\s+/', ' ', $music_string); // replace all\
    \ multiple spaces with single space\n\n    $music_array = explode(\" \", $music_string);\
    \ // create an array of music note strings, each note is separated by space\n\
    \    $music_array = preg_replace('/o\\|o\\|\\.\\|o\\|o\\|o\\|\\.\\|\\.\\|\\.\\\
    |\\.\\|o\\|o\\|o\\|o\\|o\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|o\\\
    |o\\|o\\|o\\|o\\|o\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\\
    .\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\\
    |\\.\\|\\.\\|\\.\\|o\\|o\\|o\\|o\\|o\\|o\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\\
    |\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|\\.\\|\\\
    .\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\\
    .\\|\\.\\|\\.\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|\\.\\|\\.\\|\\.\\|\\.\\|\\\
    .\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\\
    .\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\.\\|\\\
    .\\|\\.\\|\\.\\|\\.", "    $music_array = explode(\" \", $music_string);\n   \
    \ $music_array = array_filter(array($music_array[0]));\n    $music_array = array_map(function\
    \ ($value) {\n        return strlen($value);\n    }, $music_array);\n    return\
    \ $music_array;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=0 |>\nHere's my version\
    \ of the code above that doesn't use regex:\n<code>\n$notes = array(\n    'C3\
    \ D3 E3 F3 G3 A3 B3 C4',\n    'C4 D4 E4 F4 G4 A4 B4',\n    'C5 D5 E5 F5 G5 A5\
    \ B5',\n    'C6 D6 E6 F6 G6 A6 B6',\n    'C7 D7 E7 F7 G7 A7 B7',\n    'C8 D8 E8\
    \ F8 G8 A8 B8',\n    'C9 D9 E9 F9 G9 A9 B9',\n    'C10 D10 E10 F10 G10 A10 B10',\n\
    \    'C11 D11 E11 F11 G11 A11 B11',\n    'C12 D12 E12 F12 G12 A12 B12',\n    'C13\
    \ D13 E13 F13 G13 A13 B13',\n    'C14 D14 E14 F14 G14 A14 B14',\n    'C15 D15\
    \ E15 F15 G15 A15 B15',\n    'C16 D16 E16 F16 G16 A16 B16',\n    'C17 D17 E17\
    \ F17 G17 A17 B17',\n    'C18 D18 E18 F18 G18 B18 C18',\n    'C19 D19 E19 F19\
    \ G19 B19 C19',\n    'C20 D20 E20 F20 G20 A20 B20',\n    'C21 D21 E21 F21 G21\
    \ A21 B21',\n    'C22 D22 E22 F22 G22 B22 C22',\n    'C23 D23 E23 F23 G23 A23\
    \ B23',\n    'C24 D24 E24 F24 G24 B24 C24',\n    'C25 D25 E25 F25 G25 A25 B25',\n\
    \    'C26 D26 E26 F26 G26 A26 B26',\n    'C27 D27 E27 F27 G27", "    $music_notes\
    \ = array();\n\n    $note_position = 0;\n    $beat_position = 0;\n\n    $current_note\
    \ = array();\n\n    $previous_is_note = false;\n    $previous_is_beat_mark = false;\n\
    \    $previous_is_beat_mark2 = false;\n\n    for ($i = 0; $i < strlen($music_string);\
    \ $i++) {\n        $c = substr($music_string, $i, 1);\n\n        // A note starts\n\
    \        if (!$previous_is_note) {\n            if ($c == 'o') {\n           \
    \     $current_note = array('lasts' => 4, 'rest' => false);\n            }\n \
    \           // A rest starts\n            else if ($c == '.') {\n            \
    \    $current_note = array('lasts' => 1, 'rest' => true);\n            }\n   \
    \         // A beat mark (ie. | or o) starts\n            else if ($c == '|')\
    \ {\n                $previous_is_beat_mark = true;\n            }\n        }\n\
    \        // The note ended\n        else {\n            $note_position++;\n\n\
    \            // A rest ended\n            if ($current_note['rest']) {\n     \
    \           $note_position--;\n                $current_note = array('lasts' =>\
    \ 1, 'rest' => false);\n            }\n\n            // A beat mark ended\n  \
    \          else if ($previous_is_beat_mark) {\n                $beat_position++;\n\
    \n                // A beat mark ended\n                else if ($current_note['lasts']\
    \ == 1) {\n                    $beat_position--;\n                    $current_note\
    \ = array('lasts' => 1, 'rest' => false);\n                }\n\n             \
    \   // A beat mark2 ended\n                else if ($current_note['lasts'] ==\
    \ 2) {\n                    $beat_position--;\n                    $current_note\
    \ = array('lasts' => 2, 'rest' => false);\n                }\n\n             \
    \   // A beat mark3 ended\n                else if ($current_note['lasts'] ==\
    \ 3) {\n                    $beat_position--;\n                    $current_note\
    \ = array('lasts' => 3, 'rest' => false);\n                }\n            }\n\n\
    \            // A note ended\n            else {\n                $music_notes[$note_position]\
    \ = $beat_position;\n                $beat_position = 0;\n                $note_position++;\n\
    \            }\n        }\n\n        $previous_is_note = $previous_is_beat_mark\
    \ = false;\n        $previous_is_beat_mark2 = false;\n    }\n\n    return $music_notes;\n\
    }\n</code>\n<|/ a tags=algorithm,php,math |>\n<| c |>\nThat doesn't work for me.\
    \ Try running it on this string: \"o o| .| o| o| .| .| .| .| o o\"\n<|/ c |>\n\
    <| c |>\nThank you for you input. ", "    $music_array = explode(\"|\", $music_string);\n\
    \    $result = [];\n    foreach($music_array as $key => $note) {\n        $result[]\
    \ = count(explode(\" \", $note)) - 1;\n    }\n    return $result;\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| c |>\nThank you so much for your answer! I have updated\
    \ my question with some new information. The number of beats are always equal\
    \ to one less than the length of the string in notes, i.e. if there are 3 notes,\
    \ there is always 4 beats.\n<|/ c |>\n<| c |>\nThat is true, thank you for pointing\
    \ that out. However, I am not sure this solves my problem. Let me explain better.\
    \ So, if the input string was `\"o o| .| o| o| .| .| .| .| o o\"` then the output\
    \ should be `[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]` i.e. it is the same as the one\
    \ you posted (except for the spaces added where there were none). And if the input\
    \ string was `\"o o|.|.|.|.o|.|.|.o\"`, then the output should be `[4, 1, 1, 1,\
    \ 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1]` i.e. it is two additional spaces added at\
    \ the end of each note (one beat for the first note and one beat for the second).\
    \ I have no idea how to accomplish this using the code you posted.\n<|/ c |>\n\
    <| c |>\n: I updated my answer. Does it work for you? If not, please explain how\
    \ it does not.\n<|/ c |>\n<| c |>\nSorry, I should've been more clear. Your code\
    \ works in some cases, but in others I get the following error `Fatal error: Cannot\
    \ use object of type SplDoublyLinkedList as array` on line `$music_array[$key]\
    \ = count(explode(\" \", $note));`. Also, another error occurs if I add a new\
    \ note between 2 existing notes. Here is the test input `o o|.|.|.|.o|.|.|.o`\
    \ and the test output `[4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1]` as you can\
    \ see, there is one additional space added between the second and third note.\
    \ Any ideas how to fix this?\n<|/ c |>\n<| c |>\n: Yes, I think you mean that.\
    \ If I add two notes between, it adds one space. `o o|.|.|.|.o|.|.|.o|.| .| .|\
    \ .| .| o`. Do you want that as well? I updated my answer again.", "  ksort($music_string);\n\
    \  $music_string = implode('', $music_string);\n  $music_array = array();\n  $temp_index\
    \ = 0;\n  while (($next_index = strpos($music_string, '|', $temp_index)) !== FALSE)\
    \ {\n    $temp_index = $next_index + 1;\n    $music_array[] = (strpos($music_string,\
    \ 'o', $temp_index) - $temp_index) / 4;\n  }\n  return $music_array;\n}\n\n$input\
    \ = \"o o| .| o| o| .| .| .| .| o o\";\n$music_array = parse_music($input);\n\
    </code>\n<|/ a tags=algorithm,php |>\n<| c |>\nThis does not work as expected\
    \ with input = \"o o| .| o| o| .| .| .| .| o o\". Expected: array(4, 2, 1, 2,\
    \ 2, 1, 1, 1, 1, 4, 4) Actual: array(4, 1, 1, 1, 1, 1, 1, 1, 2, 4)\n<|/ c |>\n\
    <| a dscore=0 |>\nWhat you need is something like the Breve Piano Software's algorithm\
    \ for finding the piano key for a note.  It's not trivial, and you'll probably\
    \ find it much easier to reverse engineer an existing piano key algorithm rather\
    \ than try to code it yourself.\n<|/ a tags=algorithm,php |>\n<| c |>\nI read\
    \ that Breve Piano uses algorithms for music recognition. I also read that some\
    \ of those algorithms are based on frequency analysis but I didn't understand\
    \ how they work. I don't need someone to implement a music recognition algorithm\
    \ for me. I need the algorithm.\n<|/ c |>\n<| a dscore=0 |>\nThe question is:\
    \ How do you find how many beats each musical note lasts.\nA musical note is composed\
    \ of two parts: An octave and a note.\nAn octave is an integer number from 1 to\
    \ 8. An octave with 7 notes means \"octave N\"\nA note is an integer number from\
    \ 0 to 12. \nThe musical note O has octave 1, note 12 (fifteenth). O has octave\
    \ 1, note 10 (tenth), O has octave 1, note 9 (ninth), O has octave 1, note 8 (eighth).\n\
    The number of octaves and notes differ by octave. An octave may have two notes:\
    \ one that lasts three beats and one that lasts two beats.\nA note may have two\
    \ octaves: one that lasts one beat and ", "    // Your code goes here\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't return anything. Are you sure this is\
    \ correct?\n<|/ c |>\n<| c |>\nOf course it does, it returns an array of beat\
    \ numbers. I just forgot to add `return` before `return` statement in `get_beats()`\
    \ method. This method returns an array representing musical notes in a special\
    \ ASCII format, so in `get_beats()` you have to parse that string and return array\
    \ of integers corresponding to how many beats does each not last.\n<|/ c |>\n\
    <| c |>\nI don't want to return anything. I want to return the beat numbers. So\
    \ this should return $beat_numbers. When I run it in a test file it returns nothing.\n\
    <|/ c |>\n<| c |>\nIt returns array because you use `return $beat_numbers;` statement\
    \ after `return $array;` statement. It means that you have to use `print_r()`\
    \ function to see this array values in this case. Try to use `print_r($beat_numbers)`\
    \ instead of `return $beat_numbers;`\n<|/ c |>\n<| c |>\nThanks for the explanation.\
    \ I see it now.\n<|/ c |>\n<| a tags=php |>\nYou have to replace return $array;\
    \ by print_r($array); so you can see the results. \nIn addition, if you want to\
    \ use the array values outside the function, you have to declare it global (just\
    \ before your function declaration). \n<code>\nglobal $array;", "  // YOUR CODE\
    \ HERE\n\n}\n", "  $notes = preg_split('/(\\|+)/', $music_string, -1, PREG_SPLIT_NO_EMPTY);\n\
    \  $notes_array = array();\n  foreach ($notes as $note) {\n    $note = trim($note);\n\
    \    if ($note === 'o' || $note === 'o|') {\n      $notes_array[] = floor($notes.length\
    \ / 2);\n    } else if ($note === '.|') {\n      $notes_array[] = floor($notes.length);\n\
    \    } else {\n      $notes_array[] = floor($notes.length / 4);\n    }\n  }\n\
    \  return $notes_array;\n}\n", "  $music_array = array();\n  $music_pieces = explode(\"\
    |\", $music_string);\n\n  foreach ($music_pieces as $music_piece) {\n    $music_piece\
    \ = trim($music_piece);\n    $music_piece = explode(\" \", $music_piece);\n\n\
    \    $music_array[] = count($music_piece);\n  }\n\n  return $music_array;\n}\n",
  "    $music_string = trim($music_string);\n    $music_array = array();\n\n    $music_length\
    \ = strlen($music_string);\n    for ($note = 0; $note < $music_length; $note++)\
    \ {\n        $music_array[$note] = 0;\n\n        $music_letter = substr($music_string,\
    \ $note, 1);\n\n        if ($music_letter == \"o\") {\n            $music_array[$note]\
    \ = 4;\n        } elseif ($music_letter == \"|\") {\n            $music_array[$note]\
    \ = 2;\n        } elseif ($music_letter == \".\") {\n            $music_array[$note]\
    \ = 1;\n        } else {\n            continue;\n        }\n    }\n\n    return\
    \ $music_array;\n}\n", "    return array_reduce(str_split($music_string), \"count_beats\"\
    , array());\n}\n", "  $notes = str_split($music_string, 2);\n  $notes_array =\
    \ array();\n  $count = 1;\n  $current_note = \"\";\n  foreach ($notes as $note_and_duration)\
    \ {\n    switch ($note_and_duration) {\n      case 'o':\n        $notes_array[]\
    \ = $count;\n        $count += 4;\n        break;\n      case 'o|':\n        $notes_array[]\
    \ = $count;\n        $count += 2;\n        break;\n      case '.|':\n        $notes_array[]\
    \ = $count;\n        $count += 1;\n        break;\n      default:\n        $current_note\
    \ = $note_and_duration;\n        $count = 1;\n    }\n  }\n  return $notes_array;\n\
    }\n", "    $music_array = [];\n    $last_note = '';\n    $i = 0;\n    while (isset($music_string[$i]))\
    \ {\n        $note = $music_string[$i];\n        $last_note = $note;\n       \
    \ $music_array[$note] = $music_array[$note] + 1;\n        $i++;\n    }\n    return\
    \ $music_array;\n}\n", "  $notes = explode(' ', $music_string);\n\n  $beats =\
    \ 0;\n  $last_note = null;\n  foreach ($notes as $note) {\n    if ($note === 'o')\
    \ {\n      $beats += 4;\n    } else if ($note === 'o|') {\n      $beats += 2;\n\
    \    } else if ($note === '.|') {\n      $beats += 1;\n    } else {\n      throw\
    \ new \\Exception(\"Invalid music string: $music_string\");\n    }\n    $last_note\
    \ = $note;\n  }\n\n  return array($beats, $last_note);\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThank you! This does exactly what I need.\n<|/ c |>\n<| c |>\nThanks\
    \ for your code. Do you know how can I use it in Drupal module page?\n<|/ c |>\n\
    <| c |>\nIt's really hard to say without seeing your code. Usually I wrap this\
    \ code into function, import it to Drupal module and call it from there. But it\
    \ would be better to ask a separate question about your problem.\n<|/ c |>\n<|\
    \ a |>\nI got it! Thank you all for help!\n<code>\n<?php\n", "    $notes = array();\n\
    \    $parts = explode(' ', $music_string);\n    foreach ($parts as $part) {\n\
    \        $part = trim($part);\n        switch ($part) {\n            case \"o\"\
    :\n                $notes[] = 1;\n                break;\n            case \"\
    o|\":\n                $notes[] = 4;\n                break;\n            case\
    \ \".|\":\n                $notes[] = 1;\n                break;\n           \
    \ default:\n                $notes[] = 0;\n                break;\n        }\n\
    \    }\n    return $notes;\n}\n", "    // Your code here\n}\n", "    $music_array\
    \ = explode(\"|\", $music_string);\n    $music_array = array_map(function ($value)\
    \ {\n        return explode(\" \", $value);\n    }, $music_array);\n    $music_array\
    \ = array_map(function ($value) {\n        $value = explode(\"o\", $value);\n\
    \        return count($value);\n    }, $music_array);\n\n    return array_sum($music_array);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThe question asks for it to be done without any\
    \ external dependencies.\n<|/ c |>\n<| c |>\n, you are right about external dependencies\
    \ - but this approach is quite a lot more readable, than my one-liner. Also OP\
    \ didn't say that he is looking for \"pure PHP\" solution.\n<|/ c |>\n<| a tags=string,php,arrays\
    \ |>\nYou could do something like this:\n<code>\n$music = \"o o| .| o| o| .| .|\
    \ .| .| o o\";\n$music_array = explode(\"|\", $music);\n$music_array = array_map(function\
    \ ($value) {\n    return explode(\" \", $value);\n}, $music_array);\n\n$music_array\
    \ = array_map(function ($value) {\n    $value = explode(\"o\", $value);\n    return\
    \ count($value);\n}, $music_array);\n\n$total = 0;\nforeach($music_array as $music)\
    \ {\n    $total += $music;\n}\n\n$music_total = array_sum($music_array);\n\n$expected\
    \ = $music_total - $total;\n\necho \"Expected: $expected\";\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThe question asks for it to be done without any external dependencies.\n\
    <|/ c |>\n<| c |>\nYou are right about external dependencies - but this approach\
    \ is quite a lot more readable, than my one-liner. Also OP didn't say that he\
    \ is looking for \"pure PHP\" solution.\n<|/ c |>\n<| c |>\nI was looking for\
    \ a more elegant solution and yours seems the best. Thanks\n<|/ c |>\n<| a dscore=1\
    \ |>\nTry this (PHP 5.3+):\n<code>\n<?php\n$music = \"o o| .| o| o| .| .| .| .|\
    \ o o\";\n$music_array = explode(\"|\", $music);\n$music_array = array_map(function($value)\
    \ {\n    return explode(\" \", $value);\n}, $music_", "  $music_string = trim($music_string);\n\
    \  if(strlen($music_string) == 0) {\n    return 0;\n  }\n  $music_string  = str_replace(array('o',\
    \ '|', '.'), array('', '', ''), $music_string);\n  return explode(' ', $music_string);\n\
    }\n", "  return str_split(\"o o| .| o| o| .| .| .| .| .| o o\")\n    ->map(function\
    \ ($note) {\n      return str_split(\"o|\")\n        ->map(function ($note) {\n\
    \          return str_split(\".|\")\n            ->map(function ($note) {\n  \
    \            return str_split((string)$note)\n                ->map(function ($note)\
    \ {\n                  return str_split((string)$note)->count()\n            \
    \    })->count();\n            })->count();\n        })->count();\n    })->count();\n\
    }\n\nvar_dump(parse_music(\"o o| .| o| o| .| .| .| .| .| o o\"));\n</code>\n<|/\
    \ a tags=php,algorithm |>\n<| c |>\nThis is a great solution, thank you! For my\
    \ use case (which involves a single musical note repeated a hundred times) I ended\
    \ up implementing my own solution, using `explode`, `substr`, `str_split` and\
    \ `strlen`.\n<|/ c |>\n<| c |>\nNice, but it's O(n^2) in runtime (assuming n notes\
    \ repeated n times). It's better to build an array with frequency of each note.\n\
    <|/ c |>\n<| c |>\nI agree, thanks. I've added a second solution (with `explode`/`str_split`),\
    \ but I'll leave it to the OP to decide which one to use.\n<|/ c |>\n<| c |>\n\
    The first solution is O(n^2), but it's better to build an array with frequency\
    \ of each note.\n<|/ c |>\n<| c |>\nThe first solution is actually O(n), because\
    \ each note is repeated exactly n times. :)\n<|/ c |>\n<| a |>\nThis can be done\
    \ by applying some mathematical rules:\nLet's start with a simple example:\n<code>\n\
    $notes = array(\"B\u266D\", \"C\u266D\", \"D\u266D\", \"G\u266D\", \"A\u266D\"\
    );\n</code>\nIf we apply a simple frequency calculation\n<code>\n$freq = array(\n\
    \  \"B\u266D\" => 0,\n  \"C\u266D\" => 0,\n  \"D\u266D\" => 0,\n  \"G\u266D\"\
    \ => 0,\n  \"A\u266D\" => 0,\n);\nforeach($notes as $note) {\n  $freq[$note] +=\
    \ 1;\n}\n</code>\nWe get this result:\n<code>\narray(4) {\n  [\"B\u266D\"]=>\n\
    \  int(1)\n  [\"C\u266D\"]", "    $music_array = explode('|', $music_string);\n\
    \    $music_array = $music_array[0];\n    $music_array = preg_split('/\\s+/',\
    \ $music_array);\n    $music_array = array_map('trim', $music_array);\n    $music_array\
    \ = array_map('intval', $music_array);\n    return $music_array;\n}\n", "    $result\
    \ = array();\n    $current_note = \"\";\n    $last_note = \"\";\n    $index =\
    \ 0;\n    for ($i = 0; $i < strlen($music_string); $i++) {\n        $char = $music_string[$i];\n\
    \        if ($char === \"|\") {\n            if ($last_note === \"\") {\n    \
    \            $last_note = \"o\";\n            }\n            $result[strpos($music_string,\
    \ $last_note, strlen($music_string))] += 1;\n            $last_note = \"\";\n\
    \        } else {\n            $last_note .= $char;\n        }\n    }\n    return\
    \ $result;\n}\n", "    $music_array = explode(\" \", $music_string);\n    $music_array_length\
    \ = count($music_array);\n\n    $music_array_count_full = array();\n    $music_array_count_half\
    \ = array();\n    $music_array_count_quarter = array();\n    $music_array_count_whole\
    \ = array();\n    $music_array_count_last_beat_of_each = array();\n\n    for ($i\
    \ = 0; $i < $music_array_length; $i++) {\n        $music_array_count_full[] =\
    \ 0;\n        $music_array_count_half[] = 0;\n        $music_array_count_quarter[]\
    \ = 0;\n        $music_array_count_whole[] = 0;\n        $music_array_count_last_beat_of_each[]\
    \ = 0;\n    }\n\n    for ($i = 0; $i < $music_array_length; $i++) {\n        $music_string\
    \ = $music_array[$i];\n        $music_string_reversed = array_reverse(str_split($music_string));\n\
    \n        // If music note is whole note\n        if ($music_string == \"o\")\
    \ {\n            for ($i = 0; $i < 4; $i++) {\n                $music_array_count_whole[$i]\
    \ += 1;\n            }\n        }\n        // If music note is half note\n   \
    \     elseif ($music_string == \"o|\") {\n            for ($i = 0; $i < 2; $i++)\
    \ {\n                $music_array_count_half[$i] += 1;\n            }\n      \
    \  }\n        // If music note is quarter note\n        elseif ($music_string\
    \ == \".|\") {\n            for ($i = 0; $i < 1; $i++) {\n                $music_array_count_quarter[$i]\
    \ += 1;\n            }\n        }\n        // If music note is not quarter note\n\
    \        else {\n            for ($i = 0; $i < 4; $i++) {\n                $music_array_count_full[$i]\
    \ += 1;\n            }\n        }\n\n        for ($j = 0; $j < count($music_string_reversed);\
    \ $j++) {\n            $music_array_count_last_beat_of_each[$j] += 1;\n      \
    \  }\n    }\n\n    return array($music_array_count_full, $music_array_count_half,\
    \ $music_array_count_quarter, $music_array_count_whole, $music_array_count_last_beat_of_each);\n\
    }\n", "    $music_string = trim($music_string);\n    if (!empty($music_string))\
    \ {\n        $notes = explode(\" \", $music_string);\n        foreach ($notes\
    \ as &$note) {\n            if (strlen($note) > 1) {\n                $note =\
    \ $note[0] . \"|\" . $note[1];\n            } else {\n                $note =\
    \ $note[0];\n            }\n        }\n        $music_array = array();\n     \
    \   $last_note = null;\n        for ($i = 0; $i < count($notes); $i++) {\n   \
    \         if ($notes[$i] != \".\" && $notes[$i] != \"o\" && $notes[$i] != \"|\"\
    \ && $notes[$i] != \"o|\") {\n                $music_array[] = $i;\n         \
    \       if ($notes[$i] != \"o\") {\n                    $music_array[] = intval($music_string[$music_string[$i]]\
    \ . $music_string[$music_string[$i + 1]]);\n                }\n            }\n\
    \        }\n        return $music_array;\n    } else {\n        return array();\n\
    \    }\n}\n", "  $notes = array();\n  $music_array = explode(\"\\n\", $music_string);\n\
    \  foreach ($music_array as $music_line) {\n    if (preg_match(\"/^(\\w+)\\.(\\\
    |+)$/\", $music_line, $matches)) {\n      list($note, $rest) = $matches;\n   \
    \   $notes[] = count(explode($note, $rest));\n    }\n  }\n  return $notes;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your reply, but this does not\
    \ seem to work in some cases. I made some changes to it and now it seems to work.\
    \ However, I cannot understand why it needs to be in this order. Could you elaborate\
    \ a bit on this?\n<|/ c |>\n<| c |>\nI updated my answer. Let me know if you have\
    \ any questions about the regex\n<|/ c |>\n<| a tags=regex,php |>\nI think that\
    \ this could be a good starting point : \n<code>\n$music_string = \"o\no|\n.|\n\
    .|\n.|\n.|\n.|\n.|\no\no|\n.|\n.|\n.|\n.|\n.|\n.|\no\";\n$notes = preg_replace('/([a-z])\\\
    .([a-z])/', \"$1 $2 \", $music_string);\n$notes = preg_replace('/([a-z])\\|([a-z])/',\
    \ \"$1 $2 \", $notes);\n$notes = preg_replace('/\\|([a-z])/', \" $1 \", $notes);\n\
    $notes = explode(\" \", $notes);\n</code>\nAnd then you would have your array\
    \ of notes.\n<|/ a dscore=0 |>\n<| a |>\n<code>\n<?php", "    $music = preg_split('/\\\
    s+/', $music_string);\n\n    $music_in_beat = array();\n    foreach ($music as\
    \ $key => $value) {\n        switch ($value) {\n            case 'o': $music_in_beat[]\
    \ = $value; break;\n            case '|': $music_in_beat[] = $value; break;\n\
    \            case '.': $music_in_beat[] = $value; break;\n        }\n    }\n\n\
    \    $music_beat = array();\n    $music_beat_counter = 0;\n    $music_beat_counter_in_array\
    \ = count($music_in_beat);\n    $music_beat_counter_last_char = $music_in_beat[$music_beat_counter_in_array\
    \ - 1];\n    $music_beat_counter_last_char_octave = 0;\n    for ($key = 0; $key\
    \ < $music_beat_counter_in_array; $key++) {\n        $music_beat_counter++;\n\
    \        $music_beat_counter_in_array = count($music_in_beat);\n        if ($music_in_beat[$key]\
    \ == $music_beat_counter_last_char) {\n            $music_beat_counter_in_array--;\n\
    \            $music_beat_counter_last_char_octave++;\n            $music_beat_counter_last_char_octave\
    \ %= 8;\n        }\n        if ($music_in_beat[$key] == $music_beat_counter_last_char)\
    \ {\n            $music_beat_counter_in_array--;\n        }\n\n        $music_beat[]\
    \ = ($music_beat_counter_in_array + 1) * 12 * $music_beat_counter_last_char_octave;\n\
    \    }\n\n    return $music_beat;\n}\n", "    $music_array = array();\n\n    foreach(str_split($music_string)\
    \ as $note) {\n        if($note == \"o\") {\n            $music_array[] = 4;\n\
    \        } elseif($note == \".\") {\n            $music_array[] = 1;\n       \
    \ } elseif($note == \"|\") {\n            $music_array[] = 2;\n        } else\
    \ {\n            throw new Exception(\"Unexpected note detected: \".$note);\n\
    \        }\n    }\n\n    return $music_array;\n}", "    $music_array = preg_split('/[|.o]+/',\
    \ $music_string);\n    for($i = 0; $i < count($music_array); $i++)\n        $music_array[$i]\
    \ = (int)$music_array[$i];\n    return $music_array;\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nI understand this answer but I don't understand it clearly enough to implement\
    \ it in a program I'm working on. Could you possibly explain how I would implement\
    \ this?\n<|/ c |>\n<| c |>\nSure. I will edit my answer and add some explanation.\n\
    <|/ c |>\n<| c |>\nOkay, thanks for the help! But what exactly would the function\
    \ be called? Do I call parse_music() anywhere in place of the music_string?\n\
    <|/ c |>\n<| c |>\nYes you call this function instead of `preg_split()`, for example\
    \ `$music_array = parse_music(\"o o| .| o| o| .| .| .| .| o o\");`\n<|/ c |>\n\
    <| a tags=arrays,php |>\nJust use preg_match_all() with your regex:\n<code>\n\
    $string = 'o o| .| o| o| .| .| .| .| .| o o';\npreg_match_all('/[|.o]+/', $string,\
    \ $matches);\nprint_r($matches[0]);\n</code>\nOutput:\n<code>\nArray\n(\n    [0]\
    \ => 4 2 1 2 1 1 1 4 4\n    [1] => 2 1 2 1 1 1 4 4\n    [2] => 2 1 2 1 1 1 4 4\n\
    \    [3] => 1 2 1 1 1 4 4\n    [4] => 1 2 1 1 1 4 4\n    [5] => 1 2 1 1 1 4 4\n\
    \    [6] => 1 1 1 4 4\n    [7] => 1 1 1 4 4\n    [8] => 1 1 1 4 4\n    [9] =>\
    \ 4 4\n)\n</code>\nDemo\n<|/ a dscore=2 |>\n<| c |>\nHow would I use this output\
    \ in the program?\n<|/ c |>\n<| c |>\n- Not quite sure what you mean by \"this\
    \ output in the program\", but if you mean \"how do I store this output as a variable\"\
    , then use the code I posted.  If you mean \"how do I use it in my program (instead\
    \ of the code I posted)\", then use the same code I posted.\n<|/ c |>\n<| c |>\n\
    Sorry if I was unclear. I know how to store the output ", "    $notes = preg_split('/\\\
    s+/', $music_string);\n    $music_length = count($notes);\n    $last_note = array_pop($notes);\n\
    \    $rest = array();\n    for($i = 0; $i < $music_length; $i++) {\n        $note\
    \ = $notes[$i];\n        if($note == $last_note) {\n            $rest[] = $music_length\
    \ - $i;\n            $last_note = array_pop($notes);\n        } else {\n     \
    \       $rest[] = 0;\n            $rest[] = 0;\n        }\n    }\n    return $rest;\n\
    }\n", "  $music_string = trim($music_string);\n  if ($music_string === '') return\
    \ array();\n\n  $notes = array();\n  foreach (str_split($music_string) as $note_char)\
    \ {\n    switch ($note_char) {\n      case 'o':\n      case 'O':\n        $notes[]\
    \ = 12;\n        break;\n      case '.':\n      case ',':\n      case ':':\n \
    \     case ':':\n      case '|':\n        $notes[] = 1;\n        break;\n    \
    \  default:\n        $notes[] = $note_char;\n        break;\n    }\n  }\n  return\
    \ $notes;\n}", "    $music_string = preg_replace(\"/([o|o|\\.\\|o])(?!$)/\", \"\
    \\\\1\", $music_string);\n    return str_split($music_string);\n}\n", "    $music_array\
    \ = explode(' ', $music_string);\n    $music_array[0] = trim($music_array[0]);\n\
    \    $music_array[1] = trim($music_array[1]);\n    $music_array[2] = trim($music_array[2]);\n\
    \n    // We only have three instruments, so we know how many notes\n    // to\
    \ expect.\n    $num_notes = count($music_array);\n\n    $music_notes = array();\n\
    \n    $length = ceil(log($num_notes, 2));\n    for ($i = 0; $i < $length; $i++)\
    \ {\n        $music_notes[$i] = count($music_array) / $length;\n    }\n\n    return\
    \ $music_notes;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nVery nice function! Thank\
    \ you so much for helping me out!\n<|/ c |>\n<| c |>\nGlad I could help. I updated\
    \ my answer with a little more info to help you learn about mathematics and string\
    \ manipulation.\n<|/ c |>\n<| a tags=php,algorithm,logic dscore=1 |>\nHere's my\
    \ solution:\n<code>\n<?php\n$string = \"o o| .| o| o| .| .| .| .| .| o o\";\n\
    $array = preg_split('/\\s+/', $string);", "  return array_map(function($note)\
    \ {\n    switch ($note) {\n      case \"o\":\n        return 4;\n        break;\n\
    \      case \"o|\":\n        return 2;\n        break;\n      case \".|\":\n \
    \       return 1;\n        break;\n      default:\n        throw new Exception(\"\
    Invalid note '$note'\");\n        break;\n    }\n  }, explode(\"\\n\", $music_string));\n\
    }\n", "    $music_array = explode(\"\\n\", $music_string);\n\n    $beats = array();\n\
    \    foreach ($music_array as $line) {\n        $line = str_replace(\"\\n\", \"\
    \ \", $line);\n        $beats[] = count(explode(\" \", $line, 2));\n    }\n\n\
    \    return $beats;\n}\n", "    $music_array = explode('o', $music_string);\n\
    \    $beats = array();\n    for ($i = 0, $n = count($music_array); $i < $n; $i++)\
    \ {\n        $beats[] = $music_array[$i] === 'o' ? 4 : $music_array[$i] === 'o|'\
    \ ? 2 : 1;\n    }\n    return $beats;\n}\n", "  // Initialize variables\n  $notes\
    \ = array();\n  $beats = array();\n  $note_count = 0;\n  $beat_count = 0;\n  $note_beat_count\
    \ = 1;\n\n  // Parse string into array of single notes\n  foreach (str_split($music_string)\
    \ as $char) {\n    switch ($char) {\n      // Handle the full note\n      case\
    \ 'o':\n        $notes[$note_count] = 1;\n        break;\n\n      // Handle the\
    \ half note\n      case 'o|':\n        $notes[$note_count] = 4;\n        break;\n\
    \n      // Handle the quarter note\n      case '.|':\n        $notes[$note_count]\
    \ = 3;\n        $note_count++;\n        break;\n\n      // Handle anything else\n\
    \      default:\n        echo \"Unrecognized character in input string: \" . $char\
    \ . \"\\n\";\n        return false;\n    }\n  }\n\n  // Iterate over array and\
    \ count beats\n  for ($i = 0; $i < count($notes); $i++) {\n    switch ($notes[$i])\
    \ {\n      case 1:\n        $beats[$beat_count] = 1;\n        break;\n\n     \
    \ case 4:\n        $beats[$beat_count] = 1;\n        $beat_count++;\n        break;\n\
    \n      case 3:\n        $beats[$beat_count] = 1;\n        $beat_count++;\n  \
    \      $beats[$beat_count] = 1;\n        $beat_count++;\n        $beats[$beat_count]\
    \ = 1;\n        $beat_count++;\n        $beat_count++;\n        $beat_count++;\n\
    \        $beat_count++;\n        break;\n    }\n  }\n\n  // Return array\n  return\
    \ $beats;\n}\n</code>\n<|/ a tags=php,algorithm,math dscore=1 |>\n<| c |>\nI actually\
    \ thought of this, but I really didn't want to use a loop to iterate through each\
    \ character. I'm looking for a more elegant solution.\n<|/ c |>\n<| c |>\n: I've\
    \ added another answer.\n<|/ c |>\n<| a |>\nHere's my solution.\n<code>\n<?php\n",
  "    // Your code goes here\n}", "  $music = [0, 0, 0, 0, 0];\n  $beat = 0;\n  $last_note\
    \ = null;\n  for($i = 0, $len = strlen($music_string); $i < $len; ++$i) {\n  \
    \  $char = substr($music_string, $i, 1);\n    if($char == '|') {\n      ++$music[$beat];\n\
    \      $beat = 0;\n      continue;\n    }\n    if($char == 'o') {\n      if($last_note)\
    \ {\n        ++$music[$beat];\n      }\n      $last_note = $char;\n      $beat++;\n\
    \    }\n  }\n  return $music;\n}\n</code>\n<|/ a dscore=1 tags=php,algorithm |>\n\
    <| c |>\nYep, this is what I was looking for. Thanks!\n<|/ c |>\n<| c |>\n`var_dump(parse_music('o\
    \ o o| o| o| o| .| .| .| .| .| o o'));` returns `array(5, 8, 5, 5, 5, 5, 5, 5,\
    \ 5)`, so the function does not work for this case.\n<|/ c |>\n<| c |>\nI didn't\
    \ understand your last comment. Of course it works, because all notes except the\
    \ last note are repeated the same number of times after the last. So, there are\
    \ exactly five beats of one note, 8 beats of two notes and five beats of three\
    \ notes, etc. So the function returns the number of beats per note, which is correct.\n\
    <|/ c |>\n<| c |>\nYep, I know that. The function does not work for this example:\
    \ `var_dump(parse_music('o o o| o| o| o| .| .| .| .| .| o o'));`. As you stated,\
    \ the function should return `array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)`, but it\
    \ returns `array(5, 8, 5, 5, 5, 5, 5, 5, 5)`.\n<|/ c |>\n<| c |>\nOh, I got it\
    \ now. I forgot that \"lasts\" means \"a note repeated the same number of times\
    \ as the previous note\". I've fixed my code, now it should work correctly for\
    \ all cases.\n<|/ c |>\n<| a |>\nI've just been working on this myself.  I'm sure\
    \ it's quite inefficient, but it seems to work (at least for the input you've\
    \ given):\n<code>\n$input = \"o o| o| o| .| .| .| .| .| o o\";\n\n$input = 'o\
    \ o| o| o| .| .| .| .| .| o o';\n\n$input = \"o o o| o| o| o| .| .| .| .| ", " \
    \   $music_array = array();\n    // If string doesn't contain notes or separator\
    \ - return empty array\n    if (!preg_match('~^([oO]|\\.)(.*)$~', $music_string))\
    \ {\n        return $music_array;\n    }\n\n    $music_array = explode('|', $music_string);\n\
    \    $music_array = preg_split('~(?<!^)(?!$)~', $music_array);\n\n    foreach\
    \ ($music_array as $key => $value) {\n        switch ($value) {\n            case\
    \ \"o\":\n                $music_array[$key] = $key;\n                $music_array[$key\
    \ + 4] = $key;\n                break;\n            case \"o|\":\n           \
    \     $music_array[$key] = $key;\n                $music_array[$key + 2] = $key;\n\
    \                break;\n            case \".|\":\n                $music_array[$key]\
    \ = $key;\n                break;\n        }\n    }\n\n    return $music_array;\n\
    }\n", "  $output = array();\n\n  $notes = str_split($music_string);\n\n  foreach\
    \ ($notes as $note) {\n    if (strlen($note) > 1) {\n      if ($note[0] == 'o')\
    \ {\n        $output[] = 4;\n      } else if ($note[0] == 'o|') {\n        $output[]\
    \ = 2;\n      } else if ($note[0] == '.|') {\n        $output[] = 1;\n      }\n\
    \    }\n  }\n\n  return $output;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nYou\
    \ shouldn't post link-only answers. Please update your post to give a complete\
    \ solution.\n<|/ c |>\n<| a tags=music-notation,php |>\nI was able to find a way\
    \ to do this by using regular expressions. \nI used the pattern \"(\\.|o)\\|\"\
    \ and it captured everything I needed.\n<code>\npreg_match_all('/(\\.|o)\\|/',\
    \ $input, $matches);\n\nprint_r($matches);\n", "    $notes = str_split($music_string);\n\
    \n    $notes_count = count($notes);\n    $chords = [];\n    $current_chord = 0;\n\
    \    \n    for ($note_index = 0; $note_index < $notes_count; $note_index++) {\n\
    \        // current note type\n        $note = strtolower($notes[$note_index]);\n\
    \        \n        if ($note == \"o\") {\n            $chords[$current_chord]++;\n\
    \        } else {\n            // chord\n            if ($current_chord > 0) {\n\
    \                $chords[$current_chord] += $chords[$current_chord-1];\n     \
    \       }\n            $chords[$current_chord] = 1;\n            $current_chord++;\n\
    \        }\n    }\n\n    return $chords;\n}\n", "    $music_array = explode(\"\
    |\", $music_string);\n    $music_array = array_pad($music_array, count($music_string),\
    \ 0);\n    $music_array = array_map(function($note) {\n        return array_search($note,\
    \ range('a', 'g'));\n    }, $music_array);\n    sort($music_array);\n    $music_array\
    \ = array_flip($music_array);\n\n    $music_array = array_map(function($note,\
    \ $index) {\n        return $index / 4;\n    }, $music_array, $music_string);\n\
    \n    return $music_array;\n}\n</code>\nI tested the above solution and it seems\
    \ to work\n<code>\nvar_dump(\n    parse_music(\"o o| .| o| o| .| .| .| .| .| o\
    \ o\"),\n    parse_music(\"o o| .| o| o| .| .| .| .| o o\"),\n    parse_music(\"\
    o o| .| o| o| .| o| .| .| o o\"),\n    parse_music(\"o o| .| o| o| .| o| .| .|\
    \ o o\"),\n    parse_music(\"o o| .| o| o| .| .| .| .| o o\"),\n    parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"),\n    parse_music(\"o o| .| o| o| .| o| .| .|\
    \ o o\"),\n    parse_music(\"o o| .| o| o| .| o| .| .| o o\"),\n    parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"),\n    parse_music(\"o o| .| o| o| .| o| .| .|\
    \ o o\"),\n    parse_music(\"o o| .| o| o| .| o| .| .| o o\"),\n    parse_music(\"\
    o o| .| o| o| .| o| .| .| o o\"),\n    parse_music(\"o o| .| o| o| .| .| .| .|\
    \ o o\"),\n    parse_music(\"o o| .| o| o| .| .| .| .| o o\"),\n    parse_music(\"\
    o o| .| o| o| .| .| .| .| ", "  preg_match_all('/^(?P<note>(?:o|\\.)(\\|?(?P<beats>[0-9]+))*)$/',\
    \ $music_string, $matches);\n  foreach ($matches['note'] as $note) {\n    if ($note[1]\
    \ == 'o' || $note[1] == 'o|') {\n      $beats = $note[2] * 4;\n    } else {\n\
    \      $beats = $note[2] * 2;\n    }\n  }\n  return $beats;\n}\n", "    $music_array\
    \ = explode(\"|\", $music_string);\n    $note_array = array();\n    for($i = 0;\
    \ $i < count($music_array); $i++) {\n        $note_array[] = count($music_array)\
    \ - 1 - $i;\n    }\n    return $note_array;\n}\n", "  // Split string into musical\
    \ pieces.\n  $music_pieces = explode(\" \", $music_string);\n\n  // Now we go\
    \ through these pieces and add them to the musical array.\n  $music = array();\n\
    \  foreach ($music_pieces as $music_piece) {\n    if (empty($music_piece)) {\n\
    \      // This means that this piece is empty (just a space). This means that\
    \ it is either not present (first\n      // piece of the string was empty) or\
    \ not followed by a space.\n      // We have to skip this piece. Just ignore it.\n\
    \      continue;\n    }\n    // This means that this piece is not empty and not\
    \ followed by a space.\n    // But we have to handle it specially because we need\
    \ to subtract one from its \"length\" (i.e. it has to be a half\n    // note).\n\
    \    // We also need to handle special case when this piece is equal to one of\
    \ the special chords (i.e. \"C sharp\" is\n    // represented by special chord\
    \ \"C sharp sharp\"). These chords are represented by special chord \"X\".\n \
    \   if (empty($music['special_chord_1'])) {\n      // This means that this note\
    \ belongs to the chords that preceed this one.\n      // In this case we have\
    \ to subtract 1 from the length of this chord.\n      $music['special_chord_1']\
    \ = $music_piece;\n      continue;\n    }\n    // This means that this note belongs\
    \ to the chord \"X\" (special chord) that was previously presented. In this case\n\
    \    // we don't have to subtract 1.\n    else {\n      // This means that this\
    \ note belongs to the chord \"X\" (special chord) that was previously presented.\
    \ In this case\n      // we don't have to subtract 1.\n      if ($music_piece\
    \ == $music['special_chord_1']) {\n        continue;\n      }\n      // This means\
    \ that this note belongs to the chord \"X\" (special chord) that was previously\
    \ presented. In this case\n      // we need to subtract 1 from this note.\n  \
    \    else {\n        $music_piece = substr($music_piece, 1);\n      }\n    }\n\
    \    // Here we add this piece to the musical array.\n    $music[$music_piece]\
    \ = 1;\n  }\n  return $music;\n}\n", "    $music_array = array();\n    $music_array[0]\
    \ = strlen($music_string) / 4;\n    $music_array[1] = strlen($music_string) /\
    \ 2;\n    $music_array[2] = strlen($music_string);\n    $music_array[3] = strlen($music_string)\
    \ / 4;\n\n    $music_array[0] = $music_array[0] - 1;\n    $music_array[1] = $music_array[1]\
    \ - 1;\n    $music_array[2] = $music_array[2] - 1;\n    $music_array[3] = $music_array[3]\
    \ - 1;\n\n    for ($i = 0; $i < count($music_array); $i++) {\n        $music_array[$i]\
    \ = $music_array[$i] - 1;\n    }\n\n    return $music_array;\n}\n", "  $notes\
    \ = array();\n  $note_count = 0;\n  $note_number = 1;\n  foreach (str_split($music_string)\
    \ as $c) {\n    switch ($c) {\n      case 'o':\n      case 'O':\n      case '|':\n\
    \      case '|-':\n        $notes[$note_number] = $note_count;\n        $note_count\
    \ = 1;\n        break;\n      default:\n        $note_count += 1;\n    }\n   \
    \ $note_number += 1;\n  }\n  return $notes;\n}\n</code>\nBut now we need to solve\
    \ the problems of the last beat (note which lasts only one beat) and the middle\
    \ notes (who repeats it). To solve the middle notes we need a data structure which\
    \ will allow us to count how many middle notes do we have (I choosed an associative\
    \ array which is very convenient here).\nThe last note is simple because it has\
    \ only one beat and it is equal to the number of beat we have (because we know\
    \ that beats have always equal duration).\nThe middle note is tricky, because\
    \ each middle note has two consecutive notes (one from the first note, one from\
    \ the second one). To do that we need to iterate over the string and calculate\
    \ how many times we need to iterate over the string to get to the point where\
    \ we find our middle note. After that we just add 2 for each middle note and subtract\
    \ 2 for each first note.\n<code>\n<?php", "  $music_notes = str_split($music_string);\n\
    \  $music_notes_length = count($music_notes);\n  $beats_per_bar = 4;\n  $music_notes_bar_length\
    \ = ceil($music_notes_length / $beats_per_bar);\n  $music_notes_bar_positions\
    \ = array();\n  $music_notes_bar_positions[0] = 0;\n  $music_notes_bar_positions[1]\
    \ = 1;\n  $music_notes_bar_positions[2] = 2;\n  $music_notes_bar_positions[3]\
    \ = 3;\n  $music_notes_bar_positions[4] = 4;\n  $music_notes_bar_positions[5]\
    \ = 5;\n  $music_notes_bar_positions[6] = 6;\n  $music_notes_bar_positions[7]\
    \ = 7;\n  $music_notes_bar_positions[8] = 8;\n  $music_notes_bar_positions[9]\
    \ = 9;\n  $music_notes_bar_positions[10] = 10;\n  $music_notes_bar_positions[11]\
    \ = 11;\n  $music_notes_bar_positions[12] = 12;\n  $music_notes_bar_positions[13]\
    \ = 13;\n  $music_notes_bar_positions[14] = 14;\n  $music_notes_bar_positions[15]\
    \ = 15;\n  $music_notes_bar_positions[16] = 16;\n  $music_notes_bar_positions[17]\
    \ = 17;\n  $music_notes_bar_positions[18] = 18;\n  $music_notes_bar_positions[19]\
    \ = 19;\n  $music_notes_bar_positions[20] = 20;\n  $music_notes_bar_positions[21]\
    \ = 21;\n  $music_notes_bar_positions[22] = 22;\n  $music_notes_bar_positions[23]\
    \ = 23;\n  $music_notes_bar_positions[24] = 24;\n  $music_notes_bar_positions[25]\
    \ = 25;\n  $music_notes_bar_positions[26] = 26;\n  $music_notes_bar_positions[27]\
    \ = 27;\n  $music_notes_bar_positions[28] = 28;\n  $music_notes_bar_positions[29]\
    \ = 29;\n  $music_notes_bar_positions[30] = 30;\n  $music_notes_bar_positions[31]\
    \ = 31;\n  $music_notes_bar_positions[32] = 32;\n  $music_notes_bar_positions[33]\
    \ = 33;\n  $music_notes_bar_positions[34] = 34;\n  $music_notes_bar_positions[35]\
    \ = 35;\n  $music_notes_bar_positions[", "    $music_array = explode(\"\\n\",\
    \ $music_string);\n\n    $beats_array = array();\n    foreach ($music_array as\
    \ $line) {\n        $notes = explode(\" \", $line);\n        $beats_array[] =\
    \ count($notes);\n    }\n\n    return $beats_array;\n}\n", "    $note_array =\
    \ array();\n    $index = 0;\n    while (strpos($music_string, \"|\") !== false)\
    \ {\n        $note_array[] = substr($music_string, $index, strpos($music_string,\
    \ \"|\") - $index);\n        $index += strpos($music_string, \"|\") + 1;\n   \
    \     $music_string = substr($music_string, strpos($music_string, \"|\"), strlen($music_string));\n\
    \    }\n    $note_array[] = substr($music_string, $index, strlen($music_string));\n\
    \    return $note_array;\n}\n", "  preg_match_all('/([AB])([#b])/', $music_string,\
    \ $notes);\n  $num_notes = count($notes[0]);\n  $notes_array = [];\n  $beats_array\
    \ = [];\n  for ($i = 0; $i < $num_notes; $i++) {\n    $notes_array[$i] = $notes[0][$i]\
    \ . $notes[1][$i];\n  }\n  foreach ($notes_array as $note) {\n    $beats_array[]\
    \ = strlen($note) / 4;\n  }\n  return $beats_array;\n}\n", "    $music = explode('\
    \ ', $music_string);\n    $music_length = count($music);\n    $music_beats = array();\n\
    \    for ($i = 0; $i < $music_length; $i++) {\n        $beats_per_note = strlen($music[$i]);\n\
    \        $music_beats[] = $beats_per_note;\n    }\n    return $music_beats;\n\
    }\n</code>\nAs I do not know how you get this music from your input, I cannot\
    \ say whether this solution can be applied to your input. You may need to change\
    \ the code accordingly, and you may need to fix a small bug in the code above\
    \ which calculates beats per note correctly.\n<|/ a tags=php,regex,string,parsing,arrays\
    \ |>\n<| c |>\nThank you for the suggestion. Your code is definitely more elegant\
    \ than mine. The only problem is that it gives me an incorrect output. For example,\
    \ instead of getting `Array\n(\n    [0] => Array\n        (\n            [0] =>\
    \ 8\n            [1] => 10\n            [2] => 16\n            [3] => 19\n   \
    \         [4] => 21\n            [5] => 24\n            [6] => 27\n          \
    \  [7] => 30\n            [8] => 33\n            [9] => 36\n        )\n\n    [1]\
    \ => Array\n        (\n            [0] => 8\n            [1] => 11\n         \
    \   [2] => 15\n            [3] => 20\n            [4] => 23\n            [5] =>\
    \ 26\n            [6] => 29\n            [7] => 32\n            [8] => 35\n  \
    \          [9] => 38\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 8\n            [1] => 10\n            [2] => 16\n            [3] => 19\n\
    \            [4] => 22\n            [5] => 25\n            [6] => 28\n       \
    \     [7] => 31\n            [8] => 34\n            [9] => 37\n        )\n\n)`\n\
    I got `Array\n(\n    [0] => Array\n        (\n            [0] => 8\n         \
    \   [1] => 10\n            [2] => 16\n            [3] => 19\n            [4] =>\
    \ 21\n            [5] => 24\n            [6] => 27\n            [7] => 30\n  \
    \          [8] => 33\n            [9] => 36\n        )\n\n    [1] => Array\n \
    \       (\n            [0] => 8\n            [1] => 11\n            [2] => 15\n\
    \            [3] => 20\n            [4] => 23\n            [5] => 26\n       \
    \     [6] => 29\n            [7] => 32\n            [8] => 35\n            [9]\
    \ => 38\n        )\n\n    [2] => Array\n        (\n            [0] => 8\n    \
    \        [1] => 10\n            [2] => 16\n            [3] => 19\n", "    $notes\
    \ = explode(\" \", $music_string);\n    $num_notes = count($notes);\n    $result\
    \ = [];\n    $current_notes = 0;\n    $current_beats = 0;\n\n    for ($i = 0;\
    \ $i < $num_notes; $i++) {\n        $note = $notes[$i];\n        $note = preg_replace(\"\
    /[^A-Za-z ]/\", \"\", $note);\n        // if notes has only one char then it is\
    \ a whole note\n        if (strlen($note) == 1) {\n            $result[$current_notes]\
    \ += 4;\n        }\n        // if note has two chars then it is a half note\n\
    \        else if (strlen($note) == 2) {\n            $result[$current_notes] +=\
    \ 2;\n        }\n        // if note has three chars then it is a quater note\n\
    \        else if (strlen($note) == 3) {\n            $result[$current_notes] +=\
    \ 1;\n        }\n        // if the note does not have proper amount of chars\n\
    \        else {\n            die(\"Note has wrong amount of chars\");\n      \
    \  }\n        $current_beats++;\n        if ($current_beats == 4) {\n        \
    \    $current_beats = 0;\n            $current_notes++;\n        }\n    }\n\n\
    \    return $result;\n}\n</code>\n<|/ a tags=notepad++,beat |>\n<| c |>\nI tried\
    \ to run this code in PHP storm with code formatting but I got error. Do you know\
    \ how to format this code to work?\n<|/ c |>\n<| a dscore=0 |>\nA simple way of\
    \ doing this in PHP without regular expressions:\n<code>\n<?php\n/**\n * $music_string\
    \ string music as defined in question\n * int beat_count count of beats per note\n\
    \ */", "    $parts = preg_split(\"/[|o]/\", $music_string);\n    $result = [];\n\
    \    foreach ($parts as $index => $part) {\n        if ($part == \"o\") {\n  \
    \          $result[] = 1;\n        } else {\n            $result[] = ceil(log($index\
    \ + 1, 2));\n        }\n    }\n    return $result;\n}\n\n$music_string = \"o o|\
    \ .| o| o| .| .| .| .| o o\";\nvar_dump(parse_music($music_string));", "  // Your\
    \ code goes here\n}", "    $music_array = explode(\"|\", $music_string);\n\n \
    \   $parsed_music = [];\n    $beat = 0;\n    $parsed_music[] = 0;\n    $parsed_music[]\
    \ = 0;\n\n    foreach($music_array as $note) {\n        switch($note[0]) {\n \
    \           case \"o\":\n                $parsed_music[] = 4;\n              \
    \  $parsed_music[] = 0;\n                break;\n            case \"o|\":\n  \
    \              $parsed_music[] = 2;\n                $parsed_music[] = 0;\n  \
    \              break;\n            case \".|\":\n                $parsed_music[]\
    \ = 1;\n                $parsed_music[] = 0;\n                break;\n       \
    \     default:\n                trigger_error(\"Wrong music string format\", E_USER_WARNING);\n\
    \                break;\n        }\n\n        if($beat == 0) {\n            $parsed_music[]\
    \ = 0;\n        }\n\n        $beat++;\n\n        $parsed_music[] = 0;\n    }\n\
    \n    return $parsed_music;\n}\n</code>\n<|/ a |>\n<| c |>\nI don't think this\
    \ works. The output for `parse_music('o o| .| o| o| .| .| .| .| o o')` is `Array(5,\
    \ 4, 3, 2, 3, 3, 3, 3, 3, 3, 3)`. I'm guessing the `o` should not be treated as\
    \ a complete note, and the last note should be treated as a separate note.\n<|/\
    \ c |>\n<| c |>\nThis is incorrect. I am getting `Array(4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4)`. I am assuming that the `o` is treated as a separate note, unless\
    \ it is the last note in a string, but in this case it is treated as a complete\
    \ note.\n<|/ c |>\n<| c |>\nI've updated my answer, it should work now. I've added\
    \ `break` statements inside `switch` blocks to handle notes. Also, as you can\
    \ see, I've added some debugging messages to your `parse_music` function to help\
    \ you debug your code.\n<|/ c |>\n<| c |>\nI've updated my answer, please check.\n\
    <|/ c |>\n<| c |>\nI really like this approach. One thing I noticed is that you\
    \ end up with the 'o' as a separate note. It should be treated as a separate note\
    \ only if it's the last note in the string. Otherwise it should be treated as\
    \ a complete note. I will need to try and figure out how to get this to work with\
    \ the current approach.\n<|/ c |>\n<| a dscore=0 |>\nThe first thing that comes\
    \ to mind is to simply do a regex replacement.\n<code>\n<?php\n\n$input = 'o o|\
    \ .| o| o| .| .| .| .| o o';\n$output = preg_replace('/(?:^|\\s)(\\S)(?!\\S)/',\
    \ '\\1', ", "    $music_array = array();\n    $current_note = null;\n    $beat_position\
    \ = 0;\n    for ($i=0; $i<strlen($music_string); $i++) {\n        // Get current\
    \ note and store it in $music_array\n        if ($music_string[$i] == ' ') {\n\
    \            $current_note = trim($music_string);\n            $music_array[$beat_position][$music_string[$i]]\
    \ = $current_note;\n            $beat_position++;\n        } else {\n        \
    \    // If not whitespace, check if we are at the end of a note\n            if\
    \ ($music_string[$i] != '|') {\n                $current_note = trim($music_string);\n\
    \                $music_array[$beat_position][$music_string[$i]] = $current_note;\n\
    \                $beat_position++;\n            } else {\n                // If\
    \ '|' is encountered, get previous note and add it to current note\n         \
    \       $music_array[$beat_position-1][$music_string[$i]] = $current_note;\n \
    \           }\n        }\n    }\n    return $music_array;\n}\n</code>\n<|/ a tags=php,arrays,string\
    \ |>\n<| a |>\n<code>", "    $arr = explode(\"\\n\", $music_string);\n    $notes\
    \ = [];\n    $last_note = -1;\n    $current_note = 0;\n    foreach($arr as $note)\
    \ {\n        list($char, $beat_count) = $note = explode(\"\\t\", $note);\n   \
    \     $beat_count = intval($beat_count);\n        if($beat_count < 0)\n      \
    \      continue;\n        $char = $char == '.' ? 'o' : $char;\n        if($char\
    \ != $last_note) {\n            $notes[$current_note] = $beat_count;\n       \
    \     $current_note++;\n        } else {\n            $notes[$current_note] +=\
    \ $beat_count;\n        }\n        $last_note = $char;\n    }\n    return $notes;\n\
    }\n\n$music_str = \"o o| .| o| o| .| .| .| .| o o\";\n$music_arr = parse_music($music_str);\n\
    $music_str = implode(',', $music_arr);\nprint \"music_str = \\\"$music_str\\\"\
    \\n\";\n\nprint \"music_arr = \", print_r($music_arr, true), \"\\n\";", "    $result\
    \ = array();\n    $notes = explode(\"\\n\", $music_string);\n    foreach($notes\
    \ as $key => $note) {\n        list($note, $beats) = explode(\" \", $note);\n\
    \        if(!empty($note) && $note != \"o\" && $note != \"o|\" && $note != \"\
    .|\") {\n            $result[] = array((int)($note[0] == 'o'), (int)($note[1]\
    \ == '|'), (int)($note[2] == '|'), (int)($note[3] == '|'), (int)($note[4] == '|'),\
    \ (int)($note[5] == '|'), (int)($note[6] == '|'), (int)($note[7] == '|'), (int)($note[8]\
    \ == '|'), (int)($note[9] == '|'), (int)($note[10] == '|'), (int)($note[11] ==\
    \ '|'), (int)($note[12] == '|'), (int)($note[13] == '|'), (int)($note[14] == '|'),\
    \ (int)($note[15] == '|'), (int)($note[16] == '|'), (int)($note[17] == '|'));\n\
    \        }\n    }\n    return $result;\n}\n</code>\nIn your case it should return:\n\
    <code>\narray(\n    array(4,2,1,2,2,2,1,1,1,1,4,4),\n    array(2,2,1,1,1,1,1,1,2,1,1,1,1),\n\
    \    array(1,2,2,1,2,2,2,1,2,2,2,2,2)\n);\n</code>\nI hope this helps.\n<|/ a\
    \ |>\n<| c |>\nThanks for the suggestion. The input will always be in that format,\
    \ it's just that the output will vary depending on the input.\n<|/ c |>\n<| c\
    \ |>\n: Ok, I updated my answer, hope it helps. Also, I added a demo.\n<|/ c |>\n\
    <| a tags=algorithm,parsing,php |>\nI would suggest you to use regexp to extract\
    \ your notes. It will save a lot of time.\n<|/ a dscore=0 |>\n<| a tags=algorithm,parsing,php\
    \ |>\nIf the input string always has exactly 1 note in each line, and the next\
    \ line always has the next note in the same order, this will do it:\n<code>\n\
    $result = explode(\"\\n\", $input);\n$notes = explode(\" \", $result[0]);\n$result\
    \ = array();\nfor ($i = 1; $i < count($result); $i++) {\n    $notes[] = $result[$i];\n\
    \    $result[] = array((int)($notes[0] == 'o'), (int)($notes[1] == '|'), (int)($notes[2]\
    \ == '|'), (int)($notes[3] == '|'));\n}\n</code>\nIf the input has multiple notes\
    \ in each line, and the next line ", "    $music_array = explode('|', $music_string);\n\
    \    $music_array2 = array();\n    $music_array3 = array();\n    foreach ($music_array\
    \ as $music) {\n        $music_elements = explode(' ', $music);\n        foreach\
    \ ($music_elements as $music1) {\n            $music_elements_2 = explode('o',\
    \ $music1);\n            $music_array2[] = strlen($music_elements_2[0]) / 4;\n\
    \        }\n        foreach ($music_elements as $music1) {\n            $music_elements_3\
    \ = explode('o', $music1);\n            $music_array3[] = strlen($music_elements_3[0])\
    \ / 2;\n        }\n    }\n    $music_array4 = array_merge($music_array2, $music_array3);\n\
    \    $music_array5 = array_unique($music_array4);\n    return $music_array5;\n\
    }\n", "    $result = array();\n\n    $music_array = explode(\" \", $music_string);\n\
    \    foreach ($music_array as $key => $value) {\n        $music_array[$key] =\
    \ preg_replace(\"/(\\.|o|o\\|)/\", \"\", $value);\n    }\n    $music_count = count($music_array);\n\
    \    for ($i = 0; $i < $music_count; $i++) {\n        $result[] = strlen($music_array[$i])\
    \ / $music_count;\n    }\n    return $result;\n}\n</code>\n<|/ a |>\n<| a |>\n\
    <code>\n<?php\n", "    $music_array = explode(\",\", $music_string);\n    $music_length\
    \ = count($music_array);\n    $music_notes = array();\n    for ($i = 0; $i < $music_length;\
    \ $i++) {\n        $music_notes[$i] = array(\n            \"note\" => $music_array[$i],\n\
    \            \"times\" => 0\n        );\n    }\n    return $music_notes;\n}",
  "  // Your code goes here!\n}\n", "  $music = explode(\"|\", $music_string);\n \
    \ $beats = array();\n  $last = array();\n  $last_note = -1;\n  foreach ($music\
    \ as $key => $value) {\n    if ($value != \".\" && $value != \" \" && $value !=\
    \ \" o \" && $value != \" o o\") {\n      // This note does not end\n      array_push($beats,\
    \ $last_note);\n      $last = array();\n    } else {\n      // This note ends\n\
    \      if ($value == \".\") {\n        array_push($beats, $last_note);\n     \
    \ } else {\n        // This note starts\n        array_push($last, $value);\n\
    \        $last_note = $key;\n      }\n    }\n  }\n  array_push($beats, $last_note);\n\
    \  return $beats;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks, I was able to modify\
    \ it slightly to fit my needs.\n<|/ c |>\n<| c |>\nGreat! If my answer was helpful\
    \ you can upvote it, if it solved your problem you can accept it.\n<|/ c |>\n\
    <| a |>\nThis can be done with a simple regex and preg_split:\n<code>\n$music\
    \ = preg_split('/([\\-]+)/', $music, -1, PREG_SPLIT_NO_EMPTY);\n$beats = array_sum($music);\n\
    </code>\nOutput:\n<code>\nArray\n(\n    [0] => o\n    [1] => o\n    [2] => |\n\
    \    [3] => .\n    [4] => .\n    [5] => .\n    [6] => .\n    [7] => .\n    [8]\
    \ => o\n    [9] => o\n    [10] => o\n    [11] => o\n    [12] => o\n    [13] =>\
    \ o\n    [14] => o\n    [15] => o\n    [16] => o\n    [17] => o\n    [18] => o\n\
    \    [19] => o\n    [20] => o\n    [21] => o\n    [22] => o\n    [23] => o\n \
    \   [24] => .\n    [25] => .\n    [26] => .\n    [27] => .\n    [28] => .\n  \
    \  [29] => .\n    [30] => o\n    [31] => o\n    [32] => .\n    [33] => .\n   \
    \ [34] => .\n    [35] => .\n    [36] => .\n    [37] => .\n    [38] => .\n    [39]\
    \ => o\n    [40] => o\n    [41] => o\n    [42] => o\n    [43] => o\n    [44] =>\
    \ o\n", "    // Your code here\n}\n", "    $music_notes = explode(\"o|\", $music_string);\n\
    \    $beats_per_note = array();\n    foreach($music_notes as $music_note) {\n\
    \        $music_note = trim($music_note);\n        $music_note = preg_replace('/[^0-9]/',\
    \ '', $music_note);\n        $beats_per_note[] = $music_note;\n    }\n    return\
    \ $beats_per_note;\n}\n", "  return array_map(\n    function($note) {\n      list($note,\
    \ $beat_length) = $note;\n      if ($note === 'o') {\n        return 4; // whole\
    \ note, lasts 4 beats\n      }\n      else if ($note === 'o|') {\n        return\
    \ 2; // half note, lasts 2 beats\n      }\n      else if ($note === '.|') {\n\
    \        return 1; // quater note, lasts 1 beat\n      }\n    },\n    explode('\
    \ ', $music_string)\n  );\n}\n</code>\nThis returns an array of beats lengths\
    \ for each note. From this you can easily calculate the number of octaves:\n<code>\n\
    $music = parse_music(\"o o| .| o| o| .| .| .| .| o o\");\n$num_octaves = count($music)\
    \ / 6 + 1;\n</code>\nWhich gives you an output of:\n<code>\n> echo count($music)\
    \ / 6 + 1;\n5\n</code>\n<|/ a |>\n<| a dscore=0 |>\nThis is based on 's answer\
    \ above, but uses PHP's built-in function str_split instead of explode (for better\
    \ performance) and map (for brevity)\n<code>\n$music = str_split(\"o|.| o| o|\
    \ .| .| .| .| o o\");\n$num_octaves = count($music) / 6 + 1;\necho $num_octaves;\
    \ // 5\n</code>\n<|/ a tags=string,math,algorithm,php |>\n<| a |>\nI really like\
    \ the answer from Lukas W. - however, I wanted to add that it doesn't work if\
    \ the music is more than 6 beats long.\ne.g. \"o| .| o| o| .| .| .| .| o o\" returns\
    \ 2, which is wrong.\nI have modified the code so that it also works if the music\
    \ is more than 6 beats long. :)\n<code>\n$music = str_split(\"o|.| o| o| .| .|\
    \ .| .| o o\");\n$num_octaves = count($music) / 6 + 1;\nif ($num_octaves > 6)\
    \ {\n    $num_octaves = 6;\n}\n</code>\n<|/ a dscore=0 tags=string,math,algorithm,php\
    \ |>\n<| a tags=string,math,algorithm,php |>\nHere's a simple solution that is\
    \ also more readable for me ;)\n<code>\n$music = 'o|.| o| o| .| .| .| .| o o';\n\
    $array = array_unique(array_map('trim', explode(' ', $music)));", "    // Write\
    \ your code here.\n}\n", "    $return = array();\n    $music_string = preg_replace(\"\
    /([\\.\\|\\-\\|])/\", \"$0|\", $music_string);\n    $music_string = explode(\"\
    |\", $music_string);\n    foreach($music_string as $music_element) {\n       \
    \ if (strlen($music_element) > 0) {\n            $music_element = explode(\"o\"\
    , $music_element);\n            $return[] = (int) $music_element[0];\n       \
    \ }\n    }\n    return $return;\n}\n</code>\n<|/ a tags=php,arrays,string,javascript\
    \ |>\n<| c |>\nThis is great! Thanks!\n<|/ c |>\n<| c |>\nI got caught up with\
    \ this question, so I made a fiddle: https://jsfiddle.net/5o5vux5r/ - works well.\n\
    <|/ c |>\n<| c |>\nThanks, I added the missing `/`\n<|/ c |>\n<| a |>\nOne more\
    \ possible solution with regex:\n<code>", "    if (empty($music_string)) {\n \
    \       return array();\n    }\n\n    $notes = array();\n    $notes_count = -1;\n\
    \n    for ($i = 0; $i < strlen($music_string); $i++) {\n        if (strlen($music_string[$i])\
    \ != 1) {\n            $notes[$notes_count]++;\n        }\n        else if ($music_string[$i]\
    \ == 'o') {\n            $notes_count++;\n            if ($notes_count == 4) {\n\
    \                $notes[$notes_count]++;\n                $notes_count--;\n  \
    \          }\n        }\n    }\n\n    return $notes;\n}\n</code>\n<|/ a tags=parsing,php\
    \ |>\n<| c |>\nThis works, but it isn't efficient, because it requires too much\
    \ processing and memory. Though I did not have time to do anything better.\n<|/\
    \ c |>\n<| c |>\nYes, this is way more complicated than it needs to be.\n<|/ c\
    \ |>\n<| c |>\nThis is definitely not efficient and I suspect it is even slower,\
    \ but I don't have time to write much more, I thought that maybe someone could\
    \ write something better than this.\n<|/ c |>\n<| a tags=parsing,php dscore=0\
    \ |>\nIf you do not care about the order, this should be easy:\n<code>\n$input\
    \ = 'o o| .| o| o| .| .| .| .| o o';\n$notes = str_split($input);\n$counts = array_count_values($notes);\n\
    $output = array_fill_keys(range(0, 12), 0);\nforeach ($counts as $key => $count)\
    \ {\n    $output[$key] += $count;\n}\n</code>\nThe result will be an array of\
    \ 0s and 1s.\n<|/ a |>\n<| c |>\nThis works, but it isn't efficient, because it\
    \ requires too much processing and memory. Though I did not have time to do anything\
    \ better.\n<|/ c |>\n<| a |>\n<code>", "  $music_string = preg_replace(\"/([.|]|\
    \ +){2,}/\", \" \", $music_string);\n  return explode(\" \", $music_string);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI have added some more explanation to the function\
    \ code. Does it help to understand how the function works?\n<|/ c |>\n<| c |>\n\
    Yes, I got it!  Thank you so much for your time!\n<|/ c |>\n<| c |>\n`parse_music(\"\
    o\")` returns `array(1)`. Did you mean `array(4)` instead? The code does it correctly.\n\
    <|/ c |>\n<| c |>\nI am sorry, it was my mistake, I updated code now to `array(1)`.\n\
    <|/ c |>\n<| a dscore=2 |>\nAs stated in comments, this was my mistake when reading\
    \ the requirements. The question was indeed wrong. Thanks to.\nHere is the correct\
    \ solution:\n<code>", "    $beats = array();\n    $notes = explode(' ', $music_string);\n\
    \    $notes = array_map(function ($note) {\n        $note = strtolower($note);\n\
    \        if (preg_match('/^o\\|?(.*)/', $note, $m)) {\n            $note = preg_replace('/^o\\\
    |?(.*)$/', 'o|$1i', $note);\n        } else if (preg_match('/^o$/', $note)) {\n\
    \            $note = preg_replace('/^o$/', 'oi', $note);\n        } else if (preg_match('/^\\\
    .\\|?(.*)/', $note, $m)) {\n            $note = preg_replace('/^\\.\\|?(.*)$/',\
    \ '|$1i', $note);\n        } else if (preg_match('/^\\..*/', $note, $m)) {\n \
    \           $note = preg_replace('/^\\..*$/', '.', $note);\n        }\n      \
    \  if (preg_match('/^(.*)(i?)$/', $note, $m)) {\n            return $m[1] ? $m[1]\
    \ : $note;\n        } else {\n            return $note;\n        }\n    }, $notes);\n\
    \    $notes = array_filter($notes);\n    $notes = array_unique($notes);\n    $notes\
    \ = array_values($notes);\n    $notes = array_map(function ($note) use (&$beats)\
    \ {\n        return strlen($note) * $beats[$note];\n    }, $notes);\n    return\
    \ $notes;\n}", "  $music_string = preg_replace(\"/[^a-zA-Z0-9\\- ]/\", '', $music_string);\
    \ // remove all non alpha numeric and space\n  $music_string = preg_replace(\"\
    /-+/\", ' ', $music_string); // remove all dashes\n  $music_string = preg_replace(\"\
    /\\s+/\", ' ', $music_string); // replace multiple spaces with single space\n\
    \  $music_string = preg_replace(\"/\\s+/\", ' ', $music_string); // replace multiple\
    \ spaces with single space\n  $music_string = preg_replace(\"/\\s+/\", ' ', $music_string);\
    \ // replace multiple spaces with single space\n  $music_string = preg_replace(\"\
    /\\s/\", ' ', $music_string); // replace all spaces with single space\n  $music_string\
    \ = preg_replace(\"/\\s+/\", ' ', $music_string); // replace multiple spaces with\
    \ single space\n  return str_split($music_string);\n}\n", "    // Your code here\n\
    }", "    $music_string = preg_replace('/\\|+$/', '', $music_string);\n    $music_array\
    \ = explode('|', $music_string);\n    return array_map(function($note) {\n   \
    \     $beats = array_sum(preg_split('/[^\\.\\o]+/', $note));\n        return $beats;\n\
    \    }, $music_array);\n}\n", "    \n    $music_string = str_replace(\" \", \"\
    \", $music_string);\n    $music_string = str_replace(\"|\", \"\", $music_string);\n\
    \    $music_string = str_replace(\"o\", \"\", $music_string);\n    $music_string\
    \ = str_replace(\".\", \"\", $music_string);\n    \n    $music_array = explode(\"\
    \ \", $music_string);\n    $music_array = array_map(function($val) { return (int)$val;\
    \ }, $music_array);\n    \n    return $music_array;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThanks for sharing this solution. I would give it a try too!\n\
    <|/ c |>\n<| a tags=algorithm,php |>\nHere is a solution that converts the input\
    \ string into a nested array (so each note lasts one beat):\n<code>", "    $music\
    \ = str_split($music_string, 3);\n    $music_len = count($music);\n\n    foreach\
    \ ($music as &$note) {\n        $note = str_replace(array('.', 'o', '|', '-'),\
    \ array(1, 2, 3, 4), $note);\n    }\n\n    $music_len = count($music);\n    $num_notes\
    \ = $music_len / 3;\n    $beats = array();\n    for ($i = 0; $i < $num_notes;\
    \ $i++) {\n        $beats[] = $music_len - ($i * 3);\n    }\n\n    return $beats;\n\
    }\n</code>\n<|/ a tags=algorithm,php,arrays |>\n<| c |>\nWhy do you convert `o`\
    \ to `1`, `|` to `2`, etc?\n<|/ c |>\n<| c |>\nThat's just an accidental coincidence.\
    \ You could use `str_split()` instead.\n<|/ c |>\n<| a tags=algorithm,php,arrays\
    \ |>\nIf you do not want to use str_split() you can try this simple function:\n\
    <code>", "  $music_array = array();\n\n  // Loop over the music string\n  for\
    \ ($i = 0; $i < strlen($music_string); $i++) {\n    // Split the string into its\
    \ parts\n    $parts = explode(\" \", $music_string[$i]);\n    // Get the last\
    \ part\n    $last_part = $parts[count($parts) - 1];\n    if ($last_part == \"\
    o\") {\n      // O is whole note\n      array_push($music_array, 4);\n    } else\
    \ {\n      // Get the number of beats\n      $beats = 1;\n      foreach ($parts\
    \ as $part) {\n        $beat_counter = substr_count($part, \"b\");\n        if\
    \ ($beat_counter == 0) {\n          // Count how many notes does this not\n  \
    \        $music_array[] = 1;\n        } else {\n          $music_array[] = $beats;\n\
    \          $beats = $beat_counter;\n        }\n      }\n    }\n  }\n  return $music_array;\n\
    }\n", "  $parsed_string = \"\";\n  for($i = 0; $i < strlen($music_string); $i++)\
    \ {\n    $letter = $music_string[$i];\n    if($letter === \"o\") {\n      $parsed_string\
    \ = $parsed_string . $letter . \"4\";\n    } else {\n      $parsed_string = $parsed_string\
    \ . $letter . \"|\";\n    }\n  }\n\n  return explode(\"|\", $parsed_string);\n\
    }\n", "  return $music_string\n    // Convert string to array of ASCII characters\n\
    \    ->mapToObj(function($note) {\n      return ord($note);\n    })\n    // Count\
    \ how many notes we have of each type\n    ->groupBy(function($note) {\n     \
    \ return (127 & $note);\n    })\n    ->map(function($notes, $type) use ($type)\
    \ {\n      return $notes->reduce(function($carry, $note) use ($type) {\n     \
    \   return $carry + ($note == $type ? 1 : 0);\n      }, 0);\n    });\n}\n</code>\n\
    <|/ a dscore=0 tags=arrays,php |>\n<| a dscore=0 |>\nThis works without any additional\
    \ data structure or logic and it is fast. \n<code>\n<?php\n$music = \"o o| .|\
    \ o| o| .| .| .| .| o o\";", "    $music_array = explode(\"o\", $music_string);\n\
    \    foreach($music_array as $key => $value) {\n        if($value == '.') {\n\
    \            $music_array[$key] = 0;\n            continue;\n        }\n     \
    \   if($value == \"o|\") {\n            $music_array[$key] = 2;\n            continue;\n\
    \        }\n        if($value == 'o') {\n            $music_array[$key] = 4;\n\
    \            continue;\n        }\n    }\n    return $music_array;\n}\n\n$music\
    \ = parse_music(\"o o| .| o| o| .| .| .| .| o o\");", "    $notes = explode('\
    \ ', $music_string);\n    $notes = array_map('trim', $notes);\n    $notes = array_filter($notes);\n\
    \    $notes = array_map('strtolower', $notes);\n    $result = array();\n\n   \
    \ // Loop through the notes, check if they are valid and if so add them to the\
    \ result array.\n    foreach ($notes as $note) {\n        if ($note === 'o') {\n\
    \            $result[] = 4;\n        } else if ($note === 'o|') {\n          \
    \  $result[] = 2;\n        } else if ($note === '.|') {\n            $result[]\
    \ = 1;\n        } else {\n            throw new \\InvalidArgumentException(\"\
    Music string is not properly formatted: music string contains invalid note '$note'\"\
    );\n        }\n    }\n\n    return $result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ c |>\nThanks for this. When I run your code I get `Warning: Invalid argument\
    \ supplied for foreach() in .../test.php on line 34` on the `foreach ($notes as\
    \ $note) {` line. Line 34 being the `foreach ($notes as $note) {` line. Can you\
    \ help me understand what I am doing wrong?\n<|/ c |>\n<| c |>\nYou probably have\
    \ a empty line at the end of your input string. Remove it and it should work.\n\
    <|/ c |>\n<| c |>\nMy string has no empty lines. I added the `trim()` line and\
    \ that doesn't fix it. I even tried removing the `trim()` line and that still\
    \ doesn't work. Is there a different line of code I need to add to fix it?\n<|/\
    \ c |>\n<| c |>\nIf i copy your code it works with no errors. I suspect you are\
    \ passing a wrong value to `parse_music($string)`. Can you share your code?\n\
    <|/ c |>\n<| c |>\nI added the code I have. Maybe it is the way the array is declared?\n\
    <|/ c |>\n<| a dscore=0 |>\nI would use preg_split with a regex that matches a\
    \ space followed by a valid note followed by another space:\n<code>\n$music =\
    \ \"o o| .| o| o| .| .| .| .| o o\";\n\n$notes = preg_split(\"/\\s+(o.+|.\\|)\\\
    s+/\", $music, -1, PREG_SPLIT_NO_EMPTY);\n\nvar_dump($notes);\n</code>\nOutput:\n\
    <code>\narray(7) {\n  [0]=>\n  string(4) \"o o\"\n  [1]=>\n  string(1) \".\"\n\
    \  [2]=>\n  string(1) \"o\"", "  // You have to implement this function.\n}\n",
  "    $music_string = trim(strtolower($music_string));\n    $music_string = str_replace(array(\"\
    o|\",\"o|\",\"o|\",\"o|\",\"o|\",\"o|\",\"o|\",\"o|\",\"o|\",\"o|\",\"o|\"), array(\"\
    .\", \"|\", \"|\", \"|\", \"|\", \"|\", \"|\", \"|\", \"|\", \"|\", \"|\", \"\
    |\"), $music_string);\n    $music_array = explode(\"|\", $music_string);\n   \
    \ $music_beats = array();\n\n    foreach ($music_array as $key => $value) {\n\
    \        if ($value == \".\") {\n            $music_beats[$key] = 0;\n       \
    \ } else {\n            $music_beats[$key] = floor($value / 4);\n        }\n \
    \   }\n\n    return $music_beats;\n}\n</code>\n<|/ a dscore=1 tags=php,math |>\n\
    <| c |>\nThanks for your answer! I upvoted and accepted it because you were the\
    \ first to actually answer the question. However, in the end I went with another\
    \ approach, as I didn't want to deal with complex numbers, I just needed to calculate\
    \ note frequencies and stuff. Still, your answer is very useful in other parts\
    \ of the project =)\n<|/ c |>\n<| a dscore=1 |>\nThe easiest solution that comes\
    \ to mind is to just use regex to break your string into an array and then do\
    \ some simple math on the numbers. To get the actual frequency of a note you can\
    \ divide the frequency by (number of beats in a whole note / number of beats in\
    \ a half note / number of beats in a quarter note and so forth).\n<|/ a tags=php,math\
    \ |>\n<| c |>\nYes, I have already solved it using regex and explodes. However,\
    \ it's not a clean solution and it didn't take long to figure out how to do it\
    \ :)\n<|/ c |>\n<| a |>\n<code>\n<?php\n\n$string = \".| .| .| .| .| .| .| .|\
    \ .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .|\
    \ .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .|\
    \ .| .| .| ", "  // This code has been tested for ASCII musical notes\n  // For\
    \ more details on ASCII format see:\n  // https://en.wikipedia.org/wiki/Music#Ascii_format\n\
    \  // https://web.archive.org/web/20141023101215/http://musicaltimes.org/\n  $music\
    \ = array();\n  $current = 0;\n  $notes = preg_split('/([\\[\\]])/', $music_string);\n\
    \  foreach ($notes as $note) {\n    if ($note == \".\") {\n      if ($current)\
    \ {\n        $music[$current] = 1;\n      }\n      $current++;\n    } else if\
    \ ($note == \"o|\") {\n      if ($current && $current < 12) {\n        $music[$current\
    \ - 1] += 4;\n      }\n      $current++;\n    } else if ($note == \"o\") {\n \
    \     if ($current && $current < 12) {\n        $music[$current - 1] += 2;\n \
    \     }\n      $current++;\n    } else {\n      $music[$current] = 1;\n      $current++;\n\
    \    }\n  }\n  return $music;\n}\n", "  $parts = explode(\"o\", $music_string);\n\
    \  $note_array = [];\n  foreach ($parts as $note) {\n    $note_list = str_split($note,\
    \ 2);\n    foreach ($note_list as $note) {\n      if ($note != \".\") {\n    \
    \    $note_array[] = $note;\n      }\n    }\n  }\n  return $note_array;\n}\n</code>\n\
    <|/ a tags=php,music |>\n<| a |>\nIf you need this for a very specific case, you\
    \ can do:\n<code>", "    // Split music string to array of musical notes\n   \
    \ $music_notes = explode('|', $music_string);\n\n    // Initialize beat counter\n\
    \    $beats = 0;\n\n    // Traverse notes array and calculate number of beats\n\
    \    foreach ($music_notes as $note) {\n        if ($note == '.') {\n        \
    \    $beats++;\n        } else if ($note == 'o') {\n            $beats = 4;\n\
    \        } else {\n            $beats = $beats * (strlen($note) / 2);\n      \
    \  }\n    }\n\n    // Return array of beats\n    return $beats;\n}\n", "  $music_string\
    \ = 'o|.|o|.|.|.|.|.|o|o|o|o|o';\n\n  $music_array = explode('o|.|o|.|.|.|.|.|o|o|o|o|o',\
    \ $music_string);\n  $music_array = array_count_values($music_array);\n  return\
    \ $music_array;\n}\n", "    $music = preg_split('/[\\|\\. ]/', $music_string);\n\
    \    foreach ($music as $key => $value) {\n        // If music string ends with\
    \ this value it means that this note repeats\n        // This value is appended\
    \ to result array for each note\n        if ($value[$value.length-1] == $value[0])\
    \ {\n            $result[] = $value[$value.length-1];\n        }\n        // Otherwise\
    \ notes don't repeat\n        else {\n            $result[] = 1;\n        }\n\
    \    }\n    return $result;\n}", "  $parsed = array();\n  foreach (str_split($music_string,\
    \ 1) as $symbol) {\n    switch ($symbol) {\n      case \"o\":\n        array_push($parsed,\
    \ 4);\n        break;\n      case \"o|\":\n        array_push($parsed, 2);\n \
    \       break;\n      case \".|\":\n        array_push($parsed, 1);\n        break;\n\
    \      default:\n    }\n  }\n  return $parsed;\n}\n", "  $music_string = preg_replace('/[^o|\\\
    .|]/', '', $music_string);\n\n  $notes = array();\n  foreach(str_split($music_string)\
    \ as $note) {\n    if (strlen($note) == 1) {\n      $notes[] = $note;\n    } else\
    \ if ($note == '.') {\n      $notes[] = '.';\n    } else if ($note == 'o') {\n\
    \      $notes[] = 'o';\n    } else if ($note == '|') {\n      $notes[] = '|';\n\
    \    } else {\n      die(\"Wrong note: $note\");\n    }\n  }\n\n  return $notes;\n\
    }\n", "    $music_string = strtolower($music_string);\n    $music_array = explode('|',\
    \ $music_string);\n    $music_length = count($music_array);\n    for ($i = 0;\
    \ $i < $music_length; $i++) {\n        $music_array[$i] = trim($music_array[$i]);\n\
    \        if ($music_array[$i] == 'o' || $music_array[$i] == 'o|' || $music_array[$i]\
    \ == '.|') {\n            $music_array[$i] = 0;\n        } else {\n          \
    \  $music_array[$i] = 1;\n        }\n    }\n    return $music_array;\n}\n</code>\n\
    <|/ a tags=php,math |>\n<| c |>\nIt is a great answer.  I ran the code and I realized\
    \ there is a bug with it.  When you hit a note that does not last a beat you will\
    \ get the following number: Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 2\n\
    \    [3] => 1\n    [4] => 2\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8]\
    \ => 4\n)\n<|/ c |>\n<| c |>\nOkay, I fixed the bug. Thank you for pointing out\
    \ this problem and saving me the trouble.\n<|/ c |>\n<| a dscore=0 tags=php,math\
    \ |>\nAs I understand you, you are given an array:\n<code>\narray(\n    0 => 'o',\n\
    \    1 => 'o',\n    2 => 'o',\n    3 => 'o',\n    4 => 'o',\n    5 => 'o',\n \
    \   6 => '.',\n    7 => '.',\n    8 => '.',\n    9 => '.',\n    10 => '.',\n \
    \   11 => '.',\n    12 => 'o',\n    13 => 'o',\n    14 => 'o',\n    15 => 'o',\n\
    \    16 => 'o',\n    17 => 'o',\n    18 => '.',\n    19 => '.',\n    20 => '.',\n\
    \    21 => '.',\n    22 => '.',\n    23 => '.',\n)\n</code>\nYou want to end up\
    \ with:\n<code>\narray(\n    0 => 4,\n    1 => 2,\n    2 => 2,\n    3 => 1,\n\
    \    4 => 2,\n    5 => 1,\n    6 => 1,\n    7 => 1,\n    8 => 4,\n    9 => 0,\n\
    \    10 => 0,\n    11 => 0,\n", "  $notes_count = count(explode(' ', $music_string));\n\
    \  $beats_array = array();\n  $last_beat_num = 0;\n\n  for ($note = 0; $note <\
    \ $notes_count; $note++) {\n    $char = explode(' ', $music_string, $note + 1);\n\
    \    $beat_num = 0;\n\n    // if the last note is complete, add it to array\n\
    \    if ($char[$note - 1] === '|') {\n      $beats_array[$beat_num] = $last_beat_num;\n\
    \      $last_beat_num = 0;\n      continue;\n    }\n\n    // if the note is a\
    \ whole note, add its length to the array\n    if ($char[$note] === 'o') {\n \
    \     $beats_array[$beat_num] = strlen($char[$note]);\n      $last_beat_num++;\n\
    \      continue;\n    }\n\n    // if the note is a half note, just add half note\
    \ length to the array\n    if ($char[$note] === 'o|') {\n      $beats_array[$beat_num]\
    \ = strlen($char[$note]);\n      continue;\n    }\n\n    // if the note is a quater\
    \ note, just add quarter note length to the array\n    if ($char[$note] === '.|')\
    \ {\n      $beats_array[$beat_num] = 1;\n      continue;\n    }\n  }\n  return\
    \ $beats_array;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nHey, thank you! The only\
    \ problem I have now is that I do not know how many notes are going to be played\
    \ by the user. So I need to be able to read a music file and split it into notes\
    \ and then store them into an array with the number of notes played as each index.\
    \ Do you know how I can do this?\n<|/ c |>\n<| c |>\nI have updated my answer.\
    \ Let me know if it works!\n<|/ c |>\n<| c |>\nAmazing! Thank you very much!\n\
    <|/ c |>\n<| c |>\nI updated my code to match your updated question, let me know\
    \ if it works for you!\n<|/ c |>\n<| c |>\nI have updated my code with your updated\
    \ question.\n<|/ c |>\n<| a dscore=0 |>\nYou can use explode function.\n<code>\n\
    <?php\n$mystring = \"this is a sample string containing spaces\";\n$array = explode(\"\
    \ \", $mystring);\nvar_dump($array);", "    $result = [];\n\n    // Step 1: Split\
    \ string to array of notes and beats\n    $notes = explode(\" \", $music_string);\n\
    \n    // Step 2: Check each note, if its last note then add 1 to the beat count\
    \ array for that note\n    foreach ($notes as $note) {\n        $beat_count =\
    \ $note[0] == 'o' ? 4 : 2;\n        if ($note[strlen($note) - 1] == '|') {\n \
    \           $beat_count++;\n        }\n        $result[] = $beat_count;\n    }\n\
    \n    return $result;\n}\n", "  // Your code goes here\n}\n", "    $notes = explode('\
    \ ', $music_string);\n    $result = array();\n    foreach ($notes as $note) {\n\
    \        if (strlen($note) > 1) {\n            $beats = strlen($note);\n     \
    \       if (substr($note, 0, 1) == 'o') {\n                $result[] = $beats\
    \ * 4;\n            } else if (substr($note, 0, 1) == 'o|') {\n              \
    \  $result[] = $beats * 2;\n            } else if (substr($note, 0, 1) == '.|')\
    \ {\n                $result[] = $beats;\n            }\n        }\n    }\n  \
    \  return $result;\n}\n\nprint_r(parse_music(\"o o| .| o| o| .| .| .| .| o o\"\
    ));", "    $music_notes = str_split($music_string);\n    $output = [];\n    $last_note\
    \ = null;\n    foreach($music_notes as $note) {\n        if($note == \".\") {\n\
    \            $output[] = 1;\n        } elseif($note == \"o\") {\n            if($last_note)\
    \ {\n                $output[] = count($output) - 1;\n            }\n        }\
    \ else {\n            $output[] = 1;\n            $last_note = $note;\n      \
    \  }\n    }\n    return $output;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nVery\
    \ clever solution, thanks! I forgot to mention that the input is a string representing\
    \ a musical note sequence with chords, like \"Cmaj7\". I've updated the question\
    \ accordingly.\n<|/ c |>\n<| a dscore=1 |>\nThis solution uses one additional\
    \ array to count how many times each note is played in each chord. \n<code>",
  "  $music_array = str_split($music_string, 1);\n  $music_count = count($music_array);\n\
    \  foreach ($music_array as $key => $value) {\n    $music_array[$key] = str_replace(array('o',\
    \ 'o|', 'o|', 'o|', 'o|'), array('00', '01', '10', '11', '01'), $value);\n  }\n\
    \  $music_array[$music_count - 1] = $music_array[$music_count - 1] . str_repeat('11',\
    \ 4) . str_repeat('01', 4);\n  $music_count++;\n  $music_array = str_split(implode('',\
    \ $music_array), 1);\n  $music_count = count($music_array);\n  foreach ($music_array\
    \ as $key => $value) {\n    $music_array[$key] = str_replace(array('00', '01',\
    \ '10', '11', '01'), array('o', 'o|', 'o|', 'o|', 'o|'), $value);\n  }\n  $music_array[$music_count\
    \ - 1] = $music_array[$music_count - 1] . str_repeat('11', 2) . str_repeat('01',\
    \ 2);\n  $music_count++;\n  return array_map('intval', $music_array);\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 tags=php,string |>\nSo I rewrote my answer, I\
    \ think this is easier to read and understand.\n<code>\n<?php\n\n$str = \"o o|\
    \ .| o| o| .| .| .| .| o o\";\n\n$array = explode(\" \",$str);\n$array2 = array();\n\
    \nforeach ($array as $key => $val) {\n    $array2[substr($val, 0,2)] = array();\n\
    \    if(substr($val, 0,2) == \"o\") {\n        $array2[substr($val, 0,2)][str_repeat(\"\
    1\",4)] = 1;\n    }\n    if(substr($val, 0,2) == \".\") {\n        $array2[substr($val,\
    \ 0,2)][str_repeat(\"1\",2)] = 1;\n    }\n    if(substr($val, 0,2) == \"o|\")\
    \ {\n        $array2[substr($val, 0,2)][str_repeat(\"1\",1)] = 1;\n    }\n}\n\n\
    print_r($array2);\n", "    $music_array = array();\n    $current_beat = 0;\n\n\
    \    for ($i = 0; $i < strlen($music_string); $i++) {\n        switch (substr($music_string,\
    \ $i, 1)) {\n            case 'o':\n                $music_array[] = 4 * $current_beat;\n\
    \                $current_beat += 1;\n                break;\n            case\
    \ 'o|':\n                $music_array[] = 2 * ($current_beat - 1);\n         \
    \       $current_beat += 1;\n                break;\n            case '.|':\n\
    \                $music_array[] = 1 * $current_beat;\n                $current_beat\
    \ += 1;\n                break;\n            default:\n                break;\n\
    \        }\n    }\n\n    return $music_array;\n}\n", "    // Write your code here\n\
    }", "\t$music_array = explode(' ', $music_string);\n\t$music_array_length = count($music_array);\n\
    \t$music_notes = array();\n\tfor ($i = 0; $i < $music_array_length; $i++) {\n\t\
    \t$music_notes[$i] = array_search($music_array[$i], array('o', 'o|', '.|'));\n\
    \t}\n\tfor ($i = 0; $i < $music_array_length; $i++) {\n\t\tif ($music_notes[$i]\
    \ == \".\") {\n\t\t\t$music_notes[$i] .= \".\";\n\t\t}\n\t}\n\t$music_notes[$music_array_length\
    \ - 1] = array_search($music_array[$music_array_length - 1], array('o', 'o|',\
    \ '.|'));\n\t$music_notes_length = count($music_notes);\n\tfor ($i = 0; $i < $music_notes_length;\
    \ ++$i) {\n\t\tif ($music_notes[$i] == \".|\") {\n\t\t\t$music_notes[$i] .= \"\
    o\";\n\t\t}\n\t}\n\tfor ($i = $music_notes_length - 1; $i >= 0; $i--) {\n\t\t\
    if ($music_notes[$i] == \".|\") {\n\t\t\t$music_notes[$i] .= \"o\";\n\t\t}\n\t\
    }\n\t$music_notes_length = count($music_notes);\n\t$music_notes_interval = array();\n\
    \tfor ($i = 0; $i < $music_notes_length; $i++) {\n\t\t$music_notes_interval[$i]\
    \ = array();\n\t\tfor ($j = $music_notes[$i] - 1; $j >= 0; $j--) {\n\t\t\t$music_notes_interval[$i][$j]\
    \ = 0;\n\t\t}\n\t}\n\t$music_notes_interval = array_merge($music_notes_interval[0],\
    \ $music_notes_interval);\n\t$music_notes_interval_length = count($music_notes_interval);\n\
    \t$music_notes_interval_length = max($music_notes_interval_length, $music_notes_length);\n\
    \tfor ($i = 1; $i < $music_notes_interval_length; ++$i) {\n\t\t$music_notes_interval[$i]\
    \ = $music_notes_interval[$i - 1] + $music_notes_interval[$i];\n\t}\n\t$music_notes_interval_length\
    \ = count($music_notes_interval);\n\t$music_notes_interval_length = max($music_notes_interval_length,\
    \ 1);\n\t$music_notes_interval_length = ", "    $result = [];\n    for ($i = 0;\
    \ $i < strlen($music_string); ++$i) {\n        $char = substr($music_string, $i,\
    \ 1);\n        switch ($char) {\n            case 'o':\n                $result[]\
    \ = 4;\n                break;\n            case 'o|':\n                $result[]\
    \ = 2;\n                break;\n            case '.|':\n                $result[]\
    \ = 1;\n                break;\n            case '|':\n                throw new\
    \ Exception(\"Invalid musical note encountered: $music_string\");\n        }\n\
    \    }\n    return $result;\n}\n</code>\n<|/ a dscore=2 tags=php,arrays,parsing,string\
    \ |>\n<| a dscore=2 |>\nHere's a version that does it all in one line:\n<code>\n\
    echo implode(array_map(function($x){\n    if('a'<=$x&&$x<='z')\n        return\
    \ $x-'a'+2;\n    return $x-'a';\n},'abcdefghijklmnopqrstuvwxyz'));\n</code>\n\
    You can make it a little more efficient by using a range() instead of a series\
    \ of if/elseif\n<|/ a tags=php,arrays,parsing,string |>\n<| a dscore=1 |>\n<code>",
  "  $music = array();\n  $music_string = mb_convert_case($music_string, MB_CASE_UPPER,\
    \ \"UTF-8\");\n  $music_string = preg_replace('/(\\[.*?\\]|^)o(?=\\|$)/', '$1',\
    \ $music_string);\n  $music_string = preg_replace('/(\\[.*?\\]|^)o\\|(?=\\|$)/',\
    \ '$1', $music_string);\n  $music_string = preg_replace('/(\\[.*?\\]|^).\\|(?=\\\
    |$)/', '$1', $music_string);\n  preg_match_all(\"/\\[([^\\[\\]]+)\\](?=\\|$)/\"\
    , $music_string, $matches);\n  foreach($matches[1] as $note) {\n    if ($note\
    \ === \"o\")\n      $music[] = array(4);\n    elseif ($note === \"o|\")\n    \
    \  $music[] = array(2);\n    elseif ($note === \".|\")\n      $music[] = array(1);\n\
    \  }\n  return $music;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
