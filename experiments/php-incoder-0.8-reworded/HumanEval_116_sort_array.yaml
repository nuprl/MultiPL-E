name: HumanEval_116_sort_array
language: php
prompt: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
  \ according to\n// number of ones in their binary representation in ascending order.\n\
  // For similar number of ones, sort based on decimal value.\n// It must be implemented\
  \ like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1, 2, 3, 4, 5)\n\
  // >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5, -4, -3, -2)\n// >>>\
  \ sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\nfunction sort_array($arr)\
  \ {\n"
tests: "function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
  \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3,\
  \ -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77, 4,\
  \ 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32, 5))\
  \ !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32)) !==\
  \ array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  if (empty($arr)) {\n    return $arr;\n  }\n\n  $len = count($arr);\n\
    \  if ($len == 1) {\n    return $arr;\n  }\n\n  foreach ($arr as $key => $item)\
    \ {\n    if ($item < 0) {\n      $arr[$key] = $item;\n      unset($arr[$key]);\n\
    \    }\n  }\n  asort($arr);\n  for ($i = 0; $i < $len; $i++) {\n    $arr[$i] =\
    \ $arr[--$len];\n  }\n  return $arr;\n}\n", "    sort($arr, function($a, $b) use\
    \ ($arr) {\n        foreach ($arr as $v) {\n            if ($v & 1) {\n      \
    \          return $a - $b;\n            }\n        }\n        return 0;\n    });\n\
    \    return $arr;\n}\n", "    return sort(array_map(function($i) {\n         \
    \   $bin = decbin($i);\n            return strlen($bin) - strrpos($bin, '1') +\
    \ 1;\n        },\n        $arr));\n}\n", "  global $count;\n  $count = 0;\n  usort($arr,\
    \ function($a, $b) use (&$count) {\n    return -$count++ * $a - $count++ * $b;\n\
    \  });\n  return $arr;\n}\n", "  ksort($arr);\n  foreach ($arr as $key => $val)\
    \ {\n    if ($val == 0) {\n      $arr[$key] = 0;\n    } else {\n      $arr[$key]\
    \ = -$val;\n    }\n  }\n  return $arr;\n}\n</code>\n<|/ a tags=algorithm,php,sorting,arrays,language-agnostic\
    \ |>\n<| c |>\nWhy do you have `if ($val == 0)` there at all? You never use it\
    \ for anything else other than checking if it's 0.\n<|/ c |>\n<| c |>\nIt was\
    \ added when I was writing that code. It does nothing, I forgot to remove it.\
    \ I've removed it now.\n<|/ c |>\n<| c |>\nWon't this sort a negative integer\
    \ before a positive integer? Or will that be fine?\n<|/ c |>\n<| c |>\nAh, that's\
    \ what I get for copy-pasting code from my own projects. Fixed.\n<|/ c |>\n<|\
    \ c |>\nThis seems to work fine, but I'm not sure how efficient it is.\n<|/ c\
    \ |>\n<| a dscore=2 tags=algorithm,php,sorting,arrays,language-agnostic |>\n<code>",
  "    foreach ($arr as $key => $val) {\n        $cnt = 0;\n        if ($val < 0)\
    \ {\n            $val *= -1;\n            $sign = '-';\n        } else {\n   \
    \         $sign = '';\n        }\n        $bin = str_pad(decbin($val), 14, '0',\
    \ STR_PAD_LEFT);\n        while (strlen($bin) > 0) {\n            $temp = substr($bin,\
    \ 0, 7);\n            $cnt = strpos(strtoupper($temp), '1');\n            $bin\
    \ = substr($bin, 7);\n            if ($cnt === false) {\n                $cnt++;\n\
    \            }\n        }\n        $arr[$key] = $sign + $cnt;\n    }\n    sort($arr,\
    \ SORT_NUMERIC);\n    return $arr;\n}\n</code>\nTest\n<code>\n$test = array(\n\
    \    \"1\",\n    \"2\",\n    \"3\",\n    \"4\",\n    \"5\",\n    \"6\",\n    \"\
    -7\",\n    \"-8\",\n    \"-9\",\n    \"-10\",\n    \"-11\",\n    \"-12\",\n  \
    \  \"-13\",\n    \"-14\",\n    \"-15\",\n    \"-16\",\n    \"-17\",\n    \"-18\"\
    ,\n    \"-19\",\n    \"-20\",\n    \"-21\",\n    \"-22\",\n    \"-23\",\n    \"\
    -24\",\n    \"-25\",\n    \"-26\",\n    \"-27\",\n    \"-28\",\n    \"-29\",\n\
    \    \"-30\",\n    \"-31\",\n    \"-32\",\n    \"-33\",\n    \"-34\",\n    \"\
    -35\",\n    \"-36\",\n    \"-37\",\n    \"-38\",\n    \"-39\",\n    \"-40\",\n\
    \    \"-41\",\n    \"-42\",\n    \"-43\",\n    \"-44\",\n    \"-45\",\n    \"\
    -46\",\n    \"-47\",\n    \"-48\",\n    \"-49\",\n    \"-50\",\n    \"-51\",\n\
    \    \"-52\",\n    \"-53\",\n    \"-54\",\n    \"-55\",\n    \"-56\",\n    \"\
    -57\",\n    \"-58\",\n    \"-59\",\n    \"-60\",\n    \"-61\",\n    \"-62\",\n\
    \    \"-63\",\n    \"-64\",\n    \"-65\",\n    \"-66\",\n    \"-67\",\n    \"\
    -68\",\n    \"-69\",\n    \"-70\",\n    \"-71\",\n    \"-72\",\n    \"-73\",\n\
    \    \"-74\",\n    \"-75\",\n    \"-76\",\n    \"-77\",\n    \"-78\",\n    \"-",
  "    $tmp = array();\n    foreach ($arr as $a) {\n        $tmp[$a] = array_count_values(array_map('decbin',\
    \ $a))[1 . $a];\n    }\n    asort($tmp);\n    $result = array();\n    foreach\
    \ ($tmp as $k => $v) {\n        $result[] = $k;\n    }\n    return $result;\n\
    }\n", "  $one_count = array_count_values($arr);\n  foreach ($one_count as $key\
    \ => $value) {\n    if ($value == 1) {\n      $order[$key] = 0;\n      $order['-'\
    \ . $key] = -1;\n    }\n  }\n  foreach ($order as $key => $val) {\n    if ($val\
    \ == -1) {\n      $order[$key] = 1;\n      $order['-' . $key] = 1;\n    }\n  }\n\
    \  asort($order);\n  $new_arr = array();\n  foreach ($arr as $key => $val) {\n\
    \    if ($val == $order[$key]) {\n      $new_arr[] = $key;\n    }\n  }\n  return\
    \ $new_arr;\n}\n", "    $len = count($arr);\n\n    if ($len < 2) {\n        return\
    \ $arr;\n    }\n\n    $ones = array();\n    $zeros = array();\n    $result = 0;\n\
    \    $resultLen = 0;\n\n    for ($i = 0; $i < $len; $i++) {\n        $one = ($arr[$i]\
    \ & 1) === 1;\n        $zero = ($arr[$i] & 2) === 0;\n\n        if ($one) {\n\
    \            $ones[] = $i;\n        } else {\n            $zeros[] = $i;\n   \
    \     }\n\n        if ($zero && ($result > 0)) {\n            $result -= 2;\n\
    \            $resultLen++;\n        }\n\n        if ($zero && ($result <= 0))\
    \ {\n            $result += 2;\n            $resultLen++;\n        }\n    }\n\n\
    \    if ($result > 0) {\n        array_push($ones, $len);\n        $ones[$resultLen]\
    \ = 0;\n        return sort_array($ones);\n    }\n\n    if ($result < 0) {\n \
    \       array_push($zeros, 0);\n        $zeros[$resultLen] = $len - 1;\n     \
    \   return sort_array($zeros);\n    }\n\n    $sorted = array_merge($ones, $zeros);\n\
    \    sort($sorted);\n    return $arr;\n}\n", "    foreach ($arr as $k => $v) {\n\
    \        if ($v < 0) {\n            $arr[$k] = -$v;\n        }\n    }\n    array_multisort($arr,\
    \ 0, $arr);\n}\n", "    sort($arr, function($a, $b) { return (decbin($b))[0] <=\
    \ decbin($a)[0]; });\n    return $arr;\n}\n</code>\nTest\n<code>\n$arr1 = [1,\
    \ 5, 2, 3, 4];\n$arr2 = [-8, -7, -6, -5, -4, -3, 2, 1];\n$arr3 = [-1, -10, -100,\
    \ 10, 100];\n$arr4 = [2, 7, -1, 5, 8, -4, -6, -10];\n$arr5 = [-8, -7, -6, -5,\
    \ -4, -3, 2, 1];\n$arr6 = [-1, -10, -100, 10, 100];\n$arr7 = [1, 5, 2, 3, 4];\n\
    $arr8 = [-8, -7, -6, -5, -4, -3, 2, 1];\n$arr9 = [1, 5, 2, 3, 4];\n$arr10 = [-8,\
    \ -7, -6, -5, -4, -3, 2, 1];\n$arr11 = [1, 5, 2, 3, 4];\n$arr12 = [-8, -7, -6,\
    \ -5, -4, -3, 2, 1];\n$arr13 = [1, 5, 2, 3, 4];\n$arr14 = [-8, -7, -6, -5, -4,\
    \ -3, 2, 1];\n$arr15 = [1, 5, 2, 3, 4];\n$arr16 = [-8, -7, -6, -5, -4, -3, 2,\
    \ 1];\n$arr17 = [1, 5, 2, 3, 4];\n$arr18 = [-8, -7, -6, -5, -4, -3, 2, 1];\n$arr19\
    \ = [1, 5, 2, 3, 4];\n$arr20 = [-8, -7, -6, -5, -4, -3, 2, 1];\n$arr21 = [-8,\
    \ -7, -6, -5, -4, -3, 2, 1];\n\nvar_dump(\n    sort_array($arr1),\n    sort_array($arr2),\n\
    \    sort_array($arr3),\n    sort_array($arr4),\n    sort_array($arr5),\n    sort_array($arr6),\n\
    \    sort_array($arr7),\n    sort_array($arr8),\n    sort_array($arr9),\n    sort_array($arr10),\n\
    \    sort_array($arr11),\n    sort_array($arr12),\n    sort_array($arr13),\n \
    \   sort_array($arr14),\n    sort_array($arr15),\n    sort_array($arr16),\n  \
    \  sort_array($arr17),\n    sort_array($arr18),\n    sort_array($arr19),\n   \
    \ sort_array($arr20),\n    sort_array($arr21),\n);\n</code>\nOutput\n<code>\n\
    array(4) {\n  [0]=>\n  int(1)\n  [1]=>", "    $result = [];\n    foreach ($arr\
    \ as $key => $val) {\n        $result[$key] = count(bin2dec($val)) - 1;\n    }\n\
    \    asort($result);\n    $result = array_flip($result);\n    return array_values($result);\n\
    }\n\n$array = array(1, 5, 2, 3, 4);\n$result = sort_array($array);\nvar_dump($result);\n\
    </code>\nOutput:\n<code>\narray(5) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(0)\n \
    \ [2]=>\n  int(2)\n  [3]=>\n  int(3)\n  [4]=>\n  int(4)\n}\n</code>\n<|/ a dscore=0\
    \ tags=php,arrays |>\n<| c |>\nThanks, your solutions works great. One thing I\
    \ don't understand is how it is returning the array backwards?\n<|/ c |>\n<| c\
    \ |>\nBecause in array `$array` there are numbers in descending order, but in\
    \ result the order of keys is ascending (`array_flip($result)`). In other words,\
    \ in `$array` there are `1`, `5`, `2`, `3`, `4` numbers. So by subtracting number\
    \ of ones from `count(bin2dec($val)) - 1;` we get the number from `$array`, not\
    \ from result of `array_flip($result)`.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>",
  "    $ones = $arr;\n    $i = 0;\n    $ones_count = array_count_values($ones);\n\
    \    foreach ($ones as $i => $val) {\n        if ($ones_count[$val] == 1) {\n\
    \            $tmp = $ones[$i];\n            $ones[$i] = $ones[$val];\n       \
    \     $ones[$val] = $tmp;\n        }\n    }\n    sort($ones);\n    return $ones;\n\
    }\n", "    $sorted = array();\n    $ones = $zeros = 0;\n    $size = count($arr);\n\
    \    foreach ($arr as $val) {\n        if ($val != 0) {\n            $ones++;\n\
    \        } else {\n            $zeros++;\n        }\n    }\n\n    for ($i = 0;\
    \ $i < $size; ++$i) {\n        if ($ones > $zeros) {\n            $sorted[$i]\
    \ = $ones;\n            $ones = 0;\n        } else {\n            $sorted[$i]\
    \ = $zeros;\n            $zeros = 0;\n        }\n    }\n\n    if ($ones > $zeros)\
    \ {\n        for ($i = 0; $i < $size; ++$i) {\n            if ($ones == $zeros)\
    \ {\n                $sorted[$i] = $ones;\n                $ones = 0;\n      \
    \          $zeros--;\n            } elseif ($ones < $zeros) {\n              \
    \  $sorted[$i] = $zeros;\n                $zeros = 0;\n            }\n       \
    \ }\n    }\n\n    return $sorted;\n}\n", "    sort($arr, function($x, $y) {\n\
    \        return ($x & 1) == ($y & 1) ? 0 : ($x > $y ? 1 : -1);\n    });\n    return\
    \ $arr;\n}\n</code>\n<|/ a tags=php,arrays dscore=1 |>\n<| a dscore=1 |>\nMy take\
    \ on it:\n<code>", "    $ones = array_count_values($arr);\n    $ones = array_filter($ones,\
    \ function ($v) { return $v === 1; });\n    ksort($ones);\n    return array_merge(array_keys($ones));\n\
    }", "    ksort($arr);\n    foreach ($arr as &$item) {\n        $item -= intval($item);\n\
    \    }\n    return $arr;\n}\n", "    sort($arr);\n    return $arr;\n}\n", "  \
    \  $len = count($arr);\n    if ($len <= 1) return $arr;\n    $tmp = $arr[0];\n\
    \    for ($i = 1; $i < $len; $i++) {\n        $tmp2 = $arr[$i];\n        $tmp1\
    \ = 0;\n        $j = 0;\n        while ($tmp2 != 0) {\n            if ($tmp2 &\
    \ 1) {\n                $tmp1 += 1 << $j;\n            }\n            $tmp2 =\
    \ $tmp2 >> 1;\n            $j++;\n        }\n        $arr[$i] = $tmp1;\n    }\n\
    \    return $arr;\n}\n", "  foreach ($arr as &$value) {\n    $value = array_search($value,\
    \ $arr);\n  }\n  array_multisort($arr, SORT_DESC, $arr);\n  return $arr;\n}\n",
  "    // Your code here\n}", "    if (!is_array($arr) || !count($arr)) {\n      \
    \  return $arr;\n    }\n    // If there are only zeros, sort based on decimals.\n\
    \    if (count(array_filter($arr, 'is_int')) == count($arr)) {\n        foreach\
    \ ($arr as $key => $val) {\n            if ($val === 0 || is_int($val)) {\n  \
    \              $arr[$key] = $val - pow(2, $key) * 2;\n            }\n        }\n\
    \    }\n    foreach ($arr as $key => $val) {\n        $arr[$key] = $val - pow(2,\
    \ $key);\n    }\n    // Sort based on the number of 1s.\n    arsort($arr);\n \
    \   // Then sort based on the decimal value.\n    arsort($arr);\n    return $arr;\n\
    }", "    usort($arr, function ($x, $y) {\n        $ones = count_ones($x);\n  \
    \      $others = count_ones($y);\n\n        if ($ones === $others) {\n       \
    \     $tmp = str_pad(decbin($x), 32, \"0\", STR_PAD_LEFT);\n            $tmp =\
    \ str_pad(decbin($y), 32, \"0\", STR_PAD_LEFT);\n            if (strcmp($tmp,\
    \ substr($tmp, -32))) {\n                return str_pad(decbin($x - $y), 32, \"\
    0\", STR_PAD_LEFT);\n            }\n            return str_pad(decbin($y - $x),\
    \ 32, \"0\", STR_PAD_LEFT);\n        }\n\n        return $ones - $others;\n  \
    \  });\n\n    return $arr;\n}\n", "  for ($i = 0; $i < count($arr); $i++) {\n\
    \    $ones = count_ones($arr[$i]);\n    $max_ones = max($ones);\n    $min_ones\
    \ = min($ones);\n    // If max is greater or equal than the min ones, it is out\
    \ of order.\n    if ($max_ones <= $min_ones) {\n      return $arr;\n    }\n\n\
    \    // If max is equal to min ones, sort by decimal value.\n    if ($max_ones\
    \ == $min_ones) {\n      // If decimal values are equal, sort by their sign (descending).\n\
    \      if ($max_ones > 0) {\n        return array_reverse($arr);\n      }\n  \
    \    return $arr;\n    }\n    // If max is less than min, sort by their sign (descending).\n\
    \    return array_reverse($arr);\n  }\n}\n", "  // Sort via natural order first\n\
    \  natsort($arr);\n  // Then, sort by number of ones\n  $one_cnt = array_count_values($arr);\n\
    \  foreach ($one_cnt as $cnt => $cnt) {\n    foreach ($arr as $key => $val) {\n\
    \      if ($val == $cnt) {\n        unset($arr[$key]);\n      }\n    }\n  }\n\
    \  return $arr;\n}\n", "  for ($i = count($arr) - 1; $i >= 0; $i -= 1) {\n   \
    \ for ($j = 0; $j <= $i; $j += 2) {\n      if ($arr[$i] & $arr[$j]) {\n      \
    \  $tmp = $arr[$j];\n        $arr[$j] = $arr[$i];\n        $arr[$i] = $tmp;\n\
    \      }\n    }\n  }\n  return $arr;\n}", "    $result = [];\n\n    foreach ($arr\
    \ as $key => $num) {\n        $binary = decbin($num);\n        $digits = str_split($binary,\
    \ 2);\n        $zeros = count(array_filter($digits, 'strlen'));\n\n        if\
    \ ($zeros > 1) {\n            $result = array_merge($result, array_merge($digits,\
    \ $zeros));\n        } else {\n            $result[] = $num;\n        }\n    }\n\
    \n    return $result;\n}\n", "    $size = count($arr);\n    for ($i = 0; $i <\
    \ $size; $i++) {\n        $ones = array_sum(array_slice($arr, 0, $i, 1));\n  \
    \      $descending = $ones == 0;\n        if (!$descending) {\n            $result\
    \ = $arr[$i];\n            $arr[$i] = $arr[$size - 1];\n            $arr[$size\
    \ - 1] = $result;\n        }\n        $bin = sprintf(\"%b\", $arr[$i]);\n    \
    \    $count = 1;\n        for ($j = $i + 1; $j < $size; $j++) {\n            if\
    \ (strlen($bin) != strlen(sprintf(\"%b\", $arr[$j]))) {\n                $bin\
    \ = str_pad(bin2hex($bin), strlen(sprintf(\"%b\", $arr[$j])), \"0\", STR_PAD_LEFT);\n\
    \            } else {\n                $bin = bin2hex($bin);\n            }\n\
    \            $count += strspn($bin, \"01\", $j - $i);\n        }\n        $count\
    \ = $count-1;\n        $dec = ($count % 1) * $ones;\n        if ($descending)\
    \ {\n            $dec = -$dec;\n        }\n        $arr[$i] = $dec;\n    }\n \
    \   return $arr;\n}\n", "    return $arr;\n}", "  // TODO: make it possible to\
    \ sort only with one argument\n  // instead of using whole array\n  $count = count($arr);\n\
    \  $result = [];\n  for ($i = 0; $i < $count; $i++) {\n    for ($j = 0; $j < $count;\
    \ $j++) {\n      // binary representation for the number\n      $bin = decbin($arr[$i]);\n\
    \      // number of ones in its binary representation\n      $count = strlen($bin)\
    \ - strrpos($bin, '1');\n      // number of decimals\n      $dec = ($count) -\
    \ 1; // decimal number from binary representation\n      $result[$j] += $dec;\n\
    \    }\n  }\n  return $result;\n}", "  return $arr;\n}\n$arr = array(1, 5, 2,\
    \ 3, 4);\nprint_r(sort_array($arr));", "  return array_reduce($arr, function($a,\
    \ $b) {\n    return ($a < $b) ? -1 : 1;\n  }, 0);\n}", "\t$count = array_count_values($arr);\n\
    \t$sorted = array();\n\tforeach ($arr as $key => $val) {\n\t\t$sorted[$key] =\
    \ $count[$val];\n\t}\n\tarray_multisort($sorted, $arr);\n\treturn $arr;\n}\n",
  "    $result = array();\n    foreach ($arr as $key => $value) {\n        $bin =\
    \ decbin($value);\n        $binLen = strlen($bin);\n        $binLen = ($binLen\
    \ / 2);\n        for ($i = 0; $i < $binLen; $i++) {\n            $pos = $i * 2;\n\
    \            $result[$pos] = $key * 2;\n            $result[$pos + 1] = bcadd($bin,\
    \ $i, 0, '0', STR_PAD_LEFT);\n        }\n    }\n\n    $result = $result + array_fill(0,\
    \ count($result), 0);\n    sort($result);\n\n    return array_reverse($result);\n\
    }\n", "  $tmp = array();\n  $i = 0;\n  foreach ($arr as $v) {\n    $tmp[$i] =\
    \ is_int($v) ? $v : count($tmp);\n    $i++;\n  }\n  uasort($tmp, 'cmp');\n  return\
    \ array_values($tmp);\n}", "    $arr = array_reverse($arr, true);\n\n    // To\
    \ sort in descending order, use the '-' sign before the first element of the array.\n\
    \    return array_merge(array(-$arr[0]), $arr);\n}\n\n/**\n * Return the sum of\
    \ the given array.\n * \n * @param array $arr An array of numbers.\n * \n * @return\
    \ int The sum of the given numbers.\n */", "    $arrLen = count($arr);\n    for\
    \ ($i = 0; $i < $arrLen; $i++) {\n        $binaryStr = '';\n        for ($j =\
    \ 0; $j < 8; $j++) {\n            $binaryStr .= ($arr[$i] & 1) ? '1' : '0';\n\
    \            $arr[$i] >>= 1;\n        }\n        // We convert binary string to\
    \ string and compare them\n        $arr[$i] = strlen($binaryStr);\n    }\n   \
    \ for ($i = 0; $i < $arrLen; $i++) {\n        $arr[$i] = $arr[$i] - 1;\n    }\n\
    \    asort($arr);\n    return $arr;\n}", "\t$count = array_count_values($arr);\n\
    \tarsort($count);\n\treturn array_keys($count);\n}", "    ksort($arr, function($a,\
    \ $b){\n        $ones_count = preg_match_all('/1.*/', $a, $ones_count);\n    \
    \    $ones_count = preg_match_all('/1.*/', $b, $ones_count);\n        if($ones_count[0]\
    \ < $ones_count[1]){\n            return -1;\n        }else if($ones_count[0]\
    \ > $ones_count[1]){\n            return 1;\n        }else{\n            $a_dec\
    \ = $a * 1;\n            $b_dec = $b * 1;\n            return strcmp($a_dec, $b_dec);\n\
    \        }\n    });\n    return $arr;\n}\n</code>\n<|/ a dscore=0 tags=algorithm,sorting,php,kata\
    \ |>\n<| c |>\nIf you're going to use regexes, you might as well use a proper\
    \ sorting function.\n<|/ c |>\n<| a dscore=0 |>\nThis is a solution in Ruby which\
    \ uses Enumerable#sort to sort an array of non-negative integers according to\
    \ number of ones in their binary representation in ascending order\n<code>\ndef\
    \ count_ones(a)\n  a.group_by { |x| (x >> 1) }.\n       map { |k, v| v.size }.\n\
    \       compact.\n       max { |a, b| b }\nend\n\ndef sort_array(arr)\n  arr =\
    \ arr.map! { |x| x.to_i }\n  arr.sort_by { |x| count_ones(x) }\nend\n</code>\n\
    <|/ a tags=algorithm,sorting,php,kata |>\n<| a |>\nThis is another solution using\
    \ sort function.\n<code>\n<?php\n$input = [-6, -5, -4, -3, -2, -1, 0, 1, 2];\n\
    sort($input);\nforeach($input as $index => $value) {\n    if($value == 0) {\n\
    \        unset($input[$index]);\n    }\n}\n</code>\nThe solution was found here:\
    \ http://www.programmerinterview.com/index.php/php-questions/php-sort-array-zero-elements-last-part/\n\
    <|/ a dscore=0 tags=algorithm,sorting,php,kata |>\n<| c |>\nThis solution will\
    \ fail for the case when input is `[0,0,0,0,0,1]`\n<|/ c |>\n<| c |>\nyes. the\
    \ answer was given on the link you provided\n<|/ c |>\n<| c |>\nYeah, the author\
    \ of the question also wrote that \"it must be implemented like this\"\n<|/ c\
    \ |>\n<| c |>\nThen the answer is not valid for the question\n<|/ c |>\n<| a ",
  "    if (is_array($arr)) {\n        $sort = array_count_values($arr);\n        foreach\
    \ ($sort as $key => $value) {\n            $sort[$key] = $value;\n        }\n\
    \        arsort($sort);\n        foreach ($sort as $key => $value) {\n       \
    \     $arr[] = $key;\n        }\n    }\n    return $arr;\n}\n", "  for ($i = 0;\
    \ $i < count($arr); $i++) {\n    $count = 0;\n    for ($j = 0; $j < $i; $j++)\
    \ {\n      $count += $arr[$j] & 1;\n    }\n    if ($count > 0) {\n      $j = $i;\n\
    \      for ($k = $i; $k >= $j; $k--) {\n        $arr[$k] = $arr[$k - 1];\n   \
    \   }\n      $arr[$j] >>= 1;\n    }\n  }\n  return $arr;\n}", "    $result = [];\n\
    \n    for ($i = 0, $n = count($arr); $i < $n; $i++) {\n        $c = 1;\n\n   \
    \     $tmp = 0;\n        for ($j = 0; $j < $i; $j++) {\n            if ($arr[$j]\
    \ & $c) {\n                $tmp += pow(2, $j);\n            }\n        }\n\n \
    \       if ($tmp > 0) {\n            $result[] = $arr[$i];\n        }\n    }\n\
    \n    return $result;\n}\n", "    foreach ($arr as $key => $val) {\n        if\
    \ ($val == 0) continue;\n        $binary = decbin($val);\n        $ones = strlen($binary)\
    \ - strrpos($binary, '1') + 1;\n        if ($ones > 0) {\n            $tmp = substr($binary,\
    \ 0, $ones);\n            $binary = $binary.'1';\n            $binary = substr($binary,\
    \ $ones);\n            asort($arr);\n            $arr[$key] = $tmp . $binary;\n\
    \        }\n    }\n    return $arr;\n}\n</code>\n<|/ a tags=binary,sorting,php,arrays\
    \ |>\n<| a tags=binary,sorting,php,arrays dscore=0 |>\nThe array in PHP comes\
    \ in an array, so you cannot just call sort() on it. But you can use this function\
    \ to do the sorting:\n<code>", "    // O(n * log(n)) solution\n    foreach ($arr\
    \ as &$el) {\n        $el = str_pad(decbin($el), 8, '0', STR_PAD_LEFT);\n    }\n\
    \    $el = array_sum(str_split($el));\n    ksort($arr);\n    // O(n * log(n))\
    \ solution\n    $arr = array_map(function ($v) {\n        return decbin($v);\n\
    \    }, $arr);\n    $arr = array_sum(str_split($arr));\n    return $arr;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nthis solution is good if you don't have any restrictions\
    \ on the array elements or the size of it.\n<|/ c |>\n<| a dscore=0 |>\nI know\
    \ this question was asked a long time ago, but I came here looking for a different\
    \ solution to this problem. I was looking for some php code that I could use to\
    \ sort an array of binary numbers into ascending order according to how many 1's\
    \ were in them.\nI found this thread on another website that actually provides\
    \ exactly what I was looking for:\nhttps://gist.github.com/bangarang/1159817\n\
    I believe that this may help someone else looking for this answer.\n<|/ a tags=algorithm,sorting,arrays,php,numbers\
    \ |>\n<| a tags=algorithm,sorting,arrays,php,numbers |>\nFor PHP 7.2 this solution\
    \ is very easy to read and very effective.\n<code>\n/**\n * array<int, int>\n\
    \ */", "    sort($arr);\n    return $arr;\n}\n", "  $ret = array();\n  $ones =\
    \ 0;\n  for ($i = 0; $i < count($arr); $i++) {\n    if ($arr[$i] == 1) {\n   \
    \   $ones++;\n    } else {\n      $ret[] = $arr[$i];\n    }\n  }\n\n  if ($ones\
    \ == count($arr)) {\n    return $ret;\n  }\n\n  for ($i = 0; $i < count($arr);\
    \ $i++) {\n    $remain = intval(count($arr) - $ones);\n    $tmp = $remain;\n \
    \   while (isset($arr[$i])) {\n      if ($arr[$i] == 1) {\n        $tmp--;\n \
    \     } else {\n        $ret[] = $arr[$i];\n      }\n      $i++;\n    }\n    while\
    \ ($tmp >= 0) {\n      $ret[] = -1;\n      $tmp--;\n    }\n  }\n  return $ret;\n\
    }\n", "    if (count($arr) == 0) return $arr;\n    if (count($arr) == 1) {\n \
    \       if ($arr[0] == 1) return $arr;\n        return $arr;\n    }\n    $ones\
    \ = array_count_values($arr);\n    $max = max($ones);\n    $keys = [];\n    $ret\
    \ = [];\n    foreach ($ones as $num => $cnt) {\n        if ($cnt == $max) {\n\
    \            $ret[] = $num;\n        }\n    }\n    ksort($keys);\n    return $ret;\n\
    }\n</code>\n<|/ a dscore=4 |>\n<| c |>\nI like this one, but I don't understand\
    \ how it works\n<|/ c |>\n<| c |>\nthe code is very simple and clear. i thought\
    \ this was the best way to solve the problem\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ dscore=4 |>\n<code>\n$arr = array(4, 6, 5, 3, 8, 2, 7, 1);\n$arr = array_count_values($arr);\n\
    arsort($arr);\nprint_r($arr);\n</code>\n<|/ a |>\n<| c |>\nI think this answer\
    \ is more elegant than the accepted answer.\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ dscore=3 |>\nIf you need to sort your array by a specific value but have another\
    \ value in the array as your sort key this can be done like so:\n<code>\n<?php\n",
  "  sort($arr);\n\n  $n = count($arr);\n  for ($i = 0; $i < $n; $i++) {\n    $sum\
    \ = 0;\n    $k = $i;\n    for ($j = 0; $j < $n; $j++) {\n      $sum = $sum + $arr[$j]\
    \ * pow(2, $j);\n    }\n    $arr[$i] = $sum;\n  }\n\n  return $arr;\n}\n", " \
    \   return array_merge(\n        array_count_values($arr)\n    );\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nYes, this would be a better way, and I think my solution\
    \ also works (even though it was posted before the edit), but I upvoted this because\
    \ I like this solution a lot.\n<|/ c |>\n<| a tags=algorithm,php |>\nHere is my\
    \ solution:\n<code>\n$arr = [1, 5, 2, 3, 4];\n", "    $sorted = array();\n\n \
    \   foreach ($arr as $item) {\n        $binary = decbin($item);\n        $length\
    \ = strlen($binary);\n\n        $sorted[$length] = $item;\n    }\n\n    ksort($sorted);\n\
    \n    return $sorted;\n}", "    usort($arr, function($a, $b) {\n        $c = bindec($a)\
    \ <=> bindec($b);\n        if ($c === 0) {\n            $c = decbin($a) <=> decbin($b);\n\
    \        }\n        return $c;\n    });\n    return $arr;\n}", "    return array_filter($arr,\
    \ function ($var) {\n        return ! is_nan($var);\n    });\n}\n", "  sort($arr);\n\
    \  $tmp = [];\n  for ($i = 0; $i < count($arr); $i++) {\n    $tmp[$i] = $arr[$i];\n\
    \  }\n  return $tmp;\n}\n", "    $newArr = array();\n    $counter = array();\n\
    \    for ($x = 0; $x < count($arr); $x++) {\n        if ($counter[$arr[($x)]])\
    \ {\n            $newArr[$x] = $counter[$arr[($x)]];\n            $counter[$arr[($x)]]--;\n\
    \        } else {\n            $newArr[$x] = $arr[($x)];\n            $counter[$arr[($x)]]\
    \ = 1;\n        }\n    }\n    return $newArr;\n}\n</code>\n<|/ a dscore=0 tags=algorithm,sorting\
    \ |>\n<| a tags=algorithm,sorting |>\n<code>", "    foreach ($arr as $key => $val)\
    \ {\n        if ($val < 0) {\n            $arr[$key] = -$val;\n        }\n   \
    \ }\n\n    usort($arr, 'cmp');\n\n    return $arr;\n}\n</code>\n<|/ a tags=sorting,php\
    \ dscore=2 |>\n<| c |>\nIt looks like this is for Python as well. How would you\
    \ do this in PHP?\n<|/ c |>\n<| c |>\nThis is a PHP solution, not a Python one.\
    \ `usort()` was added from PHP 5.2.2 onwards.\n<|/ c |>\n<| a dscore=2 |>\nThis\
    \ question was asked a while ago but I just wanted to add that I've found another\
    \ solution that also works in python using lambda and list.sort:\n<code>\ndef\
    \ sort_array(array):\n    array.sort(key=lambda v: int(\"\".join(str(i) for i\
    \ in reversed(list(str(v))))))\n    return array\n</code>\n<|/ a tags=sorting,php\
    \ |>\n<| a tags=sorting,php |>\nI used the sort function and made a small script\
    \ to sort numbers in PHP 7.1:\n<code>", "  return array_map(function ($v) {\n\
    \    return -$v + (($v & 1) ? str_split(decbin($v), 8)[1] : 0);\n  }, $arr);\n\
    }\n", "    sort($arr, function ($a, $b) {\n        $ones = str_pad(decbin($a),\
    \ 8, '0', STR_PAD_LEFT);\n        $ones_length = strlen($ones);\n        $zeros\
    \ = str_pad(decbin($b), 8, '0', STR_PAD_LEFT);\n        $zeros_length = strlen($zeros);\n\
    \n        if ($ones_length < $zeros_length)\n            return 1;\n        else\
    \ if ($ones_length == $zeros_length)\n            return 0;\n        else\n  \
    \          return -1;\n    });\n    return $arr;\n}\n", "    $sort = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sort[$key] = count(decbin($value));\n\
    \    }\n    return array_multisort($sort, $arr);\n}\n</code>\nThe same way you\
    \ can do the same thing with decimal values of negative numbers:\n<code>", " \
    \   $result = array();\n    foreach($arr as $key => $value) {\n        $result[$value]\
    \ = $key;\n    }\n    asort($result);\n    return array_values($result);\n}\n",
  "    sort($arr, function($a, $b) { return $a - $b; });\n\n    return $arr;\n}\n\
    </code>\nSolution:\n<code>\n<?php\n", "    $count = count($arr);\n    if ($count\
    \ == 0) {\n        return array();\n    }\n    $ones = $arr;\n    for ($i = 0;\
    \ $i < $count - 1; $i++) {\n        if ($ones[$i] % 2 == 1) {\n            for\
    \ ($j = $i + 1; $j < $count; $j++) {\n                if ($ones[$j] % 2 == 1)\
    \ {\n                    $tmp = $ones[$i];\n                    $ones[$i] = $ones[$j];\n\
    \                    $ones[$j] = $tmp;\n                }\n            }\n   \
    \     }\n    }\n    for ($i = 0; $i < $count; $i++) {\n        $ones[$i] = $ones[$i]\
    \ - 1;\n    }\n    return $ones;\n}\n", "  $arrCount = array_count_values($arr);\n\
    \  $arrKeys = array_keys($arrCount);\n\n  foreach ($arrKeys as $k) {\n    // sort\
    \ according to how many 1s there are\n    if ($arrCount[$k] > 0) {\n      krsort($arr);\n\
    \      break;\n    }\n  }\n\n  return $arr;\n}\n", "    $retArr = array();\n \
    \   foreach ($arr as $val) {\n        $bin = decbin($val);\n        $binLen =\
    \ strlen($bin);\n        for ($i = 0; $i < $binLen; $i++) {\n            if ($bin[$i]\
    \ === \"1\") {\n                $retArr[] = $val;\n                break;\n  \
    \          }\n        }\n    }\n    foreach ($retArr as $val) {\n        $decVal\
    \ = dechex($val);\n        $decValLen = strlen($decVal);\n        for ($j = 0;\
    \ $j < $decValLen; $j++) {\n            if ($decVal[$j] === \"1\") {\n       \
    \         $retArr[] = $val;\n                break;\n            }\n        }\n\
    \    }\n    return $retArr;\n}\n", "    $sorted = array();\n    $size = count($arr);\n\
    \    for ($i = 0; $i < $size; $i++) {\n        $bin = decbin($arr[$i]);\n    \
    \    $bin = substr($bin, 0, strlen($bin) - 1);\n        $binary = '' . $bin .\
    \ '';\n        $binary = str_split($binary);\n        $count = array_count_values($binary);\n\
    \        asort($count);\n        foreach ($count as $num => $nums) {\n       \
    \     $sorted[$i] = $num;\n        }\n    }\n    return $sorted;\n}\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\n<code>", "    $count = array_count_values($arr);\n\
    \    arsort($count);\n    return array_keys($count);\n}", "    $sorted_arr = [];\n\
    \    foreach ($arr as $num) {\n        $bin_arr = decbin($num);\n        $count_arr\
    \ = str_split($bin_arr, 4);\n        $count_arr = array_filter($count_arr);\n\
    \        $count_arr = array_fill(0, 4, 0);\n        foreach ($count_arr as $count)\
    \ {\n            $sorted_arr[] = $num;\n        }\n    }\n    return $sorted_arr;\n\
    }\n", "    $counter = array();\n    foreach ($arr as $num) {\n        if (!array_key_exists($num,\
    \ counter)) {\n            counter[$num] = 0;\n        }\n        ++counter[$num];\n\
    \    }\n    ksort($counter);\n    foreach ($counter as $num => $count) {\n   \
    \     if ($count > 1) {\n            sort($counter);\n            $counter = array_merge($counter,\
    \ array_fill(0, $count, null));\n        }\n    }\n    return $arr;\n}\n", " \
    \ if (empty($arr)) {\n    return array();\n  }\n\n  for ($i = 0; $i < count($arr);\
    \ ++$i) {\n    // count number of ones\n    $num_ones = 0;\n    for ($j = 0; $j\
    \ < strlen($arr[$i]); ++$j) {\n      if ($arr[$i][$j] == 1) {\n        ++$num_ones;\n\
    \      }\n    }\n    $one_count = $num_ones;\n\n    // sort if same number of\
    \ ones\n    if ($num_ones == 1) {\n      $dec = str_split($arr[$i], 1)[1];\n \
    \     if ($dec == $dec) {\n        $arr[$i] = $dec;\n      }\n    }\n\n    //\
    \ sort if descending order\n    if ($num_ones == 0) {\n      $dec = str_split($arr[$i],\
    \ 1)[1];\n      if ($dec > $dec) {\n        $arr[$i] = $dec;\n      }\n    }\n\
    \  }\n\n  return $arr;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI did not downvote,\
    \ but I wonder why it was downvoted. While the code does seem to work, it does\
    \ so with a lot of unnecessary complexity. Not only that, but it uses `count`\
    \ which is not O(1) in most programming languages so this will be very slow on\
    \ a large array.\n<|/ c |>\n<| c |>\nthank you for your feedback. I will remove\
    \ it from my answer.\n<|/ c |>\n<| c |>\nIt's very unfair that someone downvoted\
    \ you but you didn't explain why. Also the code is not efficient, as you correctly\
    \ pointed out. I will delete my answer in a sec, if nobody else has answered while\
    \ I update it.\n<|/ c |>\n<| c |>\nI explained why. `count` runs over the whole\
    \ array which is O(n). `count` is extremely inefficient for arrays that contain\
    \ a lot of zeros or ones, for large arrays this is especially bad in terms of\
    \ performance.\n<|/ c |>\n<| c |>\nI still don't see how this answers the question.\
    \ The question does not ask for code but for explanation.\n<|/ c |>\n<| a tags=sorting,php,arrays\
    \ dscore=0 |>\nA PHP array is a map: each key / value pair maps to an associated\
    \ value. In other words, an array is a set of ordered key-value pairs.\nPHP has\
    \ several functions that operate on arrays: array_search() finds an item in a\
    \ given array, array_merge() combines two arrays into one associative array, array_search()\
    \ and array_keys() find all item", "    // Your code goes here\n}\n</code>\n<|/\
    \ q tags=php |>\n<| a |>\nThe simplest solution I can think of:\n<code>\n<?php",
  "    $sortedArr = array();\n    $temp = 0;\n    foreach($arr as $key => $val)\n\
    \    {\n        if($val == 0)\n        {\n            $sortedArr[] = 0;\n    \
    \    }\n        else\n        {\n            while($temp == 0)\n            {\n\
    \                $temp = 1;\n                foreach($arr as $key2 => $val2)\n\
    \                {\n                    if($val2 != 0 && $val2 != $val)\n    \
    \                {\n                        $temp = 0;\n                     \
    \   break;\n                    }\n                }\n            }\n        \
    \    $sortedArr[] = $val;\n        }\n    }\n    return $sortedArr;\n}\n</code>\n\
    <|/ a tags=algorithm,php,arrays,sorting |>\n<| a dscore=1 tags=algorithm,php,arrays,sorting\
    \ |>\nI think you are looking for the nature of sorting (Quicksort, Mergesort,\
    \ Bubble Sort, etc) algorithms. \nIn your case, you need to use one of the algorithms\
    \ I mentioned above.\n<|/ a |>\n<| c |>\nQuicksort is O(n log n) while Merge Sort\
    \ is O(n^2), and Bubble Sort is O(n^2)\n<|/ c |>\n<| c |>\nYou are right. I've\
    \ never used Quicksort or Merge Sort and haven't used the bubble sort. I'll edit\
    \ my answer. Thanks!\n<|/ c |>\n<| a |>\nHere is a simple solution using PHP array_multisort()\n\
    <code>\n$arr = [\n    \"one\",\n    \"two\",\n    \"three\",\n    \"four\",\n\
    \    \"five\",\n    \"six\",\n    \"seven\",\n    \"eight\",\n    \"nine\",\n\
    \    \"ten\"\n];\n\n$result = array_multisort(array_count_values($arr), SORT_DESC,\
    \ $arr);\n</code>\nThe result is the following:\n<code>\nArray\n(\n    [eight]\
    \ => ten\n    [seven] => six\n    [six] => five\n    [five] => four\n    [four]\
    \ => three\n    [three] => two\n    [two] => one\n    [one] => eight\n)\n</code>\n\
    <|/ a dscore=1 tags=algorithm,php,arrays,sorting |>\n<| a dscore=0 tags=algorithm,php,arrays,sorting\
    \ |>\nThis is not exactly a solution but you could use this function to count\
    \ the occurrences of the strings in your array $arr :\n<code>", "    $len = count($arr);\n\
    \    for ($i = 0; $i < $len; ++$i) {\n        $ones = 0;\n        for ($j = 0;\
    \ $j < $len; ++$j) {\n            if ($arr[$i] & (1 << $j)) {\n              \
    \  ++$ones;\n            }\n        }\n        if ($ones < $len) {\n         \
    \   $tmp = $arr[$i];\n            $arr[$i] = $arr[$ones];\n            $arr[$ones]\
    \ = $tmp;\n        }\n    }\n    return $arr;\n}\n", "  usort($arr, function ($a,\
    \ $b) {\n    return $a - $b;\n  });\n  return $arr;\n}", "    if (is_null($arr))\
    \ {\n        return;\n    }\n    $result = [];\n    foreach ($arr as $key => $val)\
    \ {\n        if ($val < 0) {\n            $val = -$val;\n        }\n        if\
    \ ($val == 1) {\n            $result[] = $key;\n        } else {\n           \
    \ $len = strlen($val) - 1;\n            for ($i = 0; $i < $len; $i++) {\n    \
    \            $result[] = (int) $val[$i];\n            }\n        }\n    }\n  \
    \  return $result;\n}\n", "    $tmp = [];\n    $ret = [];\n    for ($i = 0, $j\
    \ = count($arr); $i < $j; $i++) {\n        $tmp[$i] = $arr[$i];\n        $ret[]\
    \ = $arr[$i];\n    }\n    for ($i = 1; $i < $j; $i++) {\n        for ($k = $i;\
    \ $k > 0; $k--) {\n            $tmp[$k] = $ret[$k - 1];\n            $ret[$k -\
    \ 1] = $tmp[$k];\n        }\n        $tmp[0] = $ret[0];\n        $ret[0] = $tmp[$i];\n\
    \    }\n    return $ret;\n}\n", "  sort($arr, SORT_NUMERIC);\n  return $arr;\n\
    }", "    usort($arr, function ($a, $b) {\n        $ones = bindec(decbin($a));\n\
    \        $zeros = bindec(decbin($b));\n\n        if ($zeros > $ones) {\n     \
    \       return -1;\n        } elseif ($zeros < $ones) {\n            return 1;\n\
    \        }\n\n        $a = decbin($a);\n        $b = decbin($b);\n\n        $diff\
    \ = 0;\n\n        while ($a !== $b) {\n            $diff += strlen($a);\n    \
    \        $a = substr($a, -1);\n            $b = substr($b, -1);\n        }\n\n\
    \        return $diff;\n    });\n\n    return $arr;\n}\n", "    if (sizeof($arr)\
    \ == 0) {\n        return array();\n    }\n\n    $tmpArr = array();\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value == 0) {\n            $tmpArr[]\
    \ = $key;\n        }\n    }\n    ksort($tmpArr);\n\n    return $tmpArr;\n}\n",
  "    $new_arr = [];\n    $i = 0;\n    foreach ($arr as $num) {\n        if ($num\
    \ != 0) {\n            $new_arr[$i] = $num;\n        }\n        $i++;\n    }\n\
    \    $res = $new_arr;\n    for ($i = count($new_arr) - 1; $i >= 0; $i--) {\n \
    \       for ($j = count($new_arr) - 2; $j > $i; $j--) {\n            if ($new_arr[$j\
    \ + 1] < $new_arr[$j]) {\n                unset($res[$j]);\n            }\n  \
    \      }\n    }\n    return $res;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a\
    \ tags=php,arrays |>\nIf you don't want use array_count_values and sort with arsort()\
    \ then we can use some tricky way.\n<code>\n$arr = [5, 7, 5, 1, 2, 4, 4];\nprint_r(array_values($arr));\n",
  "    if (sizeof($arr) == 0) {\n        return array();\n    }\n    $ones = array_count_values($arr);\n\
    \    uasort($ones, function($a, $b) use ($ones) {\n        return ($ones[$a] >\
    \ $ones[$b]) ? 1 : -1;\n    });\n    $zeros = array_fill(0, sizeof($ones), 0);\n\
    \    uasort($zeros, function($a, $b) use ($ones) {\n        return ($ones[$a]\
    \ == $ones[$b]) ? 0 : 1;\n    });\n    return array_merge($zeros, $ones);\n}\n",
  "    $sorted = array();\n    $max_ones = $max_decimal = 0;\n    foreach ($arr as\
    \ $item) {\n        $bin = decbin($item);\n        $length = strlen($bin);\n \
    \       for ($i = 0; $i < $length; $i++) {\n            if ($bin[$i] === '1')\
    \ {\n                $sorted[] = $item;\n                break;\n            }\n\
    \        }\n        $decimal = ($length - $i) * 10 + $i;\n        if ($max_ones\
    \ < $item) {\n            $max_ones = $item;\n        }\n        if ($max_decimal\
    \ < $decimal) {\n            $max_decimal = $decimal;\n        }\n    }\n    $max_decimal\
    \ = count($arr) - $max_ones + $max_decimal;\n    sort($sorted, SORT_NUMERIC);\n\
    \    for ($i = 0; $i < $max_decimal; $i++) {\n        $sorted[] = $max_decimal;\n\
    \    }\n    return $sorted;\n}", "    $newArr = [];\n    $ones = 0;\n    $zeros\
    \ = 0;\n    foreach ($arr as $val) {\n        if ($val == 1) {\n            $ones++;\n\
    \        } else {\n            $zeros++;\n        }\n    }\n    $newArr[] = $ones;\n\
    \    while ($ones > 0 || $zeros > 0) {\n        if ($ones > 0) {\n           \
    \ $newArr[] = $ones;\n            $ones = 0;\n        }\n        if ($zeros >\
    \ 0) {\n            $newArr[] = $zeros;\n            $zeros = 0;\n        }\n\
    \    }\n    return $newArr;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI got this\
    \ one from my lecture notes, unfortunately I couldn't get it to work for some\
    \ reason.\n<|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>", "\tforeach ($arr\
    \ as $key => $value) {\n\t\tif ($value > 0) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tarsort($arr);\n\
    \treturn $arr;\n}\n", "    sort($arr);\n    return $arr;\n}\n", "\tforeach ($arr\
    \ as &$element) {\n\t\t$bits = decbin($element);\n\t\t$element = 0;\n\t\tfor ($i\
    \ = 0; $i < strlen($bits); $i++) {\n\t\t\tif (strpos($bits, \"1\", $i) !== false)\
    \ {\n\t\t\t\t$element += 1;\n\t\t\t}\n\t\t}\n\t}\n\tksort($arr);\n\treturn $arr;\n\
    }\n", "  // Your code here\n}", "\t$sorted = array();\n\tforeach($arr as $k =>\
    \ $v) {\n\t\t$sorted = array_merge($sorted, self::sort_array($v, $k));\n\t}\n\t\
    foreach($sorted as $k => $v) {\n\t\t$sorted[$k] = ($k > 0 ? $k : -$k);\n\t}\n\t\
    ksort($sorted);\n\treturn $sorted;\n}\n\n/**\n * Sort array of non-negative integers\
    \ according to number of ones in their binary representation in ascending order.\n\
    \ */", "    foreach($arr as $key => $value){\n        $counts[$key]  = 0;\n  \
    \  }\n    foreach($arr as $key => $value){\n        $counts[$key]--;\n       \
    \ if($counts[$key] == 0){\n            $keys[$key] = $key;\n        }\n    }\n\
    \    foreach($arr as $key => $value){\n        $keys[$key]++;\n    }\n    asort($keys);\n\
    \    $sorted = array();\n    foreach($keys as $key => $value){\n        $sorted[]\
    \ = $arr[$key];\n    }\n    return $sorted;\n}", "    $count = array_count_values($arr);\n\
    \    arsort($count);\n    foreach ($count as $index => $val) {\n        if ($val\
    \ > 1) {\n            $temp = array_search($index, $arr);\n            $arr[$index]\
    \ = $temp;\n            $arr[$temp] = $index;\n        }\n    }\n    return $arr;\n\
    }\n", "    sort($arr);\n    return $arr;\n}\n", "    return array_map(\n     \
    \   function ($item) { return $item; },\n        array_count_values($arr)\n  \
    \  );\n}", "    $count = [];\n    foreach ($arr as $num) {\n        $n = 0;\n\
    \        if ($num < 0) {\n            $num *= -1;\n            $n = 1;\n     \
    \   }\n        if (!isset($count[$n])) {\n            $count[$n] = 0;\n      \
    \  }\n        $count[$n]++;\n    }\n    krsort($count);\n    foreach ($count as\
    \ $n => $c) {\n        $n *= 2;\n        if ($n <= strlen($arr)) {\n         \
    \   $tmp = $arr[$n];\n            unset($arr[$n]);\n            $arr[$n] = $tmp;\n\
    \        }\n    }\n    return $arr;\n}", "    return $arr;\n}\n</code>\n<|/ a\
    \ tags=php,sorting |>\n<| c |>\nI added the code to the question.\n<|/ c |>\n\
    <| c |>\nWhat is \"n\"? I added it to the question. I forgot it.\n<|/ c |>\n<|\
    \ c |>\nThe number `n` stands for \"number of ones\". In the first example it\
    \ is `1` and in the second example it is `4`.\n<|/ c |>\n<| c |>\nOk, thank you.\
    \ I changed that now. How can I use the number `n` in your code when I have more\
    \ than 2 elements?\n<|/ c |>\n<| c |>\nThis doesn't seem to be working. I added\
    \ the array that has to be sorted in the question. There are also other elements\
    \ that need to be sorted.\n<|/ c |>\n<| a |>\nJust use uasort function and pass\
    \ your array in it for custom sorting.\n<code>\n<?php", "    if (count($arr) ===\
    \ 0) {\n        return $arr;\n    }\n    $result = [];\n    $counts = [0 => 0];\n\
    \    foreach ($arr as $i) {\n        $counts[($i & 1)] += 1; // this makes zero\
    \ based counts\n        $result[] = $i;\n    }\n    foreach ($counts as $i =>\
    \ $c) {\n        $counts[$i] /= 2;\n    }\n    foreach ($counts as $i => $c) {\n\
    \        $result[] = ($arr[$i] - $c) * (($arr[$i] - $c) / 2);\n    }\n    return\
    \ $result;\n}\n", "    foreach ($arr as &$a) {\n        $num = bindec($a);\n \
    \       if ($num > 0) {\n            $a = $num;\n        } else {\n          \
    \  $a = -$num;\n        }\n    }\n    return $arr;\n}\n", "    $tmp = [];\n  \
    \  $ans = [];\n    foreach ($arr as $i => $v) {\n        $bin = bindec($v);\n\
    \        if ($bin[0] == '0') {\n            $tmp[] = $v;\n            $ans[] =\
    \ $i;\n            continue;\n        }\n        $k = array_keys($tmp, min($bin));\n\
    \        $tmp[$k[0]] = $v;\n    }\n    return $ans;\n}\n", "  $ones = array();\n\
    \  foreach ($arr as $key => $num) {\n    foreach (str_split(decbin($num)) as $num\
    \ => $one) {\n      if ($one == '1') {\n        $ones[$key] = $num;\n      }\n\
    \    }\n  }\n  return array_intersect_key($ones, array_flip($ones));\n}\n", " \
    \   // TODO: Implement Function sort_array here.\n}\n", "    ksort($arr);\n  \
    \  $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        $count =\
    \ 0;\n        for ($j = $i + 1; $j < $len; $j++) {\n            if ($arr[$j] &\
    \ 1) {\n                $count++;\n            } else {\n                $count\
    \ += 2;\n                $arr[$j] = $count;\n            }\n        }\n      \
    \  $arr[$i] = $count;\n    }\n    return $arr;\n}\n", "  return $arr;\n}", " \
    \   $len = count($arr);\n    for($i=0; $i < $len; $i++) {\n        $tmp = $arr[$i];\n\
    \        $j = 0;\n        $ones = 0;\n        while(is_int($tmp) && $tmp) {\n\
    \            $ones++;\n            $tmp &= $tmp-1;\n            $j++;\n      \
    \  }\n        if($ones > 0) {\n            $tmp = decbin($tmp);\n            $tmp\
    \ = substr($tmp, strrpos($tmp, '1') + 1);\n            for($k=0;$k<$ones;$k++)\
    \ {\n                $tmp = str_repeat($tmp, strlen($tmp)/$ones);\n          \
    \  }\n            $arr[$i] = (int)$tmp;\n        } else {\n            $tmp =\
    \ 0;\n            for($k=0; $k<$j; $k++) {\n                $tmp += $arr[$k];\n\
    \            }\n            $arr[$i] = $tmp;\n        }\n    }\n    return $arr;\n\
    }", "    sort($arr, SORT_NUMERIC);\n    return $arr;\n}\n", "    uasort($arr,\
    \ function($a, $b) {\n        if ($a === $b) {\n            return 0;\n      \
    \  }\n\n        return ($a < $b) ? -1 : 1;\n    });\n    return $arr;\n}\n", " \
    \   $arr = array_map(function ($a) {\n        return bin2dec($a);\n    }, $arr);\n\
    \n    usort($arr, function ($a, $b) {\n        return strcmp(decbin($a), decbin($b));\n\
    \    });\n\n    return array_map(function ($a) {\n        return bin2dec($a);\n\
    \    }, $arr);\n}\n", "  // Write your code here\n}", "  usort($arr, function\
    \ ($a, $b) {\n    $cmp = strcmp(decbin($a), decbin($b));\n    if ($cmp === 0)\
    \ {\n      $cmp = strcmp(bindec($a), bindec($b));\n    }\n    return $cmp;\n \
    \ });\n\n  return $arr;\n}\n", "    if (count($arr) == 0) return $arr;\n    //\
    \ Count number of 1s in binary representation\n    $counts = array_count_values($arr);\n\
    \    $ones = array_sum(array_keys($counts));\n    // If number of ones in binary\
    \ representation is equal to\n    // number of elements in original array, sort\
    \ by their decimal value.\n    if ($ones == count($arr)) {\n        ksort($arr);\n\
    \        return $arr;\n    }\n    // If number of ones is greater than number\
    \ of elements in array,\n    // sort by number of ones in binary representation\
    \ and sort by their\n    // decimal value.\n    if ($ones > count($arr)) {\n \
    \       ksort($counts);\n        ksort($arr);\n        return $arr;\n    }\n \
    \   // Otherwise: sort by the number of ones in binary representation,\n    //\
    \ and then sort by their decimal value.\n    ksort($counts);\n    foreach ($counts\
    \ as $k => $v) {\n        ksort($arr);\n    }\n    return $arr;\n}\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\nHere is a solution for PHP 5.4+ that does not require\
    \ the use of any additional functions like array_count_values or ksort. The main\
    \ idea behind it is to iterate over the array of numbers and count the number\
    \ of the 1's for each value. The final step is to sort the array using usort and\
    \ provide a comparison function to be used when sorting the elements. \n<code>\n\
    $arr = [4, -1, 8, -2, 5, 0, 3, 1, 1, 3, 8, 4, 2, 6, -1, 4, 7, -4, 0];\n$counts\
    \ = array_count_values($arr);\nusort($arr, function($a, $b) use ($counts) {\n\
    \    if($counts[$a] == $counts[$b])\n        return 0;\n    return ($counts[$a]\
    \ < $counts[$b]) ? -1 : 1;\n});\nprint_r($arr);\n</code>\nResult:\n<code>\nArray\n\
    (\n    [0] => 0\n    [1] => 1\n    [2] => 2\n    [3] => 3\n    [4] => 4\n    [5]\
    \ => 5\n    [6] => 6\n    [7] => 7\n    [8] => 8\n    [9] => 9\n    [10] => 10\n\
    \    [11] => 11\n    [12] => 12\n    [13] => 13\n    [14] => 14\n    [15] => 15\n\
    \    [16] => 16\n    [17] => 17\n    [18] => 18\n    [19] => 19\n    [20] => 20\n\
    \    [21] => 21\n    [22] => 22\n    [23] => 23\n    [24] => 24\n    [25] => 25\n\
    \    [26] => 26\n    [27] => 27\n    [", "    if (empty($arr)) return array();\n\
    \    $sorted = array();\n    foreach ($arr as $key => $val) {\n        $binary\
    \ = (string) $val;\n        $count = substr_count($binary, 1);\n        $key =\
    \ min($key, $count);\n        $sorted[$key] = $val;\n    }\n    return $sorted;\n\
    }\n", "    foreach ($arr as $key => $value) {\n        for ($i = $key + 1; $i\
    \ < count($arr); $i++) {\n            if ($arr[$i] == 0) {\n                $arr[$i]\
    \ = '0';\n                $arr[$i - 1] = array_sum(str_split($arr[$i]));\n   \
    \         }\n        }\n    }\n    return $arr;\n}\n", "    // write your code\
    \ here\n}\n", "  usort($arr, function($x, $y) {\n    $ones_count = substr_count(bin2de(sprintf('%b',\
    \ $x)), '1');\n    $yones_count = substr_count(bin2de(sprintf('%b', $y)), '1');\n\
    \    return $ones_count > $yones_count ? 1 : -1;\n  });\n  return $arr;\n}\n",
  "    $ret = [];\n    $tmp = [];\n    $count = 0;\n    $max_one = 0;\n    foreach\
    \ ($arr as $v) {\n        if ($v == 1) $count++;\n        elseif ($v == 0) $count--;\n\
    \        if ($count == 0) {\n            $ret[] = $v;\n            $tmp[] = $v;\n\
    \        } else {\n            $tmp[] = $v;\n        }\n        if ($count > $max_one)\
    \ {\n            $max_one = $count;\n        }\n    }\n    foreach ($tmp as $v)\
    \ {\n        $ret[] = $v;\n    }\n    return $ret;\n}", "    $arr = array_filter($arr,\
    \ function ($n) {\n        return $n >= 0;\n    });\n    sort($arr);\n    return\
    \ $arr;\n}\n", "    return $arr;\n}\n$tests = array(\n    array(array(1, 5, 2,\
    \ 3, 4)),\n    array(array(-2, -3, -4, -5, -6)),\n    array(array(1, 0, 2, 3,\
    \ 4)),\n);\n$tests = array_map(function($arr) { return $arr; }, $tests);\n$expected\
    \ = array(\n    array(0, 1, 2, 3, 4),\n    array(-6, -5, -4, -3, -2),\n    array(1,\
    \ 5, 2, 3, 4),\n);\n$tests = array_map(function($arr) { return $arr; }, $tests);\n\
    $results = array_map(function($arr) { return $arr; }, $results);\nforeach ($expected\
    \ as $index => $result) {\n    sort($tests[$index]);\n    sort($results[$index]);\n\
    \    if ($result !== $tests[$index]) {\n        echo \"Test $index failed!\\n\"\
    ;\n        echo \"Result: \" . print_r($tests[$index], true);\n        echo \"\
    Expected: \" . print_r($expected, true);\n        echo \"\\nActual: \" . print_r($results[$index],\
    \ true);\n        echo \"\\n\";\n    }\n}", "\tksort($arr);\n}\n", "    return\
    \ $arr;\n}\n", "    $len = count($arr);\n    for($i=0;$i<$len;$i++) {\n      \
    \  $bin = decbin($arr[$i]);\n        $count = 0;\n        for($j=0;$j<strlen($bin);$j++)\
    \ {\n            $count += (strpos($bin, $j, $i) != -1);\n        }\n        $arr[$i]\
    \ = $count;\n    }\n    for($i=0;$i<$len;$i++) {\n        $arr[$i] = decbin($arr[$i]);\n\
    \    }\n    return $arr;\n}\n$num = array(1,2,3,4,5);\n$num = sort_array($num);\n\
    echo \"<pre>\";\nprint_r($num);", "    if (empty($arr)) {\n        return array();\n\
    \    }\n\n    usort($arr, function($a, $b) {\n        $a = array_count_values(str_split(str_pad(dechex($a),\
    \ 8, '0', STR_PAD_LEFT), 8));\n        $b = array_count_values(str_split(str_pad(dechex($b),\
    \ 8, '0', STR_PAD_LEFT), 8));\n        if ($a == $b) {\n            return 0;\n\
    \        }\n        return $a < $b ? -1 : 1;\n    });\n\n    return $arr;\n}\n",
  "    foreach ($arr as &$v) {\n        $v = -1 - abs($v);\n    }\n    $arr[] = 0;\n\
    \    usort($arr, function($a, $b) {\n        return $a - $b;\n    });\n    return\
    \ $arr;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=sorting,php,arrays\
    \ |>\nThe most readable way is to use usort:\n<code>", "    $res = array_slice($arr,\
    \ 0, count($arr));\n    arsort($res);\n    return $res;\n}\n", "    // Return\
    \ empty array if null\n    if (empty($arr)) return $arr;\n    // Return array\
    \ without zero and negative values\n    if (is_array($arr)) {\n        foreach\
    \ ($arr as $k => $v) {\n            if ($v >= 0) unset($arr[$k]);\n        }\n\
    \    }\n    // Returned sorted array\n    return $arr;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks, but the problem is not about sorting, it's more about counting\
    \ 1's in the binary representation and ordering by that number. As I wrote, `array_count_values()`\
    \ just counts the number of instances for each value, and does not order the array.\n\
    <|/ c |>\n<| c |>\nOh, I see. I misunderstood you.\n<|/ c |>\n<| a tags=arrays,php,sorting\
    \ dscore=0 |>\nI did a dirty trick:\n<code>\n<?php", "  // your code goes here\n\
    }", "    return array(\n        array_sum(array_map('bindec', $arr)) asc($arr),\n\
    \        array_sum(array_map('bindec', array_reverse($arr))) desc($arr),\n   \
    \     array_sum(array_map('decbin', array_reverse($arr))) desc($arr),\n    );\n\
    }\n", "    $sort = array();\n    $cnt = 0;\n    $ones = array();\n    foreach\
    \ ($arr as $n) {\n        $tmp = bindec(decbin($n));\n        $ones[$tmp] = $n;\n\
    \        if ($cnt >= count($ones)) {\n            $sort[] = $ones;\n         \
    \   $cnt = 0;\n            $ones = array();\n        }\n        $cnt++;\n    }\n\
    \    if ($cnt) {\n        $sort[] = $ones;\n    }\n    return $sort;\n}\n</code>\n\
    <|/ a tags=sorting,arrays,php dscore=4 |>\n<| c |>\nThis is great but is there\
    \ a way to have this sorted on multiple columns?\n<|/ c |>\n<| c |>\nyou can use\
    \ the `ksort` function, which accepts an array key => value array of sort columns.\
    \ You can create your own array which has multiple columns and sort by that. But\
    \ be careful, arrays in PHP are not really arrays. Array keys are just numbers\
    \ or strings, there is no special meaning. So sorting by different columns might\
    \ not work correctly.\n<|/ c |>\n<| c |>\nThis is actually a very nice solution\
    \ because it doesn't require me to change my database structure\n<|/ c |>\n<|\
    \ a dscore=2 |>\n<code>\nusort($arr,function ($a, $b) {\n   return strcmp(str_repeat('1',\
    \ $a),str_repeat('1', $b));\n});\n</code>\n<|/ a tags=sorting,arrays,php |>\n\
    <| c |>\nPlease explain your answer. Code-only answers are discouraged.\n<|/ c\
    \ |>\n<| c |>\nPlease explain your answer. Code-only answers are discouraged.\n\
    <|/ c |>\n<| a tags=sorting,arrays,php |>\nThis is my solution. Hope it helps\
    \ you\n<code>\n<?php", "  // initialize an array with initial value\n  $arr =\
    \ array_fill(0, count($arr), 0);\n  // count number of ones in binary representation\n\
    \  for($i = 0; $i < count($arr); $i++) {\n    $arr[$i] += ($arr[$i] == 1 ? 1 :\
    \ 0);\n  }\n  // sort based on binary value\n  usort($arr, \"sort_array_binary_compare\"\
    );\n  return $arr;\n}", "  uasort($arr, function($a, $b) use ($arr) {\n    if\
    \ ($arr[$a] === $arr[$b]) {\n      return 0;\n    }\n    return ($arr[$a] > $arr[$b])\
    \ ? -1 : 1;\n  });\n\n  return $arr;\n}\n", "    $keys = array_count_values($arr);\n\
    \    ksort($keys);\n\n    foreach ($keys as $key => $count) {\n        if ($count)\
    \ {\n            $keys[$key] = intval($count / 2);\n        }\n    }\n\n    return\
    \ array_merge(array_flip($keys));\n}\n", "  $res = array();\n  foreach ($arr as\
    \ $key => $val) {\n    $res[$key] = $val;\n  }\n  array_walk($res, create_function('&$val',\
    \ '$val = $val > 0 ? $val : -$val;'));\n  usort($res, create_function('$val1,\
    \ $val2', 'return $val1 == $val2;'));\n  return $res;\n}", "    sort($arr);\n\
    \    return $arr;\n}", "  for ($i = 0, $len = count($arr); $i < $len; ++$i) {\n\
    \    if ($arr[$i] === 0) {\n      continue;\n    }\n    $count = 1;\n    foreach\
    \ ($arr as $item) {\n      if ($item === 1) {\n        ++$count;\n      }\n  \
    \  }\n    for ($j = $i + 1; $j < $len; ++$j) {\n      if ($arr[$j] === 0) {\n\
    \        continue;\n      }\n      $count = 0;\n      for ($k = $j; $k < $len;\
    \ ++$k) {\n        if ($arr[$k] === 1) {\n          ++$count;\n        }\n   \
    \   }\n      if ($count === 0) {\n        if ($j - $i > 0) {\n          for ($m\
    \ = $i; $m < $j; ++$m) {\n            $arr[$m] = $arr[$m] > 0 ? -$arr[$m] : $arr[$m];\n\
    \          }\n          $arr[$i] = $arr[$i] > 0 ? -$arr[$i] : $arr[$i];\n    \
    \      for ($m = $j + 1; $m < $len; ++$m) {\n            $arr[$m] = $arr[$m] >\
    \ 0 ? -$arr[$m] : $arr[$m];\n          }\n        }\n      } else {\n        $count\
    \ = $arr[$i] - $arr[$j];\n        for ($m = $j + 1; $m < $len; ++$m) {\n     \
    \     $arr[$m] = $arr[$m] > 0 ? -$arr[$m] : $arr[$m];\n        }\n        $j +=\
    \ $count < 0 ? -$count : 0;\n      }\n    }\n  }\n  return $arr;\n}", "    if\
    \ (!is_array($arr)) {\n        throw new Exception('Argument must be an array');\n\
    \    }\n\n    $result = [];\n\n    foreach ($arr as $i => $num) {\n        if\
    \ ($num < 1) {\n            throw new Exception('Argument must contain only positive\
    \ integers');\n        }\n\n        $binary = str_pad(decbin($num), 8, 0, STR_PAD_LEFT);\n\
    \        $binary = str_pad(substr($binary, 0, 8), '64', STR_PAD_RIGHT);\n\n  \
    \      $result[$i] = $binary;\n    }\n\n    return $result;\n}\n\n/**\n * Sorts\
    \ array in ascending order according to length.\n *\n * @param array $arr\n *\
    \ @return array\n * @throws \\Exception\n */", "    $new_arr = array();\n    foreach\
    \ ($arr as $elem) {\n        if (!is_numeric($elem)) {\n            $new_arr[]\
    \ = $elem;\n        }\n    }\n\n    array_multisort(array_map('absval', array_filter($new_arr)),\
    \ SORT_DESC, $arr);\n\n    return $arr;\n}\n", "    return array_map(function\
    \ ($el) { return str_pad(decbin($el), $el == 1 ? 26 : ceil(log($el)), \"0\", STR_PAD_LEFT);\
    \ }, $arr);\n}\n\n$arr = array(\n    \"1\", \"0\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\",\n    \"11\", \"12\", \"13\", \"14\", \"\
    15\", \"16\", \"17\", \"18\", \"19\", \"20\",\n    \"21\", \"22\", \"23\", \"\
    24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\",\n    \"31\", \"32\", \"\
    33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\",\n    \"41\", \"\
    42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\",\n    \"\
    51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\",\n\
    \    \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"\
    70\",\n    \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"\
    79\", \"80\",\n    \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"\
    88\", \"89\", \"90\",\n    \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"\
    97\", \"98\", \"99\", \"100\",\n    \"101\", \"102\", \"103\", \"104\", \"105\"\
    , \"106\", \"107\", \"108\", \"109\",\n    \"110\", \"111\", \"112\", \"113\"\
    , \"114\", \"115\", \"116\", \"117\", \"118\",\n    \"119\", \"120\", \"121\"\
    , \"122\", \"123\", \"124\", \"125\", \"126\", \"127\",\n    \"128\", \"129\"\
    , \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\",\n    \"137\"\
    , \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\",\n  \
    \  \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"\
    154\",\n    \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"\
    162\", \"163\",\n    \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"\
    170\", \"171\", \"172\",\n    \"173\", \"174\", \"175\", \"176\", \"177\", \"\
    178\", \"179\", \"180\", \"181\",\n    \"182\", \"183\", \"184\", \"185\", \"\
    186\", \"187\", \"188\", \"189\", \"190\",\n    \"191\", \"192\", \"193\", \"\
    194\", \"195\", \"196\", \"197\", \"198\", \"199\",\n    \"200\", \"201\", \"\
    202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\",\n    \"209\", \"\
    210\", \"211\", \"212\", \"213", "    $ones = array_filter($arr, function($el)\
    \ { return ($el % 2) == 1; });\n    return array_merge(array_count_values($ones),\
    \ $arr);\n}\n\n$arr = array(\n    \"-32768\", \"32767\", \"-128\", \"-1\", \"\
    0\", \"127\", \"128\", \"255\", \"256\", \"32767\", \"32768\",\n    \"-32768\"\
    , \"32767\", \"-128\", \"-1\", \"0\", \"127\", \"128\", \"255\", \"256\", \"32767\"\
    , \"32768\",\n    \"-32768\", \"32767\", \"-128\", \"-1\", \"0\", \"127\", \"\
    128\", \"255\", \"256\", \"32767\", \"32768\",\n    \"-32768\", \"32767\", \"\
    -128\", \"-1\", \"0\", \"127\", \"128\", \"255\", \"256\", \"32767\", \"32768\"\
    ,\n    \"-32768\", \"32767\", \"-128\", \"-1\", \"0\", \"127\", \"128\", \"255\"\
    , \"256\", \"32767\", \"32768\",\n    \"-32768\", \"32767\", \"-128\", \"-1\"\
    , \"0\", \"127\", \"128\", \"255\", \"256\", \"32767\", \"32768\",\n    \"-32768\"\
    , \"32767\", \"-128\", \"-1\", \"0\", \"127\", \"128\", \"255\", \"256\", \"32767\"\
    , \"32768\",\n    \"-32768\", \"32767\", \"-128\", \"-1\", \"0\", \"127\", \"\
    128\", \"255\", \"256\", \"32767\", \"32768\",\n    \"-32768\", \"32767\", \"\
    -128\", \"-1\", \"0\", \"127\", \"128\", \"255\", \"256\", \"32767\", \"32768\"\
    ,\n    \"-32768\", \"32767\", \"-128\", \"-1\", \"0\", \"127\", \"128\", \"255\"\
    , \"256\", \"32767\", \"32768\",\n    \"-32768\", \"32767\", \"-128\", \"-1\"\
    , \"0\", \"127\", \"128\", \"255\", \"256\", \"32767\", \"32768\",\n    \"-32768\"\
    , \"32767\", \"-128\", \"-1\", \"0\", \"127\", \"128\", \"255\", \"256\", \"32767\"\
    , \"32768\",\n    \"-32768\", \"32767\", \"-128\", \"-1\", \"0\", \"127\", \"\
    128\", \"255\", \"256\", \"32767\", \"32768\",\n    \"-32768\", \"32767\", \"\
    -128\", \"-1\", \"0\", \"127\", \"128\", \"255\", \"256\", \"32767\", \"32768\"\
    ,\n    \"-32768\", \"32767\", \"-128\", \"-1\", \"0\", \"127\", \"128\", \"255\"\
    , \"256\", \"32767\", \"32768\",\n    \"-32768\", \"32767\", \"-128\", \"-1\"\
    , \"0\", \"127\", \"128\", \"255\", \"256\", \"32767\", \"32768\",\n    \"-32768\"\
    , \"32767\", \"-128\", \"-1\", \"0\", \"127\", \"128\", \"255\", \"256\", \"32767\"\
    , \"32768", "    sort($arr);\n\n    return $arr;\n}\n", "    foreach ($arr as\
    \ $key => $val) {\n        $arr[$key] = decbin($val);\n    }\n    sort($arr);\n\
    \    return $arr;\n}\n</code>\n<|/ a tags=python,php |>\n<| c |>\nI don't understand\
    \ the PHP code at all. I see that you're sorting, sorting with binary representation,\
    \ but what is the logic behind it?\n<|/ c |>\n<| c |>\nI added a description of\
    \ the algorithm. It's quite simple: for each element, you convert it to a binary\
    \ string and count the number of 1s. Then you sort the numbers according to the\
    \ number of 1s.\n<|/ c |>\n<| c |>\n\"number of ones in their binary representation\
    \ in ascending order\"\n<|/ c |>\n<| c |>\nYeah! I understand. But what about\
    \ this bit: `then sort based in decimal order`? And what is the base number here?\
    \ How does it work with the numbers `1`, `0` and `-1`?\n<|/ c |>\n<| c |>\nThe\
    \ base number is 2. We convert the input array to binary string and count the\
    \ number of 1s in each string and sort them according to these numbers. For numbers\
    \ of 1, we sort them in ascending order. For numbers of 0, we sort them in descending\
    \ order. For numbers of -1, we sort them in ascending order again (since -1 +\
    \ -1 is also 1).\n<|/ c |>\n<| a |>\nYou don't need an algorithm to sort the numbers,\
    \ only a custom comparison function.\n<code>\n/**\n * $arr array to sort\n *\n\
    \ * int\n */", "    if (empty($arr)) {\n        return $arr;\n    }\n    $result\
    \ = [];\n    $sizes = array_count_values($arr);\n    $index = 0;\n    foreach\
    \ ($sizes as $num => $size) {\n        if ($size == 1) {\n            $result[$num]\
    \ = $arr[$index++];\n        } else {\n            $size = 2 ** ($index + 1);\n\
    \            $result[$num] = ($size - 1) * $size + $arr[$index++];\n        }\n\
    \    }\n    return array_values($result);\n}\n</code>\n<|/ a dscore=1 tags=php\
    \ |>\n<| a dscore=1 |>\nTry this one\n<code>", "    $size = count($arr);\n   \
    \ $ret = $arr;\n    for($i = 0; $i < $size; $i++) {\n        if($arr[$i] === 0)\
    \ {\n            unset($ret[$i]);\n        }\n    }\n    sort($ret);\n    return\
    \ $ret;\n}\n", "    sort($arr, function ($a, $b) {\n        $c = bin2hex($a);\n\
    \        $d = bin2hex($b);\n        return strcasecmp($c, $d);\n    });\n    return\
    \ $arr;\n}\n", "  return array_map(\n    function ($item) { return array_sum(unpack('i',\
    \ $item)); },\n    array_map(\n      function ($item) { return str_pad(decbin($item),\
    \ 8, 0, STR_PAD_LEFT); },\n      array_keys($arr)\n    )\n  );\n}\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| c |>\nVery nicely done. I was about to write my own\
    \ sorting function for this but this seems much more elegant.\n<|/ c |>\n<| c\
    \ |>\nThanks! BTW I added a more general solution to my answer.\n<|/ c |>\n<|\
    \ a dscore=2 tags=php,arrays |>\n<code>\n$a = array(7,8,9,1,4,6,2);", "    //\
    \ implement this function\n}", "    sort($arr, function($x, $y) {\n        //\
    \ first sort with number of ones\n        $x = count(bin2dec($x));\n        $y\
    \ = count(bin2dec($y));\n        if ($x < $y) return -1;\n        if ($x > $y)\
    \ return 1;\n\n        // then sort based on decimal value\n        return strnatcmp($x,\
    \ $y);\n    });\n    return $arr;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,sorting\
    \ |>\nThe most efficient way to sort this array would be to use the sort function.\
    \  But this solution will give us a sorted array of the correct values.  Not the\
    \ optimal sorting of the array by using the sort function.  Since this is probably\
    \ just for homework, I won't post the code, but I would suggest using the sort\
    \ function.  \n<code>\n$a = array(1, 5, 2, 3, 4);\n$b = 0;\n$arr = array();\n\
    foreach($a as $val) {\n    if($val == 0) {\n        if($b == count($a) - 1) $arr[]\
    \ = $val;\n        else $arr[] = $b;\n        $b++;\n    }\n}\nprint_r($arr);\n\
    </code>\nOutput:\n<code>\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n\
    \    [3] => 4\n    [4] => 5\n)\n</code>\nEdit: \nHere's a solution using usort\
    \ by changing the value of $key (in this case $b) to determine how it should compare\
    \ two values in the array:\n<code>", "    return array_uintersect(\n        $arr,\n\
    \        array_flip(array_count_values($arr)),\n        function ($ones, $zeros)\
    \ {\n            if ($zeros > $ones) {\n                return 0;\n          \
    \  }\n            return $zeros > 0 ? -1 : 1;\n        }\n    );\n}\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\nIf your array is not sorted, a way to sort is using\
    \ array_multisort function  \nhttp://php.net/manual/es/function.array-multisort.php\n\
    This function sort an array by multiple fields. \nhttp://php.net/manual/es/function.array-intersect.php\n\
    This function compare two arrays and return the common elements between them\n\
    <|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$a = array(1,2,3,4,5);\n\
    $b = array(2,1,3);\n$c = array_intersect($a, $b);\n\nprint_r($c);\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n<?php\n", "  global $max;\n\
    \  $max = count($arr);\n  foreach ($arr as $key => $val) {\n    $arr[$key] = count_ones($val);\n\
    \  }\n  array_multisort($arr, $max, $arr);\n  return $arr;\n}\n", "    $res =\
    \ array();\n    $zeros = 0;\n    $bin = bindec($arr);\n    foreach ($arr as $item)\
    \ {\n        $bin = bindec($item);\n        $tmp = $bin;\n        if ($bin < $tmp)\
    \ {\n            $bin = $tmp;\n        }\n        $tmp = $bin;\n        $res[]\
    \ = $tmp - $zeros;\n        $zeros = 0;\n    }\n    array_multisort($res, $arr);\n\
    \    return $arr;\n}\n</code>\n<|/ a tags=php,arrays dscore=1 |>\n<| a dscore=1\
    \ |>\nAnother solution would be to use array_walk_recursive(), and check if each\
    \ value is smaller than the previous one:\n<code>\n<?php\n$array = array(1 , 3\
    \ , 2 , 6 , 10 , 4 , 9 , 7 , 5);\n\narray_walk_recursive($array, function($value)\
    \ use (&$result){\n    if ($value < $result){\n        $result = $value;\n   \
    \ }\n});\n</code>\n<|/ a tags=php,arrays |>\n<| a |>\nI came up with this function\
    \ that solves the problem with arrays of any length (works for me):\n<code>",
  "  $results = [];\n  $counts = array_count_values($arr);\n  foreach ($arr as $key\
    \ => $value) {\n    if (isset($counts[$value]) && $counts[$value] == 1) {\n  \
    \    $results[$key] = $value;\n    }\n  }\n  asort($results);\n  return $results;\n\
    }\n</code>\n<|/ a tags=arrays,php,sorting |>\n<| c |>\nI think this is more elegant\
    \ and more straightforward.\n<|/ c |>\n<| c |>\nI like it but is this case insensitive?\
    \ I mean with capital letters first. \nI already use that to sort by date.\n<|/\
    \ c |>\n<| c |>\nIt will work only if the array is sorted already. For example,\
    \ `sort_array(['Foo', 'bar', 'Baz', 'foo'])` returns `['Baz', 'Foo', 'foo', 'bar']`\
    \ but the input is not sorted.\n<|/ c |>\n<| c |>\nWhat if the array is `sort_array(['Foo',\
    \ 'bar', 'FOO', 'Baz', 'foo'])` should it return `['Foo', 'Baz', 'foo', 'bar']`\
    \ or maybe `['FOO', 'Baz', 'foo', 'bar']`?\n<|/ c |>\n<| c |>\nI think we should\
    \ go for the second option. `['Foo', 'FOO', 'Baz', 'foo']`\n<|/ c |>\n<| a dscore=5\
    \ tags=arrays,php,sorting |>\nThis solution worked for me. It doesn't require\
    \ you to know what the array keys are before hand.\n<code>\n<?php\n$array = array(\"\
    hello\",\"a\",\"b\",\"c\",\"hello\");\n$array_sorted = array_unique(array_merge($array));\n\
    sort($array_sorted);\nprint_r($array_sorted);", "    // Your code goes here\n\
    \    $counts = array_count_values($arr);\n    arsort($counts);\n    $res = array();\n\
    \    foreach($counts as $k => $v) {\n        $res[] = $k;\n    }\n    return $res;\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nI don't think this is correct.\
    \ If the first element has only one bit set (`1`) then it will not be included\
    \ in the result set.\n<|/ c |>\n<| c |>\nYou are right, I've edited my answer.\
    \ It is not possible to sort an array according to number of 1s in their binary\
    \ representation when they don't have all same bits.\n<|/ c |>\n<| c |>\nYeah,\
    \ I already mentioned that in my comment. Sorry.\n<|/ c |>\n<| a tags=php,sorting\
    \ |>\nHere's an approach that sorts by a key function that returns an array of\
    \ the numbers and their counts (using array_count_values as suggested by):\n<code>\n\
    $numbers = array(\n    1, 5, 2, 3, 4, 0,\n    2, 5, 3, 4, 1, 0,\n    1, 3, 2,\
    \ 3, 5, 0,\n    4, 2, 3, 1, 5, 0,\n    4, 1, 3, 1, 5, 0,\n    0, 5, 1, 4, 2, 3,\n\
    \    1, 4, 2, 3, 5, 0,\n    0, 1, 4, 2, 3, 5,\n);\n\n$result = array();\nforeach\
    \ ($numbers as $number) {\n    $counts = array_count_values($number);\n    arsort($counts);\n\
    \    foreach ($counts as $count => $num) {\n        $result[] = array(\n     \
    \       'count' => $count,\n            'number' => $num,\n        );\n    }\n\
    }\n</code>\nThe result looks like this:\n<code>\nArray\n(\n    [0] => Array\n\
    \        (\n            [count] => 5\n            [number] => 5\n        )\n\n\
    \    [1] => Array\n        (\n            [count] => 2\n            [number] =>\
    \ 2\n        )\n\n    [2] => Array\n        (\n            [count] => 4\n    \
    \        [number] => 4\n        )\n\n    [3] => Array\n        (\n           \
    \ [count] => 3\n            [number] => 3\n        )\n\n    [4] => Array\n   \
    \     (\n            [count] => 2\n            [number] => 2\n        )\n\n  \
    \  [5] => Array\n        (\n            [count] => 2\n            [number] =>\
    \ 2\n        )\n\n    [6] => Array\n        (\n            [count] => 3\n    \
    \        [number] => 3\n        )\n\n    [7] => Array\n        (\n           \
    \ [count] => 1\n            [number] => 1\n        )\n\n    [8] => Array\n   \
    \     (\n            [count] => 3\n            [number] => 3\n        )\n\n  \
    \  [9] => Array\n        (", "    foreach ($arr as $key => $val) {\n        $arr[$key]\
    \ = array_search($val, array_keys($arr));\n    }\n    return $arr;\n}\n", "  usort($arr,\
    \ function($a, $b) {\n    if ($a === 0 && $b === 0) return 0;\n    return $a <\
    \ $b\n      ? 1\n      : ($a == 0 ? 0 : -1);\n  });\n  return $arr;\n}", "   \
    \ $ones_cnt = 0;\n    $decimal_cnt = 0;\n    $result = array();\n    for ($i =\
    \ 0; $i < count($arr); ++$i) {\n        if ($arr[$i] < 0) {\n            $neg\
    \ = true;\n            $neg_idx = $i;\n            while (isset($arr[$neg_idx]))\
    \ {\n                $neg = ($neg) ? false : true;\n                $neg_idx =\
    \ $neg_idx + 1;\n            }\n            $arr[$i] = $neg;\n            $arr[$neg_idx]\
    \ = -$arr[$neg_idx];\n        }\n        $digit = bindec($arr[$i]);\n        $ones_cnt\
    \ += $digit >> 3; // number of 1-s in binary representation of $i\n        $decimal_cnt\
    \ += $digit & 7;\n        $result[$i] = $arr[$i];\n    }\n    $decimal_cnt +=\
    \ 7; // number of 1-s in binary representation of $i\n    for ($i = count($arr)\
    \ - 1; $i > 0; --$i) {\n        $digit = bindec($arr[$i]);\n        $ones_cnt\
    \ += $digit >> 3; // number of 1-s in binary representation of $i\n        $decimal_cnt\
    \ += $digit & 7;\n        if ($ones_cnt > $decimal_cnt) {\n            $result[$i]\
    \ = $arr[$i];\n            $ones_cnt -= $decimal_cnt;\n            $decimal_cnt\
    \ = 0;\n        } else {\n            $result[$i] = str_pad(\n               \
    \ strval($result[$i] + ($ones_cnt / $decimal_cnt)), 6, '0', STR_PAD_LEFT);\n \
    \           $ones_cnt = 0;\n        }\n    }\n    return $result;\n}\n", "  //\
    \ TODO: Write a comment about this function.\n}", "    $sorted = array();\n  \
    \  $temp = array();\n    $count = 0;\n    foreach ($arr as $val) {\n        if\
    \ (!is_numeric($val)) {\n            $sortVal = strtolower(bin2hex($val));\n \
    \           if (isset($temp[$sortVal])) {\n                $temp[$sortVal]++;\n\
    \            } else {\n                $temp[$sortVal] = 1;\n                $count++;\n\
    \            }\n        } else {\n            $count++;\n        }\n    }\n\n\
    \    foreach ($temp as $key => $value) {\n        if ($value == 1) {\n       \
    \     $sorted[] = $key;\n        }\n    }\n    foreach ($arr as $key => $val)\
    \ {\n        if (!is_numeric($val)) {\n            $sortVal = strtolower(bin2hex($val));\n\
    \            if ($sortVal && isset($temp[$sortVal])) {\n                $sorted[]\
    \ = $key;\n            }\n        }\n    }\n    if ($count) {\n        ksort($sorted);\n\
    \    } else {\n        sort($sorted);\n    }\n    return $sorted;\n}", "    $len\
    \ = count($arr);\n    for ($i = 1; $i < $len; $i++) {\n        $ones = $arr[$i\
    \ - 1];\n        $ones = ($ones * 2) + ($arr[$i] & $ones);\n        $arr[$i -\
    \ 1] = $ones;\n        $arr[$i] = $ones;\n    }\n    return $arr;\n}", "  if (count($arr)\
    \ == 0) return $arr;\n\n  // Sort the array according to number of ones in its\
    \ binary representation in ascending order\n  // It must be implemented like this:\n\
    \  // >>> sort_array(array(1, 5, 2, 3, 4))\n  // array(1, 2, 3, 4, 5)\n  // >>>\
    \ sort_array(array(-2, -3, -4, -5, -6))\n  // array(-6, -5, -4, -3, -2)\n  $bin\
    \ = array_map(function ($el) {\n    $bin = str_pad(decbin($el), 32, '0', STR_PAD_LEFT);\n\
    \    return str_pad(bindec($bin), 32, '0', STR_PAD_LEFT);\n  }, $arr);\n\n  //\
    \ Sort the array according to decimal value in ascending order\n  // It must be\
    \ implemented like this:\n  // >>> sort_array(array(1, 0, 2, 3, 4))\n  // array(0,\
    \ 1, 2, 3, 4)\n  usort($bin, function ($a, $b) {\n    return str_pad(dechex(dec($a)\
    \ - dec($b)), 32, '0', STR_PAD_LEFT) <=> str_pad(dechex(dec($a) - dec($b)), 32,\
    \ '0', STR_PAD_LEFT);\n  });\n\n  // Now return the binary representation of sorted\
    \ array\n  return $bin;\n}", "    foreach ($arr as $key => $val) {\n        if\
    \ ($val < 0) {\n            unset($arr[$key]);\n            $arr[$key] = $val;\n\
    \        }\n    }\n    sort($arr);\n    return $arr;\n}\n", "  // Your code here\n\
    }", "    foreach ($arr as &$val) {\n        $val = (int)$val;\n    }\n    array_multisort(\n\
    \        array_count_values($arr),\n        SORT_NUMERIC,\n        $arr\n    );\n\
    \    return $arr;\n}\n</code>\n<|/ a dscore=4 |>\n<| a tags=arrays,php,sorting\
    \ dscore=4 |>\nYou can use array_multisort for this.\n<code>\n$array = [5,4,3,2,1];\n\
    $array = array_map('intval',$array);\n\nprint_r($array);\nArray\n(\n    [0] =>\
    \ 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)\n\n$array = array_multisort($array,SORT_DESC);\n\
    \nprint_r($array);\nArray\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3]\
    \ => 2\n    [4] => 1\n)\n</code>\n<|/ a |>\n<| c |>\nI think this should be the\
    \ correct answer. Just in case someone stumbles upon this answer but is looking\
    \ for the sorting in DESCending order, array_multisort is perfect.\n<|/ c |>\n\
    <| a tags=arrays,php,sorting |>\nThe question is a bit old and answered but I\
    \ just found an alternative and I think it might be useful for someone.\nYou can\
    \ use array_multisort() to sort an array. This will sort an array by one or more\
    \ given columns. The columns can be passed as either column names or numeric indices.\n\
    <code>\n$array = array(\n    0 => 1,\n    1 => 2,\n    2 => 3,\n    3 => 4,\n\
    \    4 => 5\n);\n\n$array[] = array(6 => 1, 7 => 2, 8 => 3, 9 => 4, 10 => 5);\n\
    \narray_multisort($array, SORT_DESC, SORT_NUMERIC, SORT_ASC, $array);\n\necho\
    \ \"<pre>\";\nvar_dump($array);\necho \"</pre>\";\n\n/**\n * Output\n *\n * $array\n\
    \ */\n</code>\nOutput:\n<code>\narray(10) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(4)\n\
    \  [2]=>\n  int(3)\n  [3]=>\n  int(2)\n  [4]=>\n  int(1)\n  [5]=>\n  int(6)\n\
    \  [6]=>\n  int(7)\n  [7]=>\n  int(8)\n  [8]=>\n  int(9)\n  [9]=>\n  int(10)\n\
    }\n\n$array\nArray\n(\n    [0] => 5\n    [1] => 4\n    [2] ", "    // Write your\
    \ code here\n\n    $arr = array_reverse($arr);\n    foreach ($arr as $key => $val)\
    \ {\n        if ($val < 0) {\n            unset($arr[$key]);\n        } else {\n\
    \            $arr[$key] = str_pad(decbin($val), strlen($val), \"0\", STR_PAD_LEFT);\n\
    \        }\n    }\n\n    $sort = array();\n    $flag = 0;\n    $bin = \"\";\n\
    \    foreach ($arr as $key => $val) {\n        $len = strlen($val);\n        $i\
    \ = 0;\n        for ($i = $len - 1; $i >= 0; $i--) {\n            $dec = substr($val,\
    \ $i, 1);\n            $dec = $dec == '1' ? -1 : 0;\n            $bin = base_convert($dec,\
    \ 10, 2);\n            $tmp = str_pad(decbin($dec), $len, \"0\", STR_PAD_LEFT);\n\
    \            if ($bin) {\n                $flag = array_search($bin, $sort);\n\
    \            } else {\n                $flag = $key;\n            }\n        \
    \    if ($flag != $key) {\n                if ($flag > $key) {\n             \
    \       $flag = $key;\n                }\n                $sort[$flag] = $bin;\n\
    \            }\n        }\n    }\n    return array_merge(array_flip($sort), array_reverse($sort));\n\
    }\n", "    $length = count($arr);\n    if ($length < 1) {\n        return $arr;\n\
    \    }\n    $ones = array_fill(0, $length, 1);\n    $binaryValues = array_map(function\
    \ ($v) use ($ones) {\n        return dechex($v & $ones[$v >> 1]);\n    }, $arr);\n\
    \    // Sort the rest based on binary values.\n    // If there is any tie between\
    \ two, sort based on decimal value.\n    $sortedArr = array_merge(\n        array_slice($arr,\
    \ 1),\n        array_map(function ($v) use ($binaryValues) {\n            $binaryValue\
    \ = hexdec($binaryValues[$v >> 1]);\n            return ($binaryValue < $binaryValues[$v\
    \ % 2]) ? $binaryValue : $binaryValue - $binaryValues[$v % 2];\n        }, $arr),\n\
    \    );\n    array_shift($sortedArr);\n    return $sortedArr;\n}\n</code>\n<|/\
    \ a tags=php,sorting |>\n<| c |>\nIt looks like this does more work than it needs\
    \ to, since `array_filter` will be called on the sorted array anyway.\n<|/ c |>\n\
    <| c |>\nYeah, I thought of doing that, but then I realized that it's just unnecessary.\
    \ `array_filter` can handle a variable number of arguments. So I think it's better\
    \ to do `return $v >= 0 && $v <= 9` inside the anonymous function so that it won't\
    \ be called with negative numbers, for example.\n<|/ c |>\n<| c |>\nIt would be\
    \ better to use `floor` instead of `round` for the case where `$v` is exactly\
    \ equal to `$roundTo`. Also, `floor` will throw an error if `$v` is less than\
    \ or equal to zero, so I suggest `round` + `intval`: `$v >= 0 && $v <= 9 || intval(round($v,\
    \ 2)) >= 0`.\n<|/ c |>\n<| c |>\n: Thanks for your suggestion, I have edited my\
    \ answer accordingly.\n<|/ c |>\n<| a |>\n<code>\nsort($arr);\n</code>\nWorks\
    \ fine.\n<|/ a tags=php,sorting dscore=5 |>\n<| c |>\nIt does work fine for integers.\
    \ But this array contains strings which are compared alphabetically. So the output\
    \ is not sorted.\n<|/ c |>\n<| c |>\nsort sorts the strings alphabetically, but\
    \ not the integers inside them. Try it with this: `$arr = array('5', '10', '2',\
    \ '3', '1');\nsort($arr);`\n<|/", "    $arr = array_reverse($arr);\n\n    $count\
    \ = array_count_values($arr);\n    $count = array_map(function($n) {\n       \
    \ return $n;\n    }, $count);\n    arsort($count);\n\n    return array_map(function($arr)\
    \ {\n        return $arr;\n    }, $count);\n}\n", "    $sort = array();\n    foreach\
    \ ($arr as $key => $val) {\n        $sort[$key] = str_pad(base_convert($val, 10,\
    \ 2), 8, 0, STR_PAD_LEFT);\n    }\n    array_multisort($sort, SORT_DESC, $arr);\n\
    \    return $arr;\n}\n</code>\n<|/ a tags=arrays,php dscore=2 |>\n<| a dscore=2\
    \ |>\nYou can do something like this to sort your array by the number of 1 in\
    \ the array in descending order\n<code>\n$input = array(1,1,1,0,1,0,1);\n$count\
    \ = 0;\n$output = array();\n\nforeach($input as $item){\n    $count++;\n    if($item\
    \ == 1){\n        $output[] = $item;\n    }\n}\n\n$sort_array = array();\n$sort_array\
    \ = array_reverse($output);\n\necho \"<pre>\";\nprint_r($sort_array);\necho \"\
    </pre>\";\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php dscore=2 |>\n\
    For PHP 8+ you can use array_count_values like so:\n<code>\n$counts = array_count_values($arr);\n\
    $sorted = array_flip($counts);\nksort($sorted);\n$result = array_values($sorted);\n\
    \nprint_r($result);\n</code>\n<|/ a |>\n<| c |>\nNice. I didn't know about that\
    \ function. It doesn't work for values 0, 1 and 2 (like OP wants), though.\n<|/\
    \ c |>\n<| a dscore=1 tags=arrays,php |>\nThis is probably a bit more efficient\
    \ than the other answers:\n<code>\nusort($arr, function($a, $b) {\n    return\
    \ count($a) - count($b);\n});\n</code>\n<|/ a |>\n<| c |>\nVery nice, but this\
    \ won't work for values of 0, 1 and 2 (like OP wants), though.\n<|/ c |>\n<| a\
    \ dscore=0 |>\nI got your point, I think this will help you.\n<code>\n$array =\
    \ array(1, 3, 1, 2, 3, 1);\n\nusort($array, function($a, $b) {\n  return $a ==\
    \ $b ? 0 : ($a > $b ? 1 : -1);\n});\n</code>\nThe output of this will be\n<code>\n\
    Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 2\n    [3] => 1\n    [4] => 3\n\
    \    [5] => 1\n)\n</code>\n<|/ a tags=arrays,php |>\n<| a |>\nThe most efficient\
    \ way is to count the number of 1 in each subarray. If the number of 1 in each\
    \ subarray ", "    sort($arr);\n    foreach($arr as $key => $val) {\n        if($val\
    \ % 2 == 1) {\n            for($i = $key; $i >= 0; $i -= 2) {\n              \
    \  $vals[] = $arr[$i];\n            }\n        }\n    }\n    for($i = count($arr)\
    \ - 1; $i >= 0; $i -= 2) {\n        $arr[$i] = $vals[$i];\n    }\n    return $arr;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI see that this is working fine for you,\
    \ but I'm looking for something that I can do in PHP without using any special\
    \ PHP functions. Thanks.\n<|/ c |>\n<| c |>\nThat's weird, because my solution\
    \ doesn't use any php functions. And this one is much more readable. It also uses\
    \ only standard PHP functions. So I can't see any reason to reinvent the wheel.\
    \ Maybe you can find my solution a bit easier to understand and maintain. :-)\n\
    <|/ c |>\n<| c |>\nOh I just saw that I've missed the second part of the question\
    \ about ordering negative values. I'll fix that and update the code.\n<|/ c |>\n\
    <| c |>\nThank you for the effort, but it's still not working for the negative\
    \ numbers.\n<|/ c |>\n<| c |>\nNow it's perfect. Thank you.\n<|/ c |>\n<| a tags=php,algorithm\
    \ |>\nHere is how I would do it\n<code>\n$array = [1,2,3,4,5,6,7,8,9];\n$arr2\
    \ = [];\n", "    if (count($arr) < 2) {\n        return $arr;\n    }\n\n    foreach\
    \ ($arr as &$val) {\n        $val = bcadd($val, 1);\n    }\n\n    // calculate\
    \ binary representation of $arr\n    $bin = str_pad('', ceil(count($arr) / 8),\
    \ '0');\n    foreach ($arr as &$val) {\n        $bin = bcmod($bin, $val) . $val;\n\
    \    }\n\n    // sort array based on binary representation\n    foreach ($bin\
    \ as &$val) {\n        $val = str_pad('', 4 - strlen($val), '0') . $val;\n   \
    \ }\n\n    return array_reverse($bin);\n}\n", "    $sorted_array = array();\n\n\
    \    foreach ($arr as $key => $element) {\n        if (!is_int($element)) {\n\
    \            throw new Exception('Array elements must be integers.');\n      \
    \  }\n    }\n\n    usort(\n        $arr,\n        function ($a, $b) {\n      \
    \      return ($a % 2 === 0) ? $a : $b;\n        }\n    );\n\n    return $arr;\n\
    }\n", "    // Your code here\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for\
    \ your answer. I'll try your solutions.\n<|/ c |>\n<| a tags=arrays,php,sorting\
    \ |>\n<code>\n<?php\n\n$arr = array(10,3,9,15,3,5,13,1,11,12,13,11,7,5,1,15,8,4,8,11,5,5,2,7,10,9,3,10,5,9,8,3);\n",
  "    $result = array();\n    foreach ($arr as $item) {\n        $bin = bindec($item);\n\
    \        if ($bin[0] == '1') {\n            $result[] = $item;\n        }\n  \
    \  }\n    return $result;\n}\n", "    $sort = array();\n    foreach ($arr as $a)\
    \ {\n        foreach (str_split(decbin($a)) as $b) {\n            $sort[] = $b;\n\
    \        }\n    }\n    asort($sort);\n    $res = array();\n    foreach ($sort\
    \ as $b) {\n        $res[] = decbin($b);\n    }\n    return array_map('bindec',\
    \ $res);\n}\n", "  // Your code here\n}", "    // O(N log N)\n    for ($i = 1;\
    \ $i < count($arr); $i++) {\n        for ($j = $i; $j > 0; $j--) {\n         \
    \   if ($arr[$j] & 1) {\n                $tmp = $arr[$j];\n                $arr[$j]\
    \ = $arr[$j - 1];\n                $arr[$j - 1] = $tmp;\n            }\n     \
    \   }\n    }\n    return $arr;\n}\n</code>\nThe binary search function:\n<code>",
  "  // Create an empty array.\n  $arr2 = array();\n\n  // Set starting point to 0\
    \ and a binary array representing number of\n  // ones in each position of the\
    \ given array.\n  for ($i = 0; $i < count($arr); $i++) {\n    $arr2[$i] = bindec($arr[$i]);\n\
    \  }\n\n  // Sort the array based on the number of ones in binary representation.\n\
    \  usort($arr2, function ($a, $b) {\n    return $a > $b ? 1 : $a == $b ? 0 : -1;\n\
    \  });\n\n  // Sort the array based on the decimal values.\n  usort($arr2, function\
    \ ($a, $b) {\n    $a = dec($a);\n    $b = dec($b);\n    return $a > $b ? 1 : $a\
    \ == $b ? 0 : -1;\n  });\n\n  // Reverse the array and return the result.\n  return\
    \ array_reverse($arr2);\n}\n", "  foreach($arr as $key => $value) {\n    while($value\
    \ !== 0) {\n      $result[$key] = $value;\n      $value >>= 1;\n      $key++;\n\
    \    }\n  }\n  asort($result);\n  return $result;\n}\n", "    foreach ($arr as\
    \ $key => $val) {\n        if ($val < 0) {\n            $arr[$key] = $val * -1;\n\
    \        }\n    }\n    sort($arr);\n    return $arr;\n}", "    foreach ($arr as\
    \ $key => $val)\n        $arr[$key] = is_int($val) ? $val : -1;\n    asort($arr);\n\
    \    return array_reverse($arr);\n}\n</code>\n<|/ a |>\n<| c |>\nthis sort order\
    \ is inconsistent with [PHP manual](http://php.net/manual/en/array.sorting.php):\
    \ \n\n\"Note that the sort() function is not guaranteed to do a stable sort; for\
    \ these purposes, it is recommended to sort associative arrays instead.\"\n<|/\
    \ c |>\n<| c |>\nThis answer was helpful to me as I was unsure if there was a\
    \ built in sorting function in PHP which would do the job.\n<|/ c |>\n<| c |>\n\
    , please see my answer below - it is in PHP\n<|/ c |>\n<| c |>\nThat is true,\
    \ but I wanted to keep the example simple and also show how it could be done in\
    \ PHP - the other answer is clearly more efficient in PHP\n<|/ c |>\n<| a dscore=5\
    \ |>\nI came up with a simple and effective way to do this in Ruby:\n<code>\n\
    arr.sort_by { |v| v.to_s(2).size }\n</code>\n<|/ a tags=sorting,arrays,php |>\n\
    <| c |>\nThis is awesome, I never thought it could be done in Ruby.\n<|/ c |>\n\
    <| c |>\nThis is the best solution for me in Ruby 2.6.5\n<|/ c |>\n<| c |>\nThis\
    \ also works in Ruby 1.8.7 and 1.9.3 (and probably 1.8.6)\n<|/ c |>\n<| c |>\n\
    The most efficient answer, IMHO.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Worked perfectly for me with numbers. Thanks!\n<|/ c |>\n<| a dscore=5\
    \ tags=sorting,arrays,php |>\nI came up with a simple solution, using str_pad()\
    \ and usort(). \nThe only difference is that I have str_pad() used on the $key\
    \ parameter. \n<code>", "    $ret = array();\n    $count = array_count_values($arr);\n\
    \    ksort($count);\n    foreach($count as $k => $v) {\n        if($v == 1) {\n\
    \            $ret[] = $k;\n        }\n    }\n    return $ret;\n}\n", "    $result\
    \ = [];\n    foreach ($arr as $item) {\n        if ($item < 0) {\n           \
    \ $result[] = $item;\n        } else {\n            $bin_nums = str_repeat('1',\
    \ $item);\n            $bin_nums = substr($bin_nums, 0, -1);\n            $num_ones\
    \ = strrpos($bin_nums, '1');\n            if ($num_ones !== false) {\n       \
    \         $num_ones--;\n            }\n            $result[] = $num_ones;\n  \
    \      }\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=1 tags=algorithm,php\
    \ |>\n<| a tags=algorithm,php |>\nI did a lot of research before coming up with\
    \ a solution and here is my approach:\n<code>\n<?php", "    sort($arr);\n    uasort($arr,\
    \ function($a, $b) use ($arr) {\n        $c = array_count_values($arr);\n    \
    \    $c[$a]--;\n        $c[$b]--;\n        if ($c[$a] == 0) {\n            return\
    \ $c[$b] ? $a : $b;\n        } elseif ($c[$b] == 0) {\n            return $c[$a]\
    \ ? $b : $a;\n        }\n        $cmp = $c[$a] > $c[$b] ? 1 : -1;\n        return\
    \ $cmp;\n    });\n    return $arr;\n}\n</code>\n<|/ a tags=sorting,arrays,php\
    \ dscore=0 |>\n<| c |>\nThis does not sort by number of 1's in descending order.\
    \ https://3v4l.org/6rJZn\n<|/ c |>\n<| c |>\nThis sorts descending by number of\
    \ 1's https://3v4l.org/mVN7r\n<|/ c |>\n<| c |>\nIt does. https://3v4l.org/ZpTpZ\n\
    <|/ c |>\n<| c |>\nIt does not sort the array in descending order. https://3v4l.org/J4o1I\n\
    <|/ c |>\n<| c |>\nThis sorts in descending order https://3v4l.org/rKYt5\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\n<?php\n    function sort_descending($arr, $sortkey)\
    \ {\n        $tmp = array();\n        foreach($arr as $k => $v) {\n          \
    \  $tmp[$k]  = array();\n            $tmp[$k]['v'] = $v;\n            $tmp[$k]['count']\
    \ = 0;\n            foreach($arr as $kkk => $vvv) {\n                if($v ==\
    \ $vvv[$sortkey]) {\n                    $tmp[$k]['count']++;\n              \
    \      $tmp[$k]['v']  = $vvv;\n                    break;\n                }\n\
    \            }\n        }\n        ksort($tmp);\n        foreach($tmp as $k =>\
    \ $v) {\n            if(!isset($arr[$k])) {\n                $tmp[$k]['v'] = $arr;\n\
    \            }\n        }\n        foreach($tmp as $k => $v) {\n            $arr[$k]\
    \ = $v['v'][$sortkey];\n        }\n    }\n\n    function my_sort($arr) {\n   \
    \     foreach($arr as $key => $val) {\n            $arr[$key] = str_pad(decbin($val),\
    \ strlen($val), \"0", "    foreach($arr as $k => $v) {\n        $tmp = $arr[$k];\n\
    \        $arr[$k] = $v - 1;\n        $arr[$tmp] = $v;\n    }\n\n    array_multisort($arr);\n\
    \    return $arr;\n}", "    // TODO: Write a PHP code here\n}", "  $arr_len =\
    \ count($arr);\n  if ($arr_len == 0) return array();\n  sort($arr);\n  $result\
    \ = array();\n  for ($i = 0; $i < $arr_len; ++$i) {\n    if ($arr[$i] == 0) {\n\
    \      // number of ones is 0 (empty arrays are sorted)\n      $result[] = $i;\n\
    \    } else if ($i > 0) {\n      // number of ones is greater than 0, so we need\
    \ to compare $i with $arr[$i - 1]\n      $x = $arr[$i - 1];\n      $y = $arr[$i];\n\
    \      if ($arr[$i] - $arr[$i - 1]) {\n        // $i is greater than $arr[$i -\
    \ 1], so we need to compare it to\n        // $arr[$i - 1] with $x\n        $cmp\
    \ = $x - $y;\n        if ($cmp) {\n          // if $arr[$i - 1] is bigger than\
    \ $x, we need to subtract it\n          // to get a smaller $x\n          $cmp\
    \ = -$cmp;\n        }\n        $result[] = $cmp;\n      } else {\n        // $i\
    \ is smaller than $arr[$i - 1], so we need to compare it to\n        // $arr[$i\
    \ - 1] with $y\n        $cmp = $y - $x;\n        if ($cmp) {\n          // if\
    \ $arr[$i - 1] is bigger than $y, we need to subtract it\n          // to get\
    \ a smaller $y\n          $cmp = -$cmp;\n        }\n        $result[] = $cmp;\n\
    \      }\n    }\n  }\n  return $result;\n}", "    return usort($arr, function($a,\
    \ $b) {\n        return ($a > $b) ? 1 : -1;\n    });\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nThank you so much for posting this. It was exactly what I needed since\
    \ I had the same issue as the OP. +1\n<|/ c |>\n<| c |>\nThis is so much simpler\
    \ than the other solutions. Thank you!\n<|/ c |>\n<| a |>\nYou can do this with\
    \ PHP :\n<code>", "  for ($i = 0; $i < count($arr); $i++) {\n    for ($j = 0;\
    \ $j < count($arr); $j++) {\n      if ($arr[$i] == $arr[$j]) {\n        $arr[$i]\
    \ = $arr[$j];\n        break;\n      }\n      $arr[$i] += $arr[$j];\n    }\n \
    \ }\n  return $arr;\n}", "    $ones = array();\n    $zeros = array();\n    $negatives\
    \ = array();\n    foreach ($arr as $v) {\n        if ($v <= 0) {\n           \
    \ $negatives[] = $v;\n        } elseif ($v > 0) {\n            $ones[] = $v;\n\
    \        } else {\n            $zeros[] = $v;\n        }\n    }\n    $negatives\
    \ = sort_array($negatives);\n    $ones = sort_array($ones);\n    $zeros = sort_array($zeros);\n\
    \n    return array_merge($zeros, $ones, $negatives);\n}\n", "    // Write your\
    \ code here.\n    return $arr;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for answering.\
    \ I think your code doesn't return anything if `$arr` is not an array as you expected.\n\
    <|/ c |>\n<| c |>\nI thought it returns array when `$arr` is an array.\n<|/ c\
    \ |>\n<| c |>\nThe question says the array must be an array. `$arr !== array()`\
    \ returns `true` for other objects and arrays. Therefore, your solution only works\
    \ if you pass it a PHP array (not an object)\n<|/ c |>\n<| a tags=php |>\nFor\
    \ a more generic solution, based on counting the number of 1's, you could use\
    \ array_count_values(). Then sort according to the keys, and then finally rebuild\
    \ the array.\n<code>\n$result = array_count_values($arr)\n    ? $arr\n    : array_intersect_key($arr,\
    \ array_flip(array_count_values($arr)))\n    ? $arr\n    : array_flip(array_count_values($arr))\n\
    \    ? $arr\n    : array_count_values($arr)\n    ? $arr\n    : [1, 2, 3, 4];\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for answering. I think your code doesn't\
    \ return anything if `$arr` is not an array as you expected.\n<|/ c |>\n<| c |>\n\
    The question says the array must be an array. `$arr !== array()` returns `true`\
    \ for other objects and arrays. Therefore, your solution only works if you pass\
    \ it a PHP array (not an object)\n<|/ c |>\n<| c |>\nIf `$arr` is an object, then\
    \ it will work just fine.\n<|/ c |>\n<| c |>\nI didn't say it would work with\
    \ objects. I said it would work if $arr is a PHP array. Since $arr !== array(),\
    \ I didn't think it would work for objects.\n<|/ c |>\n<| c |>\nOh I see, you\
    \ are referring to other people answers. I guess I misinterpreted the question.\
    \ :)\n<|/ c |>\n<| a tags=php dscore=1 |>\n<code>\n$arr = [1,5,2,3,4];\n$result\
    \ = array_count_values($arr);\n\nforeach($result as $key => $val){\n    if($val>1){\n\
    \        asort($result);\n        break;\n    }\n}\n\n$result = array_combine(array_keys($result),array_values($result));\n\
    \nprint_r($result);\n</code>\n<|/ a |>\n<| c |>\nI guess you used ", "    $res\
    \ = array();\n    foreach($arr as $v) {\n        $bin = bin2hex($v);\n       \
    \ $res[] = hexdec($bin);\n    }\n    sort($res);\n    return $res;\n}\n$a = array(1,\
    \ 5, 2, 3, 4);\nvar_dump(sort_array($a));\n</code>\nThis example will give the\
    \ expected result:\n<code>\narray(1, 2, 3, 4, 5)\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\nI see some issues with your solution:\n1. it does not handle negative\
    \ numbers\n2. it sorts based on the binary value, not the decimal value\n\n`sort_array(array(1,2,3,4,-1))\n\
    array(-1, 2, 3, 4, 5)`\n<|/ c |>\n<| c |>\nHm. You're right! I edited the answer\
    \ accordingly. Thanks for pointing it.\n<|/ c |>\n<| c |>\nIt now sorts based\
    \ on decimal value, not binary value. Thanks again.\n<|/ c |>\n<| c |>\nGreat\
    \ answer! +1 from my side.\n<|/ c |>\n<| c |>\nThis answer has some problems,\
    \ because it returns negative numbers on highest index.\n<|/ c |>\n<| a |>\nI\
    \ think this is another more elegant solution using array_map.\n<code>\n<?php\n\
    \n$values = array(1, 5, 2, 3, 4);\n$values = array_map(\n    function($v){ return\
    \ hexdec('0x' . bin2hex($v)); },\n    $values\n);\n\nvar_dump($values);\n</code>\n\
    <|/ a dscore=5 tags=arrays,php |>\n<| c |>\nI like the use of array_map for such\
    \ an easy task!\n<|/ c |>\n<| c |>\nThis should be the right answer. Works perfectly\n\
    <|/ c |>\n<| c |>\nFor people who want to use array_map to handle both positive\
    \ and negative numbers, this should be the accepted answer. Although it looks\
    \ like the accepted answer, it handles negative numbers correctly.\n<|/ c |>\n\
    <| c |>\nThanks, I like the use of the anonymous function in array_map.\n<|/ c\
    \ |>\n<| c |>\nI believe this answer is wrong. Because it converts the negative\
    \ numbers into the positive number. \nfor example:\n`$values = array(-2, -3, -4,\
    \ -5, -6);`\n`var_dump($values);`\nwill output:\n`array(-6, -5, -4, -3, -2);`\n\
    <|/ c |>\n<| a dscore=5 |>\nJust for fun ", "    sort($arr, function($a, $b) {\n\
    \        $ones = (int)decbin($a ^ $b);\n        if ($ones === 0)\n           \
    \ return 0;\n        $ones = $ones % 2;\n        $ones = ($ones == 1) ? -$ones\
    \ : $ones;\n        return $ones;\n    });\n    return $arr;\n}\n", "    $ret\
    \ = array();\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    foreach ($arr as $elem)\
    \ {\n        $bits = bindecdec(self::arrayToBinary($elem));\n        if ($bits\
    \ != 0) {\n            if ($i == $j) {\n                $ret[$k] = $elem;\n  \
    \              $i++;\n                $j++;\n                $k++;\n         \
    \       continue;\n            } else if ($i == $j && $bits > $k) {\n        \
    \        $ret[$k] = $elem;\n                $i++;\n                $j++;\n   \
    \             $k++;\n                continue;\n            } else if ($bits <\
    \ $k) {\n                $ret[$k] = $elem;\n                $i++;\n          \
    \      $k++;\n                continue;\n            }\n        }\n        $ret[$k]\
    \ = $elem;\n        $i++;\n        $j++;\n        $k++;\n    }\n    return $ret;\n\
    }\n\n/*\n * convert array into binary string\n */\nstatic function arrayToBinary($arr)\
    \ {\n    return implode(\n        \"\",\n        array_map(\n            function($num)\
    \ {\n                return chr($num);\n            },\n            $arr\n   \
    \     )\n    );\n}\n\n/*\n * Convert binary string into array\n */\nstatic function\
    \ binaryToArray($str) {\n    return array_map(\n        function($num) {\n   \
    \         return (int) chr($num);\n        },\n        str_split($str)\n    );\n\
    }\n\n/*\n * Find number of ones in binary representation\n */\nstatic function\
    \ bindecdec($bin) {\n    $bin = str_replace(\n        \" \",\n        \"\",\n\
    \        $bin\n    );\n    $len = strlen($bin);\n    $count = 0;\n    for ($i\
    \ = 0; $i < $len; $i++) {\n        $count += intval($bin[$i]) * pow(\n       \
    \     2,\n            $i\n        );\n    }\n    return $count;\n}\n", "    foreach\
    \ ($arr as &$v) {\n        if ($v <= 0) {\n            $v = 0;\n        } elseif\
    \ ($v >= 0) {\n            $v = ~$v;\n        }\n    }\n    ksort($arr);\n   \
    \ return $arr;\n}", "    $result = array();\n    foreach($arr as $n) {\n     \
    \   $bin = decbin($n);\n        $count = substr_count($bin, '1');\n        if\
    \ (!isset($result[$count])) {\n            $result[$count] = $n;\n        } else\
    \ {\n            $result[$count] += $n;\n        }\n    }\n    asort($result);\n\
    \    return $result;\n}\n", "    uasort($arr, function($a, $b) {\n        $ones\
    \ = str_split
  "    $newArr = array();\n    $zeroArr = array();\n    $oneArr = array();\n    $twoArr\
    \ = array();\n    $threeArr = array();\n    $fourArr = array();\n    $numOnes\
    \ = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        $tmp = $arr[$i];\n\
    \        if ($tmp > 0) {\n            $numOnes++;\n            if ($numOnes ==\
    \ 1) {\n                $oneArr[$i] = $tmp;\n            } else {\n          \
    \      if ($numOnes == 2) {\n                    $twoArr[$i] = $tmp;\n       \
    \         } else {\n                    if ($numOnes == 3) {\n               \
    \         $threeArr[$i] = $tmp;\n                    } else {\n              \
    \          if ($numOnes == 4) {\n                            $fourArr[$i] = $tmp;\n\
    \                        } else {\n                            if ($numOnes ==\
    \ 5) {\n                                $fourArr[$i] = $tmp;\n               \
    \             } else {\n                                if ($numOnes == 6) {\n\
    \                                    $fourArr[$i] = $tmp;\n                  \
    \              } else {\n                                    if ($numOnes == 7)\
    \ {\n                                        $fourArr[$i] = $tmp;\n          \
    \                          } else {\n                                        if\
    \ ($numOnes == 8) {\n                                            $fourArr[$i]\
    \ = $tmp;\n                                        } else {\n                \
    \                            if ($numOnes == 9) {\n                          \
    \                      $fourArr[$i] = $tmp;\n                                \
    \            } else {\n                                                if ($numOnes\
    \ == 10) {\n                                                    $fourArr[$i] =\
    \ $tmp;\n                                                } else {\n          \
    \                                          $newArr[$i] = $tmp;\n             \
    \                                   }\n                                      \
    \      }\n                                        }\n                        \
    \            }\n                                }\n                          \
    \  }\n                        }\n                    }\n                }\n  \
    \          }\n        }\n    }\n    if (count($oneArr) > count($twoArr)) {\n \
    \       $result = $oneArr;\n    } else {\n        $result = $twoArr;\n    }\n\
    \    $result2 = $threeArr;\n    $result3 = $fourArr;\n    $result = array_merge($result2,\
    \ $result3);\n    for ($i = 0; $i < count($result); $i++) {\n        $newArr[$i]\
    \ = $result[$i];\n    }\n    for ($i = 0; $i < count($arr); $i++) {\n        $tmp\
    \ = $arr[$i];\n        if ($tmp < 0) {\n            $newArr[$i] = $tmp;\n    \
    \    }\n    }\n    for ($i = 0; $i < count($newArr); $i++) {\n        if ($newArr[$i]\
    \ < 0) {\n            $newArr[$i] = 0;\n        }\n    }\n    return $newArr;\n\
    }\n", "  // Write your code here\n  $arr2 = [];\n  foreach ($arr as $k => $v)\
    \ {\n    if ($v > 0) {\n      $arr2[$k] = $v;\n    }\n  }\n  return $arr2;\n}\n\
    </code>\n<|/ a tags=php,sorting dscore=1 |>\n<| a |>\n<code>\n$ar= [8,5,4,6,3,7,2,9,1,0];\n\
    arsort($ar);\nvar_export($ar);\n</code>\n<|/ a dscore=1 tags=php,sorting |>\n\
    <| a dscore=1 tags=php,sorting |>\n<code>", "  for ($i = 0; $i < count($arr);\
    \ $i++) {\n    for ($j = 0; $j < count($arr); $j++) {\n      if ($i == $j) {\n\
    \        continue;\n      }\n      if ($arr[$i] & 1) {\n        $tmp = count($arr)\
    \ - 1;\n        array_splice($arr, $tmp, $j);\n        $arr[$tmp] = $arr[$i];\n\
    \        $arr[$i] = $arr[$j];\n        $arr[$j] = $tmp;\n      }\n    }\n  }\n\
    \  return $arr;\n}", "    foreach ($arr as $key => $value) {\n        asort($arr[$key]);\n\
    \    }\n    return $arr;\n}\n", "    asort($arr);\n    $result = array();\n  \
    \  foreach ($arr as $v) {\n        $result[] = $v;\n    }\n    return $result;\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays,algorithm,natural-sort |>\n<| a dscore=1\
    \ |>\nYou can try this function. I hope it will work for you.  \n<code>", "\t\
    sort($arr);\n\tfor ($i=0;$i<count($arr)-1;$i++) {\n\t\tif ($arr[$i]==0) {\n\t\t\
    \tunset($arr[$i]);\n\t\t} else {\n\t\t\t$tmp = $arr[$i];\n\t\t\tunset($arr[$i]);\n\
    \t\t\t$arr[$i] = $tmp;\n\t\t}\n\t}\n\treturn $arr;\n}\n", "  return array_merge(\n\
    \    array_count_values($arr)\n    ? array_map(function ($v) { return $v + 0;\
    \ }, array_count_values($arr))\n    : array_map(function ($v) { return $v; },\
    \ $arr)\n  );\n}\n", "    // sort negative number\n    $arr = array_filter($arr,\
    \ 'is_int');\n    sort($arr);\n    foreach ($arr as &$v) {\n        $v = str_pad(decbin($v),\
    \ 8, '0', STR_PAD_LEFT);\n    }\n    return $arr;\n}\n</code>\n<|/ a tags=php,algorithm\
    \ |>\n<| a dscore=0 |>\nHere is the solution without any sorting:\n<code>\n$array\
    \ = [1,2,3,4,5];\n$sum = 0;\n$lastSum = 0;\n$i = 0;\n$finalArray = [];\n\nforeach($array\
    \ as $val)\n{\n    if($i == 0)\n    {\n        $lastSum = $val;\n    }\n\n   \
    \ if($val > $lastSum)\n    {\n        $i++;\n    }\n    else\n    {\n        $lastSum\
    \ = $val;\n        $finalArray[] = $i;\n        $i = 0;\n    }\n\n    $sum = $sum\
    \ + $val;\n}\n\nif($i != 0)\n{\n    $finalArray[] = $i;\n}\n\n$finalArray[] =\
    \ $sum;\n</code>\n<|/ a tags=php,algorithm |>\n<| a |>\n<code>\n<?php\n$array\
    \ = array(1,2,3,4,5,6,7,8,9,0);\n", "\t$a = $arr = array_reverse($arr);\n\tusort($arr,\
    \ function($a, $b) {\n\t\tif ($a == $b) return 0;\n\t\t$ones = bindec($b);\n\t\
    \t$a = bindec($a);\n\t\treturn $ones > $a ? 1 : -1;\n\t});\n\treturn $arr;\n}\n",
  "    $cnt = count($arr);\n    for ($i = 0; $i < $cnt; $i++) {\n        $bs = bindectoh(str_pad(decbin($arr[$i]),\
    \ 8, \"0\", STR_PAD_LEFT));\n        if ($arr[$i] > $arr[$i]) {\n            $arr[$i]\
    \ -= pow(2, $cnt) - 1;\n            $arr[$i] += pow(2, $cnt);\n            $arr[$i]\
    \ -= pow(2, $i);\n            $arr[$i] += pow(2, $i);\n        } else {\n    \
    \        $arr[$i] += pow(2, $cnt);\n            $arr[$i] -= pow(2, $i);\n    \
    \        $arr[$i] += pow(2, $i);\n            $arr[$i] -= pow(2, $cnt) - 1;\n\
    \        }\n    }\n    return $arr;\n}\n", "    // write code here\n    return\
    \ $arr;\n}\n", "    $ret = array();\n    $count = count($arr);\n    foreach ($arr\
    \ as $k) {\n        $count2 = $count;\n        while ($count2) {\n           \
    \ $i = ($k & 1) ? $count2 - 1 : 0;\n            $k >>= 1;\n            $count2\
    \ -= $i;\n            if ($count2 == 0) {\n                $ret[] = $arr[$i];\n\
    \                $count2 = 0;\n            }\n        }\n    }\n    return $ret;\n\
    }\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
