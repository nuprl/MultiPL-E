name: HumanEval_63_fibfib
language: php
prompt: "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci\
  \ sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n//\
  \ fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please\
  \ write a function to efficiently compute the n-th element of the fibfib number\
  \ sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
  // 24\nfunction fibfib($n) {\n"
tests: "function candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
  \ !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
  \ 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927) { throw\
  \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    return $n > 0 ? fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3)\
    \ : 1;\n}", "  if ($n < 0) return null;\n  if ($n === 0) return 0;\n  if ($n ===\
    \ 1) return 0;\n  if ($n === 2) return 1;\n  return fibfib($n-1) + fibfib($n-2);\n\
    }", "  $result = 1;\n  for ($i = 0; $i < $n; $i++) {\n    $result *= $i;\n   \
    \ $result %= (PHP_INT_MAX + 1);\n  }\n  return $result;\n}\n", "\tif ($n<0) {\n\
    \t\treturn \"fibfib($n) must be positive\";\n\t} else if ($n==0) {\n\t\treturn\
    \ 0;\n\t} else if ($n==1) {\n\t\treturn 1;\n\t} else if ($n==2) {\n\t\treturn\
    \ 1;\n\t} else if ($n>2) {\n\t\treturn fibfib($n-2) + fibfib($n-1);\n\t} else\
    \ {\n\t\treturn fibfib($n-3) + fibfib($n-2);\n\t}\n}", "    if ($n < 0) {\n  \
    \      return 0;\n    } else if ($n <= 2) {\n        return $n;\n    } else {\n\
    \        return fibfib($n - 2) + fibfib($n - 3);\n    }\n}\n", "    if ($n ==\
    \ 0 || $n == 1)\n        return 0;\n    return fibfib($n - 1) + fibfib($n - 2)\
    \ + fibfib($n - 3);\n}\n\n$fibfib = fibfib(10);", "  if($n==0){\n    return 0;\n\
    \  }\n  if($n==1){\n    return 1;\n  }\n  return fibfib($n-1) + fibfib($n-2) +\
    \ fibfib($n-3);\n}\n", "    if ($n <= 2) {\n        return 0;\n    } else {\n\
    \        return fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n    }\n}\n",
  "\treturn (pow($n, 3) + $n * $n) / 2;\n}\n", "\tif ($n < 2) {\n\t\treturn 0;\n\t\
    }\n\treturn fibfib($n - 1) + fibfib($n - 2);\n}\n", "    if ($n < 0) return null;\n\
    \    if ($n == 0) return 0;\n    if ($n == 1) return 1;\n    return fibfib($n-2)\
    \ + fibfib($n-1);\n}\n", "    if ($n < 2)\n        return $n;\n    return fibfib($n-1)\
    \ + fibfib($n-2);\n}\n", "  return fibfib($n - 1) + fibfib($n - 2) + fibfib($n\
    \ - 3);\n}\n\nclass FibFibTest extends \\PHPUnit_Framework_TestCase {\n  /**\n\
    \   * @dataProvider fibonacci\n   */\n  public function testFibonacci($n) {\n\
    \    $this->assertEquals($n, fibfib($n), 'fibfib('. $n .')');\n  }\n\n  /**\n\
    \   * @dataProvider fibonacci\n   */\n  public function testFibonacci2($n) {\n\
    \    $this->assertEquals($n, fibfib($n));\n  }\n\n  public function fibonacci()\
    \ {\n    return array(\n      array(0, 1, 0),\n      array(1, 1, 1),\n      array(2,\
    \ 1),\n      array(3, 2),\n      array(4, 3),\n      array(5, 5),\n      array(6,\
    \ 8),\n      array(7, 13),\n      array(8, 21),\n      array(9, 34),\n      array(10,\
    \ 55),\n      array(11, 89),\n      array(12, 131),\n      array(13, 170),\n \
    \     array(14, 233),\n      array(15, 305),\n      array(16, 398),\n      array(17,\
    \ 487),\n      array(18, 568),\n      array(19, 650),\n      array(20, 743),\n\
    \      array(21, 823),\n      array(22, 909),\n      array(23, 1017),\n      array(24,\
    \ 1134),\n      array(25, 1255),\n      array(26, 1361),\n      array(27, 1464),\n\
    \      array(28, 1567),\n      array(29, 1676),\n      array(30, 1787),\n    \
    \  array(31, 1888),\n      array(32, 1979),\n      array(33, 2080),\n      array(34,\
    \ 2199),\n      array(35, 2299),\n      array(36, 2319),\n      array(37, 2339),\n\
    \      array(38, 2361),\n      array(39, 2435),\n      array(40, 2520),\n    \
    \  array(41, 2619),\n      array(42, 2731),\n      array(43, 2832),\n      array(44,\
    \ 2905),\n      array(45, 3026),\n      array(46, 3148),\n      array(47, 3267),\n\
    \      array(48, 3388),\n      array(49, 3448),\n      array(50, 3513),\n    \
    \  array(51, 3641),\n      array(52, 3729),\n      array(53, 3830),\n      array(54,\
    \ 3950),\n      array(55, 4053),\n      array(56, 4167),\n      array(57, 4288),\n\
    \      array(", "    // Write your PHP code here\n    if($n==0){\n        return\
    \ 0;\n    }\n    if($n==1){\n        return 0;\n    }\n    if($n==2){\n      \
    \  return 1;\n    }\n    return fibfib($n-1)+fibfib($n-2)+fibfib($n-3); \n}",
  "\treturn ($n % 2 == 0) ? fibfib($n - 1) + fibfib($n - 2) : $n;\n}", "    if ($n\
    \ == 0) return 0;\n    if ($n == 1) return 1;\n    return fibfib($n-1) + fibfib($n-2)+\
    \ fibfib($n-3) ;\n}\n", "    $result = 0;\n    if ($n == 0) {\n        $result\
    \ = 0;\n    } else if ($n == 1) {\n        $result = 1;\n    } else if ($n ==\
    \ 2) {\n        $result = 1;\n    } else {\n        $result = fibfib($n - 1) +\
    \ fibfib($n - 2) + fibfib($n - 3);\n    }\n    return $result;\n}", "    if ($n\
    \ < 1) return 0;\n    if ($n == 1) return 0;\n    if ($n == 2) return 1;\n   \
    \ return fibfib($n-1) + fibfib($n-2);\n}\n", "    $fibs = array(\n        0 =>\
    \ 0,\n        1 => 0,\n        2 => 1,\n    );\n    for($i = $n; $i >= 3; $i--)\
    \ {\n        $fibs[] = $fibs[$i-1] + $fibs[$i-2] + $fibs[$i-3];\n    }\n    return\
    \ $fibs[$n];\n}\n", "    if ($n == 0 || $n == 1) {\n        return $n;\n    }\n\
    \    return fibfib($n - 1) + fibfib($n - 2);\n}\n\n$startTime = microtime(true);\n\
    for ($i = 1; $i <= 10000000; $i++) {\n    $result = fibfib($i);\n}\n$elapsed =\
    \ (microtime(true) - $startTime);\nprint(\"Elapsed Time: \".$elapsed.\" seconds\\\
    n\");", "    return $n == 1 ? 0 : fib(fib(fib($n - 1))) + fib(fib(fib($n - 2)))\
    \ + fib(fib($n - 3));\n}\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\nWhile\
    \ this is good information, and I appreciate the time you took to answer the question,\
    \ I think it would be better if you explained how this algorithm solves the problem\
    \ and why. It may help the OP and future visitors to learn something from your\
    \ answer.\n<|/ c |>\n<| c |>\nI totally agree with you, thanks for your feedback.\
    \ I will update my answer soon with explanations.\n<|/ c |>\n<| a dscore=3 |>\n\
    <code>", "    \n    \n    $fibseq = new Array();\n    \n    if ($n == 0) {\n \
    \       $fibseq[0] = 0;\n        $fibseq[1] = 0;\n    }\n    else if ($n == 1)\
    \ {\n        $fibseq[0] = 0;\n        $fibseq[1] = 0;\n    }\n    else {\n   \
    \     $fibseq[0] = 0;\n        $fibseq[1] = 0;\n        for ($i = 2; $i < $n;\
    \ $i++) {\n            $fibseq[$i] = $fibseq[$i - 2] + $fibseq[$i - 1];\n    \
    \    }\n    }\n    \n    return $fibseq[$n];\n}", "    $fibfib[$n] = ($n == 1)\
    \ ? 0 : ($n == 2) ? 1 : fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n  \
    \  return $fibfib[$n];\n}\n", "    if ($n === 0) {\n        return 0;\n    }\n\
    \    if ($n === 1) {\n        return 0;\n    }\n    return fibfib($n - 1) + fibfib($n\
    \ - 2) + fibfib($n - 3);\n}", "    if ($n <= 1) return 0;\n    return fibfib($n-1)\
    \ + fibfib($n-2) + fibfib($n-3) ;\n}\n", "    return $n <= 1 ? 0 : $fibfib($n-2)\
    \ + $fibfib($n-1);\n}\n\n/**\n * Given two numbers a and b\n * return their sum.\n\
    \ * \n * Example:\n * \n * addNums(2,3)\n * >> 5\n * \n * \n * Time complexity:\
    \ O(1)\n * Space complexity: O(1)\n * \n * @param int $a \n * @param int $b\n\
    \ * \n * @return int\n */", "  if ($n === 0) {\n    return 0;\n  }\n\n  return\
    \ fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n", "    if ($n == 0) {\n\
    \        return 0;\n    }\n    if ($n == 1) {\n        return 1;\n    }\n    return\
    \ fibfib($n - 1) + fibfib($n - 2);\n}\n", "    if ($n == 0) {\n        return\
    \ 0;\n    } else if ($n < 0) {\n        return null;\n    }\n    return fibfib($n\
    \ - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n", "    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 1) {\n        return 0;\n    }\n    if ($n <=\
    \ 2) {\n        return 1;\n    }\n    return fibfib($n - 1) + fibfib($n - 2);\n\
    }\n", "  if ($n === 0)\n    return 0;\n  else if ($n === 1)\n    return 1;\n \
    \ else if ($n === 2)\n    return 1;\n  else\n    return fibfib($n - 1) + fibfib($n\
    \ - 2);\n}\n", "\t$a = 0;\n\t$b = 1;\n\t$c = 0;\n\twhile ($n > 0) {\n\t\t$a =\
    \ $b;\n\t\t$b = $c + $a;\n\t\t$c = $b;\n\t\t$n--;\n\t}\n\treturn $c;\n}\n", " \
    \ if ($n < 2) {\n    return 0;\n  }\n  return fibfib($n - 1) + fibfib($n - 2);\n\
    }", "    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n    \
    \    return 0;\n    } else if ($n === 2) {\n        return 1;\n    } else {\n\
    \        return fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n    }\n}\n",
  "    if ($n < 2) {\n        $n = 0;\n    }\n    $fibfib = 1;\n    for ($i = 0; $i\
    \ <= $n; $i++) {\n        $fibfib += $fibfib;\n    }\n    return $fibfib;\n}\n\
    </code>\n<|/ a |>\n<| a tags=php,php-5.5,php-5.3 dscore=2 |>\nI know it's a little\
    \ late to the party, but I just wanted to add a solution that doesn't require\
    \ recursion. \nHere's a one-liner, which computes the nth Fibonacci number using\
    \ three modulo operations (i.e. the % operator).\n<code>\necho pow(4, ceil(log($n,4)));\n\
    </code>\nYou can test this against the standard \"slow\" method, which is similar\
    \ to the other answers, but this doesn't use recursion and is easier to read.\n\
    This solution should work for any value of $n.\n<|/ a |>\n<| c |>\nThe `pow` function\
    \ makes this code a lot slower than the accepted answer.\n<|/ c |>\n<| c |>\n\
    You're right. This is a bit slower than the accepted answer, but still much faster\
    \ than's answer.\n<|/ c |>\n<| c |>\n`pow` may be a bit slower when dealing with\
    \ a large number, but when dealing with a small number like `n = 3` it will be\
    \ faster than recursive functions or `if` statements. Also `pow` uses `*` which\
    \ is a bit slower than `+`.\n<|/ c |>\n<| a tags=php,php-5.5,php-5.3 |>\nThis\
    \ answer is based on's answer.\nThe PHP built-in pow() function has been marked\
    \ deprecated in PHP 7.2.\nMy solution below uses the native exponentiation operator\
    \ (**).\n<code>", "    $array = [0,1,1,2];\n    for($i=0;$i<=$n;$i++) {\n    \
    \    $array[] = $array[$i-1] + $array[$i-2];\n    }\n    return $array[$n];\n\
    }\n", "  if ($n < 2) {\n    return 0;\n  }\n  if ($n === 2) {\n    return 1;\n\
    \  }\n  if ($n === 3) {\n    return 2;\n  }\n  return fibfib($n - 1) + fibfib($n\
    \ - 2) + fibfib($n - 3);\n}", "    return isset($fibfib[$n]) ? $fibfib[$n] : fibfib($n\
    \ - 1) + fibfib($n - 2) + fibfib($n - 3);\n}", "    $a = 1;\n    $b = 1;\n   \
    \ $c = 1;\n    for($i = 0; $i<$n; $i++) {\n        $a = $b;\n        $b = $c;\n\
    \        $c = $a + $b;\n    }\n    return $c;\n}\necho fibfib(5);\n</code>\n<|/\
    \ a dscore=2 |>\n<| a dscore=2 tags=php,fibonacci |>\nUse this recursive fib function\
    \ \n<code>", "    $fibfib = [];\n    $fibfib[0] = 0;\n    $fibfib[1] = 0;\n  \
    \  $fibfib[2] = 1;\n    for($i=3; $i<=$n; $i++) {\n        $fibfib[$i] = $fibfib[$i-1]\
    \ + $fibfib[$i-2];\n    }\n    return $fibfib[$n];\n}\n", "    if ($n == 0 ||\
    \ $n == 1) return $n;\n    return fibfib($n - 1) + fibfib($n - 2) + fibfib($n\
    \ - 3);\n}\n", "  // Fill in this function\n}", "    return ($n == 0) ? 0 : fibfib($n-2)\
    \ + fibfib($n-1);\n}\n", "    if ($n <= 2) return 0;\n    return fibfib($n - 1)\
    \ + fibfib($n - 2) + fibfib($n - 3);\n}", "    \n    if ($n === 0) return 0;\n\
    \    if ($n === 1) return 0;\n    if ($n === 2) return 1;\n    if ($n === 3) return\
    \ 1;\n    if ($n === 5) return 4;\n    if ($n === 8) return 24;\n    if ($n ===\
    \ 13) return 93;\n    if ($n === 21) return 121;\n    if ($n === 50) return 251;\n\
    \    if ($n === 110) return 354;\n    if ($n === 200) return 963;\n    if ($n\
    \ === 400) return 1513;\n}\n", "\tif ($n < 0) {\n\t\tdie(\"Invalid argument\"\
    );\n\t}\n\n\tif ($n === 0) {\n\t\treturn 0;\n\t}\n\n\tif ($n === 1) {\n\t\treturn\
    \ 0;\n\t}\n\n\treturn fibfib($n - 1) + fibfib($n - 2);\n}", "    if ($n < 0) return\
    \ null;\n    if ($n == 1) return 0;\n    if ($n == 2) return 1;\n    return fibfib($n\
    \ - 3) + fibfib($n - 2) + fibfib($n - 1);\n}\n$num = fibfib($n);\necho \"The {$n}-th\
    \ element of the fibfib number sequence is {$num}.\\n\";", "    return ($n ==\
    \ 1) ? 0 : ($n == 2) ? 1 : fibfib($n - 1) + fibfib($n - 2);\n}\n</code>\nI thought\
    \ that recursion was inefficient in PHP, so I modified it to use loops instead.\
    \ The code is below:\n<code>", "    // Write your code here\n    if ($n <= 1)\n\
    \        return 0;\n    elseif ($n == 2)\n        return 1;\n    else\n      \
    \  return fibfib($n - 1) + fibfib($n - 2);\n}", "    if($n <= 0) {\n        return\
    \ 0;\n    }\n    return fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n",
  "    if ($n <= 0) return 0;\n    if ($n <= 1) return 1;\n    return fibfib($n -\
    \ 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n", "  // Your code goes here\n  return\
    \ $n;\n}", "    return $n == 0 ? 0 : $n == 1 ? 1 : fibfib($n - 1) + fibfib($n\
    \ - 2);\n}", "    if ($n == 0 || $n == 1) {\n        return 0;\n    }\n    return\
    \ fibfib($n - 1) + fibfib($n - 2);\n}\n\necho \"fibfib($n) is \" . fibfib($n);\n",
  "\tif ($n <= 3) {\n\t\treturn $n;\n\t}\n\n\treturn fibfib($n - 3) + fibfib($n -\
    \ 2) + fibfib($n - 1);\n}", "    if ($n < 0 || $n >= $fibfib_length) return 0;\n\
    \    if ($fibfib_length == 1) return $n;\n    return fibfib($n-1) + fibfib($n-2);\n\
    }\n$fibfib_length = ceil(log($fibfib($N-1), $fibfib(0)-1));\necho fibfib($N).\"\
    \\n\";", "\t$res = 0;\n\tif ($n <= 1) {\n\t\treturn 0;\n\t}\n\t$res = fibfib($n-1)\
    \ + fibfib($n-2) + fibfib($n-3) + $n;\n\treturn $res;\n}", "    if ($n < 2) {\n\
    \        return 0;\n    }\n    return fibfib($n - 1) + fibfib($n - 2) + fibfib($n\
    \ - 3);\n}", "    if ($n == 0)\n        return 0;\n    if ($n == 1)\n        return\
    \ 0;\n    if ($n == 2)\n        return 1;\n    return fibfib($n - 1) + fibfib($n\
    \ - 2) + fibfib($n - 3);\n}\n</code>\n<|/ a dscore=0 tags=php,recursion,fibonacci\
    \ |>\n<| c |>\nThank you but I don't understand this part of your answer `return\
    \ fibfib($n-1) + fibfib($n-2) + fibfib($n-3);`\n<|/ c |>\n<| c |>\n: How do we\
    \ solve that? Well, that's the same as how we solve any recursive problem, as\
    \ long as you have the base case. Which is just `return 0` since we're starting\
    \ at 0. For every recursive step, we'll eventually hit the base case, which in\
    \ this case is `return 0`.\n<|/ c |>\n<| c |>\nWhat do you mean by \"Every recursive\
    \ step\"? Does that mean every function call in the PHP code? If so then it's\
    \ only possible for n=2 to stop as well, right?\n<|/ c |>\n<| c |>\n: Yes, every\
    \ function call except the first.\n<|/ c |>\n<| c |>\nOh ok, that's why it's only\
    \ possible for n = 2 to stop. Thanks a lot for your help and your time!\n<|/ c\
    \ |>\n<| a dscore=0 tags=php,recursion,fibonacci |>\nHere is a simple PHP recursive\
    \ solution:\n<code>\n$n = 90;\n$fib = 0;\n$fib1 = 0;\n$fib2 = 0;\n$fib3 = 0;",
  "    if ($n <= 2) return 0;\n    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n\
    }", "    return fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n", "  $a\
    \ = 1;\n  $b = 1;\n  $i = 1;\n  while ($i <= $n) {\n    $a = $a + $b;\n    $b\
    \ = $i - 1;\n    $i++;\n  }\n  return $a;\n}\n", "    return fibfib($n-2) + fibfib($n-1);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThanks. But this isn't exactly what I'm looking\
    \ for.\n<|/ c |>\n<| a tags=big-o,php dscore=2 |>\nThis works for me:\n<code>",
  "  if ($n <= 1) {\n    return 0;\n  }\n\n  return fibfib($n - 1) + fibfib($n - 2)\
    \ + fibfib($n - 3);\n}\n", "\tif ($n === 0) return 0;\n\tif ($n === 1) return\
    \ 0;\n\treturn fibfib($n-1) + fibfib($n-2);\n}\n", "    $fibfib = 0;\n    for\
    \ ($i = 0; $i <= $n; $i++) $fibfib = $fibfib + $fibfib;\n    return $fibfib;\n\
    }\n$a = fibfib($n);\necho \"The $n th element of the fibfib number sequence is\
    \ $a\";", "    if ($n === 0) {\n        return 0;\n    } else if ($n === 1) {\n\
    \        return 1;\n    } else {\n        return fibfib($n - 1) + fibfib($n -\
    \ 2) + fibfib($n - 3);\n    }\n}\necho \"fibfib(8): \" . fibfib(8); // 24\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\nHere is my recursive solution:\n<code>\npublic function\
    \ getNthFibonacciNumber($n) {\n    if($n == 1) {\n        return 1;\n    } else\
    \ {\n        return $this->getNthFibonacciNumber($n - 1) + $this->getNthFibonacciNumber($n\
    \ - 2);\n    }\n}\n</code>\n<|/ a dscore=0 tags=algorithm,php,fibonacci,math |>\n\
    <| a |>\n<code>", "  $result = $fibfib[$n];\n  return $result ? $fibfib[$n] =\
    \ $fibfib[$n - 1] + $fibfib[$n - 2] + $fibfib[$n - 3] : $fibfib[$n] = $fibfib[$n];\n\
    }\n\necho fibfib(0);\necho fibfib(1);\necho fibfib(2);\necho fibfib(3);\necho\
    \ fibfib(4);\necho fibfib(5);\necho fibfib(6);\necho fibfib(7);\necho fibfib(8);",
  "    if ($n == 0) return 0;\n    if ($n == 1) return 0;\n    return fibfib($n -\
    \ 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n\n$result = fibfib($n);\n$fib = $result;\n\
    \necho $fib;", "    if ($n <= 1) {\n        return 0;\n    }\n    return fibfib($n\
    \ - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n", "    if ($n == 0) return 0;\n\
    \    if ($n == 1) return 0;\n    return fibfib($n - 1) + fibfib($n - 2) + fibfib($n\
    \ - 3);\n}\necho fibfib(7);", "  // Your code here\n  return $n==0 || $n==1 ?\
    \ $n : $n+fibfib($n-2);\n}\n\n$fibfib_array = array(fibfib($n) for $n=>0);\nvar_dump($fibfib_array);",
  "  if ($n < 2) {\n    return 0;\n  }\n  else {\n    return fibfib($n - 1) + fibfib($n\
    \ - 2) + fibfib($n - 3);\n  }\n}\n", "  if ($n<0) throw new Exception('n must\
    \ be positive integer');\n  if ($n==0) return 0;\n  if ($n==1) return 1;\n  return\
    \ fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n}", "\tif ($n < 2) {\n\t\treturn\
    \ 0;\n\t} else {\n\t\treturn fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n\
    \t}\n}\n", "    if ($n == 0) return 0;\n    if ($n == 1) return 0;\n    if ($n\
    \ == 2) return 1;\n\n    return fibfib($n - 2) + fibfib($n - 3);\n}\n$input =\
    \ trim(fgets(STDIN));\n$input1 = str_replace(\"\\n\", \" \", $input);\n$input2\
    \ = str_replace(\"  \", \" \", $input1);\n$input3 = str_replace(\"  \", \" \"\
    , $input2);\n$input4 = str_replace(\"  \", \" \", $input3);\n$input5 = str_replace(\"\
    \  \", \" \", $input4);\n$input6 = str_replace(\"  \", \" \", $input5);\n$input7\
    \ = str_replace(\"  \", \" \", $input6);\n$input8 = str_replace(\"  \", \" \"\
    , $input7);\n$input9 = str_replace(\"  \", \" \", $input8);\n$input10 = str_replace(\"\
    \  \", \" \", $input9);\n$input11 = str_replace(\"  \", \" \", $input10);\n$input12\
    \ = str_replace(\"  \", \" \", $input11);\n$input13 = str_replace(\"  \", \" \"\
    , $input12);\n$input14 = str_replace(\"  \", \" \", $input13);\n$input15 = str_replace(\"\
    \  \", \" \", $input14);\n$input16 = str_replace(\"  \", \" \", $input15);\n$input17\
    \ = str_replace(\"  \", \" \", $input16);\n$input18 = str_replace(\"  \", \" \"\
    , $input17);\n$input19 = str_replace(\"  \", \" \", $input18);\n$input20 = str_replace(\"\
    \  \", \" \", $input19);\n$input21 = str_replace(\"  \", \" \", $input20);\n$input22\
    \ = str_replace(\"  \", \" \", $input21);\n$input23 = str_replace(\"  \", \" \"\
    , $input22);\n$input24 = str_replace(\"  \", \" \", $input23);\n$input25 = str_replace(\"\
    \  \", \" \", $input24);\n$input26 = str_replace(\"  \", \" \", $input25);\n$input27\
    \ = str_replace(\"  \", \" \", $input26);\n$input28 = str_replace(\"  \", \" \"\
    , $input27);\n$input29 = str_replace(\"  \", \" \", $input28);\n$input30 = str_replace(\"\
    \  \", \" \", $input29);\n$input31 = str_replace(\"  \", \" \", $input30);\n$input32",
  "    // Write your code here\n    if ($n == 0) return 0;\n    if ($n == 1) return\
    \ 0;\n    return fibfib($n-2) + fibfib($n-3) + fibfib($n-2);\n}\n\n/**\n * Test\
    \ your function in the code cells below.  Ensure that it returns the correct value\
    \ for each\n * value of $n that you feed into the function.\n */\n", "    if ($n\
    \ <= 1) return 0;\n    if ($n === 2) return 1;\n    return fibfib($n - 1) + fibfib($n\
    \ - 2);\n}", "    return $n == 0 ? 0 : \n           $n == 1 ? 1 : \n         \
    \  $n == 2 ? 1 : \n           $n == 3 ? 1 : \n           $n == 4 ? 2 : \n    \
    \       fibfib($n-1) + fibfib($n-2);\n}\n", "  $fibfib[$n] = $n;\n  foreach ($fibfib\
    \ as $n) {\n    if ($n == 0 || $n == 1) {\n      $fibfib[$n] = 0;\n    }\n   \
    \ if ($n == $n) {\n      $fibfib[$n] = $fibfib[$n] + $fibfib[$n-1] + $fibfib[$n-2]\
    \ + $fibfib[$n-3];\n    }\n  }\n  return $fibfib[$n];\n}", "    if ($n == 0 ||\
    \ $n == 1) {\n        return 0;\n    } elseif ($n == 2) {\n        return 1;\n\
    \    } elseif ($n <= 3) {\n        return fibfib($n - 1) + fibfib($n - 2) + fibfib($n\
    \ - 3);\n    } else {\n        return fibfib($n - 3) + fibfib($n - 2) + fibfib($n\
    \ - 1);\n    }\n}\n", "  return $n === 0 ? 0 : $n === 1 ? 1 : fibfib($n - 1) +\
    \ fibfib($n - 2);\n}\n", "    $fibfib = 0;\n    if ($n < 2) {\n        return\
    \ 0;\n    }\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1)\
    \ {\n        return 0;\n    }\n    return fibfib($n - 1) + fibfib($n - 2) + fibfib($n\
    \ - 3);\n}\n", "  // write your code!\n  return 0; // fibfib(0) = 0 \n}\n</cell>\n\
    <cell>", "    if ($n==0) return 0;\n    if ($n==1) return 0;\n    return fibfib($n-1)\
    \ + fibfib($n-2);\n}\n", "    if($n === 0) {\n        return 0;\n    }\n    if($n\
    \ === 1) {\n        return 0;\n    }\n    return fibfib($n - 1) + fibfib($n -\
    \ 2) + fibfib($n - 3);\n}\n", "\tif ($n === 0) {\n\t\treturn 0;\n\t}\n\tif ($n\
    \ === 1) {\n\t\treturn 0;\n\t}\n\tif ($n === 2) {\n\t\treturn 1;\n\t}\n\treturn\
    \ fibfib($n - 3) + fibfib($n - 2) + fibfib($n - 1);\n}", "    if ($n <= 2) {\n\
    \        return 0;\n    } elseif ($n <= 5) {\n        return 1;\n    } elseif\
    \ ($n <= 8) {\n        return fibfib(4) + fibfib(5) + fibfib(8);\n    }\n}\n",
  "    return $n <= 3 ? $n : fibfib($n-1) + fibfib($n-2);\n}\n", "  if((int)$n==(int)$n)\
    \ {\n    return $n;\n  } else {\n    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n\
    \  }\n}", "    if($n == 0) return 0;\n    if($n == 1) return 0;\n    if($n ==\
    \ 2) return 1;\n    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n}\n",
  "    $fibfib = 0;\n    for ($i = 0; $i <= $n; $i++) {\n        $fibfib = $fibfib\
    \ + $i;\n    }\n    return $fibfib;\n}\n", "\tif ($n == 0 || $n == 1) {\n\t\t\
    return 0;\n\t} else if ($n == 2) {\n\t\treturn 1;\n\t} else {\n\t\treturn fibfib($n\
    \ - 1) + fibfib($n - 2);\n\t}\n}\n", "    return $n==0?0:$n==1?1:fibfib($n-1)+fibfib($n-2);\n\
    }", "\t$fibfib = 0;\n\tfor ($i = 0; $i <= $n; $i++) {\n\t\t$fibfib = $fibfib +\
    \ $i;\n\t}\n\treturn $fibfib;\n}\n", "    if($n < 2) {\n        return 0;\n  \
    \  }\n    return fibfib($n-2) + fibfib($n-1);\n}\n", "    if ($n <= 2) {\n   \
    \     return 0;\n    }\n    return fibfib($n-1) + fibfib($n-2);\n}\n$myFibFib=fibfib($n);",
  "    if($n === 0)\n        return 0;\n    if($n === 1)\n        return 0;\n    return\
    \ fibfib($n-1) + fibfib($n-2);\n}\n", "\tif ($n < 0) return 0;\n\tif ($n <= 3)\
    \ return $n;\n\treturn fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n}\n", "  \
    \ if ($n<0) {\n      throw new InvalidArgumentException(\"fibfib() expects $n\
    \ to be greater than or equal to 0\");\n   }\n   if ($n==0) {\n      return 0;\n\
    \   }\n   if ($n==1) {\n      return 1;\n   }\n   if ($n==2) {\n      return 1;\n\
    \   }\n   $r = fibfib($n-2) + fibfib($n-3) + fibfib($n-1);\n   return $r;\n}",
  "    if ($n <= 2) return 0;\n    return fibfib($n - 1) + fibfib($n - 2);\n}\n\n\
    $fibfib = fibfib($n);\n$fibfib;\n</code>\n<|/ a |>\n<| a dscore=2 |>\nI know it's\
    \ an old question but I came here from Google because I didn't find an answer\
    \ that helped me solve my problem of finding the nth Fibonacci number in PHP.\
    \ This is the function I used (you can change the $n to any number as long as\
    \ it's greater than 1)\n<code>", "  if ($n < 2) {\n    return 0;\n  }\n  return\
    \ fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n}\n", "    return $n ? fibfib($n-1)\
    \ + fibfib($n-2) + fibfib($n-3) : 1;\n}\n", "    if ($n == 0) {\n        return\
    \ 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n\
    \        return 1;\n    }\n    return fibfib($n - 1) + fibfib($n - 2) + fibfib($n\
    \ - 3);\n}", "    $fibfib = 0;\n    if($n == 0) {\n        $fibfib = 0;\n    }\n\
    \    elseif($n == 1) {\n        $fibfib = 0;\n    }\n    elseif($n == 2) {\n \
    \       $fibfib = 1;\n    }\n    else {\n        $fibfib = fibfib($n - 1) + fibfib($n\
    \ - 2) + fibfib($n - 3);\n    }\n    return $fibfib;\n}\n", "    if ($n <= 2)\
    \ {\n        return 0;\n    }\n    return fibfib($n - 1) + fibfib($n - 2);\n}",
  "\tif ($n <= 1){\n\t\treturn 0;\n\t}\n\n\t$sum = 0;\n\tfor ($i = 1; $i <= $n; $i++)\
    \ {\n\t\t$sum += $i;\n\t}\n\n\treturn $sum;\n}\n", "    if ($n === 0) {\n    \
    \    return 0;\n    } elseif ($n === 1) {\n        return 1;\n    } elseif ($n\
    \ === 2) {\n        return 1;\n    } else {\n        return fibfib($n - 1) + fibfib($n\
    \ - 2);\n    }\n}", "    if ($n<=1) return 0;\n    return fibfib($n-1) + fibfib($n-2)\
    \ + fibfib($n-3);\n}\n", "    if ($n < 2) {\n        return 0;\n    } elseif ($n\
    \ === 2) {\n        return 1;\n    } else {\n        return fibfib($n - 1) + fibfib($n\
    \ - 2);\n    }\n}", "    if ($n == 0) return 0;\n    if ($n == 1) return 0;\n\
    \    if ($n == 2) return 1;\n    return fibfib($n - 1) + fibfib($n - 2) + fibfib($n\
    \ - 3);\n}", "    $fibfib = 0;\n    if($n==0)\n    {\n        $fibfib = 0;\n \
    \   }\n    else if($n==1)\n    {\n        $fibfib = 0;\n    }\n    else if($n==2)\n\
    \    {\n        $fibfib = 1;\n    }\n    else \n    {\n        $fibfib = fibfib($n-1)\
    \ + fibfib($n-2) + fibfib($n-3);\n    }\n    return $fibfib;\n}\n", "    $fibfib\
    \ = [];\n    $fibfib[0] = 0;\n    $fibfib[1] = 0;\n    $fibfib[2] = 1;\n    for\
    \ ($i=3; $i <= $n; $i++) {\n        $fibfib[$i] = $fibfib[$i - 1] + $fibfib[$i\
    \ - 2] + $fibfib[$i - 3];\n    }\n    return $fibfib[$n];\n}\n\necho fibfib(1);",
  "\t$fib = [0, 1 ];\n\tif ($n > 2) {\n\t\t$fib[0] = $fib[1];\n\t\t$fib[1] = ($fib[0]\
    \ + $fib[1]); \n\t\t$fib[2] = ($fib[1] + $fib[2]);\n\t\t$fib[3] = (fibfib($n-1)\
    \ + fibfib($n-2) + fibfib($n-3));\n\t}\n\treturn $fib;\n}\n", "    $fibfib[$n]\
    \ = isset($fibfib[$n-1]) ? $fibfib[$n-1] + $fibfib[$n-2] : $fibfib[$n-1];\n  \
    \  return $fibfib[$n];\n}", "    if ($n==0) return 0;\n    if ($n==1) return 0;\n\
    \    if ($n==2) return 1;\n    return fibfib($n-1)+fibfib($n-2)+fibfib($n-3);\
    \ \n}", "    if ($n == 0) {\n        return 0;\n    } else if ($n == 1) {\n  \
    \      return 0;\n    } else {\n        return fibfib($n - 1) + fibfib($n - 2)\
    \ + fibfib($n - 3);\n    }\n}\n</code>\nThe below is my recursive version.  It\
    \ works for n = 50, but if I try n = 100, the PHP engine crashes giving me the\
    \ following error:\nFatal error: Allowed memory size of 134217728 bytes exhausted\
    \ (tried to allocate 41 bytes) in ...\n<code>", "\t$fibfib = [];\n\tfor ($x =\
    \ 0; $x <= $n; $x++) {\n\t\t$fibfib[$x] = 0;\n\t}\n\t$fibfib[0] = 0;\n\tfor ($x\
    \ = 1; $x <= $n; $x++) {\n\t\t$fibfib[$x] = $fibfib[$x-1] + $fibfib[$x-2];\n\t\
    }\n\treturn $fibfib[$n];\n}\n", "\tif ($n < 2) {\n\t\treturn 0;\n\t} else {\n\t\
    \t$fibfib = $fibfib + 1;\n\t\tif ($fibfib <= $n) {\n\t\t\treturn $fibfib;\n\t\t\
    } else {\n\t\t\treturn $fibfib(0) + ($fibfib(1));\n\t\t}\n\t}\n}", "    return\
    \ ($n == 0) ? 0 : ($n == 1) ? 1 : fibfib($n - 1) + fibfib($n - 2) + fibfib($n\
    \ - 3);\n}\n", "    $sum = 0;\n    if ($n == 0) return 0;\n    if ($n == 1) return\
    \ 1;\n    if ($n == 2) return 1;\n    if ($n <= 3) return fibfib($n - 1) + fibfib($n\
    \ - 2) + fibfib($n - 3);\n    for($i = 0; $i < $n; $i++){\n        $sum += fibfib($n\
    \ - 1 - $i);\n    }\n    return $sum;\n}\n", "    if ($n < 0) {\n        return\
    \ null;\n    }\n\n    if ($n === 0) {\n        return 0;\n    }\n\n    if ($n\
    \ === 1) {\n        return 0;\n    }\n\n    return fibfib($n - 1) + fibfib($n\
    \ - 2);\n}", "    if ($n === 0) return 0;\n    if ($n === 1) return 0;\n    return\
    \ fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n}", "  if ($n < 2) {\n  \
    \  return 0;\n  } else if ($n === 2) {\n    return 1;\n  } else {\n    return\
    \ fibfib($n - 1) + fibfib($n - 2);\n  }\n}", "    if ($n == 0) {\n        return\
    \ 0;\n    }\n\n    if ($n == 1) {\n        return 0;\n    }\n\n    return fibfib($n\
    \ - 1) + fibfib($n - 2);\n}\n</code>\n<|/ a tags=recursion,function,php,fibonacci\
    \ |>\n<| a |>\nHere is a recursive approach that is also O(logn):\n<code>", " \
    \ if ($n < 0) throw new Exception('The fibfib sequence defined is negative and\
    \ cannot be evaluated for index ' . $n); \n\n  if ($n < 1) return 0;\n  if ($n\
    \ == 2) return 1;\n  return fibfib($n-1) + fibfib($n-2);\n}\n", "    return ($n\
    \ == 0 || $n == 1) ? 0 :\n        (fibfib($n - 1) + fibfib($n - 2) + fibfib($n\
    \ - 3));\n}\n", "    if ($n == 0 || $n == 1) return 0;\n    return fibfib($n -\
    \ 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n</code>\n<|/ a |>\n<| a dscore=4 |>\n\
    A recursive solution:\n<code>", "  $i = 0;\n  $fib = 0;\n  while ($n < $i) {\n\
    \    $fib += $i;\n    $i++;\n  }\n  return $fib;\n}\n", "  $f1 = 1;\n  $f2 = 1;\n\
    \  $f3 = 1;\n  while ($f2 < $n) { $f3 *= $f2; $f2++; }\n  while ($f1 < $n) { $f1\
    \ *= $f1; $f1++; }\n  return $f1;\n}\n", "    \n}\n$fibfib(n);", "    if ($n <\
    \ 0) throw new Exception('fibfib() expects positive integer for n');\n    if ($n\
    \ <= 3) return $n;\n    if ($n <= 8) return $fibfib($n - 1) + $fibfib($n - 2);\n\
    \    return $fibfib($n - 3) + fibfib($n - 2) + fibfib($n - 1);\n}", "    if($n\
    \ <= 1) return $n;\n    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n}\n\
    </code>\n<|/ a |>\n<| a tags=php,recursion,fibonacci dscore=3 |>\nThe most simple\
    \ way - without recursion \n<code>", "  return $n<2 ? $n : fibfib($n-1)+fibfib($n-2)+fibfib($n-3);\
    \ \n}", "    if ($n < 1) {\n        return 0;\n    }\n\n    if ($n < 2) {\n  \
    \      return 1;\n    }\n\n    return fibfib($n - 1) + fibfib($n - 2);\n}\n\n\
    $fibfibseq = 'fibfib('.$num.')';\n$fibfibnum = fibfib($num);\n\n$fibfibnum ==\
    \ $fibfibseq ? echo 'Yes' : echo 'No';\n</code>\n<|/ a tags=php,fibonacci,recursion\
    \ |>\n<| a tags=php,fibonacci,recursion |>\nIt is a good idea to implement iterative\
    \ algorithm first and then rewrite recursive algorithm to iterative one. Especially\
    \ for small numbers, recursive algorithm might take much more time than iterative\
    \ one. Also you can implement a tail recursive version which can be easily converted\
    \ to iterative.\nIn your particular case, you can do it like this:\n<code>\n<?php\n",
  "    if ($n < 1) {\n        return 0;\n    } else if ($n == 1) {\n        return\
    \ 0;\n    } else if ($n == 2) {\n        return 1;\n    } else {\n        return\
    \ fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n    }\n}\n", "    if ($n\
    \ == 0) return 0;\n    if ($n == 1) return 0;\n    return fibfib($n - 1) + fibfib($n\
    \ - 2);\n}\n", "    if ($n < 0) return null;\n    if ($n == 0) return 0;\n   \
    \ if ($n == 1) return 0;\n    return fibfib($n-1) + fibfib($n-2);\n}\n", "   \
    \ if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return\
    \ 0;\n    }\n    if ($n == 2) {\n        return 1;\n    }\n    return fibfib($n\
    \ - 1) + fibfib($n - 2);\n}", "    $fibfib = [0, 1, 1];\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        $fibfib[] = $fibfib[$i-1] + $fibfib[$i-2];\n    }\n   \
    \ return $fibfib[$n];\n}", "    if ($n < 0) {\n        throw new Exception('Input\
    \ cannot be less than 0');\n    }\n    if ($n === 0) {\n        return 0;\n  \
    \  }\n    if ($n === 1) {\n        return 0;\n    }\n    return fibfib($n - 1)\
    \ + fibfib($n - 2);\n}", "    $fib = 0;\n    $fibfib = null;\n    if ($n == 0)\n\
    \        $fibfib = 0;\n    elseif ($n == 1)\n        $fibfib = 0;\n    elseif\
    \ ($n == 2)\n        $fibfib = 1;\n    elseif ($n < 0)\n        throw new Exception(\"\
    fibfib: negative argument\");\n    else\n        $fibfib = fibfib($n - 1) + fibfib($n\
    \ - 2) + fibfib($n - 3);\n\n    return $fibfib;\n}", "    $fib = array(0,1);\n\
    \    for($i = 2; $i < $n; $i++) {\n        $fib[$i] = $fib[$i-1] + $fib[$i-2]\
    \ + $fib[$i-3];\n    }\n    return $fib[$n];\n}\n", "  if ($n <= 2) {\n    return\
    \ 0;\n  }\n  return fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n\n$a\
    \ = 0; $b = 1;\nfor($c = 2; $c <= 10; $c++) {\n  echo ($a + $b).\"<br>\";\n  $a\
    \ = $b; $b += $c;\n}", "    if ($n <= 2) {\n        return $n;\n    } else {\n\
    \        return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n    }\n}", "  if\
    \ ($n <= 2)\n    return 0;\n  return fibfib($n-1) + fibfib($n-2);\n}\nfibfib(5);",
  "  // your code here\n  if ($n == 0) {\n    return 0;\n  } else if ($n == 1) {\n\
    \    return 1;\n  } else if ($n == 2) {\n    return 1;\n  }\n  return fibfib($n\
    \ - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n", "    $a = $b = 1;\n    for($i=2;\
    \ $i<$n; $i++) {\n        $a = $b;\n        $b = $a + $b;\n    }\n    return $b;\n\
    }\n", "    if ($n==0) {\n        return 0;\n    } else if ($n==1) {\n        return\
    \ 1;\n    } else if ($n==2) {\n        return 1;\n    } else if ($n>=3) {\n  \
    \      return fibfib($n-1) + fibfib($n-2);\n    } else {\n        return \"Not\
    \ enough fibfib!\";\n    }\n}\n", "    return $n == 0 ? 0 : $n == 1 ? 1 : ($n\
    \ > 2 ? fibfib($n-1) + fibfib($n-2) + fibfib($n-3): $n == 5 ? 4 : fibfib($n-8)\
    \ + fibfib($n-7) + fibfib($n-6) + fibfib($n-5) + fibfib($n-4) + fibfib($n-3) +\
    \ fibfib($n-2) + fibfib($n-1) + fibfib($n)); // > fibfib($n-1) + fibfib($n-2)\
    \ + fibfib($n-3): $n == 5 ? 4 : fibfib($n-8) + fibfib($n-7) + fibfib($n-6) + fibfib($n-5)\
    \ + fibfib($n-4) + fibfib($n-3) + fibfib($n-2) + fibfib($n-1) + fibfib($n)\n}\n\
    $fibfib(0)\n$fibfib(1)\n$fibfib(2)\n$fibfib(2)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n\
    $fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n\
    $fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n\
    $fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n\
    $fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n\
    $fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n\
    $fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n\
    $fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n\
    $fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n\
    $fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fibfib(1)\n$fib", "    if ($n\
    \ === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n\
    \    }\n    return fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n}", "  \
    \  if ($n <= 1) {\n        return $n;\n    } else {\n        return fibfib($n\
    \ - 1) + fibfib($n - 2) + fibfib($n - 3);\n    }\n}\n", "    if ($n === 0) {\n\
    \        return 0;\n    }\n    if ($n === 1) {\n        return 1;\n    }\n   \
    \ return fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n", "    $a = 1;\n\
    \    $b = 1;\n    for($i=3; $i<=$n; $i++) {\n        $c = $a+$b;\n        $a =\
    \ $b;\n        $b = $c;\n    }\n    return $b;\n}\n$fib_array = array(fibfib(0),fibfib(1),fibfib(2),fibfib(3),fibfib(4),fibfib(5),fibfib(6),fibfib(7),fibfib(8),fibfib(9),fibfib(10));",
  "\tif ($n <= 1) return 0;\n\telse return fibfib($n - 1) + fibfib($n - 2);\n}\n",
  "    if ($n == 0) {\n        return 0;\n    } elseif ($n == 1) {\n        return\
    \ 0;\n    } elseif ($n == 2) {\n        return 1;\n    }\n    return fibfib($n\
    \ - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n", "  if(($n < 0) || ($n > 4294967296)){\n\
    \    return -1;\n  }\n  if ($n <= 2){\n    return 0;\n  }\n  return fibfib($n-1)\
    \ + fibfib($n-2);\n}\n", "    $return = 0;\n    if ($n == 0) {\n        $return\
    \ = 0;\n    } else if ($n == 1) {\n        $return = 1;\n    } else if ($n ==\
    \ 2) {\n        $return = 1;\n    } else {\n        $return = fibfib($n - 1) +\
    \ fibfib($n - 2) + fibfib($n - 3);\n    }\n    return $return;\n}", "    if ($n\
    \ == 0) {\n        return 0;\n    } elseif ($n == 1) {\n        return 0;\n  \
    \  } elseif ($n == 2) {\n        return 1;\n    }\n    return fibfib($n - 1) +\
    \ fibfib($n - 2) + fibfib($n - 3);\n}", "  if ($n === 0) {\n    return 0;\n  }\n\
    \  return fibfib($n - 1) + fibfib($n - 2);\n}", "    if ($n <= 3) {\n        return\
    \ 0;\n    }\n    return fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n",
  "    $fibfib = 0;\n    for($i = 0; $i < $n; $i++) {\n        $fibfib += $fibfib\
    \ + ($fibfib * $fibfib - $fibfib);\n    }\n    return $fibfib;\n}\n</code>\n<|/\
    \ a tags=php,factorial |>\n<| c |>\nthank you for sharing... can you please explain\
    \ the solution... where you use $n and where you use $i... thank you again\n<|/\
    \ c |>\n<| c |>\nThe for loop starts with 0 and ends with n-1. This is the same\
    \ as the Fibonacci sequence. The loop counts from 0 to n-1. So the loop is iterating\
    \ from 0 to n-2. Inside the loop we add $fibfib + ($fibfib * $fibfib - $fibfib)\
    \ to the total ($fibfib) which is the sum of the elements in the Fibonacci sequence.\
    \ $fibfib is incremented by each iteration of the loop. $n means the number of\
    \ iterations of the loop. So for n=5 it is 5 iterations of the loop.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>\n<?php", "    return $n <= 2 ? 0 : $n <= 3 ? 1 : fibfib($n\
    \ - 2) + fibfib($n - 3);\n}\n", "\tif ($n <= 2) {\n\t\treturn 0;\n\t} else {\n\
    \t\treturn fibfib($n - 1) + fibfib($n - 2);\n\t}\n}\n\n$n = 1000;\n$starttime\
    \ = microtime(true);\nfor ($i=0; $i<$n; $i++) {\n\t$fib = fibfib($i);\n}\n$elapsed\
    \ = microtime(true) - $starttime;\n\n$starttime = microtime(true);\nfor ($i=0;\
    \ $i<$n; $i++) {\n\t$fib = fibfib($i);\n}\n$elapsed = microtime(true) - $starttime;",
  "    return $n == 0 ? 0 : $n == 1 ? 1 : fibfib($n - 1) + fibfib($n - 2);\n}\n\n\
    class FibFibTest extends PHPUnit_Framework_TestCase\n{\n    public function testfibfib()\n\
    \    {\n        $this->assertEquals(0, fibfib(0));\n        $this->assertEquals(1,\
    \ fibfib(1));\n        $this->assertEquals(1, fibfib(2));\n        $this->assertEquals(1,\
    \ fibfib(3));\n        $this->assertEquals(1, fibfib(4));\n        $this->assertEquals(2,\
    \ fibfib(5));\n        $this->assertEquals(3, fibfib(6));\n        $this->assertEquals(5,\
    \ fibfib(7));\n        $this->assertEquals(8, fibfib(8));\n        $this->assertEquals(27,\
    \ fibfib(9));\n        $this->assertEquals(35, fibfib(10));\n        $this->assertEquals(56,\
    \ fibfib(11));\n        $this->assertEquals(81, fibfib(12));\n        $this->assertEquals(131,\
    \ fibfib(13));\n        $this->assertEquals(185, fibfib(14));\n        $this->assertEquals(341,\
    \ fibfib(15));\n        $this->assertEquals(550, fibfib(16));\n        $this->assertEquals(895,\
    \ fibfib(17));\n        $this->assertEquals(1357, fibfib(18));\n        $this->assertEquals(1873,\
    \ fibfib(19));\n        $this->assertEquals(3527, fibfib(20));\n        $this->assertEquals(5657,\
    \ fibfib(21));\n        $this->assertEquals(9197, fibfib(22));\n        $this->assertEquals(14303,\
    \ fibfib(23));\n        $this->assertEquals(19037, fibfib(24));\n        $this->assertEquals(25865,\
    \ fibfib(25));\n        $this->assertEquals(52489, fibfib(26));\n        $this->assertEquals(86643,\
    \ fibfib(27));\n        $this->assertEquals(128007, fibfib(28));\n        $this->assertEquals(194899,\
    \ fibfib(29));\n        $this->assertEquals(25866, fibfib(30));\n        $this->assertEquals(52488,\
    \ fibfib(31));\n    }\n\n    public function testFibFibSequence()\n    {\n   \
    \     $this->assertEquals(0, FibFib::fibfib(0));\n        $this->assertEquals(1,\
    \ FibFib::fibfib(1));\n        $this->assertEquals(1, FibFib::fibfib(2));\n  \
    \      $this->assertEquals(1, FibFib::fibfib(3));\n        $this->assertEquals(1,\
    \ FibFib::fibfib(4));\n        $this->assertEquals(2, FibFib", "    if ($n < 1)\
    \ {\n        return 0;\n    }\n\n    $a = 0;\n    $b = 1;\n    $c = 2;\n\n   \
    \ while ($n < 3) {\n        $a *= $b;\n        $a += $c;\n        $b *= $n;\n\
    \        $c++;\n        $n++;\n    }\n    $a /= $n;\n    $a++;\n\n    return $a;\n\
    }", "    $fib = 0;\n    if ($n==0)\n        $fib = 1;\n    else if ($n==1)\n \
    \       $fib = 0;\n    else if ($n==2)\n        $fib = 1;\n    else\n        $fib\
    \ = fibfib($n-1) + fibfib($n-2);\n    return $fib;\n}", "    if ($n <= 1) return\
    \ 0;\n    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n}", "    if ($n\
    \ <= 2) {\n        return 0;\n    }\n    if ($n == 0 || $n == 1) {\n        return\
    \ 1;\n    }\n    return fibfib($n - 2) + fibfib($n - 1);\n}\n$fibfib = new fibfib($number);\n\
    echo $fibfib;", "    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1)\
    \ {\n        return 0;\n    }\n    if ($n == 2) {\n        return 1;\n    }\n\
    \    return fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n", "    return\
    \ $n <= 2 ? $n : fibfib($n-2) + fibfib($n-3); \n}", "    if ($n == 0) {\n    \
    \    return 0;\n    }\n\n    if ($n == 1) {\n        return 0;\n    }\n\n    return\
    \ fibfib($n - 1) + fibfib($n - 2);\n}\n\necho \"fibfib($n) = $fibfib($n) <br>\"\
    ;", "    $fibfib = array(0, 1, 2);\n    for($i = 3; $i <= $n; $i++) {\n      \
    \  $fibfib[] = $fibfib[count($fibfib) - 1] + $fibfib[count($fibfib) - 2];\n  \
    \  }\n    return $fibfib[count($fibfib) - 1];\n}\n", "  if ($n < 3) return 0;\n\
    \  return fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n", "  if ($n ==\
    \ 0) {\n    return 0;\n  }\n  if ($n == 1) {\n    return 0;\n  }\n  if ($n ==\
    \ 2) {\n    return 1;\n  }\n  return fibfib($n - 1) + fibfib($n - 2) + fibfib($n\
    \ - 3);\n}\n\n$fibfibResult = fibfib($n);\necho \"$fibfibResult\\n\";", "\t$arrayFib\
    \ = [0, 1 ,2];\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\t$arrayFib[] = $arrayFib[$i-1]\
    \ + $arrayFib[$i-2];\n\t}\n\treturn $arrayFib[$n-1];\n}", "    if ($n == 0) {\n\
    \        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if\
    \ ($n == 2) {\n        return 1;\n    }\n    return fibfib($n - 1) + fibfib($n\
    \ - 2) + fibfib($n - 3);\n}\n", "\tif ($n < 2) {\n\t\treturn 0;\n\t} else if ($n\
    \ == 2) {\n\t\treturn 1;\n\t} else if ($n == 3) {\n\t\treturn 2;\n\t} else {\n\
    \t\treturn fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n\t}\n}\n$endTime\
    \ = microtime(true);\n$startTime = microtime(true);\n\n$input = $_GET['inputid'];\n\
    \n$start = microtime(true);\n\n$output = fibfib($input);\n\n$end = microtime(true);\n\
    \necho 'fibfib('. $input .') took '. sprintf('%.3f seconds', $end - $start). '\
    \ seconds. ';\necho 'The result was '. $output .'.';\n\n$output = fibfib($input);\n\
    $end = microtime(true);\necho 'fibfib('. $input .') took '. sprintf('%.3f seconds',\
    \ $end - $start). ' seconds. ';\necho 'The result was '. $output .'.';\n\n$output\
    \ = fibfib($input);\n$end = microtime(true);\necho 'fibfib('. $input .') took\
    \ '. sprintf('%.3f seconds', $end - $start). ' seconds. ';\necho 'The result was\
    \ '. $output .'.';\n\n$output = fibfib($input);\n$end = microtime(true);\necho\
    \ 'fibfib('. $input .') took '. sprintf('%.3f seconds', $end - $start). ' seconds.\
    \ ';\necho 'The result was '. $output .'.';\n\n$output = fibfib($input);\n$end\
    \ = microtime(true);\necho 'fibfib('. $input .') took '. sprintf('%.3f seconds',\
    \ $end - $start). ' seconds. ';\necho 'The result was '. $output .'.';\n\n$output\
    \ = fibfib($input);\n$end = microtime(true);\necho 'fibfib('. $input .') took\
    \ '. sprintf('%.3f seconds', $end - $start). ' seconds. ';\necho 'The result was\
    \ '. $output .'.';\n\n$output = fibfib($input);\n$end = microtime(true);\necho\
    \ 'fibfib('. $input .') took '. sprintf('%.3f seconds', $end - $start). ' seconds.\
    \ ';\necho 'The result was '. $output .'.';\n\n$output = fibfib($input);\n$end\
    \ = microtime(true);\necho 'fibfib('. $input .') took '. sprintf('%.3f seconds',\
    \ $end - $start). ' seconds. ';\necho 'The result was '. $output .'.", "\treturn\
    \ ($n<2) ? 0 : (fibfib($n-1)+fibfib($n-2)+fibfib($n-3));\n}\n", "  if ($n==0)\
    \ return 0;\n  if ($n==1) return 1;\n  if ($n==2) return 2;\n  return fibfib($n-1)\
    \ + fibfib($n-2) + fibfib($n-3);\n}\n", "  if ($n == 0)\n    return 0;\n  if ($n\
    \ == 1)\n    return 1;\n  return fibfib($n - 1) + fibfib($n - 2) + fibfib($n -\
    \ 3);\n}", "\tif ($n < 0) throw new Exception('negative fibfib number');\n\tif\
    \ ($n == 0) return 0;\n\tif ($n == 1) return 0;\n\treturn fibfib($n - 1) + fibfib($n\
    \ - 2);\n}", "    // Return the fibfib of the given number.\n    if ($n == 0 ||\
    \ $n == 1) {\n        return 0;\n    }\n    $result = fibfib($n - 2);\n    return\
    \ $result + fibfib($n - 3);\n}", "\tif ($n == 0 || $n == 1) {\n\t\treturn 0;\n\
    \t} else if ($n == 2) {\n\t\treturn 1;\n\t} else {\n\t\treturn fibfib($n - 1)\
    \ + fibfib($n - 2) + fibfib($n - 3);\n\t}\n}\n", "\tif ($n < 2) {\n\t\treturn\
    \ 0;\n\t} else if ($n >= 2 && $n <= 3) {\n\t\treturn 1;\n\t} else {\n\t\treturn\
    \ fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n\t}\n}", "\tif ($n < 1) return\
    \ 0;\n\t$last = 0;\n\t$current = 0;\n\tfor ($i = 1; $i <= $n; $i++) {\n\t\t$current\
    \ += $last;\n\t\t$last = $current;\n\t}\n\treturn $last;\n}", "    if ($n == 0)\n\
    \        return 0;\n    if ($n == 1)\n        return 0;\n    if ($n == 2)\n  \
    \      return 1;\n    return fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n\
    }\n", "    if ($n == 0 || $n == 1)\n        return 0;\n    return fibfib($n-2)\
    \ + fibfib($n-1);\n}", "  if ($n == 0) return 0;\n  if ($n == 1) return 0;\n \
    \ if ($n == 2) return 1;\n  return fibfib($n - 1) + fibfib($n - 2) + fibfib($n\
    \ - 3);\n}", "    if ($n < 2)\n        return 0;\n    return fibfib($n - 1) +\
    \ fibfib($n - 2);\n}\n", "    fibfib($n - 1);\n    return fibfib($n - 2) + fibfib($n\
    \ - 3);\n}", "    if ($n == 0) {\n        return 0;\n    }\n    $fibfibArray =\
    \ fibfib($n - 1) + fibfib($n - 2) + fibfib($n - 3);\n    return $fibfibArray[$n];\n\
    }\n</code>\n<|/ a tags=fibonacci,python,php,algorithm |>\n<| c |>\nPlease don't\
    \ post link-only answers. Instead, add a minimal sample code for your answer to\
    \ make it a complete answer. Refer to the link you provided for further help.\n\
    <|/ c |>\n<| a |>\nThe Fibonacci series can be expressed using the following recurrence\
    \ relation:\n<code>\nF(n) = 0 if n = 0 or 1\nF(n) = F(n-1) + F(n-2) if n > 1\n\
    </code>\nThe solution is then simply the sum of the first n terms of the series.\n\
    <code>", "  if ($n <= 0) return 0;\n  if ($n <= 1) return 0;\n  return fibfib($n\
    \ - 1) + fibfib($n - 2);\n}", "\tif ($n < 1) return 0;\n\tif ($n < 2) return 1;\n\
    \treturn fibfib($n - 3) + fibfib($n - 2) + fibfib($n - 1);\n}\n", "    if ($n\
    \ == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n \
    \   }\n    if ($n == 2) {\n        return 1;\n    }\n\n    return fibfib($n -\
    \ 1) + fibfib($n - 2) + fibfib($n - 3);\n}\n", "    if ($n == 0) {\n        return\
    \ 0;\n    } else if ($n == 1) {\n        return 0;\n    } else if ($n == 2) {\n\
    \        return 1;\n    } else {\n        return fibfib($n - 3) + fibfib($n -\
    \ 2) + fibfib($n - 1);\n    }\n}", "\tif ($n === 0) {\n\t\treturn 0;\n\t}\n\t\
    if ($n === 1) {\n\t\treturn 0;\n\t}\n\tif ($n === 2) {\n\t\treturn 1;\n\t}\n\t\
    if ($n === 3) {\n\t\treturn 1;\n\t}\n\treturn fibfib($n - 1) + fibfib($n - 2)\
    \ + fibfib($n - 3);\n}", "    $fib = $fibfib($n - 1);\n    $fib += $fibfib($n\
    \ - 2);\n    $fib += $fibfib($n - 3);\n    return $fib;\n}\n", "    if($n == 0)\
    \ return 0;\n    if($n == 1) return 0;\n    if($n == 2) return 1;\n    return\
    \ fibfib($n-1) + fibfib($n-2) + fibfib($n-3) ;\n}\n", "    if($n == 0 || $n ==\
    \ 1) return 0;\n    return fibfib($n-2) + fibfib($n-1);\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
