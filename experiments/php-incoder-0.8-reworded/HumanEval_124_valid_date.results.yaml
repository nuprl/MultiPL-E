language: php
name: HumanEval_124_valid_date
results:
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $timestamp = strtotime($date);\n\
    \    if ($timestamp == FALSE) return false;\n    $valid_dates = array();\n   \
    \ $valid_dates[] = array(0, 31, 31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);\n\
    \    $valid_dates[] = array(0, 31, 31, 31, 31, 31, 30, 30, 30, 29, 31, 30, 31,\
    \ 30, 31);\n    $valid_dates[] = array(1, 31, 31, 31, 31, 31, 31, 31, 30, 30,\
    \ 30, 29, 30, 29, 30, 29);\n    $valid_dates[] = array(1, 31, 31, 31, 31, 31,\
    \ 31, 31, 31, 29, 30, 29, 30, 29, 30, 29);\n    $valid_dates[] = array(1, 31,\
    \ 31, 31, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30, 29, 30);\n    $valid_dates[]\
    \ = array(1, 31, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30, 29, 30, 29);\n    $valid_dates[]\
    \ = array(1, 31, 31, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30, 29, 30);\n    $valid_dates[]\
    \ = array(1, 31, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30, 29, 30, 29);\n    $valid_dates[]\
    \ = array(1, 31, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30, 29, 30, 29);\n    $valid_dates[]\
    \ = array(1, 31, 31, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30, 29, 30);\n    $valid_dates[]\
    \ = array(1, 31, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30, 29, 30, 29);\n    $valid_dates[]\
    \ = array(1, 31, 31, 31, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30, 29, 30);\n  \
    \  $valid_dates[] = array(1, 31, 31, 31, 31, 31, 31, 31, 30, 30, 30, 29, 30, 29,\
    \ 30, 29);\n    $valid_dates[] = array(1, 31, 31, 31, 31, 31, 31, 31, 30, 30,\
    \ 30, 29, 30, 29, 30, 29);\n    $valid_dates[] = array(1, 31, 31, 31, 31, 31,\
    \ 31, 31, 31, 30, 30, 30, 29, 30, 29, 30, 29);\n    $valid_dates[] = array(1,\
    \ 31, 31, 31, 31, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30, 29, 30);\n    $valid_dates[]\
    \ = array(1, 31, 31, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30, 29, 30, 29);\n  \
    \  $valid_dates[] = array(1, 31, 31, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30, 29,\
    \ 30, 29);\n    $valid_dates[] = array(1, 31, 31, 31, 31, 31, 30, 30, 30, 29,\
    \ 30, 29, 30, 29, 30, 29);\n    $valid_dates[] = array(1, 31, 31, 31, 31, 31,\
    \ 31, 30, 30, 30, 29, 30, 29, 30, 29, 30);\n    $valid_dates[] = array(1, 31,\
    \ 31, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30, 29, 30, 29);\n    $valid_dates[]\
    \ = array(1, 31, 31, 31, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30, \nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpbdvb6g67.php on line 45

    '
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if (empty($date)) {\n\
    \        return false;\n    }\n\n    $data = explode(\"-\", $date);\n\n    if\
    \ (!isset($data[0], $data[1], $data[2])) {\n        return false;\n    }\n\n \
    \   $days_in_months = array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);\n\
    \    $days_in_months[2] = 29;\n    $days_in_months[1] = 28;\n\n    if ($data[1]\
    \ < 1 || $data[1] > 12) {\n        return false;\n    }\n\n    if ($data[2] <\
    \ 1 || $data[2] > $days_in_months[$data[1] - 1]) {\n        return false;\n  \
    \  }\n\n    return true;\n}\n\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf7qrvm8_.php:50\n\
    Stack trace:\n#0 /tmp/tmpf7qrvm8_.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpf7qrvm8_.php\
    \ on line 50\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n\t$dates = explode('-',\
    \ $date);\n\tif (count($dates) < 3 || count($dates) > 3) {\n\t\treturn false;\n\
    \t}\n\n\tif ($dates[0] !== '0' || $dates[1] !== '0' || $dates[2] !== '0' || $dates[0]\
    \ > 12) {\n\t\treturn false;\n\t}\n\n\tif ($dates[2] < '01' || $dates[2] > '31'\
    \ || $dates[1] < '01' || $dates[1] > '30' || $dates[0] < '01' || $dates[0] > '29'\
    \ || $dates[0] > '12') {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n</code>\n\
    <|/ a tags=php |>\n<| c |>\nThis code is incorrect. Consider what happens when\
    \ you try to validate `\"15-01-2012\"`.\n<|/ c |>\n<| c |>\n, you are right, i\
    \ didn't check the months and days.\n<|/ c |>\n<| c |>\nI added a code to check\
    \ if the first two days are zero or higher than 12. It was a missing requirement,\
    \ i guess.\n<|/ c |>\n<| c |>\nNo it doesn't check that the month is between 0\
    \ and 12. It just checks the month is between 0 and 11.\n<|/ c |>\n<| a |>\nThis\
    \ code may help you.\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp4u1iskps.php
    on line 35

    '
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  // Your code here...\n\
    }\n\nfunction candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp24cexwyt.php:28\n\
    Stack trace:\n#0 /tmp/tmp24cexwyt.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp24cexwyt.php\
    \ on line 28\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    return date('m-d-Y',\
    \ strtotime($date));\n}\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5e2mvq4v.php:27\n\
    Stack trace:\n#0 /tmp/tmp5e2mvq4v.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp5e2mvq4v.php\
    \ on line 27\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if (!isset($date) ||\
    \ empty($date)) {\n        return false;\n    }\n\n    // Split date into date\
    \ and time variables\n    $split_date = explode(\"-\", $date);\n    $date = $split_date[0];\n\
    \    $time = $split_date[1];\n\n    // Count days between date and current date\n\
    \    $count_days_between = round(abs(strtotime($date) - strtotime(date(\"Y-m-d\"\
    ))));\n\n    $check_day = array(1, 3, 5, 7, 8, 10, 12);\n    $check_month = array(1,\
    \ 4, 6, 9, 11);\n    $check_year = array(\n        array(1, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, \nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmptkjtyhlu.php on line 36

    '
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if (empty($date)) {\n\
    \        return false;\n    }\n    $date = strtotime($date);\n    if (!is_numeric($date))\
    \ {\n        return false;\n    }\n    if ($date > time() || $date < 0) {\n  \
    \      return false;\n    }\n    if ($date <= strtotime('2038-01-19')) {\n   \
    \     return false;\n    }\n    $day = date('d', $date);\n    if ($day < 1 ||\
    \ $day > 31) {\n        return false;\n    }\n    $month = date('m', $date);\n\
    \    if ($month < 1 || $month > 12) {\n        return false;\n    }\n    $year\
    \ = date('Y', $date);\n    if ($year < 2000) {\n        return false;\n    }\n\
    \    return true;\n}\n\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv32ixh7u.php:53\n\
    Stack trace:\n#0 /tmp/tmpv32ixh7u.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpv32ixh7u.php\
    \ on line 53\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  if (empty($date)) {\n\
    \    return false;\n  }\n\n  $date_str = explode(\"-\", $date);\n  $month = intval(substr($date_str[1],\
    \ 0, 2));\n  $day = intval(substr($date_str[1], 2, 2));\n  $year = intval(substr($date_str[1],\
    \ 4, 4));\n\n  if ($month < 1 || $month > 12) {\n    return false;\n  }\n  if\
    \ ($day < 1 || $day > 31) {\n    return false;\n  }\n  if ($month != 2 && $month\
    \ != 4 && $month != 6 && $month != 9 && $month != 11 && $month != 12) {\n    return\
    \ false;\n  }\n\n  if ($day > 30 && $month == 2) {\n    return false;\n  }\n\n\
    \  if ($month == 4 || $month == 6 || $month == 9 || $month == 11) {\n    if ($day\
    \ > 29) {\n      return false;\n    }\n  }\n\n  return true;\n}\n</code>\n<|/\
    \ a tags=php,validation,datetime dscore=4 |>\n<| c |>\ni tried this but its giving\
    \ me error \nFatal error: Call to a member function format() on a non-object in\
    \ /opt/lampp/htdocs/newproject/classes/helper.php on line 5\n<|/ c |>\n<| a tags=php,validation,datetime\
    \ |>\nFor anyone looking at this, I went with the following, based on a similar\
    \ solution that I found in the PHP docs:\n<code>\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp33vkeglm.php
    on line 51

    '
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $dates = explode(\"\
    -\", $date);\n    if (count($dates) != 3) {\n        return false;\n    }\n  \
    \  // Check the month\n    if ($dates[1] <= 1 || $dates[1] == 3 || $dates[1] ==\
    \ 5 || $dates[1] == 7 || $dates[1] == 8 || $dates[1] == 10 || $dates[1] == 12)\
    \ {\n        return false;\n    }\n    // Check the day\n    if ($dates[0] <=\
    \ 1 || $dates[0] == 3 || $dates[0] == 5 || $dates[0] == 7 || $dates[0] == 8 ||\
    \ $dates[0] == 10 || $dates[0] == 12) {\n        return false;\n    }\n    //\
    \ Check the year\n    if ($dates[2] <= 1920 || $dates[2] >= 2030) {\n        return\
    \ false;\n    }\n    return true;\n}\nfunction candidate(...$args) {\n    return\
    \ valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpowgiek69.php:43\n\
    Stack trace:\n#0 /tmp/tmpowgiek69.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpowgiek69.php\
    \ on line 43\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  $array = explode('-',\
    \ $date);\n  $month = $array[1];\n  $day = $array[2];\n  $year = $array[3];\n\n\
    \  if (empty($date)) {\n    return false;\n  }\n  if ($day <= 1 || $day >= 31)\
    \ {\n    return false;\n  }\n  if ($month <= 1 || $month >= 12) {\n    return\
    \ false;\n  }\n  if ($month == 2 && $day <= 29) {\n    return false;\n  }\n  if\
    \ ($day >= 1 || $day <= 30) {\n    return false;\n  }\n  if ($month == 2 && $day\
    \ >= 1) {\n    return false;\n  }\n  if ($month == 2 && $day <= 29) {\n    return\
    \ false;\n  }\n\n  if ($month == 3 && $day <= 31) {\n    return false;\n  }\n\
    \  if ($month == 4 && $day <= 30) {\n    return false;\n  }\n  if ($month == 6\
    \ && $day <= 29) {\n    return false;\n  }\n  if ($month == 9 && $day <= 31) {\n\
    \    return false;\n  }\n  if ($month == 11 && $day <= 30) {\n    return false;\n\
    \  }\n\n  return true;\n}\n</code>\n<|/ a tags=php,date |>\n<| a dscore=1 tags=php,date\
    \ |>\n<code>\n<?php\n/**\n * Validates date format\n *\n *  string $date    date\
    \ in the format mm-dd-yyyy\n * bool\n */\nfunction candidate(...$args) {\n   \
    \ return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpdp4zrg9d.php
    on line 65

    '
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n\t$d = DateTime::createFromFormat('m-d-Y',\
    \ $date);\n\tif ($d === false) {\n\t\treturn false;\n\t}\n\treturn (!$d->format('j')\
    \ < 1 || $d->format('j') > 31 ||\n\t\t$d->format('n') < 1 || $d->format('n') >\
    \ 30 ||\n\t\t$d->format('Y') < 1 || $d->format('Y') > 12);\n}\n\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfr39lclm.php:35\n\
    Stack trace:\n#0 /tmp/tmpfr39lclm.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpfr39lclm.php\
    \ on line 35\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $days_in_month = [31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    $days_in_year = 366;\n   \
    \ $date1 = explode(\"-\", $date);\n    $date2 = explode(\"/\", $date);\n    $date1_day\
    \ = date(\"d\", strtotime($date1[1]));\n    $date1_month = date(\"m\", strtotime($date1[1]));\n\
    \    $date1_year = date(\"Y\", strtotime($date1[1]));\n    $date2_day = date(\"\
    d\", strtotime($date2[2]));\n    $date2_month = date(\"m\", strtotime($date2[2]));\n\
    \    $date2_year = date(\"Y\", strtotime($date2[2]));\n    $date_day = $date1_day\
    \ - $date2_day;\n    $date_month = $date1_month - $date2_month;\n    $date_year\
    \ = $date1_year - $date2_year;\n    if ($date_day <= 0 || $date_day >= $days_in_month[$date1_month]\
    \ || $date_month <= 0 || $date_month > 12 || $date_day >= 31) {\n        return\
    \ false;\n    } else {\n        return true;\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 2 in /tmp/tmpaa1oibim.php on line 27\n\n\
    Deprecated: strtotime(): Passing null to parameter #1 ($datetime) of type string\
    \ is deprecated in /tmp/tmpaa1oibim.php on line 27\n\nWarning: Undefined array\
    \ key 2 in /tmp/tmpaa1oibim.php on line 28\n\nDeprecated: strtotime(): Passing\
    \ null to parameter #1 ($datetime) of type string is deprecated in /tmp/tmpaa1oibim.php\
    \ on line 28\n\nWarning: Undefined array key 2 in /tmp/tmpaa1oibim.php on line\
    \ 29\n\nDeprecated: strtotime(): Passing null to parameter #1 ($datetime) of type\
    \ string is deprecated in /tmp/tmpaa1oibim.php on line 29\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpaa1oibim.php:44\nStack trace:\n#0 /tmp/tmpaa1oibim.php(62):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpaa1oibim.php on line 44\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  // Write your code here\n\
    \  // Hint: You can use explode and check for the conditions\n  $date = explode('-',\
    \ $date);\n  $num_days_month = [\n    1 => 31,\n    3 => 30,\n    5 => 29,\n \
    \   7 => 31,\n    8 => 31,\n    10 => 30,\n    12 => 31\n  ];\n  $month = is_array($date)\
    \ && count($date) == 3 ? $date[0] : false;\n  $day = is_array($date) && count($date)\
    \ == 3 ? $date[1] : false;\n\n  if($month == false || $day == false) {\n    return\
    \ false;\n  }\n\n  if($month < 1 || $month > 12) {\n    return false;\n  }\n\n\
    \  if($num_days_month[$month] <= $day && $day < 1) {\n    return false;\n  }\n\
    \n  if($num_days_month[$month] <= $day && $day > 31) {\n    return false;\n  }\n\
    \n  if($num_days_month[$month] <= $day && $day > 30) {\n    return false;\n  }\n\
    \n  return true;\n}\n</code>\n<|/ a dscore=1 tags=validation,php,date |>\n<| c\
    \ |>\ni don't believe this to be correct: `04-0-2040`, since month is 4 and day\
    \ is 0\n<|/ c |>\n<| c |>\nI think he wants to check whether the day and month\
    \ are valid in all cases. So he can just check the month and day and ignore the\
    \ year if he wants. Updated my answer to reflect that.\n<|/ c |>\n<| c |>\nyes\
    \ that what i meant. just ignore the year if he doesn't want it.\n<|/ c |>\n<|\
    \ c |>\nThanks for your effort but my problem is \"date should be in the format:\
    \ mm-dd-yyyy\" so this is not a valid date\n<|/ c |>\n<| c |>\nUpdated my answer.\n\
    <|/ c |>\n<| a |>\nTry this, it'll work for any day or month:\n<code>\nfunction\
    \ candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpc8rk56sj.php
    on line 57

    '
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  // Your code goes here.\n\
    \  if(empty($date))\n    return false;\n  $days_in_months = array(31,28,31,30,31,30,31,30,31,30,31);\n\
    \  $days_in_months_temp = array(31,28,31,30,31,30,31,30,31,30,31);\n  $days_in_years\
    \ = array(31,30,31,30,31,30,31,30,31,30,31);\n  $days_in_years_temp = array(31,30,31,30,31,30,31,30,31,30,31);\n\
    \  $months_in_years = array(12,1,4,6,9,11,3,5,7,8);\n  $months_in_years_temp =\
    \ array(12,1,4,6,9,11,3,5,7,8);\n  $years_in_months = array(12,1,4,6,9,11,3,5,7,8);\n\
    \  $years_in_months_temp = array(12,1,4,6,9,11,3,5,7,8);\n  $year = explode('-',$date);\n\
    \  $month = explode('-',$date);\n  $day = explode('-',$date);\n  if(count($day)<1\
    \ || count($month)<1 || count($year)<1)\n    return false;\n  if(count($day)>31)\n\
    \    return false;\n  if(count($month)>12)\n    return false;\n  if(count($year)>4)\n\
    \    return false;\n  if($day[0]<1 || $day[0]>31 || $month[0]<1 || $month[0]>12)\n\
    \    return false;\n  $date_string = sprintf(\"%s-%s-%s\", $day[0], $month[0],\
    \ $year[0]);\n  $days_in_months_temp = array_diff($days_in_months,$days_in_months_temp);\n\
    \  $months_in_years_temp = array_diff($months_in_years,$months_in_years_temp);\n\
    \  $years_in_months_temp = array_diff($years_in_months,$years_in_months_temp);\n\
    \  $day_array = array_diff($day,$days_in_months_temp);\n  $month_array = array_diff($month,$months_in_years_temp);\n\
    \  $year_array = array_diff($year,$years_in_months_temp);\n  $date_array = array_diff($date,$days_in_years_temp);\n\
    \  $date_array = array_diff($date_array,$months_in_years_temp);\n  $date_array\
    \ = array_diff($date_array,$years_in_months_temp);\n  $date_array = array_diff($date_array,$day_array);\n\
    \  $date_array = array_diff($date_array,$month_array);\n  $date_array = array_diff($date_array,$year_array);\n\
    \  if(count($date_array)==0 && count($day_array)==1 && count($month_array)==1\
    \ && count($\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmps85g5u4d.php on line 58

    '
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  // Your code here...\n\
    }\nfunction candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4t4lcl17.php:27\n\
    Stack trace:\n#0 /tmp/tmp4t4lcl17.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp4t4lcl17.php\
    \ on line 27\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    // Your code here\n\
    }\n\nfunction candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpafcrl21p.php:28\n\
    Stack trace:\n#0 /tmp/tmpafcrl21p.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpafcrl21p.php\
    \ on line 28\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if(!$date) return false;\n\
    \n    $date = date(\"Y-m-d\", strtotime($date));\n    if($date == \"\") return\
    \ false;\n\n    if(date('t', strtotime($date)) == 0) return false;\n\n    $day_count\
    \ = cal_days_in_month(CAL_GREGORIAN, date('m', strtotime($date)), date('Y', strtotime($date)));\n\
    \    if($day_count > 31) return false;\n    if($day_count < 1) return false;\n\
    \n    $month_count = cal_days_in_month(CAL_GREGORIAN, date('m', strtotime($date)),\
    \ date('Y', strtotime($date)));\n    if($month_count > 12) return false;\n   \
    \ if($month_count < 1) return false;\n\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cal_days_in_month()\
    \ in /tmp/tmpl3q9iuuz.php:27\nStack trace:\n#0 /tmp/tmpl3q9iuuz.php(39): valid_date('2000-11-03')\n\
    #1 /tmp/tmpl3q9iuuz.php(43): candidate('03-11-2000')\n#2 /tmp/tmpl3q9iuuz.php(61):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpl3q9iuuz.php on line 27\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $date_pattern = '^(((0[1-9]|[12]\\\
    d|3[01])/(0[13578]|1[02])/((19|[2-9]\\d)\\d{2}))|((0[1-9]|[12]\\d|30)/(0[13456789]|1[012])/((19|[2-9]\\\
    d)\\d{2}))|((0[1-9]|1\\d|2[0-8])/(0[13456789]|1[012])/((19|[2-9]\\d)\\d{2}))|((0[1-9]|1\\\
    d|2[0-8])/02((19|[2-9]\\d)\\d{2}))|(29-02-((0[13578]|1[02])|(([2468][048]|0[48])0229)))))$';\n\
    \    if(empty($date))\n        return false;\n    $date_pattern = \"/^\".$date_pattern.\"\
    $/\";\n    if(preg_match($date_pattern, $date))\n        return true;\n    return\
    \ false;\n}\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: preg_match(): Unknown modifier '(' in /tmp/tmpp7vb0rup.php on\
    \ line 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7vb0rup.php:33\n\
    Stack trace:\n#0 /tmp/tmpp7vb0rup.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpp7vb0rup.php\
    \ on line 33\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  // If date is not valid,\
    \ return false\n  if (empty($date) || is_numeric($date)) {\n    return false;\n\
    \  }\n\n  // Split the date string into day, month, year\n  $date_array = explode(\"\
    -\", $date);\n\n  // If any of the fields are empty\n  if (empty($date_array[0])\
    \ || empty($date_array[1]) || empty($date_array[2])) {\n    return false;\n  }\n\
    \n  // Validate the month\n  if (! in_array($date_array[1], range(1, 12))) {\n\
    \    return false;\n  }\n\n  // Validate the day\n  if (! in_array($date_array[0],\
    \ range(1, 31))) {\n    return false;\n  }\n\n  // Validate the year\n  if (!\
    \ in_array($date_array[2], range(110, date(\"Y\")))) {\n    return false;\n  }\n\
    \n  // If all the validation are ok, return true\n  return true;\n}\nfunction\
    \ candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7uil_s7g.php:57\n\
    Stack trace:\n#0 /tmp/tmp7uil_s7g.php(74): test()\n#1 {main}\n  thrown in /tmp/tmp7uil_s7g.php\
    \ on line 57\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if (strlen($date) <=\
    \ 0) {\n        return false;\n    }\n    $split_date = explode('-', $date);\n\
    \    $days_in_month = cal_days_in_month(CAL_GREGORIAN, $split_date[0], $split_date[1]);\n\
    \    $days_in_month = max(1, $days_in_month);\n    if ($days_in_month == 31) {\n\
    \        $days_in_month = 1;\n    }\n    $days_in_month = max(1, $days_in_month);\n\
    \    $valid_date = true;\n    if ($split_date[2] < 1 || $split_date[2] > 12) {\n\
    \        $valid_date = false;\n    } else {\n        $split_date = explode('-',\
    \ $date);\n    }\n    if ($split_date[2] > $days_in_month) {\n        $valid_date\
    \ = false;\n    }\n    if ($split_date[1] < 1 || $split_date[1] > $days_in_month)\
    \ {\n        $valid_date = false;\n    }\n    if ($split_date[0] < 1 || $split_date[0]\
    \ > 12) {\n        $valid_date = false;\n    }\n    return $valid_date;\n}\n\n\
    function candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cal_days_in_month()\
    \ in /tmp/tmpdyczn0wf.php:24\nStack trace:\n#0 /tmp/tmpdyczn0wf.php(49): valid_date('03-11-2000')\n\
    #1 /tmp/tmpdyczn0wf.php(53): candidate('03-11-2000')\n#2 /tmp/tmpdyczn0wf.php(71):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpdyczn0wf.php on line 24\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  if(strlen($date)==0)\
    \ return false;\n  $date = preg_replace(\"/[^0-9]/\", \"\", $date);\n  $mm = explode(\"\
    -\", $date);\n  $d = explode(\"-\", $mm[0]);\n  $y = explode(\"-\", $mm[1]);\n\
    \  $month = $m[1];\n  $day = $d[1];\n  $year = $y[1];\n  $day = str_replace(\"\
    -\", \"\", $day);\n  $month = str_replace(\"-\", \"\", $month);\n  $day = $day\
    \ < 1 ? 1 : str_replace(\"-\", \"\", $day);\n  $month = $month < 1 ? 1 : str_replace(\"\
    -\", \"\", $month);\n  $year = str_replace(\"-\", \"\", $year);\n  $day = (int)\
    \ $day;\n  $month = (int) $month;\n  $year = (int) $year;\n\n  if ((($month ==\
    \ 1) || ($month == 3)) && $day > 31 || $month == 2 && $day > 29) {\n    return\
    \ false;\n  }\n\n  if ($month < 1 || $month > 12) {\n    return false;\n  }\n\n\
    \  if ($day < 1 || ($day > 31 && ($month == 1) || ($month == 3))) {\n    return\
    \ false;\n  }\n\n  if ((($month == 1) || ($month == 3)) && $day > 31 || $month\
    \ == 2 && $day > 29) {\n    return false;\n  }\n\n  if ($month < 1 || $month >\
    \ 12) {\n    return false;\n  }\n\n  if ($day < 1 || ($day > 31 && ($month ==\
    \ 1) || ($month == 3))) {\n    return false;\n  }\n\n  if ($month == 1) {\n  \
    \  if ((($year % 4 == 0 && $year % 100 != 0) || ($year % 400 == 0)) && $day >\
    \ 31) {\n      return false;\n    }\n  }\n\n  if ($month == 3) {\n    if ((($year\
    \ % 4 == 0 && $year % 100 != 0) || ($year % 400 == 0)) && $day > 30) {\n     \
    \ return false;\n    }\n  }\n\n  if ($month < 1 || $month > 12) {\n    return\
    \ false;\n  }\n\n  return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmpqxwsdc5x.php on line 24\n\n\
    Deprecated: explode(): Passing null to parameter #2 ($string) of type string is\
    \ deprecated in /tmp/tmpqxwsdc5x.php on line 24\n\nWarning: Undefined variable\
    \ $m in /tmp/tmpqxwsdc5x.php on line 25\n\nWarning: Trying to access array offset\
    \ on value of type null in /tmp/tmpqxwsdc5x.php on line 25\n\nWarning: Undefined\
    \ array key 1 in /tmp/tmpqxwsdc5x.php on line 26\n\nWarning: Undefined array key\
    \ 1 in /tmp/tmpqxwsdc5x.php on line 27\n\nDeprecated: str_replace(): Passing null\
    \ to parameter #3 ($subject) of type array|string is deprecated in /tmp/tmpqxwsdc5x.php\
    \ on line 28\n\nDeprecated: str_replace(): Passing null to parameter #3 ($subject)\
    \ of type array|string is deprecated in /tmp/tmpqxwsdc5x.php on line 29\n\nDeprecated:\
    \ str_replace(): Passing null to parameter #3 ($subject) of type array|string\
    \ is deprecated in /tmp/tmpqxwsdc5x.php on line 32\n\nWarning: Undefined array\
    \ key 1 in /tmp/tmpqxwsdc5x.php on line 24\n\nDeprecated: explode(): Passing null\
    \ to parameter #2 ($string) of type string is deprecated in /tmp/tmpqxwsdc5x.php\
    \ on line 24\n\nWarning: Undefined variable $m in /tmp/tmpqxwsdc5x.php on line\
    \ 25\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpqxwsdc5x.php\
    \ on line 25\n\nWarning: Undefined array key 1 in /tmp/tmpqxwsdc5x.php on line\
    \ 26\n\nWarning: Undefined array key 1 in /tmp/tmpqxwsdc5x.php on line 27\n\n\
    Deprecated: str_replace(): Passing null to parameter #3 ($subject) of type array|string\
    \ is deprecated in /tmp/tmpqxwsdc5x.php on line 28\n\nDeprecated: str_replace():\
    \ Passing null to parameter #3 ($subject) of type array|string is deprecated in\
    \ /tmp/tmpqxwsdc5x.php on line 29\n\nDeprecated: str_replace(): Passing null to\
    \ parameter #3 ($subject) of type array|string is deprecated in /tmp/tmpqxwsdc5x.php\
    \ on line 32\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqxwsdc5x.php:86\n\
    Stack trace:\n#0 /tmp/tmpqxwsdc5x.php(103): test()\n#1 {main}\n  thrown in /tmp/tmpqxwsdc5x.php\
    \ on line 86\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    // Write your code\
    \ here.\n}\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj97sl_2i.php:27\n\
    Stack trace:\n#0 /tmp/tmpj97sl_2i.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpj97sl_2i.php\
    \ on line 27\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  return !empty($date)\
    \ && preg_match('/^(0?[1-9]|1[012])[-\\/\\.]?(0?[1-9]|[12][0-9]|3[01])[-\\/\\\
    .]?(19|20)\\d\\d$/', $date);\n}\n\nfunction candidate(...$args) {\n    return\
    \ valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa8do4mqt.php:39\n\
    Stack trace:\n#0 /tmp/tmpa8do4mqt.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpa8do4mqt.php\
    \ on line 39\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    return !empty($date)\
    \ && is_numeric($date) && date('m-d-Y', strtotime($date)) !== 'Invalid Date';\n\
    }\n</code>\nIn conclusion\nI wrote a function to check if a date is valid (it\
    \ returns true or false) and a function which validates a date string (it returns\
    \ true or false).\nI wrote a function to check if a date string is valid: I used\
    \ my valid_date() function to check if a date is valid. The function also checks\
    \ if the date string is correct.\nI also wrote a function that validates a date\
    \ string (it returns true or false).\nI wrote a function that checks a date string\
    \ and validates it: I used my valid_date() function to check if a date string\
    \ is valid. The function also checks if the date string is correct.\nI wrote a\
    \ function that validates a date string (it returns true or false).\nI wrote a\
    \ function that checks a date string and validates it: I used my valid_date()\
    \ function to check if a date string is valid. The function also checks if the\
    \ date string is correct.\nI wrote a function that validates a date string (it\
    \ returns true or false).\nI wrote a function that checks a date string and validates\
    \ it: I used my valid_date() function to check if a date string is valid. The\
    \ function also checks if the date string is correct.\nI wrote a function that\
    \ validates a date string (it returns true or false).\nI wrote a function that\
    \ checks a date string and validates it: I used my valid_date() function to check\
    \ if a date string is valid. The function also checks if the date string is correct.\n\
    I wrote a function that validates a date string (it returns true or false).\n\
    I wrote a function that checks a date string and validates it: I used my valid_date()\
    \ function to check if a date string is valid. The function also checks if the\
    \ date string is correct.\nI wrote a function that validates a date string (it\
    \ returns true or false).\nI wrote a function that checks a date string and validates\
    \ it: I used my valid_date() function to check if a date string is valid. The\
    \ function also checks if the date string is correct.\nI wrote a function that\
    \ validates a date string (it returns true or false).\nI wrote a function that\
    \ checks a date string and validates it: I used my valid_date() function to check\
    \ if a date string is valid. The function also checks if the date string is correct.\n\
    I wrote a function that validates a date string (it returns true or false).\n\
    I wrote a function that checks a date string and validates it: I used my valid_date()\
    \ function to check if a date string is valid. The function also checks if the\
    \ date string is correct.\nI wrote a function that validates a date string (it\
    \ returns true or false).\nI wrote a \nfunction candidate(...$args) {\n    return\
    \ valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpg7fp2gmi.php
    on line 22

    '
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  $date = strtotime($date);\n\
    \  if ($date === false) return false;\n  $daysInMonth = cal_days_in_month(CAL_GREGORIAN,\
    \ 2, 2);\n  $isLeapYear = isset(cal_days_in_month(CAL_GREGORIAN, 2, 1));\n  if\
    \ ($date == date('m-d-Y')) return true;\n\n  if (date('N', strtotime($date)) !=\
    \ 1) { return false; }\n  $days = date('j', strtotime($date));\n  if ($days >\
    \ $daysInMonth) { return false; }\n  if ($days == 31 && ($isLeapYear || date('n')\
    \ != 1)) { return false; }\n  $days = date('d', strtotime($date));\n  if ($days\
    \ > 31) { return false; }\n  if ($date == date('m-d-Y')) return true;\n  return\
    \ false;\n}\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Cannot use isset() on the result of an expression (you can use "null
    !== expression" instead) in /tmp/tmpn36vu1_l.php on line 23

    '
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $date = date('m-d-Y',\
    \ strtotime($date));\n    $valid_date = date(\"m\", strtotime($date)) > 0 &&\n\
    \        date(\"d\", strtotime($date)) > 1 &&\n        date(\"Y\", strtotime($date))\
    \ > date(\"Y\");\n    return $valid_date;\n}\nfunction candidate(...$args) {\n\
    \    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5vi6o65l.php:31\n\
    Stack trace:\n#0 /tmp/tmp5vi6o65l.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp5vi6o65l.php\
    \ on line 31\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    // Write your code\
    \ here\n    if(!is_string($date) || empty($date)){\n        return false;\n  \
    \  }\n    $date = strtotime($date);\n    if(!isset($date)){\n        return false;\n\
    \    }\n    if($date < strtotime(\"01-01-1970\")){\n        return false;\n  \
    \  }\n    $year   = date('Y',$date);\n    $month  = date('m',$date);\n    $day\
    \    = date('d',$date);\n    $year   = intval($year);\n    $month  = intval($month);\n\
    \    $day    = intval($day);\n\n    if($month < 1 || $month > 12){\n        return\
    \ false;\n    }\n\n    if($day < 1 || $day > date('t',$date)){\n        return\
    \ false;\n    }\n    $month2 = $month;\n    if($month > 2){\n        $month2 =\
    \ $month - 2;\n    }\n    if($month < 1 || $month > 12){\n        return false;\n\
    \    }\n    if($day < 1 || $day > date('t',$date)){\n        return false;\n \
    \   }\n\n    if($month2 < 1 || $month2 > 12){\n        return false;\n    }\n\
    \    if($day < 1 || $day > date('t',$date)){\n        return false;\n    }\n\n\
    \    if($day > $month2){\n        return false;\n    }\n\n    return true;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=0 tags=date,php |>\nTry This:-\n<code>\n\
    $date = '03-15-2000';\n$date = strtotime($date);\n$newdate = date('Y-m-d', $date);\n\
    </code>\n<|/ a |>\n<| c |>\n`date()` expects an integer, not a string.\n<|/ c\
    \ |>\n<| c |>\nThank you for your reply, i tried the solution but i still get\
    \ this output: 1970-01-15 , i am using php 7.1\n<|/ c |>\n<| a |>\n<code>\n<?php\
    \ \n$date = \"03-15-2000\";\n$newdate = date('Y-m-d', strtotime($date));\necho\
    \ $newdate;\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmppjz358rt.php
    on line 69

    '
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $parts = explode('-',\
    \ $date);\n    list($year, $month, $day) = explode('-', $parts[2]);\n    $month\
    \ = $month - 1;\n    if($month < 1 || $month > 12) return false; else return true;\n\
    }\nfunction candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmpbmnw536m.php on line 21\n\n\
    Warning: Undefined array key 2 in /tmp/tmpbmnw536m.php on line 21\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpbmnw536m.php:30\nStack trace:\n\
    #0 /tmp/tmpbmnw536m.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpbmnw536m.php\
    \ on line 30\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $valid = false;\n \
    \   if (strlen($date) > 0) {\n        $date = strtotime($date);\n        $valid\
    \ = (date('d', $date) >= 1 && date('d', $date) <= 31) && ((date('m', $date) >=\
    \ 1 && date('m', $date) <= 12) && (date('Y', $date) >= 1 && date('Y', $date) <=\
    \ 9999));\n    } else {\n        echo \"The date should be in the format: mm-dd-yyyy\\\
    n\";\n    }\n    return $valid;\n}\nfunction candidate(...$args) {\n    return\
    \ valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr8czq4ub.php:35\n\
    Stack trace:\n#0 /tmp/tmpr8czq4ub.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpr8czq4ub.php\
    \ on line 35\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  list($month,$day,$year)\
    \ = explode(\"-\",$date);\n  $month = intval($month);\n  $day = intval($day);\n\
    \  $year = intval($year);\n  // Date format: mm-dd-yyyy\n  if($month<=12 and $day<=31\
    \ and $year<=9999) {\n    if($month!=1) {\n      if($month==12) {\n        $month=1;\n\
    \        $year++;\n      }\n      else {\n        $month++;\n      }\n    }\n\
    \    else if($month>12 and $month<=26) {\n      $month++;\n    }\n  }\n  elseif($month>12\
    \ and $month<=26) {\n    $month++;\n  }\n  elseif($month>28 and $month<=31) {\n\
    \    $month++;\n  }\n  if($day<1 or $day>31) {\n    return false;\n  }\n  if($month<1\
    \ or $month>12) {\n    return false;\n  }\n  if($year<1 or $year>9999) {\n   \
    \ return false;\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n  \
    \  return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmpgad986n_.php on line 20\n\n\
    Warning: Undefined array key 2 in /tmp/tmpgad986n_.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpgad986n_.php:69\nStack trace:\n\
    #0 /tmp/tmpgad986n_.php(80): test()\n#1 {main}\n  thrown in /tmp/tmpgad986n_.php\
    \ on line 69\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $valid=true;\n    $dateArray=explode(\"\
    -\", $date);\n    if(count($dateArray)==3){\n        if(!empty($dateArray[0])\
    \ && !empty($dateArray[1]) && !empty($dateArray[2])){\n            $daysInMonth=cal_days_in_month(CAL_GREGORIAN,\
    \ $dateArray[1], $dateArray[0]);\n            if($dateArray[2]>$daysInMonth){\n\
    \                $valid=false;\n            }\n            $today=date('m-d');\n\
    \            $month1=date('n');\n            $month2=date('m');\n            $dateArray1=explode(\"\
    -\", $date);\n            if($dateArray1[1]==$month1 && $dateArray1[2]==$today){\n\
    \                $valid=false;\n            }\n            if($dateArray1[1]==$month2\
    \ && $dateArray1[2]==$today){\n                $valid=false;\n            }\n\
    \        }\n    }\n    return $valid;\n}\nfunction candidate(...$args) {\n   \
    \ return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cal_days_in_month()\
    \ in /tmp/tmpe0fmfjhg.php:24\nStack trace:\n#0 /tmp/tmpe0fmfjhg.php(43): valid_date('03-11-2000')\n\
    #1 /tmp/tmpe0fmfjhg.php(47): candidate('03-11-2000')\n#2 /tmp/tmpe0fmfjhg.php(65):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpe0fmfjhg.php on line 24\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  // Write your code here.\n\
    }\n\nfunction candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfzkcg74o.php:28\n\
    Stack trace:\n#0 /tmp/tmpfzkcg74o.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpfzkcg74o.php\
    \ on line 28\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $date_array = explode(\"\
    -\", $date);\n\n    // Check each date part\n    if (empty($date_array[0])) {\n\
    \        return false;\n    }\n\n    if (!in_array($date_array[1], range(1,12)))\
    \ {\n        return false;\n    }\n\n    if (!in_array($date_array[2], range(1,29)))\
    \ {\n        return false;\n    }\n\n    if (!in_array($date_array[1], range(1,12)))\
    \ {\n        return false;\n    }\n\n    // Check month is in the range 1-12 and\
    \ day is in the range 1-29\n    if ($date_array[1] < 1 || $date_array[1] > 12)\
    \ {\n        return false;\n    }\n\n    if ($date_array[2] < 1 || $date_array[2]\
    \ > 31) {\n        return false;\n    }\n\n    // Check month 1-12\n    if ($date_array[1]\
    \ < 1 || $date_array[1] > 12) {\n        return false;\n    }\n\n    // Check\
    \ month 3-11\n    if ($date_array[2] < 3 || $date_array[2] > 11) {\n        return\
    \ false;\n    }\n\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmputi8lj72.php:66\n\
    Stack trace:\n#0 /tmp/tmputi8lj72.php(84): test()\n#1 {main}\n  thrown in /tmp/tmputi8lj72.php\
    \ on line 66\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $date = strtotime($date);\n\
    \    return ($date !== false && !empty($date));\n}\n</code>\nThen you can do this:\n\
    <code>\n$date = date('d-m-Y', $date_time_from_db); // $date_time_from_db is from\
    \ your database query\n$dateArray = explode('-', $date); // Convert string to\
    \ array\n$day = $dateArray[0];\n$month = $dateArray[1];\n$year = $dateArray[2];\n\
    $isDate = valid_date($date);\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you very\
    \ much for your answer. I added my date formats to the example. As you can see,\
    \ they are in a different format than yours. I guess that is because I am using\
    \ the strtotime function of the PHP language\n<|/ c |>\n<| c |>\nI added my function\
    \ to my answer. `strtotime` expects your date to be in a specific format. `d-m-Y`\
    \ is the correct date format if your dates are stored as `YYYY-MM-DD HH:MM:SS`.\n\
    <|/ c |>\n<| c |>\nThank you very much! I managed to make a workaround for my\
    \ problem. With this I get a valid array for the date string with my date format\n\
    <|/ c |>\n<| a tags=php,datetime |>\nYou can't simply compare dates with >. From\
    \ the PHP docs:\n\nWhen comparing two or more string values, several possible\
    \ orderings are tried: \n\nThe comparison of strings is done in a simple byte\
    \ comparison algorithm. If the first character from the string matches one of\
    \ these values, the comparison terminates. If none of the listed values match,\
    \ inequality falls to 1 (see below).\nThe comparison of strings is done in a \"\
    culture-insensitive\" fashion. That is, whatever the strings' alphabets are in\
    \ may or may not be the same as the current system's alphabets. This is done in\
    \ a language sensitive manner. \nFinally, two scalar values (numbers or strings)\
    \ are compared based on the type of the values using standard comparison rules.\n\
    \nYou can see a similar question here\nYou could use something like:\n<code>\n\
    function candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp_836fjg1.php
    on line 23

    '
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $d = explode('-', $date);\n\
    \    if (count($d) != 3 || strtolower($d[0]) != $d[0] || strtolower($d[1]) !=\
    \ $d[1] || strtolower($d[2]) != $d[2]) {\n        return false;\n    }\n    if\
    \ (date('t', strtotime($date)) != 1 && date('t', strtotime($date)) != 2 && date('t',\
    \ strtotime($date)) != 3 && date('t', strtotime($date)) != 4 && date('t', strtotime($date))\
    \ != 6 && date('t', strtotime($date)) != 9 && date('t', strtotime($date)) != 11)\
    \ {\n        return false;\n    }\n    if (date('m', strtotime($date)) != 1 &&\
    \ date('m', strtotime($date)) != 3 && date('m', strtotime($date)) != 5 && date('m',\
    \ strtotime($date)) != 7 && date('m', strtotime($date)) != 8 && date('m', strtotime($date))\
    \ != 10 && date('m', strtotime($date)) != 12) {\n        return false;\n    }\n\
    \    if (date('d', strtotime($date)) != 1 && date('d', strtotime($date)) != 2\
    \ && date('d', strtotime($date)) != 3 && date('d', strtotime($date)) != 4 && date('d',\
    \ strtotime($date)) != 6 && date('d', strtotime($date)) != 9 && date('d', strtotime($date))\
    \ != 11 && date('d', strtotime($date)) != 12) {\n        return false;\n    }\n\
    \    return true;\n}\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpacnhdp7u.php:40\n\
    Stack trace:\n#0 /tmp/tmpacnhdp7u.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpacnhdp7u.php\
    \ on line 40\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if ($date == '') {\n\
    \        return false;\n    }\n\n    $d = DateTime::createFromFormat('m-d-Y',\
    \ $date);\n    if ($d === false) {\n        return false;\n    }\n\n    $valid_date\
    \ = true;\n    // Month must be between 1 and 12.\n    if (($month = $d->format('m'))\
    \ < 1 || ($month > 12)) {\n        $valid_date = false;\n    }\n    // Day must\
    \ be between 1 and 31.\n    if (($day = $d->format('d')) < 1 || ($day > 31)) {\n\
    \        $valid_date = false;\n    }\n\n    // If both day and month are valid,\
    \ day must be in between 1 and 30.\n    if (($month = $d->format('m')) < 1 ||\
    \ $day > 30) {\n        $valid_date = false;\n    }\n\n    // Year must be between\
    \ 1920 and 2099.\n    $year = intval($d->format('Y'));\n    if ($year < 1920 ||\
    \ $year > 2099) {\n        $valid_date = false;\n    }\n\n    return $valid_date;\n\
    }\n</code>\n<|/ a dscore=2 tags=date,validation,php,validationrules,yii2 |>\n\
    <| c |>\nCan you please add an example of how to do this using Yii2 validation\
    \ rules?\n<|/ c |>\n<| c |>\nI have added an example for Yii2\n<|/ c |>\n<| a\
    \ tags=date,validation,php,validationrules,yii2 |>\nI have found this solution\
    \ at Yii2 validation rules and it works for me.\n<code>\npublic function rules()\n\
    {\n    return [\n        [['date'], 'date'],\n    ];\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=date,validation,php,validationrules,yii2 |>\nThis is my custom\
    \ validation function for the Yii2 framework.\n<code>\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpzrvwsgyx.php
    on line 52

    '
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if (strlen($date) ==\
    \ 0) {\n        return false;\n    }\n    $pattern = '/^([0-9]+)(?:-([0-9]+)(?:-([0-9]+))?|(?:-([0-9]+)(?:-([0-9]+))?|(?:-([0-9]+))?))$/';\n\
    \    if (!preg_match($pattern, $date, $regs)) {\n        return false;\n    }\n\
    \    $days = $regs[1];\n    $month = $regs[2];\n    $year = $regs[3];\n    $month_days\
    \ = cal_days_in_month(CAL_GREGORIAN, $month, $year);\n    $max_days = $month_days\
    \ + $days;\n    $max_year = $year + 1900;\n    if ($max_year < 1900) {\n     \
    \   $max_year = date(\"Y\") + 1900;\n    }\n    if ($month > 12) {\n        return\
    \ false;\n    }\n    if ($days > $max_days || $days < 1) {\n        return false;\n\
    \    }\n    if ($year < $max_year || $year > $max_year) {\n        return false;\n\
    \    }\n    return true;\n}\n</code>\n<|/ a |>\n<| c |>\nThis does not answer\
    \ the question\n<|/ c |>\n<| c |>\nThe question was how to validate a date string\
    \ which was not possible with strtotime. Yes it is possible to validate the date\
    \ but why should the user do it? What is wrong with a function to check it? It\
    \ is a valid answer to this question. I just showed an alternative way. Do you\
    \ think that this answer should be downvoted? It is an alternative solution to\
    \ the problem.\n<|/ c |>\n<| c |>\nThe answer does not answer the question because\
    \ the question was asked how to validate a date string which is not possible,\
    \ and you propose to use `strtotime` which you think will help with that problem,\
    \ but that's not the question.\n<|/ c |>\n<| c |>\nThe question was \"how to validate\
    \ a date string\" and the answer is to use strtotime. This will help you with\
    \ any date string which can be represented in any format. The only problem I had\
    \ with the date string was how to handle leap years in which we only have 31 days\
    \ in leap year. strtotime does not handle leap years. My function does handle\
    \ leap years just fine. The user can decide which method to use. And if you downvoted\
    \ my answer then please leave a comment.\n<|/ c |>\n<| c |>\nThe question was\
    \ \"how to validate a date string\" and the answer is \"use strtotime\".\n<|/\
    \ c |>\n<| a tags=date,php,datetime |>\nYou can try something like:\n<code>\n\
    $dateString = \"2015-04-25\";\n$newDate = DateTime::createFromFormat(\"Y-m-\n\
    function candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp5ysi8qwn.php
    on line 47

    '
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $date_string = strtotime($date);\n\
    \    if (empty($date_string)) {\n        return false;\n    }\n    $year = date('Y',\
    \ $date_string);\n    $month = date('m', $date_string);\n    $day = date('d',\
    \ $date_string);\n    $days_in_month = cal_days_in_month(CAL_GREGORIAN, $month,\
    \ $year);\n    if ($month < 1 || $month > 12) {\n        return false;\n    }\n\
    \    if ($day < 1 || $day > $days_in_month) {\n        return false;\n    }\n\
    \    if ($day == 31) {\n        if ($month == 1) {\n            return ($year\
    \ % 4 == 0);\n        }\n        return ($year % 400 == 0);\n    }\n    if ($day\
    \ == 30) {\n        if ($month == 1) {\n            return ($year % 4 == 0);\n\
    \        }\n        return ($year % 100 == 0);\n    }\n    if ($day == 29) {\n\
    \        return ($year % 100 == 0);\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cal_days_in_month()\
    \ in /tmp/tmp8a26ek1h.php:27\nStack trace:\n#0 /tmp/tmp8a26ek1h.php(53): valid_date('03-11-2000')\n\
    #1 /tmp/tmp8a26ek1h.php(57): candidate('03-11-2000')\n#2 /tmp/tmp8a26ek1h.php(75):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8a26ek1h.php on line 27\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $date = strtotime($date);\n\
    \    return ($date != 0) ? true : false;\n}\nfunction candidate(...$args) {\n\
    \    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvne52yq7.php:29\n\
    Stack trace:\n#0 /tmp/tmpvne52yq7.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpvne52yq7.php\
    \ on line 29\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  // 1. The date string\
    \ is not empty.\n  if (!empty($date)) {\n    // 2. The number of days is not less\
    \ than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of\
    \ days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the\
    \ number of days is not less than 1 or higher than 29 for the month 2.\n    $days_in_month\
    \ = [31,28,31,30,31,30,31,30,31,30,31,30];\n    $days_in_month[$month_num] = 29;\n\
    \    if ($day > $days_in_month[$month_num]) {\n      $day = $days_in_month[$month_num];\n\
    \    }\n    // 3. The months should not be less than 1 or higher than 12.\n  \
    \  if ($month_num < 1 || $month_num > 12) {\n      $month_num = 12;\n    }\n \
    \   // 4. The date should be in the format: mm-dd-yyyy\n    if (strpos($date,'/')\
    \ !== false) {\n      if (date('m-d',strtotime($date)) != $date) {\n        return\
    \ false;\n      }\n    } else {\n      if (date('m-d',strtotime($date.'-'.$year))\
    \ != $date) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\
    \nfunction candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $month_num in /tmp/tmp0pm1fo4u.php on line\
    \ 24\n\nWarning: Undefined variable $month_num in /tmp/tmp0pm1fo4u.php on line\
    \ 25\n\nWarning: Undefined variable $day in /tmp/tmp0pm1fo4u.php on line 25\n\n\
    Warning: Undefined variable $month_num in /tmp/tmp0pm1fo4u.php on line 29\n\n\
    Warning: Undefined variable $year in /tmp/tmp0pm1fo4u.php on line 38\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp0pm1fo4u.php:51\nStack trace:\n\
    #0 /tmp/tmp0pm1fo4u.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp0pm1fo4u.php\
    \ on line 51\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if($date != \"\") {\n\
    \        $date_explode = explode(\"-\", $date);\n        if(count($date_explode)\
    \ == 3) {\n            $month = intval($date_explode[0]);\n            $day =\
    \ intval($date_explode[1]);\n            $year = intval($date_explode[2]);\n \
    \       } elseif(count($date_explode) == 2) {\n            $month = intval($date_explode[0]);\n\
    \            $day = intval($date_explode[1]);\n            $year = intval(substr($date_explode[1],\
    \ 0, 4));\n        } elseif(count($date_explode) == 1) {\n            $month =\
    \ intval(substr($date_explode[0], 0, 2));\n            $day = intval(substr($date_explode[0],\
    \ 2, 2));\n            $year = intval(substr($date_explode[0], 4, 4));\n     \
    \   } else {\n            return false;\n        }\n        // Check if date is\
    \ valid date\n        if($month >= 1 && $month <= 12) {\n            if($day >=\
    \ 1 && $day <= 31) {\n                if($year >= 1 && $year <= 12) {\n      \
    \              if($day == 31) {\n                        if($month == 2) {\n \
    \                           if($year % 400 == 0 || ($year % 4 == 0 && $year %\
    \ 100 != 0)) {\n                                $month = 1;\n                \
    \            } else {\n                                $month = 3;\n         \
    \                   }\n                        }\n                    }\n    \
    \                $month = date(\"n\", mktime(0, 0, 0, $month, 1, $year));\n  \
    \                  $day = date(\"j\", mktime(0, 0, 0, $month, $day, $year));\n\
    \                    if($month == 1 && $day == 31) {\n                       \
    \ return false;\n                    }\n                    if($month == 2 &&\
    \ $day == 29) {\n                        return false;\n                    }\n\
    \                    if($day == 31) {\n                        if($month == 2)\
    \ {\n                            if($year % 400 == 0 || ($year % 4 == 0 && $year\
    \ % 100 != 0)) {\n                                $month = 1;\n              \
    \              } else {\n                                $month = 3;\n       \
    \                     }\n                        }\n                    }\n  \
    \                  return true;\n                } else {\n                  \
    \  return false;\n                }\n            } else {\n                return\
    \ false;\n            }\n        } else {\n            return false;\n       \
    \ }\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9cvxxh3g.php:87\n\
    Stack trace:\n#0 /tmp/tmp9cvxxh3g.php(105): test()\n#1 {main}\n  thrown in /tmp/tmp9cvxxh3g.php\
    \ on line 87\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    // Your code here\n\
    \    $day = 0;\n    $month = intval(substr($date, 0, 2));\n    $year = intval(substr($date,\
    \ 4, 4));\n\n    if ($month == 1) {\n        $month += 12;\n        $year -= 1;\n\
    \    }\n\n    if ($month > 12) {\n        $month -= 12;\n        $year += 1;\n\
    \    }\n\n    if (strlen($date) == 0) {\n        return false;\n    }\n\n    if\
    \ ($day < 1 || $day > 31) {\n        return false;\n    }\n\n    if ($month <\
    \ 1 || $month > 12) {\n        return false;\n    }\n\n    if ($year < 1900 ||\
    \ $year > 2030) {\n        return false;\n    }\n\n    if ($month == 2) {\n  \
    \      $month += 1;\n        $year += 1;\n    }\n\n    if ($day == 29) {\n   \
    \     if ($month == 4) {\n            $month += 1;\n            $year += 1;\n\
    \        }\n\n        if ($day == 29) {\n            if ($month == 6) {\n    \
    \            $month += 1;\n                $year += 1;\n            }\n\n    \
    \        if ($day == 29) {\n                if ($month == 9) {\n             \
    \       $month += 1;\n                    $year += 1;\n                }\n\n \
    \               if ($day == 29) {\n                    if ($month == 11) {\n \
    \                       $month += 1;\n                        $year += 1;\n  \
    \                  }\n\n                    if ($day == 29) {\n              \
    \          if ($month == 12) {\n                            $month += 1;\n   \
    \                         $year += 1;\n                        }\n           \
    \         }\n                }\n            }\n        }\n    }\n\n    if (($day\
    \ >= 1 && $day <= 31) && ($month >= 1 && $month <= 12)) {\n        return true;\n\
    \    }\n\n    return false;\n}\n\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplta7y303.php:103\n\
    Stack trace:\n#0 /tmp/tmplta7y303.php(121): test()\n#1 {main}\n  thrown in /tmp/tmplta7y303.php\
    \ on line 103\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $date = str_replace(\"\
    -\", \"\", $date);\n    if(empty($date)) return false;\n    $explode = explode(\"\
    -\", $date);\n    if(count($explode) != 3 || count($explode) != 3) return false;\n\
    \    if(!in_array($explode[1], range(1,12)) || in_array($explode[2], range(1,31))\
    \ ) return false;\n    if(!in_array($explode[1], range(4,6,9)) || !in_array($explode[2],\
    \ range(1,30) ) ) return false;\n    if(!in_array($explode[1], range(1,29) ))\
    \ return false;\n    return true;\n}\nfunction candidate(...$args) {\n    return\
    \ valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpge2ejjsi.php:34\n\
    Stack trace:\n#0 /tmp/tmpge2ejjsi.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpge2ejjsi.php\
    \ on line 34\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  $regex = '/^((0?[1-9]|[12]\\\
    d|3[01])[\\-\\/](0?[13578]|1[02])[\\-\\/]((19|[2-9]\\d)\\d{2}))|(29\\/02[\\-\\\
    /]((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))$/i';\n\
    \  return preg_match($regex, $date);\n}\n</code>\n<|/ a tags=date,validation,php\
    \ |>\n<| c |>\nI'm going to try this one. Thanks very much\n<|/ c |>\n<| c |>\n\
    This works thanks, you helped me a lot!\n<|/ c |>\n<| c |>\nWhy did you use regex\
    \ for such a straight forward task? A simple explode and compare will suffice\
    \ too.\n<|/ c |>\n<| a tags=date,validation,php |>\nThe previous answer is great\
    \ but it does not take into account the fact that different countries have different\
    \ calendar systems. Here is another answer that takes that into account:\n<code>\n\
    function candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp4jo9di66.php
    on line 23

    '
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $date= trim($date);\n\
    \    $date= strtolower($date);\n    if ($date== \"\"){\n        return false;\n\
    \    }\n    // check date validity\n    if(!preg_match('/^(0[1-9]|[12][0-9]|3[01])[\\\
    /](0[1-9]|1[012])[\\/](19|20)\\d\\d$/', $date)){\n        return false;\n    }\n\
    \    // check month\n    if(!preg_match('/^(0[1-9]|1[012])[\\/](0[1-9]|[12][0-9]|3[01])$/',\
    \ $date)){\n        return false;\n    }\n    // check day\n    if(!preg_match('/^(0[1-9]|1[012])[\\\
    /](0[1-9]|[12][0-9]|3[01])[\\/](19|20)\\d\\d$/', $date)){\n        return false;\n\
    \    }\n    return true;\n}\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6enxejw6.php:44\n\
    Stack trace:\n#0 /tmp/tmp6enxejw6.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp6enxejw6.php\
    \ on line 44\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    // Check whether the\
    \ given date string has some value\n    if(!$date) return false;\n    // Check\
    \ if the given date string is valid or not\n    if(preg_match('/^(\\d{1,2})-(\\\
    d{1,2})-(\\d{4})$/',$date,$matches)!==false) {\n        $date = strtotime($date);\n\
    \        if($date===\"false\") return false;\n        $date = $matches[3] . \"\
    -\" . $matches[2] . \"-\" . $matches[1];\n        // Check if the given date is\
    \ valid or not\n        if($date!==\"false\") {\n            // Check whether\
    \ the given date string has proper date\n            if(!checkdate($matches[1],$matches[2],$matches[3]))\
    \ return false;\n            // Check whether the given date string is valid or\
    \ not\n            if(!checkdate($matches[4],$matches[5],$matches[6])) return\
    \ false;\n            // Check whether the given date string is valid or not\n\
    \            if(!checkdate($matches[7],$matches[8],$matches[9])) return false;\n\
    \            // Check whether the given date string is valid or not\n        \
    \    if(!checkdate($matches[10],$matches[11],$matches[12])) return false;\n  \
    \      }\n    }\n    return true;\n}\n\n/**\n * Returns whether the given URL\
    \ is valid or not.\n * @param string $url - The URL which will be validated.\n\
    \ * @return boolean - Whether the URL is valid or not.\n */\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 4 in /tmp/tmpwdfxx8j1.php on line 32\n\n\
    Warning: Undefined array key 5 in /tmp/tmpwdfxx8j1.php on line 32\n\nWarning:\
    \ Undefined array key 6 in /tmp/tmpwdfxx8j1.php on line 32\n\nDeprecated: checkdate():\
    \ Passing null to parameter #1 ($month) of type int is deprecated in /tmp/tmpwdfxx8j1.php\
    \ on line 32\n\nDeprecated: checkdate(): Passing null to parameter #2 ($day) of\
    \ type int is deprecated in /tmp/tmpwdfxx8j1.php on line 32\n\nDeprecated: checkdate():\
    \ Passing null to parameter #3 ($year) of type int is deprecated in /tmp/tmpwdfxx8j1.php\
    \ on line 32\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwdfxx8j1.php:52\n\
    Stack trace:\n#0 /tmp/tmpwdfxx8j1.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpwdfxx8j1.php\
    \ on line 52\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if (empty($date) ||\
    \ !is_string($date)) {\n        return false;\n    }\n    $date = preg_replace('/(^\\\
    d{1,2}[-/]\\d{1,2}[-/]\\d{4})/i', \"'\", $date);\n    $d = DateTime::createFromFormat(\"\
    d-m-Y\", $date);\n    $valid = array(true, true, true, true, true, true);\n  \
    \  if ($d->format(\"m\") < 1 || $d->format(\"m\") > 12) {\n        $valid[0] =\
    \ false;\n    }\n    if ($d->format(\"d\") > 29 || $d->format(\"d\") > 31) {\n\
    \        $valid[1] = false;\n    }\n    if ($d->format(\"m\") < 1 || $d->format(\"\
    m\") > 12) {\n        $valid[2] = false;\n    }\n    if ($d->format(\"Y\") < 1990\
    \ || $d->format(\"Y\") > 2099) {\n        $valid[3] = false;\n    }\n    return\
    \ $valid[4];\n}\n\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: preg_replace(): Unknown modifier ']' in /tmp/tmp7g4zdp27.php\
    \ on line 23\n\nDeprecated: DateTime::createFromFormat(): Passing null to parameter\
    \ #2 ($datetime) of type string is deprecated in /tmp/tmp7g4zdp27.php on line\
    \ 24\n\nFatal error: Uncaught Error: Call to a member function format() on bool\
    \ in /tmp/tmp7g4zdp27.php:26\nStack trace:\n#0 /tmp/tmp7g4zdp27.php(42): valid_date(NULL)\n\
    #1 /tmp/tmp7g4zdp27.php(46): candidate('03-11-2000')\n#2 /tmp/tmp7g4zdp27.php(64):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp7g4zdp27.php on line 26\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if($date == '') return\
    \ false;\n    $d = DateTime::createFromFormat('d-m-Y', $date);\n    return $d\
    \ && $d->format('d-m-Y') !== false && $d->format('d') > 1 && $d->format('d') <=\
    \ 31 && $d->format('m') > 1 && $d->format('m') <= 12 && $d->format('Y') > 1 &&\
    \ $d->format('Y') <= 2040;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 tags=validation,date,php\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpm003jral.php
    on line 24

    '
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $date_pattern = \"\
    /^[01]{1}[0-9]{1}-[0-3]{1}[0-9]{2}$/\";\n    if (preg_match($date_pattern, $date))\
    \ {\n        return TRUE;\n    } else {\n        return FALSE;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplb4l3ugt.php:33\n\
    Stack trace:\n#0 /tmp/tmplb4l3ugt.php(51): test()\n#1 {main}\n  thrown in /tmp/tmplb4l3ugt.php\
    \ on line 33\n"
  timestamp: 1660028889
- exit_code: 0
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  $valid = false;\n  $regex\
    \ = '/^(([0][1-9]|[1][0-2])-(0?[1-9]|1[0-2])-[0-9]{4})$/';\n  if (preg_match($regex,\
    \ $date)) {\n    $valid = true;\n  }\n  return $valid;\n}\n\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $d = DateTime::createFromFormat('m-d-Y',\
    \ $date);\n    if ($d === FALSE) {\n        return false;\n    }\n    if (date('t')\
    \ == 0 || date('t') == 3) {\n        return true;\n    }\n    if (date('t') ==\
    \ 2) {\n        if ($d->format('m') == 0 || $d->format('m') == 12 || $d->format('m')\
    \ == 2) {\n            return true;\n        }\n    }\n    if (date('t') == 1)\
    \ {\n        if ($d->format('m') == 1 || $d->format('m') == 3 || $d->format('m')\
    \ == 5 || $d->format('m') == 7 || $d->format('m') == 8 || $d->format('m') == 10\
    \ || $d->format('m') == 12) {\n            return true;\n        }\n    }\n  \
    \  if (date('t') == 4) {\n        if ($d->format('m') == 4 || $d->format('m')\
    \ == 6 || $d->format('m') == 9 || $d->format('m') == 11) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_3phux1i.php:50\n\
    Stack trace:\n#0 /tmp/tmp_3phux1i.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp_3phux1i.php\
    \ on line 50\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  global $valid_date;\n\
    \n  if (!isset($valid_date[$date])) {\n    $valid_date[$date] = preg_match(\"\
    /^(?:(?:(?:31(?:\\d)?(?:0[13578]|1[02])|(?:(?:29|30)\\1|(?:0?[1,3-9]|1[0-2])\\\
    d)(?:0[13578]|1[02])|(?:29|30)\\2)\\s+(?:(?:(?:1[6-9]|[2-9]\\d)?\\d{2}|(?:16(?:0[48]|[2468][048]|[13579][26])|(?:17(?:6[1-9]|[2468][048]|[13579][26])00))))|(?:2902(?:0[13578]|1[02])|(?:(?:29|30)\\\
    3)(?:0[13578]|1[02])|(?:292|30)\\3))\\s+(?:(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)?)(?:\\\
    d\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)?)(?:\\\
    d\\d)(?:\\d\\d)?(?:\\d\\d)?(?:\\d\\d)?)?)?(?:(?:0?[1-9]|1\\d|2[0-8])(?:0?[1-9]|1\\\
    d|2[0-8])?(?:(?:0?[1-9])|(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:0?2(\\\
    /|-)29(?:\\/|-)29(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)?)(?:\\\
    d\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)?)(?:\\\
    d\\d)(?:\\d\\d)?(?:\\d\\d)?(?:\\d\\d)?)?)?(?:0?[1-9]|1\\d|2(?:[0-4]\\d|5[0-2])(?:0?[1-9])?|2(?:[0-4]\\\
    d|5[0-2])0?[1-9]|[1-9]\\d)(?:(?:0?[1-9])|(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\\
    d{2})$/\", $date);\n  }\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 19 in /tmp/tmpd35_ure7.php on line 48

    '
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    // Write the code here\n\
    }\nfunction candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsg56ubp1.php:27\n\
    Stack trace:\n#0 /tmp/tmpsg56ubp1.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpsg56ubp1.php\
    \ on line 27\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  $valid = false;\n\n \
    \ if (!empty($date)) {\n    $d = explode(\"-\", $date);\n\n    if (strlen($date)\
    \ == 10) {\n      $d = explode(\"/\", $date);\n\n      if (count($d) == 3 && is_numeric($d[0])\
    \ && is_numeric($d[1]) && is_numeric($d[2])) {\n        $valid = true;\n     \
    \ } else {\n        echo \"<script>alert('Please enter valid date format. Ex:\
    \ 05-26-2014');</script>\";\n      }\n    }\n  }\n\n  if (!$valid) {\n    return\
    \ false;\n  }\n\n  $valid_days = array(\n    1 => 31, 28, 31, 30, 31, 30, 31,\
    \ 31, 30, 31, 30, 31\n  );\n\n  $valid_months = array(\n    1 => 12, // months\n\
    \    2 => 3, // months\n    3 => 4, // months\n    4 => 6, // months\n    5 =>\
    \ 6, // months\n    7 => 8, // months\n    8 => 10, // months\n    9 => 11, //\
    \ months\n    10 => 11, // months\n    11 => 29, // months\n    12 => 29 // months\n\
    \  );\n\n  if (count($d) == 3) {\n    if (is_numeric($d[0]) && is_numeric($d[1])\
    \ && is_numeric($d[2])) {\n      $day = strtotime($d[1] . \"-\" . $d[2] . \"-\"\
    \ . $d[0]);\n\n      if ($day == false) {\n        return false;\n      }\n\n\
    \      $valid_days = array(\n        1 => 31,\n        2 => 28,\n        3 =>\
    \ 31,\n        4 => 30,\n        5 => 31,\n        6 => 30,\n        7 => 31,\n\
    \        8 => 30,\n        9 => 31,\n        10 => 30,\n        11 => 31,\n  \
    \      12 => 31\n      );\n\n      $month = strtotime($d[1] . \"-\" . $d[2]);\n\
    \n      if ($month == false) {\n        return false;\n      }\n\n      $valid_months\
    \ = array(\n        1 => 12,\n        2 => 3,\n        3 => 4,\n        4 => 6,\n\
    \        5 => 6,\n        6 => 6,\n        7 => 8,\n        8 => 10,\n       \
    \ 9 => 11,\n        10 => 11,\n        11 => 29,\n        12 => 29\n      );\n\
    \    } else {\n      return false;\n    }\n  }\n\n  if (count($d) == 2) {\n  \
    \  if (is_numeric($d[0]) && is_numeric($d[1])) {\n      $month = strtotime($d[1]\
    \ . \"-\" . $d[0]);\n\n      if ($month == false) {\n        return false;\n \
    \     }\n\n      $valid_months = array(\n        1 => 12,\n        2 => 3,\n \
    \       3 => 4,\n        4 => 6,\n        5 => \nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpm59i_9qz.php on line 120

    '
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  if(empty($date)) {\n\
    \    return false;\n  }\n  if(strlen($date) != 10) {\n    return false;\n  }\n\
    \  $parts = explode(\"-\", $date);\n  if(count($parts) != 3) {\n    return false;\n\
    \  }\n  $year = intval(substr($parts[1], 0, 4));\n  if($year < 1 || $year > 9999)\
    \ {\n    return false;\n  }\n  $month = intval(substr($parts[1], 0, 2));\n  $day\
    \ = intval(substr($parts[2], 0, 2));\n  if($month < 1 || $month > 12) {\n    return\
    \ false;\n  }\n  if($day < 1 || $day > 31 || ($day == 31 && $month == 1)) {\n\
    \    return false;\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n\
    \    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn4pdn43j.php:51\n\
    Stack trace:\n#0 /tmp/tmpn4pdn43j.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpn4pdn43j.php\
    \ on line 51\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  $d = DateTime::createFromFormat('m-d-Y',\
    \ $date);\n  return !empty($date) && $d->format('m') > 1 && $d->format('m') <\
    \ 12 && !$d->format('d') < 1 && $d->format('d') > 29 && !$d->format('m') < 3 &&\
    \ !$d->format('m') > 12;\n}\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptba51jki.php:28\n\
    Stack trace:\n#0 /tmp/tmptba51jki.php(46): test()\n#1 {main}\n  thrown in /tmp/tmptba51jki.php\
    \ on line 28\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $date = preg_replace('/[^0-9]/',\
    \ '', $date);\n    if ($date == \"\") return false;\n    list($d, $m, $y) = explode(\"\
    -\", $date);\n    if ($d < 1 || $d > 31) return false;\n    if ($m < 1 || $m >\
    \ 12) return false;\n    if ($y > 2100) return false;\n    return true;\n}\nfunction\
    \ candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmpa_8up8wb.php on line 22\n\n\
    Warning: Undefined array key 2 in /tmp/tmpa_8up8wb.php on line 22\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpa_8up8wb.php:33\nStack trace:\n\
    #0 /tmp/tmpa_8up8wb.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpa_8up8wb.php\
    \ on line 33\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $valid = false;\n \
    \   if (empty($date)) {\n        $valid = true;\n    }\n    if (strlen($date)\
    \ < 1) {\n        $valid = true;\n    }\n    if ($date > date('m-d-Y', strtotime(\"\
    2020-01-31\"))){\n        $valid = false;\n    }\n    if ($date > date('m-d-Y',\
    \ strtotime(\"2020-01-29\"))){\n        $valid = false;\n    }\n    if ($date\
    \ > date('m-d-Y', strtotime(\"2020-02-12\"))){\n        $valid = false;\n    }\n\
    \    if ($date > date('m-d-Y', strtotime(\"2020-02-11\"))){\n        $valid =\
    \ false;\n    }\n    if ($date > date('m-d-Y', strtotime(\"2020-02-06\"))){\n\
    \        $valid = false;\n    }\n    if ($date > date('m-d-Y', strtotime(\"2020-02-09\"\
    ))){\n        $valid = false;\n    }\n    if ($date > date('m-d-Y', strtotime(\"\
    2020-02-04\"))){\n        $valid = false;\n    }\n    if ($date > date('m-d-Y',\
    \ strtotime(\"2020-02-07\"))){\n        $valid = false;\n    }\n    if ($date\
    \ > date('m-d-Y', strtotime(\"2020-02-08\"))){\n        $valid = false;\n    }\n\
    \    if ($date > date('m-d-Y', strtotime(\"2020-02-01\"))){\n        $valid =\
    \ false;\n    }\n    if ($date > date('m-d-Y', strtotime(\"2020-03-01\"))){\n\
    \        $valid = false;\n    }\n    if ($date > date('m-d-Y', strtotime(\"2020-03-01\"\
    ))){\n        $valid = false;\n    }\n    if ($date > date('m-d-Y', strtotime(\"\
    2020-03-29\"))){\n        $valid = false;\n    }\n    if ($date > date('m-d-Y',\
    \ strtotime(\"2020-04-01\"))){\n        $valid = false;\n    }\n    if ($date\
    \ > date('m-d-Y', strtotime(\"2020-04-29\"))){\n        $valid = false;\n    }\n\
    \    if ($date > date('m-d-Y', strtotime(\"2020-05-01\"))){\n        $valid =\
    \ false;\n    }\n    if ($date > date('m-d-Y', strtotime(\"2020-05-29\"))){\n\
    \        $valid = false;\n    }\n    if ($date > date('m-d-Y', strtotime(\"2020-06-01\"\
    ))){\n        $valid = false;\n    }\n    if ($date > date('m-d-Y', strtotime(\"\
    2020-06-30\"))){\n        $valid = false;\n    }\n    if ($date > date('m-d-Y',\
    \ strtotime(\"2020-07-01\"))){\n        $valid = false;\n    }\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 19 in /tmp/tmpfc9ssalc.php on line 110

    '
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n\t$valid = false;\n\tif\
    \ (empty($date)) {\n\t\treturn false;\n\t}\n\t$date = preg_replace('/[^\\d-]/',\
    \ '', $date);\n\t$days_in_month = array(1, 3, 5, 7, 8, 10, 12);\n\t$days_in_month_short\
    \ = array(1, 3, 5, 7, 8, 10, 12);\n\t$months_in_year = array(\n\t\t1 => 31,\n\t\
    \t3 => 31,\n\t\t5 => 31,\n\t\t7 => 31,\n\t\t8 => 31,\n\t\t10 => 31,\n\t\t12 =>\
    \ 31,\n\t\t4 => 30,\n\t\t6 => 30,\n\t\t9 => 30,\n\t\t11 => 30,\n\t\t2 => 29\n\t\
    );\n\t$dateArray = explode('-', $date);\n\t$month = $dateArray[0];\n\t$day = $dateArray[1];\n\
    \t$year = $dateArray[2];\n\tif (count($dateArray) != 3) {\n\t\t$valid = false;\n\
    \t} else if ($month < 1 || $month > 12) {\n\t\t$valid = false;\n\t} else if ($day\
    \ < 1 || $day > $days_in_month[$month]) {\n\t\t$valid = false;\n\t} else if ($day\
    \ < 1 || $day > $days_in_month_short[$month]) {\n\t\t$valid = false;\n\t} else\
    \ if ($year < \"1920\" || $year > \"2038\") {\n\t\t$valid = false;\n\t} else if\
    \ ($months_in_year[$month] > $year) {\n\t\t$valid = false;\n\t} else if ($month\
    \ == 2) {\n\t\tif ($year % 400 == 0 ||\n\t\t\t($year % 4 == 0 && ($year % 100\
    \ != 0 || $year % 400 == 0))\n\t\t) {\n\t\t\t$valid = true;\n\t\t}\n\t}\n\treturn\
    \ $valid;\n}\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"03\" in /tmp/tmpyzrfr36f.php on line 49\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyzrfr36f.php:71\nStack\
    \ trace:\n#0 /tmp/tmpyzrfr36f.php(89): test()\n#1 {main}\n  thrown in /tmp/tmpyzrfr36f.php\
    \ on line 71\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if (!isset($date))\
    \ {\n        return false;\n    }\n\n    $day = isset($date[2]) ? $date[2] : '1';\n\
    \    $month = isset($date[0]) ? $date[0] : '1';\n    $year = isset($date[1]) ?\
    \ $date[1] : '0';\n\n    if ($day > '31' && $day < '30') {\n        $month++;\n\
    \    }\n    if ($month > '12' && $month < '11') {\n        $month--;\n    }\n\n\
    \    $month = strtoupper($month);\n    $day = strtoupper($day);\n    $year = strtoupper($year);\n\
    \n    if ($month > 12) {\n        $year++;\n        $month -= 12;\n    }\n\n \
    \   if (!checkdate($month, $day, $year)) {\n        return false;\n    }\n   \
    \ return true;\n}\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: checkdate(): Argument #2 ($day) must\
    \ be of type int, string given in /tmp/tmpnui1lpz2.php:44\nStack trace:\n#0 /tmp/tmpnui1lpz2.php(44):\
    \ checkdate('0', '-', '3')\n#1 /tmp/tmpnui1lpz2.php(50): valid_date('03-11-2000')\n\
    #2 /tmp/tmpnui1lpz2.php(54): candidate('03-11-2000')\n#3 /tmp/tmpnui1lpz2.php(72):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmpnui1lpz2.php on line 44\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    return ( !empty($date)\
    \ && !preg_match(\"/\\D/\", $date) && !preg_match(\"/^[0-9]{2}-[0-9]{2}-[0-9]{4}$/\"\
    , $date) && !preg_match(\"/^[0-9]{2}\\/[0-9]{2}\\/[0-9]{4}$/\", $date) && !preg_match(\"\
    /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/\", $date) && !preg_match(\"/^[0-9]{4}-[0-9]{2}\\\
    /[0-9]{2}$/\", $date) && !preg_match(\"/^[0-9]{4}\\/\\d\\/[0-9]{4}$/\", $date)\
    \ && !preg_match(\"/^[0-9]{4}-[0-9]{2}-[0-9]{2}\\/\\d\\/[0-9]{4}$/\", $date) &&\
    \ !preg_match(\"/^[0-9]{2}-[0-9]{2}-[0-9]{4}\\/\\d\\/[0-9]{2}$/\", $date) && !preg_match(\"\
    /^[0-9]{2}\\/[0-9]{2}\\/[0-9]{4}\\/\\d\\/[0-9]{2}$/\", $date) && !preg_match(\"\
    /^[0-9]{4}-[0-9]{2}-[0-9]{2}\\/\\d\\/[0-9]{4}\\/\\d\\/[0-9]{2}$/\", $date) &&\
    \ !preg_match(\"/^[0-9]{2}\\/[0-9]{2}\\/[0-9]{4}\\/\\d\\/[0-9]{2}\\/\\d\\/[0-9]{2}$/\"\
    , $date) && !preg_match(\"/^[0-9]{4}-[0-9]{2}-[0-9]{2}\\/\\d\\/[0-9]{4}\\/\\d\\\
    /[0-9]{2}\\/\\d\\/[0-9]{2}$/\", $date) && !preg_match(\"/^[0-9]{2}\\/[0-9]{2}\\\
    /[0-9]{4}\\/\\d\\/[0-9]{2}\\/\\d\\/[0-9]{2}\\/\\d\\/[0-9]{2}$/\", $date) );\n\
    }\nfunction candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4jqifgya.php:27\n\
    Stack trace:\n#0 /tmp/tmp4jqifgya.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp4jqifgya.php\
    \ on line 27\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $d = explode(\"-\"\
    , $date);\n    $d = array_map(\"intval\", $d);\n    if (empty($d[0]) || empty($d[1])\
    \ || empty($d[2])) return true;\n    if ($d[0] < 1 || $d[0] > 12) return false;\n\
    \    if ($d[1] < 1 || $d[1] > 31) return false;\n    if ($d[2] < 1 || $d[2] >\
    \ 30) return false;\n    if ($d[0] > 12 || $d[1] > 31 || $d[2] > 29) return false;\n\
    \    return true;\n}\n</code>\n<|/ a tags=php,date,datetime dscore=1 |>\n<| c\
    \ |>\nIt will also accept dates like \"01-01-2001\" or \"01-01-2000\". OP wants\
    \ to prevent that!\n<|/ c |>\n<| c |>\nThe question says **4. The date should\
    \ be in the format: mm-dd-yyyy** and **03-11-2000** are valid date formats. I\
    \ guess he has made a mistake with interpreting it.\n<|/ c |>\n<| c |>\n: I agree!\
    \ but OP also says: **3. The months should not be less than 1 or higher than 12.**\
    \ So I think he has a mistake in the first place as well.\n<|/ c |>\n<| a dscore=1\
    \ |>\nYou can try this :\n<code>\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp63qvksq9.php
    on line 29

    '
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $date=str_replace('/','-',$date);\n\
    \    $year=$date['year'];\n    $month=$date['month'];\n    $day=$date['day'];\n\
    \    $monthLen=12;\n    $dayLen=31;\n    $yearLen=4;\n    if ($month<1) {\n  \
    \      $month=1;\n    }\n    if ($month>12) {\n        $month=12;\n    }\n   \
    \ if ($day<1) {\n        $day=1;\n    }\n    if ($day>$dayLen) {\n        $day=$dayLen;\n\
    \    }\n    if ($month<1) {\n        $month=1;\n    }\n    if ($month>12) {\n\
    \        $month=12;\n    }\n    $dateArray=array();\n    $dateArray['year']=$year;\n\
    \    $dateArray['month']=$month;\n    $dateArray['day']=$day;\n    $dateArray['monthLen']=$monthLen;\n\
    \    $dateArray['dayLen']=$dayLen;\n    $dateArray['yearLen']=$yearLen;\n    if\
    \ ($dateArray['day']<1) {\n        $dateArray['day']=1;\n    }\n    if ($dateArray['day']>$dateArray['dayLen'])\
    \ {\n        $dateArray['day']=$dateArray['dayLen'];\n    }\n    if ($dateArray['month']<1)\
    \ {\n        $dateArray['month']=1;\n    }\n    if ($dateArray['month']>12) {\n\
    \        $dateArray['month']=$monthLen;\n    }\n    if ($dateArray['month']<1)\
    \ {\n        $dateArray['month']=1;\n    }\n    if ($dateArray['month']>12) {\n\
    \        $dateArray['month']=$monthLen;\n    }\n    if ($year<1) {\n        $year=1;\n\
    \    }\n    if ($year>$yearLen) {\n        $year=$yearLen;\n    }\n    $dateArray['year']=$year;\n\
    \    if ($dateArray['month']<1) {\n        $dateArray['month']=1;\n    }\n   \
    \ if ($dateArray['month']>12) {\n        $dateArray['month']=$monthLen;\n    }\n\
    \    $daysInMonth=cal_days_in_month(CAL_GREGORIAN, $dateArray['month'], $dateArray['year']);\n\
    \    if ($dateArray['month']<1) {\n        $dateArray['month']=1;\n    }\n   \
    \ if ($dateArray['month']>12) {\n        $dateArray['month']=$monthLen;\n    }\n\
    \    if ($day<1) {\n        $day\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpf45j2fiq.php
    on line 92

    '
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $pattern = '/^([12]\\\
    d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))$/';\n    return preg_match($pattern,\
    \ $date);\n}\n</code>\n<|/ a tags=php |>\n<| a |>\nUse date_create_from_format\
    \ instead:\n<code>\n$d = date_create_from_format('Ymd', '20201130');\nprint_r($d);\n\
    </code>\nThe output will be something like:\n<code>\nDateTime Object\n(\n    [date]\
    \ => 2020-11-30 00:00:00\n    [timezone_type] => 3\n    [timezone] => Asia/Ho_Chi_Minh\n\
    )\n</code>\n<|/ a tags=php dscore=1 |>\n<| a dscore=1 |>\n<code>\n$date = date_create('2020-11-30');\n\
    $valid_date = '2020-11-30';\n$date->format('Ymd') == $valid_date;\n</code>\n<|/\
    \ a tags=php |>\n<| a dscore=1 tags=php |>\n<code>\n<?php\n\n$date = date_create('2020-11-30');\n\
    $valid_date = '2020-11-30';\n\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpdze_y6pr.php
    on line 23

    '
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    // Implement function\
    \ here.\n}\n</code>\n<|/ a tags=arrays,php,loops dscore=0 |>\n<| c |>\nthank you\
    \ for helping me out\n<|/ c |>\n<| c |>\nYou welcome :) If it helped, please vote\
    \ it up :)\n<|/ c |>\n<| a dscore=0 tags=arrays,php,loops |>\nYou can use array_filter\
    \ for that:\n<code>\n$arr = ['05/13/2000', '05/13/2001', '05/13/2002', '05/13/2003',\
    \ '05/13/2004', '05/13/2005', '05/13/2006', '05/13/2007', '05/13/2008', '05/13/2009',\
    \ '05/13/2010', '05/13/2011', '05/13/2012', '05/13/2013', '05/13/2014', '05/13/2015',\
    \ '05/13/2016', '05/13/2017', '05/13/2018', '05/13/2019', '05/13/2020', '05/13/2021',\
    \ '05/13/2022', '05/13/2023', '05/13/2024', '05/13/2025', '05/13/2026', '05/13/2027',\
    \ '05/13/2028', '05/13/2029', '05/13/2030', '05/13/2031', '05/13/2032', '05/13/2033',\
    \ '05/13/2034', '05/13/2035', '05/13/2036', '05/13/2037', '05/13/2038', '05/13/2039',\
    \ '05/13/2040', '05/13/2041', '05/13/2042', '05/13/2043', '05/13/2044', '05/13/2045',\
    \ '05/13/2046', '05/13/2047', '05/13/2048', '05/13/2049', '05/13/2050', '05/13/2051',\
    \ '05/13/2052', '05/13/2053', '05/13/2054', '05/13/2055', '05/13/2056', '05/13/2057',\
    \ '05/13/2058', '05/13/2059', '05/13/2060', '05/13/2061', '05/13/2062', '05/13/2063',\
    \ '05/13/2064', '05/13/2065', '05/13/2066', '05/13/2067', '05/13/2068', '05/13/2069',\
    \ '05/13/2070', '05/13/2071', '05/13/2072', '05/13/2073', '05\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpit17t2wr.php
    on line 22

    '
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    return preg_match('/^[0-9]{1,2}-[0-9]{1,2}-[0-9]{4}$/',\
    \ $date);\n}\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd8lqinxi.php:27\n\
    Stack trace:\n#0 /tmp/tmpd8lqinxi.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpd8lqinxi.php\
    \ on line 27\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $valid=true;\n    if\
    \ (empty($date)) {\n        $valid=false;\n    }\n    if (strlen($date)<1) {\n\
    \        $valid=false;\n    }\n    if (strlen($date)>31) {\n        $valid=false;\n\
    \    }\n    if (strlen($date)>30) {\n        $valid=false;\n    }\n    if (strlen($date)>29)\
    \ {\n        $valid=false;\n    }\n    if ($date<\"01-01-1900\") {\n        $valid=false;\n\
    \    }\n    if ($date>=\"01-01-2020\") {\n        $valid=false;\n    }\n    $m=explode(\"\
    -\",$date);\n    $m[1]=checkmonth($m[1]);\n    $m[2]=checkday($m[2]);\n    if\
    \ ($m[2]<1 || $m[2]>31) {\n        $valid=false;\n    }\n    if ($m[1]<1 || $m[1]>12)\
    \ {\n        $valid=false;\n    }\n    return $valid;\n}\n\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function checkmonth()\
    \ in /tmp/tmpc675yjt2.php:43\nStack trace:\n#0 /tmp/tmpc675yjt2.php(55): valid_date('03-11-2000')\n\
    #1 /tmp/tmpc675yjt2.php(59): candidate('03-11-2000')\n#2 /tmp/tmpc675yjt2.php(77):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpc675yjt2.php on line 43\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $d = DateTime::createFromFormat(\"\
    m-d-Y\", $date);\n    if ($d === FALSE) {\n        return false;\n    }\n    $month\
    \ = $d->format(\"m\");\n    $day = $d->format(\"d\");\n    $year = $d->format(\"\
    Y\");\n\n    $months = array(\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"\
    12\");\n    $numDays = array(1, 3, 5, 7, 8, 10, 12);\n\n    if (in_array($month,\
    \ $months)) {\n        if ($day > $numDays[$month - 1]) {\n            return\
    \ false;\n        }\n    } else if (in_array($month, $months)) {\n        if ($day\
    \ > 29) {\n            return false;\n        }\n    } else {\n        return\
    \ false;\n    }\n    $minYear = 2010;\n    $maxYear = date('Y') + 1;\n    if ($year\
    \ > $maxYear) {\n        return false;\n    }\n    $year = $year - 2000;\n   \
    \ if ($year < $minYear) {\n        return false;\n    }\n\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4c0yfmzs.php:60\n\
    Stack trace:\n#0 /tmp/tmp4c0yfmzs.php(78): test()\n#1 {main}\n  thrown in /tmp/tmp4c0yfmzs.php\
    \ on line 60\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if (!$date) {\n   \
    \     return false;\n    }\n    if (empty($date)) {\n        return false;\n \
    \   }\n    // Months.\n    $valid_months = array();\n    $valid_months[1] = array(\"\
    01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\");\n    $valid_months[3] =\
    \ array(\"04\", \"06\", \"09\", \"11\");\n    $valid_months[5] = array(\"01\"\
    , \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\"\
    , \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\");\n    $valid_months[7]\
    \ = array(\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\"\
    , \"09\", \"11\", \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\"\
    , \"06\", \"09\", \"11\", \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"\
    );\n    $valid_months[8] = array(\"01\", \"03\", \"05\", \"07\", \"08\", \"10\"\
    , \"12\", \"04\", \"06\", \"09\", \"11\", \"01\", \"03\", \"05\", \"07\", \"08\"\
    , \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"01\", \"03\", \"05\", \"07\"\
    , \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"01\", \"03\", \"05\"\
    , \"07\", \"08\", \"10\", \"12\");\n    $valid_months[10] = array(\"01\", \"03\"\
    , \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"01\"\
    , \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\"\
    , \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\"\
    , \"11\", \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\");\n    $valid_months[12]\
    \ = array(\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\"\
    , \"09\", \"11\", \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\"\
    , \"06\", \"09\", \"11\", \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"\
    , \"04\", \"06\", \"09\", \"11\", \"01\", \"03\", \"05\", \"07\", \"08\", \"10\"\
    , \"12\");\n    $valid_months[4] = array(\"01\", \"03\", \"05\", \"07\", \"08\"\
    , \"10\", \"12\", \"04\", \"06\", \"09\", \"11\");\n    $valid_months[6] = array(\"\
    01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\",\
    \ \"11\", \"01\", \"03\", \"05\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected integer "03", expecting ")" in /tmp/tmp1amlla56.php
    on line 42

    '
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    list($month,$day,$year)\
    \ = explode('-',$date);\n    if (empty($date)) return false;\n    if (strlen($date)\
    \ == 0) return false;\n    if ($day < 1 || ($day > 31 && ($month == 1 || $month\
    \ == 3 || $month == 5 || $month == 7 || $month == 8 || $month == 10 || $month\
    \ == 12)))\n        return false;\n    if ($month < 1 || ($month > 12 && ($day\
    \ == 31 || ($day == 30 && ($month == 2 || $month == 4 || $month == 6 || $month\
    \ == 9 || $month == 11)))))\n        return false;\n    if ($month == 2 && ($day\
    \ > 29))\n        return false;\n    if ($month == 4 && ($day > 30))\n       \
    \ return false;\n    if ($month == 6 && ($day > 30))\n        return false;\n\
    \    if ($month == 9 && ($day > 30))\n        return false;\n    if ($month ==\
    \ 11 && ($day > 30))\n        return false;\n    if ($month == 2) {\n        if\
    \ ($day > 28)\n            return false;\n    }\n    return true;\n}\nfunction\
    \ candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplnaqq44m.php:49\n\
    Stack trace:\n#0 /tmp/tmplnaqq44m.php(66): test()\n#1 {main}\n  thrown in /tmp/tmplnaqq44m.php\
    \ on line 49\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if(empty($date)) {\n\
    \        return false;\n    }\n    $days_month = cal_days_in_month(CAL_GREGORIAN,\
    \ date('m'), date('Y'));\n    if($days_month > 31 || $days_month < 1) {\n    \
    \    return false;\n    }\n    $days_year = cal_days_in_year(CAL_GREGORIAN, date('Y'));\n\
    \    if($days_year > 31 || $days_year < 1) {\n        return false;\n    }\n \
    \   $year_month = cal_days_in_month(CAL_GREGORIAN, date('Y'), date('m'));\n  \
    \  if($year_month > 12 || $year_month < 1) {\n        return false;\n    }\n \
    \   $dateParts = explode('-', $date);\n    if(count($dateParts) != 3) {\n    \
    \    return false;\n    }\n    list($month, $day, $year) = explode(',', $date);\n\
    \    $month = (int) $month;\n    $day = (int) $day;\n    $year = (int) $year;\n\
    \    if($month < 1 || $month > 12 || $day < 1 || $day > $days_month) {\n     \
    \   return false;\n    }\n    if($year < 50 || $year > 2050) {\n        return\
    \ false;\n    }\n    return true;\n}\n</code>\n<|/ a |>\n<| c |>\nI guess you\
    \ mean `if(!is_date($date)) { ...` otherwise you will get a parse error.\n<|/\
    \ c |>\n<| c |>\nThanks. Edited.\n<|/ c |>\n<| c |>\nthank you so much! This is\
    \ so much better than the code I came up with and much less likely to blow up\
    \ in edge cases.\n<|/ c |>\n<| a dscore=1 |>\nI guess you cannot use regular expression\
    \ to validate such dates as some people have pointed out here. If you use PHP\
    \ 7 then there is a new class called DateTime which can validate date for you.\
    \ \nThis class can help you with that:\n<code>\n$date = new DateTime(\"03-11-2000\"\
    );\n$date->format('Ymd') == $date->format('Ymd'); // will return true if date\
    \ is valid\n</code>\n<|/ a tags=php,date |>\n<| c |>\nWhile `DateTime` can help\
    \ with the format, it cannot validate that it is in fact a valid date.\n<|/ c\
    \ |>\n<| c |>\nI agree, just wanted to mention that this solution is valid for\
    \ PHP 7 only\n<|/ c |>\n<| c |>\nThe question explicitly states that he cannot\
    \ use regex.\n<|/ c |>\n<| a tag\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpkffp69nb.php
    on line 51

    '
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n\t// The date string is\
    \ not empty\n\tif(empty($date)) {\n\t\treturn false;\n\t}\n\n\t// The number of\
    \ days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And\
    \ the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
    \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
    \t$days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\t$months_in_year\
    \ = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n\t// Get the days\
    \ of the month from the date string.\n\t$date_parts = explode(\"-\", $date);\n\
    \t$day = end($date_parts);\n\n\t// Check if the date string is in the valid format.\n\
    \tif(strpos($date, '-') !== false) {\n\t\t$date_parts = explode(\"-\", $date);\n\
    \t\t$month = end($date_parts);\n\n\t\t// Check if the month is valid.\n\t\t$year\
    \ = substr($month, 0, 4);\n\t\t$month = substr($month, 4, 2);\n\t\t$month = checksum($month);\n\
    \n\t\tif($month < 1 || $month > 12) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif($year\
    \ < 2000 || $year > 2099) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$months_in_year[$month\
    \ - 1];\n\n\t\t$days_in_month[$month - 1];\n\t\t$days_in_year = ($year - 2000)\
    \ * 365 + floor((($year - 2000) / 4) - floor((($year - 2000) / 100) + floor((($year\
    \ - 2000) / 400)));\n\n\t\t$day = $day + $days_in_year + $days_in_month[$month\
    \ - 1];\n\n\t\t// Check if the date string is greater than the max allowed days.\n\
    \t\tif($day > $days_in_month[$month - 1]) {\n\t\t\treturn false;\n\t\t}\n\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token ";", expecting ")" in /tmp/tmpp9glqscw.php
    on line 54

    '
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n\t// 1. The date string\
    \ is not empty.\n\tif (!empty($date)) {\n\t\t// 2. The number of days is not less\
    \ than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of\
    \ days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the\
    \ number of days is not less than 1 or higher than 29 for the month 2.\n\t\tif\
    \ (is_numeric($date)) {\n\t\t\t// 3. The months should not be less than 1 or higher\
    \ than 12.\n\t\t\tif ($date >= 1 && $date <= 12) {\n\t\t\t\t// 4. The date should\
    \ be in the format: mm-dd-yyyy\n\t\t\t\t$date = explode(\"-\", $date);\n\t\t\t\
    \t$date = $date[2].\"-\".$date[0].\"-\".$date[1];\n\t\t\t\t// >>> valid_date(\"\
    03-11-2000\")\n\t\t\t\t// true\n\t\t\t\t// >>> valid_date(\"15-01-2012\")\n\t\t\
    \t\t// false\n\t\t\t\t// >>> valid_date(\"04-0-2040\")\n\t\t\t\t// false\n\t\t\
    \t\t// >>> valid_date(\"06-04-2020\")\n\t\t\t\t// true\n\t\t\t\t// >>> valid_date(\"\
    06/04/2020\")\n\t\t\t\t// false\n\t\t\t\treturn ($date == $date);\n\t\t\t} else\
    \ {\n\t\t\t\t// >>> valid_date(\"06-31-2000\")\n\t\t\t\t// true\n\t\t\t\t// >>>\
    \ valid_date(\"06-31-2040\")\n\t\t\t\t// true\n\t\t\t\t// >>> valid_date(\"06-31-2020\"\
    )\n\t\t\t\t// true\n\t\t\t\t// >>> valid_date(\"06-30-2000\")\n\t\t\t\t// true\n\
    \t\t\t\t// >>> valid_date(\"06-30-2040\")\n\t\t\t\t// true\n\t\t\t\t// >>> valid_date(\"\
    06-30-2020\")\n\t\t\t\t// true\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\
    \t\t\treturn false;\n\t\t}\n\t} else {\n\t\t// >>> valid_date(\"06-31-2000\")\n\
    \t\t// true\n\t\t// >>> valid_date(\"06-31-2040\")\n\t\t// true\n\t\t// >>> valid_date(\"\
    06-31-2020\")\n\t\t// true\n\t\t// >>> valid_date(\"06-30-2000\")\n\t\t// true\n\
    \t\t// >>> valid_date(\"06-30-2040\")\n\t\t// true\n\t\t// >>> valid_date(\"06-30-2020\"\
    )\n\t\t// true\n\t\treturn true;\n\t}\n}\n\nfunction candidate(...$args) {\n \
    \   return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq7dukgu4.php:80\n\
    Stack trace:\n#0 /tmp/tmpq7dukgu4.php(98): test()\n#1 {main}\n  thrown in /tmp/tmpq7dukgu4.php\
    \ on line 80\n"
  timestamp: 1660028889
- exit_code: 0
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  $days_in_month = array(31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);\n  list($month, $day, $year) =\
    \ explode(\"-\", $date);\n\n  if (empty($date)) {\n    return false;\n  }\n\n\
    \  $date = date(\"md\", strtotime($date));\n\n  if (empty($day) || $day > $days_in_month[$month\
    \ - 1] || $day < 1) {\n    return false;\n  }\n\n  if ($month < 1 || $month >\
    \ 12) {\n    return false;\n  }\n\n  if ($day < 1 || $day > $days_in_month[$month\
    \ - 1]) {\n    return false;\n  }\n\n  return true;\n}\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 14 in /tmp/tmpbml17lv2.php on line 29


    Warning: Undefined array key 1 in /tmp/tmpbml17lv2.php on line 21


    Warning: Undefined array key 2 in /tmp/tmpbml17lv2.php on line 21


    Warning: Undefined array key 20 in /tmp/tmpbml17lv2.php on line 29


    Warning: Undefined array key 1 in /tmp/tmpbml17lv2.php on line 21


    Warning: Undefined array key 2 in /tmp/tmpbml17lv2.php on line 21


    Warning: Undefined array key 1 in /tmp/tmpbml17lv2.php on line 21


    Warning: Undefined array key 2 in /tmp/tmpbml17lv2.php on line 21


    Warning: Undefined array key 2 in /tmp/tmpbml17lv2.php on line 21


    Warning: Undefined array key 2002 in /tmp/tmpbml17lv2.php on line 29


    Warning: Undefined array key 2002 in /tmp/tmpbml17lv2.php on line 29


    Warning: Undefined array key 2 in /tmp/tmpbml17lv2.php on line 21

    '
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $format = 'd-m-Y';\n\
    \    return !empty($date) && checkdate($date[2], $date[1], $date[0]) && date($format,\
    \ $date) == $date;\n}\n\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: checkdate(): Argument #1 ($month) must\
    \ be of type int, string given in /tmp/tmpl8_jwyh5.php:21\nStack trace:\n#0 /tmp/tmpl8_jwyh5.php(21):\
    \ checkdate('-', '3', '0')\n#1 /tmp/tmpl8_jwyh5.php(25): valid_date('03-11-2000')\n\
    #2 /tmp/tmpl8_jwyh5.php(29): candidate('03-11-2000')\n#3 /tmp/tmpl8_jwyh5.php(47):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmpl8_jwyh5.php on line 21\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    return preg_match('/^\\\
    d{1,2}-\\d{1,2}-\\d{4}/', $date) && date('z', strtotime($date)) == 0 &&\n    (\
    \ date('m', strtotime($date)) == 1 || (date('m', strtotime($date)) == 3 && date('d',\
    \ strtotime($date)) == 1) || (date('m', strtotime($date)) == 5 && date('d', strtotime($date))\
    \ == 1) || (date('m', strtotime($date)) == 7 && date('d', strtotime($date)) ==\
    \ 1 && date('y', strtotime($date)) == 2040) ) &&\n    ( ( date('m', strtotime($date))\
    \ == 4 && date('d', strtotime($date)) == 0 && date('y', strtotime($date)) == 2040)\
    \ || ( date('m', strtotime($date)) == 6 && date('d', strtotime($date)) == 0 &&\
    \ date('y', strtotime($date)) == 2020 ) );\n}\nfunction candidate(...$args) {\n\
    \    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiepq433m.php:29\n\
    Stack trace:\n#0 /tmp/tmpiepq433m.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpiepq433m.php\
    \ on line 29\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $date = strtotime($date);\n\
    \    $valid_date = checkdate(2, $date, date('m'));\n    $valid_date &= checkdate(6,\
    \ $date, date('d'));\n    $valid_date &= checkdate($valid_date, $date, date('y'));\n\
    \    return $valid_date;\n}\n</code>\n<|/ a dscore=0 tags=php,date-format |>\n\
    <| a tags=php,date-format |>\nYou can try this\n<code>\n<?php\n\n$date=\"12-02-2020\"\
    ;\n\n$months = array(\"01\" => \"January\", \"02\" => \"February\", \"03\" =>\
    \ \"March\", \"04\" => \"April\", \"05\" => \"May\", \"06\" => \"June\", \"07\"\
    \ => \"July\", \"08\" => \"August\", \"09\" => \"September\", \"10\" => \"October\"\
    , \"11\" => \"November\", \"12\" => \"December\");\n\nif(checkdate($months[date(\"\
    m\")], date(\"d\", strtotime($date)), date(\"y\"))) {\n    echo 'valid';\n} else\
    \ {\n    echo 'invalid';\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\ntry\
    \ this\n<code>\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpf_k02yhx.php
    on line 26

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n   $pattern = \"/^((0[1-9])|(1[0-2]))-(0[13578])-([0-9]{4})$/\"\
    ;\n   return preg_match($pattern, $date);\n}\n\nfunction candidate(...$args) {\n\
    \    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkb9f7e6z.php:29\n\
    Stack trace:\n#0 /tmp/tmpkb9f7e6z.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpkb9f7e6z.php\
    \ on line 29\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  // 1. date is not empty\n\
    \  if (empty($date)) {\n    return false;\n  }\n\n  // 2. number of days is not\
    \ less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And, the number\
    \ days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the\
    \ number of days is not less than 1 or higher than 29 for the month 2.\n  if ($date\
    \ > '31-' || $date > '30-' || $date > '29-' || $date > '1-') {\n    return false;\n\
    \  }\n\n  // 3. months should not be less than 1 or higher than 12.\n  if ($date\
    \ > '12-' || $date < '1-2') {\n    return false;\n  }\n\n  // 4. date should be\
    \ in the format: mm-dd-yyyy\n  if (preg_match('/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/',\
    \ $date)) {\n    return true;\n  }\n\n  return false;\n}\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjxrxtxjw.php:47\n\
    Stack trace:\n#0 /tmp/tmpjxrxtxjw.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpjxrxtxjw.php\
    \ on line 47\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    // Your code goes here\n\
    \    $valid_date = false;\n    $date = preg_replace(\"/[^0-9]/\",\"\",$date);\n\
    \    $date = preg_replace(\"/\\-/\",\"\",$date);\n    $date = explode(\"-\",$date);\n\
    \    $month = intval($date[0]);\n    $day   = intval($date[1]);\n    $year  =\
    \ intval($date[2]);\n    if ( $month > 0 && $day > 0 && $month < 12 && $day <\
    \ 31 && ( $day + $year == date(\"t\") ) || ( $day + $year == date(\"t\") + 1 ))\
    \ {\n        $valid_date = true;\n    }\n    return $valid_date;\n}\nfunction\
    \ candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmpxynw_j9d.php on line 26\n\n\
    Warning: Undefined array key 2 in /tmp/tmpxynw_j9d.php on line 27\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpxynw_j9d.php:38\nStack trace:\n\
    #0 /tmp/tmpxynw_j9d.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpxynw_j9d.php\
    \ on line 38\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if (empty($date)) return\
    \ false;\n    $array = explode(\"-\", $date);\n    // Check that the string is\
    \ not empty\n    if (empty($array)) return false;\n    // Check that the string\
    \ is in the right format\n    if (!checkdate($array[1], $array[2], $array[0]))\
    \ return false;\n    // Check that we are within valid range\n    if ($array[1]\
    \ < 1 || $array[1] > 31) return false;\n    if ($array[2] < 1 || $array[2] > 30)\
    \ return false;\n    if ($array[1] < 1 || $array[1] > 12) return false;\n    if\
    \ ($array[2] < 1 || $array[2] > 29) return false;\n    return true;\n}\nfunction\
    \ candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsxa6jyu7.php:38\n\
    Stack trace:\n#0 /tmp/tmpsxa6jyu7.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpsxa6jyu7.php\
    \ on line 38\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n\tif(!empty($date)) {\n\
    \t\t$d = explode(\"-\", $date);\n\t\tif(count($d) != 3) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$daysInMonth = cal_days_in_month(CAL_GREGORIAN, intval($d[1]), intval($d[2]));\n\
    \t\tif($d[1] < 1 || $d[1] > $daysInMonth) {\n\t\t\treturn false;\n\t\t}\n\t\t\
    if($d[2] < 1 || $d[2] > $daysInMonth) {\n\t\t\treturn false;\n\t\t}\n\t\t$months\
    \ = array(\"1\", \"3\", \"5\", \"7\", \"8\", \"10\", \"12\");\n\t\t$monthNames\
    \ = array(\"January\", \"March\", \"May\", \"July\", \"August\", \"October\",\
    \ \"December\");\n\t\tif(in_array($d[1], $months) && in_array($d[2], $months))\
    \ {\n\t\t\treturn true;\n\t\t}\n\t\tif(in_array($d[1], $months) || in_array($d[2],\
    \ $months)) {\n\t\t\treturn false;\n\t\t}\n\t\tif(in_array($d[1], $monthNames)\
    \ || in_array($d[2], $monthNames)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\
    \t}\n\treturn false;\n}\n\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cal_days_in_month()\
    \ in /tmp/tmp4b_z1_fl.php:25\nStack trace:\n#0 /tmp/tmp4b_z1_fl.php(49): valid_date('03-11-2000')\n\
    #1 /tmp/tmp4b_z1_fl.php(53): candidate('03-11-2000')\n#2 /tmp/tmp4b_z1_fl.php(71):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp4b_z1_fl.php on line 25\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  $d = DateTime::createFromFormat('m-d-Y',\
    \ $date);\n  return $d && $d->format('U') > 0;\n}\n</code>\n<|/ a tags=php,date,validation\
    \ |>\n<| c |>\nThis seems to have two problems: (1) `DateTime::createFromFormat('m-d-Y',\
    \ $date)` returns `false` if the string does not match `'m-d-Y'`; and then (2)\
    \ it also fails for invalid dates like `'12-12-2015'`.\n<|/ c |>\n<| c |>\nThat's\
    \ a great catch. Will edit the answer with that in mind. Thanks for pointing it\
    \ out.\n<|/ c |>\n<| c |>\nThanks for the solution. I want to give a warning to\
    \ the user when he enters date like '12-12-2015' as this will be accepted as the\
    \ user enters date as mm-dd-yyyy only. How to achieve that? Any idea?\n<|/ c |>\n\
    <| a dscore=1 |>\nI've recently needed the same thing - my requirement was to\
    \ ensure the date was in a valid format (mm-dd-yyyy), but also ensure it was valid\
    \ to enter into a SQL query. I found that I could use the PHP PDO driver to ensure\
    \ the dates were validated before sending to the database - so I modified the\
    \ example given by to work with PDO:\n<code>\n$valid = false;\n$valid = date_verify(\"\
    06-04-2020\");\nif ($valid)\n{\n    $sql = \"SELECT column_name FROM tablename\
    \ WHERE date_field = '$valid'\";\n    $stmt = $pdo->prepare($sql);\n    $stmt->execute();\n\
    }\n</code>\nI then found that date_verify was only available from PHP >= 5.5.0,\
    \ so I needed to include a small patch file that renamed date_verify to date_valid_date\
    \ using the following code:\n<code>\n<?php\nfunction candidate(...$args) {\n \
    \   return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpsb4qxyfi.php
    on line 23

    '
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if (empty($date)) {\n\
    \        return false;\n    }\n    $date = trim($date);\n    $day   = explode(\"\
    -\", $date);\n    $month = $day[0];\n    $year  = $day[1];\n\n    $month  = explode(\"\
    ,\", $month);\n    $day    = explode(\",\", $day[1]);\n    $length = count($month);\n\
    \n    if (count($day) > 3) {\n        return false;\n    }\n\n    if (count($day)\
    \ == 3) {\n        for ($i = 0; $i < 3; $i++) {\n            if ($month[$i] >\
    \ 12) {\n                return false;\n            }\n        }\n    }\n\n  \
    \  if (count($day) == 2) {\n        for ($i = 0; $i < 3; $i++) {\n           \
    \ if ($month[$i] > 12 || $month[$i] < 1) {\n                return false;\n  \
    \          }\n        }\n    }\n\n    if (count($day) == 1) {\n        for ($i\
    \ = 0; $i < 3; $i++) {\n            if ($month[$i] > 1 || $month[$i] < 1) {\n\
    \                return false;\n            }\n        }\n    }\n\n    if (count($day)\
    \ == 0) {\n        for ($i = 0; $i < 3; $i++) {\n            if ($month[$i] >\
    \ 12 || $month[$i] < 1) {\n                return false;\n            }\n    \
    \    }\n    }\n\n    return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplxj3ylbq.php:76\n\
    Stack trace:\n#0 /tmp/tmplxj3ylbq.php(94): test()\n#1 {main}\n  thrown in /tmp/tmplxj3ylbq.php\
    \ on line 76\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if ($date == '' ||\
    \ $date == 'None' || $date == 'None') {\n        return false;\n    }\n\n    $explode_date\
    \ = explode('-', $date);\n    if (count($explode_date) != 3) {\n        return\
    \ false;\n    }\n\n    $date_array = array();\n    array_walk($explode_date, function\
    \ (&$value) use (&$date_array) {\n        $value = str_replace(',', '', $value);\n\
    \        $value = str_replace('.', '', $value);\n        $value = str_replace('/',\
    \ '', $value);\n        $value = str_replace(' ', '', $value);\n        $value\
    \ = trim($value);\n        $value = preg_replace('/\\s+/', '', $value);\n    \
    \    $value = strtotime($value);\n        $value = date('Y-m-d', $value);\n  \
    \      $date_array[] = $value;\n    });\n\n    foreach ($date_array as $key =>\
    \ $value) {\n        if ($value == '') {\n            unset($date_array[$key]);\n\
    \        }\n    }\n    $date_array = array_unique($date_array);\n    foreach ($date_array\
    \ as $key => $value) {\n        if ($value == '') {\n            unset($date_array[$key]);\n\
    \        }\n    }\n    $date_array = array_unique($date_array);\n    foreach ($date_array\
    \ as $key => $value) {\n        if ($value == '') {\n            unset($date_array[$key]);\n\
    \        }\n    }\n    $date_array = array_unique($date_array);\n\n    if (count($date_array)\
    \ == 0) {\n        return false;\n    }\n    $first_date = array_shift($date_array);\n\
    \    $last_date = array_pop($date_array);\n    $date_array[] = $first_date;\n\
    \    $date_array[] = $last_date;\n\n    $count = count($date_array);\n    for\
    \ ($i = 0; $i < $count; $i++) {\n        if ($i < 31) {\n            $days[] =\
    \ $i;\n        } elseif ($i < 31) {\n            $months[] = $i;\n        } else\
    \ {\n            $months[] = 12;\n        }\n    }\n    for ($i = 0; $i < 12;\
    \ $i++) {\n        if ($i < 12) {\n            $days[] = $i;\n        } else {\n\
    \            $months[] = $i;\n        }\n    }\n\n    foreach ($date_array as\
    \ $key => $value) {\n        if ($value < 1 || $value > 31) {\n            unset($date_array[$key]);\n\
    \        }\n    }\n    foreach ($date_array as $key => $value) {\n        if ($value\
    \ < 1 || $value > 30) {\n            unset($date_array[$key]);\n        }\n  \
    \  }\n    foreach ($date_array as $key => $value) {\n        if ($value < 1 ||\
    \ $value > 29) {\n            unset($date_array[$\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpp31k5ij7.php on line 100

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  if (empty($date))\n \
    \   return false;\n  $day = substr($date, 0, 2);\n  $month = substr($date, 2,\
    \ 2);\n  $year = substr($date, 4, 4);\n  if (empty($day) || empty($month) || empty($year))\n\
    \    return false;\n\n  $num_days = cal_days_in_month(CAL_GREGORIAN, $month, $year);\n\
    \n  // Check the number of days in month.\n  if ($num_days == 31) {\n    if ($day\
    \ == '01')\n      return true;\n    if ($day == '02')\n      return true;\n  \
    \  if ($day == '03')\n      return true;\n  }\n  if ($num_days == 30) {\n    if\
    \ ($day == '04')\n      return true;\n    if ($day == '06')\n      return true;\n\
    \    if ($day == '09')\n      return true;\n  }\n  if ($num_days == 29) {\n  \
    \  if ($day == '02')\n      return true;\n  }\n  return false;\n}\n</code>\n<|/\
    \ a dscore=0 tags=datetime,php |>\n<| c |>\nThanks for your answer but your answer\
    \ doesn't validate the day month and year only validates date.\n<|/ c |>\n<| c\
    \ |>\nYeah but if the date should be in the format `mm-dd-yyyy` then this should\
    \ work\n<|/ c |>\n<| c |>\nYes but the problem is that i don't know which format\
    \ date will be coming like dd-mm-yyyy or mm-dd-yyyy or yyyy-mm-dd.\n<|/ c |>\n\
    <| c |>\nI already have this function and it is working but i have to write this\
    \ condition each time i receive date in any format.\n<|/ c |>\n<| a dscore=0 |>\n\
    Try This: \n<code>\n<?php\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpuiyou2ot.php
    on line 53

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $m = explode(\"-\"\
    , $date);\n    $d = explode(\"/\", $m[1]);\n    if (count($m) != 3 || count($d)\
    \ != 3) {\n        return false;\n    }\n    if ($m[0] < 1 || $m[0] > 12 || $m[1]\
    \ < 1 || $m[1] > 12 || $m[2] < 1 || $m[2] > 31) {\n        return false;\n   \
    \ }\n    if ($m[0] == $m[1] || $m[0] == $m[2] || $m[1] == $m[2]) {\n        return\
    \ false;\n    }\n    if ($m[2] == 31) {\n        $m[2]++;\n    }\n    if ($m[2]\
    \ == 30) {\n        $m[2]++;\n    }\n    if ($m[2] == 29) {\n        $m[2]++;\n\
    \    }\n    if ($m[2] == 12) {\n        $m[2]++;\n    }\n    if ($m[2] > 29) {\n\
    \        $m[0]++;\n        $m[1]++;\n        $m[2]++;\n    }\n    if ($m[2] >\
    \ 30) {\n        $m[1]++;\n        $m[2]++;\n    }\n    if ($m[2] > 31) {\n  \
    \      $m[1]++;\n    }\n    if ($m[1] > 12) {\n        $m[0]++;\n        $m[1]\
    \ = 1;\n        $m[2]++;\n    }\n    if ($m[1] > 12) {\n        $m[1] = 1;\n \
    \       $m[2]++;\n    }\n    if ($m[1] > 12) {\n        $m[0]++;\n    }\n    if\
    \ ($m[0] > 12) {\n        return false;\n    }\n    if ($m[1] < 1 || $m[1] > 12\
    \ || $m[2] < 1 || $m[2] > 31) {\n        return false;\n    }\n    return true;\n\
    }\nfunction candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbz2083gc.php:80\n\
    Stack trace:\n#0 /tmp/tmpbz2083gc.php(98): test()\n#1 {main}\n  thrown in /tmp/tmpbz2083gc.php\
    \ on line 80\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    // Your code here\n\
    \    return !empty($date) && is_numeric($date) && $date > 0 && $date <= 31 &&\
    \ $date <= 30 && ($date >= 1 && $date <= 12 || $date >= 4  && $date <= 11 || $date\
    \ >= 2 && $date <= 29) ? true : false;\n}\nfunction candidate(...$args) {\n  \
    \  return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy93zzs1p.php:28\n\
    Stack trace:\n#0 /tmp/tmpy93zzs1p.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpy93zzs1p.php\
    \ on line 28\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if (empty($date)) return\
    \ false;\n\n    // Validate the date string\n    $date_array = explode(\"-\",\
    \ $date);\n\n    // Validate the month\n    $month = intval($date_array[0]);\n\
    \    if ($month < 1 || $month > 12) return false;\n\n    // Validate the day of\
    \ the month\n    $day = intval($date_array[1]);\n    if ($day < 1 || $day > 31)\
    \ return false;\n\n    // Validate the year\n    $year = intval($date_array[2]);\n\
    \    if ($month == 1 && $day == 31) return false;\n    if ($month == 3 && $day\
    \ == 30) return false;\n\n    // If the month and day are valid, then the year\
    \ is valid\n    if ($month == 4 || $month == 6 || $month == 9 || $month == 11)\
    \ return false;\n    if ($month == 2 && $day == 29) return false;\n\n    // If\
    \ the year is valid, then the date is valid\n    if ($year > 0&&$year<=9999) return\
    \ false;\n\n    return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_qbii4u.php:53\n\
    Stack trace:\n#0 /tmp/tmp3_qbii4u.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp3_qbii4u.php\
    \ on line 53\n"
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if (!preg_match(\"\
    /^(?:\\s*((0[1-9]|[12][0-9]|3[01])[\\-\\/\\.](0[1-9]|1[012])[\\-\\/\\.]((19|20)\\\
    d\\d))|((0[1-9]|[12][0-9]|30)[\\-\\/\\.](0[1-9]|1[012])[\\-\\/\\.]((19|20)\\d\\\
    d))|((0[1-9]|1[012])[\\-\\/\\.]02[\\-\\/\\.]((19|20)\\d\\d))|((0[1-9]|1[012])[\\\
    -\\/\\.]02[\\-\\/\\.]20\\d\\d))\\s*$/\", $date)) {\n        return false;\n  \
    \  }\n    $year = intval(substr($date,5,4));\n    $month = intval(substr($date,0,2));\n\
    \    $day = intval(substr($date,3,2));\n    return checkdate($month,$day,$year);\n\
    }\nfunction candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq6uvmpyq.php:33\n\
    Stack trace:\n#0 /tmp/tmpq6uvmpyq.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpq6uvmpyq.php\
    \ on line 33\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n\t$day = (int)date(\"j\"\
    , strtotime($date));\n\tif ($day == 0 || ($day > 1 && $day < 31)) {\n\t\t$month\
    \ = (int)date(\"n\", strtotime($date));\n\t\tif ($month == 0 || ($month > 1 &&\
    \ $month < 12)) {\n\t\t\t$year = (int)date(\"Y\", strtotime($date));\n\t\t\treturn\
    \ (($month == 2 && $day == 29) && $year >= 1950 && $year < 2100)\n\t\t\t\t\t||\
    \ ($month == 2 && $day == 29 && $year >= 2100 && $year < 2140)\n\t\t\t\t\t|| ($month\
    \ == 2 && $day == 29 && $year >= 2140 && $year < 2150)\n\t\t\t\t\t|| ($month ==\
    \ 1 && ($day == 30 && $year >= 1950 && $year < 2100) || $month == 1 && $day ==\
    \ 30 && $year >= 2100 && $year < 2140)\n\t\t\t\t\t|| ($month == 1 && ($day ==\
    \ 30 && $year >= 2140 && $year < 2150)\n\t\t\t\t\t\t\t|| ($month == 4 && ($day\
    \ == 30 || $day == 31)\n\t\t\t\t\t\t\t\t\t&& $year >= 1950 && $year < 2100\n\t\
    \t\t\t\t\t\t\t\t|| $month == 4 && $day == 31 || $day == 30 && $year >= 2100 &&\
    \ $year < 2140)\n\t\t\t\t\t\t\t|| ($month == 4 && ($day == 30 || $day == 31)\n\
    \t\t\t\t\t\t\t\t\t&& $year >= 2140 && $year < 2150)\n\t\t\t\t\t\t\t|| ($month\
    \ == 6 && $day == 31 && $year >= 1950 && $year < 2100\n\t\t\t\t\t\t\t\t\t|| $month\
    \ == 6 && $day == 31 && $year >= 2100 && $year < 2140)\n\t\t\t\t\t\t\t|| ($month\
    \ == 6 && $day == 31 && $year >= 2140 && $year < 2150)\n\t\t\t\t\t\t\t|| ($month\
    \ == 9 && $day == 31 && $year >= 1950 && $year < 2100\n\t\t\t\t\t\t\t\t\t|| $month\
    \ == 9 && $day == 31 && $year >= 2100 && $year < 2140)\n\t\t\t\t\t\t\t|| ($month\
    \ == 9 && $day == 31 && $year >= 2140 && $year < 2150)\n\t\t\t\t\t\t\t|| ($month\
    \ == 11 && $day == 31 && $year >= 1950 && $year < 2100\n\t\t\t\t\t\t\t\t\t|| $month\
    \ == 11 && $day == 31 && $year >= 2100 && $year < 2140)\n\t\t\t\t\t\t\t|| ($month\
    \ == 11 && $day == 31 && $year >= 2140 && $year < 2150));\n\t\t}\n\t}\n\treturn\
    \ false;\n}\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp__ghjdos.php:53\n\
    Stack trace:\n#0 /tmp/tmp__ghjdos.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp__ghjdos.php\
    \ on line 53\n"
  timestamp: 1660028890
- exit_code: 0
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $days_in_month = [31,28,31,30,31,30,31,30,31,30,31];\n\
    \    // If date is not valid, then return false\n    if (!preg_match('/^([0-9]{2})-([0-9]{2})-([0-9]{4})$/',\
    \ $date, $m)) {\n        return false;\n    }\n    // If date is not in the correct\
    \ format, return false\n    if (!preg_match('/^([0-9]{2})-([0-9]{2})-([0-9]{4})$/',\
    \ $date, $m)) {\n        return false;\n    }\n    // If number of days is less\
    \ than 1 or greater than 31, return false\n    if ($m[2]<1 || $m[2]>31) {\n  \
    \      return false;\n    }\n    // If number of days is less than 1 or greater\
    \ than 30, return false\n    if ($m[2]<1 || $m[2]>30) {\n        return false;\n\
    \    }\n    // If number of days is less than 1 or greater than 29, return false\n\
    \    if ($m[2]<1 || $m[2]>29) {\n        return false;\n    }\n    // If month\
    \ is less than 1 or greater than 12, return false\n    if ($m[1]<1 || $m[1]>12)\
    \ {\n        return false;\n    }\n    // If month is less than 1 or greater than\
    \ 12, return false\n    if ($m[1]<1 || $m[1]>12) {\n        return false;\n  \
    \  }\n    // If month is less than 1 or greater than 12, return false\n    if\
    \ ($m[1]<1 || $m[1]>12) {\n        return false;\n    }\n    // If month is less\
    \ than 1 or greater than 12, return false\n    if ($m[1]<1 || $m[1]>12) {\n  \
    \      return false;\n    }\n    return true;\n}\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028889
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    list($month, $day,\
    \ $year) = explode(\"-\", $date);\n    if (empty($date)) return false;\n    if\
    \ (strlen($date) == 0) return false;\n    if ($day < 1 || $day > 31) return false;\n\
    \    if ($month < 1 || $month > 12) return false;\n    if ($month == 2) {\n  \
    \      if ($day == 29 && !is_leap_year($year)) return false;\n    }\n    if ($month\
    \ == 1 && $day == 31) return false;\n    if ($month == 3 && $day == 30) return\
    \ false;\n    if ($month == 5 && $day == 31) return false;\n    if ($month ==\
    \ 7 && $day == 31) return false;\n    if ($month == 9 && $day == 30) return false;\n\
    \    if ($month == 11 && $day == 31) return false;\n    if ($month == 13 && $day\
    \ == 31) return false;\n    if ($month == 15 && $day == 31) return false;\n  \
    \  return true;\n}\n\n/**\n * Checks if the given year is a leap year.\n * @param\
    \ string $year Year to check.\n * @return boolean True if year is a leap year,\
    \ otherwise false.\n */\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmp0k9luy4w.php on line 20\n\n\
    Warning: Undefined array key 2 in /tmp/tmp0k9luy4w.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp0k9luy4w.php:56\nStack trace:\n\
    #0 /tmp/tmp0k9luy4w.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp0k9luy4w.php\
    \ on line 56\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $date = strtotime($date);\n\
    \    $valid = !(empty($date) && !($date < 1) && !($date > 31) && !($date < 30)\
    \ && !($date < 29) && !($date < 12) && !(date('m', $date) > 12) && !(date('m',\
    \ $date) < 1));\n    return $valid;\n}\n\nfunction candidate(...$args) {\n   \
    \ return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkfxu1w52.php:31\n\
    Stack trace:\n#0 /tmp/tmpkfxu1w52.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpkfxu1w52.php\
    \ on line 31\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $array = explode('-',\
    \ $date);\n    $date_format = date(\"md\", mktime(0, 0, 0, $array[1], $array[0]));\n\
    \    if ($array[0] == $array[1]) {\n        $array[1] = $array[0] + 1;\n    }\n\
    \    if ($array[0] != $array[1]) {\n        return false;\n    }\n    if ($array[2]\
    \ < 1 || $array[2] > 12) {\n        return false;\n    }\n    if ($array[2] <\
    \ 10 || $array[2] > 31 && $array[1] != 1) {\n        return false;\n    }\n  \
    \  if ($array[2] < 10 || $array[2] > 30) {\n        return false;\n    }\n   \
    \ if ($array[2] < 1 || $array[2] > 29) {\n        return false;\n    }\n    if\
    \ ($array[1] < 1 || $array[1] > 12) {\n        return false;\n    }\n    if ($date_format\
    \ != $array[0]) {\n        return false;\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyab4xvo.php:54\n\
    Stack trace:\n#0 /tmp/tmpkyab4xvo.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpkyab4xvo.php\
    \ on line 54\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  global $date_format;\n\
    \  \n  $date1 = explode('-', $date);\n  $date2 = explode('/', $date1);\n  $date3\
    \ = explode('-', $date2);\n  $date4 = explode('/', $date3);\n  $date5 = array($date2[1],\
    \ $date3[1], $date4[1]);\n\n  if ($date3[0] > $date4[0]) {\n    if ($date3[1]\
    \ > $date4[1]) {\n      if ($date3[0] > $date4[0]) {\n        if ($date5[0] >\
    \ $date1[0]) {\n          if ($date2[1] > $date1[1]) {\n            if ($date3[1]\
    \ > $date2[1]) {\n              if ($date3[0] > $date4[0]) {\n               \
    \ return true;\n              }\n            }\n          }\n        }\n     \
    \ }\n    }\n  }\n\n  return false;\n}\nfunction candidate(...$args) {\n    return\
    \ valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: explode(): Argument #2 ($string) must\
    \ be of type string, array given in /tmp/tmpzldm6xxs.php:23\nStack trace:\n#0\
    \ /tmp/tmpzldm6xxs.php(23): explode('/', Array)\n#1 /tmp/tmpzldm6xxs.php(47):\
    \ valid_date('03-11-2000')\n#2 /tmp/tmpzldm6xxs.php(51): candidate('03-11-2000')\n\
    #3 /tmp/tmpzldm6xxs.php(69): test()\n#4 {main}\n  thrown in /tmp/tmpzldm6xxs.php\
    \ on line 23\n"
  timestamp: 1660028890
- exit_code: 0
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  if($date == \"\")\n \
    \   return false;\n  $day = explode(\"-\",$date);\n  if(count($day) != 3)\n  \
    \  return false;\n  $day = array_values($day);\n  if($day[0] >= 1 && $day[0] <=\
    \ 31 &&\n     $day[1] >= 1 && $day[1] <= 31 &&\n     $day[2] >= 1 && $day[2] <=\
    \ 31)\n    return true;\n  $day = array_values($day);\n  if($day[0] >= 1 && $day[0]\
    \ <= 30 &&\n     $day[1] >= 1 && $day[1] <= 30 &&\n     $day[2] >= 1 && $day[2]\
    \ <= 29)\n    return true;\n  $day = array_values($day);\n  if($day[0] >= 1 &&\
    \ $day[0] <= 12 &&\n     $day[1] >= 1 && $day[1] <= 12)\n    return true;\n  return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if (empty($date)) {\n\
    \        return false;\n    }\n\n    // Check to see if there are multiple dashes\
    \ in the date\n    // If there are multiple dashes separating the month,\n   \
    \ // then this function will return the boolean value false.\n    $d = str_replace(\"\
    -\", '-', $date);\n\n    $d = explode('-', $date);\n\n    $m = $d[0];\n    $d\
    \ = $d[1];\n    $y = $d[2];\n\n    // Check if the number of days is between 1\
    \ and 31\n    if ($d < 1 || $d > 31) {\n        return false;\n    }\n\n    //\
    \ Check if the number of days is between 1 and 30\n    if ($d < 1 || $d > 30)\
    \ {\n        return false;\n    }\n\n    // Check if the number of days is between\
    \ 1 and 29\n    if ($d < 1 || $d > 29) {\n        return false;\n    }\n\n   \
    \ // Check if the number of months is between 1 and 12\n    if ($m < 1 || $m >\
    \ 12) {\n        return false;\n    }\n\n    // Check the format of the date string\n\
    \    if (strlen($m) != 2 || strlen($d) != 2 || $m != '0' || $d != '0' || $y !=\
    \ '1970' || $y != '2020') {\n        return false;\n    }\n\n    // If the date\
    \ passed the test return true otherwise return false\n    return true;\n}\n\n\
    function candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Uninitialized string offset 2 in /tmp/tmpvcktp6gg.php on line\
    \ 33\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvcktp6gg.php:69\n\
    Stack trace:\n#0 /tmp/tmpvcktp6gg.php(87): test()\n#1 {main}\n  thrown in /tmp/tmpvcktp6gg.php\
    \ on line 69\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  // Write your code here\n\
    \  return false;\n}\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplq4ifniy.php:28\n\
    Stack trace:\n#0 /tmp/tmplq4ifniy.php(46): test()\n#1 {main}\n  thrown in /tmp/tmplq4ifniy.php\
    \ on line 28\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  $year = date(\"Y\", strtotime($date));\n\
    \  $month = date(\"n\", strtotime($date));\n  $day = date(\"j\", strtotime($date));\n\
    \n  $valid_days = array(1, 31, 30, 29);\n  $valid_months = array(\n    1,\n  \
    \  3,\n    5,\n    7,\n    8,\n    10,\n    12,\n  );\n\n  $year_string = str_pad($year,\
    \ 4, 0, STR_PAD_LEFT);\n  $month_string = str_pad($month, 1, 0, STR_PAD_RIGHT);\n\
    \n  if ($month < 1 || $month > 12) {\n    return false;\n  }\n\n  if ($day < 1\
    \ || $day > $valid_days[$month]) {\n    return false;\n  }\n\n  if ($day < $valid_days[$month]\
    \ && $month == 2) {\n    return false;\n  }\n\n  if ($month < 1 || $month > 12)\
    \ {\n    return false;\n  }\n\n  $date_string = $month_string . \"-\" . str_pad($day,\
    \ 2, 0, STR_PAD_LEFT) . \"-\" . $year_string;\n\n  if ($date != $date_string)\
    \ {\n    return false;\n  }\n\n  return true;\n}\n\n$date = \"06-04-2020\";\n\
    echo \"date $date ? \" . (valid_date($date) ? \"true\" : \"false\");\nfunction\
    \ candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 4 in /tmp/tmpt3u_zrg4.php on line 42\ndate\
    \ 06-04-2020 ? false\nWarning: Undefined array key 11 in /tmp/tmpt3u_zrg4.php\
    \ on line 42\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt3u_zrg4.php:70\n\
    Stack trace:\n#0 /tmp/tmpt3u_zrg4.php(88): test()\n#1 {main}\n  thrown in /tmp/tmpt3u_zrg4.php\
    \ on line 70\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $valid = true;\n  \
    \  if (!empty($date)) {\n        $d = DateTime::createFromFormat('m-d-Y', $date);\n\
    \        $valid = ($d && checkdate($d->format('m'), $d->format('d'), $d->format('Y')));\n\
    \    }\n    return $valid;\n}\n\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwv6bkdcs.php:34\n\
    Stack trace:\n#0 /tmp/tmpwv6bkdcs.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpwv6bkdcs.php\
    \ on line 34\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  if(empty($date)) {\n\
    \    return false;\n  }\n  if(is_numeric($date)) {\n    return false;\n  }\n \
    \ $dateArr = explode(\"-\", $date);\n  $day = checkdate($dateArr[1], $dateArr[2],\
    \ $dateArr[0]);\n  if($day === false) {\n    return false;\n  }\n  $month = checkdate($dateArr[1],\
    \ $dateArr[2], 1);\n  if($month === false) {\n    return false;\n  }\n  $year\
    \ = checkdate($dateArr[1], $dateArr[2], $dateArr[0]);\n  if($year === false) {\n\
    \    return false;\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n\
    \    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8wa1w4h2.php:47\n\
    Stack trace:\n#0 /tmp/tmp8wa1w4h2.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp8wa1w4h2.php\
    \ on line 47\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if (empty($date)) {\n\
    \        return false;\n    }\n    $date_array = explode('-', $date);\n    if\
    \ (count($date_array) != 3) {\n        return false;\n    }\n\n    $day_month_year\
    \ = explode(',', $date_array[0]);\n    if (count($day_month_year) != 3) {\n  \
    \      return false;\n    }\n\n    $day = intval($day_month_year[0]);\n    $month\
    \ = intval($day_month_year[1]);\n    $year = intval($day_month_year[2]);\n\n \
    \   if ($day < 1 || $day > 31) {\n        return false;\n    }\n\n    if ($month\
    \ < 1 || $month > 12) {\n        return false;\n    }\n\n    if ($year < 1000\
    \ || $year > 9999) {\n        return false;\n    }\n\n    $month = sprintf(\"\
    %02d\", $month);\n\n    if ($day < $month || $day >= $month + 29) {\n        return\
    \ false;\n    }\n\n    if ($month > 12) {\n        $year++;\n        $month =\
    \ 1;\n    }\n    if ($month < 1) {\n        $month = 12;\n        $year--;\n \
    \   }\n\n    $valid = false;\n    if ($month == 1) {\n        if ($year % 400\
    \ == 0 || ($year % 4 == 0 && $year % 100 != 0)) {\n            if ($day < 1 ||\
    \ $day > 31) {\n                $valid = true;\n            }\n        } else\
    \ {\n            if ($day < 1 || $day > 29) {\n                $valid = true;\n\
    \            }\n        }\n    } else {\n        if ($day < 1 || $day > 30) {\n\
    \            $valid = true;\n        }\n    }\n    return $valid;\n}\n\nfunction\
    \ candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfld_q3yj.php:88\n\
    Stack trace:\n#0 /tmp/tmpfld_q3yj.php(106): test()\n#1 {main}\n  thrown in /tmp/tmpfld_q3yj.php\
    \ on line 88\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $d = explode(\"-\"\
    , $date);\n    $day = isset($d[0]) ? $d[0] : \"\";\n    $month = isset($d[1])\
    \ ? $d[1] : \"\";\n    $year = isset($d[2]) ? $d[2] : \"\";\n\n    $valid_day\
    \ = $day && checkdate($month, $day, $year);\n    if ($day == \"\" || $month ==\
    \ \"\" || $year == \"\") {\n        return $valid_day;\n    }\n    $valid_month\
    \ = $month && checkdate($month, 1, $year);\n    if ($day == \"\" || $month ==\
    \ \"\" || $year == \"\") {\n        return $valid_month;\n    }\n    $valid_year\
    \ = checkdate($month, $day, $year);\n    if ($day == \"\" || $month == \"\" ||\
    \ $year == \"\") {\n        return $valid_year;\n    }\n    return $valid_day\
    \ && $valid_month && $valid_year;\n}\nfunction candidate(...$args) {\n    return\
    \ valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyf41czs0.php:45\n\
    Stack trace:\n#0 /tmp/tmpyf41czs0.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpyf41czs0.php\
    \ on line 45\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $date_array=explode(\"\
    -\",$date);\n    $month=date(\"m\",strtotime($date_array[0]));\n    $day=date(\"\
    d\",strtotime($date_array[0]));\n    $year=date(\"Y\",strtotime($date_array[0]));\n\
    \    \n    //month\n    if($month<1||$month>12){\n        return false;\n    }\n\
    \    \n    //day\n    if($day<1||$day>31){\n        return false;\n    }\n   \
    \ \n    //year\n    if($year<1901){\n        return false;\n    }\n    \n    //month\n\
    \    if($month<1||$month>12){\n        return false;\n    }\n    \n    //day\n\
    \    if($day<1||$day>31){\n        return false;\n    }\n    \n    return true;\n\
    }\nfunction candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp62ezvdbn.php:58\n\
    Stack trace:\n#0 /tmp/tmp62ezvdbn.php(75): test()\n#1 {main}\n  thrown in /tmp/tmp62ezvdbn.php\
    \ on line 58\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if ($date === null\
    \ || $date === '') {\n        return false;\n    }\n    $date1 = strtotime($date);\n\
    \    if (!$date1 ||\n        $date1 >= time() + (3 * 365 * 24 * 3600)) {\n   \
    \     return false;\n    }\n    $date2 = strtotime($date.\" 00:00:00\");\n   \
    \ if (!$date2 ||\n        $date2 >= time() + (3 * 365 * 24 * 3600)) {\n      \
    \  return false;\n    }\n    $date3 = strtotime(\"{$date} 00:00:00\");\n    if\
    \ (!$date3 ||\n        $date3 >= time() + (3 * 365 * 24 * 3600)) {\n        return\
    \ false;\n    }\n\n    $month1 = date('m', $date1);\n    $month2 = date('m', $date2);\n\
    \    $month3 = date('m', $date3);\n    $day1 = date('d', $date1);\n    $day2 =\
    \ date('d', $date2);\n    $day3 = date('d', $date3);\n\n    $check1 = ($month1\
    \ < 1 || $month1 > 12) ? false : true;\n    $check2 = ($day1 < 1 || $day1 > 31)\
    \ ? false : true;\n    $check3 = ($month1 < 1 || $month1 > 12) ? false : true;\n\
    \    $check4 = ($month1 < 1 || $month1 > 12) ? false : true;\n    $check5 = ($day1\
    \ < 1 || $day1 > 31) ? false : true;\n    $check6 = ($day1 < 1 || $day1 > 30)\
    \ ? false : true;\n    $check7 = ($month1 < 1 || $month1 > 12) ? false : true;\n\
    \    $check8 = ($month1 < 1 || $month1 > 12) ? false : true;\n\n    $valid = $check1\
    \ && $check2 && $check3 && $check4 && $check5 && $check6 && $check7 && $check8;\n\
    \n    return $valid;\n}\n\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpovsnp828.php:66\n\
    Stack trace:\n#0 /tmp/tmpovsnp828.php(83): test()\n#1 {main}\n  thrown in /tmp/tmpovsnp828.php\
    \ on line 66\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  $valid = false;\n  if\
    \ ( !empty($date)) {\n    if ( preg_match('/^([0-9]{2})\\-([0-9]{2})\\-([0-9]{4})$/',\
    \ $date)) {\n      if ( !empty($matches) && ((substr_count($matches[0], '-') ==\
    \ 3) || (substr_count($matches[0], '-') == 2) || (substr_count($matches[0], '-')\
    \ == 2)) ) {\n        $year = $matches[2];\n        $month = $matches[1];\n  \
    \      $day = $matches[0];\n\n        if (( $year == date('Y')) && ( ($month ==\
    \ 1) && ($day > 31) ) || (($month == 4) && ($day > 30)) || ($month == 2) || ($month\
    \ == 6) && ($day > 29)) {\n          $valid = false;\n        }\n        else\
    \ {\n          $valid = true;\n        }\n      }\n      else {\n        $valid\
    \ = false;\n      }\n    }\n    else {\n      $valid = false;\n    }\n  }\n  return\
    \ $valid;\n}\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr1xilwy6.php:50\n\
    Stack trace:\n#0 /tmp/tmpr1xilwy6.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpr1xilwy6.php\
    \ on line 50\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $parts = explode(\"\
    -\", $date);\n    $day = $parts[0];\n    $month = $parts[1];\n    $year = $parts[2];\n\
    \    if (empty($day) || empty($month) || empty($year)) {\n        return false;\n\
    \    }\n    $valid_year = false;\n    $valid_month = false;\n    $valid_day =\
    \ false;\n    $valid_date = false;\n    if (in_array($month, array(1, 3, 5, 7,\
    \ 8, 10, 12))) {\n        $valid_month = true;\n    }\n    if (in_array($day,\
    \ array(2, 4, 6, 9, 11))) {\n        $valid_day = true;\n    }\n    if ($month\
    \ == 2 && $day == 29) {\n        $valid_month = true;\n    }\n    $check1 = date(\"\
    md\", mktime(12, 0, 0, $month, 1, $year));\n    $check2 = date(\"md\", mktime(0,\
    \ 0, 0, $month, 1, $year));\n    if ($check1 == $month) {\n        $valid_year\
    \ = true;\n    }\n    if ($check2 == $month) {\n        $valid_year = true;\n\
    \    }\n    if ($valid_day && $valid_month && $valid_year && strlen($day) == 2\
    \ && strlen($month) == 2) {\n        $valid_date = true;\n    }\n    return $valid_date;\n\
    }\n</code>\n<|/ a tags=php dscore=2 |>\n<| c |>\nThank you for the efforts and\
    \ efforts of other people. I am new to programming and your efforts were really\
    \ helpful.\n<|/ c |>\n<| a dscore=0 tags=php |>\nTry the following code\n<code>\n\
    \    <?php\n    function valid_date($date) {\n    $month = date(\"m\", strtotime($date));\n\
    \    $day = date(\"d\", strtotime($date));\n    $year = date(\"Y\", strtotime($date));\n\
    \    if (($month < 1) || ($month > 12))\n    return false;\n    if (($day < 1)\
    \ || ($day > 31))\n    return false;\n    if (($year < 1) || ($year > 2013))\n\
    \    return false;\n    return true;\n    }\n    $date=\"12-03-2012\";\n    if\
    \ (valid_date($date)) {\n    echo \"Valid date\";\n    }\n    else{\n    echo\
    \ \"Invalid date\";\n    }\n    ?>\n</code>\n<|/ a |>\n<| c |>\nYou should never\
    \ ever rely on `strtotime` for validating dates. It's an industry standard. It\
    \ will accept any kind of date string.\n<|/ c |>\n<| c |>\nThanks, I know, but\
    \ I have used it in my code many times, it was the simplest way to do it, I guess,\
    \ I haven't seen any issue with it yet\n<|/ c |>\n<| c |>\n\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpd__d8_mu.php
    on line 53

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n\tif (empty($date)) return\
    \ false;\n\tlist($d, $m, $y) = explode(\"-\", $date);\n\tif (!is_numeric($d) ||\
    \ !is_numeric($m) || !is_numeric($y)) return false;\n\t$days_in_months = array(31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);\n\tif ($d > $days_in_months[$m\
    \ - 1] || $m > 12 || $y > 9999) return false;\n\treturn true;\n}\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2jips8fu.php:33\n\
    Stack trace:\n#0 /tmp/tmp2jips8fu.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp2jips8fu.php\
    \ on line 33\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n\tlist($y,$m,$d)=explode(\"\
    -\",$date);\n\tif(!$y) return false;\n\tif(!checkdate($m,$d,$y)) return false;\n\
    \tif(!in_array($m,range(1,12))) return false;\n\tif(!in_array($d,range(1,29)))\
    \ return false;\n\treturn true;\n}\nfunction candidate(...$args) {\n    return\
    \ valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdi7wiu4k.php:32\n\
    Stack trace:\n#0 /tmp/tmpdi7wiu4k.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpdi7wiu4k.php\
    \ on line 32\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $m = explode(\"-\"\
    , $date);\n    if (count($m) != 3) return false;\n    $d = substr($m[2], 0, 2);\n\
    \    $m = substr($m[2], 2, 2);\n    if ($m == 0) {\n        $month = 12;\n   \
    \     $year = $m[2];\n    } else {\n        $month = date(\"m\", strtotime($m[2]));\n\
    \        $year = date(\"Y\", strtotime($m[2]));\n    }\n    if ($d < 1 || $d >\
    \ 30) return false;\n    if ($m < 1 || $m > 12) return false;\n    if ($month\
    \ < 1 || $month > 12) return false;\n    if ($year < 1000 || $year > 2020) return\
    \ false;\n    return true;\n}\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Uninitialized string offset 2 in /tmp/tmpm9qlfkpy.php on line\
    \ 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm9qlfkpy.php:42\n\
    Stack trace:\n#0 /tmp/tmpm9qlfkpy.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpm9qlfkpy.php\
    \ on line 42\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if (!isset($date) ||\
    \ empty($date)) {\n        return false;\n    }\n\n    $today = date(\"Y-m-d\"\
    );\n    $date = explode(\"-\", $date);\n    $day = intval($date[0]);\n    $month\
    \ = intval($date[1]);\n\n    // check for empty date\n    if (empty($day) || empty($month)\
    \ || empty($year)) {\n        return false;\n    }\n\n    // check for valid date\n\
    \    $valid_month = array(1, 3, 5, 7, 8, 10, 12);\n    $valid_day = array(1, 2,\
    \ 3, 4, 5, 6, 9, 11);\n    $valid_year = array(0, 1, 2);\n\n    if (in_array($month,\
    \ $valid_month) === false) {\n        return false;\n    }\n\n    if (in_array($day,\
    \ $valid_day) === false) {\n        return false;\n    }\n\n    if (in_array($year,\
    \ $valid_year) === false) {\n        return false;\n    }\n\n    // check for\
    \ date format\n    $pattern = \"/(0?[1-9]|[12][0-9]|3[01])(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])/\"\
    ;\n    preg_match($pattern, $date, $matches);\n\n    if (!isset($matches[0]))\
    \ {\n        return false;\n    }\n\n    $year = intval($matches[2]);\n    $month\
    \ = intval($matches[1]);\n    $day = intval($matches[0]);\n\n    // check if date\
    \ is valid\n    if ($day > 31 || $month > 12) {\n        return false;\n    }\n\
    \n    if ($day < 1 || $month < 1 || $year < 1) {\n        return false;\n    }\n\
    \n    // check if date is valid month\n    if (in_array($month, $valid_month)\
    \ === false) {\n        return false;\n    }\n\n    // check if date is valid\
    \ day\n    if (in_array($day, $valid_day) === false) {\n        return false;\n\
    \    }\n\n    if ($month == 1) {\n        $month = 12;\n        $year = intval($year)\
    \ + 1;\n    }\n\n    // check if date is valid year\n    if (in_array($year, $valid_year)\
    \ === false) {\n        return false;\n    }\n\n    // check if date is valid\
    \ year\n    if ($day > 30 && $month != 2) {\n        return false;\n    }\n\n\
    \    if ($day < 1 && $month != 2 && $year != 2) {\n        return false;\n   \
    \ }\n\n    // check if date is valid year\n    if ($day > 29 && $month != 2) {\n\
    \        return false;\n    }\n\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5v6cfra1.php:114\n\
    Stack trace:\n#0 /tmp/tmp5v6cfra1.php(132): test()\n#1 {main}\n  thrown in /tmp/tmp5v6cfra1.php\
    \ on line 114\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $valid = false;\n\n\
    \    if (strlen($date) > 0) {\n        $date_parts = explode('-', $date);\n  \
    \      $date_parts_count = count($date_parts);\n        if ($date_parts_count\
    \ >= 3) {\n            $valid = true;\n            $valid_date = true;\n     \
    \       $valid_month = true;\n            $valid_year = true;\n            for\
    \ ($i = 1; $i < $date_parts_count; $i++) {\n                if ($i > 2) {\n  \
    \                  if ($date_parts[$i] < 1 || $date_parts[$i] > 31) {\n      \
    \                  $valid_date = false;\n                    }\n             \
    \   } else {\n                    if ($date_parts[$i] < 1 || $date_parts[$i] >\
    \ 29) {\n                        $valid_date = false;\n                    }\n\
    \                }\n            }\n            for ($i = 1; $i < $date_parts_count;\
    \ $i++) {\n                if ($i > 2) {\n                    if ($i > 1) {\n\
    \                        if ($date_parts[$i] < 1 || $date_parts[$i] > 12) {\n\
    \                            $valid_month = false;\n                        }\n\
    \                    } else {\n                        if ($date_parts[$i] < 1\
    \ || $date_parts[$i] > 12) {\n                            $valid_month = false;\n\
    \                        }\n                    }\n                } else {\n\
    \                    if ($date_parts[$i] < 1 || $date_parts[$i] > 31) {\n    \
    \                    $valid_month = false;\n                    }\n          \
    \      }\n            }\n            $year = $date_parts[2];\n            $year\
    \ = $year > 40 ? $year - 400 : $year;\n            if ($date_parts[1] > 0 && $date_parts[1]\
    \ < 13) {\n                $valid_year = true;\n            }\n            if\
    \ ($valid_date && $valid_month && $valid_year) {\n                $valid = true;\n\
    \            }\n        }\n    }\n    return $valid;\n}\n</code>\n<|/ a dscore=1\
    \ tags=validation,date,php |>\n<| a tags=validation,date,php |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp4xfnpo_6.php
    on line 70

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $date = strtotime($date);\n\
    \    if($date === false) {\n        return false;\n    }\n\n    $month = date(\"\
    m\", $date);\n    if($month < 1 || $month > 12) {\n        return false;\n   \
    \ }\n\n    $day = date(\"d\", $date);\n    if($day < 1 || $day > 31) {\n     \
    \   return false;\n    }\n\n    $year = date(\"Y\", $date);\n    if($day < 1 ||\
    \ $day > 30) {\n        return false;\n    }\n\n    if($month < 1 || $month >\
    \ 12) {\n        return false;\n    }\n\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfgou9d40.php:53\n\
    Stack trace:\n#0 /tmp/tmpfgou9d40.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpfgou9d40.php\
    \ on line 53\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $pattern = '/^(0[1-9]|[12][0-9]|3[01])[\\\
    /\\-](0[1-9]|1[012])[\\/\\-](19|20)\\d\\d$/';\n    if (preg_match($pattern, $date))\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsg29o385.php:33\n\
    Stack trace:\n#0 /tmp/tmpsg29o385.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpsg29o385.php\
    \ on line 33\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if(strlen($date)>0)\
    \ {\n        if(date('N',strtotime($date))<1||date('N',strtotime($date))>31) {\n\
    \            return false;\n        }\n        if(date('N',strtotime($date))<1||date('N',strtotime($date))>30)\
    \ {\n            return false;\n        }\n        if(date('N',strtotime($date))<1||date('N',strtotime($date))>29)\
    \ {\n            return false;\n        }\n        if(date('n',strtotime($date))<1||date('n',strtotime($date))>12)\
    \ {\n            return false;\n        }\n        if(date('Y',strtotime($date))<1||date('Y',strtotime($date))>date('Y'))\
    \ {\n            return false;\n        }\n        return true;\n    }\n    return\
    \ false;\n}\n\n/**\n * Check that the form elements have valid input values\n\
    \ *\n * @param array $form The form to be validated\n *\n * @return boolean True\
    \ if all form elements pass validation. False otherwise.\n */\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2_ux8t_n.php:54\n\
    Stack trace:\n#0 /tmp/tmp2_ux8t_n.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp2_ux8t_n.php\
    \ on line 54\n"
  timestamp: 1660028890
- exit_code: 0
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    // your code here\n\
    \    $pattern = \"/^(0?[1-9]|1[012])[-](0?[1-9]|[12][0-9]|3[01])[-](19|20)\\d\\\
    d$/\";\n    if (preg_match($pattern, $date)) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $d = DateTime::createFromFormat('m-d-Y',\
    \ $date);\n    $ts = strtotime($date);\n    return (bool)$d && $d > 0 && $d <\
    \ time() && $d <= (time()+60*60*24*29);\n}\n\nfunction candidate(...$args) {\n\
    \    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nNotice: Object of class DateTime could not be converted to int in /tmp/tmp9dr0w8je.php\
    \ on line 22\n\nNotice: Object of class DateTime could not be converted to int\
    \ in /tmp/tmp9dr0w8je.php on line 22\n\nNotice: Object of class DateTime could\
    \ not be converted to int in /tmp/tmp9dr0w8je.php on line 22\n\nNotice: Object\
    \ of class DateTime could not be converted to int in /tmp/tmp9dr0w8je.php on line\
    \ 22\n\nNotice: Object of class DateTime could not be converted to int in /tmp/tmp9dr0w8je.php\
    \ on line 22\n\nNotice: Object of class DateTime could not be converted to int\
    \ in /tmp/tmp9dr0w8je.php on line 22\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp9dr0w8je.php:31\nStack trace:\n#0 /tmp/tmp9dr0w8je.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9dr0w8je.php on line 31\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $date_parts = explode('-',\
    \ $date);\n    if (count($date_parts) != 3) return false;\n    if (!is_numeric($date_parts[1])\
    \ || !is_numeric($date_parts[2])) return false;\n    if ($date_parts[1] < 1 ||\
    \ $date_parts[1] > 12) return false;\n    if ($date_parts[2] < 1 || $date_parts[2]\
    \ > 31) return false;\n    if ($date_parts[1] == 2 && $date_parts[2] > 29) return\
    \ false;\n    if ($date_parts[1] == 2 && $date_parts[2] == 31) return false;\n\
    \    if ($date_parts[1] == 1 && $date_parts[2] == 3) return false; // Feb has\
    \ 31 days.\n    return true;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    I used following code to validate dates and it worked for me.\n<code>\nfunction\
    \ candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpy_9ylkpy.php
    on line 30

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $d = DateTime::createFromFormat('m-d-Y',\
    \ $date);\n    return $d && $d->format('d-m-Y') ? true : false;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\nYou could use Regex to test if the date exists\
    \ and if yes what was the date pattern:\n<code>\n$date = \"12-07-2019\";\nif (preg_match('/^\\\
    d{2}-\\d{2}-\\d{4}$/', $date)) {\n    $date_valid = true;\n    $date_pattern =\
    \ \"mm-dd-yyyy\";\n}\n</code>\n<|/ a tags=php,datetime |>\n<| a tags=php,datetime\
    \ dscore=0 |>\nHere's a custom function to validate dates and a preg_match to\
    \ parse date strings into dates:\n<code>\n$date = \"12-07-2019\";\n\nfunction\
    \ candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpx12rg2mp.php
    on line 23

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  $day   = date('j',strtotime($date));\n\
    \  $month = date('n',strtotime($date));\n  $year  = date('Y',strtotime($date));\n\
    \n  if ((isset($day) and $day >= 1 and $day <= 31) and (isset($month) and $month\
    \ >= 1 and $month <= 12) and (isset($year) and $year >= 1900)) {\n    if (($day\
    \ >= 1 and $day <= 31) and ($month >= 1 and $month <= 12) and ($year >= 1900))\
    \ {\n      return 1;\n    }\n  }\n  return false;\n}\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpff34wien.php:36\n\
    Stack trace:\n#0 /tmp/tmpff34wien.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpff34wien.php\
    \ on line 36\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $date = explode(\"\
    -\", $date);\n    $d = $date[0];\n    $m = $date[1];\n    $y = $date[2];\n   \
    \ // if the date is not valid, return false\n    if (empty($date)) {\n       \
    \ return false;\n    }\n    // if the number of days in months is less than 1\
    \ or greater than 31, return false\n    if ($m < 1 or $m > 12) {\n        return\
    \ false;\n    }\n    // if the number of days in months is less than 1 or greater\
    \ than 30, return false\n    if ($m == 1 or $m == 2 or $m == 3 or $m == 4 or $m\
    \ == 6 or $m == 9 or $m == 11 or $m == 12) {\n        return false;\n    }\n \
    \   // if the number of days in months is less than 1 or greater than 29, return\
    \ false\n    if ($m == 2 or $m == 3 or $m == 4 or $m == 5 or $m == 6 or $m ==\
    \ 7 or $m == 8 or $m == 9 or $m == 10 or $m == 11 or $m == 12) {\n        return\
    \ false;\n    }\n    // if the month is less than 1 or greater than 12, return\
    \ false\n    if ($m < 1 or $m > 12) {\n        return false;\n    }\n    // if\
    \ the month is not greater than 12, return false\n    if ($m > 12) {\n       \
    \ return false;\n    }\n    // if the year is not 4 digits, return false\n   \
    \ if (strlen($y) != 4) {\n        return false;\n    }\n    // if the date format\
    \ is incorrect, return false\n    if (strtolower($d) !== \"mm-dd-yyyy\") {\n \
    \       return false;\n    }\n    // return true\n    return true;\n}\nfunction\
    \ candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps7j_lv1b.php:64\n\
    Stack trace:\n#0 /tmp/tmps7j_lv1b.php(82): test()\n#1 {main}\n  thrown in /tmp/tmps7j_lv1b.php\
    \ on line 64\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $valid = false;\n\n\
    \    $valid = !empty($date);\n    $valid = $valid && (preg_match('/[1-9][0-9]?\\\
    /[1-9][0-9]?\\/[0-9]{4}/', $date) == 1);\n    $valid = $valid && (checkdays($date)\
    \ == 31);\n    $valid = $valid && (checkmonths($date) == 12);\n    $valid = $valid\
    \ && (checkmonths($date) == 12);\n    $valid = $valid && (checkyear($date) ==\
    \ 4);\n\n    return $valid;\n}\n\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_t8ow_k9.php:37\n\
    Stack trace:\n#0 /tmp/tmp_t8ow_k9.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp_t8ow_k9.php\
    \ on line 37\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $date = str_replace(\"\
    -\", \"/\", $date); // Replace '-' with '/' to make date format mm/dd/yyyy\n \
    \   $data = DateTime::createFromFormat('m-d-Y', $date);\n    if ($data === false)\
    \ return false;\n    if ($data->format('m') < 1 || $data->format('m') > 12) return\
    \ false;\n    if ($data->format('d') < 1 || $data->format('d') > 31) return false;\n\
    \    if ($data->format('d') < 1 || $data->format('d') > 30) return false;\n  \
    \  if ($data->format('m') < 1 || $data->format('m') > 12) return false;\n    return\
    \ true;\n}\n</code>\nThis way you can validate date with PHP DateTime class or\
    \ in JavaScript with a single line of code.\n<|/ a |>\n<| c |>\nThe only issue\
    \ with this is that it will return true for valid dates that fall into the same\
    \ century, e.g. 1992-02-31 will pass.\n<|/ c |>\n<| c |>\nI added another answer\
    \ with some explanation and some code to make it work. Maybe it is what you are\
    \ looking for.\n<|/ c |>\n<| a tags=javascript,date,php |>\nHere's a quick way\
    \ to validate the date, using the isDate function from moment.js (https://momentjs.com/docs/#/parsing/is-date/):\n\
    <code>\nfunction candidate(...$args) {\n    return valid_date(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpveo5_u_r.php
    on line 29

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if (!empty($date))\
    \ {\n        $checkdate = explode('-', $date);\n        $days_in_month = array(31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);\n        $days_in_mon = array(3,\
    \ 31, 31, 31, 31, 31, 30, 30, 30, 29, 29, 29);\n        $days_in_year = 366;\n\
    \n        $m = checkdate($checkdate[2], $checkdate[1], $checkdate[0]);\n     \
    \   $y = $checkdate[0];\n        if (checkdate($m, 2, $y) != false) $days_in_month[2]\
    \ = 29;\n        if (checkdate($m, 3, $y) != false) $days_in_month[3] = 31;\n\
    \        if (checkdate($m, 5, $y) != false) $days_in_month[5] = 30;\n        if\
    \ (checkdate($m, 7, $y) != false) $days_in_month[7] = 31;\n        if (checkdate($m,\
    \ 8, $y) != false) $days_in_month[8] = 31;\n        if (checkdate($m, 10, $y)\
    \ != false) $days_in_month[10] = 30;\n        if (checkdate($m, 12, $y) != false)\
    \ $days_in_month[12] = 31;\n    }\n    if (count($checkdate) == 3) {\n       \
    \ if ($checkdate[0] < 1 || $checkdate[0] > 12) return false;\n        if ($checkdate[2]\
    \ < 1 || $checkdate[2] > 31) return false;\n    }\n\n    if (count($checkdate)\
    \ == 2 && ($checkdate[0] < 1 || $checkdate[0] > 12 || $checkdate[1] < 1 || $checkdate[1]\
    \ > $days_in_month[$checkdate[0]]) && $checkdate[0] > 1) return false;\n\n   \
    \ if (count($checkdate) == 3 && ($checkdate[0] < 1 || $checkdate[0] > 12 || $checkdate[1]\
    \ < 1 || $checkdate[1] > $days_in_month[$checkdate[0]] ||\n        $checkdate[2]\
    \ < 1 || $checkdate[2] > $days_in_month[$checkdate[0]]) && $checkdate[0] > 1)\
    \ return false;\n\n    if (count($checkdate) == 2 && $checkdate[1] < 1 || $checkdate[1]\
    \ > $days_in_month[$checkdate[0]] && $checkdate[1] > 1) return false;\n\n    return\
    \ true;\n}\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5sxsvg_d.php:55\n\
    Stack trace:\n#0 /tmp/tmp5sxsvg_d.php(73): test()\n#1 {main}\n  thrown in /tmp/tmp5sxsvg_d.php\
    \ on line 55\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  $d = DateTime::createFromFormat('d-m-Y',\
    \ $date);\n  $day = $d->format('j');\n  $month = $d->format('n');\n  $year = $d->format('Y');\n\
    \  $valid_date = ($day != '' && $day >= 1 && $day <= 31 && $month != '' && $month\
    \ >= 1 && $month <= 12 &&\n                  $year != '' && $year >= 1 && $year\
    \ <= $year);\n  return $valid_date;\n}\nfunction candidate(...$args) {\n    return\
    \ valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx_gvywp4.php:34\n\
    Stack trace:\n#0 /tmp/tmpx_gvywp4.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpx_gvywp4.php\
    \ on line 34\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $dateParts = explode('-',\
    \ $date);\n    // validate the date\n    $valid = false;\n    if (count($dateParts)\
    \ == 3) {\n        $month = intval($dateParts[0]);\n        $day = intval($dateParts[1]);\n\
    \        $year = intval($dateParts[2]);\n        if ($month < 1 || $month > 12)\
    \ {\n            $valid = false;\n        } else {\n            if ($day < 1 ||\
    \ $day > 29) {\n                $valid = false;\n            } else {\n      \
    \          $valid = true;\n            }\n        }\n        if ($valid) {\n \
    \           $valid = ($year < 1600);\n        }\n    }\n    return $valid;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nHi, I edited my question and added more details.\n\
    <|/ c |>\n<| c |>\nI added some examples. I hope it helps.\n<|/ c |>\n<| a tags=php,date\
    \ |>\nHere is an alternative solution that does not use any regex, just date and\
    \ strtotime. It also handles any format of date.\n<code>\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpnovnr4qb.php
    on line 42

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    // Write your code\
    \ here\n\n    $date_array = explode(\"-\", $date);\n\n    if(empty($date_array[0])\
    \ || empty($date_array[1]) || empty($date_array[2]))\n        return false;\n\n\
    \    $year_month = explode(\"-\", $date_array[0]);\n\n    if(count($year_month)\
    \ < 3 || count($year_month) > 3)\n        return false;\n\n    $month = $year_month[0];\n\
    \n    if($month < 1 || $month > 12)\n        return false;\n\n    $day = $year_month[1];\n\
    \n    if($day < 1 || $day > 30)\n        return false;\n\n    return true;\n\n\
    }\n\nfunction candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_nsqy1po.php:51\n\
    Stack trace:\n#0 /tmp/tmp_nsqy1po.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp_nsqy1po.php\
    \ on line 51\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    // Your code here\n\
    }\n</code>\nThe above function checks if the given date is in the format of mm-dd-yyyy\
    \ and returns a boolean value which indicates if the date is valid or not.\nThe\
    \ function uses regular expressions to validate the date.\n<|/ a tags=date,php,date\
    \ |>\n<| c |>\nThis won't work - it doesn't validate that the month is not less\
    \ than 1 or higher than 12.\n<|/ c |>\n<| c |>\nI have updated the code to include\
    \ this validation. This would not work with the first case you pointed out. Can\
    \ you please provide more info about the input and the output you are looking\
    \ for?\n<|/ c |>\n<| c |>\n\"The date string is not empty.\" - it's not clear\
    \ from the description\n<|/ c |>\n<| c |>\nThis doesn't validate if the month\
    \ is <= 12. I.e. February is valid but only in years > 1900 which is invalid\n\
    <|/ c |>\n<| c |>\nIt would still be valid in all cases if you were to add `&&\
    \ $days > 0` after `&& $months > 0`. The question is not clear about what case\
    \ you wanted to ignore.\n<|/ c |>\n<| a dscore=2 |>\nThis is another way to achieve\
    \ this using simple functions.\n<code>\n$date = \"19-10-2020\";\n$arr = explode(\"\
    -\", $date);\nif (count($arr) == 3) {\n    $date = $arr[0] . \"-\" . $arr[1] .\
    \ \"-\" . $arr[2];\n    if (checkdate($arr[1], $arr[2], $arr[0])) {\n        echo\
    \ \"Valid date\";\n    } else {\n        echo \"Not a valid date\";\n    }\n}\n\
    </code>\n<|/ a tags=date,php,date |>\n<| a tags=date,php,date |>\nI think this\
    \ can help.\n<code>\n<?php\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpxfbgznpc.php
    on line 22

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  if (!isset($date) ||\
    \ empty($date)) {\n    return false;\n  }\n  $date_parts = explode('-', $date);\n\
    \  $date = array(\n    'month' => $date_parts[1],\n    'day' => $date_parts[2],\n\
    \    'year' => $date_parts[0],\n  );\n  if (!in_array($date['month'], range(1,\
    \ 12, 1))) {\n    return false;\n  }\n  if (!in_array($date['day'], range(1, 31,\
    \ 3))) {\n    return false;\n  }\n  if (in_array($date['month'], array(4, 6, 9,\
    \ 11))) {\n    if (in_array($date['day'], array(28, 30, 29))) {\n      if (in_array($date['month'],\
    \ array(2, 12))) {\n        if (in_array($date['year'], range(1970, 2100))) {\n\
    \          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\
    function candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkv8tny6a.php:51\n\
    Stack trace:\n#0 /tmp/tmpkv8tny6a.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpkv8tny6a.php\
    \ on line 51\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if (strlen($date) >\
    \ 0) {\n        $date_array = explode('-', $date);\n        $month_array = array(0,1,2,3,4,5,6,7,8,9,10,11,12);\n\
    \        $day_array = array(1,2,31);\n        $year = intval($date_array[2]);\n\
    \        if ($date_array[1] < 1 || $date_array[1] > 12) {\n            return\
    \ false;\n        }\n        if ($date_array[1] >= 1 && $date_array[1] <= 12)\
    \ {\n            if ($date_array[1] > $month_array[$date_array[1] - 1]) {\n  \
    \              return false;\n            }\n            if ($date_array[1] >=\
    \ 1 && $date_array[1] <= 12) {\n                if ($date_array[1] > $day_array[$date_array[1]\
    \ - 1]) {\n                    return false;\n                }\n            \
    \    if ($date_array[1] >= 1 && $date_array[1] <= 12) {\n                    if\
    \ ($date_array[1] > 31 || $date_array[1] < 30 || $date_array[1] > 29) {\n    \
    \                    return false;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp64xmsaml.php:52\n\
    Stack trace:\n#0 /tmp/tmp64xmsaml.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp64xmsaml.php\
    \ on line 52\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if ($date == \"\")\
    \ return true;\n    $days = array(\"31\", \"30\", \"29\");\n    $months = array(1,\
    \ 3, 5, 7, 8, 10, 12);\n    $parts = explode(\"-\", $date);\n    if (count($parts)\
    \ != 3) return false;\n    for ($i = 0, $l = count($parts); $i < $l; $i++) {\n\
    \        if (!isset($days[$parts[$i][2]])) {\n            return false;\n    \
    \    }\n        if (!isset($months[$parts[$i][1]])) {\n            return false;\n\
    \        }\n        if (!in_array($parts[$i][0], $months)) return false;\n   \
    \ }\n    return true;\n}\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Uninitialized string offset 2 in /tmp/tmp4teuirq9.php on line\
    \ 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4teuirq9.php:41\n\
    Stack trace:\n#0 /tmp/tmp4teuirq9.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp4teuirq9.php\
    \ on line 41\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    // Your code goes here\n\
    }\n</code>\n<|/ a tags=php |>\n<| c |>\nThank you for your answer, but I think\
    \ your answer is not correct because you say the months should not be less than\
    \ 1 or higher than 12. But the months can be less than 1 or higher than 12. Example:\
    \ 01-05-2012\n<|/ c |>\n<| c |>\nYes I agree with you but if you follow the rules\
    \ which I mentioned it will work. My function is based on the rules I mentioned.\n\
    <|/ c |>\n<| c |>\nYour function will work but I think it is better to have 3\
    \ conditions instead of only one. 1 day is ok, but if I set it for 1 day and 1\
    \ month the answer will be wrong\n<|/ c |>\n<| a |>\nIn case you are using DateTime\
    \ objects you can simply use DateTime::createFromFormat\n<code>\nif (false ===\
    \ DateTime::createFromFormat('d-m-Y', $date)) {\n    throw new Exception('Invalid\
    \ date format');\n}\n</code>\nThis will return false on invalid date.\n<|/ a dscore=0\
    \ tags=php |>\n<| a tags=php dscore=0 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpdcp68kr7.php
    on line 22

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n\t// Your code here...\n\
    }\nfunction candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8tomvd84.php:27\n\
    Stack trace:\n#0 /tmp/tmp8tomvd84.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp8tomvd84.php\
    \ on line 27\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  // Write your code here\n\
    }\nfunction candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmqorvz9o.php:27\n\
    Stack trace:\n#0 /tmp/tmpmqorvz9o.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpmqorvz9o.php\
    \ on line 27\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $date = date_parse($date);\n\
    \    return (!empty($date[\"month\"]) &&\n            !empty($date[\"day\"]) &&\n\
    \            !empty($date[\"year\"]) &&\n            !($date[\"month\"] < 1 ||\
    \ $date[\"month\"] > 12) &&\n            !($date[\"day\"] < 1 || $date[\"day\"\
    ] > 31) &&\n            !($date[\"day\"] < 1 || $date[\"day\"] > 30) &&\n    \
    \        !($date[\"day\"] < 1 || $date[\"day\"] > 29) &&\n            !($date[\"\
    month\"] < 1 || $date[\"month\"] > 12));\n}\n</code>\n<|/ a tags=php,date,datetime\
    \ |>\n<| a |>\nI have used this code\n<code>\n<?php\n\n$date = new DateTime('2017-01-20');\n\
    $date->format('Y-m-d');\n\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpmeo9v_nm.php
    on line 30

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  // Check that the date\
    \ is not empty.\n  if (!$date) {\n    return false;\n  }\n  // Extract the day\
    \ and month from the date string.\n  list($day, $month, $year) = explode(\"-\"\
    , $date);\n  // Validate that the number of days in months is between 1 and 31.\n\
    \  if ( !is_integer($day) || $day < 1 || $day > 31 ) {\n    return false;\n  }\n\
    \  // Validate that the number of days in months is between 1 and 29.\n  if (\
    \ !is_integer($month) || $month < 1 || $month > 12 ) {\n    return false;\n  }\n\
    \  // Validate that the month is between 1 and 12.\n  if ( !is_integer($month)\
    \ || $month < 1 || $month > 12 ) {\n    return false;\n  }\n  // Validate that\
    \ the date is in the correct format.\n  if(strlen($date) < 4 || strlen($date)\
    \ > 8){\n    return false;\n  }\n  // Check that it is the correct date.\n  if\
    \ ( !checkdate($month, $day, $year) ) {\n    return false;\n  }\n  return true;\n\
    }\n</code>\n<|/ a tags=php,date |>\n<| c |>\nWhile this code snippet may solve\
    \ the question, [including an explanation](//meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers)\
    \ really helps to improve the quality of your post. Remember that you are answering\
    \ the question for readers in the future, and those people might not know the\
    \ reasons for your code suggestion. Please also try not to crowd your code with\
    \ explanatory comments, as this reduces the readability of both the code and the\
    \ explanations!\n<|/ c |>\n<| a dscore=5 |>\nAs of PHP 5.3 it's possible to do\
    \ this more simply and elegantly with DateTime::createFromFormat:\n<code>\nfunction\
    \ candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmprp1vcnox.php
    on line 48

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if (empty($date)) return\
    \ false;\n    $parts = explode(\"-\", $date);\n    if (count($parts) != 3) return\
    \ false;\n\n    $day = checkdate($parts[1], 1, $parts[0]);\n    if (!$day) return\
    \ false;\n\n    $month = $parts[0] - 1;\n    if ($month < 1) return false;\n\n\
    \    $year = $parts[1];\n\n    if ($month == 12) {\n        if ($year % 4 != 0)\
    \ return false;\n        if ($year % 100 == 0 && $year % 400 != 0) return false;\n\
    \    }\n    elseif ($month > 12) return false;\n\n    if (checkdate($month, $day,\
    \ abs($year))) return true;\n\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa8_nui30.php:51\n\
    Stack trace:\n#0 /tmp/tmpa8_nui30.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpa8_nui30.php\
    \ on line 51\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  // Your code here\n}\n\
    function candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8kru8cf7.php:27\n\
    Stack trace:\n#0 /tmp/tmp8kru8cf7.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp8kru8cf7.php\
    \ on line 27\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if (!$date) {\n   \
    \     return false;\n    }\n    if (empty($date)) {\n        return false;\n \
    \   }\n    if (!preg_match(\"/^\\d{4}-\\d{2}-\\d{2}$/\", $date)) {\n        return\
    \ false;\n    }\n    if (substr_count($date, \"-\") > 3) {\n        return false;\n\
    \    }\n    if (substr_count($date, \"-\") == 3) {\n        $days_in_month = array();\n\
    \        $month = 0;\n        foreach (str_split($date, \"-\") as $month_number)\
    \ {\n            if (!isset($days_in_month[$month])) {\n                $days_in_month[$month]\
    \ = 0;\n            }\n            $days_in_month[$month] += 1;\n            $month++;\n\
    \        }\n        $months = array(\n            \"0\" => 0,\n            \"\
    1\" => 1,\n            \"2\" => 3,\n            \"3\" => 5,\n            \"4\"\
    \ => 7,\n            \"5\" => 8,\n            \"6\" => 10,\n            \"7\"\
    \ => 11,\n            \"8\" => 12,\n            \"9\" => 3,\n            \"10\"\
    \ => 6,\n            \"11\" => 9,\n            \"12\" => 3\n        );\n     \
    \   $days_in_month = array();\n        foreach ($months as $month => $value) {\n\
    \            if (!isset($days_in_month[$month])) {\n                $days_in_month[$month]\
    \ = 0;\n            }\n            $days_in_month[$month] += 1;\n        }\n \
    \       $total_days_in_month = 0;\n        foreach ($days_in_month as $month =>\
    \ $value) {\n            $total_days_in_month += $value;\n        }\n        if\
    \ ($total_days_in_month < 1 || $total_days_in_month > 31) {\n            return\
    \ false;\n        }\n    }\n    if (substr_count($date, \"-\") == 2) {\n     \
    \   $days_in_month = array();\n        $month = 0;\n        foreach (str_split($date,\
    \ \"-\") as $month_number) {\n            if (!isset($days_in_month[$month]))\
    \ {\n                $days_in_month[$month] = 0;\n            }\n            $days_in_month[$month]\
    \ += 1;\n            $month++;\n        }\n        $months = array(\n        \
    \    \"0\" => 0,\n            \"1\" => 1,\n            \"2\" => 3,\n         \
    \   \"3\" => 5,\n            \"4\" => 7,\n            \"5\" => 8,\n          \
    \  \"6\" => 10,\n            \"7\" => 11,\n            \"8\" => 12,\n        \
    \    \"9\" => 3,\n            \"10\" => 6,\n            \"11\" => 9,\n       \
    \     \"12\" => 3\n        );\n        $days_in_month = array();\n        foreach\
    \ ($months as $month => $value) {\n            if (!isset($days_in_month[$month]))\
    \ {\n                $days_in_month[$month] = 0;\n            }\n            $days_in_\n\
    function candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpy19jszca.php
    on line 103

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $date = str_replace(\"\
    -\", \"\", $date);\n    $date = explode(\"-\", $date);\n    return ($date != \"\
    \" && isset($date[1]) && isset($date[2]) && isset($date[0]) && checkdate($date[1],\
    \ $date[2], $date[0]) == 0);\n}\n\nfunction candidate(...$args) {\n    return\
    \ valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr15o_2qv.php:30\n\
    Stack trace:\n#0 /tmp/tmpr15o_2qv.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpr15o_2qv.php\
    \ on line 30\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  $date = trim($date);\n\
    \  // If the date string is empty, it is invalid.\n  if ($date == \"\") {\n  \
    \  return false;\n  }\n  // Make sure that the date string is not blank.\n  if\
    \ (strlen($date) == 0) {\n    return false;\n  }\n  // Make sure that the date\
    \ string is in the correct format.\n  $date = explode(\"-\", $date);\n  // Make\
    \ sure that there are 3 parts in the date string. This is the most important\n\
    \  // thing to validate so anything else is probably a bug.\n  if (count($date)\
    \ != 3) {\n    return false;\n  }\n  // Make sure that the month number is not\
    \ less than 1 or greater than 12.\n  if ($date[1] < 1 || $date[1] > 12) {\n  \
    \  return false;\n  }\n  // Make sure that the day number is not less than 1 or\
    \ greater than 31 or 29 for the month 2.\n  if ($date[2] < 1 || $date[2] > 31\
    \ || $date[2] == 29) {\n    return false;\n  }\n  // Make sure that the month\
    \ number is not less than 1 or greater than 12.\n  if ($date[0] < 1 || $date[0]\
    \ > 12) {\n    return false;\n  }\n  // Make sure that the date is in the correct\
    \ format.\n  $valid_date = checkdate($date[1], $date[2], $date[0]);\n  // If the\
    \ date is invalid, return false.\n  return !$valid_date;\n}\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7lbblkb7.php:58\n\
    Stack trace:\n#0 /tmp/tmp7lbblkb7.php(76): test()\n#1 {main}\n  thrown in /tmp/tmp7lbblkb7.php\
    \ on line 58\n"
  timestamp: 1660028890
- exit_code: 0
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  // 1. the date string\
    \ is not empty.\n  if (empty($date)) {\n    return false;\n  }\n\n  // 2. the\
    \ number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
    \ And the number of days is not less than 1 or higher than 30 days for months\
    \ 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the\
    \ month 2.\n  // split month and day\n  $date = explode('-', $date);\n  $month\
    \ = $date[0];\n  $day = $date[1];\n\n  // check month\n  $monthCheck = array(1,\
    \ 3, 5, 7, 8, 10, 12);\n  if (in_array($month, array_values($monthCheck))) {\n\
    \    // check day\n    $dayCheck = array(1, 31, 28, 31, 30, 31, 30, 31, 31, 30,\
    \ 31, 30, 31);\n    if ($day > $dayCheck[$month - 1]) {\n      return false;\n\
    \    }\n  }\n  // check year\n  if (checkdate($month, $day, $date[2]) == false)\
    \ {\n    return false;\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 1 in /tmp/tmp_f4r9cuk.php on line 29


    Warning: Undefined array key 2 in /tmp/tmp_f4r9cuk.php on line 41


    Deprecated: checkdate(): Passing null to parameter #2 ($day) of type int is deprecated
    in /tmp/tmp_f4r9cuk.php on line 41


    Deprecated: checkdate(): Passing null to parameter #3 ($year) of type int is deprecated
    in /tmp/tmp_f4r9cuk.php on line 41


    Warning: Undefined array key 1 in /tmp/tmp_f4r9cuk.php on line 29


    Warning: Undefined array key 2 in /tmp/tmp_f4r9cuk.php on line 41


    Deprecated: checkdate(): Passing null to parameter #2 ($day) of type int is deprecated
    in /tmp/tmp_f4r9cuk.php on line 41


    Deprecated: checkdate(): Passing null to parameter #3 ($year) of type int is deprecated
    in /tmp/tmp_f4r9cuk.php on line 41


    Warning: Undefined array key 2 in /tmp/tmp_f4r9cuk.php on line 41


    Deprecated: checkdate(): Passing null to parameter #3 ($year) of type int is deprecated
    in /tmp/tmp_f4r9cuk.php on line 41


    Warning: Undefined array key 2 in /tmp/tmp_f4r9cuk.php on line 41


    Deprecated: checkdate(): Passing null to parameter #3 ($year) of type int is deprecated
    in /tmp/tmp_f4r9cuk.php on line 41

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  $today = date(\"m-d-Y\"\
    );\n  $array = explode('-', $date);\n  if (empty($array[0])) {\n    return false;\n\
    \  }\n\n  if ($array[2] < $today) {\n    return false;\n  }\n\n  return true;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nPlease add some explanation to your answer such\
    \ that others can learn from it\n<|/ c |>\n<| c |>\nThe best way... to me it is\
    \ the most simple and elegant one. Thank you.\n<|/ c |>\n<| c |>\nThe best way\
    \ is to avoid doing things the hard way and using a library that handles the validation\n\
    <|/ c |>\n<| c |>\nI used the above script and had to change `date()` to `date(\"\
    Y-m-d\")` for it to work.  Otherwise it worked just fine.\n<|/ c |>\n<| c |>\n\
    Thanks for letting us know. Have modified the answer. Sorry for the confusion.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp7pzl3tsl.php
    on line 32

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $data = explode(\"\
    -\", $date);\n    if (count($data) != 3) return false;\n    if (!empty($data)\
    \ && !is_numeric($data[0])) return false;\n    if (!is_numeric($data[1]) || $data[1]\
    \ < 1 || $data[1] > 31) return false;\n    if (!is_numeric($data[2])) return false;\
    \ // month is only 1-12\n    if (!is_numeric($data[1]) || $data[1] < 1 || $data[1]\
    \ > 12) return false;\n    if (!is_numeric($data[2]) || $data[2] < 1 || $data[2]\
    \ > 31) return false;\n    return true;\n}\nfunction candidate(...$args) {\n \
    \   return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps_tvyzw8.php:34\n\
    Stack trace:\n#0 /tmp/tmps_tvyzw8.php(52): test()\n#1 {main}\n  thrown in /tmp/tmps_tvyzw8.php\
    \ on line 34\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  // Write your validation\
    \ code here. Make sure the date string is non-empty and that it does not have\
    \ a zero date. \n  // Also validate that all the other conditions have been met.\n\
    \  // return true if the date is valid else return false.\n}\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp04gpqi1h.php:29\n\
    Stack trace:\n#0 /tmp/tmp04gpqi1h.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp04gpqi1h.php\
    \ on line 29\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $pattern = '#^(((0?[1-9]|1[012])\\\
    -(0?[1-9]|1\\d|2\\d|3[01])\\-\\d{4})|((0?[13-9]|1[012])\\-(0?[1-9]|1\\d|2\\d|3[01])\\\
    -(0?[1-9]|[12]\\d|3[01]))|((0?2)\\-(0?[1-9]|1\\d|2\\d|3[01])\\-(0?[1-9]|[12]\\\
    d|3[01]))|(0?2)\\-(0?[1-9]|1\\d|2\\d|3[01])\\-\\d{4})$#';\n    return preg_match($pattern,\
    \ $date);\n}\n\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9jx4zyot.php:29\n\
    Stack trace:\n#0 /tmp/tmp9jx4zyot.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp9jx4zyot.php\
    \ on line 29\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $parts = explode(\"\
    -\", $date);\n\n    // check if no empty field\n    if (empty($parts[1])) {\n\
    \        return false;\n    }\n\n    // validate month\n    if ($parts[1] < 1\
    \ || $parts[1] > 12) {\n        return false;\n    }\n\n    // validate day\n\
    \    if ($parts[2] < 1 || $parts[2] > 31) {\n        return false;\n    }\n\n\
    \    // validate year\n    if ($parts[0] < 1 || $parts[0] > 12) {\n        return\
    \ false;\n    }\n\n    // validate date format\n    if ($parts[0] != $parts[0])\
    \ {\n        return false;\n    }\n\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsryujdcz.php:55\n\
    Stack trace:\n#0 /tmp/tmpsryujdcz.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpsryujdcz.php\
    \ on line 55\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $format = \"%m-%d-%Y\"\
    ;\n    if ($date != '' && $date != NULL && $date != FALSE) {\n        $date =\
    \ strtotime($date);\n        $month = (date('n', $date) < 10) ? '0' . $month :\
    \ date('n', $date);\n        $day = (date('j', $date) < 10) ? '0' . $day : date('j',\
    \ $date);\n        $year = (date('Y', $date) < 10) ? '0' . $year : date('Y', $date);\n\
    \        if (is_numeric($day) && is_numeric($month) && is_numeric($year)) {\n\
    \            if (($day > 1 && $day <= 31) && ($month > 1 && $month <= 12) && ($year\
    \ >= date('Y') - 30 || $year == date('Y') - 1)) {\n                if ($day >\
    \ 29) {\n                    return false;\n                } else {\n       \
    \             return true;\n                }\n            } else {\n        \
    \        return false;\n            }\n        } else {\n            return false;\n\
    \        }\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $day in /tmp/tmp63zjmvhb.php on line 24\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp63zjmvhb.php:49\nStack\
    \ trace:\n#0 /tmp/tmp63zjmvhb.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp63zjmvhb.php\
    \ on line 49\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    // Write your logic\
    \ here\n    $valid_date = false;\n\n    return $valid_date;\n}\n</code>\nThis\
    \ solution will work for all dates, but will not work for the dates with an invalid\
    \ month (i.e. 03-11-2000 and 03-11/2000). I think you should write a function\
    \ for date validations which will check if the date string is an actual date (mm-dd-yyyy)\
    \ or not and if the date is in the correct format (mm-dd-yyyy), then you can check\
    \ your other date logics.\n<|/ a tags=date,php,validation |>\n<| a tags=date,php,validation\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp0l9xadf0.php
    on line 25

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $date_array = explode('-',\
    \ $date);\n    $date_parts = explode('/', $date_array[0]);\n    $month = $date_parts[0];\n\
    \    $day = $date_parts[1];\n    $year = $date_parts[2];\n    if (empty($date))\
    \ {\n        return false;\n    }\n    if (count($date_parts) != 3) {\n      \
    \  return false;\n    }\n    if (count($date_array) != 3) {\n        return false;\n\
    \    }\n    if (count($date_parts) < 3) {\n        return false;\n    }\n    if\
    \ (count($date_array) < 3) {\n        return false;\n    }\n    if (count($date_parts)\
    \ > 3) {\n        return false;\n    }\n    if (count($date_array) > 3) {\n  \
    \      return false;\n    }\n    if (!is_numeric($year)) {\n        return false;\n\
    \    }\n    if (!is_numeric($month)) {\n        return false;\n    }\n    if (!is_numeric($day))\
    \ {\n        return false;\n    }\n    if ($month > 12) {\n        return false;\n\
    \    }\n    if ($day > 30) {\n        return false;\n    }\n    if ($month < 1)\
    \ {\n        return false;\n    }\n    if ($month > 12) {\n        return false;\n\
    \    }\n    if ($day < 1) {\n        return false;\n    }\n    if ($day > 29)\
    \ {\n        return false;\n    }\n    if ($month == 1) {\n        $days_in_month\
    \ = 31;\n    }\n    if ($month == 2) {\n        $days_in_month = 30;\n    }\n\
    \    if ($month == 3) {\n        $days_in_month = 31;\n    }\n    if ($month ==\
    \ 4) {\n        $days_in_month = 30;\n    }\n    if ($month == 5) {\n        $days_in_month\
    \ = 31;\n    }\n    if ($month == 6) {\n        $days_in_month = 30;\n    }\n\
    \    if ($month == 7) {\n        $days_in_month = 31;\n    }\n    if ($month ==\
    \ 8) {\n        $days_in_month = 30;\n    }\n    if ($month == 9) {\n        $days_in_month\
    \ = 31;\n    }\n    if ($month == 10) {\n        $days_in_month = 30;\n    }\n\
    \    if ($month == 11) {\n        $days_in_month = 31;\n    }\n    if ($month\
    \ == 12) {\n        $days_in_month = 30;\n    }\n    if ($month > 12) {\n    \
    \    return false;\n    }\n    if ($day > $days_in_month) {\n        return false;\n\
    \    }\n    $months = array(\n        '01' => 'January', '02' => 'February', '03'\
    \ => 'March', '04' => 'April', '05' => 'May', '06' => 'June',\n        '07' =>\
    \ 'July', '08' => 'August', '09' => 'September', '10' => 'October', '11' => 'November',\n\
    \        '12' => 'December');\n    $month_num = date('n', strtotime($months));\n\
    \    $days_in_month_num = date('t\nfunction candidate(...$args) {\n    return\
    \ valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "t" in /tmp/tmpqfp3inec.php
    on line 120

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    // 1. Check if the\
    \ input date is not null\n    if(!$date || $date === '' || $date === '0000-00-00')\
    \ {\n        return false;\n    }\n\n    // 2. Check if the number of days is\
    \ less than 1 or greater than 31\n    // for the months 1,3,5,7,8,10,12\n    if($days_count\
    \ = substr_count($date, \"-\") === 2) {\n        $day_arr = explode(\"-\", $date);\n\
    \        $days = intval($day_arr[0]);\n        $months = intval($day_arr[1]);\n\
    \        if($days < 1 || $days > 31) {\n            return false;\n        }\n\
    \        if($months < 1 || $months > 12) {\n            return false;\n      \
    \  }\n    } else if($days_count = substr_count($date, \"-\") === 3) {\n      \
    \  $months = intval($date);\n        if($months < 1 || $months > 12) {\n     \
    \       return false;\n        }\n    } else if($days_count = substr_count($date,\
    \ \"-\") === 4) {\n        if($date > '04-31-2020' || $date < '01-31-2020') {\n\
    \            return false;\n        }\n    } else if($days_count = substr_count($date,\
    \ \"-\") === 6) {\n        if($date > '06-29-2020' || $date < '04-30-2020') {\n\
    \            return false;\n        }\n    } else if($days_count = substr_count($date,\
    \ \"-\") === 9) {\n        if($date > '09-29-2020' || $date < '06-29-2020') {\n\
    \            return false;\n        }\n    } else if($days_count = substr_count($date,\
    \ \"-\") === 11) {\n        if($date > '11-29-2020' || $date < '09-29-2020') {\n\
    \            return false;\n        }\n    } else if($days_count = substr_count($date,\
    \ \"-\") === 12) {\n        if($date > '12-31-2020' || $date < '11-30-2020') {\n\
    \            return false;\n        }\n    }\n\n    // 3. The months should not\
    \ be less than 1 or higher than 12\n    if($months_count = substr_count($date,\
    \ \"-\") === 2) {\n        $month_arr = explode(\"-\", $date);\n        $months\
    \ = intval($month_arr[1]);\n        if($months < 1 || $months > 12) {\n      \
    \      return false;\n        }\n    } else if($months_count = substr_count($date,\
    \ \"-\") === 3) {\n        $months = intval($date);\n        if($months < 1 ||\
    \ $months > 12) {\n            return false;\n        }\n    } else if($\nfunction\
    \ candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpydx6qhk2.php on line 77

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  return filter_var($date,\
    \ FILTER_VALIDATE_DATE) !== false;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for\
    \ the answer, but this doesn't really help my case. Since I am already validating\
    \ the date input with PHP, I need a more elegant solution. Thanks though.\n<|/\
    \ c |>\n<| c |>\nThe only \"elegant\" solution would be to validate the input\
    \ against a regex that matches your date format.  That would allow you to write\
    \ a regex that would validate every date format that your application supports.\n\
    <|/ c |>\n<| c |>\nA little bit more elegant than the PHP validation?\n<|/ c |>\n\
    <| c |>\nNot quite what I was looking for, but its a good solution, thanks! I\
    \ ended up doing it myself using PHPs date function and comparing the result with\
    \ the desired date.\n<|/ c |>\n<| a dscore=0 |>\nYou can try something like this.\
    \ This code will work for all the cases, except year validation. \n<code>\nif($year<0||$year>99||$year!=$date){\n\
    \     echo \"valid date\"; \n}else{\n     echo \"Invalid date\"; \n}\n</code>\n\
    <|/ a tags=date,php |>\n<| c |>\nThat doesn't really help me since the year is\
    \ already validated in my PHP code. The problem is that the PHP code is not written\
    \ by me and I can't really change it. I need to somehow be able to check if the\
    \ date string I am receiving has a valid format before it can go into my PHP code.\n\
    <|/ c |>\n<| c |>\nYou can convert your date() into strtotime() and check the\
    \ result of that like \nif(strtotime($date)!=false){\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpixffhpst.php
    on line 22

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    // 1. Check if the\
    \ date is not empty.\n    if(!empty($date)) {\n        // 2. Split the date string\
    \ into month, day and year\n        $split_date = explode('-', $date);\n     \
    \   $date = $split_date[0];\n        $day = $split_date[1];\n        $month =\
    \ $split_date[2];\n        \n        // 3. Check if day is not less than 1 or\
    \ higher than 31\n        // and check if month is not less than 1 or higher than\
    \ 12\n        if($day < 1 || $day > 31 || $month < 1 || $month > 12) {\n     \
    \       return false;\n        }\n        \n        // 4. Check if the date is\
    \ in correct format\n        if(!preg_match(\"/^(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])-\\\
    d{4}$/\", $date)) {\n            return false;\n        }\n    }\n\n    // Return\
    \ true\n    return true;\n}\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8pzityla.php:48\n\
    Stack trace:\n#0 /tmp/tmp8pzityla.php(66): test()\n#1 {main}\n  thrown in /tmp/tmp8pzityla.php\
    \ on line 48\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $valid = false;\n\n\
    \    if (!empty($date)) {\n        $arr_date = date_parse($date);\n\n        if\
    \ (!empty($arr_date)) {\n            $valid = true;\n            $day_of_month\
    \ = date(\"j\", $arr_date['time']);\n            $month_of_year = date(\"n\",\
    \ $arr_date['time']);\n            $year = date(\"Y\", $arr_date['time']);\n\n\
    \            if (($day_of_month < 1) || ($day_of_month > 31)) {\n            \
    \    $valid = false;\n            }\n            if (($month_of_year < 1) || ($month_of_year\
    \ > 12)) {\n                $valid = false;\n            }\n            if (($year\
    \ < 1) || ($year > date('Y'))) {\n                $valid = false;\n          \
    \  }\n            if ($day_of_month == 3 || $day_of_month == 6 || $day_of_month\
    \ == 9 || $day_of_month == 11) {\n                if ($month_of_year == 2 && ($year\
    \ % 400 == 0 || ($year % 4 == 0 && $year % 100 != 0))) {\n                   \
    \ $valid = false;\n                }\n                if ($month_of_year == 0\
    \ && ($year % 100 == 0 || ($year % 4 == 0 && $year % 100 != 0))) {\n         \
    \           $valid = false;\n                }\n            }\n        }\n   \
    \ }\n\n    return $valid;\n}\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"time\" in /tmp/tmplqxe4ibx.php on line\
    \ 27\n\nWarning: Undefined array key \"time\" in /tmp/tmplqxe4ibx.php on line\
    \ 28\n\nWarning: Undefined array key \"time\" in /tmp/tmplqxe4ibx.php on line\
    \ 29\n\nWarning: Undefined array key \"time\" in /tmp/tmplqxe4ibx.php on line\
    \ 27\n\nWarning: Undefined array key \"time\" in /tmp/tmplqxe4ibx.php on line\
    \ 28\n\nWarning: Undefined array key \"time\" in /tmp/tmplqxe4ibx.php on line\
    \ 29\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplqxe4ibx.php:59\n\
    Stack trace:\n#0 /tmp/tmplqxe4ibx.php(76): test()\n#1 {main}\n  thrown in /tmp/tmplqxe4ibx.php\
    \ on line 59\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n\tif ($date === null ||\
    \ $date === '' || is_null($date)) {\n\t\treturn false;\n\t}\n\t$datearray = explode(\"\
    -\", $date);\n\tif (count($datearray) !== 3) {\n\t\treturn false;\n\t}\n\t$month\
    \ = intval($datearray[1]);\n\t$day = intval($datearray[0]);\n\t$year = intval($datearray[2]);\n\
    \t$months = array(\n\t\t1 => 31,\n\t\t3 => 31,\n\t\t5 => 30,\n\t\t7 => 31,\n\t\
    \t8 => 31,\n\t\t10 => 30,\n\t\t12 => 31,\n\t);\n\t$days = array(\n\t\t1 => 30,\n\
    \t\t2 => 29,\n\t\t3 => 31,\n\t);\n\tforeach ($months as $month => $c) {\n\t\t\
    if ($month > $month) {\n\t\t\tbreak;\n\t\t}\n\t\tif ($day > $c) {\n\t\t\tbreak;\n\
    \t\t}\n\t\tif ($month > 12) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach ($days as $day\
    \ => $d) {\n\t\tif ($day > $d) {\n\t\t\tbreak;\n\t\t}\n\t\tif ($day < 1) {\n\t\
    \t\tbreak;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction candidate(...$args) {\n\
    \    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8e5nlhfr.php:72\n\
    Stack trace:\n#0 /tmp/tmp8e5nlhfr.php(89): test()\n#1 {main}\n  thrown in /tmp/tmp8e5nlhfr.php\
    \ on line 72\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $date = trim($date);\n\
    \    // The date string should not be empty.\n    if (empty($date)) {\n      \
    \  return false;\n    }\n\n    // Number of days should not be less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days should\
    \ not be less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days should not be less than 1 or higher than 29 for the month 2.\n    $day\
    \ = explode(\"-\", $date);\n    $month = substr($day[1], 0, 2);\n    $year = substr($day[1],\
    \ 2, 4);\n\n    if ($month == 1 || $month == 3 || $month == 5 || $month == 7 ||\
    \ $month == 8 || $month == 10 || $month == 12) {\n        if ($day[0] >= 1 &&\
    \ $day[0] <= 31) {\n            return true;\n        }\n    }\n    elseif ($month\
    \ == 4 || $month == 6 || $month == 9 || $month == 11) {\n        if ($day[0] >=\
    \ 1 && $day[0] <= 30) {\n            return true;\n        }\n    }\n    elseif\
    \ ($month == 2) {\n        if ($day[0] >= 1 && $day[0] <= 29) {\n            return\
    \ true;\n        }\n    }\n\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzkji0ug7.php:56\n\
    Stack trace:\n#0 /tmp/tmpzkji0ug7.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpzkji0ug7.php\
    \ on line 56\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $date_array = explode(\"\
    -\", $date);\n    if(count($date_array) == 3){\n        $year_val = intval($date_array[0]);\n\
    \        if($year_val < 1 || $year_val > 9999){\n            return false;\n \
    \       }\n        $month_val = intval($date_array[1]);\n        if($month_val\
    \ < 1 || $month_val > 12){\n            return false;\n        }\n        $day_val\
    \ = intval($date_array[2]);\n        if($day_val < 1 || $day_val > 31){\n    \
    \        return false;\n        }\n        $month_val = intval($date_array[1]);\n\
    \        if($month_val < 1 || $month_val > 12){\n            return false;\n \
    \       }\n        $day_val = intval($date_array[2]);\n        if($day_val < 1\
    \ || $day_val > 30){\n            return false;\n        }\n    }else{\n     \
    \   return false;\n    }\n    return true;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 tags=php |>\n<code>\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpz6_ww1ok.php
    on line 47

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $valid = false;\n \
    \   $month = $day = $year = \"\";\n    $m = array(1, 3, 5, 7, 8, 10, 12);\n  \
    \  $d = array(1, 30, 29, 31);\n    $y = array(\"12\", \"01\", \"02\", \"03\",\
    \ \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"04\"\
    , \"06\", \"09\", \"11\", \"12\");\n    if (!empty($date)) {\n        $month =\
    \ $date['month'];\n        $day = $date['day'];\n        $year = $date['year'];\n\
    \    }\n    if (count($date) == 1) {\n        if (count($date[0]) == 1) {\n  \
    \          $month = $date[0]['month'];\n            $day = $date[0]['day'];\n\
    \            $year = $date[0]['year'];\n        }\n    }\n    if (($month && $day\
    \ && $year)) {\n        $valid = true;\n        if (in_array($month, range(1,\
    \ 12))) {\n            $valid = false;\n        }\n        if (in_array($day,\
    \ range(1, $d[$month - 1]))) {\n            $valid = false;\n        }\n     \
    \   if (in_array($year, range($y[$month - 1], strtotime(\"{$y[$month - 1]}-{$y[$month\
    \ - 2]}\")))) {\n            $valid = false;\n        }\n    }\n    return $valid;\n\
    }\nfunction candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Cannot access offset of type string\
    \ on string in /tmp/tmpmjl18qyh.php:26\nStack trace:\n#0 /tmp/tmpmjl18qyh.php(52):\
    \ valid_date('03-11-2000')\n#1 /tmp/tmpmjl18qyh.php(56): candidate('03-11-2000')\n\
    #2 /tmp/tmpmjl18qyh.php(74): test()\n#3 {main}\n  thrown in /tmp/tmpmjl18qyh.php\
    \ on line 26\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    // Your code goes here\n\
    }\nfunction candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_jnh_4p.php:27\n\
    Stack trace:\n#0 /tmp/tmp5_jnh_4p.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp5_jnh_4p.php\
    \ on line 27\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $day = substr($date,\
    \ 0, 2);\n    $month = substr($date, 2, 2);\n    $year = substr($date, 4, 4);\n\
    \n    // 1. Validate if the date is not empty\n    if ($day == \"\" || $month\
    \ == \"\" || $year == \"\") {\n        return false;\n    }\n\n    // 2. Validate\
    \ if the number of days is within the correct range\n    if ($day <= 0 || $day\
    \ > 31) {\n        return false;\n    }\n\n    // 3. Validate if the months are\
    \ within the correct range\n    if ($month < 1 || $month > 12) {\n        return\
    \ false;\n    }\n\n    // 4. Validate the format\n    if (checkdate($month, $day,\
    \ $year)) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8b5ujhxk.php:52\n\
    Stack trace:\n#0 /tmp/tmp8b5ujhxk.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp8b5ujhxk.php\
    \ on line 52\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $date = strtotime($date);\n\
    \    if (empty($date)) {\n        return false;\n    }\n    $date = strtotime($date);\n\
    \    $year = (date('Y', $date) == date('Y')) ? date('Y', $date) : date(\"Y\")\
    \ + 1900;\n    $month = (date('m', $date) == date('m')) ? date('m', $date) : date('m')\
    \ + 1;\n    $day = (date('d', $date) == date('d')) ? date('d', $date) : date('d')\
    \ - 1;\n    return (($day >= 1 && $day <= 31) && ($month >= 1 && $month <= 12)\
    \ && ($year >= 1900));\n}\n\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwuo0j92.php:37\n\
    Stack trace:\n#0 /tmp/tmpgwuo0j92.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpgwuo0j92.php\
    \ on line 37\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if (empty($date)) {\n\
    \        return false;\n    }\n    $pattern = \"/^(((0[1-9]|1[0-9]|2[0-8])-(0[1-9]|1[0-2]))-((19|20|21)([0-9]{2})))$/\"\
    ;\n    $result = preg_match($pattern, $date);\n    if (!$result) {\n        return\
    \ false;\n    }\n    $parts = explode(\"-\", $date);\n    if ($parts[1] < 1 ||\
    \ $parts[1] > 31) {\n        return false;\n    }\n    if ($parts[2] < 1 || $parts[2]\
    \ > 30) {\n        return false;\n    }\n    if ($parts[2] > 29) {\n        return\
    \ false;\n    }\n    $month = $parts[1] % 100;\n    if ($month < 1 || $month >\
    \ 12) {\n        return false;\n    }\n    $day = $parts[2];\n    if ($day < 1\
    \ || $day > 31) {\n        return false;\n    }\n    return true;\n}\n\n$valid_dates\
    \ = array(\"29-06-2012\", \"15-01-2012\", \"04-0-2040\", \"06-04-2020\", \"06/04/2020\"\
    , \"08-31-2012\", \"01-31-1920\");\nforeach ($valid_dates as $date) {\n    echo\
    \ valid_date($date) . \"<br>\";\n}\n</code>\n<|/ a |>\n<| a dscore=1 |>\nIf you\
    \ only need to check the valid dates, you can use the PHP function checkdate\n\
    <code>\n$date = date_create(\"2000-01-01\");\n$checkdates = array(\n    1 => array(\"\
    2007-12-31\", \"2010-12-31\", \"2011-12-31\", \"2012-12-31\", \"2013-12-31\",\
    \ \"2014-12-31\", \"2015-12-31\", \"2016-12-31\"),\n    2 => array(\"2007-12-30\"\
    , \"2008-12-30\", \"2009-12-30\", \"2010-12-30\", \"2011-12-30\", \"2012-12-30\"\
    , \"2013-12-30\", \"2014-12-30\", \"2015-12-30\", \"2016-12-30\"),\n    3 => array(\"\
    2007-12-31\", \"2008-12-31\", \"2009-12-31\", \"2010-12-31\", \"2011-12-31\",\
    \ \"2012-12-31\", \"2013-12-31\", \"2014-12-31\", \"2015-12-31\", \"2016-12-31\"\
    ),\n    4 => array(\"2007-12-31\", \"2008-12-31\", \"2009-12-31\", \"2010-12-31\"\
    , \"2011-12-31\", \"2012-12-31\", \"2013-12-31\", \"2014-12-31\", \"2015-12-31\"\
    , \"2016-12-31\"),\n    5 => array(\"2007-12-31\", \"2008-12-31\", \"2009-12-31\"\
    , \"2010-12-31\", \"2011-12-31\", \"2012-12-31\", \"2013-12-31\", \"2014-12-31\"\
    , \"2015-12-31\", \"2016-12-31\"),\n    6 => array(\"2007-12-31\", \"\nfunction\
    \ candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpzqkfkn56.php
    on line 53

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    date_default_timezone_set('UTC');\n\
    \    $date_string = strtotime($date);\n    $days_in_month = get_day_in_month($date_string);\n\
    \    $days_in_months[2] = 29;\n    $days_in_months[1] = 31;\n    $days_in_months[0]\
    \ = 31;\n    $days_in_months[4] = 30;\n    $days_in_months[6] = 29;\n    if (empty($date))\
    \ {\n        return false;\n    }\n    if ($days_in_month < 1 || $days_in_month\
    \ > 31) {\n        return false;\n    }\n    if ($days_in_month < 31) {\n    \
    \    $days_in_months[$month = $date_string['month'] - 1 + 12];\n        if (($month\
    \ < 1 || $month > 12) && ($month < 0 || $month > 11)) {\n            return false;\n\
    \        }\n    }\n    return $date_string && $date_string['year'] <= date('Y');\n\
    }\n\nfunction candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_day_in_month()\
    \ in /tmp/tmprtiz4vqn.php:22\nStack trace:\n#0 /tmp/tmprtiz4vqn.php(44): valid_date('03-11-2000')\n\
    #1 /tmp/tmprtiz4vqn.php(48): candidate('03-11-2000')\n#2 /tmp/tmprtiz4vqn.php(66):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmprtiz4vqn.php on line 22\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if (!empty($date))\
    \ {\n        list($mm, $dd, $yyyy) = explode('-', $date);\n        if ($mm ==\
    \ '0' && $dd == 0 && $yyyy == '0') return false;\n        $d = new \\DateTime($date);\n\
    \        $md = $d->format('m');\n        $dd = $d->format('d');\n        $y =\
    \ $d->format('Y');\n        $mm = $d->format('m');\n        if ((($m != $md) &&\
    \ ($m != $mm)) && (($y != $yyyy) && ($y != $y))) {\n            return false;\n\
    \        }\n        if ($md < 1 || $md > 12) return false;\n        if ($dd <\
    \ 1 || $dd > 31) return false;\n        if ($mm < 1 || $mm > 12) return false;\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $m in /tmp/tmp5nxd7km4.php on line 28\n\n\
    Warning: Undefined variable $m in /tmp/tmp5nxd7km4.php on line 28\n\nWarning:\
    \ Undefined variable $m in /tmp/tmp5nxd7km4.php on line 28\n\nWarning: Undefined\
    \ variable $m in /tmp/tmp5nxd7km4.php on line 28\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp5nxd7km4.php:45\nStack trace:\n#0 /tmp/tmp5nxd7km4.php(62):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5nxd7km4.php on line 45\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  if(empty($date)) return\
    \ false;\n  if(strlen($date) < 2) return false;\n  if($date == '01-' || $date\
    \ == '01-01-' || $date == '01-00-' || $date == '01-00-01' || $date == '01-00-00'\
    \ || $date == '01-00-00-' || $date == '01-00-00-01') return false;\n  if($date\
    \ == '31-' || $date == '31-12-' || $date == '31-12-30' || $date == '31-12-31'\
    \ || $date == '31-12-31-' || $date == '31-12-31-01' || $date == '31-12-31-00'\
    \ || $date == '31-12-31-00-' || $date == '31-12-31-00-01') return false;\n  if($date\
    \ == '30-' || $date == '30-09-' || $date == '30-09-29' || $date == '30-09-30'\
    \ || $date == '30-09-31' || $date == '30-09-31-' || $date == '30-09-31-01' ||\
    \ $date == '30-09-31-00' || $date == '30-09-31-00-' || $date == '30-09-31-00-01')\
    \ return false;\n  if($date == '29-' || $date == '29-06-' || $date == '29-06-29'\
    \ || $date == '29-06-30' || $date == '29-06-31' || $date == '29-06-31-' || $date\
    \ == '29-06-31-01' || $date == '29-06-31-00' || $date == '29-06-31-00-' || $date\
    \ == '29-06-31-00-01') return false;\n  if($date == '28-' || $date == '28-05-'\
    \ || $date == '28-05-28' || $date == '28-05-29' || $date == '28-05-30' || $date\
    \ == '28-05-31' || $date == '28-05-31-' || $date == '28-05-31-01' || $date ==\
    \ '28-05-31-00' || $date == '28-05-31-00-' || $date == '28-05-31-00-01') return\
    \ false;\n  if($date == '27-' || $date == '27-03-' || $date == '27-03-27' || $date\
    \ == '27-03-28' || $date == '27-03-29' || $date == '27-03-30' || $date == '27-03-31'\
    \ || $date == '27-03-31-' || $date == '27-03-31-01' || $date == '27-03-31-00'\
    \ || $date == '27-03-31-00-' || $date == '27-03-31\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "27-03-31" in /tmp/tmpz5647lol.php
    on line 27

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  // Your validation logic\
    \ here\n  $dateArray = explode(\"-\",$date);\n  $month = date(\"m\",mktime(0,0,0,$dateArray[1],$dateArray[0],$dateArray[2]));\n\
    \  $day = date(\"d\",mktime(0,0,0,$dateArray[1],$dateArray[0],$dateArray[2]));\n\
    \  $year = date(\"Y\",mktime(0,0,0,$dateArray[1],$dateArray[0],$dateArray[2]));\n\
    \  if($month < 1 || $month > 12){\n    return false;\n  }\n  if($day < 1 || $day\
    \ > 31){\n    return false;\n  }\n  if($day < 1 || $day > 30){\n    return false;\n\
    \  }\n  if($month == 2 && $day < 1 || $day > 29){\n    return false;\n  }\n  return\
    \ true;\n}\n\nif(isset($_POST['submit'])){\n  $date = $_POST['date'];\n  if(valid_date($date)){\n\
    \    echo \"$date is an valid date format\";\n  }else{\n    echo \"$date is not\
    \ a valid date format\";\n  }\n}\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpimm49a5e.php:54\n\
    Stack trace:\n#0 /tmp/tmpimm49a5e.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpimm49a5e.php\
    \ on line 54\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if (empty($date)) {\n\
    \        return false;\n    }\n\n    $parts = explode(\"-\", $date);\n\n    if\
    \ (count($parts) == 3) {\n        $day = (int)$parts[0];\n        $month = (int)$parts[1];\n\
    \        $year = (int)$parts[2];\n\n        if (!($day >= 1 && $day <= 31) &&\
    \ !($day >= 0 && $day <= 29) && !($month >= 1 && $month <= 12)) {\n          \
    \  return false;\n        }\n\n        if ($month == 1) {\n            if ($day\
    \ <= 31) {\n                return false;\n            }\n        } elseif ($month\
    \ == 3) {\n            if ($day <= 30) {\n                return false;\n    \
    \        }\n        } elseif ($month == 5) {\n            if ($day <= 29) {\n\
    \                return false;\n            }\n        } else {\n            if\
    \ ($day <= 31) {\n                return false;\n            }\n        }\n\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI have modified this code, but I cannot get the date validated\
    \ with this code.\n<|/ c |>\n<| c |>\nI just tested it and it works. Did you test\
    \ with valid dates ?\n<|/ c |>\n<| c |>\nYes, I have tested with valid dates,\
    \ and it works too. I think I should modify this code. Thank you! I will test\
    \ it soon.\n<|/ c |>\n<| c |>\nThank you very much. I have tested it and it works\
    \ perfectly. I appreciate your help.\n<|/ c |>\n<| c |>\nWhat if the date is like\
    \ this format: dd/mm/yyyy? How should I modify the code?\n<|/ c |>\n<| a |>\n\
    A simpler solution is to validate all dates are in the same month and same year\
    \ and that each year can be more than 30 days long.\n<code>\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmprsqqsq2w.php
    on line 58

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if (!isset($date))\
    \ {\n        return false;\n    }\n\n    if (empty($date)) {\n        return false;\n\
    \    }\n\n    if (strlen($date) == 0) {\n        return false;\n    }\n\n    if\
    \ (preg_match('/^[0-9]{1,2}-[0-9]{1,2}-[0-9]{4,4}$/', $date) == 0) {\n       \
    \ return false;\n    }\n\n    $d = explode(\"-\", $date);\n\n    if (count($d)\
    \ != 3) {\n        return false;\n    }\n\n    for ($i = 0; $i < 3; $i++) {\n\
    \        if ($d[$i] < 1 || $d[$i] > 12 || $d[$i] < 0) {\n            return false;\n\
    \        }\n    }\n\n    if ($d[0] < 1 || $d[0] > 12 || $d[0] < 1) {\n       \
    \ return false;\n    }\n\n    if ($d[1] < 1 || $d[1] > 31 || ($d[1] == 1 && $d[2]\
    \ < 1)) {\n        return false;\n    }\n\n    if ($d[1] > 31 && $d[1] < 12) {\n\
    \        return false;\n    }\n\n    if ($d[2] < 1 || $d[2] > 30) {\n        return\
    \ false;\n    }\n\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9s7w7eqi.php:72\n\
    Stack trace:\n#0 /tmp/tmp9s7w7eqi.php(90): test()\n#1 {main}\n  thrown in /tmp/tmp9s7w7eqi.php\
    \ on line 72\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n\tif (!empty($date) &&\
    \ strlen($date) == 10 && checkdate($date[1], $date[2], $date[0])) {\n\t\treturn\
    \ true;\n\t}\n\treturn false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: checkdate(): Argument #2 ($day) must\
    \ be of type int, string given in /tmp/tmppka657ec.php:20\nStack trace:\n#0 /tmp/tmppka657ec.php(20):\
    \ checkdate('3', '-', '0')\n#1 /tmp/tmppka657ec.php(27): valid_date('03-11-2000')\n\
    #2 /tmp/tmppka657ec.php(31): candidate('03-11-2000')\n#3 /tmp/tmppka657ec.php(49):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmppka657ec.php on line 20\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    // Your code here.\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease explain why you think this is a\
    \ good solution. The OP states in their question that they have no experience\
    \ with Regex, or PHP, or any language for that matter. Thus, they do not know\
    \ where to begin.\n<|/ c |>\n<| c |>\nAs the question states that they don't know\
    \ regex so they have no idea how to do it.\n<|/ c |>\n<| c |>\nThe OP did state\
    \ that they have no experience with regex, nor PHP. Thus, your answer does not\
    \ help him learn regex.\n<|/ c |>\n<| c |>\nHe might want to learn some basic\
    \ of regex that's why I mentioned it in the comments.\n<|/ c |>\n<| c |>\nI understand\
    \ that. The OP did not ask for an answer with regex, nor for PHP. That is why\
    \ I downvoted your answer.\n<|/ c |>\n<| a tags=date,validation,php |>\nTry this\
    \ Regex\n<code>\n^(?:(?:(?:0?[1-9]|1[0-2])-(?:30|29))-(?:(?:0?[1-9]|1[0-9]|2[0-9]|3[01])|(?:0?[1-9])))$\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nYour regex is wrong. It will match `11-01-2019`,\
    \ even though `11` is less than the allowed range. Fix it by removing the pipe\
    \ symbols. Also, this regex can be simplified.\n<|/ c |>\n<| c |>\nNo. He mentioned\
    \ that he does not know Regex\n<|/ c |>\n<| c |>\nI missed that. My bad, apologies.\n\
    <|/ c |>\n<| a dscore=0 |>\nTry this\n<code>\n<?php\n\n$date = '11/30/2002';\n\
    \n$pattern = \"/^[01]{0,1}[0-9]{1,2}-[0-9]{1,2}-[0-9]{4}$/\";\n\nif(preg_match($pattern,\
    \ $date)) {\n    echo 'valid';\n} else {\n    echo 'invalid';\n}\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp7zsvx91x.php
    on line 22

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  $valid = preg_match('/^(\\\
    d{1,2})-(\\d{1,2})-(\\d{4})$/', $date);\n  if ($valid === 1)\n  {\n    $m1 = $m2\
    \ = $m3 = $m4 = 0;\n    if (preg_match('/(\\d{1,2})/', $date, $m1) === 1)\n  \
    \  {\n      $m1 = $m1[1][0];\n    }\n    if (preg_match('/-(\\d{1,2})/', $date,\
    \ $m2) === 1)\n    {\n      $m2 = $m2[1][0];\n    }\n    if (preg_match('/-(\\\
    d{4})/', $date, $m3) === 1)\n    {\n      $m3 = $m3[1][0];\n    }\n    if (preg_match('/-(\\\
    d{4})/', $date, $m4) === 1)\n    {\n      $m4 = $m4[1][0];\n    }\n\n    // Check\
    \ to see if the number of days is valid or not\n    if (($m2 < 1 || $m2 > 31)\
    \ || ($m3 < 1 || $m3 > 30) || ($m4 < 1 || $m4 > 29))\n    {\n      $valid = false;\n\
    \    }\n    else\n    {\n      if ($m1 == $m2 && $m1 == $m3 && $m1 == $m4)\n \
    \     {\n        $valid = false;\n      }\n      else\n      {\n        if ($m2\
    \ > $m3)\n        {\n          if ($m2 > $m4)\n          {\n            if ($m4\
    \ < $m3)\n            {\n              if ($m4 < $m1)\n              {\n     \
    \           $valid = false;\n              }\n            }\n          }\n   \
    \     }\n        else\n        {\n          if ($m3 > $m4)\n          {\n    \
    \        if ($m3 < $m1)\n            {\n              if ($m3 < $m2)\n       \
    \       {\n                $valid = false;\n              }\n            }\n \
    \         }\n        }\n      }\n    }\n  }\n  return $valid;\n}\n\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfy9lzcgt.php:91\n\
    Stack trace:\n#0 /tmp/tmpfy9lzcgt.php(109): test()\n#1 {main}\n  thrown in /tmp/tmpfy9lzcgt.php\
    \ on line 91\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  if ( !isset($date) )\
    \ return false;\n  $d = DateTime::createFromFormat(\"m-d-Y\", $date);\n  return\
    \ $d->format(\"m\") == date(\"m\") &&\n          $d->format(\"d\") == date(\"\
    d\") &&\n          $d->format(\"Y\") == date(\"Y\");\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis is very helpful, but I am confused on how to properly use\
    \ the function. I know that I have to use it in the function when validating the\
    \ date, but I am not sure how to use it. How would I call the function and what\
    \ would be the output?\n<|/ c |>\n<| c |>\nThe function validates the given date\
    \ and returns true if the date is valid and false if not.\n<|/ c |>\n<| a |>\n\
    I recommend using DateTime::createFromFormat as suggested by in his answer. \n\
    To get your program to work, you have to return true in the valid date case and\
    \ a false in case of an invalid date. Since you haven't posted the code for your\
    \ function valid_date, I assume the return value is either true or false. \nTo\
    \ make your program work, you have to do two things:\n\nUse your function valid_date\
    \ inside the function verify_password\nMake sure that your function is returning\
    \ true or false in your valid date case\n\nIn code:\n<code>\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpy607ffs8.php
    on line 26

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    // TODO: Write validation\
    \ code\n    return true;\n}\n</code>\n<|/ a tags=javascript,php |>\n<| a |>\n\
    This might not be a solution to your question, but i feel it would be more useful\
    \ to do something like this.\n\n<code>\nconst dateInput = document.getElementById('date-input');\n\
    \nconst dateRegex = /\\d{1,2}\\/\\d{1,2}\\/\\d{4}/;\n\ndateInput.addEventListener('keyup',\
    \ (e) => {\n  const dateMatch = dateRegex.exec(e.target.value);\n  if (dateMatch)\
    \ {\n    dateInput.classList.remove('input-error');\n  } else {\n    dateInput.classList.add('input-error');\n\
    \  }\n});</code>\n<code>\n.input-error {\n  border: 1px solid red;\n}</code>\n\
    <input id=\"date-input\" type=\"text\" />\n<|/ a dscore=1 tags=javascript,php\
    \ |>\n<| c |>\nYour regex does not allow for a single digit month. Also it fails\
    \ if the input is an invalid date.\n<|/ c |>\n<| c |>\nFixed the regex as per\
    \ your suggestions.\n<|/ c |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n\
    \    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp7nuxzgfo.php
    on line 23

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  if(!empty($date)) {\n\
    \    $date_parts = explode(\"-\", $date);\n    if(count($date_parts) < 3) return\
    \ false;\n    if($date_parts[1] <= 12 && $date_parts[1] >= 1) return false;\n\
    \    if($date_parts[2] <= 12 && $date_parts[2] >= 1) return false;\n    if($date_parts[0]\
    \ <= 12 && $date_parts[0] >= 1) return false;\n    return true;\n  }\n  return\
    \ false;\n}\n</code>\n<|/ a |>\n<| c |>\nI like the approach! I will try this\
    \ and see if it works. Thank you\n<|/ c |>\n<| a tags=php,date |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpxbhuodv4.php
    on line 30

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  list($m, $d, $y) = explode(\"\
    -\", $date);\n  if ( !isset($m) || $m == \"\" || $m <= 0 || $m > 12 ) return false;\n\
    \  if ( !isset($d) || $d == \"\" || $d <= 0 || $d > 31 ) return false;\n  if (\
    \ !isset($y) || $y == \"\" || $y <= 0 || $y > date('Y',strtotime($m)) ) return\
    \ false;\n  return true;\n}\n\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_z4mk7dj.php:32\n\
    Stack trace:\n#0 /tmp/tmp_z4mk7dj.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp_z4mk7dj.php\
    \ on line 32\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    // Your code here\n\
    \    $parts = explode('-', $date);\n    $day = $parts[0];\n    $month = $parts[1];\n\
    \    $year = $parts[2];\n\n    if (empty($date) || strlen($date) == 0 || strlen($date)\
    \ > 31 || strlen($date) < 1 || strlen($date) > 28 || strlen($date) < 4 || strlen($date)\
    \ > 12) {\n        return false;\n    }\n\n    if (count($parts) == 3) {\n   \
    \     if (preg_match(\"/([01][0-9])|(2[0-3]):[0-5]\\d([0-9]{3})/\", $month) !=\
    \ 1) {\n            return false;\n        }\n        $mm = $month;\n        $mm\
    \ = $mm[0];\n        $mm = str_pad($mm, 2, '0', STR_PAD_LEFT);\n\n        if (preg_match(\"\
    /[012]/\", $month) != 1) {\n            return false;\n        }\n        $dd\
    \ = $month;\n        $dd = $dd[0];\n        $dd = str_pad($dd, 2, '0', STR_PAD_LEFT);\n\
    \    } else {\n        if (preg_match(\"/[012]/\", $month) != 1) {\n         \
    \   return false;\n        }\n        $mm = $month;\n        $mm = $mm[0];\n \
    \       $mm = str_pad($mm, 2, '0', STR_PAD_LEFT);\n        if (count($parts) ==\
    \ 3) {\n            $dd = $parts[0];\n            $dd = $dd[0];\n            $dd\
    \ = str_pad($dd, 2, '0', STR_PAD_LEFT);\n        } else {\n            $dd = $parts[1];\n\
    \            $dd = $dd[0];\n            $dd = str_pad($dd, 2, '0', STR_PAD_LEFT);\n\
    \        }\n\n        if ($year < 1000 || $year > 9999) {\n            return\
    \ false;\n        }\n    }\n\n    if ($day < 1 || $day > 31) {\n        return\
    \ false;\n    }\n\n    if ($mm < 1 || $mm > 12 || $dd < 1 || $dd > 31) {\n   \
    \     return false;\n    }\n\n    if ($month == 0 || $month == 2) {\n        $year\
    \ = $year - 1;\n        $month = 12 + $month;\n    }\n\n    if ($month == 1 ||\
    \ $month == 3 || $month == 5 || $month == 7 || $month == 8 || $month == 10 ||\
    \ $month == 12) {\n        if ($day == 31) {\n            return true;\n     \
    \   }\n        if ($day > 28) {\n            return false;\n        }\n    }\n\
    \n    if ($month == 4 || $month == 6 || $month == 9 || $month == 11) {\n     \
    \   if ($day == 31) {\n            return true;\n        }\n        if ($day >\
    \ 30) {\n            return false;\n        }\n    }\n\n    if ($month == \nfunction\
    \ candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpbotdfryu.php on line 98

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    list($month, $day,\
    \ $year) = explode('-', $date);\n    if (strlen($date) != 0) {\n        if ($month\
    \ < 1 || $month > 12) return false;\n        if ($day < 1 || $day > 31) return\
    \ false;\n        if ($month == 1 && $day == 31) return false;\n        if ($month\
    \ == 2 && $day == 29) return false;\n        if ($day > 0 && $day < 32) return\
    \ false;\n    }\n    if ($month == 0 && $day == 0 && $year < 1000) return false;\n\
    \    if ($month == 0 && $day == 0 && $year < 100) return false;\n    return true;\n\
    }\n</code>\n<|/ a tags=date,php,validation |>\n<| c |>\nHi Zaki, thanks for the\
    \ reply, yes this is more or less what I am looking for, however the dates need\
    \ to be in the following format: mm/dd/yyyy. Is this easy to change to fit this\
    \ criteria?\n<|/ c |>\n<| c |>\nyeah that is easy because I have edited my answer\
    \ and added a new method `valid_date` which will validate the date string and\
    \ will return `true` or `false`. You can read my answer and see how to validate\
    \ date string and modify your method accordingly.\n<|/ c |>\n<| c |>\nThanks for\
    \ the reply, I tried to implement this but my date strings are still showing as\
    \ valid dates:\n\n`\n<?php\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp125zisfu.php
    on line 32

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $dateArray = explode(\"\
    -\", $date);\n    $month = $dateArray[0];\n    $day = $dateArray[1];\n    $year\
    \ = $dateArray[2];\n\n    if(empty($date)) {\n        return false;\n    }\n \
    \   // The date string is not empty.\n    if(!empty($month) && !empty($day) &&\
    \ !empty($year)) {\n        if(!preg_match(\"/^[0-9]{1,2}-[0-9]{1,2}-[0-9]{4}$/\"\
    , $month) || !preg_match(\"/^[0-9]{1,2}$|^[0-9]{1,2}-[0-9]{1,2}$|^[0-9]{1,2}-[0-9]{1,2}-[0-9]{4}$/\"\
    , $day) || !preg_match(\"/^[0-9]{1,2}$|^[0-9]{1,2}-[0-9]{1,2}$|^[0-9]{1,2}-[0-9]{1,2}-[0-9]{4}$/\"\
    , $year)) {\n            return false;\n        }\n    } else {\n        return\
    \ false;\n    }\n\n    $minDays = 1;\n    $maxDays = 31;\n    $minMonth = 2;\n\
    \    $maxMonth = 12;\n    $minYear = 2010;\n    $maxYear = 2100;\n\n    $daysInMonth\
    \ = cal_days_in_month(CAL_GREGORIAN, $month, $year);\n    $daysInMonth = ($daysInMonth\
    \ < 31) ? $daysInMonth : 31;\n\n    if($month < $minMonth) {\n        return false;\n\
    \    }\n\n    if($month > $maxMonth) {\n        return false;\n    }\n\n    if($day<$minDays)\
    \ {\n        return false;\n    }\n\n    if($day > $daysInMonth) {\n        return\
    \ false;\n    }\n\n    if($year < $minYear) {\n        return false;\n    }\n\n\
    \    if($year > $maxYear) {\n        return false;\n    }\n\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4w_6y3vw.php:79\n\
    Stack trace:\n#0 /tmp/tmp4w_6y3vw.php(97): test()\n#1 {main}\n  thrown in /tmp/tmp4w_6y3vw.php\
    \ on line 79\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  if(!is_string($date)\
    \ || empty($date)) {\n    return false;\n  }\n  $day   = explode('-', $date);\n\
    \  if(count($day) != 3 || intval($day[0]) < 1 || intval($day[0]) > 12 ||\n   \
    \  intval($day[1]) < 1 || intval($day[1]) > 31 ||\n     intval($day[2]) < 1 ||\
    \ intval($day[2]) > 30) {\n    return false;\n  }\n  $month = explode('/', $date);\n\
    \  if(count($month) != 3 || intval($month[0]) < 1 || intval($month[0]) > 12 ||\n\
    \     intval($month[1]) < 1 || intval($month[1]) > 12) {\n    return false;\n\
    \  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ze6f_ap.php:42\n\
    Stack trace:\n#0 /tmp/tmp9ze6f_ap.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp9ze6f_ap.php\
    \ on line 42\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if (!empty($date))\
    \ {\n        // The date string is not empty.\n        // The number of days is\
    \ not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number\
    \ of days is not less than 1 or higher than 30 days for months 4,6,9,11. And,\
    \ the number of days is not less than 1 or higher than 29 for the month 2.\n \
    \       // The months should not be less than 1 or higher than 12.\n        //\
    \ The date should be in the format: mm-dd-yyyy\n        if (preg_match(\"/^([0-9]{2})-([0-9]{2})-([0-9]{4})$/\"\
    , $date)) {\n            // echo \"the date is valid\";\n            // if the\
    \ date is valid\n            return true;\n        }\n        // echo \"the date\
    \ is invalid\";\n        // if the date is not valid\n        return false;\n\
    \    }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI agree with you and I've also\
    \ implemented this, but I want a regex to validate date string. Thank you.\n<|/\
    \ c |>\n<| c |>\nI updated my answer, and I hope it answers your question.\n<|/\
    \ c |>\n<| c |>\nSorry for late reply. Thank you for giving me an idea to use\
    \ Regex. I've used it and it works great but I think there is a better way of\
    \ using Regex to validate, for example using lookahead and lookbehind. Anyway\
    \ I've used your answer and my regex so I will accept your answer.\n<|/ c |>\n\
    <| c |>\nI edited the answer, and added another regex that matches your date format.\
    \ Also added a comment to explain the regex and the comments inside the regex.\n\
    <|/ c |>\n<| c |>\nThank you for giving me a good idea to use Regex to validate\
    \ a date string. Really appreciate it. But I think there is a better way of using\
    \ Regex to validate, for example using lookahead and lookbehind. Anyway I've used\
    \ your answer and my regex so I will accept your answer.\n<|/ c |>\n<| a dscore=0\
    \ |>\nUsing preg_match() function\nThis function uses the PCRE regex engine to\
    \ check whether or not a pattern matches a given subject.\npreg_match()\n\nThe\
    \ preg_match() function searches a string for a pattern, and returns an array\
    \ with the subject string as the first element and the number of times pattern\
    \ matches as the next element(s).\n\nThis function  returns a Boolean TRUE (1)\
    \ or FALSE (0). So your code will look like this:\n<code>\n<?php\n$date = \"02-11-2020\"\
    ;\n$pattern = // your date pattern\nif (preg_match($pattern, $date)) {\nfunction\
    \ candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpprgdaehz.php
    on line 35

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $days_allowed = 31;\n\
    \    $days_in_month = array(0,31,28,31,30,31,30,31,31,30,31,30,31);\n    $days_in_year\
    \ = 366;\n    $months_allowed = 12;\n    $days_in_month[31] = 1;\n\n    $date\
    \ = preg_replace('/[^0-9\\-\\s]/', '', $date);\n    $months = explode(\"-\", $date);\n\
    \    $day = $months[0];\n    $year = $months[1];\n    $month = $months[2];\n \
    \   $date = $months[2];\n    \n    if (strlen($date) != 10 OR empty($day) || empty($year)\
    \ || empty($month)) {\n        return false;\n    }\n    \n    if ($days_allowed\
    \ > count($months_allowed) or $days_allowed > count($days_in_month)) {\n     \
    \   return false;\n    }\n    \n    if ($days_allowed > count($months_allowed)\
    \ or $days_allowed > count($days_in_year)) {\n        return false;\n    }\n \
    \   \n    if ($days_allowed > count($months_allowed) or $days_allowed > count($days_in_month))\
    \ {\n        return false;\n    }\n    \n    if ($days_allowed > count($months_allowed)\
    \ or $days_allowed > count($days_in_month)) {\n        return false;\n    }\n\
    \    \n    if ($days_allowed > count($months_allowed) or $days_allowed > count($days_in_month))\
    \ {\n        return false;\n    }\n    \n    if ($days_allowed > count($months_allowed)\
    \ or $days_allowed > count($days_in_month)) {\n        return false;\n    }\n\
    \    \n    if ($days_allowed > count($months_allowed) or $days_allowed > count($days_in_month))\
    \ {\n        return false;\n    }\n    \n    if ($days_allowed > count($months_allowed)\
    \ or $days_allowed > count($days_in_month)) {\n        return false;\n    }\n\
    \    \n    if ($days_allowed > count($months_allowed) or $days_allowed > count($days_in_month))\
    \ {\n        return false;\n    }\n    \n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7j6bn7i2.php:81\n\
    Stack trace:\n#0 /tmp/tmp7j6bn7i2.php(99): test()\n#1 {main}\n  thrown in /tmp/tmp7j6bn7i2.php\
    \ on line 81\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  if (empty($date)) {\n\
    \    return false;\n  }\n  $date = explode(\"-\", $date);\n  if (count($date)\
    \ != 3) {\n    return false;\n  }\n  for ($i = 0; $i < count($date); $i++) {\n\
    \    if (!is_numeric($date[$i])) {\n      return false;\n    }\n  }\n  list($month,\
    \ $day, $year) = explode(\"-\", $date);\n  $month = (int) $month;\n  $day = (int)\
    \ $day;\n  if ($month < 1 || $month > 12) {\n    return false;\n  }\n  if ($day\
    \ < 1 || $day > 31 && $month != 2) {\n    return false;\n  }\n  if ($day > 30\
    \ && $month != 2) {\n    return false;\n  }\n  if ($day > 29 && $month != 2) {\n\
    \    return false;\n  }\n  if ($month == 2) {\n    if ($day > 28) {\n      return\
    \ false;\n    }\n  }\n  if ($month == 4 || $month == 6 || $month == 9 || $month\
    \ == 11) {\n    if ($day > 30) {\n      return false;\n    }\n  }\n  return true;\n\
    }\nfunction candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: explode(): Argument #2 ($string) must\
    \ be of type string, array given in /tmp/tmpl6gdiz8k.php:32\nStack trace:\n#0\
    \ /tmp/tmpl6gdiz8k.php(32): explode('-', Array)\n#1 /tmp/tmpl6gdiz8k.php(60):\
    \ valid_date(Array)\n#2 /tmp/tmpl6gdiz8k.php(64): candidate('03-11-2000')\n#3\
    \ /tmp/tmpl6gdiz8k.php(82): test()\n#4 {main}\n  thrown in /tmp/tmpl6gdiz8k.php\
    \ on line 32\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  list($month,$day,$year)\
    \ = explode('-',$date);\n  if(empty($date)) {\n    return false;\n  }\n  if ($month\
    \ < 1 || $month > 12) {\n    return false;\n  }\n  if ($day < 1 || $day > 30)\
    \ {\n    return false;\n  }\n  if ($month == 2) {\n    if ($day < 1 || $day >\
    \ 29) {\n      return false;\n    }\n  } else {\n    if ($day < 1 || $day > 31)\
    \ {\n      return false;\n    }\n  }\n  if ($month == 1) {\n    if ($day < 1 ||\
    \ $day > 29) {\n      return false;\n    }\n  }\n  $days_in_months = array();\n\
    \  $days_in_months[1] = array(31,28,31,30,31,30,31,30,31,30,31);\n  $days_in_months[2]\
    \ = array(31,29,31,30,31,30,31,30,31,30,31);\n  $days_in_months[3] = array(31,30,31,30,31,30,31,30,31,30,31);\n\
    \  $days_in_months[4] = array(31,30,31,30,31,30,31,30,31,30,31);\n  $days_in_months[5]\
    \ = array(31,30,31,30,31,30,31,30,31,30,31);\n  $days_in_months[6] = array(31,30,31,30,31,30,31,30,31,30,31);\n\
    \  $days_in_months[7] = array(31,30,31,30,31,30,31,30,31,30,31);\n  $days_in_months[8]\
    \ = array(31,30,31,30,31,30,31,30,31,30,31);\n  $days_in_months[9] = array(31,30,31,30,31,30,31,30,31,30,31);\n\
    \  $days_in_months[10] = array(31,30,31,30,31,30,31,30,31,30,31);\n  $days_in_months[11]\
    \ = array(31,30,31,30,31,30,31,30,31,30,31);\n  $days_in_months[12] = array(31,30,31,30,31,30,31,30,31,30,31);\n\
    \  if ($year < 1 || $year > 9999) {\n    return false;\n  }\n  $days_in_months[1]\
    \ = array(31,28,31,30,31,30,31,30,31,30,31);\n  $days_in_months[2] = array(31,29,31,30,31,30,31,30,31,30,31);\n\
    \  $days_in_months[3] = array(31,30,31,30,31,30,31,30,31,30,31);\n  $days_in_months[4]\
    \ = array(31,30,31,30,31,30,31,30,31,30,31);\n  $days_in_months[5] = array(31,30,31,30,31,30,31,30,31,30,31);\n\
    \  $days_in_months[6] = array(31,30,31,30,31,30,31,30,31,30,\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpxzo9_jxi.php on line 66

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    if(!$date || !preg_match(\"\
    /^[0-9]{1,2}-[0-9]{1,2}-[0-9]{4}$/\", $date)) {\n        return false;\n    }\n\
    \    $days = cal_days_in_month(CAL_GREGORIAN, date(\"m\"), date(\"d\"), date(\"\
    Y\"));\n    $days_max = ($days == 31) ? 30 : ($days == 30) ? 29 : 28;\n    $month_max\
    \ = ($days == 31) ? 12 : ((($days == 30) ? 11 : 9));\n    if($days > $days_max)\
    \ return false;\n    if($days > $month_max) return false;\n    if(date(\"m\")\
    \ >= 1 && date(\"m\") <= 12 && date(\"d\") >= 1 && date(\"d\") <= $days_max) return\
    \ false;\n    return true;\n}\n\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Unparenthesized `a ? b : c ? d : e` is not supported. Use either
    `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmp2b60khkj.php on line
    24

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $date = str_replace(array('\
    \ ', '\"'), '', $date);\n    if ($date == '') return false;\n    $date = explode('-',\
    \ $date);\n    if (count($date) == 3) {\n        $date = array($date[0], $date[1],\
    \ $date[2]);\n    }\n    if (count($date) != 3) return false;\n    list($y, $m,\
    \ $d) = $date;\n    if ($y < 1000) return false;\n    if ($m < 1 || $m > 12) return\
    \ false;\n    if ($d < 1 || $d > 29) return false;\n    if ($y % 400 == 0 && ($m\
    \ == 2 || $m == 4 || $m == 6 || $m == 9 || $m == 11)) return false;\n    if ($y\
    \ % 4 == 0 && ($m == 1 || $m == 3 || $m == 5 || $m == 7 || $m == 8 || $m == 10\
    \ || $m == 12)) return false;\n    if ($m == 2 && $d <= 31) return false;\n  \
    \  if ($m == 4 && $d <= 30) return false;\n    if ($m == 6 && $d <= 31) return\
    \ false;\n    if ($m == 9 && $d <= 30) return false;\n    if ($m == 11 && $d <=\
    \ 31) return false;\n    return true;\n}\nfunction candidate(...$args) {\n   \
    \ return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8hji8scw.php:45\n\
    Stack trace:\n#0 /tmp/tmp8hji8scw.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp8hji8scw.php\
    \ on line 45\n"
  timestamp: 1660028890
- exit_code: 0
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  if ($date === '') {\n\
    \    return FALSE;\n  }\n  list($month, $day, $year) = explode('-', $date);\n\
    \  if ($month < 1 || $month > 12) {\n    return FALSE;\n  }\n  if ($day < 1 ||\
    \ $day > 31 || ($month == 1 && $day > 29)) {\n    return FALSE;\n  }\n  if ($month\
    \ == 1 && $day > 31) {\n    return FALSE;\n  }\n  if (!checkdate($month, $day,\
    \ $year)) {\n    return FALSE;\n  }\n  return TRUE;\n}\n\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 1 in /tmp/tmpgualh7s9.php on line 23


    Warning: Undefined array key 2 in /tmp/tmpgualh7s9.php on line 23


    Warning: Undefined array key 1 in /tmp/tmpgualh7s9.php on line 23


    Warning: Undefined array key 2 in /tmp/tmpgualh7s9.php on line 23


    Warning: Undefined array key 2 in /tmp/tmpgualh7s9.php on line 23


    Warning: Undefined array key 2 in /tmp/tmpgualh7s9.php on line 23

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $date = strtotime($date);\n\
    \    $date_str = $date;\n    $valid_str = date('Y-m-d', $date);\n    // var_dump($date_str);\n\
    \    // var_dump($valid_str);\n    if ($date_str == $valid_str) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp39rfl9ie.php:36\n\
    Stack trace:\n#0 /tmp/tmp39rfl9ie.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp39rfl9ie.php\
    \ on line 36\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $d = explode('-', $date);\n\
    \    return !empty($d[0]) && $d[1] >= 1 && $d[1]<=31 && $d[2]>=1 && $d[2]<=29\
    \ && $d[1]!=0\n        && $d[2]!=0\n        && $d[1]!=0\n        && $d[1]!=1\n\
    \        && $d[1]!=3\n        && $d[1]!=5\n        && $d[1]!=7\n        && $d[1]!=8\n\
    \        && $d[1]!=10\n        && $d[1]!=12;\n}\n</code>\n<|/ a tags=php,date,datetime,date-manipulation\
    \ dscore=1 |>\n<| a |>\nHere is one way of doing it.\n<code>\n<?php\n\n$year =\
    \ '2018';\n$month = '01';\n$date = '04';\n\n$daysInMonth = cal_days_in_month(CAL_GREGORIAN,\
    \ $month, $year);\n$date = $date.'-'.$month.'-'.$year;\n\nif(date('d-m-Y') !=\
    \ $date){\n    echo \"not a valid date\";\n} else {\n    echo \"$day $month $year\"\
    ;\n}\n</code>\n<|/ a dscore=1 tags=php,date,datetime,date-manipulation |>\n<|\
    \ c |>\nWhy does this work? Shouldn't you check the month and year too? I agree\
    \ that it's not a perfect solution, but still it works.\n<|/ c |>\n<| c |>\nI\
    \ made a mistake when i posted my answer. Now I have fixed it. Sorry for the inconvenience.\n\
    <|/ c |>\n<| a dscore=1 |>\nYou can use native date function of PHP and check\
    \ if your date is valid or not like this:\n<code>\n$date = '04-2018';\n$checkDate\
    \ = false;\n\n$dateTime = new DateTime($date);\n\n$dateTime->format('Y-m-d');\n\
    if($dateTime > new DateTime())\n{\n  $checkDate = true;\n}\n</code>\n<|/ a tags=php,date,datetime,date-manipulation\
    \ |>\n<| a tags=php,date,datetime,date-manipulation dscore=0 |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp2dlqu5cv.php
    on line 32

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $pattern = '/([12]\\\
    d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/';\n    if (preg_match($pattern,\
    \ $date) == 1) {\n        $pattern = '/([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\\
    d|3[01])).(01|02|03|04|05|06|07|08|09|10|11|12)$/';\n        if (preg_match($pattern,\
    \ $date) == 1) {\n            $pattern = '/^([0-1][0-9])$/';\n            if (preg_match($pattern,\
    \ $date) == 1) {\n                $pattern = '/^(2[0-8])$/';\n               \
    \ if (preg_match($pattern, $date) == 1) {\n                    $pattern = '/^(3[0-8])$/';\n\
    \                    if (preg_match($pattern, $date) == 1) {\n               \
    \         $pattern = '/^(1[0-1][0-9])$/';\n                        if (preg_match($pattern,\
    \ $date) == 1) {\n                            $pattern = '/^(1[0-1][0-3])$/';\n\
    \                            if (preg_match($pattern, $date) == 1) {\n       \
    \                         $pattern = '/^(1[0-1][0-9]|2[0-8]|30|31)$/';\n     \
    \                           if (preg_match($pattern, $date) == 1) {\n        \
    \                            return true;\n                                }\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp92_d2et9.php:53\n\
    Stack trace:\n#0 /tmp/tmp92_d2et9.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp92_d2et9.php\
    \ on line 53\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    //Write your validation\
    \ code here\n    return false; // <- YOUR CODE HERE\n}\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4nvuzy7z.php:28\n\
    Stack trace:\n#0 /tmp/tmp4nvuzy7z.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp4nvuzy7z.php\
    \ on line 28\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  // Write your code here\n\
    \  return true;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI used the PHP function\
    \ `strtotime()` which converts a string representation of a time to a Unix timestamp.\
    \ `strtotime()` returns an unsigned integer which is easier to work with than\
    \ an `int` which represents a date in terms of seconds. However, I agree that\
    \ the solution should be done in PHP and not Javascript. I will edit the answer\
    \ to include the PHP solution.\n<|/ c |>\n<| c |>\nThe date-time info is very\
    \ useful. Thank you! But I found a solution to my problem. I'll post it as an\
    \ answer later.\n<|/ c |>\n<| a dscore=0 |>\nYou can use following regex to check\
    \ valid date format:\n<code>\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp0tooq2o8.php
    on line 23

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    // Implement this function!\n\
    }\nfunction candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4y52eyrz.php:27\n\
    Stack trace:\n#0 /tmp/tmp4y52eyrz.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp4y52eyrz.php\
    \ on line 27\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $date = strtolower($date);\n\
    \    return (strlen($date) > 0) && ! ($date < \"01-\" || $date > \"31-\" || $date\
    \ < \"30-\" || $date < \"29-\" || $date < \"12-\" || $date > \"12-\" || $date\
    \ < \"01-\" || $date > \"31-\" || $date < \"30-\" || $date < \"29-\" || $date\
    \ < \"12-\" || $date > \"12-\");\n}\nfunction candidate(...$args) {\n    return\
    \ valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0i0dfob0.php:28\n\
    Stack trace:\n#0 /tmp/tmp0i0dfob0.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp0i0dfob0.php\
    \ on line 28\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n   $format = \"m-d-Y\"\
    ;\n   $date = str_replace('/', '-', $date);\n   $d = DateTime::createFromFormat($format,\
    \ $date);\n   return ($d && $d->format('m-d') == $date && $d->format('Y') == date('Y')\
    \ && $d->format('m') == date('m') && $d->format('d') == date('d')) ? true : false;\n\
    }\n\nfunction candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppnjax_al.php:31\n\
    Stack trace:\n#0 /tmp/tmppnjax_al.php(49): test()\n#1 {main}\n  thrown in /tmp/tmppnjax_al.php\
    \ on line 31\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  if ($date == \"\") return\
    \ false;\n  list($day, $month, $year) = explode(\"-\", $date);\n  if (checkdate($month,\
    \ $day, $year)) {\n    return true;\n  }\n  return false;\n}\nfunction candidate(...$args)\
    \ {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp45g98yj8.php:33\n\
    Stack trace:\n#0 /tmp/tmp45g98yj8.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp45g98yj8.php\
    \ on line 33\n"
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    // Your validation\
    \ code goes here.\n    if (strlen($date) == 0) {\n        return false;\n    }\n\
    \    $day1 = explode('-', $date);\n    $day1 = $day1[0];\n    $day2 = $day1[1];\n\
    \    $month1 = explode('/', $day1);\n    $month1 = $month1[0];\n    $month2 =\
    \ $month1[1];\n    $month3 = $month1[2];\n    $month4 = $month2[1];\n    $month6\
    \ = $month2[2];\n    $month9 = $month4[1];\n    $month11 = $month4[2];\n    $year1\
    \ = $month1[3];\n    $year2 = $month2[3];\n    $year3 = $month3[3];\n    $year4\
    \ = $month4[3];\n    $year6 = $month6[3];\n    $year9 = $month9[3];\n    $year11\
    \ = $month11[3];\n    if ($month1 > 12 || $month1 < 1 || $month3 > 12 || $month3\
    \ < 1 || $month5 > 12 || $month5 < 1 || $month7 > 12 || $month7 < 1 || $month8\
    \ > 12 || $month8 < 1 || $month10 > 12 || $month10 < 1 || $month12 > 12 || $month12\
    \ < 1) {\n        return false;\n    }\n    if ($day1 > 31 || $day1 < 1 || $day2\
    \ > 31 || $day2 < 1 || $day3 > 31 || $day3 < 1 || $day4 > 31 || $day4 < 1 || $day6\
    \ > 31 || $day6 < 1 || $day9 > 31 || $day9 < 1 || $day11 > 31 || $day11 < 1) {\n\
    \        return false;\n    }\n    if ($month1 == $month2 && $day1 == $day2) {\n\
    \        return true;\n    }\n    if ($month2 == $month4 && $day2 == $day4) {\n\
    \        return true;\n    }\n    if ($month4 == $month6 && $day4 == $day6) {\n\
    \        return true;\n    }\n    if ($month6 == $month9 && $day6 == $day9) {\n\
    \        return true;\n    }\n    if ($month9 == $month11 && $day9 == $day11)\
    \ {\n        return true;\n    }\n    if ($month1 == $month2 && $month1 == $month3\
    \ && $day1 == $day3 && $month2 == $month4 && $day2 == $day4) {\n        return\
    \ true;\n    }\n    if ($month3 == $month5 && $month3 == $month7 && $month3 ==\
    \ $month8 && $day3 == $day5 && $month4 == $month6 && $day4 == $day6\nfunction\
    \ candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpws1pz164.php
    on line 67

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    // Your code here\n\
    }\nfunction candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpur0yr2fu.php:27\n\
    Stack trace:\n#0 /tmp/tmpur0yr2fu.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpur0yr2fu.php\
    \ on line 27\n"
  timestamp: 1660028824
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n    $timestamp = strtotime($date);\n\
    \    if ($timestamp === false) return false;\n    $valid_date = (!empty($date)\
    \ && is_numeric($date) && (!((date('m', strtotime($date)) == 1 && (date('d', strtotime($date))\
    \ == 31) || (date('m', strtotime($date)) == 3 && (date('d', strtotime($date))\
    \ == 30) || (date('m', strtotime($date)) == 5 && date('d', strtotime($date)) ==\
    \ 29) || (date('m', strtotime($date)) == 7 && date('d', strtotime($date)) == 31)\
    \ || (date('m', strtotime($date)) == 8 && date('d', strtotime($date)) == 31) ||\
    \ (date('m', strtotime($date)) == 10 && date('d', strtotime($date)) == 30) ||\
    \ (date('m', strtotime($date)) == 12 && date('d', strtotime($date)) == 31)))));\n\
    \    return $valid_date;\n}\n\nfunction candidate(...$args) {\n    return valid_date(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token ";" in /tmp/tmpa8ekdzpz.php on line
    22

    '
  timestamp: 1660028890
- exit_code: 255
  program: "<?php\n// You have to write a function which validates a given date string\
    \ and\n// returns true if the date is valid otherwise false.\n// The date is valid\
    \ if all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date($date) {\n  return preg_match(\"\
    /^(0[1-9]|[12][0-9]|3[01])[-](0[1-9]|1[012])[-](19|20)\\d\\d$/\", $date);\n}\n\
    function candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpon9mpslr.php:27\n\
    Stack trace:\n#0 /tmp/tmpon9mpslr.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpon9mpslr.php\
    \ on line 27\n"
  timestamp: 1660028890
