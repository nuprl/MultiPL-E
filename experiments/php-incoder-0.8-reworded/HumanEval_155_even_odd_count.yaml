name: HumanEval_155_even_odd_count
language: php
prompt: "<?php\n// Given an integer. return an array that has the number of even and\
  \ odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// array(1,\
  \ 1)\n// >>> even_odd_count(123)\n// array(1, 2)\nfunction even_odd_count($num)\
  \ {\n"
tests: "function candidate(...$args) {\n    return even_odd_count(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(7) !== array(0, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(-78) !== array(1, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(3452) !== array(2, 2)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(346211) !== array(3, 3)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(-345821) !== array(3, 3)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(-2) !== array(1, 0)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(-45347) !== array(2, 3)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(0) !== array(1, 0)) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $odd = $even = 0;\n    while ($num != 0) {\n        $remainder\
    \ = $num % 10;\n        $even = ($even*10) + $remainder;\n        $num = ($num\
    \ - $remainder)/10;\n    }\n    return array($even, $odd);\n}", "    if ($num\
    \ < 0)\n        $num = abs($num);\n    $sum = 0;\n    $odd = $even = 0;\n    while\
    \ (1) {\n        if ($num % 2 == 0)\n            $even++;\n        else\n    \
    \        $odd++;\n        $num *= 10;\n        $sum += $num;\n        if ($sum\
    \ >= 10)\n            break;\n    }\n    return array($even, $odd);\n}\n", " \
    \   $num_arr = str_split($num);\n    sort($num_arr);\n    $even = 0;\n    $odd\
    \ = 0;\n    foreach ($num_arr as $key => $value) {\n        if ($value % 2 ==\
    \ 0) {\n            $even += $value;\n        } else {\n            $odd += $value;\n\
    \        }\n    }\n    return array($even, $odd);\n}\n", "    if ($num < 0) return\
    \ array($num);\n    if ($num < 10) return array($num);\n    $evenDigits = $oddDigits\
    \ = array();\n    for ($i = 0; $num > 0; $i++) {\n        if ($num % 2 === 0)\
    \ $evenDigits[] = $num % 10;\n        else $oddDigits[] = $num % 10;\n       \
    \ $num = floor($num / 10);\n    }\n    return array($evenDigits, $oddDigits);\n\
    }\n", "    $arr = [];\n    do {\n        $arr[mt_rand(0, 10)] = mt_rand(0, 10);\n\
    \    } while (count($arr) < count($num));\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $arr[$key] = 1;\n        } else\
    \ {\n            $arr[$key] = 2;\n        }\n    }\n    return $arr;\n}\n", "\t\
    if ($num === 0) {\n\t\treturn array(0,0);\n\t}\n\t$count = [0,0];\n\tdo {\n\t\t\
    $a = $num % 10;\n\t\tif ($a === 2) {\n\t\t\t$count[0]++;\n\t\t} else {\n\t\t\t\
    $count[1]++;\n\t\t}\n\t} while ($num > 0);\n\treturn $count;\n}\n", "    $arr\
    \ = [0, 0];\n    while ($num) {\n        $arr[$num % 2 == 0 ? 0 : 1]++;\n    \
    \    $num /= 2;\n    }\n    return $arr;\n}\n", "    if ($num < 0) {\n       \
    \ throw new \\InvalidArgumentException(\"Negative numbers are not allowed.\");\n\
    \    }\n\n    if ($num == 0) {\n        return array(0, 0);\n    }\n\n    if ($num\
    \ % 2 == 0) {\n        return array($num / 2, 1);\n    }\n    return array(0,\
    \ $num % 2);\n}\n\n/**\n * Given an integer, return an associative array with\
    \ the number of each digit in the number.\n * Example:\n * >>> get_num_digits(1)\n\
    \ * array(0, 1)\n * >>> get_num_digits(12)\n * array(3, 2)\n * >>> get_num_digits(120)\n\
    \ * array(4, 3)\n * >>> get_num_digits(1234)\n * array(3, 4)\n * >>> get_num_digits(100000000000)\n\
    \ * array(7, 5)\n * >>> get_num_digits(123456789)\n * array(6, 6)\n * >>> get_num_digits(12345)\n\
    \ * array(4, 4)\n * >>> get_num_digits(87654321)\n * array(3, 3)\n * >>> get_num_digits(12)\n\
    \ * array(1, 2)\n * >>> get_num_digits(0)\n * array(2, 0)\n * >>> get_num_digits(-2)\n\
    \ * array(3, 0)\n */", "\t$even_odd_count_array = array();\n\tfor ($i = 1; $i\
    \ < 10; $i++) {\n\t\t$even_odd_count_array[$i] = 0;\n\t}\n\tfor ($i = 0; $num\
    \ > 0; $i++) {\n\t\tif ($num % $i == 0) {\n\t\t\t$even_odd_count_array[$i]++;\n\
    \t\t}\n\t\t$num = $num / 10;\n\t}\n\treturn $even_odd_count_array;\n}\n", "  \
    \  $evens = $odds = $digits = array();\n\n    while ($num > 0) {\n        $digits[]\
    \ = $num % 10;\n        $num = floor($num / 10);\n    }\n\n    for ($i = 0, $len\
    \ = count($digits); $i < $len; $i++) {\n        if ($digits[$i] % 2 == 0) {\n\
    \            $evens[] = $digits[$i];\n        } else {\n            $odds[] =\
    \ $digits[$i];\n        }\n    }\n\n    return array($evens, $odds);\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\n<?php\nclass even_odd_count {\n    private\
    \ $num;\n    public function __construct($number) {\n        $this->num = $number;\n\
    \    }\n    public function evens_odd_count() {\n        $even_digits = array();\n\
    \        $odd_digits = array();\n        $i = 0;\n        while ($this->num >\
    \ 0) {\n            $odd_digits[] = $this->num % 10;\n            $this->num =\
    \ floor($this->num / 10);\n        }\n\n        for ($i = 0; $i < count($odd_digits);\
    \ $i++) {\n            if ($odd_digits[$i] % 2 == 0) {\n                $even_digits[]\
    \ = $odd_digits[$i];\n            } else {\n                $even_digits[] = $odd_digits[$i];\n\
    \            }\n        }\n\n        $even_len = count($even_digits);\n      \
    \  $odd_len = count($odd_digits);\n        return $even_len > $odd_len ? array('even'\
    \ => $even_digits, 'odd' => $odd_digits) : array('even' => $odd_digits, 'odd'\
    \ => $even_digits);\n    }\n}\n\n$even = new even_odd_count(-12);\n$odds = $even->evens_odd_count();\n\
    print_r($odds);", "\t$even = array();\n\t$odd = array();\n\twhile ($num) {\n\t\
    \tif ($num % 2 == 0) {\n\t\t\t$even[] = $num;\n\t\t}\n\t\telse {\n\t\t\t$odd[]\
    \ = $num;\n\t\t}\n\t\t$num = $num / 2;\n\t}\n\treturn array($even, $odd);\n}\n",
  "\t$res = array();\n\tfor ($i = 0; $i < $num; $i++) {\n\t\t$res[] = is_even_number($i)\
    \ ?\n\t\t\t$i : 2 * $i + 1;\n\t}\n\treturn $res;\n}\n", "  $odd = array_filter($num);\n\
    \  $even = array_filter($num, 'is_int');\n  \n  return array_map(function($item)\
    \ {\n    return $item[0] % 2 == 0 ? 1 : 2; \n  }, array_combine($even, $odd));\n\
    }\n</code>\n<|/ a |>\n<| a tags=function,php dscore=1 |>\nHere is my solution.\n\
    <code>\n<?php", "  $array = array();\n  while($num > 0){\n    $array[] = strval($num%10);\n\
    \    $num/=10;\n  }\n  $even = 0;\n  $odd = 0;\n  foreach($array as $item){\n\
    \    if($item == 0){\n      $even++;\n    }else{\n      $odd++;\n    }\n  }\n\
    \  return array($even, $odd);\n}\n</code>\nAnd your HTML should look like this:\n\
    <code>\n<?php", "    return array_filter([$num % 2, $num % 4], function($value)\
    \ {\n        return $value == 0 || $value == 4;\n    });\n}\n</code>\n<|/ a tags=php\
    \ dscore=2 |>\n<| a |>\n<code>\n<?php \n$a= array('10','5','8');\n\nfor ($i=0;\
    \ $i < count($a); $i++) {\n    if ($a[$i] == '2' || $a[$i] == '4')\n        $a[$i]\
    \ = '0';\n}\n\n$b = implode('',$a);\n\necho $b;", "    $num = $num - intval($num);\n\
    \    if ($num < 0) {\n        return array(0, 0);\n    }\n\n    $evens  = 0;\n\
    \    $odds   = -1;\n    $sign   = abs($num);\n    $number = abs($num);\n\n   \
    \ if ($number >= 10) {\n        $number = ceil($number);\n        $number *= 10;\n\
    \        if ($number == $num) {\n            $sign  = -$sign;\n            $number\
    \ = ceil($number);\n        }\n        if ($number > pow(10, $number)) {\n   \
    \         $number = pow(10, $number);\n        }\n    }\n\n    while (0 < $number)\
    \ {\n        if ($number % 2 === 0) {\n            $evens++;\n        }\n    \
    \    else {\n            $odds--;\n        }\n        $number /= 10;\n    }\n\n\
    \    return array($evens, $odds);\n}\n", "    // First we count the number of\
    \ even and odd digits.\n    $count = $num;\n    while ($count > 0) {\n       \
    \ if ($count % 2 === 1) {\n            // This digit is odd.\n            $even[]\
    \ = floor($count / 10);\n        } else {\n            // This digit is even.\n\
    \            $odd[] = floor($count / 10);\n        }\n        $count = $count\
    \ % 10;\n    }\n\n    // Now merge the arrays.\n    $even = array_merge($even);\n\
    \    $odd = array_merge($odd);\n\n    // Now we return the array containing the\
    \ count of even and odd digits.\n    return array($even, $odd);\n}\n", "  $even_count\
    \ = 0;\n  $odd_count = 0;\n  $numStr = $num;\n  // Check if an odd number.\n \
    \ if ($numStr % 2 == 0) {\n    $numStr = $numStr - 1;\n    $even_count = 1;\n\
    \  }\n  // Check if an even number.\n  if ($numStr % 2 == 1) {\n    $numStr =\
    \ $numStr - 1;\n    $odd_count = 1;\n  }\n  return array($even_count, $odd_count);\n\
    }\n", "  $even = 0;\n  $odd = 0;\n  while($num > 0) {\n    $mod = $num % 10;\n\
    \    if($mod == 0) {\n      $even += $mod;\n    } else {\n      $odd += $mod;\n\
    \    }\n    $num = $num / 10;\n  }\n  return array($even, $odd);\n}\n", "  if\
    \ ($num === 0)\n    return array(0, 0);\n\n  $even = 0;\n  $odd = 0;\n  do {\n\
    \    if ($num % 2 === 0) {\n      $even++;\n    } else {\n      $odd++;\n    }\n\
    \    $num = $num / 2;\n  } while ($num);\n\n  return array($even, $odd);\n}\n",
  "    $even = 0;\n    $odd = 0;\n    $even_odd = [];\n    while ($num >= 0) {\n \
    \       if ($num % 2 == 0) {\n            $even++;\n        } else {\n       \
    \     $odd++;\n        }\n        $num = $num / 10;\n    }\n    array_push($even_odd,\
    \ $even, $odd);\n    return $even_odd;\n}", "  $count = 0;\n  while ($num > 0)\
    \ {\n    if ($num % 2 == 0) {\n      $count++;\n    }\n    $num = $num / 2;\n\
    \  }\n  return array($count, $count-1);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    What about using [`is_int`](https://www.php.net/manual/en/function.is-int.php)\
    \ instead of `is_numeric`? If it is a number then `is_numeric` returns true, right?\n\
    <|/ c |>\n<| c |>\nYes, but then you're left with the problem of knowing whether\
    \ it's a number or an integer.\n<|/ c |>\n<| a tags=php |>\nYou can check if it's\
    \ a number with is_numeric() then you can multiply it with the other number to\
    \ get the number of digits in that number, or you can subtract it from 10 to get\
    \ the number of digits in that number minus 1, then you can divide that number\
    \ by 10 to get the number of digits in that number divided by 10, then multiply\
    \ it by 10 to get the number of digits in that number times 10, etc.\nFor example:\n\
    <code>\n<?php\n\n$number = 1000;\n$n = 10;\n\n$totalDigits = is_numeric($number)\
    \ * $n;\n\n$digits = $totalDigits / $n;\n\n$finalDigits = $digits * 10;\n\necho\
    \ \"Total Digits: \" . $totalDigits . \"<br>\";\necho \"Digits in Number: \" .\
    \ $digits . \"<br>\";\necho \"Final Digits: \" . $finalDigits . \"<br>\";\n</code>\n\
    Output:\n<code>\nTotal Digits: 10000\nDigits in Number: 9\nFinal Digits: 100\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=php dscore=0 |>\nMy approach to solving\
    \ this would be to convert the number to a string and count the digits as you\
    \ go along.\n<code>\n<?php", "    $odd = $even = 0;\n    $odd_count = $even_count\
    \ = $odd_even_count = 0;\n\n    while ($num > 0) {\n        $mod = ($num % 10);\n\
    \        $num = ($num / 10);\n\n        if ($mod >= 5) {\n            $even_count++;\n\
    \        } else {\n            $odd_count++;\n        }\n    }\n\n    while ($num\
    \ > 0) {\n        $mod = ($num % 10);\n        $num = ($num / 10);\n\n       \
    \ if ($mod % 2 === 1) {\n            $odd_even_count++;\n        }\n    }\n\n\
    \    return [\n        \"even\" => $even_count,\n        \"odd\" => $odd_count,\n\
    \        \"odd_even\" => $odd_even_count\n    ];\n}\n</code>\n<|/ a |>\n<| a tags=php,function,recursion\
    \ |>\nI thought I'd share my approach as I did not find it useful to see another\
    \ approach.  I simply came up with a recursive solution.\n<code>", "    $result\
    \ = [];\n    $num = $num < 0 ? $num * -1 : abs($num);\n    $mod = pow(10, count($result\
    \ = str_split($num)));\n    $mod2 = array_sum($result);\n    $even = $mod2 % 2\
    \ == 0;\n    if ($mod2 > 0 && $mod2 == $mod) {\n        $odd = !$even;\n    }\n\
    \    else {\n        $odd = $even;\n    }\n    $result[] = $even;\n    return\
    \ $result;\n}", "    if (!$num) {\n        return array(0,0);\n    }\n\n    $count\
    \ = array(0,0);\n    for ($x = 1;$x<=strlen($num);$x++) {\n        if ($num%$x==0)\
    \ {\n            $count[0]++;\n        } else {\n            $count[1]++;\n  \
    \      }\n    }\n    return $count;\n}\n", "    $odd = 1;\n    $even = 1;\n  \
    \  while ($num > 0) {\n        if ($num % 2 == 0) {\n            $even++;\n  \
    \      } else {\n            $odd++;\n        }\n        $num = $num / 2;\n  \
    \  }\n    return array($even, $odd);\n}\n", "    $odd = $even = 0;\n    while($num)\
    \ {\n        if($num % 2 == 0) {\n            $even++;\n        } else {\n   \
    \         $odd++;\n        }\n        $num = $num / 10;\n    }\n    return array($even,\
    \ $odd);\n}\n", "    $num = abs($num);\n    if ($num % 2) {\n        $even_number\
    \ = $num;\n    } else {\n        $even_number = $num - 1;\n    }\n    $odd_number\
    \ = 0;\n    do {\n        $odd_number++;\n        $num = $num / 2;\n    } while\
    \ ($num > 0);\n    return array($even_number, $odd_number);\n}", "    // base\
    \ cases\n    if ($num < 1) {\n        return array(1,1);\n    } elseif ($num <\
    \ 10) {\n        return array(1,0);\n    }\n\n    // Recursion\n    $num = abs($num);\n\
    \    $even_odd_count[0] = 1;\n    $odd_count = even_odd_count($num / 10);\n  \
    \  $even_odd_count[1] = $odd_count[1] + 1;\n    return $even_odd_count;\n}\n</code>\n\
    <|/ a tags=algorithm,php,numbers,binary,digits |>\n<| a tags=algorithm,php,numbers,binary,digits\
    \ |>\nAnother recursive way that does not use any extra memory (tested in PHP\
    \ >= 5.6.0)\n<code>", "    return [$num % 2 == 0 ? 1 : $num % 2 == 1 ? 2 : 0];\n\
    }\n\n/**\n * Checks if the given number is a prime number.\n *\n * @param int\
    \ $num the number to check\n * @return bool true if the given number is a prime\
    \ number, false otherwise\n */", "\t$odd_count = 0;\n\t$even_count = 0;\n\t\n\t\
    while($num > 0) {\n\t\t$odd_count++;\n\t\tif($num % 2 == 0) {\n\t\t\t$even_count++;\n\
    \t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even_count, $odd_count);\n\
    }\n", "  $odd = 0;\n  $even = 0;\n  $arr = str_split($num);\n  foreach ($arr as\
    \ $num) {\n    if ($num % 2 == 0) {\n      $even++;\n    }\n    else {\n     \
    \ $odd++;\n    }\n  }\n  return array($even, $odd);\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nHow do you get $number?\n<|/ c |>\n<| a tags=php dscore=0 |>\n<code>\n\
    $num = '123456789';\nlist($even, $odd) = array_filter(str_split($num), 'strlen');\n\
    \necho $even . PHP_EOL;\necho $odd;\n</code>\nOutput\n<code>\n2\n3\n</code>\n\
    <|/ a |>\n<| a tags=php dscore=0 |>\n<code>\n$num = 12345;\n$even = preg_replace('/0+/',\
    \ '', strval($num));\n$odd = preg_replace('/[^01]+/', '', $even);\n\necho \"$even\
    \ even-digit-numbers\";\necho \"$odd odd-digit-numbers\";\n</code>\n<|/ a |>\n\
    <| a tags=php |>\n<code>\necho even_odd_count(\"123456\"); // returns array(1,\
    \ 3)\necho even_odd_count(\"10\");    // returns array(2, 2)\necho even_odd_count(\"\
    001\");   // returns array(2, 1)\necho even_odd_count(\"987654321\"); // returns\
    \ array(1, 2)\necho even_odd_count(\"9876543210\"); // returns array(1, 2)\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 tags=php |>\n<code>", "  $even = $odd = 0;\n\
    \  if ($num >= 0) {\n    $n = abs($num);\n    $a = $n % 10;\n    $b = floor($n\
    \ / 10);\n    if ($a == 0) {\n      $even++;\n    }\n    if ($b != 0) {\n    \
    \  $odd++;\n    }\n  }\n  return array($even, $odd);\n}", "    $evens = array();\n\
    \    $odds = array();\n    $x = 1;\n    while (true) {\n        if ($num < $x)\
    \ {\n            break;\n        }\n        if ($num & 1) {\n            $evens[]\
    \ = $x;\n        }\n        else {\n            $odds[] = $x;\n        }\n   \
    \     $x++;\n    }\n    return array($evens, $odds);\n}\n</code>\n<|/ a |>\n<|\
    \ a |>\nYou could also use recursion to get the number of digits of any given\
    \ number:\n<code>", "    $arr = [];\n    while ($num > 0) {\n        if ($num\
    \ % 2 === 0) {\n            $arr[] = $num;\n        } else {\n            $arr[]\
    \ = intval($num / 2);\n        }\n        $num = intval($num / 10);\n    }\n \
    \   return $arr;\n}\n", "    $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n\
    \        if ($num % 2 == 0) {\n            $even += 1;\n        } else {\n   \
    \         $odd += 1;\n        }\n        $num = $num / 10;\n    }\n    $return\
    \ = array($even, $odd);\n    return $return;\n}\n", "  $even = $odd = array();\n\
    \  for ($i = strlen($num); $i > 0; $i -= 2) {\n    $even[] = substr($num, $i -\
    \ 1);\n    $odd[] = substr($num, 0, $i);\n  }\n  return array($even, $odd);\n\
    }\n", "    $count = [];\n    while($num > 0) {\n        $digit = floor($num /\
    \ 10);\n        if($num % 10 == 0) {\n            $count[$digit] = 1;\n      \
    \  } else {\n            $count[$digit]++;\n        }\n        $num = $num % 10;\n\
    \    }\n    return $count;\n}\n</code>\n<|/ a tags=arrays,algorithm,php dscore=2\
    \ |>\n<| a tags=arrays,algorithm,php |>\nI did it in PHP with recursion.\n<code>",
  "  return [$num % 2 == 0 ? 'even' : 'odd', abs($num)];\n}\n", "    $count = 0;\n\
    \    $odd = 1;\n    for($i = 0; $i < strlen($num); $i++) {\n        if($num[$i]\
    \ % 2 == 0) {\n            $count++;\n        } else {\n            $count +=\
    \ $odd;\n            $odd = 1;\n        }\n    }\n    return array(1, $count,\
    \ $odd, $num);\n}\n", "    $odd = $even = 0;\n\n    if ($num < 0)\n        return\
    \ array(-1, -1);\n\n    while ($num > 0) {\n        $num -= 10;\n        $odd\
    \ += $num % 2;\n        $num = $num / 2;\n    }\n\n    $odd = ($odd * 10 + 1);\n\
    \n    return array($even, $odd);\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nFor\
    \ a slightly more elegant version, see my answer below.\n<|/ c |>\n<| a |>\n<code>\n\
    $num = \"1234\";\n$even = str_repeat(\"0\", count($num) - 1) . substr($num, -1);\n\
    </code>\nThis will work for any number less than 10.\n<|/ a tags=php dscore=3\
    \ |>\n<| a tags=php dscore=2 |>\n<code>\n<?php\n$num1 = 1234;\n$even = str_repeat('0',\
    \ ($num1 - (int)$num1) % $num1);\n$odd  = str_repeat('1', ($num1 - (int)$num1)\
    \ % $num1);\necho \"Odd: $odd Even: $even\";\n</code>\n<|/ a |>\n<| c |>\n`($num1\
    \ - (int)$num1) % $num1` should probably be `($num1 - (int)$num1) / $num1` since\
    \ it handles decimal input well.\n<|/ c |>\n<| c |>\nYou're right - I'm so used\
    \ to working with integers that I forget that PHP has integer division operators.\
    \ I updated the answer.\n<|/ c |>\n<| a tags=php dscore=2 |>\n<code>\n$num = \"\
    1234\";\n$even = str_repeat(\"0\", count($num) - 1) . substr($num, -1);\n</code>\n\
    <|/ a |>\n<| a dscore=1 |>\nHere's my version (which I believe is actually more\
    \ elegant and correct, since it takes advantage of the fact that string length\
    \ operations are integer-based)\n<code>", "\t$even = 0;\n\t$odd = 0;\n\tfor ($i\
    \ = 0; $i < abs($num); $i++) {\n\t\tif ($num % 2 == 0) {\n\t\t\t$even++;\n\t\t\
    } else {\n\t\t\t$odd++;\n\t\t}\n\t}\n\treturn array($even, $odd);\n}", "\t$count\
    \ = 0;\n\t$odd_count = 0;\n\t$odd = false;\n\twhile ($num > 0) {\n\t\tif ($num\
    \ % 2 === 0) {\n\t\t\t$odd_count++;\n\t\t} else {\n\t\t\t$odd_count = 0;\n\t\t\
    \t$count++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($odd_count,\
    \ $count);\n}\n", "    if ($num < 0)\n        return array(0, 0);\n    if ($num\
    \ < 10)\n        return array(0, 0);\n    $i = 0;\n    $count = 0;\n    while\
    \ ($num > 0) {\n        if ($num % 2 == 0)\n            $count++;\n        ++$i;\n\
    \        $num = $num / 10;\n    }\n    return array($i, $count);\n}", "  $odd\
    \ = $num % 2;\n  $even = array_sum(array_slice($num, 0, $odd ? count($num) - 1\
    \ : count($num)));\n  return array($even, $odd);\n}\n", "    return preg_match_all('/0|1|2|3|4|5|6|7|8|9/',\
    \ $num, $matches) ? $matches[0] : '';\n}", "    // Count even digits\n    $evens\
    \ = array_filter(str_split($num), function($char) {\n        return $char ===\
    \ '0' || $char === '2';\n    });\n    // Count odd digits\n    $odds = array_filter(str_split($num),\
    \ function($char) {\n        return $char === '0' || $char === '1';\n    });\n\
    \n    return array_sum($evens) + array_sum($odds);\n}\n", "  $even_odd = array();\n\
    \n  while ($num > 0) {\n    $remainder = $num % 10;\n\n    if ($remainder == 0)\
    \ {\n      $even_odd[] = $remainder;\n    } else {\n      $even_odd[] = 0;\n \
    \   }\n\n    $num = (int) $num / 10;\n  }\n\n  return $even_odd;\n}\n", "    //\
    \ return array(0,0);\n    $result=array(0,0);\n    for($i=0;$i<strlen($num);$i++)\
    \ {\n        $result[$result[0]+($num[$i]%2)]=$num[$i];\n    }\n    return $result;\n\
    }", "  $even_count = 0;\n  $odd_count = 0;\n  while ($num) {\n    $num = $num\
    \ % 10;\n    $num_mod = ($num % 2 == 0) ? $num : $num * -1;\n    $num_mod = ($num_mod\
    \ % 2 == 0) ? $num_mod : $num_mod * -1;\n    $even_count = ($even_count < $num_mod)\
    \ ? $even_count : $num_mod;\n    $odd_count = ($odd_count < $num_mod) ? $odd_count\
    \ : $num_mod;\n  }\n  return array(\"even_count\" => $even_count, \"odd_count\"\
    \ => $odd_count);\n}", "  $evens = array();\n  $odds = array();\n  for ($i = 0;\
    \ $i < strlen($num); $i++) {\n    if ($i % 2 == 0) {\n      $evens[] = $num[$i];\n\
    \    } else {\n      $odds[] = $num[$i];\n    }\n  }\n  return array($evens, $odds);\n\
    }\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\nIt would be great if you could\
    \ add some explanation/comments to help the OP understand how this answer works.\n\
    <|/ c |>\n<| a |>\nHere is my version of solution using some of PHP's native functions.\
    \ \nIt should be efficient as it doesn't involve any string operations.\n<code>",
  "  return [floor($num / 10), $num % 10];\n}\n", "    $sum = 0;\n    $odd_count =\
    \ 0;\n    $even_count = 0;\n    while ($num) {\n        $digit = intval($num %\
    \ 10);\n        $sum = $sum + $digit;\n        $num = intval($num / 10);\n   \
    \     if ($num) {\n            $odd_count++;\n        } else {\n            $even_count++;\n\
    \        }\n    }\n    return array($even_count, $odd_count);\n}\n\n$result =\
    \ even_odd_count(-123456);\nprint_r($result);", "    if ($num < 0) {\n       \
    \ throw new InvalidArgumentException('Argument must be non-negative.');\n    }\n\
    \    $sum = 0;\n    $even = 0;\n    $odd = 0;\n    while (abs($num) > 0) {\n \
    \       $remainder = abs($num) % 10;\n        $num = floor($num / 10);\n     \
    \   $sum += $remainder;\n        if ($remainder === 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n    }\n    return array($even,\
    \ $odd);\n}\n", "  $even_digits = array();\n  $odd_digits = array();\n  if ($num\
    \ < 0) {\n    return $even_digits;\n  }\n  $n = abs($num);\n  for ($i = 0; $i\
    \ < strlen($n); $i++) {\n    if ($n[$i] % 2 == 0) {\n      $even_digits[] = $n[$i];\n\
    \    } else {\n      $odd_digits[] = $n[$i];\n    }\n  }\n  return array(\n  \
    \  'even_digits' => $even_digits,\n    'odd_digits' => $odd_digits,\n  );\n}\n\
    </code>\n<|/ a tags=php dscore=0 |>\n<| a dscore=0 |>\nThis code will solve your\
    \ problem :\n<code>\n<?php\n$n = $_POST['n'];\n$nn = $n * -1;\n$eodd = even_odd_count($nn);\n\
    $even = even_odd_count($nn);\n$n = $eodd['even_digits'];\n$n = $even['odd_digits'];\n\
    $n = implode(\"\", $n);", "    $counts = array(array(0, -1), array());\n    while\
    \ ($num) {\n        if ($num % 2 == 0) {\n            $counts[0][] = $num;\n \
    \       } else {\n            $counts[1][] = $num;\n        }\n        $num =\
    \ $num / 2;\n    }\n\n    return $counts;\n}\n", "\t$odd = $even = 0;\n\twhile\
    \ (!is_null($num)) {\n\t\t$num = (int) $num;\n\t\t$odd = $odd + ($num % 2);\n\t\
    \t$even = $even + ($num / 2);\n\t\t$num = ($num - ($num / 2)) / ($num / 2);\n\t\
    }\n\treturn array($even, $odd);\n}\n\n/**\n * Get the number of times a function\
    \ was called.\n *\n * @param string|callable $fn the function name to be called\n\
    \ * @param int $times The number of times to execute the function\n * @return\
    \ int|false the number of times the function was called, false on error\n */",
  "\t$odd = array();\n\t$even = array();\n\tif ($num < 0) {\n\t\t$num *= -1;\n\t}\n\
    \n\tif ($num == 0 || $num > 1000000000000 || $num == 10000000) {\n\t\treturn array(array(0,\
    \ 1), array(1, 1));\n\t}\n\tdo {\n\t\t$odd = array(array_pop($odd), array_pop($even));\n\
    \t} while ($num > 0);\n\n\treturn array($odd, $even);\n}\n", "  $evens = array_fill(0,\
    \ $num / 2, 0);\n  $odds = array_fill(0, $num - count($evens), 1);\n  return array_merge($evens,\
    \ $odds);\n}\n</code>\n<|/ a |>\n<| a tags=algorithm,php,arrays,data-structures\
    \ dscore=0 |>\nI know this isn't a PHP solution, but here's a general overview\
    \ of the problem (in C++, just for comparison):\n<code>\nvoid even_odd_count(int\
    \ n)\n{\n    // Initialize array with 2 cells, both initialized to false\n   \
    \ bool* even = nullptr;\n    bool* odd = nullptr;\n    // Initialize 2 counters\
    \ to zero\n    even[0] = odd[0] = 0;\n    // Initialize a boolean variable to\
    \ keep track of whether the number is even or odd\n    bool isOdd = false;\n \
    \   // Perform the following\n    while (n != 0)\n    {\n        // Increment\
    \ the first counter\n        if (isOdd == true)\n        {\n            odd[0]++;\n\
    \        }\n        else\n        {\n            even[0]++;\n        }\n     \
    \   // Store the number that is being tested in the first cell of the array\n\
    \        even = &even[0];\n        // Test whether the number is even or odd\n\
    \        isOdd = (n % 2 == 1);\n        // Decrement the number being tested by\
    \ the value of n%2\n        n = n / 2;\n    }\n    // Print the even and odd numbers\n\
    \    std::cout << even[0] << std::endl;\n    std::cout << odd[0] << std::endl;\n\
    }\n</code>\nThe variable n will be your input number. I've initialized an array\
    \ of boolean variables to store even and odd numbers. Initialize these variables\
    \ to false and 0 respectively. Keep track of whether the number is even or odd\
    \ with the boolean variable isOdd.\nThe while loop will keep on looping until\
    \ n becomes 0.\nDuring the loop, each time we perform n = n/2, the value of n\
    \ will change. If the number is odd, then it becomes the value of n/2. If it is\
    \ even, then it becomes the value of (n-1)/2. So, we need two counters, one for\
    \ even and one for odd. So, we assign the address of even = &even[0] and odd =\
    \ &odd[0] which is the first cell in the array. We check if n is even or odd by\
    \ checking the value of n%2, and accordingly increment the second counter.\nWhen\
    \ the number becomes 0, the loop will end. We print both the counters.\n<|/ a\
    \ |>\n<| c |>\nI understand that this isn't a PHP solution. I just wanted to show\
    \ a general overview of the problem.\n<|/ c |>\n<| a |>\nI like Kevin's solution,\
    \ but I want to show a more general approach:\n<code>\n<?php", "    $odd_digits\
    \ = array();\n    $even_digits = array();\n    if ($num >= 0) {\n        $positive_num\
    \ = abs($num);\n        $odd = 0;\n        $even = 0;\n        for ($i = $positive_num;\
    \ $i >= 1; $i--) {\n            if ($i % 2 == 0) {\n                $even++;\n\
    \            } else {\n                $odd++;\n            }\n        }\n   \
    \     return array((int)$even, (int)$odd);\n    } else {\n        $positive_num\
    \ = abs($num);\n        $odd = 0;\n        $even = 0;\n        for ($i = $positive_num;\
    \ $i <= -1; $i--) {\n            if ($i % 2 == 0) {\n                $even++;\n\
    \            } else {\n                $odd++;\n            }\n        }\n   \
    \     return array((int)$even, (int)$odd);\n    }\n}", "    if (!$num) {\n   \
    \     return array();\n    }\n\n    $evens = array_fill(0, abs($num), '0');\n\
    \    $odds = array_fill(0, abs($num) + 1, '0');\n\n    while ($num) {\n      \
    \  $temp = $num % 10;\n        $odds[] = $temp;\n        $num = ($num - $temp)\
    \ / 10;\n    }\n\n    return array_merge($odds, $evens);\n}\n</code>\n<|/ a |>\n\
    <| c |>\nPlease explain how this works.\n<|/ c |>\n<| c |>\nadded a short explanation.\
    \ hope this helps.\n<|/ c |>\n<| c |>\nI got it! Thank you\n<|/ c |>\n<| a dscore=0\
    \ |>\nTry this (I used recursion):\n<code>\n$number = 1234;", "    $num = abs($num);\n\
    \    $results = [0, 0];\n    do {\n        if ($num % 2 === 0) {\n           \
    \ $results[] = 2;\n        }\n        if ($num % 2 !== 0) {\n            $results[]\
    \ = 1;\n        }\n        $num = floor($num / 10);\n    } while ($num);\n   \
    \ return $results;\n}\n", "    $arr = [0, 0];\n    if ($num < 0) return $arr;\n\
    \    $remainder = $num % 10;\n    $arr[$remainder % 2] = 1;\n    $num -= $remainder;\n\
    \    $count = 1;\n    while ($num > 0) {\n        $num = $num / 10;\n        $count++;\n\
    \    }\n    $arr[0] = $count;\n    return $arr;\n}\n\n/**\n * Return the first\
    \ 10 prime numbers. \n */", "    // Odd\n    return array_filter(str_split($num),\
    \ function($char) {\n        return ($char == $num % 2) ? 1 : null;\n    });\n\
    }\n</code>\nThis would return a two-element array. The odd digit is the first\
    \ element in the array, and the even digit is the second element.\n<|/ a |>\n\
    <| c |>\nThe only problem with this is it requires the string to be reversed to\
    \ work properly.\n<|/ c |>\n<| c |>\nTrue, but it's trivial to fix that. It also\
    \ has the benefit of being O(1) in PHP. :)\n<|/ c |>\n<| c |>\nAgreed, but you\
    \ also have to reverse the array before returning it, which is an O(n) operation.\
    \ Really though, this is a great solution, +1.\n<|/ c |>\n<| a |>\nFor those who\
    \ don't mind using functional programming in PHP 5.5+, you can do this in 2 lines\
    \ of code using array_filter and array_map\n<code>\n<?php\n\n$num = -12;\n\n$result\
    \ = array_filter( array_map( function($char) {\n    return $char > 0 ? array($char,\
    \ 1) : null;\n}, str_split(abs($num)) );\n\nvar_dump($result);\n</code>\nOutput\n\
    <code>\narray(2) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(1)\n}\n</code>\n<|/ a dscore=4\
    \ tags=math,php |>\n<| a tags=math,php dscore=3 |>\nThe question asks us to find\
    \ an O(logN) solution and to do this we should be able to find the number of odd\
    \ digits in $num faster than O(N). However, given that most numbers have less\
    \ than 100 digits, we can make a simple assumption that $num is already in reverse\
    \ order. \nSo, if we were to iterate through the string from right to left, we\
    \ know that the first digit will be the last digit and the last digit will be\
    \ the first. So, we can get the count of the odd digits by simply counting how\
    \ many times the first digit is odd.\n<code>\n$odd = $num > 0;\n$count = -1;\n\
    for ($i = strlen($num) - 1; $i >= 0; $i--)\n{\n  if ($num[$i] % 2 == 1)\n  {\n\
    \    $count++;\n  }\n}\nreturn $odd ? $count : -$count;\n</code>\n<|/ a |>\n<|\
    \ c |>\nThis is an O(n) solution\n<|/ c |>\n<| c |>\nYes it is an O(n) solution\
    \ and it's correct since `strlen()` returns the number of characters in the string,\
    \ which is constant time for strings. However, it ", "    return array($num %\
    \ 2 == 0 ? 1 : 2, $num % 2 == 1 ? 1 : 2);\n}\n", "\tif ($num < 0) {\n\t\treturn\
    \ array(1, 0);\n\t}\n\t$evens = 0;\n\t$odds = 0;\n\twhile (1) {\n\t\tif ($num\
    \ % 2 === 0) {\n\t\t\t$evens++;\n\t\t} else {\n\t\t\t$odds++;\n\t\t}\n\t\tif ($num\
    \ < 1) {\n\t\t\tbreak;\n\t\t}\n\t\t$num = $num / 2;\n\t}\n\treturn array($evens,\
    \ $odds);\n}", "\tstatic $even_odd = [1 => 1, 2 => 1];\n\t\n\tif ($num < 0 ||\
    \ !is_int($num)) {\n\t\treturn $even_odd;\n\t}\n\n\tdo {\n\t\t$num *= 10;\n\t\t\
    $odd = 0;\n\t\tforeach ($even_odd as $i => $num) {\n\t\t\tif ($num % 2 == 0) {\n\
    \t\t\t\t$even++;\n\t\t\t} else {\n\t\t\t\t$odd++;\n\t\t\t\t$even_odd[$i] = $odd\
    \ + $even;\n\t\t\t}\n\t\t}\n\t} while (--$num);\n\n\treturn $even_odd;\n}\n\n\
    /**\n * Returns a random integer between min (inclusive) and max (inclusive)\n\
    \ */", "    $count = [0 => 0, 1 => 0];\n    if ($num < 0) {\n        $num *= -1;\n\
    \    }\n    while ($num > 0) {\n        $mod = $num % 10;\n        $count[$mod]\
    \ += 1;\n        $num = $num / 10;\n    }\n    return $count;\n}\n", "  $result\
    \ = [];\n  $length = 0;\n  while($num > 0) {\n    $result[$length] = $num % 2\
    \ == 0 ? 0 : 1;\n    $num = intval($num / 10);\n    $length++;\n  }\n  return\
    \ $result;\n}\n", "    $odd = $even = 0;\n    $tens = $num % 10;\n    if ($num\
    \ > 0) {\n        if ($num == $tens) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n    }\n    return array($even, $odd);\n}", " \
    \   $even_count = intval($num / 2 * 2);\n    $odd_count = intval($num / 2 * 2);\n\
    \    if ($even_count > 0) {\n        $even_count = count($even_count);\n    }\n\
    \    if ($odd_count > 0) {\n        $odd_count = count($odd_count);\n    }\n \
    \   $even_odd = array();\n    $even_odd[] = $even_count;\n    $even_odd[] = $odd_count;\n\
    \    return $even_odd;\n}\n", "    if ($num < 0)\n        return array(-1, 1);\n\
    \    if ($num > 0)\n        return array(1, 0);\n    $odd = 1;\n    $even = 1;\n\
    \    $i = 0;\n    while ($i < strlen($num)) {\n        $num[$i] = $num[$i] % 10;\n\
    \        if ($num[$i] % 2 == 0)\n            $even++;\n        else\n        \
    \    $odd++;\n        $i++;\n    }\n    return array($even, $odd);\n}", "    $even_odd\
    \ = [0 => 0, 1 => 0];\n    $temp = 0;\n    \n    while($num != 0) {\n        $temp\
    \ = $num % 10;\n        $even_odd[$temp]++;\n        $num = ($num - $temp) / 10;\n\
    \    }\n    \n    return $even_odd;\n}", "    $result = array();\n    $digit =\
    \ 0;\n    while ($num > 0) {\n        $digit = $num % 10;\n        $num  /= 10;\n\
    \        if ($num == 0) {\n            $result[] = $digit;\n        }\n    }\n\
    \    return $result;\n}\n", "  $arr = array();\n  while($num > 0) {\n    $arr[]\
    \ = intval(floor($num/2));\n    $num = abs($num % 2);\n  }\n  return $arr;\n}\n",
  "    $count = array();\n    // TODO: Implement Function\n    // write your code\
    \ here\n    if ($num < 0){\n        $count[0] = 1;\n        $count[1] = -1;\n\
    \        return $count;\n    }\n    $num = $num % 10;\n    if($num == 0){\n  \
    \      $count[0] = 1;\n        $count[1] = -1;\n        return $count;\n    }\n\
    \    if($num == 1){\n        $count[0] = 1;\n        return $count;\n    }\n \
    \   $count[0] = 2;\n    if($num > 1){\n        $count[1] = -1;\n    }\n    return\
    \ $count;\n}\n", "    $odd_count = 0;\n    $even_count = 0;\n    $num = abs($num);\n\
    \    while (!($num % 2)) {\n        $even_count++;\n        $num = $num / 2;\n\
    \    }\n    while (($num % 2)) {\n        $odd_count++;\n        $num = $num /\
    \ 2;\n    }\n    return array($even_count, $odd_count);\n}\n</code>\n<|/ a tags=php,while-loop\
    \ |>\n<| a tags=php,while-loop |>\n<code>\n<?php", "    return $num % 2 == 0 ?\
    \ array(1, 0) : array(0, 1);\n}", "    // initialize array\n    $even_odd = array();\n\
    \    \n    // store even and odd digits in array\n    if ($num < 0)\n        $even\
    \ = even_odd_count(abs($num));\n    else {\n        $n = abs($num);\n        \n\
    \        // count number of evens\n        $even = 0;\n        for ($i = 0; $i\
    \ <= $n; $i += 2) {\n            $even++;\n        }\n        \n        // count\
    \ number of odds\n        $odd = 0;\n        for ($i = $n; $i >= 0; $i -= 2) {\n\
    \            $odd++;\n        }\n    }\n    \n    // return array and store\n\
    \    return array_merge($even, $odd);\n}\n", "    $oddCount = 1;\n    $evenCount\
    \ = 1;\n\n    while ($num) {\n        if ($num % 2 === 0) {\n            $evenCount++;\n\
    \        } else {\n            $oddCount++;\n        }\n        $num /= 10;\n\
    \    }\n\n    return array($evenCount, $oddCount);\n}\n", "    $evens = array();\n\
    \    $odds = array();\n    $sign = $num < 0 ? '-' : '';\n    $num = abs($num);\n\
    \    if ($num >= 0) {\n        while ($num > 0) {\n            if ($num % 2 ===\
    \ 0) {\n                $evens[] = $num;\n            } else {\n             \
    \   $odds[] = $num;\n            }\n            $num = ($num / 2);\n        }\n\
    \    } else {\n        while ($num < 0) {\n            if ($num % 2 === 0) {\n\
    \                $odds[] = $num;\n            } else {\n                $evens[]\
    \ = $num;\n            }\n            $num = ($num / 2);\n        }\n    }\n\n\
    \    return array($evens, $odds);\n}\n", "  $result = [];\n  while ($num > 0)\
    \ {\n    $num = intdiv($num, 10);\n    $is_even = ($num % 2) == 0;\n    $is_odd\
    \ = !$is_even;\n    $result[] = $is_even ? 1 : 0;\n    $result[] = $is_odd ? 1\
    \ : 0;\n  }\n  return $result;\n}\n", "  $evens_count = [];\n  $odds_count = array();\n\
    \  if ($num < 0 ) {\n    return $evens_count, $odds_count;\n  }\n  $num = (string)$num;\n\
    \  $num = strrev($num);\n  for($i = 0; $i < strlen($num); $i++) {\n    if ($num[$i]\
    \ == '0') {\n      $evens_count[] = $i;\n    } else {\n      $odds_count[] = $i;\n\
    \    }\n  }\n  return $evens_count, $odds_count;\n}\n\n/**\n * Finds the longest\
    \ substring in a string that is a palindrome.\n */", "    $odd = 1;\n    $even\
    \ = 1;\n    $count = array();\n\n    while ($num !== 0) {\n        if ($num &\
    \ 1) {\n            $num = ($num >> 1) ^ ($num >> 1);\n        }\n        else\
    \ {\n            $odd = ($odd << 1) + 1;\n        }\n\n        $even = ($even\
    \ << 1) + 1;\n        $count[] = $odd;\n        $count[] = $even;\n        $num\
    \ = ($num >> 1);\n    }\n\n    return $count;\n}\n</code>\n<|/ a dscore=3 tags=php,performance,bit-manipulation\
    \ |>\n<| c |>\nThis one is very nice. I like the idea of using an array.\n<|/\
    \ c |>\n<| c |>\nI've got an idea. How about storing the numbers in reverse order,\
    \ and starting from the right until an odd number is found?\n<|/ c |>\n<| c |>\n\
    That is certainly possible. I've updated my answer to include an implementation.\n\
    <|/ c |>\n<| a |>\nHere's a solution that uses only one integer and uses array\
    \ slice to achieve a better memory usage.\n<code>", "    $even = $odd = array();\n\
    \    if ($num < 0 || $num == 0) {\n        return array($even, $odd);\n    }\n\
    \n    $max_digit = $this->digit_count($num);\n    for ($i = 0; $i < $max_digit;\
    \ ++$i) {\n        if ($num % 2 == 0) {\n            $even[] = $i;\n        }\
    \ else {\n            $odd[] = $i;\n        }\n        $num = $num / 2;\n    }\n\
    \    return array($even, $odd);\n}\n\n/**\n * Find the number of digits in the\
    \ decimal representation of the number.\n * @param  float $num\n * @return int\n\
    \ */", "    $digits = str_split($num);\n    $result = [0, 0];\n    foreach ($digits\
    \ as $digit) {\n        if (isset($result[$digit % 2]))\n            $result[$digit\
    \ % 2] += 1;\n        else\n            $result[$digit % 2] = 1;\n    }\n    return\
    \ $result;\n}\n", "    $num = abs($num);\n    if ($num > 0) {\n        $even_num\
    \ = 0;\n        $odd_num = 0;\n        $remainder = 0;\n\n        while ($num\
    \ >= 10) {\n            $remainder = $num % 10;\n            $num = $num / 10;\n\
    \n            if ($remainder == 0) {\n                $even_num++;\n         \
    \   } else {\n                $odd_num++;\n            }\n        }\n\n      \
    \  return [$even_num, $odd_num];\n    } else {\n        return [0, 0];\n    }\n\
    }\n</code>\n<|/ a dscore=0 tags=php |>\n<| a |>\nJust to make it simple, here\
    \ is my answer\n<code>", "    $odd_count = 0;\n    $even_count = 0;\n    $i =\
    \ 0;\n    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit\
    \ % 2 == 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n        $num = $num / 10;\n        $i++;\n    }\n    return array($even_count,\
    \ $odd_count);\n}\n", "    $num = abs($num);\n    $odd = array_filter(str_split($num),\
    \ function($char) {\n        return $char & 1;\n    });\n    $even = array_filter(str_split($num),\
    \ function($char) {\n        return $char & 2;\n    });\n    return array(count($odd),\
    \ count($even));\n}\n", "    $even_count = odd_count = 0;\n    while($num > 0)\
    \ {\n        $remainder = $num % 10;\n        if ($remainder == 0) $even_count++;\n\
    \        else $odd_count++;\n        $num  = floor($num / 10);\n    }\n    return\
    \ array($even_count, $odd_count);\n}\n</code>\n<|/ a dscore=3 tags=php,algorithm\
    \ |>\n<| c |>\nI think it is easier to count digits this way: $num = (string)\
    \ $num;\n<|/ c |>\n<| a dscore=2 |>\nHere is my implementation\n<code>", "  $even_counter\
    \ = 1;\n  $odd_counter = 0;\n\n  while (true) {\n    $dividend = (int) ($num /\
    \ 10);\n    $num = $num % 10;\n\n    if ($dividend == 0) {\n      $even_counter++;\n\
    \    } else {\n      $odd_counter++;\n    }\n\n    if ($num <= 0) {\n      break;\n\
    \    }\n  }\n\n  return array($even_counter, $odd_counter);\n}\n", "    $even\
    \ = floor($num / 10);\n    $odd = $num % 10;\n    return array((int)$even, (int)$odd);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThank you for your answer, but i need more details\
    \ please :)\n<|/ c |>\n<| c |>\nOk, check it out. Do you still need details?\n\
    <|/ c |>\n<| c |>\nYes, i need more details please :)\n<|/ c |>\n<| c |>\nThank\
    \ you, i appreciate your help, but i need more details please :D\n<|/ c |>\n<|\
    \ c |>\nI edited my answer. Check it out and let me know if you still need details.\n\
    <|/ c |>\n<| a |>\nHere's another approach:\n<code>\n$num = -123;\n$even = str_pad((string)\
    \ $num, 8, '0', STR_PAD_LEFT);\n$odd = substr($even, 4, 4);\n\nvar_dump($even,\
    \ $odd);\n</code>\n<|/ a tags=php dscore=0 |>\n<| c |>\nThank you for your answer,\
    \ but i need more details please :)\n<|/ c |>\n<| a |>\nI guess this might help\
    \ you :)\n<code>\n$number = 3456;\n$num = intval($number);\n$string = (string)\
    \ $num;\n$even = array_fill(0, count($string), 0);\n$odd = array_fill(0, count($string),\
    \ 0);\n$even = $num % 10 === 0 ? 'even' : 'odd';\n$odd = $num % 10 === 0 ? 'odd'\
    \ : 'even';\n$odd = intval($odd);\n$odd = array_fill(0, $odd, 0);\n$even = array_fill(0,\
    \ $even, 0);\n$even = $num % 10 === 0 ? 'even' : 'odd';\n$even = intval($even);\n\
    $even = array_fill(0, $even, 0);\n\necho 'Even: ';\nprint_r($even);\necho '<br>';\n\
    echo 'Odd: ';\nprint_r($odd);\n</code>\n<|/ a tags=php dscore=0 |>\n<| c |>\n\
    Thank you for your answer, but i need more details please :)\n<|/ c |>\n<| c |>\n\
    Please check now\n<|/ c |>\n<| c |>\nplease provide more details so we can help\
    \ you :)\n<|/ c |>\n<| c |>\nplease provide more details so we can help you :)\n",
  "    $even_num = 0;\n    $odd_num = 0;\n    $count = 1;\n\n    while( ( $num !=\
    \ 0 ) && ( $num % 2 == 0 ) ) {\n        $even_num++;\n        $num = $num / 2;\n\
    \    }\n\n    $num = $num;\n    while( ( $num != 0 ) && ( $num % 2 != 0 ) ) {\n\
    \        $odd_num++;\n        $num = $num / 2;\n    }\n    return array( $even_num,\
    \ $odd_num );\n}\n\n$nums = array(\n    12, 13, 8, 18, 15, 29, 31, 17, 30, \n\
    \    26, 34, 39, 24, 42, 42, 30, 37, 26, \n    37, 29, 39, 42, 33, 42, 42, 30,\
    \ 34, \n    43, 26, 42, 42, 22, 25, 29, 27, 30, \n    32, 27, 22, 27, 21, 28,\
    \ 31, 32, 34, \n    35, 27, 38, 42, 39, 30, 36, 33, 32, \n    33, 34, 36, 32,\
    \ 33, 37, 35, 38, 37, \n    36, 34, 37, 35, 34, 37, 38, 35, 34, \n    36, 37,\
    \ 36, 37, 38, 35, 33, 35, 34, \n    35, 33, 35, 36, 34, 37, 37, 37, 36, \n   \
    \ 37, 38, 38, 36, 37, 37, 37, 38, 36, \n    37, 38, 37, 38, 38, 36, 37, 38, 37,\
    \ \n    38, 37, 38, 38, 37, 36, 38, 37, 38, \n    38, 36, 37, 38, 38, 37, 37,\
    \ 38, 38, \n    37, 37, 38, 38, 38, 37, 38, 38, 38, \n    37, 37, 38, 38, 38,\
    \ 37, 36, 38, 38, \n    38, 38, 36, 38, 38, 38, 37, 37, 38, \n    38, 38, 38,\
    \ 37, 37, 37, 38, 38, 38, \n    37, 38, 38, 38, 38, 37, 37, 38, 38, \n    37,\
    \ 37, 38, 38, 38, 37, 37, 38, 38, \n    37, 37, 38, 38, 38, 37, 38, 38, 38, \n\
    \    37, 37, 38, 38, 38, 37, 37, 38, 38, \n    38, 38, 38, 37, 37, 38, 38, 38,\
    \ 37, \n    37, 38, 38, 38, 38, 37, 37, 38, 38, \n    37, 37, 38, 38, 38, 37,\
    \ 37, 38, 38, \n    37, 37, 38, 38, 38, 37, 37, 38, 38, \n    37, 37, 38, 38,\
    \ 38, 37, 37, 38, 38, \n    37, 37, 38, 38, 38, 37, 37, 38, 38, \n    37, 37,\
    \ 38, 38, 38, 37, 37, 38, 38, \n    37, 37, 38, 38, 38, 37, 37, 38, 38, \n   \
    \ 37, 37, 38, 38, 38, 37, 37, 38, 38, \n    37, 37, 38, 38, 38, 37, 37, 38, 38,\
    \ \n    37, 37, 38, 38, 38, 37, 37, 38, 38, \n    37, 37, 38, 38, 38, 37, 37,\
    \ 38, 38, \n    37, 37, 38, 38, 38, 37, 37, 38, 38, \n    37, 37, 38, 38, 38,\
    \ 37, 37, 38, 38, \n    37, 37, 38, 38, 38, 37, 37, 38, 38, \n    37, ", "  //\
    \ Write your code here\n  $arr = [];\n  if ($num < 0) {\n    return $arr;\n  }\n\
    \  for ($i = 0; $i < $num; ++$i) {\n    $odd = $num % 2;\n    $num = $num / 2;\n\
    \    $even = $num % 2;\n    if ($odd) {\n      $arr[] = $odd;\n    }\n    if ($even)\
    \ {\n      $arr[] = $even;\n    }\n  }\n  return $arr;\n}", "    $even_count \
    \  = 0;\n    $odd_count    = 0;\n    if ($num < 0) {\n        $num *= -1;\n  \
    \      $even_count = 1;\n        $odd_count   = 1;\n    }\n    while (!is_zero($num))\
    \ {\n        if (is_even($num)) {\n            $even_count++;\n        } else\
    \ {\n            $odd_count++;\n        }\n        $num = $num / 10;\n    }\n\
    \    return array($even_count, $odd_count);\n}\n", "  $arr = array();\n  for($i=0;$i<strlen($num);$i++){\n\
    \    $arr[] = strlen(str_replace($i,\"*\",$num));\n  }\n  return $arr;\n}\n",
  "    $odd_count = 0;\n    $even_count = 0;\n    while ($num > 0) {\n        $odd\
    \ = $num % 10;\n        if ($odd === 0 || $odd === 7) {\n            $even_count++;\n\
    \        } else {\n            $odd_count++;\n        }\n        $num = (int)($num\
    \ / 10);\n    }\n    return array($even_count, $odd_count);\n}\n", "    $odd =\
    \ 1;\n    $even = 1;\n\n    $temp = (string) $num;\n    $temp_array = str_split($temp);\n\
    \n    foreach ($temp_array as $key => $value) {\n        if ($value == \"0\")\
    \ {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \    }\n\n    return array('even' => $even, 'odd' => $odd);\n}\n</code>\n<|/ a\
    \ dscore=2 tags=php,arrays |>\n<| a |>\nHere is another way, which I believe to\
    \ be more efficient:\n<code>\n<?php", "    $result = [];\n    $even  = 0;\n  \
    \  $odd   = 0;\n    if ($num < 0) {\n        return $result;\n    }\n    $remainder\
    \ = $num;\n\n    while ($remainder !== 0) {\n        $dividend = (int)($remainder\
    \ / 10);\n        $remainder = $remainder % 10;\n\n        if ($dividend === 0)\
    \ {\n            $even++;\n        } else {\n            $odd++;\n        }\n\n\
    \        $result[] = $dividend;\n    }\n\n    return array( $even, $odd );\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=php,math |>\nI believe this is\
    \ more efficient...\n<code>", "\t$sum = $num;\n\t$count = $num;\n\twhile ($num\
    \ > 0) {\n\t\t$num -= $num % 2;\n\t\t$count++;\n\t}\n\t$odd = $count % 2;\n\t\
    while ($odd === 0 && $count > 0) {\n\t\t$sum -= $num % 2;\n\t\t$count--;\n\t\t\
    $num -= $num % 2;\n\t\t$odd++;\n\t}\n\treturn array($count, $odd);\n}", "    $odd\
    \ = ($num % 2) ? 1 : 2;\n    $even = (int) ($num / 10);\n    return [$even, $odd];\n\
    }\n", "\t$odd = $even = 0;\n\n\tif ($num < 0) {\n\t\treturn array($odd, $even);\n\
    \t}\n\n\tdo {\n\t\tif ($num % 2) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\
    \t\t}\n\t} while ($num > 0);\n\n\treturn array($odd, $even);\n}\n", "  $even_count\
    \ = 0;\n  $odd_count = 0;\n  $even_odd_count_array = array();\n  if ($num < 0)\
    \ {\n    $odd_count = 1;\n  }\n  while ($num > 0) {\n    if ($num % 2 == 0) {\n\
    \      $even_count += 1;\n    } else {\n      $odd_count += 1;\n    }\n    $num\
    \ = $num / 2;\n  }\n  if ($odd_count > 0) {\n    $even_odd_count_array = $even_odd_count_array\
    \ + array($odd_count);\n  }\n  if ($even_count > 0) {\n    $even_odd_count_array\
    \ = $even_odd_count_array + array($even_count);\n  }\n  return $even_odd_count_array;\n\
    }", "  $even = 0;\n  $odd = 0;\n  do {\n    if ($num % 2 === 0) {\n      $even++;\n\
    \    } else {\n      $odd++;\n    }\n    $num = floor($num / 10);\n  } while ($num\
    \ > 0);\n  return array($even, $odd);\n}\n\n/**\n * Takes a decimal value and\
    \ rounds to the specified precision.\n *\n * @param $num\n *   The number to round\
    \ down.\n * @param $precision\n *   The number of decimal points to return. May\
    \ be negative to round up.\n *   If omitted, defaults to 1.\n *\n * @return\n\
    \ *   The rounded number.\n */", "    // Write your code here\n}\n</cell>\n<cell>",
  "  if ($num < 0) {\n    return array(0, 1);\n  }\n  $remain = $num;\n  $odd = 1;\n\
    \  $even = 0;\n  while ($remain) {\n    $mod = $remain % 10;\n    $odd = $odd\
    \ % 2;\n    $even = $even % 2;\n    $remain = $remain / 10;\n  }\n  return array($even,\
    \ $odd);\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nIn a very simple way using modulus\
    \ division and if conditions you can do this\n<code>\n<?php\n", "  $even = 0;\n\
    \  $odd = 0;\n  while($num > 0) {\n    $mod = $num % 10;\n    if ($mod === 0)\
    \ {\n      $even++;\n    } else {\n      $odd++;\n    }\n    $num = $num / 10;\n\
    \  }\n  return array($even, $odd);\n}", "\t$arr = array_reverse(str_split($num));\n\
    \tarray_walk($arr, function(&$v){$v = intval($v);});\n\tarray_walk($arr, function(&$v){$v\
    \ = $v % 2;});\n\treturn $arr;\n}", "    $num = (int) $num;\n    if ($num < 0)\
    \ {\n        $num *= -1;\n    }\n    $arr = array();\n    $is_even = floor(log($num,\
    \ 2)) == 0;\n    $count = 1;\n    while ($num > 0) {\n        if ($num % 2 ===\
    \ 0) {\n            if ($is_even) {\n                $arr[] = $count;\n      \
    \          $is_even = false;\n            }\n            $count++;\n        }\n\
    \        $num = floor($num / 2);\n    }\n    return $arr;\n}\n", "    $result\
    \ = [];\n    for ($i = 0; $i < 10; $i++) {\n        $result[$i] = intval($num\
    \ / pow($i, 2));\n        $num = abs($num % $i);\n    }\n\n    return $result;\n\
    }\n", "    $countArray = array();\n    if ($num < 0)\n    {\n        return $countArray;\n\
    \    }\n\n    // Get the digits of $num as string\n    $digits = dechex($num);\n\
    \    // Get number of digits in the string\n    $numDigits = strlen($digits);\n\
    \    // Get the even and odd values\n    $even = $num % 2;\n    $odd = ($num -\
    \ 1) % 2;\n\n    // Loop through the digits of the string\n    for ($i = 0; $i\
    \ < $numDigits; $i++)\n    {\n        // Get the current digit of the string $digits\n\
    \        $digit = $digits[$i];\n        // If the current digit is even\n    \
    \    if ($digit == '0')\n        {\n            // Add to the count array the\
    \ even value\n            $countArray[] = $even;\n            // Get the next\
    \ digit of the string $digits\n            $digit = $digits[++$i];\n         \
    \   // If the next digit is odd\n            if ($digit == '1')\n            {\n\
    \                // Add to the count array the odd value\n                $countArray[]\
    \ = $odd;\n            }\n        }\n    }\n\n    return $countArray;\n}\n", " \
    \   $count = 0;\n    if ($num < 0) {\n        return array($num, 1);\n    }\n\
    \    do {\n        $temp = floor($num / 10);\n        $count++;\n    } while ($num\
    \ > 0 && $num != $temp);\n    return array($count, $count-1);\n}", "  // Only\
    \ odd numbers are even numbers.\n  if ($num < 0)\n    return array(\n      0,\n\
    \      1\n    );\n\n  $count = 1;\n  $even = 1;\n  $odd = 1;\n\n  while (true)\
    \ {\n    if ($num % 2 === 0) {\n      $even++;\n      continue;\n    }\n\n   \
    \ $odd++;\n    if ($odd > $count) {\n      $count = $odd;\n    }\n\n    $num =\
    \ $num / 2;\n  }\n\n  return array($count, $count);\n}\n", "    $evens = array();\n\
    \    $odds = array();\n    while ($num > 0) {\n        $evens[] = $num % 10;\n\
    \        $num = $num / 10;\n    }\n    while ($num != 0) {\n        $odds[] =\
    \ $num % 10;\n        $num = $num / 10;\n    }\n    return array($evens, $odds);\n\
    }\n", "    $odd = array();\n    $even = array();\n    $num = (int)$num;\n    $num_even\
    \ = 0;\n    $num_odd = 0;\n    while($num > 0){\n        $mod = $num % 10;\n \
    \       if($mod != 0){\n            $odd[] = $mod;\n            $num -= $mod;\n\
    \            $num_odd++;\n        }else{\n            $even[] = $mod;\n      \
    \      $num -= $mod;\n            $num_even++;\n        }\n    }\n    return array($num_even,\
    \ $num_odd);\n}\n</code>\n<|/ a tags=php,function,arrays |>\n<| c |>\nThanks for\
    \ this - this worked well for me.  I tried to add this as a comment to the first\
    \ reply, but I don't have enough reputation.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "\t$even_count = 0;\n\t$odd_count = 0;\n\twhile($num > 0) {\n\t\tif(fmod($num, '2')\
    \ === 0) {\n\t\t\t$even_count++;\n\t\t} else {\n\t\t\t$odd_count++;\n\t\t}\n\t\
    \t$num -= intval($num / 10);\n\t}\n\treturn array($even_count, $odd_count);\n}",
  "  // Write your code here\n  $odd = $num = abs($num);\n  $even = 0;\n  if ($num\
    \ <= 0) {\n    return array($even, $odd);\n  }\n  while (--$num) {\n    if ($num\
    \ % 2 === 0) {\n      $even++;\n    }\n    else {\n      $odd++;\n    }\n  }\n\
    \  return array($even, $odd);\n}\n", "  if ($num < 0) {\n    return [];\n  }\n\
    \  if ($num < 0) {\n    return [];\n  }\n  $result = [];\n  if ($num > 0) {\n\
    \    $tens = floor($num / 10);\n    if ($tens % 2 != 0) {\n      $result[] = $tens;\n\
    \    }\n    $num = floor($num % 10);\n  }\n  while ($num > 0) {\n    $tens = floor($num\
    \ / 10);\n    if ($tens % 2 != 0) {\n      $result[] = $tens;\n    }\n    $num\
    \ = floor($num % 10);\n  }\n  return $result;\n}\n", "    $num_str = strval($num);\n\
    \    $num_str = preg_replace('/[^0-9]/', '', $num_str);\n    $even_odd_digits\
    \ = array_fill(0, count($num_str), '0');\n    $even_odd_digits[0] = 1;\n    $even_odd_digits[count($num_str)\
    \ - 1] = 2;\n    return $even_odd_digits;\n}\n</code>\nSo the idea is that you\
    \ get rid of all the non-digits (since they would mess up the counting), then\
    \ you fill the array with 0s and 1s, starting with the even digits and then moving\
    \ up to the odd digits.\nThe only thing is that this does not work for negative\
    \ numbers. If you need to handle negative numbers, you would need to convert the\
    \ number to an absolute value first, then get the digits. \n<code>\n$abs = abs($num);\n\
    $digits = strval(abs($num));\n</code>\n<|/ a dscore=0 tags=php,algorithm |>\n\
    <| a |>\nHere's a function that calculates how many numbers in the set are even,\
    \ given any number (positive or negative). It does this by generating all possible\
    \ pairs of numbers between 1 and the given number. We then count how many even\
    \ (or odd) numbers there are for each pair. \n<code>\n<?php", "    if ($num <\
    \ 0) {\n        return array(-1, -1);\n    }\n\n    $even = 0;\n    $odd = 0;\n\
    \    while ($num > 0) {\n        $temp = $num % 10;\n        if ($temp == 0) $even++;\n\
    \        else $odd++;\n        $num /= 10;\n    }\n\n    return array($even, $odd);\n\
    }\n", "    $odd = $even = 0;\n    while ($num > 0) {\n        $num -= $num % 2;\n\
    \        $even++;\n        $num = $num / 2;\n        $odd++;\n    }\n    return\
    \ array($even, $odd);\n}\n</code>\n<|/ a tags=php |>\n<| a tags=php |>\n<code>\n\
    <?php", "    $arr = array();\n    $count = 0;\n    while (is_numeric($num)) {\n\
    \        $num = abs($num);\n        $digit = $num % 10;\n        $arr[] = $digit;\n\
    \        $count++;\n        $num = (int) ($num / 10);\n    }\n    return array('even_count'\
    \ => $count - 1, 'odd_count' => $count);\n}\n", "    // return an empty array\
    \ if the number is negative\n    if($num < 0) {\n        return array();\n   \
    \ }\n\n    $even = array();\n    $odd = array();\n\n    while($num) {\n      \
    \  if($num % 2 == 0) {\n            $even[] = $num;\n        } else {\n      \
    \      $odd[] = $num;\n        }\n\n        $num = $num / 2;\n    }\n\n    return\
    \ array($even, $odd);\n}\n", "    $result = array();\n    $temp = $num;\n    while\
    \ ($temp > 0) {\n        $temp = floor($temp / 10);\n        $result[] = ($temp\
    \ % 2 == 0) ? 1 : 2;\n    }\n    return $result;\n}\n", "    $even = 0;\n    $odd\
    \ = 0;\n    $number = abs($num);\n    while ($number) {\n        if ($number %\
    \ 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n   \
    \     }\n        $number /= 10;\n    }\n    return array($even, $odd);\n}", " \
    \   if ($num < 0) return array(1, 1);\n    if ($num < 10) return array(1, $num\
    \ % 2);\n    if ($num < 100) return array(1, $num % 2 + 1);\n    if ($num < 1000)\
    \ return array(2, $num % 2 + 2);\n    if ($num < 10000) return array(2, $num %\
    \ 2 + 4);\n    if ($num < 100000) return array(2, $num % 2 + 8);\n    if ($num\
    \ < 1000000) return array(4, $num % 2 + 16);\n    if ($num < 10000000) return\
    \ array(4, $num % 2 + 32);\n    if ($num < 100000000) return array(8, $num % 2\
    \ + 64);\n    if ($num < 1000000000) return array(8, $num % 2 + 128);\n}", " \
    \   $result = [0, 0];\n    do {\n        $result[0] += $num % 2 ? 1 : 0;\n   \
    \     $num = (int)($num / 10);\n        $result[1] += $num % 2 ? 1 : 0;\n    }\
    \ while ($num);\n    return $result;\n}\n", "    $count = array();\n    if ($num\
    \ < 0) {\n        return $count;\n    }\n    $odd = 1;\n    $even = 1;\n    $x\
    \ = abs($num);\n    while ($x > 0) {\n        $count[$even] = $even;\n       \
    \ $count[$odd] = $odd;\n        $x /= 10;\n        if ($x === 0) {\n         \
    \   $odd *= 10;\n        }\n        else {\n            $even *= 10;\n       \
    \ }\n    }\n    return $count;\n}\n</code>\n<|/ a |>\n<| a |>\nTry this,\n<code>\n\
    <?php", "    $result = [];\n    $count = [];\n\n    // find the even and odd numbers\n\
    \    while ($num > 0) {\n        if ($num % 2 == 0) {\n            $count[] =\
    \ $num;\n        } else {\n            $result[] = $num;\n        }\n        $num\
    \ = ($num / 10);\n    }\n\n    // find the count\n    $count[] = 0;\n    for ($i\
    \ = 1; $i <= count($count); $i++) {\n        $count[$i] = $count[$i - 1] + $count[$i];\n\
    \    }\n\n    return $result;\n}\n", "\t$counts = array();\n\t$digits = array_reverse(str_split(strval($num)));\n\
    \tforeach ($digits as $digit) {\n\t\t$counts[$digit & 1] += $digit & 1;\n\t}\n\
    \treturn $counts;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nI know it's\
    \ been a while but I came up with my own answer. I hope it helps someone else\
    \ out there in the future. \n<code>", "  $even = array();\n  $odd = array();\n\
    \  $sign = $num < 0 ? '-' : '';\n  if ($num == 0) {\n    return 0;\n  }\n\n  //\
    \ First loop through the number. If it is even or odd, save it to the array.\n\
    \  foreach (str_split($num) as $value) {\n    if ($value === '0' || $value ===\
    \ '1') {\n      if ($value === '0') {\n        $even[] = $value;\n      } else\
    \ {\n        $odd[] = $value;\n      }\n    }\n  }\n\n  // If the number is negative,\
    \ add 1 to $odd.\n  if ($sign === '-') {\n    $odd[] = '1';\n  }\n\n  // Add one\
    \ to $even and subtract one from $odd to find if the number is even or odd.\n\
    \  return array((count($even) + 1), (count($odd) - 1));\n}\n", "  $even  = array_filter($this->array_filter($this->array_filter($num,\
    \ function ($n) {\n    return $n % 2 === 0;\n  }), function ($n) {\n    return\
    \ $n % 2 !== 0;\n  }));\n\n  $odd = array_filter($this->array_filter($this->array_filter($num,\
    \ function ($n) {\n    return $n % 2 !== 0;\n  }), function ($n) {\n    return\
    \ $n % 2 === 0;\n  }));\n\n  return [$even, $odd];\n}\n", "    $odd_count = 0;\n\
    \    $even_count = 0;\n    while ($num > 0) {\n        $mod = $num % 10;\n   \
    \     if ($mod % 2 == 0) {\n            $even_count++;\n        } else {\n   \
    \         $odd_count++;\n        }\n        $num = $num / 10;\n    }\n    return\
    \ array(\"even\" => $even_count, \"odd\" => $odd_count);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis would give you the wrong result for `even_odd_count(-543)`;\
    \ you should instead initialize `odd_count` with `odd_count = $even_count = $num\
    \ / 10;`. Similarly, you should return `array(\"even\" => $even_count, \"odd\"\
    \ => $odd_count)` in the case where `$num` is zero.\n<|/ c |>\n<| c |>\nThis is\
    \ actually a better implementation of the same code I've posted here, with two\
    \ small modifications: I made a typo in the first line and in the return statement.\
    \ I also made a change that I forgot in the first line. That change made it so\
    \ that `even_odd_count(0)` would give the same result as `even_odd_count(0)`,\
    \ so I added a check to ensure that I only used the return value if the value\
    \ of `$num` is non-zero. My answer, however, had been posted before your typo\
    \ correction, and my answer had been posted before your change with the typo.\n\
    <|/ c |>\n<| a tags=php |>\nThis would be my implementation, that also handles\
    \ the edge case that $num is zero by returning the same array as $num is zero:\n\
    <code>", "    if ($num < 0){\n        return array(0,1);\n    }\n    $odd = $num\
    \ = abs($num);\n    $odd  = ($odd & 1);\n    $even = (($odd >> 1) & 1);\n    return\
    \ array($even, $odd);\n}\n", "  $evens = array();\n  $odds = array();\n\n  //\
    \ Convert $num to a string and remove all non-digits (like '-').\n  // $num_str\
    \ = str_replace(array('-', '*'), array('', ''), $num);\n\n  // Iterate over each\
    \ character in the string $num_str\n  for ($num_str = str_replace(array('-', '*'),\
    \ array('', ''), $num); $num_str; $num_str = str_replace(array('-', '*'), array('',\
    \ ''), $num_str)) {\n    // Add $num_str to the odd array.\n    if (isset($odds[$num_str]))\
    \ {\n      $odds[$num_str] += 1;\n    } else {\n      $odds[$num_str] = 1;\n \
    \   }\n\n    // Add $num_str to the even array.\n    if (isset($evens[$num_str]))\
    \ {\n      $evens[$num_str] += 1;\n    } else {\n      $evens[$num_str] = 1;\n\
    \    }\n  }\n\n  // Return the array.\n  return array($evens, $odds);\n}\n", " \
    \   return array(intval(floor(log10($num)) + 1), intval(floor(log10($num) - 1)));\n\
    }", "  $even = 0;\n  $odd = 0;\n  $sum = 0;\n  while ($num) {\n    $digit = $num\
    \ % 10;\n    if ($digit % 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n\
    \    }\n    $sum += $digit;\n    $num = $num / 10;\n  }\n  return array($even,\
    \ $odd);\n}\n\n/**\n * Calculates the factorial of a number.\n *\n * @param int\
    \ $num The number you wish to calculate.\n *\n * @return int The factorial of\
    \ the number passed in.\n */", "    $evens = $odds = $evens_odds = 0;\n    if\
    \ ($num >= 0) {\n        $is_even = true;\n        $is_odd = true;\n    } else\
    \ {\n        $is_even = false;\n        $is_odd = false;\n    }\n    do {\n  \
    \      if ($is_even) {\n            if ($num % 2 === 0) {\n                $evens++;\n\
    \            }\n            $num = $num / 2;\n            $is_even = false;\n\
    \        } else {\n            if ($num % 2 !== 0) {\n                $odds++;\n\
    \            }\n            $num = $num / 2;\n            $is_odd = true;\n  \
    \      }\n    } while ($num > 0);\n    return array($evens, $odds);\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThank you. I am very interested in the approach you offered.\
    \ Could you tell me what happens when the user enters something other than an\
    \ int or a negative number? Does it throw an error? I would appreciate it if you\
    \ could explain what happens step by step.\n<|/ c |>\n<| c |>\nI just ran a test\
    \ and it throws an error. Thanks for your help.\n<|/ c |>\n<| c |>\nThanks again,\
    \ that is a much more elegant solution than what I was trying to write.\n<|/ c\
    \ |>\n<| c |>\nI think this does not work when $num is negative. In my test (with\
    \ num -9), it returns array(2, 0).\n<|/ c |>\n<| c |>\nYes, that's right. I'm\
    \ sorry I didn't notice that.\n<|/ c |>\n<| a dscore=4 tags=php,division,math\
    \ |>\nUse Math Functions:\n<code>\n$num = 3932;\n\n$odd = number_format($num,\
    \ 0, '', '');\n$even = number_format($num / 10, 0, '', '');\n\necho $even; //\
    \ output : 0\necho $odd; // output : 3\n</code>\n<|/ a |>\n<| c |>\nThis should\
    \ be the accepted answer.\n<|/ c |>\n<| a dscore=3 tags=php,division,math |>\n\
    <code>", "    $num = abs($num);\n    $odd_count = 0;\n    $even_count = 0;\n \
    \   while (!($num & 1)) {\n        $odd_count++;\n        $num >>= 1;\n    }\n\
    \    do {\n        $even_count++;\n        $num >>= 1;\n    } while ($num);\n\
    \    return array($even_count, $odd_count);\n}\n", "    $digits_array = str_split($num);\n\
    \    $even_digits = array_filter($digits_array, function ($digit) {\n        return\
    \ $digit % 2 == 0;\n    });\n    $odd_digits = array_filter($digits_array, function\
    \ ($digit) {\n        return $digit % 2 != 0;\n    });\n    $count_even_digits\
    \ = count($even_digits);\n    $count_odd_digits = count($odd_digits);\n    return\
    \ array('even_digits' => $count_even_digits, 'odd_digits' => $count_odd_digits);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI feel like this is overkill for this\
    \ question\n<|/ c |>\n<| a dscore=1 |>\nHere is a solution that uses only mathematical\
    \ operations and does not require extra variables. It will also work with negative\
    \ numbers.\n<code>", "  $even_count  = 0;\n  $odd_count  = 0;\n\n  while( ( $num\
    \ != 0) && ( $num % 2 == 0 )) {\n    $even_count++;\n    $num      /= 2;\n  }\n\
    \n  while( ( $num != 0) && ( $num % 2 != 0 )) {\n    $odd_count++;\n    $num \
    \     /= 2;\n  }\n\n  return array(\n    'even_count' => $even_count,\n    'odd_count'\
    \  => $odd_count\n  );\n}\n</code>\nNow we only need to write a function that\
    \ does what we need:\n<code>", "  $arr = array();\n  $n = abs($num);\n  $i = 0;\n\
    \  while ($num > 0) {\n    $arr[$i] = $n % 2;\n    $num = $num / 2;\n    $i++;\n\
    \  }\n  return $arr;\n}\n", "\t$even = [];\n\t$odd = [];\n\tfor ($i = strlen($num);\
    \ $i >= 0; $i--) {\n\t\t$num = intval($num);\n\t\tif ($num & 1) {\n\t\t\t$odd[]\
    \ = strrev($num);\n\t\t} else {\n\t\t\t$even[] = strrev($num);\n\t\t}\n\t}\n\t\
    return array_merge($even, $odd);\n}", "\tif ($num == 0)\n\t\treturn array(1, 1);\n\
    \telse if ($num < 0)\n\t\treturn array(1, 2);\n\t\n\twhile (true) {\n\t\tif ($num\
    \ % 2 === 0) {\n\t\t\t$num = $num / 2;\n\t\t\t$odd_digits = 1;\n\t\t} else {\n\
    \t\t\t$num = ($num - 1) / 2;\n\t\t\t$odd_digits = 2;\n\t\t}\n\t\tif ($num == 0)\n\
    \t\t\tbreak;\n\t\t\n\t\t$even = array_shift($digits);\n\t\t$odd = array_shift($digits);\n\
    \t\tif ($even % 2 === 0)\n\t\t\t$odd_digits = $odd_digits + 1;\n\t\t\n\t\tif ($odd\
    \ % 2 === 0)\n\t\t\t$odd_digits = $odd_digits + 1;\n\t}\n\t\n\treturn array($odd_digits,\
    \ $even);\n}", "  return array_filter(\n    str_split($num),\n    function ($n)\
    \ {\n      // Return odd if the number has an odd number of digits\n      return\
    \ ($n % 2 !== 0);\n    },\n    ARRAY_FILTER_USE_BOTH\n  );\n}\n</code>\n<|/ a\
    \ dscore=3 |>\n<| a tags=string,php,integer,arrays dscore=1 |>\n<code>\n<?php\n\
    $string = '123456789';\n$array = str_split($string);\n$result = array();\nforeach\
    \ ($array as $item) {\n    if (is_numeric($item)) {\n        $result[] = (int)$item;\n\
    \    }\n}\nvar_dump($result);\n</code>\n<|/ a |>\n<| c |>\nThanks, I wasn't aware\
    \ of the `is_numeric()` function.\n<|/ c |>\n<| a tags=string,php,integer,arrays\
    \ |>\n<code>", "    $num = abs($num);\n    $even = 0;\n    $odd = 0;\n    $i =\
    \ 1;\n\n    while ($num != 0) {\n        $mod = $num % 10;\n        if ($mod ===\
    \ 0) {\n            $even++;\n        } else if ($mod > 0) {\n            $odd++;\n\
    \        } else {\n            $even++;\n            $odd++;\n        }\n    \
    \    $num = $num / 10;\n        $i++;\n    }\n\n    return array($even, $odd);\n\
    }\n", "    if (abs($num) < 0) {\n        return array(0, 0);\n    }\n    $count\
    \ = array(0, 0);\n    $last_digit = 0;\n    for ($i = 0; $i < strlen($num); $i++)\
    \ {\n        $digit = $num[$i];\n        if ($digit == '-') {\n            if\
    \ ($last_digit == '-') {\n                $count[0]++;\n            } else {\n\
    \                $count[1]++;\n            }\n            $last_digit = 0;\n \
    \       } else {\n            $count[$digit == '+' ? 1 : 0]++;\n            $last_digit\
    \ = $digit;\n        }\n    }\n    return $count;\n}", "    if ($num < 0) {\n\
    \        throw new \\InvalidArgumentException();\n    }\n\n    $evens = 0;\n \
    \   $odds = 0;\n\n    while ($num) {\n        $odds += ($num % 2 == 1);\n    \
    \    $num = (int) ($num / 2);\n    }\n\n    if ($odds > 0) {\n        $evens++;\n\
    \    }\n\n    return array($evens, $odds);\n}\n\n$result = even_odd_count(-1234);",
  "    $odd = array_diff(str_split($num), array(0));\n    $even = array_diff(str_split($num),\
    \ $odd);\n    return array(count($even), count($odd));\n}\n", "  $even = array();\n\
    \  $odd = array();\n  while ($num >= 10) {\n    $digit = $num % 10;\n    $num\
    \ = $num / 10;\n    $odd = array($digit, $digit);\n  }\n  while ($num >= 1) {\n\
    \    $digit = $num % 10;\n    $num = $num / 10;\n    $even = array($digit, $digit);\n\
    \  }\n  return array($even, $odd);\n}", "    $odd_count = 0;\n    $even_count\
    \ = 0;\n    while($num > 0) {\n        $odd_count++;\n        if($num % 2 == 0)\
    \ {\n            $even_count++;\n        }\n        $num = ($num / 2);\n    }\n\
    \    return array($even_count, $odd_count);\n}\n", "    $even = 0;\n    $odd =\
    \ 0;\n    while($num != 0) {\n        $mod = $num % 10;\n        if($mod == 0)\
    \ {\n            $even += 1;\n        } else {\n            $odd += 1;\n     \
    \   }\n        $num = $num / 10;\n    }\n    return array($even, $odd);\n}\n",
  "    $result = [];\n    for ($i = 1; $i <= $num; $i++) {\n        if ($num % $i\
    \ === 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n\
    }\n", "  $count = 0;\n  $odd_digits = 0;\n  $even_digits = 0;\n  for ($i = 0;\
    \ $i < strlen($num); $i++) {\n    if ($num[$i] % 2 == 0) {\n      $count++;\n\
    \      $even_digits++;\n    } else {\n      $count--;\n      $odd_digits++;\n\
    \    }\n  }\n  return array($even_digits, $odd_digits);\n}\n", "  return [$num\
    \ % 2 == 0 ? 1 : 2, $num % 2 == 0 ? 2 : 1];\n}\n</code>\n<|/ a |>\n<| a |>\n<code>\n\
    $a = \"-27896\";\n$b = explode(\"-\", $a);\n$c = array_filter($b, function($x)\
    \ { return !empty($x); });\n$c = array_sum($c);\necho $c;\n</code>\n<|/ a dscore=1\
    \ tags=php |>\n<| c |>\nPlease add some explanation to your answer such that others\
    \ can learn from it\n<|/ c |>\n<| c |>\nIt seems a bit verbose for something as\
    \ simple as a number. Also, you forgot to check if the array is empty before calculating\
    \ the sum.\n<|/ c |>\n<| a |>\n<code>\n$sum = 0;\nforeach (explode(\"-\", $number)\
    \ as $x) {\n    if ($x > 0) {\n        $sum += $x;\n    }\n}\n</code>\n<|/ a dscore=1\
    \ tags=php |>\n<| c |>\nYou should probably test if the exploded item is an int,\
    \ rather than relying on PHP's implicit type casting, but yeah.\n<|/ c |>\n<|\
    \ a dscore=0 |>\nTry this:\n<code>\n$num = \"-27896\";\n$num2 = explode(\"-\"\
    , $num);\n$sum = 0;\nforeach ($num2 as $key => $val) {\n    if ($val != 0) {\n\
    \        $sum+= $val;\n    }\n}\necho $sum;\n</code>\n<|/ a tags=php |>\n<| a\
    \ tags=php |>\n<code>\n<?php\n", "  return array_map(function ($num) {\n    //\
    \ If the number is odd. Then, count the digits of the number.\n    return ($num\
    \ % 2 !== 0) ? $num : count(str_split($num));\n  }, range(0, abs($num)));\n}\n\
    </code>\n<|/ a |>\n<| a dscore=0 |>\nMy php code which worked for me for both\
    \ positive and negative numbers:\n<code>\n<?php\n\nclass Math {\n\n    public\
    \ function evenOdd($n)\n    {\n        $r = $n%2;\n\n        $numDigits = strlen($n);\n\
    \        $mod = pow(10,$numDigits - 1);\n\n        // if remainder is 0 i.e $n\
    \ is even \n        if ($r == 0) {\n            return $n;\n        }\n\n    \
    \    // if remainder is not 0 i.e $n is odd\n        else {\n            $m =\
    \ ($n % $mod);\n            // if m is even \n            if($m == 0){\n     \
    \           $n = ($n / $mod) * $mod;\n                $r = $n%2;\n           \
    \ }\n            return $n;\n        }\n\n    }\n}\n", "    $results = [0, 0];\n\
    \    while ($num > 0) {\n        $mod = $num % 10;\n        if ($mod % 2 == 1)\
    \ {\n            $results[1]++;\n        } else {\n            $results[0]++;\n\
    \        }\n        $num = $num / 10;\n    }\n    return $results;\n}\n", "  \
    \  $even = 0;\n    $odd = 0;\n    while($num > 0) {\n        $last = array_pop(array_reverse(array_slice(str_split($num),\
    \ 0, 2)));\n        if($last == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n        $num = (string)$num;\n    }\n    return\
    \ array($even, $odd);\n}\n", "    $num = (int)$num;\n    if ($num < 0)\n     \
    \   return array(0,1);\n    $digits = $num % 10;\n    if ($num < 10)\n       \
    \ return array(1,1);\n    if ($digits == 0 || $digits == 5)\n        return array(1,1);\n\
    \    $num = $num / 10;\n    $num = $num % 10;\n    if ($num < 10)\n        return\
    \ array(2,1);\n    if ($digits == 0 || $digits == 4)\n        return array(2,1);\n\
    \    return array(3,1);\n}\n</code>\n<|/ a tags=math,algorithm,php,string dscore=2\
    \ |>\n<| c |>\nJust wanted to add that your answer is correct, but your code is\
    \ not.\n<|/ c |>\n<| c |>\nyeah it seems that way when I am running it online,\
    \ but I just tried it on my local wamp and it seems to work fine.  I am not sure\
    \ why yours isn't, but I am sure that is a mistake on my part.  Thank you though\
    \ for your help.\n<|/ c |>\n<| c |>\nI added `@code` to the code so that it would\
    \ display an error when it doesn't find the required number of even and odd digits,\
    \ it does this by checking if the count is equal to 0.  My apologies for the late\
    \ response to my post.  Thanks for the help.\n<|/ c |>\n<| a tags=math,algorithm,php,string\
    \ |>\nIf your input array is a php array, you can do it like this. \n<code>\n\
    $input = array('1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100');\n\
    \n$even_odd_digits_count = even_odd_count($input);\n</code>\nThis will return\
    \ $", "    $num = abs($num);\n    $even = 0;\n    $odd = 0;\n    while (true)\
    \ {\n        $temp = $num % 10;\n        if ($temp == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n        if (!$num) {\n            break;\n        }\n    }\n    return\
    \ array($even, $odd);\n}\n", "    $num = abs($num);\n    $even_count = 0;\n  \
    \  $odd_count = 0;\n\n    while (true) {\n        if ($num % 2 == 0) {\n     \
    \       $even_count++;\n        } else {\n            $odd_count++;\n        }\n\
    \n        $num /= 10;\n        if ($num == 0) {\n            break;\n        }\n\
    \    }\n\n    return array($even_count, $odd_count);\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThanks I took your code and expanded it a bit so that it could\
    \ have more then 2 digits. But still not working, see edit\n<|/ c |>\n<| c |>\n\
    The first number in your array should be 1, not 0. Because it's an even number,\
    \ and the first odd number is 1.\n<|/ c |>\n<| c |>\nOh my bad, it's late and\
    \ I didn't check properly. Thanks :)\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n\
    \n    $arr = array(1,2,3,4,5,6,7,8,9);\n    $even_count = $odd_count = 0;\n  \
    \  foreach($arr as $val){\n        if($val % 2 != 0){\n            $odd_count++;\n\
    \        } else {\n            $even_count++;\n        }\n    }\n    echo '<pre>';\n\
    \    print_r($arr);\n    echo '</pre>';\n    echo \"Even \" . $even_count . \"\
    \ odd \" . $odd_count . \"<br/>\";\n\n    ?>\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a tags=php,arrays |>\nThis should work:\n<code>\n<?php\n\n    function evenodd($num)\
    \ {\n        $num = abs($num);\n        $even_count = 0;\n        $odd_count =\
    \ 0;\n\n        while (true) {\n            if ($num % 2 == 0) {\n           \
    \     $even_count++;\n            } else {\n                $odd_count++;\n  \
    \          }\n\n            $num /= 10;\n            if ($num == 0) {\n      \
    \          break;\n            }\n        }\n        return array($even_count,\
    \ $odd_count);\n    }\n\n    $tests = array(1,2,3,4,5,6,7,8,9);\n    $results\
    \ = array();\n\n    foreach($tests as $test) {\n        $results[] = evenodd($test);\n\
    \    }\n\n    print_r($results);\n    ?>\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This works, but it doesn't show the result as an array. Like so: Array ( [0] =>\
    \ Array ( [0] => 1 [1] => 1 ) [1] => Array ( [0] => 2 [1] => 1 ) [2] => Array\
    \ ( [0] => 3 [1] => 1 ) [3] => Array ( [0] => 4 [1] => ", "\t$result = [];\n\t\
    if ($num >= 0) {\n\t\t$num *= 10;\n\t\tfor ($i = strlen($num); $i >= 0; $i -=\
    \ 2) {\n\t\t\t$result[] = $num[$i];\n\t\t}\n\t}\n\treturn $result;\n}\n", "\t\
    $even_count = 0;\n\t$odd_count = 0;\n\twhile ($num > 0) {\n\t\tif ($num % 2 ==\
    \ 0) {\n\t\t\t$even_count++;\n\t\t} else {\n\t\t\t$odd_count++;\n\t\t}\n\t\t$num\
    \ = $num / 2;\n\t}\n\treturn array($even_count, $odd_count);\n}\n", "    $evens\
    \ = array_filter(\n        array_map(\n            'intval',\n            str_split($num.toString(),\
    \ 2)\n        ),\n        function ($n) {\n            return $n % 2 === 0;\n\
    \        }\n    );\n\n    $odds = array_filter(\n        array_map(\n        \
    \    'intval',\n            str_split($num.toString(), 2)\n        ),\n      \
    \  function ($n) {\n            return $n % 2 !== 0;\n        }\n    );\n\n  \
    \  return array(count($evens), count($odds));\n}\n</code>\nThen you can calculate\
    \ the sum of both arrays and multiply them with their respective counts:\n<code>\n\
    $sumOfEvens = $evens[0] * $evens[1];\n$sumOfOdds = $odds[0] * $odds[1];\n$sumOfEvensAndOdds\
    \ = $sumOfEvens + $sumOfOdds;\n\n$result = $sumOfEvensAndOdds / pow(10, count($evens)\
    \ * 2);\n</code>\n<|/ a tags=php,math |>\n<| c |>\nThis is awesome, thank you\
    \ so much! I've been struggling with this for a while now.\n<|/ c |>\n<| c |>\n\
    Glad I could help!\n<|/ c |>\n<| c |>\nI'm having trouble understanding how to\
    \ implement this. Do I put this in my `calculateTotal()` function or in my `getNumberOfDigits()`\
    \ function? How do I return the numbers from the functions?\n<|/ c |>\n<| c |>\n\
    It depends on how you want to calculate the sum of both arrays. You probably should\
    \ put that into a separate function and then call it twice in the end.\n<|/ c\
    \ |>\n<| c |>\nOkay, I understand how the code is supposed to work, but I don't\
    \ understand how to implement it. I'm new to PHP, so I apologize if this is a\
    \ dumb question, but how do I put this into a new function? Sorry.\n<|/ c |>\n\
    <| a tags=php,math |>\nThis is a bit of cheating but a fun little challenge:\n\
    <code>\n<?php", "    $even_count = 0;\n    $odd_count = 0;\n\n    while ($num\
    \ >= 0) {\n        if ($num % 2 == 0) {\n            $even_count++;\n        }\
    \ else {\n            $odd_count++;\n        }\n        $num -= 1;\n    }\n\n\
    \    return [\n        'even' => $even_count,\n        'odd' => $odd_count,\n\
    \    ];\n}\n", "    $sum = $odd = 0;\n    $i = 0;\n    while ($num !== 0) {\n\
    \        $num = intval($num / 10);\n        $sum += $num;\n        $i++;\n   \
    \ }\n\n    foreach (range(0, $i) as $i) {\n        $odd = $odd + $sum % 2;\n \
    \       $sum = $sum / 2;\n    }\n    return array($odd, $sum);\n}\n", "    if\
    \ ($num < 0) {\n        return false;\n    }\n    $num = (int) $num;\n    $odd\
    \ = $num = abs($num);\n    $even = array();\n    while (count($even) < $odd) {\n\
    \        $even[] = array_shift($num);\n    }\n    return $even;\n}\n</code>\n\
    <|/ a tags=math,php dscore=0 |>\n<| a tags=math,php dscore=0 |>\n<code>\n<?php\n\
    \nclass Calculator{\n\n    /**\n     * Function for add two number\n     * \n\
    \     * float $a \n     * float $b\n     * float\n     */\n    public static function\
    \ addNum($a, $b){\n        return $a + $b;\n    }\n\n    /**\n     * Function\
    \ for subtract two number\n     * \n     * float $a \n     * float $b\n     *\
    \ float\n     */\n    public static function subNum($a, $b){\n        return $a\
    \ - $b;\n    }\n\n    /**\n     * Function for multiply two number\n     * \n\
    \     * float $a \n     * float $b\n     * float\n     */\n    public static function\
    \ mulNum($a, $b){\n        return $a * $b;\n    }\n\n    /**\n     * Function\
    \ for divide two number\n     * \n     * float $a \n     * float $b\n     * float\n\
    \     */\n    public static function divNum($a, $b){\n        return $a / $b;\n\
    \    }\n\n    /**\n     * Function for factorial\n     * \n     * float $a \n\
    \     * float\n     */\n    public static function factorialNum($a){\n       \
    \ if($a < 0){\n            throw new Exception('Factorial Error');\n        }\n\
    \        return !isset($a) ? 1 : $a * self::factorialNum($a - 1);\n    }\n\n \
    \   /**\n     * Function for find sum of array\n     * \n     * array $array\n\
    \     * float\n     */\n    public static function findSum(array $array){\n  \
    \      if(!count($array)){\n            return 0;\n        }\n        return array_reduce($array,array('Calculator',\
    \ 'addNum'),0);\n    }\n\n    /**\n     * Function for find product of array\n\
    \     * \n     * array $array\n     * float\n     */\n    public static function\
    \ findProduct(array $array){\n        if(!count($array)){\n            return\
    \ 1;\n        }\n        return array_reduce($array,array('Calculator', 'mulNum'),1);\n\
    \    }\n\n    /**\n     * Function for find quotient of array\n     * \n     *\
    \ array $array\n     * float\n     */\n    public static function findQuotient(array\
    \ $array){\n        if(!count($array)){\n", "    $even_sum = 0;\n    $odd_sum\
    \ = 0;\n    \n    while ($num > 0) {\n        if ($num % 2 == 0) {\n         \
    \   $even_sum += $num;\n        } else {\n            $odd_sum += $num;\n    \
    \    }\n        $num = $num / 2;\n    }\n    \n    return array($even_sum, $odd_sum);\n\
    }\n", "    if (!is_int($num)) {\n        return array(0, 0);\n    }\n\n    $result\
    \ = 0;\n    $limit = 10 ** (count(str_split($num)) - 1);\n    for ($i = 0; $i\
    \ < $limit; $i++) {\n        if ($num % 2 == 0) {\n            $result++;\n  \
    \      }\n        else {\n            if ($result > 0) {\n                break;\n\
    \            }\n        }\n        $num = $num / 10;\n    }\n    return array($result,\
    \ $num);\n}\n", "    $n = $num;\n    $odd = $even = 0;\n    while (!($n % 2))\
    \ {\n        $odd = $odd + 1;\n        $n = (int) ($n / 10);\n    }\n    while\
    \ (!($n % 1)) {\n        $even = $even + 1;\n        $n = (int) ($n / 10);\n \
    \   }\n    return array($even, $odd);\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n", "    $even_digits = array();\n    $odd_digits = array();\n\n\
    \    $num = abs($num);\n    $count = 0;\n\n    do {\n        if ($num % 2 == 0)\
    \ {\n            $even_digits[] = $num % 10;\n            $count++;\n        }\
    \ else {\n            $odd_digits[] = $num % 10;\n            $count++;\n    \
    \    }\n        $num = (int)$num / 10;\n    } while ($num > 0);\n\n    if ($count\
    \ % 2 == 0) {\n        $even_digits[] = 1;\n    }\n\n    return array($even_digits,\
    \ $odd_digits);\n}\n", "    $count = 0;\n    $even = array();\n    $odd = array();\n\
    \    do {\n        $count++;\n    } while ($num > 0 && $num % 2 != 0);\n    while\
    \ ($num > 0) {\n        $num = $num / 2;\n        $even[$count] = $num;\n    }\n\
    \    while ($num < 0) {\n        $num = -$num;\n        $odd[$count] = $num;\n\
    \    }\n    return array($even, $odd);\n}\n", "    if ($num < 0)\n        return\
    \ array(1, 1);\n    $counts = array(1 => 0, 2 => 0);\n    while (true) {\n   \
    \     $num = $num / 10;\n        $last = $counts[0];\n        $counts[0] = $counts[1];\n\
    \        $counts[1] += ($num % 2 ? 0 : 1);\n        if (!$num)\n            break;\n\
    \    }\n    return $counts;\n}\n", "    $odd = $even = $count = 0;\n    while\
    \ ($num > 0) {\n        $remainder = $num % 10;\n        if ($remainder == 1)\
    \ {\n            $even++;\n        } elseif ($remainder == 2) {\n            $odd++;\n\
    \        }\n        $num = $num / 10;\n    }\n    return array($even, $odd);\n\
    }\n", "\t$count = 0;\n\t$even_counter = 0;\n\t$odd_counter = 0;\n\n\twhile ($num\
    \ > 0) {\n\t\tif ($num % 2 == 0) {\n\t\t\t$even_counter++;\n\t\t} else {\n\t\t\
    \t$odd_counter++;\n\t\t}\n\t\t$num = $num / 2;\n\t}\n\t$result = array();\n\t\
    if ($even_counter > $odd_counter) {\n\t\t$result[0] = $even_counter;\n\t\t$result[1]\
    \ = $odd_counter;\n\t} else {\n\t\t$result[0] = $odd_counter;\n\t\t$result[1]\
    \ = $even_counter;\n\t}\n\treturn $result;\n}\n", "    if ($num < 0) {\n     \
    \   return false;\n    }\n\n    // get all digits from number\n    $num = strval($num);\n\
    \    $num = $num - intval(floor($num));\n    $num = $num * 10 + intval(floor($num\
    \ / 10));\n    if ($num < 0) {\n        return false;\n    }\n\n    $nums = str_split($num);\n\
    \    $nums[count($nums) - 1] = intval(floor($nums[count($nums) - 1] / 10));\n\
    \    $nums[count($nums) - 1] += intval(floor($nums[count($nums) - 1] / 1));\n\n\
    \    $evens = array_filter($nums, function($val) { return $val % 2 == 0; });\n\
    \    $odds  = array_filter($nums, function($val) { return $val % 2 != 0; });\n\
    \    return array(count($evens), count($odds));\n}\n</code>\n<|/ a |>\n<| c |>\n\
    Thank you for this response. I have never used array_filter() before but this\
    \ looks very useful.\n<|/ c |>\n<| a |>\n<code>\n/**\n * Return an array with\
    \ counts of odd and even digits of a number.\n * \n *  integer  $number\n * array\n\
    \ */\npublic static function even_odd_count($number)\n{\n    $number  = strval($number);\n\
    \    $length = strlen($number);\n\n    // If the number is 0, we return an empty\
    \ array\n    if ($length === 0) {\n        return array();\n    }\n\n    // Get\
    \ the digits of $number\n    $digits = str_split($number);\n\n    // If it is\
    \ negative, we can not count any digit\n    if ($number < 0) {\n        return\
    \ array();\n    }\n\n    // Get odd digits and count them\n    $odd = array_filter(\n\
    \        $digits,\n        function ($digit) use ($length) {\n            return\
    \ ($digit % 2 !== 0);\n        }\n    );\n    $oddCount = count($odd);\n\n   \
    \ // Get even digits and count them\n    $even = array_filter(\n        $digits,\n\
    \        function ($digit) use ($length) {\n            return ($digit % 2 ===\
    \ 0);\n        }\n    );\n    $evenCount = count($even);\n\n    // If there is\
    \ only 1 digit in $number, $oddCount and $evenCount should be equal.\n    if ($length\
    \ == 1) {\n        return array($oddCount, $evenCount);\n    }\n\n    // If there\
    \ is more than one digit in $number, $oddCount should be less than $evenCount.\n\
    \    if ($length > 1) {\n        $oddCount = $length < $evenCount ? $length :\
    \ $oddCount;\n    }\n\n    return array($oddCount, $evenCount);\n}\n</code>\n\
    <|/", "    $even = 0;\n    $odd = 0;\n    while ($num >= 0) {\n        if ($num\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n        $num -= $num % 10;\n    }\n    $array = array($even, $odd);\n\
    \    return $array;\n}\n", "    $even = 0;\n    $odd = 0;\n    $n = $num;\n  \
    \  while ($n >= 10) {\n        $n = floor($n/10);\n        if ($n % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    }\n\
    \    $odd = $odd > 0 ? $odd: 1;\n    return array($even, $odd);\n}", "    if ($num\
    \ < 0) {\n        throw new Exception('Negative numbers is not allowed!');\n \
    \   }\n\n    $result = [];\n    $temp = 0;\n\n    while ($num > 0) {\n       \
    \ $mod = $num % 10;\n\n        if ($mod === 0 || $mod === 2) {\n            $result[]\
    \ = $mod;\n        }\n\n        $num = $num / 10;\n    }\n\n    return $result;\n\
    }\n", "  $evenCount = 0;\n  $oddCount = 1;\n  while (true) {\n    if ($num < 10)\
    \ {\n      $num = 0;\n    } else {\n      $num = $num / 10;\n    }\n    if ($num\
    \ % 2 == 0) {\n      $evenCount++;\n    } else {\n      $oddCount++;\n    }\n\
    \    if ($num == 0) break;\n  }\n  return [$evenCount, $oddCount];\n}\n", "  $odd_count\
    \ = 0;\n  $even_count = 0;\n\n  if ($num < 0) {\n    throw new InvalidArgumentException(\n\
    \      pht(\n        \"Can't determine even and odd digits in negative numbers.\"\
    ));\n  }\n\n  if ($num == 0) {\n    return array($even_count, $odd_count);\n \
    \ }\n\n  for ($i = 0; $i < strlen($num); $i++) {\n    $char = substr($num, $i,\
    \ 1);\n    if ($char == '0') {\n      $even_count++;\n    } else {\n      $odd_count++;\n\
    \    }\n  }\n\n  return array($even_count, $odd_count);\n}\n", "    if (!is_int($num))\
    \ {\n        return false;\n    }\n    $num = abs($num);\n    $i = 0;\n    $even\
    \ = 0;\n    $odd = 0;\n    while ($num > 0) {\n        if ($num % 2 === 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    \
    \    $num = $num / 2;\n    }\n    return [\n        'even' => $even,\n       \
    \ 'odd' => $odd\n    ];\n}\n", "    if ($num === 0) {\n        return array(0,\
    \ 0);\n    }\n\n    $count = $odd = $even = 0;\n    $base = 10;\n\n    while ($num\
    \ >= $base) {\n        $count++;\n        $num = floor($num / $base);\n    }\n\
    \n    if ($num > 0) {\n        $odd = $count;\n        $count++;\n    }\n\n  \
    \  while ($count > $odd) {\n        $odd += 1;\n        $count -= 1;\n    }\n\n\
    \    return array($even, $odd);\n}\n", "    $even_count = 0;\n    $odd_count =\
    \ 0;\n    $digit = intval($num);\n    while ($digit) {\n        if ($digit % 2\
    \ == 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n        $digit = intval($num / 10);\n    }\n    return array($even_count,\
    \ $odd_count);\n}\n", "    $num = abs($num);\n    $evens = array();\n    $odds\
    \ = array();\n    while ($num) {\n        $evens[] = $num % 10;\n        $num\
    \ -= $num % 10;\n        $odds[] = $num % 2;\n        $num -= $num % 2;\n    }\n\
    \    return array($evens, $odds);\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c\
    \ |>\nThanks, this is what I ended up doing.\n<|/ c |>\n<| c |>\nOh okay, the\
    \ reason I used `abs()` is because I wanted to be able to pass it a negative number\
    \ as well.\n<|/ c |>\n<| a dscore=0 tags=php,arrays |>\nThis can be done with\
    \ basic math, although it might take a bit of thought to come up with a solution\
    \ that is more flexible.  \nConsider the following:\n<code>\n$num = 7;\n$evens\
    \ = $odds = array();\n$n = $num;\nwhile ($n > 1) {\n    $evens[] = $n % 2;\n \
    \   $n /= 2;\n}\n$n = $num;\nwhile ($n > 1) {\n    $odds[] = $n % 10;\n    $n\
    \ /= 10;\n}\n</code>\n$evens and $odds will both have three elements.  In your\
    \ example with 7, $evens will have an array with two elements, while $odds will\
    \ have an array with one element.  As far as the input goes, you can assume that\
    \ every number will be valid and have both even and odd digits.  The output would\
    \ also be valid (if you know that all numbers will be positive integers).\n<|/\
    \ a |>\n<| a tags=php,arrays |>\n<code>", "    $count = array();\n    $last_even\
    \ = 0;\n    $last_odd = 0;\n    $is_even = 0;\n    $is_odd = 1;\n\n    do {\n\
    \        // check if we need to reset even and odd counters\n        if ($is_even\
    \ === 0) {\n            $last_even = $is_odd;\n        }\n\n        if ($is_odd\
    \ === 0) {\n            $last_odd = $is_even;\n        }\n\n        // check if\
    \ we need to increment even counter\n        if ($num < 0) {\n            $is_even--;\n\
    \        }\n\n        // check if we need to increment odd counter\n        if\
    \ ($num >= 0) {\n            $is_odd++;\n        }\n\n        // store the count\n\
    \        $count[$is_even]++;\n        $count[$is_odd]++;\n    } while ($num >\
    \ 0);\n\n    return $count;\n}\n", "    $even_count = 0;\n    $odd_count = 0;\n\
    \    $num_str = strval($num);\n    \n    for ($i = 0; $i < strlen($num_str); $i++)\
    \ {\n        if ($i % 2 == 0) {\n            $even_count += strlen($num_str[$i]);\n\
    \        } else {\n            $odd_count += strlen($num_str[$i]);\n        }\n\
    \    }\n    \n    return array($even_count, $odd_count);\n}\n", "    $even = 0;\n\
    \    $odd = 0;\n    while ($num) {\n        $num = $num % 10;\n        if ($num\
    \ % 2 === 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n    }\n    return array($even, $odd);\n}\n</code>\n<|/ a tags=php,arrays,loops,performance\
    \ dscore=1 |>\n<| c |>\nThank you so much. I am gonna research on array_count_values().\
    \ Could you please tell me why you use array_count_values(). Because I don't get\
    \ it why you need it.\n<|/ c |>\n<| c |>\narray_count_values will count the number\
    \ of times a certain value is in the array. For example, if your array is [\"\
    apple\", \"orange\", \"apple\"] and you do array_count_values($array), it will\
    \ return a count of both apple and orange. [See here](https://www.php.net/manual/en/function.array-count-values.php)\n\
    <|/ c |>\n<| c |>\nWOW. I will look into array_count_values(). I really appreciate\
    \ it! Thanks!\n<|/ c |>\n<| a tags=php,arrays,loops,performance |>\nTry this for\
    \ even and odd count\n<code>\n$arr=array(1, 5, 6, 6, 2, 12, 6, 1, -4, 2, 6, 2,\
    \ 12, 3, -5);\n$even=0;\n$odd=0;\nfor($i=0;$i<count($arr);$i++){\n    if($arr[$i]%2==0){\n\
    \        $even++;\n    }\n    else{\n        $odd++;\n    }\n}\necho \"Odd : \"\
    .$odd.\", Even : \".$even;\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks a lot!\
    \ I really appreciate it! I appreciate it!\n<|/ c |>\n<| a tags=php,arrays,loops,performance\
    \ dscore=1 |>\nYou can use array_count_values():\n<code>\n$array = [1, 5, 6, 6,\
    \ 2, 12, 6, 1, -4, 2, 6, 2, 12, 3, -5, -4, 2];\n$arrayEven = array_count_values($array)['2'];\n\
    $arrayOdd = array_count_values($array)['4'];\n</code>\nOutput:\n<code>\nOdd: 4,\
    \ Even: 3\n</code>\n<|/ a |>\n<| c |>\nWow that is a really quick response and\
    \ very clever. Thanks a lot! I will look into array_count_values()\n<|/ c |>\n\
    <| c |>\nSure thing! Thanks!\n<|/ c |>\n<| a tags=", "    $result = [0, 0];\n\
    \    for ($i = $num; $i >= 0; $i /= 10)\n        $result[$i % 2] += 1;\n    return\
    \ $result;\n}\n</code>\nTo explain what's going on here, we just need to look\
    \ at the following examples:\n<code>\n$result = [0, 0];\n</code>\nThe first two\
    \ lines set the variables to the array $result = [0, 0];. These two lines just\
    \ set values to variables, so this example is equivalent to:\n<code>\n$result\
    \ = array(0, 0);\n</code>\nThen we start adding elements to the array using the\
    \ square bracket syntax. These lines do the following:\n\nGet the value of $result\
    \ which is an array with two elements, 0 and 0.\nAdd 1 to each element of that\
    \ array.\nAssign the new value to $result.\n\nSo the above example is equivalent\
    \ to:\n<code>\n$result = [0, 0];\n$result[0] += 1;\n$result[1] += 1;\n</code>\n\
    So the above example is equivalent to:\n<code>\n$result = [0, 0];\n$result[0]\
    \ = 1;\n$result[1] = 1;\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThat's a great explanation,\
    \ just what I was looking for. Thank you very much for the thorough explanation,\
    \ I'm a PHP noob just learning! I love the way you explain how the code works!\n\
    <|/ c |>\n<| a dscore=0 tags=php |>\nPHP arrays are 0 based so in the example\
    \ you have provided it would be $arr[1] (ie. the second item).\n<|/ a |>\n<| c\
    \ |>\nIt's not zero-based at all. The array starts with `[0]`, but that doesn't\
    \ change the fact that arrays are 0-based.\n<|/ c |>\n<| a |>\n$arr[1] is $arr[1]\
    \ since your array has 2 elements. \nSince your array is 0-indexed, $arr[0] will\
    \ be 0 and $arr[1] will be 1.\n<|/ a tags=php dscore=0 |>\n<| a dscore=0 tags=php\
    \ |>\nAs far as I know, PHP arrays are 0-indexed. That means that the first element\
    \ in the array is at index 0, and the second one is at index 1. In the example\
    \ you have provided, the array has only 2 elements.\n<|/ a |>\n<| c |>\nIt is\
    \ not true. PHP arrays aren't 0-indexed, it is the array keys that are\n<|/ c\
    \ |>\n<| c |>\nYou're right, it has nothing to do with how it is indexed, but\
    \ the fact that it is 0-indexed makes all the difference in this case. :)\n<|/\
    \ c |>\n<| a dscore=0 tags=php |>\n", "  $even = 0;\n  $odd = 0;\n  for ($i =\
    \ 0; $i < strlen($num); $i++) {\n    $val = $num[$i];\n    if ($val % 2 == 0)\
    \ {\n      $even += $val;\n    }\n    else {\n      $odd += $val;\n    }\n  }\n\
    \  return array($even, $odd);\n}\n</code>\n<|/ a |>\n<| c |>\nNice solution. I\
    \ don't think the `countEven` and `countOdd` functions are really necessary since\
    \ they just do `strlen($num) % 2 == 0`. I'd probably just use an `array_filter()`\
    \ instead.\n<|/ c |>\n<| c |>\nThis would be an efficient solution, but this question\
    \ is specifically about `O(1)` solutions.\n<|/ c |>\n<| a |>\n<code>", "  $even\
    \ = 0;\n  $odd = 0;\n  while (1) {\n    if ($num < 0) {\n      $even = $num *\
    \ -1;\n      break;\n    }\n    $digit = $num % 10;\n    if ($digit % 2 === 0)\
    \ {\n      $even++;\n    } else {\n      $odd++;\n    }\n    $num = $num / 10;\n\
    \  }\n  return array((int)$even, (int)$odd);\n}\n", "    $odd = $even = 0;\n \
    \   while ($num > 0) {\n        $mod = ($num % 10);\n        if ($mod === 0) {\n\
    \            $even++;\n        }\n        else {\n            $odd++;\n      \
    \  }\n        $num = ($num / 10);\n    }\n    return array($even, $odd);\n}\n\
    </code>\n<|/ a tags=algorithm,arrays,php,performance |>\n<| a |>\nJust a suggestion,\
    \ not a complete answer. Assuming your numbers are positive and non-zero, I would\
    \ first transform the number to its binary form in base-2^32 (32 bit integer),\
    \ then use an array to store the count of each bit (2^32 - 1 possibilities, since\
    \ the highest bit is always 0):\n<code>\n$arr = array_fill(0,32,0);\n$num = 1234;\n\
    for($i=32;$i>=0;$i--){\n    $arr[$i] ++;\n    $num = pow($num,2);\n}\n</code>\n\
    Then to get the counts, just check the array:\n<code>\n$oddCount = $arr[7];\n\
    $evenCount = $arr[8];\n</code>\n<|/ a tags=algorithm,arrays,php,performance dscore=0\
    \ |>\n<| c |>\nThis does not work. `array_fill` does not produce a binary array,\
    \ but a decimal one (as you can see in the documentation). Also, the loop counts\
    \ in base 2^32 and not 2^32 - 1. I suspect you meant `for ($i = 8; $i >= 0; $i--)`.\n\
    <|/ c |>\n<| c |>\nYeah, you're right about `array_fill`. Whoops, I actually tested\
    \ it and it works great. Also, you're right about the loop - I've edited the answer\
    \ and tested it again. It actually works flawlessly!\n<|/ c |>\n<| a tags=algorithm,arrays,php,performance\
    \ |>\nI would suggest a lookup table for fast lookup. In the example below, the\
    \ lookup table is just an array with a value for each number, but for many cases,\
    \ it's more efficient to use a hash function and store the result in a dictionary.\
    \ \n<code>\n$nums = [\n    1 => 1, \n    2 => 1, \n    3 => 2, \n    4 => 2, \n\
    \    5 => 3, \n    6 => 3, \n    7 => 3, \n    8 => 3, \n    9 => 4, \n    10\
    \ => 4, \n    11 => 4, \n    12 => 4, \n    13 => 5, \n    14 => 5, \n    15 =>\
    \ 5, \n    16 => 5, \n    17 => 6, \n    18 => 6, \n    19 => 6, \n    20 => 6,\
    \ \n", "\t$result = array();\n\tfor ($x = 1; $x <= $num; $x++) {\n\t\t$remainder\
    \ = $num % $x;\n\t\tif ($remainder == 0) {\n\t\t\t$result[] = 1;\n\t\t} else {\n\
    \t\t\t$result[] = 2;\n\t\t}\n\t\t$num = $x;\n\t}\n\treturn $result;\n}", "   \
    \ return array_filter(str_split($num), [\n        'strlen' => static function\
    \ ($v) {\n            return $v !== 0 && $v % 2 === 0;\n        }\n    ]);\n}\n\
    </code>\n<|/ a tags=php,algorithm |>\n<| a tags=php,algorithm |>\nMy solution,\
    \ just for fun\n<code>", "    $even = 0;\n    $odd = 0;\n    while($num > 0) {\n\
    \        $remainder = $num % 10;\n        if($remainder == 0) {\n            $even++;\n\
    \        }\n        else {\n            $odd++;\n        }\n        $num = $num\
    \ / 10;\n    }\n    return array($even, $odd);\n}\n", "\t\n\t// initialize array\
    \ of evens and odds to 0\n\t$counts = [0, 0];\n\t\n\t// loop through the array\
    \ until we get a value that isn't 0\n\tfor ($i = 0; $i < count($counts); $i++)\
    \ {\n\t\t\n\t\t// if the current value is even, add 1 to the even count\n\t\t\
    if ($num % 2 === 0) {\n\t\t\t$counts[0] += 1;\n\t\t}\n\t\t\n\t\t// if the current\
    \ value is odd, add 1 to the odd count\n\t\telse {\n\t\t\t$counts[1] += 1;\n\t\
    \t}\n\t\t\n\t\t// update the number to the next iteration through the loop\n\t\
    \t$num -= ($num % 10);\n\t}\n\t\n\t// return the counts array\n\treturn $counts;\n\
    }", "    $even = 0;\n    $odd = 0;\n    if ($num >= 0) {\n        $num = abs($num);\n\
    \    }\n    while (true) {\n        $temp = $num % 10;\n        if ($temp == 0)\
    \ {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \        $num = $num / 10;\n        if ($num == 0) {\n            break;\n   \
    \     }\n    }\n    return array($even, $odd);\n}", "\t$odd = $even = array();\n\
    \twhile (true) {\n\t\t$lastEven = false;\n\t\t$lastOdd = false;\n\t\t$count =\
    \ 1;\n\t\tfor ($i = strlen($num); $i >= 0; $i --) {\n\t\t\tif ($num[$i] % 2 ==\
    \ 0) {\n\t\t\t\tif (!$lastEven) {\n\t\t\t\t\t$even[] = $num[$i];\n\t\t\t\t\t$lastEven\
    \ = true;\n\t\t\t\t}\n\t\t\t\t$count++;\n\t\t\t} else if ($num[$i] % 2 != 0) {\n\
    \t\t\t\tif (!$lastOdd) {\n\t\t\t\t\t$odd[] = $num[$i];\n\t\t\t\t\t$lastOdd = true;\n\
    \t\t\t\t}\n\t\t\t\t$count++;\n\t\t\t}\n\t\t}\n\t\tif ($count == 1) {\n\t\t\tbreak;\n\
    \t\t} else {\n\t\t\t$num = (string) $num;\n\t\t}\n\t}\n\treturn array($even, $odd);\n\
    }\n", "    $counter = array();\n    while ($num > 0) {\n        if ($num % 2 ==\
    \ 0) {\n            $counter[] = 2;\n        } else {\n            $counter[]\
    \ = 1;\n        }\n        $num = ($num / 2);\n    }\n    return $counter;\n}\n",
  "  $arr = [];\n  while ($num) {\n    $arr[] = floor($num / 10);\n    $num = $num\
    \ % 10;\n  }\n  if ($arr[0] % 2 === 0) {\n    $arr[0]++;\n  }\n  return $arr;\n\
    }\n</code>\nThe function even_odd_count will return the array. For example, even_odd_count(123)\
    \ will return array(1, 2).\nIf you need even and odd numbers, you can then calculate\
    \ the sum of these arrays:\n<code>\n<?php\n$arr1 = even_odd_count(12);\n$arr2\
    \ = even_odd_count(-12);\n$arr3 = even_odd_count(123);\n$arr4 = even_odd_count(123456789);\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
