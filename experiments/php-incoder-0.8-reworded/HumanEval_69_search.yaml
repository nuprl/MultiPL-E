name: HumanEval_69_search
language: php
prompt: "<?php\n// You are given a non-empty array of positive integers. Return the\
  \ greatest integer that is greater than \n// zero, and has a frequency greater than\
  \ or equal to the value of the integer itself. \n// The frequency of an integer\
  \ is the number of times it appears in the array.\n// If no such a value exist,\
  \ return -1.\n// Examples:\n// >>> search(array(4, 1, 2, 2, 3, 1))\n// 2\n// >>>\
  \ search(array(1, 2, 2, 3, 3, 3, 4, 4, 4))\n// 3\n// >>> search(array(5, 5, 4, 4,\
  \ 4))\n// -1\nfunction search($lst) {\n"
tests: "function candidate(...$args) {\n    return search(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(5, 5, 5, 5, 1)) !== 1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(4, 1, 4, 1, 4, 4)) !== 4) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3)) !== -1) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 8, 8, 8, 8, 8,\
  \ 8, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
  \ 3, 3, 2, 2)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
  \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1)) !== 1) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 8, 2)) !== 2)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 7, 1, 8,\
  \ 8, 10, 5, 8, 5, 3, 10)) !== 1) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(array(8, 8, 3, 6, 5, 6, 4)) !== -1) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10,\
  \ 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9)) !== 1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 9, 10, 1, 3)) !== 1) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3,\
  \ 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10)) !== 5) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4,\
  \ 2, 1, 10, 2, 1, 1, 5)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
  \ if (candidate(array(2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10))\
  \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3)) !== 1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4,\
  \ 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4)) !== 4) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3,\
  \ 7, 8, 8, 3, 1, 4, 2, 2, 10, 7)) !== 4) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2,\
  \ 3, 1)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8)) !== -1) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(10)) !== -1) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 7, 7, 2, 4, 7,\
  \ 2, 10, 9, 7, 5, 7, 2)) !== 2) { throw new Exception(\"Test failed!\"); }\n   \
  \ if (candidate(array(5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8)) !== 1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1,\
  \ 1, 10, 7, 5, 6, 7, 6, 7, 7, 6)) !== 1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(3, 10, 10, 9, 2)) !== -1) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    if ($lst[0] <= 0) { return -1; }\n    $max = 0;\n    foreach($lst\
    \ as $x) {\n        if ($x >= $max) { $max = $x; }\n    }\n    return $max;\n}",
  "    if (!is_array($lst)) {\n        return -1;\n    }\n    $max = $lst[0];\n  \
    \  $freq = 0;\n    foreach ($lst as $val) {\n        if ($val > 0) {\n       \
    \     $freq += $val;\n            if ($freq >= $val) {\n                $max =\
    \ $val;\n            }\n        }\n    }\n    return $max;\n}\n", "    $freq =\
    \ array_count_values($lst);\n    foreach ($freq as $key => $value) {\n       \
    \ if ($value >= $freq[$key]) {\n            return $key;\n        }\n    }\n \
    \   return -1;\n}\n", "    sort($lst);\n    $count = array_count_values($lst);\n\
    \n    return array_search(1, array_keys($count)) ? -1 : array_keys($count)[0];\n\
    }\n</code>\n<|/ a tags=algorithm,php |>\n<| a dscore=0 |>\n<code>\n<?php", " \
    \   $sum = 0;\n    $max = 0;\n    $freq = [];\n    foreach ($lst as $val) {\n\
    \        if (!isset($freq[$val])) {\n            $freq[$val] = 1;\n        } else\
    \ {\n            $freq[$val]++;\n        }\n    }\n    foreach ($freq as $key\
    \ => $val) {\n        if ($val > $max) {\n            $max = $val;\n         \
    \   $sum = $key;\n        }\n    }\n    if ($sum >= $max) {\n        return -1;\n\
    \    } else {\n        return $sum;\n    }\n}\n", "    if (count($lst) === 0)\
    \ {\n        return -1;\n    }\n    if (empty($lst)) {\n        return 0;\n  \
    \  }\n    $max = 0;\n    $maxElem = null;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($lst[$i] >= 0) {\n            if ($lst[$i] > $max) {\n\
    \                $max = $lst[$i];\n                $maxElem = $i;\n          \
    \  }\n        } else if ($lst[$i] < 0) {\n            if ($lst[$i] <= $max) {\n\
    \                $max = $lst[$i];\n                $maxElem = $i;\n          \
    \  }\n        } else {\n            return -1;\n        }\n    }\n    return $maxElem;\n\
    }\n</code>\n<|/ a tags=algorithm,php |>\n<| c |>\nThis algorithm is not quite\
    \ correct in terms of returning incorrect output when the list is empty.\n<|/\
    \ c |>\n<| c |>\nWhat would the correct output be?\n<|/ c |>\n<| c |>\n-1, or\
    \ 0 is not correct. Try this example: array(1,-1)\n<|/ c |>\n<| c |>\nI see what\
    \ you mean. The code I posted returns the first occurrence of the greatest number\
    \ in the array. If there are no numbers in the array, then it returns -1. Are\
    \ you looking for all the occurrences?\n<|/ c |>\n<| c |>\nThis algorithm doesn't\
    \ work for me. Can you please help me find the bug and suggest a fix? Thank you\
    \ so much.\n<|/ c |>\n<| a tags=algorithm,php |>\nIf your data is sorted you can\
    \ use a binary search to find the first occurrence of the greatest value.\nThe\
    \ binary search will return the index of the largest item greater than the value\
    \ you are looking for, or -1 if the value is not found.\n<|/ a dscore=3 |>\n<|\
    \ c |>\nBut it is not sorted. It would be best to convert it to a sorted list\n\
    <|/ c |>\n<| c |>\nTrue, but if you do that you can avoid the sort step.\n<|/\
    \ c |>\n<| c |>\nNot necessarily. Since most arrays are going to be relatively\
    \ small (<100) binary search is actually faster than linear search when the data\
    \ is relatively small.\n<|/ c |>\n<| c |>\n: Depends on the size of the data.\
    \ Binary search is O(log n) while a linear search is O(n). So if there are hundreds\
    \ of millions of elements and a linear search is faster, then binary search is\
    \ faster.\n<|/ c |>\n<| c |>\nBinary search is O(logN) if the array is sorted,\
    \ and O(n) otherwise", "    $freq = array_count_values($lst);\n    if ($freq['-1'])\
    \ return -1;\n    foreach ($freq as $v => $n) {\n        if ($n >= $freq['0'])\
    \ return $v;\n    }\n}\n", "    $freq = array();\n    $ans = -1;\n    foreach($lst\
    \ as $v) {\n        $freq[$v]++;\n        $ans = max($ans, $v);\n    }\n    return\
    \ $ans >= 0 ? $ans : -1;\n}\n", "    $counts = array_count_values($lst);\n   \
    \ $keys = array_keys($counts);\n    sort($counts, SORT_NUMERIC);\n    sort($keys,\
    \ SORT_NUMERIC);\n    $result = $keys[count($counts) - 1];\n    if ($result !=\
    \ 0) {\n        return $result;\n    } else {\n        return -1;\n    }\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=php,algorithm,arrays,performance dscore=0\
    \ |>\nHere is the algorithm I came up with:\n<code>", "    $max = 0;\n    $count\
    \ = 0;\n    foreach ($lst as $n) {\n        $count += 1;\n        if ($n > $max)\
    \ {\n            $max = $n;\n        }\n        if ($count > $n) {\n         \
    \   return -1;\n        }\n    }\n    return $max;\n}", "    if(count($lst) <\
    \ 1) {\n        return -1;\n    }\n\n    $largest = -1;\n\n    foreach($lst as\
    \ $int) {\n        if(isset($freq[$int])) {\n            if($freq[$int] > 1) {\n\
    \                $freq[$int] -= 1;\n            } else {\n                return\
    \ $int;\n            }\n        } else {\n            $freq[$int] = 1;\n     \
    \   }\n\n        if($freq[$int] > $largest || $freq[$int] == 0) {\n          \
    \  $largest = $int;\n        }\n    }\n\n    return $largest;\n}\n</code>\nThe\
    \ idea here is that we store each integer in a $freq array. The array stores the\
    \ integer value as the key and the frequency as the value. If we increment the\
    \ frequency of the value, we subtract 1 from the array value. \nIf we are already\
    \ storing the integer value, we subtract 1 from its frequency and check to see\
    \ if that value is equal to 0. If so, we know that the integer has no more occurrences.\
    \ If not, we check to see if the frequency is greater than our current largest.\
    \ If it is, we know that the current largest is less than the current integer\
    \ value, and the current largest is equal to the integer value, so we return that\
    \ value.\n<code>\n<?php\n", "    $count = [];\n    foreach ($lst as $value) {\n\
    \        if (!isset($count[$value])) $count[$value] = 1;\n        else $count[$value]++;\n\
    \    }\n    $sorted = [];\n    foreach ($count as $key => $value) {\n        if\
    \ ($value > 0) $sorted[$key] = $value;\n    }\n    return ($sorted[count($sorted)\
    \ - 1] > 0) ? count($sorted) - 1 : -1;\n}\n</code>\n<|/ a |>\n<| a |>\nHere is\
    \ a non-recursive solution in PHP that uses array_count_values to get an associative\
    \ array with each integer in the input array as keys and the number of times each\
    \ integer appears as values. Then, for each key (integer in the input array),\
    \ we iterate over the key's corresponding values array and check to see if the\
    \ current value exceeds the value of the current key (integer in the input array).\
    \ \n<code>\n<?php", "  $freq = [];\n  $maxfreq = [];\n  for($i=0;$i<count($lst);$i++)\
    \ {\n    for($j=0;$j<count($freq);$j++) {\n      if($lst[$i] == $freq[$j] && $freq[$j]\
    \ > $freq[$i]) break;\n    }\n    if($j < count($freq)) {\n      $freq[$j] = $lst[$i];\n\
    \      $maxfreq[$j] = $freq[$j];\n    }\n  }\n  return max($maxfreq);\n}", " \
    \   if (!is_array($lst)) return -1;\n\n    $max = $lst[0];\n    $count = 1;\n\
    \    foreach ($lst as $item) {\n        if ($item == $max) {\n            $count++;\n\
    \        } else {\n            $max = $item;\n            $count = 1;\n      \
    \  }\n    }\n\n    if ($count >= $max) {\n        return $max;\n    } else {\n\
    \        return -1;\n    }\n}\n", "    $max = -1;\n    foreach ($lst as $i =>\
    \ $v) {\n        if ($v > $max) {\n            $max = $v;\n        }\n       \
    \ if ($v == $max) {\n            if ($max >= $lst[$i]) return $max;\n        }\n\
    \    }\n    return -1;\n}\n</code>\n<|/ a |>\n<| a tags=php |>\n<code>\n<?php\n",
  "    $freqs = array_count_values($lst);\n    return array_search($freqs, $freqs);\n\
    }\n</code>\nThe search function iterates over the input array once, and constructs\
    \ a frequency hash ($freqs), and iterates over the frequency hash ($freqs) twice.\
    \  The first time, it is used to determine if the current integer is greater than\
    \ or equal to the frequency of the current integer.  The second time, it is used\
    \ to get the value of the integer.\nIf no such value exists, the function returns\
    \ -1.\nThe search function is O(n).  \nIn PHP7, you can leverage the array_search\
    \ function as follows:\n<code>\n<?php", "    foreach ($lst as $key => $val) {\n\
    \        if ($val > 0) {\n            $res = $val;\n            $max_key = array_search($val,\
    \ $lst);\n            foreach (array_slice($lst, $max_key, -1) as $val) {\n  \
    \              if ($val >= $res) {\n                    $res = $val;\n       \
    \         }\n            }\n            return $res;\n        }\n    }\n    return\
    \ -1;\n}\n", "  $freq = array_count_values($lst);\n  $freq = array_filter($freq);\n\
    \  arsort($freq);\n  $greatest = array_search($freq[0], $freq);\n  if ($greatest\
    \ === false) {\n    return -1;\n  }\n  return $greatest;\n}\n", "    $max = $lst[0];\n\
    \    $freq = array();\n\n    for ($i = 0; $i < count($lst); $i++) {\n        $freq[$lst[$i]]\
    \ = isset($freq[$lst[$i]]) ? $freq[$lst[$i]] + 1 : 1;\n        $max = max($max,\
    \ $lst[$i]);\n    }\n\n    foreach ($freq as $key => $val) {\n        if ($freq[$key]\
    \ > $val) {\n            return $key;\n        }\n    }\n    return -1;\n}\n",
  "    $max = -1;\n    $i = 0;\n    foreach ($lst as $key => $val) {\n        if ($val\
    \ > 0) {\n            if ($val > $max) {\n                $max = $val;\n     \
    \           $i = $key;\n            }\n        }\n    }\n    return $max;\n}\n",
  "    $min = $lst[0];\n    $max = $lst[0];\n    $freq = 0;\n    foreach ($lst as\
    \ $value) {\n        if ($value >= $min and $value <= $max) {\n            $freq++;\n\
    \            if ($freq > $max) {\n                $max = $freq;\n            }\n\
    \        } else {\n            $min = $value;\n            $freq = 1;\n      \
    \  }\n    }\n    return $min;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\n\
    Okay so I edited the code a bit and it's working but still not what I want, I\
    \ want the highest integer in the array to be returned. Like for example, if I\
    \ pass in an array with [10, 9, 8, 10, 1] it should return 10 and if I pass in\
    \ an array with [10, 10, 10, 10, 10, 10, 10] it should return 10, but it currently\
    \ returns 9.\n<|/ c |>\n<| c |>\nOkay so I edited the code a bit and it's working\
    \ but still not what I want, I want the highest integer in the array to be returned.\
    \ Like for example, if I pass in an array with [10, 9, 8, 10, 1] it should return\
    \ 10 and if I pass in an array with [10, 10, 10, 10, 10, 10, 10] it should return\
    \ 10, but it currently returns 9.\n<|/ c |>\n<| c |>\n: I have tested my code\
    \ and it gives the expected result. I will update the answer and give some explanation.\n\
    <|/ c |>\n<| a dscore=0 |>\nI suggest to use something like this, which should\
    \ work out fine.\n<code>\n$newArray = array(10,9,8,10,1);\n$arraySize = count($newArray);\n\
    $greatest = 0;\nfor($i = 0; $i < $arraySize; $i++){\n    if($newArray[$i] > $greatest){\n\
    \        $greatest = $newArray[$i];\n    }\n}\n\necho $greatest;\n</code>\n<|/\
    \ a tags=arrays,php |>\n<| c |>\nYour code would return `9` for `array(9,9,9,9,9,9)`\n\
    <|/ c |>\n<| c |>\nOkay so I edited the code a bit and it's working but still\
    \ not what I want, I want the highest integer in the array to be returned. Like\
    \ for example, if I pass in an array with [10, 9, 8, 10, 1] it should return 10\
    \ and if I pass in an array with [10, 10, 10, 10, 10, 10, 10] it should return\
    \ 10, but it currently returns 9.\n<|/ c |>\n<| c |>\n: I think my code does what\
    \ you want it to do. Try it out.\n<|/ c |>\n<|", "    sort($lst);\n    $last =\
    \ end($lst);\n    $first = reset($lst);\n    foreach ($lst as $value) {\n    \
    \    if ($value >= $last) {\n            return $last;\n        }\n        $last\
    \ = max($last, $value + 1);\n    }\n    return -1;\n}", "    $max = 0;\n    $freq\
    \ = [];\n    foreach ($lst as $val) {\n        if (isset($freq[$val])) {\n   \
    \         $freq[$val]++;\n            if ($freq[$val] >= $val) {\n           \
    \     $max = max($max, $val);\n            }\n        } else {\n            $freq[$val]\
    \ = 1;\n            if ($val >= $max) {\n                $max = $val;\n      \
    \      }\n        }\n    }\n    return $max;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a |>\n<code>\n<?php", "    $max = 0;\n    $ans = -1;\n    foreach ($lst as\
    \ $key => $value) {\n        if ($value >= 0) {\n            if ($value > $max)\
    \ {\n                $max = $value;\n                $ans = $key;\n          \
    \  }\n        }\n    }\n    return $ans;\n}\n", "    $max = -1;\n    foreach($lst\
    \ as $num) {\n        if($num >= $max && $num >= $lst[$num]) $max = $num;\n  \
    \  }\n    return $max;\n}", "    $max = $min = $lst[0];\n    foreach($lst as $e)\
    \ {\n        if ($max < $e) {\n            $max = $e;\n        } else if ($max\
    \ == $e) {\n            $min = $e;\n        }\n    }\n    if ($min == $max) {\n\
    \        return -1;\n    }\n    return $max;\n}\n</code>\n<|/ a tags=php |>\n\
    <| c |>\nThis doesn't answer the question. The question is about how to find frequencies\
    \ of elements in an array and return the highest frequency that is greater than\
    \ or equal to the number in the array. The question was how to find the highest\
    \ frequency that is greater than zero.\n<|/ c |>\n<| a |>\nI took another approach\
    \ that is a bit more functional but doesn't require a loop.\n<code>\n/**\n * Return\
    \ the frequency of a given number in a given array\n *\n * int|array $arr \n *\
    \ int        $value\n * array\n */", "    $max = null;\n    $maxIndex = null;\n\
    \    foreach ($lst as $key => $value) {\n        $count = (count($lst) - $key)\
    \ - 1;\n        $max = max($max, $value);\n        $maxIndex = array_search($max,\
    \ $lst);\n    }\n    return $maxIndex === false ? -1 : $maxIndex;\n}\n", "   \
    \ $freq = array_count_values($lst);\n    $max = -1;\n    foreach ($freq as $val\
    \ => $count) {\n        if ($val > 0) {\n            if ($val > $max) {\n    \
    \            $max = $val;\n            }\n        }\n    }\n    return $max;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nthank you so much. i had to change it a little\
    \ bit but you made it very helpful.\n<|/ c |>\n<| c |>\nI'm glad I could help.\n\
    <|/ c |>\n<| a |>\n<code>", "    $counts = array_count_values($lst);\n    foreach\
    \ ($counts as $key => $val) {\n        if ($val > 1) return $key;\n    }\n   \
    \ return -1;\n}\n", "    // write your code in PHP7.0\n    $result = -1;\n   \
    \ $frequency = array();\n    for ($i=0; $i<count($lst); $i++) {\n        if (!isset($frequency[$lst[$i]]))\
    \ {\n            $frequency[$lst[$i]] = 1;\n        } else {\n            $frequency[$lst[$i]]\
    \ += 1;\n        }\n    }\n    foreach ($frequency as $key => $value) {\n    \
    \    if ($value >= count($lst)) {\n            $result = $key;\n            break;\n\
    \        }\n    }\n    return $result;\n}\n", "    // code here\n    return max(array_filter(\n\
    \        $lst,\n        function ($i) { return count($lst) - $i; }\n    ));\n\
    }\n\n$lst = array(1, 2, 2, 3, 3, 3, 4, 4, 4);\n\necho search($lst) . \"\\n\";\n\
    </code>\n<|/ a |>\n<| c |>\nCan you explain what that function is doing?\n<|/\
    \ c |>\n<| c |>\nI added explanations.\n<|/ c |>\n<| c |>\nThanks for the explanation.\
    \  I guess my confusion was that max(array_filter($lst, function ($i) { return\
    \ count($lst) - $i; }) does NOT return the highest value but rather the number\
    \ of items matching the condition count($lst) - $i.  In other words, it returns\
    \ the number of times $i is greater than the length of the array.  But max returns\
    \ the highest value found in the array.  So this doesn't make sense to me.  Thanks\
    \ again.\n<|/ c |>\n<| c |>\nIt returns `$lst` element with the highest frequency\
    \ but if you don't care about frequency then just use `max`.\n<|/ c |>\n<| c |>\n\
    The way I interpreted your answer, you were looking for the highest element (without\
    \ counting it).  This is not what the question asked.\n<|/ c |>\n<| a |>\n<code>\n\
    <?php\n", "   $first = array_shift($lst);\n   if ($first > 0) {\n      $f = array_count_values($lst);\n\
    \      return array_search($first, $f) > 0 ? array_search($first, $f) : -1;\n\
    \   }\n   return -1;\n}\n", "    $freq = 0;\n    foreach($lst as $val) {\n   \
    \     if($val > 0) {\n            $freq++;\n        }\n    }\n    if($freq > 0\
    \ && $freq == array_sum($lst)) {\n        return array_search($freq, $lst);\n\
    \    }\n    return -1;\n}", "  $freq = array_count_values($lst);\n  $max = 0;\n\
    \  foreach ($freq as $k => $v) {\n    if ($v > $max) {\n      $max = $v;\n   \
    \ }\n    if ($freq[$k] >= $v + 1) {\n      return $k;\n    }\n  }\n  return -1;\n\
    }", "    $res = -1;\n\n    foreach ($lst as $num) {\n        // Get frequency\
    \ of each number\n        $freqs = array_count_values($lst);\n        // Check\
    \ if this number exist\n        if (array_key_exists($num, $freqs)){\n       \
    \     // Get frequency of current number\n            $freq = count($freqs[$num]);\n\
    \            // Check if this number is greater than or equal to frequency\n \
    \           if ($freq >= $freqs[$num]){\n                // If current number\
    \ is greater than or equal to frequency of current number\n                $res\
    \ = $num;\n            }\n        }\n    }\n\n    return $res;\n}\n", "    $freq\
    \ = array_count_values($lst);\n    $highest = 0;\n    foreach ($freq as $key =>\
    \ $value) {\n        if ($value >= $freq[$highest]) {\n            $highest =\
    \ $key;\n        }\n    }\n    return ($highest > 0) ? $highest : -1;\n}\n</code>\n\
    <|/ a |>\n<| a dscore=1 tags=frequency,php,arrays |>\nA more elegant solution.\
    \ Basically we keep track of the current highest value and if there is a value\
    \ higher than that we stop and return the highest value\n<code>", "    if (empty($lst))\
    \ return -1;\n    $freq = array();\n    foreach ($lst as $item) {\n        if\
    \ (isset($freq[$item])) $freq[$item]++;\n        else $freq[$item] = 1;\n    }\n\
    \    $max = -1;\n    foreach ($freq as $item => $freq) {\n        if ($freq >=\
    \ $max) {\n            $max = $item;\n        }\n    }\n    return $max;\n}\n",
  "    sort($lst);\n    foreach($lst as $val) {\n        $freq[$val]++;\n        if($freq[$val]\
    \ >= $val) break;\n    }\n    \n    foreach($freq as $k => $v) {\n        if($v\
    \ == 0) return $k;\n        if($v > 1) return -1;\n    }\n    return -1;\n}\n\
    </code>\n<|/ a tags=php,algorithm |>\n<| c |>\nThis is a nice solution but unfortunately\
    \ it still has a bug. If there is a negative number in the array it won't find\
    \ the correct index.\n<|/ c |>\n<| c |>\nIt works but there is a bug, if you put\
    \ it on a array like array(5, 5, 4, 4, 4) it will return 3, it should return -1\n\
    <|/ c |>\n<| c |>\nYou are right, I have corrected the bug, now it works.\n<|/\
    \ c |>\n<| c |>\nYes, now it works great :D Thanks for your solution\n<|/ c |>\n\
    <| c |>\nI think this is a very clever solution but I think the code can be simplified\
    \ a lot. For example, there is no need to use 2 loops just to count the frequency\
    \ of each element in the array. Instead of having `foreach($lst as $val) { $freq[$val]++;\
    \ }` you can just use `array_count_values($lst)`.\n<|/ c |>\n<| a tags=php,algorithm\
    \ |>\nI think the best solution is using array_count_values().\n<code>", "   \
    \ if (empty($lst)) {\n        return -1;\n    }\n    \n    $res = $lst[0];\n \
    \   $freq = 1;\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ >= $res) {\n            $res = $lst[$i];\n            $freq = $i + 1;\n    \
    \    }\n    }\n    return $res;\n}\n", "    sort($lst);\n    $n = count($lst);\n\
    \    for($i = 0; $i < $n - 1; $i++) {\n        if($lst[$i] > $lst[$i + 1]) {\n\
    \            return $lst[$i + 1];\n        }\n    }\n    return -1;\n}\n$lst1\
    \ = array(4,1,2,2,3,3,3,4,4,4);\necho \"\\nsearch($lst1): \".search($lst1).PHP_EOL;\n\
    $lst2 = array(1,2,2,3,3,3,4,4,4,5);\necho \"\\nsearch($lst2): \".search($lst2).PHP_EOL;\n\
    </code>\nI decided to sort it first because I wanted to get the next item in the\
    \ array that matched the current item so I didn't have to go through all the items\
    \ in the array. Otherwise I could just compare the current item to all the other\
    \ items in the array and get the next that matched instead of going to the next\
    \ item.\n<|/ a |>\n<| c |>\n`sort($lst);` is unnecessary since `array_search()`\
    \ uses a search key for the first match only.\n<|/ c |>\n<| c |>\nBut it does\
    \ keep the array sorted first so I thought it would be good to sort it first\n\
    <|/ c |>\n<| a dscore=1 |>\nI made some minor changes, maybe it helps you:\n<code>\n\
    <?php\n", "    $result = 0;\n    $max = $lst[0];\n    foreach ($lst as $val) {\n\
    \        if ($val > 0) {\n            if ($val > $max) {\n                $max\
    \ = $val;\n                $result = $val;\n            }\n        }\n    }\n\
    \    return $result > 0 ? $result : -1;\n}\n", "    sort($lst);\n    $index =\
    \ 0;\n    $count = 1;\n    foreach ($lst as $n) {\n        if ($count >= $n) {\n\
    \            $index++;\n        }\n        $count += $n;\n    }\n    if ($index\
    \ == 0) {\n        return -1;\n    }\n    return $index;\n}\n", "    $max = -1;\n\
    \    foreach($lst as $val) {\n        if($val > 0) {\n            if($val > $max)\
    \ {\n                $max = $val;\n            }\n        }\n    }\n    return\
    \ $max;\n}\n", "    $keys = array_keys($lst);\n    $values = array_values($lst);\n\
    \    asort($values);\n    asort($keys);\n    $pos = array_search(0, $keys);\n\
    \    if($pos === false) return -1;\n    return $values[$pos];\n}\n", "    $result\
    \ = -1;\n    $min_freq = 0;\n    foreach($lst as $num){\n        $freq = array_count_values($lst);\n\
    \        if($freq[$num] > $min_freq){\n            $result = $num;\n        }\n\
    \    }\n    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    I wrote this solution in JavaScript. I am not sure about efficiency though.\n\n\
    <code>", "    foreach ($lst as $v) {\n        if ($v == 0) return -1;\n      \
    \  if (isset($counts[$v]) && $counts[$v] >= $v) return $v;\n        $counts[$v]\
    \ = 1;\n    }\n}\n</code>\n<|/ a tags=php dscore=0 |>\n<| c |>\nThat is an excellent\
    \ answer.  Thank you very much!\n<|/ c |>\n<| c |>\nOh!  I see it now.  You are\
    \ using an associative array for $counts.  I did not know I could use an array\
    \ this way.  That's very helpful.  Thank you very much.\n<|/ c |>\n<| a |>\nTry\
    \ this - \n<code>\n<?php", "   sort($lst);\n   $max = array_pop($lst);\n   $count\
    \ = 1;\n   foreach($lst as $v){\n       if ($v != $max) {\n           $count++;\n\
    \       }\n   }\n   return $count > 0 ? $max : -1;\n}\n</code>\n<|/ a |>\n<| a\
    \ |>\nThe most elegant way to solve this (for me at least) is using recursive\
    \ function like this.\n<code>\n/**\n * Given an array of positive integers, find\
    \ the greatest integer that has a frequency greater than or equal to the value\
    \ of the integer itself.\n *\n * int $array\n * int $frequency\n * int\n */",
  "    if (is_array($lst)) {\n        $max = -INF;\n        foreach ($lst as $v) {\n\
    \            if ($v >= $max && $v > 0) {\n                $max = $v;\n       \
    \     }\n        }\n        return $max;\n    }\n    return -1;\n}\n", "    if\
    \ (count($lst) == 0) {\n        return -1;\n    }\n    $max = 0;\n    foreach\
    \ ($lst as $i => $v) {\n        $freq[$i] += 1;\n        if ($freq[$i] > $v) {\n\
    \            $max = max($i, $max);\n        }\n    }\n    return $max;\n}\n</code>\n\
    The solution using recursion\n<code>\n<?php", "    $max = 0;\n    $maxIdx = -1;\n\
    \    foreach($lst as $key=>$val) {\n        if($val > 0) {\n            $max =\
    \ 0;\n            $maxIdx = -1;\n            for($i=0;$i<$val;$i++) {\n      \
    \          if(isset($lst[$i+1])) {\n                    $max++;\n            \
    \        if($max >= $val) {\n                        $maxIdx = $i;\n         \
    \           }\n                }\n            }\n        }\n    }\n    return\
    \ $maxIdx;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 tags=php,algorithm |>\n\
    This solution uses only array and function count() and foreach(). \n<code>\n$numbers\
    \ = array(\n    5 => array(2, 3, 4, 4),\n    6 => array(7, 7, 9, 10, 12, 13, 13,\
    \ 14, 15),\n    7 => array(3, 8, 7),\n    8 => array(2, 5, 8),\n    9 => array(9,\
    \ 10, 15, 17),\n);\n", "    foreach($lst as $val) {\n        $freq[$val]++;\n\
    \        if($freq[$val] > $val) {\n            return $val;\n        }\n    }\n\
    \    return -1;\n}\n</code>\n<|/ a tags=php dscore=0 |>\n<| a |>\n<code>\n<?php\n",
  "    $max = PHP_INT_MAX;\n    foreach ($lst as $el) {\n        if ($el > $max) {\n\
    \            $max = $el;\n        }\n    }\n    $max++;\n    $result = -1;\n \
    \   foreach ($lst as $el) {\n        if ($el > $max and $el >= $result) {\n  \
    \          $result = $el;\n        }\n    }\n    return $result;\n}\n</code>\n\
    <|/ a tags=php,arrays dscore=2 |>\n<| c |>\nI don't think this works. Consider\
    \ this case - `array(0, 1, 1, 1, 2, 2)`.\n<|/ c |>\n<| c |>\n`search` returns\
    \ `-1` if you pass in an empty array. This makes no sense when working with arrays.\n\
    <|/ c |>\n<| c |>\nI see. I think I understand your problem now. There will be\
    \ no duplicates in an array, and all elements are positive.\n<|/ c |>\n<| c |>\n\
    I edited the post so you know how I got the original question to work.\n<|/ c\
    \ |>\n<| c |>\nI posted the original question with my solution in case anybody\
    \ is interested.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n\n$arr = array(4,\
    \ 1, 2, 2, 3, 1);\n\n$result = array_search_recursive($arr, max($arr));\nif ($result\
    \ !== FALSE) {\n    echo $result;\n}\nelse {\n    echo -1;\n}\n", "    $freq =\
    \ [];\n    foreach ($lst as $item) {\n        if ($freq[$item] == null){\n   \
    \         $freq[$item] = 0;\n        }\n        $freq[$item] += 1;\n    }\n\n\
    \    $max = -1;\n    foreach ($freq as $key => $value) {\n        if ($value >\
    \ 0 && $freq[$key] >= $value){\n            $max = $key;\n        }\n    }\n \
    \   return $max;\n}\n\n$array = array(10, 2, 3, 4, 5, 6, 7, 8, 9);\necho search($array);\n\
    \necho \"<br>\";\n", "  sort($lst);\n  $first = $lst[0];\n  for ($i = 0; $i <\
    \ count($lst); ++$i) {\n    if ($lst[$i] == $first) {\n      return $i;\n    }\n\
    \  }\n  return -1;\n}\n</code>\nI used sort to get rid of the duplicates\n<|/\
    \ a dscore=2 |>\n<| a dscore=1 tags=php,algorithm |>\n<code>\n$arr = [1, 2, 2,\
    \ 3, 1];\n$freq = array_count_values($arr);\n$max = -1;\nforeach ($freq as $key\
    \ => $val) {\n  if ($val > $max) {\n    $max = $key;\n  }\n}\necho $max;\n</code>\n\
    Output:\n<code>\n3\n</code>\n<|/ a |>\n<| a |>\n<code>\n<?php", "    $max = $lst[0];\n\
    \    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] > $max) {\n\
    \            $max = $lst[$i];\n        }\n    }\n    return $max;\n}\n", "   \
    \ $freq = 0;\n    $max  = 0;\n    foreach ($lst as $val) {\n        $freq++;\n\
    \        $max = ($val > $max) ? $val : $max;\n    }\n    return ($max > 0) ? $max\
    \ : -1;\n}\n", "    $l = count($lst);\n    $max = 0;\n    $maxValue = 0;\n   \
    \ for($i = 0; $i < $l; $i++){\n        $val = $lst[$i];\n        if($val >= $maxValue){\n\
    \            $max = $val;\n            $maxValue = $val;\n        }\n        if($val\
    \ > 0 && $val < $maxValue){\n            return -1;\n        }\n    }\n    return\
    \ $max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\nMy simple solution :\n<code>\n\
    <?php", "    $max = array_shift($lst);\n    foreach ($lst as $value) {\n     \
    \   if ($value <= 0) {\n            return -1;\n        }\n        $max = ($max\
    \ > $value ? $max : $value);\n    }\n    return $max;\n}\n", "    $max = $min\
    \ = count($lst) - 1;\n    foreach ($lst as $key => $val) {\n        if ($val >\
    \ $min) {\n            $min = $key;\n        } else if ($val < $max) {\n     \
    \       $max = $key;\n        }\n    }\n    return ($min > $max) ? -1 : $min +\
    \ ($max - ($min + 1));\n}\n</code>\n<|/ a |>\n<| a tags=arrays,php |>\nJust because\
    \ I feel like I'm answering this question myself, I'm going to post an answer\
    \ that has a slightly different approach:\n<code>\n<?php\n", "    $freqs = array_count_values($lst);\n\
    \    foreach($freqs as $key => $value) {\n        if($value >= $lst[$key]) {\n\
    \            return $key;\n        }\n    }\n    return -1;\n}", "    $max = $lst[0];\n\
    \    $cnt = 0;\n    foreach($lst as $item) {\n        if ($item == $max) {\n \
    \           $cnt++;\n        }\n        else {\n            if ($cnt == 0) {\n\
    \                return -1;\n            }\n            else {\n             \
    \   $max = $item;\n                $cnt = 1;\n            }\n        }\n    }\n\
    \    return $max;\n}\n", "    $arr = array();\n    for($i = 0; $i < count($lst);\
    \ $i++){\n        if(isset($arr[$lst[$i]])){\n            $arr[$lst[$i]] += 1;\n\
    \        }else{\n            $arr[$lst[$i]] = 1;\n        }\n    }\n    arsort($arr);\n\
    \    foreach($arr as $key => $value){\n        if($value > 1){\n            return\
    \ $key;\n        }\n    }\n    return -1;\n}\n", "    $res = -1;\n    if (empty($lst))\
    \ {\n        return $res;\n    }\n    foreach ($lst as $el) {\n        if ($el\
    \ > 0) {\n            $res = $el;\n        }\n        if ($res >= 0) {\n     \
    \       break;\n        }\n    }\n    return $res;\n}", "    sort($lst);\n   \
    \ for($i = 0; $i < count($lst); $i++)\n        if($lst[$i] > 0)\n            return\
    \ $i;\n    return -1;\n}\n", "    sort($lst);\n    foreach ($lst as $key => $value)\
    \ {\n        if ($value == 0)\n            return $key;\n    }\n}\n", "    sort($lst);\n\
    \    $last = array_pop($lst);\n    for($i = 0; $i < count($lst); ++$i) {\n   \
    \     if($lst[$i] == $last) {\n            return $i;\n        }\n        if($lst[$i]\
    \ > $last) {\n            return -1;\n        }\n    }\n    return -1;\n}\n</code>\n\
    <|/ a tags=algorithm,php |>\n<| c |>\nAha, that's an incredible and extremely\
    \ fast approach. I'm going to do some timing to see if it's really faster. Thanks!\n\
    <|/ c |>\n<| a dscore=1 tags=algorithm,php |>\nYou can use the following algorithm:\n\
    \nSort the array in O(n log n) time\nFor each element in the array, find the previous\
    \ element in the array which is greater than the element itself. If the previous\
    \ element is found, increment the count of that element. After the loop, if the\
    \ count of any element is greater than or equal to the count of all the elements,\
    \ then that is the answer.\n\nThis can be done in O(n) time.\n<|/ a |>\n<| c |>\n\
    I haven't done any timing tests, but the previous method has worked the fastest\
    \ for me. Thanks!\n<|/ c |>\n<| a tags=algorithm,php |>\n<code>\n<?php", "   \
    \ if (empty($lst) || !is_array($lst)) {\n        return -1;\n    }\n    $min =\
    \ min($lst);\n    $max = max($lst);\n    foreach ($lst as $key => $value) {\n\
    \        if ($value == $min) {\n            $freq = 0;\n            while (count($lst)\
    \ != 0) {\n                if (count($lst) == $freq) {\n                    return\
    \ $key;\n                }\n                unset($lst[$key]);\n             \
    \   $freq++;\n            }\n        }\n        if ($value > $min) {\n       \
    \     break;\n        }\n    }\n    return -1;\n}\n\n$arr = array(4, 1, 2, 2,\
    \ 3, 1);\nvar_dump(search($arr));\n</code>\n<|/ a |>\n<| c |>\nI like the idea\
    \ of using array as a stack, because it allows me to keep the count and find out\
    \ the highest key later. But this is still O(n^2) in complexity. Surely there\
    \ must be something that can be done using less time complexity.\n<|/ c |>\n<|\
    \ c |>\nYes, the complexity is O(n^2) because of the nested foreach loop. Also,\
    \ the nested loops are not necessarily to be run only once and hence the complexity\
    \ would be O(n^4) with each of the nested loops. But this would still be O(n^2)\
    \ because the nested loops run O(n) times.\n<|/ c |>\n<| c |>\nThe complexity\
    \ is O(n^2), because you search the entire array for each value in $lst. For example,\
    \ if the array contains 1000 numbers, it will run 1000 times for every number\
    \ in the array. Of course, if the array contains only 1 number, it will do that\
    \ 1 time, so it is still O(n^2).\n<|/ c |>\n<| c |>\nI added another solution\
    \ that is O(n) and works by looking at the entire array once.\n<|/ c |>\n<| c\
    \ |>\n: I tested it and it works. But the `O(n^2)` complexity remains.\n<|/ c\
    \ |>\n<| a tags=php,arrays |>\nThis might help. \n<code>", "  $freq = array();\n\
    \  foreach($lst as $el) {\n    if (isset($freq[$el])) {\n      $freq[$el]++;\n\
    \    } else {\n      $freq[$el] = 1;\n    }\n  }\n  return key($freq);\n}\n",
  "    return max($lst) - min($lst);\n}\n", "    if (empty($lst)) {\n        return\
    \ -1;\n    }\n\n    $max = reset($lst);\n\n    foreach ($lst as $n) {\n      \
    \  if ($n >= $max) {\n            $max = $n;\n        }\n    }\n    \n    return\
    \ $max;\n}\n", "    $counts = array_count_values($lst);\n    foreach ($counts\
    \ as $v => $c){\n        if ($c > 1){\n            return $v;\n        }\n   \
    \ }\n    return -1;\n}\n</code>\n<|/ a |>\n<| a dscore=2 |>\n<code>\n$array =\
    \ array(1,2,3,5,5,5);\n", "    if (count($lst) < 1) {\n        return -1;\n  \
    \  }\n\n    asort($lst);\n    \n    $i = 0;\n    $max = count($lst) - 1;\n   \
    \ \n    foreach ($lst as $value) {\n        if ($value == $lst[$i]) {\n      \
    \      $i++;\n            if ($i > $max) {\n                break;\n         \
    \   }\n        } else if ($value > $lst[$i]) {\n            $max = $i;\n     \
    \       $i = $i;\n        }\n    }\n    \n    return $max;\n}\n", "    foreach\
    \ ($lst as $key => $value) {\n        $freq[$key] += $value;\n        $max = $freq[$key];\n\
    \        if ($freq[$key] >= $value) {\n            $max = $key;\n        }\n \
    \       if ($freq[$key] >= $value) {\n            return $max;\n        }\n  \
    \  }\n    return -1;\n}\n", "    $freq = array();\n    foreach($lst as $i) {\n\
    \        $freq[$i] = isset($freq[$i]) ? $freq[$i] + 1 : 1;\n    }\n    foreach($freq\
    \ as $k => $v) {\n        if ($v >= $lst[0]) {\n            return $k;\n     \
    \   }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=0 tags=sorting,php |>\n\
    <| a tags=sorting,php |>\nThe first thing that comes to mind is building a heap\
    \ from the given array.\n<code>\n$heap = new SplHeap();\nforeach ($array as $value)\
    \ {\n    $heap->insert($value);\n}\n</code>\nThe next thing you can do is check\
    \ out whether the heap has less than two elements. If so, return -1.\n<code>\n\
    $result = 0;\nif ($heap->count() < 2) {\n    return -1;\n}\n</code>\nNow, just\
    \ traverse the heap and check out if the first element in the heap has the highest\
    \ frequency (which is the value we're interested in). If so, we found the answer.\n\
    <code>\n$first = $heap->top();\n$result = $array[$first];\nwhile ($heap->pop()\
    \ > $first) {\n    $result = $array[$heap->top()];\n}\n</code>\nAll that's left\
    \ is to return the result.\n<code>\nreturn $result;\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 tags=sorting,php |>\nI ran a performance test on this. The heap\
    \ solution by davidkonrad was fast and I thought I'd share my final code for the\
    \ heap method. I created a class with methods to operate on the heap and then\
    \ a class with static methods to operate on arrays of data and then ran the tests.\
    \ I also created an abstract class with a simple interface to define an ordering\
    \ scheme that could be used for other data types.\nHere are my results using PHP\
    \ 5.3.23 and PHP 5.5.9 on a Intel Core i7 processor under Mac OSX 10.6.7:\n<code>\n\
    \ test   time used cpu time used\n heap    0.002s  0.006s  0.007s\n data    0.002s\
    \  0.003s  0.004s\n</code>\nBelow is the test code:\n<code>\n<?php\n\nclass Heap{\n\
    \n    private $heap = array();\n\n    public function insert($value){\n      \
    \  $this->heap[] = $value;\n        $this->heap_fixup();\n    }\n\n    public\
    \ function remove(){\n        if($this->heap_empty())\n            return false;\n\
    \        $value = array_shift($this->heap);\n        un", "    $a = array_count_values($lst);\n\
    \    $min = $a[1];\n    foreach ($a as $key => $val) {\n        if ($val > $min)\
    \ {\n            $min = $val;\n        }\n    }\n    if ($min > 0) return $min;\n\
    \    return -1;\n}", "    foreach($lst as $v) {\n        if($v > 0 && $v == array_count_values($lst)[$v])\
    \ {\n            return $v;\n        }\n    }\n    return -1;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nI edited this answer to include the test case you provided as\
    \ an example. I hope you don't mind.\n<|/ c |>\n<| c |>\nYeah, don't mind me.\
    \ I'm new to Stack Overflow. I just thought I'd give it a try and see what happened.\
    \ I just posted an edit on my answer that might help you out. Let me know if you've\
    \ got questions or need clarification.\n<|/ c |>\n<| c |>\nI edited the answer\
    \ again and added an explanation.\n<|/ c |>\n<| c |>\nThank you! This helps a\
    \ lot!\n<|/ c |>\n<| a tags=arrays,php dscore=0 |>\n<code>", "\t$res = array();\n\
    \tforeach ($lst as $item){\n\t\tif (isset($res[$item])){\n\t\t\t$res[$item]++;\n\
    \t\t\tif ($res[$item] > $item){\n\t\t\t\t$res[$item] = $item;\n\t\t\t}\n\t\t}\
    \ else {\n\t\t\t$res[$item] = $item;\n\t\t}\n\t}\n\tforeach ($res as $key=>$value)\
    \ {\n\t\tif ($value >= $lst[0]){\n\t\t\treturn $value;\n\t\t}\n\t}\n\treturn -1;\n\
    }", "    if (empty($lst)) {\n        return -1;\n    }\n\n    $freqs = array_count_values($lst);\n\
    \    $max = 0;\n    $maxkey = null;\n\n    foreach ($freqs as $key => $value)\
    \ {\n        if ($value > $max) {\n            $max = $value;\n            $maxkey\
    \ = $key;\n        }\n    }\n\n    if ($maxkey !== null) {\n        return $maxkey;\n\
    \    }\n\n    return -1;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI think this\
    \ solution will not work if the array has repeated values\n<|/ c |>\n<| c |>\n\
    I do not understand your comment. `array_count_values()` only counts unique values\
    \ and returns an array with the count of unique values as values.\n<|/ c |>\n\
    <| c |>\nI meant that if your array contains repeated values like `array(1,1,2,1,2,2)`\
    \ then the function will always return `-1` because there is no greatest integer\
    \ greater than zero in that array\n<|/ c |>\n<| a dscore=1 |>\nThis one should\
    \ work:\n<code>\n<?php\n", "    $max = $min = count($lst);\n    $sum = 0;\n\n\
    \    foreach ($lst as $e) {\n        $sum += $e;\n        if ($sum >= $max) {\n\
    \            $max = $sum;\n            $min = $e;\n        } else if ($sum < $max)\
    \ {\n            $max = $sum;\n        }\n    }\n\n    return $min >= $max ? -1\
    \ : $max;\n}\n", "    sort($lst);\n    $res = -1;\n    $i = 0;\n    foreach ($lst\
    \ as $value) {\n        if ($i < $value && $res == -1) {\n            $res = $i;\n\
    \        }\n        $i++;\n    }\n    return $res;\n}", "    foreach ($lst as\
    \ $key => $value) {\n        if ($value > 0) {\n            $tmp = search($lst);\n\
    \            if ($tmp != -1) {\n                return $tmp;\n            }\n\
    \        }\n    }\n    return -1;\n}\n", "    if (count($lst) === 0) {\n     \
    \   return -1;\n    }\n\n    // Get first item\n    $first = array_shift($lst);\n\
    \    \n    // Count the occurrences of that item in the array and set $freq to\
    \ its value\n    $freq = array_count_values($lst);\n    \n    // Return the first\
    \ item that has a frequency greater than or equal to the value of the item\n \
    \   return array_search($first, $freq, true);\n}\n", "    $max = -1;\n    $count\
    \ = null;\n    foreach ($lst as $key => $val) {\n        if ($val > 0) {\n   \
    \         $count = $val;\n            $max = $key;\n        }\n    }\n    if ($count\
    \ !== null) {\n        return $max;\n    }\n    return -1;\n}\n", "    sort($lst);\n\
    \    $ret = -1;\n    $i = 0;\n    while($i < count($lst)) {\n        if($lst[$i]\
    \ == $lst[$i + 1]) {\n            $i++;\n            continue;\n        }\n  \
    \      if($ret > 0)\n            break;\n        if($lst[$i] == 0)\n         \
    \   return -1;\n        $ret = $lst[$i];\n    }\n    return $ret;\n}\n</code>\n\
    <|/ a tags=search,arrays,php |>\n<| a tags=search,arrays,php |>\nHere is my solution:\n\
    <code>\n<?php", "    $maxfreq = -1;\n    $maxval = -1;\n    $freq = 0;\n    foreach\
    \ ($lst as $val) {\n        if ($val != $maxval && $val >= 0) {\n            $freq++;\n\
    \        }\n        $maxval = $val;\n        $maxfreq = max(0, $freq);\n    }\n\
    \    return $maxval;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=1 tags=php,arrays\
    \ |>\n<code>\n<?php\n$arr = [1, 5, 2, 5, 6, 6, 10, 11, 14, 15, 15, 17, 19, 20];\n\
    $min = min($arr);\n$max = max($arr);\n$counts = array_count_values($arr);\n$count\
    \ = end($counts);\nforeach ($counts as $val => $count) {\n    if ($count > $max)\
    \ {\n        $max = $val;\n    }\n}\necho $max;", "    if (count($lst) == 0) {\n\
    \        return -1;\n    }\n\n    // Sort the array\n    usort($lst, 'cmp');\n\
    \n    // Set $maxfreq to 0\n    $maxfreq = 0;\n    $maxfreqkey = 0;\n    foreach\
    \ ($lst as $key => $val) {\n        if ($val > 0) {\n            $maxfreq = $maxfreq\
    \ + $val;\n            $maxfreqkey = $key;\n        }\n    }\n\n    return $maxfreqkey;\n\
    }\n", "    $max = -1;\n    $freq = count($lst);\n    $maxValue = max($lst);\n\n\
    \    foreach ($lst as $value) {\n        if ($value > $maxValue) {\n         \
    \   return -1;\n        }\n\n        if ($freq[$value] >= $max) {\n          \
    \  return $value;\n        }\n\n        $max = $freq[$value];\n    }\n\n    return\
    \ -1;\n}\n", "    if(!is_array($lst)) return -1;\n    if(count($lst) == 0) return\
    \ -1;\n    if(count($lst) == 1) return $lst[0];\n    if($lst[0] == 0) return -1;\n\
    \n    $arr1 = array_count_values($lst);\n    $maxval = max($arr1);\n    $i = 0;\n\
    \    foreach($arr1 as $arr2=>$val){\n        if($val > $maxval){\n           \
    \ $maxval = $val;\n            $i = $arr2;\n        }\n    }\n    return $i;\n\
    }\n", "    foreach ($lst as $key => $val) {\n        if ($val > 0) {\n       \
    \     $num = array_count_values($lst);\n            if ($num[$val] > $num[$key])\n\
    \                return $val;\n        }\n    }\n    return -1;\n}\n", "    $freq\
    \ = array();\n    foreach ($lst as $val) {\n        $freq[$val] = isset($freq[$val])\
    \ ? $freq[$val] + 1 : 1;\n    }\n    arsort($freq);\n    foreach ($lst as $val)\
    \ {\n        if ($freq[$val] > 1) {\n            return $val;\n        }\n   \
    \ }\n    return -1;\n}\n", "    $max = $min = $freq = -1;\n\n    foreach($lst\
    \ as $value) {\n        if($freq < $value) {\n            $min = $max;\n     \
    \       $max = $value;\n        }\n        elseif($freq === $value) {\n      \
    \      $freq++;\n        }\n        elseif($freq > $value) {\n            $freq\
    \ = $value;\n        }\n    }\n\n    if($max === $min) {\n        return $min;\n\
    \    }\n    return -1;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting\
    \ dscore=1 |>\n<code>\n<?php\n", "    $max = -1;\n    $max_freq = 0;\n    foreach\
    \ ($lst as $v) {\n        if ($v == 0 || $v > $max) {\n            $max = $v;\n\
    \            $max_freq = $v + 1;\n        }\n        if ($v > 0 && $v == $max_freq)\
    \ {\n            $max_freq++;\n        }\n    }\n    return $max;\n}\n", "   \
    \ foreach ($lst as $val) {\n        if ($val >= $freq) {\n            return $val;\n\
    \        }\n    }\n    return -1;\n}\n", "  \n  // initialize maxfreq to largest\
    \ possible freq.\n  $maxfreq = 0;\n  \n  // initialize freq to zero\n  $freq =\
    \ 0;\n  \n  // loop through each element of the array\n  foreach ($lst as $element)\
    \ {\n    \n    // compare element with freq and maxfreq\n    if ($element == $freq\
    \ || $element == $maxfreq) {\n      \n      // if the freq is greater than or\
    \ equal to maxfreq\n      // update maxfreq to freq\n      if ($element > $maxfreq)\
    \ {\n        $maxfreq = $element;\n      }\n      // otherwise update freq\n \
    \     else {\n        $freq = $element;\n      }\n    }\n    // if freq does not\
    \ equal maxfreq\n    // reset freq to zero\n    else {\n      $freq = 0;\n   \
    \ }\n  }\n  \n  return $maxfreq;\n}\n", "    if (!is_array($lst)) return -1;\n\
    \n    $freq = array_count_values($lst);\n    return array_search(-1, $freq);\n\
    }\n", "    $max = -1;\n    $max = max($lst);\n    foreach ($lst as $val) {\n \
    \       if ($val >= $max) {\n            break;\n        }\n    }\n    return\
    \ $max;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n<?php", "    if (empty($lst))\
    \ return -1;\n    sort($lst);\n    $frequency = array_count_values($lst);\n  \
    \  $value = null;\n    foreach ($frequency as $k => $v) {\n        if ($v > $frequency[$k])\
    \ {\n            $value = $k;\n            break;\n        }\n    }\n    return\
    \ $value;\n}\n", "    $result = array();\n    foreach ($lst as $v) {\n       \
    \ $result[$v] = isset($result[$v]) ? $result[$v] + 1 : 1;\n    }\n    return $result\
    \ = array_keys($result);\n}\n", "    $frequency = [];\n    foreach($lst as $v){\n\
    \        $frequency[$v] = isset($frequency[$v]) ? $frequency[$v] + 1 : 0;\n  \
    \  }\n    $largest = -1;\n    foreach($frequency as $k => $v){\n        if($v\
    \ > $frequency[$largest]){\n            $largest = $k;\n        }\n    }\n   \
    \ return isset($frequency[$largest]) ? $frequency[$largest] : -1;\n}\n</code>\n\
    <|/ a tags=arrays,php dscore=1 |>\n<| a tags=arrays,php dscore=1 |>\nUse array_count_values()\
    \ to get a frequency array and then find the highest key from that array to get\
    \ the highest frequency number :\n<code>\n$arr = array(\n    1 => 1,\n    1 =>\
    \ 1,\n    3 => 1,\n    3 => 1,\n    5 => 1,\n    5 => 1,\n    5 => 1,\n    5 =>\
    \ 1,\n);\n$count = array_count_values($arr);\n$highest = $count[array_keys($count,\
    \ $count[max($count)][0])][0];\n</code>\nThis would give you the highest value\
    \ which has a higher frequency, in this case 3 which is the second value in the\
    \ array and has a frequency of 2 :\n<code>\n$highest = array(3=>2);\n</code>\n\
    <|/ a |>\n<| a dscore=1 |>\n<code>\n$array = array(0 => 1, 0 => 1, 0 => 1, 0 =>\
    \ 1, 1 => 1, 1 => 1, 1 => 1, 1 => 1, 2 => 1, 2 => 1, 2 => 1, 2 => 1, 2 => 1, 3\
    \ => 1, 3 => 1, 3 => 1, 3 => 1, 4 => 1, 4 => 1, 4 => 1, 4 => 1, 4 => 1, 5 => 1,\
    \ 5 => 1, 5 => 1, 5 => 1, 5 => 1, 5 => 1, 6 => 1, 6 => 1, 6 => 1, 6 => 1, 6 =>\
    \ 1, 6 => 1, 7 => 1, 7 => 1, 7 => 1, 7 => 1, 7 => 1, 7 => 1, 7 => 1, 8 => 1, 8\
    \ => 1, 8 => 1, 8 => 1, 8 => 1, 8 => 1, 8 => 1, 9 => 1, 9 => 1, 9 => 1, 9 => 1,\
    \ 9 => 1, 9 => 1, 9 => 1, 9 => 1, 9 => 1, 9 => 1, 9 => 1, 9 => 1, 9 => 1, 9 =>\
    \ 1, 9 => 1, 9 => 1, 9 => 1, 9 => 1, 9 => 1, 9 => 1, 9 => 1, 9 => 1, 9 => 1, 9\
    \ => 1, 9 => 1, 9 => 1, 9 => 1, 9 => 1, 9 => ", "    $greatest = -1;\n    $maxfreq\
    \ = 0;\n    foreach ($lst as $key => $item) {\n        if ($item > $greatest)\
    \ {\n            $greatest = $item;\n            $maxfreq = $key;\n        } elseif\
    \ ($item == $greatest) {\n            $maxfreq++;\n        }\n    }\n    return\
    \ $greatest;\n}\n", "    sort($lst);\n    $result = 0;\n    $max = -999999999;\n\
    \    foreach ($lst as $item) {\n        if ($item == 0) continue;\n        if\
    \ ($item > $max) {\n            $result = (int)$item;\n            $max = $item;\n\
    \        } elseif ($item == $max) {\n            $result++;\n        }\n    }\n\
    \    if ($max == -99999999) {\n        return -1;\n    }\n    return $result;\n\
    }\n</code>\n<|/ a dscore=3 tags=php |>\n<| c |>\nYou saved my life. Thanks\n<|/\
    \ c |>\n<| a tags=php |>\nUse usort() function. Here is the example:\n<code>\n\
    <?php", "    $cnt = 0;\n    foreach ($lst as $val) {\n        if (isset($lst[$val]))\
    \ {\n            $cnt += $lst[$val];\n        }\n    }\n    return $cnt > 0 ?\
    \ $cnt : -1;\n}\n", "    sort($lst);\n    $val = end($lst);\n    $count = 0;\n\
    \    foreach ($lst as $v){\n        if($v == $val){\n            $count++;\n \
    \       }\n    }\n    if($count >= $val){\n        return $val;\n    }else{\n\
    \        return -1;\n    }\n}\n", "    $ret = -1;\n    $freq = [];\n    foreach\
    \ ($lst as $a) {\n        if (!isset($freq[$a]))\n            $freq[$a] = 1;\n\
    \        else\n            $freq[$a] += 1;\n    }\n    $max = 0;\n    foreach\
    \ ($freq as $k => $v) {\n        if ($v > $max)\n            $max = $v;\n    }\n\
    \    if (isset($freq[$max])) {\n        $ret = $max;\n    }\n    return $ret;\n\
    }\n", "    $freq = [];\n    foreach($lst as $num) {\n        if(isset($freq[$num]))\
    \ {\n            $freq[$num] += 1;\n        } else {\n            $freq[$num]\
    \ = 1;\n        }\n    }\n    asort($freq);\n    return key($freq);\n}\n</code>\n\
    <|/ a tags=php,laravel,arrays dscore=2 |>\n<| a dscore=2 |>\nI guess this might\
    \ be the best and easiest approach for this issue:\n<code>\npublic function findMaxFrequency(array\
    \ $array)\n{\n    $max = 0;\n    $values = [];\n\n    foreach($array as $value)\n\
    \    {\n        $values[$value] = isset($values[$value]) ? $values[$value] + 1\
    \ : 1;\n        $max = $max > $values[$value] ? $max : $values[$value];\n    }\n\
    \n    return $max;\n}\n</code>\n<|/ a tags=php,laravel,arrays |>\n<| a dscore=1\
    \ |>\nI have tried to solve this using array_filter and array_count_values, array_keys\
    \ and array_search functions:\n<code>", "    if (!is_array($lst)) return -1;\n\
    \    sort($lst);\n    $res = $lst[0];\n    foreach ($lst as $v) {\n        if\
    \ ($v > $res) {\n            $res = $v;\n        }\n    }\n    return $res;\n\
    }\n", "    for($i = 0; $i < count($lst); $i++) {\n        $key = array_search($lst[$i],\
    \ $lst);\n        if(!$key || !isset($lst[$key]))\n            return -1;\n  \
    \      if($lst[$key] < 0)\n            return $lst[$key];\n    }\n    return count($lst);\n\
    }\n\n$arr = array(4,2,3,2,3,1);\n$x = search(array(4,1,2,2,3,3,3,4,4,4));\necho\
    \ $x.\"\\n\";\n</code>\n<|/ a tags=php,arrays,array-merge,multidimensional-array\
    \ |>\n<| c |>\nYes, this is exactly what I was looking for. Thank you very much!\n\
    <|/ c |>\n<| c |>\nWhat does `$x = search(array(4,1,2,2,3,3,3,4,4,4));` do?\n\
    <|/ c |>\n<| c |>\nThis code just takes advantage of PHP's array searching abilities\
    \ to search for the value in the array and return the index if found, then returns\
    \ the index of the last found value.\n<|/ c |>\n<| c |>\nI added some comments\
    \ in the code explaining what the function does.\n<|/ c |>\n<| c |>\nThe function\
    \ is very similar to `array_search()` but much more memory-efficient: it uses\
    \ one less memory per search than `array_search()` does.\n<|/ c |>\n<| a dscore=4\
    \ |>\n<code>\narray_multisort($arr);\necho array_search($needle, array_reverse($arr),\
    \ true);\n</code>\n<|/ a tags=php,arrays,array-merge,multidimensional-array |>\n\
    <| c |>\nVery smart solution. Thank you!\n<|/ c |>\n<| c |>\nThis is not an answer\
    \ to the question posed, and this will fail with array_search() if the value is\
    \ not found.\n<|/ c |>\n<| c |>\nIt will not fail as array_search() will return\
    \ false. From array_search documentation: \"Returns FALSE if needle could not\
    \ be found in haystack.\"\n<|/ c |>\n<| c |>\nSorry, I misread the original question.\
    \ Will delete my comment to prevent confusion :)\n<|/ c |>\n<| c |>\nNo problem\
    \ :)\n<|/ c |>\n<| a tags=php,arrays,array-merge,multidimensional-array dscore=3\
    \ |>\n<code>\n$array = [\n    'foo' => [\n        'bar' => [\n            'baz'\
    \ => 'qux'\n        ],\n    ],\n    'foo2' => [\n        'bar2' => [\n", "   \
    \ $max = $lst[0];\n    $cnt = 1;\n    foreach ($lst as $item) if ($item > $max)\
    \ {\n        if ($cnt > $max / $item) return -1;\n        $cnt = 1;\n        $max\
    \ = $item;\n    } else {\n        ++$cnt;\n    }\n    return $max;\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nThis is very slow and unoptimized.\n<|/ c |>\n\
    <| c |>\n: You are correct.  I've modified my answer to give a more optimized\
    \ solution.  I also added a test to show that it handles empty arrays correctly.\n\
    <|/ c |>\n<| c |>\n: I don't understand what you're asking.  My solution does\
    \ indeed return the greatest number.\n<|/ c |>\n<| c |>\nI'm sorry, I misunderstood\
    \ your solution.\n<|/ c |>\n<| a tags=php,arrays |>\nMy solution is very similar\
    \ to another solution, with the main difference being that I'm iterating over\
    \ $lst once and storing the max value as I go along. I think this is more efficient\
    \ than iterating over $lst multiple times.\n<code>", "    $highest = 0;\n    $highest_freq\
    \ = count($lst);\n    $highest_freq_by = -1;\n    foreach ($lst as $value) {\n\
    \        if ($value <= $highest_freq_by) {\n            $highest_freq_by = $value;\n\
    \            $highest_freq = $highest_freq - $value;\n        }\n    }\n    return\
    \ $highest > 0 ? $highest : -1;\n}\n", "    if(!empty($lst)) {\n        $freq\
    \ = array_count_values($lst);\n        foreach ($freq as $key => $val) {\n   \
    \         if($val >= $freq[$key]) {\n                return $key;\n          \
    \  }\n        }\n    }\n    return -1;\n}\n", "    $frequency = array_count_values($lst);\n\
    \    $values = array_keys($frequency);\n    if (count($frequency) == 0) {\n  \
    \      return -1;\n    }\n    $values = array_flip($values);\n    $min = current($values);\n\
    \    if (array_search($min, $frequency) >= count($frequency) - 1) {\n        return\
    \ $min;\n    }\n    return search($frequency);\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a |>\nYou can do it with O(n) time complexity using recursion:\n<code>\nint\
    \ getGreatestCommon(int n1, int n2) {\n    if (n1 == 0 && n2 != 0) return n2;\n\
    \    if (n1 == 0 && n2 ==0) return 0;\n    if (n1 != 0 && n2 == 0) return n1;\n\
    \    int min = getGreatestCommon(n2, n1 %n2);\n    return min == n1 ? n2 : min;\n\
    }\n</code>\n<|/ a tags=java,algorithm,php,dynamic-programming dscore=0 |>\n<|\
    \ c |>\n`getGreatestCommon(20, 4)` returns 20, but should be 4.\n<|/ c |>\n<|\
    \ c |>\nAh, you're right. Fixed it. I guess it's too early in the mornings.\n\
    <|/ c |>\n<| a |>\nHere's a PHP code which will find greatest common divisor for\
    \ given two numbers in O(n) time complexity.\n<code>\n<?php", "    $freq = array_count_values($lst);\n\
    \    if (count($freq) > 0) {\n        ksort($freq);\n        $max_freq = key($freq);\n\
    \        $greatest_val = 0;\n        foreach ($freq as $val => $freq) {\n    \
    \        if ($freq > $max_freq) {\n                $max_freq = $freq;\n      \
    \          $greatest_val = $val;\n            }\n        }\n        return $greatest_val;\n\
    \    } else {\n        return -1;\n    }\n}\n", "    $arr = array_count_values($lst);\n\
    \    if(array_keys($arr) !== range(0, count($arr) - 1)){\n        return -1;\n\
    \    }\n    foreach ($arr as $key => $value){\n        if($arr[$key] >= $arr[0])\
    \ {\n            return $key;\n        }\n    }\n    return -1;\n}\n</code>\n\
    <|/ a tags=php |>\n<| a |>\nThis might be the easiest way to do it, in O(n)\n\
    <code>\n$arr = array_count_values($input);\nif(isset($arr[$arr[0]]))\n{\n   $result\
    \ = array_search($arr[$arr[0]],$arr);\n}\n</code>\n<|/ a dscore=0 tags=php |>\n\
    <| a tags=php dscore=0 |>\nHere is an iterative solution which runs in O(n) time\
    \ and O(n) space.\n<code>\n$arr = array_count_values($input);\n\n$result = -1;\n\
    \nwhile(!$result == -1 && array_search($arr[$result],$arr) !== false)\n{\n   \
    \ $result = array_search($arr[$result],$arr);\n}\n</code>\n<|/ a |>\n<| a dscore=0\
    \ tags=php |>\n<code>", "    $max = -1;\n    $freq = -1;\n    foreach ($lst as\
    \ $key => $value) {\n        if ($value > 0) {\n            if ($freq == -1) {\n\
    \                $freq = $value;\n                $max = $key;\n            }\
    \ elseif ($freq >= $value) {\n                $max = $key;\n                $freq\
    \ = $value;\n            }\n        }\n    }\n    return $max;\n}\n", "    $max\
    \ = 0;\n    $i = -1;\n    foreach($lst as $key => $value) {\n        if ($value\
    \ > $max) {\n            $max = $value;\n            $i = $key;\n        }\n \
    \       if ($value <= $max) {\n            $i++;\n        }\n    }\n    return\
    \ $i;\n}\n", "    $max = PHP_INT_MAX;\n    $cnt = 0;\n    foreach($lst as $val)\
    \ {\n        $cnt = $val > $max ? $cnt : $cnt;\n    }\n    return $cnt > 0 ? $max\
    \ : -1;\n}\n</code>\n<|/ a dscore=2 tags=performance,php,algorithm |>\n<| c |>\n\
    I appreciate your thoughtful response.  My question is how to do this without\
    \ using a loop.  I was looking into using array_count_values or similar.  However,\
    \ I can't seem to figure that one out either.  I was thinking more about doing\
    \ an array_reduce on the array, then comparing the values.  But I can't figure\
    \ out how to do that.\n<|/ c |>\n<| c |>\nSo the problem is that you don't have\
    \ a loop and you want to use one less function call.  How about this `array_reduce($lst,\
    \ function($acc, $val) use ($max) {$max = ($val > $max ? $val : $max);return $max;},\
    \ 0);` ?\n<|/ c |>\n<| c |>\nI really appreciate your response.  I actually tried\
    \ that before posting the question.  It didn't work.  I realized I was returning\
    \ the wrong thing.  I'm just trying to figure out how to do this without using\
    \ a loop.  I will try your code, but I'm not sure why that would work.  Thanks\
    \ again!\n<|/ c |>\n<| c |>\nI've added another solution to my answer.\n<|/ c\
    \ |>\n<| c |>\nThank you again!  I appreciate it.\n<|/ c |>\n<| a tags=performance,php,algorithm\
    \ |>\nYou could do this with a recursive function:\n<code>", "  // Write your\
    \ code here.\n  foreach ($lst as $key => $value) {\n    if ($key < $value) {\n\
    \      return -1;\n    }\n  }\n  foreach ($lst as $key => $value) {\n    if ($key\
    \ > $value) {\n      return $value;\n    }\n  }\n  return -1;\n}", "    if (count($lst)\
    \ == 0) {\n        return -1;\n    }\n    $freqs = array();\n    $largest = 0;\n\
    \    foreach ($lst as $v) {\n        if ($freqs[$v] == 0) {\n            $freqs[$v]\
    \ = 1;\n            if ($largest == 0) {\n                $largest = $v;\n   \
    \         }\n        }\n        elseif ($freqs[$v] > 1) {\n            $freqs[$v]++;\n\
    \        }\n    }\n    return $largest;\n}", "  $max = max($lst);\n  foreach ($lst\
    \ as $val) {\n    if ($val === $max) {\n      if (isset($lst[$val])) {\n     \
    \   $lst[$val]++;\n        return $val;\n      }\n      return -1;\n    }\n  }\n\
    \  return -1;\n}", "    sort($lst);\n    $len = count($lst);\n    \n    for ($i\
    \ = 0; $i < $len; $i++) {\n        if ($lst[$i] == $len - 1) {\n            return\
    \ $i;\n        } elseif ($lst[$i] == 0) {\n            return -1;\n        }\n\
    \    }\n}", "    $freq = array_count_values($lst);\n    $maxFreq = max($freq);\n\
    \    return array_search($maxFreq, $freq) ? $maxFreq : -1;\n}\n", "\t$n = count($lst);\n\
    \tif ($n == 0) {\n\t\treturn -1;\n\t}\n\n\tforeach ($lst as $key => $value) {\n\
    \t\tif ($value < 1) {\n\t\t\treturn -1;\n\t\t}\n\t\t$freq[$key] = array_count_values($lst);\n\
    \t}\n\n\trsort($freq);\n\tforeach ($freq as $key => $value) {\n\t\tif ($value[$key]\
    \ == 1) {\n\t\t\treturn $key;\n\t\t}\n\t}\n\treturn -1;\n}\n", "    $count = count($lst);\n\
    \    if($count==0) { return -1; }\n\n    sort($lst);\n    foreach($lst as $key=>$value)\
    \ {\n        if($value>0) {\n            $key++;\n            return $key;\n \
    \       }\n    }\n    return -1;\n}\n", "    $freq = [];\n    foreach ($lst as\
    \ $v) {\n        $freq[$v]++;\n        if ($freq[$v] > $freq[$v - 1]) {\n    \
    \        return $v;\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a tags=algorithm,php,arrays\
    \ |>\n<| c |>\nThis solution is incorrect. Try `search(array(4, 1, 2, 2, 3, 1))`\
    \ and you get `2`, but the answer is `3`!\n<|/ c |>\n<| c |>\nYour function is\
    \ also incorrect: `search(array(5, 5, 4, 4, 4))` gives `4`, but the answer is\
    \ `-1`.\n<|/ c |>\n<| c |>\nIt's not incorrect at all - it's working perfectly\
    \ fine. Your original question was to find the greatest integer that is greater\
    \ than zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. If you want the greatest value greater than zero, the answer must be\
    \ 3.\n<|/ c |>\n<| c |>\nThat is incorrect. Try `search(array(4, 1, 2, 2, 3, 1))`\
    \ and you get `2`, but the answer is `3`!\n<|/ c |>\n<| a dscore=1 |>\nI would\
    \ first sort the array by frequency and then find the first one that is greater\
    \ than 0.\n<|/ a tags=algorithm,php,arrays |>\n<| c |>\nSure, but he wants the\
    \ answer to equal the value in the array, not by counting how many occurrences\
    \ of it there are.\n<|/ c |>\n<| c |>\nThis does not provide an answer to the\
    \ question. To critique or request clarification from an author, leave a comment\
    \ below their post.\n<|/ c |>\n<| c |>\nThis also does not provide the correct\
    \ answer. Try `search(array(4, 1, 2, 2, 3, 1))` and you get `2`, but the answer\
    \ is `3`!\n<|/ c |>\n<| a dscore=0 tags=algorithm,php,arrays |>\nI would use a\
    \ variable to store the greatest value found so far and then compare it to the\
    \ current value to find out if it should be replaced. Like so:\n<code>\n$numbers\
    \ = array(4,1,2,2,3,1);\n$greatest = 0;\nforeach($numbers as $number) {\n    if\
    \ ($number > $greatest)\n        $greatest = $number;\n}\n\necho $greatest; //\
    \ Output: 2\n</code>\n<|/ a |>\n<| c |>\nThis does not provide an answer to the\
    \ question. To critique or request clarification from an author, leave a comment\
    \ below their post.\n<|/ c |>\n<| c |>\nA", "    $max = 0;\n    $maxCount = -1;\n\
    \    $count = 0;\n    foreach ($lst as $n) {\n        if ($n < 0 || $n > $max)\
    \ {\n            return -1;\n        }\n        $count++;\n        if ($maxCount\
    \ < $count || $maxCount > $n || $count > $maxCount) {\n            $maxCount =\
    \ $count;\n            $max = $n;\n        }\n    }\n    return $max;\n}\n", " \
    \   $counter = array();\n    foreach ($lst as $k => $v) {\n        if (!isset($counter[$v]))\
    \ {\n            $counter[$v] = 0;\n        }\n        $counter[$v]++;\n    }\n\
    \n    $max = -1;\n    foreach ($counter as $v => $freq) {\n        if ($freq >=\
    \ $max) {\n            $max = $v;\n        }\n    }\n\n    return $max;\n}\n",
  "    $freq = array_count_values($lst);\n    $freqs = array_filter($freq);\n    if\
    \ (count($freqs) === 0) {\n        return -1;\n    }\n    $maxVal = max($freqs);\n\
    \    foreach ($freqs as $key => $val) {\n        if ($val > $maxVal) {\n     \
    \       return $key;\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis is O(NlogN) because you need to loop through N elements more\
    \ than once.\n<|/ c |>\n<| c |>\nyes but it's easy to optimise. Just iterate once\
    \ and store `freqs` by key.\n<|/ c |>\n<| a dscore=1 |>\nI would do it like this\n\
    <code>", "    $frequency = count($lst);\n    $largest = $lst[0];\n    $key = 0;\n\
    \    for($i = 1; $i < count($lst); $i++) {\n        if($lst[$i] > $largest) {\n\
    \            $key = $i;\n            $largest = $lst[$i];\n        }\n    }\n\
    \    if($frequency >= $largest) {\n        $key = $key;\n    }\n    return $key;\n\
    }\n</code>\n<|/ a tags=arrays,php,algorithm |>\n<| a dscore=2 |>\nMy first idea\
    \ was a binary search.\n<code>", "    $result = 0;\n    foreach ($lst as $item)\
    \ {\n        if ($item == 0) {\n            continue;\n        }\n        $result\
    \ += (count(array_filter($lst, \"call\", [$item])))*$item;\n    }\n    return\
    \ $result;\n}\n", "    foreach ($lst as $elem) {\n        if ($elem >= 0) {\n\
    \            return $elem;\n        }\n    }\n\n    return -1;\n}\n", "    $freq\
    \ = [];\n    $min = 0;\n    $max = array_max($lst);\n    foreach ($lst as $num)\
    \ {\n        if (isset($freq[$num])) {\n            $freq[$num] += 1;\n      \
    \  } else {\n            $freq[$num] = 1;\n        }\n        if ($freq[$num]\
    \ >= $max) {\n            $min = $num;\n        } else if ($freq[$num] >= $min)\
    \ {\n            return $num;\n        }\n    }\n    return -1;\n}\n", "    $max\
    \ = -1;\n    $maxFreq = -1;\n    for ($i = 0; $i < count($lst); $i++) {\n    \
    \    $freq = count(array_filter(array($lst), function($x) { return $x == $i; }));\n\
    \        if ($freq > $maxFreq) {\n            $max = $i;\n            $maxFreq\
    \ = $freq;\n        }\n    }\n    return $max;\n}\n</code>\n<|/ a tags=php,arrays,search,sorting\
    \ |>\n<| a |>\nA different solution: Find the highest frequency value among the\
    \ array and return the index of the value that appears the most:\n<code>", " \
    \   foreach ($lst as $a) {\n        if (count($lst) > count($lst[array_search($a,\
    \ $lst)]) - 1) {\n            return -1;\n        }\n        if ($a < array_search($a,\
    \ $lst)) {\n            return array_search($a, $lst);\n        }\n    }\n   \
    \ return count($lst) - 1;\n}\n", "    if (!empty($lst)) {\n        $counts = array_count_values($lst);\n\
    \        foreach ($counts as $k => $v) {\n            if ($v >= $lst[0]) return\
    \ $k;\n        }\n    }\n    return -1;\n}\n", "    if (empty($lst)) {\n     \
    \   return -1;\n    }\n\n    $max = reset($lst);\n    $counter = reset($lst);\n\
    \    foreach ($lst as $key => $item) {\n        if ($item > $max) {\n        \
    \    $counter = $item;\n            $max = $item;\n        } elseif ($item ==\
    \ $counter) {\n            $counter++;\n        }\n    }\n\n    return $max;\n\
    }\n\n$lst = array(4, 1, 2, 2, 3, 1);\necho search($lst);", "\tforeach ($lst as\
    \ $v) {\n\t\t$c = array_count_values($lst);\n\t\tif (isset($c[$v]) && $c[$v] >=\
    \ $v) {\n\t\t\treturn $v;\n\t\t}\n\t}\n\treturn -1;\n}", "    return isset($lst[0])\
    \ ? isset($lst[1]) ? $lst[1] : $lst[0] : -1;\n}\n", "    if (empty($lst)) {\n\
    \        return -1;\n    }\n    $freq = array_count_values($lst);\n    arsort($freq);\n\
    \    return array_search(max($freq), $freq);\n}\n</code>\n<|/ a tags=arrays,php,search\
    \ |>\n<| a |>\nFor those who prefer a one-liner:\n<code>\n$maxFrequency = max(array_count_values($array));\n\
    $greatestValue = array_search(max(array_count_values($array)), $array);\n</code>\n\
    <|/ a dscore=3 tags=arrays,php,search |>\n<| a |>\n<code>\n<?php", "  $max = $lst[0];\n\
    \  $maxCount = 0;\n  foreach($lst as $val) {\n    foreach($lst as $val2) {\n \
    \     if($val == $val2) {\n        unset($lst[$val2]);\n      }\n    }\n  }\n\
    \  foreach($lst as $val) $maxCount = max($maxCount, $val);\n  foreach($lst as\
    \ $val) if($val == $max) $maxCount = 1;\n  return max($max, $maxCount);\n}", " \
    \   $freq = array();\n    foreach ($lst as $e) {\n        if ($e > 0) $freq[$e]++;\n\
    \    }\n    foreach ($freq as $e => $count) {\n        if ($count > 1) return\
    \ $e;\n    }\n    return -1;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>",
  "    $freqs = array_count_values($lst);\n    $greatest = null;\n    foreach ($freqs\
    \ as $n => $f) {\n        if ($f > 0 && $f >= $freqs[$n]) {\n            $greatest\
    \ = $n;\n            break;\n        }\n    }\n    return $greatest;\n}\n", " \
    \   $sorted = array_count_values($lst);\n    arsort($sorted);\n    \n    foreach\
    \ ($sorted as $val => $freq) {\n        if($freq >= $lst[$val]) {\n          \
    \  return $val;\n        }\n    }\n    return -1;\n}\n", "    foreach ($lst as\
    \ $v) {\n        if ($v > 0) return $v;\n    }\n    return -1;\n}\n</code>\n<|/\
    \ a |>\n<| a tags=php,algorithm,python,arrays |>\nPython solution\n<code>\ndef\
    \ maxFrequency(a):\n    ans = -1\n    freq = {0:1}\n    for i in a:\n        j\
    \ = freq.get(i,0)\n        if j > ans:\n            ans = j\n        freq[i] =\
    \ freq[i]+1\n    return ans\n\nprint maxFrequency([4, 1, 2, 2, 3, 1])\nprint maxFrequency([1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4])\nprint maxFrequency([5, 5, 4, 4, 4])\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nThanks. But I think `freq[i] = freq[i]+1` will run out\
    \ of memory in some cases.\n<|/ c |>\n<| c |>\nThat is a very good point.  But\
    \ if you look at his examples, he is using integers, and he is just keeping track\
    \ of what numbers have already been counted.\n<|/ c |>\n<| a dscore=1 tags=php,algorithm,python,arrays\
    \ |>\nHere is a solution in PHP\n<code>\n<?php\n\n$input = array(1, 2, 2, 3, 3,\
    \ 3, 4, 4, 4);\n$length = count($input);\n\nfor($i = 0; $i < $length; $i++)\n\
    {\n    $sum = 0;\n    for($x = 0; $x < $length; $x++)\n    {\n        if($input[$x]\
    \ == $i)\n        {\n            $sum++;\n        }\n    }\n\n    if($sum >= $length)\n\
    \    {\n        echo 'True';\n        break;\n    }\n}\n</code>\nThe idea is that\
    \ you can find the number of occurrences of each value in the array using a loop.\
    \ Then you can check to see if the number of occurrences matches the length of\
    \ the array. There would be several optimizations that could be done.\n<|/ a |>\n\
    <| a |>\nTry this in Python:\n<code>\narr = [4, 1, 2, 2, 3, 1]\n\ndef maxFreq(arr):\n\
    \    frequency = {}\n    for i in arr:\n        if i not in frequency:\n     \
    \       frequency[i] = 1\n        else:\n            frequency[i] = frequency[i]\
    \ + 1\n    max = 0\n    for i in arr:\n        if frequency[i] > max:\n      \
    \      max = frequency[i]\n    return max\n\nprint(maxFreq(arr))\n</code>\n<|/\
    \ a dscore=1 tags=php,algorithm,python,arrays |>\n<| a tags=php,algorithm,python,arrays\
    \ |>\nHere is a simple solution in PHP which also handles empty arrays:\n<code>",
  "    $keys = array_count_values($lst);\n    $greatest = null;\n    foreach ($keys\
    \ as $key => $count) {\n        if ($count > $greatest) {\n            $greatest\
    \ = $key;\n        }\n    }\n    if ($greatest !== null) {\n        return $greatest;\n\
    \    }\n    return -1;\n}\n", "    $max = $lst[0];\n    $maxFreq = 1;\n    foreach\
    \ ($lst as $key => $value) {\n        if ($value == $max) {\n            $maxFreq\
    \ += $key;\n        }\n        if ($maxFreq == $value) {\n            $max = $value;\n\
    \            $maxFreq = $key;\n        }\n    }\n    return $max;\n}\n</code>\n\
    <|/ a tags=php,php-internals |>\n<| a dscore=0 |>\nHere is the solution in Java\
    \ and Python (I do not have PHP on this PC)\nJava:\n<code>\n    public static\
    \ int search(int[] a, int n){\n        int maxFreq = 1;\n        int max = 1;\n\
    \        for (int i : a){\n            if (i == max) {\n                maxFreq\
    \ += i;\n            }\n            if (maxFreq == i) {\n                max =\
    \ i;\n                maxFreq = i;\n            }\n        }\n        return max;\n\
    \    }\n</code>\nPython:\n<code>\ndef search(a, n):\n    maxFreq = 1\n    max\
    \ = 1\n    for x in a:\n        if x == max:\n            maxFreq += x\n     \
    \   if maxFreq == x:\n            max = x\n            maxFreq = maxFreq\n   \
    \ return max\n</code>\n<|/ a tags=php,php-internals |>\n<| a dscore=0 |>\nI've\
    \ been trying to find out what the PHP documentation means by \"frequency\" but\
    \ I don't see any mention of it at all. I did find mention of \"array keys\",\
    \ which might mean that the frequency is the number of occurrences of values in\
    \ the array. I found this article about counting keys in an array, but it's not\
    \ clear if that means \"frequency\".\nAnyway, I wrote the following code which\
    \ seems to produce the same results as search(). Maybe someone will find this\
    \ useful. I'm a PHP newbie so maybe there's some quirky behavior in my code that's\
    \ causing a bug.\n<code>\n<?php\nclass ArrayTest {\n    public function search($lst)\
    \ {\n        $max = $lst[0];\n        $maxFreq = 1;\n        $arrayKeys = array();\n\
    \        foreach ($lst as $key => $value) {\n            if ($value == $max) {\n\
    \                $maxFreq += $key;\n            }\n            if ($maxFreq ==\
    \ $value) {\n                $max = $value;\n                $maxFreq = $key;\n\
    \            }\n            $arrayKeys[] = $key;\n        }\n        return $max;\n\
    \    }\n}\n\n$testArray = array(4, 1, 2, 2, 3, 1);\n\necho \"Testing search with\
    \ array(\";\n$testArray = array_reverse($testArray);\n$lastItem = array_pop($testArray);\n",
  "    foreach ($lst as $key => $val) {\n        $count = count($lst) - $key - 1;\n\
    \        if ($val >= $count && $count >= $val) {\n            return $val;\n \
    \       }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=1 tags=arrays,php |>\n\
    <| a tags=arrays,php |>\nUse array_count_values()\n<code>\n$arr=array(4,1,2,3,1,2,3,4);\n\
    $a=array_count_values($arr);\necho max(array_intersect_key($a, array_flip($arr)));\n\
    </code>\nOutput\n<code>\n3\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n    $arr = [1,2,4,5,6,7,8,9];\n    $newArr = [];\n    foreach ($arr as\
    \ $key=>$value) {\n        if (array_key_exists($value, $newArr)) {\n        \
    \    $newArr[$value]++;\n        } else {\n            $newArr[$value] = 1;\n\
    \        }\n    }\n    $max = 0;\n    foreach ($newArr as $value=>$count) {\n\
    \        if ($count > $max) {\n            $max = $count;\n        }\n    }\n\
    \    var_dump($max);", "  $freqArr = array();\n  $max = 0;\n  $maxFreq = 0;\n\
    \  foreach ($lst as $val) {\n    if (array_key_exists($val, $freqArr)) {\n   \
    \   $freqArr[$val]++;\n      if ($freqArr[$val] > $maxFreq) {\n        $max =\
    \ $val;\n        $maxFreq = $freqArr[$val];\n      }\n    } else {\n      $freqArr[$val]\
    \ = 1;\n      if ($freqArr[$val] > $maxFreq) {\n        $max = $val;\n       \
    \ $maxFreq = $freqArr[$val];\n      }\n    }\n  }\n  if ($maxFreq == 0) return\
    \ -1;\n  return $max;\n}\n", "  $ans = -1;\n  foreach($lst as $val) {\n    if\
    \ ($val > 0) {\n      $val = search($lst);\n    }\n    if ($val >= $ans) {\n \
    \     $ans = $val;\n    }\n  }\n  return $ans;\n}\n", "    $freq = array_count_values($lst);\n\
    \    $keys = array_keys($freq);\n    $highestKey = max($keys);\n    foreach ($keys\
    \ as $index) {\n        if ($freq[$index] >= $freq[$highestKey]) {\n         \
    \   return $index;\n        }\n    }\n    return -1;\n}\n", "    sort($lst);\n\
    \    $freq = array_count_values($lst);\n    foreach ($freq as $key => $value)\
    \ {\n        if ($value > $freq[$key]) {\n            return $key;\n        }\n\
    \    }\n    return -1;\n}\n\n/**\n * Question 4\n * \n * Write a method named\
    \ getHighest that takes an array of ints as an argument, and returns the\n * highest\
    \ value in the array. If there is no highest value in the array, return null.\n\
    \ * \n * Your method should not return an int, but null. The array must be non-empty\
    \ and contain only\n * integers, and there cannot be duplicate numbers in the\
    \ array.\n */\n\n/**\n * Question 5\n * \n * Write a method named getSmallest\
    \ that takes an array of ints as an argument, and returns the lowest \n * value\
    \ in the array. If there is no lowest value in the array, return null.\n * \n\
    \ * Your method should not return an int, but null. The array must be non-empty\
    \ and contain only\n * integers, and there cannot be duplicate numbers in the\
    \ array.\n */\n\n/**\n * Question 6\n * \n * Write a method named findFirst that\
    \ takes an array of ints and a number as arguments, and returns the\n * first\
    \ value in the array that is equal to the given number. If no such value in the\
    \ array, return\n * null.\n * \n * Your method should not return an int, but null.\
    \ The array must be non-empty and contain only\n * integers, and there cannot\
    \ be duplicate numbers in the array.\n */\n\n/**\n * Question 7\n * \n * Write\
    \ a method named removeAll that takes an array of ints as an argument, and removes\
    \ all of the \n * ints from the array. Return null if the array is empty or null.\n\
    \ * \n * Your method should not return an int, but null. The array must be non-empty\
    \ and contain only\n * integers, and there cannot be duplicate numbers in the\
    \ array.\n */\n\n/**\n * Question 8\n * \n * Write a method named removeAll that\
    \ takes an array of ints and a number as arguments, and removes all of the\n *\
    \ ints from the array. Return null if the array is empty or null.\n * \n * Your\
    \ method should not return an int, but null. The array must be non-empty and contain\
    \ only\n * integers, and there cannot be duplicate numbers in the array.\n */\n\
    \n/**\n * Question 9\n * \n * Write a method named removeAll that takes an array\
    \ of ints as an argument, and removes all of the\n * ints from the array. Return\
    \ null if the array is empty or null.\n * \n * Your method should not return an\
    \ int, but null. The array must be non-empty and contain only\n * integers, and\
    \ there cannot be duplicate numbers in the array.\n */\n\n/**\n * Question 10\n\
    \ * \n * Write a method named removeAll that ", "    $max = $lst[0];\n    foreach\
    \ ($lst as $key => $value) {\n        if ($value > $max) {\n            $max =\
    \ $value;\n        }\n        if ($value == $max) {\n            $count = $key\
    \ + 1;\n            return $count;\n        }\n    }\n    return -1;\n}\n", " \
    \   $freqs = array_count_values($lst);\n    return max($freqs) - $freqs[max($freqs)];\n\
    }\n\nprint_r(search([4, 1, 2, 2, 3, 1, 5, 6, 3]));\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays dscore=2 |>\nA solution that uses array_count_values\
    \ and array_search is very inefficient.\nIt is better to use a combination of\
    \ array_count_values and array_search to find the first element that has more\
    \ than one value:\n<code>\n<?php\n$array = array(1, 1, 2, 2, 3, 3, 4, 4, 5, 5,\
    \ 6);\n$firstRepeatingElement = -1;\n$counts = array_count_values($array);\nforeach\
    \ ($counts as $element => $count) {\n    if ($count > 1) {\n        $firstRepeatingElement\
    \ = array_search($element, $array);\n        break;\n    }\n}\necho \"First repeating\
    \ element in array: \", $firstRepeatingElement; // 3\n</code>\n<|/ a |>\n<| a\
    \ dscore=0 |>\nUse array_count_values() to count the frequency of each of the\
    \ values in your array.  Then you can use array_search to find the first value\
    \ that appears more than once in your array.\n<code>\n$values = array(1, 1, 2,\
    \ 2, 3, 3, 4, 4, 5, 5, 6);\n$count = array_count_values($values);\n\n$index =\
    \ -1;\nforeach ($count as $k => $v){\n    if ($v > 1){\n        $index = array_search($k,\
    \ $values);\n        break;\n    }\n}\n\necho \"Index is $index\\n\";\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a dscore=0 |>\nA slight variation on the other answers.\
    \ We do not need to loop the count array and find the key, we just need to find\
    \ the key which has the highest count and that is our result.\n<code>\n$maxKey\
    \ = -1;\n$maxValue = 0;\n\nforeach ($array as $value) {\n    $counts[$value]++;\n\
    \    if ($counts[$value] > $maxValue) {\n        $maxValue = $counts[$value];\n\
    \        $maxKey = $value;\n    }\n}\n\necho $maxKey;\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=0 |>\nThis solution is simpler and works for associative arrays\
    \ as well as numeric ones.\n<code>", "    $max = $freq = -1;\n\n    foreach ($lst\
    \ as $key => $num) {\n        $freq++; // add freq\n        if ($num > 0) {\n\
    \            if ($max < 0 || $freq > $max) {\n                $max = $freq;\n\
    \            }\n        } else {\n            // no such num\n            return\
    \ $key;\n        }\n    }\n\n    return $max;\n}\n\nprint_r(search($lst));\n</code>\n\
    <|/ a |>\n<| a |>\nI used the below solution:\n<code>", "    sort($lst);\n   \
    \ $freq = array_count_values($lst);\n    $min = 0;\n    foreach ($freq as $key\
    \ => $val) {\n        if ($val >= $min) {\n            $min = $key;\n        }\n\
    \    }\n    return $min == 0 ? -1 : min($lst);\n}\n", "    if (empty($lst)) {\n\
    \        return -1;\n    }\n    $freq = array_count_values($lst);\n    asort($freq);\n\
    \    foreach ($freq as $k => $v) {\n        if ($v > 1) {\n            return\
    \ $k;\n        }\n    }\n    return -1;\n}\n", "    if (count($lst) == 0) {\n\
    \        return -1;\n    }\n    $max_freq = array_count_values($lst);\n    $max_freq\
    \ = end($max_freq);\n    $max_freq_key = $max_freq[0];\n    if ($max_freq <= 1)\
    \ {\n        return $max_freq_key;\n    }\n    foreach ($lst as $val) {\n    \
    \    if ($val == $max_freq_key) {\n            return $val;\n        }\n    }\n\
    \    return -1;\n}\n", "  $freq = [];\n  foreach ($lst as $v) {\n    if (!isset($freq[$v]))\
    \ $freq[$v] = 1;\n    else $freq[$v]++;\n  }\n  foreach ($freq as $k => $v) {\n\
    \    if ($v > 0) return $k;\n  }\n  return -1;\n}\n</code>\n<|/ a tags=optimization,php,arrays,loops\
    \ |>\n<| c |>\nThat's a nice solution\n<|/ c |>\n<| a |>\n<code>", "    sort($lst);\n\
    \    $max = 0;\n    foreach($lst as $x) {\n        $max = max($max, $x - $max);\n\
    \    }\n    return $max;\n}\n", "  sort($lst);\n  $first = 0;\n  $freq = 0;\n\
    \  foreach ($lst as $v) {\n    if ($freq < $v && $first == 0) {\n      $first\
    \ = $v;\n      $freq = $v;\n    } else if ($v == $first && $freq == $v) {\n  \
    \    $freq++;\n    } else {\n      break;\n    }\n  }\n  return ($freq >= $first)\
    \ ? $first : -1;\n}\n</code>\n<|/ a |>\n<| c |>\nIt's a good start, but fails\
    \ on `array(1, 2, 3, 1, 2, 3)` because this returns 3.\n<|/ c |>\n<| c |>\nYou're\
    \ right! I'll update the answer\n<|/ c |>\n<| c |>\nThat's not \"good\" code.\
    \ The code is too complex to be read. You're simply throwing everything out and\
    \ doing a \"brute force\" approach to solve the problem - which is no good. At\
    \ least this code is easier to understand.\n<|/ c |>\n<| c |>\nYes i know that,\
    \ but OP didn't want another algorithms so i answered this in similar manner as\
    \ his question is. You answered it in better manner, so i just corrected his question\
    \ and he can get the best answer :p\n<|/ c |>\n<| a |>\nYou can use usort with\
    \ a custom comparison function that checks for the greatest value greater than\
    \ the number in the current position and greater than or equal to the current\
    \ value at each position:\n<code>", "    return search($lst, 0);\n}\n", "    $frequency\
    \ = array();\n    foreach ($lst as $item) {\n        if (isset($frequency[$item]))\
    \ $frequency[$item]++;\n        else $frequency[$item] = 1;\n    }\n    $result\
    \ = -1;\n    foreach ($frequency as $item => $count) {\n        if ($count >=\
    \ $result) $result = $item;\n    }\n    return $result;\n}\n</code>\n<|/ a |>\n\
    <| a tags=algorithm,php dscore=2 |>\nYou can use a simple and fast array sorting\
    \ algorithm:\n<code>", "    if (count($lst) == 0 || count($lst) == 1) {\n    \
    \    return -1;\n    }\n    $greatest_index = 0;\n    $greatest_frequency = $lst[0];\n\
    \    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] >= $greatest_frequency)\
    \ {\n            $greatest_frequency = $lst[$i];\n            $greatest_index\
    \ = $i;\n        }\n    }\n    return $greatest_index;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php,arrays,search,algorithm,max |>\nAn O(n) solution without using\
    \ sorting, using binary search (O(logn) complexity) on frequencies of the integers,\
    \ where n = count of integers in array\n<code>", "    $freq = [];\n    $min =\
    \ null;\n    foreach ($lst as $val) {\n        if ($freq[$val] == null) {\n  \
    \          $freq[$val] = 0;\n            $min = $val;\n        }\n        $freq[$val]++;\n\
    \        if ($min == null || $freq[$min] >= $freq[$val]) {\n            $min =\
    \ $val;\n        }\n    }\n    return $min;\n}\n", "    // write your code in\
    \ PHP\n    foreach ($lst as $key => $val) {\n        foreach ($lst as $key1 =>\
    \ $val1) {\n            if ($key > $key1 && $val >= $val1) {\n               \
    \ return $val;\n            }\n        }\n    }\n    return -1;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\nHere is a solution using recursion with a\
    \ binary search technique.\nIt will find any index where value is not -1, the\
    \ highest index it can find.\n<code>\n$nums = [1, 2, 2, 3, 4, 4, 4, 5];\n$maxIndex\
    \ = 0;\n\n$index = binarySearchRecursive($nums, $maxIndex);\n", "    if (count($lst)\
    \ == 0) {\n        return -1;\n    }\n\n    $max = 0;\n    $freq = -1;\n\n   \
    \ foreach ($lst as $key => $value) {\n        if ($freq >= $value) {\n       \
    \     $freq = $value;\n            $max = $key;\n        }\n    }\n\n    return\
    \ $max;\n}\n", "    $freq = 0;\n    $greatest = 0;\n    foreach ($lst as $value)\
    \ {\n        if ($value > 0 && $freq >= $value) {\n            $freq = $value;\n\
    \            $greatest = $value;\n        }\n    }\n    return $greatest;\n}\n",
  "    $ret = -1;\n    foreach ($lst as $v) {\n        if ($v > 0) {\n           \
    \ $ret = $v;\n            break;\n        }\n    }\n    return $ret;\n}\n", " \
    \   $m = count($lst);\n    foreach ($lst as $key => $value) {\n        $freq[$value]\
    \ += 1;\n        if ($freq[$value] >= $m) {\n            return $key;\n      \
    \  }\n    }\n    return -1;\n}\n</code>\n<|/ a tags=algorithm,arrays,php,sorting\
    \ dscore=0 |>\n<| c |>\nthank you very much for your help. I already found the\
    \ answer on my own and I posted it here too.\n<|/ c |>\n<| c |>\nThanks for the\
    \ reply. I checked the code, but I get a different result: \n`<?php", "    return\
    \ array_reduce(\n        $lst,\n        function ($result, $item) {\n        \
    \    if (isset($result[$item]) && $result[$item] >= $item) {\n               \
    \ return $result[$item];\n            }\n            if ($result >= 0) {\n   \
    \             return -1;\n            }\n            return $item;\n        },\n\
    \        0\n    );\n}\n</code>\n<|/ a dscore=0 tags=php,arrays,algorithm |>\n\
    <| c |>\nThat solution fails if the input array is empty.\n<|/ c |>\n<| c |>\n\
    : It does, but that's not what the OP asked for.  He asked for the greatest integer\
    \ that is greater than zero.\n<|/ c |>\n<| c |>\n: I see what you mean, but it\
    \ still fails if the input array is empty. It will return false when the first\
    \ item is encountered.\n<|/ c |>\n<| c |>\n: I updated the code so that it won't\
    \ return false when it encounters the first item.\n<|/ c |>\n<| c |>\n: It now\
    \ returns -1 when the first item is encountered.\n<|/ c |>\n<| a dscore=0 tags=php,arrays,algorithm\
    \ |>\nI recently had to solve this problem and I solved it like this:\n<code>",
  "    $n = count($lst);\n    if ($n === 0) return -1;\n    $maxVal = array_reduce($lst,\
    \ 'max', $n);\n    foreach ($lst as $key => $val) {\n        if ($val < $maxVal)\
    \ {\n            if ($val >= $n) {\n                return -1;\n            }\n\
    \            return $val - 1;\n        }\n    }\n    return -1;\n}\n</code>\n\
    <|/ a |>\n<| a dscore=1 tags=php |>\n<code>\n<?php\n$numbers = array(4, 1, 2,\
    \ 2, 3, 1);\n$largestElement = max($numbers);\n$counter = 0;\nforeach ($numbers\
    \ as $element) {\n    if ($element == $largestElement) {\n        $counter++;\n\
    \    }\n}\nif ($counter > 0) {\n    return $largestElement-1;\n}\nreturn -1;\n\
    </code>\n<|/ a |>\n<| a dscore=1 tags=php |>\nYou can do this in 1 line using\
    \ array_reduce and max\n<code>\n$number = array_reduce($array, function($c, $v){\n\
    \    return ($v > $c) ? ($v > $c ? $v : '-1') : '-1';\n});\n</code>\n<|/ a |>\n\
    <| a tags=php |>\nYou don't need a loop for this, a simple min/max will work fine:\n\
    <code>\n$array = array(4, 1, 2, 2, 3, 1);\n$largest = max($array);\nreturn isset($array[$largest])\
    \ ? $array[$largest] : -1;\n</code>\n<|/ a dscore=0 |>\n<| a tags=php |>\nThis\
    \ is my solution\n<code>\n<?php\n", "    sort($lst);\n    $freq = array_count_values($lst);\n\
    \    $freq = array_filter($freq, function($value) {\n        return $value >=\
    \ $lst[0] && $value <= $lst[count($lst) - 1];\n    });\n    $key = array_search($lst[0],\
    \ $freq);\n    return $key === false ? -1 : key($freq);\n}\n</code>\n<|/ a tags=algorithm,php\
    \ dscore=0 |>\n<| c |>\nPlease provide an explanation about your solution\n<|/\
    \ c |>\n<| c |>\nI added an explanation\n<|/ c |>\n<| c |>\nplease add the comment\
    \ about the code in the solution to make it clearer.\n<|/ c |>\n<| a dscore=0\
    \ tags=algorithm,php |>\nThis is a straightforward application of the Kadane's\
    \ algorithm (but with frequency arrays). I won't explain the details of this algorithm,\
    \ but for now I will not use its complexity because it does not add any useful\
    \ value to this problem.\nThis algorithm is simply a O(n) implementation of a\
    \ O(n log(n)) sort algorithm. It works by creating a frequency array for the input\
    \ sequence, then sorting it and looking for the greatest element in the frequency\
    \ array that is higher than or equal to the first element of the input sequence.\
    \ \nThis gives an O(n) solution because of the sorting algorithm, and an O(n log(n))\
    \ sorting algorithm because it uses the fact that elements of the input array\
    \ are consecutive and that they are sorted in increasing order - this means that\
    \ we do not need to do any extra sorting in order to find the greatest element.\n\
    The function returns -1 if the input sequence is empty, or the greatest element\
    \ in the input sequence if the input sequence is non empty\n<code>", "    if (count($lst)\
    \ === 0) return -1;\n\n    $max = $lst[0];\n\n    foreach ($lst as $value) {\n\
    \        if ($value === $max) continue;\n        if ($value > $max) $max = $value;\n\
    \    }\n    return $max;\n}\n", "  foreach ($lst as $a) {\n    if ($a > 1) {\n\
    \      $x = 1;\n      $y = $a;\n      while ($x <= $y) {\n        $z = $x + $y;\n\
    \        $x = $y + 1;\n        $y = $z;\n      }\n      if ($x > $a) {\n     \
    \   return $x;\n      } else {\n        return -1;\n      }\n    }\n  }\n}\n",
  "    $max = $lst[0];\n    $min = $lst[0];\n    foreach ($lst as $value) {\n    \
    \    if ($value > $max) {\n            $max = $value;\n        }\n        if ($value\
    \ < $min) {\n            $min = $value;\n        }\n    }\n    return $max > 0\
    \ ? $max : $min === $max ? $min : -1;\n}", "    if (empty($lst)) {\n        return\
    \ -1;\n    }\n\n    $m = max($lst);\n    return array_search($m, $lst);\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis solution is wrong. Try with array(1, 2, 2, 3, 3, 3, 4,\
    \ 4, 4) and you will see. Also, if the array is sorted, you do not need to search\
    \ for the largest element, but for the next one to have the same value.\n<|/ c\
    \ |>\n<| c |>\nThe above code works just fine for me. Try it with your arrays\
    \ and you will see. Notice the comment above the code that says \"// You are given\
    \ a non-empty array of positive integers\". That is precisely the condition for\
    \ the code to work. Did you actually try the code you wrote? It works perfectly\
    \ for me.\n<|/ c |>\n<| c |>\nYes, I tried it. As I wrote, it works for arrays\
    \ of length 1, but fails for arrays of length 2. Your solution fails for the arrays\
    \ you posted in the first comment because the first array does not contain all\
    \ the numbers in ascending order. Try with array(1, 2, 3, 3, 3, 3, 4) and you\
    \ will see that it does not work.\n<|/ c |>\n<| c |>\nApologies. I misread the\
    \ comment and thought it was talking about different arrays.\n<|/ c |>\n<| c |>\n\
    No, it does not work with the arrays you posted. Try with the arrays (1, 2, 2,\
    \ 3, 3, 3, 4, 4, 4) and you will see that the result is wrong. The correct answer\
    \ is 2.\n<|/ c |>\n<| a dscore=2 |>\nHere is an O(n) solution, with O(n) memory\
    \ usage (without using extra memory).\nThe idea is to build a map of unique numbers\
    \ and their frequencies, and to keep a pointer to the number that is greatest\
    \ in the array (starting from the first element).\nThen, for each element in the\
    \ array, increment its frequency in the map (if it is currently 0). When the map\
    \ reaches its maximum value, find the number with frequency equal to the current\
    \ frequency of the array, and set the pointer to that number.\n<code>", "    $max\
    \ = -1;\n    $maxV = 0;\n    foreach ($lst as $v) {\n        if ($v > 0) {\n \
    \           $maxV = $v;\n            $max = $v;\n        }\n    }\n    return\
    \ $max;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nYes, but that would involve two\
    \ loops which would be less efficient. As I explained in my answer, a loop is\
    \ actually the most efficient way to do it.\n<|/ c |>\n<| c |>\n: Sure, but what\
    \ would be the best solution then?\n<|/ c |>\n<| c |>\n, I'm sure you can figure\
    \ this one out, but I posted a solution that uses no loops at all.\n<|/ c |>\n\
    <| a dscore=2 tags=arrays,php |>\nUsing array_count_values() function you can\
    \ do this in a single function call. Try like this\n<code>\n<?php\n", "    sort($lst);\n\
    \    foreach ($lst as $value) {\n        if ($value > 0)\n            return $value;\n\
    \    }\n    return -1;\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a |>\n\
    <code>\n<?php\n\n$arr = array(4,1,2,2,3,1);\n\n$freq = [];\n\nforeach ($arr as\
    \ $key => $value) {\n    if (isset($freq[$value])) {\n        $freq[$value]+=1;\n\
    \    } else {\n        $freq[$value] = 1;\n    }\n}\n\n$arr = array_keys($freq);\n\
    \n$arr[] = array_pop($arr);\necho implode($arr, ',');\n</code>\n<|/ a tags=php,sorting,arrays\
    \ dscore=0 |>\n<| a tags=php,sorting,arrays dscore=0 |>\nI believe the code below\
    \ should do what you need:\n<code>\n<?php\n\n$arr = [\n    [1,2,3],\n    [2,3,4],\n\
    \    [3,4,4],\n    [4,5,6],\n    [5,6,7],\n];\n\nforeach($arr as $a) {\n    usort($a,\
    \ function($a, $b) {\n        $a = array_count_values($a);\n        $b = array_count_values($b);\n\
    \n        if($a[1] < $b[1])\n            return -1;\n        elseif($a[1] > $b[1])\n\
    \            return 1;\n        elseif($a[0] < $b[0])\n            return -1;\n\
    \        elseif($a[0] > $b[0])\n            return 1;\n        else\n        \
    \    return 0;\n    });\n}\n\n$result = array_pop($arr);\n\nprint_r($result);\n\
    </code>\nIt uses array_count_values() to count the frequency of values, and then\
    \ sorts the values by their frequency. Then, pops the last element from the array\
    \ and outputs it.\nResult:\n<code>\nArray\n(\n    [0] => 6\n    [1] => 4\n   \
    \ [2] => 3\n    [3] => 2\n)\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n$arr=[1,2,3,4,5,6,7,8,9,10,11,12,13,14];\n",
  "  $f = array_count_values($lst);\n  foreach ($f as $i => $freq)\n    if ($freq\
    \ > 0)\n      return $i;\n  return -1;\n}\n</code>\n<|/ a dscore=3 tags=arrays,php\
    \ |>\n<| a tags=arrays,php dscore=2 |>\nOne approach:\n<code>", "    $max = -1;\n\
    \    $maxFreq = 0;\n    foreach ($lst as $value) {\n        if ($value > $max)\
    \ {\n            $max = $value;\n        }\n        if ($maxFreq < $value) {\n\
    \            $maxFreq = $value;\n        }\n    }\n    return $max;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=arrays,php,search,algorithm |>\n<code>", "    return\
    \ max(array_filter($lst, function($x) {\n        return count($lst)-$lst==$x;\n\
    \    }));\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis is very close to being\
    \ correct, but doesn't work for arrays that have a negative value at the end\n\
    <|/ c |>\n<| c |>\nThis works correctly even for the negative array values at\
    \ the end.  It simply keeps going until it reaches the smallest possible value\
    \ of 1.\n<|/ c |>\n<| a dscore=1 |>\nHere's a method that does it in O(n) time\
    \ and space\n<code>", "    if (!is_array($lst)) {\n        return -1;\n    }\n\
    \    $freq = [];\n    foreach ($lst as $val) {\n        if (!isset($freq[$val]))\
    \ {\n            $freq[$val] = 0;\n        }\n        $freq[$val]++;\n    }\n\n\
    \    asort($freq);\n\n    $res = -1;\n    foreach ($freq as $val) {\n        if\
    \ ($val >= $res) {\n            $res = $val;\n        }\n    }\n\n    return $res;\n\
    }\n</code>\n<|/ a tags=php |>\n<| c |>\nThank you for posting this.  It works\
    \ perfectly!\n<|/ c |>\n<| c |>\nI think you just need to make sure `$lst` is\
    \ an array, otherwise `array_count_values($lst)` would not work properly.\n<|/\
    \ c |>\n<| c |>\nYeah you're right. I think it was more a question of how to do\
    \ it than actually writing it (which is why I didn't post it). I updated my answer\
    \ to reflect that. Thank you for the suggestion!\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>", "    sort($lst);\n    $ret = -1;\n    $freq = [];\n    $prev = null;\n\
    \    $prevfreq = 0;\n    foreach ($lst as $value) {\n        $freq[$value] = $freq[$value]\
    \ + 1;\n        if ($value == $prev) {\n            if ($freq[$value] == $prevfreq)\
    \ {\n                $ret = $value;\n            }\n        } else {\n       \
    \     $prev = $value;\n            $prevfreq = $freq[$value];\n        }\n   \
    \ }\n    return $ret;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nIt returns\
    \ -1 all the time. :(\n<|/ c |>\n<| a |>\nThis works for me:\n<code>\n$list =\
    \ array(4, 1, 2, 2, 3, 1);\n\nusort($list, function($a, $b) {\n    return ($b\
    \ - $a) >= 0 ? $b - $a : $a - $b;\n});\n\n$highest = end($list);\nvar_dump($highest);\n\
    </code>\nOutput:\n<code>\nint(3)\n</code>\n<|/ a tags=arrays,php dscore=0 |>\n\
    <| c |>\nIt returns -1 all the time. :(\n<|/ c |>\n<| a dscore=0 |>\nIf you need\
    \ to find an element, which has the highest value then you need to sort the array\
    \ and get the last one. This can be done in O(n) with the help of usort function,\
    \ because sorting is O(n log n). \n<code>\nusort($array, function($a, $b){\n \
    \ return $b - $a;\n});\necho $array[count($array)-1];\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\nIt returns -1 all the time. :(\n<|/ c |>\n<| c |>\nI tested this\
    \ and it works fine.\n<|/ c |>\n<| c |>\nCan you show me your code? I copied it\
    \ to a php file and it returns -1\n<|/ c |>\n<| c |>", "    if (!is_array($lst))\
    \ {\n        throw new InvalidArgumentException('Input should be an array');\n\
    \    }\n\n    $minVal = PHP_INT_MAX;\n    $minValKey = null;\n    $maxVal = PHP_INT_MIN;\n\
    \    $maxValKey = null;\n    foreach($lst as $i => $elem) {\n        if ($elem\
    \ > $maxVal) {\n            $maxValKey = $i;\n            $maxVal = $elem;\n \
    \       } else if ($elem < $minVal) {\n            $minValKey = $i;\n        \
    \    $minVal = $elem;\n        }\n    }\n    if ($maxValKey === null) {\n    \
    \    return -1;\n    }\n    return $maxVal;\n}\n</code>\n<|/ a |>\n<| c |>\nNice!\
    \ But I should add that you might want to do some checks in case of a non-integer\
    \ array.\n<|/ c |>\n<| c |>\nGood call. Thanks for the catch.\n<|/ c |>\n<| c\
    \ |>\nHmmm... I keep getting an `Warning: Invalid argument supplied for foreach()`\
    \ when running the script. It might be because of the way I'm passing the array,\
    \ but I don't see what I'm doing wrong.\n<|/ c |>\n<| c |>\nPlease show your code.\
    \ I don't think you can run this code as is. If you can post your code, I can\
    \ try to debug it. The issue is probably in the code you haven't shown.\n<|/ c\
    \ |>\n<| c |>\nI managed to fix it. The problem was that I wasn't passing the\
    \ array as `array()` but as `array()`, which meant that the function didn't know\
    \ what to loop through. I fixed it by passing it as `array(array())` instead of\
    \ just `array()`.\n<|/ c |>\n<| a dscore=0 tags=php,arrays,search |>\n<code>",
  "    $freq = array_count_values($lst);\n    $result = -1;\n    $index = 0;\n   \
    \ foreach ($freq as $key => $val) {\n        if ($val >= $freq[$index]) {\n  \
    \          $result = $key;\n            break;\n        }\n        $index++;\n\
    \    }\n    return $result;\n}\n</code>\n<|/ a dscore=1 tags=arrays,sorting,php\
    \ |>\n<| a tags=arrays,sorting,php |>\nHere is my approach using array_count_values(),\
    \ array_keys and array_search:\n<code>\n<?php\n", "  sort($lst);\n  foreach ($lst\
    \ as $val) {\n    $count[$val]++;\n  }\n  if (count($count) == 0) {\n    return\
    \ -1;\n  }\n  foreach ($count as $val => $c) {\n    if ($val == 0) {\n      return\
    \ -1;\n    }\n    if ($val >= $c) {\n      return $val;\n    }\n  }\n  return\
    \ -1;\n}\n</code>\n<|/ a tags=php,arrays dscore=0 |>\n<| c |>\nIt is not working\
    \ for this\nInput: array(4, 1, 2, 2, 3, 1)\nOutput: -1\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\nYou can use array_count_values and then use array_search. After you get\
    \ the counts, you iterate over each of the array and search for the first key\
    \ that is greater than or equal to the current key. After that you return the\
    \ key if the current key was greater than or equal to the previous key, or the\
    \ value of $key if not.\n<code>", "  sort($lst);\n  $cur = max($lst);\n  $ret\
    \ = 0;\n  foreach ($lst as $i) {\n    if ($i >= $cur) {\n      $ret++;\n    }\n\
    \  }\n  return $ret;\n}\n\n<|/ file filename=p50.php dstars=1 |>\n<| c |>\nI edited\
    \ my answer, i misunderstood your question!\n<|/ c |>\n<| c |>\nI see what you\
    \ were trying to do and have updated the code to match your requirements. Hope\
    \ it helps!\n<|/ c |>\n<| a |>\nYou are looking for the largest consecutive subsequence\
    \ of size 2 that occurs at most once.\nThis is a classic problem in programming.\
    \ It's called longest increasing subsequence.\nThis wikipedia article discusses\
    \ it extensively and offers a solution that is pretty simple to implement.\nHere's\
    \ some pseudocode:\n<code>", "    $freq = [];\n    $res = -1;\n    foreach ($lst\
    \ as $e) {\n        if (isset($freq[$e])) {\n            $freq[$e]++;\n      \
    \  } else {\n            $freq[$e] = 1;\n        }\n    }\n    arsort($freq);\n\
    \    $res = (array_pop($freq) > 0) ? array_pop($freq) : -1;\n    return $res;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=php dscore=1 |>\n<code>", "    $arr =\
    \ array_count_values($lst);\n    foreach ($arr as $k => $v) {\n        if ($v\
    \ > 0) {\n            return $k;\n        }\n    }\n    return -1;\n}\n", "  foreach\
    \ ($lst as $key => $val) {\n    if ($val > 0) {\n      return $val;\n    }\n \
    \ }\n  return -1;\n}\n\n$a = array(4, 1, 2, 2, 3, 1);\necho search($a), \"\\n\"\
    ;\n$a = array(5, 5, 4, 4, 4);\necho search($a), \"\\n\";\n$a = array(1, 2, 2,\
    \ 3, 3, 3, 4, 4, 4);\necho search($a), \"\\n\";\n$a = array(10, 2, 2, 2, 2, 10,\
    \ 10, 10);\necho search($a), \"\\n\";", "    $frequency = array_count_values($lst);\n\
    \    \n    foreach ($frequency as $k => $v) {\n        if ($v > count($lst)) {\n\
    \            return -1;\n        }\n    }\n    \n    return max($frequency);\n\
    }\n", "    foreach($lst as $value) {\n        if ($value > 0) return $value;\n\
    \    }\n    return -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\nMy approach is\
    \ to use array_count_values and then return the key with max value\n<code>\n$arr\
    \ = array(4, 1, 2, 2, 3, 1);\n$counts = array_count_values($arr);\n$keys = array_keys($counts,\
    \ max($counts));\necho $keys[0];\n</code>\n<|/ a tags=php,arrays dscore=0 |>\n\
    <| a dscore=0 tags=php,arrays |>\nMy approach would be to sort the array and then\
    \ get max value from it and again sort the array by this max value. \n<code>",
  "  $max = 0;\n  $min = 1;\n  foreach ($lst as $num) {\n    if ($num > $max) {\n\
    \      $max = $num;\n    }\n    if ($num < $min) {\n      $min = $num;\n    }\n\
    \    if ($num == $min) {\n      return $num;\n    }\n  }\n  return -1;\n}\n\n\
    $arr = array(4,1,2,2,3,3,3,4,4,4,5,5,5,5,5);\nprint_r(search($arr));\n", "   \
    \ $min = 0;\n    $max = sizeof($lst);\n    while($min < $max) {\n        $mid\
    \ = $min + $max/2;\n        $midVal = $lst[$mid];\n        if($midVal < 0) {\n\
    \            $min = $mid +1;\n        } elseif ($midVal > 0) {\n            $max\
    \ = $mid;\n        } else {\n            $min = $mid + 1;\n            $max =\
    \ $mid + 1;\n        }\n    }\n    if($min == $max) {\n        return $lst[$min];\n\
    \    }\n    return -1;\n}\n", "    foreach($lst as $key => $value) {\n       \
    \ if($value == 0) {\n            return $key;\n        }\n        if($value >=\
    \ count($lst)) {\n            return -1;\n        }\n    }\n}\n</code>\n<|/ a\
    \ tags=php dscore=0 |>\n<| c |>\nThis is a good solution, except that it doesn't\
    \ return -1 when no integer greater than zero is found.\n<|/ c |>\n<| c |>\nThanks.\
    \ I fixed it.\n<|/ c |>\n<| a dscore=0 |>\nA solution without array_reduce() but\
    \ with for loops. \n<code>\n<?php\n/**\n * Search for greatest integer that is\
    \ greater than zero\n * and has a frequency greater than or equal to the value\
    \ of integer itself.\n * The frequency of an integer is the number of times it\
    \ appears in the array.\n * If no such value exist, return -1.\n * array\n * int\n\
    \ */", "    sort($lst);\n    $freq = [];\n    $max = -1;\n    foreach($lst as\
    \ $value) {\n        if (isset($freq[$value])) $freq[$value]++;\n        else\
    \ $freq[$value] = 1;\n        if ($freq[$value] > $max) $max = $value;\n    }\n\
    \    return ($max == -1) ? -1 : $max;\n}\n", "    $freq = [];\n    $result = 0;\n\
    \    foreach ($lst as $num) {\n        if (isset($freq[$num])) {\n           \
    \ $freq[$num] += 1;\n        } else {\n            $freq[$num] = 1;\n        }\n\
    \        if ($freq[$num] > $result) {\n            $result = $num;\n        }\n\
    \    }\n    if ($freq[$result] == $result) {\n        return $result;\n    } else\
    \ {\n        return -1;\n    }\n}\n", "    $freqArr = array_count_values($lst);\n\
    \    arsort($freqArr);\n    foreach ($freqArr as $index => $value) {\n       \
    \ if ($freqArr[$index] >= $value) {\n            return $index;\n        }\n \
    \   }\n    return -1;\n}\n\n$tests = array(\n    array(array(4, 1, 2, 2, 3, 1)),\n\
    \    array(array(1, 2, 2, 3, 3, 3, 4, 4, 4)),\n    array(array(5, 5, 4, 4, 4)),\n\
    \    array(array(1, 3, 2, 1)),\n);\n\nforeach ($tests as $test) {\n    echo \"\
    Test [$test[0]:$test[1]:$test[2]] found $test[3] occurrences\\n\";\n}", "    sort($lst);\n\
    \    $val = array_shift($lst);\n    if ($val == 0) {\n        return -1;\n   \
    \ }\n    $freq = 1;\n    $i = 0;\n    foreach ($lst as $v) {\n        if ($v ==\
    \ $val) {\n            if ($freq > $v) {\n                return $i;\n       \
    \     }\n            $freq++;\n            $i++;\n        } else {\n         \
    \   $freq = 1;\n        }\n    }\n    return -1;\n}", "    $result = -1;\n   \
    \ $counter = array();\n\n    foreach ($lst as $val) {\n        if (!isset($counter[$val]))\
    \ {\n            $counter[$val] = 1;\n        } else {\n            $counter[$val]++;\n\
    \        }\n    }\n\n    arsort($counter);\n\n    foreach ($counter as $val =>\
    \ $freq) {\n        if ($freq >= $result) {\n            $result = $val;\n   \
    \     }\n    }\n\n    return $result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    Not sure why, but this doesn't work for me. I'm using PHP 5.5.30\n<|/ c |>\n<|\
    \ c |>\nIt's working fine for me, even for PHP 5.5.30. What is the issue you are\
    \ seeing?\n<|/ c |>\n<| c |>\nAwesome. Thank you so much for this! I love how\
    \ concise it is.\n<|/ c |>\n<| c |>\n: This code assumes the input list is already\
    \ sorted.  If you need it to be sorted, you could just add `sort($counter);` after\
    \ your `foreach` loop.\n<|/ c |>\n<| a tags=php |>\nThis is an alternative to\
    \ Edmund's answer that returns an array of frequencies, rather than just the largest\
    \ one.\n<code>", "    $freq = array_count_values($lst);\n    $max = -1;\n    foreach\
    \ ($freq as $val => $count) {\n        if ($count > $max) {\n            $max\
    \ = $count;\n        }\n    }\n    return ($max > 0) ? $max : -1;\n}\n</code>\n\
    <|/ a dscore=1 tags=arrays,algorithm,php |>\n<| c |>\nI'm looking for the greatest\
    \ number, not the number of times it appears in the array. I know that some people\
    \ are going to complain about me writing code that's a little more efficient (using\
    \ foreach and array_count_values), but I really need to know how to solve this\
    \ problem using simple array manipulation functions.\n<|/ c |>\n<| c |>\nI updated\
    \ my answer after looking at yours, thanks.\n<|/ c |>\n<| a |>\nI believe this\
    \ does what you want:\n<code>"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
