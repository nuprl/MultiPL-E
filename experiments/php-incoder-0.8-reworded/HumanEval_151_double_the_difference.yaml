name: HumanEval_151_double_the_difference
language: php
prompt: "<?php\n// Given an array of numbers, return the sum of squares of the numbers\n\
  // in the array that are odd. Ignore numbers that are negative or not integers.\n\
  // >>> double_the_difference(array(1, 3, 2, 0))\n// 10\n// >>> double_the_difference(array(-1,\
  \ -2, 0))\n// 0\n// >>> double_the_difference(array(9, -2))\n// 81\n// >>> double_the_difference(array(0))\n\
  // 0\n// If the input array is empty, return 0.\nfunction double_the_difference($lst)\
  \ {\n"
tests: "function candidate(...$args) {\n    return double_the_difference(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(5.0, 4.0)) !== 25) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(0.1, 0.2, 0.3)) !== 0) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-10.0, -20.0, -30.0)) !== 0) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1.0, -2.0, 8.0))\
  \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.2,\
  \ 3.0, 5.0)) !== 34) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-9.0,\
  \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0)) !== 165) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $sum = 0;\n    foreach ($lst as $number) {\n        if ($number\
    \ >= 0) {\n            $sum += $number * $number;\n        } else {\n        \
    \    if ($number === 0) {\n                continue;\n            }\n        \
    \    $sum -= $number;\n        }\n    }\n    return $sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php |>\n<code>", "  $evens = array_filter($lst, 'is_int');\n \
    \ if ($evens) {\n    return array_sum($evens);\n  }\n  return 0;\n}", "    $sum\
    \ = 0;\n    foreach ($lst as $number) {\n        if (is_int($number)) {\n    \
    \        $sum += $number;\n        } else {\n            if ($number >= 0) {\n\
    \                $sum += $number * $number;\n            }\n        }\n    }\n\
    \    return $sum;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nI appreciate your answer,\
    \ however, I went ahead and edited the question to make it more clear.\n<|/ c\
    \ |>\n<| c |>\n: I've added an alternative solution.\n<|/ c |>\n<| a |>\nI wrote\
    \ a PHP script some time ago to compare the performance of different algorithms.\
    \ You can find it here: http://pastebin.com/KwY3Vy5K\nI remember I compared 3\
    \ different algorithms (O(n), O(nlogn) and O(n^2)). In the end I used a combination\
    \ of them all to achieve the maximum performance of O(n^2). Hope it helps.\n<|/\
    \ a tags=php dscore=3 |>\n<| c |>\nThanks for the link.  Very helpful.  I thought\
    \ the problem was too large for PHP to handle but your answer makes it very clear.\n\
    <|/ c |>\n<| c |>\nThis is great! I'm going to use this. One thing I've noticed\
    \ is that when testing with large lists $sum = 0 is actually faster than $sum\
    \ = 0; foreach($numbers as $number). Is this normal?\n<|/ c |>\n<| a tags=php\
    \ |>\nYou can solve this problem in O(n) using a hash map\nThe idea behind it\
    \ is to keep a hash map of numbers which we know are already in the array\n<code>\n\
    $map = array();\n</code>\nWhen we try to add an element to the array, we check\
    \ if that element is present in the hashmap, and if not, we add it and update\
    \ the hashmap accordingly\n<code>\n$map[$item] = true;\n</code>\nFinally, to find\
    \ if an element is present in the hashmap, we iterate over each item and see if\
    \ the hashmap has the element present\n<code>", "  if (empty($lst)) {\n    return\
    \ 0;\n  }\n  return array_sum(array_filter($lst, function ($x) {\n    return ($x\
    \ > 0) && is_integer($x);\n  })) * (1 + array_sum(array_filter($lst, function\
    \ ($x) {\n    return ($x < 0) || is_integer($x);\n  })));\n}\n", "  return array_reduce(\n\
    \    $lst,\n    function($sum, $value) use ($lst) {\n      if ($value > 0) {\n\
    \        return $sum + $value * $value;\n      }\n      return $sum;\n    },\n\
    \    0\n  );\n}\n", "  if (empty($lst)) {\n    return 0;\n  }\n\n  // Initialize\
    \ sum variable with 0 and add the numbers in the list to it.\n  $sum = 0;\n  foreach\
    \ ($lst as $num) {\n    if ($num & 1) {\n      $sum += $num;\n    }\n  }\n\n \
    \ // If the list is empty then return the sum of all the numbers.\n  if ($sum\
    \ === 0) {\n    return array_sum($lst);\n  }\n\n  // Otherwise, return the sum\
    \ of all the squares of the numbers in the list.\n  return $sum * ($sum - 1);\n\
    }", "    if (!$lst) {\n        return 0;\n    }\n    $result = $lst[0];\n    foreach\
    \ ($lst as $num) {\n        if ($num < 0) {\n            continue;\n        }\n\
    \        $result += (2 * $num);\n    }\n    return $result;\n}\n</code>\n<|/ a\
    \ tags=php dscore=0 |>\n<| c |>\nHow would you do this for an array of arrays?\n\
    <|/ c |>\n<| a tags=php |>\nI think this is what you need:\n<code>\n<?php", " \
    \   if (!$lst)\n        return 0;\n    $sum = 0;\n    for ($i = 0; $i < count($lst);\
    \ ++$i)\n        if ($i % 2 == 1 && $lst[$i] < 0)\n            $sum += -$lst[$i]\
    \ * $lst[$i];\n        else\n            $sum += $lst[$i] * $lst[$i];\n    return\
    \ $sum;\n}", "    foreach ($lst as $x) {\n        if (false === is_numeric($x))\
    \ {\n            return 0;\n        }\n    }\n    return array_sum(array_map(function($x)\
    \ {\n        if ($x > 0) {\n            return $x * $x;\n        }\n        return\
    \ 0.0;\n    }, $lst));\n}\n</code>\n<|/ a |>\n<| c |>\nThanks ! But if i need\
    \ return array instead of float ?\n<|/ c |>\n<| c |>\nIt would be helpful to show\
    \ an example of the array structure you are expecting.\n<|/ c |>\n<| c |>\nI need\
    \ sum of array values squared divided by total of array values except zeros\n\
    <|/ c |>\n<| c |>\nIt would be helpful if you could edit your question with an\
    \ example of the array structure. The answer already shows how to handle a case\
    \ with multiple values.\n<|/ c |>\n<| c |>\nOk. Thanks for your help\n<|/ c |>\n\
    <| a dscore=0 |>\nYou can get the desired result by using array_map\n<code>\n\
    <?php\n$inputArray = array(2, 4, 6, 3, 7, 8, 5, -1, -2, 10, 0, 12, 4, 13, 5, 14,\
    \ 11, 10, 7);\n$arraySum = array_sum($inputArray);\n$arraySum2 = array_sum(array_map(\"\
    square\", $inputArray));\n$arraySum3 = array_sum(array_map(\"square\", $inputArray),\
    \ \"0\");\n$arraySum4 = array_sum(array_map(\"square\", $inputArray), 0);\necho\
    \ \"sum1: $arraySum | sum2: $arraySum2 | sum3: $arraySum3 | sum4: $arraySum4\\\
    n\";\necho \"sum1: \" . ($arraySum / $arraySum4) . \"\\n\";\necho \"sum2: \" .\
    \ ($arraySum2 / $arraySum3) . \"\\n\";\necho \"sum3: \" . ($arraySum3 / $arraySum2)\
    \ . \"\\n\";\n</code>\nOutput:\n<code>\nsum1: 101 sum2: 101 sum3: 101 sum4: 101\n\
    sum1: 4 sum2: 16 sum3: 16 sum4: 40\n</code>\nLive example\n<|/ a tags=php |>\n\
    <| c |>\nThanks ! But if i need return array instead of float ?\n<|/ c |>\n<|\
    \ c |>\n, I don't think it can return array instead of float because array_sum\
    \ and array_map return float only. you can see the live example which I added\
    \ in my answer\n<|/ c |>\n<| a |>\nThis solution is using array_sum and array_map\
    \ with a closure:\n<code>\n<?php\n$inputArray = array(2, 4, ", "  if(!$lst) {\n\
    \    return 0;\n  }\n  return array_sum(array_filter($lst, function($v) { return\
    \ !is_numeric($v) || $v != floor($v); }));\n}", "  // Use isset() to check each\
    \ element of $lst for being a valid\n  // integer or valid array, and return 0\
    \ if it is not.\n  return array_reduce($lst, 'double_the_difference_check', 0);\n\
    }", "    $n = 0;\n    foreach ($lst as $e) {\n        if ($e > 0 && $e % 2 !=\
    \ 0) {\n            $n += $e * $e;\n        }\n    }\n    return $n;\n}\n", " \
    \   foreach ($lst as $k => $v) {\n        if ($v >= 0) {\n            $ret[] =\
    \ $v;\n        } else {\n            $ret[] = abs($v);\n        }\n    }\n   \
    \ return array_sum($ret);\n}", "  if (empty($lst)) {\n    return 0;\n  }\n  $result\
    \ = 0;\n  foreach ($lst as $i => $n) {\n    if ($n % 2 == 1) {\n      $result\
    \ -= $n * $n;\n    }\n  }\n  return $result;\n}\n", "    if (empty($lst)) {\n\
    \        return 0; // Empty lists just have no answer\n    }\n\n    $total = array_sum($lst);\n\
    \    $total_squared = array_sum(array_map(function($item) { return $item ** 2;\
    \ }, $lst));\n    $total_square_root = sqrt($total_squared);\n    return $total_square_root\
    \ / $total;\n}\n", "    $res = 0;\n    foreach ($lst as $num) {\n        if ($num\
    \ >= 0) {\n            $res += $num;\n        } else {\n            $res += $num\
    \ + 1;\n        }\n    }\n    return $res;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\n<?php", "  $sum = 0;\n  foreach ($lst as $el) {\n   \
    \ if ($el < 0) {\n      continue;\n    }\n    if (is_int($el)) {\n      $sum +=\
    \ $el;\n    }\n  }\n  return $sum * $sum;\n}\n", "  $total = 0;\n  foreach ($lst\
    \ as $value) {\n    if ($value < 0) {\n      $total = $total + ($value * $value);\n\
    \    } else {\n      $total = $total + $value;\n    }\n  }\n  return $total;\n\
    }\n", "    $sum = 0;\n    $len = count($lst);\n    foreach ($lst as $a) {\n  \
    \      if ($a < 0) {\n            $a *= -1;\n        }\n        if ($a % 2 ===\
    \ 1) {\n            $sum += $a;\n        }\n    }\n    return $len === 0 ? 0 :\
    \ $sum * $sum;\n}\n", "  foreach ($lst as $x) {\n    if (is_numeric($x)) {\n \
    \     if ($x > 0) {\n        $x += 1;\n      }\n    }\n  }\n  return $lst[0] *\
    \ (2 * $lst[0] - $lst[1]);\n}", "    return $lst ? array_sum(array_map(function\
    \ ($n) { return pow($n, 2); }, array_filter($lst))) : 0;\n}\n", "  if (!count($lst))\
    \ {\n    return 0;\n  }\n  return array_sum(array_filter(array_map(function($e)\
    \ {\n    if ($e < 0) {\n      return 0.0;\n    }\n    return $e * $e;\n  }, $lst)));\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI realized that my answer would have not\
    \ really been right - I realized you were trying to do that with only `array_sum`.\
    \ However, I wanted to let you see how it can be done without `array_sum` too.\
    \ I am still learning php so I hope I didn't miss something obvious.\n<|/ c |>\n\
    <| a dscore=0 |>\nYou could use array_walk with array_reduce to do this in one\
    \ function call, for example:\n<code>", "  if (empty($lst)) return 0;\n  $sum\
    \ = 0;\n  for ($i = 0; $i < count($lst); $i++) {\n    if ($i % 2 === 1) $sum +=\
    \ $lst[$i];\n  }\n  return $sum;\n}", "\tif(!$lst) return 0;\n\t$sum = 0;\n\t\
    foreach($lst as $item) {\n\t\tif($item < 0) {\n\t\t\tif($item < 0) return 0;\n\
    \t\t} else {\n\t\t\tif($item % 2 == 0) $sum += $item;\n\t\t}\n\t}\n\treturn $sum;\n\
    }", "  $sum = 0;\n  $odds = 0;\n  $negatives = 0;\n  foreach ($lst as $num) {\n\
    \    if (is_int($num)) {\n      $sum += $num;\n      $odds += $num % 2;\n    \
    \  if ($num < 0) {\n        $negatives++;\n      }\n    } else {\n      $sum +=\
    \ $num * $num;\n      if ($num < 0) {\n        $negatives++;\n      }\n    }\n\
    \  }\n\n  return $odds > 1 ? $sum : $negatives % 2 == 0 ? $sum : 0;\n}", "   \
    \ $result = array_sum(array_filter(array_map(function ($value) {\n           \
    \ return $value % 2 == 1;\n        }, \n        $lst)));\n    if ($result ===\
    \ 0)\n        return 0;\n    return $result;\n}\n", "  return array_sum(\n   \
    \ array_filter(\n      array_map(\n        'intval',\n        array_filter(\n\
    \          array_map('floor', $lst),\n          function($value) {\n         \
    \   return is_integer($value) && $value >= 0;\n          }\n        )\n      ),\n\
    \      function($value) {\n        return !($value & 1);\n      }\n    )\n  );\n\
    }\n", "    $n = count($lst);\n    $sum = 0;\n    for ($i = 0; $i < $n; $i++) {\n\
    \        if ($i % 2 != 0) {\n            $sum += $lst[$i];\n        }\n    }\n\
    \    return $sum;\n}\n</code>\nThe array is the list of numbers (integers and\
    \ negatives).  It should be modified to remove any values that are not integers.\
    \  In other words, the function should check if each item in the list is an integer.\n\
    <|/ a |>\n<| c |>\nWhy would you make `double_the_difference()` a class-level\
    \ function?  It doesn't belong in the class at all.  It could be a top-level function,\
    \ but it shouldn't.  It doesn't need a class, either.  But it does need a function.\n\
    <|/ c |>\n<| c |>\nA function inside a class makes it a class function.  I did\
    \ it this way to allow it to be called from a class instance in the calling routine.\
    \  You could make it a top level function if you want.  There's no reason for\
    \ it to be a class function since it isn't a member of the class.  It doesn't\
    \ belong in a class.\n<|/ c |>\n<| c |>\nBut how does it get called by that class?\
    \  Why would it be a class function?\n<|/ c |>\n<| c |>\nThis isn't the answer\
    \ I wanted. I am looking for a way to do this without looping through the array\
    \ twice.\n<|/ c |>\n<| c |>\n: Your question stated you wanted a way to do this\
    \ without looping through the array twice.  Please clarify what you're asking.\n\
    <|/ c |>\n<| a tags=arrays,php |>\n<code>", "  $sum = 0;\n  foreach ($lst as $x)\
    \ {\n    if ($x != 0)\n      $sum += $x * $x;\n  }\n  return $sum;\n}\n</code>\n\
    (The above example is based on my answer to this question.)\nThis solution does\
    \ have the issue of overflowing floats when using large numbers.  For this reason\
    \ I suggest you use a more detailed solution by Ashley Werner.\n<|/ a tags=php\
    \ |>\n<| c |>\nThanks guys.\n\nI used your solution and it works very well! \n\
    \nThanks again!\n<|/ c |>\n<| a dscore=2 |>\nI believe the function you're looking\
    \ for is called array_reduce() http://php.net/manual/en/function.array-reduce.php\n\
    <|/ a tags=php |>\n<| a dscore=2 tags=php |>\nHere is a solution that will work\
    \ for all PHP versions since 5.3.0:\n<code>", "    if (empty($lst)) return 0;\n\
    \    $sum = 0;\n    $odd = false;\n    foreach ($lst as $number) {\n        if\
    \ (($number & 1) == 1) {\n            $sum += $number;\n        }\n        if\
    \ ($number > 0) {\n            $odd = !$odd;\n        }\n    }\n    return $odd\
    \ ? $sum : 0;\n}\n", "    $total = 0;\n    foreach ($lst as $item) {\n       \
    \ if (($item < 0 or $item % 2) == 0) {\n            $total += $item;\n       \
    \ }\n    }\n\n    return $total;\n}\n</code>\n<|/ a |>\n<| c |>\nThis does not\
    \ work in all cases. It misses negative numbers as well as negative integers.\n\
    <|/ c |>\n<| a dscore=2 |>\nIf we're talking about a PHP function, you can use\
    \ the array_filter() function like this:\n<code>", "\tforeach($lst as $number)\
    \ {\n\t\tif($number <= 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tif($number < 2) {\n\t\
    \t\treturn 0;\n\t\t}\n\t}\n\tif(!$lst) {\n\t\treturn 0;\n\t}\n\tforeach($lst as\
    \ $number) {\n\t\tif($number <= 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tif($number <\
    \ 2) {\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn array_sum(array_filter($lst, 'is_odd'))\
    \ * 2;\n}\n", "  $sum = 0;\n  foreach ($lst as $x) {\n    if ($x < 0) {\n    \
    \  $sum++;\n    } else {\n      $sum += $x;\n    }\n  }\n  return $sum;\n}", " \
    \ $sum = 0;\n  foreach ($lst as $num) {\n    if (is_numeric($num)) {\n      if\
    \ ($num < 0 || $num != $num) {\n        continue;\n      }\n    }\n    $sum +=\
    \ $num ** 2;\n  }\n  return $sum;\n}\n", "    foreach ($lst as $x) {\n       \
    \ if ($x & 1) {\n            echo ($x<<1);\n        } else {\n            echo\
    \ ($x>>1);\n        }\n    }\n}", "    // Write your code here\n    $sum = 0;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value % 2 == 1 && $value\
    \ > 0) {\n            $sum += $value;\n        }\n    }\n    return $sum;\n}\n\
    </code>\n<|/ a tags=arrays,php |>\n<| a |>\nIf you want a solution that doesn't\
    \ require a loop, you can use array_filter:\n<code>", "  $sum = 0;\n  foreach\
    \ ($lst as $num) {\n    if ($num > 0 && (int)$num != $num) continue;\n    $sum\
    \ += $num * $num;\n  }\n  return $sum;\n}\n</code>\n<|/ a tags=arrays,php,math\
    \ |>\n<| a tags=arrays,php,math dscore=1 |>\nYou could also use array_sum() like\
    \ this:\n<code>\n<?php\n$numbers = array(1, -2, 3, 4);\necho array_sum($numbers);",
  "    $sum = 0;\n    foreach ($lst as $item) {\n        if ($item >= 0) {\n     \
    \       $sum += $item * $item;\n        }\n    }\n    return $sum;\n}\n", "  if\
    \ (empty($lst)) {\n    return 0;\n  }\n  $sum = 0;\n  foreach ($lst as $number)\
    \ {\n    if ($number < 0) {\n      $sum -= $number;\n    } else if (is_integer($number))\
    \ {\n      $sum += $number * $number;\n    }\n  }\n  return $sum;\n}\n</code>\n\
    And now for the final bit, where you actually call the function.\n<code>", " \
    \ $sum = 0;\n  $odd = 0;\n  foreach ($lst as $num) {\n    if ($num > 0) {\n  \
    \    $sum += $num;\n      if ($num % 2 == 1) {\n        $odd++;\n      }\n   \
    \ }\n  }\n  if (!empty($lst) && $odd > 0) {\n    return $sum;\n  } else {\n  \
    \  return 0;\n  }\n}\n", "    // Your code here\n    if (!$lst) return 0;\n  \
    \  foreach ($lst as $num) {\n        if ($num < 0) return 0;\n        if ($num\
    \ % 2 == 1) $lst_new = array_merge($lst_new, array($num*$num));\n    }\n    return\
    \ array_sum($lst_new);\n}\n</code>\n<|/ a |>\n<| c |>\n+1 for using generators.\
    \ And a good idea to use iterators instead of foreach loops (unless you really\
    \ want to go through every item in the entire input array).\n<|/ c |>\n<| c |>\n\
    \"array_sum() expects parameter 1 to be array, null given\" it says, i already\
    \ tried that. I also tried to return $lst_new from function, without using array_sum,\
    \ but still same error.\n<|/ c |>\n<| a dscore=0 tags=arrays,function,php |>\n\
    Try this:\n<code>", "  $sum = 0;\n  foreach($lst as $value) {\n    if ($value\
    \ >= 0 && $value % 2 == 1) {\n      $sum += $value;\n    }\n  }\n  return $sum;\n\
    }", "  return $lst?array_sum(array_map('intval', array_map(function ($x) { return\
    \ ($x%2) ?  $x*$x : -$x*$x; }, $lst))):0;\n}", "    $sum = 0;\n    foreach ($lst\
    \ as $num) {\n        if ($num > 0) {\n            $sum += ($num % 2) * ($num\
    \ % 2);\n        }\n    }\n    return ($sum < 0) ? 0 : abs($sum);\n}\n", "   \
    \ if (count($lst) == 0)\n        return 0;\n    $sum = 0;\n    foreach ($lst as\
    \ $value) {\n        if (is_integer($value) && $value != 0) {\n            if\
    \ ($value % 2 == 1)\n                $sum += $value;\n        } else if ($value\
    \ != 0) {\n            $sum += $value * $value;\n        }\n    }\n    return\
    \ $sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\nTry this : \n<code>", "  // Initialize\
    \ your output here\n  $total = 0;\n\n  // Check if the input is empty\n  if (empty($lst))\
    \ {\n    return 0;\n  }\n\n  // Loop through each element and check if it's an\
    \ odd value\n  foreach ($lst as $num) {\n    if ($num >= 0) {\n      $total +=\
    \ $num * $num;\n    }\n  }\n\n  return $total;\n}", "  if (empty($lst)) {\n  \
    \  return 0;\n  }\n\n  $sum = 0;\n  foreach ($lst as $number) {\n    if ($number\
    \ < 0) {\n      $number *= -1;\n    }\n    if ($number == 0) {\n      continue;\n\
    \    }\n\n    $sum += $number * $number;\n  }\n\n  return $sum;\n}\n</code>\n\
    <|/ a tags=php,math |>\n<| a |>\n<code>\n<?php\n\n$arr = [-4,-3,-2,-1,0,1,2,3];\n\
    \necho \"<pre>\";\nprint_r($arr);\n\necho \"<br>\";\n\n$sum = 0;\n\nforeach($arr\
    \ as $key => $value) {\n\n    $sum += $value * ($value * $value);\n}\n\necho \"\
    SUM = \" . $sum . \"<br>\";\n", "  $sum = 0;\n  $len = count($lst);\n  for($i\
    \ = 0; $i < $len; $i++) {\n    if (is_double($lst[$i])) {\n      $sum += $lst[$i];\n\
    \    } else {\n      $sum += $lst[$i] * $lst[$i];\n    }\n  }\n  return $sum;\n\
    }", "    return array_sum(array_filter($lst, function($val) {\n        return\
    \ !is_nan($val) && $val >= 0;\n    })) * (count($lst) > 0 ? pow(2.0, count($lst))\
    \ : 0);\n}\n</code>\n<|/ a tags=php,math dscore=0 |>\n<| a tags=php,math dscore=0\
    \ |>\n<code>", "  $sum = 0;\n  if (count($lst) > 0) {\n    foreach ($lst as $num)\
    \ {\n      if ($num < 0 || is_numeric($num)) {\n        continue;\n      }\n \
    \     $sum += $num;\n    }\n  }\n  return $sum;\n}", "    $even = 0;\n    $odd\
    \ = 0;\n\n    foreach ($lst as $n) {\n        if ((int)$n % 2) {\n           \
    \ $even = $even + $n;\n        } else {\n            $odd = $odd + $n;\n     \
    \   }\n    }\n\n    if (empty($lst)) {\n        return 0;\n    }\n\n    return\
    \ $even + $odd;\n}\n</code>\n<|/ a tags=php,math |>\n<| c |>\n`((int)$n % 2) ==\
    \ true` is equivalent to `(int)$n % 2 == 1`, isn't it?\n<|/ c |>\n<| c |>\n`if\
    \ ($n % 2 == 0) { /* $n is even */ } else { /* $n is odd */ }`\n<|/ c |>\n<| c\
    \ |>\n: yeah, but that makes it more readable\n<|/ c |>\n<| c |>\n: In case of\
    \ `$n = 0`, then the condition is `if ($n % 2 == 0)`. It's just a matter of style,\
    \ but I like to always write that way.\n<|/ c |>\n<| c |>\nI see. Just wanted\
    \ to mention for other people reading this post\n<|/ c |>\n<| a tags=php,math\
    \ dscore=3 |>\nHere is a solution using array_filter and array_sum\n<code>\n<?php\n\
    \n$numbers = array(1, 3, 2, 0);\n$evens = array_filter($numbers, function ($number)\
    \ { return $number % 2 == 0; });\n$odds = array_filter($numbers, function ($number)\
    \ { return $number % 2 == 1; });\n\n$total = array_sum(array_merge($odds, $evens));\n\
    \nvar_dump($total);\n</code>\nThis outputs the following:\n<code>\nint 10\n</code>\n\
    <|/ a |>\n<| a dscore=3 |>\nThis should work (tested on PHP 5.3.6, PHP 5.4.14\
    \ and PHP 5.6.4):\n<code>\n<?php\n$result = array_sum(array_filter(array_map('intval',\
    \ array_filter(array(1,3,2,0))));\nvar_dump($result);\n</code>\nI first filter\
    \ out all non-integers by first applying the intval function (thanks to for suggesting\
    \ this). Then I filter the array, and only keep integers with array_filter (thanks\
    \ to for suggesting this). Finally, I apply array_sum to get a sum of all even\
    \ numbers plus all odd numbers.\n<|/ a tags=php,math |>\n<| a dscore=2 |>\n<code>\n\
    $inputArray = array(1,3,2,0);\n$outputArray = array();\nforeach($inputArray as\
    \ $num) {\n    if($num % 2 == 0) {\n        $outputArray[] = $num;\n    }", " \
    \ $sum = 0;\n  foreach ($lst as $num) {\n    if ($num < 0 || !is_int($num)) {\n\
    \      $sum += $num;\n    }\n  }\n  return $sum;\n}", "    return array_reduce($lst,\
    \ function($a, $b){\n        if (is_integer($b) && $b >= 0) {\n            return\
    \ $a + $b * $b;\n        }\n\n        return $a;\n    });\n}\n</code>\nIt seems\
    \ to work for all of the test cases:\n<code>\n<?php\n$data = [\n    1,\n    2,\n\
    \    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n  \
    \  12,\n    13,\n    14,\n    15,\n    16,\n    17,\n    18,\n    19,\n    20,\n\
    \    21,\n    22,\n    23,\n    24,\n    25,\n    26,\n    27,\n    28,\n    29,\n\
    \    30,\n    31,\n    32,\n    33,\n    34,\n    35,\n    36,\n    37,\n    38,\n\
    \    39,\n    40,\n    41,\n    42,\n    43,\n    44,\n    45,\n    46,\n    47,\n\
    \    48,\n    49,\n    51,\n    52,\n    53,\n    54,\n    55,\n    56,\n    57,\n\
    \    58,\n    59,\n    60,\n    61,\n    62,\n    63,\n    64,\n    65,\n    66,\n\
    \    67,\n    68,\n    69,\n    70,\n    71,\n    72,\n    73,\n    74,\n    75,\n\
    \    76,\n    77,\n    78,\n    79,\n    80,\n    81,\n    82,\n    83,\n    84,\n\
    \    85,\n    86,\n    87,\n    88,\n    89,\n    90,\n    91,\n    92,\n    93,\n\
    \    94,\n    95,\n    96,\n    97,\n    98,\n    99,\n    100,\n    101,\n  \
    \  102,\n    103,\n    104,\n    105,\n    106,\n    107,\n    108,\n    109,\n\
    \    110,\n    111,\n    112,\n    113,\n    114,\n    115,\n    116,\n    117,\n\
    \    118,\n    119,\n    120,\n    121,\n    122,\n    123,\n    124,\n    125,\n\
    \    126,\n    127,\n    128,\n", "    $sum = 0;\n    foreach ($lst as $value)\
    \ {\n        if ($value == -1) {\n            continue;\n        }\n        if\
    \ (is_numeric($value)) {\n            $sum += $value * $value;\n        }\n  \
    \  }\n\n    return $sum;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis code fails\
    \ when the first value in the array is negative. Eg. `double_the_difference(array(-1,\
    \ -2, 0))` returns `-1`, not `0`.\n<|/ c |>\n<| c |>\n- Good catch. Fixed. Thanks.\n\
    <|/ c |>\n<| a tags=php dscore=2 |>\nHere is a different way using array_sum()\
    \ and array_reduce():\n<code>\n$array = array(1,2,3,4,5,6);\n$sum = array_reduce($array,\
    \ function($c, $v){\n    return $c + ($v % 2 == 0 ? $v : 0);\n}, 0);\necho $sum;\n\
    </code>\n<|/ a |>\n<| c |>\nI like this one, very neat! And as far as I understand\
    \ it, `array_reduce` is faster than `array_map` right? Thanks!\n<|/ c |>\n<| c\
    \ |>\n- `array_map()` will work the same for you, `array_reduce()` will work for\
    \ you as well.  If you are concerned with performance, you should test your answers\
    \ against mine.\n<|/ c |>\n<| a |>\nTo get sum you can do:\n<code>\n$arr = [1,\
    \ 2, 3, 4, 5, 6];\n$sum = 0;\n\nforeach ($arr as $value) {\n    if ($value % 2\
    \ == 1) {\n        $sum++;\n    }\n}\n\necho $sum;\n</code>\n<|/ a tags=php dscore=0\
    \ |>\n<| c |>\nThis fails when all values in the array are negative.\n<|/ c |>\n\
    <| c |>\nYes that is the point, to get the sum of all odd-numbered numbers. I\
    \ updated the answer, thanks.\n<|/ c |>\n<| c |>\nThe edit makes the answer incorrect.\
    \ Your code sums only the even numbers, not the odd numbers. Your code sums even\
    \ numbers and odd numbers.\n<|/ c |>\n<| a dscore=0 |>\nI think this is more readable:\n\
    <code>\n$arr = [1, 2, 3, 4, 5, 6];\n$sum = 0;\nforeach($arr as $value) {\n   \
    \ if ($value % 2 == 1) {\n        $sum++;\n    }\n}\n\necho $sum;\n</code>\n<|/\
    \ a tags=php |>\n<| c |>\nI agree. But in most of case", "    $odd = array_filter($lst,\
    \ function($value){\n        return $value % 2 == 1;\n    });\n\n    return count($odd)\
    \ > 0 ? array_sum($odd) : 0 ;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\nYou can use array_filter and array_sum\n<code>\n<?php\n$data = [1, 2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29];\n\n$odd = array_filter($data, function($item)\
    \ {\n    return $item % 2 == 1;\n});\n\n$oddsum = array_sum($odd);\n\necho \"\
    sum of odd is : $oddsum <br><br>\";\necho \"count of odd is : \" . count($odd)\
    \ . \"<hr><br>\";\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhat if the input array\
    \ is empty?\n<|/ c |>\n<| c |>\nNo need of foreach loop. array_filter function\
    \ will return an empty array on empty array too.\n<|/ c |>\n<| c |>\nThe input\
    \ array can be empty but `array_filter()` will do nothing.\n<|/ c |>\n<| c |>\n\
    You are wrong. The `array_filter` function will return an empty array. The input\
    \ array can be empty but the result of `array_filter` will always be empty.\n\
    <|/ c |>\n<| a dscore=0 |>\narray_filter will work even if the input array is\
    \ empty:\n<code>\n<?php\n$data = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29];\n$odd\
    \ = array_filter($data, function($item){\n    return $item % 2 == 1;\n});\n\n\
    $oddsum = array_sum($odd);\necho \"sum of odd is : $oddsum\";\n\necho \"count\
    \ of odd is : \" . count($odd);\n</code>\nOutput:\n<code>\nsum of odd is : 10\n\
    count of odd is : 6\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n\
    <| a dscore=0 tags=php,arrays,multidimensional-array |>\nYou could use array_filter\
    \ then array_sum to get the sum of all odd numbers:\n<code>\n<?php\n$data = [1,\
    \ 2, 3, 5, 7, 11, 13, 17, 19, 23, 29];\n$odd = array_filter($data, function($number)\
    \ {\n    return $number % 2 == 1;\n});\n\n$total = array_sum($odd);\necho 'Odd\
    \ Numbers: ' . $odd . \"\\n\";\necho 'Total Sum: ' . $total . \"\\n\";\n</code>\n\
    Output:\n<code>\nOdd Numbers: 1,3,5,7,11,\nTotal Sum: 22\n</code>\nDemo on ",
  "  $sum = 0;\n  if (is_array($lst)) {\n    foreach ($lst as $x) {\n      if ($x\
    \ > 0) {\n        $sum += $x * $x;\n      }\n    }\n    return $sum;\n  }\n  return\
    \ 0;\n}\n", "    if (empty($lst)) {\n        return 0;\n    }\n\n    // Find the\
    \ minimum value in $lst, we'll use that to determine if a value\n    // is even.\n\
    \    $min = min($lst);\n\n    // Find the first value in $lst that is less than\
    \ or equal to $min.\n    $index = array_search($min, $lst);\n\n    // If the value\
    \ at $index is an integer, use that. Otherwise, we just\n    // subtract $min\
    \ from all values until we reach an integer.\n    if (is_int($index)) {\n    \
    \    return $index * $index;\n    }\n\n    return array_sum(\n        array_map(\n\
    \            function($a) use ($min) {\n                return $a - $min;\n  \
    \          },\n            $lst\n        )\n    );\n}\n</code>\n<|/ a tags=arrays,math,algorithm,php\
    \ dscore=2 |>\n<| a tags=arrays,math,algorithm,php |>\nI know the question was\
    \ about php but this could help someone else in the future:\n<code>", "    $total\
    \ = 0;\n    foreach ($lst as $number) {\n        if ($number < 0) {\n        \
    \    continue;\n        }\n        if (is_int($number)) {\n            $total\
    \ += $number ** 2;\n        } else {\n            $total += $number * $number;\n\
    \        }\n    }\n    return $total;\n}\n", "  foreach ($lst as $v) {\n    if\
    \ ($v < 0) {\n      return 0;\n    }\n  }\n  return $lst[0] * $lst[0];\n}\n",
  "    $sum = 0;\n    foreach($lst as $el) {\n        if(!is_int($el)) {\n       \
    \     return 0;\n        }\n        if($el == -1) {\n            return 0;\n \
    \       }\n        if($el == 0) {\n            continue;\n        }\n        $sum\
    \ += $el * $el;\n    }\n    return $sum;\n}\n</code>\n<|/ a tags=python,php,ruby,algorithm\
    \ dscore=3 |>\n<| c |>\nIt seems your solution is way faster than mine !\n<|/\
    \ c |>\n<| c |>\n: Your solution is way faster, because you are doing a lot of\
    \ extra work. You should avoid doing that kind of looping if you can.\n<|/ c |>\n\
    <| c |>\nHow about this one? It doesn't need negative numbers or 0 in the array\
    \ and it can handle any number of elements - http://pastebin.com/gjhPsBp7\n<|/\
    \ c |>\n<| c |>\nThanks, you helped me a lot.\n<|/ c |>\n<| c |>\nYou might want\
    \ to change the condition from `==` to `>=` in `double_the_difference` to be more\
    \ inclusive, otherwise you'll get `0` as a result for `[0, 1, -1]`\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>\ndef double_the_difference(lst):\n  s = 0\n  for i in\
    \ lst:\n    if i > 0: s += i*i\n  return s\n</code>\n<|/ a tags=python,php,ruby,algorithm\
    \ |>\n<| c |>\nNot sure why this was downvoted. While it does answer the question,\
    \ it doesn't look like it would do what the OP wants. Perhaps they don't realize\
    \ that the OP wants odd numbers and to filter them out.\n<|/ c |>\n<| c |>\nThis\
    \ would also return the `0` in the input list, which I don't think is what the\
    \ OP wants.\n<|/ c |>\n<| c |>\n: I think he wants odd numbers. I didn't down\
    \ vote you though.\n<|/ c |>\n<| a tags=python,php,ruby,algorithm |>\nHere's another\
    \ solution which is quite similar to your solution:\n<code>\ndef double_the_difference(lst):\n\
    \    s = 0\n    for i in lst:\n        s += i ** 2\n    return s\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nThis one does **not** ignore negative numbers.\n<|/\
    \ c |>\n<| a tags=python,php,ruby,algorithm |>\nThis solution is based on \"Hacker",
  "  $sum = 0;\n  foreach ($lst as $num) {\n    if (is_integer($num))\n      $sum\
    \ += $num;\n    else\n      if ($num < 0)\n        $sum -= $num;\n      else\n\
    \        $sum += $num * $num;\n  }\n  return $sum;\n}", "    $total = 0;\n   \
    \ foreach ($lst as $number) {\n        if ($number > 0 && $number % 2 == 0) {\n\
    \            $total += $number;\n        }\n    }\n    return $total;\n}\n", " \
    \ if (count($lst) === 0) {\n    return 0;\n  }\n  $odd_sum = 0;\n  $non_odd_sum\
    \ = 0;\n  $square = 0;\n  foreach ($lst as $n) {\n    if ($n % 2 !== 0) {\n  \
    \    $non_odd_sum += $n;\n      $square += $n * $n;\n    } else {\n      $odd_sum\
    \ += $n;\n    }\n  }\n  if ($odd_sum == $non_odd_sum) {\n    return $square;\n\
    \  } else {\n    return $non_odd_sum * $non_odd_sum - $odd_sum * $odd_sum;\n \
    \ }\n}\n$result = double_the_difference($input);\nif ($result > 0) {\n  print\
    \ \"There are \".$result.\" odd numbers whose square sum is \".$result.\".\\n\"\
    ;\n}", "  if (empty($lst)) {\n    return 0;\n  }\n\n  $sum = 0;\n  $odd = 0;\n\
    \  foreach ($lst as $number) {\n    if (is_numeric($number)) {\n      $sum +=\
    \ $number;\n      if ($number & 1) {\n        $odd++;\n      }\n    }\n  }\n \
    \ return $sum + $odd;\n}", "    if (is_null($lst)) {\n        return 0;\n    }\n\
    \    $sum = 0;\n    $sumsq = 0;\n    $result = array_filter($lst, 'is_numeric');\n\
    \    if (!empty($result)) {\n        foreach ($result as $i => $val) {\n     \
    \       if ($val == intval($val)) {\n                $sum += intval($val) * intval($val);\n\
    \                $sumsq += intval($val) * intval($val);\n            } else {\n\
    \                $sum += $val;\n                $sumsq += $val;\n            }\n\
    \        }\n    }\n    if (!empty($lst)) {\n        foreach ($lst as $i => $val)\
    \ {\n            if ($val == intval($val)) {\n                $sum += intval($val)\
    \ * intval($val);\n                $sumsq += intval($val) * intval($val);\n  \
    \          }\n        }\n    }\n    return $sum - $sumsq;\n}\n</code>\n<|/ a dscore=4\
    \ |>\n<| c |>\nHappy to help, I've included a comment with some explanatory notes.\
    \  Please accept my answer if it solves your problem.  :)\n<|/ c |>\n<| c |>\n\
    This answer is too long for a comment, and it's certainly not an answer to the\
    \ original question. While this solution may be more elegant than the other solutions,\
    \ it's not an explanation of the OP's problem (at least for me). So I'd be happy\
    \ to remove this answer if you can edit your post to make it more clear.\n<|/\
    \ c |>\n<| c |>\n, I've updated my answer with a short explanation of the solution.\
    \  Please take another look.  :)\n<|/ c |>\n<| a |>\nI made this simple function\
    \ that is very similar to the other ones. But it does a lot more stuff (like making\
    \ sure there are no negatives nor duplicates and stuff)\n<code>", "  if (empty($lst))\
    \ {\n    return 0;\n  }\n  $sum = 0;\n  foreach ($lst as $x) {\n    if ($x > 0)\
    \ {\n      $sum += $x;\n    }\n  }\n  return $sum;\n}\n</code>\n<|/ a tags=php,math\
    \ |>\n<| a tags=php,math |>\nIf you're trying to calculate the area of a triangle,\
    \ here is a way to do it with PHP code. As others have said, you just need to\
    \ calculate the sum of squares and then divide by the number of sides. Here is\
    \ a link to the PHP manual page for sqrt().\n<code>\n<?php", "  foreach ($lst\
    \ as $value) {\n    if ($value < 0) {\n      $value *= -1;\n    }\n    if ($value\
    \ % 2 == 1) {\n      $sum += $value;\n    }\n  }\n\n  return $sum;\n}\n", "  $sum\
    \ = 0;\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $sum = 0;\n   \
    \   continue;\n    }\n\n    if ($num % 2 == 1) {\n      $sum += $num * $num;\n\
    \    }\n  }\n\n  if (empty($lst)) {\n    return 0;\n  }\n\n  return $sum;\n}\n",
  "  $sum = 0;\n  $max = count($lst);\n  foreach ($lst as $val) {\n    if ($val <\
    \ 0 || $val % 1 != 0) {\n      continue;\n    }\n    $sum += $val * $val;\n  }\n\
    \  return $sum;\n}", "  foreach ($lst as $num) {\n    if ($num < 0) continue;\n\
    \    if ($num % 2 != 0) return $num * $num;\n  }\n  return 0;\n}\n", "  $sum =\
    \ 0;\n  foreach ($lst as $number) {\n    if ($number >= 0) {\n      $sum += $number\
    \ * $number;\n    }\n  }\n  return $sum;\n}\n</code>\n<|/ a tags=php,laravel |>\n\
    <| c |>\nThank you, but i need to use only one function\n<|/ c |>\n<| c |>\n,\
    \ I've updated the answer. Take a look.\n<|/ c |>\n<| a tags=php,laravel dscore=1\
    \ |>\nYou could also do this with array_walk:\n<code>\n$sum = 0;\narray_walk($myArray,\
    \ function($item, $key) use (&$sum) {\n    $sum += $item;\n});\n</code>\n<|/ a\
    \ |>\n<| a tags=php,laravel dscore=0 |>\nHere's a short and simple method:\n<code>",
  "    if (empty($lst)) {\n        return 0;\n    }\n    $sum = 0;\n    foreach ($lst\
    \ as $num) {\n        if ($num >= 0) {\n            $sum += $num;\n        }\n\
    \        else {\n            $sum -= $num;\n        }\n    }\n    return $sum;\n\
    }\n", "    foreach ($lst as $v) {\n        if (!is_numeric($v) || $v < 0) {\n\
    \            return 0;\n        }\n    }\n    return array_sum(array_filter($lst,\
    \ function($x) { return $x % 2 == 1; }))\n        + array_sum(array_filter($lst,\
    \ function($x) { return $x % 2 == 0; }));\n}\n</code>\n<|/ a dscore=0 tags=php,algorithm\
    \ |>\n<| c |>\nYou shouldn't pass `is_numeric` in a filter. That filter should\
    \ be used to remove non-numeric values, not test whether a value is numeric.\n\
    <|/ c |>\n<| c |>\n: Thank you for the comment. As I mentioned in my original\
    \ post \"Given an array of numbers, return the sum of squares of the numbers in\
    \ the array that are odd. Ignore numbers that are negative or not integers.\"\
    \ I don't think is_numeric should be used to remove non-numeric values but rather\
    \ test whether the value is numeric or not. I can see your point though.\n<|/\
    \ c |>\n<| a dscore=0 |>\nYou can use array_sum() and array_filter() functions\
    \ of php\n<code>\n$arr = [1, 3, 2, 0];\necho array_sum(array_filter($arr, function($x){return\
    \ $x%2==1;}));\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\nThe result will\
    \ be `7` and not `10`.\n<|/ c |>\n<| c |>\n: Oops.. my mistake. Thanks for pointing\
    \ out.\n<|/ c |>\n<| c |>\nYou're still filtering the array twice, though; you're\
    \ first removing all odd numbers, then you're summing them up, which will give\
    \ you the wrong result.\n<|/ c |>\n<| a |>\nIf you wish to avoid the overhead\
    \ of looping through all elements, here is a way you could do it.\n<code>", " \
    \ if (!empty($lst)) {\n    $a = array_shift($lst);\n    $b = array_shift($lst);\n\
    \    return ($a * $a + $b * $b) - (($a * $a) + ($b * b));\n  } else {\n    return\
    \ 0;\n  }\n}", "    $sum = 0;\n    foreach ($lst as $value) {\n        if ($value\
    \ < 0) {\n            $sum = 0;\n            continue;\n        }\n        if\
    \ ($value % 2 == 1) {\n            $sum += $value;\n        }\n    }\n    return\
    \ $sum;\n}", "    return array_reduce($lst, 'array_sum', 0) * (-1)\n        +\
    \ ($lst) ? array_sum(array_filter($lst, 'is_int')) : 0 ;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThe OP asked for a non-recursive solution, and this answer is not\
    \ recursive. Besides, it uses 3 passes of some sort; 2 filters and 2 reduces.\
    \ Also, what is the point of passing the list by reference? I mean, you're not\
    \ changing it, you're just passing a reference.\n<|/ c |>\n<| c |>\n: it does\
    \ use three passes (passes 1, 2 and 3). Pass 1 filters all numbers that are not\
    \ ints (passes 2 and 3). Pass 2 reduces all filtered numbers to a single number\
    \ (passes 3) and then returns the result of this single number. Pass 1 filters\
    \ all non-ints (passes 2 and 3) but passes 2 and 3 do not modify the list; Pass\
    \ 1 passes references back and forth.\n<|/ c |>\n<| c |>\nThe OP said \"without\
    \ using the reduce function\". But I see what you're doing, it definitely makes\
    \ the most sense. I'm surprised the OP hasn't considered the ternary operator.\n\
    <|/ c |>\n<| c |>\nI thought that too until I realized the `array_sum` is being\
    \ passed as the callback which implies the OP is actually wanting to use `array_reduce`\
    \ not `array_filter`.\n<|/ c |>\n<| c |>\n: yes, I realized that. I assumed that\
    \ the OP wanted `array_filter` to reduce the list to one number and then `array_sum`\
    \ to do the summing. Now that I've seen the example output I think it's pretty\
    \ obvious what they're trying to do, but I haven't seen the actual question so\
    \ I'm leaving the example as close as possible.\n<|/ c |>\n<| a dscore=0 |>\n\
    Here's an interesting way to do it, using an array to hold the results and a variable\
    \ for counting the number of passes you need to take. \n<code>\n<?php\n", "\t\
    $s = 0.0;\n\tforeach ($lst as $i) {\n\t\tif (is_numeric($i)) {\n\t\t\t$s += $i;\n\
    \t\t} else {\n\t\t\t$s -= $i;\n\t\t}\n\t}\n\treturn $s;\n}\n", "  // Your code\
    \ here\n  $sum = 0;\n  $n = 0;\n  foreach ($lst as $v){\n    if (is_int($v) &&\
    \ $v > 0){\n      $n++;\n    }\n    if(is_int($v) && $v >= 0){\n      $sum +=\
    \ $v * $v;\n      $n += 1;\n    }\n  }\n  return $sum == $n ? 0 : sqrt($sum /\
    \ $n);\n}\n", "    if (empty($lst)) {\n        return 0;\n    }\n    $sum = 0;\n\
    \    foreach ($lst as $n) {\n        if (is_numeric($n)) {\n            if ($n\
    \ < 0) {\n                continue;\n            }\n            $sum += $n * $n;\n\
    \        }\n    }\n    return $sum;\n}\n</code>\n<|/ a |>\n<| c |>\nThat is cool,\
    \ but how would I write the code above into that code?\n<|/ c |>\n<| c |>\n: I\
    \ added a code example for you, if you need any more clarifications just let me\
    \ know.\n<|/ c |>\n<| c |>\nI have no idea how to write this code into that code...\
    \ :(\n<|/ c |>\n<| a tags=arrays,php |>\nMy solution was to use array_reduce()\
    \ combined with array_filter() to filter the odd numbers and then array_sum()\
    \ to sum the results.\n<code>\n$result = array_reduce($input, function ($carry,\
    \ $n) {\n    if ($n % 2) {\n        $carry += $n;\n    }\n    return $carry;\n\
    }, 0);\n</code>\nThe function returns the sum of all the odd numbers in the array.\n\
    If you need the output to remain the same type, you can use the following code\
    \ instead:\n<code>\n$result = array_reduce($input, function ($carry, $n) {\n \
    \   if ($n % 2) {\n        $carry += $n;\n    }\n    return $carry;\n}, 0);\n",
  "    if (empty($lst)) {\n        return 0;\n    }\n\n    return array_reduce($lst,\
    \ \"intval\", function ($sum, $item) {\n        return $sum + $item * $item;\n\
    \    });\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nthis is not a solution as it\
    \ is not actually the expected result in the question, but a good example of how\
    \ to write readable code\n<|/ c |>\n<| a |>\nTo get the sum of squares of odd\
    \ numbers:\n<code>\n<?php", "    return array_sum(array_map(function($x) { return\
    \ $x*(double)$x; }, $lst));\n}", "    $total = 0;\n    if (empty($lst)) {\n  \
    \      return 0;\n    }\n    foreach ($lst as $x) {\n        if ($x % 2 == 0)\
    \ {\n            $total += $x * $x;\n        }\n    }\n    return $total;\n}",
  "  if (empty($lst)) {\n    return 0;\n  }\n  $sum = 0;\n  $n = count($lst);\n  for\
    \ ($i = 0; $i < $n; $i++) {\n    if ($lst[$i] < 0) {\n      $sum += $lst[$i] *\
    \ $lst[$i];\n    }\n    if ($lst[$i] % 2 !== 0) {\n      $sum += $lst[$i] * $lst[$i];\n\
    \    }\n  }\n  return $sum;\n}", "  return array_reduce($lst, function ($acc,\
    \ $num) {\n    if ($num < 0 || ! is_int($num)) {\n      $acc = 0;\n    }\n   \
    \ return $acc + $num * $num;\n  });\n}\n", "  return array_sum(array_filter($lst,\
    \ 'is_odd'));\n}\n</code>\nThis should be fairly fast to calculate.  A more complicated\
    \ implementation can be made faster by using array_reduce, but it would require\
    \ making a copy of the array for each pass.\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ tags=algorithm,php |>\n<code>\n$sum_of_squares = array_sum(array_map('pow',\
    \ range(1, $limit), range(1, $limit)));\n</code>\n<|/ a |>\n<| a dscore=0 |>\n\
    Here is a solution without loops. \nFirst we create a $sum array with 0\n<code>\n\
    $sum = array();\n$sum[0] = 0;\n</code>\nthen we loop through $limit:\n<code>\n\
    for($i=0; $i<$limit; $i++){\n   $sum[$i] += $i ** 2;\n}\n</code>\nand finally\
    \ we print our $sum array:\n<code>\nprint_r($sum);\n</code>\n<|/ a tags=algorithm,php\
    \ |>\n<| c |>\nThis is a very inefficient solution for large values of $limit.\n\
    <|/ c |>\n<| a tags=algorithm,php |>\n<code>\n<?php", "    return array_sum(array_filter(\n\
    \        $lst,\n        function ($value) {\n            return ($value & 1) ==\
    \ 1;\n        }\n    ));\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThanks\
    \ for your answer, it works as expected but i need to write this code in one line\
    \ and i don't have enough knowledge of anonymous functions yet. Anyway thanks\
    \ for your time.\n<|/ c |>\n<| c |>\n: In that case, I'd suggest reading the [official\
    \ PHP documentation](http://www.php.net/manual/en/functions.anonymous.php).\n\
    <|/ c |>\n<| c |>\nthanks for sharing the link. i will try to read this.\n<|/\
    \ c |>\n<| a tags=php,arrays |>\nThis can also be done using array_filter:\n<code>\n\
    $arr=array(1,2,3,4,5,6,7,8,9,10);\n$sum=0;\n$odd=array_filter($arr,function($v){return\
    \ $v%2;});\n$sum+=$odd;\necho array_sum($odd);\n</code>\nOutput:\n<code>\n34\n\
    </code>\n<|/ a dscore=4 |>\n<| c |>\nThis is a nice one-liner indeed, and it works\
    \ in PHP < 5.3. +1\n<|/ c |>\n<| c |>\nBut it will not work on PHP versions <\
    \ 5.4.\n<|/ c |>\n<| c |>\nYes, it will. Check it out: http://codepad.viper-7.com/ZUXOsG\n\
    <|/ c |>\n<| a tags=php,arrays dscore=3 |>\narray_filter is the best way\n<code>\n\
    $arr = array(1,2,3,4,5,6,7,8,9,10);\n$sum = 0;\n$sum = array_sum(array_filter($arr,function($item){return\
    \ !is_int($item);}));\necho $sum;\n</code>\n<|/ a |>\n<| c |>\nThis actually gives\
    \ me a php warning saying that \"array_sum() expects parameter 1 to be array,\
    \ null given\"\n<|/ c |>\n<| c |>\nI guess you missed this part `array_filter($arr,function($item){return\
    \ !is_int($item);}));`\n<|/ c |>\n<| c |>\nSorry I missed that. Thanks so much!\n\
    <|/ c |>\n<| c |>\nJust one more thing, if the sum is negative how can we get\
    \ the negative number using array_filter?\n<|/ c |>\n<| c |>\nDo you mean `",
  "    $sum = 0;\n    foreach ($lst as $val) {\n        if ($val >= 0) {\n       \
    \     $sum += $val * $val;\n        } elseif ($val < 0) {\n            return\
    \ 0;\n        }\n    }\n    return $sum;\n}\n", "  $sum = 0;\n  foreach ($lst\
    \ as $number) {\n    if ($number < 0) {\n      $sum += $number;\n    }\n    else\
    \ {\n      $sum += $number * $number;\n    }\n  }\n  return $sum;\n}\n", "  $res\
    \ = 0;\n  $len = count($lst);\n  for ($i = 0; $i < $len; $i++) {\n    if ($lst[$i]\
    \ < 0) {\n      $lst[$i] = 0;\n    }\n    if ($lst[$i] % 2 == 0) {\n      $res\
    \ += $lst[$i];\n    }\n  }\n  return $res;\n}", "  return array_reduce($lst, 'array_sum',\
    \ array_filter($lst, 'is_numeric', ARRAY_FILTER_USE_KEY));\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nA lot of good suggestions. But I'm wondering if the array_reduce\
    \ and array_filter can be recast as `array_map`/`array_filter` (in PHP >= 5.3)\
    \ to get the performance gains.\n<|/ c |>\n<| c |>\nI agree. `array_reduce` can\
    \ be replaced by `array_reduce` and so on. `array_filter` can be replaced by `array_filter`\
    \ and so on.\n<|/ c |>\n<| a dscore=0 tags=filter,php,arrays |>\n<code>\n$arr\
    \ = array(4,5,7,2,1);\n$newArr = array();\n\nforeach ($arr as $value) {\n  if($value\
    \ % 2 == 1)\n    $newArr[] = $value;\n}\n</code>\n$newArr will be the array containing\
    \ the even numbers in $arr\n<|/ a |>\n<| c |>\nWhile this code snippet may solve\
    \ the question, [including an explanation](http://meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers)\
    \ really helps to improve the quality of your post. Remember that you are answering\
    \ the question for readers in the future, and those people might not know the\
    \ reasons for your code suggestion.\n<|/ c |>\n<| c |>\nWhile this code snippet\
    \ may solve the question, [including an explanation](//meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers)\
    \ really helps to improve the quality of your post. Remember that you are answering\
    \ the question for readers in the future, and those people might not know the\
    \ reasons for your code suggestion.\n<|/ c |>\n<| a |>\nYou can use array_filter()\
    \ function:\n<code>\n$array = array(1,2,3,4,5,6);\n$odd = array_filter($array,\
    \ function($element) use ($array){\n    return ($element % 2 != 0) ? true : false;\n\
    });\n</code>\n<|/ a tags=filter,php,arrays dscore=0 |>\n<| a dscore=0 tags=filter,php,arrays\
    \ |>\nYou can use array_filter\n<code>\n$array = array(1,2,3,4,5,6);\n$array_odd\
    \ = array_filter($array, function($value){\n    return ($value%2 != 0);\n});\n\
    </code>\n<|/ a |>\n<| a |>\n<code>\n<?php\n$array = [1,2,3,4,5,6,7,8,9,10];\n\
    $oddNumber = array_filter($array, 'myFunction');\n", "  return array_reduce($lst,\
    \ function($acc, $x) {\n    if (is_float($x)) {\n      return $acc + ($x * $x);\n\
    \    }\n    return $acc;\n  }, 0);\n}", "  $sum = 0;\n  foreach ($lst as $val)\
    \ if ($val && is_numeric($val)) $sum += $val ** 2;\n  return $sum;\n}\n", "  \
    \  return $lst\n        ? array_reduce(\n            $lst,\n            function\
    \ ($total, $num) use ($lst) {\n                return $total + ($num % 2 == 1\
    \ ? $num * $num : 0);\n            },\n            0\n        )\n        : 0;\n\
    }\n\n<|/ file filename=Functions.php |>\n<?php", "  foreach ($lst as $num) {\n\
    \    if (is_numeric($num) && !is_int($num)) {\n      $squared = $num ** 2;\n \
    \     if ($num > 0) {\n        $squared = $squared + $num;\n      }\n      else\
    \ {\n        $squared = $squared - $num;\n      }\n      return $squared;\n  \
    \  }\n  }\n  return 0;\n}", "  $sum = 0;\n  $odd = 0;\n  foreach ($lst as $num)\
    \ {\n    if ($num % 2 == 1) {\n      $odd += $num;\n    }\n    if ($num != 0)\
    \ {\n      $sum += ($num * $num);\n    }\n  }\n  return $odd ? $sum / $odd : 0;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nIf it helps, the `isset` condition can be rephrased\
    \ as `if ($num != 0)`. It will still work, though.\n<|/ c |>\n<| c |>\nThanks,\
    \ I didn't know that!  I just went with the more commonly used `!=` because it's\
    \ more semantic.  I'll edit my answer to reflect your suggestion.\n<|/ c |>\n\
    <| c |>\nThe `foreach` statement that computes the sum of squares could be replaced\
    \ with `array_sum`, which is less error-prone.\n<|/ c |>\n<| a tags=php |>\n<code>",
  "  // Your code here\n  return ($lst);\n}", "    foreach ($lst as $num) {\n    \
    \    if (is_numeric($num)) {\n            $sum += $num;\n        }\n    }\n  \
    \  return $sum;\n}\n</code>\n<|/ a |>\n<| a dscore=1 |>\nI have found a solution\
    \ like this:\n<code>\n/**\n * Calculate the sum of the squares of the elements\
    \ in the given array,\n * excluding integers and negatives.\n *\n * array $values\
    \ Array of values, may be empty.\n * float The sum of the squares of the elements\
    \ in the given array.\n */\npublic function sum_of_squares(array $values) {\n\
    \    $sum = 0;\n    foreach ($values as $value) {\n        if ((is_int($value)\
    \ || is_float($value)) && !is_negative($value)) {\n            $sum += $value\
    \ * $value;\n        }\n    }\n    return $sum;\n}\n\n/**\n * Check whether the\
    \ given value is negative.\n *\n * bool TRUE if the value is negative, FALSE otherwise.\n\
    \ */\nprotected function is_negative($value) {\n    return $value < 0;\n}\n</code>\n\
    <|/ a tags=arrays,php,math |>\n<| a |>\n<code>", "    if (empty($lst)) {\n   \
    \     return 0;\n    }\n\n    $sum = 0;\n\n    foreach ($lst as $value) {\n  \
    \      if ($value % 2 != 0) {\n            $sum += $value * $value;\n        }\n\
    \    }\n\n    return $sum;\n}\n</code>\n<|/ a dscore=4 tags=arrays,algorithm,php\
    \ |>\n<| a dscore=4 tags=arrays,algorithm,php |>\nThis is my solution with array_filter()\n\
    <code>", "  $s = array_sum(array_map('intval', $lst));\n  return $s > 0 ? ($s\
    \ * $s) : 0;\n}\n</code>\n<|/ a tags=php,arrays dscore=1 |>\n<| c |>\nThank you.\
    \ I've been trying to figure this out for the past hour and it just didn't click\
    \ until I read this post.  My question now is how would you go about implementing\
    \ this to multiple arrays?  Say I had a second array called $array2 that contained\
    \ a total of five different arrays.  How would you write this using array_walk?\n\
    <|/ c |>\n<| c |>\n- I'm glad you were able to figure it out! The answer you accepted\
    \ already answers your question as asked, so I wanted to make sure you were satisfied\
    \ with this answer. You can always ask a new question and link to it here. Happy\
    \ to help.\n<|/ c |>\n<| c |>\nSorry, I thought my original question was clear.\
    \  I actually just realized that array_walk doesn't work for multiple arrays.\
    \  I was trying to implement this function to multiple arrays.  I asked a follow\
    \ up question on how to implement the function using array_walk.  I appreciate\
    \ your help.\n<|/ c |>\n<| c |>\n- No worries, I understand. Happy to help.\n\
    <|/ c |>\n<| a dscore=0 |>\nHere's my take on it. First, here's a PHP fiddle showing\
    \ it working. http://phpfiddle.org/main/code/9n6x-z3w\n<code>\n$array1 = array(10,\
    \ 4, 3);\n$array2 = array(5, 8, 5);\n", "    $sum = 0;\n    foreach ($lst as $n)\
    \ {\n        if (is_numeric($n) && $n > 0) {\n            $sum += $n ** 2;\n \
    \       }\n    }\n    return $sum;\n}\n", "\t$sum = 0;\n\tforeach ($lst as $num)\
    \ {\n\t\tif (!is_numeric($num)) {\n\t\t\treturn $sum;\n\t\t}\n\t\t$sum += $num\
    \ * $num;\n\t}\n\treturn $sum;\n}\n", "  return array_sum(array_filter(array_map(function($num)\
    \ {\n    return $num % 2 ? $num * $num : $num;\n  }, $lst), function($num) {\n\
    \    return !is_int($num);\n  }));\n}\n", "    $result = 0;\n    if ( !empty($lst)\
    \ ) {\n        $result = $lst[0] * (2 * $lst[0]);\n        for ( $i = 1; $i <\
    \ count($lst); $i++ ) {\n            if ( $lst[$i] % 2 == 1 ) {\n            \
    \    $result += $lst[$i];\n            }\n        }\n    }\n    return $result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a |>\nHere's my solution:\n<code>", "    foreach\
    \ ($lst as $k => $v) {\n        if (is_numeric($v) && $v != 0 && !is_int($v))\
    \ {\n            $lst[$k] = $v * $v;\n        }\n    }\n    return array_sum($lst);\n\
    }\n", "    if (!$lst)\n        return 0;\n    $len = count($lst);\n    if ($len\
    \ == 0)\n        return 0;\n    $result = $lst[0];\n    for ($i = 1; $i < $len;\
    \ $i++)\n        if ($lst[$i] & 1)\n            $result = $result * $i;\n    return\
    \ $result;\n}\n", "\tif (!is_array($lst)) {\n\t\tthrow new Exception(\"$lst()\
    \ must be passed an array\");\n\t}\n\t$sum = 0;\n\tforeach ($lst as $key => $value)\
    \ {\n\t\tif (!is_int($value)) {\n\t\t\tthrow new Exception(\"$lst[$key]() must\
    \ be passed an integer\");\n\t\t}\n\t\tif ($key % 2 != 1) {\n\t\t\t$sum += $value\
    \ * $value;\n\t\t}\n\t}\n\treturn $sum;\n}\n", "    if (empty($lst)) {\n     \
    \   return 0;\n    }\n    $sum = 0;\n    $n = count($lst);\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        $val = abs($lst[$i]);\n        if ($val % 2 === 0) {\n\
    \            $sum += $val;\n        }\n    }\n    return $sum;\n}\n\n/**\n * Return\
    \ the sum of all numbers in the given array that are\n * greater than $val. Ignore\
    \ numbers greater than $val.\n * @param $lst\n * @param $val\n * @return float\n\
    \ */", "  $result = array_sum($lst);\n  foreach ($lst as $key => $value) {\n \
    \   if ($value != $key && $value % 2 == 1) {\n      $result -= $lst[$key] * $lst[$key];\n\
    \    }\n  }\n  return $result;\n}\n\n/**\n * Returns a new array that has the\
    \ same value repeated N times.\n *\n * For instance repeating [1,2,3] twice will\
    \ produce [1,1,2,2,3,3,3,3]\n *\n * @param $list\n * @param $num\n * @return array\n\
    \ */", "    $sum = 0;\n    foreach ($lst as $n) {\n        if (is_integer($n)\
    \ && $n % 2 != 0) {\n            $sum = $sum + $n;\n        }\n    }\n    return\
    \ $sum;\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThe first solution didn't work\
    \ when the list was negative or 0, I changed the function so it now doesn't need\
    \ to handle these cases. I added a second function to the bottom of this answer\
    \ for handling negative numbers. Please let me know if you have any questions.\n\
    <|/ c |>\n<| a tags=php dscore=2 |>\n<code>", "    if (is_array($lst) && count($lst))\
    \ {\n        $sum = 0;\n        foreach ($lst as $k => $v) {\n            if (is_string($v)\
    \ || is_numeric($v)) {\n                continue;\n            }\n           \
    \ $sum += $v * $v;\n        }\n        return $sum;\n    } else {\n        return\
    \ 0;\n    }\n}\n", "  return array_sum(array_filter(\n    $lst,\n    function($v)\
    \ {\n      return is_int($v) && $v > 0;\n    },\n    ARRAY_FILTER_USE_BOTH\n \
    \ ));\n}\n</code>\n<|/ a tags=php,arrays,array-reduce,function |>\n<| c |>\nI\
    \ didn't realise PHP had a filter function - I thought it was in Python. Nice\
    \ to know.\n<|/ c |>\n<| c |>\nIt is, indeed a nice feature, though it suffers\
    \ from the same limitations that your current code does. This is one of those\
    \ things that's not really worth it.\n<|/ c |>\n<| a |>\nHere's a way that doesn't\
    \ require a foreach loop and uses array_reduce() instead (which is likely to be\
    \ faster in some cases):\n<code>", "  $sum = 0;\n  foreach ($lst as $x)\n    if\
    \ ($x & 1) $sum += $x * $x;\n  return $sum;\n}", "    if (empty($lst)) return\
    \ 0;\n    $sum = 0;\n    $n = count($lst);\n    foreach ($lst as $num) {\n   \
    \     if ($num > 0) $sum += $num * $num;\n        if ($num < 0) $sum -= $num *\
    \ $num;\n    }\n    return $sum;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis\
    \ is the most efficient and best answer.\n<|/ c |>\n<| a dscore=5 |>\nAnother\
    \ solution would be to iterate over the array (array_walk or array_reduce) but\
    \ to skip odd numbers and to return the sum of the remaining numbers.\n<code>",
  "  $sum = 0;\n  $odd_values = array_filter($lst, 'is_odd');\n  if (empty($lst))\n\
    \    return 0;\n  foreach ($lst as $value)\n    $sum += pow($value, 2);\n  return\
    \ $sum - array_sum($odd_values);\n}\n", "    $sum = 0;\n    foreach ($lst as $n)\
    \ {\n        if (is_int($n)) {\n            $sum += $n;\n        } elseif ($n\
    \ > 0) {\n            $sum += $n * $n;\n        }\n    }\n    return $sum;\n}\n\
    </code>\n<|/ a tags=php |>\n<| a tags=php |>\nThis is my solution:\n<code>", " \
    \ $sum = 0;\n  $count = $lst[0] ? count($lst) : 0;\n  foreach ($lst as $n) {\n\
    \    if ($n % 2 == 1 && !is_int($n)) {\n      $sum -= $n * $n;\n    } else if\
    \ ($count > 0 && is_int($n)) {\n      $count--;\n    } else {\n      break;\n\
    \    }\n  }\n  return $sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nPlease don't\
    \ post only code as an answer, but also provide an explanation what your code\
    \ does and how it solves the problem of the question. Answers with an explanation\
    \ are usually of better quality, and are more likely to attract upvotes.\n<|/\
    \ c |>\n<| a tags=php |>\nI do not think there is an elegant solution for that\
    \ (unless you use recursion). It looks like a good candidate for Recursive Function\
    \ (PHP 5.3.0)\n<code>", "  if (empty($lst)) {\n    return 0;\n  }\n  return array_sum(array_map(function($x)\
    \ {\n    // Ignore non-integer numbers\n    if (!is_int($x)) {\n      return 0;\n\
    \    }\n    // Ignore negative numbers\n    if ($x < 0) {\n      return 0;\n \
    \   }\n    // If the number is odd, multiply by itself; otherwise square\n   \
    \ return $x % 2 ? $x * $x : 0;\n  }, $lst));\n}\n", "  $sum = 0;\n  foreach ($lst\
    \ as $x) {\n    if ($x % 2 == 1 || ($x % 2 == 0 && $x != 0)) {\n      $sum +=\
    \ $x * $x;\n    }\n  }\n  return $sum;\n}\n</code>\n<|/ a dscore=1 tags=php |>\n\
    <| c |>\nHi Jeff, your code is not working on all the test cases. I have checked\
    \ with other test cases on your code, it is not working.\n<|/ c |>\n<| a dscore=1\
    \ |>\nI suggest you implement this algorithm with only one loop and a variable\
    \ $sum that will store the sum of the numbers:\n<code>", "  $sum = 0;\n  foreach\
    \ ($lst as $num) {\n    if ($num > 0 && is_int($num))\n      $sum += $num * $num;\n\
    \  }\n  return $sum;\n}", "  foreach ($lst as $n) {\n    if (is_int($n) && $n\
    \ >= 0)\n      continue;\n    if (!is_int($n) || $n < 0)\n      return 0;\n  }\n\
    \  return array_sum(array_filter(array_map(function($n) {\n    return pow(2, $n);\n\
    \  }, array_unique(array_diff($lst, range(0, count($lst) - 1)))));\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nthis works only on integer numbers. I guess you were\
    \ looking for `array_sum` instead of `array_reduce`.\n<|/ c |>\n<| c |>\nI missed\
    \ that requirement when I first read the question (now edited in). I guess that\
    \ would have been obvious to me :-)\n<|/ c |>\n<| a |>\nHere's my solution:\n\
    <code>\n$array = array(1, 3, 2, 0);\n$result = array_reduce($array, function ($result,\
    \ $item) {\n  return $result + (($item & 1) ? $item : 0);\n}, 0);\n</code>\n<|/\
    \ a dscore=1 tags=arrays,php,sum |>\n<| a dscore=1 |>\nThis solution will sum\
    \ all odd numbers in the array from 0 to the last index\n<code>\n$array = array(1,\
    \ 3, 2, 0);\n$count = array_sum(array_slice($array, -1));\n$sum = 0;\n\nforeach($array\
    \ as $num) {\n    if ($num % 2)\n        $sum += $num;\n}\n</code>\n<|/ a tags=arrays,php,sum\
    \ |>\n<| a tags=arrays,php,sum |>\n<code>\n$array = array(1, 3, 2, 0);\n$sum =\
    \ 0;\nfor($i=0; $i < sizeof($array); $i++){\n    if($array[$i] % 2 != 0){\n  \
    \      $sum = $sum + $array[$i];\n    }\n}\necho $sum;\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\n<code>\n<?php\n", "    $sum = 0;\n    $squares = 0;\n    foreach\
    \ ($lst as $num) {\n        if ($num > 0 && !is_int($num)) {\n            $sum\
    \ = $sum + $num;\n            $squares++;\n        }\n    }\n    return $sum *\
    \ ($squares <= 1) ? $sum : $sum * ($squares > 1) ? $sum / $squares : 0;\n}\n</code>\n\
    <|/ a tags=arrays,php |>\n<| c |>\nWhat if the array is empty? Then it returns\
    \ `0`\n<|/ c |>\n<| c |>\n- Good point.  I added a check for empty before doing\
    \ the calculation so the function returns 0 when called on an empty array.  I\
    \ updated the code above.\n<|/ c |>\n<| a dscore=0 tags=arrays,php |>\n<code>\n\
    $sum = 0;\nforeach($arr as $key=>$val){\n    if($val != 0){\n        $sum += $val;\n\
    \        $squares++;\n    }\n}\n</code>\n<|/ a |>\n<| c |>\nWhat if the array\
    \ is empty? Then it returns `0`\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$sum = 0;\n\
    $squares = 0;\n\nforeach ($array as $key => $value) {\n    if ($value != 0) {\n\
    \        $sum += $value;\n        $squares += pow($value, 2);\n    }\n}\n\necho\
    \ $sum * $squares;\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 |>\n<code>",
  "  $sum = 0;\n  foreach ($lst as $e) {\n    if ($e < 0) {\n      // ignore negative\
    \ numbers\n      continue;\n    }\n    if ($e % 2 != 0) {\n      $sum += $e;\n\
    \    }\n  }\n  return $sum;\n}", "  $sum = 0;\n  foreach ($lst as $elem) {\n \
    \   if (is_int($elem)) {\n      $sum += $elem;\n    } else if (is_double($elem))\
    \ {\n      $sum += $elem*$elem;\n    } else if (is_string($elem)) {\n      $sum\
    \ += $elem*$elem;\n    }\n  }\n  return $sum;\n}\n", "  return array_sum(array_filter($lst,\
    \ function ($n) {\n    return 0 > $n ? false : ($n % 2 != 0);\n  }));\n}", " \
    \   $res = 0;\n    foreach ($lst as $v) {\n        if ($v <= 0)\n            break;\n\
    \        if ($v % 2)\n            $res += $v * $v;\n    }\n    return $res;\n\
    }\n", "    return array_reduce($lst, 'array_sum', 0) * (1 / array_sum($lst));\n\
    }\n</code>\n<|/ a tags=php |>\n<| a tags=php dscore=2 |>\nAs I understand from\
    \ your question, you have a list of numbers, and the list may contain repeated\
    \ numbers.\nFor example (with repeated numbers removed):\n<code>\n$list = array(1,\
    \ 2, 3, 1, 4); // $list contains four elements\n</code>\nThen, you want to find\
    \ the sum of the numbers which are divisible by 2.\nIn this case your solution\
    \ is (without taking repeated numbers out):\n<code>\n$answer = array_sum(array_filter($list,\
    \ function($x) { return $x % 2 == 0; }));\n</code>\n<|/ a |>\n<| c |>\nThe question\
    \ is specifically about summing up multiples of 2 and only counting multiples\
    \ once (e.g. 1 3 5 is 1+3+5)\n<|/ c |>\n<| a tags=php |>\n<code>\n$arr = [1, 2,\
    \ 3];\n$sum = 0;\nforeach ($arr as $value)\n{\n    if ($value % 2 == 0)\n    {\n\
    \        $sum += $value;\n    }\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php\
    \ |>\nTry this code: \n<code>\n$arr = [1, 2, 3];\n$sum = 0;\nforeach($arr as $value)\
    \ {\n    if ($value % 2 == 0) {\n        $sum += $value;\n    }\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n$sum = 0;\nforeach($array as $item){\n\
    \    if($item % 2 == 0){\n        $sum += $item;\n    }\n}\n</code>\n<|/ a tags=php\
    \ |>\n<| a |>\nThis is what I have come up with, not sure if it is the most efficient\
    \ way and I am sure someone can optimize this more:\n<code>\n$arr = [1, 2, 3,\
    \ 2, 3, 4, 3, 4, 5];\n\n$sum = 0;\nforeach($arr as $val){\n    if($val % 2 ==\
    \ 0){\n        $sum = $sum + $val;\n    }\n}\n</code>\n<|/ a dscore=1 tags=php\
    \ |>\n<| c |>\n`% 2` means `% 2` not `% 10`\n<|/ c |>\n<| c |>\n: It doesn't matter\
    \ because `% 2` will always return `0` or `1`, so either way the condition will\
    \ always be true.\n<|/ c |>\n<| c |>\n: It doesn't matter. `% 2` will always return\
    \ either `0` or `1`. Either way the condition will ", "    $sum_of_squares = 0;\n\
    \    foreach ($lst as $number) {\n        if ($number != 0 && is_integer($number))\
    \ {\n            $sum_of_squares += $number * $number;\n        }\n    }\n   \
    \ return ($sum_of_squares / count($lst));\n}", "    if (!is_array($lst)) return\
    \ 0;\n    $sum = 0;\n    foreach ($lst as $a) {\n        if ($a < 0 && $a > -$a)\
    \ continue;\n        $sum += $a * $a;\n    }\n    return $sum;\n}\n", "  $sum\
    \ = 0;\n  foreach ($lst as $val) if ($val >= 0) $sum += $val * $val;\n  return\
    \ $sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=function,math,php |>\nI wrote\
    \ a function in JavaScript which returns sum of squares of elements in the array\
    \ which are greater than or equal to zero\n<code>", "  return array_sum(array_filter($lst,\
    \ 'is_int')) * array_sum(array_filter($lst, 'is_odd'));\n}\n", "    if (count($lst)\
    \ === 0) { return 0; }\n    $sum = 0;\n    foreach ($lst as $num => $values) {\n\
    \        foreach ($values as $value) {\n            if ($value < 0) {\n      \
    \          continue;\n            }\n            if ($value & 1) {\n         \
    \       $sum += $value * $value;\n            }\n        }\n    }\n    return\
    \ $sum;\n}\n</code>\n<|/ a dscore=0 tags=php,arrays |>\n<| a tags=php,arrays |>\n\
    I used this PHP function to find out how to do it:\n<code>", "    $total = array_sum($lst);\n\
    \    if ($total === 0) return 0;\n    return array_sum(array_map(function ($i)\
    \ { return $i ** 2; }, array_filter($lst)));\n}\n", "    $s = array_sum($lst);\n\
    \    foreach($lst as $n) {\n        if ($n < 0) {\n            $n = 0;\n     \
    \   } elseif ($n != (int)$n) {\n            $n = 0;\n        }\n        $s +=\
    \ ($n * (int)$n);\n    }\n    return $s;\n}\n", "    $ret = 0;\n    foreach ($lst\
    \ as $i => $v) {\n        $ret += $v * $v;\n        if ($ret > 0 && $ret % 2 ===\
    \ 1) {\n            $ret *= 2;\n        }\n    }\n    return $ret;\n}\n</code>\n\
    But I wonder if it will work for your bigger array. My solution is not that bad\
    \ as yours, but it still is not the most efficient solution. The main reason is\
    \ that it makes many unnecessary calculations. I did this in the end and here\
    \ are the results:\n<code>\n<?php\n$array = array(\n    array(\n        0,\n \
    \       0,\n        0,\n        0,\n        0,\n        0,\n        0,\n     \
    \   0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n\
    \        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n    \
    \    0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n\
    \        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n    \
    \    0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n\
    \        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n    \
    \    0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n\
    \        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n    \
    \    0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n\
    \        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n    \
    \    0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n\
    \        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n    \
    \    0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n\
    \        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n    \
    \    0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n\
    \        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n    \
    \    0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n\
    \        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n    \
    \    0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n\
    \        0,\n        0,\n", "    $sum = 0;\n    foreach ($lst as $num) {\n   \
    \     if (is_numeric($num)) {\n            if ($num >= 0) {\n                $sum\
    \ += $num;\n            } else {\n                $sum -= $num;\n            }\n\
    \        }\n    }\n    return $sum;\n}\n</code>\n<|/ a tags=php,math |>\n<| c\
    \ |>\nThis was extremely helpful, thank you! I wanted to find all values that\
    \ are divisible by 3, so I added a line that checks that, and also added a line\
    \ that checks the sum and returns 0 if the sum is 0. Here's my final code that\
    \ worked perfectly for me:\n<|/ c |>\n<| c |>\n`$return=0;\n$sum=0;\n$tests=array();\n\
    $lst=array(-2,3,5,6,7,8);\nforeach ($lst as $num) {\n    if (is_numeric($num))\
    \ {\n        if ($num > 0) {\n            $tests[] = $num;\n        }\n    }\n\
    }\nforeach ($tests as $test) {\n    if ($test%3==0) {\n        $sum=$test+$sum;\n\
    \        $return++;\n    }\n}\nif ($sum==0) {\n    $return=0;\n}\nreturn $return;`\n\
    <|/ c |>\n<| a tags=php,math |>\n<code>\n<?php\n$input = array(-2, 5, -7, 4, 1,\
    \ -5, 3);\n$sum = 0;\n$total = 0;\n$i = 0;\nforeach ($input as $input) {\n   \
    \ if ($input < 0) {\n        $sum = $sum + abs($input);\n    }\n    else {\n \
    \       $total = $total + $input;\n    }\n    if ($i % 3 == 0) {\n        $total\
    \ = $total / 3;\n        $sum += $total;\n        $total = 0;\n    }\n    $i++;\n\
    }\necho $sum;", "    return array_reduce($lst, function ($s, $x) use (&$s) {\n\
    \        if (!is_integer($x) || $x < 0) {\n            $s = 0;\n        }\n\n\
    \        return ($s ? $s : $s) + $x * $x;\n    });\n}\n</code>\n<|/ a dscore=3\
    \ tags=math,algorithm,php,language-agnostic |>\n<| c |>\nGood idea, but that's\
    \ only a partial solution: the original array will always have at least one element\
    \ (so all elements have to sum up to something).\n<|/ c |>\n<| c |>\n: Ah, now\
    \ I see. But this does seem like a better answer to me than mine.\n<|/ c |>\n\
    <| c |>\nYeah, it wouldn't have helped anyway, because of the way you were doing\
    \ it.  The `array_reduce` code actually works though.\n<|/ c |>\n<| c |>\n: Yes,\
    \ it works, but it has a bug - it counts the \"0\" as a positive number, when\
    \ it's clearly not part of the list.  So it's still not quite correct.  But it\
    \ could be fixed by adding a test for `$x==0` to make sure it isn't part of the\
    \ sum.\n<|/ c |>\n<| c |>\nYeah I noticed that too, but my fix doesn't fix it\
    \ either... it's not a bug, it's just that it's not exactly right.  I edited my\
    \ answer to show it.\n<|/ c |>\n<| a dscore=2 |>\nTry this one:\n<code>", "  $sum\
    \ = 0;\n  $count = 0;\n  foreach($lst as $i) {\n    if (is_numeric($i) && $i >=\
    \ 0) {\n      $sum += $i * $i;\n      $count++;\n    }\n  }\n  if ($count == 0)\
    \ {\n    return 0;\n  }\n  return $sum;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,algorithm\
    \ dscore=1 |>\nA more efficient method is to sum squares, which is a bit faster:\n\
    <code>", "    $sum = 0;\n    foreach ($lst as $v) {\n        if ($v <= 0) {\n\
    \            continue;\n        }\n        if ($v % 2 == 1) {\n            $sum\
    \ -= $v * $v;\n        }\n    }\n    return $sum;\n}", "    if (empty($lst)) {\n\
    \        return 0;\n    }\n    $total = 0;\n    foreach ($lst as $num) {\n   \
    \     if (is_numeric($num)) {\n            $total += $num;\n        }\n      \
    \  if ($num < 0) {\n            $total += 2 * $num;\n        }\n    }\n    return\
    \ $total;\n}", "    $sum = 0;\n    foreach ($lst as $num) {\n        if ($num\
    \ && !is_int($num)) {\n            $sum += $num;\n        }\n    }\n    if ($sum\
    \ > 0) {\n        return $sum;\n    }\n\n    return 0;\n}\n</code>\nThis could\
    \ be done more efficiently, but that would require a very different approach.\n\
    <|/ a tags=php |>\n<| c |>\nIf I'm reading the OP correctly, he wants a sum of\
    \ squares for odd numbers - this won't get you that.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work. As I stated previously, I actually did mean the sum of squares\
    \ of the odd numbers. I'm sorry if that wasn't clear.\n<|/ c |>\n<| c |>\n: I\
    \ think I misunderstood the question. I thought he wanted the sum of odd numbers,\
    \ but then I realized that he wanted the sum of squares of the odd numbers. Will\
    \ update now.\n<|/ c |>\n<| c |>\nNo, your code is incorrect, I'm sorry. See my\
    \ answer. +1 for thinking outside the box though :)\n<|/ c |>\n<| c |>\n: Thanks\
    \ for pointing that out. Now fixed.\n<|/ c |>\n<| a dscore=2 tags=php |>\nYour\
    \ solution will not work properly. Take this:\n<code>\n$numbers = array(-1, 2,\
    \ 3, -4, -1);\n$sum = 0;\n$odds = 0;\n\nforeach ($numbers as $number)\n{\n   \
    \ if (is_int($number)) {\n        $sum = $sum + $number;\n    } else {\n     \
    \   $odds = $odds + 1;\n    }\n}\n</code>\nWhen you do is_int($number), you get\
    \ true for every number except -4, which is not an integer. Instead, you should\
    \ do:\n<code>\nif (is_int($number) && $number != -4)\n</code>\nSo you can simplify\
    \ your entire loop to:\n<code>\nforeach ($numbers as $number)\n{\n    if (is_int($number)\
    \ && $number != -4)\n        $sum += $number;\n    else\n        $odds = $odds\
    \ + 1;\n}\n</code>\n<|/ a |>\n<| a dscore=2 |>\nThe other answers are correct\
    \ that your solution will not work and that you should add && $number != -4 to\
    \ the is_int() check.\nHowever, it can be made a little simpler using a ternary\
    \ operator in your is_int() check.\n<code>\nforeach ($numbers as $number) {\n\
    \    if(is_int($number)){\n        $sum += $number;\n    }else{\n        $sum\
    \ += $number*$number;\n    }", "    if (empty($lst)) {\n        return 0; // or\
    \ whatever\n    }\n    $result = array_sum(array_map('sqrt', $lst));\n    return\
    \ ($result % 2 === 0) ? $result - 1 : $result;\n}", "  $result = 0;\n  $odd =\
    \ true;\n  if ($lst) {\n    foreach ($lst as $value) {\n      if ($value < 0 ||\
    \ $value % 2 != 0) {\n        $odd = false;\n      }\n      $result = $result\
    \ + $value * $value;\n    }\n  }\n  return $odd ? $result : 0;\n}\n", "    $sum\
    \ = 0;\n    foreach ($lst as $num) {\n        if ($num < 0 || $num == (int)$num)\
    \ {\n            continue;\n        }\n        $sum += $num * $num;\n    }\n \
    \   return $sum;\n}\n", "    $sum = 0;\n    foreach ($lst as $i) {\n        if\
    \ ($i % 2 != 0) {\n            $sum += $i;\n        }\n    }\n\n    return $sum;\n\
    }\n", "  $sum = 0;\n  $n = 0;\n  foreach ($lst as $num) {\n    if ($num >= 0)\
    \ {\n      $sum += $num;\n      $n++;\n    }\n  }\n  return $sum * $n <= 0 ? (int)\
    \ $sum * $n : 0;\n}", "  if (empty($lst)) {\n    return 0;\n  }\n  $sum = 0;\n\
    \  foreach ($lst as $value) {\n    if ($value < 0) {\n      $sum -= $value;\n\
    \    } else {\n      $sum += $value * $value;\n    }\n  }\n  return $sum;\n}",
  "\tif (!$lst) {\n\t\treturn 0;\n\t}\n\n\t$sum = 0;\n\n\tforeach ($lst as $item)\
    \ {\n\t\tif ($item < 0) {\n\t\t\t$sum += abs($item);\n\t\t} else {\n\t\t\t$sum\
    \ += $item;\n\t\t}\n\t}\n\n\treturn $sum;\n}\n", "    $sum = 0;\n    foreach ($lst\
    \ as $item) {\n        if ($item >= 0 && $item % 2 == 1) {\n            $sum +=\
    \ $item * $item;\n        }\n    }\n    return $sum;\n}\n", "    if (empty($lst))\
    \ {\n        return 0;\n    }\n    $result = 0;\n    foreach ($lst as $n) {\n\
    \        if (is_integer($n)) {\n            $result -= $n;\n        } else {\n\
    \            $result -= $n * $n;\n        }\n    }\n    return $result;\n}\n</code>\n\
    <|/ a tags=php,algorithm dscore=0 |>\n<| c |>\nWhat about `array(9, -2)`?\n<|/\
    \ c |>\n<| c |>\n`array(9, -2)` is odd, but `9 * -2` is even. That's why I thought\
    \ to exclude negative values from the `sum`.\n<|/ c |>\n<| c |>\nThe only thing\
    \ is that `9 * -2` would be negative in that case. :)\n<|/ c |>\n<| a dscore=0\
    \ tags=php,algorithm |>\nMy solution would be \n<code>", "  $sum = 0;\n  foreach\
    \ ($lst as $num) {\n    if ($num % 2 == 0) {\n      $sum += $num;\n    }\n  }\n\
    \  return $sum;\n}\n", "  foreach($lst as $val){\n    if ($val >= 0)\n      if\
    \ ($val % 2 != 0)\n        $total = $total + $val;\n  }\n  return $total;\n}\n\
    </code>\n<|/ a dscore=1 tags=arrays,php |>\n<| a dscore=0 tags=arrays,php |>\n\
    <code>\n<?php\n$a = [1,2,3,4,5];\n$result = 0;\nforeach($a as $val)\n{\nif($val\
    \ % 2 == 0)\n$result += $val;\n}\necho $result;", "    foreach ($lst as $elem)\
    \ {\n        if ($elem < 0)\n            die('ERROR: negative numbers cannot be\
    \ used');\n        if (!is_int($elem))\n            die('ERROR: non-integer numbers\
    \ are not allowed');\n    }\n    $sum = 0;\n    foreach ($lst as $elem) {\n  \
    \      if ($elem & 1)\n            $sum += $elem;\n    }\n    return $sum;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThank you so much for helping me out! The code works,\
    \ but as I checked the code I thought I had a bug in the code, and I didn't. This\
    \ makes me really thankful for helping me out! Thank you!\n<|/ c |>\n<| c |>\n\
    This was a great solution, and even though it didn't actually work for my code\
    \ it did teach me a lot. I was also confused at first, but this really helped\
    \ me understand the problem and how to solve it. Thank you so much!\n<|/ c |>\n\
    <| a dscore=2 |>\nThis is an example of a case where using a loop would be faster\
    \ than a recursive function.\nHere is a benchmark showing how a loop would perform\
    \ vs a recursive function. The results are not exactly what you expected because\
    \ a recursive function has a more complex stack, but they show that recursion\
    \ is much faster in most cases:\n<code>\n<?php\n\n$data = array_fill(0, 1000000,\
    \ mt_rand(1, 1000000));\n$data = array_flip($data);\n\n$loopStartTime = microtime(true);\n\
    $loopSum = array_sum(array_map(function ($el) {\n    return $el * $el;\n}, $data));\n\
    echo \"Loop took {$loopTime}s, result: {$loopSum}.\\n\";\n\n$recursiveStartTime\
    \ = microtime(true);\n$recursiveSum = array_sum(array_recurse($data));\necho \"\
    Recurse took {$recursiveTime}s, result: {$recursiveSum}.\\n\";\n", "    foreach\
    \ ($lst as $item) {\n        $sum += $item;\n        if ($item != 0) {\n     \
    \       if ($sum > 0) {\n                $sum -= $item;\n            }\n     \
    \   }\n    }\n    return $sum;\n}\n", "  $sum = 0;\n  foreach($lst as $value)\
    \ {\n    if ($value < 0) {\n      continue;\n    }\n    $sum += $value ** 2;\n\
    \  }\n  if (empty($lst)) {\n    return 0;\n  }\n  return $sum;\n}\n</code>\n<|/\
    \ a dscore=2 tags=php,algorithm |>\n<| c |>\nI don't see how that's different\
    \ from [this](http://codepad.viper-7.com/gH1zJv).\n<|/ c |>\n<| c |>\nNo, it isn't.\
    \ There are more elements in the list. Try `array(-1, 2, 3, -4)`.\n<|/ c |>\n\
    <| c |>\n: What about `array(0)`? The question doesn't say anything about how\
    \ to handle that case.\n<|/ c |>\n<| c |>\n, how would you expect me to handle\
    \ that case? I assumed he would want 0. He said \"Ignore numbers that are negative\
    \ or not integers\", which means an empty list would return 0.\n<|/ c |>\n<| c\
    \ |>\nThe example I gave for `array()` is one that would return `0` as `array_sum()`\
    \ would return `0`. The other example `array(-1, 2, 3, -4)` would return `0`.\n\
    <|/ c |>\n<| a |>\nSince you are working with floats, you should probably use\
    \ fsum:\n<code>\n$res = array_sum(array_filter($list, function($v){\n    return\
    \ $v > 0;\n}));\n</code>\narray_filter will remove the elements that don't match\
    \ the condition you pass in. array_sum is then what you need. Also note, that\
    \ empty list will return 0.\nDemo.\n<|/ a tags=php,algorithm dscore=2 |>\n<| a\
    \ |>\nI agree that your method of adding numbers doesn't work, since you use floats.\
    \ But there is a simple solution using modulo arithmetic: you add up every number\
    \ mod 10^9 + 1 and take the last digit. This works for negative numbers too.\n\
    Here is a quick implementation using array_reduce:\n<code>", "  return array_sum(array_filter($lst,\
    \ function($x) {\n    return !is_int($x) || $x === 0;\n  })) ** 2;\n}\n</code>\n\
    <|/ a |>\n<| a dscore=2 tags=math,algorithm,php |>\n<code>", "  if (!empty($lst))\n\
    \    foreach ($lst as $n)\n      if ($n % 2 == 1)\n        $result +=  $n * $n;\n\
    \  return $result;\n}\n", "    if (count($lst) === 0) {\n        return 0;\n \
    \   }\n\n    $sum = 0;\n    foreach ($lst as $number) {\n        if ($number <\
    \ 0) {\n            $sum -= $number;\n        } else if (is_int($number)) {\n\
    \            $sum += $number * $number;\n        }\n    }\n\n    return $sum;\n\
    }\n", "  $sum = 0;\n  $count = 0;\n  foreach ($lst as $n) {\n    if ($n % 2) {\n\
    \      $sum = $sum + $n;\n      $count++;\n    }\n  }\n\n  return $count == 0\
    \ ? 0 : $sum;\n}\n", "  $sum = 0;\n  if (is_array($lst) && count($lst) > 0) {\n\
    \    $lst = array_filter($lst, 'is_numeric');\n  }\n  if (is_array($lst) && count($lst)\
    \ > 0) {\n    for ($i = 0; $i < count($lst); $i++) {\n      if ($lst[$i] < 0)\
    \ {\n        $lst[$i] = 0;\n      }\n    }\n    $sum = array_sum($lst);\n    if\
    \ ($sum < 0) {\n      $sum = 0;\n    }\n    return $sum;\n  }\n  return 0;\n}",
  "  $sum = 0;\n  foreach ($lst as $number) {\n    if ($number == 0)\n      return\
    \ 0;\n    if (is_float($number)) {\n      $number = (int)$number;\n    }\n   \
    \ if ($number > 0)\n      $sum -= $number * $number;\n    else\n      $sum +=\
    \ $number;\n  }\n  return $sum;\n}\n", "  // Your code here\n  $sum = 0;\n  $count\
    \ = count($lst);\n  for ($i = 0; $i < $count; $i++) {\n    if ($lst[$i] >= 0)\
    \ {\n      $sum += $lst[$i] * $lst[$i];\n    }\n  }\n  return $sum;\n}", "\t$squares\
    \ = 0;\n\tforeach ($lst as $number) {\n\t\tif ($number < 0) {\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif ($number % 2 === 0) {\n\t\t\t$squares += $number;\n\t\t}\n\t}\n\t\
    return $squares;\n}\n", "  if (!$lst)\n    return 0;\n  $n = count($lst);\n  $sum\
    \ = 0;\n  for ($i = 0; $i < $n; ++$i) {\n    if ($lst[$i] < 0) {\n      if (!isset($lst[$i\
    \ + 1])) {\n        ++$i;\n        continue;\n      }\n      $sum += $lst[$i]\
    \ * $lst[$i + 1];\n      ++$i;\n      continue;\n    }\n    $sum += $lst[$i] *\
    \ $lst[$i];\n  }\n  return $sum;\n}\n", "    if (!empty($lst)) {\n        $sum\
    \ = array_sum($lst);\n        return array_filter($lst, function ($num) {\n  \
    \          return !($num < 0);\n        }, $sum);\n    }\n    return 0;\n}\n",
  "    $sum = 0;\n    foreach ($lst as $n => $v) {\n        if (is_int($v) && $v %\
    \ 2 == 0) {\n            $sum += $v;\n        } else if ($v < 0) {\n         \
    \   $sum += $v;\n        }\n    }\n    return $sum;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nHow about this one? \n`$a = array(-3, -2, -1, 1, 2, 5, 8, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610);\n$sum = 0;\nforeach ($a as $key => $value){\n\
    if($value<0){\n$sum+=abs($value);\n}\n}`\n<|/ c |>\n<| a |>\n<code>\n$nums = array(10,20,30,40);\n\
    $nums=array_map('abs',$nums);\n$total = 0;\nforeach($nums as $num){\n    if($num>0){\n\
    \        $total+=$num;\n    }\n}\n\necho $total;\n</code>\n<|/ a dscore=2 tags=php,arrays\
    \ |>\n<| a |>\nUsing array_reduce.\n<code>", "    $result = 0.0;\n\n    foreach\
    \ ($lst as $number) {\n        if ($number <= 0.0) {\n            continue;\n\
    \        }\n\n        if (is_integer($number)) {\n            $result += $number\
    \ * $number;\n            continue;\n        }\n\n        // If the number is\
    \ negative, don't double it.\n        if ($number < 0) {\n            $result\
    \ -= $number;\n            continue;\n        }\n\n        $result += $number\
    \ * $number;\n    }\n\n    return $result;\n}\n</code>\n<|/ a tags=php |>\n<|\
    \ a tags=php |>\n<code>\n$numbers=array(-4,-5,-2,-3,-6);\n$sum=0;\n\nforeach ($numbers\
    \ as $value) {\n    if($value!=0){\n    $sum=$sum+$value;\n    }\n}\necho \"Sum\
    \ of Odd numbers is : \".$sum;\n</code>\n<|/ a dscore=1 |>\n<| c |>\n$sum=0;\n\
    $numbers=array(-4,-5,-2,-3,-6);\n\nforeach ($numbers as $value) {\n    if($value!=0){\n\
    \    $sum=$sum+$value;\n    }\n}\necho \"Sum of Odd numbers is : \".$sum;\n<|/\
    \ c |>\n<| c |>\nThank you so much for your help! This definitely helped me.\n\
    <|/ c |>\n<| c |>\nHi Dhananjay,\nI tried to run the program as you suggested,\
    \ but I received the following error:\n\nParse error: syntax error, unexpected\
    \ T_ECHO, expecting ',' or ';'\n<|/ c |>\n<| c |>\nIt works fine when I copy/paste\
    \ it into my editor, but when I try to run it through the W3C Validator, it gives\
    \ me the following error:\n\nErrors\n\nLine: 4\nError: Parse error: syntax error,\
    \ unexpected T_ECHO, expecting ',' or ';'\nCode: \n$sum=0;\n$numbers=array(-4,-5,-2,-3,-6);\n\
    \nforeach ($numbers as $value) {\n    if($value!=0){\n    $sum=$sum+$value;\n\
    \    }\n}\necho \"Sum of Odd numbers is : \".$sum;\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n", "  return array_sum(array_filter(\n    array_map(function($x)\
    \ {\n      return $x ** 2;\n    }, $lst),\n    function($x) {\n      return $x\
    \ % 2 === 0;\n    }\n  ));\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a |>\nYou\
    \ can use array_filter to filter out the negative numbers and array_map to map\
    \ the squares to a new array.\nThen you can array_sum the resulting array.\n<code>\n\
    $numbers = [1,3,-2,0,9,8];\n$sum_squares = array_sum(array_map(function($n) {\n\
    \    return $n * $n;\n}, array_filter($numbers, function($n) {\n    return $n\
    \ >= 0;\n})));\n</code>\n<|/ a dscore=0 tags=php,arrays |>\n<| a |>\nI got it\
    \ to work using the below code:\n<code>\n<?php\n\n$numbers = [1,3,-2,0,9,8];\n\
    $sum_squares = array_sum(array_filter(\n        array_map(function($x) {\n   \
    \         return $x ** 2;\n        }, $numbers),\n        function($x) {\n   \
    \         return $x % 2 === 0;\n        }\n    ));\n\necho $sum_squares;\n", " \
    \ return array_reduce($lst, '+', 0) / count($lst);\n}", "  if (empty($lst)) return\
    \ 0;\n  $sum = 0;\n  for ($i = 0; $i < count($lst); $i++) {\n    if ($lst[$i]\
    \ % 2 != 0) $sum += $lst[$i] * $lst[$i];\n  }\n  return $sum;\n}", "    return\
    \ array_reduce($lst, 'array_sum', 0);\n}\n</code>\n<|/ a tags=php,arrays,sum |>\n\
    <| c |>\nI don't see why this was voted down. This is the fastest and simplest\
    \ solution.\n<|/ c |>\n<| a |>\n<code>\n<?php \n$array1 = array(\"a\",\"b\",\"\
    c\",\"d\",\"e\",\"f\",\"g\");\n$array2 = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"\
    f\",\"g\");\n\n$array1[1][1]=$array2[1][1];\n\n$array1[2][2]=$array2[2][2];\n\n\
    $array1[3][3]=$array2[3][3];\n\n$array1[4][4]=$array2[4][4];\n\n$array1[5][5]=$array2[5][5];\n\
    \n$array1[6][6]=$array2[6][6];\n\n$array1[7][7]=$array2[7][7];\n\n$array1[8][8]=$array2[8][8];\n\
    \n$array1[9][9]=$array2[9][9];\n\n$array1[10][10]=$array2[10][10];\n\n$array1[11][11]=$array2[11][11];\n\
    \n$array1[12][12]=$array2[12][12];\n\n$array1[13][13]=$array2[13][13];\n\n$array1[14][14]=$array2[14][14];\n\
    \n$array1[15][15]=$array2[15][15];\n\n$array1[16][16]=$array2[16][16];\n\n$array1[17][17]=$array2[17][17];\n\
    \n$array1[18][18]=$array2[18][18];\n\n$array1[19][19]=$array2[19][19];\n\n$array1[20][20]=$array2[20][20];\n\
    \n$array1[21][21]=$array2[21][21];\n\n$array1[22][22]=$array2[22][22];\n\n$array1[23][23]=$array2[23][23];\n\
    \n$array1[24][24]=$array2[24][24];\n\n$array1[25][25]=$array2[25][25];\n\n$array1[26][26]=$array2[26][26];\n\
    \n$array1[27][27]=$array2[27][27];\n\n$array1[28][28]=$array2[28][28];\n\n$array1[29][29",
  "  return array_sum(array_map(\n    function ($num) {\n      return $num == 0 ?\
    \ 0 : $num * $num;\n    },\n    array_filter($lst)\n  ));\n}\n</code>\n<|/ a dscore=3\
    \ tags=php,sum,arrays |>\n<| c |>\nthanks, I never thought about doing the filtering\
    \ in PHP. Was thinking about doing it in Javascript, where the problem would be\
    \ trivial. But yes, PHP's `array_filter()` would have also worked here.\n<|/ c\
    \ |>\n<| a |>\n<code>\n$a = [1,2,3,0];\n\n$b = array_filter($a, function($value)\
    \ use($a) {\n    return !is_integer($value);\n});\n\nprint_r(array_sum($a));\n\
    </code>\n<|/ a tags=php,sum,arrays dscore=2 |>\n<| a dscore=2 tags=php,sum,arrays\
    \ |>\n<code>\n<?php", "    $sum = 0;\n    foreach ($lst as $e) {\n        if ($e\
    \ == 0 || is_int($e)) {\n            $sum += $e;\n        }\n    }\n    return\
    \ $sum;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nThank you very much! This\
    \ helps a lot.\n<|/ c |>\n<| c |>\nI've been trying to write this as a recursive\
    \ function, but I'm hitting a wall getting it to work. I'm also thinking that\
    \ there must be a more efficient way to do this, rather than writing a loop to\
    \ iterate through every element in the array, adding them up, then return it at\
    \ the end. Can you share your recursive function? I'm working on an answer to\
    \ my own question now, but I'm curious to see what you come up with. :)\n<|/ c\
    \ |>\n<| c |>\nI've added my recursive solution to my question above. I had to\
    \ break it into several functions to make it work, which is kind of a pain.\n\
    <|/ c |>\n<| a tags=arrays,php dscore=2 |>\nJust another way:\n<code>\narray_sum(array_filter($array,\
    \ function($e){return $e % 2 == 0;}));\n</code>\n<|/ a |>\n<| c |>\nI like this\
    \ approach, but note that it creates an intermediate array of zeroes; if you don't\
    \ need this intermediate array you can use the `array_reduce` method instead.\n\
    <|/ c |>\n<| a dscore=2 |>\nThis was my first solution after reading the comments.\n\
    <code>", "  $sum = 0;\n  if (!empty($lst)) {\n    foreach ($lst as $num) {\n \
    \     if (is_int($num) && $num % 2 == 1) {\n        $sum += $num;\n      }\n \
    \     elseif (is_int($num)) {\n        if ($num > 0) {\n          $sum += $num;\n\
    \        }\n      }\n    }\n  }\n  return $sum;\n}\n</code>\n<|/ a |>\n<| a dscore=3\
    \ tags=php |>\nThis is a PHP implementation of the Bellman Ford algorithm:\n<code>",
  "  return array_reduce($lst, function($sum, $val) {\n    return (is_int($val) &&\
    \ $val % 2) ? $sum + $val : $sum;\n  }, 0);\n}\n</code>\nThe key here is array_reduce()\
    \ which can do an arbitrary reduce operation like addition, subtraction, multiplication,\
    \ etc.\nThe array_filter() part is just there to make sure we filter out any non-integer\
    \ values from the array. This could be accomplished with array_filter() alone,\
    \ but I find this approach more readable for readability.\nThe array_map() part\
    \ is simply to transform the array to the form we need.\nThe array_sum() part\
    \ is just there to help us get the sum of all the values in $lst. PHP has an array_sum()\
    \ function, but we'll need to write our own.\nThe array_reduce() part is a way\
    \ to combine all of those different operations.\n<|/ a tags=php,arrays,if-statement\
    \ |>\n<| c |>\nYou probably want `array_sum` as `array_reduce` will sum up all\
    \ the values, rather than the sum per value.\n<|/ c |>\n<| c |>\nYes, I probably\
    \ should have made that more explicit. I'll update the answer.\n<|/ c |>\n<| a\
    \ tags=php,arrays,if-statement |>\n<code>\n<?php", "    $sum = 0;\n    foreach\
    \ ($lst as $element) {\n        if (is_numeric($element) && $element >= 0) {\n\
    \            $sum += pow($element, 2);\n        }\n    }\n\n    if ($sum == 0)\
    \ {\n        return 0;\n    }\n\n    return $sum;\n}\n</code>\n<|/ a |>\n<| c\
    \ |>\nThank you! I love it when you tell a man to code on his own :-). Just to\
    \ understand, I did it with an array_walk(): array_walk($lst, function(&$item,\
    \ $key, $lst) { if (is_numeric($item) && $item >= 0) { $item = $item * $item;\
    \ }}); Am I missing something?\n<|/ c |>\n<| c |>\nYou don't need array_walk,\
    \ but you need foreach :-)\n<|/ c |>\n<| c |>\nThanks. I wanted to learn by trying\
    \ so I did that. :-)\n<|/ c |>\n<| c |>\nBtw, I noticed that your \"double_the_difference\"\
    \ function returns the same result as the \"array_filter\" function. I was expecting\
    \ \"double_the_difference\" to return an array with \"-1\", \"-2\", and \"9\"\
    \ in the resulting array. Is that because of the \"array_filter\" function? If\
    \ so, I was expecting your \"double_the_difference\" to return an array with \"\
    -1\", \"-2\", and \"9\", and \"0\" in the resulting array. Is there a way to change\
    \ the \"array_filter\" function to do the latter so that it returns an array with\
    \ \"-1\", \"-2\", and \"9\", and \"0\"?\n<|/ c |>\n<| c |>\nSorry, I meant to\
    \ say \"array_walk\" rather than \"array_filter\".\n<|/ c |>\n<| a dscore=0 tags=php,arrays,math\
    \ |>\nIn order to find all the numbers that are odd, you can use the array_filter\
    \ function like this:\n<code>\n$numbers = array(1, 2, 3, 4, 5);\n\n$result = array_filter($numbers,\
    \ function($element) use ($numbers) {\n    return $element % 2 !== 0;\n});\n</code>\n\
    This will give you:\n<code>\narray(2, 4, 6)\n</code>\n<|/ a |>\n<| a tags=php,arrays,math\
    \ |>\nThe simplest way to achieve this would be using a simple foreach loop.\n\
    <code>\n$myArray = [1, 2, 3, 4];\n$myResult = [];\nforeach ($myArray as $element)\
    \ {\n    if ($element % 2 != 0) {\n        $myResult[] = $element;\n    }\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "  $sum = 0;\n  $neg =\
    \ 1;\n  foreach($lst as $num) {\n    if($num < 0) {\n      $neg *= -1;\n    }\
    \ else {\n      $sum += $num * $num;\n    }\n  }\n  return $neg * $sum;\n}", " \
    \ $sum = 0;\n  foreach ($lst as $num) {\n    if ($num < 0)\n      return 0;\n\
    \    else if ($num % 2 != 0)\n      $sum += $num * $num;\n  }\n  return $sum;\n\
    }\n", "  return array_reduce(\n    $lst,\n    function ($result, $value) {\n \
    \     if ($value < 0) {\n        return $result;\n      }\n      return $result\
    \ + pow(2, $value - 1);\n    },\n    0\n  );\n}", "    $sum = 0;\n    $n = count($lst);\n\
    \    $n = is_integer($n) ? $n : 1;\n    for($i = 0; $i < $n; $i++) {\n       \
    \ $sum += pow(2, $i);\n    }\n    return $sum;\n}\n</code>\n<|/ a tags=php,algorithm\
    \ |>\n<| a tags=php,algorithm |>\nAs the others said, this can be solved iteratively\
    \ or recursively.\nIt might be interesting to see how a recursive solution performs\
    \ on a huge input array (but beware: this will blow PHP's recursion limit).\n\
    I did some tests to demonstrate the performance (on a large input array):\n<code>\n\
    input size: 42978 \n  iterative: 0.0439 s\n  recursive: 0.1268 s\n</code>\nSo\
    \ here's my solution, using recursion:\n<code>", "    foreach ($lst as $num) {\n\
    \        if ($num < 0) {\n            $num *= -1;\n        }\n\n        if (!is_int($num))\
    \ {\n            throw new InvalidArgumentException(\n                'Array values\
    \ must be integers. ' . print_r($lst, 1)\n            );\n        }\n    }\n\n\
    \    return array_sum(array_map(\n        function ($num) {\n            return\
    \ $num * $num;\n        },\n        $lst\n    ));\n}\n</code>\n<|/ a dscore=0\
    \ tags=php |>\n<| c |>\ni tried this but i got this error \nPHP Fatal error: \
    \ Uncaught exception 'InvalidArgumentException' with message 'Array values must\
    \ be integers. Array' in /home/a3272272/public_html/demo/functions.php:12\nStack\
    \ trace:", "    return array_sum(array_filter(array_map(function($number) {\n\
    \        return $number == (int)$number * $number;\n    }, $lst)));\n}", "  if\
    \ (!empty($lst)) {\n    $result = 0;\n    foreach ($lst as $n) {\n      if ($n\
    \ % 2 == 1) {\n        $result -= $n;\n      } else {\n        $result += $n;\n\
    \      }\n    }\n    return $result;\n  }\n  return 0;\n}", "    $sum = 0;\n \
    \   foreach($lst as $num) {\n        if ($num instanceof Int) {\n            $sum\
    \ += $num;\n        } elseif ($num < 0) {\n            $sum += 0;\n        } else\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n",
  "  $sum = 0;\n  $count = 0;\n  foreach ($lst as $x) {\n    $count += $x;\n    if\
    \ ($count % 2 != 0) {\n      $sum += $x * $x;\n    }\n  }\n  return $sum;\n}\n\
    </code>\n<|/ a tags=php dscore=2 |>\n<| c |>\nThis answer is incorrect, if the\
    \ array is empty it returns `0`, not a negative result.\n<|/ c |>\n<| c |>\nI\
    \ noticed this too, I edited my answer to reflect that.\n<|/ c |>\n<| c |>\nI\
    \ updated my answer with two solutions, one that uses a for loop and another that\
    \ uses array_reduce. I think the array_reduce version was easier to understand.\
    \ Hopefully it makes sense. Cheers.\n<|/ c |>\n<| c |>\nThis solution is awesome!\
    \ You made me learn something new about array reduce. Thank you!\n<|/ c |>\n<|\
    \ c |>\nYou are welcome. Hope it makes sense to you!\n<|/ c |>\n<| a |>\nYou could\
    \ use array_reduce:\n<code>\narray_reduce($numbers, function($carry, $number)\
    \ {\n    return $carry + $number*$number;\n});\n</code>\nDemo.\n<|/ a tags=php\
    \ dscore=2 |>\n<| c |>\nThis is the solution that I came up with as well. My answer\
    \ was incorrect. I'll keep this in mind for future reference.\n<|/ c |>\n<| c\
    \ |>\nYes, that's right, I overlooked that they wanted to ignore negative numbers\
    \ and just sum all positive numbers.\n<|/ c |>\n<| c |>\nI updated my answer with\
    \ a solution using `array_reduce`\n<|/ c |>\n<| a tags=php |>\nThis should do\
    \ the trick:\n<code>\n$numbers = array(1,3,5,7,5,7,9,8,8);\n$sum = 0;\nforeach($numbers\
    \ as $number){\n    if($number%2 != 0){\n        $sum += $number * $number;\n\
    \    }\n}\n\necho $sum;\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI updated my answer\
    \ with a solution using `array_reduce`\n<|/ c |>\n<| a tags=php |>\nThis code\
    \ will do the trick :\n<code>\n$numbers = array(1,3,5,7,5,7,9,8,8);\n$sum = 0;\n\
    foreach($numbers as $number){\n    if($number%2 != 0){\n        $sum += $number\
    \ * $number;\n    }", "  $sum = 0;\n  foreach ($lst as $item) {\n    if ($item\
    \ < 0) {\n      $sum -= $item;\n    } else {\n      $sum += $item;\n    }\n  }\n\
    \  return $sum;\n}\n\n/**\n * Given an array of numbers, return the sum of squares\
    \ of the numbers\n * in the array that are even. Ignore numbers that are negative\
    \ or\n * not integers.\n * >>> even_the_difference(array(1, 3, 2, 0))", "  if\
    \ (empty($lst)) return 0;\n  // >>> double_the_difference([6, 5, 5])\n  // 36\n\
    \  // >>> double_the_difference([6, 5, 5])\n  // 36\n  // >>> double_the_difference([6,\
    \ 5, 5])\n  // 36\n  $sum = 0;\n  for ($i=0; $i<count($lst); $i++) {\n    if ($lst[$i]\
    \ % 2 == 1) $sum += $lst[$i]*$lst[$i];\n  }\n  return $sum;\n}\n", "    $sum =\
    \ 0;\n    foreach($lst as $x) {\n        if ($x % 2 == 1) {\n            $sum\
    \ += $x;\n        }\n    }\n    return $sum;\n}\n</code>\n<|/ a dscore=0 tags=php,arrays,function\
    \ |>\n<| a tags=php,arrays,function |>\nAnother short one-liner function for the\
    \ same -\n<code>", "    foreach ($lst as $value) {\n        $square = $value *\
    \ $value;\n        if ($square % 2 == 1 && $square != 0) {\n            return\
    \ $square;\n        }\n    }\n    return 0;\n}\n", "  foreach ($lst as $val) {\n\
    \    // If the number is positive, add it to the sum.\n    if ($val >= 0) {\n\
    \      $sum += $val;\n      // If the number is odd, double the sum and add it\
    \ to the sum.\n    } else if ($val % 2 != 0) {\n      $sum *= 2;\n      $sum +=\
    \ $val;\n    }\n  }\n\n  // If the input array is empty, return 0.\n  return $sum\
    \ > 0 ? $sum : 0;\n}\n</code>\nThe above function takes an array as input, and\
    \ returns the sum of squared values from the array that are odd. A negative number\
    \ or non-integer values will be ignored.\n<|/ a tags=algorithm,php,math dscore=4\
    \ |>\n<| c |>\nThis one is O(sqrt(n)) instead of O(n) but still the best one so\
    \ far\n<|/ c |>\n<| c |>\nI'm getting an error: Undefined variable: sum in line\
    \ 16\n<|/ c |>\n<| c |>\nIt looks like you used the name $sum for your variable\
    \ instead of $sum = 0, but then used the $sum variable in the loop instead of\
    \ $sum, which will fail.\n<|/ c |>\n<| a dscore=4 |>\nThe general approach to\
    \ solving this problem is a bit more involved than some of the other solutions\
    \ here posted. The key thing to note is that you need an algorithm to work out\
    \ if your number is even or odd. This can be done in O(1) time with a bitwise\
    \ mask. You can even use the fact that all even numbers are odd and all odd numbers\
    \ are even, i.e.:\n<code>\ndef odd(n):\n    return n & 1\n\ndef even(n):\n   \
    \ return not n & 1\n</code>\nThe above functions return true and false respectively.\
    \ So now you just need to work out if the sum of the squares of even numbers is\
    \ odd, and the sum of the squares of odd numbers is even, and do the appropriate\
    \ subtraction.\nThis should be fairly trivial if you have some experience with\
    \ bitwise operators, bit shifting and bit masking but if you don't, you may find\
    \ it helpful to read up on them here. Here's how I might go about this in PHP:\n\
    <code>", "    $sum = 0;\n    foreach ($lst as $val) {\n        if ($val < 0) {\n\
    \            continue;\n        }\n        if ($val % 2) {\n            $sum +=\
    \ $val;\n        } else {\n            $sum -= $val;\n        }\n    }\n    return\
    \ $sum;\n}\n</code>\nThe above solution can be improved by first calculating the\
    \ total of squares of numbers that are less than the number to be ignored and\
    \ then subtracting out the number of such numbers in the array (that would be\
    \ even numbers). In the end, the number of even numbers is the total of squares\
    \ of numbers in the array that are less than the number to be ignored, plus one.\n\
    <code>\n<?php", "  if (count($lst) === 0) {\n    return 0;\n  }\n  $sum = 0;\n\
    \  for ($i = 0; $i < count($lst); $i += 2) {\n    $sum += $lst[$i];\n  }\n  return\
    \ $sum;\n}\n</code>\n<|/ a tags=php,arrays,algorithm |>\n<| a tags=php,arrays,algorithm\
    \ |>\nThe only thing that needs to be changed is the part where you check if the\
    \ sum is even or not.\nIf the sum is even, don't add to it, but if it is odd,\
    \ then add to the sum but subtract from it.\n<|/ a dscore=1 |>\n<| a tags=php,arrays,algorithm\
    \ |>\nOne more solution with two for loops and one if condition statement:\n<code>\n\
    <?php", "    $sum = 0;\n    $len = count($lst);\n    for($i = 0; $i < $len; $i++)\
    \ {\n        if ($lst[$i] < 0) {\n            continue;\n        }\n        $sum\
    \ += $lst[$i] * $lst[$i];\n    }\n    return $sum;\n}\n</code>\n<|/ a tags=php,arrays,algorithm\
    \ |>\n<| a dscore=2 |>\n<code>", "    foreach ($lst as $i => $num) {\n       \
    \ if (!is_int($num) || $num < 0) {\n            unset($lst[$i]);\n        }\n\
    \    }\n    return array_sum(array_map(function ($num) {\n        return $num\
    \ * $num;\n    }, $lst));\n}\n", "    if (empty($lst)) {\n        return 0;\n\
    \    }\n    $sum = 0;\n    $len = count($lst);\n    $max_val = max($lst);\n  \
    \  foreach ($lst as $val) {\n        if ($val < 0 || $val != (int)$val) {\n  \
    \          throw new Exception('Bad input: array contains non-integers');\n  \
    \      }\n        $sum += pow($val, $len);\n    }\n    return $sum * $max_val;\n\
    }\n</code>\nOutput:\n<code>\nRunning in terminal...\n[..] Waiting for signal...\n\
    [..]\n[..]\n[..] \n[..]\n[..] \n[..]\n[..]\n[..] \n[..]\n[..]\n[..] \n[..]\n[..]\n\
    [..]\n[..] \n[..]\n[..]\n[..]\n[..]\n[..] \n[..]\n[..]\n[..]\n[..] \n[..]\n[..]\n\
    [..]\n[..]\n[..] \n[..]\n[..]\n[..]\n[..]\n[..]\n[..]\n[..] \n[..]\n[..]\n[..]\n\
    [..]\n[..]\n[..]\n[..] \n[..]\n[..]\n[..]\n[..]\n[..]\n[..]\n[..]\n[..] \n[..]\n\
    [..]\n[..]\n[..]\n[..]\n[..]\n[..]\n[..]\n[..] \n[..]\n[..]\n[..]\n[..]\n[..]\n\
    [..]\n[..]\n[..]\n[..]\n[..]\n[..] \n[..]\n[..]\n[..]\n[..]\n[..]\n[..]\n[..]\n\
    [..]\n[..]\n[..] \n[..]\n[..]\n[..]\n[..]\n[..]\n[..]\n[..]\n[..]\n[..]\n[..]\n\
    [..] \n[..]\n[..]\n[..]\n[..]\n[..]\n[..]\n[..]\n[..]\n[..]\n[..] \n", "  foreach\
    \ ($lst as $x) { if ($x<0 || is_integer($x)) return 0; }\n  return array_sum(array_map(function\
    \ ($x) { return ($x*$x);}, $lst));\n}\n", "    $sum = 0;\n    foreach ($lst as\
    \ $val) {\n        if (is_numeric($val) && $val != 0) {\n            $sum += $val\
    \ * $val;\n        }\n        if (is_numeric($val) && $val < 0) {\n          \
    \  $sum -= $val * $val;\n        }\n    }\n    return $sum;\n}", "  if (empty($lst))\
    \ {\n    return 0;\n  }\n  $sum = 0;\n  for ($i = 0; $i < count($lst); $i++) {\n\
    \    $sum += $lst[$i] * $lst[$i];\n    if ($i % 2 == 1) {\n      $sum -= 2 * $lst[$i];\n\
    \    }\n  }\n  return $sum;\n}\n</code>\nI suppose your teacher wants you to implement\
    \ a function in PHP to find even numbers in this array. Your teacher probably\
    \ wants you to implement a function in PHP to find odd numbers in this array.\n\
    <code>\n<?php", "  if (empty($lst)) {\n    return 0;\n  }\n  foreach ($lst as\
    \ $n) {\n    if ($n%2 !== 1) {\n      continue;\n    }\n    $squared = $n*$n;\n\
    \    if ($n<0) {\n      $squared = -$squared;\n    }\n    return $squared + $squared;\n\
    \  }\n  return 0;\n}", "  if (empty($lst))\n    return 0;\n  else {\n    $sum\
    \ = 0;\n    $odd = false;\n    foreach ($lst as $item) {\n      $sum = ($sum *\
    \ $sum) + ($item * $item);\n      if ($odd != ($item & 1))\n        $odd = ($item\
    \ & 1);\n    }\n    return $sum;\n  }\n}\n</code>\n<|/ a dscore=0 tags=php,arrays,algorithm\
    \ |>\n<| c |>\ni don't think this is correct. i think the question is to find\
    \ the sum of squares whereby elements that are odd are removed. your code is calculating\
    \ the sum of squares, not removing the odd elements from an array.\n<|/ c |>\n\
    <| c |>\n- I don't believe that the question was to find the sum of squares and\
    \ remove odd numbers.  I think they were looking to find and remove elements from\
    \ a list.  I posted my answer because there was no \"accepted answer\" when I\
    \ posted the comment.\n<|/ c |>\n<| c |>\nThis doesn't answer the question (the\
    \ OP did not ask for the sum of squares; their code calculates the sum of squares\
    \ already), it just answers the question as posed (which isn't even what the OP\
    \ asked, I know).\n<|/ c |>\n<| c |>\n- I agree. I just posted the answer because\
    \ I believe it is what the OP intended since I thought the OP had written `double\
    \ the difference` in their original question (which they do not). After they clarify,\
    \ I will update the answer to better suit the question.\n<|/ c |>\n<| a |>\nHere\
    \ is a version using array_filter:\n<code>\n$a = array(0, 1, 2, 3, 4, 5);\n$b\
    \ = array(0, 1, 2, 3, 4, 5);\nvar_dump(array_filter($a, function ($val) use (&$b)\
    \ {\n    return !in_array($val, $b);\n}));\n</code>\nOutput\n<code>\narray(0)\
    \ {\n}\n</code>\nIf you don't want the array elements to be removed from the array\
    \ you pass in, you can make a copy first:\n<code>\n$c = $a;\n$c = array_filter($c,\
    \ function ($val) use (&$b) {\n    return !in_array($val, $b);\n});\nvar_dump($c);\n\
    </code>\nOutput\n<code>\narray(5) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(1)\n  [2]=>\n\
    \  int(2)\n  [3]=>\n  int(3)\n  [4]=>\n  int(4)\n}\n</code>\n<|/ a tags=php,arrays,algorithm\
    \ dscore=0 |>\n<| ", "  if (empty($lst)) {\n    return 0;\n  }\n  $sum = 0;\n\
    \  foreach ($lst as $num) {\n    if ($num < 0) {\n      continue;\n    }\n   \
    \ if (is_integer($num)) {\n      $sum = $sum * $num;\n    } else {\n      $sum\
    \ = $sum + $num * $num;\n    }\n  }\n  return $sum;\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis is amazing stuff. Thank you so much for explaining how it\
    \ works to me.\n<|/ c |>\n<| c |>\nI love this answer. But if anybody has tried\
    \ this code and is getting incorrect results, the cause may be that you're not\
    \ actually giving the function the array with the numbers, but the actual result\
    \ of an array_sum() operation, e.g. array_sum(array(1, 3, 2, 0)); or array_sum(array()).\
    \ Just something to keep in mind.\n<|/ c |>\n<| c |>\nI added some notes and a\
    \ link to more details about PHP arrays.\n<|/ c |>\n<| c |>\nThanks again, I really\
    \ appreciate it.\n<|/ c |>\n<| c |>\nCan you share your code? I am trying to get\
    \ the sum of even numbers and it is giving me a strange result. I am sure I am\
    \ missing something obvious.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n<?php"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
