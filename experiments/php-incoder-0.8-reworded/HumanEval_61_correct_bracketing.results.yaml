language: php
name: HumanEval_61_correct_bracketing
results:
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $open_brackets = count_brackets($brackets);\n  $closed_brackets = $open_brackets\
    \ - count_brackets($brackets, '(');\n  return ($closed_brackets == 0);\n}\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_brackets()\
    \ in /tmp/tmpesb3hdvo.php:13\nStack trace:\n#0 /tmp/tmpesb3hdvo.php(18): correct_bracketing('()')\n\
    #1 /tmp/tmpesb3hdvo.php(22): candidate('()')\n#2 /tmp/tmpesb3hdvo.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpesb3hdvo.php on line 13\n"
  timestamp: 1659978970
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $count = count($brackets);\n    for($i = 0; $i < $count; ++$i) {\n  \
    \      if ($brackets[$i] == \"(\") ++$count;\n        else if ($brackets[$i] ==\
    \ \")\") --$count;\n    }\n    return !$count;\n}\n</code>\n<|/ a dscore=3 tags=string,php,regex,parsing\
    \ |>\n<| c |>\n+1 This is the kind of solution I was thinking of when I posted\
    \ my answer.  I've added an alternative implementation that doesn't use regexes\
    \ which may or may not be simpler.\n<|/ c |>\n<| c |>\n+1 for the nice solution\
    \ but it could potentially be a little expensive, since it has to parse the string\
    \ twice.\n<|/ c |>\n<| a dscore=3 |>\nAs far as I can tell it can be done using\
    \ regexes, but they're not very flexible (at least as far as I can tell).  Here's\
    \ a version that uses a stack based algorithm to do the work.  It doesn't use\
    \ regexes because that's not very flexible.  It also doesn't require parsing the\
    \ string twice, because that's also not very flexible (the regexes have to match\
    \ the whole input string, which can be expensive for large strings).  It also\
    \ doesn't allow nested parentheses (parentheses are allowed in strings, so the\
    \ regexes can't count nested parentheses correctly).\nThe code below parses the\
    \ string two times.  First to find the number of opening/closing parentheses,\
    \ and second to find the starting and ending indices of each opening parentheses.\n\
    The code\n<code>\n<?php\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmppr8a37fz.php
    on line 20

    '
  timestamp: 1659978970
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  // Write your code here...\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp08quyork.php:26\n\
    Stack trace:\n#0 /tmp/tmp08quyork.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp08quyork.php\
    \ on line 26\n"
  timestamp: 1659978970
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    \n    // the brackets are an array\n    $brackets_array = array_map('trim',\
    \ explode(')', $brackets));\n    $count       = count($brackets_array);\n    \n\
    \    // initialize result as false\n    $result = false;\n    \n    // iterate\
    \ through array\n    for ($i = 0; $i < $count; $i++) {\n        \n        // check\
    \ if closing bracket exists\n        if (in_array($brackets[$i], $brackets_array))\
    \ {\n            $result = true;\n            break;\n        }\n    }\n    \n\
    \    // return result\n    return $result;\n}\n</code>\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpvo816uzd.php
    on line 34

    '
  timestamp: 1659978970
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  // Our algorithm for checking the bracketing here is the same as for\n\
    \  // checking parentheses, except that we check both opening and closing\n  //\
    \ brackets.\n  $open_brackets = $brackets;\n  $check = 0;\n  while (true) {\n\
    \    if ($open_brackets[0] == \"(\") {\n      if ($open_brackets[count($open_brackets)\
    \ - 1] != \")\")\n        break;\n    }\n    $check++;\n    $open_brackets = substr($open_brackets,\
    \ 1, -1);\n  }\n  return $check == count($brackets);\n}\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmp0q2b2m4x.php:20\nStack trace:\n\
    #0 /tmp/tmp0q2b2m4x.php(29): correct_bracketing('()')\n#1 /tmp/tmp0q2b2m4x.php(33):\
    \ candidate('()')\n#2 /tmp/tmp0q2b2m4x.php(47): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp0q2b2m4x.php on line 20\n"
  timestamp: 1659978970
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  // If the string doesn't contain any brackets then it must contain no brackets.\n\
    \  if ($brackets === '') {\n    return true;\n  }\n\n  $open_brackets = preg_match_all('/\\\
    ((.+?)\\)/', $brackets, $matches);\n\n  // If no brackets were found in the string\
    \ then it must contain no brackets.\n  if ($open_brackets !== 0) {\n    return\
    \ false;\n  }\n\n  // If a single opening bracket was found, there is no need\
    \ to check for a corresponding closing bracket.\n  if ($open_brackets === 1) {\n\
    \    return true;\n  }\n\n  // If two opening brackets were found, there is nothing\
    \ to correct.\n  if ($open_brackets === 2) {\n    return false;\n  }\n\n  // If\
    \ three or more opening brackets were found, there is nothing to correct.\n  if\
    \ ($open_brackets === 3) {\n    return false;\n  }\n\n  // If four opening brackets\
    \ were found, there is a chance that they are not paired correctly.\n  if ($open_brackets\
    \ > 3) {\n    return false;\n  }\n\n  // All brackets are correctly paired.\n\
    \  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2l84w_6k.php:55\n\
    Stack trace:\n#0 /tmp/tmp2l84w_6k.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp2l84w_6k.php\
    \ on line 55\n"
  timestamp: 1659978970
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n\tif (strpos($brackets, \"(\") === false || strpos($brackets, \")\") ===\
    \ false) {\n\t\treturn false;\n\t}\n\t$length = strlen($brackets);\n\t$i = 0;\
    \ // current position\n\twhile ($i < $length) {\n\t\tif ($brackets[$i] === '(')\
    \ {\n\t\t\t$i++;\n\t\t\twhile ($i < $length && $brackets[$i] !== '(') {\n\t\t\t\
    \t$i++;\n\t\t\t}\n\t\t\tif ($brackets[$i] !== ')') {\n\t\t\t\treturn false;\n\t\
    \t\t}\n\t\t} elseif ($brackets[$i] === ')') {\n\t\t\t$i++;\n\t\t\twhile ($i <\
    \ $length && $brackets[$i] !== '(') {\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\tif ($brackets[$i]\
    \ !== \"(\") {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t$i++;\n\t}\n\treturn\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Uninitialized string offset 2 in /tmp/tmp6ktgafl1.php on line\
    \ 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ktgafl1.php:46\n\
    Stack trace:\n#0 /tmp/tmp6ktgafl1.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp6ktgafl1.php\
    \ on line 46\n"
  timestamp: 1659978970
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $count = substr_count($brackets, '(');\n    if ($count < 3) return false;\n\
    \    for ($i = 0; $i < $count; $i++) {\n        $close = substr_count($brackets,\
    \ ')', $i);\n        if ($close < $count) return false;\n    }\n    return true;\n\
    }\n\n$a = array(\"a\" => \"b\", \"c\" => \"d\");\n$b = array(\"a\" => \"b\", \"\
    c\" => \"d\", \"e\" => \"f\");\n$c = array(\"a\" => \"b\", \"c\" => \"d\", \"\
    e\" => \"f\", \"g\" => \"h\", \"i\" => \"j\");\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_69kz_p3.php:31\n\
    Stack trace:\n#0 /tmp/tmp_69kz_p3.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp_69kz_p3.php\
    \ on line 31\n"
  timestamp: 1659978970
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n\treturn (preg_match(\"~^($brackets+)~\", $brackets) === 1) ? true : false;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: preg_match(): Compilation failed: unmatched closing parenthesis\
    \ at offset 12 in /tmp/tmp4h976_dx.php on line 13\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp4h976_dx.php:26\nStack trace:\n#0 /tmp/tmp4h976_dx.php(35):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4h976_dx.php on line 26\n"
  timestamp: 1659978970
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n\t$brackets_count = substr_count($brackets, \")\");\n\tfor ($i = 0; $i <\
    \ $brackets_count; $i++) {\n\t\tif ($brackets[$i] != \"(\") return false;\n\t\
    }\n\treturn true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa3t8isun.php:26\n\
    Stack trace:\n#0 /tmp/tmpa3t8isun.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpa3t8isun.php\
    \ on line 26\n"
  timestamp: 1659978970
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = str_replace(array(\"(\", \")\"), array(\"{\", \"}\"), $brackets);\n\
    \    $brackets = preg_replace(\"/({[^}]*})/\", \"{\\1}\", $brackets);\n    $brackets\
    \ = preg_replace(\"/\\(([^)]*)\\)/\", \"\\1\", $brackets);\n    return preg_match(\"\
    /{$brackets}/\", $brackets);\n}\n</code>\n<|/ a tags=php,regex dscore=2 |>\n<|\
    \ a dscore=1 |>\nTry this:\n<code>\n<?php\n\n$stringn\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpyw8464bs.php
    on line 18

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = strtolower($brackets);\n  $correct_bracket = false;\n  $open_brackets\
    \ = str_repeat(\"$\", strlen($brackets)); //the repeat creates a string of \"\
    x\"\n\n  for ($i = 0; $i < strlen($brackets); $i++) {\n    $open_brackets[$i]\
    \ = $brackets[$i];\n  }\n  for ($i = 0; $i < strlen($brackets); $i++) {\n    if\
    \ ($brackets[$i] == $open_brackets[$i]) { //if bracket[$i] == brackets[$i-1]\n\
    \      $open_brackets = substr($open_brackets, 0, $i); //truncate the $brackets\
    \ string to contain everything before brackets[$i]\n      $correct_bracket = true;\n\
    \    }\n  }\n  return $correct_bracket;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Warning: Uninitialized string offset 1 in /tmp/tmpm4ipe_ut.php on line 21


    Warning: Uninitialized string offset 1 in /tmp/tmpm4ipe_ut.php on line 21


    Warning: Uninitialized string offset 2 in /tmp/tmpm4ipe_ut.php on line 21


    Warning: Uninitialized string offset 3 in /tmp/tmpm4ipe_ut.php on line 21


    Warning: Uninitialized string offset 4 in /tmp/tmpm4ipe_ut.php on line 21


    Warning: Uninitialized string offset 5 in /tmp/tmpm4ipe_ut.php on line 21


    Warning: Uninitialized string offset 1 in /tmp/tmpm4ipe_ut.php on line 21


    Warning: Uninitialized string offset 2 in /tmp/tmpm4ipe_ut.php on line 21


    Warning: Uninitialized string offset 3 in /tmp/tmpm4ipe_ut.php on line 21


    Warning: Uninitialized string offset 4 in /tmp/tmpm4ipe_ut.php on line 21


    Warning: Uninitialized string offset 5 in /tmp/tmpm4ipe_ut.php on line 21


    Warning: Uninitialized string offset 6 in /tmp/tmpm4ipe_ut.php on line 21


    Warning: Uninitialized string offset 7 in /tmp/tmpm4ipe_ut.php on line 21


    Warning: Uninitialized string offset 8 in /tmp/tmpm4ipe_ut.php on line 21


    Warning: Uninitialized string offset 9 in /tmp/tmpm4ipe_ut.php on line 21


    Warning: Uninitialized string offset 10 in /tmp/tmpm4ipe_ut.php on line 21


    Warning: Uninitialized string offset 11 in /tmp/tmpm4ipe_ut.php on line 21


    Warning: Uninitialized string offset 1 in /tmp/tmpm4ipe_ut.php on line 21


    Warning: Uninitialized string offset 2 in /tmp/tmpm4ipe_ut.php on line 21


    Warning: Uninitialized string offset 3 in /tmp/tmpm4ipe_ut.php on line 21


    Warning: Uninitialized string offset 4 in /tmp/tmpm4ipe_ut.php on line 21


    Warning: Uninitialized string offset 5 in /tmp/tmpm4ipe_ut.php on line 21


    Warning: Uninitialized string offset 6 in /tmp/tmpm4ipe_ut.php on line 21


    Warning: Uninitialized string offset 7 in /tmp/tmpm4ipe_ut.php on line 21


    Warning: Uninitialized string offset 8 in /tmp/tmpm4ipe_ut.php on line 21


    Warning: Uninitialized string offset 9 in /tmp/tmpm4ipe_ut.php on line 21


    Warning: Uninitialized string offset 10 in /tmp/tmpm4ipe_ut.php on line 21


    Warning: Uninitiali'
  timestamp: 1659978970
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(',', $brackets);\n    $stack = array();\n    foreach\
    \ ($brackets as $b) {\n        if ($b === '(') {\n            $stack[] = $b;\n\
    \        } else if ($b === ')') {\n            if (!empty($stack)) {\n       \
    \         return false;\n            }\n        } else {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\n\
    What if one bracket is missing ?\n<|/ c |>\n<| a tags=arrays,php,string |>\nThis\
    \ works well for me:\n<code>\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpef_66_is.php
    on line 28

    '
  timestamp: 1659978970
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  list($opening_brackets, $closing_brackets) = preg_split('/[\\(\\)]/', $brackets);\n\
    \  return !empty($opening_brackets) && !empty($closing_brackets);\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaawcjfi6.php:22\n\
    Stack trace:\n#0 /tmp/tmpaawcjfi6.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpaawcjfi6.php\
    \ on line 22\n"
  timestamp: 1659978970
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  for ($i = 0; $i < strlen($brackets); $i++) {\n    $bracket_char = substr($brackets,\
    \ $i, 1);\n    if ($bracket_char == '(' || $bracket_char == ')') {\n      if ($brackets[$i\
    \ + 1] != $bracket_char) {\n        return false;\n      }\n    }\n  }\n  return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph03r16vf.php:29\n\
    Stack trace:\n#0 /tmp/tmph03r16vf.php(43): test()\n#1 {main}\n  thrown in /tmp/tmph03r16vf.php\
    \ on line 29\n"
  timestamp: 1659978970
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  return (strlen($brackets) % 2 === 0)\n    ? preg_match('/\\([^\\)]*\\)/',\
    \ $brackets)\n    : strlen($brackets) === 1\n      ? preg_match('/\\([^\\)]*\\\
    )/', $brackets)\n      : preg_match('/\\([^\\)]*\\)/', $brackets) && preg_match('/\\\
    [[^\\)]*\\]/', $brackets);\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Unparenthesized `a ? b : c ? d : e` is not supported. Use either
    `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmp82xy3cpv.php on line
    13

    '
  timestamp: 1659978970
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    // Count open brackets\n    $open_brackets = substr_count($brackets,\
    \ '(');\n    // If there are open brackets, check if there are closing brackets\n\
    \    if ($open_brackets > 0) {\n        // Get the string without the first character\
    \ (which would be \"(\" for the above example).\n        $first_bracket = substr($brackets,\
    \ 0, 1);\n        // Count close brackets\n        $close_brackets = substr_count($brackets,\
    \ ')');\n        // If there are close brackets, check if the closing brackets\
    \ match\n        if ($close_brackets > 0 && $close_brackets == $open_brackets)\
    \ {\n            // If the closing brackets match, return true\n            return\
    \ true;\n        }\n        // If there are not both an open and close brackets,\
    \ return false\n    }\n    // If there are no brackets, return false\n    return\
    \ false;\n}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvdufcuv5.php:41\n\
    Stack trace:\n#0 /tmp/tmpvdufcuv5.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpvdufcuv5.php\
    \ on line 41\n"
  timestamp: 1659978970
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n   $brackets = preg_replace(\"!([()])!\", \"\\\\1\", $brackets);\n   return\
    \ ($brackets == \"()\");\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi2x2zqyw.php:23\n\
    Stack trace:\n#0 /tmp/tmpi2x2zqyw.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpi2x2zqyw.php\
    \ on line 23\n"
  timestamp: 1659978970
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  return preg_replace('/\\(\\)/', '', $brackets) === preg_replace('/\\)\\\
    )/', '', $brackets);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=regex,php |>\n\
    I made this function that checks for brackets:\n<code>\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpbtornhad.php
    on line 15

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\",\", $brackets);\n  foreach ($brackets as $bracket)\
    \ {\n    if (!in_array($bracket[0], $brackets)) return true;\n  }\n  return false;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7eg5u46r.php:29\n\
    Stack trace:\n#0 /tmp/tmp7eg5u46r.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp7eg5u46r.php\
    \ on line 29\n"
  timestamp: 1659978970
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = explode(\"(\", $brackets);\n  for ($i = 0; $i < count($opening_brackets);\
    \ ++$i) {\n    if ($opening_brackets[$i] === $opening_brackets[$i - 1]) {\n  \
    \    return false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key -1 in /tmp/tmpsn31owhj.php on line 15\n\n\
    Warning: Undefined array key -1 in /tmp/tmpsn31owhj.php on line 15\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpsn31owhj.php:28\nStack trace:\n\
    #0 /tmp/tmpsn31owhj.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpsn31owhj.php\
    \ on line 28\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = str_replace(\")\", \"\", $brackets);\n  $brackets = str_replace(\"\
    (\", \"-\", $brackets);\n  $brackets = str_replace(\"-)\", \"-)\", $brackets);\n\
    \  return (str_repeat(\")\", strlen($brackets)) === $brackets);\n}\n</code>\n\
    <|/ a tags=brackets,string,php |>\n<| c |>\nNice! but what about `]` ?\n<|/ c\
    \ |>\n<| c |>\nThe OP asked to check for `\"()\"`. The function I gave only checks\
    \ for `\"()[]{}\"`. Any other combinations are just invalid.\n<|/ c |>\n<| c |>\n\
    This answer is perfect in PHP5.3 and above only!\n<|/ c |>\n<| c |>\n: I suggest\
    \ you look up what `str_replace()` does. It does replace all instances. So the\
    \ above code will turn `[...]` into `-...-` so it will only match one bracket\
    \ at a time.\n<|/ c |>\n<| a |>\nThis is a good use for a regular expression.\
    \  Something like this should work but it's just a quick example and not tested\
    \ and may have some errors.\n<code>\n$brackets = preg_replace('/(^|.)(\\))(\\\
    .|$)/', '$2-$3', $brackets);\n</code>\n<|/ a dscore=4 tags=brackets,string,php\
    \ |>\n<| c |>\nThanks for that. Was just looking for something like this.\n<|/\
    \ c |>\n<| c |>\n: What about `]` and `(]` and `[)`?\n<|/ c |>\n<| c |>\nHaha\
    \ good point. Didn't think of that one though :)\n<|/ c |>\n<| a dscore=3 |>\n\
    The answers above didn't cover all scenarios. It also didn't cover any brackets\
    \ such as ( [ and [{ so I thought I would share this one for those who need it.\n\
    <code>\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpi9uixcug.php
    on line 18

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n\t$brackets = trim($brackets);\n\t\n\tif ($brackets == '')\n\t\treturn false;\n\
    \t\n\tfor ($i = 0, $count = strlen($brackets); $i < $count; $i++) {\n\t\t$char\
    \ = substr($brackets, $i, 1);\n\t\tif ($char == '(')\n\t\t\t$open_brackets++;\n\
    \t\telse if ($char == ')')\n\t\t\t$open_brackets--;\n\t}\n\t\n\treturn ($open_brackets\
    \ == 0);\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $open_brackets in /tmp/tmpqeq9_w6w.php on\
    \ line 21\n\nWarning: Undefined variable $open_brackets in /tmp/tmpqeq9_w6w.php\
    \ on line 21\n\nWarning: Undefined variable $open_brackets in /tmp/tmpqeq9_w6w.php\
    \ on line 21\n\nWarning: Undefined variable $open_brackets in /tmp/tmpqeq9_w6w.php\
    \ on line 21\n\nWarning: Undefined variable $open_brackets in /tmp/tmpqeq9_w6w.php\
    \ on line 21\n\nWarning: Undefined variable $open_brackets in /tmp/tmpqeq9_w6w.php\
    \ on line 23\n\nWarning: Undefined variable $open_brackets in /tmp/tmpqeq9_w6w.php\
    \ on line 21\n\nWarning: Undefined variable $open_brackets in /tmp/tmpqeq9_w6w.php\
    \ on line 21\n\nWarning: Undefined variable $open_brackets in /tmp/tmpqeq9_w6w.php\
    \ on line 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqeq9_w6w.php:42\n\
    Stack trace:\n#0 /tmp/tmpqeq9_w6w.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpqeq9_w6w.php\
    \ on line 42\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    if ($brackets === '()') return true;\n    if (substr($brackets, 0, 1)\
    \ === '(') return true;\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5cpuukg6.php:27\n\
    Stack trace:\n#0 /tmp/tmp5cpuukg6.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5cpuukg6.php\
    \ on line 27\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n\t$brackets = preg_replace('/[^()]+/', '', $brackets);\n\treturn $brackets\
    \ == '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7hba8f8e.php:23\n\
    Stack trace:\n#0 /tmp/tmp7hba8f8e.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp7hba8f8e.php\
    \ on line 23\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach(preg_split(\"\
    /[\\(\\)]/\", $brackets) as $bracket) {\n    if (substr($bracket, 0, 1) == \"\
    (\") $opening_brackets[] = $bracket;\n    if (substr($bracket, -1) == \")\") $closing_brackets[]\
    \ = $bracket;\n  }\n  foreach ($opening_brackets as $opening_bracket => $closing_bracket)\
    \ {\n    // if the opening bracket is never closed, then its not correct.\n  \
    \  // if the closing bracket is never opened, its not correct.\n    if (empty($closing_brackets[$opening_bracket])\
    \ || empty($opening_brackets[$closing_bracket])) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl2zg9pe7.php:38\n\
    Stack trace:\n#0 /tmp/tmpl2zg9pe7.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpl2zg9pe7.php\
    \ on line 38\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    if ($brackets != \"\")\n    {\n        $brackets_array = explode(\" \"\
    , $brackets);\n        $correct_bracketing = true;\n        $num_opening_brackets_found\
    \ = 0;\n        $num_closing_brackets_found = 0;\n        $first = true;\n   \
    \     foreach($brackets_array as $bracket)\n        {\n            $num_opening_brackets_found\
    \ += strpos(\"({[\", $bracket);\n            $num_closing_brackets_found += strpos(\"\
    )]}\", $bracket);\n        }\n\n        // if the number of brackets found is\
    \ not equal\n        // to the number of opening brackets + number of\n      \
    \  // closing brackets, then it isn't correct.\n        if ($num_opening_brackets_found\
    \ != $num_closing_brackets_found)\n        {\n            $correct_bracketing\
    \ = false;\n        }\n\n        // if the number of brackets found is equal\n\
    \        // to the number of opening brackets + number of\n        // closing\
    \ brackets, then it isn't correct.\n        elseif ($num_opening_brackets_found\
    \ == $num_closing_brackets_found)\n        {\n            if ($first)\n      \
    \      {\n                $first = false;\n            }\n            else\n \
    \           {\n                if ($brackets_array[$num_opening_brackets_found\
    \ + 1] == \"()\")\n                {\n                    // if the next closing\
    \ bracket is also a closing\n                    // bracket, then it isn't correct.\n\
    \                    if ($brackets_array[$num_closing_brackets_found + 1] == \"\
    ()\")\n                    {\n                        $correct_bracketing = false;\n\
    \                    }\n                }\n            }\n        }\n\n      \
    \  // if the brackets found is not equal to the number\n        // of opening\
    \ brackets + number of closing brackets,\n        // then it isn't correct.\n\
    \        elseif ($num_opening_brackets_found != $num_closing_brackets_found)\n\
    \        {\n            $correct_bracketing = false;\n        }\n\n        if\
    \ ($correct_bracketing)\n        {\n            return true;\n        }\n    \
    \    else\n        {\n            return false;\n        }\n    }\n    else\n\
    \    {\n        return false;\n    }\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiwcqlcrn.php:89\n\
    Stack trace:\n#0 /tmp/tmpiwcqlcrn.php(99): test()\n#1 {main}\n  thrown in /tmp/tmpiwcqlcrn.php\
    \ on line 89\n"
  timestamp: 1659978970
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    // write your code here\n    if($brackets[0] != \"(\" && $brackets[count($brackets)\
    \ - 1] != \")\")\n        return false;\n    for($i = 1; $i < count($brackets);\
    \ $i++)\n        if($brackets[$i] == \"(\" && $brackets[$i - 1] == \")\")\n  \
    \          return false;\n    return true;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a |>\nHere is a recursive solution that will test the brackets for your test\
    \ cases:\n<code>\npublic function checkBrackets($string)\n{\n    if (!$string)\
    \ {\n        return true;\n    }\n    if (strlen($string) < 3) {\n        return\
    \ false;\n    }\n\n    if ($string[0] == \"(\" && $string[strlen($string) - 1]\
    \ == \")\") {\n        return checkBrackets(substr($string, 1, strlen($string)\
    \ - 2));\n    }\n    if ($string[0] == \")\" && $string[strlen($string) - 1] ==\
    \ \"(\") {\n        return checkBrackets(substr($string, 1, strlen($string) -\
    \ 2));\n    }\n    if ($string[0] == \"(\" && $string[1] == \")\") {\n       \
    \ return checkBrackets(substr($string, 2));\n    }\n    if ($string[0] == \")\"\
    \ && $string[1] == \")\") {\n        return checkBrackets(substr($string, 2));\n\
    \    }\n    return false;\n}\n</code>\n<|/ a dscore=0 tags=string,function,php,recursion\
    \ |>\n<| a tags=string,function,php,recursion |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp9qowosup.php
    on line 21

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  for ($i = 0; $i < strlen($brackets); ++$i) {\n    if ($brackets[$i] !==\
    \ \"(\") return false;\n  }\n  return true;\n}\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwkuotgfe.php:23\n\
    Stack trace:\n#0 /tmp/tmpwkuotgfe.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpwkuotgfe.php\
    \ on line 23\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"(\", $brackets);\n  $brackets = array_pop($brackets);\n\
    \  $brackets = array_pop($brackets);\n  $brackets = array_pop($brackets);\n  \n\
    \  foreach ($brackets as $b) {\n    if ($b !== \"(\") {\n      return false;\n\
    \    }\n  }\n  \n  return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_pop(): Argument #1 ($array) must\
    \ be of type array, string given in /tmp/tmpl760vqh0.php:15\nStack trace:\n#0\
    \ /tmp/tmpl760vqh0.php(15): array_pop(')')\n#1 /tmp/tmpl760vqh0.php(28): correct_bracketing(')')\n\
    #2 /tmp/tmpl760vqh0.php(32): candidate('()')\n#3 /tmp/tmpl760vqh0.php(46): test()\n\
    #4 {main}\n  thrown in /tmp/tmpl760vqh0.php on line 15\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/[\\(\\)]/', '', $brackets);\n    $brackets\
    \ = explode(',', $brackets);\n    return count($brackets) == count(array_unique($brackets));\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfdbk5s25.php:27\n\
    Stack trace:\n#0 /tmp/tmpfdbk5s25.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpfdbk5s25.php\
    \ on line 27\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n\t$stack = array();\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\t\
    $char = substr($brackets, $i, 1);\n\t\tif ($char === '(') {\n\t\t\tif (count($stack)\
    \ < 1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$stack[$stack_key] = $char;\n\t\
    \t} elseif ($char === ')') {\n\t\t\tif (count($stack) <= 1) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\t$last = array_pop($stack);\n\t\t\tif ($last !== '(')\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} elseif ($char === ' ') {\n\t\t\t$space\
    \ = strpos($brackets, ' ', $i);\n\t\t\tif ($space !== false) {\n\t\t\t\t$space++;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count($stack) === 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt_zzdg_v.php:44\n\
    Stack trace:\n#0 /tmp/tmpt_zzdg_v.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpt_zzdg_v.php\
    \ on line 44\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  for ($i = 0; $i < strlen($brackets); $i++) {\n    $stack[] = $brackets[$i];\n\
    \    $open = $brackets[$i];\n\n    if ($open === '(') {\n      $stack[] = $open;\n\
    \    } else {\n      if ($open !== ')' || $stack[count($stack) - 1] != $open)\
    \ {\n        return false;\n      }\n      array_pop($stack);\n    }\n  }\n\n\
    \  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplhmka_lt.php:39\n\
    Stack trace:\n#0 /tmp/tmplhmka_lt.php(49): test()\n#1 {main}\n  thrown in /tmp/tmplhmka_lt.php\
    \ on line 39\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  // if brackets is empty, return true\n  if (empty($brackets)) {\n    return\
    \ true;\n  }\n\n  // iterate over every character in the brackets string\n  for\
    \ ($i = 0; $i < strlen($brackets); $i++) {\n    $current_bracket = $brackets[$i];\n\
    \n    // if brackets contains only the opening bracket, return true\n    if ($current_bracket\
    \ == '(') {\n      return true;\n    }\n\n    // if brackets contains only the\
    \ closing bracket, return false\n    if ($current_bracket == ')') {\n      return\
    \ false;\n    }\n  }\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpblptpagw.php:43\n\
    Stack trace:\n#0 /tmp/tmpblptpagw.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpblptpagw.php\
    \ on line 43\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    return preg_match_all(\"/^\\s*\\($brackets\\)/\", $brackets, $matches);\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpahgul9ab.php:21\n\
    Stack trace:\n#0 /tmp/tmpahgul9ab.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpahgul9ab.php\
    \ on line 21\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  return preg_match('/^('.preg_replace('/\\([^()]*\\)|\\[([^()]*\\])|\\{([^()]*\\\
    })|\\(|\\)/', '', $brackets).')*$/', $brackets);\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfjn772dt.php:21\n\
    Stack trace:\n#0 /tmp/tmpfjn772dt.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpfjn772dt.php\
    \ on line 21\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(')', $brackets);\n  $matches = array();\n  for ($i\
    \ = 0; $i < count($brackets); $i++) {\n    $stack = array();\n    for ($j = $i;\
    \ $j < count($brackets); $j++) {\n      $bracket = $brackets[$j];\n      if ($bracket\
    \ == '(') {\n        $stack[] = $bracket;\n      } else if ($bracket == ')') {\n\
    \        while (($opening = array_pop($stack)) != '(') {\n          $matches[$opening]\
    \ = true;\n        }\n      }\n    }\n  }\n  foreach ($matches as $key => $value)\
    \ {\n    if ($value == false) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2gxsynby.php:45\n\
    Stack trace:\n#0 /tmp/tmp2gxsynby.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp2gxsynby.php\
    \ on line 45\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    if (empty($brackets)) return true;\n    foreach (preg_split('/[\\(\\\
    )]/', $brackets) as $b) {\n        $b = trim($b);\n        if (empty($b)) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/\
    \ a dscore=3 |>\n<| c |>\nI'm sorry I forgot to mention that the brackets are\
    \ not necessarily pairs, they're just brackets like `()`, `[]` and so on... But\
    \ I see your point and it's definitely a good one. +1\n<|/ c |>\n<| c |>\n: In\
    \ that case, you'll need to come up with some kind of algorithm for deciding what\
    \ the possible \"pairs\" are. E.g., what does your example `[[(][])]]` mean when\
    \ written in plain English? What about `[[(](](](](` or `[[(](](](`? These are\
    \ all valid strings, but the two you gave are not.\n<|/ c |>\n<| a tags=regex,php\
    \ |>\nI would suggest the following approach:\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpo7f8lzl2.php
    on line 22

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    for ($i = 0; $i < strlen($brackets); ++$i) {\n        if ($brackets[$i]\
    \ === '(') {\n            if (! isset($brackets[$i+1]) || $brackets[$i+1] != ')')\
    \ {\n                return false;\n            }\n            ++$i;\n       \
    \ } else {\n            if (! isset($brackets[$i-1]) || $brackets[$i-1] != ')')\
    \ {\n                return false;\n            }\n            --$i;\n       \
    \ }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb_4ekg3y.php:35\n\
    Stack trace:\n#0 /tmp/tmpb_4ekg3y.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpb_4ekg3y.php\
    \ on line 35\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = array();\n    $brackets = preg_replace('/\\(([^()]+)\\)/', '$1',\
    \ $brackets);\n    $brackets = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n    foreach\
    \ (explode(')', $brackets) as $b) {\n        if (!empty($stack)) {\n         \
    \   if ($stack[count($stack) - 1] == $b) {\n                return false;\n  \
    \          }\n        }\n        else {\n            $stack[] = $b;\n        }\n\
    \    }\n    return !empty($stack);\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj7u6ipr6.php:37\n\
    Stack trace:\n#0 /tmp/tmpj7u6ipr6.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpj7u6ipr6.php\
    \ on line 37\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    for ($i = 0, $n = strlen($brackets); $i < $n; ++$i) {\n        if ($brackets[$i]\
    \ != \"(\" || $brackets[$i + 1] != \")\") {\n            return false;\n     \
    \   }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp99_1fxcc.php:26\n\
    Stack trace:\n#0 /tmp/tmp99_1fxcc.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp99_1fxcc.php\
    \ on line 26\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = str_split($brackets);\n    foreach ($brackets as $key =>\
    \ $val) {\n        if ($val != '') {\n            if (!isset($brackets[$key-1]))\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxt9mosjf.php:29\n\
    Stack trace:\n#0 /tmp/tmpxt9mosjf.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpxt9mosjf.php\
    \ on line 29\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening = array_keys(str_split($brackets, 1));\n  $closing = array_keys(str_split($brackets,\
    \ -1));\n  sort($opening, SORT_NUMERIC);\n  sort($closing, SORT_NUMERIC);\n\n\
    \  return $opening == $closing;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nIf you\
    \ don't have a problem with recursion, that's an easy solution. Otherwise you'll\
    \ need an explicit stack.\n<|/ c |>\n<| c |>\n: I'm not sure. Perhaps you can\
    \ do it with a recursive algorithm, but that might not be very efficient.\n<|/\
    \ c |>\n<| c |>\n: It should be possible to do with recursion, just without having\
    \ to explicitly use an explicit stack, but that would be inefficient with large\
    \ numbers of opening/closing brackets. I would expect it to be more efficient\
    \ to do it iteratively.\n<|/ c |>\n<| c |>\nYes, recursion is simple and straight\
    \ forward, but if you don't know about it yet, it's not going to be efficient\
    \ at all. At least not in the general case, and unless you're doing a lot of these,\
    \ you might as well just use a loop.\n<|/ c |>\n<| c |>\nI like the idea of using\
    \ a stack. Even if recursion is inefficient, it is a very simple solution to this\
    \ problem, especially if you do not know about recursion. As you say, it's also\
    \ much easier to code than an explicit stack. Thanks!\n<|/ c |>\n<| a tags=algorithm,php\
    \ |>\nI've done some time benchmarking against the other solutions posted here;\
    \ I find that my solution is ~3 times faster than the others, which is pretty\
    \ interesting. \nThis answer is in PHP; and requires PHP 5.3+\n<code>\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpncatntgf.php
    on line 20

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = str_replace('(','[',$brackets);\n    $brackets = str_replace(')',']',$brackets);\n\
    \    return preg_match_all('/\\[([^\\]]*)\\]/',$brackets,$matches);\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptmu0wwkz.php:23\n\
    Stack trace:\n#0 /tmp/tmptmu0wwkz.php(37): test()\n#1 {main}\n  thrown in /tmp/tmptmu0wwkz.php\
    \ on line 23\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $openedBracket = strpos($brackets, \"(\");\n  $closedBracket = strrpos($brackets,\
    \ \")\");\n\n  return $openedBracket < $closedBracket;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7w9dpqln.php:28\n\
    Stack trace:\n#0 /tmp/tmp7w9dpqln.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7w9dpqln.php\
    \ on line 28\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\(\\)/', '', $brackets);\n    $brackets =\
    \ preg_replace('/\\(\\)/', '', $brackets);\n    return preg_match('/\\(([^)]*)\\\
    )/', $brackets) > 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1uhbws4g.php:23\n\
    Stack trace:\n#0 /tmp/tmp1uhbws4g.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp1uhbws4g.php\
    \ on line 23\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  if (count($brackets)<2) return false;\n  return !strpos($brackets[1],$brackets[0]);\n\
    }\n\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmpgvwn1wdt.php:13\nStack trace:\n\
    #0 /tmp/tmpgvwn1wdt.php(19): correct_bracketing('()')\n#1 /tmp/tmpgvwn1wdt.php(23):\
    \ candidate('()')\n#2 /tmp/tmpgvwn1wdt.php(37): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpgvwn1wdt.php on line 13\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $opening_brackets = preg_split(\"/[\\(\\)]/\", $brackets);\n    $closing_brackets\
    \ = preg_split(\"/[\\(\\)]/\", \"()\" . $brackets);\n    return count($opening_brackets)\
    \ === count(array_unique($opening_brackets)) && count($closing_brackets) === count(array_unique($closing_brackets));\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThanks, this works! Is there a way to modify this\
    \ code to also check that the brackets are correctly closed? I noticed that even\
    \ though an input of \"(()())\" returns false, it still returns true.\n<|/ c |>\n\
    <| c |>\nYou're welcome. I've added an edit to the post to include a function\
    \ that returns true if the brackets are correctly closed. I recommend adding additional\
    \ validations to make sure that the input is a well formed string.\n<|/ c |>\n\
    <| a tags=php |>\nUse following code:\n<code>\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpg_qoa0gs.php
    on line 17

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $open = array();\n  $close = array();\n  for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n    if ($brackets[$i] == '(') {\n      $open[$i] = true;\n    } else\
    \ if ($brackets[$i] == ')') {\n      $close[$i] = true;\n    }\n  }\n  for ($i\
    \ = 0; $i < count($open); $i++) {\n    if (! isset($close[$i])) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\n/**\n * Checks whether a PHP version\
    \ has short array syntax, and if so,\n * converts it to the long array syntax.\n\
    \ *\n * @return array|null the PHP version array or null if it could not be converted.\n\
    \ */\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt0bx6fsj.php:41\n\
    Stack trace:\n#0 /tmp/tmpt0bx6fsj.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpt0bx6fsj.php\
    \ on line 41\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $opening_brackets = array();\n    $closing_brackets = array();\n    for($i\
    \ = 0; $i < strlen($brackets); $i++) {\n        $bracket = $brackets[$i];\n  \
    \      if($bracket == \"(\") {\n            $opening_brackets[] = $bracket;\n\
    \        } elseif($bracket == \")\") {\n            $closing_brackets[] = $bracket;\n\
    \        }\n    }\n    return (count($opening_brackets) == count($closing_brackets));\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8fh9czvp.php:36\n\
    Stack trace:\n#0 /tmp/tmp8fh9czvp.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp8fh9czvp.php\
    \ on line 36\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $open = count(preg_split(\"/[\\(\\)]/\", $brackets)) - 1;\n    for ($i\
    \ = 0; $i < $open; ++$i) {\n        if ($brackets[$i] == \"(\") {\n          \
    \  if (! in_array($brackets[$i + 1], array(\")\", \"]\", \"}\"))) {\n        \
    \        return false;\n            }\n        } elseif ($brackets[$i] == \"[\"\
    ) {\n            if (! in_array($brackets[$i + 1], array(\"]\", \"}\"))) {\n \
    \               return false;\n            }\n        } elseif ($brackets[$i]\
    \ == \"{\") {\n            if (! in_array($brackets[$i + 1], array(\"]\"))) {\n\
    \                return false;\n            }\n        } elseif ($brackets[$i]\
    \ == \"}\") {\n            if (! in_array($brackets[$i + 1], array(\"]\"))) {\n\
    \                return false;\n            }\n        } else {\n            if\
    \ (! in_array($brackets[$i], array(\"(\", \"[\", \"{\", \"}\"))) {\n         \
    \       return false;\n            }\n        }\n    }\n    return true;\n}\n\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8thqtkbg.php:45\n\
    Stack trace:\n#0 /tmp/tmp8thqtkbg.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp8thqtkbg.php\
    \ on line 45\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = array_reverse($brackets);\n    $count = 0;\n    $len = strlen($brackets);\n\
    \    $ret = true;\n    for ($i = 0; $i < $len; $i++) {\n        $bracket = $brackets[$i];\n\
    \        if ($bracket == '(') {\n            $count++;\n        } else {\n   \
    \         if ($count > 0) {\n                $count--;\n            } else {\n\
    \                $ret = false;\n            }\n        }\n    }\n    return $ret;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_reverse(): Argument #1 ($array)\
    \ must be of type array, string given in /tmp/tmpkg5kc0w7.php:13\nStack trace:\n\
    #0 /tmp/tmpkg5kc0w7.php(13): array_reverse('()')\n#1 /tmp/tmpkg5kc0w7.php(33):\
    \ correct_bracketing('()')\n#2 /tmp/tmpkg5kc0w7.php(37): candidate('()')\n#3 /tmp/tmpkg5kc0w7.php(51):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmpkg5kc0w7.php on line 13\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = preg_match_all('/(.*?)\\1/', $brackets, $matches);\n\
    \  $closing_brackets = preg_match_all('/\\1(.*?)$/', $brackets, $matches);\n \
    \ $all_brackets = $opening_brackets - $closing_brackets;\n  return ($opening_brackets\
    \ == $closing_brackets);\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmyc9y6nq.php:24\n\
    Stack trace:\n#0 /tmp/tmpmyc9y6nq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmyc9y6nq.php\
    \ on line 24\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\")\", $brackets);\n  $open_brackets = $brackets[0];\n\
    \  $close_brackets = $brackets[1];\n  for ($i = 0; $i < count($open_brackets);\
    \ $i++) {\n    $open_bracket = $open_brackets[$i];\n    $close_bracket = $close_brackets[$i];\n\
    \    if ($open_bracket != $close_bracket) {\n      return false;\n    }\n  }\n\
    \  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmp8ju7f491.php:16\nStack trace:\n\
    #0 /tmp/tmp8ju7f491.php(27): correct_bracketing(Array)\n#1 /tmp/tmp8ju7f491.php(31):\
    \ candidate('()')\n#2 /tmp/tmp8ju7f491.php(45): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp8ju7f491.php on line 16\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_count = count($brackets);\n    $opening_brackets = array();\n\
    \    $closing_brackets = array();\n    for ($i = 0; $i < $brackets_count; $i++)\
    \ {\n        if ($brackets[$i] === \"(\") {\n            $opening_brackets[] =\
    \ $i;\n        } else {\n            $closing_brackets[] = $i;\n        }\n  \
    \  }\n\n    // if there are no opening brackets, it's easy\n    if (count($opening_brackets)\
    \ == 0) {\n        return true;\n    }\n\n    // start at opening bracket\n  \
    \  $opening_index = -1;\n    for ($i = 0; $i < $brackets_count; $i++) {\n    \
    \    if ($brackets[$i] === \"(\") {\n            $opening_index = $i;\n      \
    \  } else {\n            if ($opening_index == -1) {\n                return false;\n\
    \            }\n        }\n    }\n\n    $i = $opening_index;\n    while ($closing_brackets[$i]\
    \ == $opening_brackets[$i] + 1) {\n        $i++;\n    }\n\n    // make sure there\
    \ are brackets we haven't closed up\n    return $brackets[$i] != \")\";\n}\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmp4fkfao3y.php:13\nStack trace:\n\
    #0 /tmp/tmp4fkfao3y.php(50): correct_bracketing('()')\n#1 /tmp/tmp4fkfao3y.php(54):\
    \ candidate('()')\n#2 /tmp/tmp4fkfao3y.php(68): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp4fkfao3y.php on line 13\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    return preg_match('/^[^()]*?[^(]*?\\\\('.preg_quote($brackets, '/').'[^)]*?\\\
    \\)[^)]*$/s', $brackets);\n}\n</code>\n<|/ a |>\n<| c |>\nThis is more efficient\
    \ than my `correct_bracketing()` function, although it still doesn't work in all\
    \ cases. e.g. `correct_bracketing(\"((\")` returns false\n<|/ c |>\n<| a tags=regex,php\
    \ |>\nI like the answer provided by but in my opinion it is far easier to understand\
    \ and extend the method than to create your own. \nSo I came up with my own implementation\
    \ of a proper bracketing method. This implementation uses recursion to get the\
    \ result and you can check it out and find out what it does exactly if you want.\
    \ \nI wrote some tests so you can test it out. \n<code>\n<?php\n\nclass BracketChecker\n\
    {\n    private $brackets;\n    private $openBrackets;\n    private $closeBrackets;\n\
    \    private $count;\n    private $result;\n\n    public function __construct($brackets)\n\
    \    {\n        $this->brackets = $brackets;\n        $this->openBrackets = $this->count_open_brackets($this->brackets);\n\
    \        $this->closeBrackets = $this->count_close_brackets($this->brackets);\n\
    \        $this->count = $this->openBrackets + $this->closeBrackets;\n        $this->result\
    \ = $this->check_bracketing();\n    }\n\n    private function count_open_brackets($str)\n\
    \    {\n        $count = 0;\n        for ($i=0; $i<strlen($str); $i++) {\n   \
    \         if ($str[$i] == '(') {\n                $count++;\n            }\n \
    \       }\n        return $count;\n    }\n\n    private function count_close_brackets($str)\n\
    \    {\n        $count = 0;\n        for ($i=0; $i<strlen($str); $i++) {\n   \
    \         if ($str[$i] == ')') {\n                $count++;\n            }\n \
    \       }\n        return $count;\n    }\n\n    public function check_bracketing()\n\
    \    {\n        if ($this->count === 0) {\n            return false;\n       \
    \ }\n\n        if ($this->openBrackets === 0) {\n            if ($this->closeBrackets\
    \ === 0) {\n                return true;\n            }\n            return false;\n\
    \        }\n\n        if ($this->closeBrackets === 0) {\n            return false;\n\
    \        }\n\n        return $this->check_bracketing_internal($this->brackets,\
    \ $this->openBrackets - 1, $this->closeBrackets - 1, $this->openBrackets);\n \
    \   }\n\n    private function check_bracketing_internal($brackets, $openBrackets,\
    \ $closeBrackets, $current)\n    {\n        if ($\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp1dbn1mgk.php
    on line 15

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    if ($brackets == \"()\" || $brackets == \"[]\" || $brackets == \"{}\"\
    ) {\n        return true;\n    }\n    return false; // brackets not found\n}\n\
    \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl_kwk6dz.php:25\n\
    Stack trace:\n#0 /tmp/tmpl_kwk6dz.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpl_kwk6dz.php\
    \ on line 25\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    // split brackets into sets, and check each one individually\n    $open_brackets\
    \ = explode(\"(\", $brackets);\n    foreach ($open_brackets as $key => $bracket)\
    \ {\n        if ($open_brackets[$key] !== $brackets[$key+1]) {\n            //\
    \ this opening bracket has a closing bracket, so this isn't a correct bracketing.\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_wbouzzb.php:29\n\
    Stack trace:\n#0 /tmp/tmp_wbouzzb.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp_wbouzzb.php\
    \ on line 29\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    if ($brackets === '') {\n        return false;\n    }\n    $opening =\
    \ array_count_values(str_split($brackets));\n    if ($opening === ['(', 0)\n \
    \       || $opening === ['(', 0])\n    {\n        return false;\n    }\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''['' does not match '')'' in /tmp/tmpab82p65j.php on line
    17

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $stack = array();\n  $openings = array();\n  $closings = array();\n\n \
    \ for ($i = 0; $i < strlen($brackets); ++$i) {\n    if ($brackets[$i] == ')')\
    \ {\n      if (isset($closings[$i])) {\n        unset($closings[$i]);\n      \
    \  array_push($openings, $closings[$i]);\n      } else {\n        return false;\n\
    \      }\n    } elseif ($brackets[$i] == '(') {\n      if (isset($openings[$i]))\
    \ {\n        unset($openings[$i]);\n        array_push($closings, $openings[$i]);\n\
    \      } else {\n        return false;\n      }\n    } else {\n      array_push($openings,\
    \ $brackets[$i]);\n    }\n  }\n\n  if (count($openings) != count($closings)) {\n\
    \    return false;\n  }\n\n  foreach ($openings as $key => $value) {\n    if (!isset($closings[$key]))\
    \ {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgaz2pr48.php:56\n\
    Stack trace:\n#0 /tmp/tmpgaz2pr48.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpgaz2pr48.php\
    \ on line 56\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = str_replace(\"(\", '', $brackets);\n  $brackets = str_replace(\"\
    )\", '', $brackets);\n  return $brackets === '()';\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpku6p5jo8.php:23\n\
    Stack trace:\n#0 /tmp/tmpku6p5jo8.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpku6p5jo8.php\
    \ on line 23\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    // return true if every opening bracket has a corresponding closing bracket.\n\
    \    // >>> correct_bracketing(\"(\")\n    // false\n    // >>> correct_bracketing(\"\
    ()\")\n    // true\n    // >>> correct_bracketing(\"(()())\")\n    // true\n \
    \   // >>> correct_bracketing(\")(()\")\n    // false\n    $bracket_count = 0;\n\
    \    $opened = false;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    $char = substr($brackets, $i, 1);\n        if ($char == '(') {\n        \
    \    $opened = true;\n            $bracket_count++;\n        } elseif ($char ==\
    \ ')') {\n            if ($opened) {\n                $opened = false;\n     \
    \           $bracket_count--;\n                if ($bracket_count == 0) return\
    \ true;\n            } else {\n                return false;\n            }\n\
    \        }\n    }\n    // no matching brackets were found.\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzr3x95ci.php:49\n\
    Stack trace:\n#0 /tmp/tmpzr3x95ci.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpzr3x95ci.php\
    \ on line 49\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $counts = array();\n    $opening = 0;\n    $closing = 0;\n    $found\
    \ = false;\n\n    // Loop through brackets and count\n    for($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if($brackets[$i] === \"(\") {\n            $counts[$opening]++;\n\
    \        } else {\n            $counts[$closing]++;\n        }\n\n        if($brackets[$i]\
    \ === \")\") {\n            $closing--;\n        }\n\n        if($brackets[$i]\
    \ === \"(\") {\n            $opening++;\n        }\n    }\n\n    // Return false\
    \ if no bracket pair was found\n    if($closing < count($counts)) {\n        return\
    \ false;\n    }\n\n    // If we got this far, all brackets had an opening bracket\n\
    \    // and all brackets had a closing bracket\n    // so we have found an equilateral\
    \ triangle\n    // so there must exist a matching number of opening brackets\n\
    \    // as closing brackets\n\n    // Now we just need to compare the numbers\n\
    \    // and see if there is an equal number\n    for($i = 0; $i < count($counts);\
    \ $i++) {\n        if($counts[$i] === count(array_keys($counts, $i))) {\n    \
    \        $found = true;\n            break;\n        }\n    }\n\n    return $found;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpxls6meri.php on line 21\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpxls6meri.php:63\nStack\
    \ trace:\n#0 /tmp/tmpxls6meri.php(77): test()\n#1 {main}\n  thrown in /tmp/tmpxls6meri.php\
    \ on line 63\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    return preg_match('/^\\(.*\\)\\$/', $brackets);\n}\n</code>\n<|/ a |>\n\
    <| a dscore=0 tags=string,regex,php |>\nThis regex will match on any string that\
    \ has at least one opening paren paired with a closing paren.  It will also match\
    \ on strings with no matching parens.\n<code>\n^.*?\\((?!\\)).*\\)$\n</code>\n\
    <|/ a |>\n<| a |>\nThis should work for you:\n<code>\n$string = \"(()())\";\n\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpacq7wgdu.php
    on line 15

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $level = 0;\n    $brackets_open = str_split($brackets, 1);\n    $brackets_closed\
    \ = str_split($brackets, 0);\n    $i = 0;\n    while ($i < strlen($brackets))\
    \ {\n        $next = isset($brackets_open[$i]) ? $brackets_open[$i] : '';\n  \
    \      $next_closed = isset($brackets_closed[$i]) ? $brackets_closed[$i] : '';\n\
    \        if ($next == $next_closed) {\n            $level++;\n        } else {\n\
    \            $level--;\n        }\n        $i++;\n    }\n    return $level ==\
    \ 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: str_split(): Argument #2 ($length)\
    \ must be greater than 0 in /tmp/tmp8kuw54de.php:15\nStack trace:\n#0 /tmp/tmp8kuw54de.php(15):\
    \ str_split('()', 0)\n#1 /tmp/tmp8kuw54de.php(31): correct_bracketing('()')\n\
    #2 /tmp/tmp8kuw54de.php(35): candidate('()')\n#3 /tmp/tmp8kuw54de.php(49): test()\n\
    #4 {main}\n  thrown in /tmp/tmp8kuw54de.php on line 15\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  for ($i = 0; $i < strlen($brackets); $i++) {\n    $open = substr($brackets,\
    \ $i, 1);\n    $close = substr($brackets, $i + 1, 1);\n    if ($open != $close)\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1u2qcibs.php:28\n\
    Stack trace:\n#0 /tmp/tmp1u2qcibs.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp1u2qcibs.php\
    \ on line 28\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = explode(\" \", $brackets);\n  foreach ($opening_brackets\
    \ as $opening_bracket) {\n    if ($opening_bracket != \")\")\n      return FALSE;\n\
    \  }\n  return TRUE;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps5l6_u9o.php:26\n\
    Stack trace:\n#0 /tmp/tmps5l6_u9o.php(40): test()\n#1 {main}\n  thrown in /tmp/tmps5l6_u9o.php\
    \ on line 26\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    return !preg_match('~^'.preg_replace('~\\)~', '\\\\'.'\\\\)~', $brackets).'$~';\n\
    }\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token ";", expecting ")" in /tmp/tmpjv19clyh.php
    on line 13

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    return preg_match('/\\(' . $brackets . ')\\)/', $brackets) === 0;\n}\n\
    \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: preg_match(): Compilation failed: unmatched closing parenthesis\
    \ at offset 4 in /tmp/tmpihp_c0l7.php on line 13\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpihp_c0l7.php:21\nStack trace:\n#0 /tmp/tmpihp_c0l7.php(35):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpihp_c0l7.php on line 21\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $bracket_pairs = preg_split(\"/[\\(\\)]/\", $brackets);\n  foreach ($bracket_pairs\
    \ as $pair) {\n    if ($pair != \")\") return false;\n  }\n  return true;\n}\n\
    </code>\n<|/ a tags=php,regex,preg-match-all |>\n<| c |>\nThis looks promising.\
    \ Let me give it a try.\n<|/ c |>\n<| a dscore=1 |>\nThis seems like a job for\
    \ recursive regexes - but PHP doesn't support recursive regexes.\nThe easiest\
    \ way to accomplish this would be to split the string on parentheses, recursing\
    \ through the resulting array and concatenating matching parentheses (starting\
    \ with ()) back into the string until no more are found. \nPseudocode:\n<code>\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpc4f_4_ul.php
    on line 19

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $stack = array();\n  for ($i = 0; $i < strlen($brackets); ++$i) {\n   \
    \ if ($brackets[$i] == '(') {\n      $stack[] = $brackets[$i];\n    }\n    else\
    \ {\n      if (empty($stack)) {\n        return false;\n      }\n      $top_curly_bracket\
    \ = $stack[count($stack) - 1];\n      $top_bracket = array_pop($stack);\n    \
    \  if ($top_bracket == ')' && $top_curly_bracket == ')') {\n        return true;\n\
    \      }\n      if ($top_bracket != ')' || $top_curly_bracket != ')') {\n    \
    \    return false;\n      }\n    }\n  }\n  return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi5zsesfo.php:40\n\
    Stack trace:\n#0 /tmp/tmpi5zsesfo.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpi5zsesfo.php\
    \ on line 40\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    list($open_count, $close_count) = explode(\")\", $brackets);\n    return\
    \ ($open_count == $close_count);\n}\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq7byzzad.php:21\n\
    Stack trace:\n#0 /tmp/tmpq7byzzad.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpq7byzzad.php\
    \ on line 21\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $open_brackets = preg_split(\"/[\\(\\)]/\", $brackets);\n    $return\
    \ = true;\n    foreach ($open_brackets as $i => $bracket) {\n        if (substr($brackets,\
    \ $i, 1) === \")\") {\n            // closing bracket\n            if ($i ===\
    \ count($open_brackets) - 1) {\n                $return = false;\n           \
    \ }\n            $i++;\n        }\n    }\n    return $return;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpglofppl_.php:36\n\
    Stack trace:\n#0 /tmp/tmpglofppl_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpglofppl_.php\
    \ on line 36\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $open_brackets = 0;\n    $open_brackets_pos = 0;\n    $closed_brackets\
    \ = 0;\n    $closed_brackets_pos = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == '(') {\n            $open_brackets++;\n\
    \            $open_brackets_pos++;\n        } else if ($brackets[$i] == ')') {\n\
    \            if ($open_brackets > 0 && $open_brackets == $closed_brackets) {\n\
    \                $closed_brackets++;\n                $closed_brackets_pos++;\n\
    \            } else {\n                // If closing bracket is mismatched with\
    \ the opening bracket,\n                // then it's not a bracketing error. Also\
    \ we assume that opening\n                // and closing brackets are always properly\
    \ matched.\n                // For example, \")(\", \")(\", \")(\", \")(\", \"\
    )(\", \")(\", \")(\", \")(\", \")(\", \")(\", \")(\",\n                // \")(\"\
    , \")(\", \")(\", \")(\", \")(\", \")(\", \")(\", \")(\", \")(\", \")(\", \")(\"\
    , \")(\", \")(\", \")(\", \")(\",\n                // \")(\", \")(\", \")(\",\
    \ \")(\", \")(\", \")(\", \")(\", \")(\", \")(\", \")(\", \")(\", \")(\", \")(\"\
    , \")(\", \")(\",\n                // \")(\", \")(\", \")(\", \")(\", \")(\",\
    \ \")(\", \")(\", \")(\", \")(\", \")(\", \")(\", \")(\", \")(\", \")(\", \")(\"\
    ,\n                // \")(\", \")(\", \")(\", \")(\", \")(\", \")(\", \")(\",\
    \ \")(\", \")(\", \")(\", \")(\", \")(\", \")(\", \")(\", \")(\",\n          \
    \      // \")(\", \")(\", \")(\", \")(\", \")(\", \")(\", \")(\", \")(\", \")(\"\
    , \")(\", \")(\", \")(\", \")(\", \")(\", \")(\",\n                // \")(\",\
    \ \")(\", \")(\", \")(\", \")(\", \")(\", \")(\", \")(\", \")(\", \")(\", \")(\"\
    , \")(\", \")(\", \")(\", \")(\",\n                // \")(\", \")(\", \")(\",\
    \ \")(\", \")(\", \")(\", \")(\", \")(\", \")(\", \")(\", \")(\", \")(\", \nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 25 in /tmp/tmprwgoft8i.php on line 56

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace(\"/[\\(\\)]/\", \"\", $brackets);\n  if ($brackets\
    \ === \"\") {\n    return true;\n  }\n  $brackets_counter = count($brackets);\n\
    \  $current_bracket = $brackets[0];\n  for ($i = 1; $i < $brackets_counter; $i++)\
    \ {\n    if ($current_bracket != $brackets[$i]) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1jk_1cof.php:36\n\
    Stack trace:\n#0 /tmp/tmp1jk_1cof.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp1jk_1cof.php\
    \ on line 36\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $correct = false;\n  $len = strlen($brackets);\n  for ($i = 0; $i < $len;\
    \ ++$i) {\n    $char = substr($brackets, $i, 1);\n    if ($char === ')') {\n \
    \     if ($i === 0) {\n        // This looks like a misplaced open paren, but\
    \ it's in parens.\n        $correct = true;\n      }\n      if ($i !== $len -\
    \ 1) {\n        // This looks like a misplaced close paren, but it's in parens.\n\
    \        $correct = true;\n      }\n      if ($i === 0 && $char !== '(') {\n \
    \       // The open paren is in brackets, and the close paren isn't.\n       \
    \ $correct = false;\n      }\n      if ($i === $len - 1 && $char !== ')') {\n\
    \        // The close paren is in brackets, and the open paren isn't.\n      \
    \  $correct = false;\n      }\n    }\n  }\n  return $correct;\n}\n\n/**\n * Return\
    \ the minimum number of spaces needed to indent a string.\n *\n * If a string\
    \ is not indented at all, return 0.\n *\n * @param string $string The string to\
    \ indent.\n * @param int $indent_size The number of spaces to indent.\n * @return\
    \ int The number of spaces needed to indent the string.\n */\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5djf80h7.php:53\n\
    Stack trace:\n#0 /tmp/tmp5djf80h7.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp5djf80h7.php\
    \ on line 53\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = trim($brackets);\n  if (empty($brackets)) {\n    return false;\n\
    \  }\n\n  $brackets = str_replace('(', '', $brackets);\n  $brackets = str_replace(')',\
    \ '', $brackets);\n\n  $opening_brackets = explode('(', $brackets);\n  $closing_brackets\
    \ = explode(')', $brackets);\n  $i = 0;\n\n  foreach ($opening_brackets as $opening_bracket)\
    \ {\n    if (!isset($closing_brackets[$i]) || $opening_bracket !== $closing_brackets[$i])\
    \ {\n      return false;\n    }\n    ++$i;\n  }\n  return true;\n}\n</code>\n\
    <|/ a tags=php,parentheses dscore=1 |>\n<| a dscore=1 tags=php,parentheses |>\n\
    I used an associative array to store what was in parenthesis and what wasn't.\
    \  After I checked all the parenthesis I did a simple count for how many are in\
    \ parenthesis.  I then printed a message if any were less than 2 parenthesis and\
    \ printed a message if more than 3 parenthesis.  I did this by creating an array\
    \ of every parenthesis and checking each of them for parenthesis in an if statement.\
    \  \n<code>\n$paren_arr = array('(',')');\n$paren_count = 0;\nforeach ($paren_arr\
    \ as $val)\n{\n  if ($str[$i] == $val) $paren_count++;\n}\nif ($paren_count <\
    \ 2) {\n  echo \"less than 2 parens\";\n} else if ($paren_count > 3) {\n  echo\
    \ \"more than 3 parens\";\n}\n</code>\n<|/ a |>\n<| a |>\nThis might be helpful:\
    \ Recursive Parenthesis Checker in PHP\n<|/ a dscore=1 tags=php,parentheses |>\n\
    <| a dscore=0 |>\nI wrote a simple script to handle a similar problem for my own\
    \ code, I hope it will help someone. Just add the function call in the loop where\
    \ you want to check:\n<code>\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpwt_2h_0y.php
    on line 33

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n\treturn preg_match('/^\\((.+?)\\)$/', $brackets);\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzt04tdx_.php:21\n\
    Stack trace:\n#0 /tmp/tmpzt04tdx_.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpzt04tdx_.php\
    \ on line 21\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    // This function is intentionally simple and thus not optimized\n   \
    \ // It is not intended to be fully optimized\n    // Just intended to be an example\
    \ of how one could solve the problem\n\n    $count = 0;\n    $brackets_arr = explode(\"\
    )\", $brackets);\n    $return = false;\n    for ($i = 0; $i < count($brackets_arr);\
    \ $i++) {\n        $current = $brackets_arr[$i];\n        if ($i === count($brackets_arr)\
    \ - 1) {\n            // last bracket\n            if ($current === $brackets_arr[0])\
    \ {\n                $count++;\n            }\n        } else {\n            $count++;\n\
    \        }\n        if ($count === 2) {\n            $return = true;\n       \
    \     break;\n        }\n    }\n    return $return;\n}\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_8aybdlk.php:42\n\
    Stack trace:\n#0 /tmp/tmp_8aybdlk.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_8aybdlk.php\
    \ on line 42\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    foreach (preg_split('//', $brackets) as $b) {\n        if (!strlen($b))\
    \ return false; // empty brackets means no brackets at all\n        if ($b[0]\
    \ != '(') return false;\n        for ($i = 1; $i < strlen($b); $i++) {\n     \
    \       if ($b[$i] != ')') return false;\n        }\n    }\n    return true;\n\
    }\n</code>\n<|/ a dscore=3 tags=algorithm,recursion,brackets,php |>\n<| c |>\n\
    Thanks a lot for the great answer! But your solution is somehow \"too slow\" for\
    \ me, because I tested it, and it takes 10secs for 50.000 iterations. Your recursive\
    \ solution is even more than 10secs. I wonder why they don't use that kind of\
    \ algorithms when the language is so great and has so many functions to play with.\n\
    <|/ c |>\n<| c |>\n: Your solution is very clever, because you just need to check\
    \ that the brackets are balanced. I just wanted to point out that this problem\
    \ can not be solved by brute force. In fact, the problem is not solvable at all\
    \ in general, just in some cases.\n<|/ c |>\n<| c |>\n- I added an explanation\
    \ of why your solution takes so long.\n<|/ c |>\n<| c |>\nThis is really cool,\
    \ but I believe your algorithm has serious flaws. As it stands, if there are nested\
    \ brackets, it will still return true.\n<|/ c |>\n<| c |>\n: How would you prove\
    \ that your algorithm doesn't have flaws?\n<|/ c |>\n<| a dscore=2 |>\nI'm answering\
    \ my own question for the sake of completeness. \nThe most efficient algorithm\
    \ that I have found is based on recursion. \nThe idea is simple: we divide the\
    \ brackets and check each of them separately. If it's not a nested bracket, we\
    \ just go deeper into the recursive function. If it's a nested bracket, we go\
    \ deeper into the function with the new set of brackets. \nThe code I used:\n\
    <code>\n$str = '(()()())()';\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp2auqmq2w.php
    on line 22

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  return preg_match('/\\(([^()]*|\\([^()]*\\))*\\)/', $brackets, $match)\
    \ &&\n    ($match[1] === $match[2] ||\n     $match[1] . correct_bracketing($match[2])\
    \ === '()');\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis answer is also great\
    \ for PHP's recursive regex support.\n<|/ c |>\n<| a tags=php,regex |>\nHere is\
    \ a slightly modified version of Hamish solution that correctly handles nested\
    \ brackets.  \n<code>\n<?php\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp3thbfcxm.php
    on line 17

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace(\"/[^()]*/\", \"\", $brackets);\n  return $brackets\
    \ == \"()\" || $brackets == \"(()\" || $brackets == \"(()()\";\n}\n\n/**\n * Return\
    \ the minimum number of brackets necessary for |$str| to evaluate\n * to a logical\
    \ true statement.\n */\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqc7a583.php:27\n\
    Stack trace:\n#0 /tmp/tmphqc7a583.php(40): test()\n#1 {main}\n  thrown in /tmp/tmphqc7a583.php\
    \ on line 27\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\",\", $brackets);\n  $stack = array();\n  $result\
    \ = true;\n  foreach ($brackets as $i => $b) {\n    if ($b != ')') {\n      $stack[$i]\
    \ = $b;\n    } else {\n      if (empty($stack)) {\n        $result = false;\n\
    \        break;\n      }\n      $b = array_pop($stack);\n      if ($b != '(')\
    \ {\n        $result = false;\n        break;\n      }\n    }\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp36j7f3kf.php:43\n\
    Stack trace:\n#0 /tmp/tmp36j7f3kf.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp36j7f3kf.php\
    \ on line 43\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"()\", $brackets);\n    sort($brackets);\n    return\
    \ $brackets[0] . $brackets[count($brackets) - 1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4o55_ljf.php:23\n\
    Stack trace:\n#0 /tmp/tmp4o55_ljf.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp4o55_ljf.php\
    \ on line 23\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n\n  foreach\
    \ ($brackets as $key => $bracket) {\n    if ($bracket == '(') {\n      $opening_brackets[]\
    \ = $key;\n    } else {\n      if ($bracket == ')') {\n        $closing_brackets[]\
    \ = $key;\n      }\n    }\n  }\n\n  return array_diff($closing_brackets, $opening_brackets);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks a lot, but I am not able to understand\
    \ your code. I have never used array_diff function. If you can please provide\
    \ some explanation it will be helpful.\n<|/ c |>\n<| c |>\nThe function I wrote\
    \ returns an array containing the keys of any array where one element is removed\
    \ from another array. So if brackets contains `[` and `)` and `(` and `)` then\
    \ `correct_bracketing` would return `[0, 3, 6]`.\n<|/ c |>\n<| c |>\nI used array_diff,\
    \ because that's what it does for you when you pass an array as the first argument.\
    \ See the [docs](http://php.net/array_diff).\n<|/ c |>\n<| a dscore=0 |>\nYou\
    \ need two nested loops here.\n<code>\n$brackets = array('(', ')', '(', ')');\n\
    \n$result = array();\nforeach ($brackets as $i => $open) {\n    $result[$i] =\
    \ array();\n\n    foreach ($brackets as $j => $close) {\n        if ($j == $i)\
    \ continue;\n\n        if ($open != $close) {\n            $result[$i][] = $j;\n\
    \        }\n    }\n}\n\nprint_r($result);\n</code>\nOutput\n<code>\nArray\n(\n\
    \    [0] => Array\n        (\n            [0] => 0\n            [1] => 3\n   \
    \         [2] => 6\n        )\n\n    [1] => Array\n        (\n            [0]\
    \ => 0\n            [1] => 1\n            [2] => 2\n        )\n\n    [2] => Array\n\
    \        (\n            [0] => 0\n            [1] => 2\n            [2] => 3\n\
    \        )\n\n    [3] => Array\n        (\n            [0] => 0\n            [1]\
    \ => 3\n            [2] => 4\n        )\n\n)\n</code>\n<|/ a tags=php,loops |>\n\
    <| c |>\nThe output from your code is `Array ( [0] => Array ( [0] => 0 [1] =>\
    \ 1 [2] => 3 ) [1] => Array ( [0] => 0 [1] => 1 [2] => 2 ) [2] => Array ( [0]\
    \ => 0 [1] \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpdn3rzui7.php
    on line 28

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening = strpos($brackets, \"(\");\n  $closing = strpos($brackets, \"\
    )\");\n  if ($opening === FALSE || $closing === FALSE) {\n    return FALSE;\n\
    \  }\n  if ($opening < $closing) {\n    return FALSE;\n  }\n  $stack = array();\n\
    \  for ($i = 0; $i < $opening; ++$i) {\n    $stack[] = $brackets[$i];\n  }\n \
    \ for ($i = $opening; $i < $closing; ++$i) {\n    if ($brackets[$i] == $stack[count($stack)\
    \ - 1]) {\n      array_pop($stack);\n    } else {\n      return FALSE;\n    }\n\
    \  }\n  return TRUE;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1zfpg4eu.php:40\n\
    Stack trace:\n#0 /tmp/tmp1zfpg4eu.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1zfpg4eu.php\
    \ on line 40\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    for ($i = 0, $count = strlen($brackets); $i < $count; $i++) {\n     \
    \   $char = substr($brackets, $i, 1);\n        // Check for invalid characters.\n\
    \        if (!preg_match('/^[0-9A-Za-z]+$/', $char)) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgmfnjivf.php:28\n\
    Stack trace:\n#0 /tmp/tmpgmfnjivf.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpgmfnjivf.php\
    \ on line 28\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $openings = array();\n  $closings = array();\n  foreach (str_split($brackets)\
    \ as $char) {\n    if ($char === \"(\") {\n      $openings[] = $char;\n    }\n\
    \    else {\n      $closings[] = $char;\n    }\n  }\n\n  return count($openings)\
    \ == count($closings);\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp34wj6hv5.php:37\n\
    Stack trace:\n#0 /tmp/tmp34wj6hv5.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp34wj6hv5.php\
    \ on line 37\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"\\n\", $brackets);\n    $brackets = array_filter($brackets,\
    \ function($line) {\n        return trim($line);\n    });\n    // remove empty\
    \ lines\n    $brackets = array_filter($brackets, function($line) {\n        return\
    \ $line !== \"\";\n    });\n    // only non-empty lines\n    $brackets = array_filter($brackets,\
    \ function($line) {\n        return $line !== \"\";\n    });\n    // sort by opening\
    \ bracket\n    $brackets = array_multisort($brackets, SORT_ASC);\n    return count($brackets)\
    \ == count($brackets[0]);\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, bool given in /tmp/tmppp0hr7mo.php:27\nStack trace:\n\
    #0 /tmp/tmppp0hr7mo.php(31): correct_bracketing(true)\n#1 /tmp/tmppp0hr7mo.php(35):\
    \ candidate('()')\n#2 /tmp/tmppp0hr7mo.php(49): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmppp0hr7mo.php on line 27\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  list($opening, $closing) = explode($brackets, 2, 2);\n  foreach (str_split($opening)\
    \ as $key => $char) {\n    if (!isset($closing[$key]) || $char !== $closing[$key])\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmp7sota17o.php on line 13\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp7sota17o.php:27\nStack\
    \ trace:\n#0 /tmp/tmp7sota17o.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp7sota17o.php\
    \ on line 27\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $stack = array();\n  for ($i = 0; $i < strlen($brackets); $i++) {\n   \
    \ if (!is_numeric($brackets[$i])) {\n      $stack[] = $brackets[$i];\n    } else\
    \ {\n      // If $stack is empty, we're on the wrong bracket.\n      if (empty($stack))\
    \ {\n        return false;\n      }\n      $last_bracket = array_pop($stack);\n\
    \n      if ($last_bracket != ')' && $last_bracket != ')') {\n        // This is\
    \ an error. Return false.\n        return false;\n      }\n      $stack[] = $last_bracket;\n\
    \    }\n  }\n\n  // If we get to the end of the string and stack is still empty,\n\
    \  // the brackets we parsed were balanced.\n  return empty($stack);\n}\n</code>\n\
    <|/ a dscore=1 tags=php,arrays,parsing,json |>\n<| c |>\nThank you very much for\
    \ this! I will test this in the morning and will accept your answer.\n<|/ c |>\n\
    <| c |>\nWow, that's a very long answer! I went to sleep last night but this morning\
    \ I went to work and tested this, and I got a negative result. (I replaced 'return\
    \ false' with 'echo \"error\"' and I put \"(\" in a text box and I received an\
    \ echo of \"error\"). Maybe the problem is that my text box is empty? Do you know\
    \ how I could test this without putting anything in the text box?\n<|/ c |>\n\
    <| c |>\nYou're welcome. Just put some characters in the textbox and see what\
    \ happens.\n<|/ c |>\n<| c |>\nThanks. I put a string of \"(\" and I got \"error\"\
    . Your code didn't return false, but I couldn't get it to return true.\n<|/ c\
    \ |>\n<| c |>\nHmm. I'm stumped. I'll keep thinking about it, but in the meantime\
    \ if you're still stuck then let me know. I can take a closer look.\n<|/ c |>\n\
    <| a dscore=1 |>\nI took my time to learn about the JSON string and I finally\
    \ got my own answer. Thank you for all your help!\n<code>\n<?php\n\n$json = '{\n\
    \    \"name\": \"John\",\n    \"age\": 31,\n    \"email\": \"john@example.me\"\
    ,\n    \"homeAddress\": \"123 Main Street\",\n    \"workAddress\": \"Suite 1\"\
    ,\n    \"tel\": \"123456789\",\n    \"fax\": \"987654321\",\n    \"city\": \"\
    Anytown\",\n    \"state\": \"CO\",\n    \"zip\": \"12345\",\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmptoet74uf.php
    on line 36

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    for($i = 0; $i < strlen($brackets); $i++) {\n        $openingBracket\
    \ = $brackets[$i];\n        if($openingBracket == \"(\") {\n            $closingBracket\
    \ = $brackets[$i+1];\n            if($closingBracket != \")\") {\n           \
    \     return false;\n            }\n            $i++;\n        }\n    }\n    return\
    \ true;\n}\n</code>\n<|/ a |>\n<| c |>\nHi, thanks for the reply, but this would\
    \ not work if we wanted to check brackets with an odd number of parentheses. For\
    \ example, `(\")(` would not return true, because the brackets are odd.\n<|/ c\
    \ |>\n<| c |>\nHi, I edited my answer to include a check that ensures every opening\
    \ bracket has a corresponding closing bracket.\n<|/ c |>\n<| a tags=string,php\
    \ |>\nYou could use the following code:\n<code>\n$string = \"((\";\n$lastChar\
    \ = $string[strlen($string)-1];\nif ($lastChar != '(' && $lastChar != ')') {\n\
    \    echo \"$string is not balanced\";\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thanks but the function should be able to accept any type of string. So something\
    \ like `(\")` would not work but `(()())` would work.\n<|/ c |>\n<| c |>\nHi Nelson,\
    \ I think you should use the `strpos` function instead of `strlen`.\n<|/ c |>\n\
    <| c |>\nI mean what is the point of checking if a bracket is even or odd? What\
    \ is the point of checking the number of brackets?\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\n<?php\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmphnp67vgs.php
    on line 25

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    // Your code here.\n    return false; // Replace this line with your\
    \ code.\n}\n</code>\nYou just need to replace the comment above the function with\
    \ a code that will return true when brackets are correctly placed.\nThe rest is\
    \ simple, just print out the line with the correct brackets placed inside of it.\n\
    <|/ a dscore=2 |>\n<| c |>\nThank you for providing such an interesting answer.\
    \ I did try it out and it did work. I did not use the way you explained it, because\
    \ the way you explained it makes it much easier for me to understand, and I really\
    \ appreciate your answer. Thank you so much!\n<|/ c |>\n<| a tags=php,brackets,javascript,parentheses\
    \ dscore=2 |>\nYou can try with RegEx\n<code>\nvar brackets = '[(][)]';\nvar str\
    \ = '(()())';\nvar re = new RegExp(brackets);\n\nvar re2 = /\\(|\\)/g;\n\nif(re.test(str))\
    \ {\n  alert('YES');\n}\n\nif(str.match(re2)) {\n  alert('NO');\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThanks for the help, but I'm trying not to solve it using regex.\n\
    <|/ c |>\n<| c |>\nHi, I actually used this code and it's giving me a correct\
    \ alert box. But I actually want a conditional statement. I'm sorry that I did\
    \ not make it clear that before.\n<|/ c |>\n<| c |>\nOh sorry I missed that in\
    \ the question. I thought you said you wanted to use an if() statement and was\
    \ going to put my code in that. Anyways you can put this inside of a function\
    \ and use it like if(correct_bracketing($string)) { alert('YES'); }\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>\n<?php\n$str = \"(()()\";\n\nif(substr_count($str,\"\
    ()\")>0)\n{\n echo \"YES\";\n}\nelse\n{\n echo \"NO\";\n}\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmplluy546e.php
    on line 16

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    foreach ($brackets as $i => $bracket) {\n        // don't go out of bounds.\n\
    \        if ($i >= count($brackets) - 1) {\n            break;\n        }\n  \
    \      if ($bracket !== $brackets[$i + 1]) {\n            return false;\n    \
    \    }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: foreach() argument must be of type array|object, string given\
    \ in /tmp/tmpc15dwk4p.php on line 13\n\nWarning: foreach() argument must be of\
    \ type array|object, string given in /tmp/tmpc15dwk4p.php on line 13\n\nWarning:\
    \ foreach() argument must be of type array|object, string given in /tmp/tmpc15dwk4p.php\
    \ on line 13\n\nWarning: foreach() argument must be of type array|object, string\
    \ given in /tmp/tmpc15dwk4p.php on line 13\n\nWarning: foreach() argument must\
    \ be of type array|object, string given in /tmp/tmpc15dwk4p.php on line 13\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpc15dwk4p.php:34\nStack\
    \ trace:\n#0 /tmp/tmpc15dwk4p.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpc15dwk4p.php\
    \ on line 34\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    return preg_match('/'.$brackets.'/', $bracketed) ==1;\n}\n</code>\n<|/\
    \ a tags=regex,php,pcre dscore=3 |>\n<| c |>\nNice, thanks mate. I found a couple\
    \ of problems with your code:\n\n1) In your function `is_correct` you are not\
    \ using `preg_match_all` but `preg_match`. This makes no sense because in that\
    \ function you are searching for all the patterns and not for just one. \n\n2)\
    \ If you do use `preg_match_all` then it would be better to pass it as argument\
    \ to the function and replace `preg_match` with `preg_match_all`.\n\n3) You are\
    \ using `preg_match` and then doing `preg_match_all`, which is redundant.\n<|/\
    \ c |>\n<| c |>\nI fixed the bugs I noticed when testing this code (some of them\
    \ are due to my typo when copying from the console). As for the redundancy, preg_match\
    \ is sufficient as that only returns one result, which is then compared to 1.\
    \ You can compare it to the number of results returned if you like.\n<|/ c |>\n\
    <| c |>\nYou were right about the `preg_match_all` - that was a typo and I meant\
    \ to use just `preg_match` which returns one result. Thanks for your answer!\n\
    <|/ c |>\n<| a dscore=3 |>\nIf I had to do this task in regex:\n\nI would start\
    \ by breaking down the problem into smaller steps.\nI would try writing a regex\
    \ that would only match if all opening brackets are paired correctly.  So a regex\
    \ that would match only if the opening brackets are paired correctly.\nThen I\
    \ would write a regex that would only match if all closing brackets are paired\
    \ correctly.  So a regex that would match only if the closing brackets are paired\
    \ correctly.\nThen I would write the final regex to combine these two regex to\
    \ match only if both are correct.\nI would test all these regexes in different\
    \ cases and see which one works best and most reliably.\n\nSo in short I would\
    \ try to write each regex step by step.  Then combine them to see which one works\
    \ best and most reliably.\n<|/ a tags=regex,php,pcre |>\n<| c |>\nThe regex for\
    \ matching is easy, but I am having trouble writing the regex for matching. If\
    \ I wanted to match only if the brackets are paired correctly I wouldn't have\
    \ any problems, but what if I want to match only if the parentheses are matched\
    \ correctly? The regex for matching should only return the numbers and parenthesis\
    \ that are matched, and I am not sure how to \nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpdp390q5y.php
    on line 15

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    // Your code here.\n}\n</code>\n<|/ a tags=php |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpozhin5rc.php
    on line 15

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  return substr($brackets, 0, 1) == substr($brackets, -1, 1);\n}\n</code>\n\
    <|/ a tags=string,php,regex dscore=2 |>\n<| c |>\n: It does.  Try it.\n<|/ c |>\n\
    <| c |>\nIt doesn't work for me. Test case here: http://ideone.com/5vZwN8\n<|/\
    \ c |>\n<| c |>\n: It should work.  What error are you seeing?\n<|/ c |>\n<| c\
    \ |>\nI'm getting the error `PHP Fatal error:  Uncaught exception 'Exception'\
    \ with message 'Delimiter must not be alphanumeric or backslash' in C:\\Program\
    \ Files\\EasyPHP-5.3.6.0\\www\\test.php:6\\nStack trace:\\n#0 C:\\Program Files\\\
    EasyPHP-5.3.6.0\\www\\test.php(6): preg_replace_callback('/\\\\)/...', Array\\\
    n#1 {main}\\n  thrown in C:\\Program Files\\EasyPHP-5.3.6.0\\www\\test.php on\
    \ line 6`\n<|/ c |>\n<| c |>\n: You have to escape that last backslash before\
    \ it can be used in a regex.  So `/\\)/` should be `/\\\\)/`.\n<|/ c |>\n<| a\
    \ tags=string,php,regex dscore=1 |>\nThis works for me (thanks Spike):\n<code>\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpr0zg2rwj.php
    on line 15

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  if (strlen($brackets) != strlen('()')) {\n    return false;\n  }\n  for\
    \ ($i = 0; $i < strlen($brackets); $i++) {\n    $left = $brackets[$i];\n    $right\
    \ = $brackets[$i+1];\n    if (!in_array($left, array('(', ')'))) {\n      return\
    \ false;\n    }\n    if ($left != $right) {\n      return false;\n    }\n  }\n\
    \  return true;\n}\n\n$is_correct_bracketing = array(\n  '(', ')', '(()', '()(',\
    \ ')()', '()()', '()()()', '(()()', '()(()', '()()(', ')()(', ')()()', '()(()())',\
    \ '(()()())', '()(())', ')()()', '()()()', ')()(', ')()()', '()(()())', '()(())',\
    \ ')()(', ')()()', '()(()())', '()(())', ')()(', ')()()', ')()()', ')()()', '()()()',\
    \ ')()()', ')()()()', ')()()()', ')()()()', ')()()()', ')()()()', ')()()()', ')()()()',\
    \ ')()()()', ')()()()', ')()()()', ')()()()', ')()()()', ')()()()', ')()()()',\
    \ ')()()()', ')()()()', ')()()()', ')()()()', ')()()()', ')()()()', ')()()()',\
    \ ')()()()', ')()()()', ')()()()', ')()()()', ')()()()', ')()()()', ')()()()',\
    \ ')()()()', ')()()()', ')()()()', ')()()()', ')()()()', ')()()()', ')()()()',\
    \ ')()()()', ')()()()', ')()()()', ')()()()', ')()()()', ')()()()', ')()()()',\
    \ ')()()()', ')()()()', ')()()()', ')()()()', ')()()()', ')()()()', ')()()()',\
    \ ')()()()', ')()()()', ')()()()', ')()()()', ')()()()', ')()()()', ')()()()',\
    \ ')()()()', ')()()()', ')()()()', ')()()()', ')()()()', ')()()()', ')()\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content ")()", expecting ")" in /tmp/tmplmo3enyf.php
    on line 30

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_quote($brackets);\n  return preg_match_all('/\\((?=[^\\\
    )]*['.$brackets.']*\\))/', $brackets, $matches)\n      && empty($matches[0]);\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp53n_ivnd.php:23\n\
    Stack trace:\n#0 /tmp/tmp53n_ivnd.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp53n_ivnd.php\
    \ on line 23\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = str_replace('(', '[(]', $brackets);\n  $brackets = str_replace(')',\
    \ ']][', substr($brackets, 0, -1));\n  $brackets = str_replace('[', '(', $brackets);\n\
    \  $brackets = str_replace(']', ']', substr($brackets, 0, -1));\n  return preg_match('/^('.$brackets.')*$/',\
    \ trim($brackets)) == 1;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: preg_match(): Compilation failed: missing closing parenthesis\
    \ at offset 7 in /tmp/tmpta3imhid.php on line 17\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpta3imhid.php:25\nStack trace:\n#0 /tmp/tmpta3imhid.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpta3imhid.php on line 25\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = array_filter(explode(\")\", $brackets));\n  foreach ($brackets\
    \ as $b) {\n    if (strpos($brackets, $b) !== false) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: strpos(): Argument #1 ($haystack) must\
    \ be of type string, array given in /tmp/tmp56tmp7s3.php:15\nStack trace:\n#0\
    \ /tmp/tmp56tmp7s3.php(15): strpos(Array, '(')\n#1 /tmp/tmp56tmp7s3.php(23): correct_bracketing(Array)\n\
    #2 /tmp/tmp56tmp7s3.php(27): candidate('()')\n#3 /tmp/tmp56tmp7s3.php(41): test()\n\
    #4 {main}\n  thrown in /tmp/tmp56tmp7s3.php on line 15\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets_arr = explode('(', $brackets);\n  $brackets_count = count($brackets_arr);\n\
    \  if ($brackets_count <= 0) {\n    return false;\n  }\n  $opening_count = array_sum($brackets_arr);\n\
    \  for ($i = 0; $i < $brackets_count; $i++) {\n    if ($i < $brackets_count -\
    \ 1) {\n      $next_bracket = $brackets_arr[$i + 1];\n      if ($opening_count--\
    \ == 1 && $next_bracket != ')') {\n        return false;\n      }\n      if ($opening_count++\
    \ == 0 && $next_bracket != ')') {\n        return false;\n      }\n    }\n  }\n\
    \  return true;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is great! Is there a way\
    \ to do this without recursion? Like looping through the array until it reaches\
    \ the matching pair?\n<|/ c |>\n<| a dscore=1 tags=algorithm,php |>\nHere's my\
    \ take on this - essentially, I use a stack to check whether the brackets match\
    \ or not, and I push and pop brackets from the stack as I iterate through them.\
    \ The stack will hold a boolean for each of the brackets I have pushed onto it:\
    \ True means I opened a bracket and False means I closed one.\n<code>\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpm9i1rdcs.php
    on line 32

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  if (preg_match('/^(.*\\()*$/', $brackets, $matches))\n    return true;\n\
    \  else\n    return false;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl1_lsyqx.php:24\n\
    Stack trace:\n#0 /tmp/tmpl1_lsyqx.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpl1_lsyqx.php\
    \ on line 24\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  for ($i = 0; $i < strlen($brackets); $i++) {\n    if (substr($brackets,\
    \ $i, 1) !== \"(\" && substr($brackets, $i, 1) !== \"[\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb437mpoj.php:26\n\
    Stack trace:\n#0 /tmp/tmpb437mpoj.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpb437mpoj.php\
    \ on line 26\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n\tglobal $bracket_stack;\n\treturn (strpos($brackets, $bracket_stack[count($bracket_stack)\
    \ - 1]) === false);\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, null given in /tmp/tmp1vl_n1oj.php:14\nStack trace:\n\
    #0 /tmp/tmp1vl_n1oj.php(18): correct_bracketing('()')\n#1 /tmp/tmp1vl_n1oj.php(22):\
    \ candidate('()')\n#2 /tmp/tmp1vl_n1oj.php(36): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp1vl_n1oj.php on line 14\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n\t$stack = array();\n\t\n\tfor ($i = count($brackets); $i > 0; $i--)\n\t\t\
    $stack[] = $brackets[$i - 1];\n\t\t\n\tfor ($i = count($brackets); $i > 0; $i--)\
    \ {\n\t\t$a = array_pop($stack);\n\t\t$b = array_pop($stack);\n\t\t\n\t\tif ($a\
    \ != ')')\n\t\t\treturn ($a != ')' && $b != ')');\n\t}\n\treturn true;\n}\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmpxy0emsfy.php:15\nStack trace:\n\
    #0 /tmp/tmpxy0emsfy.php(28): correct_bracketing('()')\n#1 /tmp/tmpxy0emsfy.php(32):\
    \ candidate('()')\n#2 /tmp/tmpxy0emsfy.php(46): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpxy0emsfy.php on line 15\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  return count(preg_grep('/[\\(\\)]/', $brackets)) == count($brackets);\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: preg_grep(): Argument #2 ($array) must\
    \ be of type array, string given in /tmp/tmpo_hjxb5z.php:13\nStack trace:\n#0\
    \ /tmp/tmpo_hjxb5z.php(13): preg_grep('/[\\\\(\\\\)]/', '()')\n#1 /tmp/tmpo_hjxb5z.php(17):\
    \ correct_bracketing('()')\n#2 /tmp/tmpo_hjxb5z.php(21): candidate('()')\n#3 /tmp/tmpo_hjxb5z.php(35):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmpo_hjxb5z.php on line 13\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace(\"/[^\\\\)]*/\", \"\", $brackets);\n    $brackets\
    \ = preg_replace(\"/[^\\\\(]*\\\\(/\", \"(\", $brackets);\n    $brackets = preg_replace(\"\
    /\\\\)/\", \"\", $brackets);\n    return $brackets != $brackets;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzlb7rbjj.php:24\n\
    Stack trace:\n#0 /tmp/tmpzlb7rbjj.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpzlb7rbjj.php\
    \ on line 24\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $has_matching_bracket = false;\n  $brackets = preg_replace(\"/[^()]+/\"\
    , \"\", $brackets);\n  list($left, $right) = $brackets;\n  if ($left != ')') {\n\
    \    $has_matching_bracket = $left == '(';\n  }\n  $left++;\n  $right--;\n  while\
    \ ($left < $right) {\n    if ($left > 0 && $left % 2 == 0) {\n      if ($brackets[$left\
    \ - 1] != '(') {\n        $has_matching_bracket = false;\n      }\n    }\n   \
    \ if ($right > 0 && $right % 2 == 0) {\n      if ($brackets[$right + 1] != ')')\
    \ {\n        $has_matching_bracket = false;\n      }\n    }\n    if ($brackets[$left]\
    \ == $brackets[$right]) {\n      $left++;\n      $right--;\n    }\n    else {\n\
    \      $has_matching_bracket = false;\n    }\n  }\n  return $has_matching_bracket;\n\
    }\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqq9kzb6k.php:47\n\
    Stack trace:\n#0 /tmp/tmpqq9kzb6k.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpqq9kzb6k.php\
    \ on line 47\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n\t$open_brackets = array_filter(str_split($brackets));\n\t$closed_brackets\
    \ = array_filter(str_split(str_replace($brackets, \"|\", $brackets)));\n\tsort($open_brackets);\n\
    \tsort($closed_brackets);\n\t$unmatched = array_diff($open_brackets, $closed_brackets);\n\
    \tforeach ($unmatched as $unmatched) {\n\t\treturn false;\n\t}\n\treturn true;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeb9m7e39.php:29\n\
    Stack trace:\n#0 /tmp/tmpeb9m7e39.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpeb9m7e39.php\
    \ on line 29\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n   $count = substr_count($brackets, \")\");\n   for ($i = 0; $i < $count;\
    \ $i++) {\n     $bracket_count = substr_count($brackets, \"(\", $i);\n     if\
    \ ($bracket_count < 1) {\n       return false;\n     }\n     $bracket_count -=\
    \ $i;\n     if ($bracket_count != count($brackets) - $i) {\n       return false;\n\
    \     }\n   }\n   return true;\n }\n \n // returns true if every opening parenthesis\
    \ has a corresponding closing parenthesis.\n // >>> correct_bracketing(\"(\")\n\
    \ // false\n // >>> correct_bracketing(\"()\")\n // true\n // >>> correct_bracketing(\"\
    (()())\")\n // true\n // >>> correct_bracketing(\")(()\")\n // false\n function\
    \ correct_bracketing_2($brackets) {\n   $count = substr_count($brackets, \")\"\
    );\n   for ($i = 0; $i < $count; $i++) {\n     $bracket_count = substr_count($brackets,\
    \ \"(\", $i);\n     if ($bracket_count < 1) {\n       return false;\n     }\n\
    \     $bracket_count -= $i;\n     if ($bracket_count != count($brackets) - $i)\
    \ {\n       return false;\n     }\n   }\n   return true;\n }\n\n // returns true\
    \ if every opening bracket has a corresponding closing bracket.\n // >>> correct_bracketing(\"\
    (\")\n // false\n // >>> correct_bracketing(\"()\")\n // true\n // >>> correct_bracketing(\"\
    (()())\")\n // true\n // >>> correct_bracketing(\")(()\")\n // false\n function\
    \ correct_bracketing_3($brackets) {\n   $count = substr_count($brackets, \")\"\
    );\n   for ($i = 0; $i < $count; $i++) {\n     $bracket_count = substr_count($brackets,\
    \ \"(\", $i);\n     if ($bracket_count < 1) {\n       return false;\n     }\n\
    \     $bracket_count -= $i;\n     if ($bracket_count != count($brackets) - $i)\
    \ {\n       return false;\n     }\n   }\n   return true;\n }\n \n // >>> correct_bracketing(\"\
    (\")\n // false\n // >>> correct_bracketing(\"()\")\n // true\n // >>> correct_bracketing(\"\
    (()())\")\n // true\n // >>> correct_bracketing(\")(()\")\n // false\n function\
    \ correct_bracketing_4($brackets) {\n   $count = substr_count($brackets, \")\"\
    );\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 83 in /tmp/tmp570dxhf9.php on line 105

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = str_replace(array(\"(\", \")\"), array(\"{\", \"}\"), $brackets);\n\
    \    $stack = array();\n    $openBracket = 0;\n    $closeBracket = 0;\n    $lastChar\
    \ = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \")\") {\n            $openBracket--;\n        } else {\n            $openBracket++;\n\
    \        }\n        $closeBracket = strpos($brackets, \")\", $i);\n        if\
    \ (!$closeBracket && !$openBracket) {\n            $closeBracket = strlen($brackets);\n\
    \        }\n        if ($brackets[$i] == \"(\") {\n            if ($openBracket\
    \ > $closeBracket) {\n                return false;\n            }\n        }\
    \ else {\n            if ($closeBracket > $openBracket) {\n                return\
    \ false;\n            }\n        }\n        $lastChar = $brackets[$i];\n     \
    \   $stack[] = $brackets[$i];\n    }\n    return $openBracket < $closeBracket;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp86gfaewu.php:48\n\
    Stack trace:\n#0 /tmp/tmp86gfaewu.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp86gfaewu.php\
    \ on line 48\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $opening_count = substr_count($brackets, \")(\");\n    $closed_count\
    \ = substr_count($brackets, \"()\");\n    return $closed_count === $opening_count;\n\
    }\n</code>\n<|/ a tags=regex,php,html |>\n<| a |>\nYou might be able to accomplish\
    \ this with some sort of recursive function, but regex will probably be faster\
    \ since you're only looking for closing brackets anyways.\n<|/ a tags=regex,php,html\
    \ dscore=0 |>\n<| c |>\nI doubt a regex will work better than a simple recursive\
    \ function.\n<|/ c |>\n<| c |>\n- I'd be very surprised if that's the case, but\
    \ I wouldn't be surprised if PHP would optimize it out, and I'm curious to see\
    \ if anyone else can answer that.\n<|/ c |>\n<| c |>\nA regex is not going to\
    \ work better than a recursive function. Regexes are a lot more expensive to run\
    \ than any simple loop. A regex is probably faster than a loop on a small input\
    \ string but that isn't the case for really large input strings.\n<|/ c |>\n<|\
    \ c |>\n- That's not true. Recursion can be significantly faster than a regex,\
    \ particularly in PHP. Also, this is something that can be easily tested with\
    \ a benchmark test. The only thing that would make regex run faster is if you\
    \ wanted to match nested brackets, which is not the case here.\n<|/ c |>\n<| c\
    \ |>\n- Can you post a benchmark test? I haven't heard anything about how regex\
    \ can be faster than a loop.\n<|/ c |>\n<| a tags=regex,php,html dscore=0 |>\n\
    This question was asked several years ago and now a little bit late, but I thought\
    \ I'd post an answer in case anyone else is looking for the same answer.\nI wanted\
    \ to know how many HTML tags were opened and closed so I made my own:\n<code>\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpcy_cvvy2.php
    on line 17

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = preg_split('/[\\(\\)]/', $brackets);\n    $count =\
    \ 1;\n    foreach ($brackets_array as $pair) {\n        if ($count !== count($brackets_array))\
    \ {\n            $pair .= '()';\n        }\n        if (substr($pair, 0, 1) !==\
    \ '(' || substr($pair, -1) !== '()') {\n            $pair .= '()';\n        }\n\
    \        $count++;\n    }\n    return $count === count($brackets_array);\n}\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpojjl7eby.php:31\n\
    Stack trace:\n#0 /tmp/tmpojjl7eby.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpojjl7eby.php\
    \ on line 31\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace(\"/\\([^()]*\\)/\", \"\", $brackets);\n  $brackets\
    \ = preg_replace(\"/\\)[^()]*\\(\", \"\", $brackets);\n  return $brackets == \"\
    ()\";\n}\n</code>\nThe next thing to do is to replace your opening and closing\
    \ curly brackets with single brackets. You do this by using the same strategy\
    \ as above:\n\nRemove all opening and closing curly brackets.\nRemove all opening\
    \ and closing round brackets.\nIf there are only round brackets, remove those\
    \ too.\nIf there are only curly brackets, remove those too.\nRestore the remaining\
    \ curly brackets.\n\nHere's a function for that:\n<code>\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpwuerhfyr.php
    on line 17

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\" \", $brackets);\n    $last = 0;\n    $len = count($brackets);\n\
    \    for($i = 0; $i < $len; $i++) {\n        if($brackets[$i] !== \"(\" && $brackets[$i]\
    \ !== \")\") {\n            return false;\n        }\n        if($brackets[$i]\
    \ === \"(\" && $brackets[$last] === \")\") {\n            $brackets[$i] = \"\"\
    ;\n            return false;\n        }\n        if($brackets[$i] === \")\" &&\
    \ $brackets[$last] === \"(\") {\n            $brackets[$i] = \"\";\n         \
    \   return false;\n        }\n        $last = $i;\n    }\n    return true;\n}\n\
    \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp06m2gp90.php:38\n\
    Stack trace:\n#0 /tmp/tmp06m2gp90.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp06m2gp90.php\
    \ on line 38\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_count = count($brackets);\n    for ($i = 0; $i < $brackets_count;\
    \ $i++) {\n        // increment $i until we find a closing bracket\n        if\
    \ ($brackets[$i] == \")\")\n            return true;\n        // decrement $i\
    \ until we find an opening bracket\n        else if ($brackets[$i] == \"(\")\n\
    \            return false;\n    }\n    // if all brackets are closed, it can't\
    \ be right\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmprjpc5h5u.php:13\nStack trace:\n\
    #0 /tmp/tmprjpc5h5u.php(27): correct_bracketing('()')\n#1 /tmp/tmprjpc5h5u.php(31):\
    \ candidate('()')\n#2 /tmp/tmprjpc5h5u.php(45): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmprjpc5h5u.php on line 13\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  if (strpos($brackets, \"(\") === false) {\n    return false; // if brackets\
    \ is empty, it's not correctly formatted.\n  }\n\n  // we assume that the brackets\
    \ are already ordered.\n  for ($i = 0, $len = strlen($brackets); $i < $len; $i++)\
    \ {\n    if ($brackets[$i] !== \"(\") {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2id05yrz.php:31\n\
    Stack trace:\n#0 /tmp/tmp2id05yrz.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp2id05yrz.php\
    \ on line 31\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  return $brackets && preg_match('/(^|[^\\[])\\('.preg_replace('/(?<!\\\\\
    \\\\\\\\\\\\)\\\\([^\\\\\\\\)]+\\\\\\\\\\\\\\\\)/', '\\\\1', $brackets). '\\)(?![^\\\
    []*])/', $brackets);\n}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: preg_replace(): Compilation failed: unmatched closing parenthesis\
    \ at offset 22 in /tmp/tmpb007aqef.php on line 13\n\nWarning: preg_replace():\
    \ Compilation failed: unmatched closing parenthesis at offset 22 in /tmp/tmpb007aqef.php\
    \ on line 13\n\nWarning: preg_replace(): Compilation failed: unmatched closing\
    \ parenthesis at offset 22 in /tmp/tmpb007aqef.php on line 13\n\nWarning: preg_replace():\
    \ Compilation failed: unmatched closing parenthesis at offset 22 in /tmp/tmpb007aqef.php\
    \ on line 13\n\nWarning: preg_replace(): Compilation failed: unmatched closing\
    \ parenthesis at offset 22 in /tmp/tmpb007aqef.php on line 13\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpb007aqef.php:24\nStack trace:\n\
    #0 /tmp/tmpb007aqef.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpb007aqef.php\
    \ on line 24\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  return preg_match_all('/\\((\\(?[^()]*\\)?)*\\)/', $brackets, $matches)\
    \ &&\n         $matches[0][1] == $brackets;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmpnay721wx.php on line 14\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpnay721wx.php:22\nStack\
    \ trace:\n#0 /tmp/tmpnay721wx.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpnay721wx.php\
    \ on line 22\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = trim($brackets);\n    $brackets = preg_replace(\"/(^|\\s)\\\
    ((?!\\))/\", '$1', $brackets);\n    return $brackets === $brackets;\n}\n</code>\n\
    <|/ a tags=regex,php,algorithm dscore=2 |>\n<| c |>\nThe only issue with this\
    \ is if you have nested brackets. Your code will say that there is an extra closing\
    \ bracket at \"()()\".\n<|/ c |>\n<| c |>\nThat is true for the test cases I provided,\
    \ but that's not what the original poster asked. You could fix that by changing\
    \ `preg_replace(\"/(^|\\s)\\((?!\\))/\", '$1$2', $brackets);` to `preg_replace(\"\
    /(^|\\s)\\((?!\\))/\", '$1$2', $brackets);`\n<|/ c |>\n<| c |>\nThat will fix\
    \ it for the test cases I provided but not for many others.\n<|/ c |>\n<| a dscore=2\
    \ |>\nHere is a Python solution:\n<code>\ndef brackets_check(string):\n    stack\
    \ = []\n    brackets = 0\n    for ch in string:\n        if ch == '(':\n     \
    \       brackets += 1\n        elif ch == ')':\n            if brackets == 0:\n\
    \                return False\n            else:\n                brackets -=\
    \ 1\n        elif ch == ' ':\n            if brackets == 0:\n                return\
    \ False\n            else:\n                stack.append(ch)\n        else:\n\
    \            stack.append(ch)\n    return brackets == 0\n\ndef brackets_check(s):\n\
    \    stack = []\n    brackets = 0\n    for ch in s:\n        if ch == '(':\n \
    \           brackets += 1\n        elif ch == ')':\n            if brackets ==\
    \ 0:\n                return False\n            else:\n                brackets\
    \ -= 1\n        elif ch == ' ':\n            if brackets == 0:\n             \
    \   return False\n            else:\n                stack.append(ch)\n      \
    \  else:\n            stack.append(ch)\n    return brackets == 0\n\ndef test():\n\
    \    print brackets_check('(()))(())()')\n    print brackets_check('(())()')\n\
    \    print brackets_check('(()))(())')\n    print brackets_check('(()())()()')\n\
    \    print brackets_check('(()())')\n    print brackets_check('(())()()')\n  \
    \  print brackets_check('(())()')\n    print brackets_check('()(()()')\n    print\
    \ brackets_check('()(())')\n    print brackets_check('()(())()')\n    print brackets_check('(()())()(())')\n\
    \    print brackets_check('(()())()(())()\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpegrd9da5.php
    on line 17

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  // find the longest string in the brackets array\n  $len = strlen($brackets);\n\
    \  \n  foreach ($brackets as $key => $val) {\n    if ($val != \"(\" && $val !=\
    \ \")\") return false;\n  }\n  \n  $len -= $len % 2; // remove trailing bracket\
    \ pair\n  \n  for ($i=0; $i < $len; $i++) {\n    if ($brackets[$i] != \"(\" &&\
    \ $brackets[$i] != \")\") return false;\n  }\n  \n  return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: foreach() argument must be of type array|object, string given\
    \ in /tmp/tmpu1xfszzf.php on line 16\n\nWarning: foreach() argument must be of\
    \ type array|object, string given in /tmp/tmpu1xfszzf.php on line 16\n\nWarning:\
    \ foreach() argument must be of type array|object, string given in /tmp/tmpu1xfszzf.php\
    \ on line 16\n\nWarning: foreach() argument must be of type array|object, string\
    \ given in /tmp/tmpu1xfszzf.php on line 16\n\nWarning: foreach() argument must\
    \ be of type array|object, string given in /tmp/tmpu1xfszzf.php on line 16\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpu1xfszzf.php:38\nStack\
    \ trace:\n#0 /tmp/tmpu1xfszzf.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpu1xfszzf.php\
    \ on line 38\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/( *)\\([^)]*\\)/', '$2', $brackets);\n   \
    \ $brackets = preg_replace('/( *)(\\([^)]*\\))/', '$1', $brackets);\n    if ($brackets\
    \ !== $brackets) {\n        $brackets = false;\n    }\n    return $brackets;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg267nf5g.php:26\n\
    Stack trace:\n#0 /tmp/tmpg267nf5g.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpg267nf5g.php\
    \ on line 26\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    return ($brackets == \"()\" || $brackets == \"[]\" || $brackets == \"\
    {}\");\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2pvq6j8p.php:22\n\
    Stack trace:\n#0 /tmp/tmp2pvq6j8p.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2pvq6j8p.php\
    \ on line 22\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n\t$brackets = explode(\"(\",$brackets);\n\t$brackets = array_filter($brackets,\
    \ 'strlen');\n\tforeach($brackets as $bracket){\n\t\t$closing = array_search($bracket,$brackets);\n\
    \t\tif($closing == -1){\n\t\t\treturn false;\n\t\t}\n\t\t$brackets[$closing] =\
    \ null;\n\t}\n\treturn (count($brackets) == 0);\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb1gs452r.php:30\n\
    Stack trace:\n#0 /tmp/tmpb1gs452r.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpb1gs452r.php\
    \ on line 30\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  if (strlen($brackets) === 0)\n    return false;\n  // if we don't have\
    \ balanced brackets, we can return immediately.\n  if (!preg_match('/^([()]{0,3})$/',\
    \ $brackets))\n    return false;\n  $stack = 0;\n  $brackets = str_replace(array(\"\
    (\", \")\"), \"\\\\1\", $brackets);\n  for ($i = 0; $i < strlen($brackets); ++$i)\
    \ {\n    switch ($brackets[$i]) {\n      case \")\":\n        if ($stack < 1)\n\
    \          return false;\n        $stack--;\n        break;\n      case \"(\"\
    :\n        $stack++;\n        break;\n    }\n  }\n  return $stack === 0;\n}\n\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpynr1h74d.php:41\n\
    Stack trace:\n#0 /tmp/tmpynr1h74d.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpynr1h74d.php\
    \ on line 41\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  if (strlen($brackets)==0) {\n    // empty brackets are always allowed\n\
    \    return true;\n  }\n\n  $brackets = preg_replace('/\\[/', '', $brackets);\
    \ // remove opening brackets\n  $brackets = preg_replace('/\\]/', '', $brackets);\
    \ // remove closing brackets\n\n  foreach (preg_split('/[\\(\\)]/', $brackets)\
    \ as $bracket) {\n    if ($bracket[0]=='(') {\n      if ($brackets[$i]!=')') {\
    \ // found a missing closing bracket\n        // ...\n        return false;\n\
    \      }\n    } else { // found an extra closing bracket\n      return false;\n\
    \    }\n  }\n  // if we got here, we have every opening bracket has a corresponding\
    \ closing bracket\n  return true;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis\
    \ is the best answer, I wish I could upvote it more than once.\n<|/ c |>\n<| c\
    \ |>\nI believe this can be simplified by using `in_array()` instead of `foreach()`\n\
    <|/ c |>\n<| c |>\nAgreed. Updated answer with `in_array()` instead of `foreach()`.\n\
    <|/ c |>\n<| c |>\nThis answer has helped me a lot, especially when I was writing\
    \ a function in a language that didn't have a standard library for this. It also\
    \ shows the more common use of `preg_replace()` and what it does in regular expressions.\n\
    <|/ c |>\n<| c |>\nI love this answer, but I think it can be simplified a lot.\
    \ If you're looking for \"if ($brackets[0]=='(')\", you just have to do if ($brackets\
    \ === \"(\"). And if you're looking for \"if ($brackets[$i]==')')\", then just\
    \ do if ($brackets[$i] === \")\").\n<|/ c |>\n<| a tags=regex,php |>\n<code>\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpkiots0wx.php
    on line 34

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    // Count every open bracket\n    $open_count = substr_count($brackets,\
    \ \"(\");\n    // Count every closing bracket\n    $close_count = substr_count($brackets,\
    \ \")\");\n    // Compare their counts\n    if ($open_count != $close_count) return\
    \ false;\n    // If they're the same, return true\n    return true;\n}\n</code>\n\
    <|/ a tags=c#,brackets |>\n<| c |>\n\"(\" and \")\" is considered as a string\
    \ because I wanted to check whether the brackets are closed properly or open (only\
    \ if the brackets are closed and also if they are open). What do you think about\
    \ this?\n<|/ c |>\n<| c |>\nThat sounds about right to me. I'm not saying I necessarily\
    \ agree with you -- but I'm saying that your approach seems to make sense. I'm\
    \ also not saying that my answer is necessarily better than yours, just that it\
    \ seems reasonable that \"()\" might be considered a string, whereas \"(\" might\
    \ not. Since we know that both parentheses open/close are allowed, the second\
    \ case doesn't necessarily have to be treated as a string.\n<|/ c |>\n<| c |>\n\
    I see your point, but I have just one doubt. What if the brackets are \"(()\"\
    \ and the brackets are only closed correctly if they are open? Is it possible\
    \ that this will return a false positive?\n<|/ c |>\n<| c |>\n: If you follow\
    \ my approach, you'll get a false positive when you pass in something like \"\
    (()()())\" -- but if you follow your approach, you'll get a false negative when\
    \ you pass in something like \"((\")\" -- so you might need to adjust the implementation\
    \ to fit your specific requirements.\n<|/ c |>\n<| c |>\nYeah, I understand what\
    \ you meant. I just wanted to point it out. Thank you for your help anyway.\n\
    <|/ c |>\n<| a |>\nThe easiest and most elegant way is to create a method which\
    \ accepts a string, then iterates through it character by character and counts\
    \ the number of brackets in that particular iteration and if the value is not\
    \ equal to a particular number, then you have a missing closing bracket.\n<|/\
    \ a dscore=1 tags=c#,brackets |>\n<| a tags=c#,brackets |>\n<code>\nclass Program\n\
    {\n    static void Main(string[] args)\n    {\n        string s = \"Hello (there)\"\
    ;\n        var res = countBrackets(s);\n    }\n\n    public static int countBrackets(string\
    \ s)\n    {\n        int count = 0;\n        for (int i = 0; i < s.Length; i++)\n\
    \        {\n            if (s[i] == '(') count++;\n            if (\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpx1h2c54s.php
    on line 22

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets_count = count($brackets);\n  for ($i = 0; $i < $brackets_count;\
    \ $i++) {\n    if ($brackets[$i] == \"(\") {\n      $counter = 0;\n      while\
    \ ($brackets[$i + $counter] != \")\") {\n        $counter++;\n      }\n      return\
    \ ($counter == $brackets_count - 1);\n    }\n  }\n  return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmp81il7n30.php:13\nStack trace:\n\
    #0 /tmp/tmp81il7n30.php(27): correct_bracketing('()')\n#1 /tmp/tmp81il7n30.php(31):\
    \ candidate('()')\n#2 /tmp/tmp81il7n30.php(45): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp81il7n30.php on line 13\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  return preg_match('/\\((?=(?:[^)(]|\\([^)(]*\\))*(?![^)(]*\\)))/', $brackets);\n\
    }\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptlvtokqg.php:20\n\
    Stack trace:\n#0 /tmp/tmptlvtokqg.php(34): test()\n#1 {main}\n  thrown in /tmp/tmptlvtokqg.php\
    \ on line 20\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    list($opening, $closing) = explode(\")\", $brackets);\n    return $opening\
    \ === $closing;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4xtq4__d.php:22\n\
    Stack trace:\n#0 /tmp/tmp4xtq4__d.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp4xtq4__d.php\
    \ on line 22\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  global $open_brackets, $closed_brackets;\n  $open_brackets = array_flip($open_brackets);\n\
    \  $closed_brackets = array_flip($closed_brackets);\n  for ($c = 0; $c < strlen($brackets);\
    \ $c++) {\n    if ($open_brackets[$brackets[$c]]) {\n      $open_brackets[$brackets[$c]]\
    \ = false;\n    } else {\n      $closed_brackets[$brackets[$c]] = false;\n   \
    \ }\n  }\n  for ($c = 0; $c < strlen($brackets); $c++) {\n    if ($closed_brackets[$brackets[$c]])\
    \ {\n      $open_brackets[$brackets[$c]] = true;\n    }\n  }\n  return !array_diff_key($open_brackets,\
    \ $closed_brackets);\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_flip(): Argument #1 ($array) must\
    \ be of type array, null given in /tmp/tmpdawxts9e.php:14\nStack trace:\n#0 /tmp/tmpdawxts9e.php(14):\
    \ array_flip(NULL)\n#1 /tmp/tmpdawxts9e.php(32): correct_bracketing('()')\n#2\
    \ /tmp/tmpdawxts9e.php(36): candidate('()')\n#3 /tmp/tmpdawxts9e.php(50): test()\n\
    #4 {main}\n  thrown in /tmp/tmpdawxts9e.php on line 14\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"()\", $brackets);\n    return !array_diff($brackets,\
    \ array_reverse($brackets));\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_jzojzqk.php:26\n\
    Stack trace:\n#0 /tmp/tmp_jzojzqk.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_jzojzqk.php\
    \ on line 26\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  foreach(explode(\")\", $brackets) as $bracket_pair) {\n    list($open,\
    \ $close) = $bracket_pair;\n    $open = substr($open, 1, -1);\n    if ($open !=\
    \ $close) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: substr(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmp6_85l3sj.php on line 15


    Deprecated: substr(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmp6_85l3sj.php on line 15


    Deprecated: substr(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmp6_85l3sj.php on line 15


    Deprecated: substr(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmp6_85l3sj.php on line 15


    Deprecated: substr(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmp6_85l3sj.php on line 15


    Deprecated: substr(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmp6_85l3sj.php on line 15


    Deprecated: substr(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmp6_85l3sj.php on line 15


    Deprecated: substr(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmp6_85l3sj.php on line 15


    Deprecated: substr(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmp6_85l3sj.php on line 15


    Deprecated: substr(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmp6_85l3sj.php on line 15


    Deprecated: substr(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmp6_85l3sj.php on line 15


    Deprecated: substr(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmp6_85l3sj.php on line 15


    Deprecated: substr(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmp6_85l3sj.php on line 15


    Deprecated: substr(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmp6_85l3sj.php on line 15


    Deprecated: substr(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmp6_85l3sj.php on line 15


    Deprecated: substr(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmp6_85l3sj.php on line 15


    Deprecated: substr(): Passing n'
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"(\", $brackets);\n    $length = count($brackets);\n\
    \    for ($i = 0; $i < $length; $i++) {\n        if ($brackets[$i][0] == $brackets[$i-1][1])\
    \ {\n            $brackets[$i][1] = $brackets[$i][2];\n            $brackets[$i][1]--;\n\
    \        }\n    }\n    return $brackets[0][0] == $brackets[1][1];\n}\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Uninitialized string offset 0 in /tmp/tmpyd18nr2c.php on line\
    \ 16\n\nWarning: Undefined array key -1 in /tmp/tmpyd18nr2c.php on line 16\n\n\
    Warning: Trying to access array offset on value of type null in /tmp/tmpyd18nr2c.php\
    \ on line 16\n\nWarning: Uninitialized string offset 2 in /tmp/tmpyd18nr2c.php\
    \ on line 17\n\nFatal error: Uncaught Error: Cannot assign an empty string to\
    \ a string offset in /tmp/tmpyd18nr2c.php:17\nStack trace:\n#0 /tmp/tmpyd18nr2c.php(24):\
    \ correct_bracketing(Array)\n#1 /tmp/tmpyd18nr2c.php(28): candidate('()')\n#2\
    \ /tmp/tmpyd18nr2c.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpyd18nr2c.php\
    \ on line 17\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $opening_brackets = preg_match_all('/\\((.*)\\)/', $brackets);\n    $closing_brackets\
    \ = preg_match_all('/\\)(.*\\)/', $brackets);\n    if ($opening_brackets === 0\
    \ && $closing_brackets === 0) return true;\n    return false;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nI'm a little confused by this answer. I don't see how it can\
    \ solve the problem of how to identify the 'correct' number of parentheses to\
    \ open before a given closing parenthesis.\n<|/ c |>\n<| c |>\nThe code works\
    \ perfectly for bracketing (a parenthesis pair). But it fails for the original\
    \ problem of finding correct opening and closing parenthesis count.\n<|/ c |>\n\
    <| c |>\nI see what you mean. Maybe it wasn't clear, but I was assuming that each\
    \ opening bracket pair would be paired with exactly one closing bracket pair,\
    \ and it would be ok to leave out the last closing bracket if the pair was unbalanced.\
    \ But that assumption is false.\n<|/ c |>\n<| c |>\n: yeah, that's what I'm also\
    \ thinking. Not sure the best way to handle that though.\n<|/ c |>\n<| a |>\n\
    You can do this in O(n log n) time:\nFirst, sort the string. There are many ways\
    \ to do this. I would just use some quick sort.\nThen start from the beginning.\
    \ \n<code>\nFor i = 1 to n\n    If S[i] == '('\n        Add 1 to open counter\n\
    \    Else If S[i] == ')'\n        If open counter is 0 or open counter is 1\n\
    \            Add 1 to closed counter\n        Else\n            Subtract 1 from\
    \ open counter\n            Subtract 1 from closed counter\n        End If\n \
    \   End If\nEnd For\n</code>\nThat should be an O(n log n) algorithm.\n<|/ a dscore=1\
    \ tags=algorithm,php,parentheses |>\n<| c |>\nWhat is `If open counter is 0 or\
    \ open counter is 1`?\n<|/ c |>\n<| c |>\nIt's just an if statement. The open\
    \ counter variable is incremented in the first if statement.\n<|/ c |>\n<| c |>\n\
    It's not clear how you're counting the number of open and closed parentheses in\
    \ `O(n log n)` time.\n<|/ c |>\n<| c |>\nO(n log n) time means the algorithm takes\
    \ time proportional to the logarithm of n.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ for \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp88gdbu3q.php
    on line 18

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  // TODO(cp): This won't work on nested brackets. E.g.\n  // >>> correct_bracketing(\"\
    ((()))\")\n  // True\n  // This can be solved by making a stack of opening brackets\n\
    \  // and popping them off as we find closing brackets.\n  return preg_match(\"\
    /\\({1,}.*\\){1,}/\", $brackets) === 1;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpszrbzm0c.php:30\n\
    Stack trace:\n#0 /tmp/tmpszrbzm0c.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpszrbzm0c.php\
    \ on line 30\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n\t// make sure brackets is a string\n\tif (!is_string($brackets)) return\
    \ FALSE;\n\t// make sure brackets is well formed\n\tif (!is_string($brackets))\
    \ return FALSE;\n\t$brackets = explode(')', $brackets);\n\t// make sure every\
    \ opening bracket has a corresponding closing bracket\n\tforeach ($brackets as\
    \ $k=>$b) {\n\t\t$b = trim($b);\n\t\tif (!empty($b) && $b[0] != '(') return FALSE;\n\
    \t}\n\treturn TRUE;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx8xf7fza.php:35\n\
    Stack trace:\n#0 /tmp/tmpx8xf7fza.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpx8xf7fza.php\
    \ on line 35\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\s+/', '', $brackets);\n    $length = strlen($brackets);\n\
    \    $ok = true;\n    for($i = 0; $i < $length; $i++) {\n        $c = $brackets[$i];\n\
    \        if($c !== \"(\") {\n            $ok = false;\n            break;\n  \
    \      }\n    }\n    return $ok;\n}\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz911jvnb.php:30\n\
    Stack trace:\n#0 /tmp/tmpz911jvnb.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpz911jvnb.php\
    \ on line 30\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $bracket_count = substr_count($brackets, \")\");\n    $unclosed_brackets\
    \ = substr_count($brackets, \"(\") - $bracket_count;\n    $open_brackets = substr_count($brackets,\
    \ \"(\");\n    $all_open = substr_count($brackets, \"(\") >= $open_brackets;\n\
    \    return $all_open && $unclosed_brackets == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo30sxnt7.php:30\n\
    Stack trace:\n#0 /tmp/tmpo30sxnt7.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpo30sxnt7.php\
    \ on line 30\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    return preg_match(\"/^[\\(\\)]+$/\", $brackets);\n}\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp774svs5h.php:20\n\
    Stack trace:\n#0 /tmp/tmp774svs5h.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp774svs5h.php\
    \ on line 20\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\" \", $brackets);\n  foreach ($brackets as $key =>\
    \ $bracket_pair) {\n    // make sure all brackets are paired correctly.\n    if\
    \ ($key != 0 && $bracket_pair != $brackets[$key - 1]) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_jwbvah.php:32\n\
    Stack trace:\n#0 /tmp/tmpa_jwbvah.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpa_jwbvah.php\
    \ on line 32\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $bracket_open = 0;\n  $bracket_close = 0;\n  $bracket_depth = 0;\n  $bracket_open\
    \ = substr_count($brackets, \"(\");\n  $bracket_close = substr_count($brackets,\
    \ \")\");\n  $bracket_depth = substr_count($brackets, \"(\") - $bracket_open;\n\
    \  return ($bracket_depth == 0);\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsdg86k6r.php:31\n\
    Stack trace:\n#0 /tmp/tmpsdg86k6r.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpsdg86k6r.php\
    \ on line 31\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n\t// count the number of opening brackets.\n\t$opening_brackets = count($brackets);\n\
    \t// loop through the brackets string, keeping track of how many brackets we have.\n\
    \t$i = 0;\n\twhile ($i < $opening_brackets) {\n\t\t// increment i when we are\
    \ inside brackets.\n\t\tif ($brackets[$i] == \"(\") {\n\t\t\t$i++;\n\t\t}\n\t\t\
    // decrement i when we are outside brackets.\n\t\telse if ($brackets[$i] == \"\
    )\") {\n\t\t\t$i--;\n\t\t}\n\t\t// skip over any whitespace\n\t\telse if ($brackets[$i]\
    \ == \" \") {\n\t\t\t$i++;\n\t\t}\n\t\t// increment i if we're not inside brackets.\n\
    \t\telse {\n\t\t\t$i++;\n\t\t}\n\t}\n\t// we should be left with 0 open brackets\n\
    \treturn ($opening_brackets == 0);\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmpl0ahpo2o.php:14\nStack trace:\n\
    #0 /tmp/tmpl0ahpo2o.php(40): correct_bracketing('()')\n#1 /tmp/tmpl0ahpo2o.php(44):\
    \ candidate('()')\n#2 /tmp/tmpl0ahpo2o.php(58): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpl0ahpo2o.php on line 14\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  list($open, $close) = explode(')', $brackets);\n  return $open == ')' &&\
    \ $close == '(';\n}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzulb7_76.php:21\n\
    Stack trace:\n#0 /tmp/tmpzulb7_76.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpzulb7_76.php\
    \ on line 21\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n\t$brackets = explode(',', $brackets);\n\tsort($brackets);\n\treturn (end($brackets)\
    \ != $brackets[0]);\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ngis0n5.php:23\n\
    Stack trace:\n#0 /tmp/tmp1ngis0n5.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp1ngis0n5.php\
    \ on line 23\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $open_brackets = explode('(', $brackets);\n  $closed_brackets = explode(')',\
    \ $brackets);\n  $open_brackets_count = count($open_brackets);\n  $closed_brackets_count\
    \ = count($closed_brackets);\n  for ($i = 0; $i < $open_brackets_count; $i++)\
    \ {\n    for ($j = $i + 1; $j < $closed_brackets_count; $j++) {\n      if ($open_brackets[$i]\
    \ == $closed_brackets[$j]) {\n        return false;\n      }\n    }\n  }\n  return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7obfmmf3.php:32\n\
    Stack trace:\n#0 /tmp/tmp7obfmmf3.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp7obfmmf3.php\
    \ on line 32\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\)/', '', $brackets);\n  return preg_match('/\\\
    (' . $brackets . '\\)/', $brackets);\n}\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: preg_match(): Compilation failed: missing closing parenthesis\
    \ at offset 5 in /tmp/tmpbi9zun26.php on line 14\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpbi9zun26.php:21\nStack trace:\n#0 /tmp/tmpbi9zun26.php(35):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpbi9zun26.php on line 21\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array_filter(str_split($brackets));\n  $closing_brackets\
    \ = array_filter(array_flip($opening_brackets));\n  foreach ($opening_brackets\
    \ as $opening_bracket) {\n    // If this opening bracket is \"closed\", then the\
    \ corresponding closing\n    // bracket must be in the set of brackets we are\
    \ checking.\n    if (!isset($closing_brackets[$opening_bracket])) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpebej6z9i.php:30\n\
    Stack trace:\n#0 /tmp/tmpebej6z9i.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpebej6z9i.php\
    \ on line 30\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  foreach (str_split($brackets) as $char)\
    \ {\n    if ($char == '(') $opening_brackets[] = $char;\n    if ($char == ')')\
    \ $opening_brackets[] = $char;\n  }\n  if (count($opening_brackets) == count(str_split($brackets)))\
    \ {\n    // No changes were necessary.\n    return true;\n  } else {\n    // There\
    \ were some missing brackets\n    return false;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo7p7047x.php:36\n\
    Stack trace:\n#0 /tmp/tmpo7p7047x.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpo7p7047x.php\
    \ on line 36\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  if ($brackets == '') {\n    return true;\n  }\n  // check each character\
    \ in brackets\n  $brackets_array = explode(')', $brackets);\n  foreach ($brackets_array\
    \ as $b) {\n    // if the next character is not the opening bracket\n    if ($b\
    \ > $brackets_array[$b - 1]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: string -\
    \ int in /tmp/tmpwip47dfs.php:20\nStack trace:\n#0 /tmp/tmpwip47dfs.php(28): correct_bracketing('()')\n\
    #1 /tmp/tmpwip47dfs.php(32): candidate('()')\n#2 /tmp/tmpwip47dfs.php(46): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwip47dfs.php on line 20\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  return\n    ($brackets != '(') &&\n    ($brackets != ')') &&\n    ($brackets\
    \ != \"'\") &&\n    ($brackets != \"`\");\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiqdx3iv5.php:29\n\
    Stack trace:\n#0 /tmp/tmpiqdx3iv5.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpiqdx3iv5.php\
    \ on line 29\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\" \", $brackets);\n    $last_bracket_count = 0;\n\
    \    foreach ($brackets as $bracket) {\n        if ($bracket == \"(\") {\n   \
    \         $last_bracket_count++;\n        } elseif ($bracket == \")\") {\n   \
    \         $last_bracket_count--;\n        }\n        if ($last_bracket_count <\
    \ 0) {\n            return false;\n        }\n    }\n    return true;\n}\n</code>\n\
    (I apologize for the strange indentation, but it makes the code easier to read,\
    \ and is much easier to indent than having to use 4 spaces per indent level.)\n\
    I hope this helps.\n<|/ a |>\n<| a dscore=1 |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpmtxwvc8i.php
    on line 27

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\\\(([^\\\\)]*)\\\\)/', '$1', $brackets);\n\
    \  $brackets = preg_replace('/\\\\)([^\\\\(]*)\\\\(/', '$1', $brackets);\n  return\
    \ ($brackets !== $brackets);\n}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpklesz9wf.php:22\n\
    Stack trace:\n#0 /tmp/tmpklesz9wf.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpklesz9wf.php\
    \ on line 22\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    return !(strpos($brackets, '(') !== false && strpos($brackets, ')') !==\
    \ false);\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsngf2w6i.php:21\n\
    Stack trace:\n#0 /tmp/tmpsngf2w6i.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpsngf2w6i.php\
    \ on line 21\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = str_replace(array(\"(\", \")\"), array(\"[[[\", \"]]]\"), $brackets);\n\
    \  $brackets = explode(\"[[[\", $brackets);\n  return end($brackets) !== array_pop($brackets);\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7zksr2xr.php:23\n\
    Stack trace:\n#0 /tmp/tmp7zksr2xr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7zksr2xr.php\
    \ on line 23\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    // TODO: Write this function without using recursion.\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps3_zxruh.php:21\n\
    Stack trace:\n#0 /tmp/tmps3_zxruh.php(35): test()\n#1 {main}\n  thrown in /tmp/tmps3_zxruh.php\
    \ on line 21\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $open = array();\n  $close = array();\n\n  for($i = 0; $i < strlen($brackets);\
    \ $i++){\n    $open[strpos($brackets, $brackets[$i])] = true;\n  }\n\n  $brackets\
    \ = str_replace(\"(\" . $brackets . \")\", \"\", $brackets);\n  $brackets = str_replace(\"\
    )\" . $brackets . \"]\", \"\", $brackets);\n\n  for($i = 0; $i < strlen($brackets);\
    \ $i++){\n    $close[strpos($brackets, $brackets[$i])] = true;\n  }\n\n  return\
    \ count(array_diff(array_keys($open), array_keys($close)));\n}\n</code>\n<|/ a\
    \ tags=python,ruby,php dscore=2 |>\n<| a dscore=1 |>\nIn Ruby:\n<code>\na = \"\
    ((\"\na.scan(/\\(|\\)(?=\\))/).all?{|x| x == '('}.to_s\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpah0ichnz.php
    on line 29

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = array();\n    $i = 0;\n    $len = strlen($brackets);\n    $openings\
    \ = array();\n\n    for ($j=0; $j < $len; $j++) {\n        if ($brackets[$j] ==\
    \ '(') {\n            $openings[] = $j;\n            $stack[] = $j;\n        }\n\
    \        else if ($brackets[$j] == ')') {\n            if (count($stack) == 0)\
    \ {\n                return false;\n            }\n            while (count($stack)\
    \ > 0) {\n                if ($stack[count($stack) - 1] == $j) {\n           \
    \         array_pop($stack);\n                }\n                else {\n    \
    \                break;\n                }\n            }\n        }\n    }\n\n\
    \    if (count($stack) != 0) {\n        return false;\n    }\n    else {\n   \
    \     if (count($openings) == 0) {\n            return true;\n        }\n    \
    \    else {\n            foreach ($openings as $open) {\n                if ($open\
    \ == $i) {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n}\n</code>\n<|/ a |>\n<| c |>\nHmm, it doesn't seem to be working\
    \ correctly. It says bracketing(\"(()())\") -> false but bracketing(\"()())\"\
    ) -> true. bracketing(\"(())\") -> false and bracketing(\"()\") -> false\n<|/\
    \ c |>\n<| c |>\nThanks for reporting this! I fixed it, and it now works correctly.\n\
    <|/ c |>\n<| a |>\nTry this :\n<code>\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpbmr53z0d.php
    on line 54

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = array();\n    $opening = FALSE;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            if ($opening) {\n\
    \                $stack[] = $brackets[$i];\n            } else {\n           \
    \     $opening = TRUE;\n            }\n        } else if ($brackets[$i] == \"\
    )\") {\n            if (!$opening) {\n                return FALSE;\n        \
    \    }\n            $opening = FALSE;\n        }\n    }\n    if ($opening) {\n\
    \        return FALSE;\n    }\n    return TRUE;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6bfzt358.php:41\n\
    Stack trace:\n#0 /tmp/tmp6bfzt358.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp6bfzt358.php\
    \ on line 41\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n\treturn(count(preg_split('/()/', $brackets)) == count(array_filter(preg_split('/()/',\
    \ $brackets)));\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token ";" in /tmp/tmpp5lh7xx0.php on line
    13

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    return preg_match('/\\)\\s*\\(', $brackets) ? true : false;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThe OP asked for a PHP solution. He didn't say anything\
    \ about Python, JavaScript or any other language.\n<|/ c |>\n<| c |>\n`preg_match('/(\\\
    s*\\()/', '(', 0);` returns 0, but `preg_match('/(\\s*\\()/', '(', 1);` returns\
    \ 1.\n<|/ c |>\n<| c |>\n: It looks like you are right. The OP did not ask for\
    \ a PHP solution.\n<|/ c |>\n<| a dscore=2 |>\nYou can use preg_match function\
    \ with flag MULTIPLE\n<code>\n<?php\n$string = \"(()()())\";\nif(preg_match('/(\\\
    (+)+/', $string, $matches)) {\n    var_dump($matches);\n}\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpl9jbeukx.php
    on line 15

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"(\",$brackets);\n    $brackets_count = count($brackets);\n\
    \    for ($i=0; $i < $brackets_count; $i++) {\n        $current_bracket = $brackets[$i];\n\
    \        for($j=$i+1; $j < $brackets_count; $j++) {\n            $next_bracket\
    \ = $brackets[$j];\n            if ($current_bracket == $next_bracket) {\n   \
    \             $brackets[$j] = $current_bracket;\n            }\n        }\n  \
    \  }\n    $brackets = implode(\"(\",$brackets);\n    return $brackets == \"()\"\
    ;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqa_xlj3l.php:34\n\
    Stack trace:\n#0 /tmp/tmpqa_xlj3l.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpqa_xlj3l.php\
    \ on line 34\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  foreach (str_split($brackets) as $key => $value) {\n    if ($value != \"\
    (\") {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqdawy5vp.php:26\n\
    Stack trace:\n#0 /tmp/tmpqdawy5vp.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpqdawy5vp.php\
    \ on line 26\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = str_replace(array(\")\",\"(\",\")(\"), array(\"\", \"(\", \"\
    \"),\")(\"), $brackets);\n  return preg_match_all(\"/\\(([\\r\\n]?)/\", $brackets);\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "," in /tmp/tmpjkl6du9i.php on line
    13

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n\t$opening = strlen($brackets);\n\t$closing = 0;\n\t$brackets_array = preg_split(\"\
    /[\\(\\)]/\", $brackets);\n\tforeach ($brackets_array as $bracket) {\n\t\tif ($bracket\
    \ != $opening) {\n\t\t\t$closing++;\n\t\t}\n\t\tif ($closing == $opening) {\n\t\
    \t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw01th4u5.php:36\n\
    Stack trace:\n#0 /tmp/tmpw01th4u5.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpw01th4u5.php\
    \ on line 36\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  return $brackets ? \"()\" : \"(\" ;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbwxcagw6.php:21\n\
    Stack trace:\n#0 /tmp/tmpbwxcagw6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpbwxcagw6.php\
    \ on line 21\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    return preg_match('/\\(([^()]+)\\)/', $brackets, $match) == 1 &&\n  \
    \      !preg_match('/\\(([^()]+)\\)/', $brackets, $match2);\n}\n</code>\n<|/ a\
    \ tags=php,regex |>\n<| a dscore=1 |>\nThis is an old question, but I came across\
    \ this while I was writing a PHP script to validate the syntax of a PHP file.\n\
    The other answers given so far are great (using regex), but as I needed to check\
    \ more than one type of bracket I wanted to use the recursive function to check\
    \ all cases, rather than write a big regex. Here is what I came up with:\n<code>\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpde85veq2.php
    on line 16

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  for ($i = 0; $i < strlen($brackets); ++$i) {\n    if ($brackets[$i] !=\
    \ ')') {\n      if ($brackets[$i] != '(') {\n        return false;\n      }\n\
    \    } else {\n      if ($brackets[$i] != ')') {\n        return false;\n    \
    \  }\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeuu9kj2y.php:36\n\
    Stack trace:\n#0 /tmp/tmpeuu9kj2y.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpeuu9kj2y.php\
    \ on line 36\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = trim($brackets);\n    $open_brackets = array_filter(explode(\"\
    ,\", $brackets));\n    foreach ($open_brackets as &$bracket) {\n        $bracket\
    \ = trim($bracket);\n    }\n    return count($open_brackets) == count(array_unique(array_filter($open_brackets)));\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgkvdzqjs.php:30\n\
    Stack trace:\n#0 /tmp/tmpgkvdzqjs.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpgkvdzqjs.php\
    \ on line 30\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    // If no brackets are provided, then there is no correct answer.\n  \
    \  if (!$brackets) {\n        return false;\n    }\n    // If there is only one\
    \ opening bracket, there is no correct answer.\n    if (strlen($brackets) == 1)\
    \ {\n        return false;\n    }\n    // If there are multiple opening brackets,\
    \ there must be at least two\n    // closing brackets.\n    $num_opening_brackets\
    \ = substr_count($brackets, '(');\n    if ($num_opening_brackets < 2) {\n    \
    \    return false;\n    }\n    // If the number of closing brackets does not equal\
    \ the number of\n    // opening brackets, then there is an error in the bracketing.\n\
    \    $num_closing_brackets = substr_count($brackets, ')');\n    if ($num_closing_brackets\
    \ != $num_opening_brackets) {\n        return false;\n    }\n    // If the brackets\
    \ are in the correct order, then the answer is correct.\n    $closing_bracket\
    \ = substr($brackets, -1);\n    if ($brackets[0] == $closing_bracket) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwebgyqbu.php:46\n\
    Stack trace:\n#0 /tmp/tmpwebgyqbu.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpwebgyqbu.php\
    \ on line 46\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = strtolower($brackets);\n  $brackets = str_replace(\" \", \"\
    \", $brackets);\n  if (strlen($brackets) < 2)\n    return true;\n  if ($brackets[0]\
    \ != '(' || $brackets[strlen($brackets) - 1] != ')')\n    return true;\n  return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcwibt_mr.php:27\n\
    Stack trace:\n#0 /tmp/tmpcwibt_mr.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpcwibt_mr.php\
    \ on line 27\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    // Remove parens around the brackets.\n    $brackets = preg_replace('/^\\\
    ((.+)\\)$/', '$1', $brackets);\n    $brackets = preg_replace('/\\((.+)\\)/', '$1',\
    \ $brackets);\n    $brackets = preg_replace('/^(.+)\\((.+)\\)$/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/(.+)\\((.+)\\)/', '$1', $brackets);\n    // Remove\
    \ brackets if they are not empty.\n    $brackets = preg_replace('/^\\((.+)\\)$/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\((.+)\\)$/', '', $brackets);\n\
    \    $brackets = preg_replace('/^(.+)\\((.+)\\)$/', '', $brackets);\n    $brackets\
    \ = preg_replace('/(.+)\\((.+)\\)/', '', $brackets);\n    // Remove any whitespace\
    \ between brackets.\n    $brackets = preg_replace('/\\s+/', '', $brackets);\n\
    \    // Return whether all brackets are balanced.\n    return $brackets === '()'\
    \ || $brackets === '{}';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppxwcndiz.php:35\n\
    Stack trace:\n#0 /tmp/tmppxwcndiz.php(48): test()\n#1 {main}\n  thrown in /tmp/tmppxwcndiz.php\
    \ on line 35\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $has_correct_brackets = false;\n  $num_opening_brackets = count_opening_brackets($brackets);\n\
    \  for ($i = 0; $i < $num_opening_brackets; ++$i) {\n    $has_correct_brackets\
    \ |= check_if_brackets_are_in_order($brackets, $i);\n  }\n  return $has_correct_brackets;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_opening_brackets()\
    \ in /tmp/tmpqygoseh9.php:14\nStack trace:\n#0 /tmp/tmpqygoseh9.php(22): correct_bracketing('()')\n\
    #1 /tmp/tmpqygoseh9.php(26): candidate('()')\n#2 /tmp/tmpqygoseh9.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqygoseh9.php on line 14\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    if ($brackets == \"\") {\n        return false;\n    }\n\n    // The\
    \ bracketing of a string is\n    // the length of the string after removing any\
    \ non-bracketing characters\n    // except brackets, and ignoring parentheses\
    \ inside brackets.\n    $brackets_length = strlen($brackets) - 1;\n    $brackets_length\
    \ -= count(preg_split(\"/([^(]*\\([^(]*\\))/\", $brackets));\n\n    return ($brackets_length\
    \ == 0);\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz410yjpf.php:31\n\
    Stack trace:\n#0 /tmp/tmpz410yjpf.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpz410yjpf.php\
    \ on line 31\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  // Count parentheses and brackets.\n  $parens = 0;\n  $brackets = 0;\n\
    \  // Scan the string.\n  for ($i = 0, $len = strlen($brackets); $i < $len; $i++)\
    \ {\n    switch ($brackets[$i]) {\n      case ')':\n        if ($parens == 0)\
    \ {\n          return false;\n        }\n        $parens--;\n        break;\n\n\
    \      case '(':\n        $parens++;\n        break;\n\n      case '[':\n    \
    \  case ']':\n      case '{':\n      case '}':\n      case '<':\n      case '>':\n\
    \        if ($brackets == 0) {\n          return false;\n        }\n        $brackets--;\n\
    \        break;\n    }\n  }\n  // If no valid brackets are found, the parentheses\
    \ must balance.\n  return ($parens == 0 && $brackets == 0);\n}\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Trying to access array offset on value of type int in /tmp/tmpdpx7ey4d.php\
    \ on line 18\n\nWarning: Trying to access array offset on value of type int in\
    \ /tmp/tmpdpx7ey4d.php on line 18\n\nWarning: Trying to access array offset on\
    \ value of type int in /tmp/tmpdpx7ey4d.php on line 18\n\nWarning: Trying to access\
    \ array offset on value of type int in /tmp/tmpdpx7ey4d.php on line 18\n\nWarning:\
    \ Trying to access array offset on value of type int in /tmp/tmpdpx7ey4d.php on\
    \ line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpx7ey4d.php:55\n\
    Stack trace:\n#0 /tmp/tmpdpx7ey4d.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpdpx7ey4d.php\
    \ on line 55\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $opening_brackets = array();\n    $closing_brackets = array();\n    $bracket_stack\
    \ = array();\n    $i = 0;\n    $len = strlen($brackets);\n    while ($i < $len)\
    \ {\n        $bracket = $brackets[$i];\n        if (!isset($opening_brackets[$bracket]))\
    \ {\n            $opening_brackets[$bracket] = 0;\n        }\n        if ($opening_brackets[$bracket]\
    \ == 0) {\n            $closing_brackets[$bracket] = 1;\n        } else {\n  \
    \          $closing_brackets[$bracket]++;\n        }\n        $i++;\n    }\n \
    \   while ($opening_brackets && $opening_brackets == $closing_brackets) {\n  \
    \      $opening_brackets = array();\n        $closing_brackets = array();\n  \
    \      array_pop($bracket_stack);\n    }\n    if ($opening_brackets != $closing_brackets)\
    \ {\n        return false;\n    }\n    if ($opening_brackets) {\n        $i =\
    \ 0;\n        $len = count($opening_brackets);\n        while ($i < $len) {\n\
    \            $bracket = $brackets[$i];\n            if ($opening_brackets[$bracket]\
    \ != $closing_brackets[$bracket]) {\n                return false;\n         \
    \   }\n            $i++;\n        }\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjqk3835d.php:58\n\
    Stack trace:\n#0 /tmp/tmpjqk3835d.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpjqk3835d.php\
    \ on line 58\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i] !=\
    \ ')' && $brackets[$i] != '(') return false;\n\t\tif ($brackets[$i] == ')') $i++;\n\
    \t}\n\treturn true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0tym34j_.php:29\n\
    Stack trace:\n#0 /tmp/tmp0tym34j_.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0tym34j_.php\
    \ on line 29\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    foreach (explode(\",\", $brackets) as $b) {\n        if (strlen($b) !=\
    \ 1) return false;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxdih2tp1.php:24\n\
    Stack trace:\n#0 /tmp/tmpxdih2tp1.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpxdih2tp1.php\
    \ on line 24\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  return strpos(preg_replace('/^[({<]?/', '', $brackets), '(') !== strpos(preg_replace('/^[)}>?/',\
    \ '', $brackets), '(');\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: preg_replace(): Compilation failed: missing terminating ] for\
    \ character class at offset 6 in /tmp/tmpnafl4f17.php on line 13\n\nDeprecated:\
    \ strpos(): Passing null to parameter #1 ($haystack) of type string is deprecated\
    \ in /tmp/tmpnafl4f17.php on line 13\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpnafl4f17.php:21\nStack trace:\n#0 /tmp/tmpnafl4f17.php(35):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnafl4f17.php on line 21\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $open_brackets = array();\n  $closed_brackets = array();\n  $brackets_stack\
    \ = array();\n\n  foreach ($brackets as $b) {\n    $b = strtolower($b);\n    if\
    \ ($b !== \"(\") {\n      continue;\n    }\n\n    // If we're at the start of\
    \ a new bracket, push its name on the stack.\n    if (!empty($brackets_stack))\
    \ {\n      $brackets_stack[] = $b;\n    }\n\n    // If we're not at the start\
    \ of a new bracket, add it to the open brackets list.\n    else {\n      $open_brackets[]\
    \ = $b;\n    }\n\n    // If we're at the end of the open brackets list.\n    if\
    \ (empty($open_brackets)) {\n      return true;\n    }\n  }\n\n  // If we're not\
    \ at the start of a new bracket, there were unclosed brackets.\n  // If no brackets\
    \ were open, everything was closed properly.\n  if (empty($open_brackets)) {\n\
    \    return false;\n  }\n\n  // Check the last open bracket.\n  $last = array_pop($open_brackets);\n\
    \  if ($last !== \")\") {\n    return false;\n  }\n\n  // Check the close brackets.\n\
    \  while (!empty($open_brackets)) {\n    $last = array_pop($closed_brackets);\n\
    \    if ($last !== array_pop($open_brackets)) {\n      return false;\n    }\n\
    \  }\n\n  // All brackets were closed.\n  return true;\n}\n</code>\n<|/ a tags=php\
    \ |>\n<| a tags=php dscore=0 |>\nYou can use recursive function :\n<code>\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpgd5gdr4w.php
    on line 62

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $open_brackets = preg_match_all('/\\('.preg_quote($brackets).'\\)/',\
    \ $brackets);\n    $closed_brackets = preg_match_all('/\\))/', $brackets);\n \
    \   return ($open_brackets == $closed_brackets);\n}\n</code>\n<|/ a tags=parsing,php,regex\
    \ |>\n<| c |>\nThanks a lot! This is great solution.\n<|/ c |>\n<| a tags=parsing,php,regex\
    \ |>\nYou could use the strpos() function to search for matching brackets, like\
    \ this:\n<code>\n<?php\n\n$s = '(Hello)';\n\nif (strpos($s, '(') !== FALSE)\n\
    \    echo 'Found one opening';\nelse\n    echo 'No opening';\n</code>\nOr you\
    \ could use preg_match() with a pattern like this:\n<code>\n<?php\n\n$s = '(Hello)';\n\
    \n$pattern = '/\\(.*?\\)/';\n\nif (preg_match($pattern, $s, $matches))\n    echo\
    \ 'Found one';\nelse\n    echo 'No match';\n</code>\n<|/ a dscore=3 |>\n<| c |>\n\
    Thanks for answer. However this is not exactly what I need. I need to know how\
    \ many brackets are closed in original string.\n<|/ c |>\n<| c |>\nIf you wanted\
    \ to find all matching brackets, you could do something like this: `$s = '(Hello)';\n\
    \n$pattern = '/\\((.*?)\\)/';\n\nif (preg_match_all($pattern, $s, $matches))\n\
    \    var_dump($matches);`\n<|/ c |>\n<| c |>\nThanks, this is really usefull.\n\
    <|/ c |>\n<| a tags=parsing,php,regex dscore=2 |>\nAs a side note, if you know\
    \ that you're going to be searching for parenthesis, you can also use a regular\
    \ expression to do an exact match like so:\n<code>\n$s = '(Hello)';\nif(preg_match('/^\\\
    ((.*\\))\\)$/', $s, $m)) {\n    // parenthesis match\n}\n</code>\n<|/ a |>\n<|\
    \ a dscore=1 |>\nUse this regex:\n<code>\n'/\\(.*?\\)/'\n</code>\n<|/ a tags=parsing,php,regex\
    \ |>\n<| c |>\nThanks for answer. However this is not exactly what I need. I need\
    \ to know how many brackets are closed in original string.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n$pattern = '/\\\\(.*\\\\)/';\n$string = '(Hello)';\npreg_match_all\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp6l0uua7i.php
    on line 17

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    return str_replace(array(\"(\", \")\"), array(\"[\", \"]\"), $brackets)\
    \ == $brackets;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppkvq_kgt.php:21\n\
    Stack trace:\n#0 /tmp/tmppkvq_kgt.php(35): test()\n#1 {main}\n  thrown in /tmp/tmppkvq_kgt.php\
    \ on line 21\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = str_replace(\" \", \"\", $brackets);\n    $brackets = str_replace(\"\
    (\", \"[\", $brackets);\n    $brackets = str_replace(\")\", \"]\", $brackets);\n\
    \    return strpos($brackets, \"[\") === strlen($brackets) - 1;\n}\n</code>\n\
    <|/ a dscore=5 tags=php,string,regex,arrays |>\n<| c |>\nThis looks like the solution\
    \ I am looking for. I am going to try to implement this and see if I get anywhere\
    \ but I am looking forward to hearing any feedback.\n<|/ c |>\n<| c |>\nThanks\
    \ for all the help everyone. I really appreciate it. I was having some issues\
    \ with it but I was able to get it up and running with this solution.\n<|/ c |>\n\
    <| a dscore=3 tags=php,string,regex,arrays |>\nIt appears that this type of task\
    \ would be best suited for a recursive function - each level of the tree would\
    \ be represented by a separate function.\n<code>\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmppbu1nmbh.php
    on line 18

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n\t$result = true;\n\t$brackets = preg_replace('/[^()]+/', '', $brackets);\n\
    \tforeach ($brackets as $b) {\n\t\tif (! in_array($b, array('(', ')'))) {\n\t\t\
    \t$result = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: foreach() argument must be of type array|object, string given\
    \ in /tmp/tmp0joa2jh6.php on line 15\n\nWarning: foreach() argument must be of\
    \ type array|object, string given in /tmp/tmp0joa2jh6.php on line 15\n\nWarning:\
    \ foreach() argument must be of type array|object, string given in /tmp/tmp0joa2jh6.php\
    \ on line 15\n\nWarning: foreach() argument must be of type array|object, string\
    \ given in /tmp/tmp0joa2jh6.php on line 15\n\nWarning: foreach() argument must\
    \ be of type array|object, string given in /tmp/tmp0joa2jh6.php on line 15\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp0joa2jh6.php:33\nStack\
    \ trace:\n#0 /tmp/tmp0joa2jh6.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp0joa2jh6.php\
    \ on line 33\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = str_replace(array('(', ')'), '', $brackets);\n  for ($i = 0;\
    \ $i < strlen($brackets); ++$i) {\n    if (!isset($brackets[$i]) || $brackets[$i]\
    \ === '(' || $brackets[$i] === ')') {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\n$input = file_get_contents('php://stdin');\n$input = json_decode($input,\
    \ true);\n\nif (isset($input['code'])) {\n  $code = $input['code'];\n}\n\n$input\
    \ = file_get_contents('php://stdin');\n$input = json_decode($input, true);\n$input['code']\
    \ = $code;\n\n$output = [];\n\n$output['input'] = $input;\n\n$languages = ['php',\
    \ 'python', 'ruby', 'javascript', 'ruby', 'python', 'php', 'python', 'ruby', 'javascript',\
    \ 'ruby', 'javascript', 'ruby', 'php', 'python', 'ruby', 'javascript', 'ruby',\
    \ 'php', 'python', 'ruby', 'javascript', 'ruby', 'javascript', 'ruby', 'php',\
    \ 'python', 'ruby', 'javascript', 'ruby', 'javascript', 'ruby', 'php', 'python',\
    \ 'ruby', 'javascript', 'ruby', 'javascript', 'ruby', 'php', 'python', 'ruby',\
    \ 'javascript', 'ruby', 'javascript', 'ruby', 'php', 'python', 'ruby', 'javascript',\
    \ 'ruby', 'javascript', 'ruby', 'php', 'python', 'ruby', 'javascript', 'ruby',\
    \ 'javascript', 'ruby', 'php', 'python', 'ruby', 'javascript', 'ruby', 'javascript',\
    \ 'ruby', 'php', 'python', 'ruby', 'javascript', 'ruby', 'javascript', 'ruby',\
    \ 'php', 'python', 'ruby', 'javascript', 'ruby', 'javascript', 'ruby', 'php',\
    \ 'python', 'ruby', 'javascript', 'ruby', 'javascript', 'ruby', 'php', 'python',\
    \ 'ruby', 'javascript', 'ruby', 'javascript', 'ruby', 'php', 'python', 'ruby',\
    \ 'javascript', 'ruby', 'javascript', 'ruby', 'php', 'python', 'ruby', 'javascript',\
    \ 'ruby', 'javascript', 'ruby', 'php', 'python', 'ruby', 'javascript', 'ruby',\
    \ 'javascript', 'ruby', 'php', 'python', 'ruby', 'javascript', 'ruby', 'javascript',\
    \ 'ruby', 'php', 'python', 'ruby', 'javascript', 'ruby', 'javascript', 'ruby',\
    \ 'php', 'python', 'ruby', 'javascript', 'ruby', 'javascript', 'ruby', 'php',\
    \ 'python', 'ruby', 'javascript', 'ruby', 'javascript', 'ruby', 'php', 'python',\
    \ 'ruby', 'javascript', 'ruby', 'javascript', 'ruby', 'php', 'python', 'ruby',\
    \ 'javascript', 'ruby', 'javascript', 'ruby', 'php', 'python', 'ruby', 'javascript',\
    \ 'ruby', 'javascript', 'ruby', 'php', 'python', 'ruby', 'javascript', 'ruby',\
    \ 'javascript', 'ruby', 'php', 'python', 'ruby', 'javascript', 'ruby', 'javascript',\
    \ 'ruby', 'php', '\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "", expecting "]" in /tmp/tmpl4b9a8am.php
    on line 37

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = trim($brackets);\n  $openingBrackets = preg_match_all('/\\\
    (([^\\)]+)\\)/', $brackets, $matches);\n  $closingBrackets = preg_match_all('/\\\
    (([^)]+)\\)/', $brackets, $matches2);\n  if ($openingBrackets === false || $closingBrackets\
    \ === false) {\n    return false;\n  }\n  return count(array_diff($matches[0],\
    \ array_merge($matches2[0], $matches[1]))) === 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp782q01eu.php:31\n\
    Stack trace:\n#0 /tmp/tmp782q01eu.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp782q01eu.php\
    \ on line 31\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace(\"/[\\(\\)]/\", \"\", $brackets);\n    $brackets\
    \ = preg_replace(\"/[\\(\\)\\(\\)\\/\\)]/\", \"\", $brackets);\n    $brackets\
    \ = str_replace(\"(\", \"[\", $brackets);\n    $brackets = str_replace(\")\",\
    \ \"]\", $brackets);\n    if ($brackets != $brackets) {\n        return 0;\n \
    \   } else {\n        return 1;\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp__2tmg0c.php:29\n\
    Stack trace:\n#0 /tmp/tmp__2tmg0c.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp__2tmg0c.php\
    \ on line 29\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $opening_brackets = explode('(', $brackets);\n    $closing_brackets =\
    \ explode(')', $brackets);\n    \n    $count = 0;\n    foreach ($opening_brackets\
    \ as $opening) {\n        if (!$closing_brackets[$count]) break;\n        $count\
    \ += 1;\n    }\n\n    return ($count == count($opening_brackets));\n}\n</code>\n\
    Now we can create a PHP function called print_brackets that takes a string and\
    \ a set of brackets, and prints the string with the brackets.\n<code>\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpuwaaws7u.php
    on line 24

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $b) {\n    if ($b == \"(\") {\n      $opening_brackets[] = $b;\n\
    \    }\n    else if ($b == \")\") {\n      $closing_brackets[] = $b;\n    }\n\
    \  }\n  if (empty($opening_brackets) || empty($closing_brackets)) {\n    return\
    \ true;\n  }\n  if (count($opening_brackets) > count($closing_brackets)) {\n \
    \   return false;\n  }\n  sort($opening_brackets);\n  sort($closing_brackets);\n\
    \  $count = count($opening_brackets);\n  for ($i = 0; $i < $count; $i++) {\n \
    \   if ($opening_brackets[$i] != $closing_brackets[$i]) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: foreach() argument must be of type array|object, string given\
    \ in /tmp/tmppb4xtl6f.php on line 15\n\nWarning: foreach() argument must be of\
    \ type array|object, string given in /tmp/tmppb4xtl6f.php on line 15\n\nWarning:\
    \ foreach() argument must be of type array|object, string given in /tmp/tmppb4xtl6f.php\
    \ on line 15\n\nWarning: foreach() argument must be of type array|object, string\
    \ given in /tmp/tmppb4xtl6f.php on line 15\n\nWarning: foreach() argument must\
    \ be of type array|object, string given in /tmp/tmppb4xtl6f.php on line 15\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmppb4xtl6f.php:49\nStack\
    \ trace:\n#0 /tmp/tmppb4xtl6f.php(59): test()\n#1 {main}\n  thrown in /tmp/tmppb4xtl6f.php\
    \ on line 49\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  // Strip whitespace\n  $brackets = preg_replace('/\\s+/', '', $brackets);\n\
    \  $brackets = preg_replace('/\\(.+\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    (.+\\)/', '', $brackets);\n\n  return $brackets == '()';\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7dnj6fq6.php:27\n\
    Stack trace:\n#0 /tmp/tmp7dnj6fq6.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp7dnj6fq6.php\
    \ on line 27\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n\tlist($opening, $closing) = explode(')', $brackets);\n\treturn ($opening\
    \ == $closing);\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp722w6c20.php:22\n\
    Stack trace:\n#0 /tmp/tmp722w6c20.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp722w6c20.php\
    \ on line 22\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $has_correct_bracket = count($brackets) == 1;\n  $opening_brackets = explode(\"\
    (\", $brackets);\n  foreach ($opening_brackets as $opening_bracket) {\n    if\
    \ (strpos($brackets, $opening_bracket) === FALSE) {\n      $has_correct_bracket\
    \ = false;\n      break;\n    }\n  }\n  return $has_correct_bracket;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmps82s6o54.php:13\nStack trace:\n\
    #0 /tmp/tmps82s6o54.php(25): correct_bracketing('()')\n#1 /tmp/tmps82s6o54.php(29):\
    \ candidate('()')\n#2 /tmp/tmps82s6o54.php(43): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmps82s6o54.php on line 13\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  global $bracketing_dict;\n  $brackets = explode(\")\", $brackets);\n  foreach($brackets\
    \ as $bracket) {\n    if (!isset($bracketing_dict[$bracket])) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwb5ile4f.php:28\n\
    Stack trace:\n#0 /tmp/tmpwb5ile4f.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpwb5ile4f.php\
    \ on line 28\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  return preg_replace('/(\\((?>[^()]+|\\((?1)+\\))*(?(1)(?!))\\))/', '($1)',\
    \ $brackets);\n}\n</code>\n<|/ a |>\n<| a |>\n<code>\n<?php\n$open_brackets =\
    \ array(\"(\", \"[\", \"{\", \"(\", \"{\", \"(\", \"[\", \"[\", \"(\", \"[\",\
    \ \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\");\n$close_brackets = array(\"\
    )\", \"]\", \"}\", \"]\", \"}\", \"]\", \"}\", \"}\", \"]\", \"}\", \"]\", \"\
    }\", \"}\", \"}\");\n$closed_brackets = str_replace($open_brackets, $close_brackets,\
    \ $open_brackets);\n$open_parenthesis = str_replace($close_brackets, $open_brackets,\
    \ $closed_brackets);\n$brackets = str_replace($closed_brackets, $open_brackets,\
    \ $open_parenthesis);\n$result = preg_replace('/(\\((?>[^()]+|\\((?1)+\\))*(?(1)(?!))\\\
    ))/', '($1)', $brackets);\nif ($result == $brackets) {\n  echo 'Correct!';\n}\
    \ else {\n  echo 'Wrong';\n}\n</code>\n<|/ a dscore=1 tags=php,javascript |>\n\
    <| a tags=php,javascript dscore=0 |>\nThis can be done in PHP:\n<code>\n$open_brackets\
    \ = array(\"(\", \"[\", \"{\", \"(\", \"{\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\");\n$close_brackets = array(\")\", \"]\", \"}\", \"]\", \"\
    }\", \"]\", \"}\", \"]\", \"}\", \"}\", \"]\", \"}\", \"}\");\n\n$opened_brackets_count\
    \ = count($open_brackets);\n$closed_brackets_count = count($close_brackets);\n\
    $open_parenthesis_count = count($open_brackets) - $closed_brackets_count;\n$brackets_count\
    \ = count($close_brackets) - $opened_brackets_count;\n\n$result = str_replace($close_brackets,\
    \ $open_brackets, $opened_brackets_count.\"(\");\n$result = str_replace($open_parenthesis,\
    \ $close_brackets, $brackets_count);\n\necho $result;\n</code>\n<|/ a |>\n<| a\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp1tf5m8qo.php
    on line 15

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = str_replace(array(\"(\", \")\"), array(\"\\[\", \"\\]\"),\
    \ $brackets);\n    return preg_match('/^\\(\\[/', $brackets) && preg_match('/^\\\
    (\\)\\[/', $brackets);\n}\n\n$code = '\n<?php\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "" in /tmp/tmpu3oxi1zq.php
    on line 17

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    if ($brackets === $brackets) {\n        return true;\n    }\n    $stack\
    \ = array_reverse($brackets);\n    foreach ($stack as $bracket => $count) {\n\
    \        if ($count === 1) {\n            continue;\n        }\n        if ($brackets[$bracket]\
    \ === '(' && $brackets[$bracket+$count-1] === '(') {\n            // correct opening\
    \ bracket\n            return false;\n        }\n        if ($brackets[$bracket]\
    \ === '(' && $brackets[$bracket+$count-1] !== ')') {\n            // correct closing\
    \ bracket\n            return false;\n        }\n    }\n    // no brackets match\n\
    \    return true;\n}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpepja_wf4.php:42\n\
    Stack trace:\n#0 /tmp/tmpepja_wf4.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpepja_wf4.php\
    \ on line 42\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  return preg_match(\"/^([\\\\(\\\\)])*\\$?/\", $brackets);\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: preg_match(): Compilation failed: quantifier does not follow\
    \ a repeatable item at offset 11 in /tmp/tmpxiec8muf.php on line 13\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpxiec8muf.php:21\nStack trace:\n\
    #0 /tmp/tmpxiec8muf.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpxiec8muf.php\
    \ on line 21\n"
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = str_replace(array('(', ')'), array('{', '}'), $brackets);\n\
    \    $brackets = str_replace(array('{', '}'), array('(', ')'), $brackets);\n \
    \   $brackets = preg_replace(\"/[^({)]/\", '', $brackets);\n    return $brackets\
    \ === '()';\n}\n</code>\n<|/ a tags=php,regex |>\n<| a |>\n<code>\n<?php\n$a =\
    \ '(()())()';\n$patterns = array();\n\n$patterns[] = \"/^\\((\\))\\)/\";\n$patterns[]\
    \ = \"/^\\((\\))/\";\n$patterns[] = \"/^\\(\\(\\)\\)/\";\n\nforeach($patterns\
    \ as $pattern) {\n    if(!preg_match($pattern, $a)) {\n        die('not valid');\n\
    \    }\n}\n\necho 'valid';\n</code>\n<|/ a tags=php,regex dscore=1 |>\n<| c |>\n\
    You don't need to escape `()`, they're not special chars in regexes.\n<|/ c |>\n\
    <| c |>\nThis doesn't work: `$patterns[] = \"/^\\((\\))/\";`\n<|/ c |>\n<| c |>\n\
    : That's what I get for not testing my code before posting it!  I edited the answer\
    \ to fix the problem.\n<|/ c |>\n<| c |>\n: It should work (albeit a little slower\
    \ than my solution), and I tested it before posting.\n<|/ c |>\n<| c |>\n: What\
    \ do you mean by \"slow\"?  You said it would be faster to test than to post a\
    \ solution?\n<|/ c |>\n<| a |>\nThis solution seems to work:\n<code>\n<?php\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmph3w98thz.php
    on line 18

    '
  timestamp: 1659978971
- exit_code: 255
  program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    for($count = 0; $count < strlen($brackets); $count++) {\n        if($brackets[$count]\
    \ === '(') {\n            $brackets[$count] = '[';\n        } else if($brackets[$count]\
    \ === ')') {\n            $brackets[$count] = ']';\n        } else if($brackets[$count]\
    \ === '[') {\n            $brackets[$count] = '(';\n        } else if($brackets[$count]\
    \ === ']') {\n            $brackets[$count] = ')';\n        }\n    }\n    return\
    \ $brackets === '(' || $brackets === ')' || $brackets === '[' || $brackets ===\
    \ ']';\n}\n</code>\n<|/ a |>\n<| c |>\nThis is a great solution for simple patterns,\
    \ but, unfortunately, it also catches unmatched brackets, like `foo[bar]`. The\
    \ OP didn't mention whether they wanted to catch those, but I thought I'd mention\
    \ it.\n<|/ c |>\n<| c |>\nGreat solution for simple patterns, however, this won't\
    \ work for nested parenthesis, like `foo (bar [baz (bop)] bang)`\n<|/ c |>\n<|\
    \ a dscore=3 |>\nThe regex solution from is a great solution for simple patterns,\
    \ but, unfortunately, it also catches unmatched brackets, like foo[bar]. The OP\
    \ didn't mention whether they wanted to catch those, but I thought I'd mention\
    \ it.\nIt is not necessary to add the start and end brackets [ and ], since they\
    \ will always be present in the text. You need to match the contents of the bracketed\
    \ term. Also, this regex allows the use of nested parentheses as well. For example,\
    \ foo (bar [baz (bop)] bang) matches with the following:\n<code>\nArray\n(\n \
    \   [foo] =>\n    [bar] =>\n    [baz (bop)] =>\n    [bang] =>\n)\n</code>\nThis\
    \ regex also captures nested brackets separately, so they can be processed separately.\n\
    <code>\n/(?<=\\s)([(]|[^(]*?(?=\\s)(?=[)])|\\[[^]]+\\])/i\n</code>\n<|/ a tags=regex,php\
    \ |>\n<| a |>\nA bit of googling and I found a regular expression to do this.\
    \ It is called: nested brackets. \nI wrote a php function that will take a string\
    \ as input (ex: foo (bar)), and output an array with brackets and contents. \n\
    It's a recursive function, if you pass a string containing nested brackets, it\
    \ will give the desired output. I wrote the example for you \nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp94poxlxr.php
    on line 26

    '
  timestamp: 1659978971
