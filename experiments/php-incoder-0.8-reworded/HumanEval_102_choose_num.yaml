name: HumanEval_102_choose_num
language: php
prompt: "<?php\n// This function takes two positive numbers x and y and returns the\n\
  // biggest even integer number that is in the range [x, y] inclusive. If \n// there's\
  \ no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
  \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num($x, $y) {\n"
tests: "function candidate(...$args) {\n    return choose_num(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(12, 15) !== 14) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(13, 12) !== -1) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(33, 12354) !== 12354) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(5234, 5233) !== -1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(6, 29) !== 28) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(27, 10) !== -1) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(7, 7) !== -1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(546, 546) !== 546) { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["  for ($i = $x; $i <= $y; $i++) {\n    if ($i % 2 != 0) {\n      return\
    \ $i;\n    }\n  }\n  return -1;\n}", "    if ($x < $y) {\n        $temp = $x;\n\
    \        $x = $y;\n        $y = $temp;\n    }\n    \n    if ($x < 0) {\n     \
    \   die(\"Error 1\");\n    }\n    if ($y < 0) {\n        die(\"Error 2\");\n \
    \   }\n    \n    if ($x == $y) {\n        return $x;\n    }\n    \n    if ($x\
    \ > $y) {\n        return -1;\n    }\n    \n    $max = $x;\n    for ($i = $y;\
    \ $i > $x; $i--) {\n        if ($i % 2 == 0) {\n            $max = $i;\n     \
    \   }\n    }\n    \n    return $max;\n}\n\n$num = choose_num(12, 15); // returns\
    \ 14\necho $num; // output: 14\n\n$num = choose_num(13, 12); // returns -1\necho\
    \ $num; // output: -1\n</code>\n<|/ a |>\n<| a tags=php,function |>\nHere's a\
    \ shorter version using only arithmetic. \n<code>\n<?php", "    $x = abs($x);\n\
    \    $y = abs($y);\n    while ($x < $y) {\n        if ($x % 2 === 0) {\n     \
    \       $x += 1;\n        } else {\n            $x -= 1;\n        }\n        if\
    \ ($x % 2 === 0 && $x !== 0 || $y % 2 === 0 && $x !== 0 || $x === 0 && $y !==\
    \ 0) {\n            $z = $x * $y;\n            $z = abs($z);\n            if ($z\
    \ > $x) {\n                return $x;\n            }\n            return $y;\n\
    \        }\n        $y += 1;\n    }\n    return -1;\n}\n", "    if($x < $y) {\n\
    \        $temp = $x;\n        $x = $y;\n        $y = $temp;\n    }\n    while($x\
    \ < $y) {\n        if($x & 1)\n            $x++;\n        else\n            $x--;\n\
    \    }\n    return $x;\n}", "  $n = ($x - $y) / 2;\n  while ($x > $y && $n % 2\
    \ == 0) {\n    $n++;\n  }\n  if ($n == $y) {\n    return $n;\n  }\n  else {\n\
    \    return -1;\n  }\n}", "    $even = $x & 1;\n    $y = min($y, $even);\n   \
    \ $x = max($x, $even);\n    if ($x === $y) $x = $even + 1;\n    while (true) {\n\
    \        $y = 2 * $y;\n        if ($y >= $x) break;\n        $x = $y;\n    }\n\
    \    return $x;\n}\n", "\tif ($x < $y) {\n\t\t$min = $x;\n\t\t$max = $y;\n\t}\
    \ else {\n\t\t$min = $y;\n\t\t$max = $x;\n\t}\n\tfor ($i = 1; $i <= $max; $i++)\
    \ {\n\t\t$temp = $min * $i;\n\t\tif ($temp % 2 === 0) {\n\t\t\treturn $temp;\n\
    \t\t}\n\t}\n\treturn -1;\n}\n", "  for ($i = min($x, $y); $i <= max($x, $y); $i++)\
    \ {\n    if ($i % 2 == 0 && $i != $x) {\n      return $i;\n    }\n  }\n  return\
    \ -1;\n}\n</code>\n<|/ a tags=math,php,algorithm |>\n<| c |>\nIf you're going\
    \ to use PHP, you should probably mention the `bcpow()` function; it's better\
    \ than calling `pow()`.\n<|/ c |>\n<| c |>\nI wanted to solve this without using\
    \ if statements, I got it to work just fine. Thanks for the help!\n<|/ c |>\n\
    <| a tags=math,php,algorithm |>\n<code>\n$x = $_POST['x'];\n$y = $_POST['y'];\n\
    $ans = pow($x, 2) + $y;\nwhile( ($ans % 2) != 0 ) {\n    $ans++;\n}\necho $ans;\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nHi there! This actually works, but can you\
    \ tell me why your solution works?\n<|/ c |>\n<| c |>\nThis code will never return\
    \ 0.\n<|/ c |>\n<| c |>\nIt will eventually return 0, but when `$x = 1` and `$y\
    \ = 10`, it will stop at `4`, not at `5`.\n<|/ c |>\n<| c |>\nThanks. Fixed now.\n\
    <|/ c |>\n<| a tags=math,php,algorithm |>\nHere's a variation on the answer from\
    \ Nick C.\nIt uses a while loop, just as his code. Mine will find the largest\
    \ even number in the range from $x to $y, regardless of whether it's odd or even.\n\
    <code>", "    $x = (int) $x;\n    $y = (int) $y;\n    if ($x == $y) {\n      \
    \  return $x;\n    } elseif ($x > $y) {\n        // x > y\n        $temp = $x;\n\
    \        $x = $y;\n        $y = $temp;\n    }\n    for ($i = $y; $i > $x; $i--)\
    \ {\n        if ($i % 2 == 0) {\n            $x = ($x - $i) / 2;\n        } else\
    \ {\n            $y = ($y - $i) / 2;\n        }\n    }\n    return $x;\n}\n",
  "    return intval($x) > intval($y) ? intval($x) : intval($y);\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 tags=php,string |>\n<code>\n$str = '123456789';\n\
    $num = intval(str_replace($str, '', strrev($str)));\n</code>\nThis will give you\
    \ the original number in reverse, after removing the string you are searching\
    \ for. After that you can cast it to int.\n<|/ a |>\n<| a dscore=0 tags=php,string\
    \ |>\n<code>\n$string=\"123456789\";\n$string=substr($string, strrpos($string,\
    \ \"1\"));\necho intval($string);\n</code>\n<|/ a |>\n<| a |>\nYou could also\
    \ use this simple function to get the reverse of a string.\n<code>", "    $result\
    \ = 0;\n    while ($x < $y) {\n        if ($x % 2 === 0) {\n            $result\
    \ = $x;\n        }\n        $x = $x + 1;\n    }\n    return $result;\n}\n\n$sum\
    \ = 0;\n$numbers = range(1, 10);\nforeach ($numbers as $num) {\n    $sum = choose_num($sum,\
    \ $num);\n    if ($sum < 0) {\n        die('Wrong answer');\n    }\n}\necho $sum;",
  "    if ($x >= $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n   \
    \     $min = $y;\n        $max = $x;\n    }\n\n    $min_half = floor($min / 2);\n\
    \    $max_half = ceil($max / 2);\n\n    if ($min % 2 === 0) {\n        $min_half++;\n\
    \    }\n\n    if ($max % 2 === 0) {\n        $max_half++;\n    }\n\n    do {\n\
    \        $middle = rand($min_half, $max_half);\n    } while ($middle == $min or\
    \ $middle == $max);\n\n    return $middle;\n}\n</code>\nIt will work quite fast\
    \ in both cases: first it will try to make some choice with the even numbers,\
    \ and when it can't find a number that satisfies this condition, it will be trying\
    \ with the odd numbers.\n<|/ a |>\n<| c |>\nThank you for posting your code. \
    \ It looks like it worked with my numbers in about 40 tries.  It doesn't seem\
    \ to be able to find all solutions though.  I wonder if there's some way it can\
    \ find even solutions that will leave out the odd solutions.\n<|/ c |>\n<| c |>\n\
    I haven't implemented all the code in the function, I only wrote a part where\
    \ it chooses two even numbers and then tries to find an even number that is in\
    \ the range of `[x, y]`. If it can't find any number, it uses the odd one. If\
    \ it still can't find any number, the program will try with the other half, etc.\n\
    <|/ c |>\n<| c |>\nAh, ok.  That makes sense.  I modified it a bit to include\
    \ a solution where you pass it the middle of a range.  This seems to have solved\
    \ my problem.  Thank you.\n<|/ c |>\n<| a tags=algorithm,language-agnostic,puzzle,search\
    \ |>\nThis is just one way to approach this problem:\n<code>\nfrom random import\
    \ randint\ndef choose_num(x,y):\n    if x<y:\n        high=x\n        low=y\n\
    \    else:\n        high=y\n        low=x\n\n    even = randint(low,high)\n  \
    \  while even==low:\n        even=randint(low,high)\n    if even==high:\n    \
    \    even = -1\n    return even\n</code>\n<|/ a dscore=2 |>\n<| c |>\nYour code\
    \ isn't quite right - it only chooses between the two numbers either side of the\
    \ middle point if the two numbers are equal, whereas it should choose between\
    \ one of the two numbers if they are equal, and choose between one of the two\
    \ numbers if they are unequal.  I've fixed that problem in my code and it seems\
    \ to work now.\n<|/ c |>\n<|", "    if ($x < $y) {\n        $tmp = $x;\n     \
    \   $x = $y;\n        $y = $tmp;\n    }\n    if ($x < 2) { return -1; }\n    if\
    \ ($y < 2) { return -1; }\n    while ($x <= $y) {\n        if ($x % 2 === 0) {\n\
    \            $x += 1;\n            $y = $y - 1;\n        } else if ($y % 2 ===\
    \ 0) {\n            $y -= 1;\n            $x = $x - 1;\n        } else {\n   \
    \         return $x;\n        }\n    }\n    return $x;\n}\n</code>\n<|/ a tags=php\
    \ |>\n<| c |>\nGood job! But not so simple as the answer, but very nice and clear.\
    \ Nice work!\n<|/ c |>\n<| c |>\nThe function returns -1 when given a negative\
    \ number (or when the two numbers are equal). It also returns -1 when the two\
    \ numbers are the same (as in choose_num(15, 15)).\n<|/ c |>\n<| c |>\n: yes and\
    \ no, it returns -1 when given a negative number (or when the two numbers are\
    \ equal) so for example choose_num(8, 9) would return 9 and choose_num(8, 15)\
    \ would return 8. Both those cases are valid and should be handled either by returning\
    \ a negative number or by throwing an error.\n<|/ c |>\n<| c |>\n: thanks for\
    \ the feedback. I updated my answer. Now it correctly handles the two cases that\
    \ you pointed out and also handles negative numbers.\n<|/ c |>\n<| a dscore=1\
    \ tags=php |>\nThe answer is:\n<code>", "    $smallest = $x;\n    $largest = $y;\n\
    \    while($smallest<$largest) {\n        $smallest+=($smallest+$largest)/2;\n\
    \        $largest-=($smallest+$largest)/2;\n    }\n    return $smallest;\n}\n",
  "    // Initialize a variable to store the result (-1) when there's no odd number\
    \ between the \n    // two given numbers.\n    $num = ($y <= $x) ? -1 : -1;\n\n\
    \    // Loop through all even numbers in the range [x, y] inclusive.\n    for\
    \ ($i = 1; $i <= $y - $x; $i += 2) {\n        // Check if the current number is\
    \ an even number by using the modulus operator.\n        if ($i % 2 != 0) {\n\
    \            // If the current number is even, store it in the variable and increment\
    \ the loop counter.\n            $num = $i;\n            ++$i;\n        }\n  \
    \  }\n\n    // Return $num if $x is greater than $y and -1 if $x is less than\
    \ $y.\n    return $num;\n}", "    if ($x < $y) {\n        $temp = $x;\n      \
    \  $x = $y;\n        $y = $temp;\n    }\n    $mid = floor($x / 2);\n    $left\
    \ = $mid * 2;\n    $right = $left + 1;\n    while (true) {\n        if ($left\
    \ <= $y) {\n            if ($y == $right) {\n                if ($x == $left)\
    \ {\n                    return $x;\n                }\n                return\
    \ -1;\n            }\n            if ($y == $left + 1) {\n                return\
    \ $mid;\n            }\n            $left = $left + 1;\n        }\n        if\
    \ ($x <= $y) {\n            $right = $right - 1;\n            if ($y == $right)\
    \ {\n                if ($x == $left) {\n                    return $mid;\n  \
    \              }\n                return -1;\n            }\n        }\n    }\n\
    }", "  $odd_num = 0;\n  $even_num = 0;\n  if ($x <= $y) {\n    for ($i = $x; $i\
    \ <= $y; $i++) {\n      if ($i % 2 == 0) {\n        $even_num = $i;\n      }\n\
    \    }\n    return $even_num;\n  } else {\n    for ($i = $x; $i >= $y; $i--) {\n\
    \      if ($i % 2 == 0) {\n        $even_num = $i;\n      }\n    }\n    return\
    \ $even_num;\n  }\n}\n", "    $y = $y - 1;\n    if ($y <= $x) {\n        return\
    \ -1;\n    }\n    while ($x <= $y) {\n        $x = $x + 2;\n        $y = $y +\
    \ 2;\n        if ($x == $y) {\n            return $x;\n        }\n    }\n    return\
    \ -1;\n}\n</code>\n<|/ a tags=language-agnostic,php |>\n<| c |>\n`choose_num(20,\
    \ 20)` returns `-1`.\n<|/ c |>\n<| c |>\nHmmm, that is true. Didn't even think\
    \ about that... Thanks.\n<|/ c |>\n<| c |>\nYou will still need to test all even\
    \ numbers from 1 to 19 (inclusive) with `choose_num(21, 20)`. You can easily change\
    \ this to return `-1` when `y` is `21`.\n<|/ c |>\n<| a tags=language-agnostic,php\
    \ |>\nHere's one without recursion. \n<code>\n<?php", "  $r = $x;\n  if ($y <\
    \ $x) {\n    if ($r % 2 == 0) {\n      return $r;\n    }\n    for ($i = $y; $i\
    \ >= $x; $i--) {\n      $r = ($r * 2) + $i;\n      if ($r % 2 == 0) {\n      \
    \  return $r;\n      }\n    }\n    return -1;\n  }\n  for ($i = $y; $i >= $x;\
    \ $i--) {\n    $r = ($r * 2) + $i;\n    if ($r % 2 == 0) {\n      return $r;\n\
    \    }\n  }\n  return -1;\n}", "  if ($x <= $y) return $x;\n  else return $y;\n\
    }\n", "    if ($x == $y) {\n        return -1;\n    }\n    if ($x < $y) {\n  \
    \      $x = $y;\n        $y = $x;\n    }\n    while ($x != 0) {\n        $y =\
    \ ($y << 1) | $y;\n        if ($x <= $y) {\n            $x = $y - $x;\n      \
    \  }\n        else {\n            $x = $x - $y;\n        }\n    }\n    return\
    \ $y;\n}", "    while($x >= $y) {\n        $y = $y + ($y % 2);\n    }\n    while($x\
    \ < $y) {\n        $x = $x + ($x % 2);\n    }\n    return $x;\n}\n", "    if (!isset($x)\
    \ || !isset($y)) {\n        return -1;\n    }\n    if ($x < $y) {\n        $tmp\
    \ = $y;\n        $y = $x;\n        $x = $tmp;\n    }\n    if ($x == $y) {\n  \
    \      $y++;\n    }\n    return $y;\n}", "    $x = $x - 1;\n    $y = $y - 1;\n\
    \    while($x <= $y) {\n        if((int)$x % 2 == 0) {\n            $x = (int)$x\
    \ + 1;\n        }\n        else {\n            $y = (int)$y - 1;\n        }\n\
    \    }\n    return $x;\n}\n", "    if ($x <= $y) {\n        foreach (range($x,\
    \ $y) as $x) {\n            if ($x % 2 == 0)\n                return $x;\n   \
    \     }\n    } else {\n        foreach (range($y, $x) as $y) {\n            if\
    \ ($y % 2 == 0)\n                return $y;\n        }\n    }\n    return -1;\n\
    }\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\nThis answer works perfectly,\
    \ but only on small ranges.  When given a large range, the time complexity will\
    \ go up exponentially with the square of the range.\n<|/ c |>\n<| c |>\nThank\
    \ you for the feedback. I think you're correct about the time complexity. In my\
    \ tests, this method took about ~3.4 seconds to run for a range over 10000 elements.\
    \ As a result of a linear increase in range, each number in the range took about\
    \ 0.4 seconds to process. On an incredibly old computer with a 2.6 GHz core (4th\
    \ generation, 4 processors, 6 threads), this would still take about 8 seconds\
    \ to complete the range up to 1,000,000 elements.\n<|/ c |>\n<| a tags=php,algorithm\
    \ |>\nI came up with something very simple that worked well for me. \n<code>",
  "  if ($x <= $y) {\n    return ($x >= $y ? $x : $y);\n  } else {\n    $m = ($x +\
    \ $y) / 2;\n    if ($m % 2 != 0) {\n      return ($m % 2 == 1 ? $m : -1);\n  \
    \  }\n    return choose_num($x, $y);\n  }\n}\n</code>\n<|/ a tags=php,algorithm\
    \ |>\n<| c |>\nYeah but as I said, I do have to find out if the number is between\
    \ 1 and 10. Which means I have to write it out as 10 - 1.\n<|/ c |>\n<| c |>\n\
    But that's exactly what my code does - it uses your function `choose_num` with\
    \ a range of 1-10.\n<|/ c |>\n<| c |>\nOh okay, I got it now haha.\n<|/ c |>\n\
    <| a dscore=1 tags=php,algorithm |>\nHere is a solution I came up with:\n<code>\n\
    <?php", "    $a = $x;\n    $b = $y;\n\n    while ($a < $b) {\n        $m = $a\
    \ + $b - 1;\n        if ($m % 2 == 0)\n            $b = $m;\n        else\n  \
    \          $a = $m;\n    }\n\n    return $a == $b ? $a : -1;\n}\n", "    // Make\
    \ sure x and y are valid numbers\n    if (!is_numeric($x) || !is_numeric($y))\
    \ {\n        return -1;\n    }\n\n    // Make sure x is greater than y\n    if\
    \ ($x <= $y) {\n        $temp = $y;\n        $y = $x;\n        $x = $temp;\n \
    \   }\n\n    // Find the midpoint of the range\n    $midpoint = $x + ($y - $x)\
    \ / 2;\n\n    // Make sure the number we are looking for is between \n    // $x\
    \ and $y. If not, we found our number.\n    if ($midpoint < $x || $midpoint >\
    \ $y) {\n        return $midpoint;\n    }\n\n    // If the midpoint is equal to\
    \ the smallest number in the range,\n    // then we want the biggest number that\
    \ is in the range.\n    if ($midpoint == $x) {\n        return $y;\n    }\n\n\
    \    // If the midpoint is equal to the biggest number in the range,\n    // then\
    \ we want the smallest number that is in the range.\n    return $x;\n}\n</code>\n\
    <|/ a dscore=0 tags=php,algorithm,range,numbers |>\n<| a dscore=0 |>\nI've come\
    \ up with this:\n<code>", "    $range = [];\n    $low = $x;\n    $high = $y;\n\
    \    while (true) {\n        if ($low < $high) {\n            $range[] = $low;\n\
    \            $low++;\n        } else {\n            break;\n        }\n      \
    \  if ($low < $high) {\n            $range[] = $high;\n            $high--;\n\
    \        }\n    }\n    $range_count = count($range);\n    for ($i = 0; $i < $range_count;\
    \ $i++) {\n        if ($range[$i] % 2 === 0) {\n            return $range[$i];\n\
    \        }\n    }\n    return -1;\n}\n", "\tif ($x > $y) $tmp = $x;\n\telse $tmp\
    \ = $y;\n\tfor ($i = $tmp; $i > 0; $i--) {\n\t\tif ($x % 2 == 0 && $y % 2 == 0)\
    \ return $i;\n\t\t$x++;\n\t\t$y++;\n\t}\n\treturn -1;\n}\n", "    $x_pos = $x_neg\
    \ = 0;\n    $y_pos = $y_neg = 0;\n    $x_max = $y_max = $x;\n    $x_min = $y_min\
    \ = $y;\n\n    while($x_pos < $x_neg || $x_pos > $x_max || $y_pos < $y_neg ||\
    \ $y_pos > $y_max) {\n        $tmp = $x_pos > $x_neg ? $x_pos : ($x_neg < $y_neg\
    \ ? $y_neg : $x_pos);\n        $tmp2 = $x_pos > $x_max ? $x_max : $x_pos;\n  \
    \      $tmp3 = $x_neg < $y_neg ? $y_neg : $x_neg;\n        $tmp4 = $x_neg > $x_max\
    \ ? $x_max : $x_neg;\n        $tmp5 = $y_pos > $y_neg ? $y_pos : ($y_neg < $x_neg\
    \ ? $x_neg : $y_pos);\n        $tmp6 = $y_pos > $y_max ? $y_max : $y_pos;\n  \
    \      $tmp7 = $y_neg < $x_neg ? $x_neg : $y_neg;\n        $tmp8 = $y_neg > $x_max\
    \ ? $x_max : $y_neg;\n        if ($tmp > $x_max) $x_max = $tmp;\n        if ($tmp2\
    \ > $x_pos) $x_pos = $tmp2;\n        if ($tmp3 > $x_neg) $x_neg = $tmp3;\n   \
    \     if ($tmp4 > $y_pos) $y_pos = $tmp4;\n        if ($tmp5 > $y_neg) $y_neg\
    \ = $tmp5;\n        if ($tmp6 > $y_max) $y_max = $tmp6;\n        if ($tmp7 < $x_pos)\
    \ $x_pos = $tmp7;\n        if ($tmp8 < $x_neg) $x_neg = $tmp8;\n    }\n\n    if\
    \ ($x_pos > $x_neg) {\n        $x_pos = $x_neg;\n        $x_neg = $x_max;\n  \
    \      $x_max = $x_pos;\n    }\n    if ($y_pos > $y_neg) {\n        $y_pos = $y_neg;\n\
    \        $y_neg = $y_max;\n        $y_max = $y_pos;\n    }\n    $x_pos = $x_pos\
    \ - $x_neg;\n    $y_pos = $y_pos - $y_neg;\n    $x_pos = $x_pos > $y_pos ? $x_pos\
    \ : $y_pos;\n    if ($x_neg < $y_pos) {\n        $x_pos = $x_neg;\n        $",
  "    if ($x >= $y || $x == $y) {\n        $min = $x;\n        $max = $y;\n    }\
    \ else {\n        $min = $y;\n        $max = $x;\n    }\n    if ($min != $max)\
    \ {\n        $evens = 0;\n        do {\n            $evens *= 10;\n          \
    \  $evens += floor($min / $evens);\n            $min = $min % $evens;\n      \
    \  } while ($min != $max);\n        return $evens;\n    } else {\n        return\
    \ -1;\n    }\n}\n", "    if ($x < $y) { $min = $x; $max = $y; } else { $min =\
    \ $y; $max = $x; }\n    do {\n        $newX = rand($min, $max);\n        $newY\
    \ = rand($min, $max);\n    } while ($newX == $newY);\n    return $newX;\n}\n\n\
    $rows = 10;\n$cols = 10;\n$board = array();\nfor ($row = 0; $row < $rows; $row++)\
    \ {\n    $board[$row] = array();\n    for ($col = 0; $col < $cols; $col++) {\n\
    \        $board[$row][$col] = \"-\";\n    }\n}\n", "    if ($x > $y) $tmp = $y;\
    \ $y = $x; $x = $tmp;\n\n    if ($y > $x) return -1;\n\n    while ($x % 2 == 0)\
    \ {\n        $x /= 2;\n        $y += 1;\n    }\n    return $y;\n}", "    $min\
    \ = $x <= $y ? $x : $y;\n    $max = $x > $y ? $x : $y;\n    while ($min <= $max)\
    \ {\n        // We assume that $min is an even number because $max is\n      \
    \  // an even number as well because that's what the algorithm\n        // expects\
    \ to find even numbers.\n        $mid = $min + $max;\n        if ($mid % 2 ==\
    \ 0) {\n            $min = $mid + 1;\n        } else {\n            $max = $mid;\n\
    \        }\n    }\n    return $min;\n}\n", "\tif ($x < $y) {\n\t\t$tmp = $x;\n\
    \t\t$x = $y;\n\t\t$y = $tmp;\n\t}\n\twhile ($x < $y) {\n\t\tif ($x % 2 == 0) return\
    \ $x;\n\t\t$x += 2;\n\t}\n\treturn -1;\n}\n", "    if ($x === $y) \n        return\
    \ $x;\n    if ($y > $x) {\n        $temp = $x;\n        $x = $y;\n        $y =\
    \ $temp;\n    }\n    for ($z = $x; $z <= $y; $z++) {\n        if ($z % 2 === 0)\n\
    \            return $z;\n    }\n    return -1;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    `function choose_num($x, $y){\nif($x == $y) \n    return $x;\nif($y > $x){\n \
    \   $temp = $x;\n    $x = $y;\n    $y = $temp;\n}\nfor($z=$x;$z<=$y;$z++){\n \
    \   if($z%2==0) return $z;\n}\nreturn -1;\n}`\n\n`print(choose_num(12, 15));`\n\
    <|/ c |>\n<| a dscore=0 |>\nThe algorithm is simple: chose the biggest number\
    \ that is smaller than the sum of the two numbers. \n<code>", "    if (!is_int($x)\
    \ && !is_int($y)) {\n        return -1;\n    }\n\n    $x_int = (int)$x;\n    $y_int\
    \ = (int)$y;\n\n    if ($x_int < $y_int) {\n        $min = $x_int;\n        $max\
    \ = $y_int;\n    } else {\n        $min = $y_int;\n        $max = $x_int;\n  \
    \  }\n\n    do {\n        $num = ($min + $max) / 2;\n        if (is_even($num))\
    \ {\n            $min = $num;\n        } else {\n            $max = $num;\n  \
    \      }\n    } while (!is_int($min));\n\n    if (is_int($min)) {\n        return\
    \ -1;\n    } else {\n        return $min;\n    }\n}\n", "    if ($x < $y) {\n\
    \        $swap = $x;\n        $x = $y;\n        $y = $swap;\n    }\n\n    if ($x\
    \ == $y) {\n        return $x;\n    }\n\n    if ($y == 0) {\n        return -1;\n\
    \    }\n\n    while ($x <= $y) {\n        $mid = $x + (($y - $x) / 2);\n     \
    \   if ($mid % 2 == 0) {\n            $x = $mid + 1;\n        } else {\n     \
    \       $y = $mid;\n        }\n    }\n    return $x;\n}\n</code>\n<|/ a tags=integer,php\
    \ |>\n<| a tags=integer,php |>\n<code>", "    for ($i = $x; $i <= $y; $i++) {\n\
    \        if ($i % 2 == 0) {\n            return $i;\n        }\n    }\n    return\
    \ -1;\n}\n</code>\n<|/ a |>\n<| c |>\nHmm... The first function works but the\
    \ second does not work...\n<|/ c |>\n<| c |>\nHmm.... Maybe you got confused with\
    \ the wording of your question :) You said the second function did not work. Now\
    \ I've updated my answer with a solution that works.\n<|/ c |>\n<| c |>\nI actually\
    \ misunderstood your question, I thought you were referring to the function you\
    \ were trying to improve. If you mean that you simply want to understand the solution,\
    \ I suggest you take time to learn how `for` loops work and what `return` does.\
    \ It's actually really easy; I've updated the answer to make it clear.\n<|/ c\
    \ |>\n<| a |>\n<code>\n<?php\n$max_num=$x;\n$x=$y;\nwhile ($x>$y) {\n    if ($x%2==0)\
    \ {\n        $max_num=$x;\n    }\n    $x/=2;\n}\nif ($y%2==0) {\n    $max_num=$y;\n\
    }\necho $max_num;", "  $even = true;\n  $max = $x;\n  $min = $y;\n  $even = false;\n\
    \  for ($i = $min; $i <= $max; $i += 2) {\n    if ($i % 2 == 0) {\n      if ($i\
    \ == $max) {\n        if ($even) {\n          $even = false;\n          return\
    \ $max;\n        }\n      } else {\n        $even = true;\n        $max = $i;\n\
    \      }\n    }\n  }\n  return -1;\n}\n", "    $max = -1;\n    while ($x <= $y\
    \ && $max < $x) {\n        $max = $x;\n        $x++;\n    }\n    return $max;\n\
    }\n</code>\n<|/ a tags=php,function |>\n<| c |>\nGood job on the explanation.\
    \  Although I did say it was homework, it's more of a \"professional\" problem\
    \ so I'll give you the benefit of the doubt :-)\n<|/ c |>\n<| c |>\nThanks. I\
    \ added a little explanation on how the function is doing its job and how I solved\
    \ it using PHP's native functions instead of your \"clever\" solution. I hope\
    \ you agree with my solution.\n<|/ c |>\n<| c |>\nI edited my post to remove my\
    \ \"clever\" solution. My solution works perfectly and is the only one that doesn't\
    \ use an extra variable.\n<|/ c |>\n<| a tags=php,function |>\nThe reason your\
    \ teacher gave you the correct answer is because you have the correct idea.\n\
    You have two integers x and y and your teacher wanted to know how you would find\
    \ the biggest number that is a multiple of the other two. You know that x is bigger\
    \ than y, so you know the biggest number will be bigger than both of them. Simply\
    \ use the remainder operator to check if x and y are factors of each other. Because\
    \ the remainder operator gives you the remainder of the division between the two\
    \ numbers, if x and y are factors, then you can check with the remainder operator\
    \ if they are both smaller than or greater than the other number.\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>", "  $retval = -1;\n  $div = $x % $y;\n  \n  if\
    \ ($div == 0) {\n    $retval = $y;\n  } else {\n    $retval = $x;\n    while($y\
    \ != $x) {\n      $retval = $y % $x;\n      $y = $x;\n      $x = $retval;\n  \
    \  }\n  }\n  return $retval;\n}\n", "    $x_even = $x_odd = $y_even = $y_odd =\
    \ -1;\n    while ($x <= $y) {\n        if ($x % 2 === 0)\n            $x_even\
    \ = $x;\n        else\n            $x_odd = $x;\n        if ($y % 2 === 0)\n \
    \           $y_even = $y;\n        else\n            $y_odd = $y;\n        $x\
    \ = ($x_even > $x_odd) ? $x_even + 1 : ($x_even > $x_odd) ? $x_odd : $x_even;\n\
    \        $y = ($y_even > $y_odd) ? $y_even + 1 : ($y_even > $y_odd) ? $y_odd :\
    \ $y_even;\n    }\n    return ($x_even > $x_odd) ? $x_even : $x_odd;\n}\n", " \
    \   if ($x < $y) {\n        $temp = $y;\n        $y = $x;\n        $x = $temp;\n\
    \    }\n    while ($x > $y) {\n        $x = $x - 2;\n        $y = $y + 2;\n  \
    \  }\n    if ($x == $y) {\n        return $x;\n    }\n    return -1;\n}\n", " \
    \   $i = 1;\n    while ($i <= $y) {\n        if ($x * $i % $y == 0) {\n      \
    \      $result = $x;\n            break;\n        }\n        $i++;\n    }\n  \
    \  return $result;\n}\n", "    $max = $x;\n    $maxValue = false;\n    $min =\
    \ $y;\n    $minValue = false;\n    \n    while ($min < $y) {\n        $newMax\
    \ = $max;\n        $newMaxValue = false;\n        $newMin = $min;\n        $newMinValue\
    \ = false;\n        \n        while ($newMax < $min) {\n            $newMax +=\
    \ 2;\n            $newMaxValue = $newMaxValue;\n            $newMin += 2;\n  \
    \          $newMinValue = $newMinValue;\n        }\n        \n        if ($newMaxValue\
    \ === false && $newMinValue === false) {\n            if ($maxValue !== false)\
    \ {\n                return $maxValue;\n            } else {\n               \
    \ return $minValue;\n            }\n        } elseif ($newMaxValue !== false &&\
    \ $newMinValue !== false) {\n            if ($newMaxValue < $newMinValue) {\n\
    \                return $newMaxValue;\n            } else {\n                return\
    \ $newMinValue;\n            }\n        } else {\n            if ($newMaxValue\
    \ !== false) {\n                return $newMaxValue;\n            } else {\n \
    \               return $newMinValue;\n            }\n        }\n        \n   \
    \     if ($newMax > $y) {\n            $max = $newMax;\n            $maxValue\
    \ = $newMaxValue;\n        } else {\n            $min = $newMin;\n           \
    \ $minValue = $newMinValue;\n        }\n    }\n}", "    $result = $y;\n    while\
    \ ( ($x > $result) && ($x % 2 == 0) ) {\n        $x = $x - 2;\n    }\n    while\
    \ ( $x <= $y ) {\n        $result = $result + 2;\n        $x = $x + 2;\n    }\n\
    \    return $result;\n}\n", "  do {\n    $num = rand($x, $y);\n  } while ($num\
    \ % 2 == 0);\n  return $num;\n}\n", "\tif ($x > $y) \n\t\treturn choose_num($y,\
    \ $x);\n\t\n\tfor ($i = 0; $i < 50; ++$i) {\n\t\tif ($i % 2 == 0 && $x >= $i &&\
    \ $x <= $i) \n\t\t\treturn $i;\n\t}\n\t\n\treturn -1;\n}\n", "    $result = $x;\n\
    \    while ($result < $y) {\n        $result *= 2;\n    }\n    if ($result > $x)\
    \ {\n        $result -= 1;\n    }\n    return $result;\n}", "\t$x = $x - 1;\n\t\
    $y = $y - 1;\n\twhile($x > $y) {\n\t\t$x = $x * 2;\n\t\t$y = $y * 2;\n\t}\n\t\
    while($x < $y) {\n\t\t$x = $x + 1;\n\t\t$y = $y - 1;\n\t}\n\t$x = $x - 1;\n\t\
    $y = $y - 1;\n\twhile($x > $y) {\n\t\t$x = $x / 2;\n\t\t$y = $y / 2;\n\t}\n\t\
    return $x;\n}\n", "    return ($x <= $y) ? $x : $y;\n}\n", "    if ($x > $y) return\
    \ choose_num($y, $x);\n    $m = ($x + $y)/2;\n    if ($x % $m == 0 && $y % $m\
    \ == 0)\n        return $m; \n    if ($x > $y) return choose_num($y, $x);\n  \
    \  return -1;\n}\n", "    if ($x < $y) {\n        $temp = $x;\n        $x = $y;\n\
    \        $y = $temp;\n    }\n\n    while($x != 0) {\n        $y--;\n        if\
    \ ($y < 0) {\n            return $x;\n        }\n        $x = ($x >> 1) | (($y\
    \ & 1) << 31);\n    }\n\n    return -1;\n}\n", "    if ($x == $y) {\n        return\
    \ -1;\n    }\n    if ($x > $y) {\n        $temp = $x;\n        $x = $y;\n    \
    \    $y = $temp;\n    }\n    $temp = $x;\n    $x = $y;\n    $y = $temp;\n\n  \
    \  while ($y > 1) {\n        $x = $x - $y;\n        if ($x === 0) {\n        \
    \    break;\n        }\n        $y = $y - $x;\n        if ($y === 0) {\n     \
    \       return $x;\n        }\n    }\n    return -1;\n}\n", "    // Write your\
    \ code here!\n    \n    return $y;\n}\n", "    $result = -1;\n    for ($i = 0;\
    \ $i < abs($x - $y); $i++) {\n        if ($x % 2 == 0 && $y % 2 == 0) {\n    \
    \        $result += $i;\n            $x = $x - $i;\n            $y = $y - $i;\n\
    \        } else {\n            $result = -1;\n        }\n    }\n    return $result;\n\
    }", "    $range = $y-$x+1;\n    if ($range <= 0) {\n        return -1;\n    }\n\
    \    $result = array();\n    for($i = $range; $i >= 0; $i--) {\n        $result[$i]\
    \ = $x/$i*$i;\n        $x = $result[$i];\n    }\n    \n    $result[0] = abs($result[0]);\n\
    \    \n    foreach ($result as $key => $value) {\n        if ($value < 0) {\n\
    \            return $key;\n        }\n    }\n    \n    return count($result)-1;\n\
    }\n", "  $x_limit = (int)floor($x / 2);\n  $y_limit = (int)floor($y / 2);\n\n\
    \  if ($x_limit < $y_limit) {\n    return -1;\n  }\n\n  if ($x == $y) {\n    return\
    \ 0;\n  }\n\n  $mid = ($x_limit + $y_limit) / 2;\n\n  // If the range is big enough,\
    \ the function can only return \n  // the lowest number that is in the range [x_limit,\
    \ y_limit] inclusive.\n  if ($x_limit == $y_limit) {\n    return $mid;\n  }\n\n\
    \  // If the range is big enough, we can divide by 2 any number in the range\n\
    \  // [x_limit, y_limit] that satisfies the condition: x % 2 == 0 AND y % 2 ==\
    \ 0.\n  else if ($mid % 2 == 0 && $mid % 4 == 0) {\n    return $mid;\n  }\n\n\
    \  // If there is any number in the range [x_limit, y_limit] that satisfies the\
    \ condition\n  // x % 2 == 0 AND y % 2 != 0, then we can use it.\n  else {\n \
    \   return choose_num($x, $mid * 2 + $y);\n  }\n}\n", "  $min = min($x, $y);\n\
    \  $max = max($x, $y);\n  if ($min === $max) {\n    return 0;\n  }\n  $mid = (int)\
    \ ($min + $max / 2);\n  if ($x === $mid) {\n    return $min;\n  } elseif ($y ===\
    \ $mid) {\n    return $max;\n  } else {\n    if ($x < $mid) {\n      return choose_num($x,\
    \ $mid);\n    } else {\n      return choose_num($mid, $y);\n    }\n  }\n}\n",
  "    if ($x < $y) {\n        $temp = $x;\n        $x = $y;\n        $y = $temp;\n\
    \    }\n\n    $x = ($x % 2 == 0) ? ($x + 2) : $x;\n    $y = ($y % 2 == 0) ? ($y\
    \ + 2) : $y;\n\n    for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            return $i;\n        }\n    }\n\n    return -1;\n}\n</code>\n\
    <|/ a |>\n<| a tags=php |>\n<code>\n<?php", "\t$x_min = $x_max = $x;\n\t$y_min\
    \ = $y_max = $y;\n\n\tif ($x_max > $y_max) {\n\t\t$x_max = $y_max = $y;\n\t\t\
    $x_min = $y_min = $x;\n\t}\n\n\tfor (;;) {\n\t\t$x_even = $x_max % 2 == 0;\n\t\
    \t$y_even = $y_max % 2 == 0;\n\t\tif ($x_even != $y_even) {\n\t\t\t$x = $x_max\
    \ - $x_even;\n\t\t\t$y = $y_max - $y_even;\n\t\t} else {\n\t\t\t$x_min = $x_max\
    \ - 1;\n\t\t\t$y_min = $y_max - 1;\n\t\t}\n\t\tif ($x_min == $x_max) {\n\t\t\t\
    break;\n\t\t}\n\t\tif ($x_min < $y_min) {\n\t\t\tif ($x_min != 0) {\n\t\t\t\t\
    $x_max = $x_min + 1;\n\t\t\t}\n\t\t\tif ($x_max == $y_max) {\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t} else {\n\t\t\tif ($y_min != 0) {\n\t\t\t\t$y_max = $y_min + 1;\n\
    \t\t\t}\n\t\t\tif ($y_max == $x_max) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\
    \tif ($x_min == $x_max) {\n\t\treturn $x_min;\n\t} elseif ($y_min == $y_max) {\n\
    \t\treturn $y_min;\n\t} else {\n\t\treturn -1;\n\t}\n}", "  $range_x = $y - $x\
    \ + 1;\n  for ($a = 1; $a <= $range_x; $a++) {\n    if ($x % $a == 0) {\n    \
    \  $b = $a;\n      break;\n    }\n  }\n  if ($b > $range_x) {\n    return -1;\n\
    \  }\n  $range_y = $x - $y + 1;\n  for ($a = 1; $a <= $range_y; $a++) {\n    if\
    \ ($y % $a == 0) {\n      $b = $a;\n      break;\n    }\n  }\n  if ($b > $range_y)\
    \ {\n    return -1;\n  }\n  $x_remainder = $x - $b - 1;\n  $y_remainder = $y -\
    \ $a - 1;\n  if ($x_remainder < $y_remainder) {\n    return $b;\n  } else {\n\
    \    return $a;\n  }\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,algorithm |>\n\
    Here is a simple O(n) algorithm.\n<code>\npublic function find_odd_factors($num)\
    \ {\n    $factors = array();\n    for ($i = 1; $i <= $num; $i++) {\n        if\
    \ ($num % $i == 0) {\n            $factors[] = $i;\n        }\n    }\n    return\
    \ array_filter($factors, 'is_int');\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    That is still O(n) worst case.\n<|/ c |>\n<| c |>\nThe O(n) is because you loop\
    \ over all numbers up to `n`, then you loop over all numbers up to `n`, so if\
    \ you have `n/2` numbers that could be factors, then you would have to loop over\
    \ `n` numbers.\n<|/ c |>\n<| c |>\nAh yes I didn't consider that. Thanks :)\n\
    <|/ c |>\n<| a dscore=0 tags=php,algorithm |>\nHere is a simple O(n) algorithm:\n\
    <code>\npublic function find_factors($num) {\n    // Find all the factors up to\
    \ n\n    $factors = [];\n    for ($i = 1; $i <= $num; $i++) {\n        if ($num\
    \ % $i == 0) {\n            $factors[] = $i;\n        }\n    }\n\n    // Find\
    \ how many factors we have\n    $number_of_factors = count($factors);\n\n    //\
    \ Find all the factors that are not divisors\n    $non_divisors = 0;\n    foreach\
    \ ($factors as $factor) {\n        if ($factors > 1) {\n            $non_divisors\
    \ += $factor;\n        }\n    }\n\n    // Return the non-divisors\n    return\
    \ $number_of_factors - $non_divisors;\n}\n</code>\n<|/ a |>\n<| c |>\nThat ",
  "    if ($x < $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n    \
    \    $min = $y;\n        $max = $x;\n    }\n    while ($min < $max) {\n      \
    \  $mid = $min + $max >> 1;\n        $mid = ($mid + $min) >> 1;\n        if ($mid\
    \ > $max && $mid > $mid) {\n            $max = $mid;\n        } else {\n     \
    \       $min = $mid;\n        }\n    }\n    return $min;\n}", "    for ($i = $x;\
    \ $i <= $y; $i++) {\n        if ($i % 2 == 0) return $i;\n    }\n    return -1;\n\
    }\n\n$result = choose_num($n, $num);\n\nif ($result == -1) {\n    echo 'No even\
    \ number between $n and $num'; \n} else {\n    echo 'The biggest even number between\
    \ $n and $num is $result';\n}", "    if ($x === 0 || $y === 0) {\n        return\
    \ -1;\n    }\n    if ($x >= $y) {\n        $max = $x;\n        $min = $y;\n  \
    \  } else {\n        $max = $y;\n        $min = $x;\n    }\n    $max_even = 0;\n\
    \    do {\n        $max_even++;\n    } while ($max % 2 === 0);\n    return $max_even\
    \ ? $max : -1;\n}\n</code>\n<|/ a dscore=0 tags=php,math |>\n<| c |>\nI actually\
    \ know this one, and it works, but I specifically asked for non-recursive way\n\
    <|/ c |>\n<| c |>\nYeah, this one works, but my question was about non-recursive\
    \ way\n<|/ c |>\n<| c |>\nYeah, I know, but this one uses recursion. Your question\
    \ was about non-recursive way, which is an answer to your question.\n<|/ c |>\n\
    <| c |>\nYeah, that's why I wrote that it isn't recursive way. My question is\
    \ how I can convert it to non-recursive way\n<|/ c |>\n<| c |>\nYes, I wrote it\
    \ as an answer, and I answered it: you can't. Non recursive way means that you\
    \ use loops, and those loops do exactly the same as your recursive way\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php", "    if ($x < $y) { return choose_num($y,\
    \ $x); }\n    \n    if ($x == $y) { return $x; }\n    \n    $smallest = $x < $y\
    \ ? $x : -1 * $y;\n    $largest = $x < $y ? -1 * $x : -1 * ($y - 1);\n    $even\
    \ = 0;\n    \n    for ($i = 1; $i <= $largest; $i++) {\n        $number = $i *\
    \ 2 + $even;\n        if ($number % $x == 0 && $number % $y == 0) { \n       \
    \     return $number; \n        }\n        $even++;\n    }\n    return -1; \n\
    }\n ?>\n\n<?php ", "    for($a = $x; $a <= $y; $a++) {\n        if($a % 2 == 0)\
    \ {\n            $a += 2;\n            while($a % 2 == 0) {\n                $a\
    \ += 2;\n            }\n            return $a;\n        }\n    }\n    return -1;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=python,math dscore=1 |>\nThe first approach\
    \ is the obvious one. Just loop from x to y. For every number, if it's even, add\
    \ 2 and check if it's greater than y. If it's greater, return that number. Otherwise,\
    \ subtract 2 until you reach zero. There may be some edge cases I haven't thought\
    \ of in some cases, but this approach should work fine for most cases.\nThe second\
    \ approach is to use mathematical rules. For example, if you have two numbers\
    \ a and b, you can always find the highest even number that is in the range [a,\
    \ b] by adding b to a, then checking if that number is even. For example, a +\
    \ b would always be even, but you could also do a + 2b so that you could check\
    \ b if it's even. Because you know that every number in that range will be even,\
    \ the second approach is always correct and faster. Here's a link to an article\
    \ explaining it: https://codeburst.io/whats-up-with-the-mathematical-rule-that-the-highest-even-number-is-6ea927b57495\n\
    Here's another link to an article explaining how to check whether a number is\
    \ even: https://codeburst.io/checking-whether-a-number-is-even-using-python-8cfa4376ae6c\n\
    <|/ a |>\n<| a tags=python,math |>\nIf x is always smaller than y, and you know\
    \ that x is even, then\n<code>\ndef choose_num(x, y):\n    while y >= x :\n  \
    \      if x % 2 == 0:\n            x += 1\n        else:\n            x -= 2\n\
    \    return x\n</code>\nwill work. Basically, you want to loop x from 0 to y,\
    \ and at each iteration, check if it's even. If it's even, you add 1 to x, otherwise\
    \ you decrease x by 2 to keep checking. If the loop stops when x reaches y, x\
    \ is even, and the correct value is returned.\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\ndef choose(x, y):\n   a=0\n   b = x\n   while b != y:\n       if\
    \ (b % 2 == 0):\n         b += 2\n       else:\n         b -= 2\n       a += b\n\
    \   return a\n</code>\n<|/ a tags=python,math |>\n<| a ", "    return max($x,\
    \ $y) % 2 == 0 ? $x + 1 : $y - 1;\n}\n", "    if ($x > $y) {\n        $min = $x;\n\
    \        $max = $y;\n        $diff = $max - $min;\n    } else {\n        $min\
    \ = $y;\n        $max = $x;\n        $diff = $max - $min;\n    }\n    \n    $found\
    \ = false;\n    while ($found == false){\n        if ($diff % 2 != 0){\n     \
    \       $found = true;\n        }\n        else {\n            $diff = $diff /\
    \ 2;\n            $found = true;\n        }\n    }\n    \n    if ($found == true){\n\
    \        return $min;\n    }\n    else {\n        return -1;\n    }\n}\n", " \
    \   for ($i = 0; $i <= $y; $i++) {\n        if ($x % $i == 0) {\n            $x\
    \ = $i\n        }\n    }\n    return $x\n}\n</code>\n<|/ a tags=php,algorithm\
    \ dscore=1 |>\n<| c |>\nWhat about `choose_num(1, 10000)`?\n<|/ c |>\n<| c |>\n\
    Hmmm, good point. I've adjusted the code above to take that into account\n<|/\
    \ c |>\n<| c |>\n: What about `choose_num(10000, 99999)`?\n<|/ c |>\n<| c |>\n\
    That will return `9999`, not `99999`\n<|/ c |>\n<| c |>\nAh, yes. Sorry about\
    \ that. Fixed it\n<|/ c |>\n<| a |>\nTry this one:\n<code>", "    $evens = array(\n\
    \        1 => 1,\n        3 => 3,\n        5 => 5,\n        7 => 7,\n        9\
    \ => 9\n    );\n    $even_counter = array();\n    foreach ($evens as $value =>\
    \ $count) {\n        if ($x >= $y || $x <= $y) {\n            if ($x >= $y ||\
    \ $x <= $y) {\n                return -1;\n            }\n            $even_counter[$count]++;\n\
    \        }\n    }\n    $count = 0;\n    foreach ($even_counter as $value => $count)\
    \ {\n        if ($even_counter[$count] == $value) {\n            return $value;\n\
    \        }\n    }\n    return -1;\n}\n", "    return ($x<=0 || $y<=0) ? -1 : $x\
    \ - ($x % ($y-$x)); // $y - ($x % $y)\n}\n</code>\nI hope this will help you.\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\nThis is my solution based on a similar approach\
    \ as other answers, but optimized for speed (no loops etc) using recursion:\n\
    <code>", "  if ($x === $y) {\n    return -1;\n  }\n  return $x + ($y - $x) / 2;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not answer the OP's question.\n\
    <|/ c |>\n<| c |>\nThis doesn't answer the question at all. You should really\
    \ add comments to your code explaining what's going on, not just post a dump of\
    \ code.\n<|/ c |>\n<| c |>\nIt does answer the question, the OP simply didn't\
    \ understand how it was working. As I've commented on another answer, I recommend\
    \ you read about the [Binary Search Algorithm](http://en.wikipedia.org/wiki/Binary_search_algorithm).\
    \ Once you understand how it works, it can be applied in PHP by simply adding\
    \ `function binary_search_num($x, $y) { return choose_num($x, $y); }` before the\
    \ `choose_num` function is called.\n<|/ c |>\n<| a tags=binary-search,php |>\n\
    If you would like to apply binary search (which is what you are doing, as you\
    \ stated), you just need to call the choose_num function before the function binary_search_num\
    \ is called. This can be done by simply adding function binary_search_num($x,\
    \ $y) { return choose_num($x, $y); }before the choose_num function is called.\n\
    <code>", "    for($i = $x; $i <= $y; $i++) {\n        if($i%2 == 0) {\n      \
    \      return $i;\n        }\n    }\n\n    return -1;\n}\n", "    if ($x == $y)\n\
    \        return $x;\n    if ($x < $y)\n        return choose_num($x, $y-1);\n\
    \    else\n        return choose_num($x+1, $y);\n}\n", "    if ($x <= $y) {\n\
    \        if ($x % 2 == 0)\n            return $x / 2;\n        else\n        \
    \    return ($x - 1) / 2;\n    }\n    return -1;\n}\n", "  if ($x === $y) \n \
    \   return $x;\n  \n  $x_even = $x_odd = 0;\n  $x_even = ($x & 1) ? 1 : 0;\n \
    \ $x_odd = ($x & 2) ? 1 : 0;\n  \n  $y_even = $y_odd = 0;\n  $y_even = ($y & 1)\
    \ ? 1 : 0;\n  $y_odd = ($y & 2) ? 1 : 0;\n\n  $min = $x_even*$y_even + $x_odd*$y_odd;\n\
    \n  $even = $x_even*$y_even + $x_odd*$y_odd;\n  $odd = $x_even*$y_odd + $x_odd*$y_even;\n\
    \  return ($min > $even) ? $min : $even;\n}\n", "    if ($x == $y) {\n       \
    \ return $x;\n    }\n    if ($x < $y) {\n        $tmp = $x;\n        $x = $y;\n\
    \        $y = $tmp;\n    }\n    $mid = ($x + $y)/2;\n    if ($mid%2 == 0) {\n\
    \        return $mid;\n    }\n    return choose_num($x, $mid);\n}\n", "\tif ($x\
    \ < $y) { return choose_num($y, $x); }\n\tif ($x == $y) { return $x; }\n\t\n\t\
    $m = $y;\n\twhile (true) {\n\t\t$m = ($m * 2) + 1;\n\t\tif ($m > $y) { return\
    \ -1; }\n\t\tif ($m == $x) { break; }\n\t}\n\treturn $m;\n}\n\n", "  $min_num\
    \ = $min_num = $x > $y ? $x : $y;\n  $max_num = $max_num = $x < $y ? $x : $y;\n\
    \  if ($max_num - $min_num == 1) {\n    if ($x <= $y) {\n      return $x;\n  \
    \  } else {\n      return $y;\n    }\n  }\n  $temp = $max_num;\n  $max_num = $min_num;\n\
    \  $min_num = $temp;\n  for ($i = 1; $i < $max_num - $min_num; $i++) {\n    if\
    \ ($min_num + $i > $max_num - $min_num && $max_num - $min_num % $i == 0) {\n \
    \     $temp += $i;\n      if ($temp > $max_num) {\n        $max_num = $temp;\n\
    \      }\n    } else {\n      break;\n    }\n  }\n  return $max_num;\n}\n", " \
    \   if ($x > $y) return choose_num($y, $x);\n    if ($x == $y) return $x;\n\n\
    \    if ($x % 2 == 0 && $y % 2 == 0) {\n        return $x;\n    } else if ($x\
    \ % 2 == 0) {\n        return $y;\n    } else if ($y % 2 == 0) {\n        return\
    \ $x;\n    } else {\n        return -1;\n    }\n}\n", "    $x--;\n    $y--;\n\
    \    if ($x < $y || $x == $y) {\n        return -1;\n    }\n    if ($x < $y &&\
    \ $x == $y) {\n        return $x;\n    }\n    $x = (int) ($x / 2);\n    $y = (int)\
    \ ($y / 2);\n    do {\n        $x = (int) ($x / 2);\n        $y = (int) ($y /\
    \ 2);\n        $x = ($x * ($x + 1)) / 2;\n        $y = ($y * ($y + 1)) / 2;\n\
    \    } while (!is_integer($x) || !is_integer($y));\n    return $x;\n}\n</code>\n\
    <|/ a tags=algorithm,php,java,math,c# |>\n<| a |>\nThis is a simple brute force\
    \ solution. It doesn't take into account edge cases, like negative numbers or\
    \ zero, but I thought it would be simple enough to add that in.\n<code>", "  \
    \  $even_num = floor($x / 2);\n    if ($even_num === 0)\n        return -1;\n\
    \    $odd_num = floor($y / 2);\n    return $even_num > $odd_num ? $even_num :\
    \ $odd_num;\n}\n</code>\n<|/ a tags=php,algorithm |>\n<| a dscore=0 tags=php,algorithm\
    \ |>\nIf you're trying to find the greatest odd number from two numbers, a better\
    \ algorithm than your original would be something like the following:\n<code>",
  "    $a = $x;\n    $b = $y;\n    while($a <= $b) {\n        $max = $a;\n       \
    \ for($c = $a; $c <= $b; $c++) {\n            if($c % 2 == 0) {\n            \
    \    $max = $c;\n            }\n        }\n        if($max == $a) {\n        \
    \    return -1;\n        }\n        $a = $max;\n    }\n    return $a;\n}\n", " \
    \ for ($i = 0; $x <= $y; $i++) {\n    if ($i % 2 == 0) {\n      if ($x <= $i &&\
    \ $i % 2 != 0) {\n        return $i;\n      }\n    }\n  }\n\n  return -1;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nThe first thing I'd suggest is that\
    \ you use a loop.  For example :\n<code>\n$firstnumber = 13;\n$secondnumber =\
    \ 15;\n$biggestEven = $firstnumber;\nfor ($counter = 1; $counter <= $secondnumber;\
    \ $counter++) {\n    if ($firstnumber % $counter == 0 && $biggestEven % $counter\
    \ == 0) {\n        $biggestEven = $counter;\n    }\n}\n</code>\n<|/ a tags=php,function,math,algorithm,logic\
    \ |>\n<| c |>\nThis is more elegant, but the inner loop could just be `for ($i\
    \ = $counter; $i <= $secondnumber; $i++)`\n<|/ c |>\n<| a dscore=0 tags=php,function,math,algorithm,logic\
    \ |>\nYou can use a simple loop:\n<code>\n<?php", "  // If the arguments are equal,\
    \ then we simply return the larger of the two.\n  if ($x == $y) return $x > $y\
    \ ? $x : $y;\n  $min = $x > $y ? $x : choose_num($y, $x);\n  $max = abs($min);\n\
    \  do {\n    // Find the smallest number >= $max that isn't evenly divisible by\
    \ $max.\n    // If $max is evenly divisible by $max, then there's no such number\
    \ \n    // and we need to subtract 1.\n    if ($min % $max === 0 || ($min % $max)\
    \ === 0 && $min > 1) \n      $min = $min - 1;\n    // If the resulting number\
    \ is also evenly divisible by $max, then $min is \n    // also evenly divisible\
    \ by $max and we return -1.\n    elseif ($min % $max === 0)\n      return -1;\n\
    \    // Otherwise, $min is not evenly divisible by $max, and we return the new\
    \ \n    // $min as the new $max.\n    else {\n      $max = $max * 2;\n      if\
    \ ($max > $y)\n        $max = $y;\n    }\n  } while ($max >= $min);\n  return\
    \ $min;\n}\n", "\t$x_even = $x_odd = $y_even = $y_odd = 0;\n\t\n\t// Count the\
    \ number of even and odd numbers between x and y.\n\t// If there's no such number,\
    \ the function should return -1.\n\twhile ($x <= $y) {\n\t\t$x_even++;\n\t\tif\
    \ ($x & 1) {\n\t\t\t$x_odd++;\n\t\t}\n\t\t$x++;\n\t}\n\t\n\t// Count the number\
    \ of even and odd numbers between y and x.\n\twhile ($y <= $x) {\n\t\t$y_even++;\n\
    \t\tif ($y & 1) {\n\t\t\t$y_odd++;\n\t\t}\n\t\t$y++;\n\t}\n\t\n\tif ($x_even >=\
    \ $y_even) {\n\t\treturn $y_odd;\n\t} else {\n\t\treturn $x_odd;\n\t}\n}", " \
    \   for ($i = $x; $i <= $y; $i++) {\n        if ($i % ($i + 2) === 0) {\n    \
    \        return $i;\n        }\n    }\n    return -1;\n}\n", "  if ($x < $y) {\n\
    \    $tmp = $x;\n    $x = $y;\n    $y = $tmp;\n  }\n  $oddsX = ($x % 2 ? 1 : 0);\n\
    \  $oddsY = ($y % 2 ? 1 : 0);\n  if ($x < $y) {\n    $tmp = $x;\n    $x = $y;\n\
    \    $y = $tmp;\n  }\n  if ($x < $oddsX) {\n    $tmp = $x;\n    $x = $oddsX;\n\
    \    $oddsX = $tmp;\n  }\n  if ($y < $oddsY) {\n    $tmp = $y;\n    $y = $oddsY;\n\
    \    $oddsY = $tmp;\n  }\n  if ($x < $oddsX || $y < $oddsY) {\n    return -1;\n\
    \  }\n  else {\n    $num = $x;\n    do {\n      if ($num % 2 == 0) {\n       \
    \ $num = floor($num / 2);\n      }\n      else {\n        $num = ceil($num / 2);\n\
    \      }\n    } while ($num > $y);\n    return $num;\n  }\n}\n", "    if ($x <\
    \ $y) {\n        $tmp = $x;\n        $x = $y;\n        $y = $tmp;\n    } elseif\
    \ ($x == $y) {\n        return $x;\n    }\n\n    $r = $x;\n    while($y > 1) {\n\
    \        $t = $x % $y;\n        if ($t == 0) {\n            $r++;\n        }\n\
    \        $x = $y;\n        $y = $t;\n    }\n\n    return $r;\n}\n</code>\n<|/\
    \ a tags=php |>\n<| c |>\nHi thanks for this! I haven't checked out your answer\
    \ yet but I'll do so soon. I'm sorry I can't upvote your answer as I don't have\
    \ enough reputation points.\n<|/ c |>\n<| c |>\nI've posted my own answer. I'm\
    \ sorry I can't upvote your answer as I don't have enough reputation points. I'm\
    \ also sorry that my answer didn't help you. It was just a suggestion that might\
    \ be helpful to you.\n<|/ c |>\n<| a tags=php dscore=2 |>\nHere's a modified version\
    \ that uses modular arithmetic instead of looping:\n<code>", "    if ($x <= $y)\
    \ {\n        if ($x <= $x || $y <= $x) {\n            return $x;\n        }\n\
    \        return -1;\n    }\n\n    if ($x >= $y) {\n        if ($y <= $x || $x\
    \ <= $y) {\n            return $y;\n        }\n        return -1;\n    }\n\n \
    \   if ($y >= $x && $y <= $y) {\n        if ($x <= $x && $x <= $y || $y <= $x\
    \ && $y <= $y) {\n            return $x;\n        }\n        return -1;\n    }\n\
    \n    // The function didn't find the right answer\n    return -1;\n}\n</code>\n\
    <|/ a |>\n<| a |>\nAs already suggested by this answer by Nitzan Ashraf, but with\
    \ PHP 7.3 there is a new built-in function for this. \nThe new function is called\
    \ array_key_last, and it can be used like so:\n<code>\n<?php\n$array = [\n   \
    \ 'a' => 1,\n    'b' => 2,\n    'c' => 3,\n    'd' => 4\n];\n\n$lastKey = array_key_last($array);\n\
    echo \"Last key $lastKey holds the value $array[$lastKey]\";", "    if ($x > $y)\
    \ {\n        $min = $y;\n        $max = $x;\n    }\n    else {\n        $min =\
    \ $x;\n        $max = $y;\n    }\n    if ($min % 2 == 0) {\n        $max++;\n\
    \    }\n    do {\n        $num = $min + mt_rand(0, ($max - $min + 1));\n     \
    \   if ($num % 2 == 0) {\n            $num++;\n        }\n    } while (isEven($num));\n\
    \    return $num;\n}\n</code>\n<|/ a tags=php,random,mysql |>\n<| c |>\nThanks\
    \ Patrick. Your code works but it is very slow. I was hoping for something a little\
    \ bit faster, like maybe generating random numbers in a different way that gives\
    \ results quickly and doesn't have to be stored in a table. Anything would be\
    \ good for me. I'm very thankful to you.\n<|/ c |>\n<| c |>\nI thought there was\
    \ a better way to do this. I believe this one is much faster.\n<|/ c |>\n<| c\
    \ |>\nThis code works but it is too slow for me. I need the most efficient way\
    \ to generate random numbers. It's going to be generating many random numbers\
    \ (10-100k), so I need it to work fast. Thank you for your help.\n<|/ c |>\n<|\
    \ c |>\nIt's going to be generating many random numbers (10-100k), so I need it\
    \ to work fast.\n<|/ c |>\n<| c |>\nThank you so much. You're a life saver. This\
    \ is the best code I've seen on this site for generating random numbers. Your\
    \ code is working great for me!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    $x_even\
    \ = ($x % 2) == 0;\n    $y_even = ($y % 2) == 0;\n    if ($x_even && $y_even)\
    \ {\n        return $y;\n    } else if ($x_even) {\n        return -1;\n    }\
    \ else {\n        return $x;\n    }\n}\n", "    if ($x > $y) $temp = $x;\n   \
    \ else $temp = $y;\n    if ($temp >= $x) { // swap x and y\n        $temp = $x;\n\
    \        $x = $y;\n        $y = $temp;\n    }\n    while (true) {\n        if\
    \ ($x % 2 == 0) $x++;\n        else if ($y % 2 == 0) $y--;\n        else return\
    \ $x;\n        $x /= 2;\n        $y /= 2;\n    }\n}\n", "    $evens = array();\n\
    \    for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n           \
    \ $evens[] = $i;\n        }\n    }\n    if (count($evens) == 0) {\n        return\
    \ -1;\n    }\n    sort($evens);\n    return $evens[count($evens) - 1];\n}", " \
    \ while ($x < $y) {\n    $x = ($x + $y) % $y;\n  }\n  return $x;\n}", "    if\
    \ ($x >= $y) {\n        return -1;\n    }\n    return ($x % 2 == 0) ? ($x + 2)\
    \ : $y;\n}\n\n$num1 = 5;\n$num2 = 9;\n", "    if ($x >= $y) {\n        return\
    \ -1;\n    }\n    if ($x > 0 && $y > 0) {\n        $evens = array();\n       \
    \ $odds = array();\n        for ($i = $x; $i <= $y; $i++) {\n            if ($i\
    \ % 2 == 0) {\n                $evens[] = $i;\n            } else {\n        \
    \        $odds[] = $i;\n            }\n        }\n        if (count($evens) >\
    \ 0 && count($odds) > 0) {\n            return max($evens, $odds);\n        }\n\
    \    }\n    return -1;\n}\n</code>\n<|/ a dscore=0 tags=arrays,php |>\n<| c |>\n\
    Thanks for your effort. It works for most cases but still fails to find two numbers\
    \ within a particular range. Please see the example I provided. The answer is\
    \ `3` in this case but it should be `2`.\n<|/ c |>\n<| c |>\n: I misunderstood\
    \ what you were after. I thought you wanted the biggest even number, not an even\
    \ number within two given numbers. I've updated my answer.\n<|/ c |>\n<| a dscore=0\
    \ |>\nI used the code from the other answer, but it was taking forever to run.\n\
    Here is my solution:\n<code>", "  $x_even = ($x & 1); // get only even numbers\n\
    \  $y_even = ($y & 1); // get only even numbers\n  \n  $x_even = ($x_even ? $x\
    \ : $x_even * -1); // if even, multiply x by -1, else leave as is\n  $y_even =\
    \ ($y_even ? $y : $y_even * -1); // if even, multiply y by -1, else leave as is\n\
    \  \n  $x_plus_y = $x + $y; // get their sum\n  \n  if ($x_plus_y >= 4) { // if\
    \ they add up to bigger than 4, \n    $odd = $x_plus_y & 1; // set odd flag\n\
    \    if ($x_plus_y & 2) { // if they're even, they get 1 added to odd\n      $x_plus_y\
    \ = ($x_plus_y + 1) / 2; // add 1 to odd\n    } else {\n      $x_plus_y = ($x_plus_y\
    \ + 3) / 2; // add 3 to odd\n    }\n  } else {\n    $odd = $y_even ? 1 : 3;\n\
    \  }\n  \n  return $x_even + $y_even + $odd;\n}", "    if ($x > $y) {\n      \
    \  $min = $x;\n        $max = $y;\n    } else {\n        $min = $y;\n        $max\
    \ = $x;\n    }\n    \n    $min_even = 1;\n    $max_even = 2 * $max;\n    \n  \
    \  $min_odd = $min + 1;\n    $max_odd = 2 * $min;\n    \n    if ($max_even > $max_odd)\
    \ {\n        $max_even = $max_odd + 1;\n        $min_even = $min - 1;\n    }\n\
    \    \n    while ($max_even % $max_odd != 0) {\n        $max_even += 1;\n    }\n\
    \    \n    while ($min_even % $min_odd != 0) {\n        $min_even -= 1;\n    }\n\
    \    \n    do {\n        $tmp = $max_even % $min_even;\n        $max_even = $max_even\
    \ + $tmp;\n        $min_even = $min_even - $tmp;\n    } while ($max_even > $max_odd);\n\
    \    \n    if ($max_even < $min_even) {\n        return -1;\n    } else {\n  \
    \      return $max_even;\n    }\n}", "  if ($x < $y) {\n    $min = $x;\n    $max\
    \ = $y;\n  } else {\n    $min = $y;\n    $max = $x;\n  }\n  $step = $max / 2;\
    \ // We will check every number from $min to $max with ($step/2) increments\n\
    \  while (($min <= $max) && ($step == $max)) { // If we've reached $max, there's\
    \ no even number\n    if ($min % 2 == 0) {\n      return $min;\n    }\n    $step\
    \ = $step/2;\n    $min = $min + $step;\n  }\n  if ($min > $y) {\n    return -1;\n\
    \  }\n  return $min;\n}\n", "    if ($x <= 0 || $y <= 0) {\n        return -1;\n\
    \    }\n    \n    // If x is greater than y, swap them.\n    if ($x > $y) {\n\
    \        $temp = $x;\n        $x = $y;\n        $y = $temp;\n    }\n    \n   \
    \ // Initialize n to the biggest number that is in the range [x, y]\n    // that\
    \ doesn't exceed MAXINT or MININT.\n    $n = $x;\n    \n    // Invariant: x is\
    \ always smaller than y, because n > x or y > n.\n    while ($n > $y) {\n    \
    \    $n = $n - $y;\n    }\n    \n    // Invariant: x is always smaller than y,\
    \ because n > x or y > n.\n    while ($n >= $y) {\n        $n = $y - $n;\n   \
    \ }\n    \n    // Return the value of n when it's an even number.\n    return\
    \ $n;\n}\n", "    // check if both numbers are even.\n    if ($x%2 == 0 && $y%2\
    \ == 0) {\n        // if so, find the biggest even number in the range.\n    \
    \    return max($x, $y);\n    }\n    // if one number is odd, the other is even.\n\
    \    if ($x%2 != 0 || $y%2 != 0) {\n        // if one is odd, the other is even.\n\
    \        return -1;\n    }\n    // if both numbers are odd.\n    if ($x%2 == 0\
    \ && $y%2 == 0) {\n        // if both are even, return whichever one is larger.\n\
    \        return $x > $y ? $x : $y;\n    }\n    // if both numbers are odd.\n \
    \   return $x > $y ? $y : $x;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nYou could\
    \ use an additional array for the biggest number that you could then use as an\
    \ index to get the biggest number of the smaller array:\n<code>\n<?php\n", " \
    \   if ($x > $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n   \
    \     $min = $y;\n        $max = $x;\n    }\n    \n    while ($min <= $max) {\n\
    \        // find biggest even number below the middle of given numbers\n     \
    \   $m = $min + floor(($max - $min) / 2);\n        if ($m % 2 == 0) {\n      \
    \      // if m divides evenly, then it's even and m is the middle of given numbers\n\
    \            return $m;\n        } else {\n            // otherwise, m is even\
    \ but not the middle of given numbers. \n            // so let's move m's position\
    \ to left and try again\n            $min = $m + 1;\n        }\n    }\n    return\
    \ -1;\n}\n</code>\n<|/ a tags=python |>\n<| c |>\nYour answer gives different\
    \ answers for choose_num(15, 12) vs. choose_num(12, 15) vs. choose_num(13, 12).\n\
    <|/ c |>\n<| c |>\nyes, you were right. I updated my answer and corrected the\
    \ mistake.\n<|/ c |>\n<| a dscore=0 |>\nThe answer you provided will not give\
    \ you the biggest even number but will give the biggest odd number in the range\
    \ [x,y]. For example choose_num(15,12) would return 13 and choose_num(12,15) would\
    \ return 12.\nYou can fix this by using the following code:\n<code>\ndef choose_num(x\
    \ , y):\n    if x > y:\n        minimum = x\n        maximum = y\n    else:\n\
    \        minimum = y\n        maximum = x\n    while minimum <= maximum:\n   \
    \     middle = (minimum + maximum) // 2\n        if middle % 2 == 0:\n       \
    \     minimum = middle + 1\n        else:\n            maximum = middle - 1\n\
    \    return minimum\n</code>\n<|/ a tags=python |>\n<| a tags=python dscore=0\
    \ |>\nThe problem is when you try and find the average of 15 & 12. The average\
    \ is 5 and since 5 % 2 == 0, you get a negative number which is then used as the\
    \ minimum and you end up with your average being negative also.\nIf you change\
    \ the average function so that instead of taking the average of the two numbers,\
    \ it finds the average of the difference between the two numbers, i.e.:\n<code>\n\
    def average(numbers):\n    total = 0\n    total2 = 0\n    count = 0\n    for num\
    \ in numbers:\n        if num % 2 == 0:\n            total += num\n          \
    \  total2 += num\n            count += 1\n    return total/count\n</code>\nYou\
    \ can then call it like so:\n<code>\naverage(15)\naverage(12)\n", "    if ($x\
    \ > $y) {\n        $tmp = $x;\n        $x = $y;\n        $y = $tmp;\n    } \n\
    \    \n    if ($x == 0 || $y == 0) {\n        return -1;\n    }\n    \n    $res\
    \ = -1;\n    \n    if ($x == 1) {\n        $res = 1;\n    } else {\n        $res\
    \ = choose_num($x / 2, $y / 2);\n        if ($x == $y || $res == -1) {\n     \
    \       return $res;\n        }\n    }\n    \n    $p = 1;\n    \n    while($res\
    \ <= $y) {\n        $p++;\n        $res *= 2;\n        if ($p > $y) {\n      \
    \      break;\n        }\n    }\n    \n    return $res;\n}\n", "    if ($x ==\
    \ $y) return $x;\n    if ($x == 0 || $y == 0) return -1;\n    if ($x < $y) return\
    \ choose_num($x, $y - 1);\n    return choose_num($x - 1, $y);\n}", "    if ($x\
    \ > $y) {\n        if ($x % 2 == 0) {\n            $y = $y - 1;\n        }\n \
    \       if ($y % 2 == 0) {\n            $x = $x - 1;\n        } else {\n     \
    \       return -1;\n        }\n    } elseif ($y > $x) {\n        if ($y % 2 ==\
    \ 0) {\n            $x = $x - 1;\n        }\n        if ($x % 2 == 0) {\n    \
    \        $y = $y - 1;\n        } else {\n            return -1;\n        }\n \
    \   } else {\n        return -1;\n    }\n    return $x;\n}\n", "\t$x = abs($x);\
    \ // Make sure that x is positive\n\t$y = abs($y); // Make sure that y is positive\n\
    \t$n = $x; // $n is the biggest even number that is in [x, y] inclusive\n\twhile\
    \ ($n <= $y) {\n\t\tif ($n % 2 == 0) {\n\t\t\t$n++;\n\t\t} else {\n\t\t\t$n =\
    \ $x + 1;\n\t\t}\n\t}\n\treturn $n;\n}", "    if ($x <= $y) {\n        return\
    \ ($x == $y) ? $x : choose_num($y, $x);\n    } else {\n        return ($x == $y)\
    \ ? $y : choose_num($x, $y);\n    }\n}", "\t$min = $x;\n\t$max = $y;\n\n\t// Step\
    \ 1.\n\t// If x is less than y, swap them.\n\tif ($x < $y) {\n\t\t$tmp = $x;\n\
    \t\t$x = $y;\n\t\t$y = $tmp;\n\t}\n\n\t// Step 2.\n\t// Compute and save the largest\
    \ number between x and y (inclusive).\n\t$biggest = min($x, $y);\n\t$biggest_odd_num\
    \ = $biggest;\n\t$next_odd_num = $biggest + 1;\n\twhile ($biggest < $next_odd_num)\
    \ {\n\t\t$biggest += 2;\n\t\tif ($biggest >= $next_odd_num) {\n\t\t\t$biggest_odd_num\
    \ += 2;\n\t\t}\n\t\t$next_odd_num += 2;\n\t}\n\n\t// Step 3.\n\t// If $biggest\
    \ is even, decrement it by 1 and add 2 to $biggest_odd_num.\n\tif ($biggest %\
    \ 2 == 0) {\n\t\t$biggest--;\n\t\t$biggest_odd_num += 2;\n\t}\n\n\t// Step 4.\n\
    \t// If $biggest_odd_num is odd, return $biggest_odd_num.\n\tif ($biggest_odd_num\
    \ % 2 == 1) {\n\t\treturn $biggest_odd_num;\n\t}\n\n\t// Step 5.\n\t// Otherwise\
    \ decrement $biggest_odd_num by 2 and return -1.\n\t$biggest_odd_num -= 2;\n\t\
    return -1;\n}\n", "  if ($x < $y) {\n    return choose_num($y, $x);\n  }\n  if\
    \ ($x == $y) {\n    return $x;\n  }\n  while ($x != $y) {\n    $x = ($x * ($x\
    \ + 1)) / 2;\n    if ($x % 2 == 0) {\n      return $x;\n    }\n  }\n  return -1;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThe question is \"how can I solve this problem\
    \ without using an explicit loop?\" This doesn't answer the question.\n<|/ c |>\n\
    <| c |>\nSorry if it was not clear enough. The problem is not to use an explicit\
    \ loop. The question was \"how can I solve this problem without using an explicit\
    \ loop?\".\n<|/ c |>\n<| a tags=algorithm,php,optimization |>\nHere's a quick\
    \ solution to this, and I think it works. The idea is to use binary search to\
    \ find the index of the largest even number in between two numbers (in this case\
    \ between 1 and 1000). Binary search will find the midpoint of that number, then\
    \ it will check if that number is a multiple of 6. If it is, then it means we\
    \ need to start searching from the other side of the midpoint, and if it isn't\
    \ then we know that the number was the largest even number in that range. So,\
    \ if we keep track of the largest even number in the range, we can use this information\
    \ to determine the upper bound for our binary search, then we know that we need\
    \ to search between that number and the next multiple of 6.\n<code>", "  return\
    \ $x >= $y ? -1 : \n         $x <= $y ? $x : \n               ($x - $y) % ($x\
    \ + $y) + $y;\n}\n</code>\n<|/ a |>\n<| c |>\nHaha, I beat you to the punch! The\
    \ only thing I'd add is if you're going to write a PHP function, use `range()`\
    \ instead of writing your own loop.\n<|/ c |>\n<| c |>\nI disagree. Using `range()`\
    \ would result in the function being more verbose. `range()` uses more memory,\
    \ it uses more processing power, and it is slower than a loop would.\n<|/ c |>\n\
    <| c |>\n, oh right, I missed the part where you said \"without using mathematical\
    \ functions\". Well, `range()` would require you to import a library.\n<|/ c |>\n\
    <| c |>\n, that's true, but I think it's pretty safe to assume that the poster\
    \ wants to avoid importing anything :)\n<|/ c |>\n<| c |>\nAnd yes, you can also\
    \ use `range()` in PHP (as demonstrated by [Rasmus Lerdorf](http://stackoverflow.com/a/25197462/75580)),\
    \ but `array_sum()` does require the use of a library. My point was, that `range()`\
    \ is much more expressive than writing your own loop, which involves more processing\
    \ power, more memory, and less expressiveness.\n<|/ c |>\n<| a tags=php,math |>\n\
    <code>\n<?php\n$a = array( 2, 5, 8 );\n$n = array_sum( $a ) % array_sum( array_diff(\
    \ $a, range( 0, count( $a ) - 1 ) ) );", "    while($x < $y) {\n        if($x\
    \ % 2 != 0) {\n            $x = $x + 1;\n        } else {\n            $x = $x\
    \ - 1;\n        }\n    }\n    return $x;\n}\n", "  for ($a = $x; $a <= $y; $a++)\
    \ {\n    if ($a % 2 === 0) {\n      return $a;\n    }\n  }\n  return -1;\n}",
  "  $result=-1;\n  while($x<$y) {\n    if ($x%2==0) {\n      if ($y%2==0) {\n   \
    \     $result=$x;\n        $x=$y-1;\n      }\n      else {\n        $y=$y-1;\n\
    \      }\n    }\n    else {\n      if ($y%2==0) {\n        $result=$x;\n     \
    \   $x=$y-1;\n      }\n      else {\n        $y=$y-1;\n      }\n    }\n  }\n \
    \ return $result;\n}", "  $a = $x;\n  $b = $y;\n  $c = $b+1;\n  while ($c < $x)\
    \ {\n    $a++;\n    if ($a >= $b) {\n      break;\n    }\n    $c++;\n  }\n  if\
    \ ($a >= $b) {\n    return -1;\n  }\n  $d = $c;\n  $e = $a + 1;\n  while (true)\
    \ {\n    if ($c >= $x && $c < $y) {\n      return $c;\n    } else if ($e >= $y)\
    \ {\n      return -1;\n    }\n    $d = $d;\n    $e = $e;\n    if ($d == $b) {\n\
    \      return -1;\n    }\n    $d++;\n    if ($d >= $b) {\n      return -1;\n \
    \   }\n  }\n}\n</code>\n<|/ a tags=php,math,range,algorithm,numbers |>\n<| c |>\n\
    Oh, you just posted this answer 5 minutes before me! I didn't even notice you\
    \ had posted it earlier!\n<|/ c |>\n<| c |>\nIt doesn't work for me. `choose_num(12,15)`\
    \ returns `16`. `choose_num(14,14)` returns `-1`. I think the correct answer is\
    \ `11`.\n<|/ c |>\n<| c |>\nI didn't test it.  I wrote this answer on Monday and\
    \ didn't notice that there were a couple of bugs.   I've updated my answer with\
    \ a fix for the bugs.\n<|/ c |>\n<| c |>\nI've updated the answer to include a\
    \ solution that works for negative numbers as well as non-negative numbers.\n\
    <|/ c |>\n<| c |>\nI'm getting weird results for (12,15) and (14,14), even if\
    \ I change the function to use absolute values of all three inputs. I'm getting\
    \ `7` and `-1` respectively for `(12,15)` and `(14,14)`.\n<|/ c |>\n<| a |>\n\
    I have made a php function which is able to find the even number between given\
    \ range:\n<code>", "  if ($x < $y) {\n    if ($x%2 == 0) {\n      return $x;\n\
    \    } else {\n      return $y;\n    }\n  } else {\n    if ($y%2 == 0) {\n   \
    \   return $y;\n    } else {\n      return $x;\n    }\n  }\n}", "\tif ($x < $y)\
    \ return choose_num($y, $x);\n\n\tfor ($i = 1; $i <= min(abs($y), abs($x)); $i++)\
    \ {\n\t\t$x = ($x + $i) % abs($x);\n\t\t$y = ($y + $i) % abs($y);\n\n\t\tif ($x\
    \ == $y || $x == 10) {\n\t\t\treturn $x;\n\t\t}\n\t}\n\treturn -1;\n}\n", "  \
    \  $num = array();\n    if ($x >= $y) $x = $y;\n    if ($x < 0 || $y < 0 || $x\
    \ == $y) return false;\n    for ($i = $x; $i <= $y; $i++) {\n        if (is_numeric($i)\
    \ && is_numeric($i)) $num[] = $i;\n    }\n    return max($num);\n}\n", "    if\
    \ ($x < $y) {\n        $x = $y;\n        $y = $x;\n    }\n\n    $x = abs($x);\n\
    \    $y = abs($y);\n\n    while ($x < $y) {\n        $x = 2 * $x + 1;\n      \
    \  $y = 2 * $y + 1;\n    }\n\n    if ($x == $y) {\n        return $x;\n    }\n\
    \n    return -1;\n}\n", "  $min = min($x, $y);\n  $max = max($x, $y);\n  $mid\
    \ = floor((($min + $max) / 2));\n  if ($min > $mid) {\n    return $max;\n  }\n\
    \  if ($max < $mid) {\n    return $min;\n  }\n  return $mid;\n}\n", "    // Write\
    \ your code here\n    \n    // base case\n    if ($x <= $y) {\n        if ($x\
    \ % 2 == 0) {\n            return $x;\n        } else {\n            return $y;\n\
    \        }\n    } else {\n        if ($y % 2 == 0) {\n            return $y;\n\
    \        } else {\n            return $x;\n        }\n    }\n}\n", "    // Write\
    \ your code here\n    if ($x > $y){\n        $tmp = $x;\n        $x = $y;\n  \
    \      $y = $tmp;\n    }\n\n    $r = $y;\n    while ($r < $x) {\n        if ($x\
    \ % 2 == 0) {\n            $r += 2;\n        } else if ($x % 2 == 1) {\n     \
    \       $r += 3;\n        }\n        $x++;\n    }\n    return $r;\n}\n", "   \
    \ if ($x == $y) {\n        return $x;\n    }\n    if ($x < $y) {\n        $x =\
    \ $y;\n        $y = $x;\n    }\n    for ($i = $x; $i <= $y; $i++) {\n        if\
    \ ($i%2 == 0) {\n            return $i;\n        }\n    }\n    return -1;\n}\n",
  "    if($x <= $y) {\n        for($i = $x; $i <= $y; $i++) {\n            if($i %\
    \ 2 == 0) {\n                return $i;\n            }\n        }\n    } else\
    \ {\n        for($i = $y; $i >= $x; $i--) {\n            if($i % 2 == 0) {\n \
    \               return $i;\n            }\n        }\n    }\n    return -1;\n\
    }\n", "    $m = ($x > $y) ? $x : $y;\n    for($i = $m; $i >= 0; $i--) {\n    \
    \    if($x % $i == 0 && $y % $i == 0) {\n            return $i;\n        }\n \
    \   }\n    return -1;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nYou have a logic\
    \ flaw. \nchoose_num(12, 15) should return 14 as 12 & 15 are divisible by 2 &\
    \ 3 respectively. But it returns 12 in case choose_num(12, 11) is called instead.\n\
    <|/ c |>\n<| c |>\n: I think that's intentional. If `choose_num(12, 11)` returns\
    \ `-1`, then it couldn't possibly be even because both numbers are even.\n<|/\
    \ c |>\n<| c |>\n: Ah. I see, thanks. I misunderstood the intent of the OP. I\
    \ thought he was looking for the greatest number that could be divided by all\
    \ numbers from `x` to `y`.\n<|/ c |>\n<| c |>\n: I believe I've fixed my answer\
    \ now that I've seen your update. Let me know if that works better.\n<|/ c |>\n\
    <| a tags=php |>\nThis is very similar to the previous answer, but I've added\
    \ the ability to determine the greatest remainder rather than just checking if\
    \ it's a multiple of the divisor.\n<code>\n<?php", "  return $x > $y ? -1 :\n\
    \         $x < $y ? $x :\n         $x < $y ? $y : -1;\n}\n</code>\n<|/ a tags=function,arrays,php\
    \ dscore=2 |>\n<| c |>\nI actually had the exact same function but for some reason\
    \ it wouldn't work as I was trying to do it. Now its working perfectly thank you\
    \ :)\n<|/ c |>\n<| c |>\nThis code would work just fine. Maybe you should try\
    \ it in a fresh script/session. Or maybe you could have done a `var_dump()` to\
    \ see what was going wrong in your case.\n<|/ c |>\n<| a tags=function,arrays,php\
    \ dscore=1 |>\n<code>\n<?php", "    if($x <= $y) \n        $min = $x; \n    else\
    \ \n        $min = $y; \n    if($y > $x) return -1; \n    if($min % 2 == 1) return\
    \ $min; \n    if($min == $x || $min == $y) \n        return $min; \n    else \n\
    \        return choose_num($x, $min); \n}\n", "    // your code here\n    $num\
    \ = -999999999;\n    while ($x <= $y) {\n        if ($x % 2 == 0 && $y % 2 ==\
    \ 0) {\n            $num = $x;\n            break;\n        }\n        $x = $x\
    \ + 1;\n    }\n    return $num;\n}\n", "  if ($x >= $y)\n    return -1;\n  if\
    \ ($x <= $y)\n    return $y;\n  if ($x == $y)\n    return $x;\n  $x_even = $x_odd\
    \ = 0;\n  while ($x >= $y) {\n    $x = $x - $y;\n    $x_even = $x_even + $x;\n\
    \  }\n  while ($y >= $x) {\n    $y = $y - $x;\n    $x_odd = $x_odd + $y;\n  }\n\
    \  return $x_even > $x_odd ? $x_even : $x_odd;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=0 |>\n<code>\n$a=4;\n$b=1;\n$count= 0;\nwhile ($a <= $b){\n$count++;\n\
    $a=$a+1;\n$b=$b-$a;\n}\necho $count;\n</code>\n<|/ a tags=php,math |>\n<| c |>\n\
    Welcome to Stack Overflow! Please don't answer just with source code. Try to provide\
    \ a nice description about how your solution works. See: [How do I write a good\
    \ answer?](https://stackoverflow.com/help/how-to-answer). Thanks\n<|/ c |>\n<|\
    \ a tags=php,math |>\n<code>\n<?php \n$a = 4;\n$b = 1;\n$num = 0;\nwhile($a <=\
    \ $b){\n    $num++;\n    $a++;\n    $b = $a - $num;\n}\necho $num;", "    if ($x\
    \ < $y) {\n        $temp = $x;\n        $x = $y;\n        $y = $temp;\n    }\n\
    \    $n = $x;\n    $m = $y;\n    while ($m >= 2) {\n        if ($m & 1) {\n  \
    \          $n++;\n        }\n        $m >>= 1;\n    }\n    return $n;\n}\n", "\t\
    if ($x > $y) \n\t\t$min = $x; \n\telse \n\t\t$min = $y;\n\t$max = $y;\n\tif ($min\
    \ < 0)\n\t\t$min += $max;\n\tfor ($i = $min + 1; $i <= $max; $i++) {\n\t\tif ($i\
    \ % 2 == 0) {\n\t\t\t$min = $i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif ($min == $max)\n\
    \t\treturn -1;\n\telse \n\t\treturn $min;\n}", "\tif ($x <= $y)\n\t\treturn $x;\n\
    \telse\n\t\treturn $y;\n}\n", "    if ($x == $y) {\n        return $x;\n    }\n\
    \    if ($x < $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n  \
    \      $min = $y;\n        $max = $x;\n    }\n    \n    do {\n        if ($min\
    \ % 2 == 0 && $max % 2 != 0) {\n            return $max;\n        }\n        \n\
    \        $min = ($min + 1) % $max;\n        $max = ($max + 1) % $max;\n    } while\
    \ ($min != $max);\n    \n    return -1;\n}\n</cell>\n<text>\nExercises\nCan you\
    \ implement your own choose_num function that uses the while loop structure above?\n\
    Can you modify your choose_num function to make use of early termination as shown\
    \ above to find the highest number that is in range?\n\n\n</text>\n<text>\nExercise:\
    \ Find a way to compute the number of digits in the factorial of a number.\nThis\
    \ function should take the number to be factorialized as its only argument. \n\
    It should return the number of digits in its factorial as an integer.\nIf the\
    \ factorial cannot be factored into a finite number of digits, it should return\
    \ -1.\n\n\n</text>\n<cell>", "  for ($i = $x; $i <= $y; $i++) {\n    if ($i %\
    \ 2 == 0) {\n      return $i;\n    }\n  }\n  return -1;\n}", "    if ($x < $y)\
    \ {\n        $x = $y;\n        $y = $x;\n    }\n    \n    while ($x <= $y) {\n\
    \        if ($x % 2 == 0)\n            $x += 2;\n        else\n            $x\
    \ -= 2;\n        \n        if ($x == $y)\n            return $x;\n    }\n    \n\
    \    return -1;\n}", "  if ($x <= 0 || $y <= 0) {\n    return -1;\n  }\n\n  if\
    \ ($x <= $y) {\n    $min = $x;\n    $max = $y;\n  } else {\n    $min = $y;\n \
    \   $max = $x;\n  }\n\n  for ($i = $min; $i <= $max; $i++) {\n    $x = $i << 1;\n\
    \    $y = $i - $x >> 1;\n\n    if ($i % 2 == 0) {\n      return $i;\n    }\n\n\
    \    if ($y % 2 == 0) {\n      return $y;\n    }\n  }\n\n  return -1;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis solution doesn't seem to work: for `choose_num(-100,\
    \ -50)` it returns -1 instead of -100.\n<|/ c |>\n<| c |>\nI've updated my answer,\
    \ now it works and returns -100 for choose_num(-100, -50)\n<|/ c |>\n<| a |>\n\
    To get the biggest even number between X and Y, inclusive, you can use this: \n\
    <code>\n$min = min(X,Y);\n$max = max(X,Y);\n\nfor($i = 0; $i <= $max-$min; $i++)\n\
    {\n    if($i%2 == 0)\n        return $i;\n}\n</code>\n<|/ a tags=php,loops dscore=0\
    \ |>\n<| c |>\nThis solution doesn't seem to work: `choose_num(-100, -50)` returns\
    \ -1 instead of -100.\n<|/ c |>\n<| c |>\nHa! I just noticed that it's wrong because\
    \ of the `return` statement. I'll edit it.\n<|/ c |>\n<| a tags=php,loops |>\n\
    <code>", "    $m = $y;\n    while ($m >= $x) {\n        $m -= $x;\n        $m\
    \ *= 2;\n    }\n    return $m;\n}\n", "    if ($x < $y) {\n        $temp = $x;\n\
    \        $x = $y;\n        $y = $temp;\n    }\n    $x = $x - 1;\n    $y = $y -\
    \ 1;\n    $max = 0;\n    while ($x > 0 || $y > 0) {\n        if ($x % 2 == 0)\
    \ {\n            $max = $x + $y;\n            $x = $y - 1;\n            $y = $max;\n\
    \        } else {\n            $max = $x + $y;\n            $x = $max;\n     \
    \       $y = $y - 1;\n        }\n    }\n    return $max;\n}\n", "  if ($x < $y)\
    \ $tmp = $x;\n  else $tmp = $y;\n  \n  while ($tmp > 0) {\n    if ($tmp % 2 ==\
    \ 0) $tmp -= 1;\n    else $tmp -= 2;\n  }\n  return $tmp;\n}", "    list($a, $b)\
    \ = array($x, $y);\n    if ($a > $b) {\n        $a = $b;\n        $b = $x;\n \
    \       $x = $y;\n        $y = $a;\n    }\n\n    while ($a >= $b) {\n        $a\
    \ = $a / 2;\n        $b = $a * $b; // $a * $b = ($a / 2) * $b\n    }\n\n    return\
    \ $x;\n}\n", "  if ($x <= $y)\n    return $y;\n  else\n    return $x;\n}\n</code>\n\
    <|/ a tags=php |>\n<| c |>\nThank you so much for the reply and it seems like\
    \ you were the first person to give me a good answer. I'll give this a try and\
    \ see how it goes.\n<|/ c |>\n<| c |>\nOkay so I just implemented your code to\
    \ my script and it's working. The only problem is that it takes forever to go\
    \ through the loops because there are thousands of lines to process. Is there\
    \ a way I can speed up the process?\n<|/ c |>\n<| c |>\nIf there are hundreds\
    \ of lines to process, you're probably not doing it right :) The code you posted\
    \ is an example of one of the ways you can speed it up: by using a different algorithm.\
    \ I'm glad to see that you got it working, but I honestly don't know why you didn't\
    \ accept the other answer, even if it was better. :-)\n<|/ c |>\n<| c |>\nWell\
    \ I guess I didn't see it before I posted. I had another question open for a few\
    \ hours but didn't see the answers till now. I'm going to accept your answer anyway.\
    \ Thanks!\n<|/ c |>\n<| c |>\nIf you have a new question, please create a new\
    \ question. Stack Overflow is not a forum. It's a Q&A site. One question per question.\
    \ :-) And please, don't forget to upvote my answer if it was helpful. Thanks!\n\
    <|/ c |>\n<| a tags=php |>\n<code>", "    if($x <= $y) \n        return $x;\n\
    \    else if($y <= $x)\n        return $y;\n    else {\n        $max = ($x<$y)\
    \ ? $x : $y;\n        $min = ($x<$y) ? $y : $x;\n        while($min>0) {\n   \
    \         $m = (int) ($min/2);\n            if($m%2==0) {\n                $min\
    \ = $m - 1;\n            }\n            else {\n                $max = $m + 1;\n\
    \            }\n        }\n        return $max;\n    }\n}\n", "    $x--;\n   \
    \ $y--;\n    while ($x >= $y) {\n        $y = $y - 2;\n    }\n    while ($x <=\
    \ $y) {\n        $x = $x + 2;\n    }\n    return $x;\n}\n", "\tglobal $odds;\n\
    \t$x = intval($x);\n\t$y = intval($y);\n\t$y = $y < 0 ? $y + abs($y) : $y;\n\t\
    $x = $x < 0 ? $x + abs($x) : $x;\n\tif ($y > $x) {\n\t\t$x = $y;\n\t\t$y = $x;\n\
    \t}\n\tif ($x < $y) {\n\t\t$x = $y;\n\t\t$y = $x;\n\t}\n\tfor ($i = $x; $i >=\
    \ $y; $i /= 2) {\n\t\tif (isset($odds[$i])) {\n\t\t\t$y = $i; break;\n\t\t}\n\t\
    }\n\treturn $x;\n}", "    // Write your code here.\n}\n</code>\nTesting:\n<code>\n\
    <?php\n\n$result = choose_num(12, 15);\necho \"$result\\n\"; // 14\n\n$result\
    \ = choose_num(13, 12);\necho \"$result\\n\"; // -1\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis answer uses recursion which is good to know, but it does not answer\
    \ the question, and it uses php 7 code which is fine for most people but not a\
    \ good idea. Recursion is only good if recursion is required. Otherwise using\
    \ other methods would be better.\n<|/ c |>\n<| c |>\nI agree with this answer.\
    \ Recursion is good for solving problems but if you need an explanation then try\
    \ the answer by Jack, it's more readable and clear.\n<|/ c |>\n<| a dscore=1 tags=php\
    \ |>\nThe only way to do this recursively is to have each method call a method\
    \ of the same name that calls it self and so on. I don't recommend this.\nA better\
    \ solution would be to have a function that checks to see if a number is in the\
    \ range and then return the biggest number if so. Then, each function calls the\
    \ one above that checks if it needs to check the range.\n<code>", "\tif ($x <\
    \ $y) {\n\t\treturn ($x < $y) ? $x : -1;\n\t} else {\n\t\treturn ($x > $y) ? $y\
    \ : -1;\n\t}\n}\n", "  $max_int = $x;\n  $min_int = $y;\n  if ($x < $y) {\n  \
    \  do {\n      $max_int = min($max_int, $x+1);\n      $min_int = max($min_int,\
    \ $y-1);\n    } while ($max_int - $min_int > 1);\n  }\n  return $max_int;\n}\n",
  "    if ($x >= $y) {\n        return -1;\n    }\n\n    if ($x == 0 || $y == 0) {\n\
    \        return 0;\n    }\n\n    if ($x % 2 == 0 && $y % 2 == 0) {\n        $x\
    \ = ($x / 2);\n        $y = ($y / 2);\n    }\n\n    $x = ($x / ($y));\n\n    if\
    \ ($x > $y) {\n        $x = ($y / 2);\n    }\n\n    $x = $x * 2;\n\n    return\
    \ $x;\n}\n</code>\n<|/ a tags=php,math dscore=2 |>\n<| c |>\nYou made me realize\
    \ my mistake, haha. Thank you very much!\n<|/ c |>\n<| c |>\nThis works if x is\
    \ greater than or equal to y, but not if x is less than or equal to y. The function\
    \ should return -1 if x is less than or equal to y or if x is greater than y.\
    \ It should also return 0 when x is equal to y, or if x is equal to 0 or if y\
    \ is equal to 0.\n<|/ c |>\n<| c |>\nI see now. Thank you very much. I will have\
    \ to read up on some of this, but this should work very nicely. Very helpful though.\
    \ Thank you again!\n<|/ c |>\n<| c |>\nThe function you provided does not work\
    \ if x is negative.\n<|/ c |>\n<| c |>\nThis is what I was looking for and it\
    \ seems to be working. Thank you very much!\n<|/ c |>\n<| a |>\n<code>\n<?php",
  "\tif ($x > $y)\n\t\treturn -1;\n\telseif ($x <= $y)\n\t\treturn 1;\n\telseif ($x\
    \ == $y)\n\t\treturn 0;\n\n\t$temp = $x;\n\twhile ($temp > 0) {\n\t\t$r = $temp\
    \ % $y;\n\t\tif ($r == 0)\n\t\t\treturn $x;\n\t\telse\n\t\t\t$x -= $y;\n\t\t$y\
    \ /= 2;\n\t}\n\treturn -1;\n}\n", "    if ($x > $y) \n    {\n        $temp = $x;\n\
    \        $x = $y;\n        $y = $temp;\n    }\n\n    $temp = $x;\n    for ($i\
    \ = 1; $i <= (pow($x, 2) + $y); $i++) {\n        if ($i % $x == 0 && $i % $y ==\
    \ 0) {\n            $temp = $i;\n        }\n    }\n\n    if ($temp == $x) {\n\
    \        return $temp;\n    } else if ($temp > $x) {\n        return -1;\n   \
    \ } else {\n        return $temp;\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ tags=php,arrays |>\nFor this particular situation, you can use the array_search()\
    \ function in PHP:\n<code>\n<?php\n\n$number = 56;\n$input = array(0 => 1, 1 =>\
    \ 2, 2 => 3, 3 => 4, 4 => 5, 5 => 6, 6 => 7, 7 => 8, 8 => 9, 9 => 10, 10 => 11,\
    \ 11 => 12, 12 => 13, 13 => 14, 14 => 15, 15 => 16, 16 => 17, 17 => 18, 18 =>\
    \ 19, 19 => 20, 20 => 21, 21 => 22, 22 => 23, 23 => 24, 24 => 25, 25 => 26, 26\
    \ => 27, 27 => 28, 28 => 29, 29 => 30, 30 => 31, 31 => 32, 32 => 33, 33 => 34,\
    \ 34 => 35, 35 => 36, 36 => 37, 37 => 38, 38 => 39, 39 => 40, 40 => 41, 41 =>\
    \ 42, 42 => 43, 43 => 44, 44 => 45, 45 => 46, 46 => 47, 47 => 48, 48 => 49, 49\
    \ => 50, 50 => 51, 51 => 52, 52 => 53, 53 => 54, 54 => 55, 55 => 56, 56 => 57,\
    \ 57 => 58, 58 => 59, 59 => 60, 60 => 61, 61 => 62, 62 => 63, 63 => 64, 64 =>\
    \ 65, 65 => 66, 66 => 67, 67 => 68, 68 => 69, 69 => 70, 70 => 71, 71 => 72, 72\
    \ => 73, 73 => 74, 74 => 75, 75 => 76, 76 => 77, 77 => 78, 78 => 79, 79 => 80,\
    \ 80 => 81, 81 => 82, 82 => 83, 83 => 84, 84 => 85, 85 => 86, 86 => 87, 87 =>\
    \ 88, 88 => 89, 89 => 90, 90 => 91, 91 => 92, 92 => 93, 93 => 94, 94 => 95, ",
  "  $min = min($x, $y);\n  $max = max($x, $y);\n  $evens = $min;\n  $odds = $max;\n\
    \  for ($evens = $min; $evens < $max; $evens += 2) {\n    if ($evens > $max) {\n\
    \      break;\n    }\n  }\n  for ($odds = $max; $odds > $min; $odds -= 2) {\n\
    \    if ($odds < $min) {\n      break;\n    }\n  }\n  return $evens > $odds ?\
    \ $evens : $odds;\n}", "    return $x % 2 !== 0 && $x < $y ? $x : -1;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nWhy `return $x % 2 !== 0 && $x < $y` and not `return $x < $y\
    \ && $x % 2 === 0`? Isn't that equivalent to `return $x % 2 !== 0`?\n<|/ c |>\n\
    <| c |>\n: yes, but this would allow to return `-1` for `choose_num(14, 14)`.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>", "    // The result of the function will be\
    \ stored here\n    $result = -1;\n\n    // Iterate over all even numbers between\
    \ x and y\n    // and check if they are in range\n    for ($i = $x; $i <= $y;\
    \ $i += 2) {\n        // If $i is even, save it as result\n        if ($i % 2\
    \ === 0) {\n            $result = $i;\n            break;\n        }\n    }\n\n\
    \    // If there's no such number, then the function returns -1\n    return $result;\n\
    }", "    $a = $y;\n    $b = $y;\n    while ($a != 0) {\n        $a = $a / 2;\n\
    \        $b = $a * $b + $x;\n    }\n    return $b;\n}", "    if ($x < $y) {\n\
    \        $tmp = $x;\n        $x = $y;\n        $y = $tmp;\n    }\n\n    if ($x\
    \ === $y) {\n        return $x;\n    }\n\n    $a = $y;\n    $b = $x;\n\n    if\
    \ ($a % 2 === 0) {\n        while ($b < $y) {\n            $b += 2;\n        }\n\
    \    }\n\n    while ($a > 0) {\n        $b = $b + ($a & 1);\n        $a = $a >>\
    \ 1;\n    }\n\n    return $b;\n}\n", "  // write your code here\n  $result = -1;\n\
    \  for($i = $x; $i <= $y; $i++){\n    $res = $i * 2;\n    if($res > $result){\n\
    \      $result = $res;\n    }\n  }\n  return $result;\n}\n$num1 = choose_num(2,\
    \ 7);\n$num2 = choose_num(4, 5);\n$num3 = choose_num(6, 4);", "  if ($x < $y)\
    \ {\n    list($x, $y) = array($y, $x);\n  }\n  foreach (range($x, $y) as $num)\
    \ {\n    if ($num % 2 === 0) {\n      return $num;\n    }\n  }\n  return -1;\n\
    }\n", "    $a = $x - $y;\n    $b = $y - $x;\n    if ($a > 0) {\n        if ($b\
    \ < 0)\n            return -1;\n        return $y;\n    } elseif ($a < 0) {\n\
    \        return -1;\n    }\n    return $x;\n}\n</code>\n<|/ a tags=php |>\n<|\
    \ c |>\nYes, this does return the number I'm looking for, although I still have\
    \ to test it to make sure it's really correct.  Also, I can't believe I didn't\
    \ think of that, I was overthinking the problem.  I should test the function before\
    \ I start coding ;)\n<|/ c |>\n<| c |>\nAwesome, works perfectly for me.  I'll\
    \ test it some more to make sure everything is right and accept when I do.  Thank\
    \ you!\n<|/ c |>\n<| c |>\nNo problem. Glad I could help.\n<|/ c |>\n<| c |>\n\
    Oh yes, I did just that and it worked perfectly.  I tested it by typing in `choose_num(12,\
    \ 15)` and it returned `14` as expected.  Thanks again!\n<|/ c |>\n<| c |>\nI\
    \ edited the answer to include your function as `choose_num`. I think it's now\
    \ easier to understand.\n<|/ c |>\n<| a tags=php |>\nI hope this will help\n<code>\n\
    <?php", "    if ($x > $y) {\n        $tmp = $x;\n        $x = $y;\n        $y\
    \ = $tmp;\n    }\n\n    while ($x < $y) {\n        if ($x % 2 == 0) {\n      \
    \      $x = $x + 1;\n        } else {\n            $y = $y - 1;\n        }\n \
    \   }\n    return $x;\n}\n", "  return ($x > $y) ? ($x > $x) ? $x : $y : -1; \n\
    }\n ", "    $result = 0;\n    \n    for($i = $x; $i <= $y; $i++) {\n        if($i%2\
    \ == 0){\n            if($result < $i)\n                $result = $i;\n      \
    \  }\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php\
    \ |>\nYou could use PHP's range() function. The range() function returns an array\
    \ containing all of the numbers starting from first parameter to second parameter,\
    \ including the second parameter. \nhttp://php.net/manual/en/function.range.php\n\
    For example:\n<code>\n$start = 123;\n$end = 150;\n\n$range = range($start, $end);\n\
    \n$result = array_filter($range, 'is_int');\n</code>\n$result will be an array\
    \ of ints in $start through $end excluding $end.\n<|/ a dscore=0 |>\n<| a tags=php\
    \ |>\nYou could also use the range function to do this, then you can use a simple\
    \ foreach loop using an anonymous function as the callback.\n<code>\n$start_value\
    \ = 123;\n$end_value = 150;\n\n$range = range($start_value, $end_value);\n\n$result\
    \ = array_filter($range, function ($value) use ($end_value) {\n    return (!is_null($value)\
    \ && $value <= $end_value);\n});\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI guess\
    \ `array_filter` will have to iterate over the whole array to determine whether\
    \ a certain value is in the range\n<|/ c |>\n<| c |>\nThat is correct. I meant\
    \ to suggest using a simple foreach loop.\n<|/ c |>\n<| a dscore=0 |>\nI did some\
    \ modifications to your code. Instead of using the function choose_num() I used\
    \ array_filter(). You can then use array_search() to return the index of the first\
    \ value found.\n<code>\n<?php\n\n$start = 123;\n$end = 150;\n\n$range = range($start,\
    \ $end);\n\n$result = array_filter($range, function ($value) use ($end) {\n  \
    \  return (!is_null($value) && ($value <= $end));\n});\n\n$index = array_search($start,\
    \ $range);\n\necho $result;\n</code>\n<|/ a tags=php |>\n<| a dscore=0 |>\nThis\
    \ might be helpful but please note this function will return the value starting\
    \ from $start inclusive to $end exclusive.\n<code>\n<?php ", "    if ($x < $y)\
    \ {\n        $temp = $x;\n        $x = $y;\n        $y = $temp;\n    }\n    $a\
    \ = $x - $y;\n    $b = $y - $x;\n    if ($a > $b) {\n        $temp = $a;\n   \
    \     $a = $b;\n        $b = $temp;\n    }\n    while ($a > 0) {\n        $temp\
    \ = $a;\n        $a = $a - 2;\n        if ($a > 0) return $y;\n        $y = $y\
    \ + 2;\n        if ($y > $b) return -1;\n    }\n    return -1;\n}", "    while(\
    \ ($x > $y) && ($x <= $y) ) {\n        $x = $x*10;\n        $y++;\n    }\n   \
    \ if( ($x > $y) && ($x <= $y) ) {\n        return $x;\n    }\n    return -1;\n\
    }\n", "    // return -1 if there's no such number\n    if($x < $y) {\n       \
    \ return -1;\n    }\n    // otherwise, find the greater of the two numbers and\
    \ return that\n    return max($x, $y) % 2 == 0 ? max($x, $y) : -1;\n}\n</code>\n\
    The code above should do the job. If you're looking for a more efficient solution,\
    \ look up \"binary search\". If you want to know why binary search is better,\
    \ I would recommend a tutorial on binary search over here.\n<|/ a tags=php,algorithm\
    \ dscore=2 |>\n<| a tags=php,algorithm |>\nThis code finds the min and max numbers\
    \ and stores them in $min and $max respectively\n<code>", "  if ($x <= $y) {\n\
    \    return intval($y);\n  }\n  $result = $x;\n  $xdiv = intval($x / 2);\n  $ydiv\
    \ = intval($y / 2);\n  while ($xdiv !== $ydiv) {\n    if ($xdiv % 2) {\n     \
    \ $result = $xdiv + $result;\n    }\n    $xdiv = intval($xdiv / 2);\n    $ydiv\
    \ = intval($ydiv / 2);\n  }\n  if ($xdiv % 2) {\n    return $xdiv + $result;\n\
    \  } else {\n    return -1;\n  }\n}", "    if ($y <= $x) {\n        return $y;\n\
    \    }\n    if ($x < 0 || $x > $y) {\n        return -1;\n    }\n    $min = $x\
    \ >> 1;\n    $max = $y >> 1;\n    while ($min < $max) {\n        $mid = ($max\
    \ + $min) >> 1;\n        if ($mid & 1) {\n            if ($min == $mid) {\n  \
    \              return $min;\n            }\n        } else {\n            $min\
    \ = $mid + 1;\n        }\n    }\n    return $max;\n}", "    if ($x <= $y || $x\
    \ > $y) {\n        $temp = $x;\n        $x = $y;\n        $y = $temp;\n    }\n\
    \n    do {\n        $t = $x % $y;\n        $x = $y;\n        $y = $t;\n    } while\
    \ ($x != $y);\n\n    return $x;\n}\n", "    $even = 0;\n    $odd  = 1;\n    $max\
    \  = $x; // Start with the smaller number\n    while ($x <= $y) {\n        if\
    \ ($x % 2 == 0) { $even++; }\n        else            { $odd++; }\n        if\
    \ ($even == $odd) { $max = $x; }\n        $x++;\n    }\n    return $max;\n}\n",
  "  if ($x < $y) {\n    $temp = $x;\n    $x = $y;\n    $y = $temp;\n  }\n  $min =\
    \ min($x, $y);\n  $max = max($x, $y);\n  for ($i = $min; $i <= $max; $i++) {\n\
    \    if ($i % 2 == 0) {\n      return $i;\n    }\n  }\n  return -1;\n}", "  //\
    \ Write your code here.\n}\n</cell>\n<cell>\n%run \"readonly/ch04_functions.php\"\
    ;\n\n$max = getMax(12, 15);\n\nprint($max);\n\n$min = choose_num(15, 12);\n\n\
    print($min);\n</cell>\n<text>\nQuestion 3.2: Define the function factorial() that\
    \ computes the factorial of a number. Do not use an if/else structure for this.\
    \ Use the fact that $n! = n \u2217 \u2217 \u2217 ... \u2217 \u2217 \u2217 $ to\
    \ define it.\nUse a while loop.\n\n\n</text>\n<cell>", "  $min = min($x, $y);\n\
    \  $max = max($x, $y);\n  for ($i = $min; $i <= $max; $i++) {\n    if ($i % 2\
    \ == 0) {\n      return $i;\n    }\n  }\n  return -1;\n}\n", "    $n = $x;\n \
    \   while (true) {\n        $n = 2 * $n + 1;\n        if ($n >= $y)\n        \
    \    return $n;\n        if ($n % 2 == 0)\n            return -1;\n    }\n}\n",
  "  $xx = $x - 1;\n  $yy = $y - 1;\n  $x = $x - ($x % 2);\n  $y = $y - ($y % 2);\n\
    \  if ($x <= $y) {\n    if ($x < $yy) return $x;\n    return $y;\n  }\n  elseif\
    \ ($y <= $xx) return $y;\n  else return -1;\n}\n", "    while($x <= $y) {\n  \
    \      $x = $x + $x;\n    }\n    while($y > $x) {\n        $y = $y - $x;\n   \
    \ }\n    if ($x == $y) {\n        return $x;\n    }\n    return -1;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nHow is this better than just `return min(abs($x), abs($y));`?\n\
    <|/ c |>\n<| c |>\n: It isn't, in any way. `abs($x)` is just an extra operation.\
    \ Your code doesn't even use `$y` at all.\n<|/ c |>\n<| c |>\n: Your code doesn't\
    \ even use `y`, so why should it be better than the code I gave? I agree that\
    \ `abs()` is useless in your solution, but that's not the point. Even your code\
    \ is less readable than my one line solution and it uses more memory. Plus, I\
    \ think it's an opportunity to learn why it's wrong.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "    if ($x < $y) {\n        $tmp = $x;\n        $x = $y;\n   \
    \     $y = $tmp;\n    }\n    $x_even = abs($x % 2) != 0;\n    $y_even = abs($y\
    \ % 2) != 0;\n    if ($x_even && $y_even) {\n        if ($x == $y) {\n       \
    \     return -1;\n        } elseif ($x < $y) {\n            $min = $x;\n     \
    \       $max = $y;\n        } else {\n            $min = $y;\n            $max\
    \ = $x;\n        }\n        for ($i = $min; $i <= $max; $i += 2) {\n         \
    \   if ($i % 2 == 0) {\n                return $i;\n            }\n        }\n\
    \    } else {\n        $min = $x_even ? $x : abs($y - $x) / 2;\n        $max =\
    \ $x_even ? $y : abs($y - $x) / 2;\n        if ($min == $max) {\n            return\
    \ -1;\n        }\n        for ($i = $min; $i <= $max; $i += 2) {\n           \
    \ if ($i % 2 == 0) {\n                return $i;\n            }\n        }\n \
    \   }\n    return -1;\n}\n", "  $xandy = $x & $y;\n  if (! $xandy) {\n    return\
    \ -1;\n  }\n  return $x | $y;\n}\n", "    return (int)max($x - $y, $y - $x);\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a |>\nYou can do this in O(1) time in python\
    \ by using the bisect module.\n<code>\ndef choose(a, b):\n    i = bisect.bisect(a,\
    \ b)\n    if i == len(a):\n        return i\n    return i - 1\n</code>\n<|/ a\
    \ dscore=2 tags=algorithm,language-agnostic |>\n<| c |>\nThanks for the python\
    \ code snippet. I am not familiar with this module and I was having a hard time\
    \ getting my head around it until I saw this. It was really helpful.\n<|/ c |>\n\
    <| a dscore=1 |>\nIf you're familiar with recursion, you could always use that\
    \ to solve this problem.  If the first number is a power of two, the biggest even\
    \ number is the one before the first one.  If the first number is not power of\
    \ two, you still have to use the recursive call, but instead of doing the recursive\
    \ call until the smaller of the two numbers you pass to the function, you do the\
    \ recursive call until you find the biggest even number smaller then or equal\
    \ to the first number, then take the difference between them.  This still takes\
    \ O(log n) time.\n<code>\npublic int Choose(int x, int y)\n{\n    if (y == 0)\n\
    \    {\n        return x;\n    }\n    else if (x % 2 == 0)\n    {\n        return\
    \ Choose(x / 2, y);\n    }\n    else\n    {\n        return Choose(x - y, y -\
    \ x);\n    }\n}\n</code>\n<|/ a tags=algorithm,language-agnostic |>\n<| c |>\n\
    This doesn't work, if you call it on the odd number then you get a negative number\
    \ back.\n<|/ c |>\n<| a tags=algorithm,language-agnostic |>\nHere's my attempt\
    \ in Python (just for fun).\n<code>\ndef choose(a, b):\n    if b >= a:\n     \
    \   return\n    c = (a+b) // 2\n    if a%2 == 0:\n        if b%2 == 0:\n     \
    \       return a\n        else:\n            return c\n    else:\n        if b%2\
    \ == 0:\n            return b\n        else:\n            return c\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis is in O(logN) time.\n<|/ c |>\n<| c |>\nYou don't\
    \ need O(logN) time.\n<|/ c |>\n<| c |>\nIf you read the original question, it\
    \ is said that choosing both numbers takes O(1) time, not O(logN) time.\n<|/ c\
    \ |>\n<| a tags=algorithm,language-agnostic |>", "    $m = $y % $x;\n    if ($m\
    \ == 0) {\n        $x = $y - 1;\n        $m = $x % $x;\n    }\n    while ($m >\
    \ 0) {\n        $x = $x + 1;\n        $m = $x % $x;\n    }\n    return $x;\n}\n",
  "    if($x == $y) \n        return $x;\n    if($x == 0 || $y == 0)\n        return\
    \ -1;\n    if($x > $y) \n        return choose_num($x, $y - 1);\n    if($x < $y)\n\
    \        return choose_num($x - 1, $y);\n}\n", "    $x_even = intval($x / 2);\
    \ $y_even = intval($y / 2); $x_odd = intval($x % 2); $y_odd = intval($y % 2);\n\
    \    $even = $x - $x_even * $y;\n    $odd = $y - $y_even * $x;\n    if ($even\
    \ > 0 && $x_even != 0) {\n        return max($x_even, $y_even);\n    } else if\
    \ ($odd > 0 && $y_odd != 0) {\n        return max($x_odd, $y_odd);\n    } else\
    \ {\n        return -1;\n    }\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks\
    \ man! I understand my mistake now. Also thanks to everyone else for their help.\n\
    <|/ c |>\n<| c |>\nNo problem! I'm glad you made it work. Feel free to [accept\
    \ my answer](http://stackoverflow.com/help/accepted-answer) if it helped you solve\
    \ your problem.\n<|/ c |>\n<| a tags=php |>\nJust for fun, and to solve the puzzle,\
    \ here's a solution I came up with:\n<code>\n<?php\n", "    if ($x < $y) {\n \
    \       for ($i = $x; $i <= $y; $i++) {\n            if ($x % 2 === 0 && $y %\
    \ 2 === 0) {\n                $evens = $x % $y;\n                $remainder =\
    \ $y % $x;\n                return $i + $evens + $remainder;\n            }\n\
    \        }\n    } else {\n        for ($i = $y; $i <= $x; $i++) {\n          \
    \  if ($y % 2 === 0 && $x % 2 === 0) {\n                $evens = $y % $x;\n  \
    \              $remainder = $x % $y;\n                return $i + $evens + $remainder;\n\
    \            }\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\n<code>\n<?php", "    // This block will handle the cases where x and y are\
    \ equal or are both negative\n    if ($x == $y) {\n        return $x;\n    }\n\
    \    if ($x < $y) {\n        $diff = $x - $y;\n        return $diff*choose_num($x,\
    \ $y - $diff);\n    }\n    $diff = $y - $x;\n    return $diff*choose_num($y -\
    \ $diff, $x);\n}", "    $x= $x+ 1;\n    $y= $y+ 1;\n    $z= $x;\n    while($x\
    \ < $y) {\n        $x= $x+$z+1;\n        $z= $z*2;\n    }\n    return $z;\n}\n",
  "  // Your code here\n}\n</cell>\n<text>\nTest your Code\nRun the code cells to\
    \ make sure your choose_num function works as expected.\n\n\n</text>\n<cell>\n\
    %%html\n<img src='https://s3-us-west-2.amazonaws.com/xgboost-examples/why_choose_num.png'\
    \ />\n</cell>\n<cell>\n%%bash\ncd xgboost-notebooks/\nmkdir -p solutions/ || true\n\
    cd solutions/\ncat ../xgboost-notebooks/choose_num.py\n</cell>\n<cell>\n!head\
    \ ../xgboost-notebooks/choose_num.py\n</cell>\n<cell>\n%run ../xgboost-notebooks/choose_num.py\n\
    </cell>\n<text>\nYou should expect choose_num to return 14 for the above example.\n\
    \n\n</text>\n<text>\nExploring your Code\nExploring your code is a great way to\
    \ gain familiarity with the language and best practices. Try exploring different\
    \ parts of the function and see what you can learn from them.\n\n\n</text>\n<text>\n\
    Exploring the code\nHere's what we're going to explore in this notebook:\n\nThe\
    \ range of the numbers between $x$ and $y$ ($x \\leq y$)\nThe numbers that are\
    \ in the range $[x, y]$\nThe numbers that are in the range $[x, y]$ but are even\n\
    \nWe'll start by seeing if we can answer the first question:\n\nWhat is the range\
    \ of the numbers between $x$ and $y$ ($x \\leq y$)?\n\n\n</text>\n<cell>\n%%html\n\
    <img src='https://s3-us-west-2.amazonaws.com/xgboost-examples/why_choose_num2.png'\
    \ />\n</cell>\n<cell>\n%%bash\ncd xgboost-notebooks/\nmkdir -p solutions/ || true\n\
    cd solutions/\ncat ../xgboost-notebooks/choose_num2.py\n</cell>\n<cell>\n!head\
    \ ../xgboost-notebooks/choose_num2.py\n</cell>\n<cell>\n%run ../xgboost-notebooks/choose_num2.py\n\
    </cell>\n<text>\nAnswer Here\n\n</text>\n<text>\nNext, let's see what numbers\
    \ are in the range $[x, y]$ but are even.\n\n\n</text>\n<cell>\n%%html\n<img src='https://s3-us-west-2.amazonaws.com/xgboost-examples/why_choose_num3.png'\
    \ />\n</cell>\n<cell>\n%%bash\ncd xgboost-notebook", "    // Write your code here\n\
    \n    for($i=$x;$i<=$y;$i++){\n        if($i%2==0 && $i!=$x){\n            $x=$i;\n\
    \        }else{\n            if($i%2!=0){\n                return $i;\n      \
    \      }\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a |>\n<| a dscore=0\
    \ tags=for-loop,python,php,javascript |>\nA PHP solution:\n<code>", "  $result\
    \ = -1;\n  for ($i = $x; $i <= $y; $i++) {\n    if ($i % 2 == 0) {\n      if ($result\
    \ < $i) {\n        $result = $i;\n      }\n    }\n  }\n  return $result;\n}",
  "    if ($x < $y) return choose_num($y, $x);\n    if ($x === $y) return $x;\n  \
    \  if ($y > $x) return choose_num($x, $y);\n    return -1;\n}\n</code>\n<|/ a\
    \ dscore=2 tags=python,c++,algorithm |>\n<| c |>\nThanks man. i think its correct,\
    \ but i still dont understand whats wrong with my algo :/\n<|/ c |>\n<| c |>\n\
    .T. Well, that's because you haven't tested it fully. I don't know why you think\
    \ it's wrong. Are you asking about why your code doesn't work?\n<|/ c |>\n<| c\
    \ |>\nI dont know how to test it fully. my teacher dont know it yet, and i cant\
    \ ask him about it :/ so i was thinking that i missed something with my algo\n\
    <|/ c |>\n<| c |>\n.T. I think you should take your time to learn how to use a\
    \ debugger like [GDB](http://www.gnu.org/software/gdb/) and [valgrind](http://valgrind.org/).\
    \ It will make your life so much easier.\n<|/ c |>\n<| a tags=python,c++,algorithm\
    \ |>\nI suggest you read this article http://www.cs.bu.edu/teaching/alg/notes/arith.html\
    \ \nIt explains the different types of algorithms you can implement and the complexities\
    \ of each one. Be sure to read what Big Oh means, and how it is different from\
    \ O(n) (n = number of elements)\n<|/ a dscore=2 |>\n<| c |>\nThat link explains\
    \ the complexities of various algorithms. But the OP doesn't seem to be interested\
    \ in algorithms, he seems to be interested in implementations.\n<|/ c |>\n<| a\
    \ |>\nThe first thing that comes to mind is using O(n) space. Your algorithm does\
    \ it at O(n) space\n<code>\ndef choose_num(A, B):\n    min = A\n    max = B\n\
    \    current = A\n    if min > max:\n        min = max\n        max = current\n\
    \    current++\n    while current < max:\n        current = min\n        min =\
    \ current + 1\n    return current\n</code>\n<|/ a dscore=1 tags=python,c++,algorithm\
    \ |>\n<| a tags=python,c++,algorithm |>\nThe function chooses a number in a given\
    \ range, but does not check if it's inside the range. That's why it fails with\
    \ negative numbers.\n<|/ a dscore=1 |>\n<| a ", "    $min = min($x, $y);\n   \
    \ $max = max($x, $y);\n    if ($min > $max) {\n        return -1;\n    }\n   \
    \ for ($i = $min; $i <= $max; $i++) {\n        if ($x % $i == 0 && $y % $i ==\
    \ 0) {\n            return $i;\n        }\n    }\n    return -1;\n}\n", "\tif\
    \ ($x > $y) { return choose_num($y, $x); }\n\t\n\t// The initial case is when\
    \ $x is smaller than $y.\n\tif ($x < $y) { return -1; }\n\n\t// We are at the\
    \ base of the recursion. Return $x if even and -1 if \n\t// odd.\n\t\n\tif ($x\
    \ & 1) {\n\t\treturn $x;\n\t}\n\t\n\treturn -1;\n}\n", "\tif ($x < $y) {\n\t\t\
    $smaller = $x;\n\t\t$larger = $y;\n\t} else {\n\t\t$smaller = $y;\n\t\t$larger\
    \ = $x;\n\t}\n\t$smaller = $smaller + 1;\n\twhile (1) {\n\t\t$middle = intval(($larger+$smaller)/2);\n\
    \t\tif ($middle == $smaller + 1) {\n\t\t\tif ($larger < $smaller) break;\n\t\t\
    \t$smaller = $smaller + 1;\n\t\t} else if ($middle == $smaller - 1) {\n\t\t\t\
    if ($larger < $smaller) break;\n\t\t\t$larger = $larger - 1;\n\t\t} else if (($larger\
    \ >= $smaller) && ($larger <= $middle)) {\n\t\t\treturn $larger;\n\t\t} else if\
    \ ($larger >= $middle) {\n\t\t\t$larger = $larger - 1;\n\t\t} else {\n\t\t\treturn\
    \ -1;\n\t\t}\n\t}\n}\n", "    if ($x >= $y) {\n        $min = $x;\n        $max\
    \ = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n    }\n\n    while\
    \ (true) {\n        if ($min%2 == 0) {\n            $min = ($min/2)+2;\n     \
    \   } else {\n            $min = ($min/2) + 1;\n        }\n\n        if ($max%2\
    \ == 0) {\n            $max = ($max/2)+2;\n        } else {\n            $max\
    \ = ($max/2) + 1;\n        }\n        if ($min<$max) {\n            break;\n \
    \       }\n    }\n\n    return $min;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work for inputs of `0` and `1`, which has even and odd number of digits. I think\
    \ you should check `if ($x >= $y)` before entering the loop, and change `>=` to\
    \ `<` instead.\n<|/ c |>\n<| c |>\nI assumed that 0 was included in the range\
    \ to give an even number, I updated my answer to fix the issue\n<|/ c |>\n<| c\
    \ |>\nI see, the issue is that 0 is included in the range, but it's missing from\
    \ the output. `choose_num(17, 17)` returns `13`, but I want it to return `-1`,\
    \ as 17 is within the range.\n<|/ c |>\n<| c |>\nOh sorry I got it right now.\
    \ Thanks for the help, I really appreciate it!\n<|/ c |>\n<| a dscore=0 tags=php,range\
    \ |>\n<code>", "    if ($x == $y) {\n        return $x;\n    }\n    if ($x < $y)\
    \ {\n        return choose_num($x, $y - 1);\n    }\n    return choose_num($y -\
    \ 1, $x);\n}\n</code>\n<|/ a tags=php,arrays,algorithm |>\n<| c |>\nNice solution,\
    \ but you need to fix your output to `14` since you have the range `[10, 15]`\
    \ - not `[12, 15]`.\n<|/ c |>\n<| a dscore=0 tags=php,arrays,algorithm |>\nThis\
    \ was the solution I came up with, after a quick review of several other answers.\
    \ Please feel free to comment if you have a better solution!\n<code>", "  $min\
    \ = $x < $y ? $x : -$y;\n  $max = $x < $y ? $y : -$x;\n  $even = true;\n  \n \
    \ do {\n    $x = rand($min, $max);\n    if ($x % 2 == 0) {\n      $even = false;\n\
    \    }\n  }\n  while ($x != $x && $even);\n\n  return $x;\n}\n", "    $r = max($x,\
    \ $y);\n    if ($r > 0) {\n        if ($x == $y)\n            return $r;\n   \
    \     foreach (range($x, $y + 1) as $n) {\n            if ($n & 1) {\n       \
    \         $r = min($r, ($n + 1) / 2);\n            }\n        }\n    }\n    return\
    \ -1;\n}", "\tfor ($i = $x; $i <= $y; $i++) {\n\t\tif (is_int($i)) {\n\t\t\t$num\
    \ = $i;\n\t\t\treturn $num;\n\t\t}\n\t}\n\treturn -1;\n}\n", "    // Return early\
    \ if we already know that $x is an even number\n    if ($x % 2 === 0) {\n    \
    \    return $x;\n    }\n    // Add 1 to $x because we need the least even number\
    \ to go up to $y\n    $x++;\n    // $x is now the least even number that makes\
    \ $y an odd number\n    if ($y % 2 === 0) {\n        $y--;\n    }\n    // Loop\
    \ through all odd numbers from $x to $y inclusive\n    // and add them up. After\
    \ the loop $x will have a value of\n    // $y if $y is an even number and -1 otherwise.\n\
    \    // The loop will only run if $x is not an even number.\n    // So if the\
    \ loop doesn't run, then we know the number $x is not even.\n    $z = 0;\n   \
    \ while ($x < $y) {\n        $z += $x;\n        $x++;\n    }\n    return $z;\n\
    }\n", "    if ($x <= $y) {\n        $max_num = $x;\n    } else {\n        $max_num\
    \ = $y;\n    }\n    while($max_num < $x + 1) {\n        $next_num = $max_num +\
    \ 1;\n        if ($next_num % 2 === 0) {\n            $max_num = $next_num;\n\
    \        } else {\n            $max_num = -1;\n        }\n    }\n    return $max_num;\n\
    }\n</code>\n<|/ a tags=php,range,math |>\n<| c |>\nThanks for the help, I'll look\
    \ into this as soon as I get home tonight and let you know how it goes.\n<|/ c\
    \ |>\n<| a tags=php,range,math |>\nThis is my take on it.\n<code>"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
