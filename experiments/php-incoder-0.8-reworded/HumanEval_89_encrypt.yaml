name: HumanEval_89_encrypt
language: php
prompt: "<?php\n// Create a function encrypt that takes a string as an argument and\n\
  // returns a string encrypted with the alphabet being rotated. \n// The alphabet\
  \ should be rotated in a manner such that the letters \n// shift down by two multiplied\
  \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
  asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
  et\")\n// \"ix\"\nfunction encrypt($s) {\n"
tests: "function candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"\
  jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"\
  hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["    $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    $alphabet = str_split($alphabet);\n\
    \    sort($alphabet);\n    $alphabet = array_reverse($alphabet);\n    sort($alphabet);\n\
    \n    array_unshift($alphabet, '');\n    $c = array_pop($alphabet);\n    $s =\
    \ str_replace(chr($c), $s, $alphabet);\n    return $s;\n}", "    $a = str_split($s);\n\
    \    $a2 = array();\n    foreach ($a as $k=>$v) {\n        $a2[$k%2+1] = $v;\n\
    \    }\n    return implode($a2,$a2);\n}\n", "  global $rotate;\n  $s = preg_replace('/[^a-z]/',\
    \ '', $s);\n  $s = strtoupper($s);\n  $str = '';\n  $len = strlen($s);\n  for($i=0;$i<$len;$i++)\
    \ {\n    $str .= $rotate[$s[$i]];\n  }\n  return $str;\n}\n", "    $alphabet =\n\
    \        \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\n    $s =\
    \ str_split($s);\n\n    $new_str = \"\";\n\n    foreach ($s as $s) {\n       \
    \ $new_str .= substr($alphabet, ($alphabet.strlen($alphabet) - $s) * 2 + $s);\n\
    \    }\n\n    return $new_str;\n}\n", "    if (strlen($s) <= 0) return $s;\n \
    \   $alphabet = array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n   \
    \ $len = strlen($s);\n    $result = \"\";\n    $prev = \"\";\n    for ($i = 0;\
    \ $i < $len; $i++) {\n        $letter = $s[$i];\n        $key = $alphabet[($i\
    \ + $len) % 26];\n        if ($prev !== $letter) $result .= $letter;\n       \
    \ $prev = $letter;\n    }\n    return $result;\n}\n", "  $c = $s;\n  for ($i =\
    \ 0; $i < strlen($s); $i++) {\n    // Find where the first and last chars are\
    \ in the alphabet\n    $first = $i % 26;\n    $last = ($i + 1) % 26;\n    $c =\
    \ substr($c, 0, 1) . $alphabet[$first] . substr($c, 1, 1) . $alphabet[$last];\n\
    \  }\n  return $c;\n}\n", "  $alphabet = array('e','f','g','h','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \  $n = strlen($s);\n  $cipher = '';\n  for($i = 0; $i < $n; $i++) {\n    $key\
    \ = array_shift($alphabet);\n    $cipher .= $alphabet[($alphabet[$n-1+$key] +\n\
    \              $s[$i]*($key+1)%$n)]; // Rotate alphabet.\n  }\n  return $cipher;\n\
    }\n", "    $alphabet = str_split($s);\n    $newAlphabet = array();\n    foreach\
    \ ($alphabet as $letter) {\n        $newAlphabet[array_search($letter, array_flip($alphabet))]\
    \ = $letter;\n    }\n    return implode($newAlphabet);\n}", "    $rot = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    $rot2 = strrev($rot);\n    $rot3 = strrev(strrev($rot2));\n    $rot4 = strrev(strrev(strrev($rot3)));\n\
    \    $rot5 = strrev(strrev(strrev(strrev(strrev($rot4)))));\n    $rot6 = strrev(strrev(strrev(strrev(strrev(strrev(strrev($rot5))))));\n\
    \    $rot7 = strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev($rot6))))));\n\
    \    $rot8 = strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev($rot7))))));\n\
    \    $rot9 = strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev($rot8))))));\n\
    \    $rot10 = strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev($rot9))))));\n\
    \    $rot11 = strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev($rot10))))));\n\
    \    $rot12 = strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev($rot11))))));\n\
    \    $rot13 = strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev($rot12))))));\n\
    \    $rot14 = strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev($rot13))))));\n\
    \    $rot15 = strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev(strrev($rot14))))));\n\
    \    $rot16 = strrev(strrev(strrev(str", "    $result = \"\";\n    $alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n    $alphabet = str_split($alphabet);\n   \
    \ foreach (str_split($s) as $c) {\n        $i = str_count($alphabet, $c);\n  \
    \      $j = $i + 2;\n        $c1 = substr($alphabet, $i, 1);\n        $c2 = substr($alphabet,\
    \ $j, 1);\n        $result .= $c1 . $c2;\n    }\n    return $result;\n}\n", " \
    \   $encrypted = '';\n    $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    for ($i\
    \ = 0; $i < strlen($s); $i++) {\n        $encrypted .= $alphabet[ord($s[$i]) -\
    \ ord('a') + 2];\n    }\n    return $encrypted;\n}\n</code>\nAnd then decrypt:\n\
    <code>\n<?php", "\t$alphabet = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"\
    ,\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\"\
    ,\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n\t$shift = 2;\n\t$result = \"\";\n\tforeach\
    \ (str_split($s) as $letter) {\n\t\t$result = $alphabet[(ord($letter)-$shift)\
    \ % 26] + $result;\n\t\t$shift++;\n\t}\n\treturn $result;\n}\n", "    $alphabet\
    \ = array('l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n    $rotatedAlphabet\
    \ = array_flip($alphabet);\n    $encryptedAlphabet = array_flip($rotatedAlphabet);\n\
    \    $cipher = '';\n\n    foreach (str_split($s) as $char) {\n        $cipher\
    \ .= $encryptedAlphabet[substr($char, 0, 2)].\n        $encryptedAlphabet[substr($char,\
    \ 2, 2)].\n        $encryptedAlphabet[substr($char, 4, 2)].\n        $encryptedAlphabet[substr($char,\
    \ 6, 2)];\n    }\n\n    return $cipher;\n}\n", "    if (strlen($s) == 0) return\
    \ \"\";\n    $cipher = array();\n    $s = strrev($s);\n    $s_length = strlen($s);\n\
    \    $s_length -= 2;\n    $s_length = (($s_length % 2) + 2) % 2;\n    $j = 0;\n\
    \    for($i = 0; $i < strlen($s); $i++) {\n        $cipher[$j] = substr($s,$i,1);\n\
    \        $j++;\n        if (($j == $s_length) || ($i = ($i + 1) % strlen($s)))\
    \ $j = 0;\n    }\n    $cipher = array_reverse($cipher);\n    $cipher = implode($cipher);\n\
    \    return $cipher;\n}\n", "  $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n \
    \ $alphabet = array_flip(str_split($alphabet));\n  $alphabet = array_flip($alphabet);\n\
    \n  $s = str_split($s);\n  $n = strlen($s);\n  for ($i = 0; $i < $n; ++$i) {\n\
    \    list($a, $b) = array($alphabet[$s[$i]], $alphabet[$s[$i]]);\n    $a = $alphabet[$a];\n\
    \    $b = $alphabet[$b];\n    $s[$i] = $a . $b;\n  }\n\n  return implode('', $s);\n\
    }\n", "    $alphabet = range('a','z');\n    $shift = ($alphabet[1] - 'a' + 2);\n\
    \    return $alphabet[$alphabet[$alphabet[$alphabet[strlen($alphabet) - 1]]] +\
    \ ((ord($s[strlen($s) - 1]) - ord('a') - (2 * $shift))%26)];\n}\n", "    $s =\
    \ $s . \"z\";\n    $s = rotate($s, 0); // Rotate alphabet \"z\" to the bottom\n\
    \    $s = rotate($s, 2); // Rotate alphabet \"z\" two places down\n    $s = rotate($s,\
    \ 4); // Rotate alphabet \"z\" four places down\n    $s = rotate($s, 6); // Rotate\
    \ alphabet \"z\" six places down\n    $s = rotate($s, 8); // Rotate alphabet \"\
    z\" eight places down\n    $s = rotate($s, 10); // Rotate alphabet \"z\" ten places\
    \ down\n    $s = rotate($s, 12); // Rotate alphabet \"z\" twelve places down\n\
    \    $s = rotate($s, 14); // Rotate alphabet \"z\" thirteen places down\n    $s\
    \ = rotate($s, 16); // Rotate alphabet \"z\" fourteen places down\n    $s = rotate($s,\
    \ 18); // Rotate alphabet \"z\" fifteen places down\n    $s = rotate($s, 20);\
    \ // Rotate alphabet \"z\" sixteen places down\n    $s = rotate($s, 22); // Rotate\
    \ alphabet \"z\" seventeen places down\n    $s = rotate($s, 24); // Rotate alphabet\
    \ \"z\" eighteen places down\n    $s = rotate($s, 26); // Rotate alphabet \"z\"\
    \ nineteen places down\n    $s = rotate($s, 28); // Rotate alphabet \"z\" twenty\
    \ places down\n    $s = rotate($s, 30); // Rotate alphabet \"z\" thirty places\
    \ down\n    $s = rotate($s, 32); // Rotate alphabet \"z\" forty places down\n\
    \    $s = rotate($s, 34); // Rotate alphabet \"z\" fifty places down\n    $s =\
    \ rotate($s, 36); // Rotate alphabet \"z\" sixty places down\n    $s = rotate($s,\
    \ 38); // Rotate alphabet \"z\" seventy places down\n    $s = rotate($s, 40);\
    \ // Rotate alphabet \"z\" eighty places down\n    $s = rotate($s, 42); // Rotate\
    \ alphabet \"z\" ninety places down\n    $s = rotate($s, 44); // Rotate alphabet\
    \ \"z\" twenty places down \n    $s = rotate($s, 46); // Rotate alphabet \"z\"\
    \ twenty places down\n    $s = rotate($s, 48); // Rotate alphab", "  $alphabet\
    \ = str_split('abcdefghijklmnopqrstuvwxyz');\n  $key = $alphabet[count($alphabet)\
    \ - 1];\n  return strtr($s, $alphabet, $key);\n}\n", "    $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    $ret = \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ret .=\
    \ substr($alphabet, 2*(strlen($s) - $i - 1) + strpos($alphabet, $s[$i]));\n  \
    \  }\n    return $ret;\n}\n", "  $alpha = \"abcdefghijklmnopqrstuvwxyz\";\n  \n\
    \  // Rotate the letters by two places in each direction.\n  $rotated_alphabet\
    \ = $alpha . strrev($alpha);\n\n  // Convert input to a string and rotate it.\n\
    \  $rotated_s = strrev($s) . strrev($s);\n  $rotated_s = strrev($rotated_s) .\
    \ strrev($rotated_s);\n  $rotated_s = strrev($rotated_s);\n  \n  return $rotated_alphabet[$alpha[$alpha]];\n\
    }", "  return (strlen($s) % 2) ? \n    encrypt(encrypt($s)) : \n    rotate(rotate(rotate($s),\
    \ 26), 2) + $s;\n}\n", "  $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  $s =\
    \ strlen($s);\n  $newStr = \"\";\n  for ($i = 0; $i < $s; $i++) {\n    $newStr\
    \ .= substr($alphabet, (($i % strlen($alphabet)) * 2) + (($i % strlen($alphabet))\
    \ * 2), 1);\n  }\n  return $newStr;\n}\n", "    $rot1 = substr($s, 0, 1);\n  \
    \  $rot2 = substr($s, 1, 1);\n    return $rot2 . $rot1 . $rot1;\n}\n", "    $alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    $rotated_alphabet = str_rot13($alphabet);\n\
    \    return str_rot13(str_rot13($s));\n}\n", "   $alphabet = str_split('abcdefghijklmnopqrstuvwxyz');\n\
    \   $alphabet = array_reverse($alphabet);\n   $result = '';\n   foreach (str_split($s)\
    \ as $letter) {\n      // Shift every other letter down 2 places.\n      $result\
    \ += $alphabet[$letter + 1] . $alphabet[$letter];\n   }\n   return $result;\n\
    }\n", "    $alphabet = array(\"a\" => \"n\", \"b\" => \"o\", \"c\" => \"p\", \"\
    d\" => \"q\", \"e\" => \"r\", \"f\" => \"s\", \"g\" => \"t\", \"h\" => \"u\",\
    \ \"i\" => \"v\", \"j\" => \"w\", \"k\" => \"x\", \"l\" => \"y\", \"m\" => \"\
    z\", \"n\" => \"a\", \"o\" => \"b\", \"p\" => \"c\", \"q\" => \"d\", \"r\" =>\
    \ \"e\", \"s\" => \"f\", \"t\" => \"g\", \"u\" => \"h\", \"v\" => \"i\", \"w\"\
    \ => \"j\", \"x\" => \"k\", \"y\" => \"l\", \"z\" => \"m\");\n    return implode(array_map(function($key,\
    \ $value) {\n        return $alphabet[$key] . $value;\n    }, $alphabet, str_split($s)));\n\
    }", "    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    $alphabet = str_split($alphabet,\
    \ 2);\n    $alphabet = array_map(\"chr\", $alphabet);\n    $s = str_split($s,\
    \ 1);\n    $s = array_map(\"chr\", $s);\n    $res = \"\";\n    foreach ($s as\
    \ $letter) {\n        // Shift down by one two places.\n        $n = $letter +\
    \ 1;\n        $key = $alphabet[$n];\n        $res .= $alphabet[array_search($key,\
    \ $alphabet)];\n    }\n    return $res;\n}", "    // Create a new string with\
    \ the rotated alphabet.\n    $c = str_split($alphabet, true);\n\n    // Iterate\
    \ through each character of the original string.\n    foreach (str_split($s) as\
    \ $c) {\n        // The $index variable will hold the current index to shift.\n\
    \        $index = 0;\n\n        // Get the length of the current character. \n\
    \        $len = strlen($c);\n\n        // Iterate through the characters in each\
    \ string.\n        foreach (str_split($alphabet) as $letter) {\n            //\
    \ If the current letter is the same as the next letter in the alphabet,\n    \
    \        // move the index forward by two.\n            if ($letter == $c[$index])\
    \ {\n                $index += 2;\n                continue;\n            }\n\
    \            // Otherwise, shift the index by one.\n            $index++;\n  \
    \      }\n        // The index will be set to the length of the string if the\
    \ last letter\n        // was shifted to its original position.\n        $index\
    \ = $len % strlen($alphabet) ? $len % strlen($alphabet) : $index;\n        //\
    \ Replace the current letter with the letter at the current position.\n      \
    \  $c[$index] = $letter;\n    }\n\n    // Join the characters together to form\
    \ a new string.\n    return join(\"\", $c);\n}\n", "  $alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n  return strtr($s, $alphabet, rotate($alphabet));\n}\n", "\t$alphabet = array(\"\
    h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"\
    u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n\t\n\tfor ($i = 0; $i < strlen($s); $i++)\
    \ {\n\t\t$a = $alphabet[strlen($s)-1-$i];\n\t\t$b = $alphabet[$i];\n\t\t$s = str_replace($a,$b,$s);\n\
    \t}\n\n\treturn $s;\n}\n", "    $alphabet = array('a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z');\n    $newAlphabet = array();\n    $newAlphabet[] = $alphabet[0];\n\
    \    $newAlphabet[] = $alphabet[1];\n    $newAlphabet[] = $alphabet[2];\n    $newAlphabet[]\
    \ = $alphabet[3];\n    $newAlphabet[] = $alphabet[4];\n    $newAlphabet[] = $alphabet[5];\n\
    \    $newAlphabet[] = $alphabet[6];\n    $newAlphabet[] = $alphabet[7];\n    $newAlphabet[]\
    \ = $alphabet[8];\n    $newAlphabet[] = $alphabet[9];\n    $newAlphabet[] = $alphabet[10];\n\
    \    $newAlphabet[] = $alphabet[11];\n    $newAlphabet[] = $alphabet[12];\n  \
    \  $newAlphabet[] = $alphabet[13];\n    $newAlphabet[] = $alphabet[14];\n    $newAlphabet[]\
    \ = $alphabet[15];\n    $newAlphabet[] = $alphabet[16];\n    $newAlphabet[] =\
    \ $alphabet[17];\n    $newAlphabet[] = $alphabet[18];\n    $newAlphabet[] = $alphabet[19];\n\
    \    $newAlphabet[] = $alphabet[20];\n    $newAlphabet[] = $alphabet[21];\n  \
    \  $newAlphabet[] = $alphabet[22];\n    $newAlphabet[] = $alphabet[23];\n    $newAlphabet[]\
    \ = $alphabet[24];\n    $newAlphabet[] = $alphabet[25];\n    $newAlphabet[] =\
    \ $alphabet[26];\n    $newAlphabet[] = $alphabet[27];\n    $newAlphabet[] = $alphabet[28];\n\
    \    $newAlphabet[] = $alphabet[29];\n    $newAlphabet[] = $alphabet[30];\n  \
    \  $newAlphabet[] = $alphabet[31];\n    $newAlphabet[] = $alphabet[32];\n    $newAlphabet[]\
    \ = $alphabet[33];\n    $newAlphabet[] = $alphabet[34];\n    $newAlphabet[] =\
    \ $alphabet[35];\n    $newAlphabet[] = $alphabet[36];\n    $newAlphabet[] = $alphabet[37];\n\
    \    $newAlphabet[] = $alphabet[38];\n    $newAlphabet[] = $alphabet[39];\n  \
    \  $newAlphabet[] = $alphabet[40];\n    $newAlphabet[] = $alphabet[41];\n    $newAlphabet[]\
    \ = $alphabet[42];\n    $newAlphabet[] = $alphabet[43];", "    $alpha = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    $rotation = substr($alpha, strlen($alpha) - 1, 1);\n    return $s.$rotation;\n\
    }\n", "    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    $rotated_alphabet\
    \ = rotateAlphabet($alphabet, 2);\n    return str_rot13($s, $rotated_alphabet);\n\
    }\n", "    // Create a string with 26 empty strings in between each character.\n\
    \    $alpha = str_split('abcdefghijklmnopqrstuvwxyz');\n    // Create two empty\
    \ strings to hold the shifted alphabets.\n    $alpha2 = str_split('abcdefghijklmnopqrstuvwxyz\
    \ ');\n    // For each character in the string.\n    foreach (str_split($s) as\
    \ $char) {\n        // Shift the letters to the correct position by adding 2 each\
    \ \n        // time.\n        $char = $alpha[($alpha2[$char] + 2) % 26];\n   \
    \     // Append the letter to the empty string.\n        $alpha2[$char]++;\n \
    \   }\n    // Return the string without whitespace.\n    return implode('', $alpha2);\n\
    }\n", "    $alphabet = array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\",\
    \ \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n    $alphabet_length\
    \ = count($alphabet);\n    $key_length = strlen($s);\n    $result = \"\";\n  \
    \  $i = 0;\n    // Iterate over each character\n    while($i < $key_length) {\n\
    \        // Get character at current index\n        $c = $s[$i];\n        // Get\
    \ next character to encrypt\n        $next_c = $alphabet[$alphabet[$i] + (($i\
    \ + 1) % ($alphabet_length - 1))];\n        $result = $result . $next_c;\n   \
    \     // Update index\n        $i++;\n    }\n    return $result;\n}\n", "    $alphabet\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    $rotatedAlphabet = $alphabet;\n    $rotatedAlphabet\
    \ .= $alphabet;\n    $rotatedAlphabet .= $alphabet;\n    $rotatedAlphabet .= $alphabet;\n\
    \    $rotatedAlphabet .= $alphabet;\n    $rotatedAlphabet .= $alphabet;\n    $rotatedAlphabet\
    \ .= $alphabet;\n    $rotatedAlphabet .= $alphabet;\n    $rotatedAlphabet .= $alphabet;\n\
    \    $rotatedAlphabet .= $alphabet;\n    $rotatedAlphabet .= $alphabet;\n    $rotatedAlphabet\
    \ .= $alphabet;\n    $rotatedAlphabet .= $alphabet;\n    $rotatedAlphabet .= $alphabet;\n\
    \    $rotatedAlphabet .= $alphabet;\n    $rotatedAlphabet .= $alphabet;\n    $rotatedAlphabet\
    \ .= $alphabet;\n    $rotatedAlphabet .= $alphabet;\n    $rotatedAlphabet .= $alphabet;\n\
    \    $rotatedAlphabet .= $alphabet;\n    $rotatedAlphabet .= $alphabet;\n    $rotatedAlphabet\
    \ .= $alphabet;\n    $rotatedAlphabet .= $alphabet;\n    $rotatedAlphabet .= $alphabet;\n\
    \    $rotatedAlphabet .= $alphabet;\n    $rotatedAlphabet .= $alphabet;\n    $rotatedAlphabet\
    \ .= $alphabet;\n    $rotatedAlphabet .= $alphabet;\n    $rotatedAlphabet .= $alphabet;\n\
    \    $rotatedAlphabet .= $alphabet;\n    $rotatedAlphabet .= $alphabet;\n    $rotatedAlphabet\
    \ .= $alphabet;\n    $rotatedAlphabet .= $alphabet;\n    $rotatedAlphabet .= $alphabet;\n\
    \    $rotatedAlphabet .= $alphabet;\n    $rotatedAlphabet .= $alphabet;\n    $rotatedAlphabet\
    \ .= $alphabet;\n    $rotatedAlphabet .= $alphabet;\n    $rotatedAlphabet .= $alphabet;\n\
    \    $rotatedAlphabet .= $alphabet;\n    $rotatedAlphabet .= $alphabet;\n    $rotatedAlphabet\
    \ .= $alphabet;\n    $rotatedAlphabet .= $alphabet;\n    $rotatedAlphabet .= $alphabet;\n\
    \    $rotatedAlphabet .= $alphabet;\n    $", "    if (strlen($s) < 2) return $s;\n\
    \    $alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    $alphabet = str_split($alphabet,\
    \ 2);\n    return strtr(rotate($alphabet, str_split($s)), $alphabet);\n}", " \
    \   $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    $ret = \"\";\n    for ($i\
    \ = 0; $i < strlen($s); $i++){\n        $ret .= substr($alphabet, strlen($alphabet)\
    \ - (strlen($alphabet) - strlen($s) % strlen($alphabet)), (strlen($alphabet) -\
    \ strlen($alphabet) % strlen($alphabet)) * strlen($s) % strlen($alphabet) + strlen($s)\
    \ % strlen($alphabet) * ($i + 1));\n    }\n    return $ret;\n}", "  return str_shuffle($s);\n\
    }\n", "    $alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \    foreach($alphabet as $i => $c) {\n        $alphabet[$i] = $c . strtolower($c);\n\
    \    }\n    $alphabet = array_flip($alphabet);\n    $newAlphabet = array_flip($alphabet);\n\
    \    $s = strtoupper($s);\n    $newAlphabet = array_merge(array_fill(0, count($newAlphabet),\
    \ $newAlphabet[$newAlphabet[0]]), $newAlphabet);\n    $rotatedAlphabet = array_merge($alphabet,\
    \ array_fill(0, count($alphabet), $alphabet[$alphabet[0]]));\n    return strtr($s,\
    \ $rotatedAlphabet);\n}\n", "  $alphabet = array('a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9');\n  $new_alphabet\
    \ = array('d', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\
    \ 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\
    \ 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',\
    \ 'y', 'z');\n  $result = '';\n  for ($i = 0; $i < strlen($s); $i++) {\n    $result\
    \ .= $alphabet[array_search($s[$i], $alphabet)] . $alphabet[array_search($s[$i],\
    \ $new_alphabet)];\n  }\n  return $result;\n}\n", "    $c = array();\n    foreach(str_split($s)\
    \ as $v) $c[] = chr(ord($v) + 2);\n    return implode(\"\", $c);\n}\n", "    $alphabet\
    \ = str_split('abcdefghijklmnopqrstuvwxyz');\n    $rotated_alphabet = array_reverse($alphabet);\n\
    \    $i = 0;\n    $enc = \"\";\n    for ($n = 0; $n < strlen($s); $n++) {\n  \
    \      if ($i == 0) {\n            $enc = $alphabet[array_search($s[$n], $alphabet)];\n\
    \        } else {\n            $enc .= $rotated_alphabet[$i % count($alphabet)];\n\
    \        }\n        $i++;\n    }\n    return $enc;\n}\n", "    $encrypted = \"\
    \";\n    for ($i = 0, $l = strlen($s); $i < $l; $i++) {\n        $c = $s[$i];\n\
    \        if ($c >= \"a\" && $c <= \"z\") {\n            $encrypted .= strrev($s[$i]);\n\
    \        }\n    }\n    return $encrypted;\n}\n", "    // create a variable to\
    \ hold the value that we will encrypt\n    $encrypted = '';\n    // for each character\
    \ of the string\n    for($i = 0; $i < strlen($s); $i++) {\n        // get ascii\
    \ code for the character\n        $asciiCode = (ord($s[$i]));\n        // get\
    \ the value of the ascii code for the character and add 2\n        // so that\
    \ the ascii code will be two characters in the alphabet\n        $ascii = $asciiCode\
    \ + 2;\n        // get the letter for the ascii code by getting the alphabet\n\
    \        // array and getting the index that matches the ascii code\n        $letter\
    \ = ($alphabet[$ascii]);\n        // add letter to the encrypted string\n    \
    \    $encrypted .= $letter;\n    }\n    return $encrypted;\n}\n", "    return\
    \ strtr($s, array_combine(range('z', 'a'), range('a', 'z')));\n}", "    $alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    $shift = 2;\n    $rotated_alphabet =\
    \ rotate($alphabet, $shift, $alphabet);\n    $s = strrev($s);\n    $rotated_s\
    \ = strrev($rotated_alphabet);\n    $result = \"\";\n    $index = 0;\n    foreach\
    \ ($s as $c) {\n        $result .= $rotated_s[$index];\n        $index += $shift;\n\
    \    }\n    return $result;\n}\n", "    // Get the alphabet's rotated down by\
    \ 2.\n    $rotated_alphabet = strrev($alphabet);\n    $rotated_alphabet[$alphabet[strlen($alphabet)\
    \ - 1]] = strrev($alphabet[0]);\n    $rotated_alphabet .= strrev($alphabet);\n\
    \    // Create an array of all possible key combinations we can make.\n    $key_combos\
    \ = array(\n        \"a\" => array(),\n        \"b\" => array(),\n        \"c\"\
    \ => array(),\n        \"d\" => array(),\n        \"e\" => array(),\n        \"\
    f\" => array(),\n        \"g\" => array(),\n        \"h\" => array(),\n      \
    \  \"i\" => array(),\n        \"j\" => array(),\n        \"k\" => array(),\n \
    \       \"l\" => array(),\n        \"m\" => array(),\n        \"n\" => array(),\n\
    \        \"o\" => array(),\n        \"p\" => array(),\n        \"q\" => array(),\n\
    \        \"r\" => array(),\n        \"s\" => array(),\n        \"t\" => array(),\n\
    \        \"u\" => array(),\n        \"v\" => array(),\n        \"w\" => array(),\n\
    \        \"x\" => array(),\n        \"y\" => array(),\n        \"z\" => array()\n\
    \    );\n    // Fill the key combo array with all possible key combinations.\n\
    \    foreach ($key_combos as $key => $val) {\n        $key_combos[$key] = str_split($key);\n\
    \        foreach ($key_combos[$key] as $key => $val) {\n            $key_combos[$key][$val]\
    \ = $val;\n        }\n    }\n    // Go through the string and rotate each character\
    \ one place.\n    $encrypted = \"\";\n    foreach (str_split($s) as $key => $char)\
    \ {\n        if ($char == \"z\") {\n            $encrypted .= $char;\n       \
    \ } else if ($char == \"z\") {\n            $encrypted .= $rotated_alphabet[$key];\n\
    \        } else if (isset($key_combos[$char])) {\n            // Find out if we\
    \ have a key combination that we should use.\n            $vals = $key_combos[$char];\n\
    \            $encrypted_char = encrypt($char);\n            foreach ($vals as\
    \ $val) {\n                if (isset($key_combos[$val])) {\n                 \
    \   $vals = $key_combos[$val];\n                    $vals[] = $val;\n        \
    \            $vals = array_unique($vals);\n                    $encrypted .= $val;\n\
    \                }\n            }\n        } else {\n            $encrypted .=\
    \ $char;\n        }\n    }\n    // Return the encrypted string.\n", "    $alphabet\
    \ = array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\");\n    return $alphabet[array_search(array_shift($alphabet),\
    \ $alphabet)];\n}\n", "\t$alphabet = array(\"a\", \"b\", \"c\", \"d\", \"e\",\
    \ \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\"\
    , \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\"\
    , \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\"\
    , \"X\", \"Y\", \"Z\");\n\t$n = 0;\n\twhile ($n < strlen($s)) {\n\t\t$t = $alphabet[$n\
    \ % strlen($alphabet)];\n\t\t$newstr = $newstr. $t;\n\t\t$n++;\n\t}\n\treturn\
    \ $newstr;\n}\n", "    $alphabet = str_split($s);\n    $key = '';\n    $keyChar\
    \ = '';\n    foreach ($alphabet as $letter) {\n        if ($keyChar == '')\n \
    \           $key .= $letter;\n        else\n            $key .= $letter;\n   \
    \     $keyChar = substr($key, -1);\n        $key .= $letter;\n    }\n    return\
    \ $key;\n}\n", "  $alpha = 'abcdefghijklmnopqrstuvwxyz';\n  $alphalength = strlen($alpha);\n\
    \  $rotated = '';\n  for ($i = 0; $i < strlen($s); $i++) {\n    $letter = $s[$i];\n\
    \    $rotated .= $alpha[(strlen($rotated) % $alphalength) + $letter];\n  }\n \
    \ return $rotated;\n}\n", "   $rotation = count(str_split($s)) / 2;\n   return\
    \ strrev(str_split(strrev($s)) + str_split(str_split(strrev($s))) + str_split(strrev($s))).\n\
    \   str_repeat(str_split($s)[$rotation], $rotation);\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nI've updated my answer with an example that works with a string of the\
    \ same length as the current string.\n<|/ c |>\n<| a dscore=0 |>\nThe best way\
    \ to do it would be to use the modulus operator.  It will get the remainder after\
    \ dividing by 2, and then you can just add the letters back in using the % operator.\n\
    http://php.net/manual/en/language.operators.arithmetic.php\n<code>", "  $alphabet\
    \ = str_rot13($alphabet);\n  $result = \"\";\n  for ($i = 0, $len = strlen($s);\
    \ $i < $len; ++$i) {\n    $c = substr($s, $i, 1);\n    $index = array_search($c,\
    \ $alphabet);\n    if ($index === false) {\n      throw new InvalidArgumentException(\n\
    \          sprintf(\n              \"Character '%s' not found in alphabet %s\"\
    ,\n              $c,\n              $alphabet\n          )\n      );\n    }\n\
    \    $index += 2;\n    $result += $alphabet[$index];\n  }\n  return $result;\n\
    }", "    $a = 'abcdefghijklmnopqrstuvwxyz';\n    $b = 'ghijklmnopqrstuvwxyzabcdef';\n\
    \    $c = 'nopqrstuvwxyzabcdefghijk';\n    $d = 'uvwxyzabcdefghijklmnopq';\n \
    \   $e = 'abcdefghijklmnopqrstuvwxyz';\n    $f = 'ghijklmnopqrstuvwxyzabcdef';\n\
    \    $g = 'nopqrstuvwxyzabcdefghijk';\n    $h = 'uvwxyzabcdefghijklmnopq';\n \
    \   $i = 'abcdefghijklmnopqrstuvwxyz';\n    $j = 'ghijklmnopqrstuvwxyzabcdef';\n\
    \    $k = 'nopqrstuvwxyzabcdefghijk';\n    $l = 'uvwxyzabcdefghijklmnopq';\n \
    \   $m = 'abcdefghijklmnopqrstuvwxyz';\n    $n = 'ghijklmnopqrstuvwxyzabcdef';\n\
    \    $o = 'nopqrstuvwxyzabcdefghijk';\n    $p = 'uvwxyzabcdefghijklmnopq';\n \
    \   $q = 'abcdefghijklmnopqrstuvwxyz';\n    $r = 'ghijklmnopqrstuvwxyzabcdef';\n\
    \    $s = 'nopqrstuvwxyzabcdefghijk';\n    $t = 'uvwxyzabcdefghijklmnopq';\n \
    \   $u = 'abcdefghijklmnopqrstuvwxyz';\n    $v = 'ghijklmnopqrstuvwxyzabcdef';\n\
    \    $w = 'nopqrstuvwxyzabcdefghijk';\n    $x = 'uvwxyzabcdefghijklmnopq';\n \
    \   $y = 'abcdefghijklmnopqrstuvwxyz';\n    $z = 'ghijklmnopqrstuvwxyzabcdef';\n\
    \    \n    $alphabet = array();\n    $alphabet[] = $a;\n    $alphabet[] = $b;\n\
    \    $alphabet[] = $c;\n    $alphabet[] = $d;\n    $alphabet[] = $e;\n    $alphabet[]\
    \ = $f;\n    $alphabet[] = $g;\n    $alphabet[] = $h;\n    $alphabet[] = $i;\n\
    \    $alphabet[] = $j;\n    $alphabet[] = $k;\n    $alphabet[] = $l;\n    $alphabet[]\
    \ = $m;\n    $alphabet[] = $n;\n    $alphabet[] = $o;\n    $alphabet[] = $p;\n\
    \    $alphabet", "    if (empty($s)) {\n        die(\"Please enter the string\
    \ to be encrypted\");\n    }\n    $s = str_replace(\" \", \"\", $s);\n    $key\
    \ = array_merge(range(0,9), range(0,9));\n    $alphabet = array_merge(range(0,9),\
    \ range(0,9));\n    $key = array_combine($key, $alphabet);\n    $s = strtr($s,\
    \ $key);\n    return $s;\n}\n", "\t\n\t// First, convert $s to an array of single\
    \ characters.\n\t$s = str_split($s);\n\n\t// Next, rotate each character in the\
    \ array by 1 to the left and \n\t// add it to an empty string\n\t$s = array_map('rot13',\
    \ $s);\n\t\n\t// Finally, join each character in the array with the empty string\n\
    \treturn implode('', $s);\n}\n", "    $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    $rot = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    $shift = 2; // shift is 2 -> \"\
    lm\"\n    $length = strlen($s);\n    $encrypted = '';\n    for ($i=0; $i<$length;\
    \ $i++) {\n        // get char from $alphabet\n        $c = substr($alphabet,\
    \ strlen($alphabet)-$i, 1);\n        // get char from $rot\n        $r = substr($rot,\
    \ strlen($rot)-$i, 1);\n        // concatenate them\n        $encrypted .= $c+$r;\n\
    \    }\n    return $encrypted;\n}", "  $newString = \"\";\n  for ($i = 0; $i <\
    \ strlen($s); $i++) {\n    $newString .= $s[$i] . $s[$i + 1];\n  }\n  return $newString;\n\
    }\n", "    $alphabet = str_split($s);\n    $new_alphabet = array();\n    foreach\
    \ ($alphabet as $key => $char) {\n        $new_alphabet[$key] = $char;\n     \
    \   $new_alphabet[$key * 2] = $char;\n        $new_alphabet[$key * 2 + 1] = $char;\n\
    \    }\n    return implode('', $new_alphabet);\n}\n", "  $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  $result = \"\";\n  for ($i = 0, $n = strlen($s); $i < $n; $i++) {\n    $char\
    \ = substr($alphabet, rand(0, strlen($alphabet) - 1), 1);\n    $result .= $char;\n\
    \  }\n  return $result;\n}\n</code>\nNow you have your encryption algorithm. Next,\
    \ decrypt it by using the same function you used to encrypt it.\n<code>\n<?php\n",
  "  list($firstChar, $secondChar) = split(\"\", strrev($s));\n  return $firstChar.substr(strrev($firstChar).$secondChar,\
    \ 2);\n}\n", "    for($i = strlen($s) - 1; $i >= 0; $i -= 2) {\n        $tmp =\
    \ $s[$i];\n        $s[$i] = $s[$i+1];\n        $s[$i+1] = $tmp;\n    }\n    return\
    \ $s;\n}\n$newPassword = encrypt($oldPassword);", "  // Create a new alphabet\
    \ based on the rotated alphabet.\n  $alphabet = str_repeat($alphabet, $rot);\n\
    \  return strtr($s, $alphabet);\n}", "    $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    $rotated_alphabet = $alphabet;\n    for ($i = 0; $i < strlen($alphabet);\
    \ $i++) {\n        $rotated_alphabet[$i] = $rotated_alphabet[$i] . $rotated_alphabet[$i+1];\n\
    \    }\n    return $rotated_alphabet[array_search(substr($s, 0, 1), $rotated_alphabet)]\n\
    \        .$rotated_alphabet[array_search(substr($s, 1), $rotated_alphabet)];\n\
    }\n", "  $result = \"\";\n  for ($i=0; $i < strlen($s); $i++) {\n    $char = substr($s,\
    \ $i, 1);\n    $result .= chr(ord($char) + $i * 2);\n  }\n  return $result;\n\
    }\n", "  $rotated = \"\";\n  for ($c = 0; $c < strlen($s); $c++) {\n    if ($c\
    \ + 1 == strlen($s)) {\n      $rotated .= $s[$c];\n    } else {\n      $rotated\
    \ .= $s[$c] . $s[$c + 1];\n    }\n  }\n  return $rotated;\n}\n", "    $alphabet\
    \ = range('A', 'Z');\n    $length = strlen($s);\n    $output = '';\n\n    for\
    \ ($i=0; $i < $length; $i++) {\n        $letter = $s[$i];\n        $letter_index\
    \ = array_search($letter, $alphabet);\n        $new_letter = $alphabet[$letter_index\
    \ + 1];\n        $output .= $new_letter;\n    }\n\n    return $output;\n}\n",
  "  $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  $newAlphabet = array_merge(str_split($alphabet),\
    \ array_reverse(str_split($alphabet)));\n\n  $s = strtoupper($s);\n  $res = \"\
    \";\n  for($i = 0; $i < strlen($s); $i++) {\n    $res .= $newAlphabet[(strlen($alphabet)\
    \ - $i + strlen($s) % strlen($alphabet)) % strlen($alphabet)];\n  }\n  return\
    \ $res;\n}\n", "  $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  $alphabet_length\
    \ = strlen($alphabet);\n  $num_letters = strlen($s);\n  $rotate_offset = $num_letters\
    \ - 2;\n  $result = '';\n  for($i = 0; $i < $num_letters; $i++) {\n    $result\
    \ .= $alphabet[(ord($alphabet[$i]) + $rotate_offset) % $alphabet_length];\n  }\n\
    \  return $result;\n}", "    $r = $s[2] . $s[1] . $s[0] . $s[3];\n    $s[2] =\
    \ $s[3];\n    $s[1] = $s[0];\n    $s[0] = $r;\n    return $s;\n}\n", "    $alphabet\
    \ = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift($alphabet);\n    $alphabet = array_shift($alphabet);\n\
    \    $alphabet = array_shift(", "  $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  $s = strrev($s);\n  $s = strtr($s, $alphabet, rotate($alphabet));\n  return\
    \ $s;\n}\n", "    $cipher = \"\";\n    for ($i = 0, $l = strlen($s); $i < $l;\
    \ $i++) {\n        $cipher = $cipher . chr(ord($s[$i]) ^ ($i % 26));\n    }\n\
    \    return $cipher;\n}\n", "  $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n \
    \ $rotated_alphabet = rotate($alphabet);\n  $rotated_s = rotate($s);\n  return\
    \ rotate($rotated_s);\n}", "    $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  \
    \  $shifts = [2, 1];\n    $result = '';\n    $len = strlen($s);\n    for ($i =\
    \ 0; $i < $len; $i++) {\n        $c = $s[$i];\n        $idx = array_search($c,\
    \ $alphabet);\n        $idx = ($idx * 2) + ($i % 2);\n        $letter = $alphabet[$idx];\n\
    \        $result .= $letter;\n    }\n    return $result;\n}\n", "    $alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz';\n    $alphabet .= 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\
    \    $alphabet .= '1234567890!@#$%^&*()';\n    $alphabet .= '~`-_=+[]{};:\\'\"\
    ,.<>/';\n    $alphabet = str_split($alphabet);\n    \n    $s = str_split($s);\n\
    \    \n    $rotated_alphabet = array();\n    foreach ($alphabet as $i => $letter)\
    \ {\n        $rotated_alphabet[] = substr($letter, 0, 2) * str_repeat($letter,\
    \ 2);\n    }\n    \n    $res = '';\n    $len = count($s);\n    foreach ($s as\
    \ $i => $letter) {\n        $res .= $rotated_alphabet[$i % count($alphabet)]\n\
    \                 . $rotated_alphabet[($i + 1) % count($alphabet)];\n    }\n \
    \   return $res;\n}", "    return strtr(strrev($s), \n        array('e' => 'i',\
    \ 'a' => 'o', 'o' => 'i', 'u' => 'o', 'i' => 'a', 's' => 'o'));\n}", "    $alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    $rotated_alphabet = str_rot13($alphabet);\n\
    \n    $s_rot13 = str_rot13($s);\n\n    $s_length = strlen($s);\n    $s_repeated_alphabet\
    \ = str_repeat($alphabet, 2 * $s_length - 1);\n\n    return $s_repeated_alphabet\
    \ . substr($s_rot13, ($s_length * 2));\n}\n", "  $alphabet_rotated_twice = rotate($alphabet_rotated_twice,\
    \ 2);\n  return substr($s, 0, 1) . substr($alphabet_rotated_twice, 1);\n}\n",
  "    // Make empty array to hold encrypted message\n    $encrypted = \"\";\n   \
    \ // Make an empty array with the letters shifted down\n    $shift_down = array(\"\
    z\",\"y\",\"x\",\"w\",\"v\",\"u\",\"t\",\"s\",\"r\",\"q\",\"p\",\"o\",\"n\",\"\
    m\");\n    // Loop through each character in $s\n    for($i = 0; $i < strlen($s);\
    \ $i++){\n        // Get current character and push into $encrypted\n        $encrypted\
    \ .= $shift_down[strval($s[$i])];\n    }\n    // Return the encrypted string\n\
    \    return $encrypted;\n}", "    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\
    \    $rotated = str_repeat($alphabet, 2);\n    return strtr($s, $alphabet . $rotated);\n\
    }\n", "    $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    $s = preg_replace('/\\\
    s+/', '', $s);\n    $n = strlen($s);\n    $result = \"\";\n    for($i = 0; $i\
    \ < $n; $i++) {\n        $result .= substr($alphabet, ((strlen($alphabet) - $i)\
    \ % strlen($alphabet)) + 1, 1) . $s[$i];\n    }\n    return $result;\n}\n", " \
    \   $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    $s = str_replace(\" \", \"\
    \", $s);\n    $keys = array_keys($alphabet);\n    $keysCount = count($keys);\n\
    \n    $i = 0;\n    $encrypted = '';\n    for ($i; $i < strlen($s); $i++) {\n \
    \       $encrypted .= $alphabet[($s[$i] - $keys[($i % $keysCount)])];\n    }\n\
    \    return $encrypted;\n}\n", "  global $alphabet;\n  $sLen = strlen($s);\n \
    \ $alphabetSize = strlen($alphabet);\n  $alphabetSize = $alphabetSize / 2;\n \
    \ $j = 0;\n  $rs = \"\";\n  $i = 0;\n  while ($i < $sLen) {\n    $c = $s[$i];\n\
    \    $c = $alphabet[$alphabetSize + $c];\n    $rs .= $c;\n    $i++;\n  }\n  return\
    \ $rs;\n}\n", "    $alphabet = array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n    $i = 0;\n\
    \    $encryptedString = \"\";\n    while ($i < strlen($s)) {\n        $encryptedString\
    \ .= $alphabet[(strlen($encryptedString) - 1) + (ord($s[$i]) - ord($alphabet[0])\
    \ + $alphabet[1]) % strlen($alphabet)];\n        $i++;\n    }\n    return $encryptedString;\n\
    }\n", "    $s = strtr($s, array('A'=>'B', 'B'=>'A', 'C'=>'D', 'D'=>'C', 'E'=>'F',\
    \ 'F'=>'E', 'G'=>'H', 'H'=>'G', 'I'=>'J', 'J'=>'I', 'K'=>'L', 'L'=>'K', 'M'=>'N',\
    \ 'N'=>'M', 'O'=>'P', 'P'=>'O', 'Q'=>'R', 'R'=>'Q', 'S'=>'T', 'T'=>'S', 'U'=>'V',\
    \ 'V'=>'U', 'W'=>'X', 'X'=>'W', 'Y'=>'Y', 'Z'=>'Z'));\n    return implode('',\
    \ array_map('chr', array_merge(str_split($s), array_reverse(str_split($s)))));\n\
    }\n", "\t$alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\t$code    = array();\n\t\
    foreach (str_split($s) as $c) {\n\t\t$k = array_search($c, $alphabet);\n\t\t$code[$k]\
    \ = $alphabet[$k] . $code[$k];\n\t}\n\treturn implode(\"\", $code);\n}\n", " \
    \   // The alphabet is rotated one place to the left\n    $alpha = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    $len = strlen($alpha);\n    $res = \"\";\n    for($i = 0; $i < $len; $i++)\
    \ {\n        // The letters are added to $res using their index\n        $res\
    \ .= substr($alpha,$i,1) . $s[($len-1 - $i)%$len];\n    }\n    return $res;\n\
    }\n", "    $s = str_split($s);\n    $new_s = array();\n    foreach ($s as $c)\
    \ {\n        $new_s[] = chr(ord($c) - 2);\n    }\n    return implode('', $new_s);\n\
    }\n", "  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  $rotated = str_split($alphabet,\
    \ 2);\n  $rotated[$rotated[count($rotated)-1]] = 'z';\n  $rotated[$rotated[0]]\
    \ = 'y';\n  $result = '';\n  foreach(str_split($s) as $c) {\n    for($i = 0; $i\
    \ < strlen($c); $i++) {\n      $result .= $rotated[ord($c[$i]) - ord('a')];\n\
    \    }\n  }\n  return $result;\n}\n", "    $alphabet = array(\"a\" => 2, \"b\"\
    \ => 3, \"c\" => 4, \"d\" => 5, \"e\" => 6, \"f\" => 7, \"g\" => 8, \"h\" => 9,\
    \ \"i\" => 10, \"j\" => 11, \"k\" => 12, \"l\" => 13, \"m\" => 14, \"n\" => 15,\
    \ \"o\" => 16, \"p\" => 17, \"q\" => 18, \"r\" => 19, \"s\" => 20, \"t\" => 21,\
    \ \"u\" => 22, \"v\" => 23, \"w\" => 24, \"x\" => 25, \"y\" => 26, \"z\" => 27,\
    \ \"A\" => 28, \"B\" => 29, \"C\" => 30, \"D\" => 31, \"E\" => 32, \"F\" => 33,\
    \ \"G\" => 34, \"H\" => 35, \"I\" => 36, \"J\" => 37, \"K\" => 38, \"L\" => 39,\
    \ \"M\" => 40, \"N\" => 41, \"O\" => 42, \"P\" => 43, \"Q\" => 44, \"R\" => 45,\
    \ \"S\" => 46, \"T\" => 47, \"U\" => 48, \"V\" => 49, \"W\" => 50, \"X\" => 51,\
    \ \"Y\" => 52, \"Z\" => 53, \"0\" => 54, \"1\" => 55, \"2\" => 56, \"3\" => 57,\
    \ \"4\" => 58, \"5\" => 59, \"6\" => 60, \"7\" => 61, \"8\" => 62, \"9\" => 63,\
    \ \"~\" => 64, \"+\" => 65, \"/\" => 66);\n    return strtr($s, $alphabet);\n\
    }\n", "    $rotated_alphabet = rotateAlphabet($alphabet);\n    $cipher = \"\"\
    ;\n    foreach (str_split($s) as $letter) {\n        $cipher = $cipher . $rotated_alphabet[$letter];\n\
    \    }\n    return $cipher;\n}\n", "    $alphabet = array(\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\");\n    $alphabet_length = count($alphabet);\n\n    $key = $alphabet[$alphabet_length\
    \ - 2];\n\n    $alphabet[$alphabet_length - 2] = $alphabet[$alphabet_length -\
    \ 1];\n    $alphabet[$alphabet_length - 1] = $key;\n\n    $i = 0;\n\n    $encrypted_string\
    \ = \"\";\n\n    for ($i = 0; $i < strlen($s); $i++) {\n        $encrypted_string.=\
    \ $alphabet[$s[$i]];\n    }\n\n    return $encrypted_string;\n}\n</code>\nDecryption:\n\
    <code>\n<?php", "  // We will maintain a list of all possible shifts.\n  $shifts\
    \ = array();\n\n  // We will rotate each character by two places to create the\
    \ alphabet of\n  // all possible shifts. \n  for ($i = 0; $i < strlen($s); $i++)\
    \ {\n    // We will use $shifts[] to keep track of each possible shift.\n    $shifts[]\
    \ = array();\n\n    // Loop through the possible shifts and create each possible\
    \ shift.\n    for ($j = 0; $j < count($shifts); $j++) {\n      // Determine if\
    \ shift is positive or negative.\n      if ($j % 2 == 0) {\n        // Positive\
    \ shift.\n        $shifts[$j][] = $s[$i];\n      } else {\n        // Negative\
    \ shift.\n        $shifts[$j][] = strrev($s[$i]);\n      }\n    }\n  }\n\n  //\
    \ We will maintain a list of characters that we will return in the end.\n  $chars\
    \ = array();\n\n  // For each possible shift\n  for ($i = 0; $i < count($shifts);\
    \ $i++) {\n    // For each character in the original string.\n    for ($j = 0;\
    \ $j < count($shifts[$i]); $j++) {\n      // Get the character to shift and add\
    \ it to the list.\n      $chars[] = $shifts[$i][$j];\n    }\n  }\n\n  // Return\
    \ the encrypted string.\n  return implode('', $chars);\n}\n", "    $alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n    $length = strlen($s);\n    $encrypt = \"\
    \";\n    for($i=0;$i<$length;$i++){\n        $pos = $alphabet.strrpos($alphabet,\
    \ $s[$i]);\n        if($pos !== false){\n            $alphabet .= str_repeat($alphabet,\
    \ $pos+1);\n        }\n        $encrypt .= $alphabet[$pos];\n    }\n    return\
    \ $encrypt;\n}", "    $alphabet = array(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n    $size\
    \ = count($alphabet);\n\n    $result = \"\";\n\n    for ($i = 0, $len = strlen($s);\
    \ $i < $len; $i++) {\n        $char = substr($s, $i, 1);\n        $index = array_search($char,\
    \ $alphabet);\n\n        $result = $alphabet[$index + ($index / 2)] + $result\
    \ + $alphabet[$index + ($index * 2)];\n    }\n\n    return $result;\n}\n", "\t\
    $alpha = \"abcdefghijklmnopqrstuvwxyz\";\n\tshuffle($alpha);\n\treturn strtr(encrypt($s),\
    \ $alpha);\n}\n", "    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    $alphabetLength\
    \ = strlen($alphabet);\n    $result = '';\n    $rot = 0;\n    for ($i=0; $i<strlen($s);\
    \ $i++) {\n        $rot += 2;\n        $rot %= $alphabetLength;\n        $result\
    \ .= $alphabet[$alphabet[$i]];\n        $result .= $alphabet[$alphabet[$i]]; \n\
    \    }\n    return $result;\n}", "    $alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    $rotation = strlen($alphabet);\n    $newstr = \"\";\n\n    for($i = 0;\
    \ $i < strlen($s); $i++){\n        $newstr .= $alphabet[(ord($alphabet[$i]) +\
    \ $rotation) % $rotation];\n    }\n    return $newstr;\n}", "    $alphabet = str_split($s);\n\
    \    sort($alphabet);\n    array_pop($alphabet);\n    array_push($alphabet,\"\"\
    );\n\n    foreach($alphabet as $index => $letter) {\n        $alphabet[$index+1]\
    \ = $alphabet[$index] + 2;\n    }\n\n    $encrypted = \"\";\n    foreach($alphabet\
    \ as $letter => $letter2) {\n        $encrypted .= $letter;\n    }\n\n    return\
    \ $encrypted;\n}\n", "    $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    $new_alphabet\
    \ = str_rot13($alphabet);\n    $rotated_s = str_rot13($s);\n    return $new_alphabet[$rotated_s%strlen($new_alphabet)];\n\
    }", "    return substr(str_rot13(encrypt($s)), 0, strlen($s));\n}", "    $rotated_alphabet\
    \ = array_flip(str_rot13($alphabet));\n    return strtr($s, $rotated_alphabet);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThank you for your response but this was a problem\
    \ I was trying to solve and I couldn't figure out how to do it!\n<|/ c |>\n<|\
    \ a |>\nIt can be easily done using preg_replace:\n<code>\n$string = \"abcf\"\
    ;\n", "    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    $rotation = array_flip(str_split($alphabet));\n\
    \    $rotatedAlphabet = array_map(function($letter) use ($rotation) {\n      \
    \  return $rotation[$letter];\n    }, str_split($alphabet));\n    $encrypted =\
    \ \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n        $encrypted .= $rotatedAlphabet[($alphabet.indexOf($s[$i])\
    \ + 2) % 26];\n    }\n    return $encrypted;\n}\n", "    $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    $l = strlen($s);\n    $e = $l = strlen($alphabet);\n    $x = 1;\n    while\
    \ ($x < $l+1) {\n        for ($i = 0; $i < $l; $i++) {\n            $x = $x*21;\n\
    \        }\n        $x = $alphabet[$x];\n        $y = $x;\n        for ($i = 0;\
    \ $i < $l; $i++) {\n            $y = $y*21;\n        }\n        $s[$i] = $y;\n\
    \    }\n    return $s;\n}\n", "    return substr($s, -1 * strlen($s) % 2, 1);\n\
    }\n", "    \n    $len = strlen($s);\n    $result = '';\n    $i = 0;\n\n    //\
    \ rotate alphabet for two characters for each letter we encounter\n    // we do\
    \ this by starting with the letter at the lowest index in the alphabet\n    //\
    \ and moving it down a couple of characters, then moving up two characters.\n\
    \    // for example:\n    // >>> encrypt(\"hi\")\n    // \"lm\"\n    // >>> encrypt(\"\
    asdfghjkl\")\n    // \"ewhjklnop\"\n    // >>> encrypt(\"gf\")\n    // \"kj\"\n\
    \    // >>> encrypt(\"et\")\n    // \"ix\"\n    while($i < $len) {\n        $result\
    \ += substr($alphabet, $alphabet[$i], 1) + substr($alphabet, $alphabet[$i], 1);\n\
    \        $i++;\n    }\n\n    // return the result of the encryption\n    return\
    \ $result;\n}\n", "    return strtr(encrypt($s), array('z'=>'a', 'x'=>'b', 'y'=>\
    \ 'c', 'w'=>'d', 'v'=>'e'));\n}", "    $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    $alphaCount = count($alphabet);\n    $result = \"\";\n    for ($i = 0;\
    \ $i < strlen($s); $i++) {\n        // Rotate each letter in the alphabet by two.\n\
    \        $result .= $alphabet[($alphabet[$i] + $alphabet[$i + 1]) % $alphaCount];\n\
    \    }\n    return $result;\n}", "    $s = str_split($s);\n    $new = '';\n  \
    \  foreach ($s as $c) {\n        $new .= $c; // append the letter to the new string\n\
    \        if (strlen($new) % 2 == 0) // if it's odd, append an 'i'\n          \
    \  $new .= \"i\";\n        $new .= str_rotate($c); // append a letter rotated\
    \ 90 degrees\n    }\n    return $new;\n}\n", "  return strtr(\n    mb_substr(\n\
    \      strtr(\n        str_pad(\n          strtolower($s),\n          strlen($alphabet),\n\
    \          chr($alphabet[0]),\n          STR_PAD_LEFT\n        ),\n        'abcdefghijklmnopqrstuvwxyz',\n\
    \        array_flip($alphabet)\n      ),\n      1,\n      strlen($s)\n    ),\n\
    \    $alphabet\n  );\n}\n", "    $alphabet = array_flip(range(\"a\", \"z\"));\n\
    \    $alphabet[$alphabet[\"b\"]++] = \"b\";\n    $alphabet[$alphabet[\"c\"]++]\
    \ = \"c\";\n    $alphabet[$alphabet[\"d\"]++] = \"d\";\n    $alphabet[$alphabet[\"\
    e\"]++] = \"e\";\n    $alphabet[$alphabet[\"f\"]++] = \"f\";\n    $alphabet[$alphabet[\"\
    g\"]++] = \"g\";\n    $alphabet[$alphabet[\"h\"]++] = \"h\";\n    $alphabet[$alphabet[\"\
    i\"]++] = \"i\";\n    $alphabet[$alphabet[\"j\"]++] = \"j\";\n    $alphabet[$alphabet[\"\
    k\"]++] = \"k\";\n    $alphabet[$alphabet[\"l\"]++] = \"l\";\n    $alphabet[$alphabet[\"\
    m\"]++] = \"m\";\n    $alphabet[$alphabet[\"n\"]++] = \"n\";\n    $alphabet[$alphabet[\"\
    o\"]++] = \"o\";\n    $alphabet[$alphabet[\"p\"]++] = \"p\";\n    $alphabet[$alphabet[\"\
    q\"]++] = \"q\";\n    $alphabet[$alphabet[\"r\"]++] = \"r\";\n    $alphabet[$alphabet[\"\
    s\"]++] = \"s\";\n    $alphabet[$alphabet[\"t\"]++] = \"t\";\n    $alphabet[$alphabet[\"\
    u\"]++] = \"u\";\n    $alphabet[$alphabet[\"v\"]++] = \"v\";\n    $alphabet[$alphabet[\"\
    w\"]++] = \"w\";\n    $alphabet[$alphabet[\"x\"]++] = \"x\";\n    $alphabet[$alphabet[\"\
    y\"]++] = \"y\";\n    $alphabet[$alphabet[\"z\"]++] = \"z\";\n    $alphabet[$alphabet[\"\
    A\"]++] = \"A\";\n    $alphabet[$alphabet[\"B\"]++] = \"B\";\n    $alphabet[$alphabet[\"\
    C\"]++] = \"C\";\n    $alphabet[$alphabet[\"D\"]++] = \"D\";\n    $alphabet[$alphabet[\"\
    E\"]++] = \"E\";\n    $alphabet[$alphabet[\"F\"]++] = \"F\";\n    $alphabet[$alphabet[\"\
    G\"]++] = \"G\";\n    $alphabet[$alphabet[\"H\"]++] = \"H\";\n    $alphabet[$alphabet[\"\
    I\"]++] = \"I\";\n    $alphabet[$alphabet[\"J\"]++] = \"J\";\n    $alphabet[$alphabet[\"\
    K\"]++] = \"K\";\n    $alphabet[$alphabet[\"L\"]++] = \"L\";\n    $alphabet[$alphabet[\"\
    M\"]++] = \"M\";\n    $alphabet[$alphabet[\"N\"]++] = \"N\";\n    $alphabet[$alphabet[\"\
    O\"]++] = \"O\";\n    $alphabet[$alphabet[\"P\"]++] = \"P\";\n    $alphabet[$alphabet[\"\
    Q\"]++] = \"Q", "    // Store our return value in another variable\n    $out =\
    \ \"\";\n    \n    // Loop through each character of the string\n    for($i =\
    \ 0; $i < strlen($s); $i++) {\n        // Shift the current letter down by two\
    \ to the right\n        $out .= substr($alphabet, strlen($alphabet) - $i, 1).substr($s,\
    \ $i, 1);\n    }\n    \n    // Return the encrypted string\n    return $out;\n\
    }\n</code>\n<|/ a tags=encryption,php,arrays dscore=2 |>\n<| c |>\nWhat does this\
    \ have to do with rotating the alphabet?\n<|/ c |>\n<| c |>\nSorry, I misread\
    \ the question. I've modified the answer accordingly.\n<|/ c |>\n<| c |>\nPlease\
    \ note that in line 2 of rotate function, you have $alphabet[strlen($alphabet)\
    \ - $i] while it should be $alphabet[$i]. Because you start at 0 the string length\
    \ will be longer than the alphabet. Also, when $i is 0, you only do strlen($alphabet)\
    \ - 1 which is strlen($alphabet). To get the correct result you should have $alphabet[$i].\n\
    <|/ c |>\n<| c |>\nThanks for pointing out my mistakes. I've corrected my answer.\n\
    <|/ c |>\n<| a tags=encryption,php,arrays |>\nTry something like this. It works\
    \ fine for me. Enjoy\n<code>\n<?php\n\n$alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n$key = \"abcd\";\n", "  $s = strtoupper($s);\n  $key = 'LETTERS';\n  $len =\
    \ strlen($key);\n  $res = '';\n  for ($i = 0; $i < strlen($s); $i++) {\n    $res\
    \ .= $key[array_search($s[$i], $key)];\n  }\n  return $res;\n}\n", "    $alphabet\
    \ = str_split('abcdefghijklmnopqrstuvwxyz');\n    $s = strtolower($s);\n    $i\
    \ = 0;\n    do {\n        $letter = substr($s, $i, 1);\n        $letter = substr($alphabet[$letter],\
    \ 0, 2);\n        $s += $letter;\n        $i = strlen($s);\n    } while ($i <\
    \ strlen($s) && $letter === '');\n    return $s;\n}\n", "\tglobal $alphabet;\n\
    \t$newstring = $s;\n\t$newlength = strlen($newstring);\n\tfor ($i = 0; $i < $newlength;\
    \ $i+=2) {\n\t\t$newstring .= $alphabet[((int)($newstring[$i]))-((int)($newstring[$i+1]))];\n\
    \t}\n\treturn $newstring;\n}\n", "    $alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\
    \    $rotatedAlphabet = strtr($alphabet, array('A' => 'E', 'B' => 'F', 'C' =>\
    \ 'G', 'D' => 'H', 'E' => 'I', 'F' => 'J', 'G' => 'K', 'H' => 'L', 'I' => 'M',\
    \ 'J' => 'N', 'K' => 'O', 'L' => 'P', 'M' => 'Q', 'N' => 'R', 'O' => 'S', 'P'\
    \ => 'T', 'Q' => 'U', 'R' => 'V', 'S' => 'W', 'T' => 'X', 'U' => 'Y', 'V' => 'Z'));\n\
    \    $len = strlen($s);\n    $rotated = '';\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        $shifted = $rotatedAlphabet[($i + 1) % strlen($alphabet)] + $alphabet\
    \ [$i];\n        $rotated .= $shifted;\n    }\n    return $rotated;\n}", "\t$alpha\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n\t$shift = 2;\n\t$s = strtolower($s);\n\t\
    $s = str_split($s);\n\tforeach ($s as &$a) {\n\t\t$a = $alpha [(ord($a) + $shift)\
    \ % 26];\n\t}\n\treturn implode($s);\n}", "  $alphabet =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    .\"abcdefghijklmnopqrstuvwxyz\";\n  $alphabetLength = strlen($alphabet);\n\
    \  return strtr($s, array_combine($alphabet, array_flip($alphabet)));\n}\n", " \
    \   return strtr($s, array_flip(array_merge(\n        range(0,9), \n        array_flip(range(9,18),\
    \ \n        array_flip(range(18,27), \n        array_flip(range(27,36)))\n   \
    \ ))); \n}\n", "    $alpha = \"abcdefghijklmnopqrstuvwxyz\";\n    $alpha2 = substr($alpha,\
    \ 0, 2);\n    $alpha3 = substr($alpha, 2, 2);\n    $alpha4 = substr($alpha, 4,\
    \ 2);\n    $alpha5 = substr($alpha, 6, 2);\n    $alpha6 = substr($alpha, 8, 2);\n\
    \    $alpha7 = substr($alpha, 10, 2);\n\n    $s = strtolower($s);\n    $s = str_replace(\"\
    a\", \"\", $s);\n    $s = str_replace(\"o\", \"oe\", $s);\n    $s = str_replace(\"\
    e\", \"ee\", $s);\n    $s = str_replace(\"i\", \"ie\", $s);\n    $s = str_replace(\"\
    h\", \"h\", $s);\n    $s = str_replace(\"j\", \"k\", $s);\n    $s = str_replace(\"\
    l\", \"l\", $s);\n    $s = str_replace(\"q\", \"q\", $s);\n    $s = str_replace(\"\
    z\", \"z\", $s);\n    $s = str_replace(\"x\", \"x\", $s);\n    $s = str_replace(\"\
    t\", \"t\", $s);\n    $s = str_replace(\"v\", \"v\", $s);\n    $s = str_replace(\"\
    b\", \"b\", $s);\n    $s = str_replace(\"n\", \"n\", $s);\n    $s = str_replace(\"\
    m\", \"m\", $s);\n\n    return $alpha7 . $s . $alpha5 . $s . $alpha4 . $s . $alpha3\
    \ . $s . $alpha2 . $s . $alpha;\n}\n", "  // Create a variable for the encrypted\
    \ string\n  $encrypted = '';\n  // For each character in the string\n  for ($i\
    \ = 0; $i < strlen($s); $i++) {\n    // If the letter is in the alphabet\n   \
    \ if (array_key_exists($s[$i], $alphabet)) {\n      // Add to encrypted string\
    \ an extra two letters to shift down the letter\n      $encrypted .= $alphabet[$s[$i]]\
    \ . \n      $alphabet[$s[$i]] .\n      $alphabet[$s[$i]];\n    }\n  }\n  return\
    \ $encrypted;\n}", "  $alphabet = array(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"0\", \"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\");\n  $size = strlen($s);\n\
    \  $rotated_alphabet = array();\n  for($i = 0; $i < $size; $i++) {\n    $rotated_alphabet[]\
    \ = $alphabet[($size - $i) % $size];\n  }\n  return strtr($s, $rotated_alphabet);\n\
    }\n", "    return strtr($s, $alphabet);\n}\n", "    $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    $res = \"\";\n    $len = strlen($s);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        $res .= substr($alphabet, strpos($alphabet, strtoupper($s[$i])) +\
    \ 2, 1) . $s[$i];\n    }\n    return $res;\n}\n", "  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $alphabet = str_split($alphabet);\n  sort($alphabet);\n  $new = '';\n  foreach\
    \ (str_split($s) as $c) {\n    $index = strpos($alphabet, $c);\n    $new .= substr($alphabet,\
    \ --$index, 1) . substr($alphabet, $index, 1);\n  }\n  return $new;\n}", "\t\n\
    \t// Create a string consisting of 26 letters \n\t$alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n\t\n\t// Use for loop to shift each letter down by two places\n\tfor($i=0;\
    \ $i < 26; $i++){\n\t\t$newAlphabet[] = $alphabet[$i];\n\t\t$newAlphabet[] = $alphabet[$i];\n\
    \t}\n\t\n\t// Use array_search to find the position of each letter in alphabet\n\
    \t$newAlphabet = array_search($alphabet, $alphabet);\n\t\n\t// Use for loop to\
    \ reverse the alphabet twice\n\tfor($i=0; $i < 26; $i++){\n\t\t$newAlphabet[$i]\
    \ = $newAlphabet[$i];\n\t\t$newAlphabet[$i] = $newAlphabet[$i];\n\t}\n\t\n\t//\
    \ Use $newAlphabet to encrypt the string\n\t$ciphertext = \"\";\n\tfor($i=0; $i\
    \ < strlen($s); $i++){\n\t\t$ciphertext .= $newAlphabet[ord($s[$i]) - ord(\"a\"\
    )];\n\t}\n\treturn $ciphertext;\n}\n", "  global $alphabet;\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz'.\n\
    \               'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\n               '0123456789!@#%^&*()[]{}<>';\n\
    \  return substr(strtr($s,$alphabet),0,strlen($alphabet));\n}\n", "  $alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz';\n  $alphabet = str_split($alphabet);\n  $s =\
    \ str_split($s);\n  $x = str_split($s);\n  $i = 0;\n  $y = str_split($alphabet);\n\
    \  $z = str_split($alphabet);\n  $alphabet = '';\n  while ($i < count($alphabet))\
    \ {\n    $alphabet[$i] = $alphabet[$i] . $alphabet[$i];\n    $alphabet[$y[$i]]\
    \ = $alphabet[$y[$i]] . $alphabet[$y[$i]];\n    $alphabet[$z[$i]] = $alphabet[$z[$i]]\
    \ . $alphabet[$z[$i]];\n    $i++;\n    $y[$i] = $y[$i] . $y[$i];\n    $z[$i] =\
    \ $z[$i] . $z[$i];\n  }\n  return str_replace($alphabet, '', $s);\n}\n", "   \
    \ $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    $alphabet2 = $alphabet.$alphabet.$alphabet.$alphabet;\n\
    \    $alphabet3 = $alphabet.$alphabet2.$alphabet;\n    $alphabet4 = $alphabet3.$alphabet3;\n\
    \    $alphabet5 = $alphabet4.$alphabet4;\n\n    $len = strlen($s);\n\n    $newstr\
    \ = \"\";\n    for($i = 0; $i < $len; $i++) {\n        $char = $s[$i];\n     \
    \   $newstr .= $alphabet[(int)$char + ($i << 2)];\n    }\n\n    return $newstr;\n\
    }", "    // Write your code here\n}", "    $rot = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    $rot1 = $rot;\n    $rot2 = substr($rot, 0, 1);\n    $rot3 = $rot1;\n  \
    \  $rot4 = substr($rot, 1, 1);\n    $rot5 = $rot1;\n    $rot6 = substr($rot, 2,\
    \ 1);\n    $rot7 = $rot;\n    $rot8 = $rot1;\n    $rot9 = substr($rot, 3, 1);\n\
    \    $rot10 = substr($rot, 4, 1);\n    $rot11 = $rot1;\n    $rot12 = substr($rot,\
    \ 5, 1);\n    $rot13 = $rot1;\n    $rot14 = $rot;\n    $rot15 = $rot1;\n    \n\
    \    $str = $s;\n    $str1 = str_split($str);\n    $str2 = $str1;\n    $str3 =\
    \ $str2;\n    \n    \n    foreach ($str1 as $k => $v){\n        $str1[$k] = $rot7($rot14($rot3($rot4($rot5($rot6($rot11($rot13($rot12($rot7($rot10($rot9($rot8($rot15($rot1($rot2))))))));\n\
    \    }\n    \n    foreach ($str3 as $k => $v){\n        $str3[$k] = $rot7($rot14($rot3($rot4($rot5($rot6($rot11($rot13($rot12($rot7($rot10($rot9($rot15($rot1))))))));\n\
    \    }\n    \n    \n    foreach ($str2 as $k => $v){\n        $str2[$k] = $rot7($rot14($rot3($rot4($rot5($rot6($rot11($rot13($rot12($rot7($rot10($rot9($rot15))))))))));\n\
    \    }\n    \n    \n    foreach ($str3 as $k => $v){\n        $str3[$k] = $rot7($rot14($rot3($rot4($rot5($rot6($rot11($rot13($rot12($rot7($rot10($rot9)))))))));\n\
    \    }\n    \n    \n    foreach ($str2 as $k => $v){\n        $str2[$k] = $rot7($rot14($rot3($rot4($rot5($rot6($rot11($rot13($rot12($rot7($rot10($rot9)))))))));\n\
    \    }\n    \n", "    $alphabet = str_split(str_shuffle('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n\
    \    shuffle($alphabet);\n    $alphabet = array_slice($alphabet, 0, 6);\n    $letters\
    \ = array_map(function($x) { return chr(ord($x) + 2); }, $alphabet);\n    $s =\
    \ strtr($s, $letters);\n    $s = substr($s, 0, 6);\n    return $s;\n}\n", "  //\
    \ Rotate the alphabet by two multiplied to the right by two places.\n  $rotate\
    \ = ord('z') - ord('a') + 1;\n  // Return the alphabet of $s rotated $rotate times\n\
    \  return str_rot13(str_rot13($s), $rotate);\n}", "    $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    $alphabet2 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    $len = strlen($s);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        $key = $alphabet[$i] . $alphabet2[$i];\n\
    \        $s[$i] = $alphabet[ord($s[$i]) + 2];\n        $s[$i] = $alphabet[ord($s[$i])\
    \ + 1];\n        $s[$i] = $alphabet[$i];\n    }\n    return $s;\n}", "    $alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz';\n    $alphabet = str_split($alphabet);\n   \
    \ foreach($alphabet as $index => $value) {\n        $alphabet[$index] = $alphabet[$index+1]\
    \ . $alphabet[$index];\n    }\n    $s = str_split($s);\n    $new_s = '';\n   \
    \ foreach($s as $key => $value) {\n        $new_s .= $alphabet[array_search($value,\
    \ $alphabet)]\n    }\n    return $new_s;\n}", "  $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  $alphabet2 = \"bcdfghjklmnpqrstvwxyz\";\n  $alphabet3 = \"ghijklmnopqrstuvwxyzbcdf\"\
    ;\n  $result = '';\n  $shift = 2;\n  $len = strlen($s);\n  for ($i=0; $i<$len;\
    \ $i++) {\n    $result = $alphabet[$i%strlen($alphabet)] . $alphabet2[$i%strlen($alphabet2)]\
    \ . $alphabet3[$i%strlen($alphabet3)] . $result;\n  }\n  return $result;\n}\n",
  "    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    $alphabet = strrev($alphabet);\n\
    \    $rotated_alphabet = rotate($alphabet);\n    return $rotated_alphabet;\n}",
  "    $s = preg_replace('/([aeiou])([aeiou])/', '$1 $2', $s);\n    $s = preg_replace('/([aeiou])([aeiou])/',\
    \ '$1 $2', $s);\n    return $s;\n}", "  $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  $alphabet = str_split($alphabet);\n  $alphabet = array_merge($alphabet, array_reverse($alphabet));\n\
    \  $alphabet = implode($alphabet);\n  $len = strlen($s);\n  $rotations = ceil(log($len)\
    \ / log(2));\n  $result = \"\";\n  for ($i = 0; $i < $rotations; $i++) {\n   \
    \ $pos = $i * log(2) + $len;\n    $key = $alphabet.substr($alphabet, $pos);\n\
    \    $result += chr(ord($s[$pos]) - $key);\n  }\n  return $result;\n}\n", "  \
    \  $alphabet = str_repeat(\"z\", strlen(\"abcdefghijklmnopqrstuvwxyz\"));\n  \
    \  $alphabet = str_replace(array(\"a\", \"b\", \"c\"), array(\"\", \"\", \"\"\
    ), $alphabet);\n    $alphabet = str_replace(array(\"z\"), array(\"y\"), $alphabet);\n\
    \    $alphabet = str_replace(array(\"i\"), array(\"j\"), $alphabet);\n    return\
    \ $alphabet;\n}\n", "    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    $rotated_alphabet\
    \ = rotate($alphabet, 2);\n    $result = \"\";\n\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $result .= $rotated_alphabet[ord($s[$i]) - 1];\n    }\n\n \
    \   return $result;\n}\n", "    \n    $alphabet = array(\"a\",\"b\",\"c\",\"d\"\
    ,\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\"\
    ,\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n    $rotated_alphabet\
    \ = array(\"z\",\"y\",\"x\",\"w\",\"v\",\"u\",\"t\",\"s\",\"r\",\"q\",\"p\",\"\
    o\",\"n\",\"m\",\"l\",\"k\",\"j\",\"i\",\"h\",\"g\",\"f\",\"e\",\"d\",\"c\",\"\
    b\",\"a\");\n    \n    $len = strlen($s);\n    \n    // shift alphabet down by\
    \ two for both sides\n    for ($i=0; $i<$len; $i+=2)\n        $alphabet[$alphabet[$i]]\
    \ = $alphabet[$i+1];\n    \n    // shift rotated alphabet down by two for both\
    \ sides\n    for ($i=0; $i<$len; $i+=2)\n        $rotated_alphabet[$rotated_alphabet[$i]]\
    \ = $rotated_alphabet[$i+1];\n    \n    // shift text down by two for both sides\n\
    \    for ($i=0; $i<$len; $i++)\n        $alphabet[$alphabet[$i]] = $alphabet[$i+1];\n\
    \    \n    // shift text down by two for both sides\n    for ($i=0; $i<$len; $i++)\n\
    \        $rotated_alphabet[$rotated_alphabet[$i]] = $rotated_alphabet[$i+1];\n\
    \    \n    // shift text down by two for both sides\n    for ($i=0; $i<$len; $i++)\n\
    \        $s[$i] = $s[$i+1];\n    \n    return str_ireplace($alphabet,$rotated_alphabet,$s);\n\
    }\n", "    // Initialize result with empty string.\n    $result = \"\";\n\n  \
    \  // Iterate over each letter in the string\n    // Shift every letter 2 places\
    \ to the right.\n    for($i=0; $i<strlen($s); $i++) {\n        $result .= substr($s,\
    \ $i, 1) . substr($s, $i, 1);\n    }\n\n    // Return the encrypted string.\n\
    \    return $result;\n}\n", "    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\
    \    return $s . strtr($alphabet, array_combine(str_split($alphabet), str_split(strrev($alphabet))));\n\
    }", "    $new_s = \"\";\n    $m = strlen($s);\n    for ($i = 0; $i < $m; $i++)\
    \ {\n        $a = $s[$i];\n        $n = floor($i / 2);\n        $new_a =  $s[$n];\n\
    \        $new_b =  $s[$n - 1];\n        $new_s += $new_a + $new_b;\n    }\n  \
    \  return $new_s;\n}\n", "    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  \
    \  $s = str_replace(\" \", \"\", $s);\n    $s = str_replace(array(\"!\", \"#\"\
    , \"$\", \"%\", \"&\", \"'\", \"(\", \")\"), \"\", $s);\n    $s = strtolower($s);\n\
    \    $s = str_replace($alphabet, array_flip($alphabet), $s);\n    $s = str_replace(array(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"), $alphabet, $s);\n    return $s;\n}", "    $s = str_replace(\"\
    \ \", \"\", $s);\n    $s = strtoupper($s);\n    $s = strtr($s, $alpha);\n    $s\
    \ = $s . \"\\0\";\n    for($i = 1; $i < strlen($s); $i++) {\n        if(substr($s,\
    \ $i, 1) != \"\\0\") {\n            $alpha[$i % strlen($alpha)] .= \"\\0\";\n\
    \        }\n    }\n    $s = substr($s, 0, -1) . \"\\0\";\n    $s = strtr($s, $alpha);\n\
    \    return $s;\n}\n", "    $alpha = \"abcdefghijklmnopqrstuvwxyz\";\n    $alpha\
    \ = strrev($alpha);\n    $alpha[0] = \"z\";\n    $alpha[$alpha.length - 1] = \"\
    y\";\n    $alpha = strrev($alpha);\n\n    $n = 0;\n    $s = strrev($s);\n    foreach(str_split($s)\
    \ as $c) {\n        $n = $n * 26;\n        $d = substr($alpha, $n, 1);\n     \
    \   $n = $n + 1;\n        $c = chr($n % 26 + ord($d));\n        $s = strrev($s);\n\
    \    }\n    return $s;\n}\n", "    $alphabet = array(\"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\");\n    $keyLength = strlen($s);\n    $keyLength = $keyLength\
    \ / 2;\n    $s = strrev($s);\n    $newKey = $alphabet[$keyLength];\n    $newKey\
    \ = substr($newKey, 0, strrpos($newKey, \"z\"));\n    return $newKey.substr($s,\
    \ 0, $keyLength).$newKey.substr($s, $keyLength);\n}", "    $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    $result = \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n        $c\
    \ = $s[$i];\n        $index = array_search($c, $alphabet);\n        $result +=\
    \ $alphabet[(++$index) % strlen($alphabet)];\n    }\n    return $result;\n}\n",
  "\t$alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\t$alphabet = substr($alphabet,\
    \ -1, 1);\n\t$alphabet = substr($alphabet, 0, strlen($alphabet) - 1);\n\t\n\t\n\
    \t// Create a string consisting of only '$s' repeated '$key' times.\n\t$key =\
    \ strlen($s);\n\t$key = str_pad($key, $key, \"a\");\n\t$key = substr($key, 0,\
    \ -1);\n\t\n\t$result = \"\";\n\t\n\tfor ($i = 0; $i < $key; $i++) {\n\t\t$result\
    \ .= substr($s, $i, 1) . $alphabet;\n\t}\n\t\n\treturn $result;\n}", "  $alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n  $alphabet = $alphabet . \"z\"; // Shift\
    \ alphabet two places.\n  $r = str_split($s);\n  $r2 = array();\n  foreach($r\
    \ as $v) {\n    $r2[strval((ord($v) + ord($alphabet[0])) / 2)] = $v;\n  }\n  return\
    \ implode('', $r2);\n}", "    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  \
    \  $result = \"\";\n    $size = strlen($s);\n    for ($i = 0; $i < $size; $i++)\
    \ {\n        $result .= substr($alphabet, floor($alphabet[$i] + 2), 1);\n    }\n\
    \    return $result;\n}", "  $alphabet = array(\"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n\
    \  $alphabet = array_combine($alphabet, $alphabet);\n  $alphabet = array_flip($alphabet);\n\
    \  $alphabet = array_shift($alphabet);\n  return strtr($s, $alphabet);\n}\n",
  "  // Create a string of the alphabet to be rotated.\n  $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  // Initialize the return string to \"\".\n  $res = \"\";\n  // Iterate through\
    \ each character of the string.\n  for($i = 0; $i < strlen($s); $i++) {\n    //\
    \ Get the current character.\n    $c = substr($s, $i, 1);\n    // Get the rotated\
    \ character.\n    $c = $alphabet[$alphabet[strlen($alphabet) - $i] + 2];\n   \
    \ // Add the rotated character to the return string.\n    $res .= $c;\n  }\n \
    \ // Return the return string.\n  return $res;\n}\n", "  $alphabet = str_split('abcdefghijklmnopqrstuvwxyz');\n\
    \  $rotated_alphabet = rotateArray($alphabet);\n  $rotated_alphabet = array_reverse($rotated_alphabet);\n\
    \  return str_ireplace($alphabet, $rotated_alphabet, $s);\n}", "    $alphabet\
    \ = array_merge($alphabet, $alphabet);\n    $s = str_replace(\" \", \"\", $s);\n\
    \    $s = str_replace(\"\\n\", \"\", $s);\n    \n    $s = strtolower($s);\n  \
    \  $s = str_replace($alphabet, \"\", $s);\n    \n    $s = $s . \"z\";\n    $s\
    \ = str_split($s);\n    \n    array_walk($s, \"rotate\");\n    \n    return implode(\"\
    \", $s);\n}\n", "    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    $s = str_split($s);\n\
    \    $result = \"\";\n    foreach ($s as $char) {\n        $new = $alphabet[(strlen($alphabet)-$char+2)%26];\n\
    \        $result .= $new;\n    }\n    return $result;\n}\n", "    $alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n    $alphabet = str_split($alphabet);\n   \
    \ $encrypted = \"\";\n    foreach (str_split($s) as $c) {\n        $c = $alphabet[$c\
    \ % strlen($alphabet)];\n        $encrypted .= $c;\n    }\n    return $encrypted;\n\
    }\n", "    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    return $alphabet[array_search(substr($s,0,1),$alphabet)+2]\
    \ . $alphabet[array_search(substr($s,1,1),$alphabet)] . $alphabet[array_search(substr($s,2,1),$alphabet)+2]\
    \ . $alphabet[array_search(substr($s,3,1),$alphabet)] . $alphabet[array_search(substr($s,4,1),$alphabet)+2]\
    \ . $alphabet[array_search(substr($s,5,1),$alphabet)] . $alphabet[array_search(substr($s,6,1),$alphabet)+2]\
    \ . $alphabet[array_search(substr($s,7,1),$alphabet)] . $alphabet[array_search(substr($s,8,1),$alphabet)+2]\
    \ . $alphabet[array_search(substr($s,9,1),$alphabet)] . $alphabet[array_search(substr($s,10,1),$alphabet)+2]\
    \ . $alphabet[array_search(substr($s,11,1),$alphabet)] . $alphabet[array_search(substr($s,12,1),$alphabet)+2]\
    \ . $alphabet[array_search(substr($s,13,1),$alphabet)] . $alphabet[array_search(substr($s,14,1),$alphabet)+2]\
    \ . $alphabet[array_search(substr($s,15,1),$alphabet)] . $alphabet[array_search(substr($s,16,1),$alphabet)+2]\
    \ . $alphabet[array_search(substr($s,17,1),$alphabet)] . $alphabet[array_search(substr($s,18,1),$alphabet)+2]\
    \ . $alphabet[array_search(substr($s,19,1),$alphabet)] . $alphabet[array_search(substr($s,20,1),$alphabet)+2]\
    \ . $alphabet[array_search(substr($s,21,1),$alphabet)] . $alphabet[array_search(substr($s,22,1),$alphabet)+2]\
    \ . $alphabet[array_search(substr($s,23,1),$alphabet)] . $alphabet[array_search(substr($s,24,1),$alphabet)+2]\
    \ . $alphabet[array_search(substr($s,25,1),$alphabet)] . $alphabet[array_search(substr($s,26,1),$alphabet)+2]\
    \ . $alphabet[array_search(substr($s,27,1),$alphabet)] . $alphabet[array_search(substr($s,28,1),$alphabet)+2]\
    \ . $alphabet[array_search(substr($s,29,1),$alphabet)] . $alphabet[array_search(substr($s,30,1),$alphabet)+2];\n\
    }", "    $alphabet = str_split('abcdefghijklmnopqrstuvwxyz');\n    $shift = 3;\n\
    \    $key = str_split($alphabet);\n    array_multisort($alphabet, SORT_DESC, $key);\n\
    \    array_multisort($shift, SORT_DESC, $key);\n    return implode(array_slice($key,\
    \ 0, 2));\n}\n", "  $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  $sAlphabet\
    \ = $alphabet;\n  $sAlphabet[] = \"\";\n  $result = \"\";\n  for ($i=0; $i<strlen($s);\
    \ $i++) {\n    $result .= $alphabet[($alphabet.ord($s[$i]) - 2) % strlen($alphabet)];\n\
    \  }\n  return $result;\n}\n", "  // Use a lookup table to rotate the characters\
    \ by their ASCII values.\n  // This should produce a rotated alphabet of the same\
    \ length as $s.\n  $rotated = array();\n  foreach (str_split($s) as $char) {\n\
    \    $rotated[(ord($char) - 64) * 2] = $char;\n    $rotated[(ord($char) - 64)\
    \ * 2 + 1] = $char;\n  }\n  return implode('', $rotated);\n}\n", "    $alphabet\
    \ = str_split('abcdefghijklmnopqrstuvwxyz');\n    $result = '';\n    $length =\
    \ strlen($s);\n    for ($i = 0; $i < $length; $i++) {\n        $key = $alphabet[$i\
    \ % strlen($alphabet)];\n        $result += $key . rotate($s[$i]) . $key;\n  \
    \  }\n    return $result;\n}\n", "    $alphabet = array('h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \    $newAlphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \    $length = strlen($s);\n    $newString = '';\n    for ($i = 0; $i < $length;\
    \ $i++) {\n        $newString .= $newAlphabet[$alphabet[$s[$i]] - 2];\n    }\n\
    \    return $newString;\n}\n", "    $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    $alphabet = str_split($alphabet, 2);\n    $rotated_alphabet = array();\n\
    \    foreach($alphabet as $letter) {\n        $rotated_alphabet[] = substr($letter,\
    \ -1, 1) . \"a\" . substr($letter, 0, 1);\n    }\n    return strtr($s, $rotated_alphabet);\n\
    }\n", "    return substr($s, 0, 1) .\n        substr($s, 1, 1) .\n        substr($s,\
    \ 2, 1) .\n        substr($s, 3, 1) .\n        substr($s, 4, 1) .\n        substr($s,\
    \ 5, 1) .\n        substr($s, 6, 1) .\n        substr($s, 7, 1) .\n        substr($s,\
    \ 8, 1) .\n        substr($s, 9, 1) .\n        substr($s, 10, 1) .\n        substr($s,\
    \ 11, 1) .\n        substr($s, 12, 1);\n}", "    return implode(\"\", (\n    \
    \    $s[(ord($s[0]) - ord(\"a\") + 2) * 2],\n        $s[(ord($s[0]) - ord(\"a\"\
    ) + 2) * 2 + 1],\n        $s[(ord($s[0]) - ord(\"a\") + 2) * 2 + 2],\n       \
    \ $s[(ord($s[0]) - ord(\"a\") + 2) * 2 + 3],\n        $s[(ord($s[0]) - ord(\"\
    a\") + 2) * 2 + 4],\n        $s[(ord($s[0]) - ord(\"a\") + 2) * 2 + 5],\n    \
    \    $s[(ord($s[0]) - ord(\"a\") + 2) * 2 + 6],\n        $s[(ord($s[0]) - ord(\"\
    a\") + 2) * 2 + 7],\n        $s[(ord($s[0]) - ord(\"a\") + 2) * 2 + 8],\n    \
    \    $s[(ord($s[0]) - ord(\"a\") + 2) * 2 + 9],\n        $s[(ord($s[0]) - ord(\"\
    a\") + 2) * 2 + 10]\n    ));\n}", "  return $s . rotate(strlen($s));\n}\n", " \
    \   // The alphabet should be rotated in a manner such that the letters \n   \
    \ // shift down by two multiplied to two places.\n    $alphabet = str_split(strtoupper($s));\n\
    \    shuffle($alphabet);\n    array_unshift($alphabet, \"@\");\n    shuffle($alphabet);\n\
    \    array_unshift($alphabet, \"\");\n    shuffle($alphabet);\n    $s = implode(\"\
    \", $alphabet);\n    return $s;\n}\n", "    $alphabet =  'abcdefghijklmnopqrstuvwxyz';\
    \ // choose an alphabet not in the string\n    // rotate the letters in the alphabet\
    \ by two positions to ensure the \n    // letter shifts down by two positions.\n\
    \    $alphabet = strrev($alphabet);\n    $alphabet = strrev($alphabet);\n    $alphabet\
    \ = strrev($alphabet);\n    $alphabet = strrev($alphabet);\n    $alphabet = strrev($alphabet);\n\
    \    $alphabet = strrev($alphabet);\n    $alphabet = strrev($alphabet);\n    $alphabet\
    \ = strrev($alphabet);\n    $alphabet = strrev($alphabet);\n    $alphabet = strrev($alphabet);\n\
    \    $alphabet = strrev($alphabet);\n    $alphabet = strrev($alphabet);\n    $alphabet\
    \ = strrev($alphabet);\n    $alphabet = strrev($alphabet);\n    $alphabet = strrev($alphabet);\n\
    \    $alphabet = strrev($alphabet);\n    $alphabet = strrev($alphabet);\n    $alphabet\
    \ = strrev($alphabet);\n    $alphabet = strrev($alphabet);\n    $alphabet = strrev($alphabet);\n\
    \    $alphabet = strrev($alphabet);\n    $alphabet = strrev($alphabet);\n    $alphabet\
    \ = strrev($alphabet);\n    $alphabet = strrev($alphabet);\n    $alphabet = strrev($alphabet);\n\
    \    $alphabet = strrev($alphabet);\n    $alphabet = strrev($alphabet);\n    $alphabet\
    \ = strrev($alphabet);\n    $alphabet = strrev($alphabet);\n    $alphabet = strrev($alphabet);\n\
    \    $alphabet = strrev($alphabet);\n    $alphabet = strrev($alphabet);\n    $alphabet\
    \ = strrev($alphabet);\n    $alphabet = strrev($alphabet);\n    $alphabet = strrev($alphabet);\n\
    \    $alphabet = strrev($alphabet);\n    $alphabet = strrev($alphabet);\n    $alphabet\
    \ = strrev($alphabet);\n    $alphabet = strrev($alphabet);\n    $alphabet = strrev($alphabet);\n\
    \    $alphabet = strrev($alphabet);\n    $alphabet = strrev($alphabet);\n    $alphabet\
    \ = strrev($alphabet);\n    $alphabet = strrev($alphabet);\n    $alphabet = strrev($alphabet);\n\
    \    $alphabet = strrev($alphabet);\n    $alphabet = strrev($alphabet);\n    $alphabet\
    \ = strrev($alphabet);\n    $alphabet = strrev($alphabet);\n    $alphabet = strrev($alphabet);\n\
    \    $alphabet = strrev($alphabet);\n    $alphabet = ", "    // YOUR CODE HERE\
    \ \n}\n", "    $alpha = \"abcdefghijklmnopqrstuvwxyz\";\n    $c = count($alpha);\n\
    \    $t = strlen($s);\n    $result = \"\";\n    // $c-- because the first letter\
    \ is rotated down by one\n    for ($i=0; $i<$t; $i++) {\n        for ($j=0; $j<$c;\
    \ $j++) {\n            $result .= substr($alpha,($j + $c) % $c,1);\n        }\n\
    \        $result .= substr($s,$i,1);\n    }\n    return $result;\n}\n</code>\n\
    <|/ a |>\n<| a tags=encryption,php,math,python,caesar-cipher dscore=0 |>\nI wrote\
    \ this function for Python 3, which I believe is correct:\n<code>\ndef rot13(text):\n\
    \    alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    alphaDict = dict(zip(alpha, alpha[26:]\
    \ + alpha[:26]))\n    alpha = alpha[:26]\n    rotated = \"\"\n    for char in\
    \ text:\n        if char not in alphaDict:\n            rotated += char\n    \
    \    else:\n            rotated += alphaDict[char]\n    return rotated\n</code>\n\
    <|/ a |>\n<| a tags=encryption,php,math,python,caesar-cipher |>\nI came here looking\
    \ for my Python 3 Caesar cipher (my code was based on this answer).\n<code>\n\
    def rot13(c):\n    return ''.join([chr(((ord(c) - ord('a') + 13) % 26 + ord('a')))\
    \ for c in c])\n</code>\nThe % 26 + ord('a')) part rotates the alphabet 13 places.\
    \ If you want the alphabet to start with a different letter just swap ord('a')\
    \ with ord(letter).\n<|/ a dscore=0 |>\n<| c |>\nThe `ord()` is not necessary\
    \ in Python 3 because `str` objects are already ordinals.\n<|/ c |>\n<| a dscore=0\
    \ |>\nThis is my solution based on https://stackoverflow.com/a/17506079/2910188\
    \ and\nhttps://stackoverflow.com/a/17506079/2910188\n\n<code>\nclass Rot13Cipher:\n\
    \    ALPHABET = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    ALPHABET_ROT_13 = \"NOPQRSTUVWXYZABCDEFGHIJKLM\"\
    \n    \n    def encode(self, string):\n        string = string.upper()\n     \
    \   coded_string = ''\n        \n        for char in string:\n            coded_string\
    \ += self._encode(char)", "    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n \
    \   $newAlphabet = \"nopqrstuvwxyzabcdefghijklm\";\n    $s = $newAlphabet.str_replace($alphabet,\
    \ $newAlphabet, $s);\n    return $s;\n}", "    $alphabet = array('a', 'b', 'c',\
    \ 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',\
    \ 't', 'u', 'v', 'w', 'x', 'y', 'z');\n    $len = strlen($s);\n    $new_alphabet\
    \ = array();\n    $new_alphabet[$alphabet[(int)$alphabet[$len - 1] - 1]] = $alphabet[0];\n\
    \    for($i = 1; $i < $len; ++$i) {\n        $new_alphabet[$alphabet[$len - $i\
    \ - 1]] .= $alphabet[$len - $i - 1];\n    }\n    $new_alphabet[$alphabet[$len\
    \ - $i - 1]] = $alphabet[$len - $i - 1];\n    return implode($new_alphabet, str_split($s));\n\
    }\n</code>\n<|/ a dscore=2 tags=encryption,php,mcrypt,security |>\n<| a |>\nI\
    \ used the above code and added some encryption to it. First i created a function\
    \ that would encrypt a string and return the encrypted string. Then i created\
    \ a function that would decrypt the encrypted string and return the original string.\n\
    <code>", "    // Create a variable called alphabet. \n    // This variable will\
    \ hold a list of all of the letters in the alphabet. \n    // The alphabet should\
    \ start with the letter 'e'.\n    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\
    \    // Create a variable called result. This variable will hold the encrypted\
    \ string.\n    $result = \"\";\n    // Create a variable called letter. This variable\
    \ will hold the letter of the encrypted string.\n    $letter = $s;\n    // Create\
    \ a variable called shift. This variable will hold the number of times the letter\
    \ will be shifted down by one from the alphabet.\n    $shift = 2;\n    // Create\
    \ a variable called index. This variable will hold the index of the alphabet we\
    \ are currently looking at. \n    // We need to start at 0 because the first letter\
    \ in the alphabet is \"e\".\n    $index = 0;\n    // Create a variable called\
    \ length. This variable will hold the length of the string. \n    $length = strlen($s);\n\
    \    // This while loop will loop through the length of the string. \n    // We\
    \ will use a for loop for this.\n    for($i = 0; $i < $length; $i++) {\n     \
    \   // If the current letter in the string is equal to the current letter of the\
    \ alphabet we are currently looking at, \n        // then increment the index.\
    \ We want to skip the current letter of the alphabet.\n        if($letter == $alphabet[$index])\
    \ {\n            $index++;\n        }\n        // If the current letter in the\
    \ string is different than the letter we are currently looking at, \n        //\
    \ then we would like to increase the index of our alphabet by one and set that\
    \ letter as the current letter of the alphabet.\n        else {\n            //\
    \ Increase the index\n            $index++;\n            // Set the letter of\
    \ the current alphabet to the current letter of the alphabet we are currently\
    \ looking at.\n            $letter = $alphabet[$index];\n        }\n        //\
    \ The if statement below is checking if the letter is equal to the letter we are\
    \ currently looking at. \n        // If it is, then we would like to add our letter\
    \ to the end of the encrypted string.\n        // The else statement below is\
    \ checking to see if the letter is different. If the letter is different, \n \
    \       // then we would like to shift the current letter down by two letters.\n\
    \        // Finally, the else statement below is checking to see if the index\
    \ is out of bounds.\n        if($letter == $alphabet[$index]) {\n            $result\
    \ .= $letter;\n        } else {\n            $result .= substr($alphabet, $index,\
    \ $shift);\n        }\n    }\n    // After all the letters have been added to\
    \ the end of the encrypted string, we want to remove the last letter \n    //\
    \ from the encrypted string.\n    $result = substr($result, 0, -1);\n    // Return\
    \ the encrypted string.\n    return $result;\n}", "    // Encrypt the string using\
    \ the 'rot13' method. \n    return str_rot13(encrypt($s));\n}\n", "  $alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  $rotated_alphabet\
    \ = rotate($alphabet, 2);\n  return strtr($s, $rotated_alphabet);\n}\n", "   \
    \ $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    $len = strlen($s);\n    $rotatedAlphabet\
    \ = rotate($alphabet, 2);\n    $encryptedString = \"\";\n    for ($i = 0; $i <\
    \ $len; $i++) {\n        $encryptedString .= $rotatedAlphabet[$alphabet{$s[$i]}];\
    \ \n    }\n    return $encryptedString;\n}\n", "    $alphabet = array('a', 'b',\
    \ 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\
    \ 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n    $l = strlen($s);\n    $rotated_alphabet\
    \ = array_flip($alphabet);\n    $encrypted = \"\";\n    for($i = 0; $i < $l; $i++)\
    \ {\n        $encrypted .= $alphabet[$rotated_alphabet[ord($s[$i])]];\n    }\n\
    \    return $encrypted;\n}\n", "    $alphabet = array(\"a\",\"b\",\"c\",\"d\"\
    ,\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\"\
    ,\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n    $length = strlen($s);\n\
    \    $output = \"\";\n    for($i = 0;$i < $length;$i++){\n        $output .= $alphabet[($alphabet[$i]-2)*2\
    \ +$alphabet[$i]];\n    }\n    return $output;\n}", "  // Shift letters down by\
    \ two multiplied to two places \n  $alphabet = 'abcdefghijklmnopqrstuvwxyz'; \n\
    \  $encrypted = strrev($alphabet); \n  $rotated = substr($encrypted, 0, 2); \n\
    \  $decrypted = $alphabet . $rotated; \n  \n  // Shift letters up by two multiplied\
    \ to two places \n  $rotated2 = substr($alphabet, 1); \n  $decrypted = $rotated\
    \ . $decrypted; \n  $decrypted = $rotated2 . $decrypted; \n  return $decrypted;\
    \ \n} \n  ", "  $letters = array_merge(array('a', 'b', 'c', 'd', 'e', 'f', 'g',\
    \ 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',\
    \ 'x', 'y', 'z'), array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',\
    \ 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'));\n\
    \  $rotation = strlen($letters) - 1;\n  return strtr($s, array_combine($letters,\
    \ $letters));\n}", "    $alphabet = str_split('abcdefghijklmnopqrstuvwxyz');\n\
    \    $alphabet = array_splice($alphabet, 0, 6);\n    return implode('', array_map('chr',\
    \ array_map('hexdec', array_map('chr', $alphabet))));\n}\n", "    $alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n    $alphabet = substr($alphabet, 0, strlen($alphabet)\
    \ - 2);\n    $alphabet = substr($alphabet, 0, strlen($alphabet) - 1);\n    return\
    \ $alphabet[$s + ($alphabet[strlen($alphabet) - 1] << 1) + 2];\n}\n", "    $rot\
    \ = \"ghjklnp\"; // Alphabet to rotate\n    $rot2 = array_flip($rot); // Rotate\
    \ it so letters shift down by two multiplied to two places\n    $c = $rot2[$s];\n\
    \    $c = substr($c,0,1) . $c;\n    $c = substr($c,1,1) . $c;\n    $c = substr($c,2,1)\
    \ . $c;\n    return $c;\n}\n", "    $cipher = \"\";\n    $codeAlphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    $keyAlphabet = \"abcdefghjklmnopqrstuvwxyz\";\n    $code = str_split($s,\
    \ 1);\n    foreach($code as $letter) {\n        if($letter == 'z') {\n       \
    \     $letter = substr($codeAlphabet, 0, 1);\n        }\n        $cipher = $cipher\
    \ . $letter;\n        $key = $letter;\n        $keyIndex = strpos($keyAlphabet,\
    \ $letter);\n        for($i = 0; $i < 2; $i++) {\n            $key = substr($keyAlphabet,\
    \ $keyIndex + $i, 1);\n            $keyIndex++;\n        }\n        $cipher =\
    \ $cipher . $key;\n    }\n    return $cipher;\n}\n", "    $alphabet = str_split('abcdefghijklmnopqrstuvwxyz');\n\
    \    $rotated_alphabet = array_reverse($alphabet);\n    $rotated_alphabet[] =\
    \ $alphabet[0];\n    return strtr($s, $rotated_alphabet);\n}\n", "    \n    $alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    \n    // Rotate each character of the\
    \ string by multiplying by 2 to the power \n    // of the index of the character\
    \ in the alphabet. \n    $rotate_alphabet = str_split($alphabet);\n    foreach\
    \ ($rotate_alphabet as $k => $char) {\n        $rotate_alphabet[$k] = $rotate_alphabet[$k]\
    \ * strlen($char);\n    }\n\n    $rotate_alphabet =  implode($rotate_alphabet);\n\
    \    \n    return strtr($s, $alphabet, $rotate_alphabet);\n}\n", "  global $alphabet;\n\
    \  $e = 0; // encryption variable\n  $t = \"\"; // temporary variable\n  for ($c\
    \ = 0; $c < strlen($s); $c++) {\n    $t .= $alphabet[((int) $alphabet[(int) $alphabet[$c]]\
    \ + $e) % 26];\n  }\n  return $t;\n}", "    $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    $alphabetLength = strlen($alphabet);\n    $alphabetShift = 2;\n    $rotated\
    \ = str_rot13($s);\n    $newAlphabet = str_rot13($alphabet);\n    $newAlphabetLength\
    \ = strlen($newAlphabet);\n    $len = strlen($s);\n    $result = \"\";\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        $char = substr($rotated, $i, 1);\n    \
    \    $key = $char;\n        for ($j = 0; $j < $newAlphabetLength; $j++) {\n  \
    \          $newKey = $newAlphabet[$j];\n            if ($char == $newKey) {\n\
    \                $key += $alphabetShift;\n            }\n        }\n        $result\
    \ += $key;\n    }\n    return $result;\n}\n", "    $rot = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    $s = str_replace(\" \",\"\", $s);\n    $s = str_replace(\"\\n\",\"\", $s);\n\
    \    for($i=0;$i<strlen($s);$i++) {\n        $s = substr($s,0,$i). $rot . substr($s,$i+1,strlen($s));\n\
    \    }\n    return $s;\n}", "  $n = strlen($s);\n  $t = str_split($s);\n  for\
    \ ($i = 0; $i < $n; ++$i) {\n    $t[$i] = substr($alphabet, $t[$i], 1);\n  }\n\
    \  $str = array_slice($t, 0, -1) + $t[strlen($t) - 1];\n  return implode('', $t);\n\
    }\n", "  // Build an array with 26 letters \n  // and 26 numbers\n  $letters =\
    \ array();\n  $numbers = array();\n\n  for($i=0; $i<strlen($s); $i++) {\n    $letter\
    \ = substr($s, $i, 1);\n    $number = $i;\n    // Rotate letters by two to the\
    \ left (to produce a new letter)\n    while($letters[$letter] > 0) {\n      $letter\
    \ = substr($s, $i, 1);\n      $number++;\n    }\n    $letter = $letter + chr(($letters\
    \ - $number) % 26);\n    // Rotate numbers by two to the left (to produce a new\
    \ number)\n    while($numbers[$number] > 0) {\n      $number = $number + 1;\n\
    \    }\n    $numbers[$number] = $number;\n    // Assign letters and numbers to\
    \ array\n    $letters[$letter] = $letters[$letter] + 1;\n    $numbers[$number]\
    \ = $numbers[$number] + 1;\n  }\n  return implode('', $letters);\n}\n", "    $alphabet\
    \ = range('a', 'z');\n\n    return implode(array_map(function($i) use ($alphabet)\
    \ {\n        return $alphabet[$i] . $alphabet[($i + 1) % 26];\n    }, $s)) . $alphabet[count($alphabet)\
    \ - 1];\n}\n", "    $alphabet = array('h','t','t','h','a','s','e','s','g','f','k','j','l','m','l','o','p');\n\
    \    $rotated_alphabet = array('t','h','g','f','s','k','j','l','o','p','a','s','e','h','t','g','f','k','j','l','m','l','o','p');\n\
    \    $s = strtolower($s);\n    $res = \"\";\n    $len = strlen($s);\n    $i =\
    \ 0;\n    for($c = 0; $c < $len; $c++) {\n        $l = $alphabet[$s[$c]];\n  \
    \      $r = $rotated_alphabet[$l];\n        $res .= $r;\n        $i++;\n    }\n\
    \    return $res;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is great. Thanks for sharing\
    \ the code. I've been working on this for quite a while now and have been able\
    \ to do what I wanted it to do.\n<|/ c |>\n<| a tags=string,php,encryption |>\n\
    I have solved this problem myself and thought I should post it here in case anyone\
    \ else has this issue too.\n<code>\n<?php", "  return implode(\"\", (array_map(function($v){return\
    \ array_shift(str_split($v,2));}, str_split($s,2))));\n}", "    $r = array();\n\
    \    foreach(str_split($s) as $c)\n        $r[] = $c == '@' ? \"q\" : chr(ord('@')\
    \ + 2);\n    return join('', array_map(function($c) {\n        return chr(ord($c)\
    \ - 2 ^ 2);\n    }, $r));\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
